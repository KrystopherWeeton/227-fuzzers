* Bug 20 -- False positive

  Last two pixels are always initialized
  
** Sys' Output
   #+begin_src llvm
Stack uninit bug
Name "vpx_post_proc_down_and_across_mb_row_c_187"
in
Name "vpx_post_proc_down_and_across_mb_row_c"
[UnName 7,UnName 11,UnName 24,UnName 97,UnName 182]
"/home/s/git/firefox_ll_files/deblock.ll-O2_p"
on line
9
   #+end_src
   
** Source
   #+begin_src c++
void vpx_post_proc_down_and_across_mb_row_c(unsigned char *src,
                                            unsigned char *dst, int src_pitch,
                                            int dst_pitch, int cols,
                                            unsigned char *flimits, int size) {
  unsigned char *p_src, *p_dst;
  int row;
  int col;
  unsigned char v;
  unsigned char d[4]; // %8

  assert(size >= 8);
  assert(cols >= 8);

  for (row = 0; row < size; row++) {
    /* post_proc_down for one row */
    p_src = src;
    p_dst = dst;

    for (col = 0; col < cols; col++) {
      unsigned char p_above2 = p_src[col - 2 * src_pitch];
      unsigned char p_above1 = p_src[col - src_pitch];
      unsigned char p_below1 = p_src[col + src_pitch];
      unsigned char p_below2 = p_src[col + 2 * src_pitch];

      v = p_src[col];

      if ((abs(v - p_above2) < flimits[col]) &&
          (abs(v - p_above1) < flimits[col]) &&
          (abs(v - p_below1) < flimits[col]) &&
          (abs(v - p_below2) < flimits[col])) {
        unsigned char k1, k2, k3;
        k1 = (p_above2 + p_above1 + 1) >> 1;
        k2 = (p_below2 + p_below1 + 1) >> 1;
        k3 = (k1 + k2 + 1) >> 1;
        v = (k3 + v + 1) >> 1;
      }

      p_dst[col] = v;
    }

    /* now post_proc_across */
    p_src = dst;
    p_dst = dst;

    p_src[-2] = p_src[-1] = p_src[0];
    p_src[cols] = p_src[cols + 1] = p_src[cols - 1];

    for (col = 0; col < cols; col++) {
      v = p_src[col];

      if ((abs(v - p_src[col - 2]) < flimits[col]) &&
          (abs(v - p_src[col - 1]) < flimits[col]) &&
          (abs(v - p_src[col + 1]) < flimits[col]) &&
          (abs(v - p_src[col + 2]) < flimits[col])) {
        unsigned char k1, k2, k3;
        k1 = (p_src[col - 2] + p_src[col - 1] + 1) >> 1;
        k2 = (p_src[col + 2] + p_src[col + 1] + 1) >> 1;
        k3 = (k1 + k2 + 1) >> 1;
        v = (k3 + v + 1) >> 1;
      }

      d[col & 3] = v;

      if (col >= 2) p_dst[col - 2] = d[(col - 2) & 3];
    }

    /* handle the last two pixels */
    p_dst[col - 2] = d[(col - 2) & 3]; // %187, always initialized from the last loop
    p_dst[col - 1] = d[(col - 1) & 3];

    /* next row */
    src += src_pitch;
    dst += dst_pitch;
  }
}
   #+end_src

** Bitcode
   
#+begin_src llvm

...
182:                                              ; preds = %179, %97
  %183 = phi i32 [ 0, %97 ], [ %4, %179 ], !dbg !202
  call void @llvm.dbg.value(metadata i32 %183, metadata !38, metadata !DIExpression()), !dbg !67
  %184 = add nsw i32 %183, -2, !dbg !203
  %185 = and i32 %184, 3, !dbg !204
  %186 = zext i32 %185 to i64, !dbg !205
  %187 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 %186, !dbg !205
...

#+end_src
