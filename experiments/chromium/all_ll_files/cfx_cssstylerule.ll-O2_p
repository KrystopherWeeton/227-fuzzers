; ModuleID = '../../third_party/pdfium/core/fxcrt/css/cfx_cssstylerule.cpp'
source_filename = "../../third_party/pdfium/core/fxcrt/css/cfx_cssstylerule.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_CSSStyleRule = type { %class.CFX_CSSDeclaration, %"class.std::__1::vector.9" }
%class.CFX_CSSDeclaration = type { %"class.std::__1::vector", %"class.std::__1::vector.1" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.std::__1::unique_ptr.3"*, %"class.std::__1::unique_ptr.3"*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::unique_ptr.3" = type opaque
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::unique_ptr.3"* }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { %"class.std::__1::unique_ptr.11"*, %"class.std::__1::unique_ptr.11"*, %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %class.CFX_CSSSelector* }
%class.CFX_CSSSelector = type { i8, i32, %"class.std::__1::unique_ptr.11" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.std::__1::unique_ptr.11"* }

@_ZN16CFX_CSSStyleRuleC1Ev = hidden unnamed_addr alias void (%class.CFX_CSSStyleRule*), void (%class.CFX_CSSStyleRule*)* @_ZN16CFX_CSSStyleRuleC2Ev
@_ZN16CFX_CSSStyleRuleD1Ev = hidden unnamed_addr alias void (%class.CFX_CSSStyleRule*), void (%class.CFX_CSSStyleRule*)* @_ZN16CFX_CSSStyleRuleD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CFX_CSSStyleRuleC2Ev(%class.CFX_CSSStyleRule*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_CSSStyleRule, %class.CFX_CSSStyleRule* %0, i64 0, i32 0
  tail call void @_ZN18CFX_CSSDeclarationC1Ev(%class.CFX_CSSDeclaration* %2) #8
  %3 = getelementptr inbounds %class.CFX_CSSStyleRule, %class.CFX_CSSStyleRule* %0, i64 0, i32 1
  %4 = bitcast %"class.std::__1::vector.9"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #8
  ret void
}

declare void @_ZN18CFX_CSSDeclarationC1Ev(%class.CFX_CSSDeclaration*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CFX_CSSStyleRuleD2Ev(%class.CFX_CSSStyleRule*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_CSSStyleRule, %class.CFX_CSSStyleRule* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.std::__1::unique_ptr.11"*, %"class.std::__1::unique_ptr.11"** %3, align 8
  %5 = icmp eq %"class.std::__1::unique_ptr.11"* %4, null
  br i1 %5, label %26, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.std::__1::unique_ptr.11"* %4 to i8*
  %8 = getelementptr inbounds %class.CFX_CSSStyleRule, %class.CFX_CSSStyleRule* %0, i64 0, i32 1, i32 0, i32 1
  %9 = load %"class.std::__1::unique_ptr.11"*, %"class.std::__1::unique_ptr.11"** %8, align 8
  %10 = icmp eq %"class.std::__1::unique_ptr.11"* %9, %4
  br i1 %10, label %24, label %11

11:                                               ; preds = %6, %19
  %12 = phi %"class.std::__1::unique_ptr.11"* [ %13, %19 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr.11", %"class.std::__1::unique_ptr.11"* %12, i64 -1
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr.11", %"class.std::__1::unique_ptr.11"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = load %class.CFX_CSSSelector*, %class.CFX_CSSSelector** %14, align 8
  store %class.CFX_CSSSelector* null, %class.CFX_CSSSelector** %14, align 8
  %16 = icmp eq %class.CFX_CSSSelector* %15, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %11
  tail call void @_ZN15CFX_CSSSelectorD1Ev(%class.CFX_CSSSelector* nonnull %15) #8
  %18 = getelementptr inbounds %class.CFX_CSSSelector, %class.CFX_CSSSelector* %15, i64 0, i32 0
  tail call void @_ZdlPv(i8* %18) #9
  br label %19

19:                                               ; preds = %17, %11
  %20 = icmp eq %"class.std::__1::unique_ptr.11"* %13, %4
  br i1 %20, label %21, label %11

21:                                               ; preds = %19
  %22 = bitcast %"class.std::__1::vector.9"* %2 to i8**
  %23 = load i8*, i8** %22, align 8
  br label %24

24:                                               ; preds = %21, %6
  %25 = phi i8* [ %23, %21 ], [ %7, %6 ]
  store %"class.std::__1::unique_ptr.11"* %4, %"class.std::__1::unique_ptr.11"** %8, align 8
  tail call void @_ZdlPv(i8* %25) #9
  br label %26

26:                                               ; preds = %1, %24
  %27 = getelementptr inbounds %class.CFX_CSSStyleRule, %class.CFX_CSSStyleRule* %0, i64 0, i32 0
  tail call void @_ZN18CFX_CSSDeclarationD1Ev(%class.CFX_CSSDeclaration* %27) #8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN18CFX_CSSDeclarationD1Ev(%class.CFX_CSSDeclaration*) unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK16CFX_CSSStyleRule18CountSelectorListsEv(%class.CFX_CSSStyleRule* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.CFX_CSSStyleRule, %class.CFX_CSSStyleRule* %0, i64 0, i32 1
  %3 = getelementptr inbounds %class.CFX_CSSStyleRule, %class.CFX_CSSStyleRule* %0, i64 0, i32 1, i32 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr.11"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.9"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  ret i64 %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %class.CFX_CSSSelector* @_ZNK16CFX_CSSStyleRule15GetSelectorListEi(%class.CFX_CSSStyleRule* nocapture readonly, i32) local_unnamed_addr #3 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.CFX_CSSStyleRule, %class.CFX_CSSStyleRule* %0, i64 0, i32 1, i32 0, i32 0
  %5 = load %"class.std::__1::unique_ptr.11"*, %"class.std::__1::unique_ptr.11"** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::unique_ptr.11", %"class.std::__1::unique_ptr.11"* %5, i64 %3, i32 0, i32 0, i32 0
  %7 = load %class.CFX_CSSSelector*, %class.CFX_CSSSelector** %6, align 8
  ret %class.CFX_CSSSelector* %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %class.CFX_CSSDeclaration* @_ZN16CFX_CSSStyleRule14GetDeclarationEv(%class.CFX_CSSStyleRule* readnone) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.CFX_CSSStyleRule, %class.CFX_CSSStyleRule* %0, i64 0, i32 0
  ret %class.CFX_CSSDeclaration* %2
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN16CFX_CSSStyleRule11SetSelectorEPNSt3__16vectorINS0_10unique_ptrI15CFX_CSSSelectorNS0_14default_deleteIS3_EEEENS0_9allocatorIS6_EEEE(%class.CFX_CSSStyleRule* nocapture, %"class.std::__1::vector.9"* nocapture) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %class.CFX_CSSStyleRule, %class.CFX_CSSStyleRule* %0, i64 0, i32 1
  %4 = bitcast %"class.std::__1::vector.9"* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.9"* %1 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %4, align 8
  store i64 %5, i64* %6, align 8
  %8 = getelementptr inbounds %class.CFX_CSSStyleRule, %class.CFX_CSSStyleRule* %0, i64 0, i32 1, i32 0, i32 1
  %9 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %1, i64 0, i32 0, i32 1
  %10 = bitcast %"class.std::__1::unique_ptr.11"** %8 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::unique_ptr.11"** %9 to i64*
  %13 = load i64, i64* %12, align 8
  store i64 %13, i64* %10, align 8
  store i64 %11, i64* %12, align 8
  %14 = getelementptr inbounds %class.CFX_CSSStyleRule, %class.CFX_CSSStyleRule* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %15 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::unique_ptr.11"** %14 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.std::__1::unique_ptr.11"** %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %16, align 8
  store i64 %17, i64* %18, align 8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN15CFX_CSSSelectorD1Ev(%class.CFX_CSSSelector*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
