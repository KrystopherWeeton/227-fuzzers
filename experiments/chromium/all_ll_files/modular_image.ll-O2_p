; ModuleID = '../../third_party/libjxl/src/lib/jxl/modular/modular_image.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/modular/modular_image.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::Image" = type <{ %"class.std::__1::vector", %"class.std::__1::vector.4", i64, i64, i32, i32, i64, i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.jxl::Channel"*, %"class.jxl::Channel"*, %"class.std::__1::__compressed_pair.1" }
%"class.jxl::Channel" = type { %"class.jxl::Plane", i64, i64, i32, i32, i32, i32 }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.jxl::Channel"* }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %"class.jxl::Transform"*, %"class.jxl::Transform"*, %"class.std::__1::__compressed_pair.13" }
%"class.jxl::Transform" = type <{ %"class.jxl::Fields", i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.6", i32, i32, i8, i8, [6 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"*, %"class.std::__1::__compressed_pair.8" }
%"struct.jxl::SqueezeParams" = type <{ %"class.jxl::Fields", i8, i8, [2 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.jxl::SqueezeParams"* }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.jxl::Transform"* }
%"struct.jxl::weighted::Header" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32, i32, i32, [4 x i32] }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.jxl::Visitor" = type { i32 (...)** }

$_ZNK3jxl9Transform4NameEv = comdat any

$_ZN3jxl9TransformD2Ev = comdat any

$_ZN3jxl9TransformD0Ev = comdat any

$_ZN3jxl9Transform11VisitFieldsEPNS_7VisitorE = comdat any

$_ZN3jxl6FieldsD2Ev = comdat any

$_ZN3jxl13SqueezeParamsD0Ev = comdat any

$_ZNK3jxl13SqueezeParams4NameEv = comdat any

$_ZN3jxl13SqueezeParams11VisitFieldsEPNS_7VisitorE = comdat any

$_ZNSt3__16vectorIN3jxl13SqueezeParamsENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl9TransformENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_ = comdat any

$_ZNSt3__16vectorIN3jxl7ChannelENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_ = comdat any

$_ZTVN3jxl9TransformE = comdat any

$_ZTVN3jxl13SqueezeParamsE = comdat any

@_ZTVN3jxl9TransformE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Transform"*)* @_ZN3jxl9TransformD2Ev to i8*), i8* bitcast (void (%"class.jxl::Transform"*)* @_ZN3jxl9TransformD0Ev to i8*), i8* bitcast (i8* (%"class.jxl::Transform"*)* @_ZNK3jxl9Transform4NameEv to i8*), i8* bitcast (i32 (%"class.jxl::Transform"*, %"class.jxl::Visitor"*)* @_ZN3jxl9Transform11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@_ZTVN3jxl13SqueezeParamsE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::SqueezeParams"*)* @_ZN3jxl13SqueezeParamsD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::SqueezeParams"*)* @_ZNK3jxl13SqueezeParams4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::SqueezeParams"*, %"class.jxl::Visitor"*)* @_ZN3jxl13SqueezeParams11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.3 = private unnamed_addr constant [14 x i8] c"SqueezeParams\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"Transform\00", align 1

@_ZN3jxl5ImageC1Emmii = hidden unnamed_addr alias void (%"class.jxl::Image"*, i64, i64, i32, i32), void (%"class.jxl::Image"*, i64, i64, i32, i32)* @_ZN3jxl5ImageC2Emmii
@_ZN3jxl5ImageC1Ev = hidden unnamed_addr alias void (%"class.jxl::Image"*), void (%"class.jxl::Image"*)* @_ZN3jxl5ImageC2Ev
@_ZN3jxl5ImageD1Ev = hidden unnamed_addr alias void (%"class.jxl::Image"*), void (%"class.jxl::Image"*)* @_ZN3jxl5ImageD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3jxl7Channel14compute_minmaxEPiS1_(%"class.jxl::Channel"* nocapture readonly, i32*, i32*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %25, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 0, i32 0, i32 4
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 0
  %15 = add i64 %13, -8
  %16 = lshr i64 %15, 3
  %17 = add nuw nsw i64 %16, 1
  %18 = icmp ult i64 %13, 8
  %19 = and i64 %13, -8
  %20 = and i64 %17, 1
  %21 = icmp eq i64 %16, 0
  %22 = sub nuw nsw i64 %17, %20
  %23 = icmp eq i64 %20, 0
  %24 = icmp eq i64 %13, %19
  br label %29

25:                                               ; preds = %136, %3
  %26 = phi i32 [ 2147483647, %3 ], [ %137, %136 ]
  %27 = phi i32 [ -2147483648, %3 ], [ %138, %136 ]
  %28 = icmp eq i32* %1, null
  br i1 %28, label %154, label %153

29:                                               ; preds = %7, %136
  %30 = phi i64 [ 0, %7 ], [ %139, %136 ]
  %31 = phi i32 [ -2147483648, %7 ], [ %138, %136 ]
  %32 = phi i32 [ 2147483647, %7 ], [ %137, %136 ]
  %33 = mul i64 %11, %30
  %34 = getelementptr inbounds i8, i8* %9, i64 %33
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #8
  %38 = bitcast i8* %34 to i32*
  br i1 %14, label %136, label %39

39:                                               ; preds = %29
  br i1 %18, label %40, label %44

40:                                               ; preds = %113, %39
  %41 = phi i64 [ 0, %39 ], [ %19, %113 ]
  %42 = phi i32 [ %31, %39 ], [ %135, %113 ]
  %43 = phi i32 [ %32, %39 ], [ %126, %113 ]
  br label %141

44:                                               ; preds = %39
  %45 = insertelement <4 x i32> undef, i32 %31, i32 0
  %46 = shufflevector <4 x i32> %45, <4 x i32> undef, <4 x i32> zeroinitializer
  %47 = insertelement <4 x i32> undef, i32 %32, i32 0
  %48 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> zeroinitializer
  br i1 %21, label %88, label %49

49:                                               ; preds = %44, %49
  %50 = phi i64 [ %85, %49 ], [ 0, %44 ]
  %51 = phi <4 x i32> [ %83, %49 ], [ %46, %44 ]
  %52 = phi <4 x i32> [ %84, %49 ], [ %46, %44 ]
  %53 = phi <4 x i32> [ %79, %49 ], [ %48, %44 ]
  %54 = phi <4 x i32> [ %80, %49 ], [ %48, %44 ]
  %55 = phi i64 [ %86, %49 ], [ %22, %44 ]
  %56 = getelementptr inbounds i32, i32* %38, i64 %50
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 64
  %59 = getelementptr inbounds i32, i32* %56, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 16
  %62 = icmp slt <4 x i32> %58, %53
  %63 = icmp slt <4 x i32> %61, %54
  %64 = select <4 x i1> %62, <4 x i32> %58, <4 x i32> %53
  %65 = select <4 x i1> %63, <4 x i32> %61, <4 x i32> %54
  %66 = icmp sgt <4 x i32> %58, %51
  %67 = icmp sgt <4 x i32> %61, %52
  %68 = select <4 x i1> %66, <4 x i32> %58, <4 x i32> %51
  %69 = select <4 x i1> %67, <4 x i32> %61, <4 x i32> %52
  %70 = or i64 %50, 8
  %71 = getelementptr inbounds i32, i32* %38, i64 %70
  %72 = bitcast i32* %71 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 32
  %74 = getelementptr inbounds i32, i32* %71, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  %76 = load <4 x i32>, <4 x i32>* %75, align 16
  %77 = icmp slt <4 x i32> %73, %64
  %78 = icmp slt <4 x i32> %76, %65
  %79 = select <4 x i1> %77, <4 x i32> %73, <4 x i32> %64
  %80 = select <4 x i1> %78, <4 x i32> %76, <4 x i32> %65
  %81 = icmp sgt <4 x i32> %73, %68
  %82 = icmp sgt <4 x i32> %76, %69
  %83 = select <4 x i1> %81, <4 x i32> %73, <4 x i32> %68
  %84 = select <4 x i1> %82, <4 x i32> %76, <4 x i32> %69
  %85 = add i64 %50, 16
  %86 = add i64 %55, -2
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %49, !llvm.loop !2

88:                                               ; preds = %49, %44
  %89 = phi <4 x i32> [ undef, %44 ], [ %79, %49 ]
  %90 = phi <4 x i32> [ undef, %44 ], [ %80, %49 ]
  %91 = phi <4 x i32> [ undef, %44 ], [ %83, %49 ]
  %92 = phi <4 x i32> [ undef, %44 ], [ %84, %49 ]
  %93 = phi i64 [ 0, %44 ], [ %85, %49 ]
  %94 = phi <4 x i32> [ %46, %44 ], [ %83, %49 ]
  %95 = phi <4 x i32> [ %46, %44 ], [ %84, %49 ]
  %96 = phi <4 x i32> [ %48, %44 ], [ %79, %49 ]
  %97 = phi <4 x i32> [ %48, %44 ], [ %80, %49 ]
  br i1 %23, label %113, label %98

98:                                               ; preds = %88
  %99 = getelementptr inbounds i32, i32* %38, i64 %93
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 32
  %102 = getelementptr inbounds i32, i32* %99, i64 4
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 16
  %105 = icmp sgt <4 x i32> %104, %95
  %106 = select <4 x i1> %105, <4 x i32> %104, <4 x i32> %95
  %107 = icmp sgt <4 x i32> %101, %94
  %108 = select <4 x i1> %107, <4 x i32> %101, <4 x i32> %94
  %109 = icmp slt <4 x i32> %104, %97
  %110 = select <4 x i1> %109, <4 x i32> %104, <4 x i32> %97
  %111 = icmp slt <4 x i32> %101, %96
  %112 = select <4 x i1> %111, <4 x i32> %101, <4 x i32> %96
  br label %113

113:                                              ; preds = %88, %98
  %114 = phi <4 x i32> [ %89, %88 ], [ %112, %98 ]
  %115 = phi <4 x i32> [ %90, %88 ], [ %110, %98 ]
  %116 = phi <4 x i32> [ %91, %88 ], [ %108, %98 ]
  %117 = phi <4 x i32> [ %92, %88 ], [ %106, %98 ]
  %118 = icmp slt <4 x i32> %114, %115
  %119 = select <4 x i1> %118, <4 x i32> %114, <4 x i32> %115
  %120 = shufflevector <4 x i32> %119, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %121 = icmp slt <4 x i32> %119, %120
  %122 = select <4 x i1> %121, <4 x i32> %119, <4 x i32> %120
  %123 = shufflevector <4 x i32> %122, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %124 = icmp slt <4 x i32> %122, %123
  %125 = select <4 x i1> %124, <4 x i32> %122, <4 x i32> %123
  %126 = extractelement <4 x i32> %125, i32 0
  %127 = icmp sgt <4 x i32> %116, %117
  %128 = select <4 x i1> %127, <4 x i32> %116, <4 x i32> %117
  %129 = shufflevector <4 x i32> %128, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %130 = icmp sgt <4 x i32> %128, %129
  %131 = select <4 x i1> %130, <4 x i32> %128, <4 x i32> %129
  %132 = shufflevector <4 x i32> %131, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %133 = icmp sgt <4 x i32> %131, %132
  %134 = select <4 x i1> %133, <4 x i32> %131, <4 x i32> %132
  %135 = extractelement <4 x i32> %134, i32 0
  br i1 %24, label %136, label %40

136:                                              ; preds = %141, %113, %29
  %137 = phi i32 [ %32, %29 ], [ %126, %113 ], [ %148, %141 ]
  %138 = phi i32 [ %31, %29 ], [ %135, %113 ], [ %150, %141 ]
  %139 = add nuw i64 %30, 1
  %140 = icmp ult i64 %139, %5
  br i1 %140, label %29, label %25

141:                                              ; preds = %40, %141
  %142 = phi i64 [ %151, %141 ], [ %41, %40 ]
  %143 = phi i32 [ %150, %141 ], [ %42, %40 ]
  %144 = phi i32 [ %148, %141 ], [ %43, %40 ]
  %145 = getelementptr inbounds i32, i32* %38, i64 %142
  %146 = load i32, i32* %145, align 4
  %147 = icmp slt i32 %146, %144
  %148 = select i1 %147, i32 %146, i32 %144
  %149 = icmp sgt i32 %146, %143
  %150 = select i1 %149, i32 %146, i32 %143
  %151 = add nuw i64 %142, 1
  %152 = icmp ult i64 %151, %13
  br i1 %152, label %141, label %136, !llvm.loop !4

153:                                              ; preds = %25
  store i32 %26, i32* %1, align 4
  br label %154

154:                                              ; preds = %25, %153
  %155 = icmp eq i32* %2, null
  br i1 %155, label %157, label %156

156:                                              ; preds = %154
  store i32 %27, i32* %2, align 4
  br label %157

157:                                              ; preds = %154, %156
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl5Image15undo_transformsERKNS_8weighted6HeaderEiPNS_10ThreadPoolE(%"class.jxl::Image"*, %"struct.jxl::weighted::Header"* dereferenceable(56), i32, %"class.jxl::ThreadPool"*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.jxl::Transform", align 8
  %6 = icmp eq i32 %2, -2
  br i1 %6, label %209, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 1, i32 0, i32 1
  %10 = bitcast %"class.jxl::Transform"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector.4"* %8 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = sdiv exact i64 %14, 72
  %16 = trunc i64 %15 to i32
  %17 = icmp sle i32 %16, %2
  %18 = icmp eq i64 %14, 0
  %19 = or i1 %18, %17
  br i1 %19, label %136, label %20

20:                                               ; preds = %7
  %21 = bitcast %"class.jxl::Transform"* %5 to i8*
  %22 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %5, i64 0, i32 0, i32 0
  %23 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %5, i64 0, i32 1
  %24 = bitcast i32* %23 to i8*
  %25 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %5, i64 0, i32 7
  %26 = bitcast %"class.std::__1::vector.6"* %25 to i8*
  %27 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %5, i64 0, i32 7, i32 0, i32 1
  %28 = bitcast %"struct.jxl::SqueezeParams"** %27 to i8**
  %29 = bitcast %"class.std::__1::vector.6"* %25 to i8**
  %30 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %5, i64 0, i32 7, i32 0, i32 2, i32 0, i32 0
  %31 = bitcast %"struct.jxl::SqueezeParams"** %27 to i64*
  %32 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %5, i64 0, i32 8
  %33 = bitcast i32* %32 to i8*
  %34 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %25, i64 0, i32 0, i32 0
  %35 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %5, i64 0, i32 1
  %36 = bitcast i32* %35 to i8*
  br label %37

37:                                               ; preds = %20, %127
  %38 = phi i64 [ %11, %20 ], [ %128, %127 ]
  %39 = inttoptr i64 %38 to %"class.jxl::Transform"*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %21) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 -86, i64 64, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %40 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %39, i64 -1, i32 1
  %41 = bitcast i32* %40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %41, i64 24, i1 false) #8
  %42 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %39, i64 -1, i32 7
  call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 24, i1 false) #8
  %43 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %39, i64 -1, i32 7, i32 0, i32 1
  %44 = bitcast %"struct.jxl::SqueezeParams"** %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = bitcast %"class.std::__1::vector.6"* %42 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = sub i64 %45, %47
  %49 = sdiv exact i64 %48, 24
  %50 = icmp eq i64 %48, 0
  br i1 %50, label %77, label %51

51:                                               ; preds = %37
  %52 = icmp ugt i64 %49, 768614336404564650
  br i1 %52, label %53, label %55

53:                                               ; preds = %51
  %54 = bitcast %"class.std::__1::vector.6"* %25 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %54) #9
  unreachable

55:                                               ; preds = %51
  %56 = call i8* @_Znwm(i64 %48) #10
  %57 = bitcast i8* %56 to %"struct.jxl::SqueezeParams"*
  store i8* %56, i8** %28, align 8
  store i8* %56, i8** %29, align 8
  %58 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %57, i64 %49
  store %"struct.jxl::SqueezeParams"* %58, %"struct.jxl::SqueezeParams"** %30, align 8
  %59 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %42, i64 0, i32 0, i32 0
  %60 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %59, align 8
  %61 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %43, align 8
  %62 = ptrtoint i8* %56 to i64
  %63 = icmp eq %"struct.jxl::SqueezeParams"* %60, %61
  br i1 %63, label %75, label %64

64:                                               ; preds = %55, %64
  %65 = phi %"struct.jxl::SqueezeParams"* [ %71, %64 ], [ %57, %55 ]
  %66 = phi %"struct.jxl::SqueezeParams"* [ %70, %64 ], [ %60, %55 ]
  %67 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %65, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13SqueezeParamsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %67, align 8
  %68 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %65, i64 0, i32 1
  %69 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %66, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 12, i1 false) #8
  %70 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %66, i64 1
  %71 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %65, i64 1
  %72 = icmp eq %"struct.jxl::SqueezeParams"* %70, %61
  br i1 %72, label %73, label %64

73:                                               ; preds = %64
  %74 = ptrtoint %"struct.jxl::SqueezeParams"* %71 to i64
  br label %75

75:                                               ; preds = %73, %55
  %76 = phi i64 [ %62, %55 ], [ %74, %73 ]
  store i64 %76, i64* %31, align 8
  br label %77

77:                                               ; preds = %37, %75
  %78 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %39, i64 -1, i32 8
  %79 = bitcast i32* %78 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %79, i64 10, i1 false) #8
  %80 = call i32 @_ZN3jxl9Transform7InverseERNS_5ImageERKNS_8weighted6HeaderEPNS_10ThreadPoolE(%"class.jxl::Transform"* nonnull %5, %"class.jxl::Image"* dereferenceable(104) %0, %"struct.jxl::weighted::Header"* dereferenceable(56) %1, %"class.jxl::ThreadPool"* %3) #8
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %102, label %82

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 9
  store i8 1, i8* %83, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %84 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %34, align 8
  %85 = icmp eq %"struct.jxl::SqueezeParams"* %84, null
  br i1 %85, label %101, label %86

86:                                               ; preds = %82
  %87 = bitcast %"struct.jxl::SqueezeParams"* %84 to i8*
  %88 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %27, align 8
  %89 = icmp eq %"struct.jxl::SqueezeParams"* %88, %84
  br i1 %89, label %99, label %90

90:                                               ; preds = %86, %90
  %91 = phi %"struct.jxl::SqueezeParams"* [ %92, %90 ], [ %88, %86 ]
  %92 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %91, i64 -1
  %93 = bitcast %"struct.jxl::SqueezeParams"* %92 to void (%"struct.jxl::SqueezeParams"*)***
  %94 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %93, align 8
  %95 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %94, align 8
  call void %95(%"struct.jxl::SqueezeParams"* %92) #8
  %96 = icmp eq %"struct.jxl::SqueezeParams"* %92, %84
  br i1 %96, label %97, label %90

97:                                               ; preds = %90
  %98 = load i8*, i8** %29, align 8
  br label %99

99:                                               ; preds = %97, %86
  %100 = phi i8* [ %98, %97 ], [ %87, %86 ]
  store %"struct.jxl::SqueezeParams"* %84, %"struct.jxl::SqueezeParams"** %27, align 8
  call void @_ZdlPv(i8* %100) #10
  br label %101

101:                                              ; preds = %82, %99
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %21) #8
  br label %209

102:                                              ; preds = %77
  %103 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %9, align 8
  %104 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %103, i64 -1
  %105 = bitcast %"class.jxl::Transform"* %104 to void (%"class.jxl::Transform"*)***
  %106 = load void (%"class.jxl::Transform"*)**, void (%"class.jxl::Transform"*)*** %105, align 8
  %107 = load void (%"class.jxl::Transform"*)*, void (%"class.jxl::Transform"*)** %106, align 8
  call void %107(%"class.jxl::Transform"* %104) #8
  store %"class.jxl::Transform"* %104, %"class.jxl::Transform"** %9, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %108 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %34, align 8
  %109 = icmp eq %"struct.jxl::SqueezeParams"* %108, null
  %110 = ptrtoint %"class.jxl::Transform"* %104 to i64
  br i1 %109, label %127, label %111

111:                                              ; preds = %102
  %112 = bitcast %"struct.jxl::SqueezeParams"* %108 to i8*
  %113 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %27, align 8
  %114 = icmp eq %"struct.jxl::SqueezeParams"* %113, %108
  br i1 %114, label %124, label %115

115:                                              ; preds = %111, %115
  %116 = phi %"struct.jxl::SqueezeParams"* [ %117, %115 ], [ %113, %111 ]
  %117 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %116, i64 -1
  %118 = bitcast %"struct.jxl::SqueezeParams"* %117 to void (%"struct.jxl::SqueezeParams"*)***
  %119 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %118, align 8
  %120 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %119, align 8
  call void %120(%"struct.jxl::SqueezeParams"* %117) #8
  %121 = icmp eq %"struct.jxl::SqueezeParams"* %117, %108
  br i1 %121, label %122, label %115

122:                                              ; preds = %115
  %123 = load i8*, i8** %29, align 8
  br label %124

124:                                              ; preds = %122, %111
  %125 = phi i8* [ %123, %122 ], [ %112, %111 ]
  store %"struct.jxl::SqueezeParams"* %108, %"struct.jxl::SqueezeParams"** %27, align 8
  call void @_ZdlPv(i8* %125) #10
  %126 = load i64, i64* %10, align 8
  br label %127

127:                                              ; preds = %102, %124
  %128 = phi i64 [ %110, %102 ], [ %126, %124 ]
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %21) #8
  %129 = load i64, i64* %12, align 8
  %130 = sub i64 %128, %129
  %131 = sdiv exact i64 %130, 72
  %132 = trunc i64 %131 to i32
  %133 = icmp sle i32 %132, %2
  %134 = icmp eq i64 %130, 0
  %135 = or i1 %134, %133
  br i1 %135, label %136, label %37

136:                                              ; preds = %127, %7
  %137 = icmp eq i32 %2, 0
  br i1 %137, label %138, label %209

138:                                              ; preds = %136
  %139 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 0, i32 0, i32 1
  %140 = bitcast %"class.jxl::Channel"** %139 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = bitcast %"class.jxl::Image"* %0 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = icmp eq i64 %141, %143
  br i1 %144, label %209, label %145

145:                                              ; preds = %138
  %146 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 0, i32 0, i32 0
  %147 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 4
  %148 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 5
  br label %149

149:                                              ; preds = %145, %159
  %150 = phi i64 [ %143, %145 ], [ %160, %159 ]
  %151 = phi i64 [ %141, %145 ], [ %161, %159 ]
  %152 = phi i64 [ 0, %145 ], [ %162, %159 ]
  %153 = inttoptr i64 %150 to %"class.jxl::Channel"*
  %154 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %153, i64 %152, i32 2
  %155 = load i64, i64* %154, align 8
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %159, label %166

157:                                              ; preds = %186
  %158 = load i64, i64* %140, align 8
  br label %159

159:                                              ; preds = %157, %149
  %160 = phi i64 [ %187, %157 ], [ %150, %149 ]
  %161 = phi i64 [ %158, %157 ], [ %151, %149 ]
  %162 = add nuw i64 %152, 1
  %163 = sub i64 %161, %160
  %164 = ashr exact i64 %163, 6
  %165 = icmp ult i64 %162, %164
  br i1 %165, label %149, label %209

166:                                              ; preds = %149, %186
  %167 = phi i64 [ %187, %186 ], [ %150, %149 ]
  %168 = phi %"class.jxl::Channel"* [ %188, %186 ], [ %153, %149 ]
  %169 = phi i64 [ %189, %186 ], [ 0, %149 ]
  %170 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %168, i64 %152, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %171 = load i8*, i8** %170, align 8
  %172 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %168, i64 %152, i32 0, i32 0, i32 4
  %173 = load i64, i64* %172, align 8
  %174 = mul i64 %173, %169
  %175 = getelementptr inbounds i8, i8* %171, i64 %174
  %176 = ptrtoint i8* %175 to i64
  %177 = and i64 %176, 63
  %178 = icmp eq i64 %177, 0
  call void @llvm.assume(i1 %178) #8
  %179 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %168, i64 %152, i32 1
  %180 = load i64, i64* %179, align 8
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %186, label %182

182:                                              ; preds = %166
  %183 = bitcast i8* %175 to i32*
  br label %193

184:                                              ; preds = %193
  %185 = ptrtoint %"class.jxl::Channel"* %205 to i64
  br label %186

186:                                              ; preds = %184, %166
  %187 = phi i64 [ %185, %184 ], [ %167, %166 ]
  %188 = phi %"class.jxl::Channel"* [ %205, %184 ], [ %168, %166 ]
  %189 = add nuw i64 %169, 1
  %190 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %188, i64 %152, i32 2
  %191 = load i64, i64* %190, align 8
  %192 = icmp ult i64 %189, %191
  br i1 %192, label %166, label %157

193:                                              ; preds = %182, %193
  %194 = phi i64 [ %203, %193 ], [ 0, %182 ]
  %195 = phi i32* [ %204, %193 ], [ %183, %182 ]
  %196 = load i32, i32* %195, align 4
  %197 = load i32, i32* %147, align 8
  %198 = load i32, i32* %148, align 4
  %199 = icmp slt i32 %196, %197
  %200 = icmp sgt i32 %196, %198
  %201 = select i1 %200, i32 %198, i32 %196
  %202 = select i1 %199, i32 %197, i32 %201
  store i32 %202, i32* %195, align 4
  %203 = add nuw i64 %194, 1
  %204 = getelementptr inbounds i32, i32* %195, i64 1
  %205 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %146, align 8
  %206 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %205, i64 %152, i32 1
  %207 = load i64, i64* %206, align 8
  %208 = icmp ult i64 %203, %207
  br i1 %208, label %193, label %184

209:                                              ; preds = %159, %138, %101, %136, %4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @_ZN3jxl9Transform7InverseERNS_5ImageERKNS_8weighted6HeaderEPNS_10ThreadPoolE(%"class.jxl::Transform"*, %"class.jxl::Image"* dereferenceable(104), %"struct.jxl::weighted::Header"* dereferenceable(56), %"class.jxl::ThreadPool"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl9Transform4NameEv(%"class.jxl::Transform"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0)
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9TransformD2Ev(%"class.jxl::Transform"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7
  %4 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %3, i64 0, i32 0, i32 0
  %5 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %4, align 8
  %6 = icmp eq %"struct.jxl::SqueezeParams"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = bitcast %"struct.jxl::SqueezeParams"* %5 to i8*
  %9 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7, i32 0, i32 1
  %10 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %9, align 8
  %11 = icmp eq %"struct.jxl::SqueezeParams"* %10, %5
  br i1 %11, label %22, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"struct.jxl::SqueezeParams"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %13, i64 -1
  %15 = bitcast %"struct.jxl::SqueezeParams"* %14 to void (%"struct.jxl::SqueezeParams"*)***
  %16 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %15, align 8
  %17 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %16, align 8
  tail call void %17(%"struct.jxl::SqueezeParams"* %14) #8
  %18 = icmp eq %"struct.jxl::SqueezeParams"* %14, %5
  br i1 %18, label %19, label %12

19:                                               ; preds = %12
  %20 = bitcast %"class.std::__1::vector.6"* %3 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %7
  %23 = phi i8* [ %21, %19 ], [ %8, %7 ]
  store %"struct.jxl::SqueezeParams"* %5, %"struct.jxl::SqueezeParams"** %9, align 8
  tail call void @_ZdlPv(i8* %23) #10
  br label %24

24:                                               ; preds = %1, %22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3jxl5Image12do_transformERKNS_9TransformERKNS_8weighted6HeaderE(%"class.jxl::Image"*, %"class.jxl::Transform"* nocapture readonly dereferenceable(72), %"struct.jxl::weighted::Header"* dereferenceable(56)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.jxl::Transform", align 8
  %5 = bitcast %"class.jxl::Transform"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %4, i64 0, i32 8
  %7 = bitcast i32* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 16, i1 false)
  %8 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %4, i64 0, i32 1
  %10 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %1, i64 0, i32 1
  %11 = bitcast i32* %9 to i8*
  %12 = bitcast i32* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 24, i1 false) #8
  %13 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %4, i64 0, i32 7
  %14 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %1, i64 0, i32 7
  %15 = bitcast %"class.std::__1::vector.6"* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 24, i1 false) #8
  %16 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %1, i64 0, i32 7, i32 0, i32 1
  %17 = bitcast %"struct.jxl::SqueezeParams"** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.std::__1::vector.6"* %14 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %18, %20
  %22 = sdiv exact i64 %21, 24
  %23 = icmp eq i64 %21, 0
  %24 = inttoptr i64 %20 to %"struct.jxl::SqueezeParams"*
  %25 = inttoptr i64 %18 to %"struct.jxl::SqueezeParams"*
  br i1 %23, label %54, label %26

26:                                               ; preds = %3
  %27 = icmp ugt i64 %22, 768614336404564650
  br i1 %27, label %28, label %30

28:                                               ; preds = %26
  %29 = bitcast %"class.std::__1::vector.6"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #9
  unreachable

30:                                               ; preds = %26
  %31 = tail call i8* @_Znwm(i64 %21) #10
  %32 = bitcast i8* %31 to %"struct.jxl::SqueezeParams"*
  %33 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %4, i64 0, i32 7, i32 0, i32 1
  %34 = bitcast %"struct.jxl::SqueezeParams"** %33 to i8**
  store i8* %31, i8** %34, align 8
  %35 = bitcast %"class.std::__1::vector.6"* %13 to i8**
  store i8* %31, i8** %35, align 8
  %36 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %32, i64 %22
  %37 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %4, i64 0, i32 7, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::SqueezeParams"* %36, %"struct.jxl::SqueezeParams"** %37, align 8
  %38 = bitcast %"struct.jxl::SqueezeParams"** %33 to i64*
  %39 = ptrtoint i8* %31 to i64
  %40 = icmp eq %"struct.jxl::SqueezeParams"* %24, %25
  br i1 %40, label %52, label %41

41:                                               ; preds = %30, %41
  %42 = phi %"struct.jxl::SqueezeParams"* [ %48, %41 ], [ %32, %30 ]
  %43 = phi %"struct.jxl::SqueezeParams"* [ %47, %41 ], [ %24, %30 ]
  %44 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %42, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13SqueezeParamsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %44, align 8
  %45 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %42, i64 0, i32 1
  %46 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %43, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %45, i8* align 8 %46, i64 12, i1 false) #8
  %47 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %43, i64 1
  %48 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %42, i64 1
  %49 = icmp eq %"struct.jxl::SqueezeParams"* %47, %25
  br i1 %49, label %50, label %41

50:                                               ; preds = %41
  %51 = ptrtoint %"struct.jxl::SqueezeParams"* %48 to i64
  br label %52

52:                                               ; preds = %50, %30
  %53 = phi i64 [ %39, %30 ], [ %51, %50 ]
  store i64 %53, i64* %38, align 8
  br label %54

54:                                               ; preds = %3, %52
  %55 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %4, i64 0, i32 8
  %56 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %1, i64 0, i32 8
  %57 = bitcast i32* %55 to i8*
  %58 = bitcast i32* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* align 8 %58, i64 10, i1 false) #8
  %59 = call i32 @_ZN3jxl9Transform7ForwardERNS_5ImageERKNS_8weighted6HeaderEPNS_10ThreadPoolE(%"class.jxl::Transform"* nonnull %4, %"class.jxl::Image"* dereferenceable(104) %0, %"struct.jxl::weighted::Header"* dereferenceable(56) %2, %"class.jxl::ThreadPool"* null) #8
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %120

61:                                               ; preds = %54
  %62 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 1, i32 0, i32 1
  %63 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %62, align 8
  %64 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %65 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %64, align 8
  %66 = icmp eq %"class.jxl::Transform"* %63, %65
  br i1 %66, label %118, label %67

67:                                               ; preds = %61
  %68 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %63, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %68, align 8
  %69 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %63, i64 0, i32 1
  %70 = bitcast i32* %69 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %70, i8* align 8 %11, i64 24, i1 false) #8
  %71 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %63, i64 0, i32 7
  %72 = bitcast %"class.std::__1::vector.6"* %71 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %72, i8 0, i64 24, i1 false) #8
  %73 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %4, i64 0, i32 7, i32 0, i32 1
  %74 = bitcast %"struct.jxl::SqueezeParams"** %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast %"class.std::__1::vector.6"* %13 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = sub i64 %75, %77
  %79 = sdiv exact i64 %78, 24
  %80 = icmp eq i64 %78, 0
  br i1 %80, label %112, label %81

81:                                               ; preds = %67
  %82 = icmp ugt i64 %79, 768614336404564650
  br i1 %82, label %83, label %85

83:                                               ; preds = %81
  %84 = bitcast %"class.std::__1::vector.6"* %71 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %84) #9
  unreachable

85:                                               ; preds = %81
  %86 = call i8* @_Znwm(i64 %78) #10
  %87 = bitcast i8* %86 to %"struct.jxl::SqueezeParams"*
  %88 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %63, i64 0, i32 7, i32 0, i32 1
  %89 = bitcast %"struct.jxl::SqueezeParams"** %88 to i8**
  store i8* %86, i8** %89, align 8
  %90 = bitcast %"class.std::__1::vector.6"* %71 to i8**
  store i8* %86, i8** %90, align 8
  %91 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %87, i64 %79
  %92 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %63, i64 0, i32 7, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::SqueezeParams"* %91, %"struct.jxl::SqueezeParams"** %92, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %13, i64 0, i32 0, i32 0
  %94 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %93, align 8
  %95 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %73, align 8
  %96 = bitcast %"struct.jxl::SqueezeParams"** %88 to i64*
  %97 = ptrtoint i8* %86 to i64
  %98 = icmp eq %"struct.jxl::SqueezeParams"* %94, %95
  br i1 %98, label %110, label %99

99:                                               ; preds = %85, %99
  %100 = phi %"struct.jxl::SqueezeParams"* [ %106, %99 ], [ %87, %85 ]
  %101 = phi %"struct.jxl::SqueezeParams"* [ %105, %99 ], [ %94, %85 ]
  %102 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %100, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13SqueezeParamsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %102, align 8
  %103 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %100, i64 0, i32 1
  %104 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %101, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %103, i8* align 8 %104, i64 12, i1 false) #8
  %105 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %101, i64 1
  %106 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %100, i64 1
  %107 = icmp eq %"struct.jxl::SqueezeParams"* %105, %95
  br i1 %107, label %108, label %99

108:                                              ; preds = %99
  %109 = ptrtoint %"struct.jxl::SqueezeParams"* %106 to i64
  br label %110

110:                                              ; preds = %108, %85
  %111 = phi i64 [ %97, %85 ], [ %109, %108 ]
  store i64 %111, i64* %96, align 8
  br label %112

112:                                              ; preds = %110, %67
  %113 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %63, i64 0, i32 8
  %114 = bitcast i32* %113 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 8 %57, i64 10, i1 false) #8
  %115 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %63, i64 1
  %116 = ptrtoint %"class.jxl::Transform"* %115 to i64
  %117 = bitcast %"class.jxl::Transform"** %62 to i64*
  store i64 %116, i64* %117, align 8
  br label %120

118:                                              ; preds = %61
  %119 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 1
  call void @_ZNSt3__16vectorIN3jxl9TransformENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector.4"* %119, %"class.jxl::Transform"* nonnull dereferenceable(72) %4) #8
  br label %120

120:                                              ; preds = %118, %112, %54
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %121 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %13, i64 0, i32 0, i32 0
  %122 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %121, align 8
  %123 = icmp eq %"struct.jxl::SqueezeParams"* %122, null
  br i1 %123, label %141, label %124

124:                                              ; preds = %120
  %125 = bitcast %"struct.jxl::SqueezeParams"* %122 to i8*
  %126 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %4, i64 0, i32 7, i32 0, i32 1
  %127 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %126, align 8
  %128 = icmp eq %"struct.jxl::SqueezeParams"* %127, %122
  br i1 %128, label %139, label %129

129:                                              ; preds = %124, %129
  %130 = phi %"struct.jxl::SqueezeParams"* [ %131, %129 ], [ %127, %124 ]
  %131 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %130, i64 -1
  %132 = bitcast %"struct.jxl::SqueezeParams"* %131 to void (%"struct.jxl::SqueezeParams"*)***
  %133 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %132, align 8
  %134 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %133, align 8
  call void %134(%"struct.jxl::SqueezeParams"* %131) #8
  %135 = icmp eq %"struct.jxl::SqueezeParams"* %131, %122
  br i1 %135, label %136, label %129

136:                                              ; preds = %129
  %137 = bitcast %"class.std::__1::vector.6"* %13 to i8**
  %138 = load i8*, i8** %137, align 8
  br label %139

139:                                              ; preds = %136, %124
  %140 = phi i8* [ %138, %136 ], [ %125, %124 ]
  store %"struct.jxl::SqueezeParams"* %122, %"struct.jxl::SqueezeParams"** %126, align 8
  call void @_ZdlPv(i8* %140) #10
  br label %141

141:                                              ; preds = %120, %139
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %5) #8
  ret i1 %60
}

declare i32 @_ZN3jxl9Transform7ForwardERNS_5ImageERKNS_8weighted6HeaderEPNS_10ThreadPoolE(%"class.jxl::Transform"*, %"class.jxl::Image"* dereferenceable(104), %"struct.jxl::weighted::Header"* dereferenceable(56), %"class.jxl::ThreadPool"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl5ImageC2Emmii(%"class.jxl::Image"*, i64, i64, i32, i32) unnamed_addr #0 align 2 {
  %6 = alloca %"class.jxl::Channel", align 8
  %7 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 0
  %8 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 2
  %9 = bitcast %"class.jxl::Image"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 48, i1 false)
  store i64 %1, i64* %8, align 8
  %10 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 3
  store i64 %2, i64* %10, align 8
  %11 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 4
  store i32 0, i32* %11, align 8
  %12 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 5
  store i32 %3, i32* %12, align 4
  %13 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 6
  %14 = sext i32 %4 to i64
  store i64 %14, i64* %13, align 8
  %15 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 7
  store i64 %14, i64* %15, align 8
  %16 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 8
  store i64 0, i64* %16, align 8
  %17 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 9
  store i8 0, i8* %17, align 8
  %18 = icmp sgt i32 %4, 0
  br i1 %18, label %19, label %34

19:                                               ; preds = %5
  %20 = bitcast %"class.jxl::Channel"* %6 to i8*
  %21 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %6, i64 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %6, i64 0, i32 1
  %23 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %6, i64 0, i32 2
  %24 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %6, i64 0, i32 3
  %25 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 0, i32 0, i32 1
  %26 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %27 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %6, i64 0, i32 0, i32 0, i32 5
  %28 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %27, i64 0, i32 0, i32 0, i32 0
  %29 = bitcast %"class.std::__1::unique_ptr"* %27 to i64*
  %30 = bitcast i64* %22 to i8*
  %31 = bitcast %"class.jxl::Channel"** %25 to i64*
  %32 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %6, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %33 = bitcast i32* %24 to i8*
  br label %35

34:                                               ; preds = %54, %5
  ret void

35:                                               ; preds = %54, %19
  %36 = phi i32 [ 0, %19 ], [ %55, %54 ]
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %20) #8
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %21, i64 %1, i64 %2, i64 4) #8
  store i64 %1, i64* %22, align 8
  store i64 %2, i64* %23, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 16, i1 false)
  %37 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %25, align 8
  %38 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %26, align 8
  %39 = icmp ult %"class.jxl::Channel"* %37, %38
  br i1 %39, label %40, label %49

40:                                               ; preds = %35
  %41 = bitcast %"class.jxl::Channel"* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* nonnull align 8 %20, i64 24, i1 false) #8
  %42 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %37, i64 0, i32 0, i32 0, i32 5
  %43 = load i64, i64* %29, align 8
  store i8* null, i8** %28, align 8
  %44 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %43, i64* %44, align 8
  %45 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %37, i64 0, i32 1
  %46 = bitcast i64* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %30, i64 32, i1 false) #8
  %47 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %37, i64 1
  %48 = ptrtoint %"class.jxl::Channel"* %47 to i64
  store i64 %48, i64* %31, align 8
  br label %50

49:                                               ; preds = %35
  call void @_ZNSt3__16vectorIN3jxl7ChannelENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_(%"class.std::__1::vector"* %7, %"class.jxl::Channel"* nonnull dereferenceable(64) %6) #8
  br label %50

50:                                               ; preds = %40, %49
  %51 = load i8*, i8** %32, align 8
  store i8* null, i8** %32, align 8
  %52 = icmp eq i8* %51, null
  br i1 %52, label %54, label %53

53:                                               ; preds = %50
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %51) #8
  br label %54

54:                                               ; preds = %50, %53
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %20) #8
  %55 = add nuw nsw i32 %36, 1
  %56 = icmp eq i32 %55, %4
  br i1 %56, label %34, label %35
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl5ImageC2Ev(%"class.jxl::Image"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 5
  %3 = bitcast %"class.jxl::Image"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 68, i1 false)
  store i32 255, i32* %2, align 4
  %4 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 6
  %5 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 9
  %6 = bitcast i64* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false)
  store i8 1, i8* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl5ImageD2Ev(%"class.jxl::Image"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %3, align 8
  %5 = icmp eq %"class.jxl::Transform"* %4, null
  br i1 %5, label %23, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.jxl::Transform"* %4 to i8*
  %8 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 1, i32 0, i32 1
  %9 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %8, align 8
  %10 = icmp eq %"class.jxl::Transform"* %9, %4
  br i1 %10, label %21, label %11

11:                                               ; preds = %6, %11
  %12 = phi %"class.jxl::Transform"* [ %13, %11 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %12, i64 -1
  %14 = bitcast %"class.jxl::Transform"* %13 to void (%"class.jxl::Transform"*)***
  %15 = load void (%"class.jxl::Transform"*)**, void (%"class.jxl::Transform"*)*** %14, align 8
  %16 = load void (%"class.jxl::Transform"*)*, void (%"class.jxl::Transform"*)** %15, align 8
  tail call void %16(%"class.jxl::Transform"* %13) #8
  %17 = icmp eq %"class.jxl::Transform"* %13, %4
  br i1 %17, label %18, label %11

18:                                               ; preds = %11
  %19 = bitcast %"class.std::__1::vector.4"* %2 to i8**
  %20 = load i8*, i8** %19, align 8
  br label %21

21:                                               ; preds = %18, %6
  %22 = phi i8* [ %20, %18 ], [ %7, %6 ]
  store %"class.jxl::Transform"* %4, %"class.jxl::Transform"** %8, align 8
  tail call void @_ZdlPv(i8* %22) #10
  br label %23

23:                                               ; preds = %1, %21
  %24 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %24, align 8
  %26 = icmp eq %"class.jxl::Channel"* %25, null
  br i1 %26, label %46, label %27

27:                                               ; preds = %23
  %28 = bitcast %"class.jxl::Channel"* %25 to i8*
  %29 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 0, i32 0, i32 1
  %30 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %29, align 8
  %31 = icmp eq %"class.jxl::Channel"* %30, %25
  br i1 %31, label %44, label %32

32:                                               ; preds = %27, %39
  %33 = phi %"class.jxl::Channel"* [ %34, %39 ], [ %30, %27 ]
  %34 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %33, i64 -1
  %35 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %33, i64 -1, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  store i8* null, i8** %35, align 8
  %37 = icmp eq i8* %36, null
  br i1 %37, label %39, label %38

38:                                               ; preds = %32
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %36) #8
  br label %39

39:                                               ; preds = %38, %32
  %40 = icmp eq %"class.jxl::Channel"* %34, %25
  br i1 %40, label %41, label %32

41:                                               ; preds = %39
  %42 = bitcast %"class.jxl::Image"* %0 to i8**
  %43 = load i8*, i8** %42, align 8
  br label %44

44:                                               ; preds = %41, %27
  %45 = phi i8* [ %43, %41 ], [ %28, %27 ]
  store %"class.jxl::Channel"* %25, %"class.jxl::Channel"** %29, align 8
  tail call void @_ZdlPv(i8* %45) #10
  br label %46

46:                                               ; preds = %23, %44
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(104) %"class.jxl::Image"* @_ZN3jxl5ImageaSEOS0_(%"class.jxl::Image"* returned, %"class.jxl::Image"* nocapture dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 2
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 3
  store i64 %7, i64* %8, align 8
  %9 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1, i64 0, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 4
  store i32 %10, i32* %11, align 8
  %12 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1, i64 0, i32 5
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 5
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1, i64 0, i32 6
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 6
  store i64 %16, i64* %17, align 8
  %18 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1, i64 0, i32 7
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 7
  store i64 %19, i64* %20, align 8
  %21 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1, i64 0, i32 8
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 8
  store i64 %22, i64* %23, align 8
  %24 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1, i64 0, i32 9
  %25 = load i8, i8* %24, align 8, !range !6
  %26 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 9
  store i8 %25, i8* %26, align 8
  %27 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 0, i32 0, i32 0
  %28 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %27, align 8
  %29 = icmp eq %"class.jxl::Channel"* %28, null
  br i1 %29, label %50, label %30

30:                                               ; preds = %2
  %31 = bitcast %"class.jxl::Channel"* %28 to i8*
  %32 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 0, i32 0, i32 1
  %33 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %32, align 8
  %34 = icmp eq %"class.jxl::Channel"* %33, %28
  br i1 %34, label %47, label %35

35:                                               ; preds = %30, %42
  %36 = phi %"class.jxl::Channel"* [ %37, %42 ], [ %33, %30 ]
  %37 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %36, i64 -1
  %38 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %36, i64 -1, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  store i8* null, i8** %38, align 8
  %40 = icmp eq i8* %39, null
  br i1 %40, label %42, label %41

41:                                               ; preds = %35
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %39) #8
  br label %42

42:                                               ; preds = %41, %35
  %43 = icmp eq %"class.jxl::Channel"* %37, %28
  br i1 %43, label %44, label %35

44:                                               ; preds = %42
  %45 = bitcast %"class.jxl::Image"* %0 to i8**
  %46 = load i8*, i8** %45, align 8
  br label %47

47:                                               ; preds = %44, %30
  %48 = phi i8* [ %46, %44 ], [ %31, %30 ]
  store %"class.jxl::Channel"* %28, %"class.jxl::Channel"** %32, align 8
  tail call void @_ZdlPv(i8* %48) #10
  %49 = bitcast %"class.jxl::Image"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #8
  br label %50

50:                                               ; preds = %2, %47
  %51 = bitcast %"class.jxl::Image"* %1 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = bitcast %"class.jxl::Image"* %0 to i64*
  store i64 %52, i64* %53, align 8
  %54 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1, i64 0, i32 0, i32 0, i32 1
  %55 = bitcast %"class.jxl::Channel"** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 0, i32 0, i32 1
  %58 = bitcast %"class.jxl::Channel"** %57 to i64*
  store i64 %56, i64* %58, align 8
  %59 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %60 = bitcast %"class.jxl::Channel"** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %63 = bitcast %"class.jxl::Channel"** %62 to i64*
  store i64 %61, i64* %63, align 8
  %64 = bitcast %"class.jxl::Image"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %64, i8 0, i64 24, i1 false) #8
  %65 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1, i64 0, i32 1
  %66 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 1
  %67 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %66, i64 0, i32 0, i32 0
  %68 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %67, align 8
  %69 = icmp eq %"class.jxl::Transform"* %68, null
  br i1 %69, label %88, label %70

70:                                               ; preds = %50
  %71 = bitcast %"class.jxl::Transform"* %68 to i8*
  %72 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 1, i32 0, i32 1
  %73 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %72, align 8
  %74 = icmp eq %"class.jxl::Transform"* %73, %68
  br i1 %74, label %85, label %75

75:                                               ; preds = %70, %75
  %76 = phi %"class.jxl::Transform"* [ %77, %75 ], [ %73, %70 ]
  %77 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %76, i64 -1
  %78 = bitcast %"class.jxl::Transform"* %77 to void (%"class.jxl::Transform"*)***
  %79 = load void (%"class.jxl::Transform"*)**, void (%"class.jxl::Transform"*)*** %78, align 8
  %80 = load void (%"class.jxl::Transform"*)*, void (%"class.jxl::Transform"*)** %79, align 8
  tail call void %80(%"class.jxl::Transform"* %77) #8
  %81 = icmp eq %"class.jxl::Transform"* %77, %68
  br i1 %81, label %82, label %75

82:                                               ; preds = %75
  %83 = bitcast %"class.std::__1::vector.4"* %66 to i8**
  %84 = load i8*, i8** %83, align 8
  br label %85

85:                                               ; preds = %82, %70
  %86 = phi i8* [ %84, %82 ], [ %71, %70 ]
  store %"class.jxl::Transform"* %68, %"class.jxl::Transform"** %72, align 8
  tail call void @_ZdlPv(i8* %86) #10
  %87 = bitcast %"class.std::__1::vector.4"* %66 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %87, i8 0, i64 24, i1 false) #8
  br label %88

88:                                               ; preds = %50, %85
  %89 = bitcast %"class.std::__1::vector.4"* %65 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = bitcast %"class.std::__1::vector.4"* %66 to i64*
  store i64 %90, i64* %91, align 8
  %92 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1, i64 0, i32 1, i32 0, i32 1
  %93 = bitcast %"class.jxl::Transform"** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 1, i32 0, i32 1
  %96 = bitcast %"class.jxl::Transform"** %95 to i64*
  store i64 %94, i64* %96, align 8
  %97 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %1, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %98 = bitcast %"class.jxl::Transform"** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %101 = bitcast %"class.jxl::Transform"** %100 to i64*
  store i64 %99, i64* %101, align 8
  %102 = bitcast %"class.std::__1::vector.4"* %65 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %102, i8 0, i64 24, i1 false) #8
  ret %"class.jxl::Image"* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9TransformD0Ev(%"class.jxl::Transform"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7
  %4 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %3, i64 0, i32 0, i32 0
  %5 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %4, align 8
  %6 = icmp eq %"struct.jxl::SqueezeParams"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = bitcast %"struct.jxl::SqueezeParams"* %5 to i8*
  %9 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7, i32 0, i32 1
  %10 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %9, align 8
  %11 = icmp eq %"struct.jxl::SqueezeParams"* %10, %5
  br i1 %11, label %22, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"struct.jxl::SqueezeParams"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %13, i64 -1
  %15 = bitcast %"struct.jxl::SqueezeParams"* %14 to void (%"struct.jxl::SqueezeParams"*)***
  %16 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %15, align 8
  %17 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %16, align 8
  tail call void %17(%"struct.jxl::SqueezeParams"* %14) #8
  %18 = icmp eq %"struct.jxl::SqueezeParams"* %14, %5
  br i1 %18, label %19, label %12

19:                                               ; preds = %12
  %20 = bitcast %"class.std::__1::vector.6"* %3 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %7
  %23 = phi i8* [ %21, %19 ], [ %8, %7 ]
  store %"struct.jxl::SqueezeParams"* %5, %"struct.jxl::SqueezeParams"** %9, align 8
  tail call void @_ZdlPv(i8* %23) #10
  br label %24

24:                                               ; preds = %1, %22
  %25 = bitcast %"class.jxl::Transform"* %0 to i8*
  tail call void @_ZdlPv(i8* %25) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl9Transform11VisitFieldsEPNS_7VisitorE(%"class.jxl::Transform"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 1
  %5 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %6 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !7
  %7 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %6, i64 4
  %8 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %7, align 8, !noalias !7
  %9 = tail call i32 %8(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 -9223372021822390270, i32 0, i32* %4) #8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %165

11:                                               ; preds = %2
  %12 = load i32, i32* %4, align 8
  %13 = icmp eq i32 %12, 3
  br i1 %13, label %165, label %14

14:                                               ; preds = %11
  %15 = icmp ult i32 %12, 2
  %16 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1)***
  %17 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %16, align 8
  %18 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %17, i64 8
  %19 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %18, align 8
  %20 = tail call i32 %19(%"class.jxl::Visitor"* %1, i1 zeroext %15) #8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %29

22:                                               ; preds = %14
  %23 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 2
  %24 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !10
  %25 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %24, i64 4
  %26 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %25, align 8, !noalias !10
  %27 = tail call i32 %26(%"class.jxl::Visitor"* %1, i64 1120986464258, i64 150684632615177, i32 0, i32* %23) #8
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %165

29:                                               ; preds = %22, %14
  %30 = load i32, i32* %4, align 8
  %31 = icmp eq i32 %30, 0
  %32 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %16, align 8
  %33 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %32, i64 8
  %34 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %33, align 8
  %35 = tail call i32 %34(%"class.jxl::Visitor"* %1, i1 zeroext %31) #8
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %47

37:                                               ; preds = %29
  %38 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 3
  %39 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !13
  %40 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %39, i64 4
  %41 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %40, align 8, !noalias !13
  %42 = tail call i32 %41(%"class.jxl::Visitor"* %1, i64 6442450950, i64 1395864371267, i32 6, i32* %38) #8
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %165

44:                                               ; preds = %37
  %45 = load i32, i32* %38, align 8
  %46 = icmp ugt i32 %45, 41
  br i1 %46, label %165, label %47

47:                                               ; preds = %44, %29
  %48 = load i32, i32* %4, align 8
  %49 = icmp eq i32 %48, 1
  %50 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %16, align 8
  %51 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %50, i64 8
  %52 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %51, align 8
  %53 = tail call i32 %52(%"class.jxl::Visitor"* %1, i1 zeroext %49) #8
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %87

55:                                               ; preds = %47
  %56 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 4
  %57 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !16
  %58 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %57, i64 4
  %59 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %58, align 8, !noalias !16
  %60 = tail call i32 %59(%"class.jxl::Visitor"* %1, i64 -9223372021822390271, i64 191126044676, i32 3, i32* %56) #8
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %165

62:                                               ; preds = %55
  %63 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 5
  %64 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !19
  %65 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %64, i64 4
  %66 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %65, align 8, !noalias !19
  %67 = tail call i32 %66(%"class.jxl::Visitor"* %1, i64 35223026794503, i64 738936238415883, i32 256, i32* %63) #8
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %165

69:                                               ; preds = %62
  %70 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 6
  %71 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !22
  %72 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %71, i64 4
  %73 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %72, align 8, !noalias !22
  %74 = tail call i32 %73(%"class.jxl::Visitor"* %1, i64 169651208192, i64 176123723915305, i32 0, i32* %70) #8
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %165

76:                                               ; preds = %69
  %77 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 9
  %78 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %79 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %78, align 8
  %80 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %79, i64 5
  %81 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %80, align 8
  %82 = tail call i32 %81(%"class.jxl::Visitor"* %1, i64 4, i32 0, i32* %77) #8
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %165

84:                                               ; preds = %76
  %85 = load i32, i32* %77, align 4
  %86 = icmp ugt i32 %85, 13
  br i1 %86, label %165, label %87

87:                                               ; preds = %84, %47
  %88 = load i32, i32* %4, align 8
  %89 = icmp eq i32 %88, 2
  %90 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %16, align 8
  %91 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %90, i64 8
  %92 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %91, align 8
  %93 = tail call i32 %92(%"class.jxl::Visitor"* %1, i1 zeroext %89) #8
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %165

95:                                               ; preds = %87
  %96 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %96) #8
  %97 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7
  %98 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7, i32 0, i32 1
  %99 = bitcast %"struct.jxl::SqueezeParams"** %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = bitcast %"class.std::__1::vector.6"* %97 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = sub i64 %100, %102
  %104 = sdiv exact i64 %103, 24
  %105 = trunc i64 %104 to i32
  store i32 %105, i32* %3, align 4
  %106 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !25
  %107 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %106, i64 4
  %108 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %107, align 8, !noalias !25
  %109 = call i32 %108(%"class.jxl::Visitor"* %1, i64 152471339008, i64 5665061863717, i32 0, i32* nonnull %3) #8
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %164

111:                                              ; preds = %95
  %112 = bitcast %"class.jxl::Visitor"* %1 to i1 (%"class.jxl::Visitor"*)***
  %113 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %112, align 8
  %114 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %113, i64 12
  %115 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %114, align 8
  %116 = call zeroext i1 %115(%"class.jxl::Visitor"* %1) #8
  br i1 %116, label %117, label %142

117:                                              ; preds = %111
  %118 = load i32, i32* %3, align 4
  %119 = zext i32 %118 to i64
  %120 = load i64, i64* %99, align 8
  %121 = load i64, i64* %101, align 8
  %122 = sub i64 %120, %121
  %123 = sdiv exact i64 %122, 24
  %124 = icmp ult i64 %123, %119
  %125 = inttoptr i64 %121 to %"struct.jxl::SqueezeParams"*
  %126 = inttoptr i64 %120 to %"struct.jxl::SqueezeParams"*
  br i1 %124, label %127, label %129

127:                                              ; preds = %117
  %128 = sub nsw i64 %119, %123
  call void @_ZNSt3__16vectorIN3jxl13SqueezeParamsENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.6"* %97, i64 %128) #8
  br label %142

129:                                              ; preds = %117
  %130 = icmp ugt i64 %123, %119
  br i1 %130, label %131, label %142

131:                                              ; preds = %129
  %132 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %125, i64 %119
  %133 = icmp eq %"struct.jxl::SqueezeParams"* %132, %126
  br i1 %133, label %141, label %134

134:                                              ; preds = %131, %134
  %135 = phi %"struct.jxl::SqueezeParams"* [ %136, %134 ], [ %126, %131 ]
  %136 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %135, i64 -1
  %137 = bitcast %"struct.jxl::SqueezeParams"* %136 to void (%"struct.jxl::SqueezeParams"*)***
  %138 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %137, align 8
  %139 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %138, align 8
  call void %139(%"struct.jxl::SqueezeParams"* %136) #8
  %140 = icmp eq %"struct.jxl::SqueezeParams"* %136, %132
  br i1 %140, label %141, label %134

141:                                              ; preds = %134, %131
  store %"struct.jxl::SqueezeParams"* %132, %"struct.jxl::SqueezeParams"** %98, align 8
  br label %142

142:                                              ; preds = %141, %129, %127, %111
  %143 = load i32, i32* %3, align 4
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %152, label %145

145:                                              ; preds = %142
  %146 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %97, i64 0, i32 0, i32 0
  %147 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  br label %153

148:                                              ; preds = %153
  %149 = load i32, i32* %3, align 4
  %150 = zext i32 %149 to i64
  %151 = icmp ult i64 %162, %150
  br i1 %151, label %153, label %152

152:                                              ; preds = %148, %142
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %96) #8
  br label %165

153:                                              ; preds = %145, %148
  %154 = phi i64 [ 0, %145 ], [ %162, %148 ]
  %155 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %146, align 8
  %156 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %155, i64 %154, i32 0
  %157 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %147, align 8
  %158 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %157, i64 11
  %159 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %158, align 8
  %160 = call i32 %159(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %156) #8
  %161 = icmp eq i32 %160, 0
  %162 = add nuw nsw i64 %154, 1
  br i1 %161, label %148, label %163

163:                                              ; preds = %153
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %96) #8
  br label %165

164:                                              ; preds = %95
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %96) #8
  br label %165

165:                                              ; preds = %87, %152, %163, %84, %44, %11, %164, %76, %69, %62, %55, %37, %22, %2
  %166 = phi i32 [ %160, %163 ], [ %109, %164 ], [ %82, %76 ], [ %74, %69 ], [ %67, %62 ], [ %60, %55 ], [ %42, %37 ], [ %27, %22 ], [ %9, %2 ], [ 1, %11 ], [ 1, %44 ], [ 1, %84 ], [ 0, %152 ], [ 0, %87 ]
  ret i32 %166
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6FieldsD2Ev(%"class.jxl::Fields"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl13SqueezeParamsD0Ev(%"struct.jxl::SqueezeParams"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"struct.jxl::SqueezeParams"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl13SqueezeParams4NameEv(%"struct.jxl::SqueezeParams"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl13SqueezeParams11VisitFieldsEPNS_7VisitorE(%"struct.jxl::SqueezeParams"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %0, i64 0, i32 1
  %4 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1, i8*)***
  %5 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %4, align 8
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %5, i64 3
  %7 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %6, align 8
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %3) #8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %31

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %0, i64 0, i32 2
  %12 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %4, align 8
  %13 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %12, i64 3
  %14 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %13, align 8
  %15 = tail call i32 %14(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %11) #8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %31

17:                                               ; preds = %10
  %18 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %0, i64 0, i32 4
  %19 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %20 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %19, align 8, !noalias !28
  %21 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %20, i64 4
  %22 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %21, align 8, !noalias !28
  %23 = tail call i32 %22(%"class.jxl::Visitor"* %1, i64 1120986464258, i64 150684632615177, i32 0, i32* %18) #8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %31

25:                                               ; preds = %17
  %26 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %0, i64 0, i32 5
  %27 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %19, align 8, !noalias !31
  %28 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %27, i64 4
  %29 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %28, align 8, !noalias !31
  %30 = tail call i32 %29(%"class.jxl::Visitor"* %1, i64 -9223372026117357567, i64 564788199427, i32 2, i32* %26) #8
  ret i32 %30

31:                                               ; preds = %17, %10, %2
  %32 = phi i32 [ %23, %17 ], [ %15, %10 ], [ %8, %2 ]
  ret i32 %32
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl13SqueezeParamsENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.6"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::SqueezeParams"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::SqueezeParams"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %24, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::SqueezeParams"*
  %14 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %22, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"struct.jxl::SqueezeParams"* %14 to i64
  br label %22

18:                                               ; preds = %12, %18
  %19 = phi %"struct.jxl::SqueezeParams"* [ %20, %18 ], [ %13, %12 ]
  tail call void @_ZN3jxl13SqueezeParamsC1Ev(%"struct.jxl::SqueezeParams"* %19) #8
  %20 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %19, i64 1
  %21 = icmp eq %"struct.jxl::SqueezeParams"* %20, %14
  br i1 %21, label %16, label %18

22:                                               ; preds = %12, %16
  %23 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %23, i64* %7, align 8
  br label %96

24:                                               ; preds = %2
  %25 = bitcast %"class.std::__1::vector.6"* %0 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %8, %26
  %28 = sdiv exact i64 %27, 24
  %29 = add i64 %28, %1
  %30 = icmp ugt i64 %29, 768614336404564650
  br i1 %30, label %31, label %33

31:                                               ; preds = %24
  %32 = bitcast %"class.std::__1::vector.6"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %32) #9
  unreachable

33:                                               ; preds = %24
  %34 = sub i64 %5, %26
  %35 = sdiv exact i64 %34, 24
  %36 = icmp ult i64 %35, 384307168202282325
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = shl nsw i64 %35, 1
  %39 = icmp ult i64 %38, %29
  %40 = select i1 %39, i64 %29, i64 %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %33, %37
  %43 = phi i64 [ %40, %37 ], [ 768614336404564650, %33 ]
  %44 = mul i64 %43, 24
  %45 = tail call i8* @_Znwm(i64 %44) #10
  %46 = bitcast i8* %45 to %"struct.jxl::SqueezeParams"*
  br label %47

47:                                               ; preds = %37, %42
  %48 = phi i64 [ %43, %42 ], [ 0, %37 ]
  %49 = phi %"struct.jxl::SqueezeParams"* [ %46, %42 ], [ null, %37 ]
  %50 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %49, i64 %28
  %51 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %49, i64 %48
  %52 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %50, i64 %1
  br label %53

53:                                               ; preds = %47, %53
  %54 = phi %"struct.jxl::SqueezeParams"* [ %55, %53 ], [ %50, %47 ]
  tail call void @_ZN3jxl13SqueezeParamsC1Ev(%"struct.jxl::SqueezeParams"* %54) #8
  %55 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %54, i64 1
  %56 = icmp eq %"struct.jxl::SqueezeParams"* %52, %55
  br i1 %56, label %57, label %53

57:                                               ; preds = %53
  %58 = ptrtoint %"struct.jxl::SqueezeParams"* %51 to i64
  %59 = ptrtoint %"struct.jxl::SqueezeParams"* %52 to i64
  %60 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 0
  %61 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %60, align 8
  %62 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %6, align 8
  %63 = icmp eq %"struct.jxl::SqueezeParams"* %62, %61
  br i1 %63, label %64, label %66

64:                                               ; preds = %57
  %65 = ptrtoint %"struct.jxl::SqueezeParams"* %61 to i64
  br label %78

66:                                               ; preds = %57, %66
  %67 = phi %"struct.jxl::SqueezeParams"* [ %73, %66 ], [ %50, %57 ]
  %68 = phi %"struct.jxl::SqueezeParams"* [ %69, %66 ], [ %62, %57 ]
  %69 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %68, i64 -1
  %70 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %67, i64 -1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13SqueezeParamsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %70, align 8
  %71 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %67, i64 -1, i32 1
  %72 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %68, i64 -1, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* align 8 %72, i64 12, i1 false) #8
  %73 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %67, i64 -1
  %74 = icmp eq %"struct.jxl::SqueezeParams"* %69, %61
  br i1 %74, label %75, label %66

75:                                               ; preds = %66
  %76 = load i64, i64* %25, align 8
  %77 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %6, align 8
  br label %78

78:                                               ; preds = %64, %75
  %79 = phi %"struct.jxl::SqueezeParams"* [ %61, %64 ], [ %77, %75 ]
  %80 = phi %"struct.jxl::SqueezeParams"* [ %50, %64 ], [ %73, %75 ]
  %81 = phi i64 [ %65, %64 ], [ %76, %75 ]
  %82 = ptrtoint %"struct.jxl::SqueezeParams"* %80 to i64
  store i64 %82, i64* %25, align 8
  store i64 %59, i64* %7, align 8
  store i64 %58, i64* %4, align 8
  %83 = inttoptr i64 %81 to %"struct.jxl::SqueezeParams"*
  %84 = icmp eq %"struct.jxl::SqueezeParams"* %79, %83
  br i1 %84, label %92, label %85

85:                                               ; preds = %78, %85
  %86 = phi %"struct.jxl::SqueezeParams"* [ %87, %85 ], [ %79, %78 ]
  %87 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %86, i64 -1
  %88 = bitcast %"struct.jxl::SqueezeParams"* %87 to void (%"struct.jxl::SqueezeParams"*)***
  %89 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %88, align 8
  %90 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %89, align 8
  tail call void %90(%"struct.jxl::SqueezeParams"* %87) #8
  %91 = icmp eq %"struct.jxl::SqueezeParams"* %87, %83
  br i1 %91, label %92, label %85

92:                                               ; preds = %85, %78
  %93 = icmp eq i64 %81, 0
  br i1 %93, label %96, label %94

94:                                               ; preds = %92
  %95 = inttoptr i64 %81 to i8*
  tail call void @_ZdlPv(i8* %95) #10
  br label %96

96:                                               ; preds = %94, %92, %22
  ret void
}

declare void @_ZN3jxl13SqueezeParamsC1Ev(%"struct.jxl::SqueezeParams"*) unnamed_addr #2

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #2

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @llvm.assume(i1) #8

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl9TransformENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector.4"*, %"class.jxl::Transform"* dereferenceable(72)) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::Transform"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.4"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 72
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 256204778801521550
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.4"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #9
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::Transform"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 72
  %20 = icmp ult i64 %19, 128102389400760775
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 256204778801521550, %14 ]
  %28 = mul i64 %27, 72
  %29 = tail call i8* @_Znwm(i64 %28) #10
  %30 = bitcast i8* %29 to %"class.jxl::Transform"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.jxl::Transform"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %33, i64 %9
  %35 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %33, i64 %32
  %36 = ptrtoint %"class.jxl::Transform"* %35 to i64
  %37 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %34, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %37, align 8
  %38 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %33, i64 %9, i32 1
  %39 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %1, i64 0, i32 1
  %40 = bitcast i32* %38 to i8*
  %41 = bitcast i32* %39 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #8
  %42 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %33, i64 %9, i32 7
  %43 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %1, i64 0, i32 7
  %44 = bitcast %"class.std::__1::vector.6"* %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 24, i1 false) #8
  %45 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %1, i64 0, i32 7, i32 0, i32 1
  %46 = bitcast %"struct.jxl::SqueezeParams"** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %"class.std::__1::vector.6"* %43 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = sub i64 %47, %49
  %51 = sdiv exact i64 %50, 24
  %52 = icmp eq i64 %50, 0
  br i1 %52, label %84, label %53

53:                                               ; preds = %31
  %54 = icmp ugt i64 %51, 768614336404564650
  br i1 %54, label %55, label %57

55:                                               ; preds = %53
  %56 = bitcast %"class.std::__1::vector.6"* %42 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %56) #9
  unreachable

57:                                               ; preds = %53
  %58 = tail call i8* @_Znwm(i64 %50) #10
  %59 = bitcast i8* %58 to %"struct.jxl::SqueezeParams"*
  %60 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %33, i64 %9, i32 7, i32 0, i32 1
  %61 = bitcast %"struct.jxl::SqueezeParams"** %60 to i8**
  store i8* %58, i8** %61, align 8
  %62 = bitcast %"class.std::__1::vector.6"* %42 to i8**
  store i8* %58, i8** %62, align 8
  %63 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %59, i64 %51
  %64 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %33, i64 %9, i32 7, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::SqueezeParams"* %63, %"struct.jxl::SqueezeParams"** %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %43, i64 0, i32 0, i32 0
  %66 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %65, align 8
  %67 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %45, align 8
  %68 = bitcast %"struct.jxl::SqueezeParams"** %60 to i64*
  %69 = ptrtoint i8* %58 to i64
  %70 = icmp eq %"struct.jxl::SqueezeParams"* %66, %67
  br i1 %70, label %82, label %71

71:                                               ; preds = %57, %71
  %72 = phi %"struct.jxl::SqueezeParams"* [ %78, %71 ], [ %59, %57 ]
  %73 = phi %"struct.jxl::SqueezeParams"* [ %77, %71 ], [ %66, %57 ]
  %74 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %72, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13SqueezeParamsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %74, align 8
  %75 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %72, i64 0, i32 1
  %76 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %73, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 12, i1 false) #8
  %77 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %73, i64 1
  %78 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %72, i64 1
  %79 = icmp eq %"struct.jxl::SqueezeParams"* %77, %67
  br i1 %79, label %80, label %71

80:                                               ; preds = %71
  %81 = ptrtoint %"struct.jxl::SqueezeParams"* %78 to i64
  br label %82

82:                                               ; preds = %80, %57
  %83 = phi i64 [ %69, %57 ], [ %81, %80 ]
  store i64 %83, i64* %68, align 8
  br label %84

84:                                               ; preds = %31, %82
  %85 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %33, i64 %9, i32 8
  %86 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %1, i64 0, i32 8
  %87 = bitcast i32* %85 to i8*
  %88 = bitcast i32* %86 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* align 8 %88, i64 10, i1 false) #8
  %89 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %34, i64 1
  %90 = ptrtoint %"class.jxl::Transform"* %89 to i64
  %91 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 0
  %92 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %91, align 8
  %93 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %3, align 8
  %94 = icmp eq %"class.jxl::Transform"* %93, %92
  br i1 %94, label %95, label %97

95:                                               ; preds = %84
  %96 = ptrtoint %"class.jxl::Transform"* %92 to i64
  br label %132

97:                                               ; preds = %84, %97
  %98 = phi %"class.jxl::Transform"* [ %127, %97 ], [ %34, %84 ]
  %99 = phi %"class.jxl::Transform"* [ %100, %97 ], [ %93, %84 ]
  %100 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %99, i64 -1
  %101 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %98, i64 -1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %101, align 8
  %102 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %98, i64 -1, i32 1
  %103 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %99, i64 -1, i32 1
  %104 = bitcast i32* %102 to i8*
  %105 = bitcast i32* %103 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* align 8 %105, i64 24, i1 false) #8
  %106 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %98, i64 -1, i32 7
  %107 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %99, i64 -1, i32 7
  %108 = bitcast %"class.std::__1::vector.6"* %106 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %108, i8 0, i64 24, i1 false) #8
  %109 = bitcast %"class.std::__1::vector.6"* %107 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = bitcast %"class.std::__1::vector.6"* %106 to i64*
  store i64 %110, i64* %111, align 8
  %112 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %99, i64 -1, i32 7, i32 0, i32 1
  %113 = bitcast %"struct.jxl::SqueezeParams"** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %98, i64 -1, i32 7, i32 0, i32 1
  %116 = bitcast %"struct.jxl::SqueezeParams"** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %99, i64 -1, i32 7, i32 0, i32 2, i32 0, i32 0
  %118 = bitcast %"struct.jxl::SqueezeParams"** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %98, i64 -1, i32 7, i32 0, i32 2, i32 0, i32 0
  %121 = bitcast %"struct.jxl::SqueezeParams"** %120 to i64*
  store i64 %119, i64* %121, align 8
  %122 = bitcast %"class.std::__1::vector.6"* %107 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %122, i8 0, i64 24, i1 false) #8
  %123 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %98, i64 -1, i32 8
  %124 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %99, i64 -1, i32 8
  %125 = bitcast i32* %123 to i8*
  %126 = bitcast i32* %124 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* align 8 %126, i64 10, i1 false) #8
  %127 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %98, i64 -1
  %128 = icmp eq %"class.jxl::Transform"* %100, %92
  br i1 %128, label %129, label %97

129:                                              ; preds = %97
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %3, align 8
  br label %132

132:                                              ; preds = %95, %129
  %133 = phi %"class.jxl::Transform"* [ %92, %95 ], [ %131, %129 ]
  %134 = phi %"class.jxl::Transform"* [ %34, %95 ], [ %127, %129 ]
  %135 = phi i64 [ %96, %95 ], [ %130, %129 ]
  %136 = ptrtoint %"class.jxl::Transform"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %90, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.jxl::Transform"*
  %138 = icmp eq %"class.jxl::Transform"* %133, %137
  br i1 %138, label %146, label %139

139:                                              ; preds = %132, %139
  %140 = phi %"class.jxl::Transform"* [ %141, %139 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %140, i64 -1
  %142 = bitcast %"class.jxl::Transform"* %141 to void (%"class.jxl::Transform"*)***
  %143 = load void (%"class.jxl::Transform"*)**, void (%"class.jxl::Transform"*)*** %142, align 8
  %144 = load void (%"class.jxl::Transform"*)*, void (%"class.jxl::Transform"*)** %143, align 8
  tail call void %144(%"class.jxl::Transform"* %141) #8
  %145 = icmp eq %"class.jxl::Transform"* %141, %137
  br i1 %145, label %146, label %139

146:                                              ; preds = %139, %132
  %147 = icmp eq i64 %135, 0
  br i1 %147, label %150, label %148

148:                                              ; preds = %146
  %149 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %149) #10
  br label %150

150:                                              ; preds = %146, %148
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl7ChannelENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_(%"class.std::__1::vector"*, %"class.jxl::Channel"* dereferenceable(64)) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::Channel"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 6
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 288230376151711743
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #9
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::Channel"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 6
  %20 = icmp ult i64 %19, 144115188075855871
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 5
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 288230376151711743
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #9
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 288230376151711743, %14 ]
  %31 = shl i64 %30, 6
  %32 = tail call i8* @_Znwm(i64 %31) #10
  %33 = bitcast i8* %32 to %"class.jxl::Channel"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.jxl::Channel"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %36, i64 %9
  %38 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %36, i64 %35
  %39 = ptrtoint %"class.jxl::Channel"* %38 to i64
  %40 = bitcast %"class.jxl::Channel"* %37 to i8*
  %41 = bitcast %"class.jxl::Channel"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #8
  %42 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %36, i64 %9, i32 0, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1, i64 0, i32 0, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %36, i64 %9, i32 1
  %49 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %1, i64 0, i32 1
  %50 = bitcast i64* %48 to i8*
  %51 = bitcast i64* %49 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 32, i1 false) #8
  %52 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %37, i64 1
  %53 = ptrtoint %"class.jxl::Channel"* %52 to i64
  %54 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %55 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %54, align 8
  %56 = ptrtoint %"class.jxl::Channel"* %55 to i64
  %57 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %3, align 8
  %58 = icmp eq %"class.jxl::Channel"* %57, %55
  br i1 %58, label %121, label %59

59:                                               ; preds = %34
  %60 = getelementptr %"class.jxl::Channel", %"class.jxl::Channel"* %57, i64 -1, i32 0, i32 0, i32 0
  %61 = ptrtoint i32* %60 to i64
  %62 = sub i64 %61, %56
  %63 = and i64 %62, 64
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %80

65:                                               ; preds = %59
  %66 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %37, i64 -1
  %67 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %57, i64 -1
  %68 = bitcast %"class.jxl::Channel"* %66 to i8*
  %69 = bitcast %"class.jxl::Channel"* %67 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 24, i1 false) #8
  %70 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %37, i64 -1, i32 0, i32 0, i32 5
  %71 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %57, i64 -1, i32 0, i32 0, i32 5
  %72 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %71, i64 0, i32 0, i32 0, i32 0
  %73 = bitcast %"class.std::__1::unique_ptr"* %71 to i64*
  %74 = load i64, i64* %73, align 8
  store i8* null, i8** %72, align 8
  %75 = bitcast %"class.std::__1::unique_ptr"* %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %37, i64 -1, i32 1
  %77 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %57, i64 -1, i32 1
  %78 = bitcast i64* %76 to i8*
  %79 = bitcast i64* %77 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 32, i1 false) #8
  br label %80

80:                                               ; preds = %65, %59
  %81 = phi %"class.jxl::Channel"* [ undef, %59 ], [ %66, %65 ]
  %82 = phi %"class.jxl::Channel"* [ %37, %59 ], [ %66, %65 ]
  %83 = phi %"class.jxl::Channel"* [ %57, %59 ], [ %67, %65 ]
  %84 = icmp ult i64 %62, 64
  br i1 %84, label %117, label %85

85:                                               ; preds = %80, %85
  %86 = phi %"class.jxl::Channel"* [ %102, %85 ], [ %82, %80 ]
  %87 = phi %"class.jxl::Channel"* [ %103, %85 ], [ %83, %80 ]
  %88 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %86, i64 -1
  %89 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %87, i64 -1
  %90 = bitcast %"class.jxl::Channel"* %88 to i8*
  %91 = bitcast %"class.jxl::Channel"* %89 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %90, i8* align 8 %91, i64 24, i1 false) #8
  %92 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %86, i64 -1, i32 0, i32 0, i32 5
  %93 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %87, i64 -1, i32 0, i32 0, i32 5
  %94 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %93, i64 0, i32 0, i32 0, i32 0
  %95 = bitcast %"class.std::__1::unique_ptr"* %93 to i64*
  %96 = load i64, i64* %95, align 8
  store i8* null, i8** %94, align 8
  %97 = bitcast %"class.std::__1::unique_ptr"* %92 to i64*
  store i64 %96, i64* %97, align 8
  %98 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %86, i64 -1, i32 1
  %99 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %87, i64 -1, i32 1
  %100 = bitcast i64* %98 to i8*
  %101 = bitcast i64* %99 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 32, i1 false) #8
  %102 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %86, i64 -2
  %103 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %87, i64 -2
  %104 = bitcast %"class.jxl::Channel"* %102 to i8*
  %105 = bitcast %"class.jxl::Channel"* %103 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* align 8 %105, i64 24, i1 false) #8
  %106 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %86, i64 -2, i32 0, i32 0, i32 5
  %107 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %87, i64 -2, i32 0, i32 0, i32 5
  %108 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %107, i64 0, i32 0, i32 0, i32 0
  %109 = bitcast %"class.std::__1::unique_ptr"* %107 to i64*
  %110 = load i64, i64* %109, align 8
  store i8* null, i8** %108, align 8
  %111 = bitcast %"class.std::__1::unique_ptr"* %106 to i64*
  store i64 %110, i64* %111, align 8
  %112 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %86, i64 -2, i32 1
  %113 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %87, i64 -2, i32 1
  %114 = bitcast i64* %112 to i8*
  %115 = bitcast i64* %113 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 8 %115, i64 32, i1 false) #8
  %116 = icmp eq %"class.jxl::Channel"* %103, %55
  br i1 %116, label %117, label %85

117:                                              ; preds = %85, %80
  %118 = phi %"class.jxl::Channel"* [ %81, %80 ], [ %102, %85 ]
  %119 = load i64, i64* %6, align 8
  %120 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %3, align 8
  br label %121

121:                                              ; preds = %34, %117
  %122 = phi %"class.jxl::Channel"* [ %120, %117 ], [ %55, %34 ]
  %123 = phi %"class.jxl::Channel"* [ %118, %117 ], [ %37, %34 ]
  %124 = phi i64 [ %119, %117 ], [ %56, %34 ]
  %125 = ptrtoint %"class.jxl::Channel"* %123 to i64
  store i64 %125, i64* %6, align 8
  store i64 %53, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %126 = inttoptr i64 %124 to %"class.jxl::Channel"*
  %127 = icmp eq %"class.jxl::Channel"* %122, %126
  br i1 %127, label %137, label %128

128:                                              ; preds = %121, %135
  %129 = phi %"class.jxl::Channel"* [ %130, %135 ], [ %122, %121 ]
  %130 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %129, i64 -1
  %131 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %129, i64 -1, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %132 = load i8*, i8** %131, align 8
  store i8* null, i8** %131, align 8
  %133 = icmp eq i8* %132, null
  br i1 %133, label %135, label %134

134:                                              ; preds = %128
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %132) #8
  br label %135

135:                                              ; preds = %134, %128
  %136 = icmp eq %"class.jxl::Channel"* %130, %126
  br i1 %136, label %137, label %128

137:                                              ; preds = %135, %121
  %138 = icmp eq i64 %124, 0
  br i1 %138, label %141, label %139

139:                                              ; preds = %137
  %140 = inttoptr i64 %124 to i8*
  tail call void @_ZdlPv(i8* %140) #10
  br label %141

141:                                              ; preds = %137, %139
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = !{i8 0, i8 2}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!9 = distinct !{!9, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!12 = distinct !{!12, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!15 = distinct !{!15, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!18 = distinct !{!18, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!21 = distinct !{!21, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!24 = distinct !{!24, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!27 = distinct !{!27, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!30 = distinct !{!30, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!31 = !{!32}
!32 = distinct !{!32, !33, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!33 = distinct !{!33, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
