; ModuleID = '../../third_party/webrtc/common_audio/signal_processing/real_fft.c'
source_filename = "../../third_party/webrtc/common_audio/signal_processing/real_fft.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.RealFFT = type { i32 }

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias %struct.RealFFT* @WebRtcSpl_CreateRealFFT(i32) local_unnamed_addr #0 {
  %2 = icmp ugt i32 %0, 10
  br i1 %2, label %9, label %3

3:                                                ; preds = %1
  %4 = tail call noalias i8* @malloc(i64 4) #6
  %5 = icmp eq i8* %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %3
  %7 = bitcast i8* %4 to %struct.RealFFT*
  %8 = bitcast i8* %4 to i32*
  store i32 %0, i32* %8, align 4
  br label %9

9:                                                ; preds = %3, %1, %6
  %10 = phi %struct.RealFFT* [ %7, %6 ], [ null, %1 ], [ null, %3 ]
  ret %struct.RealFFT* %10
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcSpl_FreeRealFFT(%struct.RealFFT*) local_unnamed_addr #3 {
  %2 = icmp eq %struct.RealFFT* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct.RealFFT* %0 to i8*
  tail call void @free(i8* %4) #6
  br label %5

5:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcSpl_RealForwardFFT(%struct.RealFFT* nocapture readonly, i16* nocapture readonly, i16* nocapture) local_unnamed_addr #3 {
  %4 = alloca [2048 x i16], align 16
  %5 = getelementptr inbounds %struct.RealFFT, %struct.RealFFT* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = shl i32 1, %6
  %8 = bitcast [2048 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %8) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 4096, i1 false)
  %9 = icmp eq i32 %6, 31
  br i1 %9, label %104, label %10

10:                                               ; preds = %3
  %11 = sext i32 %7 to i64
  %12 = icmp sgt i64 %11, 1
  %13 = select i1 %12, i64 %11, i64 1
  %14 = icmp ult i64 %13, 8
  br i1 %14, label %90, label %15

15:                                               ; preds = %10
  %16 = and i64 %13, 9223372036854775800
  %17 = shl nuw i64 %16, 1
  %18 = add nsw i64 %16, -8
  %19 = lshr exact i64 %18, 3
  %20 = add nuw nsw i64 %19, 1
  %21 = and i64 %20, 3
  %22 = icmp ult i64 %18, 24
  br i1 %22, label %70, label %23

23:                                               ; preds = %15
  %24 = sub nsw i64 %20, %21
  br label %25

25:                                               ; preds = %25, %23
  %26 = phi i64 [ 0, %23 ], [ %67, %25 ]
  %27 = phi i64 [ %24, %23 ], [ %68, %25 ]
  %28 = shl i64 %26, 1
  %29 = getelementptr inbounds i16, i16* %1, i64 %26
  %30 = bitcast i16* %29 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 2
  %32 = or i64 %28, 1
  %33 = getelementptr inbounds [2048 x i16], [2048 x i16]* %4, i64 0, i64 %32
  %34 = getelementptr inbounds i16, i16* %33, i64 -1
  %35 = bitcast i16* %34 to <16 x i16>*
  %36 = shufflevector <8 x i16> %31, <8 x i16> zeroinitializer, <16 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11, i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <16 x i16> %36, <16 x i16>* %35, align 2
  %37 = or i64 %26, 8
  %38 = shl i64 %37, 1
  %39 = getelementptr inbounds i16, i16* %1, i64 %37
  %40 = bitcast i16* %39 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 2
  %42 = or i64 %38, 1
  %43 = getelementptr inbounds [2048 x i16], [2048 x i16]* %4, i64 0, i64 %42
  %44 = getelementptr inbounds i16, i16* %43, i64 -1
  %45 = bitcast i16* %44 to <16 x i16>*
  %46 = shufflevector <8 x i16> %41, <8 x i16> zeroinitializer, <16 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11, i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <16 x i16> %46, <16 x i16>* %45, align 2
  %47 = or i64 %26, 16
  %48 = shl i64 %47, 1
  %49 = getelementptr inbounds i16, i16* %1, i64 %47
  %50 = bitcast i16* %49 to <8 x i16>*
  %51 = load <8 x i16>, <8 x i16>* %50, align 2
  %52 = or i64 %48, 1
  %53 = getelementptr inbounds [2048 x i16], [2048 x i16]* %4, i64 0, i64 %52
  %54 = getelementptr inbounds i16, i16* %53, i64 -1
  %55 = bitcast i16* %54 to <16 x i16>*
  %56 = shufflevector <8 x i16> %51, <8 x i16> zeroinitializer, <16 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11, i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <16 x i16> %56, <16 x i16>* %55, align 2
  %57 = or i64 %26, 24
  %58 = shl i64 %57, 1
  %59 = getelementptr inbounds i16, i16* %1, i64 %57
  %60 = bitcast i16* %59 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2
  %62 = or i64 %58, 1
  %63 = getelementptr inbounds [2048 x i16], [2048 x i16]* %4, i64 0, i64 %62
  %64 = getelementptr inbounds i16, i16* %63, i64 -1
  %65 = bitcast i16* %64 to <16 x i16>*
  %66 = shufflevector <8 x i16> %61, <8 x i16> zeroinitializer, <16 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11, i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <16 x i16> %66, <16 x i16>* %65, align 2
  %67 = add i64 %26, 32
  %68 = add i64 %27, -4
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %70, label %25, !llvm.loop !2

70:                                               ; preds = %25, %15
  %71 = phi i64 [ 0, %15 ], [ %67, %25 ]
  %72 = icmp eq i64 %21, 0
  br i1 %72, label %88, label %73

73:                                               ; preds = %70, %73
  %74 = phi i64 [ %85, %73 ], [ %71, %70 ]
  %75 = phi i64 [ %86, %73 ], [ %21, %70 ]
  %76 = shl i64 %74, 1
  %77 = getelementptr inbounds i16, i16* %1, i64 %74
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2
  %80 = or i64 %76, 1
  %81 = getelementptr inbounds [2048 x i16], [2048 x i16]* %4, i64 0, i64 %80
  %82 = getelementptr inbounds i16, i16* %81, i64 -1
  %83 = bitcast i16* %82 to <16 x i16>*
  %84 = shufflevector <8 x i16> %79, <8 x i16> zeroinitializer, <16 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11, i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <16 x i16> %84, <16 x i16>* %83, align 2
  %85 = add i64 %74, 8
  %86 = add i64 %75, -1
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %73, !llvm.loop !4

88:                                               ; preds = %73, %70
  %89 = icmp eq i64 %13, %16
  br i1 %89, label %104, label %90

90:                                               ; preds = %88, %10
  %91 = phi i64 [ 0, %10 ], [ %16, %88 ]
  %92 = phi i64 [ 0, %10 ], [ %17, %88 ]
  br label %93

93:                                               ; preds = %90, %93
  %94 = phi i64 [ %101, %93 ], [ %91, %90 ]
  %95 = phi i64 [ %102, %93 ], [ %92, %90 ]
  %96 = getelementptr inbounds i16, i16* %1, i64 %94
  %97 = load i16, i16* %96, align 2
  %98 = getelementptr inbounds [2048 x i16], [2048 x i16]* %4, i64 0, i64 %95
  store i16 %97, i16* %98, align 4
  %99 = or i64 %95, 1
  %100 = getelementptr inbounds [2048 x i16], [2048 x i16]* %4, i64 0, i64 %99
  store i16 0, i16* %100, align 2
  %101 = add nuw nsw i64 %94, 1
  %102 = add nuw nsw i64 %95, 2
  %103 = icmp slt i64 %101, %11
  br i1 %103, label %93, label %104, !llvm.loop !6

104:                                              ; preds = %93, %88, %3
  %105 = getelementptr inbounds [2048 x i16], [2048 x i16]* %4, i64 0, i64 0
  call void @WebRtcSpl_ComplexBitReverse(i16* nonnull %105, i32 %6) #6
  %106 = load i32, i32* %5, align 4
  %107 = call i32 @WebRtcSpl_ComplexFFT(i16* nonnull %105, i32 %106, i32 1) #6
  %108 = bitcast i16* %2 to i8*
  %109 = add nsw i32 %7, 2
  %110 = sext i32 %109 to i64
  %111 = shl nsw i64 %110, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %108, i8* nonnull align 16 %8, i64 %111, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %8) #6
  ret i32 %107
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @WebRtcSpl_ComplexBitReverse(i16*, i32) local_unnamed_addr #5

declare i32 @WebRtcSpl_ComplexFFT(i16*, i32, i32) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcSpl_RealInverseFFT(%struct.RealFFT* nocapture readonly, i16* nocapture readonly, i16* nocapture) local_unnamed_addr #3 {
  %4 = alloca [2048 x i16], align 16
  %5 = getelementptr inbounds %struct.RealFFT, %struct.RealFFT* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = shl i32 1, %6
  %8 = bitcast [2048 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %8) #6
  %9 = getelementptr inbounds [2048 x i16], [2048 x i16]* %4, i64 0, i64 0
  %10 = bitcast i16* %1 to i8*
  %11 = add i32 %7, 2
  %12 = sext i32 %11 to i64
  %13 = shl nsw i64 %12, 1
  %14 = icmp ugt i64 %13, 4095
  %15 = sub nsw i64 4096, %13
  %16 = select i1 %14, i64 0, i64 %15
  %17 = getelementptr [2048 x i16], [2048 x i16]* %4, i64 0, i64 %12
  %18 = bitcast i16* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 2 %18, i8 -86, i64 %16, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %8, i8* align 2 %10, i64 %13, i1 false)
  %19 = shl nsw i32 %7, 1
  %20 = icmp sgt i32 %19, %11
  br i1 %20, label %21, label %67

21:                                               ; preds = %3
  %22 = sext i32 %19 to i64
  %23 = xor i64 %12, -1
  %24 = add nsw i64 %23, %22
  %25 = and i64 %24, 2
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %27, label %39

27:                                               ; preds = %21
  %28 = sub nsw i64 %22, %12
  %29 = getelementptr inbounds i16, i16* %1, i64 %28
  %30 = load i16, i16* %29, align 2
  %31 = getelementptr inbounds [2048 x i16], [2048 x i16]* %4, i64 0, i64 %12
  store i16 %30, i16* %31, align 2
  %32 = add nsw i64 %28, 1
  %33 = getelementptr inbounds i16, i16* %1, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = sub i16 0, %34
  %36 = add nsw i64 %12, 1
  %37 = getelementptr inbounds [2048 x i16], [2048 x i16]* %4, i64 0, i64 %36
  store i16 %35, i16* %37, align 2
  %38 = add nsw i64 %12, 2
  br label %39

39:                                               ; preds = %27, %21
  %40 = phi i64 [ %12, %21 ], [ %38, %27 ]
  %41 = icmp ult i64 %24, 2
  br i1 %41, label %67, label %42

42:                                               ; preds = %39, %42
  %43 = phi i64 [ %65, %42 ], [ %40, %39 ]
  %44 = sub nsw i64 %22, %43
  %45 = getelementptr inbounds i16, i16* %1, i64 %44
  %46 = load i16, i16* %45, align 2
  %47 = getelementptr inbounds [2048 x i16], [2048 x i16]* %4, i64 0, i64 %43
  store i16 %46, i16* %47, align 2
  %48 = add nsw i64 %44, 1
  %49 = getelementptr inbounds i16, i16* %1, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = sub i16 0, %50
  %52 = add nsw i64 %43, 1
  %53 = getelementptr inbounds [2048 x i16], [2048 x i16]* %4, i64 0, i64 %52
  store i16 %51, i16* %53, align 2
  %54 = add nsw i64 %43, 2
  %55 = sub nsw i64 %22, %54
  %56 = getelementptr inbounds i16, i16* %1, i64 %55
  %57 = load i16, i16* %56, align 2
  %58 = getelementptr inbounds [2048 x i16], [2048 x i16]* %4, i64 0, i64 %54
  store i16 %57, i16* %58, align 2
  %59 = add nsw i64 %55, 1
  %60 = getelementptr inbounds i16, i16* %1, i64 %59
  %61 = load i16, i16* %60, align 2
  %62 = sub i16 0, %61
  %63 = add nsw i64 %43, 3
  %64 = getelementptr inbounds [2048 x i16], [2048 x i16]* %4, i64 0, i64 %63
  store i16 %62, i16* %64, align 2
  %65 = add nsw i64 %43, 4
  %66 = icmp slt i64 %65, %22
  br i1 %66, label %42, label %67

67:                                               ; preds = %39, %42, %3
  call void @WebRtcSpl_ComplexBitReverse(i16* nonnull %9, i32 %6) #6
  %68 = load i32, i32* %5, align 4
  %69 = call i32 @WebRtcSpl_ComplexIFFT(i16* nonnull %9, i32 %68, i32 1) #6
  %70 = icmp eq i32 %6, 31
  br i1 %70, label %105, label %71

71:                                               ; preds = %67
  %72 = sext i32 %7 to i64
  %73 = icmp sgt i64 %72, 1
  %74 = select i1 %73, i64 %72, i64 1
  %75 = icmp ult i64 %74, 9
  br i1 %75, label %93, label %76

76:                                               ; preds = %71
  %77 = and i64 %74, 7
  %78 = icmp eq i64 %77, 0
  %79 = select i1 %78, i64 8, i64 %77
  %80 = sub nsw i64 %74, %79
  %81 = shl nsw i64 %80, 1
  br label %82

82:                                               ; preds = %82, %76
  %83 = phi i64 [ 0, %76 ], [ %91, %82 ]
  %84 = shl i64 %83, 1
  %85 = getelementptr inbounds [2048 x i16], [2048 x i16]* %4, i64 0, i64 %84
  %86 = bitcast i16* %85 to <16 x i16>*
  %87 = load <16 x i16>, <16 x i16>* %86, align 16
  %88 = shufflevector <16 x i16> %87, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %89 = getelementptr inbounds i16, i16* %2, i64 %83
  %90 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %90, align 2
  %91 = add i64 %83, 8
  %92 = icmp eq i64 %91, %80
  br i1 %92, label %93, label %82, !llvm.loop !8

93:                                               ; preds = %82, %71
  %94 = phi i64 [ 0, %71 ], [ %80, %82 ]
  %95 = phi i64 [ 0, %71 ], [ %81, %82 ]
  br label %96

96:                                               ; preds = %93, %96
  %97 = phi i64 [ %102, %96 ], [ %94, %93 ]
  %98 = phi i64 [ %103, %96 ], [ %95, %93 ]
  %99 = getelementptr inbounds [2048 x i16], [2048 x i16]* %4, i64 0, i64 %98
  %100 = load i16, i16* %99, align 4
  %101 = getelementptr inbounds i16, i16* %2, i64 %97
  store i16 %100, i16* %101, align 2
  %102 = add nuw nsw i64 %97, 1
  %103 = add nuw nsw i64 %98, 2
  %104 = icmp slt i64 %102, %72
  br i1 %104, label %96, label %105, !llvm.loop !9

105:                                              ; preds = %96, %67
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %8) #6
  ret i32 %69
}

declare i32 @WebRtcSpl_ComplexIFFT(i16*, i32, i32) local_unnamed_addr #5

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !7, !3}
