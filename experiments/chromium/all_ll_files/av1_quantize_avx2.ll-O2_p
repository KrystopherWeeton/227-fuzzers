; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/av1_quantize_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/av1_quantize_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_quantize_lp_avx2(i16* nocapture readonly, i64, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture, i16* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readonly) local_unnamed_addr #0 {
  %10 = getelementptr inbounds i16, i16* %0, i64 %1
  %11 = getelementptr inbounds i16, i16* %8, i64 %1
  %12 = getelementptr inbounds i16, i16* %4, i64 %1
  %13 = getelementptr inbounds i16, i16* %5, i64 %1
  %14 = bitcast i16* %2 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 16
  %16 = bitcast i16* %3 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 16
  %18 = bitcast i16* %6 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 16
  %20 = shufflevector <2 x i64> %15, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
  %21 = shufflevector <2 x i64> %17, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
  %22 = shufflevector <2 x i64> %19, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
  %23 = bitcast i16* %0 to <16 x i16>*
  %24 = load <16 x i16>, <16 x i16>* %23, align 1
  %25 = sub <16 x i16> zeroinitializer, %24
  %26 = icmp slt <16 x i16> %24, zeroinitializer
  %27 = select <16 x i1> %26, <16 x i16> %25, <16 x i16> %24
  %28 = bitcast <4 x i64> %20 to <16 x i16>
  %29 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %27, <16 x i16> %28) #4
  %30 = bitcast <4 x i64> %21 to <16 x i16>
  %31 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %29, <16 x i16> %30) #4
  %32 = tail call <16 x i16> @llvm.x86.avx2.psign.w(<16 x i16> %31, <16 x i16> %24) #4
  %33 = bitcast i16* %4 to <16 x i16>*
  store <16 x i16> %32, <16 x i16>* %33, align 1
  %34 = bitcast <4 x i64> %22 to <16 x i16>
  %35 = mul <16 x i16> %32, %34
  %36 = bitcast i16* %5 to <16 x i16>*
  store <16 x i16> %35, <16 x i16>* %36, align 1
  %37 = bitcast i16* %8 to <16 x i16>*
  %38 = load <16 x i16>, <16 x i16>* %37, align 1
  %39 = icmp ne <16 x i16> %35, zeroinitializer
  %40 = sext <16 x i1> %39 to <16 x i16>
  %41 = sub <16 x i16> %38, %40
  %42 = and <16 x i16> %41, %40
  %43 = bitcast <16 x i16> %42 to <4 x i64>
  %44 = sub i64 16, %1
  %45 = shufflevector <2 x i64> %19, <2 x i64> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %46 = bitcast <4 x i64> %45 to <16 x i16>
  %47 = ashr <16 x i16> %46, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %48 = icmp slt i64 %44, 0
  br i1 %48, label %49, label %99

49:                                               ; preds = %9
  %50 = shufflevector <2 x i64> %15, <2 x i64> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %51 = shufflevector <2 x i64> %17, <2 x i64> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %52 = bitcast <4 x i64> %50 to <16 x i16>
  %53 = bitcast <4 x i64> %51 to <16 x i16>
  br label %54

54:                                               ; preds = %49, %94
  %55 = phi i64 [ %44, %49 ], [ %97, %94 ]
  %56 = phi <4 x i64> [ %43, %49 ], [ %96, %94 ]
  %57 = phi <16 x i16> [ %42, %49 ], [ %95, %94 ]
  %58 = getelementptr inbounds i16, i16* %10, i64 %55
  %59 = bitcast i16* %58 to <16 x i16>*
  %60 = load <16 x i16>, <16 x i16>* %59, align 1
  %61 = sub <16 x i16> zeroinitializer, %60
  %62 = icmp slt <16 x i16> %60, zeroinitializer
  %63 = select <16 x i1> %62, <16 x i16> %61, <16 x i16> %60
  %64 = icmp sgt <16 x i16> %63, %47
  %65 = sext <16 x i1> %64 to <16 x i16>
  %66 = bitcast <16 x i16> %65 to <32 x i8>
  %67 = icmp slt <32 x i8> %66, zeroinitializer
  %68 = bitcast <32 x i1> %67 to i32
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %89, label %70

70:                                               ; preds = %54
  %71 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %63, <16 x i16> %52) #4
  %72 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %71, <16 x i16> %53) #4
  %73 = tail call <16 x i16> @llvm.x86.avx2.psign.w(<16 x i16> %72, <16 x i16> %60) #4
  %74 = getelementptr inbounds i16, i16* %12, i64 %55
  %75 = bitcast i16* %74 to <16 x i16>*
  store <16 x i16> %73, <16 x i16>* %75, align 1
  %76 = mul <16 x i16> %73, %46
  %77 = getelementptr inbounds i16, i16* %13, i64 %55
  %78 = bitcast i16* %77 to <16 x i16>*
  store <16 x i16> %76, <16 x i16>* %78, align 1
  %79 = getelementptr inbounds i16, i16* %11, i64 %55
  %80 = bitcast i16* %79 to <16 x i16>*
  %81 = load <16 x i16>, <16 x i16>* %80, align 1
  %82 = icmp ne <16 x i16> %76, zeroinitializer
  %83 = sext <16 x i1> %82 to <16 x i16>
  %84 = sub <16 x i16> %81, %83
  %85 = and <16 x i16> %84, %83
  %86 = icmp sgt <16 x i16> %57, %85
  %87 = select <16 x i1> %86, <16 x i16> %57, <16 x i16> %85
  %88 = bitcast <16 x i16> %87 to <4 x i64>
  br label %94

89:                                               ; preds = %54
  %90 = getelementptr inbounds i16, i16* %12, i64 %55
  %91 = bitcast i16* %90 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %91, align 1
  %92 = getelementptr inbounds i16, i16* %13, i64 %55
  %93 = bitcast i16* %92 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %93, align 1
  br label %94

94:                                               ; preds = %89, %70
  %95 = phi <16 x i16> [ %87, %70 ], [ %57, %89 ]
  %96 = phi <4 x i64> [ %88, %70 ], [ %56, %89 ]
  %97 = add nsw i64 %55, 16
  %98 = icmp slt i64 %97, 0
  br i1 %98, label %54, label %99

99:                                               ; preds = %94, %9
  %100 = phi <4 x i64> [ %43, %9 ], [ %96, %94 ]
  %101 = shufflevector <4 x i64> %100, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %102 = shufflevector <4 x i64> %100, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %103 = bitcast <2 x i64> %101 to <8 x i16>
  %104 = bitcast <2 x i64> %102 to <8 x i16>
  %105 = icmp sgt <8 x i16> %103, %104
  %106 = select <8 x i1> %105, <8 x i16> %103, <8 x i16> %104
  %107 = bitcast <8 x i16> %106 to <4 x i32>
  %108 = shufflevector <4 x i32> %107, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 0>
  %109 = bitcast <4 x i32> %108 to <8 x i16>
  %110 = icmp sgt <8 x i16> %106, %109
  %111 = select <8 x i1> %110, <8 x i16> %106, <8 x i16> %109
  %112 = shufflevector <8 x i16> %111, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %113 = icmp sgt <8 x i16> %111, %112
  %114 = select <8 x i1> %113, <8 x i16> %111, <8 x i16> %112
  %115 = shufflevector <8 x i16> %114, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %116 = icmp sgt <8 x i16> %114, %115
  %117 = select <8 x i1> %116, <8 x i16> %114, <8 x i16> %115
  %118 = extractelement <8 x i16> %117, i64 1
  store i16 %118, i16* %7, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_quantize_fp_avx2(i32* nocapture readonly, i64, i16* nocapture readnone, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readnone, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readnone, i16* nocapture readonly) local_unnamed_addr #0 {
  %13 = bitcast i16* %3 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 1
  %15 = bitcast i16* %4 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  %17 = bitcast i16* %8 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 1
  %19 = shufflevector <2 x i64> %14, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %20 = shufflevector <2 x i64> %14, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %21 = bitcast <4 x i64> %20 to <8 x i32>
  %22 = bitcast <2 x i64> %19 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %24 = shufflevector <8 x i32> %21, <8 x i32> %23, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %25 = bitcast <8 x i32> %24 to <4 x i64>
  %26 = shufflevector <2 x i64> %16, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %27 = shufflevector <2 x i64> %16, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %28 = bitcast <4 x i64> %27 to <8 x i32>
  %29 = bitcast <2 x i64> %26 to <4 x i32>
  %30 = shufflevector <4 x i32> %29, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %31 = shufflevector <8 x i32> %28, <8 x i32> %30, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %32 = bitcast <8 x i32> %31 to <4 x i64>
  %33 = shufflevector <2 x i64> %18, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %34 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = bitcast <4 x i64> %34 to <8 x i32>
  %36 = bitcast <2 x i64> %33 to <4 x i32>
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %38 = shufflevector <8 x i32> %35, <8 x i32> %37, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %39 = bitcast <8 x i32> %38 to <4 x i64>
  %40 = bitcast <8 x i32> %38 to <16 x i16>
  %41 = ashr <16 x i16> %40, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %42 = bitcast i32* %0 to <8 x i32>*
  %43 = load <8 x i32>, <8 x i32>* %42, align 1
  %44 = getelementptr inbounds i32, i32* %0, i64 8
  %45 = bitcast i32* %44 to <8 x i32>*
  %46 = load <8 x i32>, <8 x i32>* %45, align 1
  %47 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %43, <8 x i32> %46) #4
  %48 = bitcast <16 x i16> %47 to <4 x i64>
  %49 = shufflevector <4 x i64> %48, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %50 = bitcast <4 x i64> %49 to <16 x i16>
  %51 = sub <16 x i16> zeroinitializer, %50
  %52 = icmp slt <16 x i16> %50, zeroinitializer
  %53 = select <16 x i1> %52, <16 x i16> %51, <16 x i16> %50
  %54 = icmp sge <16 x i16> %53, %41
  %55 = sext <16 x i1> %54 to <16 x i16>
  %56 = bitcast <16 x i16> %55 to <32 x i8>
  %57 = icmp slt <32 x i8> %56, zeroinitializer
  %58 = bitcast <32 x i1> %57 to i32
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %96, label %60

60:                                               ; preds = %12
  %61 = bitcast <8 x i32> %24 to <16 x i16>
  %62 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %53, <16 x i16> %61) #4
  %63 = bitcast <8 x i32> %31 to <16 x i16>
  %64 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %62, <16 x i16> %63) #4
  %65 = tail call <16 x i16> @llvm.x86.avx2.psign.w(<16 x i16> %64, <16 x i16> %50) #4
  %66 = mul <16 x i16> %65, %40
  %67 = ashr <16 x i16> %65, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %68 = shufflevector <16 x i16> %65, <16 x i16> %67, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %69 = bitcast <16 x i16> %68 to <4 x i64>
  %70 = shufflevector <16 x i16> %65, <16 x i16> %67, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %71 = bitcast <16 x i16> %70 to <4 x i64>
  %72 = shufflevector <4 x i64> %69, <4 x i64> %71, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %73 = shufflevector <4 x i64> %69, <4 x i64> %71, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %74 = bitcast i32* %6 to <4 x i64>*
  store <4 x i64> %72, <4 x i64>* %74, align 1
  %75 = getelementptr inbounds i32, i32* %6, i64 8
  %76 = bitcast i32* %75 to <4 x i64>*
  store <4 x i64> %73, <4 x i64>* %76, align 1
  %77 = ashr <16 x i16> %66, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %78 = shufflevector <16 x i16> %66, <16 x i16> %77, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %79 = bitcast <16 x i16> %78 to <4 x i64>
  %80 = shufflevector <16 x i16> %66, <16 x i16> %77, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %81 = bitcast <16 x i16> %80 to <4 x i64>
  %82 = shufflevector <4 x i64> %79, <4 x i64> %81, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %83 = shufflevector <4 x i64> %79, <4 x i64> %81, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %84 = bitcast i32* %7 to <4 x i64>*
  store <4 x i64> %82, <4 x i64>* %84, align 1
  %85 = getelementptr inbounds i32, i32* %7, i64 8
  %86 = bitcast i32* %85 to <4 x i64>*
  store <4 x i64> %83, <4 x i64>* %86, align 1
  %87 = bitcast i16* %11 to <16 x i16>*
  %88 = load <16 x i16>, <16 x i16>* %87, align 1
  %89 = icmp ne <16 x i16> %66, zeroinitializer
  %90 = sext <16 x i1> %89 to <16 x i16>
  %91 = sub <16 x i16> %88, %90
  %92 = and <16 x i16> %91, %90
  %93 = icmp sgt <16 x i16> %92, zeroinitializer
  %94 = select <16 x i1> %93, <16 x i16> %92, <16 x i16> zeroinitializer
  %95 = bitcast <16 x i16> %94 to <4 x i64>
  br label %99

96:                                               ; preds = %12
  %97 = bitcast i32* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %97, i8 0, i64 64, i1 false) #4
  %98 = bitcast i32* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %98, i8 0, i64 64, i1 false) #4
  br label %99

99:                                               ; preds = %60, %96
  %100 = phi <16 x i16> [ zeroinitializer, %96 ], [ %94, %60 ]
  %101 = phi <4 x i64> [ zeroinitializer, %96 ], [ %95, %60 ]
  %102 = shufflevector <4 x i64> %39, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %103 = bitcast <4 x i64> %102 to <16 x i16>
  %104 = ashr <16 x i16> %103, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %105 = add nsw i64 %1, -16
  %106 = icmp sgt i64 %105, 0
  br i1 %106, label %107, label %184

107:                                              ; preds = %99
  %108 = shufflevector <4 x i64> %32, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %109 = shufflevector <4 x i64> %25, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %110 = bitcast <4 x i64> %109 to <16 x i16>
  %111 = bitcast <4 x i64> %108 to <16 x i16>
  br label %112

112:                                              ; preds = %107, %179
  %113 = phi i32* [ %7, %107 ], [ %123, %179 ]
  %114 = phi i32* [ %6, %107 ], [ %122, %179 ]
  %115 = phi i16* [ %11, %107 ], [ %121, %179 ]
  %116 = phi i32* [ %0, %107 ], [ %120, %179 ]
  %117 = phi i64 [ %105, %107 ], [ %182, %179 ]
  %118 = phi <4 x i64> [ %101, %107 ], [ %181, %179 ]
  %119 = phi <16 x i16> [ %100, %107 ], [ %180, %179 ]
  %120 = getelementptr inbounds i32, i32* %116, i64 16
  %121 = getelementptr inbounds i16, i16* %115, i64 16
  %122 = getelementptr inbounds i32, i32* %114, i64 16
  %123 = getelementptr inbounds i32, i32* %113, i64 16
  %124 = bitcast i32* %120 to <8 x i32>*
  %125 = load <8 x i32>, <8 x i32>* %124, align 1
  %126 = getelementptr inbounds i32, i32* %116, i64 24
  %127 = bitcast i32* %126 to <8 x i32>*
  %128 = load <8 x i32>, <8 x i32>* %127, align 1
  %129 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %125, <8 x i32> %128) #4
  %130 = bitcast <16 x i16> %129 to <4 x i64>
  %131 = shufflevector <4 x i64> %130, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %132 = bitcast <4 x i64> %131 to <16 x i16>
  %133 = sub <16 x i16> zeroinitializer, %132
  %134 = icmp slt <16 x i16> %132, zeroinitializer
  %135 = select <16 x i1> %134, <16 x i16> %133, <16 x i16> %132
  %136 = icmp sge <16 x i16> %135, %104
  %137 = sext <16 x i1> %136 to <16 x i16>
  %138 = bitcast <16 x i16> %137 to <32 x i8>
  %139 = icmp slt <32 x i8> %138, zeroinitializer
  %140 = bitcast <32 x i1> %139 to i32
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %176, label %142

142:                                              ; preds = %112
  %143 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %135, <16 x i16> %110) #4
  %144 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %143, <16 x i16> %111) #4
  %145 = tail call <16 x i16> @llvm.x86.avx2.psign.w(<16 x i16> %144, <16 x i16> %132) #4
  %146 = mul <16 x i16> %145, %103
  %147 = ashr <16 x i16> %145, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %148 = shufflevector <16 x i16> %145, <16 x i16> %147, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %149 = bitcast <16 x i16> %148 to <4 x i64>
  %150 = shufflevector <16 x i16> %145, <16 x i16> %147, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %151 = bitcast <16 x i16> %150 to <4 x i64>
  %152 = shufflevector <4 x i64> %149, <4 x i64> %151, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %153 = shufflevector <4 x i64> %149, <4 x i64> %151, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %154 = bitcast i32* %122 to <4 x i64>*
  store <4 x i64> %152, <4 x i64>* %154, align 1
  %155 = getelementptr inbounds i32, i32* %114, i64 24
  %156 = bitcast i32* %155 to <4 x i64>*
  store <4 x i64> %153, <4 x i64>* %156, align 1
  %157 = ashr <16 x i16> %146, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %158 = shufflevector <16 x i16> %146, <16 x i16> %157, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %159 = bitcast <16 x i16> %158 to <4 x i64>
  %160 = shufflevector <16 x i16> %146, <16 x i16> %157, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %161 = bitcast <16 x i16> %160 to <4 x i64>
  %162 = shufflevector <4 x i64> %159, <4 x i64> %161, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %163 = shufflevector <4 x i64> %159, <4 x i64> %161, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %164 = bitcast i32* %123 to <4 x i64>*
  store <4 x i64> %162, <4 x i64>* %164, align 1
  %165 = getelementptr inbounds i32, i32* %113, i64 24
  %166 = bitcast i32* %165 to <4 x i64>*
  store <4 x i64> %163, <4 x i64>* %166, align 1
  %167 = bitcast i16* %121 to <16 x i16>*
  %168 = load <16 x i16>, <16 x i16>* %167, align 1
  %169 = icmp ne <16 x i16> %146, zeroinitializer
  %170 = sext <16 x i1> %169 to <16 x i16>
  %171 = sub <16 x i16> %168, %170
  %172 = and <16 x i16> %171, %170
  %173 = icmp sgt <16 x i16> %119, %172
  %174 = select <16 x i1> %173, <16 x i16> %119, <16 x i16> %172
  %175 = bitcast <16 x i16> %174 to <4 x i64>
  br label %179

176:                                              ; preds = %112
  %177 = bitcast i32* %122 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %177, i8 0, i64 64, i1 false) #4
  %178 = bitcast i32* %123 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %178, i8 0, i64 64, i1 false) #4
  br label %179

179:                                              ; preds = %142, %176
  %180 = phi <16 x i16> [ %119, %176 ], [ %174, %142 ]
  %181 = phi <4 x i64> [ %118, %176 ], [ %175, %142 ]
  %182 = add nsw i64 %117, -16
  %183 = icmp sgt i64 %182, 0
  br i1 %183, label %112, label %184

184:                                              ; preds = %179, %99
  %185 = phi <4 x i64> [ %101, %99 ], [ %181, %179 ]
  %186 = shufflevector <4 x i64> %185, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %187 = bitcast <4 x i64> %185 to <8 x i32>
  %188 = shufflevector <8 x i32> %187, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %189 = bitcast <2 x i64> %186 to <8 x i16>
  %190 = bitcast <4 x i32> %188 to <8 x i16>
  %191 = icmp sgt <8 x i16> %189, %190
  %192 = select <8 x i1> %191, <8 x i16> %189, <8 x i16> %190
  %193 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>, <8 x i16> %192) #4
  %194 = tail call <8 x i16> @llvm.x86.sse41.phminposuw(<8 x i16> %193) #4
  %195 = extractelement <8 x i16> %194, i64 0
  %196 = sub i16 32767, %195
  store i16 %196, i16* %9, align 2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_quantize_fp_32x32_avx2(i32* nocapture readonly, i64, i16* nocapture readnone, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readnone, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readnone, i16* nocapture readonly) local_unnamed_addr #0 {
  %13 = bitcast i16* %3 to <8 x i16>*
  %14 = load <8 x i16>, <8 x i16>* %13, align 1
  %15 = bitcast i16* %4 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  %17 = bitcast i16* %8 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 1
  %19 = add <8 x i16> %14, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %20 = ashr <8 x i16> %19, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %21 = bitcast <8 x i16> %20 to <2 x i64>
  %22 = shufflevector <2 x i64> %21, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %23 = shufflevector <2 x i64> %21, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %24 = bitcast <4 x i64> %23 to <8 x i32>
  %25 = bitcast <2 x i64> %22 to <4 x i32>
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %27 = shufflevector <8 x i32> %24, <8 x i32> %26, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %28 = bitcast <8 x i32> %27 to <4 x i64>
  %29 = shufflevector <2 x i64> %16, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %30 = shufflevector <2 x i64> %16, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = bitcast <4 x i64> %30 to <8 x i32>
  %32 = bitcast <2 x i64> %29 to <4 x i32>
  %33 = shufflevector <4 x i32> %32, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %34 = shufflevector <8 x i32> %31, <8 x i32> %33, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %35 = bitcast <8 x i32> %34 to <16 x i16>
  %36 = shl <16 x i16> %35, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %37 = bitcast <16 x i16> %36 to <4 x i64>
  %38 = shufflevector <2 x i64> %18, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %39 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %40 = bitcast <4 x i64> %39 to <8 x i32>
  %41 = bitcast <2 x i64> %38 to <4 x i32>
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %43 = shufflevector <8 x i32> %40, <8 x i32> %42, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %44 = bitcast <8 x i32> %43 to <4 x i64>
  %45 = bitcast <8 x i32> %43 to <16 x i16>
  %46 = ashr <16 x i16> %45, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %47 = bitcast i32* %0 to <8 x i32>*
  %48 = load <8 x i32>, <8 x i32>* %47, align 1
  %49 = getelementptr inbounds i32, i32* %0, i64 8
  %50 = bitcast i32* %49 to <8 x i32>*
  %51 = load <8 x i32>, <8 x i32>* %50, align 1
  %52 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %48, <8 x i32> %51) #4
  %53 = bitcast <16 x i16> %52 to <4 x i64>
  %54 = shufflevector <4 x i64> %53, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %55 = bitcast <4 x i64> %54 to <16 x i16>
  %56 = sub <16 x i16> zeroinitializer, %55
  %57 = icmp slt <16 x i16> %55, zeroinitializer
  %58 = select <16 x i1> %57, <16 x i16> %56, <16 x i16> %55
  %59 = icmp sge <16 x i16> %58, %46
  %60 = sext <16 x i1> %59 to <16 x i16>
  %61 = bitcast <16 x i16> %60 to <32 x i8>
  %62 = icmp slt <32 x i8> %61, zeroinitializer
  %63 = bitcast <32 x i1> %62 to i32
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %102, label %65

65:                                               ; preds = %12
  %66 = bitcast <8 x i32> %27 to <16 x i16>
  %67 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %58, <16 x i16> %66) #4
  %68 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %67, <16 x i16> %36) #4
  %69 = mul <16 x i16> %68, %45
  %70 = lshr <16 x i16> %69, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %71 = tail call <16 x i16> @llvm.x86.avx2.psign.w(<16 x i16> %68, <16 x i16> %55) #4
  %72 = tail call <16 x i16> @llvm.x86.avx2.psign.w(<16 x i16> %70, <16 x i16> %55) #4
  %73 = ashr <16 x i16> %71, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %74 = shufflevector <16 x i16> %71, <16 x i16> %73, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %75 = bitcast <16 x i16> %74 to <4 x i64>
  %76 = shufflevector <16 x i16> %71, <16 x i16> %73, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %77 = bitcast <16 x i16> %76 to <4 x i64>
  %78 = shufflevector <4 x i64> %75, <4 x i64> %77, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %79 = shufflevector <4 x i64> %75, <4 x i64> %77, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %80 = bitcast i32* %6 to <4 x i64>*
  store <4 x i64> %78, <4 x i64>* %80, align 1
  %81 = getelementptr inbounds i32, i32* %6, i64 8
  %82 = bitcast i32* %81 to <4 x i64>*
  store <4 x i64> %79, <4 x i64>* %82, align 1
  %83 = ashr <16 x i16> %72, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %84 = shufflevector <16 x i16> %72, <16 x i16> %83, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %85 = bitcast <16 x i16> %84 to <4 x i64>
  %86 = shufflevector <16 x i16> %72, <16 x i16> %83, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %87 = bitcast <16 x i16> %86 to <4 x i64>
  %88 = shufflevector <4 x i64> %85, <4 x i64> %87, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %89 = shufflevector <4 x i64> %85, <4 x i64> %87, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %90 = bitcast i32* %7 to <4 x i64>*
  store <4 x i64> %88, <4 x i64>* %90, align 1
  %91 = getelementptr inbounds i32, i32* %7, i64 8
  %92 = bitcast i32* %91 to <4 x i64>*
  store <4 x i64> %89, <4 x i64>* %92, align 1
  %93 = bitcast i16* %11 to <16 x i16>*
  %94 = load <16 x i16>, <16 x i16>* %93, align 1
  %95 = icmp ne <16 x i16> %72, zeroinitializer
  %96 = sext <16 x i1> %95 to <16 x i16>
  %97 = sub <16 x i16> %94, %96
  %98 = and <16 x i16> %97, %96
  %99 = icmp sgt <16 x i16> %98, zeroinitializer
  %100 = select <16 x i1> %99, <16 x i16> %98, <16 x i16> zeroinitializer
  %101 = bitcast <16 x i16> %100 to <4 x i64>
  br label %105

102:                                              ; preds = %12
  %103 = bitcast i32* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %103, i8 0, i64 64, i1 false) #4
  %104 = bitcast i32* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %104, i8 0, i64 64, i1 false) #4
  br label %105

105:                                              ; preds = %65, %102
  %106 = phi <16 x i16> [ zeroinitializer, %102 ], [ %100, %65 ]
  %107 = phi <4 x i64> [ zeroinitializer, %102 ], [ %101, %65 ]
  %108 = shufflevector <4 x i64> %44, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %109 = bitcast <4 x i64> %108 to <16 x i16>
  %110 = ashr <16 x i16> %109, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %111 = add nsw i64 %1, -16
  %112 = icmp sgt i64 %111, 0
  br i1 %112, label %113, label %192

113:                                              ; preds = %105
  %114 = shufflevector <4 x i64> %37, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %115 = shufflevector <4 x i64> %28, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %116 = bitcast <4 x i64> %115 to <16 x i16>
  %117 = bitcast <4 x i64> %114 to <16 x i16>
  br label %118

118:                                              ; preds = %113, %187
  %119 = phi i32* [ %7, %113 ], [ %129, %187 ]
  %120 = phi i32* [ %6, %113 ], [ %128, %187 ]
  %121 = phi i16* [ %11, %113 ], [ %127, %187 ]
  %122 = phi i32* [ %0, %113 ], [ %126, %187 ]
  %123 = phi i64 [ %111, %113 ], [ %190, %187 ]
  %124 = phi <4 x i64> [ %107, %113 ], [ %189, %187 ]
  %125 = phi <16 x i16> [ %106, %113 ], [ %188, %187 ]
  %126 = getelementptr inbounds i32, i32* %122, i64 16
  %127 = getelementptr inbounds i16, i16* %121, i64 16
  %128 = getelementptr inbounds i32, i32* %120, i64 16
  %129 = getelementptr inbounds i32, i32* %119, i64 16
  %130 = bitcast i32* %126 to <8 x i32>*
  %131 = load <8 x i32>, <8 x i32>* %130, align 1
  %132 = getelementptr inbounds i32, i32* %122, i64 24
  %133 = bitcast i32* %132 to <8 x i32>*
  %134 = load <8 x i32>, <8 x i32>* %133, align 1
  %135 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %131, <8 x i32> %134) #4
  %136 = bitcast <16 x i16> %135 to <4 x i64>
  %137 = shufflevector <4 x i64> %136, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %138 = bitcast <4 x i64> %137 to <16 x i16>
  %139 = sub <16 x i16> zeroinitializer, %138
  %140 = icmp slt <16 x i16> %138, zeroinitializer
  %141 = select <16 x i1> %140, <16 x i16> %139, <16 x i16> %138
  %142 = icmp sge <16 x i16> %141, %110
  %143 = sext <16 x i1> %142 to <16 x i16>
  %144 = bitcast <16 x i16> %143 to <32 x i8>
  %145 = icmp slt <32 x i8> %144, zeroinitializer
  %146 = bitcast <32 x i1> %145 to i32
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %184, label %148

148:                                              ; preds = %118
  %149 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %141, <16 x i16> %116) #4
  %150 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %149, <16 x i16> %117) #4
  %151 = mul <16 x i16> %150, %109
  %152 = lshr <16 x i16> %151, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %153 = tail call <16 x i16> @llvm.x86.avx2.psign.w(<16 x i16> %150, <16 x i16> %138) #4
  %154 = tail call <16 x i16> @llvm.x86.avx2.psign.w(<16 x i16> %152, <16 x i16> %138) #4
  %155 = ashr <16 x i16> %153, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %156 = shufflevector <16 x i16> %153, <16 x i16> %155, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %157 = bitcast <16 x i16> %156 to <4 x i64>
  %158 = shufflevector <16 x i16> %153, <16 x i16> %155, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %159 = bitcast <16 x i16> %158 to <4 x i64>
  %160 = shufflevector <4 x i64> %157, <4 x i64> %159, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %161 = shufflevector <4 x i64> %157, <4 x i64> %159, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %162 = bitcast i32* %128 to <4 x i64>*
  store <4 x i64> %160, <4 x i64>* %162, align 1
  %163 = getelementptr inbounds i32, i32* %120, i64 24
  %164 = bitcast i32* %163 to <4 x i64>*
  store <4 x i64> %161, <4 x i64>* %164, align 1
  %165 = ashr <16 x i16> %154, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %166 = shufflevector <16 x i16> %154, <16 x i16> %165, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %167 = bitcast <16 x i16> %166 to <4 x i64>
  %168 = shufflevector <16 x i16> %154, <16 x i16> %165, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %169 = bitcast <16 x i16> %168 to <4 x i64>
  %170 = shufflevector <4 x i64> %167, <4 x i64> %169, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %171 = shufflevector <4 x i64> %167, <4 x i64> %169, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %172 = bitcast i32* %129 to <4 x i64>*
  store <4 x i64> %170, <4 x i64>* %172, align 1
  %173 = getelementptr inbounds i32, i32* %119, i64 24
  %174 = bitcast i32* %173 to <4 x i64>*
  store <4 x i64> %171, <4 x i64>* %174, align 1
  %175 = bitcast i16* %127 to <16 x i16>*
  %176 = load <16 x i16>, <16 x i16>* %175, align 1
  %177 = icmp ne <16 x i16> %154, zeroinitializer
  %178 = sext <16 x i1> %177 to <16 x i16>
  %179 = sub <16 x i16> %176, %178
  %180 = and <16 x i16> %179, %178
  %181 = icmp sgt <16 x i16> %125, %180
  %182 = select <16 x i1> %181, <16 x i16> %125, <16 x i16> %180
  %183 = bitcast <16 x i16> %182 to <4 x i64>
  br label %187

184:                                              ; preds = %118
  %185 = bitcast i32* %128 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %185, i8 0, i64 64, i1 false) #4
  %186 = bitcast i32* %129 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %186, i8 0, i64 64, i1 false) #4
  br label %187

187:                                              ; preds = %148, %184
  %188 = phi <16 x i16> [ %125, %184 ], [ %182, %148 ]
  %189 = phi <4 x i64> [ %124, %184 ], [ %183, %148 ]
  %190 = add nsw i64 %123, -16
  %191 = icmp sgt i64 %190, 0
  br i1 %191, label %118, label %192

192:                                              ; preds = %187, %105
  %193 = phi <4 x i64> [ %107, %105 ], [ %189, %187 ]
  %194 = shufflevector <4 x i64> %193, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %195 = bitcast <4 x i64> %193 to <8 x i32>
  %196 = shufflevector <8 x i32> %195, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %197 = bitcast <2 x i64> %194 to <8 x i16>
  %198 = bitcast <4 x i32> %196 to <8 x i16>
  %199 = icmp sgt <8 x i16> %197, %198
  %200 = select <8 x i1> %199, <8 x i16> %197, <8 x i16> %198
  %201 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>, <8 x i16> %200) #4
  %202 = tail call <8 x i16> @llvm.x86.sse41.phminposuw(<8 x i16> %201) #4
  %203 = extractelement <8 x i16> %202, i64 0
  %204 = sub i16 32767, %203
  store i16 %204, i16* %9, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_quantize_fp_64x64_avx2(i32* nocapture readonly, i64, i16* nocapture readnone, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readnone, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readnone, i16* nocapture readonly) local_unnamed_addr #0 {
  %13 = bitcast i16* %3 to <8 x i16>*
  %14 = load <8 x i16>, <8 x i16>* %13, align 1
  %15 = bitcast i16* %4 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  %17 = bitcast i16* %8 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 1
  %19 = add <8 x i16> %14, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20 = ashr <8 x i16> %19, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21 = bitcast <8 x i16> %20 to <2 x i64>
  %22 = shufflevector <2 x i64> %21, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %23 = shufflevector <2 x i64> %21, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %24 = bitcast <4 x i64> %23 to <8 x i32>
  %25 = bitcast <2 x i64> %22 to <4 x i32>
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %27 = shufflevector <8 x i32> %24, <8 x i32> %26, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %28 = bitcast <8 x i32> %27 to <4 x i64>
  %29 = shufflevector <2 x i64> %16, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %30 = shufflevector <2 x i64> %16, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = bitcast <4 x i64> %30 to <8 x i32>
  %32 = bitcast <2 x i64> %29 to <4 x i32>
  %33 = shufflevector <4 x i32> %32, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %34 = shufflevector <8 x i32> %31, <8 x i32> %33, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %35 = bitcast <8 x i32> %34 to <4 x i64>
  %36 = shufflevector <2 x i64> %18, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %37 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = bitcast <4 x i64> %37 to <8 x i32>
  %39 = bitcast <2 x i64> %36 to <4 x i32>
  %40 = shufflevector <4 x i32> %39, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %41 = shufflevector <8 x i32> %38, <8 x i32> %40, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %42 = bitcast <8 x i32> %41 to <4 x i64>
  %43 = bitcast <8 x i32> %41 to <16 x i16>
  %44 = ashr <16 x i16> %43, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %45 = bitcast i32* %0 to <8 x i32>*
  %46 = load <8 x i32>, <8 x i32>* %45, align 1
  %47 = getelementptr inbounds i32, i32* %0, i64 8
  %48 = bitcast i32* %47 to <8 x i32>*
  %49 = load <8 x i32>, <8 x i32>* %48, align 1
  %50 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %46, <8 x i32> %49) #4
  %51 = bitcast <16 x i16> %50 to <4 x i64>
  %52 = shufflevector <4 x i64> %51, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %53 = bitcast <4 x i64> %52 to <16 x i16>
  %54 = sub <16 x i16> zeroinitializer, %53
  %55 = icmp slt <16 x i16> %53, zeroinitializer
  %56 = select <16 x i1> %55, <16 x i16> %54, <16 x i16> %53
  %57 = icmp sge <16 x i16> %56, %44
  %58 = sext <16 x i1> %57 to <16 x i16>
  %59 = bitcast <16 x i16> %58 to <32 x i8>
  %60 = icmp slt <32 x i8> %59, zeroinitializer
  %61 = bitcast <32 x i1> %60 to i32
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %108, label %63

63:                                               ; preds = %12
  %64 = bitcast <8 x i32> %27 to <16 x i16>
  %65 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %56, <16 x i16> %64) #4
  %66 = bitcast <8 x i32> %34 to <16 x i16>
  %67 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %65, <16 x i16> %66) #4
  %68 = mul <16 x i16> %65, %66
  %69 = shl <16 x i16> %67, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %70 = lshr <16 x i16> %68, <i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14>
  %71 = or <16 x i16> %69, %70
  %72 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %71, <16 x i16> %43) #4
  %73 = shl <16 x i16> %72, <i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14>
  %74 = mul <16 x i16> %71, %43
  %75 = lshr <16 x i16> %74, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %76 = or <16 x i16> %75, %73
  %77 = tail call <16 x i16> @llvm.x86.avx2.psign.w(<16 x i16> %71, <16 x i16> %53) #4
  %78 = tail call <16 x i16> @llvm.x86.avx2.psign.w(<16 x i16> %76, <16 x i16> %53) #4
  %79 = ashr <16 x i16> %77, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %80 = shufflevector <16 x i16> %77, <16 x i16> %79, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %81 = bitcast <16 x i16> %80 to <4 x i64>
  %82 = shufflevector <16 x i16> %77, <16 x i16> %79, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %83 = bitcast <16 x i16> %82 to <4 x i64>
  %84 = shufflevector <4 x i64> %81, <4 x i64> %83, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %85 = shufflevector <4 x i64> %81, <4 x i64> %83, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %86 = bitcast i32* %6 to <4 x i64>*
  store <4 x i64> %84, <4 x i64>* %86, align 1
  %87 = getelementptr inbounds i32, i32* %6, i64 8
  %88 = bitcast i32* %87 to <4 x i64>*
  store <4 x i64> %85, <4 x i64>* %88, align 1
  %89 = ashr <16 x i16> %78, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %90 = shufflevector <16 x i16> %78, <16 x i16> %89, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %91 = bitcast <16 x i16> %90 to <4 x i64>
  %92 = shufflevector <16 x i16> %78, <16 x i16> %89, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %93 = bitcast <16 x i16> %92 to <4 x i64>
  %94 = shufflevector <4 x i64> %91, <4 x i64> %93, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %95 = shufflevector <4 x i64> %91, <4 x i64> %93, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %96 = bitcast i32* %7 to <4 x i64>*
  store <4 x i64> %94, <4 x i64>* %96, align 1
  %97 = getelementptr inbounds i32, i32* %7, i64 8
  %98 = bitcast i32* %97 to <4 x i64>*
  store <4 x i64> %95, <4 x i64>* %98, align 1
  %99 = bitcast i16* %11 to <16 x i16>*
  %100 = load <16 x i16>, <16 x i16>* %99, align 1
  %101 = icmp ne <16 x i16> %78, zeroinitializer
  %102 = sext <16 x i1> %101 to <16 x i16>
  %103 = sub <16 x i16> %100, %102
  %104 = and <16 x i16> %103, %102
  %105 = icmp sgt <16 x i16> %104, zeroinitializer
  %106 = select <16 x i1> %105, <16 x i16> %104, <16 x i16> zeroinitializer
  %107 = bitcast <16 x i16> %106 to <4 x i64>
  br label %111

108:                                              ; preds = %12
  %109 = bitcast i32* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %109, i8 0, i64 64, i1 false) #4
  %110 = bitcast i32* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %110, i8 0, i64 64, i1 false) #4
  br label %111

111:                                              ; preds = %63, %108
  %112 = phi <16 x i16> [ zeroinitializer, %108 ], [ %106, %63 ]
  %113 = phi <4 x i64> [ zeroinitializer, %108 ], [ %107, %63 ]
  %114 = shufflevector <4 x i64> %42, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %115 = bitcast <4 x i64> %114 to <16 x i16>
  %116 = ashr <16 x i16> %115, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %117 = add nsw i64 %1, -16
  %118 = icmp sgt i64 %117, 0
  br i1 %118, label %119, label %205

119:                                              ; preds = %111
  %120 = shufflevector <4 x i64> %35, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %121 = shufflevector <4 x i64> %28, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %122 = bitcast <4 x i64> %121 to <16 x i16>
  %123 = bitcast <4 x i64> %120 to <16 x i16>
  br label %124

124:                                              ; preds = %119, %200
  %125 = phi i32* [ %7, %119 ], [ %135, %200 ]
  %126 = phi i32* [ %6, %119 ], [ %134, %200 ]
  %127 = phi i16* [ %11, %119 ], [ %133, %200 ]
  %128 = phi i32* [ %0, %119 ], [ %132, %200 ]
  %129 = phi i64 [ %117, %119 ], [ %203, %200 ]
  %130 = phi <4 x i64> [ %113, %119 ], [ %202, %200 ]
  %131 = phi <16 x i16> [ %112, %119 ], [ %201, %200 ]
  %132 = getelementptr inbounds i32, i32* %128, i64 16
  %133 = getelementptr inbounds i16, i16* %127, i64 16
  %134 = getelementptr inbounds i32, i32* %126, i64 16
  %135 = getelementptr inbounds i32, i32* %125, i64 16
  %136 = bitcast i32* %132 to <8 x i32>*
  %137 = load <8 x i32>, <8 x i32>* %136, align 1
  %138 = getelementptr inbounds i32, i32* %128, i64 24
  %139 = bitcast i32* %138 to <8 x i32>*
  %140 = load <8 x i32>, <8 x i32>* %139, align 1
  %141 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %137, <8 x i32> %140) #4
  %142 = bitcast <16 x i16> %141 to <4 x i64>
  %143 = shufflevector <4 x i64> %142, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %144 = bitcast <4 x i64> %143 to <16 x i16>
  %145 = sub <16 x i16> zeroinitializer, %144
  %146 = icmp slt <16 x i16> %144, zeroinitializer
  %147 = select <16 x i1> %146, <16 x i16> %145, <16 x i16> %144
  %148 = icmp sge <16 x i16> %147, %116
  %149 = sext <16 x i1> %148 to <16 x i16>
  %150 = bitcast <16 x i16> %149 to <32 x i8>
  %151 = icmp slt <32 x i8> %150, zeroinitializer
  %152 = bitcast <32 x i1> %151 to i32
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %197, label %154

154:                                              ; preds = %124
  %155 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %147, <16 x i16> %122) #4
  %156 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %155, <16 x i16> %123) #4
  %157 = mul <16 x i16> %155, %123
  %158 = shl <16 x i16> %156, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %159 = lshr <16 x i16> %157, <i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14>
  %160 = or <16 x i16> %158, %159
  %161 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %160, <16 x i16> %115) #4
  %162 = shl <16 x i16> %161, <i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14>
  %163 = mul <16 x i16> %160, %115
  %164 = lshr <16 x i16> %163, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %165 = or <16 x i16> %164, %162
  %166 = tail call <16 x i16> @llvm.x86.avx2.psign.w(<16 x i16> %160, <16 x i16> %144) #4
  %167 = tail call <16 x i16> @llvm.x86.avx2.psign.w(<16 x i16> %165, <16 x i16> %144) #4
  %168 = ashr <16 x i16> %166, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %169 = shufflevector <16 x i16> %166, <16 x i16> %168, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %170 = bitcast <16 x i16> %169 to <4 x i64>
  %171 = shufflevector <16 x i16> %166, <16 x i16> %168, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %172 = bitcast <16 x i16> %171 to <4 x i64>
  %173 = shufflevector <4 x i64> %170, <4 x i64> %172, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %174 = shufflevector <4 x i64> %170, <4 x i64> %172, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %175 = bitcast i32* %134 to <4 x i64>*
  store <4 x i64> %173, <4 x i64>* %175, align 1
  %176 = getelementptr inbounds i32, i32* %126, i64 24
  %177 = bitcast i32* %176 to <4 x i64>*
  store <4 x i64> %174, <4 x i64>* %177, align 1
  %178 = ashr <16 x i16> %167, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %179 = shufflevector <16 x i16> %167, <16 x i16> %178, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %180 = bitcast <16 x i16> %179 to <4 x i64>
  %181 = shufflevector <16 x i16> %167, <16 x i16> %178, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %182 = bitcast <16 x i16> %181 to <4 x i64>
  %183 = shufflevector <4 x i64> %180, <4 x i64> %182, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %184 = shufflevector <4 x i64> %180, <4 x i64> %182, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %185 = bitcast i32* %135 to <4 x i64>*
  store <4 x i64> %183, <4 x i64>* %185, align 1
  %186 = getelementptr inbounds i32, i32* %125, i64 24
  %187 = bitcast i32* %186 to <4 x i64>*
  store <4 x i64> %184, <4 x i64>* %187, align 1
  %188 = bitcast i16* %133 to <16 x i16>*
  %189 = load <16 x i16>, <16 x i16>* %188, align 1
  %190 = icmp ne <16 x i16> %167, zeroinitializer
  %191 = sext <16 x i1> %190 to <16 x i16>
  %192 = sub <16 x i16> %189, %191
  %193 = and <16 x i16> %192, %191
  %194 = icmp sgt <16 x i16> %131, %193
  %195 = select <16 x i1> %194, <16 x i16> %131, <16 x i16> %193
  %196 = bitcast <16 x i16> %195 to <4 x i64>
  br label %200

197:                                              ; preds = %124
  %198 = bitcast i32* %134 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %198, i8 0, i64 64, i1 false) #4
  %199 = bitcast i32* %135 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %199, i8 0, i64 64, i1 false) #4
  br label %200

200:                                              ; preds = %154, %197
  %201 = phi <16 x i16> [ %131, %197 ], [ %195, %154 ]
  %202 = phi <4 x i64> [ %130, %197 ], [ %196, %154 ]
  %203 = add nsw i64 %129, -16
  %204 = icmp sgt i64 %203, 0
  br i1 %204, label %124, label %205

205:                                              ; preds = %200, %111
  %206 = phi <4 x i64> [ %113, %111 ], [ %202, %200 ]
  %207 = shufflevector <4 x i64> %206, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %208 = bitcast <4 x i64> %206 to <8 x i32>
  %209 = shufflevector <8 x i32> %208, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %210 = bitcast <2 x i64> %207 to <8 x i16>
  %211 = bitcast <4 x i32> %209 to <8 x i16>
  %212 = icmp sgt <8 x i16> %210, %211
  %213 = select <8 x i1> %212, <8 x i16> %210, <8 x i16> %211
  %214 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>, <8 x i16> %213) #4
  %215 = tail call <8 x i16> @llvm.x86.sse41.phminposuw(<8 x i16> %214) #4
  %216 = extractelement <8 x i16> %215, i64 0
  %217 = sub i16 32767, %216
  store i16 %217, i16* %9, align 2
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16>, <16 x i16>) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16>, <16 x i16>) #3

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.psign.w(<16 x i16>, <16 x i16>) #3

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32>, <8 x i32>) #3

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.usub.sat.v8i16(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse41.phminposuw(<8 x i16>) #3

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16>, <16 x i16>) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
