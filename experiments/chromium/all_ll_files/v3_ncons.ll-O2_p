; ModuleID = '../../third_party/boringssl/src/crypto/x509v3/v3_ncons.c'
source_filename = "../../third_party/boringssl/src/crypto/x509v3/v3_ncons.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ASN1_ITEM_st = type { i8, i64, %struct.ASN1_TEMPLATE_st*, i64, i8*, i64, i8* }
%struct.ASN1_TEMPLATE_st = type { i64, i64, i64, i8*, %struct.ASN1_ITEM_st* }
%struct.v3_ext_method = type { i32, i32, %struct.ASN1_ITEM_st*, i8* ()*, void (i8*)*, i8* (i8*, i8**, i64)*, i32 (i8*, i8**)*, {}*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, i8* }
%struct.stack_st_CONF_VALUE = type opaque
%struct.v3_ext_ctx = type { i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_req_st*, %struct.X509_crl_st*, %struct.X509V3_CONF_METHOD_st*, i8* }
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type { %struct.asn1_string_st*, %struct.stack_st_GENERAL_NAME*, %struct.asn1_string_st* }
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type { %struct.stack_st_GENERAL_SUBTREE*, %struct.stack_st_GENERAL_SUBTREE* }
%struct.stack_st_GENERAL_SUBTREE = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.X509_req_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type { %struct.DIST_POINT_NAME_st*, i32, i32, %struct.asn1_string_st*, i32, i32 }
%struct.DIST_POINT_NAME_st = type { i32, %union.anon.0, %struct.X509_name_st* }
%union.anon.0 = type { %struct.stack_st_GENERAL_NAME* }
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.X509V3_CONF_METHOD_st = type { i8* (i8*, i8*, i8*)*, %struct.stack_st_CONF_VALUE* (i8*, i8*)*, void (i8*, i8*)*, void (i8*, %struct.stack_st_CONF_VALUE*)* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%struct.conf_value_st = type { i8*, i8*, i8* }
%struct.ASN1_VALUE_st = type opaque
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.GENERAL_NAME_st = type { i32, %union.anon.1 }
%union.anon.1 = type { i8* }
%struct.GENERAL_SUBTREE_st = type { %struct.GENERAL_NAME_st*, %struct.asn1_string_st*, %struct.asn1_string_st* }
%struct.X509_name_entry_st = type { %struct.asn1_object_st*, %struct.asn1_string_st*, i32, i32 }

@NAME_CONSTRAINTS_it = hidden constant %struct.ASN1_ITEM_st { i8 1, i64 16, %struct.ASN1_TEMPLATE_st* getelementptr inbounds ([2 x %struct.ASN1_TEMPLATE_st], [2 x %struct.ASN1_TEMPLATE_st]* @NAME_CONSTRAINTS_seq_tt, i32 0, i32 0), i64 2, i8* null, i64 16, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0) }, align 8
@v3_name_constraints = hidden local_unnamed_addr constant { i32, i32, %struct.ASN1_ITEM_st*, i8* ()*, void (i8*)*, i8* (i8*, i8**, i64)*, i32 (i8*, i8**)*, i8* (%struct.v3_ext_method*, i8*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, i8* } { i32 666, i32 0, %struct.ASN1_ITEM_st* @NAME_CONSTRAINTS_it, i8* ()* null, void (i8*)* null, i8* (i8*, i8**, i64)* null, i32 (i8*, i8**)* null, i8* (%struct.v3_ext_method*, i8*)* null, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)* null, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)* null, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)* @v2i_NAME_CONSTRAINTS, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)* @i2r_NAME_CONSTRAINTS, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)* null, i8* null }, align 8
@GENERAL_SUBTREE_seq_tt = internal constant [3 x %struct.ASN1_TEMPLATE_st] [%struct.ASN1_TEMPLATE_st { i64 0, i64 0, i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), %struct.ASN1_ITEM_st* @GENERAL_NAME_it }, %struct.ASN1_TEMPLATE_st { i64 137, i64 0, i64 8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), %struct.ASN1_ITEM_st* @ASN1_INTEGER_it }, %struct.ASN1_TEMPLATE_st { i64 137, i64 1, i64 16, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), %struct.ASN1_ITEM_st* @ASN1_INTEGER_it }], align 16
@.str = private unnamed_addr constant [16 x i8] c"GENERAL_SUBTREE\00", align 1
@GENERAL_SUBTREE_it = hidden constant %struct.ASN1_ITEM_st { i8 1, i64 16, %struct.ASN1_TEMPLATE_st* getelementptr inbounds ([3 x %struct.ASN1_TEMPLATE_st], [3 x %struct.ASN1_TEMPLATE_st]* @GENERAL_SUBTREE_seq_tt, i32 0, i32 0), i64 3, i8* null, i64 24, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0) }, align 8
@NAME_CONSTRAINTS_seq_tt = internal constant [2 x %struct.ASN1_TEMPLATE_st] [%struct.ASN1_TEMPLATE_st { i64 141, i64 0, i64 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i32 0, i32 0), %struct.ASN1_ITEM_st* @GENERAL_SUBTREE_it }, %struct.ASN1_TEMPLATE_st { i64 141, i64 1, i64 8, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i32 0, i32 0), %struct.ASN1_ITEM_st* @GENERAL_SUBTREE_it }], align 16
@.str.1 = private unnamed_addr constant [17 x i8] c"NAME_CONSTRAINTS\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"base\00", align 1
@GENERAL_NAME_it = external constant %struct.ASN1_ITEM_st, align 8
@.str.3 = private unnamed_addr constant [8 x i8] c"minimum\00", align 1
@ASN1_INTEGER_it = external constant %struct.ASN1_ITEM_st, align 8
@.str.4 = private unnamed_addr constant [8 x i8] c"maximum\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"permittedSubtrees\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"excludedSubtrees\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"permitted\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"excluded\00", align 1
@.str.9 = private unnamed_addr constant [57 x i8] c"../../third_party/boringssl/src/crypto/x509v3/v3_ncons.c\00", align 1
@.str.10 = private unnamed_addr constant [10 x i8] c"Permitted\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"Excluded\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"%*s%s:\0A\00", align 1
@.str.13 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"%*s\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"IP:\00", align 1
@.str.17 = private unnamed_addr constant [24 x i8] c"%d.%d.%d.%d/%d.%d.%d.%d\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"%X\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.20 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.21 = private unnamed_addr constant [21 x i8] c"IP Address:<invalid>\00", align 1

; Function Attrs: nounwind ssp uwtable
define internal i8* @v2i_NAME_CONSTRAINTS(%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*) #0 {
  %4 = alloca %struct.conf_value_st, align 8
  %5 = bitcast %struct.conf_value_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #6
  %6 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %4, i64 0, i32 1
  %7 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %4, i64 0, i32 2
  %8 = bitcast %struct.conf_value_st* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 24, i1 false)
  %9 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @NAME_CONSTRAINTS_it) #6
  %10 = bitcast %struct.ASN1_VALUE_st* %9 to %struct.NAME_CONSTRAINTS_st*
  %11 = icmp ne %struct.ASN1_VALUE_st* %9, null
  br i1 %11, label %12, label %74

12:                                               ; preds = %3
  %13 = bitcast %struct.stack_st_CONF_VALUE* %2 to %struct.stack_st*
  %14 = call i64 @sk_num(%struct.stack_st* %13) #6
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %70, label %16

16:                                               ; preds = %12
  %17 = bitcast %struct.ASN1_VALUE_st* %9 to %struct.stack_st_GENERAL_SUBTREE**
  %18 = getelementptr inbounds %struct.NAME_CONSTRAINTS_st, %struct.NAME_CONSTRAINTS_st* %10, i64 0, i32 1
  %19 = bitcast i8** %7 to i64*
  br label %23

20:                                               ; preds = %63
  %21 = call i64 @sk_num(%struct.stack_st* %13) #6
  %22 = icmp ult i64 %69, %21
  br i1 %22, label %23, label %70

23:                                               ; preds = %16, %20
  %24 = phi i64 [ 0, %16 ], [ %69, %20 ]
  %25 = call i8* @sk_value(%struct.stack_st* %13, i64 %24) #6
  %26 = getelementptr inbounds i8, i8* %25, i64 8
  %27 = bitcast i8* %26 to i8**
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 @strncmp(i8* %28, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0), i64 9) #7
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %35

31:                                               ; preds = %23
  %32 = getelementptr inbounds i8, i8* %28, i64 9
  %33 = load i8, i8* %32, align 1
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %43

35:                                               ; preds = %31, %23
  %36 = call i32 @strncmp(i8* %28, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i64 0, i64 0), i64 8) #7
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %42

38:                                               ; preds = %35
  %39 = getelementptr inbounds i8, i8* %28, i64 8
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %38, %35
  call void @ERR_put_error(i32 20, i32 0, i32 135, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.9, i64 0, i64 0), i32 135) #6
  br label %79

43:                                               ; preds = %38, %31
  %44 = phi i64 [ 10, %31 ], [ 9, %38 ]
  %45 = phi %struct.stack_st_GENERAL_SUBTREE** [ %17, %31 ], [ %18, %38 ]
  %46 = getelementptr inbounds i8, i8* %28, i64 %44
  store i8* %46, i8** %6, align 8
  %47 = getelementptr inbounds i8, i8* %25, i64 16
  %48 = bitcast i8* %47 to i64*
  %49 = load i64, i64* %48, align 8
  store i64 %49, i64* %19, align 8
  %50 = call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @GENERAL_SUBTREE_it) #6
  %51 = bitcast %struct.ASN1_VALUE_st* %50 to %struct.GENERAL_NAME_st**
  %52 = load %struct.GENERAL_NAME_st*, %struct.GENERAL_NAME_st** %51, align 8
  %53 = call %struct.GENERAL_NAME_st* @v2i_GENERAL_NAME_ex(%struct.GENERAL_NAME_st* %52, %struct.v3_ext_method* %0, %struct.v3_ext_ctx* %1, %struct.conf_value_st* nonnull %4, i32 1) #6
  %54 = icmp eq %struct.GENERAL_NAME_st* %53, null
  br i1 %54, label %77, label %55

55:                                               ; preds = %43
  %56 = load %struct.stack_st_GENERAL_SUBTREE*, %struct.stack_st_GENERAL_SUBTREE** %45, align 8
  %57 = icmp eq %struct.stack_st_GENERAL_SUBTREE* %56, null
  br i1 %57, label %58, label %63

58:                                               ; preds = %55
  %59 = call %struct.stack_st* @sk_new_null() #6
  %60 = bitcast %struct.stack_st* %59 to %struct.stack_st_GENERAL_SUBTREE*
  %61 = bitcast %struct.stack_st_GENERAL_SUBTREE** %45 to %struct.stack_st**
  store %struct.stack_st* %59, %struct.stack_st** %61, align 8
  %62 = icmp eq %struct.stack_st* %59, null
  br i1 %62, label %72, label %63

63:                                               ; preds = %55, %58
  %64 = phi %struct.stack_st_GENERAL_SUBTREE* [ %60, %58 ], [ %56, %55 ]
  %65 = bitcast %struct.stack_st_GENERAL_SUBTREE* %64 to %struct.stack_st*
  %66 = bitcast %struct.ASN1_VALUE_st* %50 to i8*
  %67 = call i64 @sk_push(%struct.stack_st* %65, i8* %66) #6
  %68 = icmp eq i64 %67, 0
  %69 = add nuw i64 %24, 1
  br i1 %68, label %72, label %20

70:                                               ; preds = %20, %12
  %71 = bitcast %struct.ASN1_VALUE_st* %9 to i8*
  br label %86

72:                                               ; preds = %58, %63
  %73 = bitcast %struct.ASN1_VALUE_st* %50 to %struct.GENERAL_SUBTREE_st*
  br label %74

74:                                               ; preds = %72, %3
  %75 = phi %struct.ASN1_VALUE_st* [ null, %3 ], [ %50, %72 ]
  %76 = phi %struct.GENERAL_SUBTREE_st* [ null, %3 ], [ %73, %72 ]
  call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.9, i64 0, i64 0), i32 152) #6
  br label %79

77:                                               ; preds = %43
  %78 = bitcast %struct.ASN1_VALUE_st* %50 to %struct.GENERAL_SUBTREE_st*
  br label %79

79:                                               ; preds = %77, %74, %42
  %80 = phi %struct.ASN1_VALUE_st* [ null, %42 ], [ %75, %74 ], [ %50, %77 ]
  %81 = phi %struct.GENERAL_SUBTREE_st* [ null, %42 ], [ %76, %74 ], [ %78, %77 ]
  br i1 %11, label %82, label %83

82:                                               ; preds = %79
  call void @ASN1_item_free(%struct.ASN1_VALUE_st* nonnull %9, %struct.ASN1_ITEM_st* nonnull @NAME_CONSTRAINTS_it) #6
  br label %83

83:                                               ; preds = %82, %79
  %84 = icmp eq %struct.GENERAL_SUBTREE_st* %81, null
  br i1 %84, label %86, label %85

85:                                               ; preds = %83
  call void @ASN1_item_free(%struct.ASN1_VALUE_st* %80, %struct.ASN1_ITEM_st* nonnull @GENERAL_SUBTREE_it) #6
  br label %86

86:                                               ; preds = %85, %83, %70
  %87 = phi i8* [ %71, %70 ], [ null, %83 ], [ null, %85 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #6
  ret i8* %87
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @i2r_NAME_CONSTRAINTS(%struct.v3_ext_method* nocapture readnone, i8* nocapture readonly, %struct.bio_st*, i32) #0 {
  %5 = bitcast i8* %1 to %struct.stack_st_GENERAL_SUBTREE**
  %6 = load %struct.stack_st_GENERAL_SUBTREE*, %struct.stack_st_GENERAL_SUBTREE** %5, align 8
  tail call fastcc void @do_i2r_name_constraints(%struct.stack_st_GENERAL_SUBTREE* %6, %struct.bio_st* %2, i32 %3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0))
  %7 = getelementptr inbounds i8, i8* %1, i64 8
  %8 = bitcast i8* %7 to %struct.stack_st_GENERAL_SUBTREE**
  %9 = load %struct.stack_st_GENERAL_SUBTREE*, %struct.stack_st_GENERAL_SUBTREE** %8, align 8
  tail call fastcc void @do_i2r_name_constraints(%struct.stack_st_GENERAL_SUBTREE* %9, %struct.bio_st* %2, i32 %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i64 0, i64 0))
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.GENERAL_SUBTREE_st* @GENERAL_SUBTREE_new() local_unnamed_addr #0 {
  %1 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @GENERAL_SUBTREE_it) #6
  %2 = bitcast %struct.ASN1_VALUE_st* %1 to %struct.GENERAL_SUBTREE_st*
  ret %struct.GENERAL_SUBTREE_st* %2
}

declare %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @GENERAL_SUBTREE_free(%struct.GENERAL_SUBTREE_st*) local_unnamed_addr #0 {
  %2 = bitcast %struct.GENERAL_SUBTREE_st* %0 to %struct.ASN1_VALUE_st*
  tail call void @ASN1_item_free(%struct.ASN1_VALUE_st* %2, %struct.ASN1_ITEM_st* nonnull @GENERAL_SUBTREE_it) #6
  ret void
}

declare void @ASN1_item_free(%struct.ASN1_VALUE_st*, %struct.ASN1_ITEM_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.NAME_CONSTRAINTS_st* @NAME_CONSTRAINTS_new() local_unnamed_addr #0 {
  %1 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @NAME_CONSTRAINTS_it) #6
  %2 = bitcast %struct.ASN1_VALUE_st* %1 to %struct.NAME_CONSTRAINTS_st*
  ret %struct.NAME_CONSTRAINTS_st* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @NAME_CONSTRAINTS_free(%struct.NAME_CONSTRAINTS_st*) local_unnamed_addr #0 {
  %2 = bitcast %struct.NAME_CONSTRAINTS_st* %0 to %struct.ASN1_VALUE_st*
  tail call void @ASN1_item_free(%struct.ASN1_VALUE_st* %2, %struct.ASN1_ITEM_st* nonnull @NAME_CONSTRAINTS_it) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NAME_CONSTRAINTS_check(%struct.x509_st*, %struct.NAME_CONSTRAINTS_st* nocapture readonly) local_unnamed_addr #0 {
  %3 = alloca %struct.GENERAL_NAME_st, align 8
  %4 = tail call %struct.X509_name_st* @X509_get_subject_name(%struct.x509_st* %0) #6
  %5 = tail call i32 @X509_NAME_entry_count(%struct.X509_name_st* %4) #6
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds %struct.x509_st, %struct.x509_st* %0, i64 0, i32 15
  %8 = bitcast %struct.stack_st_GENERAL_NAME** %7 to %struct.stack_st**
  %9 = load %struct.stack_st*, %struct.stack_st** %8, align 8
  %10 = tail call i64 @sk_num(%struct.stack_st* %9) #6
  %11 = add i64 %10, %6
  %12 = bitcast %struct.NAME_CONSTRAINTS_st* %1 to %struct.stack_st**
  %13 = load %struct.stack_st*, %struct.stack_st** %12, align 8
  %14 = tail call i64 @sk_num(%struct.stack_st* %13) #6
  %15 = getelementptr inbounds %struct.NAME_CONSTRAINTS_st, %struct.NAME_CONSTRAINTS_st* %1, i64 0, i32 1
  %16 = bitcast %struct.stack_st_GENERAL_SUBTREE** %15 to %struct.stack_st**
  %17 = load %struct.stack_st*, %struct.stack_st** %16, align 8
  %18 = tail call i64 @sk_num(%struct.stack_st* %17) #6
  %19 = add i64 %18, %14
  %20 = mul i64 %19, %11
  %21 = tail call i32 @X509_NAME_entry_count(%struct.X509_name_st* %4) #6
  %22 = sext i32 %21 to i64
  %23 = icmp ult i64 %11, %22
  br i1 %23, label %80, label %24

24:                                               ; preds = %2
  %25 = load %struct.stack_st*, %struct.stack_st** %12, align 8
  %26 = tail call i64 @sk_num(%struct.stack_st* %25) #6
  %27 = icmp ult i64 %19, %26
  br i1 %27, label %80, label %28

28:                                               ; preds = %24
  %29 = icmp eq i64 %19, 0
  br i1 %29, label %35, label %30

30:                                               ; preds = %28
  %31 = udiv i64 %20, %19
  %32 = icmp ne i64 %31, %11
  %33 = icmp ugt i64 %20, 1048576
  %34 = or i1 %33, %32
  br i1 %34, label %80, label %35

35:                                               ; preds = %28, %30
  %36 = tail call i32 @X509_NAME_entry_count(%struct.X509_name_st* %4) #6
  %37 = icmp sgt i32 %36, 0
  br i1 %37, label %38, label %64

38:                                               ; preds = %35
  %39 = bitcast %struct.GENERAL_NAME_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #6
  %40 = bitcast %struct.GENERAL_NAME_st* %3 to i64*
  store i64 -6148914691236517206, i64* %40, align 8
  %41 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %3, i64 0, i32 0
  store i32 4, i32* %41, align 8
  %42 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %3, i64 0, i32 1
  %43 = bitcast %union.anon.1* %42 to %struct.X509_name_st**
  store %struct.X509_name_st* %4, %struct.X509_name_st** %43, align 8
  %44 = call fastcc i32 @nc_match(%struct.GENERAL_NAME_st* nonnull %3, %struct.NAME_CONSTRAINTS_st* %1)
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %61

46:                                               ; preds = %38
  store i32 1, i32* %41, align 8
  %47 = bitcast %union.anon.1* %42 to %struct.asn1_string_st**
  br label %48

48:                                               ; preds = %58, %46
  %49 = phi i32 [ -1, %46 ], [ %50, %58 ]
  %50 = tail call i32 @X509_NAME_get_index_by_NID(%struct.X509_name_st* %4, i32 48, i32 %49) #6
  %51 = icmp eq i32 %50, -1
  br i1 %51, label %63, label %52

52:                                               ; preds = %48
  %53 = tail call %struct.X509_name_entry_st* @X509_NAME_get_entry(%struct.X509_name_st* %4, i32 %50) #6
  %54 = tail call %struct.asn1_string_st* @X509_NAME_ENTRY_get_data(%struct.X509_name_entry_st* %53) #6
  store %struct.asn1_string_st* %54, %struct.asn1_string_st** %47, align 8
  %55 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %54, i64 0, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, 22
  br i1 %57, label %58, label %61

58:                                               ; preds = %52
  %59 = call fastcc i32 @nc_match(%struct.GENERAL_NAME_st* nonnull %3, %struct.NAME_CONSTRAINTS_st* %1)
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %48, label %61

61:                                               ; preds = %52, %58, %38
  %62 = phi i32 [ %44, %38 ], [ 53, %52 ], [ %59, %58 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %39) #6
  br label %80

63:                                               ; preds = %48
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %39) #6
  br label %64

64:                                               ; preds = %63, %35
  %65 = load %struct.stack_st*, %struct.stack_st** %8, align 8
  %66 = tail call i64 @sk_num(%struct.stack_st* %65) #6
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %80, label %72

68:                                               ; preds = %72
  %69 = load %struct.stack_st*, %struct.stack_st** %8, align 8
  %70 = tail call i64 @sk_num(%struct.stack_st* %69) #6
  %71 = icmp ult i64 %79, %70
  br i1 %71, label %72, label %80

72:                                               ; preds = %64, %68
  %73 = phi i64 [ %79, %68 ], [ 0, %64 ]
  %74 = load %struct.stack_st*, %struct.stack_st** %8, align 8
  %75 = tail call i8* @sk_value(%struct.stack_st* %74, i64 %73) #6
  %76 = bitcast i8* %75 to %struct.GENERAL_NAME_st*
  %77 = tail call fastcc i32 @nc_match(%struct.GENERAL_NAME_st* %76, %struct.NAME_CONSTRAINTS_st* %1)
  %78 = icmp eq i32 %77, 0
  %79 = add nuw i64 %73, 1
  br i1 %78, label %68, label %80

80:                                               ; preds = %72, %68, %64, %61, %2, %24, %30
  %81 = phi i32 [ 1, %30 ], [ 1, %24 ], [ 1, %2 ], [ %62, %61 ], [ 0, %64 ], [ %77, %72 ], [ 0, %68 ]
  ret i32 %81
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare %struct.X509_name_st* @X509_get_subject_name(%struct.x509_st*) local_unnamed_addr #1

declare i32 @X509_NAME_entry_count(%struct.X509_name_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @nc_match(%struct.GENERAL_NAME_st* nocapture readonly, %struct.NAME_CONSTRAINTS_st* nocapture readonly) unnamed_addr #0 {
  %3 = bitcast %struct.NAME_CONSTRAINTS_st* %1 to %struct.stack_st**
  %4 = load %struct.stack_st*, %struct.stack_st** %3, align 8
  %5 = tail call i64 @sk_num(%struct.stack_st* %4) #6
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %44, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %0, i64 0, i32 0
  br label %9

9:                                                ; preds = %7, %36
  %10 = phi i64 [ 0, %7 ], [ %38, %36 ]
  %11 = phi i32 [ 0, %7 ], [ %37, %36 ]
  %12 = load %struct.stack_st*, %struct.stack_st** %3, align 8
  %13 = tail call i8* @sk_value(%struct.stack_st* %12, i64 %10) #6
  %14 = load i32, i32* %8, align 8
  %15 = bitcast i8* %13 to %struct.GENERAL_NAME_st**
  %16 = load %struct.GENERAL_NAME_st*, %struct.GENERAL_NAME_st** %15, align 8
  %17 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %16, i64 0, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %14, %18
  br i1 %19, label %20, label %36

20:                                               ; preds = %9
  %21 = getelementptr inbounds i8, i8* %13, i64 8
  %22 = bitcast i8* %21 to %struct.asn1_string_st**
  %23 = load %struct.asn1_string_st*, %struct.asn1_string_st** %22, align 8
  %24 = icmp eq %struct.asn1_string_st* %23, null
  br i1 %24, label %25, label %81

25:                                               ; preds = %20
  %26 = getelementptr inbounds i8, i8* %13, i64 16
  %27 = bitcast i8* %26 to %struct.asn1_string_st**
  %28 = load %struct.asn1_string_st*, %struct.asn1_string_st** %27, align 8
  %29 = icmp eq %struct.asn1_string_st* %28, null
  br i1 %29, label %30, label %81

30:                                               ; preds = %25
  switch i32 %11, label %32 [
    i32 2, label %36
    i32 0, label %31
  ]

31:                                               ; preds = %30
  br label %32

32:                                               ; preds = %30, %31
  %33 = phi i32 [ 1, %31 ], [ %11, %30 ]
  %34 = tail call fastcc i32 @nc_match_single(%struct.GENERAL_NAME_st* %0, %struct.GENERAL_NAME_st* %16)
  switch i32 %34, label %81 [
    i32 0, label %36
    i32 47, label %35
  ]

35:                                               ; preds = %32
  br label %36

36:                                               ; preds = %32, %35, %30, %9
  %37 = phi i32 [ %11, %9 ], [ %11, %30 ], [ 2, %32 ], [ %33, %35 ]
  %38 = add nuw i64 %10, 1
  %39 = load %struct.stack_st*, %struct.stack_st** %3, align 8
  %40 = tail call i64 @sk_num(%struct.stack_st* %39) #6
  %41 = icmp ult i64 %38, %40
  br i1 %41, label %9, label %42

42:                                               ; preds = %36
  %43 = icmp eq i32 %37, 1
  br i1 %43, label %81, label %44

44:                                               ; preds = %2, %42
  %45 = getelementptr inbounds %struct.NAME_CONSTRAINTS_st, %struct.NAME_CONSTRAINTS_st* %1, i64 0, i32 1
  %46 = bitcast %struct.stack_st_GENERAL_SUBTREE** %45 to %struct.stack_st**
  %47 = load %struct.stack_st*, %struct.stack_st** %46, align 8
  %48 = tail call i64 @sk_num(%struct.stack_st* %47) #6
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %81, label %50

50:                                               ; preds = %44
  %51 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %0, i64 0, i32 0
  br label %52

52:                                               ; preds = %50, %74
  %53 = phi i64 [ 0, %50 ], [ %75, %74 ]
  %54 = load %struct.stack_st*, %struct.stack_st** %46, align 8
  %55 = tail call i8* @sk_value(%struct.stack_st* %54, i64 %53) #6
  %56 = load i32, i32* %51, align 8
  %57 = bitcast i8* %55 to %struct.GENERAL_NAME_st**
  %58 = load %struct.GENERAL_NAME_st*, %struct.GENERAL_NAME_st** %57, align 8
  %59 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %58, i64 0, i32 0
  %60 = load i32, i32* %59, align 8
  %61 = icmp eq i32 %56, %60
  br i1 %61, label %62, label %74

62:                                               ; preds = %52
  %63 = getelementptr inbounds i8, i8* %55, i64 8
  %64 = bitcast i8* %63 to %struct.asn1_string_st**
  %65 = load %struct.asn1_string_st*, %struct.asn1_string_st** %64, align 8
  %66 = icmp eq %struct.asn1_string_st* %65, null
  br i1 %66, label %67, label %79

67:                                               ; preds = %62
  %68 = getelementptr inbounds i8, i8* %55, i64 16
  %69 = bitcast i8* %68 to %struct.asn1_string_st**
  %70 = load %struct.asn1_string_st*, %struct.asn1_string_st** %69, align 8
  %71 = icmp eq %struct.asn1_string_st* %70, null
  br i1 %71, label %72, label %79

72:                                               ; preds = %67
  %73 = tail call fastcc i32 @nc_match_single(%struct.GENERAL_NAME_st* %0, %struct.GENERAL_NAME_st* %58)
  switch i32 %73, label %81 [
    i32 0, label %79
    i32 47, label %74
  ]

74:                                               ; preds = %72, %52
  %75 = add nuw i64 %53, 1
  %76 = load %struct.stack_st*, %struct.stack_st** %46, align 8
  %77 = tail call i64 @sk_num(%struct.stack_st* %76) #6
  %78 = icmp ult i64 %75, %77
  br i1 %78, label %52, label %79

79:                                               ; preds = %74, %72, %62, %67
  %80 = phi i32 [ 0, %74 ], [ 48, %72 ], [ 49, %62 ], [ 49, %67 ]
  br label %81

81:                                               ; preds = %32, %20, %25, %72, %79, %44, %42
  %82 = phi i32 [ 47, %42 ], [ 0, %44 ], [ %80, %79 ], [ %73, %72 ], [ %34, %32 ], [ 49, %20 ], [ 49, %25 ]
  ret i32 %82
}

declare i32 @X509_NAME_get_index_by_NID(%struct.X509_name_st*, i32, i32) local_unnamed_addr #1

declare %struct.X509_name_entry_st* @X509_NAME_get_entry(%struct.X509_name_st*, i32) local_unnamed_addr #1

declare %struct.asn1_string_st* @X509_NAME_ENTRY_get_data(%struct.X509_name_entry_st*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #3

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

declare %struct.GENERAL_NAME_st* @v2i_GENERAL_NAME_ex(%struct.GENERAL_NAME_st*, %struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.conf_value_st*, i32) local_unnamed_addr #1

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #1

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #1

declare %struct.stack_st* @sk_new_null() local_unnamed_addr #1

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @do_i2r_name_constraints(%struct.stack_st_GENERAL_SUBTREE*, %struct.bio_st*, i32, i8*) unnamed_addr #0 {
  %5 = bitcast %struct.stack_st_GENERAL_SUBTREE* %0 to %struct.stack_st*
  %6 = tail call i64 @sk_num(%struct.stack_st* %5) #6
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  %9 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i64 0, i64 0), i32 %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i64 0, i64 0), i8* %3) #6
  br label %10

10:                                               ; preds = %4, %8
  %11 = tail call i64 @sk_num(%struct.stack_st* %5) #6
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %84, label %13

13:                                               ; preds = %10
  %14 = add nsw i32 %2, 2
  br label %15

15:                                               ; preds = %13, %79
  %16 = phi i64 [ 0, %13 ], [ %81, %79 ]
  %17 = tail call i8* @sk_value(%struct.stack_st* %5, i64 %16) #6
  %18 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0), i32 %14, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i64 0, i64 0)) #6
  %19 = bitcast i8* %17 to %struct.GENERAL_NAME_st**
  %20 = load %struct.GENERAL_NAME_st*, %struct.GENERAL_NAME_st** %19, align 8
  %21 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %20, i64 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 7
  br i1 %23, label %24, label %77

24:                                               ; preds = %15
  %25 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %20, i64 0, i32 1
  %26 = bitcast %union.anon.1* %25 to %struct.asn1_string_st**
  %27 = load %struct.asn1_string_st*, %struct.asn1_string_st** %26, align 8
  %28 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %27, i64 0, i32 2
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %27, i64 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = tail call i32 @BIO_puts(%struct.bio_st* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i64 0, i64 0)) #6
  switch i32 %31, label %75 [
    i32 8, label %33
    i32 32, label %58
  ]

33:                                               ; preds = %24
  %34 = load i8, i8* %29, align 1
  %35 = zext i8 %34 to i32
  %36 = getelementptr inbounds i8, i8* %29, i64 1
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = getelementptr inbounds i8, i8* %29, i64 2
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = getelementptr inbounds i8, i8* %29, i64 3
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds i8, i8* %29, i64 4
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = getelementptr inbounds i8, i8* %29, i64 5
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = getelementptr inbounds i8, i8* %29, i64 6
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = getelementptr inbounds i8, i8* %29, i64 7
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.17, i64 0, i64 0), i32 %35, i32 %38, i32 %41, i32 %44, i32 %47, i32 %50, i32 %53, i32 %56) #6
  br label %79

58:                                               ; preds = %24, %71
  %59 = phi i8* [ %69, %71 ], [ %29, %24 ]
  %60 = phi i32 [ %74, %71 ], [ 0, %24 ]
  %61 = load i8, i8* %59, align 1
  %62 = zext i8 %61 to i32
  %63 = shl nuw nsw i32 %62, 8
  %64 = getelementptr inbounds i8, i8* %59, i64 1
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = or i32 %63, %66
  %68 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i64 0, i64 0), i32 %67) #6
  %69 = getelementptr inbounds i8, i8* %59, i64 2
  switch i32 %60, label %70 [
    i32 7, label %71
    i32 15, label %79
  ]

70:                                               ; preds = %58
  br label %71

71:                                               ; preds = %58, %70
  %72 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20, i64 0, i64 0), %70 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0), %58 ]
  %73 = tail call i32 @BIO_puts(%struct.bio_st* %1, i8* %72) #6
  %74 = add nuw nsw i32 %60, 1
  br label %58

75:                                               ; preds = %24
  %76 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21, i64 0, i64 0)) #6
  br label %79

77:                                               ; preds = %15
  %78 = tail call i32 @GENERAL_NAME_print(%struct.bio_st* %1, %struct.GENERAL_NAME_st* %20) #6
  br label %79

79:                                               ; preds = %58, %75, %33, %77
  %80 = tail call i32 @BIO_puts(%struct.bio_st* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)) #6
  %81 = add nuw i64 %16, 1
  %82 = tail call i64 @sk_num(%struct.stack_st* %5) #6
  %83 = icmp ult i64 %81, %82
  br i1 %83, label %15, label %84

84:                                               ; preds = %79, %10
  ret void
}

declare i32 @BIO_printf(%struct.bio_st*, i8*, ...) local_unnamed_addr #1

declare i32 @GENERAL_NAME_print(%struct.bio_st*, %struct.GENERAL_NAME_st*) local_unnamed_addr #1

declare i32 @BIO_puts(%struct.bio_st*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @nc_match_single(%struct.GENERAL_NAME_st* nocapture readonly, %struct.GENERAL_NAME_st* nocapture readonly) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  switch i32 %4, label %192 [
    i32 4, label %5
    i32 2, label %42
    i32 1, label %75
    i32 6, label %128
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %0, i64 0, i32 1
  %7 = bitcast %union.anon.1* %6 to %struct.X509_name_st**
  %8 = load %struct.X509_name_st*, %struct.X509_name_st** %7, align 8
  %9 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %1, i64 0, i32 1
  %10 = bitcast %union.anon.1* %9 to %struct.X509_name_st**
  %11 = load %struct.X509_name_st*, %struct.X509_name_st** %10, align 8
  %12 = getelementptr inbounds %struct.X509_name_st, %struct.X509_name_st* %8, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %5
  %16 = tail call i32 @i2d_X509_NAME(%struct.X509_name_st* %8, i8** null) #6
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %192, label %18

18:                                               ; preds = %15, %5
  %19 = getelementptr inbounds %struct.X509_name_st, %struct.X509_name_st* %11, i64 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %25, label %22

22:                                               ; preds = %18
  %23 = tail call i32 @i2d_X509_NAME(%struct.X509_name_st* %11, i8** null) #6
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %192, label %25

25:                                               ; preds = %22, %18
  %26 = getelementptr inbounds %struct.X509_name_st, %struct.X509_name_st* %11, i64 0, i32 4
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.X509_name_st, %struct.X509_name_st* %8, i64 0, i32 4
  %29 = load i32, i32* %28, align 8
  %30 = icmp sgt i32 %27, %29
  br i1 %30, label %192, label %31

31:                                               ; preds = %25
  %32 = icmp eq i32 %27, 0
  br i1 %32, label %41, label %33

33:                                               ; preds = %31
  %34 = sext i32 %27 to i64
  %35 = getelementptr inbounds %struct.X509_name_st, %struct.X509_name_st* %8, i64 0, i32 3
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds %struct.X509_name_st, %struct.X509_name_st* %11, i64 0, i32 3
  %38 = load i8*, i8** %37, align 8
  %39 = tail call i32 @bcmp(i8* %38, i8* %36, i64 %34) #6
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %192

41:                                               ; preds = %33, %31
  br label %192

42:                                               ; preds = %2
  %43 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %0, i64 0, i32 1
  %44 = bitcast %union.anon.1* %43 to %struct.asn1_string_st**
  %45 = load %struct.asn1_string_st*, %struct.asn1_string_st** %44, align 8
  %46 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %1, i64 0, i32 1
  %47 = bitcast %union.anon.1* %46 to %struct.asn1_string_st**
  %48 = load %struct.asn1_string_st*, %struct.asn1_string_st** %47, align 8
  %49 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %48, i64 0, i32 2
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %45, i64 0, i32 2
  %52 = load i8*, i8** %51, align 8
  %53 = load i8, i8* %50, align 1
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %192, label %55

55:                                               ; preds = %42
  %56 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %45, i64 0, i32 0
  %57 = load i32, i32* %56, align 8
  %58 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %48, i64 0, i32 0
  %59 = load i32, i32* %58, align 8
  %60 = icmp sgt i32 %57, %59
  br i1 %60, label %61, label %70

61:                                               ; preds = %55
  %62 = sub nsw i32 %57, %59
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %52, i64 %63
  %65 = icmp eq i8 %53, 46
  br i1 %65, label %70, label %66

66:                                               ; preds = %61
  %67 = getelementptr inbounds i8, i8* %64, i64 -1
  %68 = load i8, i8* %67, align 1
  %69 = icmp eq i8 %68, 46
  br i1 %69, label %70, label %192

70:                                               ; preds = %66, %61, %55
  %71 = phi i8* [ %64, %66 ], [ %64, %61 ], [ %52, %55 ]
  %72 = tail call i32 @OPENSSL_strcasecmp(i8* %50, i8* %71) #6
  %73 = icmp eq i32 %72, 0
  %74 = select i1 %73, i32 0, i32 47
  br label %192

75:                                               ; preds = %2
  %76 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %0, i64 0, i32 1
  %77 = bitcast %union.anon.1* %76 to %struct.asn1_string_st**
  %78 = load %struct.asn1_string_st*, %struct.asn1_string_st** %77, align 8
  %79 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %1, i64 0, i32 1
  %80 = bitcast %union.anon.1* %79 to %struct.asn1_string_st**
  %81 = load %struct.asn1_string_st*, %struct.asn1_string_st** %80, align 8
  %82 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %81, i64 0, i32 2
  %83 = load i8*, i8** %82, align 8
  %84 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %78, i64 0, i32 2
  %85 = load i8*, i8** %84, align 8
  %86 = tail call i8* @strchr(i8* %83, i32 64) #7
  %87 = tail call i8* @strchr(i8* %85, i32 64) #7
  %88 = icmp eq i8* %87, null
  br i1 %88, label %192, label %89

89:                                               ; preds = %75
  %90 = icmp eq i8* %86, null
  br i1 %90, label %91, label %107

91:                                               ; preds = %89
  %92 = load i8, i8* %83, align 1
  %93 = icmp eq i8 %92, 46
  br i1 %93, label %94, label %122

94:                                               ; preds = %91
  %95 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %78, i64 0, i32 0
  %96 = load i32, i32* %95, align 8
  %97 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %81, i64 0, i32 0
  %98 = load i32, i32* %97, align 8
  %99 = icmp sgt i32 %96, %98
  br i1 %99, label %100, label %106

100:                                              ; preds = %94
  %101 = sub nsw i32 %96, %98
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i8, i8* %85, i64 %102
  %104 = tail call i32 @OPENSSL_strcasecmp(i8* %83, i8* %103) #6
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %192, label %106

106:                                              ; preds = %100, %94
  br label %192

107:                                              ; preds = %89
  %108 = icmp eq i8* %86, %83
  br i1 %108, label %120, label %109

109:                                              ; preds = %107
  %110 = ptrtoint i8* %86 to i64
  %111 = ptrtoint i8* %83 to i64
  %112 = sub i64 %110, %111
  %113 = ptrtoint i8* %87 to i64
  %114 = ptrtoint i8* %85 to i64
  %115 = sub i64 %113, %114
  %116 = icmp eq i64 %112, %115
  br i1 %116, label %117, label %192

117:                                              ; preds = %109
  %118 = tail call i32 @strncmp(i8* %83, i8* %85, i64 %112) #7
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %192

120:                                              ; preds = %117, %107
  %121 = getelementptr inbounds i8, i8* %86, i64 1
  br label %122

122:                                              ; preds = %120, %91
  %123 = phi i8* [ %121, %120 ], [ %83, %91 ]
  %124 = getelementptr inbounds i8, i8* %87, i64 1
  %125 = tail call i32 @OPENSSL_strcasecmp(i8* %123, i8* %124) #6
  %126 = icmp eq i32 %125, 0
  %127 = select i1 %126, i32 0, i32 47
  br label %192

128:                                              ; preds = %2
  %129 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %0, i64 0, i32 1
  %130 = bitcast %union.anon.1* %129 to %struct.asn1_string_st**
  %131 = load %struct.asn1_string_st*, %struct.asn1_string_st** %130, align 8
  %132 = getelementptr inbounds %struct.GENERAL_NAME_st, %struct.GENERAL_NAME_st* %1, i64 0, i32 1
  %133 = bitcast %union.anon.1* %132 to %struct.asn1_string_st**
  %134 = load %struct.asn1_string_st*, %struct.asn1_string_st** %133, align 8
  %135 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %134, i64 0, i32 2
  %136 = load i8*, i8** %135, align 8
  %137 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %131, i64 0, i32 2
  %138 = load i8*, i8** %137, align 8
  %139 = tail call i8* @strchr(i8* %138, i32 58) #7
  %140 = icmp eq i8* %139, null
  br i1 %140, label %192, label %141

141:                                              ; preds = %128
  %142 = getelementptr inbounds i8, i8* %139, i64 1
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 47
  br i1 %144, label %145, label %192

145:                                              ; preds = %141
  %146 = getelementptr inbounds i8, i8* %139, i64 2
  %147 = load i8, i8* %146, align 1
  %148 = icmp eq i8 %147, 47
  br i1 %148, label %149, label %192

149:                                              ; preds = %145
  %150 = getelementptr inbounds i8, i8* %139, i64 3
  %151 = tail call i8* @strchr(i8* %150, i32 58) #7
  %152 = icmp eq i8* %151, null
  br i1 %152, label %153, label %158

153:                                              ; preds = %149
  %154 = tail call i8* @strchr(i8* %150, i32 47) #7
  %155 = icmp eq i8* %154, null
  br i1 %155, label %156, label %158

156:                                              ; preds = %153
  %157 = tail call i64 @strlen(i8* %150) #7
  br label %163

158:                                              ; preds = %153, %149
  %159 = phi i8* [ %154, %153 ], [ %151, %149 ]
  %160 = ptrtoint i8* %159 to i64
  %161 = ptrtoint i8* %150 to i64
  %162 = sub i64 %160, %161
  br label %163

163:                                              ; preds = %158, %156
  %164 = phi i64 [ %162, %158 ], [ %157, %156 ]
  %165 = trunc i64 %164 to i32
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %192, label %167

167:                                              ; preds = %163
  %168 = load i8, i8* %136, align 1
  %169 = icmp eq i8 %168, 46
  %170 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %134, i64 0, i32 0
  %171 = load i32, i32* %170, align 8
  br i1 %169, label %172, label %184

172:                                              ; preds = %167
  %173 = icmp slt i32 %171, %165
  br i1 %173, label %174, label %183

174:                                              ; preds = %172
  %175 = shl i64 %164, 32
  %176 = ashr exact i64 %175, 32
  %177 = getelementptr inbounds i8, i8* %150, i64 %176
  %178 = sext i32 %171 to i64
  %179 = sub nsw i64 0, %178
  %180 = getelementptr inbounds i8, i8* %177, i64 %179
  %181 = tail call i32 @OPENSSL_strncasecmp(i8* %180, i8* %136, i64 %178) #6
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %192, label %183

183:                                              ; preds = %174, %172
  br label %192

184:                                              ; preds = %167
  %185 = icmp eq i32 %171, %165
  br i1 %185, label %186, label %192

186:                                              ; preds = %184
  %187 = shl i64 %164, 32
  %188 = ashr exact i64 %187, 32
  %189 = tail call i32 @OPENSSL_strncasecmp(i8* %150, i8* %136, i64 %188) #6
  %190 = icmp eq i32 %189, 0
  %191 = select i1 %190, i32 0, i32 47
  br label %192

192:                                              ; preds = %186, %184, %183, %174, %163, %145, %141, %128, %122, %117, %109, %106, %100, %75, %70, %66, %42, %41, %33, %25, %22, %15, %2
  %193 = phi i32 [ 51, %2 ], [ 17, %15 ], [ 17, %22 ], [ 47, %25 ], [ 0, %41 ], [ 47, %33 ], [ 0, %42 ], [ 47, %66 ], [ %74, %70 ], [ 47, %106 ], [ 53, %75 ], [ 0, %100 ], [ 47, %109 ], [ 47, %117 ], [ %127, %122 ], [ %191, %186 ], [ 47, %183 ], [ 53, %145 ], [ 53, %141 ], [ 53, %128 ], [ 53, %163 ], [ 0, %174 ], [ 47, %184 ]
  ret i32 %193
}

declare i32 @i2d_X509_NAME(%struct.X509_name_st*, i8**) local_unnamed_addr #1

declare i32 @OPENSSL_strcasecmp(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i8* @strchr(i8*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

declare i32 @OPENSSL_strncasecmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
