; ModuleID = '../../third_party/skia/src/core/SkBlitter_RGB565.cpp'
source_filename = "../../third_party/skia/src/core/SkBlitter_RGB565.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkRGB565_Shader_Blitter = type { %class.SkShaderBlitter.base, i32*, void (i16*, i32*, i32, i8)*, void (i16*, i32*, i32, i8)* }
%class.SkShaderBlitter.base = type <{ %class.SkRasterBlitter, i32, [4 x i8], %class.SkShader*, %"class.SkShaderBase::Context"*, i8 }>
%class.SkRasterBlitter = type { %class.SkBlitter, %class.SkPixmap }
%class.SkBlitter = type { i32 (...)**, %class.SkAutoMalloc }
%class.SkAutoMalloc = type { %"class.std::__1::unique_ptr", i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.SkPaint = type <{ %class.sk_sp.6, %class.sk_sp.7, %class.sk_sp.8, %class.sk_sp.9, %class.sk_sp.10, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.6 = type { %class.SkPathEffect* }
%class.SkPathEffect = type opaque
%class.sk_sp.7 = type { %class.SkShader* }
%class.sk_sp.8 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type opaque
%class.sk_sp.9 = type { %class.SkColorFilter* }
%class.SkColorFilter = type opaque
%class.sk_sp.10 = type { %class.SkImageFilter* }
%class.SkImageFilter = type opaque
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%"class.SkShaderBase::Context" = type <{ i32 (...)**, %class.SkShaderBase*, %class.SkMatrix, %class.SkMatrix, i8, [7 x i8] }>
%class.SkShaderBase = type { %class.SkShader.base, %class.SkMatrix, [4 x i8] }
%class.SkShader.base = type { %class.SkFlattenable.base }
%class.SkMatrix = type { [9 x float], i32 }
%class.SkShaderBlitter = type <{ %class.SkRasterBlitter, i32, [4 x i8], %class.SkShader*, %"class.SkShaderBase::Context"*, i8, [7 x i8] }>
%struct.SkMask = type <{ i8*, %struct.SkIRect, i32, i8, [3 x i8] }>
%struct.SkIRect = type { i32, i32, i32, i32 }

$_ZN9SkBlitter10blitAntiH2Eiijj = comdat any

$_ZN9SkBlitter10blitAntiV2Eiijj = comdat any

$_ZNK9SkBlitter20requestRowsPreservedEv = comdat any

$_ZN9SkBlitter15allocBlitMemoryEm = comdat any

@_ZTV23SkRGB565_Shader_Blitter = hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRGB565_Shader_Blitter*)* @_ZN23SkRGB565_Shader_BlitterD2Ev to i8*), i8* bitcast (void (%class.SkRGB565_Shader_Blitter*)* @_ZN23SkRGB565_Shader_BlitterD0Ev to i8*), i8* bitcast (void (%class.SkRGB565_Shader_Blitter*, i32, i32, i32)* @_ZN23SkRGB565_Shader_Blitter5blitHEiii to i8*), i8* bitcast (void (%class.SkRGB565_Shader_Blitter*, i32, i32, i8*, i16*)* @_ZN23SkRGB565_Shader_Blitter9blitAntiHEiiPKhPKs to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i8)* @_ZN9SkBlitter5blitVEiiih to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32)* @_ZN9SkBlitter8blitRectEiiii to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32, i8, i8)* @_ZN9SkBlitter12blitAntiRectEiiiihh to i8*), i8* bitcast (void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)* @_ZN9SkBlitter8blitMaskERK6SkMaskRK7SkIRect to i8*), i8* bitcast (%class.SkPixmap* (%class.SkBlitter*, i32*)* @_ZN9SkBlitter17justAnOpaqueColorEPj to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32)* @_ZN9SkBlitter10blitAntiH2Eiijj to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32)* @_ZN9SkBlitter10blitAntiV2Eiijj to i8*), i8* bitcast (i1 (%class.SkBlitter*)* @_ZNK9SkBlitter13isNullBlitterEv to i8*), i8* bitcast (i32 (%class.SkBlitter*)* @_ZNK9SkBlitter20requestRowsPreservedEv to i8*), i8* bitcast (i8* (%class.SkBlitter*, i64)* @_ZN9SkBlitter15allocBlitMemoryEm to i8*)] }, align 8

@_ZN23SkRGB565_Shader_BlitterC1ERK8SkPixmapRK7SkPaintPN12SkShaderBase7ContextE = hidden unnamed_addr alias void (%class.SkRGB565_Shader_Blitter*, %class.SkPixmap*, %class.SkPaint*, %"class.SkShaderBase::Context"*), void (%class.SkRGB565_Shader_Blitter*, %class.SkPixmap*, %class.SkPaint*, %"class.SkShaderBase::Context"*)* @_ZN23SkRGB565_Shader_BlitterC2ERK8SkPixmapRK7SkPaintPN12SkShaderBase7ContextE
@_ZN23SkRGB565_Shader_BlitterD1Ev = hidden unnamed_addr alias void (%class.SkRGB565_Shader_Blitter*), void (%class.SkRGB565_Shader_Blitter*)* @_ZN23SkRGB565_Shader_BlitterD2Ev

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN23SkRGB565_Shader_Blitter8SupportsERK8SkPixmapRK7SkPaint(%class.SkPixmap* nocapture readonly dereferenceable(40), %class.SkPaint* nocapture readonly dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 2
  br i1 %5, label %6, label %18

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %8 = load %class.SkColorSpace*, %class.SkColorSpace** %7, align 8
  %9 = icmp eq %class.SkColorSpace* %8, null
  br i1 %9, label %10, label %18

10:                                               ; preds = %6
  %11 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %1, i64 0, i32 8, i32 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = lshr i32 %12, 10
  %14 = trunc i32 %13 to i8
  switch i8 %14, label %18 [
    i8 3, label %15
    i8 1, label %15
  ]

15:                                               ; preds = %10, %10
  %16 = and i32 %12, 2
  %17 = icmp eq i32 %16, 0
  br label %18

18:                                               ; preds = %10, %15, %6, %2
  %19 = phi i1 [ false, %2 ], [ false, %6 ], [ %17, %15 ], [ false, %10 ]
  ret i1 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23SkRGB565_Shader_BlitterC2ERK8SkPixmapRK7SkPaintPN12SkShaderBase7ContextE(%class.SkRGB565_Shader_Blitter*, %class.SkPixmap* dereferenceable(40), %class.SkPaint* dereferenceable(72), %"class.SkShaderBase::Context"*) unnamed_addr #1 align 2 {
  %5 = bitcast %class.SkRGB565_Shader_Blitter* %0 to %class.SkShaderBlitter*
  tail call void @_ZN15SkShaderBlitterC2ERK8SkPixmapRK7SkPaintPN12SkShaderBase7ContextE(%class.SkShaderBlitter* %5, %class.SkPixmap* dereferenceable(40) %1, %class.SkPaint* dereferenceable(72) %2, %"class.SkShaderBase::Context"* %3) #7
  %6 = getelementptr inbounds %class.SkRGB565_Shader_Blitter, %class.SkRGB565_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV23SkRGB565_Shader_Blitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 1, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  %10 = shl nsw i64 %9, 2
  %11 = tail call i8* @_Z15sk_malloc_flagsmj(i64 %10, i32 2) #7
  %12 = getelementptr inbounds %class.SkRGB565_Shader_Blitter, %class.SkRGB565_Shader_Blitter* %0, i64 0, i32 1
  %13 = bitcast i32** %12 to i8**
  store i8* %11, i8** %13, align 8
  %14 = bitcast %"class.SkShaderBase::Context"* %3 to i32 (%"class.SkShaderBase::Context"*)***
  %15 = load i32 (%"class.SkShaderBase::Context"*)**, i32 (%"class.SkShaderBase::Context"*)*** %14, align 8
  %16 = getelementptr inbounds i32 (%"class.SkShaderBase::Context"*)*, i32 (%"class.SkShaderBase::Context"*)** %15, i64 2
  %17 = load i32 (%"class.SkShaderBase::Context"*)*, i32 (%"class.SkShaderBase::Context"*)** %16, align 8
  %18 = tail call i32 %17(%"class.SkShaderBase::Context"* %3) #7
  %19 = and i32 %18, 1
  %20 = icmp ne i32 %19, 0
  %21 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %2, i64 0, i32 8, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = and i32 %22, 261120
  %24 = icmp eq i32 %23, 1024
  %25 = or i1 %20, %24
  %26 = getelementptr inbounds %class.SkRGB565_Shader_Blitter, %class.SkRGB565_Shader_Blitter* %0, i64 0, i32 2
  %27 = select i1 %25, void (i16*, i32*, i32, i8)* @_ZL12D16_S32X_srcPtPKjih, void (i16*, i32*, i32, i8)* @_ZL16D16_S32A_srcoverPtPKjih
  %28 = select i1 %25, void (i16*, i32*, i32, i8)* @_ZL21D16_S32X_src_coveragePtPKjih, void (i16*, i32*, i32, i8)* @_ZL25D16_S32A_srcover_coveragePtPKjih
  store void (i16*, i32*, i32, i8)* %27, void (i16*, i32*, i32, i8)** %26, align 8
  %29 = getelementptr inbounds %class.SkRGB565_Shader_Blitter, %class.SkRGB565_Shader_Blitter* %0, i64 0, i32 3
  store void (i16*, i32*, i32, i8)* %28, void (i16*, i32*, i32, i8)** %29, align 8
  ret void
}

declare void @_ZN15SkShaderBlitterC2ERK8SkPixmapRK7SkPaintPN12SkShaderBase7ContextE(%class.SkShaderBlitter*, %class.SkPixmap* dereferenceable(40), %class.SkPaint* dereferenceable(72), %"class.SkShaderBase::Context"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL12D16_S32X_srcPtPKjih(i16* nocapture, i32* nocapture readonly, i32, i8 zeroext) #4 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %76

6:                                                ; preds = %4
  %7 = zext i32 %2 to i64
  %8 = icmp ult i32 %2, 8
  br i1 %8, label %9, label %32

9:                                                ; preds = %74, %32, %6
  %10 = phi i64 [ 0, %32 ], [ 0, %6 ], [ %41, %74 ]
  %11 = xor i64 %10, -1
  %12 = and i64 %7, 1
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %28, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds i32, i32* %1, i64 %10
  %16 = load i32, i32* %15, align 4
  %17 = lshr i32 %16, 8
  %18 = and i32 %17, 63488
  %19 = lshr i32 %16, 5
  %20 = and i32 %19, 2016
  %21 = lshr i32 %16, 3
  %22 = and i32 %21, 31
  %23 = or i32 %18, %20
  %24 = or i32 %23, %22
  %25 = trunc i32 %24 to i16
  %26 = getelementptr inbounds i16, i16* %0, i64 %10
  store i16 %25, i16* %26, align 2
  %27 = or i64 %10, 1
  br label %28

28:                                               ; preds = %9, %14
  %29 = phi i64 [ %10, %9 ], [ %27, %14 ]
  %30 = sub nsw i64 0, %7
  %31 = icmp eq i64 %11, %30
  br i1 %31, label %76, label %77

32:                                               ; preds = %6
  %33 = getelementptr i16, i16* %0, i64 %7
  %34 = getelementptr i32, i32* %1, i64 %7
  %35 = bitcast i32* %34 to i16*
  %36 = icmp ugt i16* %35, %0
  %37 = bitcast i16* %33 to i32*
  %38 = icmp ugt i32* %37, %1
  %39 = and i1 %36, %38
  br i1 %39, label %9, label %40

40:                                               ; preds = %32
  %41 = and i64 %7, 4294967288
  br label %42

42:                                               ; preds = %42, %40
  %43 = phi i64 [ 0, %40 ], [ %72, %42 ]
  %44 = getelementptr inbounds i32, i32* %1, i64 %43
  %45 = bitcast i32* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 4, !alias.scope !2
  %47 = getelementptr inbounds i32, i32* %44, i64 4
  %48 = bitcast i32* %47 to <4 x i32>*
  %49 = load <4 x i32>, <4 x i32>* %48, align 4, !alias.scope !2
  %50 = lshr <4 x i32> %46, <i32 8, i32 8, i32 8, i32 8>
  %51 = lshr <4 x i32> %49, <i32 8, i32 8, i32 8, i32 8>
  %52 = and <4 x i32> %50, <i32 63488, i32 63488, i32 63488, i32 63488>
  %53 = and <4 x i32> %51, <i32 63488, i32 63488, i32 63488, i32 63488>
  %54 = lshr <4 x i32> %46, <i32 5, i32 5, i32 5, i32 5>
  %55 = lshr <4 x i32> %49, <i32 5, i32 5, i32 5, i32 5>
  %56 = and <4 x i32> %54, <i32 2016, i32 2016, i32 2016, i32 2016>
  %57 = and <4 x i32> %55, <i32 2016, i32 2016, i32 2016, i32 2016>
  %58 = lshr <4 x i32> %46, <i32 3, i32 3, i32 3, i32 3>
  %59 = lshr <4 x i32> %49, <i32 3, i32 3, i32 3, i32 3>
  %60 = and <4 x i32> %58, <i32 31, i32 31, i32 31, i32 31>
  %61 = and <4 x i32> %59, <i32 31, i32 31, i32 31, i32 31>
  %62 = or <4 x i32> %52, %56
  %63 = or <4 x i32> %53, %57
  %64 = or <4 x i32> %62, %60
  %65 = or <4 x i32> %63, %61
  %66 = trunc <4 x i32> %64 to <4 x i16>
  %67 = trunc <4 x i32> %65 to <4 x i16>
  %68 = getelementptr inbounds i16, i16* %0, i64 %43
  %69 = bitcast i16* %68 to <4 x i16>*
  store <4 x i16> %66, <4 x i16>* %69, align 2, !alias.scope !5, !noalias !2
  %70 = getelementptr inbounds i16, i16* %68, i64 4
  %71 = bitcast i16* %70 to <4 x i16>*
  store <4 x i16> %67, <4 x i16>* %71, align 2, !alias.scope !5, !noalias !2
  %72 = add i64 %43, 8
  %73 = icmp eq i64 %72, %41
  br i1 %73, label %74, label %42, !llvm.loop !7

74:                                               ; preds = %42
  %75 = icmp eq i64 %41, %7
  br i1 %75, label %76, label %9

76:                                               ; preds = %28, %77, %74, %4
  ret void

77:                                               ; preds = %28, %77
  %78 = phi i64 [ %104, %77 ], [ %29, %28 ]
  %79 = getelementptr inbounds i32, i32* %1, i64 %78
  %80 = load i32, i32* %79, align 4
  %81 = lshr i32 %80, 8
  %82 = and i32 %81, 63488
  %83 = lshr i32 %80, 5
  %84 = and i32 %83, 2016
  %85 = lshr i32 %80, 3
  %86 = and i32 %85, 31
  %87 = or i32 %82, %84
  %88 = or i32 %87, %86
  %89 = trunc i32 %88 to i16
  %90 = getelementptr inbounds i16, i16* %0, i64 %78
  store i16 %89, i16* %90, align 2
  %91 = add nuw nsw i64 %78, 1
  %92 = getelementptr inbounds i32, i32* %1, i64 %91
  %93 = load i32, i32* %92, align 4
  %94 = lshr i32 %93, 8
  %95 = and i32 %94, 63488
  %96 = lshr i32 %93, 5
  %97 = and i32 %96, 2016
  %98 = lshr i32 %93, 3
  %99 = and i32 %98, 31
  %100 = or i32 %95, %97
  %101 = or i32 %100, %99
  %102 = trunc i32 %101 to i16
  %103 = getelementptr inbounds i16, i16* %0, i64 %91
  store i16 %102, i16* %103, align 2
  %104 = add nuw nsw i64 %78, 2
  %105 = icmp eq i64 %104, %7
  br i1 %105, label %76, label %77, !llvm.loop !9
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL21D16_S32X_src_coveragePtPKjih(i16* nocapture, i32* nocapture readonly, i32, i8 zeroext) #4 {
  %5 = zext i8 %3 to i32
  switch i8 %3, label %107 [
    i8 0, label %235
    i8 -1, label %6
  ]

6:                                                ; preds = %4
  %7 = icmp sgt i32 %2, 0
  br i1 %7, label %8, label %235

8:                                                ; preds = %6
  %9 = zext i32 %2 to i64
  %10 = icmp ult i32 %2, 8
  br i1 %10, label %55, label %11

11:                                               ; preds = %8
  %12 = getelementptr i16, i16* %0, i64 %9
  %13 = getelementptr i32, i32* %1, i64 %9
  %14 = bitcast i32* %13 to i16*
  %15 = icmp ugt i16* %14, %0
  %16 = bitcast i16* %12 to i32*
  %17 = icmp ugt i32* %16, %1
  %18 = and i1 %15, %17
  br i1 %18, label %55, label %19

19:                                               ; preds = %11
  %20 = and i64 %9, 4294967288
  br label %21

21:                                               ; preds = %21, %19
  %22 = phi i64 [ 0, %19 ], [ %51, %21 ]
  %23 = getelementptr inbounds i32, i32* %1, i64 %22
  %24 = bitcast i32* %23 to <4 x i32>*
  %25 = load <4 x i32>, <4 x i32>* %24, align 4, !alias.scope !10
  %26 = getelementptr inbounds i32, i32* %23, i64 4
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 4, !alias.scope !10
  %29 = lshr <4 x i32> %25, <i32 8, i32 8, i32 8, i32 8>
  %30 = lshr <4 x i32> %28, <i32 8, i32 8, i32 8, i32 8>
  %31 = and <4 x i32> %29, <i32 63488, i32 63488, i32 63488, i32 63488>
  %32 = and <4 x i32> %30, <i32 63488, i32 63488, i32 63488, i32 63488>
  %33 = lshr <4 x i32> %25, <i32 5, i32 5, i32 5, i32 5>
  %34 = lshr <4 x i32> %28, <i32 5, i32 5, i32 5, i32 5>
  %35 = and <4 x i32> %33, <i32 2016, i32 2016, i32 2016, i32 2016>
  %36 = and <4 x i32> %34, <i32 2016, i32 2016, i32 2016, i32 2016>
  %37 = lshr <4 x i32> %25, <i32 3, i32 3, i32 3, i32 3>
  %38 = lshr <4 x i32> %28, <i32 3, i32 3, i32 3, i32 3>
  %39 = and <4 x i32> %37, <i32 31, i32 31, i32 31, i32 31>
  %40 = and <4 x i32> %38, <i32 31, i32 31, i32 31, i32 31>
  %41 = or <4 x i32> %31, %35
  %42 = or <4 x i32> %32, %36
  %43 = or <4 x i32> %41, %39
  %44 = or <4 x i32> %42, %40
  %45 = trunc <4 x i32> %43 to <4 x i16>
  %46 = trunc <4 x i32> %44 to <4 x i16>
  %47 = getelementptr inbounds i16, i16* %0, i64 %22
  %48 = bitcast i16* %47 to <4 x i16>*
  store <4 x i16> %45, <4 x i16>* %48, align 2, !alias.scope !13, !noalias !10
  %49 = getelementptr inbounds i16, i16* %47, i64 4
  %50 = bitcast i16* %49 to <4 x i16>*
  store <4 x i16> %46, <4 x i16>* %50, align 2, !alias.scope !13, !noalias !10
  %51 = add i64 %22, 8
  %52 = icmp eq i64 %51, %20
  br i1 %52, label %53, label %21, !llvm.loop !15

53:                                               ; preds = %21
  %54 = icmp eq i64 %20, %9
  br i1 %54, label %235, label %55

55:                                               ; preds = %53, %11, %8
  %56 = phi i64 [ 0, %11 ], [ 0, %8 ], [ %20, %53 ]
  %57 = xor i64 %56, -1
  %58 = and i64 %9, 1
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %74, label %60

60:                                               ; preds = %55
  %61 = getelementptr inbounds i32, i32* %1, i64 %56
  %62 = load i32, i32* %61, align 4
  %63 = lshr i32 %62, 8
  %64 = and i32 %63, 63488
  %65 = lshr i32 %62, 5
  %66 = and i32 %65, 2016
  %67 = lshr i32 %62, 3
  %68 = and i32 %67, 31
  %69 = or i32 %64, %66
  %70 = or i32 %69, %68
  %71 = trunc i32 %70 to i16
  %72 = getelementptr inbounds i16, i16* %0, i64 %56
  store i16 %71, i16* %72, align 2
  %73 = or i64 %56, 1
  br label %74

74:                                               ; preds = %55, %60
  %75 = phi i64 [ %56, %55 ], [ %73, %60 ]
  %76 = sub nsw i64 0, %9
  %77 = icmp eq i64 %57, %76
  br i1 %77, label %235, label %78

78:                                               ; preds = %74, %78
  %79 = phi i64 [ %105, %78 ], [ %75, %74 ]
  %80 = getelementptr inbounds i32, i32* %1, i64 %79
  %81 = load i32, i32* %80, align 4
  %82 = lshr i32 %81, 8
  %83 = and i32 %82, 63488
  %84 = lshr i32 %81, 5
  %85 = and i32 %84, 2016
  %86 = lshr i32 %81, 3
  %87 = and i32 %86, 31
  %88 = or i32 %83, %85
  %89 = or i32 %88, %87
  %90 = trunc i32 %89 to i16
  %91 = getelementptr inbounds i16, i16* %0, i64 %79
  store i16 %90, i16* %91, align 2
  %92 = add nuw nsw i64 %79, 1
  %93 = getelementptr inbounds i32, i32* %1, i64 %92
  %94 = load i32, i32* %93, align 4
  %95 = lshr i32 %94, 8
  %96 = and i32 %95, 63488
  %97 = lshr i32 %94, 5
  %98 = and i32 %97, 2016
  %99 = lshr i32 %94, 3
  %100 = and i32 %99, 31
  %101 = or i32 %96, %98
  %102 = or i32 %101, %100
  %103 = trunc i32 %102 to i16
  %104 = getelementptr inbounds i16, i16* %0, i64 %92
  store i16 %103, i16* %104, align 2
  %105 = add nuw nsw i64 %79, 2
  %106 = icmp eq i64 %105, %9
  br i1 %106, label %235, label %78, !llvm.loop !16

107:                                              ; preds = %4
  %108 = lshr i32 %5, 7
  %109 = add nuw nsw i32 %108, %5
  %110 = icmp sgt i32 %2, 0
  br i1 %110, label %111, label %235

111:                                              ; preds = %107
  %112 = zext i32 %2 to i64
  %113 = icmp ult i32 %2, 4
  br i1 %113, label %182, label %114

114:                                              ; preds = %111
  %115 = getelementptr i16, i16* %0, i64 %112
  %116 = getelementptr i32, i32* %1, i64 %112
  %117 = bitcast i32* %116 to i16*
  %118 = icmp ugt i16* %117, %0
  %119 = bitcast i16* %115 to i32*
  %120 = icmp ugt i32* %119, %1
  %121 = and i1 %118, %120
  br i1 %121, label %182, label %122

122:                                              ; preds = %114
  %123 = and i64 %112, 4294967292
  %124 = insertelement <4 x i32> undef, i32 %109, i32 0
  %125 = shufflevector <4 x i32> %124, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %126

126:                                              ; preds = %126, %122
  %127 = phi i64 [ 0, %122 ], [ %178, %126 ]
  %128 = getelementptr inbounds i32, i32* %1, i64 %127
  %129 = bitcast i32* %128 to <4 x i32>*
  %130 = load <4 x i32>, <4 x i32>* %129, align 4, !alias.scope !17
  %131 = and <4 x i32> %130, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %132 = mul <4 x i32> %131, %125
  %133 = lshr <4 x i32> %132, <i32 8, i32 8, i32 8, i32 8>
  %134 = lshr <4 x i32> %130, <i32 8, i32 8, i32 8, i32 8>
  %135 = and <4 x i32> %134, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %136 = mul <4 x i32> %135, %125
  %137 = getelementptr inbounds i16, i16* %0, i64 %127
  %138 = bitcast i16* %137 to <4 x i16>*
  %139 = load <4 x i16>, <4 x i16>* %138, align 2, !alias.scope !20, !noalias !17
  %140 = lshr <4 x i32> %132, <i32 24, i32 24, i32 24, i32 24>
  %141 = lshr <4 x i32> %136, <i32 8, i32 8, i32 8, i32 8>
  %142 = and <4 x i32> %141, <i32 255, i32 255, i32 255, i32 255>
  %143 = and <4 x i32> %133, <i32 255, i32 255, i32 255, i32 255>
  %144 = zext <4 x i16> %139 to <4 x i32>
  %145 = lshr <4 x i32> %144, <i32 11, i32 11, i32 11, i32 11>
  %146 = lshr <4 x i32> %144, <i32 5, i32 5, i32 5, i32 5>
  %147 = and <4 x i32> %146, <i32 63, i32 63, i32 63, i32 63>
  %148 = and <4 x i32> %144, <i32 31, i32 31, i32 31, i32 31>
  %149 = lshr <4 x i32> %136, <i32 24, i32 24, i32 24, i32 24>
  %150 = xor <4 x i32> %149, <i32 255, i32 255, i32 255, i32 255>
  %151 = mul nuw nsw <4 x i32> %150, %145
  %152 = add nuw nsw <4 x i32> %151, <i32 16, i32 16, i32 16, i32 16>
  %153 = lshr <4 x i32> %152, <i32 5, i32 5, i32 5, i32 5>
  %154 = add nuw nsw <4 x i32> %153, %152
  %155 = lshr <4 x i32> %154, <i32 5, i32 5, i32 5, i32 5>
  %156 = add nuw nsw <4 x i32> %155, %140
  %157 = lshr <4 x i32> %156, <i32 3, i32 3, i32 3, i32 3>
  %158 = mul nuw nsw <4 x i32> %150, %147
  %159 = add nuw nsw <4 x i32> %158, <i32 32, i32 32, i32 32, i32 32>
  %160 = lshr <4 x i32> %159, <i32 6, i32 6, i32 6, i32 6>
  %161 = add nuw nsw <4 x i32> %160, %159
  %162 = lshr <4 x i32> %161, <i32 6, i32 6, i32 6, i32 6>
  %163 = add nuw nsw <4 x i32> %162, %142
  %164 = lshr <4 x i32> %163, <i32 2, i32 2, i32 2, i32 2>
  %165 = mul nuw nsw <4 x i32> %150, %148
  %166 = add nuw nsw <4 x i32> %165, <i32 16, i32 16, i32 16, i32 16>
  %167 = lshr <4 x i32> %166, <i32 5, i32 5, i32 5, i32 5>
  %168 = add nuw nsw <4 x i32> %167, %166
  %169 = lshr <4 x i32> %168, <i32 5, i32 5, i32 5, i32 5>
  %170 = add nuw nsw <4 x i32> %169, %143
  %171 = lshr <4 x i32> %170, <i32 3, i32 3, i32 3, i32 3>
  %172 = shl <4 x i32> %157, <i32 11, i32 11, i32 11, i32 11>
  %173 = shl nuw nsw <4 x i32> %164, <i32 5, i32 5, i32 5, i32 5>
  %174 = or <4 x i32> %172, %171
  %175 = or <4 x i32> %174, %173
  %176 = trunc <4 x i32> %175 to <4 x i16>
  %177 = bitcast i16* %137 to <4 x i16>*
  store <4 x i16> %176, <4 x i16>* %177, align 2, !alias.scope !20, !noalias !17
  %178 = add i64 %127, 4
  %179 = icmp eq i64 %178, %123
  br i1 %179, label %180, label %126, !llvm.loop !22

180:                                              ; preds = %126
  %181 = icmp eq i64 %123, %112
  br i1 %181, label %235, label %182

182:                                              ; preds = %180, %114, %111
  %183 = phi i64 [ 0, %114 ], [ 0, %111 ], [ %123, %180 ]
  br label %184

184:                                              ; preds = %182, %184
  %185 = phi i64 [ %233, %184 ], [ %183, %182 ]
  %186 = getelementptr inbounds i32, i32* %1, i64 %185
  %187 = load i32, i32* %186, align 4
  %188 = and i32 %187, 16711935
  %189 = mul i32 %188, %109
  %190 = lshr i32 %189, 8
  %191 = lshr i32 %187, 8
  %192 = and i32 %191, 16711935
  %193 = mul i32 %192, %109
  %194 = getelementptr inbounds i16, i16* %0, i64 %185
  %195 = load i16, i16* %194, align 2
  %196 = lshr i32 %189, 24
  %197 = lshr i32 %193, 8
  %198 = and i32 %197, 255
  %199 = and i32 %190, 255
  %200 = zext i16 %195 to i32
  %201 = lshr i32 %200, 11
  %202 = lshr i32 %200, 5
  %203 = and i32 %202, 63
  %204 = and i32 %200, 31
  %205 = lshr i32 %193, 24
  %206 = xor i32 %205, 255
  %207 = mul nuw nsw i32 %206, %201
  %208 = add nuw nsw i32 %207, 16
  %209 = lshr i32 %208, 5
  %210 = add nuw nsw i32 %209, %208
  %211 = lshr i32 %210, 5
  %212 = add nuw nsw i32 %211, %196
  %213 = lshr i32 %212, 3
  %214 = mul nuw nsw i32 %206, %203
  %215 = add nuw nsw i32 %214, 32
  %216 = lshr i32 %215, 6
  %217 = add nuw nsw i32 %216, %215
  %218 = lshr i32 %217, 6
  %219 = add nuw nsw i32 %218, %198
  %220 = lshr i32 %219, 2
  %221 = mul nuw nsw i32 %206, %204
  %222 = add nuw nsw i32 %221, 16
  %223 = lshr i32 %222, 5
  %224 = add nuw nsw i32 %223, %222
  %225 = lshr i32 %224, 5
  %226 = add nuw nsw i32 %225, %199
  %227 = lshr i32 %226, 3
  %228 = shl i32 %213, 11
  %229 = shl nuw nsw i32 %220, 5
  %230 = or i32 %228, %227
  %231 = or i32 %230, %229
  %232 = trunc i32 %231 to i16
  store i16 %232, i16* %194, align 2
  %233 = add nuw nsw i64 %185, 1
  %234 = icmp eq i64 %233, %112
  br i1 %234, label %235, label %184, !llvm.loop !23

235:                                              ; preds = %74, %78, %184, %53, %180, %6, %107, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL16D16_S32A_srcoverPtPKjih(i16* nocapture, i32* nocapture readonly, i32, i8 zeroext) #4 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %72

6:                                                ; preds = %4
  %7 = zext i32 %2 to i64
  %8 = icmp ult i32 %2, 4
  br i1 %8, label %9, label %11

9:                                                ; preds = %70, %11, %6
  %10 = phi i64 [ 0, %11 ], [ 0, %6 ], [ %20, %70 ]
  br label %73

11:                                               ; preds = %6
  %12 = getelementptr i16, i16* %0, i64 %7
  %13 = getelementptr i32, i32* %1, i64 %7
  %14 = bitcast i32* %13 to i16*
  %15 = icmp ugt i16* %14, %0
  %16 = bitcast i16* %12 to i32*
  %17 = icmp ugt i32* %16, %1
  %18 = and i1 %15, %17
  br i1 %18, label %9, label %19

19:                                               ; preds = %11
  %20 = and i64 %7, 4294967292
  br label %21

21:                                               ; preds = %21, %19
  %22 = phi i64 [ 0, %19 ], [ %68, %21 ]
  %23 = getelementptr inbounds i32, i32* %1, i64 %22
  %24 = bitcast i32* %23 to <4 x i32>*
  %25 = load <4 x i32>, <4 x i32>* %24, align 4, !alias.scope !24
  %26 = getelementptr inbounds i16, i16* %0, i64 %22
  %27 = bitcast i16* %26 to <4 x i16>*
  %28 = load <4 x i16>, <4 x i16>* %27, align 2, !alias.scope !27, !noalias !24
  %29 = lshr <4 x i32> %25, <i32 16, i32 16, i32 16, i32 16>
  %30 = and <4 x i32> %29, <i32 255, i32 255, i32 255, i32 255>
  %31 = lshr <4 x i32> %25, <i32 8, i32 8, i32 8, i32 8>
  %32 = and <4 x i32> %31, <i32 255, i32 255, i32 255, i32 255>
  %33 = and <4 x i32> %25, <i32 255, i32 255, i32 255, i32 255>
  %34 = zext <4 x i16> %28 to <4 x i32>
  %35 = lshr <4 x i32> %34, <i32 11, i32 11, i32 11, i32 11>
  %36 = lshr <4 x i32> %34, <i32 5, i32 5, i32 5, i32 5>
  %37 = and <4 x i32> %36, <i32 63, i32 63, i32 63, i32 63>
  %38 = and <4 x i32> %34, <i32 31, i32 31, i32 31, i32 31>
  %39 = lshr <4 x i32> %25, <i32 24, i32 24, i32 24, i32 24>
  %40 = xor <4 x i32> %39, <i32 255, i32 255, i32 255, i32 255>
  %41 = mul nuw nsw <4 x i32> %35, %40
  %42 = add nuw nsw <4 x i32> %41, <i32 16, i32 16, i32 16, i32 16>
  %43 = lshr <4 x i32> %42, <i32 5, i32 5, i32 5, i32 5>
  %44 = add nuw nsw <4 x i32> %43, %42
  %45 = lshr <4 x i32> %44, <i32 5, i32 5, i32 5, i32 5>
  %46 = add nuw nsw <4 x i32> %45, %30
  %47 = lshr <4 x i32> %46, <i32 3, i32 3, i32 3, i32 3>
  %48 = mul nuw nsw <4 x i32> %37, %40
  %49 = add nuw nsw <4 x i32> %48, <i32 32, i32 32, i32 32, i32 32>
  %50 = lshr <4 x i32> %49, <i32 6, i32 6, i32 6, i32 6>
  %51 = add nuw nsw <4 x i32> %50, %49
  %52 = lshr <4 x i32> %51, <i32 6, i32 6, i32 6, i32 6>
  %53 = add nuw nsw <4 x i32> %52, %32
  %54 = lshr <4 x i32> %53, <i32 2, i32 2, i32 2, i32 2>
  %55 = mul nuw nsw <4 x i32> %38, %40
  %56 = add nuw nsw <4 x i32> %55, <i32 16, i32 16, i32 16, i32 16>
  %57 = lshr <4 x i32> %56, <i32 5, i32 5, i32 5, i32 5>
  %58 = add nuw nsw <4 x i32> %57, %56
  %59 = lshr <4 x i32> %58, <i32 5, i32 5, i32 5, i32 5>
  %60 = add nuw nsw <4 x i32> %59, %33
  %61 = lshr <4 x i32> %60, <i32 3, i32 3, i32 3, i32 3>
  %62 = shl <4 x i32> %47, <i32 11, i32 11, i32 11, i32 11>
  %63 = shl nuw nsw <4 x i32> %54, <i32 5, i32 5, i32 5, i32 5>
  %64 = or <4 x i32> %62, %61
  %65 = or <4 x i32> %64, %63
  %66 = trunc <4 x i32> %65 to <4 x i16>
  %67 = bitcast i16* %26 to <4 x i16>*
  store <4 x i16> %66, <4 x i16>* %67, align 2, !alias.scope !27, !noalias !24
  %68 = add i64 %22, 4
  %69 = icmp eq i64 %68, %20
  br i1 %69, label %70, label %21, !llvm.loop !29

70:                                               ; preds = %21
  %71 = icmp eq i64 %20, %7
  br i1 %71, label %72, label %9

72:                                               ; preds = %73, %70, %4
  ret void

73:                                               ; preds = %9, %73
  %74 = phi i64 [ %117, %73 ], [ %10, %9 ]
  %75 = getelementptr inbounds i32, i32* %1, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds i16, i16* %0, i64 %74
  %78 = load i16, i16* %77, align 2
  %79 = lshr i32 %76, 16
  %80 = and i32 %79, 255
  %81 = lshr i32 %76, 8
  %82 = and i32 %81, 255
  %83 = and i32 %76, 255
  %84 = zext i16 %78 to i32
  %85 = lshr i32 %84, 11
  %86 = lshr i32 %84, 5
  %87 = and i32 %86, 63
  %88 = and i32 %84, 31
  %89 = lshr i32 %76, 24
  %90 = xor i32 %89, 255
  %91 = mul nuw nsw i32 %85, %90
  %92 = add nuw nsw i32 %91, 16
  %93 = lshr i32 %92, 5
  %94 = add nuw nsw i32 %93, %92
  %95 = lshr i32 %94, 5
  %96 = add nuw nsw i32 %95, %80
  %97 = lshr i32 %96, 3
  %98 = mul nuw nsw i32 %87, %90
  %99 = add nuw nsw i32 %98, 32
  %100 = lshr i32 %99, 6
  %101 = add nuw nsw i32 %100, %99
  %102 = lshr i32 %101, 6
  %103 = add nuw nsw i32 %102, %82
  %104 = lshr i32 %103, 2
  %105 = mul nuw nsw i32 %88, %90
  %106 = add nuw nsw i32 %105, 16
  %107 = lshr i32 %106, 5
  %108 = add nuw nsw i32 %107, %106
  %109 = lshr i32 %108, 5
  %110 = add nuw nsw i32 %109, %83
  %111 = lshr i32 %110, 3
  %112 = shl i32 %97, 11
  %113 = shl nuw nsw i32 %104, 5
  %114 = or i32 %112, %111
  %115 = or i32 %114, %113
  %116 = trunc i32 %115 to i16
  store i16 %116, i16* %77, align 2
  %117 = add nuw nsw i64 %74, 1
  %118 = icmp eq i64 %117, %7
  br i1 %118, label %72, label %73, !llvm.loop !30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL25D16_S32A_srcover_coveragePtPKjih(i16* nocapture, i32* nocapture readonly, i32, i8 zeroext) #4 {
  %5 = zext i8 %3 to i32
  switch i8 %3, label %120 [
    i8 0, label %248
    i8 -1, label %6
  ]

6:                                                ; preds = %4
  %7 = icmp sgt i32 %2, 0
  br i1 %7, label %8, label %248

8:                                                ; preds = %6
  %9 = zext i32 %2 to i64
  %10 = icmp ult i32 %2, 4
  br i1 %10, label %72, label %11

11:                                               ; preds = %8
  %12 = getelementptr i16, i16* %0, i64 %9
  %13 = getelementptr i32, i32* %1, i64 %9
  %14 = bitcast i32* %13 to i16*
  %15 = icmp ugt i16* %14, %0
  %16 = bitcast i16* %12 to i32*
  %17 = icmp ugt i32* %16, %1
  %18 = and i1 %15, %17
  br i1 %18, label %72, label %19

19:                                               ; preds = %11
  %20 = and i64 %9, 4294967292
  br label %21

21:                                               ; preds = %21, %19
  %22 = phi i64 [ 0, %19 ], [ %68, %21 ]
  %23 = getelementptr inbounds i32, i32* %1, i64 %22
  %24 = bitcast i32* %23 to <4 x i32>*
  %25 = load <4 x i32>, <4 x i32>* %24, align 4, !alias.scope !31
  %26 = getelementptr inbounds i16, i16* %0, i64 %22
  %27 = bitcast i16* %26 to <4 x i16>*
  %28 = load <4 x i16>, <4 x i16>* %27, align 2, !alias.scope !34, !noalias !31
  %29 = lshr <4 x i32> %25, <i32 16, i32 16, i32 16, i32 16>
  %30 = and <4 x i32> %29, <i32 255, i32 255, i32 255, i32 255>
  %31 = lshr <4 x i32> %25, <i32 8, i32 8, i32 8, i32 8>
  %32 = and <4 x i32> %31, <i32 255, i32 255, i32 255, i32 255>
  %33 = and <4 x i32> %25, <i32 255, i32 255, i32 255, i32 255>
  %34 = zext <4 x i16> %28 to <4 x i32>
  %35 = lshr <4 x i32> %34, <i32 11, i32 11, i32 11, i32 11>
  %36 = lshr <4 x i32> %34, <i32 5, i32 5, i32 5, i32 5>
  %37 = and <4 x i32> %36, <i32 63, i32 63, i32 63, i32 63>
  %38 = and <4 x i32> %34, <i32 31, i32 31, i32 31, i32 31>
  %39 = lshr <4 x i32> %25, <i32 24, i32 24, i32 24, i32 24>
  %40 = xor <4 x i32> %39, <i32 255, i32 255, i32 255, i32 255>
  %41 = mul nuw nsw <4 x i32> %35, %40
  %42 = add nuw nsw <4 x i32> %41, <i32 16, i32 16, i32 16, i32 16>
  %43 = lshr <4 x i32> %42, <i32 5, i32 5, i32 5, i32 5>
  %44 = add nuw nsw <4 x i32> %43, %42
  %45 = lshr <4 x i32> %44, <i32 5, i32 5, i32 5, i32 5>
  %46 = add nuw nsw <4 x i32> %45, %30
  %47 = lshr <4 x i32> %46, <i32 3, i32 3, i32 3, i32 3>
  %48 = mul nuw nsw <4 x i32> %37, %40
  %49 = add nuw nsw <4 x i32> %48, <i32 32, i32 32, i32 32, i32 32>
  %50 = lshr <4 x i32> %49, <i32 6, i32 6, i32 6, i32 6>
  %51 = add nuw nsw <4 x i32> %50, %49
  %52 = lshr <4 x i32> %51, <i32 6, i32 6, i32 6, i32 6>
  %53 = add nuw nsw <4 x i32> %52, %32
  %54 = lshr <4 x i32> %53, <i32 2, i32 2, i32 2, i32 2>
  %55 = mul nuw nsw <4 x i32> %38, %40
  %56 = add nuw nsw <4 x i32> %55, <i32 16, i32 16, i32 16, i32 16>
  %57 = lshr <4 x i32> %56, <i32 5, i32 5, i32 5, i32 5>
  %58 = add nuw nsw <4 x i32> %57, %56
  %59 = lshr <4 x i32> %58, <i32 5, i32 5, i32 5, i32 5>
  %60 = add nuw nsw <4 x i32> %59, %33
  %61 = lshr <4 x i32> %60, <i32 3, i32 3, i32 3, i32 3>
  %62 = shl <4 x i32> %47, <i32 11, i32 11, i32 11, i32 11>
  %63 = shl nuw nsw <4 x i32> %54, <i32 5, i32 5, i32 5, i32 5>
  %64 = or <4 x i32> %62, %61
  %65 = or <4 x i32> %64, %63
  %66 = trunc <4 x i32> %65 to <4 x i16>
  %67 = bitcast i16* %26 to <4 x i16>*
  store <4 x i16> %66, <4 x i16>* %67, align 2, !alias.scope !34, !noalias !31
  %68 = add i64 %22, 4
  %69 = icmp eq i64 %68, %20
  br i1 %69, label %70, label %21, !llvm.loop !36

70:                                               ; preds = %21
  %71 = icmp eq i64 %20, %9
  br i1 %71, label %248, label %72

72:                                               ; preds = %70, %11, %8
  %73 = phi i64 [ 0, %11 ], [ 0, %8 ], [ %20, %70 ]
  br label %74

74:                                               ; preds = %72, %74
  %75 = phi i64 [ %118, %74 ], [ %73, %72 ]
  %76 = getelementptr inbounds i32, i32* %1, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds i16, i16* %0, i64 %75
  %79 = load i16, i16* %78, align 2
  %80 = lshr i32 %77, 16
  %81 = and i32 %80, 255
  %82 = lshr i32 %77, 8
  %83 = and i32 %82, 255
  %84 = and i32 %77, 255
  %85 = zext i16 %79 to i32
  %86 = lshr i32 %85, 11
  %87 = lshr i32 %85, 5
  %88 = and i32 %87, 63
  %89 = and i32 %85, 31
  %90 = lshr i32 %77, 24
  %91 = xor i32 %90, 255
  %92 = mul nuw nsw i32 %86, %91
  %93 = add nuw nsw i32 %92, 16
  %94 = lshr i32 %93, 5
  %95 = add nuw nsw i32 %94, %93
  %96 = lshr i32 %95, 5
  %97 = add nuw nsw i32 %96, %81
  %98 = lshr i32 %97, 3
  %99 = mul nuw nsw i32 %88, %91
  %100 = add nuw nsw i32 %99, 32
  %101 = lshr i32 %100, 6
  %102 = add nuw nsw i32 %101, %100
  %103 = lshr i32 %102, 6
  %104 = add nuw nsw i32 %103, %83
  %105 = lshr i32 %104, 2
  %106 = mul nuw nsw i32 %89, %91
  %107 = add nuw nsw i32 %106, 16
  %108 = lshr i32 %107, 5
  %109 = add nuw nsw i32 %108, %107
  %110 = lshr i32 %109, 5
  %111 = add nuw nsw i32 %110, %84
  %112 = lshr i32 %111, 3
  %113 = shl i32 %98, 11
  %114 = shl nuw nsw i32 %105, 5
  %115 = or i32 %113, %112
  %116 = or i32 %115, %114
  %117 = trunc i32 %116 to i16
  store i16 %117, i16* %78, align 2
  %118 = add nuw nsw i64 %75, 1
  %119 = icmp eq i64 %118, %9
  br i1 %119, label %248, label %74, !llvm.loop !37

120:                                              ; preds = %4
  %121 = lshr i32 %5, 7
  %122 = add nuw nsw i32 %121, %5
  %123 = icmp sgt i32 %2, 0
  br i1 %123, label %124, label %248

124:                                              ; preds = %120
  %125 = zext i32 %2 to i64
  %126 = icmp ult i32 %2, 4
  br i1 %126, label %195, label %127

127:                                              ; preds = %124
  %128 = getelementptr i16, i16* %0, i64 %125
  %129 = getelementptr i32, i32* %1, i64 %125
  %130 = bitcast i32* %129 to i16*
  %131 = icmp ugt i16* %130, %0
  %132 = bitcast i16* %128 to i32*
  %133 = icmp ugt i32* %132, %1
  %134 = and i1 %131, %133
  br i1 %134, label %195, label %135

135:                                              ; preds = %127
  %136 = and i64 %125, 4294967292
  %137 = insertelement <4 x i32> undef, i32 %122, i32 0
  %138 = shufflevector <4 x i32> %137, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %139

139:                                              ; preds = %139, %135
  %140 = phi i64 [ 0, %135 ], [ %191, %139 ]
  %141 = getelementptr inbounds i32, i32* %1, i64 %140
  %142 = bitcast i32* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 4, !alias.scope !38
  %144 = and <4 x i32> %143, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %145 = mul <4 x i32> %144, %138
  %146 = lshr <4 x i32> %145, <i32 8, i32 8, i32 8, i32 8>
  %147 = lshr <4 x i32> %143, <i32 8, i32 8, i32 8, i32 8>
  %148 = and <4 x i32> %147, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %149 = mul <4 x i32> %148, %138
  %150 = getelementptr inbounds i16, i16* %0, i64 %140
  %151 = bitcast i16* %150 to <4 x i16>*
  %152 = load <4 x i16>, <4 x i16>* %151, align 2, !alias.scope !41, !noalias !38
  %153 = lshr <4 x i32> %145, <i32 24, i32 24, i32 24, i32 24>
  %154 = lshr <4 x i32> %149, <i32 8, i32 8, i32 8, i32 8>
  %155 = and <4 x i32> %154, <i32 255, i32 255, i32 255, i32 255>
  %156 = and <4 x i32> %146, <i32 255, i32 255, i32 255, i32 255>
  %157 = zext <4 x i16> %152 to <4 x i32>
  %158 = lshr <4 x i32> %157, <i32 11, i32 11, i32 11, i32 11>
  %159 = lshr <4 x i32> %157, <i32 5, i32 5, i32 5, i32 5>
  %160 = and <4 x i32> %159, <i32 63, i32 63, i32 63, i32 63>
  %161 = and <4 x i32> %157, <i32 31, i32 31, i32 31, i32 31>
  %162 = lshr <4 x i32> %149, <i32 24, i32 24, i32 24, i32 24>
  %163 = xor <4 x i32> %162, <i32 255, i32 255, i32 255, i32 255>
  %164 = mul nuw nsw <4 x i32> %163, %158
  %165 = add nuw nsw <4 x i32> %164, <i32 16, i32 16, i32 16, i32 16>
  %166 = lshr <4 x i32> %165, <i32 5, i32 5, i32 5, i32 5>
  %167 = add nuw nsw <4 x i32> %166, %165
  %168 = lshr <4 x i32> %167, <i32 5, i32 5, i32 5, i32 5>
  %169 = add nuw nsw <4 x i32> %168, %153
  %170 = lshr <4 x i32> %169, <i32 3, i32 3, i32 3, i32 3>
  %171 = mul nuw nsw <4 x i32> %163, %160
  %172 = add nuw nsw <4 x i32> %171, <i32 32, i32 32, i32 32, i32 32>
  %173 = lshr <4 x i32> %172, <i32 6, i32 6, i32 6, i32 6>
  %174 = add nuw nsw <4 x i32> %173, %172
  %175 = lshr <4 x i32> %174, <i32 6, i32 6, i32 6, i32 6>
  %176 = add nuw nsw <4 x i32> %175, %155
  %177 = lshr <4 x i32> %176, <i32 2, i32 2, i32 2, i32 2>
  %178 = mul nuw nsw <4 x i32> %163, %161
  %179 = add nuw nsw <4 x i32> %178, <i32 16, i32 16, i32 16, i32 16>
  %180 = lshr <4 x i32> %179, <i32 5, i32 5, i32 5, i32 5>
  %181 = add nuw nsw <4 x i32> %180, %179
  %182 = lshr <4 x i32> %181, <i32 5, i32 5, i32 5, i32 5>
  %183 = add nuw nsw <4 x i32> %182, %156
  %184 = lshr <4 x i32> %183, <i32 3, i32 3, i32 3, i32 3>
  %185 = shl <4 x i32> %170, <i32 11, i32 11, i32 11, i32 11>
  %186 = shl nuw nsw <4 x i32> %177, <i32 5, i32 5, i32 5, i32 5>
  %187 = or <4 x i32> %185, %184
  %188 = or <4 x i32> %187, %186
  %189 = trunc <4 x i32> %188 to <4 x i16>
  %190 = bitcast i16* %150 to <4 x i16>*
  store <4 x i16> %189, <4 x i16>* %190, align 2, !alias.scope !41, !noalias !38
  %191 = add i64 %140, 4
  %192 = icmp eq i64 %191, %136
  br i1 %192, label %193, label %139, !llvm.loop !43

193:                                              ; preds = %139
  %194 = icmp eq i64 %136, %125
  br i1 %194, label %248, label %195

195:                                              ; preds = %193, %127, %124
  %196 = phi i64 [ 0, %127 ], [ 0, %124 ], [ %136, %193 ]
  br label %197

197:                                              ; preds = %195, %197
  %198 = phi i64 [ %246, %197 ], [ %196, %195 ]
  %199 = getelementptr inbounds i32, i32* %1, i64 %198
  %200 = load i32, i32* %199, align 4
  %201 = and i32 %200, 16711935
  %202 = mul i32 %201, %122
  %203 = lshr i32 %202, 8
  %204 = lshr i32 %200, 8
  %205 = and i32 %204, 16711935
  %206 = mul i32 %205, %122
  %207 = getelementptr inbounds i16, i16* %0, i64 %198
  %208 = load i16, i16* %207, align 2
  %209 = lshr i32 %202, 24
  %210 = lshr i32 %206, 8
  %211 = and i32 %210, 255
  %212 = and i32 %203, 255
  %213 = zext i16 %208 to i32
  %214 = lshr i32 %213, 11
  %215 = lshr i32 %213, 5
  %216 = and i32 %215, 63
  %217 = and i32 %213, 31
  %218 = lshr i32 %206, 24
  %219 = xor i32 %218, 255
  %220 = mul nuw nsw i32 %219, %214
  %221 = add nuw nsw i32 %220, 16
  %222 = lshr i32 %221, 5
  %223 = add nuw nsw i32 %222, %221
  %224 = lshr i32 %223, 5
  %225 = add nuw nsw i32 %224, %209
  %226 = lshr i32 %225, 3
  %227 = mul nuw nsw i32 %219, %216
  %228 = add nuw nsw i32 %227, 32
  %229 = lshr i32 %228, 6
  %230 = add nuw nsw i32 %229, %228
  %231 = lshr i32 %230, 6
  %232 = add nuw nsw i32 %231, %211
  %233 = lshr i32 %232, 2
  %234 = mul nuw nsw i32 %219, %217
  %235 = add nuw nsw i32 %234, 16
  %236 = lshr i32 %235, 5
  %237 = add nuw nsw i32 %236, %235
  %238 = lshr i32 %237, 5
  %239 = add nuw nsw i32 %238, %212
  %240 = lshr i32 %239, 3
  %241 = shl i32 %226, 11
  %242 = shl nuw nsw i32 %233, 5
  %243 = or i32 %241, %240
  %244 = or i32 %243, %242
  %245 = trunc i32 %244 to i16
  store i16 %245, i16* %207, align 2
  %246 = add nuw nsw i64 %198, 1
  %247 = icmp eq i64 %246, %125
  br i1 %247, label %248, label %197, !llvm.loop !44

248:                                              ; preds = %74, %197, %70, %193, %6, %120, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23SkRGB565_Shader_BlitterD2Ev(%class.SkRGB565_Shader_Blitter*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.SkRGB565_Shader_Blitter, %class.SkRGB565_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV23SkRGB565_Shader_Blitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkRGB565_Shader_Blitter, %class.SkRGB565_Shader_Blitter* %0, i64 0, i32 1
  %4 = bitcast i32** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @_Z7sk_freePv(i8* %5) #7
  %6 = bitcast %class.SkRGB565_Shader_Blitter* %0 to %class.SkShaderBlitter*
  tail call void @_ZN15SkShaderBlitterD2Ev(%class.SkShaderBlitter* %6) #7
  ret void
}

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN15SkShaderBlitterD2Ev(%class.SkShaderBlitter*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23SkRGB565_Shader_BlitterD0Ev(%class.SkRGB565_Shader_Blitter*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.SkRGB565_Shader_Blitter, %class.SkRGB565_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV23SkRGB565_Shader_Blitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkRGB565_Shader_Blitter, %class.SkRGB565_Shader_Blitter* %0, i64 0, i32 1
  %4 = bitcast i32** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @_Z7sk_freePv(i8* %5) #7
  %6 = bitcast %class.SkRGB565_Shader_Blitter* %0 to %class.SkShaderBlitter*
  tail call void @_ZN15SkShaderBlitterD2Ev(%class.SkShaderBlitter* %6) #7
  %7 = bitcast %class.SkRGB565_Shader_Blitter* %0 to i8*
  tail call void @_ZdlPv(i8* %7) #8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23SkRGB565_Shader_Blitter5blitHEiii(%class.SkRGB565_Shader_Blitter* nocapture readonly, i32, i32, i32) unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %class.SkRGB565_Shader_Blitter, %class.SkRGB565_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = sext i32 %2 to i64
  %8 = getelementptr inbounds %class.SkRGB565_Shader_Blitter, %class.SkRGB565_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = mul i64 %9, %7
  %11 = getelementptr inbounds i8, i8* %6, i64 %10
  %12 = shl i32 %1, 1
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i8, i8* %11, i64 %13
  %15 = bitcast i8* %14 to i16*
  %16 = getelementptr inbounds %class.SkRGB565_Shader_Blitter, %class.SkRGB565_Shader_Blitter* %0, i64 0, i32 1
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds %class.SkRGB565_Shader_Blitter, %class.SkRGB565_Shader_Blitter* %0, i64 0, i32 0, i32 4
  %19 = load %"class.SkShaderBase::Context"*, %"class.SkShaderBase::Context"** %18, align 8
  %20 = bitcast %"class.SkShaderBase::Context"* %19 to void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)***
  %21 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)**, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %21, i64 3
  %23 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %22, align 8
  tail call void %23(%"class.SkShaderBase::Context"* %19, i32 %1, i32 %2, i32* %17, i32 %3) #7
  %24 = getelementptr inbounds %class.SkRGB565_Shader_Blitter, %class.SkRGB565_Shader_Blitter* %0, i64 0, i32 2
  %25 = load void (i16*, i32*, i32, i8)*, void (i16*, i32*, i32, i8)** %24, align 8
  tail call void %25(i16* %15, i32* %17, i32 %3, i8 zeroext -1) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23SkRGB565_Shader_Blitter9blitAntiHEiiPKhPKs(%class.SkRGB565_Shader_Blitter* nocapture readonly, i32, i32, i8* nocapture readonly, i16* nocapture readonly) unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %class.SkRGB565_Shader_Blitter, %class.SkRGB565_Shader_Blitter* %0, i64 0, i32 1
  %7 = load i32*, i32** %6, align 8
  %8 = getelementptr inbounds %class.SkRGB565_Shader_Blitter, %class.SkRGB565_Shader_Blitter* %0, i64 0, i32 0, i32 4
  %9 = load %"class.SkShaderBase::Context"*, %"class.SkShaderBase::Context"** %8, align 8
  %10 = load i16, i16* %4, align 2
  %11 = icmp slt i16 %10, 1
  br i1 %11, label %48, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %class.SkRGB565_Shader_Blitter, %class.SkRGB565_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %class.SkRGB565_Shader_Blitter, %class.SkRGB565_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = sext i32 %2 to i64
  %18 = mul i64 %16, %17
  %19 = getelementptr inbounds i8, i8* %14, i64 %18
  %20 = shl i32 %1, 1
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %19, i64 %21
  %23 = bitcast i8* %22 to i16*
  %24 = bitcast %"class.SkShaderBase::Context"* %9 to void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)***
  %25 = getelementptr inbounds %class.SkRGB565_Shader_Blitter, %class.SkRGB565_Shader_Blitter* %0, i64 0, i32 3
  br label %26

26:                                               ; preds = %12, %40
  %27 = phi i16 [ %10, %12 ], [ %46, %40 ]
  %28 = phi i16* [ %23, %12 ], [ %42, %40 ]
  %29 = phi i16* [ %4, %12 ], [ %43, %40 ]
  %30 = phi i8* [ %3, %12 ], [ %44, %40 ]
  %31 = phi i32 [ %1, %12 ], [ %45, %40 ]
  %32 = sext i16 %27 to i32
  %33 = load i8, i8* %30, align 1
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %40, label %35

35:                                               ; preds = %26
  %36 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)**, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*** %24, align 8
  %37 = getelementptr inbounds void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %36, i64 3
  %38 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %37, align 8
  tail call void %38(%"class.SkShaderBase::Context"* %9, i32 %31, i32 %2, i32* %7, i32 %32) #7
  %39 = load void (i16*, i32*, i32, i8)*, void (i16*, i32*, i32, i8)** %25, align 8
  tail call void %39(i16* %28, i32* %7, i32 %32, i8 zeroext %33) #7
  br label %40

40:                                               ; preds = %35, %26
  %41 = sext i16 %27 to i64
  %42 = getelementptr inbounds i16, i16* %28, i64 %41
  %43 = getelementptr inbounds i16, i16* %29, i64 %41
  %44 = getelementptr inbounds i8, i8* %30, i64 %41
  %45 = add nsw i32 %31, %32
  %46 = load i16, i16* %43, align 2
  %47 = icmp slt i16 %46, 1
  br i1 %47, label %48, label %26

48:                                               ; preds = %40, %5
  ret void
}

declare void @_ZN9SkBlitter5blitVEiiih(%class.SkBlitter*, i32, i32, i32, i8 zeroext) unnamed_addr #2

declare void @_ZN9SkBlitter8blitRectEiiii(%class.SkBlitter*, i32, i32, i32, i32) unnamed_addr #2

declare void @_ZN9SkBlitter12blitAntiRectEiiiihh(%class.SkBlitter*, i32, i32, i32, i32, i8 zeroext, i8 zeroext) unnamed_addr #2

declare void @_ZN9SkBlitter8blitMaskERK6SkMaskRK7SkIRect(%class.SkBlitter*, %struct.SkMask* dereferenceable(32), %struct.SkIRect* dereferenceable(16)) unnamed_addr #2

declare %class.SkPixmap* @_ZN9SkBlitter17justAnOpaqueColorEPj(%class.SkBlitter*, i32*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9SkBlitter10blitAntiH2Eiijj(%class.SkBlitter*, i32, i32, i32, i32) unnamed_addr #1 comdat align 2 {
  %6 = alloca [3 x i16], align 2
  %7 = alloca [2 x i8], align 1
  %8 = bitcast [3 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 6, i8* nonnull %8) #7
  %9 = getelementptr inbounds [3 x i16], [3 x i16]* %6, i64 0, i64 0
  %10 = getelementptr inbounds [3 x i16], [3 x i16]* %6, i64 0, i64 1
  %11 = getelementptr inbounds [3 x i16], [3 x i16]* %6, i64 0, i64 2
  %12 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %12) #7
  %13 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 1
  store i16 1, i16* %9, align 2
  store i16 1, i16* %10, align 2
  store i16 0, i16* %11, align 2
  %14 = trunc i32 %3 to i8
  store i8 %14, i8* %12, align 1
  %15 = trunc i32 %4 to i8
  store i8 %15, i8* %13, align 1
  %16 = bitcast %class.SkBlitter* %0 to void (%class.SkBlitter*, i32, i32, i8*, i16*)***
  %17 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)**, void (%class.SkBlitter*, i32, i32, i8*, i16*)*** %16, align 8
  %18 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %17, i64 3
  %19 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %18, align 8
  call void %19(%class.SkBlitter* %0, i32 %1, i32 %2, i8* nonnull %12, i16* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 6, i8* nonnull %8) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9SkBlitter10blitAntiV2Eiijj(%class.SkBlitter*, i32, i32, i32, i32) unnamed_addr #1 comdat align 2 {
  %6 = alloca [2 x i16], align 2
  %7 = alloca [1 x i8], align 1
  %8 = bitcast [2 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #7
  %9 = getelementptr inbounds [2 x i16], [2 x i16]* %6, i64 0, i64 0
  %10 = getelementptr inbounds [2 x i16], [2 x i16]* %6, i64 0, i64 1
  %11 = getelementptr inbounds [1 x i8], [1 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %11) #7
  store i16 1, i16* %9, align 2
  store i16 0, i16* %10, align 2
  %12 = trunc i32 %3 to i8
  store i8 %12, i8* %11, align 1
  %13 = bitcast %class.SkBlitter* %0 to void (%class.SkBlitter*, i32, i32, i8*, i16*)***
  %14 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)**, void (%class.SkBlitter*, i32, i32, i8*, i16*)*** %13, align 8
  %15 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %14, i64 3
  %16 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %15, align 8
  call void %16(%class.SkBlitter* %0, i32 %1, i32 %2, i8* nonnull %11, i16* nonnull %9) #7
  store i16 1, i16* %9, align 2
  store i16 0, i16* %10, align 2
  %17 = trunc i32 %4 to i8
  store i8 %17, i8* %11, align 1
  %18 = add nsw i32 %2, 1
  %19 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)**, void (%class.SkBlitter*, i32, i32, i8*, i16*)*** %13, align 8
  %20 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %19, i64 3
  %21 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %20, align 8
  call void %21(%class.SkBlitter* %0, i32 %1, i32 %18, i8* nonnull %11, i16* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #7
  ret void
}

declare zeroext i1 @_ZNK9SkBlitter13isNullBlitterEv(%class.SkBlitter*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK9SkBlitter20requestRowsPreservedEv(%class.SkBlitter*) unnamed_addr #1 comdat align 2 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN9SkBlitter15allocBlitMemoryEm(%class.SkBlitter*, i64) unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %class.SkBlitter, %class.SkBlitter* %0, i64 0, i32 1
  %4 = getelementptr inbounds %class.SkBlitter, %class.SkBlitter* %0, i64 0, i32 1, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %2
  %8 = tail call i8* @_Z15sk_malloc_flagsmj(i64 %1, i32 2) #7
  %9 = getelementptr inbounds %class.SkAutoMalloc, %class.SkAutoMalloc* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  store i8* %8, i8** %9, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %7
  tail call void @_Z7sk_freePv(i8* nonnull %10) #7
  br label %13

13:                                               ; preds = %12, %7
  store i64 %1, i64* %4, align 8
  br label %14

14:                                               ; preds = %2, %13
  %15 = getelementptr inbounds %class.SkAutoMalloc, %class.SkAutoMalloc* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  ret i8* %16
}

declare i8* @_Z15sk_malloc_flagsmj(i64, i32) local_unnamed_addr #2

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !8}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = !{!21}
!21 = distinct !{!21, !19}
!22 = distinct !{!22, !8}
!23 = distinct !{!23, !8}
!24 = !{!25}
!25 = distinct !{!25, !26}
!26 = distinct !{!26, !"LVerDomain"}
!27 = !{!28}
!28 = distinct !{!28, !26}
!29 = distinct !{!29, !8}
!30 = distinct !{!30, !8}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35}
!35 = distinct !{!35, !33}
!36 = distinct !{!36, !8}
!37 = distinct !{!37, !8}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !8}
!44 = distinct !{!44, !8}
