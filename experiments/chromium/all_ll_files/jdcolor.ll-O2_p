; ModuleID = '../../third_party/libjpeg_turbo/jdcolor.c'
source_filename = "../../third_party/libjpeg_turbo/jdcolor.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, {}*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, {}* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type { {}*, {}*, i32, i32, i32, [10 x i32], [10 x i32], i32, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { {}*, i32 (%struct.jpeg_decompress_struct*)*, {}*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, {}*, {}*, {}*, i32, i32 }
%struct.jpeg_marker_reader = type { {}*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { {}*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)*, i32 }
%struct.jpeg_inverse_dct = type { {}*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { {}*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { {}*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, {}*, {}* }
%struct.my_color_deconverter = type { %struct.jpeg_color_deconverter, i32*, i32*, i64*, i64*, i64* }

@rgb_pixelsize = internal unnamed_addr constant [17 x i32] [i32 -1, i32 -1, i32 3, i32 -1, i32 -1, i32 -1, i32 3, i32 4, i32 3, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 -1], align 16
@dither_matrix = internal unnamed_addr constant [4 x i64] [i64 524810, i64 201592326, i64 51052809, i64 252120325], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @jinit_color_deconverter(%struct.jpeg_decompress_struct*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %3 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %4 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %3, i64 0, i32 0
  %5 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %4, align 8
  %6 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %7 = tail call i8* %5(%struct.jpeg_common_struct* %6, i32 1, i64 56) #4
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 86
  %9 = bitcast %struct.jpeg_color_deconverter** %8 to i8**
  store i8* %7, i8** %9, align 8
  %10 = bitcast i8* %7 to void (%struct.jpeg_decompress_struct*)**
  store void (%struct.jpeg_decompress_struct*)* @start_pass_dcolor, void (%struct.jpeg_decompress_struct*)** %10, align 8
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 10
  %12 = load i32, i32* %11, align 4
  switch i32 %12, label %46 [
    i32 1, label %13
    i32 2, label %24
    i32 3, label %24
    i32 4, label %35
    i32 5, label %35
  ]

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %57, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %19 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %18, align 8
  %20 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %19, i64 0, i32 5
  store i32 10, i32* %20, align 8
  %21 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %18, align 8
  %22 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %21, i64 0, i32 0
  %23 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %22, align 8
  tail call void %23(%struct.jpeg_common_struct* %6) #4
  br label %57

24:                                               ; preds = %1, %1
  %25 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %26 = load i32, i32* %25, align 8
  %27 = icmp eq i32 %26, 3
  br i1 %27, label %57, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %30 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %29, align 8
  %31 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %30, i64 0, i32 5
  store i32 10, i32* %31, align 8
  %32 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %29, align 8
  %33 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %32, i64 0, i32 0
  %34 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %33, align 8
  tail call void %34(%struct.jpeg_common_struct* %6) #4
  br label %57

35:                                               ; preds = %1, %1
  %36 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %37 = load i32, i32* %36, align 8
  %38 = icmp eq i32 %37, 4
  br i1 %38, label %57, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %41 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %40, align 8
  %42 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %41, i64 0, i32 5
  store i32 10, i32* %42, align 8
  %43 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %40, align 8
  %44 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %43, i64 0, i32 0
  %45 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %44, align 8
  tail call void %45(%struct.jpeg_common_struct* %6) #4
  br label %57

46:                                               ; preds = %1
  %47 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %48 = load i32, i32* %47, align 8
  %49 = icmp slt i32 %48, 1
  br i1 %49, label %50, label %57

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %52 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %51, align 8
  %53 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %52, i64 0, i32 5
  store i32 10, i32* %53, align 8
  %54 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %51, align 8
  %55 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %54, i64 0, i32 0
  %56 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %55, align 8
  tail call void %56(%struct.jpeg_common_struct* %6) #4
  br label %57

57:                                               ; preds = %13, %24, %35, %46, %50, %39, %28, %17
  %58 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 11
  %59 = load i32, i32* %58, align 8
  switch i32 %59, label %429 [
    i32 1, label %60
    i32 2, label %121
    i32 6, label %121
    i32 7, label %121
    i32 8, label %121
    i32 9, label %121
    i32 10, label %121
    i32 11, label %121
    i32 12, label %121
    i32 13, label %121
    i32 14, label %121
    i32 15, label %121
    i32 16, label %213
    i32 4, label %362
  ]

60:                                               ; preds = %57
  %61 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  store i32 1, i32* %61, align 8
  %62 = load i32, i32* %11, align 4
  switch i32 %62, label %114 [
    i32 1, label %63
    i32 3, label %63
    i32 2, label %79
  ]

63:                                               ; preds = %60, %60
  %64 = getelementptr inbounds i8, i8* %7, i64 8
  %65 = bitcast i8* %64 to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @grayscale_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %65, align 8
  %66 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %67 = load i32, i32* %66, align 8
  %68 = icmp sgt i32 %67, 1
  br i1 %68, label %69, label %445

69:                                               ; preds = %63
  %70 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 44
  br label %71

71:                                               ; preds = %69, %71
  %72 = phi i64 [ 1, %69 ], [ %75, %71 ]
  %73 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %70, align 8
  %74 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %73, i64 %72, i32 12
  store i32 0, i32* %74, align 8
  %75 = add nuw nsw i64 %72, 1
  %76 = load i32, i32* %66, align 8
  %77 = sext i32 %76 to i64
  %78 = icmp slt i64 %75, %77
  br i1 %78, label %71, label %445

79:                                               ; preds = %60
  %80 = getelementptr inbounds i8, i8* %7, i64 8
  %81 = bitcast i8* %80 to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @rgb_gray_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %81, align 8
  %82 = bitcast %struct.jpeg_color_deconverter** %8 to %struct.my_color_deconverter**
  %83 = load %struct.my_color_deconverter*, %struct.my_color_deconverter** %82, align 8
  %84 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %85 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %84, i64 0, i32 0
  %86 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %85, align 8
  %87 = tail call i8* %86(%struct.jpeg_common_struct* %6, i32 1, i64 6144) #4
  %88 = bitcast i8* %87 to i64*
  %89 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %83, i64 0, i32 5
  %90 = bitcast i64** %89 to i8**
  store i8* %87, i8** %90, align 8
  br label %91

91:                                               ; preds = %91, %79
  %92 = phi i64 [ 0, %79 ], [ %112, %91 ]
  %93 = mul nuw nsw i64 %92, 19595
  %94 = getelementptr inbounds i64, i64* %88, i64 %92
  store i64 %93, i64* %94, align 8
  %95 = mul nuw nsw i64 %92, 38470
  %96 = add nuw nsw i64 %92, 256
  %97 = getelementptr inbounds i64, i64* %88, i64 %96
  store i64 %95, i64* %97, align 8
  %98 = mul nuw nsw i64 %92, 7471
  %99 = add nuw nsw i64 %98, 32768
  %100 = add nuw nsw i64 %92, 512
  %101 = getelementptr inbounds i64, i64* %88, i64 %100
  store i64 %99, i64* %101, align 8
  %102 = or i64 %92, 1
  %103 = mul nuw nsw i64 %102, 19595
  %104 = getelementptr inbounds i64, i64* %88, i64 %102
  store i64 %103, i64* %104, align 8
  %105 = mul nuw nsw i64 %102, 38470
  %106 = add nuw nsw i64 %92, 257
  %107 = getelementptr inbounds i64, i64* %88, i64 %106
  store i64 %105, i64* %107, align 8
  %108 = mul nuw nsw i64 %102, 7471
  %109 = add nuw nsw i64 %108, 32768
  %110 = add nuw nsw i64 %92, 513
  %111 = getelementptr inbounds i64, i64* %88, i64 %110
  store i64 %109, i64* %111, align 8
  %112 = add nuw nsw i64 %92, 2
  %113 = icmp eq i64 %112, 256
  br i1 %113, label %445, label %91

114:                                              ; preds = %60
  %115 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %116 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %115, align 8
  %117 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %116, i64 0, i32 5
  store i32 27, i32* %117, align 8
  %118 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %115, align 8
  %119 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %118, i64 0, i32 0
  %120 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %119, align 8
  tail call void %120(%struct.jpeg_common_struct* %6) #4
  br label %445

121:                                              ; preds = %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57
  %122 = zext i32 %59 to i64
  %123 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_pixelsize, i64 0, i64 %122
  %124 = load i32, i32* %123, align 4
  %125 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  store i32 %124, i32* %125, align 8
  %126 = load i32, i32* %11, align 4
  switch i32 %126, label %206 [
    i32 3, label %127
    i32 1, label %185
    i32 2, label %188
  ]

127:                                              ; preds = %121
  %128 = tail call i32 @jsimd_can_ycc_rgb() #4
  %129 = icmp eq i32 %128, 0
  %130 = getelementptr inbounds i8, i8* %7, i64 8
  %131 = bitcast i8* %130 to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  br i1 %129, label %133, label %132

132:                                              ; preds = %127
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @jsimd_ycc_rgb_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %131, align 8
  br label %445

133:                                              ; preds = %127
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @ycc_rgb_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %131, align 8
  %134 = bitcast %struct.jpeg_color_deconverter** %8 to %struct.my_color_deconverter**
  %135 = load %struct.my_color_deconverter*, %struct.my_color_deconverter** %134, align 8
  %136 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %137 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %136, i64 0, i32 0
  %138 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %137, align 8
  %139 = tail call i8* %138(%struct.jpeg_common_struct* %6, i32 1, i64 1024) #4
  %140 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %135, i64 0, i32 1
  %141 = bitcast i32** %140 to i8**
  store i8* %139, i8** %141, align 8
  %142 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %143 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %142, i64 0, i32 0
  %144 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %143, align 8
  %145 = tail call i8* %144(%struct.jpeg_common_struct* %6, i32 1, i64 1024) #4
  %146 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %135, i64 0, i32 2
  %147 = bitcast i32** %146 to i8**
  store i8* %145, i8** %147, align 8
  %148 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %149 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %148, i64 0, i32 0
  %150 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %149, align 8
  %151 = tail call i8* %150(%struct.jpeg_common_struct* %6, i32 1, i64 2048) #4
  %152 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %135, i64 0, i32 3
  %153 = bitcast i64** %152 to i8**
  store i8* %151, i8** %153, align 8
  %154 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %155 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %154, i64 0, i32 0
  %156 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %155, align 8
  %157 = tail call i8* %156(%struct.jpeg_common_struct* %6, i32 1, i64 2048) #4
  %158 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %135, i64 0, i32 4
  %159 = bitcast i64** %158 to i8**
  store i8* %157, i8** %159, align 8
  br label %160

160:                                              ; preds = %160, %133
  %161 = phi i64 [ 0, %133 ], [ %182, %160 ]
  %162 = phi i64 [ -128, %133 ], [ %183, %160 ]
  %163 = mul nsw i64 %162, 91881
  %164 = add nsw i64 %163, 32768
  %165 = lshr i64 %164, 16
  %166 = trunc i64 %165 to i32
  %167 = load i32*, i32** %140, align 8
  %168 = getelementptr inbounds i32, i32* %167, i64 %161
  store i32 %166, i32* %168, align 4
  %169 = mul nsw i64 %162, 116130
  %170 = add nsw i64 %169, 32768
  %171 = lshr i64 %170, 16
  %172 = trunc i64 %171 to i32
  %173 = load i32*, i32** %146, align 8
  %174 = getelementptr inbounds i32, i32* %173, i64 %161
  store i32 %172, i32* %174, align 4
  %175 = mul nsw i64 %162, -46802
  %176 = load i64*, i64** %152, align 8
  %177 = getelementptr inbounds i64, i64* %176, i64 %161
  store i64 %175, i64* %177, align 8
  %178 = mul nsw i64 %162, -22554
  %179 = add nsw i64 %178, 32768
  %180 = load i64*, i64** %158, align 8
  %181 = getelementptr inbounds i64, i64* %180, i64 %161
  store i64 %179, i64* %181, align 8
  %182 = add nuw nsw i64 %161, 1
  %183 = add nsw i64 %162, 1
  %184 = icmp eq i64 %182, 256
  br i1 %184, label %445, label %160

185:                                              ; preds = %121
  %186 = getelementptr inbounds i8, i8* %7, i64 8
  %187 = bitcast i8* %186 to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @gray_rgb_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %187, align 8
  br label %445

188:                                              ; preds = %121
  %189 = lshr i64 4292, %122
  %190 = and i64 %189, 1
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %203, label %192

192:                                              ; preds = %188
  %193 = lshr i64 13252, %122
  %194 = and i64 %193, 1
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %203, label %196

196:                                              ; preds = %192
  %197 = lshr i64 324, %122
  %198 = and i64 %197, 1
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %203, label %200

200:                                              ; preds = %196
  %201 = getelementptr inbounds i8, i8* %7, i64 8
  %202 = bitcast i8* %201 to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @null_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %202, align 8
  br label %445

203:                                              ; preds = %196, %192, %188
  %204 = getelementptr inbounds i8, i8* %7, i64 8
  %205 = bitcast i8* %204 to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @rgb_rgb_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %205, align 8
  br label %445

206:                                              ; preds = %121
  %207 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %208 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %207, align 8
  %209 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %208, i64 0, i32 5
  store i32 27, i32* %209, align 8
  %210 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %207, align 8
  %211 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %210, i64 0, i32 0
  %212 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %211, align 8
  tail call void %212(%struct.jpeg_common_struct* %6) #4
  br label %445

213:                                              ; preds = %57
  %214 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  store i32 3, i32* %214, align 8
  %215 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 21
  %216 = load i32, i32* %215, align 8
  %217 = icmp eq i32 %216, 0
  %218 = load i32, i32* %11, align 4
  %219 = icmp eq i32 %218, 3
  br i1 %217, label %220, label %293

220:                                              ; preds = %213
  br i1 %219, label %221, label %279

221:                                              ; preds = %220
  %222 = tail call i32 @jsimd_can_ycc_rgb565() #4
  %223 = icmp eq i32 %222, 0
  %224 = getelementptr inbounds i8, i8* %7, i64 8
  %225 = bitcast i8* %224 to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  br i1 %223, label %227, label %226

226:                                              ; preds = %221
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @jsimd_ycc_rgb565_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %225, align 8
  br label %445

227:                                              ; preds = %221
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @ycc_rgb565_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %225, align 8
  %228 = bitcast %struct.jpeg_color_deconverter** %8 to %struct.my_color_deconverter**
  %229 = load %struct.my_color_deconverter*, %struct.my_color_deconverter** %228, align 8
  %230 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %231 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %230, i64 0, i32 0
  %232 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %231, align 8
  %233 = tail call i8* %232(%struct.jpeg_common_struct* %6, i32 1, i64 1024) #4
  %234 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %229, i64 0, i32 1
  %235 = bitcast i32** %234 to i8**
  store i8* %233, i8** %235, align 8
  %236 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %237 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %236, i64 0, i32 0
  %238 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %237, align 8
  %239 = tail call i8* %238(%struct.jpeg_common_struct* %6, i32 1, i64 1024) #4
  %240 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %229, i64 0, i32 2
  %241 = bitcast i32** %240 to i8**
  store i8* %239, i8** %241, align 8
  %242 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %243 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %242, i64 0, i32 0
  %244 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %243, align 8
  %245 = tail call i8* %244(%struct.jpeg_common_struct* %6, i32 1, i64 2048) #4
  %246 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %229, i64 0, i32 3
  %247 = bitcast i64** %246 to i8**
  store i8* %245, i8** %247, align 8
  %248 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %249 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %248, i64 0, i32 0
  %250 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %249, align 8
  %251 = tail call i8* %250(%struct.jpeg_common_struct* %6, i32 1, i64 2048) #4
  %252 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %229, i64 0, i32 4
  %253 = bitcast i64** %252 to i8**
  store i8* %251, i8** %253, align 8
  br label %254

254:                                              ; preds = %254, %227
  %255 = phi i64 [ 0, %227 ], [ %276, %254 ]
  %256 = phi i64 [ -128, %227 ], [ %277, %254 ]
  %257 = mul nsw i64 %256, 91881
  %258 = add nsw i64 %257, 32768
  %259 = lshr i64 %258, 16
  %260 = trunc i64 %259 to i32
  %261 = load i32*, i32** %234, align 8
  %262 = getelementptr inbounds i32, i32* %261, i64 %255
  store i32 %260, i32* %262, align 4
  %263 = mul nsw i64 %256, 116130
  %264 = add nsw i64 %263, 32768
  %265 = lshr i64 %264, 16
  %266 = trunc i64 %265 to i32
  %267 = load i32*, i32** %240, align 8
  %268 = getelementptr inbounds i32, i32* %267, i64 %255
  store i32 %266, i32* %268, align 4
  %269 = mul nsw i64 %256, -46802
  %270 = load i64*, i64** %246, align 8
  %271 = getelementptr inbounds i64, i64* %270, i64 %255
  store i64 %269, i64* %271, align 8
  %272 = mul nsw i64 %256, -22554
  %273 = add nsw i64 %272, 32768
  %274 = load i64*, i64** %252, align 8
  %275 = getelementptr inbounds i64, i64* %274, i64 %255
  store i64 %273, i64* %275, align 8
  %276 = add nuw nsw i64 %255, 1
  %277 = add nsw i64 %256, 1
  %278 = icmp eq i64 %276, 256
  br i1 %278, label %445, label %254

279:                                              ; preds = %220
  switch i32 %218, label %286 [
    i32 1, label %280
    i32 2, label %283
  ]

280:                                              ; preds = %279
  %281 = getelementptr inbounds i8, i8* %7, i64 8
  %282 = bitcast i8* %281 to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @gray_rgb565_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %282, align 8
  br label %445

283:                                              ; preds = %279
  %284 = getelementptr inbounds i8, i8* %7, i64 8
  %285 = bitcast i8* %284 to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @rgb_rgb565_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %285, align 8
  br label %445

286:                                              ; preds = %279
  %287 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %288 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %287, align 8
  %289 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %288, i64 0, i32 5
  store i32 27, i32* %289, align 8
  %290 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %287, align 8
  %291 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %290, i64 0, i32 0
  %292 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %291, align 8
  tail call void %292(%struct.jpeg_common_struct* %6) #4
  br label %445

293:                                              ; preds = %213
  br i1 %219, label %294, label %348

294:                                              ; preds = %293
  %295 = getelementptr inbounds i8, i8* %7, i64 8
  %296 = bitcast i8* %295 to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @ycc_rgb565D_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %296, align 8
  %297 = bitcast %struct.jpeg_color_deconverter** %8 to %struct.my_color_deconverter**
  %298 = load %struct.my_color_deconverter*, %struct.my_color_deconverter** %297, align 8
  %299 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %300 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %299, i64 0, i32 0
  %301 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %300, align 8
  %302 = tail call i8* %301(%struct.jpeg_common_struct* %6, i32 1, i64 1024) #4
  %303 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %298, i64 0, i32 1
  %304 = bitcast i32** %303 to i8**
  store i8* %302, i8** %304, align 8
  %305 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %306 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %305, i64 0, i32 0
  %307 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %306, align 8
  %308 = tail call i8* %307(%struct.jpeg_common_struct* %6, i32 1, i64 1024) #4
  %309 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %298, i64 0, i32 2
  %310 = bitcast i32** %309 to i8**
  store i8* %308, i8** %310, align 8
  %311 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %312 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %311, i64 0, i32 0
  %313 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %312, align 8
  %314 = tail call i8* %313(%struct.jpeg_common_struct* %6, i32 1, i64 2048) #4
  %315 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %298, i64 0, i32 3
  %316 = bitcast i64** %315 to i8**
  store i8* %314, i8** %316, align 8
  %317 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %318 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %317, i64 0, i32 0
  %319 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %318, align 8
  %320 = tail call i8* %319(%struct.jpeg_common_struct* %6, i32 1, i64 2048) #4
  %321 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %298, i64 0, i32 4
  %322 = bitcast i64** %321 to i8**
  store i8* %320, i8** %322, align 8
  br label %323

323:                                              ; preds = %323, %294
  %324 = phi i64 [ 0, %294 ], [ %345, %323 ]
  %325 = phi i64 [ -128, %294 ], [ %346, %323 ]
  %326 = mul nsw i64 %325, 91881
  %327 = add nsw i64 %326, 32768
  %328 = lshr i64 %327, 16
  %329 = trunc i64 %328 to i32
  %330 = load i32*, i32** %303, align 8
  %331 = getelementptr inbounds i32, i32* %330, i64 %324
  store i32 %329, i32* %331, align 4
  %332 = mul nsw i64 %325, 116130
  %333 = add nsw i64 %332, 32768
  %334 = lshr i64 %333, 16
  %335 = trunc i64 %334 to i32
  %336 = load i32*, i32** %309, align 8
  %337 = getelementptr inbounds i32, i32* %336, i64 %324
  store i32 %335, i32* %337, align 4
  %338 = mul nsw i64 %325, -46802
  %339 = load i64*, i64** %315, align 8
  %340 = getelementptr inbounds i64, i64* %339, i64 %324
  store i64 %338, i64* %340, align 8
  %341 = mul nsw i64 %325, -22554
  %342 = add nsw i64 %341, 32768
  %343 = load i64*, i64** %321, align 8
  %344 = getelementptr inbounds i64, i64* %343, i64 %324
  store i64 %342, i64* %344, align 8
  %345 = add nuw nsw i64 %324, 1
  %346 = add nsw i64 %325, 1
  %347 = icmp eq i64 %345, 256
  br i1 %347, label %445, label %323

348:                                              ; preds = %293
  switch i32 %218, label %355 [
    i32 1, label %349
    i32 2, label %352
  ]

349:                                              ; preds = %348
  %350 = getelementptr inbounds i8, i8* %7, i64 8
  %351 = bitcast i8* %350 to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @gray_rgb565D_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %351, align 8
  br label %445

352:                                              ; preds = %348
  %353 = getelementptr inbounds i8, i8* %7, i64 8
  %354 = bitcast i8* %353 to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @rgb_rgb565D_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %354, align 8
  br label %445

355:                                              ; preds = %348
  %356 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %357 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %356, align 8
  %358 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %357, i64 0, i32 5
  store i32 27, i32* %358, align 8
  %359 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %356, align 8
  %360 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %359, i64 0, i32 0
  %361 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %360, align 8
  tail call void %361(%struct.jpeg_common_struct* %6) #4
  br label %445

362:                                              ; preds = %57
  %363 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  store i32 4, i32* %363, align 8
  %364 = load i32, i32* %11, align 4
  switch i32 %364, label %422 [
    i32 5, label %365
    i32 4, label %419
  ]

365:                                              ; preds = %362
  %366 = getelementptr inbounds i8, i8* %7, i64 8
  %367 = bitcast i8* %366 to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @ycck_cmyk_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %367, align 8
  %368 = bitcast %struct.jpeg_color_deconverter** %8 to %struct.my_color_deconverter**
  %369 = load %struct.my_color_deconverter*, %struct.my_color_deconverter** %368, align 8
  %370 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %371 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %370, i64 0, i32 0
  %372 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %371, align 8
  %373 = tail call i8* %372(%struct.jpeg_common_struct* %6, i32 1, i64 1024) #4
  %374 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %369, i64 0, i32 1
  %375 = bitcast i32** %374 to i8**
  store i8* %373, i8** %375, align 8
  %376 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %377 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %376, i64 0, i32 0
  %378 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %377, align 8
  %379 = tail call i8* %378(%struct.jpeg_common_struct* %6, i32 1, i64 1024) #4
  %380 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %369, i64 0, i32 2
  %381 = bitcast i32** %380 to i8**
  store i8* %379, i8** %381, align 8
  %382 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %383 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %382, i64 0, i32 0
  %384 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %383, align 8
  %385 = tail call i8* %384(%struct.jpeg_common_struct* %6, i32 1, i64 2048) #4
  %386 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %369, i64 0, i32 3
  %387 = bitcast i64** %386 to i8**
  store i8* %385, i8** %387, align 8
  %388 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %389 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %388, i64 0, i32 0
  %390 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %389, align 8
  %391 = tail call i8* %390(%struct.jpeg_common_struct* %6, i32 1, i64 2048) #4
  %392 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %369, i64 0, i32 4
  %393 = bitcast i64** %392 to i8**
  store i8* %391, i8** %393, align 8
  br label %394

394:                                              ; preds = %394, %365
  %395 = phi i64 [ 0, %365 ], [ %416, %394 ]
  %396 = phi i64 [ -128, %365 ], [ %417, %394 ]
  %397 = mul nsw i64 %396, 91881
  %398 = add nsw i64 %397, 32768
  %399 = lshr i64 %398, 16
  %400 = trunc i64 %399 to i32
  %401 = load i32*, i32** %374, align 8
  %402 = getelementptr inbounds i32, i32* %401, i64 %395
  store i32 %400, i32* %402, align 4
  %403 = mul nsw i64 %396, 116130
  %404 = add nsw i64 %403, 32768
  %405 = lshr i64 %404, 16
  %406 = trunc i64 %405 to i32
  %407 = load i32*, i32** %380, align 8
  %408 = getelementptr inbounds i32, i32* %407, i64 %395
  store i32 %406, i32* %408, align 4
  %409 = mul nsw i64 %396, -46802
  %410 = load i64*, i64** %386, align 8
  %411 = getelementptr inbounds i64, i64* %410, i64 %395
  store i64 %409, i64* %411, align 8
  %412 = mul nsw i64 %396, -22554
  %413 = add nsw i64 %412, 32768
  %414 = load i64*, i64** %392, align 8
  %415 = getelementptr inbounds i64, i64* %414, i64 %395
  store i64 %413, i64* %415, align 8
  %416 = add nuw nsw i64 %395, 1
  %417 = add nsw i64 %396, 1
  %418 = icmp eq i64 %416, 256
  br i1 %418, label %445, label %394

419:                                              ; preds = %362
  %420 = getelementptr inbounds i8, i8* %7, i64 8
  %421 = bitcast i8* %420 to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @null_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %421, align 8
  br label %445

422:                                              ; preds = %362
  %423 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %424 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %423, align 8
  %425 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %424, i64 0, i32 5
  store i32 27, i32* %425, align 8
  %426 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %423, align 8
  %427 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %426, i64 0, i32 0
  %428 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %427, align 8
  tail call void %428(%struct.jpeg_common_struct* %6) #4
  br label %445

429:                                              ; preds = %57
  %430 = load i32, i32* %11, align 4
  %431 = icmp eq i32 %59, %430
  br i1 %431, label %432, label %438

432:                                              ; preds = %429
  %433 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %434 = load i32, i32* %433, align 8
  %435 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  store i32 %434, i32* %435, align 8
  %436 = getelementptr inbounds i8, i8* %7, i64 8
  %437 = bitcast i8* %436 to void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)**
  store void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* @null_convert, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %437, align 8
  br label %445

438:                                              ; preds = %429
  %439 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %440 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %439, align 8
  %441 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %440, i64 0, i32 5
  store i32 27, i32* %441, align 8
  %442 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %439, align 8
  %443 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %442, i64 0, i32 0
  %444 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %443, align 8
  tail call void %444(%struct.jpeg_common_struct* %6) #4
  br label %445

445:                                              ; preds = %394, %323, %254, %160, %91, %71, %63, %432, %438, %422, %419, %280, %286, %283, %226, %349, %355, %352, %132, %206, %203, %200, %185, %114
  %446 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 20
  %447 = load i32, i32* %446, align 4
  %448 = icmp eq i32 %447, 0
  br i1 %448, label %449, label %452

449:                                              ; preds = %445
  %450 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  %451 = load i32, i32* %450, align 8
  br label %452

452:                                              ; preds = %445, %449
  %453 = phi i32 [ %451, %449 ], [ 1, %445 ]
  %454 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 30
  store i32 %453, i32* %454, align 4
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @start_pass_dcolor(%struct.jpeg_decompress_struct* nocapture) #1 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @grayscale_convert(%struct.jpeg_decompress_struct* nocapture readonly, i8*** nocapture readonly, i32, i8**, i32) #0 {
  %6 = load i8**, i8*** %1, align 8
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %8 = load i32, i32* %7, align 8
  tail call void @jcopy_sample_rows(i8** %6, i32 %2, i8** %3, i32 0, i32 %4, i32 %8) #4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @rgb_gray_convert(%struct.jpeg_decompress_struct* nocapture readonly, i8*** nocapture readonly, i32, i8** nocapture readonly, i32) #2 {
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 86
  %7 = bitcast %struct.jpeg_color_deconverter** %6 to %struct.my_color_deconverter**
  %8 = load %struct.my_color_deconverter*, %struct.my_color_deconverter** %7, align 8
  %9 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %8, i64 0, i32 5
  %10 = load i64*, i64** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %12 = load i32, i32* %11, align 8
  %13 = icmp sgt i32 %4, 0
  br i1 %13, label %14, label %65

14:                                               ; preds = %5
  %15 = getelementptr inbounds i8**, i8*** %1, i64 1
  %16 = getelementptr inbounds i8**, i8*** %1, i64 2
  %17 = icmp eq i32 %12, 0
  %18 = zext i32 %12 to i64
  br label %21

19:                                               ; preds = %39, %21
  %20 = icmp sgt i32 %25, 0
  br i1 %20, label %21, label %65

21:                                               ; preds = %14, %19
  %22 = phi i32 [ %4, %14 ], [ %25, %19 ]
  %23 = phi i32 [ %2, %14 ], [ %36, %19 ]
  %24 = phi i8** [ %3, %14 ], [ %37, %19 ]
  %25 = add nsw i32 %22, -1
  %26 = load i8**, i8*** %1, align 8
  %27 = zext i32 %23 to i64
  %28 = getelementptr inbounds i8*, i8** %26, i64 %27
  %29 = load i8*, i8** %28, align 8
  %30 = load i8**, i8*** %15, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 %27
  %32 = load i8*, i8** %31, align 8
  %33 = load i8**, i8*** %16, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 %27
  %35 = load i8*, i8** %34, align 8
  %36 = add i32 %23, 1
  %37 = getelementptr inbounds i8*, i8** %24, i64 1
  %38 = load i8*, i8** %24, align 8
  br i1 %17, label %19, label %39

39:                                               ; preds = %21, %39
  %40 = phi i64 [ %63, %39 ], [ 0, %21 ]
  %41 = getelementptr inbounds i8, i8* %29, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = getelementptr inbounds i8, i8* %32, i64 %40
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i64
  %46 = getelementptr inbounds i8, i8* %35, i64 %40
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i64
  %49 = zext i8 %42 to i64
  %50 = getelementptr inbounds i64, i64* %10, i64 %49
  %51 = load i64, i64* %50, align 8
  %52 = or i64 %45, 256
  %53 = getelementptr inbounds i64, i64* %10, i64 %52
  %54 = load i64, i64* %53, align 8
  %55 = add nsw i64 %54, %51
  %56 = or i64 %48, 512
  %57 = getelementptr inbounds i64, i64* %10, i64 %56
  %58 = load i64, i64* %57, align 8
  %59 = add nsw i64 %55, %58
  %60 = lshr i64 %59, 16
  %61 = trunc i64 %60 to i8
  %62 = getelementptr inbounds i8, i8* %38, i64 %40
  store i8 %61, i8* %62, align 1
  %63 = add nuw nsw i64 %40, 1
  %64 = icmp eq i64 %63, %18
  br i1 %64, label %19, label %39

65:                                               ; preds = %19, %5
  ret void
}

declare i32 @jsimd_can_ycc_rgb() local_unnamed_addr #3

declare void @jsimd_ycc_rgb_convert(%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @ycc_rgb_convert(%struct.jpeg_decompress_struct* readonly, i8*** readonly, i32, i8** nocapture readonly, i32) #2 {
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 11
  %7 = load i32, i32* %6, align 8
  switch i32 %7, label %510 [
    i32 6, label %8
    i32 7, label %91
    i32 12, label %91
    i32 8, label %175
    i32 9, label %258
    i32 13, label %258
    i32 10, label %342
    i32 14, label %342
    i32 11, label %426
    i32 15, label %426
  ]

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 86
  %10 = bitcast %struct.jpeg_color_deconverter** %9 to %struct.my_color_deconverter**
  %11 = load %struct.my_color_deconverter*, %struct.my_color_deconverter** %10, align 8
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 65
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %11, i64 0, i32 1
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %11, i64 0, i32 2
  %19 = load i32*, i32** %18, align 8
  %20 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %11, i64 0, i32 3
  %21 = load i64*, i64** %20, align 8
  %22 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %11, i64 0, i32 4
  %23 = load i64*, i64** %22, align 8
  %24 = icmp sgt i32 %4, 0
  br i1 %24, label %25, label %593

25:                                               ; preds = %8
  %26 = getelementptr inbounds i8**, i8*** %1, i64 1
  %27 = getelementptr inbounds i8**, i8*** %1, i64 2
  %28 = icmp eq i32 %13, 0
  %29 = zext i32 %13 to i64
  br label %32

30:                                               ; preds = %51, %32
  %31 = icmp sgt i32 %36, 0
  br i1 %31, label %32, label %593

32:                                               ; preds = %30, %25
  %33 = phi i32 [ %4, %25 ], [ %36, %30 ]
  %34 = phi i32 [ %2, %25 ], [ %47, %30 ]
  %35 = phi i8** [ %3, %25 ], [ %48, %30 ]
  %36 = add nsw i32 %33, -1
  %37 = load i8**, i8*** %1, align 8
  %38 = zext i32 %34 to i64
  %39 = getelementptr inbounds i8*, i8** %37, i64 %38
  %40 = load i8*, i8** %39, align 8
  %41 = load i8**, i8*** %26, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 %38
  %43 = load i8*, i8** %42, align 8
  %44 = load i8**, i8*** %27, align 8
  %45 = getelementptr inbounds i8*, i8** %44, i64 %38
  %46 = load i8*, i8** %45, align 8
  %47 = add i32 %34, 1
  %48 = getelementptr inbounds i8*, i8** %35, i64 1
  br i1 %28, label %30, label %49

49:                                               ; preds = %32
  %50 = load i8*, i8** %35, align 8
  br label %51

51:                                               ; preds = %51, %49
  %52 = phi i64 [ 0, %49 ], [ %89, %51 ]
  %53 = phi i8* [ %50, %49 ], [ %88, %51 ]
  %54 = getelementptr inbounds i8, i8* %40, i64 %52
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = getelementptr inbounds i8, i8* %43, i64 %52
  %58 = load i8, i8* %57, align 1
  %59 = getelementptr inbounds i8, i8* %46, i64 %52
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i64
  %62 = getelementptr inbounds i32, i32* %17, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = add nsw i32 %63, %56
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %15, i64 %65
  %67 = load i8, i8* %66, align 1
  store i8 %67, i8* %53, align 1
  %68 = zext i8 %58 to i64
  %69 = getelementptr inbounds i64, i64* %23, i64 %68
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds i64, i64* %21, i64 %61
  %72 = load i64, i64* %71, align 8
  %73 = add nsw i64 %72, %70
  %74 = lshr i64 %73, 16
  %75 = trunc i64 %74 to i32
  %76 = add nsw i32 %75, %56
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %15, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = getelementptr inbounds i8, i8* %53, i64 1
  store i8 %79, i8* %80, align 1
  %81 = getelementptr inbounds i32, i32* %19, i64 %68
  %82 = load i32, i32* %81, align 4
  %83 = add nsw i32 %82, %56
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %15, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = getelementptr inbounds i8, i8* %53, i64 2
  store i8 %86, i8* %87, align 1
  %88 = getelementptr inbounds i8, i8* %53, i64 3
  %89 = add nuw nsw i64 %52, 1
  %90 = icmp eq i64 %89, %29
  br i1 %90, label %30, label %51

91:                                               ; preds = %5, %5
  %92 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 86
  %93 = bitcast %struct.jpeg_color_deconverter** %92 to %struct.my_color_deconverter**
  %94 = load %struct.my_color_deconverter*, %struct.my_color_deconverter** %93, align 8
  %95 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %96 = load i32, i32* %95, align 8
  %97 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 65
  %98 = load i8*, i8** %97, align 8
  %99 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %94, i64 0, i32 1
  %100 = load i32*, i32** %99, align 8
  %101 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %94, i64 0, i32 2
  %102 = load i32*, i32** %101, align 8
  %103 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %94, i64 0, i32 3
  %104 = load i64*, i64** %103, align 8
  %105 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %94, i64 0, i32 4
  %106 = load i64*, i64** %105, align 8
  %107 = icmp sgt i32 %4, 0
  br i1 %107, label %108, label %593

108:                                              ; preds = %91
  %109 = getelementptr inbounds i8**, i8*** %1, i64 1
  %110 = getelementptr inbounds i8**, i8*** %1, i64 2
  %111 = icmp eq i32 %96, 0
  %112 = zext i32 %96 to i64
  br label %115

113:                                              ; preds = %134, %115
  %114 = icmp sgt i32 %119, 0
  br i1 %114, label %115, label %593

115:                                              ; preds = %113, %108
  %116 = phi i32 [ %4, %108 ], [ %119, %113 ]
  %117 = phi i32 [ %2, %108 ], [ %130, %113 ]
  %118 = phi i8** [ %3, %108 ], [ %131, %113 ]
  %119 = add nsw i32 %116, -1
  %120 = load i8**, i8*** %1, align 8
  %121 = zext i32 %117 to i64
  %122 = getelementptr inbounds i8*, i8** %120, i64 %121
  %123 = load i8*, i8** %122, align 8
  %124 = load i8**, i8*** %109, align 8
  %125 = getelementptr inbounds i8*, i8** %124, i64 %121
  %126 = load i8*, i8** %125, align 8
  %127 = load i8**, i8*** %110, align 8
  %128 = getelementptr inbounds i8*, i8** %127, i64 %121
  %129 = load i8*, i8** %128, align 8
  %130 = add i32 %117, 1
  %131 = getelementptr inbounds i8*, i8** %118, i64 1
  br i1 %111, label %113, label %132

132:                                              ; preds = %115
  %133 = load i8*, i8** %118, align 8
  br label %134

134:                                              ; preds = %134, %132
  %135 = phi i64 [ 0, %132 ], [ %173, %134 ]
  %136 = phi i8* [ %133, %132 ], [ %172, %134 ]
  %137 = getelementptr inbounds i8, i8* %123, i64 %135
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = getelementptr inbounds i8, i8* %126, i64 %135
  %141 = load i8, i8* %140, align 1
  %142 = getelementptr inbounds i8, i8* %129, i64 %135
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i64
  %145 = getelementptr inbounds i32, i32* %100, i64 %144
  %146 = load i32, i32* %145, align 4
  %147 = add nsw i32 %146, %139
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds i8, i8* %98, i64 %148
  %150 = load i8, i8* %149, align 1
  store i8 %150, i8* %136, align 1
  %151 = zext i8 %141 to i64
  %152 = getelementptr inbounds i64, i64* %106, i64 %151
  %153 = load i64, i64* %152, align 8
  %154 = getelementptr inbounds i64, i64* %104, i64 %144
  %155 = load i64, i64* %154, align 8
  %156 = add nsw i64 %155, %153
  %157 = lshr i64 %156, 16
  %158 = trunc i64 %157 to i32
  %159 = add nsw i32 %158, %139
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds i8, i8* %98, i64 %160
  %162 = load i8, i8* %161, align 1
  %163 = getelementptr inbounds i8, i8* %136, i64 1
  store i8 %162, i8* %163, align 1
  %164 = getelementptr inbounds i32, i32* %102, i64 %151
  %165 = load i32, i32* %164, align 4
  %166 = add nsw i32 %165, %139
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i8, i8* %98, i64 %167
  %169 = load i8, i8* %168, align 1
  %170 = getelementptr inbounds i8, i8* %136, i64 2
  store i8 %169, i8* %170, align 1
  %171 = getelementptr inbounds i8, i8* %136, i64 3
  store i8 -1, i8* %171, align 1
  %172 = getelementptr inbounds i8, i8* %136, i64 4
  %173 = add nuw nsw i64 %135, 1
  %174 = icmp eq i64 %173, %112
  br i1 %174, label %113, label %134

175:                                              ; preds = %5
  %176 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 86
  %177 = bitcast %struct.jpeg_color_deconverter** %176 to %struct.my_color_deconverter**
  %178 = load %struct.my_color_deconverter*, %struct.my_color_deconverter** %177, align 8
  %179 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %180 = load i32, i32* %179, align 8
  %181 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 65
  %182 = load i8*, i8** %181, align 8
  %183 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %178, i64 0, i32 1
  %184 = load i32*, i32** %183, align 8
  %185 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %178, i64 0, i32 2
  %186 = load i32*, i32** %185, align 8
  %187 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %178, i64 0, i32 3
  %188 = load i64*, i64** %187, align 8
  %189 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %178, i64 0, i32 4
  %190 = load i64*, i64** %189, align 8
  %191 = icmp sgt i32 %4, 0
  br i1 %191, label %192, label %593

192:                                              ; preds = %175
  %193 = getelementptr inbounds i8**, i8*** %1, i64 1
  %194 = getelementptr inbounds i8**, i8*** %1, i64 2
  %195 = icmp eq i32 %180, 0
  %196 = zext i32 %180 to i64
  br label %199

197:                                              ; preds = %218, %199
  %198 = icmp sgt i32 %203, 0
  br i1 %198, label %199, label %593

199:                                              ; preds = %197, %192
  %200 = phi i32 [ %4, %192 ], [ %203, %197 ]
  %201 = phi i32 [ %2, %192 ], [ %214, %197 ]
  %202 = phi i8** [ %3, %192 ], [ %215, %197 ]
  %203 = add nsw i32 %200, -1
  %204 = load i8**, i8*** %1, align 8
  %205 = zext i32 %201 to i64
  %206 = getelementptr inbounds i8*, i8** %204, i64 %205
  %207 = load i8*, i8** %206, align 8
  %208 = load i8**, i8*** %193, align 8
  %209 = getelementptr inbounds i8*, i8** %208, i64 %205
  %210 = load i8*, i8** %209, align 8
  %211 = load i8**, i8*** %194, align 8
  %212 = getelementptr inbounds i8*, i8** %211, i64 %205
  %213 = load i8*, i8** %212, align 8
  %214 = add i32 %201, 1
  %215 = getelementptr inbounds i8*, i8** %202, i64 1
  br i1 %195, label %197, label %216

216:                                              ; preds = %199
  %217 = load i8*, i8** %202, align 8
  br label %218

218:                                              ; preds = %218, %216
  %219 = phi i64 [ 0, %216 ], [ %256, %218 ]
  %220 = phi i8* [ %217, %216 ], [ %255, %218 ]
  %221 = getelementptr inbounds i8, i8* %207, i64 %219
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i32
  %224 = getelementptr inbounds i8, i8* %210, i64 %219
  %225 = load i8, i8* %224, align 1
  %226 = getelementptr inbounds i8, i8* %213, i64 %219
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i64
  %229 = getelementptr inbounds i32, i32* %184, i64 %228
  %230 = load i32, i32* %229, align 4
  %231 = add nsw i32 %230, %223
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds i8, i8* %182, i64 %232
  %234 = load i8, i8* %233, align 1
  %235 = getelementptr inbounds i8, i8* %220, i64 2
  store i8 %234, i8* %235, align 1
  %236 = zext i8 %225 to i64
  %237 = getelementptr inbounds i64, i64* %190, i64 %236
  %238 = load i64, i64* %237, align 8
  %239 = getelementptr inbounds i64, i64* %188, i64 %228
  %240 = load i64, i64* %239, align 8
  %241 = add nsw i64 %240, %238
  %242 = lshr i64 %241, 16
  %243 = trunc i64 %242 to i32
  %244 = add nsw i32 %243, %223
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds i8, i8* %182, i64 %245
  %247 = load i8, i8* %246, align 1
  %248 = getelementptr inbounds i8, i8* %220, i64 1
  store i8 %247, i8* %248, align 1
  %249 = getelementptr inbounds i32, i32* %186, i64 %236
  %250 = load i32, i32* %249, align 4
  %251 = add nsw i32 %250, %223
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds i8, i8* %182, i64 %252
  %254 = load i8, i8* %253, align 1
  store i8 %254, i8* %220, align 1
  %255 = getelementptr inbounds i8, i8* %220, i64 3
  %256 = add nuw nsw i64 %219, 1
  %257 = icmp eq i64 %256, %196
  br i1 %257, label %197, label %218

258:                                              ; preds = %5, %5
  %259 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 86
  %260 = bitcast %struct.jpeg_color_deconverter** %259 to %struct.my_color_deconverter**
  %261 = load %struct.my_color_deconverter*, %struct.my_color_deconverter** %260, align 8
  %262 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %263 = load i32, i32* %262, align 8
  %264 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 65
  %265 = load i8*, i8** %264, align 8
  %266 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %261, i64 0, i32 1
  %267 = load i32*, i32** %266, align 8
  %268 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %261, i64 0, i32 2
  %269 = load i32*, i32** %268, align 8
  %270 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %261, i64 0, i32 3
  %271 = load i64*, i64** %270, align 8
  %272 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %261, i64 0, i32 4
  %273 = load i64*, i64** %272, align 8
  %274 = icmp sgt i32 %4, 0
  br i1 %274, label %275, label %593

275:                                              ; preds = %258
  %276 = getelementptr inbounds i8**, i8*** %1, i64 1
  %277 = getelementptr inbounds i8**, i8*** %1, i64 2
  %278 = icmp eq i32 %263, 0
  %279 = zext i32 %263 to i64
  br label %282

280:                                              ; preds = %301, %282
  %281 = icmp sgt i32 %286, 0
  br i1 %281, label %282, label %593

282:                                              ; preds = %280, %275
  %283 = phi i32 [ %4, %275 ], [ %286, %280 ]
  %284 = phi i32 [ %2, %275 ], [ %297, %280 ]
  %285 = phi i8** [ %3, %275 ], [ %298, %280 ]
  %286 = add nsw i32 %283, -1
  %287 = load i8**, i8*** %1, align 8
  %288 = zext i32 %284 to i64
  %289 = getelementptr inbounds i8*, i8** %287, i64 %288
  %290 = load i8*, i8** %289, align 8
  %291 = load i8**, i8*** %276, align 8
  %292 = getelementptr inbounds i8*, i8** %291, i64 %288
  %293 = load i8*, i8** %292, align 8
  %294 = load i8**, i8*** %277, align 8
  %295 = getelementptr inbounds i8*, i8** %294, i64 %288
  %296 = load i8*, i8** %295, align 8
  %297 = add i32 %284, 1
  %298 = getelementptr inbounds i8*, i8** %285, i64 1
  br i1 %278, label %280, label %299

299:                                              ; preds = %282
  %300 = load i8*, i8** %285, align 8
  br label %301

301:                                              ; preds = %301, %299
  %302 = phi i64 [ 0, %299 ], [ %340, %301 ]
  %303 = phi i8* [ %300, %299 ], [ %339, %301 ]
  %304 = getelementptr inbounds i8, i8* %290, i64 %302
  %305 = load i8, i8* %304, align 1
  %306 = zext i8 %305 to i32
  %307 = getelementptr inbounds i8, i8* %293, i64 %302
  %308 = load i8, i8* %307, align 1
  %309 = getelementptr inbounds i8, i8* %296, i64 %302
  %310 = load i8, i8* %309, align 1
  %311 = zext i8 %310 to i64
  %312 = getelementptr inbounds i32, i32* %267, i64 %311
  %313 = load i32, i32* %312, align 4
  %314 = add nsw i32 %313, %306
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds i8, i8* %265, i64 %315
  %317 = load i8, i8* %316, align 1
  %318 = getelementptr inbounds i8, i8* %303, i64 2
  store i8 %317, i8* %318, align 1
  %319 = zext i8 %308 to i64
  %320 = getelementptr inbounds i64, i64* %273, i64 %319
  %321 = load i64, i64* %320, align 8
  %322 = getelementptr inbounds i64, i64* %271, i64 %311
  %323 = load i64, i64* %322, align 8
  %324 = add nsw i64 %323, %321
  %325 = lshr i64 %324, 16
  %326 = trunc i64 %325 to i32
  %327 = add nsw i32 %326, %306
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds i8, i8* %265, i64 %328
  %330 = load i8, i8* %329, align 1
  %331 = getelementptr inbounds i8, i8* %303, i64 1
  store i8 %330, i8* %331, align 1
  %332 = getelementptr inbounds i32, i32* %269, i64 %319
  %333 = load i32, i32* %332, align 4
  %334 = add nsw i32 %333, %306
  %335 = sext i32 %334 to i64
  %336 = getelementptr inbounds i8, i8* %265, i64 %335
  %337 = load i8, i8* %336, align 1
  store i8 %337, i8* %303, align 1
  %338 = getelementptr inbounds i8, i8* %303, i64 3
  store i8 -1, i8* %338, align 1
  %339 = getelementptr inbounds i8, i8* %303, i64 4
  %340 = add nuw nsw i64 %302, 1
  %341 = icmp eq i64 %340, %279
  br i1 %341, label %280, label %301

342:                                              ; preds = %5, %5
  %343 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 86
  %344 = bitcast %struct.jpeg_color_deconverter** %343 to %struct.my_color_deconverter**
  %345 = load %struct.my_color_deconverter*, %struct.my_color_deconverter** %344, align 8
  %346 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %347 = load i32, i32* %346, align 8
  %348 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 65
  %349 = load i8*, i8** %348, align 8
  %350 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %345, i64 0, i32 1
  %351 = load i32*, i32** %350, align 8
  %352 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %345, i64 0, i32 2
  %353 = load i32*, i32** %352, align 8
  %354 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %345, i64 0, i32 3
  %355 = load i64*, i64** %354, align 8
  %356 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %345, i64 0, i32 4
  %357 = load i64*, i64** %356, align 8
  %358 = icmp sgt i32 %4, 0
  br i1 %358, label %359, label %593

359:                                              ; preds = %342
  %360 = getelementptr inbounds i8**, i8*** %1, i64 1
  %361 = getelementptr inbounds i8**, i8*** %1, i64 2
  %362 = icmp eq i32 %347, 0
  %363 = zext i32 %347 to i64
  br label %366

364:                                              ; preds = %385, %366
  %365 = icmp sgt i32 %370, 0
  br i1 %365, label %366, label %593

366:                                              ; preds = %364, %359
  %367 = phi i32 [ %4, %359 ], [ %370, %364 ]
  %368 = phi i32 [ %2, %359 ], [ %381, %364 ]
  %369 = phi i8** [ %3, %359 ], [ %382, %364 ]
  %370 = add nsw i32 %367, -1
  %371 = load i8**, i8*** %1, align 8
  %372 = zext i32 %368 to i64
  %373 = getelementptr inbounds i8*, i8** %371, i64 %372
  %374 = load i8*, i8** %373, align 8
  %375 = load i8**, i8*** %360, align 8
  %376 = getelementptr inbounds i8*, i8** %375, i64 %372
  %377 = load i8*, i8** %376, align 8
  %378 = load i8**, i8*** %361, align 8
  %379 = getelementptr inbounds i8*, i8** %378, i64 %372
  %380 = load i8*, i8** %379, align 8
  %381 = add i32 %368, 1
  %382 = getelementptr inbounds i8*, i8** %369, i64 1
  br i1 %362, label %364, label %383

383:                                              ; preds = %366
  %384 = load i8*, i8** %369, align 8
  br label %385

385:                                              ; preds = %385, %383
  %386 = phi i64 [ 0, %383 ], [ %424, %385 ]
  %387 = phi i8* [ %384, %383 ], [ %423, %385 ]
  %388 = getelementptr inbounds i8, i8* %374, i64 %386
  %389 = load i8, i8* %388, align 1
  %390 = zext i8 %389 to i32
  %391 = getelementptr inbounds i8, i8* %377, i64 %386
  %392 = load i8, i8* %391, align 1
  %393 = getelementptr inbounds i8, i8* %380, i64 %386
  %394 = load i8, i8* %393, align 1
  %395 = zext i8 %394 to i64
  %396 = getelementptr inbounds i32, i32* %351, i64 %395
  %397 = load i32, i32* %396, align 4
  %398 = add nsw i32 %397, %390
  %399 = sext i32 %398 to i64
  %400 = getelementptr inbounds i8, i8* %349, i64 %399
  %401 = load i8, i8* %400, align 1
  %402 = getelementptr inbounds i8, i8* %387, i64 3
  store i8 %401, i8* %402, align 1
  %403 = zext i8 %392 to i64
  %404 = getelementptr inbounds i64, i64* %357, i64 %403
  %405 = load i64, i64* %404, align 8
  %406 = getelementptr inbounds i64, i64* %355, i64 %395
  %407 = load i64, i64* %406, align 8
  %408 = add nsw i64 %407, %405
  %409 = lshr i64 %408, 16
  %410 = trunc i64 %409 to i32
  %411 = add nsw i32 %410, %390
  %412 = sext i32 %411 to i64
  %413 = getelementptr inbounds i8, i8* %349, i64 %412
  %414 = load i8, i8* %413, align 1
  %415 = getelementptr inbounds i8, i8* %387, i64 2
  store i8 %414, i8* %415, align 1
  %416 = getelementptr inbounds i32, i32* %353, i64 %403
  %417 = load i32, i32* %416, align 4
  %418 = add nsw i32 %417, %390
  %419 = sext i32 %418 to i64
  %420 = getelementptr inbounds i8, i8* %349, i64 %419
  %421 = load i8, i8* %420, align 1
  %422 = getelementptr inbounds i8, i8* %387, i64 1
  store i8 %421, i8* %422, align 1
  store i8 -1, i8* %387, align 1
  %423 = getelementptr inbounds i8, i8* %387, i64 4
  %424 = add nuw nsw i64 %386, 1
  %425 = icmp eq i64 %424, %363
  br i1 %425, label %364, label %385

426:                                              ; preds = %5, %5
  %427 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 86
  %428 = bitcast %struct.jpeg_color_deconverter** %427 to %struct.my_color_deconverter**
  %429 = load %struct.my_color_deconverter*, %struct.my_color_deconverter** %428, align 8
  %430 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %431 = load i32, i32* %430, align 8
  %432 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 65
  %433 = load i8*, i8** %432, align 8
  %434 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %429, i64 0, i32 1
  %435 = load i32*, i32** %434, align 8
  %436 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %429, i64 0, i32 2
  %437 = load i32*, i32** %436, align 8
  %438 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %429, i64 0, i32 3
  %439 = load i64*, i64** %438, align 8
  %440 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %429, i64 0, i32 4
  %441 = load i64*, i64** %440, align 8
  %442 = icmp sgt i32 %4, 0
  br i1 %442, label %443, label %593

443:                                              ; preds = %426
  %444 = getelementptr inbounds i8**, i8*** %1, i64 1
  %445 = getelementptr inbounds i8**, i8*** %1, i64 2
  %446 = icmp eq i32 %431, 0
  %447 = zext i32 %431 to i64
  br label %450

448:                                              ; preds = %469, %450
  %449 = icmp sgt i32 %454, 0
  br i1 %449, label %450, label %593

450:                                              ; preds = %448, %443
  %451 = phi i32 [ %4, %443 ], [ %454, %448 ]
  %452 = phi i32 [ %2, %443 ], [ %465, %448 ]
  %453 = phi i8** [ %3, %443 ], [ %466, %448 ]
  %454 = add nsw i32 %451, -1
  %455 = load i8**, i8*** %1, align 8
  %456 = zext i32 %452 to i64
  %457 = getelementptr inbounds i8*, i8** %455, i64 %456
  %458 = load i8*, i8** %457, align 8
  %459 = load i8**, i8*** %444, align 8
  %460 = getelementptr inbounds i8*, i8** %459, i64 %456
  %461 = load i8*, i8** %460, align 8
  %462 = load i8**, i8*** %445, align 8
  %463 = getelementptr inbounds i8*, i8** %462, i64 %456
  %464 = load i8*, i8** %463, align 8
  %465 = add i32 %452, 1
  %466 = getelementptr inbounds i8*, i8** %453, i64 1
  br i1 %446, label %448, label %467

467:                                              ; preds = %450
  %468 = load i8*, i8** %453, align 8
  br label %469

469:                                              ; preds = %469, %467
  %470 = phi i64 [ 0, %467 ], [ %508, %469 ]
  %471 = phi i8* [ %468, %467 ], [ %507, %469 ]
  %472 = getelementptr inbounds i8, i8* %458, i64 %470
  %473 = load i8, i8* %472, align 1
  %474 = zext i8 %473 to i32
  %475 = getelementptr inbounds i8, i8* %461, i64 %470
  %476 = load i8, i8* %475, align 1
  %477 = getelementptr inbounds i8, i8* %464, i64 %470
  %478 = load i8, i8* %477, align 1
  %479 = zext i8 %478 to i64
  %480 = getelementptr inbounds i32, i32* %435, i64 %479
  %481 = load i32, i32* %480, align 4
  %482 = add nsw i32 %481, %474
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds i8, i8* %433, i64 %483
  %485 = load i8, i8* %484, align 1
  %486 = getelementptr inbounds i8, i8* %471, i64 1
  store i8 %485, i8* %486, align 1
  %487 = zext i8 %476 to i64
  %488 = getelementptr inbounds i64, i64* %441, i64 %487
  %489 = load i64, i64* %488, align 8
  %490 = getelementptr inbounds i64, i64* %439, i64 %479
  %491 = load i64, i64* %490, align 8
  %492 = add nsw i64 %491, %489
  %493 = lshr i64 %492, 16
  %494 = trunc i64 %493 to i32
  %495 = add nsw i32 %494, %474
  %496 = sext i32 %495 to i64
  %497 = getelementptr inbounds i8, i8* %433, i64 %496
  %498 = load i8, i8* %497, align 1
  %499 = getelementptr inbounds i8, i8* %471, i64 2
  store i8 %498, i8* %499, align 1
  %500 = getelementptr inbounds i32, i32* %437, i64 %487
  %501 = load i32, i32* %500, align 4
  %502 = add nsw i32 %501, %474
  %503 = sext i32 %502 to i64
  %504 = getelementptr inbounds i8, i8* %433, i64 %503
  %505 = load i8, i8* %504, align 1
  %506 = getelementptr inbounds i8, i8* %471, i64 3
  store i8 %505, i8* %506, align 1
  store i8 -1, i8* %471, align 1
  %507 = getelementptr inbounds i8, i8* %471, i64 4
  %508 = add nuw nsw i64 %470, 1
  %509 = icmp eq i64 %508, %447
  br i1 %509, label %448, label %469

510:                                              ; preds = %5
  %511 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 86
  %512 = bitcast %struct.jpeg_color_deconverter** %511 to %struct.my_color_deconverter**
  %513 = load %struct.my_color_deconverter*, %struct.my_color_deconverter** %512, align 8
  %514 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %515 = load i32, i32* %514, align 8
  %516 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 65
  %517 = load i8*, i8** %516, align 8
  %518 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %513, i64 0, i32 1
  %519 = load i32*, i32** %518, align 8
  %520 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %513, i64 0, i32 2
  %521 = load i32*, i32** %520, align 8
  %522 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %513, i64 0, i32 3
  %523 = load i64*, i64** %522, align 8
  %524 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %513, i64 0, i32 4
  %525 = load i64*, i64** %524, align 8
  %526 = icmp sgt i32 %4, 0
  br i1 %526, label %527, label %593

527:                                              ; preds = %510
  %528 = getelementptr inbounds i8**, i8*** %1, i64 1
  %529 = getelementptr inbounds i8**, i8*** %1, i64 2
  %530 = icmp eq i32 %515, 0
  %531 = zext i32 %515 to i64
  br label %534

532:                                              ; preds = %553, %534
  %533 = icmp sgt i32 %538, 0
  br i1 %533, label %534, label %593

534:                                              ; preds = %532, %527
  %535 = phi i32 [ %4, %527 ], [ %538, %532 ]
  %536 = phi i32 [ %2, %527 ], [ %549, %532 ]
  %537 = phi i8** [ %3, %527 ], [ %550, %532 ]
  %538 = add nsw i32 %535, -1
  %539 = load i8**, i8*** %1, align 8
  %540 = zext i32 %536 to i64
  %541 = getelementptr inbounds i8*, i8** %539, i64 %540
  %542 = load i8*, i8** %541, align 8
  %543 = load i8**, i8*** %528, align 8
  %544 = getelementptr inbounds i8*, i8** %543, i64 %540
  %545 = load i8*, i8** %544, align 8
  %546 = load i8**, i8*** %529, align 8
  %547 = getelementptr inbounds i8*, i8** %546, i64 %540
  %548 = load i8*, i8** %547, align 8
  %549 = add i32 %536, 1
  %550 = getelementptr inbounds i8*, i8** %537, i64 1
  br i1 %530, label %532, label %551

551:                                              ; preds = %534
  %552 = load i8*, i8** %537, align 8
  br label %553

553:                                              ; preds = %553, %551
  %554 = phi i64 [ 0, %551 ], [ %591, %553 ]
  %555 = phi i8* [ %552, %551 ], [ %590, %553 ]
  %556 = getelementptr inbounds i8, i8* %542, i64 %554
  %557 = load i8, i8* %556, align 1
  %558 = zext i8 %557 to i32
  %559 = getelementptr inbounds i8, i8* %545, i64 %554
  %560 = load i8, i8* %559, align 1
  %561 = getelementptr inbounds i8, i8* %548, i64 %554
  %562 = load i8, i8* %561, align 1
  %563 = zext i8 %562 to i64
  %564 = getelementptr inbounds i32, i32* %519, i64 %563
  %565 = load i32, i32* %564, align 4
  %566 = add nsw i32 %565, %558
  %567 = sext i32 %566 to i64
  %568 = getelementptr inbounds i8, i8* %517, i64 %567
  %569 = load i8, i8* %568, align 1
  store i8 %569, i8* %555, align 1
  %570 = zext i8 %560 to i64
  %571 = getelementptr inbounds i64, i64* %525, i64 %570
  %572 = load i64, i64* %571, align 8
  %573 = getelementptr inbounds i64, i64* %523, i64 %563
  %574 = load i64, i64* %573, align 8
  %575 = add nsw i64 %574, %572
  %576 = lshr i64 %575, 16
  %577 = trunc i64 %576 to i32
  %578 = add nsw i32 %577, %558
  %579 = sext i32 %578 to i64
  %580 = getelementptr inbounds i8, i8* %517, i64 %579
  %581 = load i8, i8* %580, align 1
  %582 = getelementptr inbounds i8, i8* %555, i64 1
  store i8 %581, i8* %582, align 1
  %583 = getelementptr inbounds i32, i32* %521, i64 %570
  %584 = load i32, i32* %583, align 4
  %585 = add nsw i32 %584, %558
  %586 = sext i32 %585 to i64
  %587 = getelementptr inbounds i8, i8* %517, i64 %586
  %588 = load i8, i8* %587, align 1
  %589 = getelementptr inbounds i8, i8* %555, i64 2
  store i8 %588, i8* %589, align 1
  %590 = getelementptr inbounds i8, i8* %555, i64 3
  %591 = add nuw nsw i64 %554, 1
  %592 = icmp eq i64 %591, %531
  br i1 %592, label %532, label %553

593:                                              ; preds = %448, %364, %280, %197, %113, %30, %532, %510, %426, %342, %258, %175, %91, %8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @gray_rgb_convert(%struct.jpeg_decompress_struct* nocapture readonly, i8*** nocapture readonly, i32, i8** nocapture readonly, i32) #2 {
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 11
  %7 = load i32, i32* %6, align 8
  switch i32 %7, label %460 [
    i32 6, label %8
    i32 7, label %80
    i32 12, label %80
    i32 8, label %157
    i32 9, label %229
    i32 13, label %229
    i32 10, label %306
    i32 14, label %306
    i32 11, label %383
    i32 15, label %383
  ]

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %10 = load i32, i32* %9, align 8
  %11 = icmp sgt i32 %4, 0
  br i1 %11, label %12, label %532

12:                                               ; preds = %8
  %13 = icmp eq i32 %10, 0
  %14 = zext i32 %10 to i64
  %15 = add nsw i64 %14, -1
  %16 = and i64 %14, 3
  %17 = icmp ult i64 %15, 3
  %18 = sub nsw i64 %14, %16
  %19 = icmp eq i64 %16, 0
  br label %37

20:                                               ; preds = %50, %48
  %21 = phi i64 [ 0, %48 ], [ %77, %50 ]
  %22 = phi i8* [ %49, %48 ], [ %76, %50 ]
  br i1 %19, label %35, label %23

23:                                               ; preds = %20, %23
  %24 = phi i64 [ %32, %23 ], [ %21, %20 ]
  %25 = phi i8* [ %31, %23 ], [ %22, %20 ]
  %26 = phi i64 [ %33, %23 ], [ %16, %20 ]
  %27 = getelementptr inbounds i8, i8* %46, i64 %24
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds i8, i8* %25, i64 2
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %28, i8* %30, align 1
  store i8 %28, i8* %25, align 1
  %31 = getelementptr inbounds i8, i8* %25, i64 3
  %32 = add nuw nsw i64 %24, 1
  %33 = add i64 %26, -1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %23, !llvm.loop !2

35:                                               ; preds = %20, %23, %37
  %36 = icmp sgt i32 %41, 0
  br i1 %36, label %37, label %532

37:                                               ; preds = %35, %12
  %38 = phi i32 [ %4, %12 ], [ %41, %35 ]
  %39 = phi i8** [ %3, %12 ], [ %47, %35 ]
  %40 = phi i32 [ %2, %12 ], [ %43, %35 ]
  %41 = add nsw i32 %38, -1
  %42 = load i8**, i8*** %1, align 8
  %43 = add i32 %40, 1
  %44 = zext i32 %40 to i64
  %45 = getelementptr inbounds i8*, i8** %42, i64 %44
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr inbounds i8*, i8** %39, i64 1
  br i1 %13, label %35, label %48

48:                                               ; preds = %37
  %49 = load i8*, i8** %39, align 8
  br i1 %17, label %20, label %50

50:                                               ; preds = %48, %50
  %51 = phi i64 [ %77, %50 ], [ 0, %48 ]
  %52 = phi i8* [ %76, %50 ], [ %49, %48 ]
  %53 = phi i64 [ %78, %50 ], [ %18, %48 ]
  %54 = getelementptr inbounds i8, i8* %46, i64 %51
  %55 = load i8, i8* %54, align 1
  %56 = getelementptr inbounds i8, i8* %52, i64 2
  store i8 %55, i8* %56, align 1
  %57 = getelementptr inbounds i8, i8* %52, i64 1
  store i8 %55, i8* %57, align 1
  store i8 %55, i8* %52, align 1
  %58 = getelementptr inbounds i8, i8* %52, i64 3
  %59 = or i64 %51, 1
  %60 = getelementptr inbounds i8, i8* %46, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = getelementptr inbounds i8, i8* %52, i64 5
  store i8 %61, i8* %62, align 1
  %63 = getelementptr inbounds i8, i8* %52, i64 4
  store i8 %61, i8* %63, align 1
  store i8 %61, i8* %58, align 1
  %64 = getelementptr inbounds i8, i8* %52, i64 6
  %65 = or i64 %51, 2
  %66 = getelementptr inbounds i8, i8* %46, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = getelementptr inbounds i8, i8* %52, i64 8
  store i8 %67, i8* %68, align 1
  %69 = getelementptr inbounds i8, i8* %52, i64 7
  store i8 %67, i8* %69, align 1
  store i8 %67, i8* %64, align 1
  %70 = getelementptr inbounds i8, i8* %52, i64 9
  %71 = or i64 %51, 3
  %72 = getelementptr inbounds i8, i8* %46, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = getelementptr inbounds i8, i8* %52, i64 11
  store i8 %73, i8* %74, align 1
  %75 = getelementptr inbounds i8, i8* %52, i64 10
  store i8 %73, i8* %75, align 1
  store i8 %73, i8* %70, align 1
  %76 = getelementptr inbounds i8, i8* %52, i64 12
  %77 = add nuw nsw i64 %51, 4
  %78 = add i64 %53, -4
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %20, label %50

80:                                               ; preds = %5, %5
  %81 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %82 = load i32, i32* %81, align 8
  %83 = icmp sgt i32 %4, 0
  br i1 %83, label %84, label %532

84:                                               ; preds = %80
  %85 = icmp eq i32 %82, 0
  %86 = zext i32 %82 to i64
  %87 = add nsw i64 %86, -1
  %88 = and i64 %86, 3
  %89 = icmp ult i64 %87, 3
  %90 = sub nsw i64 %86, %88
  %91 = icmp eq i64 %88, 0
  br label %110

92:                                               ; preds = %123, %121
  %93 = phi i64 [ 0, %121 ], [ %154, %123 ]
  %94 = phi i8* [ %122, %121 ], [ %153, %123 ]
  br i1 %91, label %108, label %95

95:                                               ; preds = %92, %95
  %96 = phi i64 [ %105, %95 ], [ %93, %92 ]
  %97 = phi i8* [ %104, %95 ], [ %94, %92 ]
  %98 = phi i64 [ %106, %95 ], [ %88, %92 ]
  %99 = getelementptr inbounds i8, i8* %119, i64 %96
  %100 = load i8, i8* %99, align 1
  %101 = getelementptr inbounds i8, i8* %97, i64 2
  store i8 %100, i8* %101, align 1
  %102 = getelementptr inbounds i8, i8* %97, i64 1
  store i8 %100, i8* %102, align 1
  store i8 %100, i8* %97, align 1
  %103 = getelementptr inbounds i8, i8* %97, i64 3
  store i8 -1, i8* %103, align 1
  %104 = getelementptr inbounds i8, i8* %97, i64 4
  %105 = add nuw nsw i64 %96, 1
  %106 = add i64 %98, -1
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %108, label %95, !llvm.loop !4

108:                                              ; preds = %92, %95, %110
  %109 = icmp sgt i32 %114, 0
  br i1 %109, label %110, label %532

110:                                              ; preds = %108, %84
  %111 = phi i32 [ %4, %84 ], [ %114, %108 ]
  %112 = phi i8** [ %3, %84 ], [ %120, %108 ]
  %113 = phi i32 [ %2, %84 ], [ %116, %108 ]
  %114 = add nsw i32 %111, -1
  %115 = load i8**, i8*** %1, align 8
  %116 = add i32 %113, 1
  %117 = zext i32 %113 to i64
  %118 = getelementptr inbounds i8*, i8** %115, i64 %117
  %119 = load i8*, i8** %118, align 8
  %120 = getelementptr inbounds i8*, i8** %112, i64 1
  br i1 %85, label %108, label %121

121:                                              ; preds = %110
  %122 = load i8*, i8** %112, align 8
  br i1 %89, label %92, label %123

123:                                              ; preds = %121, %123
  %124 = phi i64 [ %154, %123 ], [ 0, %121 ]
  %125 = phi i8* [ %153, %123 ], [ %122, %121 ]
  %126 = phi i64 [ %155, %123 ], [ %90, %121 ]
  %127 = getelementptr inbounds i8, i8* %119, i64 %124
  %128 = load i8, i8* %127, align 1
  %129 = getelementptr inbounds i8, i8* %125, i64 2
  store i8 %128, i8* %129, align 1
  %130 = getelementptr inbounds i8, i8* %125, i64 1
  store i8 %128, i8* %130, align 1
  store i8 %128, i8* %125, align 1
  %131 = getelementptr inbounds i8, i8* %125, i64 3
  store i8 -1, i8* %131, align 1
  %132 = getelementptr inbounds i8, i8* %125, i64 4
  %133 = or i64 %124, 1
  %134 = getelementptr inbounds i8, i8* %119, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = getelementptr inbounds i8, i8* %125, i64 6
  store i8 %135, i8* %136, align 1
  %137 = getelementptr inbounds i8, i8* %125, i64 5
  store i8 %135, i8* %137, align 1
  store i8 %135, i8* %132, align 1
  %138 = getelementptr inbounds i8, i8* %125, i64 7
  store i8 -1, i8* %138, align 1
  %139 = getelementptr inbounds i8, i8* %125, i64 8
  %140 = or i64 %124, 2
  %141 = getelementptr inbounds i8, i8* %119, i64 %140
  %142 = load i8, i8* %141, align 1
  %143 = getelementptr inbounds i8, i8* %125, i64 10
  store i8 %142, i8* %143, align 1
  %144 = getelementptr inbounds i8, i8* %125, i64 9
  store i8 %142, i8* %144, align 1
  store i8 %142, i8* %139, align 1
  %145 = getelementptr inbounds i8, i8* %125, i64 11
  store i8 -1, i8* %145, align 1
  %146 = getelementptr inbounds i8, i8* %125, i64 12
  %147 = or i64 %124, 3
  %148 = getelementptr inbounds i8, i8* %119, i64 %147
  %149 = load i8, i8* %148, align 1
  %150 = getelementptr inbounds i8, i8* %125, i64 14
  store i8 %149, i8* %150, align 1
  %151 = getelementptr inbounds i8, i8* %125, i64 13
  store i8 %149, i8* %151, align 1
  store i8 %149, i8* %146, align 1
  %152 = getelementptr inbounds i8, i8* %125, i64 15
  store i8 -1, i8* %152, align 1
  %153 = getelementptr inbounds i8, i8* %125, i64 16
  %154 = add nuw nsw i64 %124, 4
  %155 = add i64 %126, -4
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %92, label %123

157:                                              ; preds = %5
  %158 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %159 = load i32, i32* %158, align 8
  %160 = icmp sgt i32 %4, 0
  br i1 %160, label %161, label %532

161:                                              ; preds = %157
  %162 = icmp eq i32 %159, 0
  %163 = zext i32 %159 to i64
  %164 = add nsw i64 %163, -1
  %165 = and i64 %163, 3
  %166 = icmp ult i64 %164, 3
  %167 = sub nsw i64 %163, %165
  %168 = icmp eq i64 %165, 0
  br label %186

169:                                              ; preds = %199, %197
  %170 = phi i64 [ 0, %197 ], [ %226, %199 ]
  %171 = phi i8* [ %198, %197 ], [ %225, %199 ]
  br i1 %168, label %184, label %172

172:                                              ; preds = %169, %172
  %173 = phi i64 [ %181, %172 ], [ %170, %169 ]
  %174 = phi i8* [ %180, %172 ], [ %171, %169 ]
  %175 = phi i64 [ %182, %172 ], [ %165, %169 ]
  %176 = getelementptr inbounds i8, i8* %195, i64 %173
  %177 = load i8, i8* %176, align 1
  store i8 %177, i8* %174, align 1
  %178 = getelementptr inbounds i8, i8* %174, i64 1
  store i8 %177, i8* %178, align 1
  %179 = getelementptr inbounds i8, i8* %174, i64 2
  store i8 %177, i8* %179, align 1
  %180 = getelementptr inbounds i8, i8* %174, i64 3
  %181 = add nuw nsw i64 %173, 1
  %182 = add i64 %175, -1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %172, !llvm.loop !5

184:                                              ; preds = %169, %172, %186
  %185 = icmp sgt i32 %190, 0
  br i1 %185, label %186, label %532

186:                                              ; preds = %184, %161
  %187 = phi i32 [ %4, %161 ], [ %190, %184 ]
  %188 = phi i8** [ %3, %161 ], [ %196, %184 ]
  %189 = phi i32 [ %2, %161 ], [ %192, %184 ]
  %190 = add nsw i32 %187, -1
  %191 = load i8**, i8*** %1, align 8
  %192 = add i32 %189, 1
  %193 = zext i32 %189 to i64
  %194 = getelementptr inbounds i8*, i8** %191, i64 %193
  %195 = load i8*, i8** %194, align 8
  %196 = getelementptr inbounds i8*, i8** %188, i64 1
  br i1 %162, label %184, label %197

197:                                              ; preds = %186
  %198 = load i8*, i8** %188, align 8
  br i1 %166, label %169, label %199

199:                                              ; preds = %197, %199
  %200 = phi i64 [ %226, %199 ], [ 0, %197 ]
  %201 = phi i8* [ %225, %199 ], [ %198, %197 ]
  %202 = phi i64 [ %227, %199 ], [ %167, %197 ]
  %203 = getelementptr inbounds i8, i8* %195, i64 %200
  %204 = load i8, i8* %203, align 1
  store i8 %204, i8* %201, align 1
  %205 = getelementptr inbounds i8, i8* %201, i64 1
  store i8 %204, i8* %205, align 1
  %206 = getelementptr inbounds i8, i8* %201, i64 2
  store i8 %204, i8* %206, align 1
  %207 = getelementptr inbounds i8, i8* %201, i64 3
  %208 = or i64 %200, 1
  %209 = getelementptr inbounds i8, i8* %195, i64 %208
  %210 = load i8, i8* %209, align 1
  store i8 %210, i8* %207, align 1
  %211 = getelementptr inbounds i8, i8* %201, i64 4
  store i8 %210, i8* %211, align 1
  %212 = getelementptr inbounds i8, i8* %201, i64 5
  store i8 %210, i8* %212, align 1
  %213 = getelementptr inbounds i8, i8* %201, i64 6
  %214 = or i64 %200, 2
  %215 = getelementptr inbounds i8, i8* %195, i64 %214
  %216 = load i8, i8* %215, align 1
  store i8 %216, i8* %213, align 1
  %217 = getelementptr inbounds i8, i8* %201, i64 7
  store i8 %216, i8* %217, align 1
  %218 = getelementptr inbounds i8, i8* %201, i64 8
  store i8 %216, i8* %218, align 1
  %219 = getelementptr inbounds i8, i8* %201, i64 9
  %220 = or i64 %200, 3
  %221 = getelementptr inbounds i8, i8* %195, i64 %220
  %222 = load i8, i8* %221, align 1
  store i8 %222, i8* %219, align 1
  %223 = getelementptr inbounds i8, i8* %201, i64 10
  store i8 %222, i8* %223, align 1
  %224 = getelementptr inbounds i8, i8* %201, i64 11
  store i8 %222, i8* %224, align 1
  %225 = getelementptr inbounds i8, i8* %201, i64 12
  %226 = add nuw nsw i64 %200, 4
  %227 = add i64 %202, -4
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %169, label %199

229:                                              ; preds = %5, %5
  %230 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %231 = load i32, i32* %230, align 8
  %232 = icmp sgt i32 %4, 0
  br i1 %232, label %233, label %532

233:                                              ; preds = %229
  %234 = icmp eq i32 %231, 0
  %235 = zext i32 %231 to i64
  %236 = add nsw i64 %235, -1
  %237 = and i64 %235, 3
  %238 = icmp ult i64 %236, 3
  %239 = sub nsw i64 %235, %237
  %240 = icmp eq i64 %237, 0
  br label %259

241:                                              ; preds = %272, %270
  %242 = phi i64 [ 0, %270 ], [ %303, %272 ]
  %243 = phi i8* [ %271, %270 ], [ %302, %272 ]
  br i1 %240, label %257, label %244

244:                                              ; preds = %241, %244
  %245 = phi i64 [ %254, %244 ], [ %242, %241 ]
  %246 = phi i8* [ %253, %244 ], [ %243, %241 ]
  %247 = phi i64 [ %255, %244 ], [ %237, %241 ]
  %248 = getelementptr inbounds i8, i8* %268, i64 %245
  %249 = load i8, i8* %248, align 1
  store i8 %249, i8* %246, align 1
  %250 = getelementptr inbounds i8, i8* %246, i64 1
  store i8 %249, i8* %250, align 1
  %251 = getelementptr inbounds i8, i8* %246, i64 2
  store i8 %249, i8* %251, align 1
  %252 = getelementptr inbounds i8, i8* %246, i64 3
  store i8 -1, i8* %252, align 1
  %253 = getelementptr inbounds i8, i8* %246, i64 4
  %254 = add nuw nsw i64 %245, 1
  %255 = add i64 %247, -1
  %256 = icmp eq i64 %255, 0
  br i1 %256, label %257, label %244, !llvm.loop !6

257:                                              ; preds = %241, %244, %259
  %258 = icmp sgt i32 %263, 0
  br i1 %258, label %259, label %532

259:                                              ; preds = %257, %233
  %260 = phi i32 [ %4, %233 ], [ %263, %257 ]
  %261 = phi i8** [ %3, %233 ], [ %269, %257 ]
  %262 = phi i32 [ %2, %233 ], [ %265, %257 ]
  %263 = add nsw i32 %260, -1
  %264 = load i8**, i8*** %1, align 8
  %265 = add i32 %262, 1
  %266 = zext i32 %262 to i64
  %267 = getelementptr inbounds i8*, i8** %264, i64 %266
  %268 = load i8*, i8** %267, align 8
  %269 = getelementptr inbounds i8*, i8** %261, i64 1
  br i1 %234, label %257, label %270

270:                                              ; preds = %259
  %271 = load i8*, i8** %261, align 8
  br i1 %238, label %241, label %272

272:                                              ; preds = %270, %272
  %273 = phi i64 [ %303, %272 ], [ 0, %270 ]
  %274 = phi i8* [ %302, %272 ], [ %271, %270 ]
  %275 = phi i64 [ %304, %272 ], [ %239, %270 ]
  %276 = getelementptr inbounds i8, i8* %268, i64 %273
  %277 = load i8, i8* %276, align 1
  store i8 %277, i8* %274, align 1
  %278 = getelementptr inbounds i8, i8* %274, i64 1
  store i8 %277, i8* %278, align 1
  %279 = getelementptr inbounds i8, i8* %274, i64 2
  store i8 %277, i8* %279, align 1
  %280 = getelementptr inbounds i8, i8* %274, i64 3
  store i8 -1, i8* %280, align 1
  %281 = getelementptr inbounds i8, i8* %274, i64 4
  %282 = or i64 %273, 1
  %283 = getelementptr inbounds i8, i8* %268, i64 %282
  %284 = load i8, i8* %283, align 1
  store i8 %284, i8* %281, align 1
  %285 = getelementptr inbounds i8, i8* %274, i64 5
  store i8 %284, i8* %285, align 1
  %286 = getelementptr inbounds i8, i8* %274, i64 6
  store i8 %284, i8* %286, align 1
  %287 = getelementptr inbounds i8, i8* %274, i64 7
  store i8 -1, i8* %287, align 1
  %288 = getelementptr inbounds i8, i8* %274, i64 8
  %289 = or i64 %273, 2
  %290 = getelementptr inbounds i8, i8* %268, i64 %289
  %291 = load i8, i8* %290, align 1
  store i8 %291, i8* %288, align 1
  %292 = getelementptr inbounds i8, i8* %274, i64 9
  store i8 %291, i8* %292, align 1
  %293 = getelementptr inbounds i8, i8* %274, i64 10
  store i8 %291, i8* %293, align 1
  %294 = getelementptr inbounds i8, i8* %274, i64 11
  store i8 -1, i8* %294, align 1
  %295 = getelementptr inbounds i8, i8* %274, i64 12
  %296 = or i64 %273, 3
  %297 = getelementptr inbounds i8, i8* %268, i64 %296
  %298 = load i8, i8* %297, align 1
  store i8 %298, i8* %295, align 1
  %299 = getelementptr inbounds i8, i8* %274, i64 13
  store i8 %298, i8* %299, align 1
  %300 = getelementptr inbounds i8, i8* %274, i64 14
  store i8 %298, i8* %300, align 1
  %301 = getelementptr inbounds i8, i8* %274, i64 15
  store i8 -1, i8* %301, align 1
  %302 = getelementptr inbounds i8, i8* %274, i64 16
  %303 = add nuw nsw i64 %273, 4
  %304 = add i64 %275, -4
  %305 = icmp eq i64 %304, 0
  br i1 %305, label %241, label %272

306:                                              ; preds = %5, %5
  %307 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %308 = load i32, i32* %307, align 8
  %309 = icmp sgt i32 %4, 0
  br i1 %309, label %310, label %532

310:                                              ; preds = %306
  %311 = icmp eq i32 %308, 0
  %312 = zext i32 %308 to i64
  %313 = add nsw i64 %312, -1
  %314 = and i64 %312, 3
  %315 = icmp ult i64 %313, 3
  %316 = sub nsw i64 %312, %314
  %317 = icmp eq i64 %314, 0
  br label %336

318:                                              ; preds = %349, %347
  %319 = phi i64 [ 0, %347 ], [ %380, %349 ]
  %320 = phi i8* [ %348, %347 ], [ %379, %349 ]
  br i1 %317, label %334, label %321

321:                                              ; preds = %318, %321
  %322 = phi i64 [ %331, %321 ], [ %319, %318 ]
  %323 = phi i8* [ %330, %321 ], [ %320, %318 ]
  %324 = phi i64 [ %332, %321 ], [ %314, %318 ]
  %325 = getelementptr inbounds i8, i8* %345, i64 %322
  %326 = load i8, i8* %325, align 1
  %327 = getelementptr inbounds i8, i8* %323, i64 1
  store i8 %326, i8* %327, align 1
  %328 = getelementptr inbounds i8, i8* %323, i64 2
  store i8 %326, i8* %328, align 1
  %329 = getelementptr inbounds i8, i8* %323, i64 3
  store i8 %326, i8* %329, align 1
  store i8 -1, i8* %323, align 1
  %330 = getelementptr inbounds i8, i8* %323, i64 4
  %331 = add nuw nsw i64 %322, 1
  %332 = add i64 %324, -1
  %333 = icmp eq i64 %332, 0
  br i1 %333, label %334, label %321, !llvm.loop !7

334:                                              ; preds = %318, %321, %336
  %335 = icmp sgt i32 %340, 0
  br i1 %335, label %336, label %532

336:                                              ; preds = %334, %310
  %337 = phi i32 [ %4, %310 ], [ %340, %334 ]
  %338 = phi i8** [ %3, %310 ], [ %346, %334 ]
  %339 = phi i32 [ %2, %310 ], [ %342, %334 ]
  %340 = add nsw i32 %337, -1
  %341 = load i8**, i8*** %1, align 8
  %342 = add i32 %339, 1
  %343 = zext i32 %339 to i64
  %344 = getelementptr inbounds i8*, i8** %341, i64 %343
  %345 = load i8*, i8** %344, align 8
  %346 = getelementptr inbounds i8*, i8** %338, i64 1
  br i1 %311, label %334, label %347

347:                                              ; preds = %336
  %348 = load i8*, i8** %338, align 8
  br i1 %315, label %318, label %349

349:                                              ; preds = %347, %349
  %350 = phi i64 [ %380, %349 ], [ 0, %347 ]
  %351 = phi i8* [ %379, %349 ], [ %348, %347 ]
  %352 = phi i64 [ %381, %349 ], [ %316, %347 ]
  %353 = getelementptr inbounds i8, i8* %345, i64 %350
  %354 = load i8, i8* %353, align 1
  %355 = getelementptr inbounds i8, i8* %351, i64 1
  store i8 %354, i8* %355, align 1
  %356 = getelementptr inbounds i8, i8* %351, i64 2
  store i8 %354, i8* %356, align 1
  %357 = getelementptr inbounds i8, i8* %351, i64 3
  store i8 %354, i8* %357, align 1
  store i8 -1, i8* %351, align 1
  %358 = getelementptr inbounds i8, i8* %351, i64 4
  %359 = or i64 %350, 1
  %360 = getelementptr inbounds i8, i8* %345, i64 %359
  %361 = load i8, i8* %360, align 1
  %362 = getelementptr inbounds i8, i8* %351, i64 5
  store i8 %361, i8* %362, align 1
  %363 = getelementptr inbounds i8, i8* %351, i64 6
  store i8 %361, i8* %363, align 1
  %364 = getelementptr inbounds i8, i8* %351, i64 7
  store i8 %361, i8* %364, align 1
  store i8 -1, i8* %358, align 1
  %365 = getelementptr inbounds i8, i8* %351, i64 8
  %366 = or i64 %350, 2
  %367 = getelementptr inbounds i8, i8* %345, i64 %366
  %368 = load i8, i8* %367, align 1
  %369 = getelementptr inbounds i8, i8* %351, i64 9
  store i8 %368, i8* %369, align 1
  %370 = getelementptr inbounds i8, i8* %351, i64 10
  store i8 %368, i8* %370, align 1
  %371 = getelementptr inbounds i8, i8* %351, i64 11
  store i8 %368, i8* %371, align 1
  store i8 -1, i8* %365, align 1
  %372 = getelementptr inbounds i8, i8* %351, i64 12
  %373 = or i64 %350, 3
  %374 = getelementptr inbounds i8, i8* %345, i64 %373
  %375 = load i8, i8* %374, align 1
  %376 = getelementptr inbounds i8, i8* %351, i64 13
  store i8 %375, i8* %376, align 1
  %377 = getelementptr inbounds i8, i8* %351, i64 14
  store i8 %375, i8* %377, align 1
  %378 = getelementptr inbounds i8, i8* %351, i64 15
  store i8 %375, i8* %378, align 1
  store i8 -1, i8* %372, align 1
  %379 = getelementptr inbounds i8, i8* %351, i64 16
  %380 = add nuw nsw i64 %350, 4
  %381 = add i64 %352, -4
  %382 = icmp eq i64 %381, 0
  br i1 %382, label %318, label %349

383:                                              ; preds = %5, %5
  %384 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %385 = load i32, i32* %384, align 8
  %386 = icmp sgt i32 %4, 0
  br i1 %386, label %387, label %532

387:                                              ; preds = %383
  %388 = icmp eq i32 %385, 0
  %389 = zext i32 %385 to i64
  %390 = add nsw i64 %389, -1
  %391 = and i64 %389, 3
  %392 = icmp ult i64 %390, 3
  %393 = sub nsw i64 %389, %391
  %394 = icmp eq i64 %391, 0
  br label %413

395:                                              ; preds = %426, %424
  %396 = phi i64 [ 0, %424 ], [ %457, %426 ]
  %397 = phi i8* [ %425, %424 ], [ %456, %426 ]
  br i1 %394, label %411, label %398

398:                                              ; preds = %395, %398
  %399 = phi i64 [ %408, %398 ], [ %396, %395 ]
  %400 = phi i8* [ %407, %398 ], [ %397, %395 ]
  %401 = phi i64 [ %409, %398 ], [ %391, %395 ]
  %402 = getelementptr inbounds i8, i8* %422, i64 %399
  %403 = load i8, i8* %402, align 1
  %404 = getelementptr inbounds i8, i8* %400, i64 3
  store i8 %403, i8* %404, align 1
  %405 = getelementptr inbounds i8, i8* %400, i64 2
  store i8 %403, i8* %405, align 1
  %406 = getelementptr inbounds i8, i8* %400, i64 1
  store i8 %403, i8* %406, align 1
  store i8 -1, i8* %400, align 1
  %407 = getelementptr inbounds i8, i8* %400, i64 4
  %408 = add nuw nsw i64 %399, 1
  %409 = add i64 %401, -1
  %410 = icmp eq i64 %409, 0
  br i1 %410, label %411, label %398, !llvm.loop !8

411:                                              ; preds = %395, %398, %413
  %412 = icmp sgt i32 %417, 0
  br i1 %412, label %413, label %532

413:                                              ; preds = %411, %387
  %414 = phi i32 [ %4, %387 ], [ %417, %411 ]
  %415 = phi i8** [ %3, %387 ], [ %423, %411 ]
  %416 = phi i32 [ %2, %387 ], [ %419, %411 ]
  %417 = add nsw i32 %414, -1
  %418 = load i8**, i8*** %1, align 8
  %419 = add i32 %416, 1
  %420 = zext i32 %416 to i64
  %421 = getelementptr inbounds i8*, i8** %418, i64 %420
  %422 = load i8*, i8** %421, align 8
  %423 = getelementptr inbounds i8*, i8** %415, i64 1
  br i1 %388, label %411, label %424

424:                                              ; preds = %413
  %425 = load i8*, i8** %415, align 8
  br i1 %392, label %395, label %426

426:                                              ; preds = %424, %426
  %427 = phi i64 [ %457, %426 ], [ 0, %424 ]
  %428 = phi i8* [ %456, %426 ], [ %425, %424 ]
  %429 = phi i64 [ %458, %426 ], [ %393, %424 ]
  %430 = getelementptr inbounds i8, i8* %422, i64 %427
  %431 = load i8, i8* %430, align 1
  %432 = getelementptr inbounds i8, i8* %428, i64 3
  store i8 %431, i8* %432, align 1
  %433 = getelementptr inbounds i8, i8* %428, i64 2
  store i8 %431, i8* %433, align 1
  %434 = getelementptr inbounds i8, i8* %428, i64 1
  store i8 %431, i8* %434, align 1
  store i8 -1, i8* %428, align 1
  %435 = getelementptr inbounds i8, i8* %428, i64 4
  %436 = or i64 %427, 1
  %437 = getelementptr inbounds i8, i8* %422, i64 %436
  %438 = load i8, i8* %437, align 1
  %439 = getelementptr inbounds i8, i8* %428, i64 7
  store i8 %438, i8* %439, align 1
  %440 = getelementptr inbounds i8, i8* %428, i64 6
  store i8 %438, i8* %440, align 1
  %441 = getelementptr inbounds i8, i8* %428, i64 5
  store i8 %438, i8* %441, align 1
  store i8 -1, i8* %435, align 1
  %442 = getelementptr inbounds i8, i8* %428, i64 8
  %443 = or i64 %427, 2
  %444 = getelementptr inbounds i8, i8* %422, i64 %443
  %445 = load i8, i8* %444, align 1
  %446 = getelementptr inbounds i8, i8* %428, i64 11
  store i8 %445, i8* %446, align 1
  %447 = getelementptr inbounds i8, i8* %428, i64 10
  store i8 %445, i8* %447, align 1
  %448 = getelementptr inbounds i8, i8* %428, i64 9
  store i8 %445, i8* %448, align 1
  store i8 -1, i8* %442, align 1
  %449 = getelementptr inbounds i8, i8* %428, i64 12
  %450 = or i64 %427, 3
  %451 = getelementptr inbounds i8, i8* %422, i64 %450
  %452 = load i8, i8* %451, align 1
  %453 = getelementptr inbounds i8, i8* %428, i64 15
  store i8 %452, i8* %453, align 1
  %454 = getelementptr inbounds i8, i8* %428, i64 14
  store i8 %452, i8* %454, align 1
  %455 = getelementptr inbounds i8, i8* %428, i64 13
  store i8 %452, i8* %455, align 1
  store i8 -1, i8* %449, align 1
  %456 = getelementptr inbounds i8, i8* %428, i64 16
  %457 = add nuw nsw i64 %427, 4
  %458 = add i64 %429, -4
  %459 = icmp eq i64 %458, 0
  br i1 %459, label %395, label %426

460:                                              ; preds = %5
  %461 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %462 = load i32, i32* %461, align 8
  %463 = icmp sgt i32 %4, 0
  br i1 %463, label %464, label %532

464:                                              ; preds = %460
  %465 = icmp eq i32 %462, 0
  %466 = zext i32 %462 to i64
  %467 = add nsw i64 %466, -1
  %468 = and i64 %466, 3
  %469 = icmp ult i64 %467, 3
  %470 = sub nsw i64 %466, %468
  %471 = icmp eq i64 %468, 0
  br label %489

472:                                              ; preds = %502, %500
  %473 = phi i64 [ 0, %500 ], [ %529, %502 ]
  %474 = phi i8* [ %501, %500 ], [ %528, %502 ]
  br i1 %471, label %487, label %475

475:                                              ; preds = %472, %475
  %476 = phi i64 [ %484, %475 ], [ %473, %472 ]
  %477 = phi i8* [ %483, %475 ], [ %474, %472 ]
  %478 = phi i64 [ %485, %475 ], [ %468, %472 ]
  %479 = getelementptr inbounds i8, i8* %498, i64 %476
  %480 = load i8, i8* %479, align 1
  %481 = getelementptr inbounds i8, i8* %477, i64 2
  store i8 %480, i8* %481, align 1
  %482 = getelementptr inbounds i8, i8* %477, i64 1
  store i8 %480, i8* %482, align 1
  store i8 %480, i8* %477, align 1
  %483 = getelementptr inbounds i8, i8* %477, i64 3
  %484 = add nuw nsw i64 %476, 1
  %485 = add i64 %478, -1
  %486 = icmp eq i64 %485, 0
  br i1 %486, label %487, label %475, !llvm.loop !9

487:                                              ; preds = %472, %475, %489
  %488 = icmp sgt i32 %493, 0
  br i1 %488, label %489, label %532

489:                                              ; preds = %487, %464
  %490 = phi i32 [ %4, %464 ], [ %493, %487 ]
  %491 = phi i8** [ %3, %464 ], [ %499, %487 ]
  %492 = phi i32 [ %2, %464 ], [ %495, %487 ]
  %493 = add nsw i32 %490, -1
  %494 = load i8**, i8*** %1, align 8
  %495 = add i32 %492, 1
  %496 = zext i32 %492 to i64
  %497 = getelementptr inbounds i8*, i8** %494, i64 %496
  %498 = load i8*, i8** %497, align 8
  %499 = getelementptr inbounds i8*, i8** %491, i64 1
  br i1 %465, label %487, label %500

500:                                              ; preds = %489
  %501 = load i8*, i8** %491, align 8
  br i1 %469, label %472, label %502

502:                                              ; preds = %500, %502
  %503 = phi i64 [ %529, %502 ], [ 0, %500 ]
  %504 = phi i8* [ %528, %502 ], [ %501, %500 ]
  %505 = phi i64 [ %530, %502 ], [ %470, %500 ]
  %506 = getelementptr inbounds i8, i8* %498, i64 %503
  %507 = load i8, i8* %506, align 1
  %508 = getelementptr inbounds i8, i8* %504, i64 2
  store i8 %507, i8* %508, align 1
  %509 = getelementptr inbounds i8, i8* %504, i64 1
  store i8 %507, i8* %509, align 1
  store i8 %507, i8* %504, align 1
  %510 = getelementptr inbounds i8, i8* %504, i64 3
  %511 = or i64 %503, 1
  %512 = getelementptr inbounds i8, i8* %498, i64 %511
  %513 = load i8, i8* %512, align 1
  %514 = getelementptr inbounds i8, i8* %504, i64 5
  store i8 %513, i8* %514, align 1
  %515 = getelementptr inbounds i8, i8* %504, i64 4
  store i8 %513, i8* %515, align 1
  store i8 %513, i8* %510, align 1
  %516 = getelementptr inbounds i8, i8* %504, i64 6
  %517 = or i64 %503, 2
  %518 = getelementptr inbounds i8, i8* %498, i64 %517
  %519 = load i8, i8* %518, align 1
  %520 = getelementptr inbounds i8, i8* %504, i64 8
  store i8 %519, i8* %520, align 1
  %521 = getelementptr inbounds i8, i8* %504, i64 7
  store i8 %519, i8* %521, align 1
  store i8 %519, i8* %516, align 1
  %522 = getelementptr inbounds i8, i8* %504, i64 9
  %523 = or i64 %503, 3
  %524 = getelementptr inbounds i8, i8* %498, i64 %523
  %525 = load i8, i8* %524, align 1
  %526 = getelementptr inbounds i8, i8* %504, i64 11
  store i8 %525, i8* %526, align 1
  %527 = getelementptr inbounds i8, i8* %504, i64 10
  store i8 %525, i8* %527, align 1
  store i8 %525, i8* %522, align 1
  %528 = getelementptr inbounds i8, i8* %504, i64 12
  %529 = add nuw nsw i64 %503, 4
  %530 = add i64 %505, -4
  %531 = icmp eq i64 %530, 0
  br i1 %531, label %472, label %502

532:                                              ; preds = %411, %334, %257, %184, %108, %35, %487, %460, %383, %306, %229, %157, %80, %8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @null_convert(%struct.jpeg_decompress_struct* nocapture readonly, i8*** nocapture readonly, i32, i8** nocapture readonly, i32) #2 {
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %9 = load i32, i32* %8, align 8
  switch i32 %7, label %45 [
    i32 3, label %34
    i32 4, label %10
  ]

10:                                               ; preds = %5
  %11 = icmp sgt i32 %4, 0
  br i1 %11, label %12, label %343

12:                                               ; preds = %10
  %13 = getelementptr inbounds i8**, i8*** %1, i64 1
  %14 = getelementptr inbounds i8**, i8*** %1, i64 2
  %15 = getelementptr inbounds i8**, i8*** %1, i64 3
  %16 = icmp eq i32 %9, 0
  %17 = zext i32 %9 to i64
  %18 = shl nuw nsw i64 %17, 2
  %19 = and i64 %17, 4294967280
  %20 = add nsw i64 %19, -16
  %21 = lshr exact i64 %20, 4
  %22 = add nuw nsw i64 %21, 1
  %23 = icmp ult i32 %9, 16
  %24 = and i64 %17, 4294967280
  %25 = shl nuw nsw i64 %24, 2
  %26 = and i64 %22, 1
  %27 = icmp eq i64 %20, 0
  %28 = sub nuw nsw i64 %22, %26
  %29 = icmp eq i64 %26, 0
  %30 = icmp eq i64 %24, %17
  %31 = and i64 %17, 1
  %32 = icmp eq i64 %31, 0
  %33 = sub nsw i64 0, %17
  br label %119

34:                                               ; preds = %5
  %35 = icmp sgt i32 %4, 0
  br i1 %35, label %36, label %343

36:                                               ; preds = %34
  %37 = getelementptr inbounds i8**, i8*** %1, i64 1
  %38 = getelementptr inbounds i8**, i8*** %1, i64 2
  %39 = icmp eq i32 %9, 0
  %40 = zext i32 %9 to i64
  %41 = and i64 %40, 1
  %42 = icmp eq i32 %9, 1
  %43 = sub nsw i64 %40, %41
  %44 = icmp eq i64 %41, 0
  br label %72

45:                                               ; preds = %5
  %46 = icmp sgt i32 %4, 0
  br i1 %46, label %47, label %343

47:                                               ; preds = %45
  %48 = icmp sgt i32 %7, 0
  %49 = icmp eq i32 %9, 0
  %50 = sext i32 %7 to i64
  %51 = zext i32 %7 to i64
  %52 = zext i32 %9 to i64
  %53 = add nsw i64 %52, -1
  %54 = and i64 %52, 3
  %55 = icmp ult i64 %53, 3
  %56 = sub nsw i64 %52, %54
  %57 = icmp eq i64 %54, 0
  br label %281

58:                                               ; preds = %91, %89
  %59 = phi i64 [ 0, %89 ], [ %114, %91 ]
  %60 = phi i8* [ %90, %89 ], [ %113, %91 ]
  br i1 %44, label %70, label %61

61:                                               ; preds = %58
  %62 = getelementptr inbounds i8, i8* %80, i64 %59
  %63 = load i8, i8* %62, align 1
  %64 = getelementptr inbounds i8, i8* %60, i64 1
  store i8 %63, i8* %60, align 1
  %65 = getelementptr inbounds i8, i8* %83, i64 %59
  %66 = load i8, i8* %65, align 1
  %67 = getelementptr inbounds i8, i8* %60, i64 2
  store i8 %66, i8* %64, align 1
  %68 = getelementptr inbounds i8, i8* %86, i64 %59
  %69 = load i8, i8* %68, align 1
  store i8 %69, i8* %67, align 1
  br label %70

70:                                               ; preds = %61, %58, %72
  %71 = icmp sgt i32 %76, 0
  br i1 %71, label %72, label %343

72:                                               ; preds = %36, %70
  %73 = phi i32 [ %4, %36 ], [ %76, %70 ]
  %74 = phi i8** [ %3, %36 ], [ %88, %70 ]
  %75 = phi i32 [ %2, %36 ], [ %87, %70 ]
  %76 = add nsw i32 %73, -1
  %77 = load i8**, i8*** %1, align 8
  %78 = zext i32 %75 to i64
  %79 = getelementptr inbounds i8*, i8** %77, i64 %78
  %80 = load i8*, i8** %79, align 8
  %81 = load i8**, i8*** %37, align 8
  %82 = getelementptr inbounds i8*, i8** %81, i64 %78
  %83 = load i8*, i8** %82, align 8
  %84 = load i8**, i8*** %38, align 8
  %85 = getelementptr inbounds i8*, i8** %84, i64 %78
  %86 = load i8*, i8** %85, align 8
  %87 = add i32 %75, 1
  %88 = getelementptr inbounds i8*, i8** %74, i64 1
  br i1 %39, label %70, label %89

89:                                               ; preds = %72
  %90 = load i8*, i8** %74, align 8
  br i1 %42, label %58, label %91

91:                                               ; preds = %89, %91
  %92 = phi i64 [ %114, %91 ], [ 0, %89 ]
  %93 = phi i8* [ %113, %91 ], [ %90, %89 ]
  %94 = phi i64 [ %115, %91 ], [ %43, %89 ]
  %95 = getelementptr inbounds i8, i8* %80, i64 %92
  %96 = load i8, i8* %95, align 1
  %97 = getelementptr inbounds i8, i8* %93, i64 1
  store i8 %96, i8* %93, align 1
  %98 = getelementptr inbounds i8, i8* %83, i64 %92
  %99 = load i8, i8* %98, align 1
  %100 = getelementptr inbounds i8, i8* %93, i64 2
  store i8 %99, i8* %97, align 1
  %101 = getelementptr inbounds i8, i8* %86, i64 %92
  %102 = load i8, i8* %101, align 1
  %103 = getelementptr inbounds i8, i8* %93, i64 3
  store i8 %102, i8* %100, align 1
  %104 = or i64 %92, 1
  %105 = getelementptr inbounds i8, i8* %80, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = getelementptr inbounds i8, i8* %93, i64 4
  store i8 %106, i8* %103, align 1
  %108 = getelementptr inbounds i8, i8* %83, i64 %104
  %109 = load i8, i8* %108, align 1
  %110 = getelementptr inbounds i8, i8* %93, i64 5
  store i8 %109, i8* %107, align 1
  %111 = getelementptr inbounds i8, i8* %86, i64 %104
  %112 = load i8, i8* %111, align 1
  %113 = getelementptr inbounds i8, i8* %93, i64 6
  store i8 %112, i8* %110, align 1
  %114 = add nuw nsw i64 %92, 2
  %115 = add i64 %94, -2
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %58, label %91

117:                                              ; preds = %247, %251, %228, %119
  %118 = icmp sgt i32 %123, 0
  br i1 %118, label %119, label %343

119:                                              ; preds = %12, %117
  %120 = phi i32 [ %4, %12 ], [ %123, %117 ]
  %121 = phi i8** [ %3, %12 ], [ %138, %117 ]
  %122 = phi i32 [ %2, %12 ], [ %137, %117 ]
  %123 = add nsw i32 %120, -1
  %124 = load i8**, i8*** %1, align 8
  %125 = zext i32 %122 to i64
  %126 = getelementptr inbounds i8*, i8** %124, i64 %125
  %127 = load i8*, i8** %126, align 8
  %128 = load i8**, i8*** %13, align 8
  %129 = getelementptr inbounds i8*, i8** %128, i64 %125
  %130 = load i8*, i8** %129, align 8
  %131 = load i8**, i8*** %14, align 8
  %132 = getelementptr inbounds i8*, i8** %131, i64 %125
  %133 = load i8*, i8** %132, align 8
  %134 = load i8**, i8*** %15, align 8
  %135 = getelementptr inbounds i8*, i8** %134, i64 %125
  %136 = load i8*, i8** %135, align 8
  %137 = add i32 %122, 1
  %138 = getelementptr inbounds i8*, i8** %121, i64 1
  br i1 %16, label %117, label %139

139:                                              ; preds = %119
  %140 = load i8*, i8** %121, align 8
  br i1 %23, label %229, label %141

141:                                              ; preds = %139
  %142 = getelementptr i8, i8* %140, i64 %18
  %143 = getelementptr i8, i8* %127, i64 %17
  %144 = getelementptr i8, i8* %130, i64 %17
  %145 = getelementptr i8, i8* %133, i64 %17
  %146 = getelementptr i8, i8* %136, i64 %17
  %147 = icmp ult i8* %140, %143
  %148 = icmp ult i8* %127, %142
  %149 = and i1 %147, %148
  %150 = icmp ult i8* %140, %144
  %151 = icmp ult i8* %130, %142
  %152 = and i1 %150, %151
  %153 = or i1 %149, %152
  %154 = icmp ult i8* %140, %145
  %155 = icmp ult i8* %133, %142
  %156 = and i1 %154, %155
  %157 = or i1 %153, %156
  %158 = icmp ult i8* %140, %146
  %159 = icmp ult i8* %136, %142
  %160 = and i1 %158, %159
  %161 = or i1 %157, %160
  br i1 %161, label %229, label %162

162:                                              ; preds = %141
  %163 = getelementptr i8, i8* %140, i64 %25
  br i1 %27, label %207, label %164

164:                                              ; preds = %162, %164
  %165 = phi i64 [ %204, %164 ], [ 0, %162 ]
  %166 = phi i64 [ %205, %164 ], [ %28, %162 ]
  %167 = shl i64 %165, 2
  %168 = getelementptr inbounds i8, i8* %127, i64 %165
  %169 = bitcast i8* %168 to <16 x i8>*
  %170 = load <16 x i8>, <16 x i8>* %169, align 1, !alias.scope !10
  %171 = getelementptr inbounds i8, i8* %130, i64 %165
  %172 = bitcast i8* %171 to <16 x i8>*
  %173 = load <16 x i8>, <16 x i8>* %172, align 1, !alias.scope !13
  %174 = getelementptr inbounds i8, i8* %133, i64 %165
  %175 = bitcast i8* %174 to <16 x i8>*
  %176 = load <16 x i8>, <16 x i8>* %175, align 1, !alias.scope !15
  %177 = getelementptr inbounds i8, i8* %136, i64 %165
  %178 = bitcast i8* %177 to <16 x i8>*
  %179 = load <16 x i8>, <16 x i8>* %178, align 1, !alias.scope !17
  %180 = getelementptr inbounds i8, i8* %140, i64 %167
  %181 = bitcast i8* %180 to <64 x i8>*
  %182 = shufflevector <16 x i8> %170, <16 x i8> %173, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %183 = shufflevector <16 x i8> %176, <16 x i8> %179, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %184 = shufflevector <32 x i8> %182, <32 x i8> %183, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %184, <64 x i8>* %181, align 1
  %185 = or i64 %165, 16
  %186 = shl i64 %185, 2
  %187 = getelementptr inbounds i8, i8* %127, i64 %185
  %188 = bitcast i8* %187 to <16 x i8>*
  %189 = load <16 x i8>, <16 x i8>* %188, align 1, !alias.scope !10
  %190 = getelementptr inbounds i8, i8* %130, i64 %185
  %191 = bitcast i8* %190 to <16 x i8>*
  %192 = load <16 x i8>, <16 x i8>* %191, align 1, !alias.scope !13
  %193 = getelementptr inbounds i8, i8* %133, i64 %185
  %194 = bitcast i8* %193 to <16 x i8>*
  %195 = load <16 x i8>, <16 x i8>* %194, align 1, !alias.scope !15
  %196 = getelementptr inbounds i8, i8* %136, i64 %185
  %197 = bitcast i8* %196 to <16 x i8>*
  %198 = load <16 x i8>, <16 x i8>* %197, align 1, !alias.scope !17
  %199 = getelementptr inbounds i8, i8* %140, i64 %186
  %200 = bitcast i8* %199 to <64 x i8>*
  %201 = shufflevector <16 x i8> %189, <16 x i8> %192, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %202 = shufflevector <16 x i8> %195, <16 x i8> %198, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %203 = shufflevector <32 x i8> %201, <32 x i8> %202, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %203, <64 x i8>* %200, align 1
  %204 = add i64 %165, 32
  %205 = add i64 %166, -2
  %206 = icmp eq i64 %205, 0
  br i1 %206, label %207, label %164, !llvm.loop !19

207:                                              ; preds = %164, %162
  %208 = phi i64 [ 0, %162 ], [ %204, %164 ]
  br i1 %29, label %228, label %209

209:                                              ; preds = %207
  %210 = shl i64 %208, 2
  %211 = getelementptr inbounds i8, i8* %127, i64 %208
  %212 = bitcast i8* %211 to <16 x i8>*
  %213 = load <16 x i8>, <16 x i8>* %212, align 1, !alias.scope !10
  %214 = getelementptr inbounds i8, i8* %130, i64 %208
  %215 = bitcast i8* %214 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !13
  %217 = getelementptr inbounds i8, i8* %133, i64 %208
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1, !alias.scope !15
  %220 = getelementptr inbounds i8, i8* %136, i64 %208
  %221 = bitcast i8* %220 to <16 x i8>*
  %222 = load <16 x i8>, <16 x i8>* %221, align 1, !alias.scope !17
  %223 = getelementptr inbounds i8, i8* %140, i64 %210
  %224 = bitcast i8* %223 to <64 x i8>*
  %225 = shufflevector <16 x i8> %213, <16 x i8> %216, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %226 = shufflevector <16 x i8> %219, <16 x i8> %222, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %227 = shufflevector <32 x i8> %225, <32 x i8> %226, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %227, <64 x i8>* %224, align 1
  br label %228

228:                                              ; preds = %207, %209
  br i1 %30, label %117, label %229

229:                                              ; preds = %228, %141, %139
  %230 = phi i64 [ 0, %141 ], [ 0, %139 ], [ %24, %228 ]
  %231 = phi i8* [ %140, %141 ], [ %140, %139 ], [ %163, %228 ]
  %232 = xor i64 %230, -1
  br i1 %32, label %247, label %233

233:                                              ; preds = %229
  %234 = getelementptr inbounds i8, i8* %127, i64 %230
  %235 = load i8, i8* %234, align 1
  %236 = getelementptr inbounds i8, i8* %231, i64 1
  store i8 %235, i8* %231, align 1
  %237 = getelementptr inbounds i8, i8* %130, i64 %230
  %238 = load i8, i8* %237, align 1
  %239 = getelementptr inbounds i8, i8* %231, i64 2
  store i8 %238, i8* %236, align 1
  %240 = getelementptr inbounds i8, i8* %133, i64 %230
  %241 = load i8, i8* %240, align 1
  %242 = getelementptr inbounds i8, i8* %231, i64 3
  store i8 %241, i8* %239, align 1
  %243 = getelementptr inbounds i8, i8* %136, i64 %230
  %244 = load i8, i8* %243, align 1
  %245 = getelementptr inbounds i8, i8* %231, i64 4
  store i8 %244, i8* %242, align 1
  %246 = or i64 %230, 1
  br label %247

247:                                              ; preds = %233, %229
  %248 = phi i64 [ %246, %233 ], [ %230, %229 ]
  %249 = phi i8* [ %245, %233 ], [ %231, %229 ]
  %250 = icmp eq i64 %232, %33
  br i1 %250, label %117, label %251

251:                                              ; preds = %247, %251
  %252 = phi i64 [ %279, %251 ], [ %248, %247 ]
  %253 = phi i8* [ %278, %251 ], [ %249, %247 ]
  %254 = getelementptr inbounds i8, i8* %127, i64 %252
  %255 = load i8, i8* %254, align 1
  %256 = getelementptr inbounds i8, i8* %253, i64 1
  store i8 %255, i8* %253, align 1
  %257 = getelementptr inbounds i8, i8* %130, i64 %252
  %258 = load i8, i8* %257, align 1
  %259 = getelementptr inbounds i8, i8* %253, i64 2
  store i8 %258, i8* %256, align 1
  %260 = getelementptr inbounds i8, i8* %133, i64 %252
  %261 = load i8, i8* %260, align 1
  %262 = getelementptr inbounds i8, i8* %253, i64 3
  store i8 %261, i8* %259, align 1
  %263 = getelementptr inbounds i8, i8* %136, i64 %252
  %264 = load i8, i8* %263, align 1
  %265 = getelementptr inbounds i8, i8* %253, i64 4
  store i8 %264, i8* %262, align 1
  %266 = add nuw nsw i64 %252, 1
  %267 = getelementptr inbounds i8, i8* %127, i64 %266
  %268 = load i8, i8* %267, align 1
  %269 = getelementptr inbounds i8, i8* %253, i64 5
  store i8 %268, i8* %265, align 1
  %270 = getelementptr inbounds i8, i8* %130, i64 %266
  %271 = load i8, i8* %270, align 1
  %272 = getelementptr inbounds i8, i8* %253, i64 6
  store i8 %271, i8* %269, align 1
  %273 = getelementptr inbounds i8, i8* %133, i64 %266
  %274 = load i8, i8* %273, align 1
  %275 = getelementptr inbounds i8, i8* %253, i64 7
  store i8 %274, i8* %272, align 1
  %276 = getelementptr inbounds i8, i8* %136, i64 %266
  %277 = load i8, i8* %276, align 1
  %278 = getelementptr inbounds i8, i8* %253, i64 8
  store i8 %277, i8* %275, align 1
  %279 = add nuw nsw i64 %252, 2
  %280 = icmp eq i64 %279, %17
  br i1 %280, label %117, label %251, !llvm.loop !21

281:                                              ; preds = %47, %339
  %282 = phi i32 [ %4, %47 ], [ %285, %339 ]
  %283 = phi i8** [ %3, %47 ], [ %340, %339 ]
  %284 = phi i32 [ %2, %47 ], [ %341, %339 ]
  %285 = add nsw i32 %282, -1
  br i1 %48, label %286, label %339

286:                                              ; preds = %281
  %287 = zext i32 %284 to i64
  br label %288

288:                                              ; preds = %336, %286
  %289 = phi i64 [ 0, %286 ], [ %337, %336 ]
  %290 = getelementptr inbounds i8**, i8*** %1, i64 %289
  %291 = load i8**, i8*** %290, align 8
  %292 = getelementptr inbounds i8*, i8** %291, i64 %287
  %293 = load i8*, i8** %292, align 8
  br i1 %49, label %336, label %294

294:                                              ; preds = %288
  %295 = load i8*, i8** %283, align 8
  br i1 %55, label %322, label %296

296:                                              ; preds = %294, %296
  %297 = phi i64 [ %319, %296 ], [ 0, %294 ]
  %298 = phi i8* [ %318, %296 ], [ %295, %294 ]
  %299 = phi i64 [ %320, %296 ], [ %56, %294 ]
  %300 = getelementptr inbounds i8, i8* %293, i64 %297
  %301 = load i8, i8* %300, align 1
  %302 = getelementptr inbounds i8, i8* %298, i64 %289
  store i8 %301, i8* %302, align 1
  %303 = getelementptr inbounds i8, i8* %298, i64 %50
  %304 = or i64 %297, 1
  %305 = getelementptr inbounds i8, i8* %293, i64 %304
  %306 = load i8, i8* %305, align 1
  %307 = getelementptr inbounds i8, i8* %303, i64 %289
  store i8 %306, i8* %307, align 1
  %308 = getelementptr inbounds i8, i8* %303, i64 %50
  %309 = or i64 %297, 2
  %310 = getelementptr inbounds i8, i8* %293, i64 %309
  %311 = load i8, i8* %310, align 1
  %312 = getelementptr inbounds i8, i8* %308, i64 %289
  store i8 %311, i8* %312, align 1
  %313 = getelementptr inbounds i8, i8* %308, i64 %50
  %314 = or i64 %297, 3
  %315 = getelementptr inbounds i8, i8* %293, i64 %314
  %316 = load i8, i8* %315, align 1
  %317 = getelementptr inbounds i8, i8* %313, i64 %289
  store i8 %316, i8* %317, align 1
  %318 = getelementptr inbounds i8, i8* %313, i64 %50
  %319 = add nuw nsw i64 %297, 4
  %320 = add i64 %299, -4
  %321 = icmp eq i64 %320, 0
  br i1 %321, label %322, label %296

322:                                              ; preds = %296, %294
  %323 = phi i64 [ 0, %294 ], [ %319, %296 ]
  %324 = phi i8* [ %295, %294 ], [ %318, %296 ]
  br i1 %57, label %336, label %325

325:                                              ; preds = %322, %325
  %326 = phi i64 [ %333, %325 ], [ %323, %322 ]
  %327 = phi i8* [ %332, %325 ], [ %324, %322 ]
  %328 = phi i64 [ %334, %325 ], [ %54, %322 ]
  %329 = getelementptr inbounds i8, i8* %293, i64 %326
  %330 = load i8, i8* %329, align 1
  %331 = getelementptr inbounds i8, i8* %327, i64 %289
  store i8 %330, i8* %331, align 1
  %332 = getelementptr inbounds i8, i8* %327, i64 %50
  %333 = add nuw nsw i64 %326, 1
  %334 = add i64 %328, -1
  %335 = icmp eq i64 %334, 0
  br i1 %335, label %336, label %325, !llvm.loop !22

336:                                              ; preds = %322, %325, %288
  %337 = add nuw nsw i64 %289, 1
  %338 = icmp eq i64 %337, %51
  br i1 %338, label %339, label %288

339:                                              ; preds = %336, %281
  %340 = getelementptr inbounds i8*, i8** %283, i64 1
  %341 = add i32 %284, 1
  %342 = icmp sgt i32 %285, 0
  br i1 %342, label %281, label %343

343:                                              ; preds = %117, %70, %339, %10, %34, %45
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @rgb_rgb_convert(%struct.jpeg_decompress_struct* nocapture readonly, i8*** readonly, i32, i8** nocapture readonly, i32) #2 {
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 11
  %7 = load i32, i32* %6, align 8
  switch i32 %7, label %816 [
    i32 6, label %8
    i32 7, label %80
    i32 12, label %80
    i32 8, label %246
    i32 9, label %318
    i32 13, label %318
    i32 10, label %484
    i32 14, label %484
    i32 11, label %650
    i32 15, label %650
  ]

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %10 = load i32, i32* %9, align 8
  %11 = icmp sgt i32 %4, 0
  br i1 %11, label %12, label %888

12:                                               ; preds = %8
  %13 = getelementptr inbounds i8**, i8*** %1, i64 1
  %14 = getelementptr inbounds i8**, i8*** %1, i64 2
  %15 = icmp eq i32 %10, 0
  %16 = zext i32 %10 to i64
  %17 = and i64 %16, 1
  %18 = icmp eq i32 %10, 1
  %19 = sub nsw i64 %16, %17
  %20 = icmp eq i64 %17, 0
  br label %35

21:                                               ; preds = %54, %52
  %22 = phi i64 [ 0, %52 ], [ %77, %54 ]
  %23 = phi i8* [ %53, %52 ], [ %76, %54 ]
  br i1 %20, label %33, label %24

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %43, i64 %22
  %26 = load i8, i8* %25, align 1
  store i8 %26, i8* %23, align 1
  %27 = getelementptr inbounds i8, i8* %46, i64 %22
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds i8, i8* %23, i64 1
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds i8, i8* %49, i64 %22
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds i8, i8* %23, i64 2
  store i8 %31, i8* %32, align 1
  br label %33

33:                                               ; preds = %24, %21, %35
  %34 = icmp sgt i32 %39, 0
  br i1 %34, label %35, label %888

35:                                               ; preds = %33, %12
  %36 = phi i32 [ %4, %12 ], [ %39, %33 ]
  %37 = phi i8** [ %3, %12 ], [ %51, %33 ]
  %38 = phi i32 [ %2, %12 ], [ %50, %33 ]
  %39 = add nsw i32 %36, -1
  %40 = load i8**, i8*** %1, align 8
  %41 = zext i32 %38 to i64
  %42 = getelementptr inbounds i8*, i8** %40, i64 %41
  %43 = load i8*, i8** %42, align 8
  %44 = load i8**, i8*** %13, align 8
  %45 = getelementptr inbounds i8*, i8** %44, i64 %41
  %46 = load i8*, i8** %45, align 8
  %47 = load i8**, i8*** %14, align 8
  %48 = getelementptr inbounds i8*, i8** %47, i64 %41
  %49 = load i8*, i8** %48, align 8
  %50 = add i32 %38, 1
  %51 = getelementptr inbounds i8*, i8** %37, i64 1
  br i1 %15, label %33, label %52

52:                                               ; preds = %35
  %53 = load i8*, i8** %37, align 8
  br i1 %18, label %21, label %54

54:                                               ; preds = %52, %54
  %55 = phi i64 [ %77, %54 ], [ 0, %52 ]
  %56 = phi i8* [ %76, %54 ], [ %53, %52 ]
  %57 = phi i64 [ %78, %54 ], [ %19, %52 ]
  %58 = getelementptr inbounds i8, i8* %43, i64 %55
  %59 = load i8, i8* %58, align 1
  store i8 %59, i8* %56, align 1
  %60 = getelementptr inbounds i8, i8* %46, i64 %55
  %61 = load i8, i8* %60, align 1
  %62 = getelementptr inbounds i8, i8* %56, i64 1
  store i8 %61, i8* %62, align 1
  %63 = getelementptr inbounds i8, i8* %49, i64 %55
  %64 = load i8, i8* %63, align 1
  %65 = getelementptr inbounds i8, i8* %56, i64 2
  store i8 %64, i8* %65, align 1
  %66 = getelementptr inbounds i8, i8* %56, i64 3
  %67 = or i64 %55, 1
  %68 = getelementptr inbounds i8, i8* %43, i64 %67
  %69 = load i8, i8* %68, align 1
  store i8 %69, i8* %66, align 1
  %70 = getelementptr inbounds i8, i8* %46, i64 %67
  %71 = load i8, i8* %70, align 1
  %72 = getelementptr inbounds i8, i8* %56, i64 4
  store i8 %71, i8* %72, align 1
  %73 = getelementptr inbounds i8, i8* %49, i64 %67
  %74 = load i8, i8* %73, align 1
  %75 = getelementptr inbounds i8, i8* %56, i64 5
  store i8 %74, i8* %75, align 1
  %76 = getelementptr inbounds i8, i8* %56, i64 6
  %77 = add nuw nsw i64 %55, 2
  %78 = add i64 %57, -2
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %21, label %54

80:                                               ; preds = %5, %5
  %81 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %82 = load i32, i32* %81, align 8
  %83 = icmp sgt i32 %4, 0
  br i1 %83, label %84, label %888

84:                                               ; preds = %80
  %85 = getelementptr inbounds i8**, i8*** %1, i64 1
  %86 = getelementptr inbounds i8**, i8*** %1, i64 2
  %87 = icmp eq i32 %82, 0
  %88 = zext i32 %82 to i64
  %89 = shl nuw nsw i64 %88, 2
  %90 = and i64 %88, 4294967280
  %91 = add nsw i64 %90, -16
  %92 = lshr exact i64 %91, 4
  %93 = add nuw nsw i64 %92, 1
  %94 = icmp ult i32 %82, 16
  %95 = and i64 %88, 4294967280
  %96 = shl nuw nsw i64 %95, 2
  %97 = and i64 %93, 1
  %98 = icmp eq i64 %91, 0
  %99 = sub nuw nsw i64 %93, %97
  %100 = icmp eq i64 %97, 0
  %101 = icmp eq i64 %95, %88
  %102 = and i64 %88, 1
  %103 = icmp eq i64 %102, 0
  %104 = sub nsw i64 0, %88
  br label %107

105:                                              ; preds = %216, %220, %199, %107
  %106 = icmp sgt i32 %111, 0
  br i1 %106, label %107, label %888

107:                                              ; preds = %105, %84
  %108 = phi i32 [ %4, %84 ], [ %111, %105 ]
  %109 = phi i8** [ %3, %84 ], [ %123, %105 ]
  %110 = phi i32 [ %2, %84 ], [ %122, %105 ]
  %111 = add nsw i32 %108, -1
  %112 = load i8**, i8*** %1, align 8
  %113 = zext i32 %110 to i64
  %114 = getelementptr inbounds i8*, i8** %112, i64 %113
  %115 = load i8*, i8** %114, align 8
  %116 = load i8**, i8*** %85, align 8
  %117 = getelementptr inbounds i8*, i8** %116, i64 %113
  %118 = load i8*, i8** %117, align 8
  %119 = load i8**, i8*** %86, align 8
  %120 = getelementptr inbounds i8*, i8** %119, i64 %113
  %121 = load i8*, i8** %120, align 8
  %122 = add i32 %110, 1
  %123 = getelementptr inbounds i8*, i8** %109, i64 1
  br i1 %87, label %105, label %124

124:                                              ; preds = %107
  %125 = load i8*, i8** %109, align 8
  br i1 %94, label %200, label %126

126:                                              ; preds = %124
  %127 = getelementptr i8, i8* %125, i64 %89
  %128 = getelementptr i8, i8* %115, i64 %88
  %129 = getelementptr i8, i8* %118, i64 %88
  %130 = getelementptr i8, i8* %121, i64 %88
  %131 = icmp ult i8* %125, %128
  %132 = icmp ult i8* %115, %127
  %133 = and i1 %131, %132
  %134 = icmp ult i8* %125, %129
  %135 = icmp ult i8* %118, %127
  %136 = and i1 %134, %135
  %137 = or i1 %133, %136
  %138 = icmp ult i8* %125, %130
  %139 = icmp ult i8* %121, %127
  %140 = and i1 %138, %139
  %141 = or i1 %137, %140
  br i1 %141, label %200, label %142

142:                                              ; preds = %126
  %143 = getelementptr i8, i8* %125, i64 %96
  br i1 %98, label %181, label %144

144:                                              ; preds = %142, %144
  %145 = phi i64 [ %178, %144 ], [ 0, %142 ]
  %146 = phi i64 [ %179, %144 ], [ %99, %142 ]
  %147 = shl i64 %145, 2
  %148 = getelementptr inbounds i8, i8* %115, i64 %145
  %149 = bitcast i8* %148 to <16 x i8>*
  %150 = load <16 x i8>, <16 x i8>* %149, align 1, !alias.scope !23
  %151 = getelementptr inbounds i8, i8* %118, i64 %145
  %152 = bitcast i8* %151 to <16 x i8>*
  %153 = load <16 x i8>, <16 x i8>* %152, align 1, !alias.scope !26
  %154 = getelementptr inbounds i8, i8* %121, i64 %145
  %155 = bitcast i8* %154 to <16 x i8>*
  %156 = load <16 x i8>, <16 x i8>* %155, align 1, !alias.scope !28
  %157 = getelementptr inbounds i8, i8* %125, i64 %147
  %158 = bitcast i8* %157 to <64 x i8>*
  %159 = shufflevector <16 x i8> %150, <16 x i8> %153, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %160 = shufflevector <16 x i8> %156, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %161 = shufflevector <32 x i8> %159, <32 x i8> %160, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %161, <64 x i8>* %158, align 1
  %162 = or i64 %145, 16
  %163 = shl i64 %162, 2
  %164 = getelementptr inbounds i8, i8* %115, i64 %162
  %165 = bitcast i8* %164 to <16 x i8>*
  %166 = load <16 x i8>, <16 x i8>* %165, align 1, !alias.scope !23
  %167 = getelementptr inbounds i8, i8* %118, i64 %162
  %168 = bitcast i8* %167 to <16 x i8>*
  %169 = load <16 x i8>, <16 x i8>* %168, align 1, !alias.scope !26
  %170 = getelementptr inbounds i8, i8* %121, i64 %162
  %171 = bitcast i8* %170 to <16 x i8>*
  %172 = load <16 x i8>, <16 x i8>* %171, align 1, !alias.scope !28
  %173 = getelementptr inbounds i8, i8* %125, i64 %163
  %174 = bitcast i8* %173 to <64 x i8>*
  %175 = shufflevector <16 x i8> %166, <16 x i8> %169, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %176 = shufflevector <16 x i8> %172, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %177 = shufflevector <32 x i8> %175, <32 x i8> %176, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %177, <64 x i8>* %174, align 1
  %178 = add i64 %145, 32
  %179 = add i64 %146, -2
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %181, label %144, !llvm.loop !30

181:                                              ; preds = %144, %142
  %182 = phi i64 [ 0, %142 ], [ %178, %144 ]
  br i1 %100, label %199, label %183

183:                                              ; preds = %181
  %184 = shl i64 %182, 2
  %185 = getelementptr inbounds i8, i8* %115, i64 %182
  %186 = bitcast i8* %185 to <16 x i8>*
  %187 = load <16 x i8>, <16 x i8>* %186, align 1, !alias.scope !23
  %188 = getelementptr inbounds i8, i8* %118, i64 %182
  %189 = bitcast i8* %188 to <16 x i8>*
  %190 = load <16 x i8>, <16 x i8>* %189, align 1, !alias.scope !26
  %191 = getelementptr inbounds i8, i8* %121, i64 %182
  %192 = bitcast i8* %191 to <16 x i8>*
  %193 = load <16 x i8>, <16 x i8>* %192, align 1, !alias.scope !28
  %194 = getelementptr inbounds i8, i8* %125, i64 %184
  %195 = bitcast i8* %194 to <64 x i8>*
  %196 = shufflevector <16 x i8> %187, <16 x i8> %190, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %197 = shufflevector <16 x i8> %193, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %198 = shufflevector <32 x i8> %196, <32 x i8> %197, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %198, <64 x i8>* %195, align 1
  br label %199

199:                                              ; preds = %181, %183
  br i1 %101, label %105, label %200

200:                                              ; preds = %199, %126, %124
  %201 = phi i64 [ 0, %126 ], [ 0, %124 ], [ %95, %199 ]
  %202 = phi i8* [ %125, %126 ], [ %125, %124 ], [ %143, %199 ]
  %203 = xor i64 %201, -1
  br i1 %103, label %216, label %204

204:                                              ; preds = %200
  %205 = getelementptr inbounds i8, i8* %115, i64 %201
  %206 = load i8, i8* %205, align 1
  store i8 %206, i8* %202, align 1
  %207 = getelementptr inbounds i8, i8* %118, i64 %201
  %208 = load i8, i8* %207, align 1
  %209 = getelementptr inbounds i8, i8* %202, i64 1
  store i8 %208, i8* %209, align 1
  %210 = getelementptr inbounds i8, i8* %121, i64 %201
  %211 = load i8, i8* %210, align 1
  %212 = getelementptr inbounds i8, i8* %202, i64 2
  store i8 %211, i8* %212, align 1
  %213 = getelementptr inbounds i8, i8* %202, i64 3
  store i8 -1, i8* %213, align 1
  %214 = getelementptr inbounds i8, i8* %202, i64 4
  %215 = or i64 %201, 1
  br label %216

216:                                              ; preds = %204, %200
  %217 = phi i64 [ %215, %204 ], [ %201, %200 ]
  %218 = phi i8* [ %214, %204 ], [ %202, %200 ]
  %219 = icmp eq i64 %203, %104
  br i1 %219, label %105, label %220

220:                                              ; preds = %216, %220
  %221 = phi i64 [ %244, %220 ], [ %217, %216 ]
  %222 = phi i8* [ %243, %220 ], [ %218, %216 ]
  %223 = getelementptr inbounds i8, i8* %115, i64 %221
  %224 = load i8, i8* %223, align 1
  store i8 %224, i8* %222, align 1
  %225 = getelementptr inbounds i8, i8* %118, i64 %221
  %226 = load i8, i8* %225, align 1
  %227 = getelementptr inbounds i8, i8* %222, i64 1
  store i8 %226, i8* %227, align 1
  %228 = getelementptr inbounds i8, i8* %121, i64 %221
  %229 = load i8, i8* %228, align 1
  %230 = getelementptr inbounds i8, i8* %222, i64 2
  store i8 %229, i8* %230, align 1
  %231 = getelementptr inbounds i8, i8* %222, i64 3
  store i8 -1, i8* %231, align 1
  %232 = getelementptr inbounds i8, i8* %222, i64 4
  %233 = add nuw nsw i64 %221, 1
  %234 = getelementptr inbounds i8, i8* %115, i64 %233
  %235 = load i8, i8* %234, align 1
  store i8 %235, i8* %232, align 1
  %236 = getelementptr inbounds i8, i8* %118, i64 %233
  %237 = load i8, i8* %236, align 1
  %238 = getelementptr inbounds i8, i8* %222, i64 5
  store i8 %237, i8* %238, align 1
  %239 = getelementptr inbounds i8, i8* %121, i64 %233
  %240 = load i8, i8* %239, align 1
  %241 = getelementptr inbounds i8, i8* %222, i64 6
  store i8 %240, i8* %241, align 1
  %242 = getelementptr inbounds i8, i8* %222, i64 7
  store i8 -1, i8* %242, align 1
  %243 = getelementptr inbounds i8, i8* %222, i64 8
  %244 = add nuw nsw i64 %221, 2
  %245 = icmp eq i64 %244, %88
  br i1 %245, label %105, label %220, !llvm.loop !31

246:                                              ; preds = %5
  %247 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %248 = load i32, i32* %247, align 8
  %249 = icmp sgt i32 %4, 0
  br i1 %249, label %250, label %888

250:                                              ; preds = %246
  %251 = getelementptr inbounds i8**, i8*** %1, i64 1
  %252 = getelementptr inbounds i8**, i8*** %1, i64 2
  %253 = icmp eq i32 %248, 0
  %254 = zext i32 %248 to i64
  %255 = and i64 %254, 1
  %256 = icmp eq i32 %248, 1
  %257 = sub nsw i64 %254, %255
  %258 = icmp eq i64 %255, 0
  br label %273

259:                                              ; preds = %292, %290
  %260 = phi i64 [ 0, %290 ], [ %315, %292 ]
  %261 = phi i8* [ %291, %290 ], [ %314, %292 ]
  br i1 %258, label %271, label %262

262:                                              ; preds = %259
  %263 = getelementptr inbounds i8, i8* %281, i64 %260
  %264 = load i8, i8* %263, align 1
  %265 = getelementptr inbounds i8, i8* %261, i64 2
  store i8 %264, i8* %265, align 1
  %266 = getelementptr inbounds i8, i8* %284, i64 %260
  %267 = load i8, i8* %266, align 1
  %268 = getelementptr inbounds i8, i8* %261, i64 1
  store i8 %267, i8* %268, align 1
  %269 = getelementptr inbounds i8, i8* %287, i64 %260
  %270 = load i8, i8* %269, align 1
  store i8 %270, i8* %261, align 1
  br label %271

271:                                              ; preds = %262, %259, %273
  %272 = icmp sgt i32 %277, 0
  br i1 %272, label %273, label %888

273:                                              ; preds = %271, %250
  %274 = phi i32 [ %4, %250 ], [ %277, %271 ]
  %275 = phi i8** [ %3, %250 ], [ %289, %271 ]
  %276 = phi i32 [ %2, %250 ], [ %288, %271 ]
  %277 = add nsw i32 %274, -1
  %278 = load i8**, i8*** %1, align 8
  %279 = zext i32 %276 to i64
  %280 = getelementptr inbounds i8*, i8** %278, i64 %279
  %281 = load i8*, i8** %280, align 8
  %282 = load i8**, i8*** %251, align 8
  %283 = getelementptr inbounds i8*, i8** %282, i64 %279
  %284 = load i8*, i8** %283, align 8
  %285 = load i8**, i8*** %252, align 8
  %286 = getelementptr inbounds i8*, i8** %285, i64 %279
  %287 = load i8*, i8** %286, align 8
  %288 = add i32 %276, 1
  %289 = getelementptr inbounds i8*, i8** %275, i64 1
  br i1 %253, label %271, label %290

290:                                              ; preds = %273
  %291 = load i8*, i8** %275, align 8
  br i1 %256, label %259, label %292

292:                                              ; preds = %290, %292
  %293 = phi i64 [ %315, %292 ], [ 0, %290 ]
  %294 = phi i8* [ %314, %292 ], [ %291, %290 ]
  %295 = phi i64 [ %316, %292 ], [ %257, %290 ]
  %296 = getelementptr inbounds i8, i8* %281, i64 %293
  %297 = load i8, i8* %296, align 1
  %298 = getelementptr inbounds i8, i8* %294, i64 2
  store i8 %297, i8* %298, align 1
  %299 = getelementptr inbounds i8, i8* %284, i64 %293
  %300 = load i8, i8* %299, align 1
  %301 = getelementptr inbounds i8, i8* %294, i64 1
  store i8 %300, i8* %301, align 1
  %302 = getelementptr inbounds i8, i8* %287, i64 %293
  %303 = load i8, i8* %302, align 1
  store i8 %303, i8* %294, align 1
  %304 = getelementptr inbounds i8, i8* %294, i64 3
  %305 = or i64 %293, 1
  %306 = getelementptr inbounds i8, i8* %281, i64 %305
  %307 = load i8, i8* %306, align 1
  %308 = getelementptr inbounds i8, i8* %294, i64 5
  store i8 %307, i8* %308, align 1
  %309 = getelementptr inbounds i8, i8* %284, i64 %305
  %310 = load i8, i8* %309, align 1
  %311 = getelementptr inbounds i8, i8* %294, i64 4
  store i8 %310, i8* %311, align 1
  %312 = getelementptr inbounds i8, i8* %287, i64 %305
  %313 = load i8, i8* %312, align 1
  store i8 %313, i8* %304, align 1
  %314 = getelementptr inbounds i8, i8* %294, i64 6
  %315 = add nuw nsw i64 %293, 2
  %316 = add i64 %295, -2
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %259, label %292

318:                                              ; preds = %5, %5
  %319 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %320 = load i32, i32* %319, align 8
  %321 = icmp sgt i32 %4, 0
  br i1 %321, label %322, label %888

322:                                              ; preds = %318
  %323 = getelementptr inbounds i8**, i8*** %1, i64 1
  %324 = getelementptr inbounds i8**, i8*** %1, i64 2
  %325 = icmp eq i32 %320, 0
  %326 = zext i32 %320 to i64
  %327 = shl nuw nsw i64 %326, 2
  %328 = and i64 %326, 4294967280
  %329 = add nsw i64 %328, -16
  %330 = lshr exact i64 %329, 4
  %331 = add nuw nsw i64 %330, 1
  %332 = icmp ult i32 %320, 16
  %333 = and i64 %326, 4294967280
  %334 = shl nuw nsw i64 %333, 2
  %335 = and i64 %331, 1
  %336 = icmp eq i64 %329, 0
  %337 = sub nuw nsw i64 %331, %335
  %338 = icmp eq i64 %335, 0
  %339 = icmp eq i64 %333, %326
  %340 = and i64 %326, 1
  %341 = icmp eq i64 %340, 0
  %342 = sub nsw i64 0, %326
  br label %345

343:                                              ; preds = %454, %458, %437, %345
  %344 = icmp sgt i32 %349, 0
  br i1 %344, label %345, label %888

345:                                              ; preds = %343, %322
  %346 = phi i32 [ %4, %322 ], [ %349, %343 ]
  %347 = phi i8** [ %3, %322 ], [ %361, %343 ]
  %348 = phi i32 [ %2, %322 ], [ %360, %343 ]
  %349 = add nsw i32 %346, -1
  %350 = load i8**, i8*** %1, align 8
  %351 = zext i32 %348 to i64
  %352 = getelementptr inbounds i8*, i8** %350, i64 %351
  %353 = load i8*, i8** %352, align 8
  %354 = load i8**, i8*** %323, align 8
  %355 = getelementptr inbounds i8*, i8** %354, i64 %351
  %356 = load i8*, i8** %355, align 8
  %357 = load i8**, i8*** %324, align 8
  %358 = getelementptr inbounds i8*, i8** %357, i64 %351
  %359 = load i8*, i8** %358, align 8
  %360 = add i32 %348, 1
  %361 = getelementptr inbounds i8*, i8** %347, i64 1
  br i1 %325, label %343, label %362

362:                                              ; preds = %345
  %363 = load i8*, i8** %347, align 8
  br i1 %332, label %438, label %364

364:                                              ; preds = %362
  %365 = getelementptr i8, i8* %363, i64 %327
  %366 = getelementptr i8, i8* %353, i64 %326
  %367 = getelementptr i8, i8* %356, i64 %326
  %368 = getelementptr i8, i8* %359, i64 %326
  %369 = icmp ult i8* %363, %366
  %370 = icmp ult i8* %353, %365
  %371 = and i1 %369, %370
  %372 = icmp ult i8* %363, %367
  %373 = icmp ult i8* %356, %365
  %374 = and i1 %372, %373
  %375 = or i1 %371, %374
  %376 = icmp ult i8* %363, %368
  %377 = icmp ult i8* %359, %365
  %378 = and i1 %376, %377
  %379 = or i1 %375, %378
  br i1 %379, label %438, label %380

380:                                              ; preds = %364
  %381 = getelementptr i8, i8* %363, i64 %334
  br i1 %336, label %419, label %382

382:                                              ; preds = %380, %382
  %383 = phi i64 [ %416, %382 ], [ 0, %380 ]
  %384 = phi i64 [ %417, %382 ], [ %337, %380 ]
  %385 = shl i64 %383, 2
  %386 = getelementptr inbounds i8, i8* %353, i64 %383
  %387 = bitcast i8* %386 to <16 x i8>*
  %388 = load <16 x i8>, <16 x i8>* %387, align 1, !alias.scope !32
  %389 = getelementptr inbounds i8, i8* %356, i64 %383
  %390 = bitcast i8* %389 to <16 x i8>*
  %391 = load <16 x i8>, <16 x i8>* %390, align 1, !alias.scope !35
  %392 = getelementptr inbounds i8, i8* %359, i64 %383
  %393 = bitcast i8* %392 to <16 x i8>*
  %394 = load <16 x i8>, <16 x i8>* %393, align 1, !alias.scope !37
  %395 = getelementptr inbounds i8, i8* %363, i64 %385
  %396 = bitcast i8* %395 to <64 x i8>*
  %397 = shufflevector <16 x i8> %394, <16 x i8> %391, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %398 = shufflevector <16 x i8> %388, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %399 = shufflevector <32 x i8> %397, <32 x i8> %398, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %399, <64 x i8>* %396, align 1
  %400 = or i64 %383, 16
  %401 = shl i64 %400, 2
  %402 = getelementptr inbounds i8, i8* %353, i64 %400
  %403 = bitcast i8* %402 to <16 x i8>*
  %404 = load <16 x i8>, <16 x i8>* %403, align 1, !alias.scope !32
  %405 = getelementptr inbounds i8, i8* %356, i64 %400
  %406 = bitcast i8* %405 to <16 x i8>*
  %407 = load <16 x i8>, <16 x i8>* %406, align 1, !alias.scope !35
  %408 = getelementptr inbounds i8, i8* %359, i64 %400
  %409 = bitcast i8* %408 to <16 x i8>*
  %410 = load <16 x i8>, <16 x i8>* %409, align 1, !alias.scope !37
  %411 = getelementptr inbounds i8, i8* %363, i64 %401
  %412 = bitcast i8* %411 to <64 x i8>*
  %413 = shufflevector <16 x i8> %410, <16 x i8> %407, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %414 = shufflevector <16 x i8> %404, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %415 = shufflevector <32 x i8> %413, <32 x i8> %414, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %415, <64 x i8>* %412, align 1
  %416 = add i64 %383, 32
  %417 = add i64 %384, -2
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %419, label %382, !llvm.loop !39

419:                                              ; preds = %382, %380
  %420 = phi i64 [ 0, %380 ], [ %416, %382 ]
  br i1 %338, label %437, label %421

421:                                              ; preds = %419
  %422 = shl i64 %420, 2
  %423 = getelementptr inbounds i8, i8* %353, i64 %420
  %424 = bitcast i8* %423 to <16 x i8>*
  %425 = load <16 x i8>, <16 x i8>* %424, align 1, !alias.scope !32
  %426 = getelementptr inbounds i8, i8* %356, i64 %420
  %427 = bitcast i8* %426 to <16 x i8>*
  %428 = load <16 x i8>, <16 x i8>* %427, align 1, !alias.scope !35
  %429 = getelementptr inbounds i8, i8* %359, i64 %420
  %430 = bitcast i8* %429 to <16 x i8>*
  %431 = load <16 x i8>, <16 x i8>* %430, align 1, !alias.scope !37
  %432 = getelementptr inbounds i8, i8* %363, i64 %422
  %433 = bitcast i8* %432 to <64 x i8>*
  %434 = shufflevector <16 x i8> %431, <16 x i8> %428, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %435 = shufflevector <16 x i8> %425, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %436 = shufflevector <32 x i8> %434, <32 x i8> %435, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %436, <64 x i8>* %433, align 1
  br label %437

437:                                              ; preds = %419, %421
  br i1 %339, label %343, label %438

438:                                              ; preds = %437, %364, %362
  %439 = phi i64 [ 0, %364 ], [ 0, %362 ], [ %333, %437 ]
  %440 = phi i8* [ %363, %364 ], [ %363, %362 ], [ %381, %437 ]
  %441 = xor i64 %439, -1
  br i1 %341, label %454, label %442

442:                                              ; preds = %438
  %443 = getelementptr inbounds i8, i8* %353, i64 %439
  %444 = load i8, i8* %443, align 1
  %445 = getelementptr inbounds i8, i8* %440, i64 2
  store i8 %444, i8* %445, align 1
  %446 = getelementptr inbounds i8, i8* %356, i64 %439
  %447 = load i8, i8* %446, align 1
  %448 = getelementptr inbounds i8, i8* %440, i64 1
  store i8 %447, i8* %448, align 1
  %449 = getelementptr inbounds i8, i8* %359, i64 %439
  %450 = load i8, i8* %449, align 1
  store i8 %450, i8* %440, align 1
  %451 = getelementptr inbounds i8, i8* %440, i64 3
  store i8 -1, i8* %451, align 1
  %452 = getelementptr inbounds i8, i8* %440, i64 4
  %453 = or i64 %439, 1
  br label %454

454:                                              ; preds = %442, %438
  %455 = phi i64 [ %453, %442 ], [ %439, %438 ]
  %456 = phi i8* [ %452, %442 ], [ %440, %438 ]
  %457 = icmp eq i64 %441, %342
  br i1 %457, label %343, label %458

458:                                              ; preds = %454, %458
  %459 = phi i64 [ %482, %458 ], [ %455, %454 ]
  %460 = phi i8* [ %481, %458 ], [ %456, %454 ]
  %461 = getelementptr inbounds i8, i8* %353, i64 %459
  %462 = load i8, i8* %461, align 1
  %463 = getelementptr inbounds i8, i8* %460, i64 2
  store i8 %462, i8* %463, align 1
  %464 = getelementptr inbounds i8, i8* %356, i64 %459
  %465 = load i8, i8* %464, align 1
  %466 = getelementptr inbounds i8, i8* %460, i64 1
  store i8 %465, i8* %466, align 1
  %467 = getelementptr inbounds i8, i8* %359, i64 %459
  %468 = load i8, i8* %467, align 1
  store i8 %468, i8* %460, align 1
  %469 = getelementptr inbounds i8, i8* %460, i64 3
  store i8 -1, i8* %469, align 1
  %470 = getelementptr inbounds i8, i8* %460, i64 4
  %471 = add nuw nsw i64 %459, 1
  %472 = getelementptr inbounds i8, i8* %353, i64 %471
  %473 = load i8, i8* %472, align 1
  %474 = getelementptr inbounds i8, i8* %460, i64 6
  store i8 %473, i8* %474, align 1
  %475 = getelementptr inbounds i8, i8* %356, i64 %471
  %476 = load i8, i8* %475, align 1
  %477 = getelementptr inbounds i8, i8* %460, i64 5
  store i8 %476, i8* %477, align 1
  %478 = getelementptr inbounds i8, i8* %359, i64 %471
  %479 = load i8, i8* %478, align 1
  store i8 %479, i8* %470, align 1
  %480 = getelementptr inbounds i8, i8* %460, i64 7
  store i8 -1, i8* %480, align 1
  %481 = getelementptr inbounds i8, i8* %460, i64 8
  %482 = add nuw nsw i64 %459, 2
  %483 = icmp eq i64 %482, %326
  br i1 %483, label %343, label %458, !llvm.loop !40

484:                                              ; preds = %5, %5
  %485 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %486 = load i32, i32* %485, align 8
  %487 = icmp sgt i32 %4, 0
  br i1 %487, label %488, label %888

488:                                              ; preds = %484
  %489 = getelementptr inbounds i8**, i8*** %1, i64 1
  %490 = getelementptr inbounds i8**, i8*** %1, i64 2
  %491 = icmp eq i32 %486, 0
  %492 = zext i32 %486 to i64
  %493 = shl nuw nsw i64 %492, 2
  %494 = and i64 %492, 4294967280
  %495 = add nsw i64 %494, -16
  %496 = lshr exact i64 %495, 4
  %497 = add nuw nsw i64 %496, 1
  %498 = icmp ult i32 %486, 16
  %499 = and i64 %492, 4294967280
  %500 = shl nuw nsw i64 %499, 2
  %501 = and i64 %497, 1
  %502 = icmp eq i64 %495, 0
  %503 = sub nuw nsw i64 %497, %501
  %504 = icmp eq i64 %501, 0
  %505 = icmp eq i64 %499, %492
  %506 = and i64 %492, 1
  %507 = icmp eq i64 %506, 0
  %508 = sub nsw i64 0, %492
  br label %511

509:                                              ; preds = %620, %624, %603, %511
  %510 = icmp sgt i32 %515, 0
  br i1 %510, label %511, label %888

511:                                              ; preds = %509, %488
  %512 = phi i32 [ %4, %488 ], [ %515, %509 ]
  %513 = phi i8** [ %3, %488 ], [ %527, %509 ]
  %514 = phi i32 [ %2, %488 ], [ %526, %509 ]
  %515 = add nsw i32 %512, -1
  %516 = load i8**, i8*** %1, align 8
  %517 = zext i32 %514 to i64
  %518 = getelementptr inbounds i8*, i8** %516, i64 %517
  %519 = load i8*, i8** %518, align 8
  %520 = load i8**, i8*** %489, align 8
  %521 = getelementptr inbounds i8*, i8** %520, i64 %517
  %522 = load i8*, i8** %521, align 8
  %523 = load i8**, i8*** %490, align 8
  %524 = getelementptr inbounds i8*, i8** %523, i64 %517
  %525 = load i8*, i8** %524, align 8
  %526 = add i32 %514, 1
  %527 = getelementptr inbounds i8*, i8** %513, i64 1
  br i1 %491, label %509, label %528

528:                                              ; preds = %511
  %529 = load i8*, i8** %513, align 8
  br i1 %498, label %604, label %530

530:                                              ; preds = %528
  %531 = getelementptr i8, i8* %529, i64 %493
  %532 = getelementptr i8, i8* %519, i64 %492
  %533 = getelementptr i8, i8* %522, i64 %492
  %534 = getelementptr i8, i8* %525, i64 %492
  %535 = icmp ult i8* %529, %532
  %536 = icmp ult i8* %519, %531
  %537 = and i1 %535, %536
  %538 = icmp ult i8* %529, %533
  %539 = icmp ult i8* %522, %531
  %540 = and i1 %538, %539
  %541 = or i1 %537, %540
  %542 = icmp ult i8* %529, %534
  %543 = icmp ult i8* %525, %531
  %544 = and i1 %542, %543
  %545 = or i1 %541, %544
  br i1 %545, label %604, label %546

546:                                              ; preds = %530
  %547 = getelementptr i8, i8* %529, i64 %500
  br i1 %502, label %585, label %548

548:                                              ; preds = %546, %548
  %549 = phi i64 [ %582, %548 ], [ 0, %546 ]
  %550 = phi i64 [ %583, %548 ], [ %503, %546 ]
  %551 = shl i64 %549, 2
  %552 = getelementptr i8, i8* %529, i64 %551
  %553 = getelementptr inbounds i8, i8* %519, i64 %549
  %554 = bitcast i8* %553 to <16 x i8>*
  %555 = load <16 x i8>, <16 x i8>* %554, align 1, !alias.scope !41
  %556 = getelementptr inbounds i8, i8* %522, i64 %549
  %557 = bitcast i8* %556 to <16 x i8>*
  %558 = load <16 x i8>, <16 x i8>* %557, align 1, !alias.scope !44
  %559 = getelementptr inbounds i8, i8* %525, i64 %549
  %560 = bitcast i8* %559 to <16 x i8>*
  %561 = load <16 x i8>, <16 x i8>* %560, align 1, !alias.scope !46
  %562 = bitcast i8* %552 to <64 x i8>*
  %563 = shufflevector <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i8> %561, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %564 = shufflevector <16 x i8> %558, <16 x i8> %555, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %565 = shufflevector <32 x i8> %563, <32 x i8> %564, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %565, <64 x i8>* %562, align 1
  %566 = or i64 %549, 16
  %567 = shl i64 %566, 2
  %568 = getelementptr i8, i8* %529, i64 %567
  %569 = getelementptr inbounds i8, i8* %519, i64 %566
  %570 = bitcast i8* %569 to <16 x i8>*
  %571 = load <16 x i8>, <16 x i8>* %570, align 1, !alias.scope !41
  %572 = getelementptr inbounds i8, i8* %522, i64 %566
  %573 = bitcast i8* %572 to <16 x i8>*
  %574 = load <16 x i8>, <16 x i8>* %573, align 1, !alias.scope !44
  %575 = getelementptr inbounds i8, i8* %525, i64 %566
  %576 = bitcast i8* %575 to <16 x i8>*
  %577 = load <16 x i8>, <16 x i8>* %576, align 1, !alias.scope !46
  %578 = bitcast i8* %568 to <64 x i8>*
  %579 = shufflevector <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i8> %577, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %580 = shufflevector <16 x i8> %574, <16 x i8> %571, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %581 = shufflevector <32 x i8> %579, <32 x i8> %580, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %581, <64 x i8>* %578, align 1
  %582 = add i64 %549, 32
  %583 = add i64 %550, -2
  %584 = icmp eq i64 %583, 0
  br i1 %584, label %585, label %548, !llvm.loop !48

585:                                              ; preds = %548, %546
  %586 = phi i64 [ 0, %546 ], [ %582, %548 ]
  br i1 %504, label %603, label %587

587:                                              ; preds = %585
  %588 = shl i64 %586, 2
  %589 = getelementptr i8, i8* %529, i64 %588
  %590 = getelementptr inbounds i8, i8* %519, i64 %586
  %591 = bitcast i8* %590 to <16 x i8>*
  %592 = load <16 x i8>, <16 x i8>* %591, align 1, !alias.scope !41
  %593 = getelementptr inbounds i8, i8* %522, i64 %586
  %594 = bitcast i8* %593 to <16 x i8>*
  %595 = load <16 x i8>, <16 x i8>* %594, align 1, !alias.scope !44
  %596 = getelementptr inbounds i8, i8* %525, i64 %586
  %597 = bitcast i8* %596 to <16 x i8>*
  %598 = load <16 x i8>, <16 x i8>* %597, align 1, !alias.scope !46
  %599 = bitcast i8* %589 to <64 x i8>*
  %600 = shufflevector <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i8> %598, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %601 = shufflevector <16 x i8> %595, <16 x i8> %592, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %602 = shufflevector <32 x i8> %600, <32 x i8> %601, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %602, <64 x i8>* %599, align 1
  br label %603

603:                                              ; preds = %585, %587
  br i1 %505, label %509, label %604

604:                                              ; preds = %603, %530, %528
  %605 = phi i64 [ 0, %530 ], [ 0, %528 ], [ %499, %603 ]
  %606 = phi i8* [ %529, %530 ], [ %529, %528 ], [ %547, %603 ]
  %607 = xor i64 %605, -1
  br i1 %507, label %620, label %608

608:                                              ; preds = %604
  %609 = getelementptr inbounds i8, i8* %519, i64 %605
  %610 = load i8, i8* %609, align 1
  %611 = getelementptr inbounds i8, i8* %606, i64 3
  store i8 %610, i8* %611, align 1
  %612 = getelementptr inbounds i8, i8* %522, i64 %605
  %613 = load i8, i8* %612, align 1
  %614 = getelementptr inbounds i8, i8* %606, i64 2
  store i8 %613, i8* %614, align 1
  %615 = getelementptr inbounds i8, i8* %525, i64 %605
  %616 = load i8, i8* %615, align 1
  %617 = getelementptr inbounds i8, i8* %606, i64 1
  store i8 %616, i8* %617, align 1
  store i8 -1, i8* %606, align 1
  %618 = getelementptr inbounds i8, i8* %606, i64 4
  %619 = or i64 %605, 1
  br label %620

620:                                              ; preds = %608, %604
  %621 = phi i64 [ %619, %608 ], [ %605, %604 ]
  %622 = phi i8* [ %618, %608 ], [ %606, %604 ]
  %623 = icmp eq i64 %607, %508
  br i1 %623, label %509, label %624

624:                                              ; preds = %620, %624
  %625 = phi i64 [ %648, %624 ], [ %621, %620 ]
  %626 = phi i8* [ %647, %624 ], [ %622, %620 ]
  %627 = getelementptr inbounds i8, i8* %519, i64 %625
  %628 = load i8, i8* %627, align 1
  %629 = getelementptr inbounds i8, i8* %626, i64 3
  store i8 %628, i8* %629, align 1
  %630 = getelementptr inbounds i8, i8* %522, i64 %625
  %631 = load i8, i8* %630, align 1
  %632 = getelementptr inbounds i8, i8* %626, i64 2
  store i8 %631, i8* %632, align 1
  %633 = getelementptr inbounds i8, i8* %525, i64 %625
  %634 = load i8, i8* %633, align 1
  %635 = getelementptr inbounds i8, i8* %626, i64 1
  store i8 %634, i8* %635, align 1
  store i8 -1, i8* %626, align 1
  %636 = getelementptr inbounds i8, i8* %626, i64 4
  %637 = add nuw nsw i64 %625, 1
  %638 = getelementptr inbounds i8, i8* %519, i64 %637
  %639 = load i8, i8* %638, align 1
  %640 = getelementptr inbounds i8, i8* %626, i64 7
  store i8 %639, i8* %640, align 1
  %641 = getelementptr inbounds i8, i8* %522, i64 %637
  %642 = load i8, i8* %641, align 1
  %643 = getelementptr inbounds i8, i8* %626, i64 6
  store i8 %642, i8* %643, align 1
  %644 = getelementptr inbounds i8, i8* %525, i64 %637
  %645 = load i8, i8* %644, align 1
  %646 = getelementptr inbounds i8, i8* %626, i64 5
  store i8 %645, i8* %646, align 1
  store i8 -1, i8* %636, align 1
  %647 = getelementptr inbounds i8, i8* %626, i64 8
  %648 = add nuw nsw i64 %625, 2
  %649 = icmp eq i64 %648, %492
  br i1 %649, label %509, label %624, !llvm.loop !49

650:                                              ; preds = %5, %5
  %651 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %652 = load i32, i32* %651, align 8
  %653 = icmp sgt i32 %4, 0
  br i1 %653, label %654, label %888

654:                                              ; preds = %650
  %655 = getelementptr inbounds i8**, i8*** %1, i64 1
  %656 = getelementptr inbounds i8**, i8*** %1, i64 2
  %657 = icmp eq i32 %652, 0
  %658 = zext i32 %652 to i64
  %659 = shl nuw nsw i64 %658, 2
  %660 = and i64 %658, 4294967280
  %661 = add nsw i64 %660, -16
  %662 = lshr exact i64 %661, 4
  %663 = add nuw nsw i64 %662, 1
  %664 = icmp ult i32 %652, 16
  %665 = and i64 %658, 4294967280
  %666 = shl nuw nsw i64 %665, 2
  %667 = and i64 %663, 1
  %668 = icmp eq i64 %661, 0
  %669 = sub nuw nsw i64 %663, %667
  %670 = icmp eq i64 %667, 0
  %671 = icmp eq i64 %665, %658
  %672 = and i64 %658, 1
  %673 = icmp eq i64 %672, 0
  %674 = sub nsw i64 0, %658
  br label %677

675:                                              ; preds = %786, %790, %769, %677
  %676 = icmp sgt i32 %681, 0
  br i1 %676, label %677, label %888

677:                                              ; preds = %675, %654
  %678 = phi i32 [ %4, %654 ], [ %681, %675 ]
  %679 = phi i8** [ %3, %654 ], [ %693, %675 ]
  %680 = phi i32 [ %2, %654 ], [ %692, %675 ]
  %681 = add nsw i32 %678, -1
  %682 = load i8**, i8*** %1, align 8
  %683 = zext i32 %680 to i64
  %684 = getelementptr inbounds i8*, i8** %682, i64 %683
  %685 = load i8*, i8** %684, align 8
  %686 = load i8**, i8*** %655, align 8
  %687 = getelementptr inbounds i8*, i8** %686, i64 %683
  %688 = load i8*, i8** %687, align 8
  %689 = load i8**, i8*** %656, align 8
  %690 = getelementptr inbounds i8*, i8** %689, i64 %683
  %691 = load i8*, i8** %690, align 8
  %692 = add i32 %680, 1
  %693 = getelementptr inbounds i8*, i8** %679, i64 1
  br i1 %657, label %675, label %694

694:                                              ; preds = %677
  %695 = load i8*, i8** %679, align 8
  br i1 %664, label %770, label %696

696:                                              ; preds = %694
  %697 = getelementptr i8, i8* %695, i64 %659
  %698 = getelementptr i8, i8* %685, i64 %658
  %699 = getelementptr i8, i8* %688, i64 %658
  %700 = getelementptr i8, i8* %691, i64 %658
  %701 = icmp ult i8* %695, %698
  %702 = icmp ult i8* %685, %697
  %703 = and i1 %701, %702
  %704 = icmp ult i8* %695, %699
  %705 = icmp ult i8* %688, %697
  %706 = and i1 %704, %705
  %707 = or i1 %703, %706
  %708 = icmp ult i8* %695, %700
  %709 = icmp ult i8* %691, %697
  %710 = and i1 %708, %709
  %711 = or i1 %707, %710
  br i1 %711, label %770, label %712

712:                                              ; preds = %696
  %713 = getelementptr i8, i8* %695, i64 %666
  br i1 %668, label %751, label %714

714:                                              ; preds = %712, %714
  %715 = phi i64 [ %748, %714 ], [ 0, %712 ]
  %716 = phi i64 [ %749, %714 ], [ %669, %712 ]
  %717 = shl i64 %715, 2
  %718 = getelementptr i8, i8* %695, i64 %717
  %719 = getelementptr inbounds i8, i8* %685, i64 %715
  %720 = bitcast i8* %719 to <16 x i8>*
  %721 = load <16 x i8>, <16 x i8>* %720, align 1, !alias.scope !50
  %722 = getelementptr inbounds i8, i8* %688, i64 %715
  %723 = bitcast i8* %722 to <16 x i8>*
  %724 = load <16 x i8>, <16 x i8>* %723, align 1, !alias.scope !53
  %725 = getelementptr inbounds i8, i8* %691, i64 %715
  %726 = bitcast i8* %725 to <16 x i8>*
  %727 = load <16 x i8>, <16 x i8>* %726, align 1, !alias.scope !55
  %728 = bitcast i8* %718 to <64 x i8>*
  %729 = shufflevector <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i8> %721, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %730 = shufflevector <16 x i8> %724, <16 x i8> %727, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %731 = shufflevector <32 x i8> %729, <32 x i8> %730, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %731, <64 x i8>* %728, align 1
  %732 = or i64 %715, 16
  %733 = shl i64 %732, 2
  %734 = getelementptr i8, i8* %695, i64 %733
  %735 = getelementptr inbounds i8, i8* %685, i64 %732
  %736 = bitcast i8* %735 to <16 x i8>*
  %737 = load <16 x i8>, <16 x i8>* %736, align 1, !alias.scope !50
  %738 = getelementptr inbounds i8, i8* %688, i64 %732
  %739 = bitcast i8* %738 to <16 x i8>*
  %740 = load <16 x i8>, <16 x i8>* %739, align 1, !alias.scope !53
  %741 = getelementptr inbounds i8, i8* %691, i64 %732
  %742 = bitcast i8* %741 to <16 x i8>*
  %743 = load <16 x i8>, <16 x i8>* %742, align 1, !alias.scope !55
  %744 = bitcast i8* %734 to <64 x i8>*
  %745 = shufflevector <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i8> %737, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %746 = shufflevector <16 x i8> %740, <16 x i8> %743, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %747 = shufflevector <32 x i8> %745, <32 x i8> %746, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %747, <64 x i8>* %744, align 1
  %748 = add i64 %715, 32
  %749 = add i64 %716, -2
  %750 = icmp eq i64 %749, 0
  br i1 %750, label %751, label %714, !llvm.loop !57

751:                                              ; preds = %714, %712
  %752 = phi i64 [ 0, %712 ], [ %748, %714 ]
  br i1 %670, label %769, label %753

753:                                              ; preds = %751
  %754 = shl i64 %752, 2
  %755 = getelementptr i8, i8* %695, i64 %754
  %756 = getelementptr inbounds i8, i8* %685, i64 %752
  %757 = bitcast i8* %756 to <16 x i8>*
  %758 = load <16 x i8>, <16 x i8>* %757, align 1, !alias.scope !50
  %759 = getelementptr inbounds i8, i8* %688, i64 %752
  %760 = bitcast i8* %759 to <16 x i8>*
  %761 = load <16 x i8>, <16 x i8>* %760, align 1, !alias.scope !53
  %762 = getelementptr inbounds i8, i8* %691, i64 %752
  %763 = bitcast i8* %762 to <16 x i8>*
  %764 = load <16 x i8>, <16 x i8>* %763, align 1, !alias.scope !55
  %765 = bitcast i8* %755 to <64 x i8>*
  %766 = shufflevector <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i8> %758, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %767 = shufflevector <16 x i8> %761, <16 x i8> %764, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %768 = shufflevector <32 x i8> %766, <32 x i8> %767, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %768, <64 x i8>* %765, align 1
  br label %769

769:                                              ; preds = %751, %753
  br i1 %671, label %675, label %770

770:                                              ; preds = %769, %696, %694
  %771 = phi i64 [ 0, %696 ], [ 0, %694 ], [ %665, %769 ]
  %772 = phi i8* [ %695, %696 ], [ %695, %694 ], [ %713, %769 ]
  %773 = xor i64 %771, -1
  br i1 %673, label %786, label %774

774:                                              ; preds = %770
  %775 = getelementptr inbounds i8, i8* %685, i64 %771
  %776 = load i8, i8* %775, align 1
  %777 = getelementptr inbounds i8, i8* %772, i64 1
  store i8 %776, i8* %777, align 1
  %778 = getelementptr inbounds i8, i8* %688, i64 %771
  %779 = load i8, i8* %778, align 1
  %780 = getelementptr inbounds i8, i8* %772, i64 2
  store i8 %779, i8* %780, align 1
  %781 = getelementptr inbounds i8, i8* %691, i64 %771
  %782 = load i8, i8* %781, align 1
  %783 = getelementptr inbounds i8, i8* %772, i64 3
  store i8 %782, i8* %783, align 1
  store i8 -1, i8* %772, align 1
  %784 = getelementptr inbounds i8, i8* %772, i64 4
  %785 = or i64 %771, 1
  br label %786

786:                                              ; preds = %774, %770
  %787 = phi i64 [ %785, %774 ], [ %771, %770 ]
  %788 = phi i8* [ %784, %774 ], [ %772, %770 ]
  %789 = icmp eq i64 %773, %674
  br i1 %789, label %675, label %790

790:                                              ; preds = %786, %790
  %791 = phi i64 [ %814, %790 ], [ %787, %786 ]
  %792 = phi i8* [ %813, %790 ], [ %788, %786 ]
  %793 = getelementptr inbounds i8, i8* %685, i64 %791
  %794 = load i8, i8* %793, align 1
  %795 = getelementptr inbounds i8, i8* %792, i64 1
  store i8 %794, i8* %795, align 1
  %796 = getelementptr inbounds i8, i8* %688, i64 %791
  %797 = load i8, i8* %796, align 1
  %798 = getelementptr inbounds i8, i8* %792, i64 2
  store i8 %797, i8* %798, align 1
  %799 = getelementptr inbounds i8, i8* %691, i64 %791
  %800 = load i8, i8* %799, align 1
  %801 = getelementptr inbounds i8, i8* %792, i64 3
  store i8 %800, i8* %801, align 1
  store i8 -1, i8* %792, align 1
  %802 = getelementptr inbounds i8, i8* %792, i64 4
  %803 = add nuw nsw i64 %791, 1
  %804 = getelementptr inbounds i8, i8* %685, i64 %803
  %805 = load i8, i8* %804, align 1
  %806 = getelementptr inbounds i8, i8* %792, i64 5
  store i8 %805, i8* %806, align 1
  %807 = getelementptr inbounds i8, i8* %688, i64 %803
  %808 = load i8, i8* %807, align 1
  %809 = getelementptr inbounds i8, i8* %792, i64 6
  store i8 %808, i8* %809, align 1
  %810 = getelementptr inbounds i8, i8* %691, i64 %803
  %811 = load i8, i8* %810, align 1
  %812 = getelementptr inbounds i8, i8* %792, i64 7
  store i8 %811, i8* %812, align 1
  store i8 -1, i8* %802, align 1
  %813 = getelementptr inbounds i8, i8* %792, i64 8
  %814 = add nuw nsw i64 %791, 2
  %815 = icmp eq i64 %814, %658
  br i1 %815, label %675, label %790, !llvm.loop !58

816:                                              ; preds = %5
  %817 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %818 = load i32, i32* %817, align 8
  %819 = icmp sgt i32 %4, 0
  br i1 %819, label %820, label %888

820:                                              ; preds = %816
  %821 = getelementptr inbounds i8**, i8*** %1, i64 1
  %822 = getelementptr inbounds i8**, i8*** %1, i64 2
  %823 = icmp eq i32 %818, 0
  %824 = zext i32 %818 to i64
  %825 = and i64 %824, 1
  %826 = icmp eq i32 %818, 1
  %827 = sub nsw i64 %824, %825
  %828 = icmp eq i64 %825, 0
  br label %843

829:                                              ; preds = %862, %860
  %830 = phi i64 [ 0, %860 ], [ %885, %862 ]
  %831 = phi i8* [ %861, %860 ], [ %884, %862 ]
  br i1 %828, label %841, label %832

832:                                              ; preds = %829
  %833 = getelementptr inbounds i8, i8* %851, i64 %830
  %834 = load i8, i8* %833, align 1
  store i8 %834, i8* %831, align 1
  %835 = getelementptr inbounds i8, i8* %854, i64 %830
  %836 = load i8, i8* %835, align 1
  %837 = getelementptr inbounds i8, i8* %831, i64 1
  store i8 %836, i8* %837, align 1
  %838 = getelementptr inbounds i8, i8* %857, i64 %830
  %839 = load i8, i8* %838, align 1
  %840 = getelementptr inbounds i8, i8* %831, i64 2
  store i8 %839, i8* %840, align 1
  br label %841

841:                                              ; preds = %832, %829, %843
  %842 = icmp sgt i32 %847, 0
  br i1 %842, label %843, label %888

843:                                              ; preds = %841, %820
  %844 = phi i32 [ %4, %820 ], [ %847, %841 ]
  %845 = phi i8** [ %3, %820 ], [ %859, %841 ]
  %846 = phi i32 [ %2, %820 ], [ %858, %841 ]
  %847 = add nsw i32 %844, -1
  %848 = load i8**, i8*** %1, align 8
  %849 = zext i32 %846 to i64
  %850 = getelementptr inbounds i8*, i8** %848, i64 %849
  %851 = load i8*, i8** %850, align 8
  %852 = load i8**, i8*** %821, align 8
  %853 = getelementptr inbounds i8*, i8** %852, i64 %849
  %854 = load i8*, i8** %853, align 8
  %855 = load i8**, i8*** %822, align 8
  %856 = getelementptr inbounds i8*, i8** %855, i64 %849
  %857 = load i8*, i8** %856, align 8
  %858 = add i32 %846, 1
  %859 = getelementptr inbounds i8*, i8** %845, i64 1
  br i1 %823, label %841, label %860

860:                                              ; preds = %843
  %861 = load i8*, i8** %845, align 8
  br i1 %826, label %829, label %862

862:                                              ; preds = %860, %862
  %863 = phi i64 [ %885, %862 ], [ 0, %860 ]
  %864 = phi i8* [ %884, %862 ], [ %861, %860 ]
  %865 = phi i64 [ %886, %862 ], [ %827, %860 ]
  %866 = getelementptr inbounds i8, i8* %851, i64 %863
  %867 = load i8, i8* %866, align 1
  store i8 %867, i8* %864, align 1
  %868 = getelementptr inbounds i8, i8* %854, i64 %863
  %869 = load i8, i8* %868, align 1
  %870 = getelementptr inbounds i8, i8* %864, i64 1
  store i8 %869, i8* %870, align 1
  %871 = getelementptr inbounds i8, i8* %857, i64 %863
  %872 = load i8, i8* %871, align 1
  %873 = getelementptr inbounds i8, i8* %864, i64 2
  store i8 %872, i8* %873, align 1
  %874 = getelementptr inbounds i8, i8* %864, i64 3
  %875 = or i64 %863, 1
  %876 = getelementptr inbounds i8, i8* %851, i64 %875
  %877 = load i8, i8* %876, align 1
  store i8 %877, i8* %874, align 1
  %878 = getelementptr inbounds i8, i8* %854, i64 %875
  %879 = load i8, i8* %878, align 1
  %880 = getelementptr inbounds i8, i8* %864, i64 4
  store i8 %879, i8* %880, align 1
  %881 = getelementptr inbounds i8, i8* %857, i64 %875
  %882 = load i8, i8* %881, align 1
  %883 = getelementptr inbounds i8, i8* %864, i64 5
  store i8 %882, i8* %883, align 1
  %884 = getelementptr inbounds i8, i8* %864, i64 6
  %885 = add nuw nsw i64 %863, 2
  %886 = add i64 %865, -2
  %887 = icmp eq i64 %886, 0
  br i1 %887, label %829, label %862

888:                                              ; preds = %675, %509, %343, %271, %105, %33, %841, %816, %650, %484, %318, %246, %80, %8
  ret void
}

declare i32 @jsimd_can_ycc_rgb565() local_unnamed_addr #3

declare void @jsimd_ycc_rgb565_convert(%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @ycc_rgb565_convert(%struct.jpeg_decompress_struct* nocapture readonly, i8*** nocapture readonly, i32, i8** nocapture readonly, i32) #2 {
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 86
  %7 = bitcast %struct.jpeg_color_deconverter** %6 to %struct.my_color_deconverter**
  %8 = load %struct.my_color_deconverter*, %struct.my_color_deconverter** %7, align 8
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 65
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %8, i64 0, i32 1
  %12 = load i32*, i32** %11, align 8
  %13 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %8, i64 0, i32 2
  %14 = load i32*, i32** %13, align 8
  %15 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %8, i64 0, i32 3
  %16 = load i64*, i64** %15, align 8
  %17 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %8, i64 0, i32 4
  %18 = load i64*, i64** %17, align 8
  %19 = icmp sgt i32 %4, 0
  br i1 %19, label %20, label %247

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds i8**, i8*** %1, i64 1
  %24 = getelementptr inbounds i8**, i8*** %1, i64 2
  br label %25

25:                                               ; preds = %245, %20
  %26 = phi i32 [ %4, %20 ], [ %30, %245 ]
  %27 = phi i32 [ %22, %20 ], [ %98, %245 ]
  %28 = phi i32 [ %2, %20 ], [ %41, %245 ]
  %29 = phi i8** [ %3, %20 ], [ %42, %245 ]
  %30 = add nsw i32 %26, -1
  %31 = load i8**, i8*** %1, align 8
  %32 = zext i32 %28 to i64
  %33 = getelementptr inbounds i8*, i8** %31, i64 %32
  %34 = load i8*, i8** %33, align 8
  %35 = load i8**, i8*** %23, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 %32
  %37 = load i8*, i8** %36, align 8
  %38 = load i8**, i8*** %24, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 %32
  %40 = load i8*, i8** %39, align 8
  %41 = add i32 %28, 1
  %42 = getelementptr inbounds i8*, i8** %29, i64 1
  %43 = load i8*, i8** %29, align 8
  %44 = ptrtoint i8* %43 to i64
  %45 = and i64 %44, 3
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %93, label %47

47:                                               ; preds = %25
  %48 = getelementptr inbounds i8, i8* %34, i64 1
  %49 = load i8, i8* %34, align 1
  %50 = zext i8 %49 to i32
  %51 = getelementptr inbounds i8, i8* %37, i64 1
  %52 = load i8, i8* %37, align 1
  %53 = getelementptr inbounds i8, i8* %40, i64 1
  %54 = load i8, i8* %40, align 1
  %55 = zext i8 %54 to i64
  %56 = getelementptr inbounds i32, i32* %12, i64 %55
  %57 = load i32, i32* %56, align 4
  %58 = add nsw i32 %57, %50
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %10, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i16
  %63 = zext i8 %52 to i64
  %64 = getelementptr inbounds i64, i64* %18, i64 %63
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds i64, i64* %16, i64 %55
  %67 = load i64, i64* %66, align 8
  %68 = add nsw i64 %67, %65
  %69 = lshr i64 %68, 16
  %70 = trunc i64 %69 to i32
  %71 = add nsw i32 %70, %50
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %10, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i16
  %76 = getelementptr inbounds i32, i32* %14, i64 %63
  %77 = load i32, i32* %76, align 4
  %78 = add nsw i32 %77, %50
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %10, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = shl nuw i16 %62, 8
  %83 = and i16 %82, -2048
  %84 = shl nuw nsw i16 %75, 3
  %85 = and i16 %84, 2016
  %86 = or i16 %85, %83
  %87 = lshr i8 %81, 3
  %88 = zext i8 %87 to i16
  %89 = or i16 %86, %88
  %90 = bitcast i8* %43 to i16*
  store i16 %89, i16* %90, align 2
  %91 = getelementptr inbounds i8, i8* %43, i64 2
  %92 = add i32 %27, -1
  br label %93

93:                                               ; preds = %47, %25
  %94 = phi i8* [ %91, %47 ], [ %43, %25 ]
  %95 = phi i8* [ %48, %47 ], [ %34, %25 ]
  %96 = phi i8* [ %51, %47 ], [ %37, %25 ]
  %97 = phi i8* [ %53, %47 ], [ %40, %25 ]
  %98 = phi i32 [ %92, %47 ], [ %27, %25 ]
  %99 = lshr i32 %98, 1
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %197, label %101

101:                                              ; preds = %93, %101
  %102 = phi i32 [ %195, %101 ], [ 0, %93 ]
  %103 = phi i8* [ %154, %101 ], [ %97, %93 ]
  %104 = phi i8* [ %152, %101 ], [ %96, %93 ]
  %105 = phi i8* [ %149, %101 ], [ %95, %93 ]
  %106 = phi i8* [ %194, %101 ], [ %94, %93 ]
  %107 = getelementptr inbounds i8, i8* %105, i64 1
  %108 = load i8, i8* %105, align 1
  %109 = zext i8 %108 to i32
  %110 = getelementptr inbounds i8, i8* %104, i64 1
  %111 = load i8, i8* %104, align 1
  %112 = getelementptr inbounds i8, i8* %103, i64 1
  %113 = load i8, i8* %103, align 1
  %114 = zext i8 %113 to i64
  %115 = getelementptr inbounds i32, i32* %12, i64 %114
  %116 = load i32, i32* %115, align 4
  %117 = add nsw i32 %116, %109
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i8, i8* %10, i64 %118
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = zext i8 %111 to i64
  %123 = getelementptr inbounds i64, i64* %18, i64 %122
  %124 = load i64, i64* %123, align 8
  %125 = getelementptr inbounds i64, i64* %16, i64 %114
  %126 = load i64, i64* %125, align 8
  %127 = add nsw i64 %126, %124
  %128 = lshr i64 %127, 16
  %129 = trunc i64 %128 to i32
  %130 = add nsw i32 %129, %109
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %10, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = getelementptr inbounds i32, i32* %14, i64 %122
  %136 = load i32, i32* %135, align 4
  %137 = add nsw i32 %136, %109
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds i8, i8* %10, i64 %138
  %140 = load i8, i8* %139, align 1
  %141 = shl nuw nsw i32 %121, 8
  %142 = and i32 %141, 63488
  %143 = shl nuw nsw i32 %134, 3
  %144 = and i32 %143, 2016
  %145 = or i32 %144, %142
  %146 = lshr i8 %140, 3
  %147 = zext i8 %146 to i32
  %148 = or i32 %145, %147
  %149 = getelementptr inbounds i8, i8* %105, i64 2
  %150 = load i8, i8* %107, align 1
  %151 = zext i8 %150 to i32
  %152 = getelementptr inbounds i8, i8* %104, i64 2
  %153 = load i8, i8* %110, align 1
  %154 = getelementptr inbounds i8, i8* %103, i64 2
  %155 = load i8, i8* %112, align 1
  %156 = zext i8 %155 to i64
  %157 = getelementptr inbounds i32, i32* %12, i64 %156
  %158 = load i32, i32* %157, align 4
  %159 = add nsw i32 %158, %151
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds i8, i8* %10, i64 %160
  %162 = load i8, i8* %161, align 1
  %163 = zext i8 %162 to i32
  %164 = zext i8 %153 to i64
  %165 = getelementptr inbounds i64, i64* %18, i64 %164
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds i64, i64* %16, i64 %156
  %168 = load i64, i64* %167, align 8
  %169 = add nsw i64 %168, %166
  %170 = lshr i64 %169, 16
  %171 = trunc i64 %170 to i32
  %172 = add nsw i32 %171, %151
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds i8, i8* %10, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i32
  %177 = getelementptr inbounds i32, i32* %14, i64 %164
  %178 = load i32, i32* %177, align 4
  %179 = add nsw i32 %178, %151
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds i8, i8* %10, i64 %180
  %182 = load i8, i8* %181, align 1
  %183 = shl nuw nsw i32 %163, 8
  %184 = and i32 %183, 63488
  %185 = shl nuw nsw i32 %176, 3
  %186 = and i32 %185, 2016
  %187 = or i32 %186, %184
  %188 = lshr i8 %182, 3
  %189 = zext i8 %188 to i32
  %190 = or i32 %187, %189
  %191 = shl nuw i32 %190, 16
  %192 = or i32 %148, %191
  %193 = bitcast i8* %106 to i32*
  store i32 %192, i32* %193, align 4
  %194 = getelementptr inbounds i8, i8* %106, i64 4
  %195 = add nuw nsw i32 %102, 1
  %196 = icmp eq i32 %195, %99
  br i1 %196, label %197, label %101

197:                                              ; preds = %101, %93
  %198 = phi i8* [ %94, %93 ], [ %194, %101 ]
  %199 = phi i8* [ %95, %93 ], [ %149, %101 ]
  %200 = phi i8* [ %96, %93 ], [ %152, %101 ]
  %201 = phi i8* [ %97, %93 ], [ %154, %101 ]
  %202 = and i32 %98, 1
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %245, label %204

204:                                              ; preds = %197
  %205 = load i8, i8* %199, align 1
  %206 = zext i8 %205 to i32
  %207 = load i8, i8* %200, align 1
  %208 = load i8, i8* %201, align 1
  %209 = zext i8 %208 to i64
  %210 = getelementptr inbounds i32, i32* %12, i64 %209
  %211 = load i32, i32* %210, align 4
  %212 = add nsw i32 %211, %206
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds i8, i8* %10, i64 %213
  %215 = load i8, i8* %214, align 1
  %216 = zext i8 %215 to i16
  %217 = zext i8 %207 to i64
  %218 = getelementptr inbounds i64, i64* %18, i64 %217
  %219 = load i64, i64* %218, align 8
  %220 = getelementptr inbounds i64, i64* %16, i64 %209
  %221 = load i64, i64* %220, align 8
  %222 = add nsw i64 %221, %219
  %223 = lshr i64 %222, 16
  %224 = trunc i64 %223 to i32
  %225 = add nsw i32 %224, %206
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds i8, i8* %10, i64 %226
  %228 = load i8, i8* %227, align 1
  %229 = zext i8 %228 to i16
  %230 = getelementptr inbounds i32, i32* %14, i64 %217
  %231 = load i32, i32* %230, align 4
  %232 = add nsw i32 %231, %206
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds i8, i8* %10, i64 %233
  %235 = load i8, i8* %234, align 1
  %236 = shl nuw i16 %216, 8
  %237 = and i16 %236, -2048
  %238 = shl nuw nsw i16 %229, 3
  %239 = and i16 %238, 2016
  %240 = or i16 %239, %237
  %241 = lshr i8 %235, 3
  %242 = zext i8 %241 to i16
  %243 = or i16 %240, %242
  %244 = bitcast i8* %198 to i16*
  store i16 %243, i16* %244, align 2
  br label %245

245:                                              ; preds = %204, %197
  %246 = icmp sgt i32 %30, 0
  br i1 %246, label %25, label %247

247:                                              ; preds = %245, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @gray_rgb565_convert(%struct.jpeg_decompress_struct* nocapture readonly, i8*** nocapture readonly, i32, i8** nocapture readonly, i32) #2 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %157

7:                                                ; preds = %5
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %9 = load i32, i32* %8, align 8
  br label %10

10:                                               ; preds = %155, %7
  %11 = phi i32 [ %15, %155 ], [ %4, %7 ]
  %12 = phi i32 [ %44, %155 ], [ %9, %7 ]
  %13 = phi i8** [ %21, %155 ], [ %3, %7 ]
  %14 = phi i32 [ %17, %155 ], [ %2, %7 ]
  %15 = add nsw i32 %11, -1
  %16 = load i8**, i8*** %1, align 8
  %17 = add i32 %14, 1
  %18 = zext i32 %14 to i64
  %19 = getelementptr inbounds i8*, i8** %16, i64 %18
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds i8*, i8** %13, i64 1
  %22 = load i8*, i8** %13, align 8
  %23 = ptrtoint i8* %22 to i64
  %24 = and i64 %23, 3
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %41, label %26

26:                                               ; preds = %10
  %27 = getelementptr inbounds i8, i8* %20, i64 1
  %28 = load i8, i8* %20, align 1
  %29 = zext i8 %28 to i32
  %30 = shl nuw nsw i32 %29, 8
  %31 = and i32 %30, 63488
  %32 = shl nuw nsw i32 %29, 3
  %33 = and i32 %32, 2016
  %34 = lshr i32 %29, 3
  %35 = or i32 %33, %34
  %36 = or i32 %35, %31
  %37 = trunc i32 %36 to i16
  %38 = bitcast i8* %22 to i16*
  store i16 %37, i16* %38, align 2
  %39 = getelementptr inbounds i8, i8* %22, i64 2
  %40 = add i32 %12, -1
  br label %41

41:                                               ; preds = %26, %10
  %42 = phi i8* [ %27, %26 ], [ %20, %10 ]
  %43 = phi i8* [ %39, %26 ], [ %22, %10 ]
  %44 = phi i32 [ %40, %26 ], [ %12, %10 ]
  %45 = lshr i32 %44, 1
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %138, label %47

47:                                               ; preds = %41
  %48 = add nsw i32 %45, -1
  %49 = zext i32 %48 to i64
  %50 = add nuw nsw i64 %49, 1
  %51 = icmp ult i64 %50, 4
  br i1 %51, label %104, label %52

52:                                               ; preds = %47
  %53 = getelementptr i8, i8* %43, i64 4
  %54 = add nsw i32 %45, -1
  %55 = zext i32 %54 to i64
  %56 = shl nuw nsw i64 %55, 2
  %57 = getelementptr i8, i8* %53, i64 %56
  %58 = getelementptr i8, i8* %42, i64 2
  %59 = shl nuw nsw i64 %55, 1
  %60 = getelementptr i8, i8* %58, i64 %59
  %61 = icmp ult i8* %43, %60
  %62 = icmp ult i8* %42, %57
  %63 = and i1 %61, %62
  br i1 %63, label %104, label %64

64:                                               ; preds = %52
  %65 = and i64 %50, 8589934588
  %66 = trunc i64 %65 to i32
  %67 = shl nuw nsw i64 %65, 2
  %68 = getelementptr i8, i8* %43, i64 %67
  %69 = shl nuw nsw i64 %65, 1
  %70 = getelementptr i8, i8* %42, i64 %69
  br label %71

71:                                               ; preds = %71, %64
  %72 = phi i64 [ 0, %64 ], [ %100, %71 ]
  %73 = shl i64 %72, 2
  %74 = getelementptr i8, i8* %43, i64 %73
  %75 = shl i64 %72, 1
  %76 = getelementptr i8, i8* %42, i64 %75
  %77 = bitcast i8* %76 to <8 x i8>*
  %78 = load <8 x i8>, <8 x i8>* %77, align 1
  %79 = shufflevector <8 x i8> %78, <8 x i8> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %80 = shufflevector <8 x i8> %78, <8 x i8> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %81 = zext <4 x i8> %79 to <4 x i32>
  %82 = shl nuw nsw <4 x i32> %81, <i32 8, i32 8, i32 8, i32 8>
  %83 = and <4 x i32> %82, <i32 63488, i32 63488, i32 63488, i32 63488>
  %84 = shl nuw nsw <4 x i32> %81, <i32 3, i32 3, i32 3, i32 3>
  %85 = and <4 x i32> %84, <i32 2016, i32 2016, i32 2016, i32 2016>
  %86 = lshr <4 x i32> %81, <i32 3, i32 3, i32 3, i32 3>
  %87 = zext <4 x i8> %80 to <4 x i32>
  %88 = shl nuw nsw <4 x i32> %87, <i32 8, i32 8, i32 8, i32 8>
  %89 = and <4 x i32> %88, <i32 63488, i32 63488, i32 63488, i32 63488>
  %90 = shl nuw nsw <4 x i32> %87, <i32 3, i32 3, i32 3, i32 3>
  %91 = and <4 x i32> %90, <i32 2016, i32 2016, i32 2016, i32 2016>
  %92 = lshr <4 x i32> %87, <i32 3, i32 3, i32 3, i32 3>
  %93 = or <4 x i32> %91, %92
  %94 = or <4 x i32> %93, %89
  %95 = shl nuw <4 x i32> %94, <i32 16, i32 16, i32 16, i32 16>
  %96 = or <4 x i32> %85, %86
  %97 = or <4 x i32> %96, %83
  %98 = or <4 x i32> %97, %95
  %99 = bitcast i8* %74 to <4 x i32>*
  store <4 x i32> %98, <4 x i32>* %99, align 4, !alias.scope !59, !noalias !62
  %100 = add i64 %72, 4
  %101 = icmp eq i64 %100, %65
  br i1 %101, label %102, label %71, !llvm.loop !64

102:                                              ; preds = %71
  %103 = icmp eq i64 %50, %65
  br i1 %103, label %138, label %104

104:                                              ; preds = %102, %52, %47
  %105 = phi i32 [ 0, %52 ], [ 0, %47 ], [ %66, %102 ]
  %106 = phi i8* [ %43, %52 ], [ %43, %47 ], [ %68, %102 ]
  %107 = phi i8* [ %42, %52 ], [ %42, %47 ], [ %70, %102 ]
  br label %108

108:                                              ; preds = %104, %108
  %109 = phi i32 [ %136, %108 ], [ %105, %104 ]
  %110 = phi i8* [ %135, %108 ], [ %106, %104 ]
  %111 = phi i8* [ %120, %108 ], [ %107, %104 ]
  %112 = getelementptr inbounds i8, i8* %111, i64 1
  %113 = load i8, i8* %111, align 1
  %114 = zext i8 %113 to i32
  %115 = shl nuw nsw i32 %114, 8
  %116 = and i32 %115, 63488
  %117 = shl nuw nsw i32 %114, 3
  %118 = and i32 %117, 2016
  %119 = lshr i32 %114, 3
  %120 = getelementptr inbounds i8, i8* %111, i64 2
  %121 = load i8, i8* %112, align 1
  %122 = zext i8 %121 to i32
  %123 = shl nuw nsw i32 %122, 8
  %124 = and i32 %123, 63488
  %125 = shl nuw nsw i32 %122, 3
  %126 = and i32 %125, 2016
  %127 = lshr i32 %122, 3
  %128 = or i32 %126, %127
  %129 = or i32 %128, %124
  %130 = shl nuw i32 %129, 16
  %131 = or i32 %118, %119
  %132 = or i32 %131, %116
  %133 = or i32 %132, %130
  %134 = bitcast i8* %110 to i32*
  store i32 %133, i32* %134, align 4
  %135 = getelementptr inbounds i8, i8* %110, i64 4
  %136 = add nuw nsw i32 %109, 1
  %137 = icmp eq i32 %136, %45
  br i1 %137, label %138, label %108, !llvm.loop !65

138:                                              ; preds = %108, %102, %41
  %139 = phi i8* [ %42, %41 ], [ %70, %102 ], [ %120, %108 ]
  %140 = phi i8* [ %43, %41 ], [ %68, %102 ], [ %135, %108 ]
  %141 = and i32 %44, 1
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %155, label %143

143:                                              ; preds = %138
  %144 = load i8, i8* %139, align 1
  %145 = zext i8 %144 to i32
  %146 = shl nuw nsw i32 %145, 8
  %147 = and i32 %146, 63488
  %148 = shl nuw nsw i32 %145, 3
  %149 = and i32 %148, 2016
  %150 = lshr i32 %145, 3
  %151 = or i32 %149, %150
  %152 = or i32 %151, %147
  %153 = trunc i32 %152 to i16
  %154 = bitcast i8* %140 to i16*
  store i16 %153, i16* %154, align 2
  br label %155

155:                                              ; preds = %143, %138
  %156 = icmp sgt i32 %15, 0
  br i1 %156, label %10, label %157

157:                                              ; preds = %155, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @rgb_rgb565_convert(%struct.jpeg_decompress_struct* nocapture readonly, i8*** nocapture readonly, i32, i8** nocapture readonly, i32) #2 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %225

7:                                                ; preds = %5
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds i8**, i8*** %1, i64 1
  %11 = getelementptr inbounds i8**, i8*** %1, i64 2
  br label %12

12:                                               ; preds = %223, %7
  %13 = phi i32 [ %4, %7 ], [ %17, %223 ]
  %14 = phi i32 [ %9, %7 ], [ %59, %223 ]
  %15 = phi i8** [ %3, %7 ], [ %29, %223 ]
  %16 = phi i32 [ %2, %7 ], [ %28, %223 ]
  %17 = add nsw i32 %13, -1
  %18 = load i8**, i8*** %1, align 8
  %19 = zext i32 %16 to i64
  %20 = getelementptr inbounds i8*, i8** %18, i64 %19
  %21 = load i8*, i8** %20, align 8
  %22 = load i8**, i8*** %10, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 %19
  %24 = load i8*, i8** %23, align 8
  %25 = load i8**, i8*** %11, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 %19
  %27 = load i8*, i8** %26, align 8
  %28 = add i32 %16, 1
  %29 = getelementptr inbounds i8*, i8** %15, i64 1
  %30 = load i8*, i8** %15, align 8
  %31 = ptrtoint i8* %30 to i64
  %32 = and i64 %31, 3
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %54, label %34

34:                                               ; preds = %12
  %35 = getelementptr inbounds i8, i8* %21, i64 1
  %36 = load i8, i8* %21, align 1
  %37 = zext i8 %36 to i16
  %38 = getelementptr inbounds i8, i8* %24, i64 1
  %39 = load i8, i8* %24, align 1
  %40 = zext i8 %39 to i16
  %41 = getelementptr inbounds i8, i8* %27, i64 1
  %42 = load i8, i8* %27, align 1
  %43 = shl nuw i16 %37, 8
  %44 = and i16 %43, -2048
  %45 = shl nuw nsw i16 %40, 3
  %46 = and i16 %45, 2016
  %47 = or i16 %46, %44
  %48 = lshr i8 %42, 3
  %49 = zext i8 %48 to i16
  %50 = or i16 %47, %49
  %51 = bitcast i8* %30 to i16*
  store i16 %50, i16* %51, align 2
  %52 = getelementptr inbounds i8, i8* %30, i64 2
  %53 = add i32 %14, -1
  br label %54

54:                                               ; preds = %34, %12
  %55 = phi i8* [ %52, %34 ], [ %30, %12 ]
  %56 = phi i8* [ %35, %34 ], [ %21, %12 ]
  %57 = phi i8* [ %38, %34 ], [ %24, %12 ]
  %58 = phi i8* [ %41, %34 ], [ %27, %12 ]
  %59 = phi i32 [ %53, %34 ], [ %14, %12 ]
  %60 = lshr i32 %59, 1
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %201, label %62

62:                                               ; preds = %54
  %63 = add nsw i32 %60, -1
  %64 = zext i32 %63 to i64
  %65 = add nuw nsw i64 %64, 1
  %66 = icmp ult i64 %65, 4
  br i1 %66, label %151, label %67

67:                                               ; preds = %62
  %68 = getelementptr i8, i8* %55, i64 4
  %69 = add nsw i32 %60, -1
  %70 = zext i32 %69 to i64
  %71 = shl nuw nsw i64 %70, 2
  %72 = getelementptr i8, i8* %68, i64 %71
  %73 = getelementptr i8, i8* %56, i64 2
  %74 = shl nuw nsw i64 %70, 1
  %75 = getelementptr i8, i8* %73, i64 %74
  %76 = getelementptr i8, i8* %57, i64 2
  %77 = getelementptr i8, i8* %76, i64 %74
  %78 = getelementptr i8, i8* %58, i64 2
  %79 = getelementptr i8, i8* %78, i64 %74
  %80 = icmp ult i8* %55, %75
  %81 = icmp ult i8* %56, %72
  %82 = and i1 %80, %81
  %83 = icmp ult i8* %55, %77
  %84 = icmp ult i8* %57, %72
  %85 = and i1 %83, %84
  %86 = or i1 %82, %85
  %87 = icmp ult i8* %55, %79
  %88 = icmp ult i8* %58, %72
  %89 = and i1 %87, %88
  %90 = or i1 %86, %89
  br i1 %90, label %151, label %91

91:                                               ; preds = %67
  %92 = and i64 %65, 8589934588
  %93 = trunc i64 %92 to i32
  %94 = shl nuw nsw i64 %92, 1
  %95 = getelementptr i8, i8* %58, i64 %94
  %96 = shl nuw nsw i64 %92, 1
  %97 = getelementptr i8, i8* %57, i64 %96
  %98 = shl nuw nsw i64 %92, 1
  %99 = getelementptr i8, i8* %56, i64 %98
  %100 = shl nuw nsw i64 %92, 2
  %101 = getelementptr i8, i8* %55, i64 %100
  br label %102

102:                                              ; preds = %102, %91
  %103 = phi i64 [ 0, %91 ], [ %147, %102 ]
  %104 = shl i64 %103, 1
  %105 = getelementptr i8, i8* %58, i64 %104
  %106 = shl i64 %103, 1
  %107 = getelementptr i8, i8* %57, i64 %106
  %108 = shl i64 %103, 1
  %109 = getelementptr i8, i8* %56, i64 %108
  %110 = shl i64 %103, 2
  %111 = getelementptr i8, i8* %55, i64 %110
  %112 = bitcast i8* %109 to <8 x i8>*
  %113 = load <8 x i8>, <8 x i8>* %112, align 1
  %114 = shufflevector <8 x i8> %113, <8 x i8> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %115 = shufflevector <8 x i8> %113, <8 x i8> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %116 = zext <4 x i8> %114 to <4 x i32>
  %117 = bitcast i8* %107 to <8 x i8>*
  %118 = load <8 x i8>, <8 x i8>* %117, align 1
  %119 = shufflevector <8 x i8> %118, <8 x i8> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %120 = shufflevector <8 x i8> %118, <8 x i8> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %121 = zext <4 x i8> %119 to <4 x i32>
  %122 = bitcast i8* %105 to <8 x i8>*
  %123 = load <8 x i8>, <8 x i8>* %122, align 1
  %124 = shufflevector <8 x i8> %123, <8 x i8> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %125 = shufflevector <8 x i8> %123, <8 x i8> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %126 = shl nuw nsw <4 x i32> %116, <i32 8, i32 8, i32 8, i32 8>
  %127 = and <4 x i32> %126, <i32 63488, i32 63488, i32 63488, i32 63488>
  %128 = shl nuw nsw <4 x i32> %121, <i32 3, i32 3, i32 3, i32 3>
  %129 = and <4 x i32> %128, <i32 2016, i32 2016, i32 2016, i32 2016>
  %130 = or <4 x i32> %129, %127
  %131 = lshr <4 x i8> %124, <i8 3, i8 3, i8 3, i8 3>
  %132 = zext <4 x i8> %131 to <4 x i32>
  %133 = or <4 x i32> %130, %132
  %134 = zext <4 x i8> %115 to <4 x i32>
  %135 = zext <4 x i8> %120 to <4 x i32>
  %136 = shl nuw nsw <4 x i32> %134, <i32 8, i32 8, i32 8, i32 8>
  %137 = and <4 x i32> %136, <i32 63488, i32 63488, i32 63488, i32 63488>
  %138 = shl nuw nsw <4 x i32> %135, <i32 3, i32 3, i32 3, i32 3>
  %139 = and <4 x i32> %138, <i32 2016, i32 2016, i32 2016, i32 2016>
  %140 = or <4 x i32> %139, %137
  %141 = lshr <4 x i8> %125, <i8 3, i8 3, i8 3, i8 3>
  %142 = zext <4 x i8> %141 to <4 x i32>
  %143 = or <4 x i32> %140, %142
  %144 = shl nuw <4 x i32> %143, <i32 16, i32 16, i32 16, i32 16>
  %145 = or <4 x i32> %133, %144
  %146 = bitcast i8* %111 to <4 x i32>*
  store <4 x i32> %145, <4 x i32>* %146, align 4, !alias.scope !66, !noalias !69
  %147 = add i64 %103, 4
  %148 = icmp eq i64 %147, %92
  br i1 %148, label %149, label %102, !llvm.loop !73

149:                                              ; preds = %102
  %150 = icmp eq i64 %65, %92
  br i1 %150, label %201, label %151

151:                                              ; preds = %149, %67, %62
  %152 = phi i32 [ 0, %67 ], [ 0, %62 ], [ %93, %149 ]
  %153 = phi i8* [ %58, %67 ], [ %58, %62 ], [ %95, %149 ]
  %154 = phi i8* [ %57, %67 ], [ %57, %62 ], [ %97, %149 ]
  %155 = phi i8* [ %56, %67 ], [ %56, %62 ], [ %99, %149 ]
  %156 = phi i8* [ %55, %67 ], [ %55, %62 ], [ %101, %149 ]
  br label %157

157:                                              ; preds = %151, %157
  %158 = phi i32 [ %199, %157 ], [ %152, %151 ]
  %159 = phi i8* [ %185, %157 ], [ %153, %151 ]
  %160 = phi i8* [ %182, %157 ], [ %154, %151 ]
  %161 = phi i8* [ %179, %157 ], [ %155, %151 ]
  %162 = phi i8* [ %198, %157 ], [ %156, %151 ]
  %163 = getelementptr inbounds i8, i8* %161, i64 1
  %164 = load i8, i8* %161, align 1
  %165 = zext i8 %164 to i32
  %166 = getelementptr inbounds i8, i8* %160, i64 1
  %167 = load i8, i8* %160, align 1
  %168 = zext i8 %167 to i32
  %169 = getelementptr inbounds i8, i8* %159, i64 1
  %170 = load i8, i8* %159, align 1
  %171 = shl nuw nsw i32 %165, 8
  %172 = and i32 %171, 63488
  %173 = shl nuw nsw i32 %168, 3
  %174 = and i32 %173, 2016
  %175 = or i32 %174, %172
  %176 = lshr i8 %170, 3
  %177 = zext i8 %176 to i32
  %178 = or i32 %175, %177
  %179 = getelementptr inbounds i8, i8* %161, i64 2
  %180 = load i8, i8* %163, align 1
  %181 = zext i8 %180 to i32
  %182 = getelementptr inbounds i8, i8* %160, i64 2
  %183 = load i8, i8* %166, align 1
  %184 = zext i8 %183 to i32
  %185 = getelementptr inbounds i8, i8* %159, i64 2
  %186 = load i8, i8* %169, align 1
  %187 = shl nuw nsw i32 %181, 8
  %188 = and i32 %187, 63488
  %189 = shl nuw nsw i32 %184, 3
  %190 = and i32 %189, 2016
  %191 = or i32 %190, %188
  %192 = lshr i8 %186, 3
  %193 = zext i8 %192 to i32
  %194 = or i32 %191, %193
  %195 = shl nuw i32 %194, 16
  %196 = or i32 %178, %195
  %197 = bitcast i8* %162 to i32*
  store i32 %196, i32* %197, align 4
  %198 = getelementptr inbounds i8, i8* %162, i64 4
  %199 = add nuw nsw i32 %158, 1
  %200 = icmp eq i32 %199, %60
  br i1 %200, label %201, label %157, !llvm.loop !74

201:                                              ; preds = %157, %149, %54
  %202 = phi i8* [ %55, %54 ], [ %101, %149 ], [ %198, %157 ]
  %203 = phi i8* [ %56, %54 ], [ %99, %149 ], [ %179, %157 ]
  %204 = phi i8* [ %57, %54 ], [ %97, %149 ], [ %182, %157 ]
  %205 = phi i8* [ %58, %54 ], [ %95, %149 ], [ %185, %157 ]
  %206 = and i32 %59, 1
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %223, label %208

208:                                              ; preds = %201
  %209 = load i8, i8* %203, align 1
  %210 = zext i8 %209 to i16
  %211 = load i8, i8* %204, align 1
  %212 = zext i8 %211 to i16
  %213 = load i8, i8* %205, align 1
  %214 = shl nuw i16 %210, 8
  %215 = and i16 %214, -2048
  %216 = shl nuw nsw i16 %212, 3
  %217 = and i16 %216, 2016
  %218 = or i16 %217, %215
  %219 = lshr i8 %213, 3
  %220 = zext i8 %219 to i16
  %221 = or i16 %218, %220
  %222 = bitcast i8* %202 to i16*
  store i16 %221, i16* %222, align 2
  br label %223

223:                                              ; preds = %208, %201
  %224 = icmp sgt i32 %17, 0
  br i1 %224, label %12, label %225

225:                                              ; preds = %223, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @ycc_rgb565D_convert(%struct.jpeg_decompress_struct* nocapture readonly, i8*** nocapture readonly, i32, i8** nocapture readonly, i32) #2 {
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 86
  %7 = bitcast %struct.jpeg_color_deconverter** %6 to %struct.my_color_deconverter**
  %8 = load %struct.my_color_deconverter*, %struct.my_color_deconverter** %7, align 8
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 65
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %8, i64 0, i32 1
  %12 = load i32*, i32** %11, align 8
  %13 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %8, i64 0, i32 2
  %14 = load i32*, i32** %13, align 8
  %15 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %8, i64 0, i32 3
  %16 = load i64*, i64** %15, align 8
  %17 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %8, i64 0, i32 4
  %18 = load i64*, i64** %17, align 8
  %19 = icmp sgt i32 %4, 0
  br i1 %19, label %20, label %283

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 34
  %22 = load i32, i32* %21, align 8
  %23 = and i32 %22, 3
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds [4 x i64], [4 x i64]* @dither_matrix, i64 0, i64 %24
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds i8**, i8*** %1, i64 1
  %30 = getelementptr inbounds i8**, i8*** %1, i64 2
  br label %31

31:                                               ; preds = %281, %20
  %32 = phi i32 [ %4, %20 ], [ %37, %281 ]
  %33 = phi i64 [ %26, %20 ], [ %232, %281 ]
  %34 = phi i32 [ %28, %20 ], [ %110, %281 ]
  %35 = phi i32 [ %2, %20 ], [ %48, %281 ]
  %36 = phi i8** [ %3, %20 ], [ %49, %281 ]
  %37 = add nsw i32 %32, -1
  %38 = load i8**, i8*** %1, align 8
  %39 = zext i32 %35 to i64
  %40 = getelementptr inbounds i8*, i8** %38, i64 %39
  %41 = load i8*, i8** %40, align 8
  %42 = load i8**, i8*** %29, align 8
  %43 = getelementptr inbounds i8*, i8** %42, i64 %39
  %44 = load i8*, i8** %43, align 8
  %45 = load i8**, i8*** %30, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 %39
  %47 = load i8*, i8** %46, align 8
  %48 = add i32 %35, 1
  %49 = getelementptr inbounds i8*, i8** %36, i64 1
  %50 = load i8*, i8** %36, align 8
  %51 = ptrtoint i8* %50 to i64
  %52 = and i64 %51, 3
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %105, label %54

54:                                               ; preds = %31
  %55 = getelementptr inbounds i8, i8* %41, i64 1
  %56 = load i8, i8* %41, align 1
  %57 = zext i8 %56 to i32
  %58 = getelementptr inbounds i8, i8* %44, i64 1
  %59 = load i8, i8* %44, align 1
  %60 = getelementptr inbounds i8, i8* %47, i64 1
  %61 = load i8, i8* %47, align 1
  %62 = zext i8 %61 to i64
  %63 = getelementptr inbounds i32, i32* %12, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = add nsw i32 %64, %57
  %66 = sext i32 %65 to i64
  %67 = and i64 %33, 255
  %68 = add nsw i64 %67, %66
  %69 = getelementptr inbounds i8, i8* %10, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i16
  %72 = zext i8 %59 to i64
  %73 = getelementptr inbounds i64, i64* %18, i64 %72
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds i64, i64* %16, i64 %62
  %76 = load i64, i64* %75, align 8
  %77 = add nsw i64 %76, %74
  %78 = lshr i64 %77, 16
  %79 = trunc i64 %78 to i32
  %80 = add nsw i32 %79, %57
  %81 = sext i32 %80 to i64
  %82 = lshr i64 %67, 1
  %83 = add nsw i64 %82, %81
  %84 = getelementptr inbounds i8, i8* %10, i64 %83
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i16
  %87 = getelementptr inbounds i32, i32* %14, i64 %72
  %88 = load i32, i32* %87, align 4
  %89 = add nsw i32 %88, %57
  %90 = sext i32 %89 to i64
  %91 = add nsw i64 %67, %90
  %92 = getelementptr inbounds i8, i8* %10, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = shl nuw i16 %71, 8
  %95 = and i16 %94, -2048
  %96 = shl nuw nsw i16 %86, 3
  %97 = and i16 %96, 2016
  %98 = or i16 %97, %95
  %99 = lshr i8 %93, 3
  %100 = zext i8 %99 to i16
  %101 = or i16 %98, %100
  %102 = bitcast i8* %50 to i16*
  store i16 %101, i16* %102, align 2
  %103 = getelementptr inbounds i8, i8* %50, i64 2
  %104 = add i32 %34, -1
  br label %105

105:                                              ; preds = %54, %31
  %106 = phi i8* [ %103, %54 ], [ %50, %31 ]
  %107 = phi i8* [ %55, %54 ], [ %41, %31 ]
  %108 = phi i8* [ %58, %54 ], [ %44, %31 ]
  %109 = phi i8* [ %60, %54 ], [ %47, %31 ]
  %110 = phi i32 [ %104, %54 ], [ %34, %31 ]
  %111 = lshr i32 %110, 1
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %227, label %113

113:                                              ; preds = %105, %113
  %114 = phi i64 [ %212, %113 ], [ %33, %105 ]
  %115 = phi i32 [ %225, %113 ], [ 0, %105 ]
  %116 = phi i8* [ %176, %113 ], [ %109, %105 ]
  %117 = phi i8* [ %174, %113 ], [ %108, %105 ]
  %118 = phi i8* [ %171, %113 ], [ %107, %105 ]
  %119 = phi i8* [ %224, %113 ], [ %106, %105 ]
  %120 = getelementptr inbounds i8, i8* %118, i64 1
  %121 = load i8, i8* %118, align 1
  %122 = zext i8 %121 to i32
  %123 = getelementptr inbounds i8, i8* %117, i64 1
  %124 = load i8, i8* %117, align 1
  %125 = getelementptr inbounds i8, i8* %116, i64 1
  %126 = load i8, i8* %116, align 1
  %127 = zext i8 %126 to i64
  %128 = getelementptr inbounds i32, i32* %12, i64 %127
  %129 = load i32, i32* %128, align 4
  %130 = add nsw i32 %129, %122
  %131 = sext i32 %130 to i64
  %132 = and i64 %114, 255
  %133 = add nsw i64 %132, %131
  %134 = getelementptr inbounds i8, i8* %10, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = zext i8 %124 to i64
  %138 = getelementptr inbounds i64, i64* %18, i64 %137
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds i64, i64* %16, i64 %127
  %141 = load i64, i64* %140, align 8
  %142 = add nsw i64 %141, %139
  %143 = lshr i64 %142, 16
  %144 = trunc i64 %143 to i32
  %145 = add nsw i32 %144, %122
  %146 = sext i32 %145 to i64
  %147 = lshr i64 %132, 1
  %148 = add nsw i64 %147, %146
  %149 = getelementptr inbounds i8, i8* %10, i64 %148
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = getelementptr inbounds i32, i32* %14, i64 %137
  %153 = load i32, i32* %152, align 4
  %154 = add nsw i32 %153, %122
  %155 = sext i32 %154 to i64
  %156 = add nsw i64 %132, %155
  %157 = getelementptr inbounds i8, i8* %10, i64 %156
  %158 = load i8, i8* %157, align 1
  %159 = shl nuw nsw i64 %132, 24
  %160 = lshr i64 %114, 8
  %161 = and i64 %160, 16776960
  %162 = or i64 %159, %161
  %163 = shl nuw nsw i32 %136, 8
  %164 = and i32 %163, 63488
  %165 = shl nuw nsw i32 %151, 3
  %166 = and i32 %165, 2016
  %167 = or i32 %166, %164
  %168 = lshr i8 %158, 3
  %169 = zext i8 %168 to i32
  %170 = or i32 %167, %169
  %171 = getelementptr inbounds i8, i8* %118, i64 2
  %172 = load i8, i8* %120, align 1
  %173 = zext i8 %172 to i32
  %174 = getelementptr inbounds i8, i8* %117, i64 2
  %175 = load i8, i8* %123, align 1
  %176 = getelementptr inbounds i8, i8* %116, i64 2
  %177 = load i8, i8* %125, align 1
  %178 = zext i8 %177 to i64
  %179 = getelementptr inbounds i32, i32* %12, i64 %178
  %180 = load i32, i32* %179, align 4
  %181 = add nsw i32 %180, %173
  %182 = sext i32 %181 to i64
  %183 = and i64 %160, 255
  %184 = add nsw i64 %183, %182
  %185 = getelementptr inbounds i8, i8* %10, i64 %184
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i32
  %188 = zext i8 %175 to i64
  %189 = getelementptr inbounds i64, i64* %18, i64 %188
  %190 = load i64, i64* %189, align 8
  %191 = getelementptr inbounds i64, i64* %16, i64 %178
  %192 = load i64, i64* %191, align 8
  %193 = add nsw i64 %192, %190
  %194 = lshr i64 %193, 16
  %195 = trunc i64 %194 to i32
  %196 = add nsw i32 %195, %173
  %197 = sext i32 %196 to i64
  %198 = lshr i64 %183, 1
  %199 = add nsw i64 %198, %197
  %200 = getelementptr inbounds i8, i8* %10, i64 %199
  %201 = load i8, i8* %200, align 1
  %202 = zext i8 %201 to i32
  %203 = getelementptr inbounds i32, i32* %14, i64 %188
  %204 = load i32, i32* %203, align 4
  %205 = add nsw i32 %204, %173
  %206 = sext i32 %205 to i64
  %207 = add nsw i64 %183, %206
  %208 = getelementptr inbounds i8, i8* %10, i64 %207
  %209 = load i8, i8* %208, align 1
  %210 = shl nuw nsw i64 %183, 24
  %211 = lshr exact i64 %162, 8
  %212 = or i64 %211, %210
  %213 = shl nuw nsw i32 %187, 8
  %214 = and i32 %213, 63488
  %215 = shl nuw nsw i32 %202, 3
  %216 = and i32 %215, 2016
  %217 = or i32 %216, %214
  %218 = lshr i8 %209, 3
  %219 = zext i8 %218 to i32
  %220 = or i32 %217, %219
  %221 = shl nuw i32 %220, 16
  %222 = or i32 %170, %221
  %223 = bitcast i8* %119 to i32*
  store i32 %222, i32* %223, align 4
  %224 = getelementptr inbounds i8, i8* %119, i64 4
  %225 = add nuw nsw i32 %115, 1
  %226 = icmp eq i32 %225, %111
  br i1 %226, label %227, label %113

227:                                              ; preds = %113, %105
  %228 = phi i8* [ %106, %105 ], [ %224, %113 ]
  %229 = phi i8* [ %107, %105 ], [ %171, %113 ]
  %230 = phi i8* [ %108, %105 ], [ %174, %113 ]
  %231 = phi i8* [ %109, %105 ], [ %176, %113 ]
  %232 = phi i64 [ %33, %105 ], [ %212, %113 ]
  %233 = and i32 %110, 1
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %281, label %235

235:                                              ; preds = %227
  %236 = load i8, i8* %229, align 1
  %237 = zext i8 %236 to i32
  %238 = load i8, i8* %230, align 1
  %239 = load i8, i8* %231, align 1
  %240 = zext i8 %239 to i64
  %241 = getelementptr inbounds i32, i32* %12, i64 %240
  %242 = load i32, i32* %241, align 4
  %243 = add nsw i32 %242, %237
  %244 = sext i32 %243 to i64
  %245 = and i64 %232, 255
  %246 = add nsw i64 %245, %244
  %247 = getelementptr inbounds i8, i8* %10, i64 %246
  %248 = load i8, i8* %247, align 1
  %249 = zext i8 %248 to i16
  %250 = zext i8 %238 to i64
  %251 = getelementptr inbounds i64, i64* %18, i64 %250
  %252 = load i64, i64* %251, align 8
  %253 = getelementptr inbounds i64, i64* %16, i64 %240
  %254 = load i64, i64* %253, align 8
  %255 = add nsw i64 %254, %252
  %256 = lshr i64 %255, 16
  %257 = trunc i64 %256 to i32
  %258 = add nsw i32 %257, %237
  %259 = sext i32 %258 to i64
  %260 = lshr i64 %245, 1
  %261 = add nsw i64 %260, %259
  %262 = getelementptr inbounds i8, i8* %10, i64 %261
  %263 = load i8, i8* %262, align 1
  %264 = zext i8 %263 to i16
  %265 = getelementptr inbounds i32, i32* %14, i64 %250
  %266 = load i32, i32* %265, align 4
  %267 = add nsw i32 %266, %237
  %268 = sext i32 %267 to i64
  %269 = add nsw i64 %245, %268
  %270 = getelementptr inbounds i8, i8* %10, i64 %269
  %271 = load i8, i8* %270, align 1
  %272 = shl nuw i16 %249, 8
  %273 = and i16 %272, -2048
  %274 = shl nuw nsw i16 %264, 3
  %275 = and i16 %274, 2016
  %276 = or i16 %275, %273
  %277 = lshr i8 %271, 3
  %278 = zext i8 %277 to i16
  %279 = or i16 %276, %278
  %280 = bitcast i8* %228 to i16*
  store i16 %279, i16* %280, align 2
  br label %281

281:                                              ; preds = %235, %227
  %282 = icmp sgt i32 %37, 0
  br i1 %282, label %31, label %283

283:                                              ; preds = %281, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @gray_rgb565D_convert(%struct.jpeg_decompress_struct* nocapture readonly, i8*** nocapture readonly, i32, i8** nocapture readonly, i32) #2 {
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 65
  %7 = load i8*, i8** %6, align 8
  %8 = icmp sgt i32 %4, 0
  br i1 %8, label %9, label %134

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 34
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, 3
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds [4 x i64], [4 x i64]* @dither_matrix, i64 0, i64 %13
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %17 = load i32, i32* %16, align 8
  br label %18

18:                                               ; preds = %132, %9
  %19 = phi i32 [ %24, %132 ], [ %4, %9 ]
  %20 = phi i64 [ %112, %132 ], [ %15, %9 ]
  %21 = phi i32 [ %58, %132 ], [ %17, %9 ]
  %22 = phi i8** [ %30, %132 ], [ %3, %9 ]
  %23 = phi i32 [ %26, %132 ], [ %2, %9 ]
  %24 = add nsw i32 %19, -1
  %25 = load i8**, i8*** %1, align 8
  %26 = add i32 %23, 1
  %27 = zext i32 %23 to i64
  %28 = getelementptr inbounds i8*, i8** %25, i64 %27
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds i8*, i8** %22, i64 1
  %31 = load i8*, i8** %22, align 8
  %32 = ptrtoint i8* %31 to i64
  %33 = and i64 %32, 3
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %55, label %35

35:                                               ; preds = %18
  %36 = getelementptr inbounds i8, i8* %29, i64 1
  %37 = load i8, i8* %29, align 1
  %38 = zext i8 %37 to i64
  %39 = and i64 %20, 255
  %40 = add nuw nsw i64 %39, %38
  %41 = getelementptr inbounds i8, i8* %7, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = shl nuw nsw i32 %43, 8
  %45 = and i32 %44, 63488
  %46 = shl nuw nsw i32 %43, 3
  %47 = and i32 %46, 2016
  %48 = lshr i32 %43, 3
  %49 = or i32 %47, %48
  %50 = or i32 %49, %45
  %51 = trunc i32 %50 to i16
  %52 = bitcast i8* %31 to i16*
  store i16 %51, i16* %52, align 2
  %53 = getelementptr inbounds i8, i8* %31, i64 2
  %54 = add i32 %21, -1
  br label %55

55:                                               ; preds = %35, %18
  %56 = phi i8* [ %36, %35 ], [ %29, %18 ]
  %57 = phi i8* [ %53, %35 ], [ %31, %18 ]
  %58 = phi i32 [ %54, %35 ], [ %21, %18 ]
  %59 = lshr i32 %58, 1
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %109, label %61

61:                                               ; preds = %55, %61
  %62 = phi i64 [ %104, %61 ], [ %20, %55 ]
  %63 = phi i32 [ %107, %61 ], [ 0, %55 ]
  %64 = phi i8* [ %106, %61 ], [ %57, %55 ]
  %65 = phi i8* [ %83, %61 ], [ %56, %55 ]
  %66 = getelementptr inbounds i8, i8* %65, i64 1
  %67 = load i8, i8* %65, align 1
  %68 = zext i8 %67 to i64
  %69 = and i64 %62, 255
  %70 = add nuw nsw i64 %69, %68
  %71 = getelementptr inbounds i8, i8* %7, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = shl nuw nsw i32 %73, 8
  %75 = and i32 %74, 63488
  %76 = shl nuw nsw i32 %73, 3
  %77 = and i32 %76, 2016
  %78 = lshr i32 %73, 3
  %79 = shl nuw nsw i64 %69, 24
  %80 = lshr i64 %62, 8
  %81 = and i64 %80, 16776960
  %82 = or i64 %79, %81
  %83 = getelementptr inbounds i8, i8* %65, i64 2
  %84 = load i8, i8* %66, align 1
  %85 = zext i8 %84 to i64
  %86 = and i64 %80, 255
  %87 = add nuw nsw i64 %86, %85
  %88 = getelementptr inbounds i8, i8* %7, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = shl nuw nsw i32 %90, 8
  %92 = and i32 %91, 63488
  %93 = shl nuw nsw i32 %90, 3
  %94 = and i32 %93, 2016
  %95 = lshr i32 %90, 3
  %96 = or i32 %94, %95
  %97 = or i32 %96, %92
  %98 = shl nuw i32 %97, 16
  %99 = or i32 %77, %78
  %100 = or i32 %99, %75
  %101 = or i32 %100, %98
  %102 = shl nuw nsw i64 %86, 24
  %103 = lshr exact i64 %82, 8
  %104 = or i64 %103, %102
  %105 = bitcast i8* %64 to i32*
  store i32 %101, i32* %105, align 4
  %106 = getelementptr inbounds i8, i8* %64, i64 4
  %107 = add nuw nsw i32 %63, 1
  %108 = icmp eq i32 %107, %59
  br i1 %108, label %109, label %61

109:                                              ; preds = %61, %55
  %110 = phi i8* [ %56, %55 ], [ %83, %61 ]
  %111 = phi i8* [ %57, %55 ], [ %106, %61 ]
  %112 = phi i64 [ %20, %55 ], [ %104, %61 ]
  %113 = and i32 %58, 1
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %132, label %115

115:                                              ; preds = %109
  %116 = load i8, i8* %110, align 1
  %117 = zext i8 %116 to i64
  %118 = and i64 %112, 255
  %119 = add nuw nsw i64 %118, %117
  %120 = getelementptr inbounds i8, i8* %7, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = shl nuw nsw i32 %122, 8
  %124 = and i32 %123, 63488
  %125 = shl nuw nsw i32 %122, 3
  %126 = and i32 %125, 2016
  %127 = lshr i32 %122, 3
  %128 = or i32 %126, %127
  %129 = or i32 %128, %124
  %130 = trunc i32 %129 to i16
  %131 = bitcast i8* %111 to i16*
  store i16 %130, i16* %131, align 2
  br label %132

132:                                              ; preds = %115, %109
  %133 = icmp sgt i32 %24, 0
  br i1 %133, label %18, label %134

134:                                              ; preds = %132, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @rgb_rgb565D_convert(%struct.jpeg_decompress_struct* nocapture readonly, i8*** nocapture readonly, i32, i8** nocapture readonly, i32) #2 {
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 65
  %7 = load i8*, i8** %6, align 8
  %8 = icmp sgt i32 %4, 0
  br i1 %8, label %9, label %204

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 34
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, 3
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds [4 x i64], [4 x i64]* @dither_matrix, i64 0, i64 %13
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds i8**, i8*** %1, i64 1
  %19 = getelementptr inbounds i8**, i8*** %1, i64 2
  br label %20

20:                                               ; preds = %202, %9
  %21 = phi i32 [ %4, %9 ], [ %26, %202 ]
  %22 = phi i64 [ %15, %9 ], [ %170, %202 ]
  %23 = phi i32 [ %17, %9 ], [ %82, %202 ]
  %24 = phi i8** [ %3, %9 ], [ %38, %202 ]
  %25 = phi i32 [ %2, %9 ], [ %37, %202 ]
  %26 = add nsw i32 %21, -1
  %27 = load i8**, i8*** %1, align 8
  %28 = zext i32 %25 to i64
  %29 = getelementptr inbounds i8*, i8** %27, i64 %28
  %30 = load i8*, i8** %29, align 8
  %31 = load i8**, i8*** %18, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 %28
  %33 = load i8*, i8** %32, align 8
  %34 = load i8**, i8*** %19, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 %28
  %36 = load i8*, i8** %35, align 8
  %37 = add i32 %25, 1
  %38 = getelementptr inbounds i8*, i8** %24, i64 1
  %39 = load i8*, i8** %24, align 8
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 3
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %77, label %43

43:                                               ; preds = %20
  %44 = getelementptr inbounds i8, i8* %30, i64 1
  %45 = load i8, i8* %30, align 1
  %46 = zext i8 %45 to i64
  %47 = and i64 %22, 255
  %48 = add nuw nsw i64 %47, %46
  %49 = getelementptr inbounds i8, i8* %7, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i16
  %52 = getelementptr inbounds i8, i8* %33, i64 1
  %53 = load i8, i8* %33, align 1
  %54 = zext i8 %53 to i64
  %55 = lshr i64 %47, 1
  %56 = add nuw nsw i64 %55, %54
  %57 = getelementptr inbounds i8, i8* %7, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i16
  %60 = getelementptr inbounds i8, i8* %36, i64 1
  %61 = load i8, i8* %36, align 1
  %62 = zext i8 %61 to i64
  %63 = add nuw nsw i64 %47, %62
  %64 = getelementptr inbounds i8, i8* %7, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = shl nuw i16 %51, 8
  %67 = and i16 %66, -2048
  %68 = shl nuw nsw i16 %59, 3
  %69 = and i16 %68, 2016
  %70 = or i16 %69, %67
  %71 = lshr i8 %65, 3
  %72 = zext i8 %71 to i16
  %73 = or i16 %70, %72
  %74 = bitcast i8* %39 to i16*
  store i16 %73, i16* %74, align 2
  %75 = getelementptr inbounds i8, i8* %39, i64 2
  %76 = add i32 %23, -1
  br label %77

77:                                               ; preds = %43, %20
  %78 = phi i8* [ %75, %43 ], [ %39, %20 ]
  %79 = phi i8* [ %44, %43 ], [ %30, %20 ]
  %80 = phi i8* [ %52, %43 ], [ %33, %20 ]
  %81 = phi i8* [ %60, %43 ], [ %36, %20 ]
  %82 = phi i32 [ %76, %43 ], [ %23, %20 ]
  %83 = lshr i32 %82, 1
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %165, label %85

85:                                               ; preds = %77, %85
  %86 = phi i64 [ %150, %85 ], [ %22, %77 ]
  %87 = phi i32 [ %163, %85 ], [ 0, %77 ]
  %88 = phi i8* [ %142, %85 ], [ %81, %77 ]
  %89 = phi i8* [ %134, %85 ], [ %80, %77 ]
  %90 = phi i8* [ %126, %85 ], [ %79, %77 ]
  %91 = phi i8* [ %162, %85 ], [ %78, %77 ]
  %92 = getelementptr inbounds i8, i8* %90, i64 1
  %93 = load i8, i8* %90, align 1
  %94 = zext i8 %93 to i64
  %95 = and i64 %86, 255
  %96 = add nuw nsw i64 %95, %94
  %97 = getelementptr inbounds i8, i8* %7, i64 %96
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = getelementptr inbounds i8, i8* %89, i64 1
  %101 = load i8, i8* %89, align 1
  %102 = zext i8 %101 to i64
  %103 = lshr i64 %95, 1
  %104 = add nuw nsw i64 %103, %102
  %105 = getelementptr inbounds i8, i8* %7, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = getelementptr inbounds i8, i8* %88, i64 1
  %109 = load i8, i8* %88, align 1
  %110 = zext i8 %109 to i64
  %111 = add nuw nsw i64 %95, %110
  %112 = getelementptr inbounds i8, i8* %7, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = shl nuw nsw i64 %95, 24
  %115 = lshr i64 %86, 8
  %116 = and i64 %115, 16776960
  %117 = or i64 %114, %116
  %118 = shl nuw nsw i32 %99, 8
  %119 = and i32 %118, 63488
  %120 = shl nuw nsw i32 %107, 3
  %121 = and i32 %120, 2016
  %122 = or i32 %121, %119
  %123 = lshr i8 %113, 3
  %124 = zext i8 %123 to i32
  %125 = or i32 %122, %124
  %126 = getelementptr inbounds i8, i8* %90, i64 2
  %127 = load i8, i8* %92, align 1
  %128 = zext i8 %127 to i64
  %129 = and i64 %115, 255
  %130 = add nuw nsw i64 %129, %128
  %131 = getelementptr inbounds i8, i8* %7, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = getelementptr inbounds i8, i8* %89, i64 2
  %135 = load i8, i8* %100, align 1
  %136 = zext i8 %135 to i64
  %137 = lshr i64 %129, 1
  %138 = add nuw nsw i64 %137, %136
  %139 = getelementptr inbounds i8, i8* %7, i64 %138
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i32
  %142 = getelementptr inbounds i8, i8* %88, i64 2
  %143 = load i8, i8* %108, align 1
  %144 = zext i8 %143 to i64
  %145 = add nuw nsw i64 %129, %144
  %146 = getelementptr inbounds i8, i8* %7, i64 %145
  %147 = load i8, i8* %146, align 1
  %148 = shl nuw nsw i64 %129, 24
  %149 = lshr exact i64 %117, 8
  %150 = or i64 %149, %148
  %151 = shl nuw nsw i32 %133, 8
  %152 = and i32 %151, 63488
  %153 = shl nuw nsw i32 %141, 3
  %154 = and i32 %153, 2016
  %155 = or i32 %154, %152
  %156 = lshr i8 %147, 3
  %157 = zext i8 %156 to i32
  %158 = or i32 %155, %157
  %159 = shl nuw i32 %158, 16
  %160 = or i32 %125, %159
  %161 = bitcast i8* %91 to i32*
  store i32 %160, i32* %161, align 4
  %162 = getelementptr inbounds i8, i8* %91, i64 4
  %163 = add nuw nsw i32 %87, 1
  %164 = icmp eq i32 %163, %83
  br i1 %164, label %165, label %85

165:                                              ; preds = %85, %77
  %166 = phi i8* [ %78, %77 ], [ %162, %85 ]
  %167 = phi i8* [ %79, %77 ], [ %126, %85 ]
  %168 = phi i8* [ %80, %77 ], [ %134, %85 ]
  %169 = phi i8* [ %81, %77 ], [ %142, %85 ]
  %170 = phi i64 [ %22, %77 ], [ %150, %85 ]
  %171 = and i32 %82, 1
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %202, label %173

173:                                              ; preds = %165
  %174 = load i8, i8* %167, align 1
  %175 = zext i8 %174 to i64
  %176 = and i64 %170, 255
  %177 = add nuw nsw i64 %176, %175
  %178 = getelementptr inbounds i8, i8* %7, i64 %177
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i16
  %181 = load i8, i8* %168, align 1
  %182 = zext i8 %181 to i64
  %183 = lshr i64 %176, 1
  %184 = add nuw nsw i64 %183, %182
  %185 = getelementptr inbounds i8, i8* %7, i64 %184
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i16
  %188 = load i8, i8* %169, align 1
  %189 = zext i8 %188 to i64
  %190 = add nuw nsw i64 %176, %189
  %191 = getelementptr inbounds i8, i8* %7, i64 %190
  %192 = load i8, i8* %191, align 1
  %193 = shl nuw i16 %180, 8
  %194 = and i16 %193, -2048
  %195 = shl nuw nsw i16 %187, 3
  %196 = and i16 %195, 2016
  %197 = or i16 %196, %194
  %198 = lshr i8 %192, 3
  %199 = zext i8 %198 to i16
  %200 = or i16 %197, %199
  %201 = bitcast i8* %166 to i16*
  store i16 %200, i16* %201, align 2
  br label %202

202:                                              ; preds = %173, %165
  %203 = icmp sgt i32 %26, 0
  br i1 %203, label %20, label %204

204:                                              ; preds = %202, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @ycck_cmyk_convert(%struct.jpeg_decompress_struct* nocapture readonly, i8*** nocapture readonly, i32, i8** nocapture readonly, i32) #2 {
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 86
  %7 = bitcast %struct.jpeg_color_deconverter** %6 to %struct.my_color_deconverter**
  %8 = load %struct.my_color_deconverter*, %struct.my_color_deconverter** %7, align 8
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 65
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %8, i64 0, i32 1
  %14 = load i32*, i32** %13, align 8
  %15 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %8, i64 0, i32 2
  %16 = load i32*, i32** %15, align 8
  %17 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %8, i64 0, i32 3
  %18 = load i64*, i64** %17, align 8
  %19 = getelementptr inbounds %struct.my_color_deconverter, %struct.my_color_deconverter* %8, i64 0, i32 4
  %20 = load i64*, i64** %19, align 8
  %21 = icmp sgt i32 %4, 0
  br i1 %21, label %22, label %96

22:                                               ; preds = %5
  %23 = getelementptr inbounds i8**, i8*** %1, i64 1
  %24 = getelementptr inbounds i8**, i8*** %1, i64 2
  %25 = getelementptr inbounds i8**, i8*** %1, i64 3
  %26 = icmp eq i32 %10, 0
  %27 = zext i32 %10 to i64
  br label %30

28:                                               ; preds = %52, %30
  %29 = icmp sgt i32 %34, 0
  br i1 %29, label %30, label %96

30:                                               ; preds = %22, %28
  %31 = phi i32 [ %4, %22 ], [ %34, %28 ]
  %32 = phi i32 [ %2, %22 ], [ %48, %28 ]
  %33 = phi i8** [ %3, %22 ], [ %49, %28 ]
  %34 = add nsw i32 %31, -1
  %35 = load i8**, i8*** %1, align 8
  %36 = zext i32 %32 to i64
  %37 = getelementptr inbounds i8*, i8** %35, i64 %36
  %38 = load i8*, i8** %37, align 8
  %39 = load i8**, i8*** %23, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 %36
  %41 = load i8*, i8** %40, align 8
  %42 = load i8**, i8*** %24, align 8
  %43 = getelementptr inbounds i8*, i8** %42, i64 %36
  %44 = load i8*, i8** %43, align 8
  %45 = load i8**, i8*** %25, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 %36
  %47 = load i8*, i8** %46, align 8
  %48 = add i32 %32, 1
  %49 = getelementptr inbounds i8*, i8** %33, i64 1
  br i1 %26, label %28, label %50

50:                                               ; preds = %30
  %51 = load i8*, i8** %33, align 8
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi i64 [ 0, %50 ], [ %94, %52 ]
  %54 = phi i8* [ %51, %50 ], [ %93, %52 ]
  %55 = getelementptr inbounds i8, i8* %38, i64 %53
  %56 = load i8, i8* %55, align 1
  %57 = getelementptr inbounds i8, i8* %41, i64 %53
  %58 = load i8, i8* %57, align 1
  %59 = getelementptr inbounds i8, i8* %44, i64 %53
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i64
  %62 = getelementptr inbounds i32, i32* %14, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = xor i8 %56, -1
  %65 = zext i8 %64 to i32
  %66 = sub i32 %65, %63
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %12, i64 %67
  %69 = load i8, i8* %68, align 1
  store i8 %69, i8* %54, align 1
  %70 = zext i8 %58 to i64
  %71 = getelementptr inbounds i64, i64* %20, i64 %70
  %72 = load i64, i64* %71, align 8
  %73 = getelementptr inbounds i64, i64* %18, i64 %61
  %74 = load i64, i64* %73, align 8
  %75 = add nsw i64 %74, %72
  %76 = lshr i64 %75, 16
  %77 = trunc i64 %76 to i32
  %78 = sub i32 %65, %77
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %12, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = getelementptr inbounds i8, i8* %54, i64 1
  store i8 %81, i8* %82, align 1
  %83 = getelementptr inbounds i32, i32* %16, i64 %70
  %84 = load i32, i32* %83, align 4
  %85 = sub i32 %65, %84
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %12, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = getelementptr inbounds i8, i8* %54, i64 2
  store i8 %88, i8* %89, align 1
  %90 = getelementptr inbounds i8, i8* %47, i64 %53
  %91 = load i8, i8* %90, align 1
  %92 = getelementptr inbounds i8, i8* %54, i64 3
  store i8 %91, i8* %92, align 1
  %93 = getelementptr inbounds i8, i8* %54, i64 4
  %94 = add nuw nsw i64 %53, 1
  %95 = icmp eq i64 %94, %27
  br i1 %95, label %28, label %52

96:                                               ; preds = %28, %5
  ret void
}

declare void @jcopy_sample_rows(i8**, i32, i8**, i32, i32, i32) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = !{!16}
!16 = distinct !{!16, !12}
!17 = !{!18}
!18 = distinct !{!18, !12}
!19 = distinct !{!19, !20}
!20 = !{!"llvm.loop.isvectorized", i32 1}
!21 = distinct !{!21, !20}
!22 = distinct !{!22, !3}
!23 = !{!24}
!24 = distinct !{!24, !25}
!25 = distinct !{!25, !"LVerDomain"}
!26 = !{!27}
!27 = distinct !{!27, !25}
!28 = !{!29}
!29 = distinct !{!29, !25}
!30 = distinct !{!30, !20}
!31 = distinct !{!31, !20}
!32 = !{!33}
!33 = distinct !{!33, !34}
!34 = distinct !{!34, !"LVerDomain"}
!35 = !{!36}
!36 = distinct !{!36, !34}
!37 = !{!38}
!38 = distinct !{!38, !34}
!39 = distinct !{!39, !20}
!40 = distinct !{!40, !20}
!41 = !{!42}
!42 = distinct !{!42, !43}
!43 = distinct !{!43, !"LVerDomain"}
!44 = !{!45}
!45 = distinct !{!45, !43}
!46 = !{!47}
!47 = distinct !{!47, !43}
!48 = distinct !{!48, !20}
!49 = distinct !{!49, !20}
!50 = !{!51}
!51 = distinct !{!51, !52}
!52 = distinct !{!52, !"LVerDomain"}
!53 = !{!54}
!54 = distinct !{!54, !52}
!55 = !{!56}
!56 = distinct !{!56, !52}
!57 = distinct !{!57, !20}
!58 = distinct !{!58, !20}
!59 = !{!60}
!60 = distinct !{!60, !61}
!61 = distinct !{!61, !"LVerDomain"}
!62 = !{!63}
!63 = distinct !{!63, !61}
!64 = distinct !{!64, !20}
!65 = distinct !{!65, !20}
!66 = !{!67}
!67 = distinct !{!67, !68}
!68 = distinct !{!68, !"LVerDomain"}
!69 = !{!70, !71, !72}
!70 = distinct !{!70, !68}
!71 = distinct !{!71, !68}
!72 = distinct !{!72, !68}
!73 = distinct !{!73, !20}
!74 = distinct !{!74, !20}
