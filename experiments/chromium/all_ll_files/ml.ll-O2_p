; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/ml.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/ml.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.NN_CONFIG = type { i32, i32, i32, [10 x i32], [11 x float*], [11 x float*] }

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_nn_output_prec_reduce(float* nocapture, i32) local_unnamed_addr #0 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %61

4:                                                ; preds = %2
  %5 = zext i32 %1 to i64
  %6 = icmp ult i32 %1, 4
  br i1 %6, label %7, label %9

7:                                                ; preds = %59, %4
  %8 = phi i64 [ 0, %4 ], [ %10, %59 ]
  br label %62

9:                                                ; preds = %4
  %10 = and i64 %5, 4294967292
  %11 = add nsw i64 %10, -4
  %12 = lshr exact i64 %11, 2
  %13 = add nuw nsw i64 %12, 1
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %11, 0
  br i1 %15, label %45, label %16

16:                                               ; preds = %9
  %17 = sub nuw nsw i64 %13, %14
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i64 [ 0, %16 ], [ %42, %18 ]
  %20 = phi i64 [ %17, %16 ], [ %43, %18 ]
  %21 = getelementptr inbounds float, float* %0, i64 %19
  %22 = bitcast float* %21 to <4 x float>*
  %23 = load <4 x float>, <4 x float>* %22, align 4
  %24 = fmul <4 x float> %23, <float 2.048000e+03, float 2.048000e+03, float 2.048000e+03, float 2.048000e+03>
  %25 = fpext <4 x float> %24 to <4 x double>
  %26 = fadd <4 x double> %25, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %27 = fptosi <4 x double> %26 to <4 x i32>
  %28 = sitofp <4 x i32> %27 to <4 x float>
  %29 = fmul <4 x float> %28, <float 0x3F40000000000000, float 0x3F40000000000000, float 0x3F40000000000000, float 0x3F40000000000000>
  %30 = bitcast float* %21 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 4
  %31 = or i64 %19, 4
  %32 = getelementptr inbounds float, float* %0, i64 %31
  %33 = bitcast float* %32 to <4 x float>*
  %34 = load <4 x float>, <4 x float>* %33, align 4
  %35 = fmul <4 x float> %34, <float 2.048000e+03, float 2.048000e+03, float 2.048000e+03, float 2.048000e+03>
  %36 = fpext <4 x float> %35 to <4 x double>
  %37 = fadd <4 x double> %36, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %38 = fptosi <4 x double> %37 to <4 x i32>
  %39 = sitofp <4 x i32> %38 to <4 x float>
  %40 = fmul <4 x float> %39, <float 0x3F40000000000000, float 0x3F40000000000000, float 0x3F40000000000000, float 0x3F40000000000000>
  %41 = bitcast float* %32 to <4 x float>*
  store <4 x float> %40, <4 x float>* %41, align 4
  %42 = add i64 %19, 8
  %43 = add i64 %20, -2
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %18, !llvm.loop !2

45:                                               ; preds = %18, %9
  %46 = phi i64 [ 0, %9 ], [ %42, %18 ]
  %47 = icmp eq i64 %14, 0
  br i1 %47, label %59, label %48

48:                                               ; preds = %45
  %49 = getelementptr inbounds float, float* %0, i64 %46
  %50 = bitcast float* %49 to <4 x float>*
  %51 = load <4 x float>, <4 x float>* %50, align 4
  %52 = fmul <4 x float> %51, <float 2.048000e+03, float 2.048000e+03, float 2.048000e+03, float 2.048000e+03>
  %53 = fpext <4 x float> %52 to <4 x double>
  %54 = fadd <4 x double> %53, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %55 = fptosi <4 x double> %54 to <4 x i32>
  %56 = sitofp <4 x i32> %55 to <4 x float>
  %57 = fmul <4 x float> %56, <float 0x3F40000000000000, float 0x3F40000000000000, float 0x3F40000000000000, float 0x3F40000000000000>
  %58 = bitcast float* %49 to <4 x float>*
  store <4 x float> %57, <4 x float>* %58, align 4
  br label %59

59:                                               ; preds = %45, %48
  %60 = icmp eq i64 %10, %5
  br i1 %60, label %61, label %7

61:                                               ; preds = %62, %59, %2
  ret void

62:                                               ; preds = %7, %62
  %63 = phi i64 [ %72, %62 ], [ %8, %7 ]
  %64 = getelementptr inbounds float, float* %0, i64 %63
  %65 = load float, float* %64, align 4
  %66 = fmul float %65, 2.048000e+03
  %67 = fpext float %66 to double
  %68 = fadd double %67, 5.000000e-01
  %69 = fptosi double %68 to i32
  %70 = sitofp i32 %69 to float
  %71 = fmul float %70, 0x3F40000000000000
  store float %71, float* %64, align 4
  %72 = add nuw nsw i64 %63, 1
  %73 = icmp eq i64 %72, %5
  br i1 %73, label %61, label %62, !llvm.loop !4
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_nn_predict_c(float* nocapture readonly, %struct.NN_CONFIG* nocapture readonly, i32, float* nocapture) local_unnamed_addr #2 {
  %5 = alloca [2 x [128 x float]], align 16
  %6 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = bitcast [2 x [128 x float]]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %8) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -1, i64 1024, i1 false)
  %9 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %1, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %4
  %13 = zext i32 %10 to i64
  br label %34

14:                                               ; preds = %58, %4
  %15 = phi float* [ %0, %4 ], [ %44, %58 ]
  %16 = phi i32 [ %7, %4 ], [ %46, %58 ]
  %17 = sext i32 %10 to i64
  %18 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %1, i64 0, i32 4, i64 %17
  %19 = load float*, float** %18, align 8
  %20 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %1, i64 0, i32 5, i64 %17
  %21 = load float*, float** %20, align 8
  %22 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %1, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %25, label %273

25:                                               ; preds = %14
  %26 = icmp sgt i32 %16, 0
  %27 = sext i32 %16 to i64
  %28 = zext i32 %16 to i64
  %29 = add nsw i64 %28, -1
  %30 = and i64 %28, 3
  %31 = icmp ult i64 %29, 3
  %32 = sub nsw i64 %28, %30
  %33 = icmp eq i64 %30, 0
  br label %135

34:                                               ; preds = %58, %12
  %35 = phi i64 [ 0, %12 ], [ %60, %58 ]
  %36 = phi i32 [ 0, %12 ], [ %59, %58 ]
  %37 = phi i32 [ %7, %12 ], [ %46, %58 ]
  %38 = phi float* [ %0, %12 ], [ %44, %58 ]
  %39 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %1, i64 0, i32 4, i64 %35
  %40 = load float*, float** %39, align 8
  %41 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %1, i64 0, i32 5, i64 %35
  %42 = load float*, float** %41, align 8
  %43 = sext i32 %36 to i64
  %44 = getelementptr inbounds [2 x [128 x float]], [2 x [128 x float]]* %5, i64 0, i64 %43, i64 0
  %45 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %1, i64 0, i32 3, i64 %35
  %46 = load i32, i32* %45, align 4
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %48, label %58

48:                                               ; preds = %34
  %49 = icmp sgt i32 %37, 0
  %50 = sext i32 %37 to i64
  %51 = zext i32 %46 to i64
  %52 = zext i32 %37 to i64
  %53 = add nsw i64 %52, -1
  %54 = and i64 %52, 3
  %55 = icmp ult i64 %53, 3
  %56 = sub nsw i64 %52, %54
  %57 = icmp eq i64 %54, 0
  br label %62

58:                                               ; preds = %86, %34
  %59 = sub nsw i32 1, %36
  %60 = add nuw nsw i64 %35, 1
  %61 = icmp eq i64 %60, %13
  br i1 %61, label %14, label %34

62:                                               ; preds = %86, %48
  %63 = phi i64 [ 0, %48 ], [ %91, %86 ]
  %64 = getelementptr inbounds float, float* %42, i64 %63
  %65 = load float, float* %64, align 4
  br i1 %49, label %66, label %86

66:                                               ; preds = %62
  %67 = mul nsw i64 %63, %50
  br i1 %55, label %68, label %93

68:                                               ; preds = %93, %66
  %69 = phi float [ undef, %66 ], [ %127, %93 ]
  %70 = phi i64 [ 0, %66 ], [ %128, %93 ]
  %71 = phi float [ %65, %66 ], [ %127, %93 ]
  br i1 %57, label %86, label %72

72:                                               ; preds = %68, %72
  %73 = phi i64 [ %83, %72 ], [ %70, %68 ]
  %74 = phi float [ %82, %72 ], [ %71, %68 ]
  %75 = phi i64 [ %84, %72 ], [ %54, %68 ]
  %76 = add nsw i64 %73, %67
  %77 = getelementptr inbounds float, float* %40, i64 %76
  %78 = load float, float* %77, align 4
  %79 = getelementptr inbounds float, float* %38, i64 %73
  %80 = load float, float* %79, align 4
  %81 = fmul float %78, %80
  %82 = fadd float %74, %81
  %83 = add nuw nsw i64 %73, 1
  %84 = add i64 %75, -1
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %86, label %72, !llvm.loop !6

86:                                               ; preds = %68, %72, %62
  %87 = phi float [ %65, %62 ], [ %69, %68 ], [ %82, %72 ]
  %88 = fcmp ogt float %87, 0.000000e+00
  %89 = select i1 %88, float %87, float 0.000000e+00
  %90 = getelementptr inbounds [2 x [128 x float]], [2 x [128 x float]]* %5, i64 0, i64 %43, i64 %63
  store float %89, float* %90, align 4
  %91 = add nuw nsw i64 %63, 1
  %92 = icmp eq i64 %91, %51
  br i1 %92, label %58, label %62

93:                                               ; preds = %66, %93
  %94 = phi i64 [ %128, %93 ], [ 0, %66 ]
  %95 = phi float [ %127, %93 ], [ %65, %66 ]
  %96 = phi i64 [ %129, %93 ], [ %56, %66 ]
  %97 = add nsw i64 %94, %67
  %98 = getelementptr inbounds float, float* %40, i64 %97
  %99 = load float, float* %98, align 4
  %100 = getelementptr inbounds float, float* %38, i64 %94
  %101 = load float, float* %100, align 4
  %102 = fmul float %99, %101
  %103 = fadd float %95, %102
  %104 = or i64 %94, 1
  %105 = add nsw i64 %104, %67
  %106 = getelementptr inbounds float, float* %40, i64 %105
  %107 = load float, float* %106, align 4
  %108 = getelementptr inbounds float, float* %38, i64 %104
  %109 = load float, float* %108, align 4
  %110 = fmul float %107, %109
  %111 = fadd float %103, %110
  %112 = or i64 %94, 2
  %113 = add nsw i64 %112, %67
  %114 = getelementptr inbounds float, float* %40, i64 %113
  %115 = load float, float* %114, align 4
  %116 = getelementptr inbounds float, float* %38, i64 %112
  %117 = load float, float* %116, align 4
  %118 = fmul float %115, %117
  %119 = fadd float %111, %118
  %120 = or i64 %94, 3
  %121 = add nsw i64 %120, %67
  %122 = getelementptr inbounds float, float* %40, i64 %121
  %123 = load float, float* %122, align 4
  %124 = getelementptr inbounds float, float* %38, i64 %120
  %125 = load float, float* %124, align 4
  %126 = fmul float %123, %125
  %127 = fadd float %119, %126
  %128 = add nuw nsw i64 %94, 4
  %129 = add i64 %96, -4
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %68, label %93

131:                                              ; preds = %159
  %132 = icmp ne i32 %2, 0
  %133 = icmp sgt i32 %163, 0
  %134 = and i1 %132, %133
  br i1 %134, label %204, label %273

135:                                              ; preds = %25, %159
  %136 = phi i64 [ 0, %25 ], [ %162, %159 ]
  %137 = getelementptr inbounds float, float* %21, i64 %136
  %138 = load float, float* %137, align 4
  br i1 %26, label %139, label %159

139:                                              ; preds = %135
  %140 = mul nsw i64 %136, %27
  br i1 %31, label %141, label %166

141:                                              ; preds = %166, %139
  %142 = phi float [ undef, %139 ], [ %200, %166 ]
  %143 = phi i64 [ 0, %139 ], [ %201, %166 ]
  %144 = phi float [ %138, %139 ], [ %200, %166 ]
  br i1 %33, label %159, label %145

145:                                              ; preds = %141, %145
  %146 = phi i64 [ %156, %145 ], [ %143, %141 ]
  %147 = phi float [ %155, %145 ], [ %144, %141 ]
  %148 = phi i64 [ %157, %145 ], [ %30, %141 ]
  %149 = add nsw i64 %146, %140
  %150 = getelementptr inbounds float, float* %19, i64 %149
  %151 = load float, float* %150, align 4
  %152 = getelementptr inbounds float, float* %15, i64 %146
  %153 = load float, float* %152, align 4
  %154 = fmul float %151, %153
  %155 = fadd float %147, %154
  %156 = add nuw nsw i64 %146, 1
  %157 = add i64 %148, -1
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %159, label %145, !llvm.loop !8

159:                                              ; preds = %141, %145, %135
  %160 = phi float [ %138, %135 ], [ %142, %141 ], [ %155, %145 ]
  %161 = getelementptr inbounds float, float* %3, i64 %136
  store float %160, float* %161, align 4
  %162 = add nuw nsw i64 %136, 1
  %163 = load i32, i32* %22, align 4
  %164 = sext i32 %163 to i64
  %165 = icmp slt i64 %162, %164
  br i1 %165, label %135, label %131

166:                                              ; preds = %139, %166
  %167 = phi i64 [ %201, %166 ], [ 0, %139 ]
  %168 = phi float [ %200, %166 ], [ %138, %139 ]
  %169 = phi i64 [ %202, %166 ], [ %32, %139 ]
  %170 = add nsw i64 %167, %140
  %171 = getelementptr inbounds float, float* %19, i64 %170
  %172 = load float, float* %171, align 4
  %173 = getelementptr inbounds float, float* %15, i64 %167
  %174 = load float, float* %173, align 4
  %175 = fmul float %172, %174
  %176 = fadd float %168, %175
  %177 = or i64 %167, 1
  %178 = add nsw i64 %177, %140
  %179 = getelementptr inbounds float, float* %19, i64 %178
  %180 = load float, float* %179, align 4
  %181 = getelementptr inbounds float, float* %15, i64 %177
  %182 = load float, float* %181, align 4
  %183 = fmul float %180, %182
  %184 = fadd float %176, %183
  %185 = or i64 %167, 2
  %186 = add nsw i64 %185, %140
  %187 = getelementptr inbounds float, float* %19, i64 %186
  %188 = load float, float* %187, align 4
  %189 = getelementptr inbounds float, float* %15, i64 %185
  %190 = load float, float* %189, align 4
  %191 = fmul float %188, %190
  %192 = fadd float %184, %191
  %193 = or i64 %167, 3
  %194 = add nsw i64 %193, %140
  %195 = getelementptr inbounds float, float* %19, i64 %194
  %196 = load float, float* %195, align 4
  %197 = getelementptr inbounds float, float* %15, i64 %193
  %198 = load float, float* %197, align 4
  %199 = fmul float %196, %198
  %200 = fadd float %192, %199
  %201 = add nuw nsw i64 %167, 4
  %202 = add i64 %169, -4
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %141, label %166

204:                                              ; preds = %131
  %205 = zext i32 %163 to i64
  %206 = icmp ult i32 %163, 4
  br i1 %206, label %259, label %207

207:                                              ; preds = %204
  %208 = and i64 %205, 4294967292
  %209 = add nsw i64 %208, -4
  %210 = lshr exact i64 %209, 2
  %211 = add nuw nsw i64 %210, 1
  %212 = and i64 %211, 1
  %213 = icmp eq i64 %209, 0
  br i1 %213, label %243, label %214

214:                                              ; preds = %207
  %215 = sub nuw nsw i64 %211, %212
  br label %216

216:                                              ; preds = %216, %214
  %217 = phi i64 [ 0, %214 ], [ %240, %216 ]
  %218 = phi i64 [ %215, %214 ], [ %241, %216 ]
  %219 = getelementptr inbounds float, float* %3, i64 %217
  %220 = bitcast float* %219 to <4 x float>*
  %221 = load <4 x float>, <4 x float>* %220, align 4
  %222 = fmul <4 x float> %221, <float 2.048000e+03, float 2.048000e+03, float 2.048000e+03, float 2.048000e+03>
  %223 = fpext <4 x float> %222 to <4 x double>
  %224 = fadd <4 x double> %223, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %225 = fptosi <4 x double> %224 to <4 x i32>
  %226 = sitofp <4 x i32> %225 to <4 x float>
  %227 = fmul <4 x float> %226, <float 0x3F40000000000000, float 0x3F40000000000000, float 0x3F40000000000000, float 0x3F40000000000000>
  %228 = bitcast float* %219 to <4 x float>*
  store <4 x float> %227, <4 x float>* %228, align 4
  %229 = or i64 %217, 4
  %230 = getelementptr inbounds float, float* %3, i64 %229
  %231 = bitcast float* %230 to <4 x float>*
  %232 = load <4 x float>, <4 x float>* %231, align 4
  %233 = fmul <4 x float> %232, <float 2.048000e+03, float 2.048000e+03, float 2.048000e+03, float 2.048000e+03>
  %234 = fpext <4 x float> %233 to <4 x double>
  %235 = fadd <4 x double> %234, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %236 = fptosi <4 x double> %235 to <4 x i32>
  %237 = sitofp <4 x i32> %236 to <4 x float>
  %238 = fmul <4 x float> %237, <float 0x3F40000000000000, float 0x3F40000000000000, float 0x3F40000000000000, float 0x3F40000000000000>
  %239 = bitcast float* %230 to <4 x float>*
  store <4 x float> %238, <4 x float>* %239, align 4
  %240 = add i64 %217, 8
  %241 = add i64 %218, -2
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %216, !llvm.loop !9

243:                                              ; preds = %216, %207
  %244 = phi i64 [ 0, %207 ], [ %240, %216 ]
  %245 = icmp eq i64 %212, 0
  br i1 %245, label %257, label %246

246:                                              ; preds = %243
  %247 = getelementptr inbounds float, float* %3, i64 %244
  %248 = bitcast float* %247 to <4 x float>*
  %249 = load <4 x float>, <4 x float>* %248, align 4
  %250 = fmul <4 x float> %249, <float 2.048000e+03, float 2.048000e+03, float 2.048000e+03, float 2.048000e+03>
  %251 = fpext <4 x float> %250 to <4 x double>
  %252 = fadd <4 x double> %251, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %253 = fptosi <4 x double> %252 to <4 x i32>
  %254 = sitofp <4 x i32> %253 to <4 x float>
  %255 = fmul <4 x float> %254, <float 0x3F40000000000000, float 0x3F40000000000000, float 0x3F40000000000000, float 0x3F40000000000000>
  %256 = bitcast float* %247 to <4 x float>*
  store <4 x float> %255, <4 x float>* %256, align 4
  br label %257

257:                                              ; preds = %243, %246
  %258 = icmp eq i64 %208, %205
  br i1 %258, label %273, label %259

259:                                              ; preds = %257, %204
  %260 = phi i64 [ 0, %204 ], [ %208, %257 ]
  br label %261

261:                                              ; preds = %259, %261
  %262 = phi i64 [ %271, %261 ], [ %260, %259 ]
  %263 = getelementptr inbounds float, float* %3, i64 %262
  %264 = load float, float* %263, align 4
  %265 = fmul float %264, 2.048000e+03
  %266 = fpext float %265 to double
  %267 = fadd double %266, 5.000000e-01
  %268 = fptosi double %267 to i32
  %269 = sitofp i32 %268 to float
  %270 = fmul float %269, 0x3F40000000000000
  store float %270, float* %263, align 4
  %271 = add nuw nsw i64 %262, 1
  %272 = icmp eq i64 %271, %205
  br i1 %272, label %273, label %261, !llvm.loop !10

273:                                              ; preds = %261, %257, %14, %131
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %8) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @av1_nn_softmax(float* nocapture readonly, float* nocapture, i32) local_unnamed_addr #3 {
  %4 = load float, float* %0, align 4
  %5 = icmp sgt i32 %2, 1
  br i1 %5, label %6, label %30

6:                                                ; preds = %3
  %7 = zext i32 %2 to i64
  %8 = add nsw i64 %7, -1
  %9 = add nsw i64 %7, -2
  %10 = and i64 %8, 3
  %11 = icmp ult i64 %9, 3
  br i1 %11, label %14, label %12

12:                                               ; preds = %6
  %13 = sub nsw i64 %8, %10
  br label %43

14:                                               ; preds = %43, %6
  %15 = phi float [ undef, %6 ], [ %65, %43 ]
  %16 = phi i64 [ 1, %6 ], [ %66, %43 ]
  %17 = phi float [ %4, %6 ], [ %65, %43 ]
  %18 = icmp eq i64 %10, 0
  br i1 %18, label %30, label %19

19:                                               ; preds = %14, %19
  %20 = phi i64 [ %27, %19 ], [ %16, %14 ]
  %21 = phi float [ %26, %19 ], [ %17, %14 ]
  %22 = phi i64 [ %28, %19 ], [ %10, %14 ]
  %23 = getelementptr inbounds float, float* %0, i64 %20
  %24 = load float, float* %23, align 4
  %25 = fcmp ogt float %21, %24
  %26 = select i1 %25, float %21, float %24
  %27 = add nuw nsw i64 %20, 1
  %28 = add i64 %22, -1
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %19, !llvm.loop !11

30:                                               ; preds = %14, %19, %3
  %31 = phi float [ %4, %3 ], [ %15, %14 ], [ %26, %19 ]
  %32 = icmp sgt i32 %2, 0
  br i1 %32, label %33, label %130

33:                                               ; preds = %30
  %34 = zext i32 %2 to i64
  %35 = fsub float %4, %31
  %36 = fcmp ogt float %35, -1.000000e+01
  %37 = select i1 %36, float %35, float -1.000000e+01
  %38 = fpext float %37 to double
  %39 = tail call double @exp(double %38) #5
  %40 = fptrunc double %39 to float
  store float %40, float* %1, align 4
  %41 = fadd float %40, 0.000000e+00
  %42 = icmp eq i32 %2, 1
  br i1 %42, label %69, label %115

43:                                               ; preds = %43, %12
  %44 = phi i64 [ 1, %12 ], [ %66, %43 ]
  %45 = phi float [ %4, %12 ], [ %65, %43 ]
  %46 = phi i64 [ %13, %12 ], [ %67, %43 ]
  %47 = getelementptr inbounds float, float* %0, i64 %44
  %48 = load float, float* %47, align 4
  %49 = fcmp ogt float %45, %48
  %50 = select i1 %49, float %45, float %48
  %51 = add nuw nsw i64 %44, 1
  %52 = getelementptr inbounds float, float* %0, i64 %51
  %53 = load float, float* %52, align 4
  %54 = fcmp ogt float %50, %53
  %55 = select i1 %54, float %50, float %53
  %56 = add nuw nsw i64 %44, 2
  %57 = getelementptr inbounds float, float* %0, i64 %56
  %58 = load float, float* %57, align 4
  %59 = fcmp ogt float %55, %58
  %60 = select i1 %59, float %55, float %58
  %61 = add nuw nsw i64 %44, 3
  %62 = getelementptr inbounds float, float* %0, i64 %61
  %63 = load float, float* %62, align 4
  %64 = fcmp ogt float %60, %63
  %65 = select i1 %64, float %60, float %63
  %66 = add nuw nsw i64 %44, 4
  %67 = add i64 %46, -4
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %14, label %43

69:                                               ; preds = %115, %33
  %70 = phi float [ %41, %33 ], [ %127, %115 ]
  br i1 %32, label %71, label %130

71:                                               ; preds = %69
  %72 = zext i32 %2 to i64
  %73 = icmp ult i32 %2, 4
  br i1 %73, label %74, label %76

74:                                               ; preds = %113, %71
  %75 = phi i64 [ 0, %71 ], [ %77, %113 ]
  br label %131

76:                                               ; preds = %71
  %77 = and i64 %72, 4294967292
  %78 = insertelement <4 x float> undef, float %70, i32 0
  %79 = shufflevector <4 x float> %78, <4 x float> undef, <4 x i32> zeroinitializer
  %80 = add nsw i64 %77, -4
  %81 = lshr exact i64 %80, 2
  %82 = add nuw nsw i64 %81, 1
  %83 = and i64 %82, 1
  %84 = icmp eq i64 %80, 0
  br i1 %84, label %104, label %85

85:                                               ; preds = %76
  %86 = sub nuw nsw i64 %82, %83
  br label %87

87:                                               ; preds = %87, %85
  %88 = phi i64 [ 0, %85 ], [ %101, %87 ]
  %89 = phi i64 [ %86, %85 ], [ %102, %87 ]
  %90 = getelementptr inbounds float, float* %1, i64 %88
  %91 = bitcast float* %90 to <4 x float>*
  %92 = load <4 x float>, <4 x float>* %91, align 4
  %93 = fdiv <4 x float> %92, %79
  %94 = bitcast float* %90 to <4 x float>*
  store <4 x float> %93, <4 x float>* %94, align 4
  %95 = or i64 %88, 4
  %96 = getelementptr inbounds float, float* %1, i64 %95
  %97 = bitcast float* %96 to <4 x float>*
  %98 = load <4 x float>, <4 x float>* %97, align 4
  %99 = fdiv <4 x float> %98, %79
  %100 = bitcast float* %96 to <4 x float>*
  store <4 x float> %99, <4 x float>* %100, align 4
  %101 = add i64 %88, 8
  %102 = add i64 %89, -2
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %87, !llvm.loop !12

104:                                              ; preds = %87, %76
  %105 = phi i64 [ 0, %76 ], [ %101, %87 ]
  %106 = icmp eq i64 %83, 0
  br i1 %106, label %113, label %107

107:                                              ; preds = %104
  %108 = getelementptr inbounds float, float* %1, i64 %105
  %109 = bitcast float* %108 to <4 x float>*
  %110 = load <4 x float>, <4 x float>* %109, align 4
  %111 = fdiv <4 x float> %110, %79
  %112 = bitcast float* %108 to <4 x float>*
  store <4 x float> %111, <4 x float>* %112, align 4
  br label %113

113:                                              ; preds = %104, %107
  %114 = icmp eq i64 %77, %72
  br i1 %114, label %130, label %74

115:                                              ; preds = %33, %115
  %116 = phi i64 [ %128, %115 ], [ 1, %33 ]
  %117 = phi float [ %127, %115 ], [ %41, %33 ]
  %118 = getelementptr inbounds float, float* %0, i64 %116
  %119 = load float, float* %118, align 4
  %120 = fsub float %119, %31
  %121 = fcmp ogt float %120, -1.000000e+01
  %122 = select i1 %121, float %120, float -1.000000e+01
  %123 = fpext float %122 to double
  %124 = tail call double @exp(double %123) #5
  %125 = fptrunc double %124 to float
  %126 = getelementptr inbounds float, float* %1, i64 %116
  store float %125, float* %126, align 4
  %127 = fadd float %117, %125
  %128 = add nuw nsw i64 %116, 1
  %129 = icmp eq i64 %128, %34
  br i1 %129, label %69, label %115

130:                                              ; preds = %131, %113, %30, %69
  ret void

131:                                              ; preds = %74, %131
  %132 = phi i64 [ %136, %131 ], [ %75, %74 ]
  %133 = getelementptr inbounds float, float* %1, i64 %132
  %134 = load float, float* %133, align 4
  %135 = fdiv float %134, %70
  store float %135, float* %133, align 4
  %136 = add nuw nsw i64 %132, 1
  %137 = icmp eq i64 %136, %72
  br i1 %137, label %130, label %131, !llvm.loop !13
}

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !5, !3}
!11 = distinct !{!11, !7}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !5, !3}
