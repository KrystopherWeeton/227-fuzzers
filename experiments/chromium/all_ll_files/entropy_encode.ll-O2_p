; ModuleID = '../../third_party/brotli/enc/entropy_encode.c'
source_filename = "../../third_party/brotli/enc/entropy_encode.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.HuffmanTree = type { i32, i16, i16 }

@kBrotliShellGaps = hidden local_unnamed_addr constant [6 x i64] [i64 132, i64 57, i64 23, i64 10, i64 4, i64 1], align 16
@BrotliReverseBits.kLut = internal unnamed_addr constant [16 x i64] [i64 0, i64 8, i64 4, i64 12, i64 2, i64 10, i64 6, i64 14, i64 1, i64 9, i64 5, i64 13, i64 3, i64 11, i64 7, i64 15], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @BrotliSetDepth(i32, %struct.HuffmanTree* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %5 = alloca [16 x i32], align 16
  %6 = bitcast [16 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 64, i1 false)
  %7 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 0
  store i32 -1, i32* %7, align 16
  br label %8

8:                                                ; preds = %25, %4
  %9 = phi i32 [ 0, %4 ], [ %26, %25 ]
  %10 = phi i32 [ %0, %4 ], [ %27, %25 ]
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %1, i64 %11, i32 1
  %13 = load i16, i16* %12, align 4
  %14 = icmp sgt i16 %13, -1
  br i1 %14, label %15, label %28

15:                                               ; preds = %8
  %16 = add nsw i32 %9, 1
  %17 = icmp slt i32 %9, %3
  br i1 %17, label %18, label %51

18:                                               ; preds = %15
  %19 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %1, i64 %11, i32 2
  %20 = load i16, i16* %19, align 2
  %21 = sext i16 %20 to i32
  %22 = sext i32 %16 to i64
  %23 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %22
  store i32 %21, i32* %23, align 4
  %24 = sext i16 %13 to i32
  br label %25

25:                                               ; preds = %18, %45
  %26 = phi i32 [ %16, %18 ], [ %46, %45 ]
  %27 = phi i32 [ %24, %18 ], [ %50, %45 ]
  br label %8

28:                                               ; preds = %8
  %29 = trunc i32 %9 to i8
  %30 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %1, i64 %11, i32 2
  %31 = load i16, i16* %30, align 2
  %32 = sext i16 %31 to i64
  %33 = getelementptr inbounds i8, i8* %2, i64 %32
  store i8 %29, i8* %33, align 1
  %34 = icmp sgt i32 %9, -1
  br i1 %34, label %35, label %51

35:                                               ; preds = %28
  %36 = sext i32 %9 to i64
  br label %37

37:                                               ; preds = %35, %42
  %38 = phi i64 [ %36, %35 ], [ %43, %42 ]
  %39 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, -1
  br i1 %41, label %42, label %45

42:                                               ; preds = %37
  %43 = add nsw i64 %38, -1
  %44 = icmp sgt i64 %38, 0
  br i1 %44, label %37, label %51

45:                                               ; preds = %37
  %46 = trunc i64 %38 to i32
  %47 = shl i64 %38, 32
  %48 = ashr exact i64 %47, 32
  %49 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %48
  %50 = load i32, i32* %49, align 4
  store i32 -1, i32* %49, align 4
  br label %25

51:                                               ; preds = %15, %28, %42
  %52 = phi i32 [ 1, %42 ], [ 1, %28 ], [ 0, %15 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #2
  ret i32 %52
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @BrotliCreateHuffmanTree(i32* nocapture readonly, i64, i32, %struct.HuffmanTree*, i8* nocapture) local_unnamed_addr #0 {
  %6 = alloca [16 x i32], align 16
  %7 = icmp eq i64 %1, 0
  %8 = bitcast [16 x i32]* %6 to i8*
  %9 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 0
  br label %10

10:                                               ; preds = %223, %5
  %11 = phi i32 [ 1, %5 ], [ %224, %223 ]
  br i1 %7, label %123, label %12

12:                                               ; preds = %10, %27
  %13 = phi i64 [ %28, %27 ], [ 0, %10 ]
  %14 = phi i64 [ %15, %27 ], [ %1, %10 ]
  %15 = add i64 %14, -1
  %16 = getelementptr inbounds i32, i32* %0, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %27, label %19

19:                                               ; preds = %12
  %20 = icmp ugt i32 %17, %11
  %21 = select i1 %20, i32 %17, i32 %11
  %22 = add i64 %13, 1
  %23 = trunc i64 %15 to i16
  %24 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %13, i32 0
  store i32 %21, i32* %24, align 4
  %25 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %13, i32 1
  store i16 -1, i16* %25, align 4
  %26 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %13, i32 2
  store i16 %23, i16* %26, align 2
  br label %27

27:                                               ; preds = %12, %19
  %28 = phi i64 [ %22, %19 ], [ %13, %12 ]
  %29 = icmp eq i64 %15, 0
  br i1 %29, label %30, label %12

30:                                               ; preds = %27
  %31 = icmp eq i64 %28, 1
  br i1 %31, label %32, label %37

32:                                               ; preds = %30
  %33 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 0, i32 2
  %34 = load i16, i16* %33, align 2
  %35 = sext i16 %34 to i64
  %36 = getelementptr inbounds i8, i8* %4, i64 %35
  store i8 1, i8* %36, align 1
  br label %225

37:                                               ; preds = %30
  %38 = icmp ult i64 %28, 13
  br i1 %38, label %39, label %74

39:                                               ; preds = %37
  %40 = icmp ugt i64 %28, 1
  br i1 %40, label %41, label %123

41:                                               ; preds = %39, %68
  %42 = phi i64 [ %72, %68 ], [ 1, %39 ]
  %43 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %42
  %44 = bitcast %struct.HuffmanTree* %43 to i64*
  %45 = load i64, i64* %44, align 4
  %46 = trunc i64 %45 to i32
  %47 = lshr i64 %45, 48
  %48 = trunc i64 %47 to i16
  br label %49

49:                                               ; preds = %62, %41
  %50 = phi i64 [ %42, %41 ], [ %51, %62 ]
  %51 = add i64 %50, -1
  %52 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %51
  %53 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %52, i64 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, %46
  br i1 %55, label %58, label %56

56:                                               ; preds = %49
  %57 = icmp ugt i32 %54, %46
  br i1 %57, label %62, label %68

58:                                               ; preds = %49
  %59 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %51, i32 2
  %60 = load i16, i16* %59, align 2
  %61 = icmp slt i16 %60, %48
  br i1 %61, label %62, label %68

62:                                               ; preds = %58, %56
  %63 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %50
  %64 = bitcast %struct.HuffmanTree* %52 to i64*
  %65 = bitcast %struct.HuffmanTree* %63 to i64*
  %66 = load i64, i64* %64, align 4
  store i64 %66, i64* %65, align 4
  %67 = icmp eq i64 %51, 0
  br i1 %67, label %68, label %49

68:                                               ; preds = %62, %58, %56
  %69 = phi i64 [ 0, %62 ], [ %50, %58 ], [ %50, %56 ]
  %70 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %69
  %71 = bitcast %struct.HuffmanTree* %70 to i64*
  store i64 %45, i64* %71, align 4
  %72 = add nuw i64 %42, 1
  %73 = icmp eq i64 %72, %28
  br i1 %73, label %123, label %41

74:                                               ; preds = %37
  %75 = icmp ult i64 %28, 57
  %76 = select i1 %75, i64 2, i64 0
  br label %77

77:                                               ; preds = %120, %74
  %78 = phi i64 [ %76, %74 ], [ %121, %120 ]
  %79 = getelementptr inbounds [6 x i64], [6 x i64]* @kBrotliShellGaps, i64 0, i64 %78
  %80 = load i64, i64* %79, align 8
  %81 = icmp ult i64 %80, %28
  br i1 %81, label %82, label %120

82:                                               ; preds = %77, %115
  %83 = phi i64 [ %118, %115 ], [ %80, %77 ]
  %84 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %83
  %85 = bitcast %struct.HuffmanTree* %84 to i64*
  %86 = load i64, i64* %85, align 4
  %87 = trunc i64 %86 to i32
  %88 = lshr i64 %86, 48
  %89 = trunc i64 %88 to i16
  %90 = icmp ult i64 %83, %80
  br i1 %90, label %91, label %94

91:                                               ; preds = %108, %82
  %92 = phi i64 [ %83, %82 ], [ %96, %108 ]
  %93 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %92
  br label %115

94:                                               ; preds = %82, %108
  %95 = phi i64 [ %96, %108 ], [ %83, %82 ]
  %96 = sub i64 %95, %80
  %97 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %96, i32 0
  %98 = load i32, i32* %97, align 4
  %99 = icmp eq i32 %98, %87
  br i1 %99, label %103, label %100

100:                                              ; preds = %94
  %101 = icmp ugt i32 %98, %87
  %102 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %95
  br i1 %101, label %108, label %115

103:                                              ; preds = %94
  %104 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %96, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp slt i16 %105, %89
  %107 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %95
  br i1 %106, label %108, label %115

108:                                              ; preds = %103, %100
  %109 = phi %struct.HuffmanTree* [ %102, %100 ], [ %107, %103 ]
  %110 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %96
  %111 = bitcast %struct.HuffmanTree* %110 to i64*
  %112 = bitcast %struct.HuffmanTree* %109 to i64*
  %113 = load i64, i64* %111, align 4
  store i64 %113, i64* %112, align 4
  %114 = icmp ult i64 %96, %80
  br i1 %114, label %91, label %94

115:                                              ; preds = %103, %100, %91
  %116 = phi %struct.HuffmanTree* [ %93, %91 ], [ %102, %100 ], [ %107, %103 ]
  %117 = bitcast %struct.HuffmanTree* %116 to i64*
  store i64 %86, i64* %117, align 4
  %118 = add nuw i64 %83, 1
  %119 = icmp eq i64 %118, %28
  br i1 %119, label %120, label %82

120:                                              ; preds = %115, %77
  %121 = add nuw nsw i64 %78, 1
  %122 = icmp eq i64 %121, 6
  br i1 %122, label %123, label %77

123:                                              ; preds = %120, %68, %10, %39
  %124 = phi i64 [ %28, %39 ], [ 0, %10 ], [ %28, %68 ], [ %28, %120 ]
  %125 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %124
  %126 = bitcast %struct.HuffmanTree* %125 to <2 x i64>*
  store <2 x i64> <i64 -1, i64 -1>, <2 x i64>* %126, align 4
  %127 = add i64 %124, -1
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %174, label %129

129:                                              ; preds = %123
  %130 = add i64 %124, 1
  %131 = shl i64 %124, 1
  br label %132

132:                                              ; preds = %129, %132
  %133 = phi i64 [ %127, %129 ], [ %172, %132 ]
  %134 = phi i64 [ %130, %129 ], [ %156, %132 ]
  %135 = phi i64 [ 0, %129 ], [ %154, %132 ]
  %136 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %135, i32 0
  %137 = load i32, i32* %136, align 4
  %138 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %134, i32 0
  %139 = load i32, i32* %138, align 4
  %140 = icmp ugt i32 %137, %139
  %141 = xor i1 %140, true
  %142 = zext i1 %141 to i64
  %143 = add i64 %135, %142
  %144 = zext i1 %140 to i64
  %145 = add i64 %134, %144
  %146 = select i1 %140, i64 %134, i64 %135
  %147 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %143, i32 0
  %148 = load i32, i32* %147, align 4
  %149 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %145, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp ugt i32 %148, %150
  %152 = xor i1 %151, true
  %153 = zext i1 %152 to i64
  %154 = add i64 %143, %153
  %155 = zext i1 %151 to i64
  %156 = add i64 %145, %155
  %157 = select i1 %151, i64 %145, i64 %143
  %158 = sub i64 %131, %133
  %159 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %146, i32 0
  %160 = load i32, i32* %159, align 4
  %161 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %157, i32 0
  %162 = load i32, i32* %161, align 4
  %163 = add i32 %162, %160
  %164 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %158, i32 0
  store i32 %163, i32* %164, align 4
  %165 = trunc i64 %146 to i16
  %166 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %158, i32 1
  store i16 %165, i16* %166, align 4
  %167 = trunc i64 %157 to i16
  %168 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %158, i32 2
  store i16 %167, i16* %168, align 2
  %169 = add i64 %158, 1
  %170 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %169
  %171 = bitcast %struct.HuffmanTree* %170 to i64*
  store i64 -1, i64* %171, align 4
  %172 = add i64 %133, -1
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %132

174:                                              ; preds = %132, %123
  %175 = phi i64 [ 1, %123 ], [ %124, %132 ]
  %176 = trunc i64 %175 to i32
  %177 = shl i32 %176, 1
  %178 = add i32 %177, -1
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 64, i1 false) #2
  store i32 -1, i32* %9, align 16
  br label %179

179:                                              ; preds = %219, %174
  %180 = phi i32 [ 0, %174 ], [ %220, %219 ]
  %181 = phi i32 [ %178, %174 ], [ %221, %219 ]
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %182, i32 1
  %184 = load i16, i16* %183, align 4
  %185 = icmp sgt i16 %184, -1
  br i1 %185, label %186, label %196

186:                                              ; preds = %179
  %187 = add nsw i32 %180, 1
  %188 = icmp slt i32 %180, %2
  br i1 %188, label %189, label %223

189:                                              ; preds = %186
  %190 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %182, i32 2
  %191 = load i16, i16* %190, align 2
  %192 = sext i16 %191 to i32
  %193 = sext i32 %187 to i64
  %194 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 %193
  store i32 %192, i32* %194, align 4
  %195 = sext i16 %184 to i32
  br label %219

196:                                              ; preds = %179
  %197 = trunc i32 %180 to i8
  %198 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %182, i32 2
  %199 = load i16, i16* %198, align 2
  %200 = sext i16 %199 to i64
  %201 = getelementptr inbounds i8, i8* %4, i64 %200
  store i8 %197, i8* %201, align 1
  %202 = icmp sgt i32 %180, -1
  br i1 %202, label %203, label %222

203:                                              ; preds = %196
  %204 = sext i32 %180 to i64
  br label %205

205:                                              ; preds = %210, %203
  %206 = phi i64 [ %204, %203 ], [ %211, %210 ]
  %207 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 %206
  %208 = load i32, i32* %207, align 4
  %209 = icmp eq i32 %208, -1
  br i1 %209, label %210, label %213

210:                                              ; preds = %205
  %211 = add nsw i64 %206, -1
  %212 = icmp sgt i64 %206, 0
  br i1 %212, label %205, label %222

213:                                              ; preds = %205
  %214 = trunc i64 %206 to i32
  %215 = shl i64 %206, 32
  %216 = ashr exact i64 %215, 32
  %217 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 %216
  %218 = load i32, i32* %217, align 4
  store i32 -1, i32* %217, align 4
  br label %219

219:                                              ; preds = %213, %189
  %220 = phi i32 [ %187, %189 ], [ %214, %213 ]
  %221 = phi i32 [ %195, %189 ], [ %218, %213 ]
  br label %179

222:                                              ; preds = %196, %210
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #2
  br label %225

223:                                              ; preds = %186
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #2
  %224 = shl i32 %11, 1
  br label %10

225:                                              ; preds = %222, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @BrotliOptimizeHuffmanCountsForRle(i64, i32* nocapture, i8* nocapture) local_unnamed_addr #0 {
  %4 = icmp eq i64 %0, 0
  br i1 %4, label %355, label %5

5:                                                ; preds = %3
  %6 = add i64 %0, -1
  %7 = and i64 %0, 3
  %8 = icmp ult i64 %6, 3
  br i1 %8, label %41, label %9

9:                                                ; preds = %5
  %10 = sub i64 %0, %7
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i64 [ 0, %9 ], [ %38, %11 ]
  %13 = phi i64 [ 0, %9 ], [ %37, %11 ]
  %14 = phi i64 [ %10, %9 ], [ %39, %11 ]
  %15 = getelementptr inbounds i32, i32* %1, i64 %12
  %16 = load i32, i32* %15, align 4
  %17 = icmp ne i32 %16, 0
  %18 = zext i1 %17 to i64
  %19 = add i64 %13, %18
  %20 = or i64 %12, 1
  %21 = getelementptr inbounds i32, i32* %1, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = icmp ne i32 %22, 0
  %24 = zext i1 %23 to i64
  %25 = add i64 %19, %24
  %26 = or i64 %12, 2
  %27 = getelementptr inbounds i32, i32* %1, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = icmp ne i32 %28, 0
  %30 = zext i1 %29 to i64
  %31 = add i64 %25, %30
  %32 = or i64 %12, 3
  %33 = getelementptr inbounds i32, i32* %1, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = icmp ne i32 %34, 0
  %36 = zext i1 %35 to i64
  %37 = add i64 %31, %36
  %38 = add nuw i64 %12, 4
  %39 = add i64 %14, -4
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %11

41:                                               ; preds = %11, %5
  %42 = phi i64 [ undef, %5 ], [ %37, %11 ]
  %43 = phi i64 [ 0, %5 ], [ %38, %11 ]
  %44 = phi i64 [ 0, %5 ], [ %37, %11 ]
  %45 = icmp eq i64 %7, 0
  br i1 %45, label %58, label %46

46:                                               ; preds = %41, %46
  %47 = phi i64 [ %55, %46 ], [ %43, %41 ]
  %48 = phi i64 [ %54, %46 ], [ %44, %41 ]
  %49 = phi i64 [ %56, %46 ], [ %7, %41 ]
  %50 = getelementptr inbounds i32, i32* %1, i64 %47
  %51 = load i32, i32* %50, align 4
  %52 = icmp ne i32 %51, 0
  %53 = zext i1 %52 to i64
  %54 = add i64 %48, %53
  %55 = add nuw i64 %47, 1
  %56 = add i64 %49, -1
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %46, !llvm.loop !2

58:                                               ; preds = %46, %41
  %59 = phi i64 [ %42, %41 ], [ %54, %46 ]
  %60 = icmp ult i64 %59, 16
  br i1 %60, label %355, label %61

61:                                               ; preds = %58, %64
  %62 = phi i64 [ %65, %64 ], [ %0, %58 ]
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %355, label %64

64:                                               ; preds = %61
  %65 = add i64 %62, -1
  %66 = getelementptr inbounds i32, i32* %1, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %61, label %69

69:                                               ; preds = %64
  %70 = and i64 %62, 1
  %71 = icmp eq i64 %62, 1
  br i1 %71, label %93, label %72

72:                                               ; preds = %69
  %73 = sub i64 %62, %70
  br label %74

74:                                               ; preds = %360, %72
  %75 = phi i32 [ 1073741824, %72 ], [ %362, %360 ]
  %76 = phi i64 [ 0, %72 ], [ %361, %360 ]
  %77 = phi i64 [ 0, %72 ], [ %363, %360 ]
  %78 = phi i64 [ %73, %72 ], [ %364, %360 ]
  %79 = getelementptr inbounds i32, i32* %1, i64 %77
  %80 = load i32, i32* %79, align 4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %86, label %82

82:                                               ; preds = %74
  %83 = add i64 %76, 1
  %84 = icmp ugt i32 %75, %80
  %85 = select i1 %84, i32 %80, i32 %75
  br label %86

86:                                               ; preds = %82, %74
  %87 = phi i64 [ %76, %74 ], [ %83, %82 ]
  %88 = phi i32 [ %75, %74 ], [ %85, %82 ]
  %89 = or i64 %77, 1
  %90 = getelementptr inbounds i32, i32* %1, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %360, label %356

93:                                               ; preds = %360, %69
  %94 = phi i64 [ undef, %69 ], [ %361, %360 ]
  %95 = phi i32 [ undef, %69 ], [ %362, %360 ]
  %96 = phi i32 [ 1073741824, %69 ], [ %362, %360 ]
  %97 = phi i64 [ 0, %69 ], [ %361, %360 ]
  %98 = phi i64 [ 0, %69 ], [ %363, %360 ]
  %99 = icmp eq i64 %70, 0
  br i1 %99, label %108, label %100

100:                                              ; preds = %93
  %101 = getelementptr inbounds i32, i32* %1, i64 %98
  %102 = load i32, i32* %101, align 4
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %108, label %104

104:                                              ; preds = %100
  %105 = add i64 %97, 1
  %106 = icmp ugt i32 %96, %102
  %107 = select i1 %106, i32 %102, i32 %96
  br label %108

108:                                              ; preds = %104, %100, %93
  %109 = phi i64 [ %94, %93 ], [ %97, %100 ], [ %105, %104 ]
  %110 = phi i32 [ %95, %93 ], [ %96, %100 ], [ %107, %104 ]
  %111 = icmp ult i64 %109, 5
  br i1 %111, label %355, label %112

112:                                              ; preds = %108
  %113 = icmp ult i32 %110, 4
  %114 = sub i64 %62, %109
  %115 = icmp ult i64 %114, 6
  %116 = and i1 %113, %115
  %117 = icmp ugt i64 %65, 1
  %118 = and i1 %116, %117
  br i1 %118, label %119, label %138

119:                                              ; preds = %112, %135
  %120 = phi i64 [ %136, %135 ], [ 1, %112 ]
  %121 = add i64 %120, -1
  %122 = getelementptr inbounds i32, i32* %1, i64 %121
  %123 = load i32, i32* %122, align 4
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %135, label %125

125:                                              ; preds = %119
  %126 = getelementptr inbounds i32, i32* %1, i64 %120
  %127 = load i32, i32* %126, align 4
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %135

129:                                              ; preds = %125
  %130 = add nuw i64 %120, 1
  %131 = getelementptr inbounds i32, i32* %1, i64 %130
  %132 = load i32, i32* %131, align 4
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %135, label %134

134:                                              ; preds = %129
  store i32 1, i32* %126, align 4
  br label %135

135:                                              ; preds = %129, %119, %125, %134
  %136 = add nuw i64 %120, 1
  %137 = icmp eq i64 %136, %65
  br i1 %137, label %138, label %119

138:                                              ; preds = %135, %112
  %139 = icmp ugt i64 %109, 27
  br i1 %139, label %140, label %355

140:                                              ; preds = %138
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 %62, i1 false)
  %141 = load i32, i32* %1, align 4
  br label %142

142:                                              ; preds = %140, %169
  %143 = phi i64 [ 0, %140 ], [ %171, %169 ]
  %144 = phi i32 [ %141, %140 ], [ %170, %169 ]
  %145 = phi i64 [ 0, %140 ], [ %172, %169 ]
  %146 = getelementptr i8, i8* %2, i64 %145
  %147 = icmp eq i64 %145, %62
  br i1 %147, label %152, label %148

148:                                              ; preds = %142
  %149 = getelementptr inbounds i32, i32* %1, i64 %145
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, %144
  br i1 %151, label %167, label %152

152:                                              ; preds = %148, %142
  %153 = icmp eq i32 %144, 0
  %154 = icmp ugt i64 %143, 4
  %155 = and i1 %153, %154
  br i1 %155, label %160, label %156

156:                                              ; preds = %152
  %157 = icmp ne i32 %144, 0
  %158 = icmp ugt i64 %143, 6
  %159 = and i1 %157, %158
  br i1 %159, label %160, label %163

160:                                              ; preds = %152, %156
  %161 = sub i64 0, %143
  %162 = getelementptr i8, i8* %146, i64 %161
  call void @llvm.memset.p0i8.i64(i8* align 1 %162, i8 1, i64 %143, i1 false)
  br label %163

163:                                              ; preds = %160, %156
  br i1 %147, label %169, label %164

164:                                              ; preds = %163
  %165 = getelementptr inbounds i32, i32* %1, i64 %145
  %166 = load i32, i32* %165, align 4
  br label %169

167:                                              ; preds = %148
  %168 = add i64 %143, 1
  br label %169

169:                                              ; preds = %163, %167, %164
  %170 = phi i32 [ %166, %164 ], [ %144, %163 ], [ %144, %167 ]
  %171 = phi i64 [ 1, %164 ], [ 1, %163 ], [ %168, %167 ]
  %172 = add i64 %145, 1
  %173 = icmp ugt i64 %172, %62
  br i1 %173, label %174, label %142

174:                                              ; preds = %169
  %175 = load i32, i32* %1, align 4
  %176 = getelementptr inbounds i32, i32* %1, i64 1
  %177 = load i32, i32* %176, align 4
  %178 = add i32 %177, %175
  %179 = getelementptr inbounds i32, i32* %1, i64 2
  %180 = load i32, i32* %179, align 4
  %181 = add i32 %178, %180
  %182 = shl i32 %181, 8
  %183 = udiv i32 %182, 3
  %184 = add nuw nsw i32 %183, 420
  %185 = zext i32 %184 to i64
  %186 = add i64 %62, -2
  br label %187

187:                                              ; preds = %174, %349
  %188 = phi i64 [ 0, %174 ], [ %353, %349 ]
  %189 = phi i64 [ 0, %174 ], [ %352, %349 ]
  %190 = phi i64 [ %185, %174 ], [ %351, %349 ]
  %191 = phi i64 [ 0, %174 ], [ %350, %349 ]
  %192 = icmp eq i64 %188, %62
  br i1 %192, label %212, label %193

193:                                              ; preds = %187
  %194 = getelementptr inbounds i8, i8* %2, i64 %188
  %195 = load i8, i8* %194, align 1
  %196 = icmp eq i8 %195, 0
  br i1 %196, label %197, label %212

197:                                              ; preds = %193
  %198 = icmp eq i64 %188, 0
  br i1 %198, label %204, label %199

199:                                              ; preds = %197
  %200 = add i64 %188, -1
  %201 = getelementptr inbounds i8, i8* %2, i64 %200
  %202 = load i8, i8* %201, align 1
  %203 = icmp eq i8 %202, 0
  br i1 %203, label %204, label %212

204:                                              ; preds = %199, %197
  %205 = getelementptr inbounds i32, i32* %1, i64 %188
  %206 = load i32, i32* %205, align 4
  %207 = shl i32 %206, 8
  %208 = zext i32 %207 to i64
  %209 = sub i64 1240, %190
  %210 = add i64 %209, %208
  %211 = icmp ugt i64 %210, 2479
  br i1 %211, label %212, label %336

212:                                              ; preds = %199, %193, %204, %187
  %213 = icmp ugt i64 %191, 3
  br i1 %213, label %218, label %214

214:                                              ; preds = %212
  %215 = icmp eq i64 %191, 3
  %216 = icmp eq i64 %189, 0
  %217 = and i1 %215, %216
  br i1 %217, label %218, label %307

218:                                              ; preds = %212, %214
  %219 = lshr i64 %191, 1
  %220 = add i64 %189, %219
  %221 = icmp eq i64 %189, 0
  %222 = icmp ugt i64 %191, %220
  %223 = udiv i64 %220, %191
  %224 = select i1 %222, i64 1, i64 %223
  %225 = select i1 %221, i64 0, i64 %224
  %226 = trunc i64 %225 to i32
  %227 = icmp ult i64 %191, 8
  br i1 %227, label %298, label %228

228:                                              ; preds = %218
  %229 = and i64 %191, -8
  %230 = insertelement <4 x i32> undef, i32 %226, i32 0
  %231 = shufflevector <4 x i32> %230, <4 x i32> undef, <4 x i32> zeroinitializer
  %232 = insertelement <4 x i32> undef, i32 %226, i32 0
  %233 = shufflevector <4 x i32> %232, <4 x i32> undef, <4 x i32> zeroinitializer
  %234 = add i64 %229, -8
  %235 = lshr exact i64 %234, 3
  %236 = add nuw nsw i64 %235, 1
  %237 = and i64 %236, 3
  %238 = icmp ult i64 %234, 24
  br i1 %238, label %279, label %239

239:                                              ; preds = %228
  %240 = sub nsw i64 %236, %237
  br label %241

241:                                              ; preds = %241, %239
  %242 = phi i64 [ 0, %239 ], [ %276, %241 ]
  %243 = phi i64 [ %240, %239 ], [ %277, %241 ]
  %244 = xor i64 %242, -1
  %245 = add i64 %188, %244
  %246 = getelementptr inbounds i32, i32* %1, i64 %245
  %247 = getelementptr inbounds i32, i32* %246, i64 -3
  %248 = bitcast i32* %247 to <4 x i32>*
  store <4 x i32> %231, <4 x i32>* %248, align 4
  %249 = getelementptr inbounds i32, i32* %246, i64 -4
  %250 = getelementptr inbounds i32, i32* %249, i64 -3
  %251 = bitcast i32* %250 to <4 x i32>*
  store <4 x i32> %233, <4 x i32>* %251, align 4
  %252 = sub nuw nsw i64 -9, %242
  %253 = add i64 %188, %252
  %254 = getelementptr inbounds i32, i32* %1, i64 %253
  %255 = getelementptr inbounds i32, i32* %254, i64 -3
  %256 = bitcast i32* %255 to <4 x i32>*
  store <4 x i32> %231, <4 x i32>* %256, align 4
  %257 = getelementptr inbounds i32, i32* %254, i64 -4
  %258 = getelementptr inbounds i32, i32* %257, i64 -3
  %259 = bitcast i32* %258 to <4 x i32>*
  store <4 x i32> %233, <4 x i32>* %259, align 4
  %260 = sub nuw nsw i64 -17, %242
  %261 = add i64 %188, %260
  %262 = getelementptr inbounds i32, i32* %1, i64 %261
  %263 = getelementptr inbounds i32, i32* %262, i64 -3
  %264 = bitcast i32* %263 to <4 x i32>*
  store <4 x i32> %231, <4 x i32>* %264, align 4
  %265 = getelementptr inbounds i32, i32* %262, i64 -4
  %266 = getelementptr inbounds i32, i32* %265, i64 -3
  %267 = bitcast i32* %266 to <4 x i32>*
  store <4 x i32> %233, <4 x i32>* %267, align 4
  %268 = sub nuw nsw i64 -25, %242
  %269 = add i64 %188, %268
  %270 = getelementptr inbounds i32, i32* %1, i64 %269
  %271 = getelementptr inbounds i32, i32* %270, i64 -3
  %272 = bitcast i32* %271 to <4 x i32>*
  store <4 x i32> %231, <4 x i32>* %272, align 4
  %273 = getelementptr inbounds i32, i32* %270, i64 -4
  %274 = getelementptr inbounds i32, i32* %273, i64 -3
  %275 = bitcast i32* %274 to <4 x i32>*
  store <4 x i32> %233, <4 x i32>* %275, align 4
  %276 = add i64 %242, 32
  %277 = add i64 %243, -4
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %279, label %241, !llvm.loop !4

279:                                              ; preds = %241, %228
  %280 = phi i64 [ 0, %228 ], [ %276, %241 ]
  %281 = icmp eq i64 %237, 0
  br i1 %281, label %296, label %282

282:                                              ; preds = %279, %282
  %283 = phi i64 [ %293, %282 ], [ %280, %279 ]
  %284 = phi i64 [ %294, %282 ], [ %237, %279 ]
  %285 = xor i64 %283, -1
  %286 = add i64 %188, %285
  %287 = getelementptr inbounds i32, i32* %1, i64 %286
  %288 = getelementptr inbounds i32, i32* %287, i64 -3
  %289 = bitcast i32* %288 to <4 x i32>*
  store <4 x i32> %231, <4 x i32>* %289, align 4
  %290 = getelementptr inbounds i32, i32* %287, i64 -4
  %291 = getelementptr inbounds i32, i32* %290, i64 -3
  %292 = bitcast i32* %291 to <4 x i32>*
  store <4 x i32> %233, <4 x i32>* %292, align 4
  %293 = add i64 %283, 8
  %294 = add i64 %284, -1
  %295 = icmp eq i64 %294, 0
  br i1 %295, label %296, label %282, !llvm.loop !6

296:                                              ; preds = %282, %279
  %297 = icmp eq i64 %191, %229
  br i1 %297, label %307, label %298

298:                                              ; preds = %296, %218
  %299 = phi i64 [ 0, %218 ], [ %229, %296 ]
  br label %300

300:                                              ; preds = %298, %300
  %301 = phi i64 [ %305, %300 ], [ %299, %298 ]
  %302 = xor i64 %301, -1
  %303 = add i64 %188, %302
  %304 = getelementptr inbounds i32, i32* %1, i64 %303
  store i32 %226, i32* %304, align 4
  %305 = add nuw i64 %301, 1
  %306 = icmp eq i64 %305, %191
  br i1 %306, label %307, label %300, !llvm.loop !7

307:                                              ; preds = %300, %296, %214
  %308 = icmp ult i64 %188, %186
  br i1 %308, label %309, label %323

309:                                              ; preds = %307
  %310 = getelementptr inbounds i32, i32* %1, i64 %188
  %311 = load i32, i32* %310, align 4
  %312 = add nuw i64 %188, 1
  %313 = getelementptr inbounds i32, i32* %1, i64 %312
  %314 = load i32, i32* %313, align 4
  %315 = add i32 %314, %311
  %316 = add i64 %188, 2
  %317 = getelementptr inbounds i32, i32* %1, i64 %316
  %318 = load i32, i32* %317, align 4
  %319 = add i32 %315, %318
  %320 = shl i32 %319, 8
  %321 = udiv i32 %320, 3
  %322 = add nuw nsw i32 %321, 420
  br label %329

323:                                              ; preds = %307
  %324 = icmp ult i64 %188, %62
  br i1 %324, label %325, label %329

325:                                              ; preds = %323
  %326 = getelementptr inbounds i32, i32* %1, i64 %188
  %327 = load i32, i32* %326, align 4
  %328 = shl i32 %327, 8
  br label %329

329:                                              ; preds = %323, %309, %325
  %330 = phi i32 [ %322, %309 ], [ %328, %325 ], [ 0, %323 ]
  %331 = zext i32 %330 to i64
  br i1 %192, label %349, label %332

332:                                              ; preds = %329
  %333 = getelementptr inbounds i32, i32* %1, i64 %188
  %334 = load i32, i32* %333, align 4
  %335 = zext i32 %334 to i64
  br label %349

336:                                              ; preds = %204
  %337 = add i64 %191, 1
  %338 = zext i32 %206 to i64
  %339 = add i64 %189, %338
  %340 = icmp ugt i64 %337, 3
  br i1 %340, label %341, label %349

341:                                              ; preds = %336
  %342 = shl i64 %339, 8
  %343 = lshr i64 %337, 1
  %344 = add i64 %342, %343
  %345 = udiv i64 %344, %337
  %346 = icmp eq i64 %337, 4
  %347 = add nuw nsw i64 %345, 120
  %348 = select i1 %346, i64 %347, i64 %345
  br label %349

349:                                              ; preds = %341, %332, %336, %329
  %350 = phi i64 [ 1, %329 ], [ 1, %332 ], [ %337, %336 ], [ %337, %341 ]
  %351 = phi i64 [ %331, %329 ], [ %331, %332 ], [ %190, %336 ], [ %348, %341 ]
  %352 = phi i64 [ 0, %329 ], [ %335, %332 ], [ %339, %336 ], [ %339, %341 ]
  %353 = add i64 %188, 1
  %354 = icmp ugt i64 %353, %62
  br i1 %354, label %355, label %187

355:                                              ; preds = %61, %349, %3, %108, %58, %138
  ret void

356:                                              ; preds = %86
  %357 = add i64 %87, 1
  %358 = icmp ugt i32 %88, %91
  %359 = select i1 %358, i32 %91, i32 %88
  br label %360

360:                                              ; preds = %356, %86
  %361 = phi i64 [ %87, %86 ], [ %357, %356 ]
  %362 = phi i32 [ %88, %86 ], [ %359, %356 ]
  %363 = add nuw i64 %77, 2
  %364 = add i64 %78, -2
  %365 = icmp eq i64 %364, 0
  br i1 %365, label %93, label %74
}

; Function Attrs: nounwind ssp uwtable
define hidden void @BrotliWriteHuffmanTree(i8* nocapture readonly, i64, i64*, i8* nocapture, i8* nocapture) local_unnamed_addr #0 {
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %306, label %7

7:                                                ; preds = %5, %15
  %8 = phi i64 [ %16, %15 ], [ %1, %5 ]
  %9 = phi i64 [ %17, %15 ], [ 0, %5 ]
  %10 = xor i64 %9, -1
  %11 = add i64 %10, %1
  %12 = getelementptr inbounds i8, i8* %0, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %19

15:                                               ; preds = %7
  %16 = add i64 %8, -1
  %17 = add nuw i64 %9, 1
  %18 = icmp eq i64 %17, %1
  br i1 %18, label %19, label %7

19:                                               ; preds = %7, %15
  %20 = phi i64 [ %16, %15 ], [ %8, %7 ]
  %21 = icmp ugt i64 %1, 50
  br i1 %21, label %22, label %78

22:                                               ; preds = %19
  %23 = icmp eq i64 %20, 0
  br i1 %23, label %68, label %24

24:                                               ; preds = %22, %47
  %25 = phi i64 [ %48, %47 ], [ 0, %22 ]
  %26 = phi i64 [ %63, %47 ], [ 1, %22 ]
  %27 = phi i64 [ %56, %47 ], [ 1, %22 ]
  %28 = phi i64 [ %60, %47 ], [ 0, %22 ]
  %29 = phi i64 [ %54, %47 ], [ 0, %22 ]
  %30 = getelementptr inbounds i8, i8* %0, i64 %25
  %31 = load i8, i8* %30, align 1
  %32 = add nuw i64 %25, 1
  %33 = icmp ult i64 %32, %20
  br i1 %33, label %34, label %47

34:                                               ; preds = %24, %40
  %35 = phi i64 [ %42, %40 ], [ %32, %24 ]
  %36 = phi i64 [ %41, %40 ], [ 1, %24 ]
  %37 = getelementptr inbounds i8, i8* %0, i64 %35
  %38 = load i8, i8* %37, align 1
  %39 = icmp eq i8 %38, %31
  br i1 %39, label %40, label %44

40:                                               ; preds = %34
  %41 = add i64 %36, 1
  %42 = add i64 %35, 1
  %43 = icmp eq i64 %42, %20
  br i1 %43, label %44, label %34

44:                                               ; preds = %40, %34
  %45 = phi i64 [ %36, %34 ], [ %41, %40 ]
  %46 = add i64 %45, %25
  br label %47

47:                                               ; preds = %44, %24
  %48 = phi i64 [ %46, %44 ], [ %32, %24 ]
  %49 = phi i64 [ %45, %44 ], [ 1, %24 ]
  %50 = icmp ugt i64 %49, 2
  %51 = icmp eq i8 %31, 0
  %52 = and i1 %51, %50
  %53 = select i1 %52, i64 %49, i64 0
  %54 = add i64 %53, %29
  %55 = zext i1 %52 to i64
  %56 = add i64 %27, %55
  %57 = icmp ult i64 %49, 4
  %58 = or i1 %51, %57
  %59 = select i1 %58, i64 0, i64 %49
  %60 = add i64 %59, %28
  %61 = xor i1 %58, true
  %62 = zext i1 %61 to i64
  %63 = add i64 %26, %62
  %64 = icmp ult i64 %48, %20
  br i1 %64, label %24, label %65

65:                                               ; preds = %47
  %66 = shl i64 %63, 1
  %67 = shl i64 %56, 1
  br label %68

68:                                               ; preds = %22, %65
  %69 = phi i64 [ 0, %22 ], [ %20, %65 ]
  %70 = phi i64 [ 0, %22 ], [ %54, %65 ]
  %71 = phi i64 [ 0, %22 ], [ %60, %65 ]
  %72 = phi i64 [ 2, %22 ], [ %67, %65 ]
  %73 = phi i64 [ 2, %22 ], [ %66, %65 ]
  %74 = icmp ugt i64 %71, %73
  %75 = zext i1 %74 to i32
  %76 = icmp ugt i64 %70, %72
  %77 = zext i1 %76 to i32
  br label %78

78:                                               ; preds = %68, %19
  %79 = phi i64 [ %69, %68 ], [ %20, %19 ]
  %80 = phi i32 [ %75, %68 ], [ 0, %19 ]
  %81 = phi i32 [ %77, %68 ], [ 0, %19 ]
  %82 = icmp eq i64 %79, 0
  br i1 %82, label %306, label %83

83:                                               ; preds = %78
  %84 = icmp ne i32 %80, 0
  %85 = icmp ne i32 %81, 0
  br label %86

86:                                               ; preds = %83, %302
  %87 = phi i64 [ 0, %83 ], [ %304, %302 ]
  %88 = phi i8 [ 8, %83 ], [ %303, %302 ]
  %89 = getelementptr inbounds i8, i8* %0, i64 %87
  %90 = load i8, i8* %89, align 1
  %91 = icmp ne i8 %90, 0
  %92 = and i1 %84, %91
  %93 = icmp eq i8 %90, 0
  %94 = and i1 %85, %93
  %95 = or i1 %92, %94
  br i1 %95, label %96, label %109

96:                                               ; preds = %86
  %97 = add nuw i64 %87, 1
  %98 = icmp ult i64 %97, %79
  br i1 %98, label %99, label %109

99:                                               ; preds = %96, %105
  %100 = phi i64 [ %107, %105 ], [ %97, %96 ]
  %101 = phi i64 [ %106, %105 ], [ 1, %96 ]
  %102 = getelementptr inbounds i8, i8* %0, i64 %100
  %103 = load i8, i8* %102, align 1
  %104 = icmp eq i8 %103, %90
  br i1 %104, label %105, label %109

105:                                              ; preds = %99
  %106 = add i64 %101, 1
  %107 = add i64 %100, 1
  %108 = icmp eq i64 %107, %79
  br i1 %108, label %109, label %99

109:                                              ; preds = %99, %105, %96, %86
  %110 = phi i64 [ 1, %86 ], [ 1, %96 ], [ %106, %105 ], [ %101, %99 ]
  br i1 %93, label %111, label %192

111:                                              ; preds = %109
  %112 = icmp eq i64 %110, 11
  br i1 %112, label %113, label %120

113:                                              ; preds = %111
  %114 = load i64, i64* %2, align 8
  %115 = getelementptr inbounds i8, i8* %3, i64 %114
  store i8 0, i8* %115, align 1
  %116 = load i64, i64* %2, align 8
  %117 = getelementptr inbounds i8, i8* %4, i64 %116
  store i8 0, i8* %117, align 1
  %118 = load i64, i64* %2, align 8
  %119 = add i64 %118, 1
  store i64 %119, i64* %2, align 8
  br label %148

120:                                              ; preds = %111
  %121 = icmp ult i64 %110, 3
  br i1 %121, label %125, label %122

122:                                              ; preds = %120
  %123 = load i64, i64* %2, align 8
  %124 = add i64 %110, -3
  br label %148

125:                                              ; preds = %120
  %126 = icmp eq i64 %110, 0
  br i1 %126, label %302, label %127

127:                                              ; preds = %125
  %128 = load i64, i64* %2, align 8
  %129 = and i64 %110, 1
  %130 = icmp eq i64 %110, 1
  br i1 %130, label %284, label %131

131:                                              ; preds = %127
  %132 = sub i64 %110, %129
  br label %133

133:                                              ; preds = %133, %131
  %134 = phi i64 [ %128, %131 ], [ %145, %133 ]
  %135 = phi i64 [ %132, %131 ], [ %146, %133 ]
  %136 = getelementptr inbounds i8, i8* %3, i64 %134
  store i8 0, i8* %136, align 1
  %137 = load i64, i64* %2, align 8
  %138 = getelementptr inbounds i8, i8* %4, i64 %137
  store i8 0, i8* %138, align 1
  %139 = load i64, i64* %2, align 8
  %140 = add i64 %139, 1
  store i64 %140, i64* %2, align 8
  %141 = getelementptr inbounds i8, i8* %3, i64 %140
  store i8 0, i8* %141, align 1
  %142 = load i64, i64* %2, align 8
  %143 = getelementptr inbounds i8, i8* %4, i64 %142
  store i8 0, i8* %143, align 1
  %144 = load i64, i64* %2, align 8
  %145 = add i64 %144, 1
  store i64 %145, i64* %2, align 8
  %146 = add i64 %135, -2
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %284, label %133

148:                                              ; preds = %122, %113
  %149 = phi i64 [ %119, %113 ], [ %123, %122 ]
  %150 = phi i64 [ 7, %113 ], [ %124, %122 ]
  br label %151

151:                                              ; preds = %151, %148
  %152 = phi i64 [ %149, %148 ], [ %160, %151 ]
  %153 = phi i64 [ %150, %148 ], [ %163, %151 ]
  %154 = getelementptr inbounds i8, i8* %3, i64 %152
  store i8 17, i8* %154, align 1
  %155 = trunc i64 %153 to i8
  %156 = and i8 %155, 7
  %157 = load i64, i64* %2, align 8
  %158 = getelementptr inbounds i8, i8* %4, i64 %157
  store i8 %156, i8* %158, align 1
  %159 = load i64, i64* %2, align 8
  %160 = add i64 %159, 1
  store i64 %160, i64* %2, align 8
  %161 = lshr i64 %153, 3
  %162 = icmp eq i64 %161, 0
  %163 = add nsw i64 %161, -1
  br i1 %162, label %164, label %151

164:                                              ; preds = %151
  %165 = icmp ugt i64 %159, %149
  br i1 %165, label %166, label %178

166:                                              ; preds = %164, %166
  %167 = phi i64 [ %174, %166 ], [ %159, %164 ]
  %168 = phi i64 [ %173, %166 ], [ %149, %164 ]
  %169 = getelementptr inbounds i8, i8* %3, i64 %168
  %170 = load i8, i8* %169, align 1
  %171 = getelementptr inbounds i8, i8* %3, i64 %167
  %172 = load i8, i8* %171, align 1
  store i8 %172, i8* %169, align 1
  store i8 %170, i8* %171, align 1
  %173 = add nuw i64 %168, 1
  %174 = add i64 %167, -1
  %175 = icmp ult i64 %173, %174
  br i1 %175, label %166, label %176

176:                                              ; preds = %166
  %177 = load i64, i64* %2, align 8
  br label %178

178:                                              ; preds = %176, %164
  %179 = phi i64 [ %177, %176 ], [ %160, %164 ]
  %180 = add i64 %179, -1
  %181 = icmp ugt i64 %180, %149
  br i1 %181, label %182, label %302

182:                                              ; preds = %178, %182
  %183 = phi i64 [ %190, %182 ], [ %180, %178 ]
  %184 = phi i64 [ %189, %182 ], [ %149, %178 ]
  %185 = getelementptr inbounds i8, i8* %4, i64 %184
  %186 = load i8, i8* %185, align 1
  %187 = getelementptr inbounds i8, i8* %4, i64 %183
  %188 = load i8, i8* %187, align 1
  store i8 %188, i8* %185, align 1
  store i8 %186, i8* %187, align 1
  %189 = add nuw i64 %184, 1
  %190 = add i64 %183, -1
  %191 = icmp ult i64 %189, %190
  br i1 %191, label %182, label %302

192:                                              ; preds = %109
  %193 = icmp eq i8 %88, %90
  br i1 %193, label %202, label %194

194:                                              ; preds = %192
  %195 = load i64, i64* %2, align 8
  %196 = getelementptr inbounds i8, i8* %3, i64 %195
  store i8 %90, i8* %196, align 1
  %197 = load i64, i64* %2, align 8
  %198 = getelementptr inbounds i8, i8* %4, i64 %197
  store i8 0, i8* %198, align 1
  %199 = load i64, i64* %2, align 8
  %200 = add i64 %199, 1
  store i64 %200, i64* %2, align 8
  %201 = add i64 %110, -1
  br label %202

202:                                              ; preds = %194, %192
  %203 = phi i64 [ %201, %194 ], [ %110, %192 ]
  %204 = icmp eq i64 %203, 7
  br i1 %204, label %205, label %212

205:                                              ; preds = %202
  %206 = load i64, i64* %2, align 8
  %207 = getelementptr inbounds i8, i8* %3, i64 %206
  store i8 %90, i8* %207, align 1
  %208 = load i64, i64* %2, align 8
  %209 = getelementptr inbounds i8, i8* %4, i64 %208
  store i8 0, i8* %209, align 1
  %210 = load i64, i64* %2, align 8
  %211 = add i64 %210, 1
  store i64 %211, i64* %2, align 8
  br label %239

212:                                              ; preds = %202
  %213 = icmp ult i64 %203, 3
  br i1 %213, label %216, label %214

214:                                              ; preds = %212
  %215 = load i64, i64* %2, align 8
  br label %239

216:                                              ; preds = %212
  %217 = icmp eq i64 %203, 0
  br i1 %217, label %302, label %218

218:                                              ; preds = %216
  %219 = load i64, i64* %2, align 8
  %220 = and i64 %203, 1
  %221 = icmp eq i64 %203, 1
  br i1 %221, label %293, label %222

222:                                              ; preds = %218
  %223 = sub i64 %203, %220
  br label %224

224:                                              ; preds = %224, %222
  %225 = phi i64 [ %219, %222 ], [ %236, %224 ]
  %226 = phi i64 [ %223, %222 ], [ %237, %224 ]
  %227 = getelementptr inbounds i8, i8* %3, i64 %225
  store i8 %90, i8* %227, align 1
  %228 = load i64, i64* %2, align 8
  %229 = getelementptr inbounds i8, i8* %4, i64 %228
  store i8 0, i8* %229, align 1
  %230 = load i64, i64* %2, align 8
  %231 = add i64 %230, 1
  store i64 %231, i64* %2, align 8
  %232 = getelementptr inbounds i8, i8* %3, i64 %231
  store i8 %90, i8* %232, align 1
  %233 = load i64, i64* %2, align 8
  %234 = getelementptr inbounds i8, i8* %4, i64 %233
  store i8 0, i8* %234, align 1
  %235 = load i64, i64* %2, align 8
  %236 = add i64 %235, 1
  store i64 %236, i64* %2, align 8
  %237 = add i64 %226, -2
  %238 = icmp eq i64 %237, 0
  br i1 %238, label %293, label %224

239:                                              ; preds = %214, %205
  %240 = phi i64 [ %211, %205 ], [ %215, %214 ]
  %241 = phi i64 [ 6, %205 ], [ %203, %214 ]
  %242 = add i64 %241, -3
  br label %243

243:                                              ; preds = %243, %239
  %244 = phi i64 [ %240, %239 ], [ %252, %243 ]
  %245 = phi i64 [ %242, %239 ], [ %255, %243 ]
  %246 = getelementptr inbounds i8, i8* %3, i64 %244
  store i8 16, i8* %246, align 1
  %247 = trunc i64 %245 to i8
  %248 = and i8 %247, 3
  %249 = load i64, i64* %2, align 8
  %250 = getelementptr inbounds i8, i8* %4, i64 %249
  store i8 %248, i8* %250, align 1
  %251 = load i64, i64* %2, align 8
  %252 = add i64 %251, 1
  store i64 %252, i64* %2, align 8
  %253 = lshr i64 %245, 2
  %254 = icmp eq i64 %253, 0
  %255 = add nsw i64 %253, -1
  br i1 %254, label %256, label %243

256:                                              ; preds = %243
  %257 = icmp ugt i64 %251, %240
  br i1 %257, label %258, label %270

258:                                              ; preds = %256, %258
  %259 = phi i64 [ %266, %258 ], [ %251, %256 ]
  %260 = phi i64 [ %265, %258 ], [ %240, %256 ]
  %261 = getelementptr inbounds i8, i8* %3, i64 %260
  %262 = load i8, i8* %261, align 1
  %263 = getelementptr inbounds i8, i8* %3, i64 %259
  %264 = load i8, i8* %263, align 1
  store i8 %264, i8* %261, align 1
  store i8 %262, i8* %263, align 1
  %265 = add nuw i64 %260, 1
  %266 = add i64 %259, -1
  %267 = icmp ult i64 %265, %266
  br i1 %267, label %258, label %268

268:                                              ; preds = %258
  %269 = load i64, i64* %2, align 8
  br label %270

270:                                              ; preds = %268, %256
  %271 = phi i64 [ %269, %268 ], [ %252, %256 ]
  %272 = add i64 %271, -1
  %273 = icmp ugt i64 %272, %240
  br i1 %273, label %274, label %302

274:                                              ; preds = %270, %274
  %275 = phi i64 [ %282, %274 ], [ %272, %270 ]
  %276 = phi i64 [ %281, %274 ], [ %240, %270 ]
  %277 = getelementptr inbounds i8, i8* %4, i64 %276
  %278 = load i8, i8* %277, align 1
  %279 = getelementptr inbounds i8, i8* %4, i64 %275
  %280 = load i8, i8* %279, align 1
  store i8 %280, i8* %277, align 1
  store i8 %278, i8* %279, align 1
  %281 = add nuw i64 %276, 1
  %282 = add i64 %275, -1
  %283 = icmp ult i64 %281, %282
  br i1 %283, label %274, label %302

284:                                              ; preds = %133, %127
  %285 = phi i64 [ %128, %127 ], [ %145, %133 ]
  %286 = icmp eq i64 %129, 0
  br i1 %286, label %302, label %287

287:                                              ; preds = %284
  %288 = getelementptr inbounds i8, i8* %3, i64 %285
  store i8 0, i8* %288, align 1
  %289 = load i64, i64* %2, align 8
  %290 = getelementptr inbounds i8, i8* %4, i64 %289
  store i8 0, i8* %290, align 1
  %291 = load i64, i64* %2, align 8
  %292 = add i64 %291, 1
  store i64 %292, i64* %2, align 8
  br label %302

293:                                              ; preds = %224, %218
  %294 = phi i64 [ %219, %218 ], [ %236, %224 ]
  %295 = icmp eq i64 %220, 0
  br i1 %295, label %302, label %296

296:                                              ; preds = %293
  %297 = getelementptr inbounds i8, i8* %3, i64 %294
  store i8 %90, i8* %297, align 1
  %298 = load i64, i64* %2, align 8
  %299 = getelementptr inbounds i8, i8* %4, i64 %298
  store i8 0, i8* %299, align 1
  %300 = load i64, i64* %2, align 8
  %301 = add i64 %300, 1
  store i64 %301, i64* %2, align 8
  br label %302

302:                                              ; preds = %296, %293, %274, %287, %284, %182, %270, %216, %178, %125
  %303 = phi i8 [ %88, %125 ], [ %88, %178 ], [ %90, %216 ], [ %90, %270 ], [ %88, %182 ], [ %88, %284 ], [ %88, %287 ], [ %90, %274 ], [ %90, %293 ], [ %90, %296 ]
  %304 = add i64 %110, %87
  %305 = icmp ult i64 %304, %79
  br i1 %305, label %86, label %306

306:                                              ; preds = %302, %5, %78
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @BrotliConvertBitDepthsToSymbols(i8* nocapture readonly, i64, i16* nocapture) local_unnamed_addr #0 {
  %4 = alloca [16 x i16], align 16
  %5 = alloca [16 x i16], align 16
  %6 = bitcast [16 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 0, i64 32, i1 false)
  %7 = bitcast [16 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #2
  %8 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 0
  %9 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 1
  %10 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 2
  %11 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 3
  %12 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 4
  %13 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 5
  %14 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 6
  %15 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 7
  %16 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 8
  %17 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 9
  %18 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 10
  %19 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 11
  %20 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 12
  %21 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 13
  %22 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 14
  %23 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 15
  %24 = icmp eq i64 %1, 0
  %25 = bitcast [16 x i16]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 32, i1 false)
  br i1 %24, label %124, label %26

26:                                               ; preds = %3
  %27 = add i64 %1, -1
  %28 = and i64 %1, 3
  %29 = icmp ult i64 %27, 3
  br i1 %29, label %65, label %30

30:                                               ; preds = %26
  %31 = sub i64 %1, %28
  br label %32

32:                                               ; preds = %32, %30
  %33 = phi i64 [ 0, %30 ], [ %62, %32 ]
  %34 = phi i64 [ %31, %30 ], [ %63, %32 ]
  %35 = getelementptr inbounds i8, i8* %0, i64 %33
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 %37
  %39 = load i16, i16* %38, align 2
  %40 = add i16 %39, 1
  store i16 %40, i16* %38, align 2
  %41 = or i64 %33, 1
  %42 = getelementptr inbounds i8, i8* %0, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i64
  %45 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 %44
  %46 = load i16, i16* %45, align 2
  %47 = add i16 %46, 1
  store i16 %47, i16* %45, align 2
  %48 = or i64 %33, 2
  %49 = getelementptr inbounds i8, i8* %0, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i64
  %52 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 %51
  %53 = load i16, i16* %52, align 2
  %54 = add i16 %53, 1
  store i16 %54, i16* %52, align 2
  %55 = or i64 %33, 3
  %56 = getelementptr inbounds i8, i8* %0, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = add i16 %60, 1
  store i16 %61, i16* %59, align 2
  %62 = add nuw i64 %33, 4
  %63 = add i64 %34, -4
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %32

65:                                               ; preds = %32, %26
  %66 = phi i64 [ 0, %26 ], [ %62, %32 ]
  %67 = icmp eq i64 %28, 0
  br i1 %67, label %80, label %68

68:                                               ; preds = %65, %68
  %69 = phi i64 [ %77, %68 ], [ %66, %65 ]
  %70 = phi i64 [ %78, %68 ], [ %28, %65 ]
  %71 = getelementptr inbounds i8, i8* %0, i64 %69
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i64
  %74 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 %73
  %75 = load i16, i16* %74, align 2
  %76 = add i16 %75, 1
  store i16 %76, i16* %74, align 2
  %77 = add nuw i64 %69, 1
  %78 = add i64 %70, -1
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %80, label %68, !llvm.loop !9

80:                                               ; preds = %68, %65
  %81 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 1
  %82 = load i16, i16* %81, align 2
  %83 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 2
  %84 = load i16, i16* %83, align 4
  %85 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 3
  %86 = load i16, i16* %85, align 2
  %87 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 4
  %88 = load i16, i16* %87, align 8
  %89 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 5
  %90 = load i16, i16* %89, align 2
  %91 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 6
  %92 = load i16, i16* %91, align 4
  %93 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 7
  %94 = load i16, i16* %93, align 2
  %95 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 8
  %96 = load i16, i16* %95, align 16
  %97 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 9
  %98 = load i16, i16* %97, align 2
  %99 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 10
  %100 = load i16, i16* %99, align 4
  %101 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 11
  %102 = load i16, i16* %101, align 2
  %103 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 12
  %104 = load i16, i16* %103, align 8
  %105 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 13
  %106 = load i16, i16* %105, align 2
  %107 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 14
  %108 = load i16, i16* %107, align 4
  %109 = zext i16 %82 to i32
  %110 = shl nuw nsw i32 %109, 1
  %111 = zext i16 %84 to i32
  %112 = zext i16 %86 to i32
  %113 = zext i16 %88 to i32
  %114 = zext i16 %90 to i32
  %115 = zext i16 %92 to i32
  %116 = zext i16 %94 to i32
  %117 = zext i16 %96 to i32
  %118 = zext i16 %98 to i32
  %119 = zext i16 %100 to i32
  %120 = zext i16 %102 to i32
  %121 = zext i16 %104 to i32
  %122 = zext i16 %106 to i32
  %123 = zext i16 %108 to i32
  br label %124

124:                                              ; preds = %80, %3
  %125 = phi i32 [ %123, %80 ], [ 0, %3 ]
  %126 = phi i32 [ %122, %80 ], [ 0, %3 ]
  %127 = phi i32 [ %121, %80 ], [ 0, %3 ]
  %128 = phi i32 [ %120, %80 ], [ 0, %3 ]
  %129 = phi i32 [ %119, %80 ], [ 0, %3 ]
  %130 = phi i32 [ %118, %80 ], [ 0, %3 ]
  %131 = phi i32 [ %117, %80 ], [ 0, %3 ]
  %132 = phi i32 [ %116, %80 ], [ 0, %3 ]
  %133 = phi i32 [ %115, %80 ], [ 0, %3 ]
  %134 = phi i32 [ %114, %80 ], [ 0, %3 ]
  %135 = phi i32 [ %113, %80 ], [ 0, %3 ]
  %136 = phi i32 [ %112, %80 ], [ 0, %3 ]
  %137 = phi i32 [ %111, %80 ], [ 0, %3 ]
  %138 = phi i32 [ %110, %80 ], [ 0, %3 ]
  %139 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 0
  store i16 0, i16* %139, align 16
  store i16 0, i16* %8, align 16
  store i16 0, i16* %9, align 2
  %140 = trunc i32 %138 to i16
  store i16 %140, i16* %10, align 4
  %141 = add nuw nsw i32 %138, %137
  %142 = shl nsw i32 %141, 1
  %143 = trunc i32 %142 to i16
  store i16 %143, i16* %11, align 2
  %144 = add nuw nsw i32 %142, %136
  %145 = shl nsw i32 %144, 1
  %146 = trunc i32 %145 to i16
  store i16 %146, i16* %12, align 8
  %147 = add nuw nsw i32 %145, %135
  %148 = shl i32 %147, 1
  %149 = trunc i32 %148 to i16
  store i16 %149, i16* %13, align 2
  %150 = add nuw nsw i32 %148, %134
  %151 = shl i32 %150, 1
  %152 = trunc i32 %151 to i16
  store i16 %152, i16* %14, align 4
  %153 = add nuw nsw i32 %151, %133
  %154 = shl i32 %153, 1
  %155 = trunc i32 %154 to i16
  store i16 %155, i16* %15, align 2
  %156 = add nuw nsw i32 %154, %132
  %157 = shl i32 %156, 1
  %158 = trunc i32 %157 to i16
  store i16 %158, i16* %16, align 16
  %159 = add nuw nsw i32 %157, %131
  %160 = shl i32 %159, 1
  %161 = trunc i32 %160 to i16
  store i16 %161, i16* %17, align 2
  %162 = add nuw nsw i32 %160, %130
  %163 = shl i32 %162, 1
  %164 = trunc i32 %163 to i16
  store i16 %164, i16* %18, align 4
  %165 = add nuw nsw i32 %163, %129
  %166 = shl i32 %165, 1
  %167 = trunc i32 %166 to i16
  store i16 %167, i16* %19, align 2
  %168 = add nuw nsw i32 %166, %128
  %169 = shl i32 %168, 1
  %170 = trunc i32 %169 to i16
  store i16 %170, i16* %20, align 8
  %171 = add nuw nsw i32 %169, %127
  %172 = shl i32 %171, 1
  %173 = trunc i32 %172 to i16
  store i16 %173, i16* %21, align 2
  %174 = add nuw nsw i32 %172, %126
  %175 = shl i32 %174, 1
  %176 = trunc i32 %175 to i16
  store i16 %176, i16* %22, align 4
  %177 = add nuw nsw i32 %175, %125
  %178 = trunc i32 %177 to i16
  %179 = shl i16 %178, 1
  store i16 %179, i16* %23, align 2
  br i1 %24, label %246, label %180

180:                                              ; preds = %124, %243
  %181 = phi i64 [ %244, %243 ], [ 0, %124 ]
  %182 = getelementptr inbounds i8, i8* %0, i64 %181
  %183 = load i8, i8* %182, align 1
  %184 = icmp eq i8 %183, 0
  br i1 %184, label %243, label %185

185:                                              ; preds = %180
  %186 = zext i8 %183 to i64
  %187 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 %186
  %188 = load i16, i16* %187, align 2
  %189 = add i16 %188, 1
  store i16 %189, i16* %187, align 2
  %190 = and i16 %188, 15
  %191 = zext i16 %190 to i64
  %192 = getelementptr inbounds [16 x i64], [16 x i64]* @BrotliReverseBits.kLut, i64 0, i64 %191
  %193 = load i64, i64* %192, align 8
  %194 = icmp ugt i8 %183, 4
  br i1 %194, label %195, label %236

195:                                              ; preds = %185
  %196 = add nsw i64 %186, -5
  %197 = lshr i64 %196, 2
  %198 = add nuw nsw i64 %197, 1
  %199 = and i64 %198, 1
  %200 = icmp eq i64 %197, 0
  br i1 %200, label %223, label %201

201:                                              ; preds = %195
  %202 = sub nuw nsw i64 %198, %199
  br label %203

203:                                              ; preds = %203, %201
  %204 = phi i64 [ %193, %201 ], [ %220, %203 ]
  %205 = phi i16 [ %188, %201 ], [ %215, %203 ]
  %206 = phi i64 [ %202, %201 ], [ %221, %203 ]
  %207 = shl i64 %204, 4
  %208 = lshr i16 %205, 4
  %209 = and i16 %208, 15
  %210 = zext i16 %209 to i64
  %211 = getelementptr inbounds [16 x i64], [16 x i64]* @BrotliReverseBits.kLut, i64 0, i64 %210
  %212 = load i64, i64* %211, align 8
  %213 = or i64 %212, %207
  %214 = shl i64 %213, 4
  %215 = lshr i16 %205, 8
  %216 = and i16 %215, 15
  %217 = zext i16 %216 to i64
  %218 = getelementptr inbounds [16 x i64], [16 x i64]* @BrotliReverseBits.kLut, i64 0, i64 %217
  %219 = load i64, i64* %218, align 8
  %220 = or i64 %219, %214
  %221 = add i64 %206, -2
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %223, label %203

223:                                              ; preds = %203, %195
  %224 = phi i64 [ undef, %195 ], [ %220, %203 ]
  %225 = phi i64 [ %193, %195 ], [ %220, %203 ]
  %226 = phi i16 [ %188, %195 ], [ %215, %203 ]
  %227 = icmp eq i64 %199, 0
  br i1 %227, label %236, label %228

228:                                              ; preds = %223
  %229 = lshr i16 %226, 4
  %230 = and i16 %229, 15
  %231 = zext i16 %230 to i64
  %232 = getelementptr inbounds [16 x i64], [16 x i64]* @BrotliReverseBits.kLut, i64 0, i64 %231
  %233 = load i64, i64* %232, align 8
  %234 = shl i64 %225, 4
  %235 = or i64 %233, %234
  br label %236

236:                                              ; preds = %228, %223, %185
  %237 = phi i64 [ %193, %185 ], [ %224, %223 ], [ %235, %228 ]
  %238 = sub nsw i64 0, %186
  %239 = and i64 %238, 3
  %240 = lshr i64 %237, %239
  %241 = trunc i64 %240 to i16
  %242 = getelementptr inbounds i16, i16* %2, i64 %181
  store i16 %241, i16* %242, align 2
  br label %243

243:                                              ; preds = %180, %236
  %244 = add nuw i64 %181, 1
  %245 = icmp eq i64 %244, %1
  br i1 %245, label %246, label %180

246:                                              ; preds = %243, %124
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #2
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.isvectorized", i32 1}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !8, !5}
!8 = !{!"llvm.loop.unroll.runtime.disable"}
!9 = distinct !{!9, !3}
