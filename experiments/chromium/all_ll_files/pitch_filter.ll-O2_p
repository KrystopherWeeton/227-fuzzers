; ModuleID = '../../third_party/webrtc/modules/audio_coding/codecs/isac/main/source/pitch_filter.c'
source_filename = "../../third_party/webrtc/modules/audio_coding/codecs/isac/main/source/pitch_filter.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.PitchFiltstr = type { [190 x double], [5 x double], [1 x double], [1 x double] }
%struct.PitchFilterParam = type { [454 x double], [5 x double], double*, double, double, i32, i32, i32, i32, i32, [4 x [5 x double]], [4 x double] }

@__const.FilterFrame.filter_parameters = private unnamed_addr constant { [454 x double], [5 x double], double*, double, double, i32, i32, i32, i32, i32, [4 x i8], [4 x [5 x double]], [4 x double] } { [454 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], [5 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], double* inttoptr (i64 -6148914691236517206 to double*), double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [4 x [5 x double]] [[5 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], [5 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], [5 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], [5 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF]], [4 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF] }, align 8
@kIntrpCoef = internal constant [8 x [9 x double]] [[9 x double] [double 0xBF96EDDB3331ACB8, double 0x3FB10851099F948C, double 0xBFC523EC6EB35A1E, double 0x3FE36CA73C03BA3D, double 0x3FE4B1E18E8CA4A1, double 0xBFC9EB31446581B2, double 0x3FB9697674996FA6, double 0xBFA866CE0386ADAF, double 0x3F91F66C871D593C], [9 x double] [double 0xBF94553CF3638596, double 0x3FADC75053291313, double 0xBFC1E8A86A323F45, double 0x3FDC84C76699BC44, double 0x3FE95144A3028562, double 0xBFC9F0CE85C35167, double 0x3FB889CD2FCF8D8D, double 0xBFA735E69333A358, double 0x3F90F032010DBBCA], [9 x double] [double 0xBF8DF7E8BB181B20, double 0x3FA5A8330D527BB7, double 0xBFB9561EE44B3BEC, double 0x3FD21A1A9E16E8FE, double 0x3FECEC5C7464753E, double 0xBFC5BB01CC2816FA, double 0x3FB3B9126BB398E0, double 0xBFA259E82F82DFC9, double 0x3F8A89A07D76ED2C], [9 x double] [double 0xBF7F540C2185432D, double 0x3F965D517174BE70, double 0xBFA986ACB1DD5A76, double 0x3FC0BF234D4D8436, double 0x3FEF36E329BC0D41, double 0xBFBA0E20D4F1E61C, double 0x3FA68859980EAA13, double 0xBF949706E053DC01, double 0x3F7D7B79F0648FC2], [9 x double] [double -0.000000e+00, double 0.000000e+00, double 0xBD06849B86A12B9B, double 0x3D06849B86A12B9B, double 0x3FEFFFFFFFFFFFA6, double 0x3D06849B86A12B9B, double 0xBD06849B86A12B9B, double 0.000000e+00, double -0.000000e+00], [9 x double] [double 0x3F7D7B79F0648FC2, double 0xBF949706E053DC01, double 0x3FA68859980EAA13, double 0xBFBA0E20D4F1E8EC, double 0x3FEF36E329BC0D9B, double 0x3FC0BF234D4D8436, double 0xBFA986ACB1DD54D5, double 0x3F965D517174BE70, double 0xBF7F540C2185432D], [9 x double] [double 0x3F8A89A07D7703B1, double 0xBFA259E82F82E56A, double 0x3FB3B9126BB39BB1, double 0xBFC5BB01CC281862, double 0x3FECEC5C746475F2, double 0x3FD21A1A9E16E796, double 0xBFB9561EE44B391B, double 0x3FA5A8330D527616, double 0xBF8DF7E8BB181B20], [9 x double] [double 0x3F90F032010DC70C, double 0xBFA735E69333A8F9, double 0x3FB889CD2FCF932E, double 0xBFC9F0CE85C35437, double 0x3FE95144A3028616, double 0x3FDC84C76699BA28, double 0xBFC1E8A86A323C74, double 0x3FADC75053290D72, double 0xBF94553CF3637A54]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_PitchfilterPre(double* nocapture readonly, double* nocapture, %struct.PitchFiltstr* nocapture, double* nocapture readonly, double* nocapture) local_unnamed_addr #0 {
  tail call fastcc void @FilterFrame(double* %0, %struct.PitchFiltstr* %2, double* %3, double* %4, i32 0, double* %1, [264 x double]* null)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @FilterFrame(double* nocapture readonly, %struct.PitchFiltstr* nocapture, double* nocapture readonly, double* nocapture, i32, double* nocapture, [264 x double]* nocapture) unnamed_addr #0 {
  %8 = alloca %struct.PitchFilterParam, align 8
  %9 = bitcast %struct.PitchFilterParam* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3912, i8* nonnull %9) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %9, i8* align 8 bitcast ({ [454 x double], [5 x double], double*, double, double, i32, i32, i32, i32, i32, [4 x i8], [4 x [5 x double]], [4 x double] }* @__const.FilterFrame.filter_parameters to i8*), i64 3912, i1 false)
  %10 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %8, i64 0, i32 9
  store i32 0, i32* %10, align 8
  %11 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %8, i64 0, i32 5
  store i32 0, i32* %11, align 8
  %12 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %8, i64 0, i32 7
  store i32 %4, i32* %12, align 8
  %13 = bitcast %struct.PitchFiltstr* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %9, i8* align 8 %13, i64 1520, i1 false)
  %14 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %8, i64 0, i32 0, i64 190
  %15 = bitcast double* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 2112, i1 false)
  %16 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %8, i64 0, i32 1, i64 0
  %17 = bitcast double* %16 to i8*
  %18 = getelementptr inbounds %struct.PitchFiltstr, %struct.PitchFiltstr* %1, i64 0, i32 1, i64 0
  %19 = bitcast double* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %19, i64 40, i1 false)
  %20 = icmp eq i32 %4, 3
  br i1 %20, label %21, label %25

21:                                               ; preds = %7
  %22 = bitcast [264 x double]* %6 to i8*
  %23 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %8, i64 0, i32 10, i64 0
  %24 = bitcast [5 x double]* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 192, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 8448, i1 false)
  br label %37

25:                                               ; preds = %7
  %26 = icmp eq i32 %4, 1
  br i1 %26, label %27, label %37

27:                                               ; preds = %25
  %28 = bitcast double* %3 to <2 x double>*
  %29 = load <2 x double>, <2 x double>* %28, align 8
  %30 = fmul <2 x double> %29, <double -1.300000e+00, double -1.300000e+00>
  %31 = bitcast double* %3 to <2 x double>*
  store <2 x double> %30, <2 x double>* %31, align 8
  %32 = getelementptr inbounds double, double* %3, i64 2
  %33 = bitcast double* %32 to <2 x double>*
  %34 = load <2 x double>, <2 x double>* %33, align 8
  %35 = fmul <2 x double> %34, <double -1.300000e+00, double -1.300000e+00>
  %36 = bitcast double* %32 to <2 x double>*
  store <2 x double> %35, <2 x double>* %36, align 8
  br label %37

37:                                               ; preds = %27, %21, %25
  %38 = getelementptr inbounds %struct.PitchFiltstr, %struct.PitchFiltstr* %1, i64 0, i32 2, i64 0
  %39 = load double, double* %38, align 8
  %40 = getelementptr inbounds %struct.PitchFiltstr, %struct.PitchFiltstr* %1, i64 0, i32 3, i64 0
  %41 = load double, double* %2, align 8
  %42 = fmul double %39, 1.500000e+00
  %43 = fcmp ogt double %41, %42
  br i1 %43, label %50, label %44

44:                                               ; preds = %37
  %45 = load double, double* %40, align 8
  %46 = fmul double %39, 6.700000e-01
  %47 = fcmp olt double %41, %46
  %48 = insertelement <2 x double> undef, double %45, i32 0
  %49 = insertelement <2 x double> %48, double %39, i32 1
  br i1 %47, label %50, label %56

50:                                               ; preds = %44, %37
  %51 = load double, double* %3, align 8
  %52 = insertelement <2 x double> undef, double %51, i32 0
  %53 = insertelement <2 x double> %52, double %41, i32 1
  br i1 %20, label %54, label %56

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %8, i64 0, i32 11, i64 0
  store double 1.000000e+00, double* %55, align 8
  br label %56

56:                                               ; preds = %50, %54, %44
  %57 = phi <2 x double> [ %53, %54 ], [ %53, %50 ], [ %49, %44 ]
  %58 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %8, i64 0, i32 8
  store i32 12, i32* %58, align 4
  %59 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %8, i64 0, i32 6
  %60 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %8, i64 0, i32 3
  %61 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %8, i64 0, i32 2
  %62 = bitcast double* %60 to <2 x double>*
  %63 = bitcast double* %60 to <2 x double>*
  %64 = bitcast double* %60 to <2 x double>*
  br label %65

65:                                               ; preds = %125, %56
  %66 = phi double [ %41, %56 ], [ %127, %125 ]
  %67 = phi i64 [ 0, %56 ], [ %123, %125 ]
  %68 = phi <2 x double> [ %57, %56 ], [ %73, %125 ]
  %69 = trunc i64 %67 to i32
  store i32 %69, i32* %59, align 4
  %70 = getelementptr inbounds double, double* %3, i64 %67
  %71 = load double, double* %70, align 8
  %72 = insertelement <2 x double> undef, double %71, i32 0
  %73 = insertelement <2 x double> %72, double %66, i32 1
  %74 = fsub <2 x double> %73, %68
  %75 = fdiv <2 x double> %74, <double 5.000000e+00, double 5.000000e+00>
  store <2 x double> %68, <2 x double>* %62, align 8
  br label %76

76:                                               ; preds = %120, %65
  %77 = phi i32 [ 0, %65 ], [ %118, %120 ]
  %78 = phi <2 x double> [ %68, %65 ], [ %121, %120 ]
  %79 = fadd <2 x double> %75, %78
  store <2 x double> %79, <2 x double>* %63, align 8
  %80 = extractelement <2 x double> %79, i32 1
  %81 = fadd double %80, 1.500000e+00
  %82 = fadd double %81, 5.000000e-01
  %83 = tail call i64 @lrint(double %82) #4
  %84 = trunc i64 %83 to i32
  store i32 %84, i32* %11, align 8
  %85 = sitofp i32 %84 to double
  %86 = fsub double %85, %81
  %87 = fmul double %86, 8.000000e+00
  %88 = fadd double %87, -5.000000e-01
  %89 = tail call i64 @lrint(double %88) #4
  %90 = shl i64 %89, 32
  %91 = ashr exact i64 %90, 32
  %92 = getelementptr inbounds [8 x [9 x double]], [8 x [9 x double]]* @kIntrpCoef, i64 0, i64 %91, i64 0
  store double* %92, double** %61, align 8
  %93 = load i32, i32* %12, align 8
  %94 = icmp eq i32 %93, 3
  br i1 %94, label %95, label %117

95:                                               ; preds = %76
  %96 = load i32, i32* %59, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %8, i64 0, i32 11, i64 %97
  %99 = load double, double* %98, align 8
  %100 = fadd double %99, 2.000000e-01
  store double %100, double* %98, align 8
  %101 = load i32, i32* %59, align 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %8, i64 0, i32 11, i64 %102
  %104 = load double, double* %103, align 8
  %105 = fcmp ogt double %104, 1.000000e+00
  br i1 %105, label %106, label %108

106:                                              ; preds = %95
  store double 1.000000e+00, double* %103, align 8
  %107 = load i32, i32* %59, align 4
  br label %108

108:                                              ; preds = %106, %95
  %109 = phi i32 [ %107, %106 ], [ %101, %95 ]
  %110 = icmp sgt i32 %109, 0
  br i1 %110, label %111, label %117

111:                                              ; preds = %108
  %112 = add nsw i32 %109, -1
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %8, i64 0, i32 11, i64 %113
  %115 = load double, double* %114, align 8
  %116 = fadd double %115, -2.000000e-01
  store double %116, double* %114, align 8
  br label %117

117:                                              ; preds = %76, %108, %111
  call fastcc void @FilterSegment(double* %0, %struct.PitchFilterParam* nonnull %8, double* %5, [264 x double]* %6)
  %118 = add nuw nsw i32 %77, 1
  %119 = icmp eq i32 %118, 5
  br i1 %119, label %122, label %120

120:                                              ; preds = %117
  %121 = load <2 x double>, <2 x double>* %64, align 8
  br label %76

122:                                              ; preds = %117
  %123 = add nuw nsw i64 %67, 1
  %124 = icmp eq i64 %123, 4
  br i1 %124, label %128, label %125

125:                                              ; preds = %122
  %126 = getelementptr inbounds double, double* %2, i64 %123
  %127 = load double, double* %126, align 8
  br label %65

128:                                              ; preds = %122
  br i1 %20, label %134, label %129

129:                                              ; preds = %128
  %130 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %8, i64 0, i32 0, i64 240
  %131 = bitcast double* %130 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %131, i64 1520, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %17, i64 40, i1 false)
  store double %66, double* %38, align 8
  store double %71, double* %40, align 8
  %132 = or i32 %4, 1
  %133 = icmp eq i32 %132, 3
  br i1 %133, label %134, label %135

134:                                              ; preds = %128, %129
  store i32 3, i32* %59, align 4
  store i32 24, i32* %58, align 4
  call fastcc void @FilterSegment(double* %0, %struct.PitchFilterParam* nonnull %8, double* %5, [264 x double]* %6)
  br label %135

135:                                              ; preds = %129, %134
  call void @llvm.lifetime.end.p0i8(i64 3912, i8* nonnull %9) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_PitchfilterPre_la(double* nocapture readonly, double* nocapture, %struct.PitchFiltstr* nocapture, double* nocapture readonly, double* nocapture) local_unnamed_addr #0 {
  tail call fastcc void @FilterFrame(double* %0, %struct.PitchFiltstr* %2, double* %3, double* %4, i32 2, double* %1, [264 x double]* null)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_PitchfilterPre_gains(double* nocapture readonly, double* nocapture, [264 x double]* nocapture, %struct.PitchFiltstr* nocapture, double* nocapture readonly, double* nocapture) local_unnamed_addr #0 {
  tail call fastcc void @FilterFrame(double* %0, %struct.PitchFiltstr* %3, double* %4, double* %5, i32 3, double* %1, [264 x double]* %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_PitchfilterPost(double* nocapture readonly, double* nocapture, %struct.PitchFiltstr* nocapture, double* nocapture readonly, double* nocapture) local_unnamed_addr #0 {
  tail call fastcc void @FilterFrame(double* %0, %struct.PitchFiltstr* %2, double* %3, double* %4, i32 1, double* %1, [264 x double]* null)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @FilterSegment(double* nocapture readonly, %struct.PitchFilterParam* nocapture, double* nocapture, [264 x double]* nocapture) unnamed_addr #2 {
  %5 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 9
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 5
  %8 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %296

11:                                               ; preds = %4
  %12 = load i32, i32* %7, align 8
  %13 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 2
  %14 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 3
  %15 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 1, i64 0
  %16 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 7
  %17 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 6
  %18 = add i32 %6, 190
  %19 = sub i32 %18, %12
  %20 = sext i32 %19 to i64
  %21 = sext i32 %18 to i64
  %22 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 1, i64 3
  %23 = bitcast double* %22 to i64*
  %24 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 1, i64 4
  %25 = bitcast double* %24 to i64*
  %26 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 1, i64 2
  %27 = bitcast double* %26 to i64*
  %28 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 1, i64 1
  %29 = bitcast double* %28 to i64*
  %30 = bitcast double* %15 to i64*
  %31 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 0, i64 3
  %32 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 1, i64 3
  %33 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 2, i64 3
  %34 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 3, i64 3
  %35 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 0, i64 2
  %36 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 1, i64 2
  %37 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 2, i64 2
  %38 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 3, i64 2
  %39 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 0, i64 1
  %40 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 1, i64 1
  %41 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 2, i64 1
  %42 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 3, i64 1
  %43 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 0, i64 0
  %44 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 1, i64 0
  %45 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 2, i64 0
  %46 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 3, i64 0
  %47 = bitcast double* %35 to <2 x i64>*
  %48 = bitcast double* %31 to <2 x i64>*
  %49 = bitcast double* %36 to <2 x i64>*
  %50 = bitcast double* %32 to <2 x i64>*
  %51 = bitcast double* %37 to <2 x i64>*
  %52 = bitcast double* %33 to <2 x i64>*
  %53 = bitcast double* %38 to <2 x i64>*
  %54 = bitcast double* %34 to <2 x i64>*
  %55 = bitcast double* %43 to <2 x i64>*
  %56 = bitcast double* %39 to <2 x i64>*
  %57 = bitcast double* %44 to <2 x i64>*
  %58 = bitcast double* %40 to <2 x i64>*
  %59 = bitcast double* %45 to <2 x i64>*
  %60 = bitcast double* %41 to <2 x i64>*
  %61 = bitcast double* %46 to <2 x i64>*
  %62 = bitcast double* %42 to <2 x i64>*
  br label %63

63:                                               ; preds = %11, %260
  %64 = phi i32 [ %6, %11 ], [ %291, %260 ]
  %65 = phi i64 [ %21, %11 ], [ %292, %260 ]
  %66 = phi i64 [ %20, %11 ], [ %78, %260 ]
  %67 = phi i32 [ 0, %11 ], [ %293, %260 ]
  %68 = load i64, i64* %23, align 8
  store i64 %68, i64* %25, align 8
  %69 = load i64, i64* %27, align 8
  store i64 %69, i64* %23, align 8
  %70 = load i64, i64* %29, align 8
  store i64 %70, i64* %27, align 8
  %71 = load i64, i64* %30, align 8
  store i64 %71, i64* %29, align 8
  %72 = load double*, double** %13, align 8
  %73 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 0, i64 %66
  %74 = load double, double* %73, align 8
  %75 = load double, double* %72, align 8
  %76 = fmul double %74, %75
  %77 = fadd double %76, 0.000000e+00
  %78 = add nsw i64 %66, 1
  %79 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 0, i64 %78
  %80 = load double, double* %79, align 8
  %81 = getelementptr inbounds double, double* %72, i64 1
  %82 = load double, double* %81, align 8
  %83 = fmul double %80, %82
  %84 = fadd double %77, %83
  %85 = add nsw i64 %66, 2
  %86 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 0, i64 %85
  %87 = load double, double* %86, align 8
  %88 = getelementptr inbounds double, double* %72, i64 2
  %89 = load double, double* %88, align 8
  %90 = fmul double %87, %89
  %91 = fadd double %84, %90
  %92 = add nsw i64 %66, 3
  %93 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 0, i64 %92
  %94 = load double, double* %93, align 8
  %95 = getelementptr inbounds double, double* %72, i64 3
  %96 = load double, double* %95, align 8
  %97 = fmul double %94, %96
  %98 = fadd double %91, %97
  %99 = add nsw i64 %66, 4
  %100 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 0, i64 %99
  %101 = load double, double* %100, align 8
  %102 = getelementptr inbounds double, double* %72, i64 4
  %103 = load double, double* %102, align 8
  %104 = fmul double %101, %103
  %105 = fadd double %98, %104
  %106 = add nsw i64 %66, 5
  %107 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 0, i64 %106
  %108 = load double, double* %107, align 8
  %109 = getelementptr inbounds double, double* %72, i64 5
  %110 = load double, double* %109, align 8
  %111 = fmul double %108, %110
  %112 = fadd double %105, %111
  %113 = add nsw i64 %66, 6
  %114 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 0, i64 %113
  %115 = load double, double* %114, align 8
  %116 = getelementptr inbounds double, double* %72, i64 6
  %117 = load double, double* %116, align 8
  %118 = fmul double %115, %117
  %119 = fadd double %112, %118
  %120 = add nsw i64 %66, 7
  %121 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 0, i64 %120
  %122 = load double, double* %121, align 8
  %123 = getelementptr inbounds double, double* %72, i64 7
  %124 = load double, double* %123, align 8
  %125 = fmul double %122, %124
  %126 = fadd double %119, %125
  %127 = add nsw i64 %66, 8
  %128 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 0, i64 %127
  %129 = load double, double* %128, align 8
  %130 = getelementptr inbounds double, double* %72, i64 8
  %131 = load double, double* %130, align 8
  %132 = fmul double %129, %131
  %133 = fadd double %126, %132
  %134 = load double, double* %14, align 8
  %135 = fmul double %133, %134
  store double %135, double* %15, align 8
  %136 = load i32, i32* %16, align 8
  %137 = icmp eq i32 %136, 3
  %138 = bitcast i64 %71 to double
  %139 = bitcast i64 %70 to double
  %140 = bitcast i64 %69 to double
  %141 = bitcast i64 %68 to double
  br i1 %137, label %142, label %260

142:                                              ; preds = %63
  %143 = load i32, i32* %7, align 8
  %144 = sub nsw i32 %64, %143
  %145 = sub nsw i32 0, %144
  %146 = load <2 x i64>, <2 x i64>* %47, align 8
  store <2 x i64> %146, <2 x i64>* %48, align 8
  %147 = load <2 x i64>, <2 x i64>* %49, align 8
  store <2 x i64> %147, <2 x i64>* %50, align 8
  %148 = load <2 x i64>, <2 x i64>* %51, align 8
  store <2 x i64> %148, <2 x i64>* %52, align 8
  %149 = load <2 x i64>, <2 x i64>* %53, align 8
  store <2 x i64> %149, <2 x i64>* %54, align 8
  %150 = load <2 x i64>, <2 x i64>* %55, align 8
  store <2 x i64> %150, <2 x i64>* %56, align 8
  %151 = load <2 x i64>, <2 x i64>* %57, align 8
  store <2 x i64> %151, <2 x i64>* %58, align 8
  %152 = load <2 x i64>, <2 x i64>* %59, align 8
  store <2 x i64> %152, <2 x i64>* %60, align 8
  %153 = load <2 x i64>, <2 x i64>* %61, align 8
  store <2 x i64> %153, <2 x i64>* %62, align 8
  %154 = icmp slt i32 %144, 0
  %155 = select i1 %154, i32 %145, i32 0
  %156 = load i32, i32* %17, align 4
  %157 = icmp slt i32 %156, 0
  br i1 %157, label %260, label %158

158:                                              ; preds = %142
  %159 = icmp sgt i32 %155, 8
  %160 = sext i32 %155 to i64
  %161 = sext i32 %156 to i64
  %162 = sub nsw i64 9, %160
  %163 = and i64 %162, 1
  %164 = icmp eq i32 %155, 8
  %165 = sub nsw i64 %162, %163
  %166 = icmp eq i64 %163, 0
  br label %168

167:                                              ; preds = %212
  br i1 %157, label %260, label %222

168:                                              ; preds = %212, %158
  %169 = phi i64 [ %220, %212 ], [ 0, %158 ]
  br i1 %159, label %212, label %170

170:                                              ; preds = %168
  br i1 %164, label %198, label %171

171:                                              ; preds = %170, %171
  %172 = phi i64 [ %194, %171 ], [ 8, %170 ]
  %173 = phi double [ %193, %171 ], [ 0.000000e+00, %170 ]
  %174 = phi i32 [ %195, %171 ], [ 8, %170 ]
  %175 = phi i64 [ %196, %171 ], [ %165, %170 ]
  %176 = add nsw i32 %174, %144
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds [264 x double], [264 x double]* %3, i64 %169, i64 %177
  %179 = load double, double* %178, align 8
  %180 = getelementptr inbounds double, double* %72, i64 %172
  %181 = load double, double* %180, align 8
  %182 = fmul double %179, %181
  %183 = fadd double %173, %182
  %184 = add nsw i64 %172, -1
  %185 = add nsw i32 %174, -1
  %186 = add nsw i32 %185, %144
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds [264 x double], [264 x double]* %3, i64 %169, i64 %187
  %189 = load double, double* %188, align 8
  %190 = getelementptr inbounds double, double* %72, i64 %184
  %191 = load double, double* %190, align 8
  %192 = fmul double %189, %191
  %193 = fadd double %183, %192
  %194 = add nsw i64 %172, -2
  %195 = add nsw i32 %174, -2
  %196 = add i64 %175, -2
  %197 = icmp eq i64 %196, 0
  br i1 %197, label %198, label %171

198:                                              ; preds = %171, %170
  %199 = phi double [ undef, %170 ], [ %193, %171 ]
  %200 = phi i64 [ 8, %170 ], [ %194, %171 ]
  %201 = phi double [ 0.000000e+00, %170 ], [ %193, %171 ]
  %202 = phi i32 [ 8, %170 ], [ %195, %171 ]
  br i1 %166, label %212, label %203

203:                                              ; preds = %198
  %204 = add nsw i32 %202, %144
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds [264 x double], [264 x double]* %3, i64 %169, i64 %205
  %207 = load double, double* %206, align 8
  %208 = getelementptr inbounds double, double* %72, i64 %200
  %209 = load double, double* %208, align 8
  %210 = fmul double %207, %209
  %211 = fadd double %201, %210
  br label %212

212:                                              ; preds = %203, %198, %168
  %213 = phi double [ 0.000000e+00, %168 ], [ %199, %198 ], [ %211, %203 ]
  %214 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 11, i64 %169
  %215 = load double, double* %214, align 8
  %216 = fmul double %133, %215
  %217 = fmul double %213, %134
  %218 = fadd double %216, %217
  %219 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 %169, i64 0
  store double %218, double* %219, align 8
  %220 = add nuw nsw i64 %169, 1
  %221 = icmp slt i64 %169, %161
  br i1 %221, label %168, label %167

222:                                              ; preds = %167, %250
  %223 = phi i32 [ %252, %250 ], [ %64, %167 ]
  %224 = phi i64 [ %251, %250 ], [ 0, %167 ]
  %225 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 %224, i64 0
  %226 = load double, double* %225, align 8
  %227 = fmul double %226, -7.000000e-02
  %228 = fsub double 0.000000e+00, %227
  %229 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 %224, i64 1
  %230 = load double, double* %229, align 8
  %231 = fmul double %230, 2.500000e-01
  %232 = fsub double %228, %231
  %233 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 %224, i64 2
  %234 = load double, double* %233, align 8
  %235 = fmul double %234, 6.400000e-01
  %236 = fsub double %232, %235
  %237 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 %224, i64 3
  %238 = load double, double* %237, align 8
  %239 = fmul double %238, 2.500000e-01
  %240 = fsub double %236, %239
  %241 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 10, i64 %224, i64 4
  %242 = load double, double* %241, align 8
  %243 = fmul double %242, -7.000000e-02
  %244 = fsub double %240, %243
  %245 = sext i32 %223 to i64
  %246 = getelementptr inbounds [264 x double], [264 x double]* %3, i64 %224, i64 %245
  store double %244, double* %246, align 8
  %247 = load i32, i32* %17, align 4
  %248 = sext i32 %247 to i64
  %249 = icmp slt i64 %224, %248
  br i1 %249, label %250, label %253

250:                                              ; preds = %222
  %251 = add nuw nsw i64 %224, 1
  %252 = load i32, i32* %5, align 8
  br label %222

253:                                              ; preds = %222
  %254 = load double, double* %15, align 8
  %255 = load double, double* %28, align 8
  %256 = load double, double* %26, align 8
  %257 = load double, double* %22, align 8
  %258 = load double, double* %24, align 8
  %259 = load i32, i32* %5, align 8
  br label %260

260:                                              ; preds = %142, %253, %167, %63
  %261 = phi i32 [ %259, %253 ], [ %64, %167 ], [ %64, %63 ], [ %64, %142 ]
  %262 = phi double [ %258, %253 ], [ %141, %167 ], [ %141, %63 ], [ %141, %142 ]
  %263 = phi double [ %257, %253 ], [ %140, %167 ], [ %140, %63 ], [ %140, %142 ]
  %264 = phi double [ %256, %253 ], [ %139, %167 ], [ %139, %63 ], [ %139, %142 ]
  %265 = phi double [ %255, %253 ], [ %138, %167 ], [ %138, %63 ], [ %138, %142 ]
  %266 = phi double [ %254, %253 ], [ %135, %167 ], [ %135, %63 ], [ %135, %142 ]
  %267 = fmul double %266, -7.000000e-02
  %268 = fadd double %267, 0.000000e+00
  %269 = fmul double %265, 2.500000e-01
  %270 = fadd double %268, %269
  %271 = fmul double %264, 6.400000e-01
  %272 = fadd double %270, %271
  %273 = fmul double %263, 2.500000e-01
  %274 = fadd double %272, %273
  %275 = fmul double %262, -7.000000e-02
  %276 = fadd double %274, %275
  %277 = sext i32 %261 to i64
  %278 = getelementptr inbounds double, double* %0, i64 %277
  %279 = load double, double* %278, align 8
  %280 = fsub double %279, %276
  %281 = getelementptr inbounds double, double* %2, i64 %277
  store double %280, double* %281, align 8
  %282 = load i32, i32* %5, align 8
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds double, double* %0, i64 %283
  %285 = load double, double* %284, align 8
  %286 = getelementptr inbounds double, double* %2, i64 %283
  %287 = load double, double* %286, align 8
  %288 = fadd double %285, %287
  %289 = getelementptr inbounds %struct.PitchFilterParam, %struct.PitchFilterParam* %1, i64 0, i32 0, i64 %65
  store double %288, double* %289, align 8
  %290 = load i32, i32* %5, align 8
  %291 = add nsw i32 %290, 1
  store i32 %291, i32* %5, align 8
  %292 = add nsw i64 %65, 1
  %293 = add nuw nsw i32 %67, 1
  %294 = load i32, i32* %8, align 4
  %295 = icmp slt i32 %293, %294
  br i1 %295, label %63, label %296

296:                                              ; preds = %260, %4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare i64 @lrint(double) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
