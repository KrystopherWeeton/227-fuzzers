; ModuleID = '../../third_party/blink/renderer/modules/webaudio/iir_dsp_kernel.cc'
source_filename = "../../third_party/blink/renderer/modules/webaudio/iir_dsp_kernel.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::IIRDSPKernel" = type { %"class.blink::AudioDSPKernel", %"class.blink::IIRFilter", double }
%"class.blink::AudioDSPKernel" = type { i32 (...)**, %"class.blink::AudioDSPKernelProcessor"*, float, i32 }
%"class.blink::AudioDSPKernelProcessor" = type <{ %"class.blink::AudioProcessor", %"class.WTF::Vector", %"class.WTF::Mutex", i8, [7 x i8] }>
%"class.blink::AudioProcessor" = type { i32 (...)**, i8, i32, float, i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.std::__1::unique_ptr"*, i32, i32 }
%"class.std::__1::unique_ptr" = type opaque
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.blink::IIRFilter" = type { %"class.blink::AudioArray", %"class.blink::AudioArray", i32, %"class.blink::AudioArray"*, %"class.blink::AudioArray"* }
%"class.blink::AudioArray" = type <{ double*, double*, i32, [4 x i8] }>
%"class.blink::IIRProcessor" = type { %"class.blink::AudioDSPKernelProcessor.base", [7 x i8], %"class.blink::AudioArray", %"class.blink::AudioArray", i8, %"class.std::__1::unique_ptr.0" }
%"class.blink::AudioDSPKernelProcessor.base" = type <{ %"class.blink::AudioProcessor", %"class.WTF::Vector", %"class.WTF::Mutex", i8 }>
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::IIRDSPKernel"* }
%"class.WTF::Vector.2" = type { %"class.WTF::VectorBuffer.3" }
%"class.WTF::VectorBuffer.3" = type { %"class.WTF::VectorBufferBase.4" }
%"class.WTF::VectorBufferBase.4" = type { float*, i32, i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN5blink12IIRDSPKernelD2Ev = comdat any

$_ZN5blink12IIRDSPKernelD0Ev = comdat any

$_ZN5blink14AudioDSPKernel22ProcessOnlyAudioParamsEj = comdat any

$_ZN5blink12IIRDSPKernel5ResetEv = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIfEEmm = comdat any

$_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj = comdat any

@_ZTVN5blink12IIRDSPKernelE = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::IIRDSPKernel"*)* @_ZN5blink12IIRDSPKernelD2Ev to i8*), i8* bitcast (void (%"class.blink::IIRDSPKernel"*)* @_ZN5blink12IIRDSPKernelD0Ev to i8*), i8* bitcast (void (%"class.blink::IIRDSPKernel"*, float*, float*, i32)* @_ZN5blink12IIRDSPKernel7ProcessEPKfPfj to i8*), i8* bitcast (void (%"class.blink::AudioDSPKernel"*, i32)* @_ZN5blink14AudioDSPKernel22ProcessOnlyAudioParamsEj to i8*), i8* bitcast (void (%"class.blink::IIRDSPKernel"*)* @_ZN5blink12IIRDSPKernel5ResetEv to i8*), i8* bitcast (double (%"class.blink::IIRDSPKernel"*)* @_ZNK5blink12IIRDSPKernel8TailTimeEv to i8*), i8* bitcast (double (%"class.blink::IIRDSPKernel"*)* @_ZNK5blink12IIRDSPKernel11LatencyTimeEv to i8*), i8* bitcast (i1 (%"class.blink::IIRDSPKernel"*)* @_ZNK5blink12IIRDSPKernel22RequiresTailProcessingEv to i8*)] }, align 8
@_ZTVN5blink14AudioDSPKernelE = external unnamed_addr constant { [10 x i8*] }, align 8
@.str = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.1 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIfEEPKcv = private unnamed_addr constant [53 x i8] c"const char *WTF::GetStringWithTypeName() [T = float]\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.3 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1

@_ZN5blink12IIRDSPKernelC1EPNS_12IIRProcessorE = hidden unnamed_addr alias void (%"class.blink::IIRDSPKernel"*, %"class.blink::IIRProcessor"*), void (%"class.blink::IIRDSPKernel"*, %"class.blink::IIRProcessor"*)* @_ZN5blink12IIRDSPKernelC2EPNS_12IIRProcessorE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12IIRDSPKernelC2EPNS_12IIRProcessorE(%"class.blink::IIRDSPKernel"*, %"class.blink::IIRProcessor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::IIRDSPKernel", %"class.blink::IIRDSPKernel"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN5blink14AudioDSPKernelE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.blink::IIRDSPKernel", %"class.blink::IIRDSPKernel"* %0, i64 0, i32 0, i32 1
  %5 = bitcast %"class.blink::AudioDSPKernelProcessor"** %4 to %"class.blink::IIRProcessor"**
  store %"class.blink::IIRProcessor"* %1, %"class.blink::IIRProcessor"** %5, align 8
  %6 = getelementptr inbounds %"class.blink::IIRDSPKernel", %"class.blink::IIRDSPKernel"* %0, i64 0, i32 0, i32 2
  %7 = getelementptr inbounds %"class.blink::IIRProcessor", %"class.blink::IIRProcessor"* %1, i64 0, i32 0, i32 0, i32 3
  %8 = bitcast float* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = bitcast float* %6 to i32*
  store i32 %9, i32* %10, align 8
  %11 = getelementptr inbounds %"class.blink::IIRDSPKernel", %"class.blink::IIRDSPKernel"* %0, i64 0, i32 0, i32 3
  %12 = getelementptr inbounds %"class.blink::IIRProcessor", %"class.blink::IIRProcessor"* %1, i64 0, i32 0, i32 0, i32 4
  %13 = load i32, i32* %12, align 4
  store i32 %13, i32* %11, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN5blink12IIRDSPKernelE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %14 = getelementptr inbounds %"class.blink::IIRDSPKernel", %"class.blink::IIRDSPKernel"* %0, i64 0, i32 1
  %15 = getelementptr inbounds %"class.blink::IIRProcessor", %"class.blink::IIRProcessor"* %1, i64 0, i32 3
  %16 = getelementptr inbounds %"class.blink::IIRProcessor", %"class.blink::IIRProcessor"* %1, i64 0, i32 2
  tail call void @_ZN5blink9IIRFilterC1EPKNS_10AudioArrayIdEES4_(%"class.blink::IIRFilter"* %14, %"class.blink::AudioArray"* %15, %"class.blink::AudioArray"* %16) #7
  %17 = load float, float* %7, align 8
  %18 = fpext float %17 to double
  %19 = getelementptr inbounds %"class.blink::IIRProcessor", %"class.blink::IIRProcessor"* %1, i64 0, i32 4
  %20 = load i8, i8* %19, align 8, !range !2
  %21 = icmp ne i8 %20, 0
  %22 = load i32, i32* %12, align 4
  %23 = tail call double @_ZN5blink9IIRFilter8TailTimeEdbj(%"class.blink::IIRFilter"* %14, double %18, i1 zeroext %21, i32 %22) #7
  %24 = getelementptr inbounds %"class.blink::IIRDSPKernel", %"class.blink::IIRDSPKernel"* %0, i64 0, i32 2
  store double %23, double* %24, align 8
  ret void
}

declare void @_ZN5blink9IIRFilterC1EPKNS_10AudioArrayIdEES4_(%"class.blink::IIRFilter"*, %"class.blink::AudioArray"*, %"class.blink::AudioArray"*) unnamed_addr #1

declare double @_ZN5blink9IIRFilter8TailTimeEdbj(%"class.blink::IIRFilter"*, double, i1 zeroext, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12IIRDSPKernel7ProcessEPKfPfj(%"class.blink::IIRDSPKernel"*, float*, float*, i32) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::IIRDSPKernel", %"class.blink::IIRDSPKernel"* %0, i64 0, i32 1
  tail call void @_ZN5blink9IIRFilter7ProcessEPKfPfj(%"class.blink::IIRFilter"* %5, float* %1, float* %2, i32 %3) #7
  ret void
}

declare void @_ZN5blink9IIRFilter7ProcessEPKfPfj(%"class.blink::IIRFilter"*, float*, float*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12IIRDSPKernel20GetFrequencyResponseEiPKfPfS3_(%"class.blink::IIRDSPKernel"*, i32, float* nocapture readonly, float*, float*) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.WTF::Vector.2", align 8
  %7 = bitcast %"class.WTF::Vector.2"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #7
  %8 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %6, i64 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %6, i64 0, i32 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %6, i64 0, i32 0, i32 0, i32 2
  %11 = bitcast %"class.WTF::Vector.2"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false)
  store float* null, float** %8, align 8
  store i32 0, i32* %9, align 8
  %12 = icmp eq i32 %1, 0
  br i1 %12, label %23, label %13

13:                                               ; preds = %5
  %14 = zext i32 %1 to i64
  %15 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIfEEmm(i64 %14) #7
  %16 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %15, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIfEEPKcv, i64 0, i64 0)) #7
  %17 = ptrtoint i8* %16 to i64
  %18 = bitcast %"class.WTF::Vector.2"* %6 to i64*
  store atomic i64 %17, i64* %18 monotonic, align 8
  %19 = lshr i64 %15, 2
  %20 = trunc i64 %19 to i32
  store i32 %20, i32* %9, align 8
  %21 = shl nuw nsw i64 %14, 2
  %22 = bitcast i8* %16 to float*
  br label %23

23:                                               ; preds = %5, %13
  %24 = phi float* [ %22, %13 ], [ null, %5 ]
  %25 = phi i64 [ %21, %13 ], [ 0, %5 ]
  %26 = phi i8* [ %16, %13 ], [ null, %5 ]
  store i32 %1, i32* %10, align 4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %26, i8 0, i64 %25, i1 false) #7
  %27 = getelementptr inbounds %"class.blink::IIRDSPKernel", %"class.blink::IIRDSPKernel"* %0, i64 0, i32 0, i32 2
  %28 = load float, float* %27, align 8
  %29 = fpext float %28 to double
  %30 = fmul double %29, 5.000000e-01
  %31 = icmp sgt i32 %1, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %23
  %33 = zext i32 %1 to i64
  br label %48

34:                                               ; preds = %48
  %35 = load float*, float** %8, align 8
  br label %36

36:                                               ; preds = %34, %23
  %37 = phi float* [ %35, %34 ], [ %24, %23 ]
  %38 = getelementptr inbounds %"class.blink::IIRDSPKernel", %"class.blink::IIRDSPKernel"* %0, i64 0, i32 1
  call void @_ZN5blink9IIRFilter20GetFrequencyResponseEiPKfPfS3_(%"class.blink::IIRFilter"* %38, i32 %1, float* %37, float* %3, float* %4) #7
  %39 = load float*, float** %8, align 8
  %40 = icmp eq float* %39, null
  %41 = bitcast float* %39 to i8*
  br i1 %40, label %47, label %42, !prof !3

42:                                               ; preds = %36
  %43 = load i32, i32* %10, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %46, label %45, !prof !4

45:                                               ; preds = %42
  store i32 0, i32* %10, align 4
  br label %46

46:                                               ; preds = %45, %42
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %41) #7
  store float* null, float** %8, align 8
  br label %47

47:                                               ; preds = %36, %46
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #7
  ret void

48:                                               ; preds = %48, %32
  %49 = phi i64 [ 0, %32 ], [ %57, %48 ]
  %50 = getelementptr inbounds float, float* %2, i64 %49
  %51 = load float, float* %50, align 4
  %52 = fpext float %51 to double
  %53 = fdiv double %52, %30
  %54 = fptrunc double %53 to float
  %55 = trunc i64 %49 to i32
  %56 = call dereferenceable(4) float* @_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.2"* nonnull %6, i32 %55) #7
  store float %54, float* %56, align 4
  %57 = add nuw nsw i64 %49, 1
  %58 = icmp eq i64 %57, %33
  br i1 %58, label %34, label %48
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN5blink9IIRFilter20GetFrequencyResponseEiPKfPfS3_(%"class.blink::IIRFilter"*, i32, float*, float*, float*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK5blink12IIRDSPKernel22RequiresTailProcessingEv(%"class.blink::IIRDSPKernel"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK5blink12IIRDSPKernel8TailTimeEv(%"class.blink::IIRDSPKernel"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::IIRDSPKernel", %"class.blink::IIRDSPKernel"* %0, i64 0, i32 2
  %3 = load double, double* %2, align 8
  ret double %3
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden double @_ZNK5blink12IIRDSPKernel11LatencyTimeEv(%"class.blink::IIRDSPKernel"* nocapture readnone) unnamed_addr #3 align 2 {
  ret double 0.000000e+00
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink12IIRDSPKernelD2Ev(%"class.blink::IIRDSPKernel"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::IIRDSPKernel", %"class.blink::IIRDSPKernel"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN5blink12IIRDSPKernelE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::IIRDSPKernel", %"class.blink::IIRDSPKernel"* %0, i64 0, i32 1
  tail call void @_ZN5blink9IIRFilterD1Ev(%"class.blink::IIRFilter"* %3) #7
  %4 = getelementptr inbounds %"class.blink::IIRDSPKernel", %"class.blink::IIRDSPKernel"* %0, i64 0, i32 0
  tail call void @_ZN5blink14AudioDSPKernelD2Ev(%"class.blink::AudioDSPKernel"* %4) #7
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink12IIRDSPKernelD0Ev(%"class.blink::IIRDSPKernel"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::IIRDSPKernel", %"class.blink::IIRDSPKernel"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN5blink12IIRDSPKernelE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::IIRDSPKernel", %"class.blink::IIRDSPKernel"* %0, i64 0, i32 1
  tail call void @_ZN5blink9IIRFilterD1Ev(%"class.blink::IIRFilter"* %3) #7
  %4 = getelementptr inbounds %"class.blink::IIRDSPKernel", %"class.blink::IIRDSPKernel"* %0, i64 0, i32 0
  tail call void @_ZN5blink14AudioDSPKernelD2Ev(%"class.blink::AudioDSPKernel"* %4) #7
  %5 = bitcast %"class.blink::IIRDSPKernel"* %0 to i8*
  tail call void @free(i8* %5) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink14AudioDSPKernel22ProcessOnlyAudioParamsEj(%"class.blink::AudioDSPKernel"*, i32) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink12IIRDSPKernel5ResetEv(%"class.blink::IIRDSPKernel"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::IIRDSPKernel", %"class.blink::IIRDSPKernel"* %0, i64 0, i32 1
  tail call void @_ZN5blink9IIRFilter5ResetEv(%"class.blink::IIRFilter"* %2) #7
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5blink9IIRFilterD1Ev(%"class.blink::IIRFilter"*) unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN5blink14AudioDSPKernelD2Ev(%"class.blink::AudioDSPKernel"*) unnamed_addr #6

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #6

declare void @_ZN5blink9IIRFilter5ResetEv(%"class.blink::IIRFilter"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIfEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 536346624
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 536346624) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8* %11, i8* %12) #7
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.1, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #7
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %20 = shl i64 %0, 2
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #7
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) float* @_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.2"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #7
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #7
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i8* %14, i8* %15) #7
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #7
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #7
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #7
  %23 = getelementptr inbounds %"class.WTF::Vector.2", %"class.WTF::Vector.2"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load float*, float** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds float, float* %24, i64 %25
  ret float* %26
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!"branch_weights", i32 1, i32 2000}
