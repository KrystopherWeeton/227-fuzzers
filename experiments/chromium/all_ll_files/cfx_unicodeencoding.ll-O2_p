; ModuleID = '../../third_party/pdfium/core/fxge/cfx_unicodeencoding.cpp'
source_filename = "../../third_party/pdfium/core/fxge/cfx_unicodeencoding.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_UnicodeEncoding = type { i32 (...)**, %"class.fxcrt::UnownedPtr" }
%"class.fxcrt::UnownedPtr" = type { %class.CFX_Font* }
%class.CFX_Font = type <{ %"class.fxcrt::RetainPtr", %"class.std::__1::unique_ptr.1", %"class.fxcrt::RetainPtr.5", %"class.fxcrt::RetainPtr.27", %"class.std::__1::unique_ptr.33", %"class.std::__1::unique_ptr.45", %"class.std::__1::vector", %"class.pdfium::span", i8, i8, [6 x i8] }>
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.IFX_SeekableReadStream* }
%class.IFX_SeekableReadStream = type opaque
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %struct.FT_StreamRec_* }
%struct.FT_StreamRec_ = type { i8*, i64, i64, %union.FT_StreamDesc_, %union.FT_StreamDesc_, i64 (%struct.FT_StreamRec_*, i64, i8*, i64)*, void (%struct.FT_StreamRec_*)*, %struct.FT_MemoryRec_*, i8*, i8* }
%union.FT_StreamDesc_ = type { i64 }
%struct.FT_MemoryRec_ = type { i8*, i8* (%struct.FT_MemoryRec_*, i64)*, void (%struct.FT_MemoryRec_*, i8*)*, i8* (%struct.FT_MemoryRec_*, i64, i64, i8*)* }
%"class.fxcrt::RetainPtr.5" = type { %"class.std::__1::unique_ptr.6" }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %class.CFX_Face* }
%class.CFX_Face = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.std::__1::unique_ptr.15", %"class.fxcrt::RetainPtr.19" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::Observable" = type { %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { i64 }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %struct.FT_FaceRec_* }
%struct.FT_FaceRec_ = type { i64, i64, i64, i64, i64, i8*, i8*, i32, %struct.FT_Bitmap_Size_*, i32, %struct.FT_CharMapRec_**, %struct.FT_Generic_, %struct.FT_BBox_, i16, i16, i16, i16, i16, i16, i16, i16, %struct.FT_GlyphSlotRec_*, %struct.FT_SizeRec_*, %struct.FT_CharMapRec_*, %struct.FT_DriverRec_*, %struct.FT_MemoryRec_*, %struct.FT_StreamRec_*, %struct.FT_ListRec_, %struct.FT_Generic_, i8*, %struct.FT_Face_InternalRec_* }
%struct.FT_Bitmap_Size_ = type { i16, i16, i64, i64, i64 }
%struct.FT_BBox_ = type { i64, i64, i64, i64 }
%struct.FT_GlyphSlotRec_ = type { %struct.FT_LibraryRec_*, %struct.FT_FaceRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Generic_, %struct.FT_Glyph_Metrics_, i64, i64, %struct.FT_Vector_, i32, %struct.FT_Bitmap_, i32, i32, %struct.FT_Outline_, i32, %struct.FT_SubGlyphRec_*, i8*, i64, i64, i64, i8*, %struct.FT_Slot_InternalRec_* }
%struct.FT_LibraryRec_ = type opaque
%struct.FT_Glyph_Metrics_ = type { i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.FT_Vector_ = type { i64, i64 }
%struct.FT_Bitmap_ = type { i32, i32, i32, i8*, i16, i8, i8, i8* }
%struct.FT_Outline_ = type { i16, i16, %struct.FT_Vector_*, i8*, i16*, i32 }
%struct.FT_SubGlyphRec_ = type opaque
%struct.FT_Slot_InternalRec_ = type opaque
%struct.FT_SizeRec_ = type { %struct.FT_FaceRec_*, %struct.FT_Generic_, %struct.FT_Size_Metrics_, %struct.FT_Size_InternalRec_* }
%struct.FT_Size_Metrics_ = type { i16, i16, i64, i64, i64, i64, i64, i64 }
%struct.FT_Size_InternalRec_ = type opaque
%struct.FT_CharMapRec_ = type { %struct.FT_FaceRec_*, i32, i16, i16 }
%struct.FT_DriverRec_ = type opaque
%struct.FT_ListRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_* }
%struct.FT_ListNodeRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_*, i8* }
%struct.FT_Generic_ = type { i8*, void (i8*)* }
%struct.FT_Face_InternalRec_ = type opaque
%"class.fxcrt::RetainPtr.19" = type { %"class.std::__1::unique_ptr.20" }
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.fxcrt::Retainable"* }
%"class.fxcrt::RetainPtr.27" = type { %"class.std::__1::unique_ptr.28" }
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %class.CFX_GlyphCache* }
%class.CFX_GlyphCache = type opaque
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %class.CFX_SubstFont* }
%class.CFX_SubstFont = type <{ %"class.fxcrt::ByteString", i32, i32, i32, i32, i8, i8, i8, [5 x i8] }>
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr.36" }
%"class.fxcrt::RetainPtr.36" = type { %"class.std::__1::unique_ptr.37" }
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { i8* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.51", i64 }
%"class.fxcrt::UnownedPtr.51" = type { i8* }

@_ZTV19CFX_UnicodeEncoding = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CFX_UnicodeEncoding*)* @_ZN19CFX_UnicodeEncodingD2Ev to i8*), i8* bitcast (void (%class.CFX_UnicodeEncoding*)* @_ZN19CFX_UnicodeEncodingD0Ev to i8*), i8* bitcast (i32 (%class.CFX_UnicodeEncoding*, i32)* @_ZN19CFX_UnicodeEncoding17GlyphFromCharCodeEj to i8*)] }, align 8

@_ZN19CFX_UnicodeEncodingC1EPK8CFX_Font = hidden unnamed_addr alias void (%class.CFX_UnicodeEncoding*, %class.CFX_Font*), void (%class.CFX_UnicodeEncoding*, %class.CFX_Font*)* @_ZN19CFX_UnicodeEncodingC2EPK8CFX_Font
@_ZN19CFX_UnicodeEncodingD1Ev = hidden unnamed_addr alias void (%class.CFX_UnicodeEncoding*), void (%class.CFX_UnicodeEncoding*)* @_ZN19CFX_UnicodeEncodingD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN19CFX_UnicodeEncodingC2EPK8CFX_Font(%class.CFX_UnicodeEncoding* nocapture, %class.CFX_Font*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFX_UnicodeEncoding, %class.CFX_UnicodeEncoding* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTV19CFX_UnicodeEncoding, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %class.CFX_UnicodeEncoding, %class.CFX_UnicodeEncoding* %0, i64 0, i32 1, i32 0
  store %class.CFX_Font* %1, %class.CFX_Font** %4, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN19CFX_UnicodeEncodingD2Ev(%class.CFX_UnicodeEncoding* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_UnicodeEncoding, %class.CFX_UnicodeEncoding* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTV19CFX_UnicodeEncoding, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CFX_UnicodeEncodingD0Ev(%class.CFX_UnicodeEncoding*) unnamed_addr #1 align 2 {
  %2 = bitcast %class.CFX_UnicodeEncoding* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #4
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN19CFX_UnicodeEncoding17GlyphFromCharCodeEj(%class.CFX_UnicodeEncoding* nocapture readonly, i32) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.CFX_UnicodeEncoding, %class.CFX_UnicodeEncoding* %0, i64 0, i32 1, i32 0
  %4 = load %class.CFX_Font*, %class.CFX_Font** %3, align 8
  %5 = getelementptr inbounds %class.CFX_Font, %class.CFX_Font* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %6 = load %class.CFX_Face*, %class.CFX_Face** %5, align 8
  %7 = icmp eq %class.CFX_Face* %6, null
  br i1 %7, label %40, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %6, i64 0, i32 2, i32 0, i32 0, i32 0
  %10 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %9, align 8
  %11 = icmp eq %struct.FT_FaceRec_* %10, null
  br i1 %11, label %40, label %12

12:                                               ; preds = %8
  %13 = tail call i32 @FT_Select_Charmap(%struct.FT_FaceRec_* nonnull %10, i32 1970170211) #5
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %12
  %16 = zext i32 %1 to i64
  %17 = tail call i32 @FT_Get_Char_Index(%struct.FT_FaceRec_* nonnull %10, i64 %16) #5
  br label %40

18:                                               ; preds = %12
  %19 = load %class.CFX_Font*, %class.CFX_Font** %3, align 8
  %20 = getelementptr inbounds %class.CFX_Font, %class.CFX_Font* %19, i64 0, i32 4, i32 0, i32 0, i32 0
  %21 = load %class.CFX_SubstFont*, %class.CFX_SubstFont** %20, align 8
  %22 = icmp eq %class.CFX_SubstFont* %21, null
  br i1 %22, label %40, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %class.CFX_SubstFont, %class.CFX_SubstFont* %21, i64 0, i32 1
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %25, 2
  br i1 %26, label %27, label %40

27:                                               ; preds = %23
  %28 = tail call i32 @FT_Select_Charmap(%struct.FT_FaceRec_* nonnull %10, i32 1937337698) #5
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %34

30:                                               ; preds = %27
  %31 = zext i32 %1 to i64
  %32 = tail call i32 @FT_Get_Char_Index(%struct.FT_FaceRec_* nonnull %10, i64 %31) #5
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %40

34:                                               ; preds = %30, %27
  %35 = tail call i32 @FT_Select_Charmap(%struct.FT_FaceRec_* nonnull %10, i32 1634889070) #5
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %40

37:                                               ; preds = %34
  %38 = zext i32 %1 to i64
  %39 = tail call i32 @FT_Get_Char_Index(%struct.FT_FaceRec_* nonnull %10, i64 %38) #5
  br label %40

40:                                               ; preds = %30, %34, %2, %23, %18, %37, %8, %15
  %41 = phi i32 [ %17, %15 ], [ %39, %37 ], [ %1, %8 ], [ %1, %18 ], [ %1, %23 ], [ %1, %2 ], [ %1, %34 ], [ %1, %30 ]
  ret i32 %41
}

declare i32 @FT_Select_Charmap(%struct.FT_FaceRec_*, i32) local_unnamed_addr #3

declare i32 @FT_Get_Char_Index(%struct.FT_FaceRec_*, i64) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { builtin nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
