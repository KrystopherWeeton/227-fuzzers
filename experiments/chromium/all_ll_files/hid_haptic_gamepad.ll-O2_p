; ModuleID = '../../device/gamepad/hid_haptic_gamepad.cc'
source_filename = "../../device/gamepad/hid_haptic_gamepad.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.device::HidHapticGamepad::HapticReportData" = type { i16, i16, i8, i64, i64, i64, i64, i32, i32 }
%"class.device::HidHapticGamepad" = type { %"class.device::AbstractHapticGamepad", i8, i64, i64, i64, i64, i32, i32, %"class.std::__1::unique_ptr", %"class.base::WeakPtrFactory" }
%"class.device::AbstractHapticGamepad" = type { i32 (...)**, i8, i8, i32, %"class.base::OnceCallback", %class.scoped_refptr.1 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.scoped_refptr.1 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.2" }>
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.device::HidWriter"* }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.4 }
%class.scoped_refptr.4 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.5", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.5" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.6" }
%"struct.std::__1::atomic.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__cxx_atomic_impl.9" }
%"struct.std::__1::__cxx_atomic_impl.9" = type { %"struct.std::__1::__cxx_atomic_base_impl.10" }
%"struct.std::__1::__cxx_atomic_base_impl.10" = type { i8 }
%"class.device::HidWriter" = type { i32 (...)** }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { i8* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.21 }
%class.scoped_refptr.21 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::WeakPtr.22" = type { %"class.base::internal::WeakPtrBase" }

@_ZN6device17kHapticReportDataE = hidden global [3 x %"struct.device::HidHapticGamepad::HapticReportData"] [%"struct.device::HidHapticGamepad::HapticReportData" { i16 2883, i16 5, i8 0, i64 4, i64 3, i64 3, i64 8, i32 0, i32 1 }, %"struct.device::HidHapticGamepad::HapticReportData" { i16 26214, i16 -27647, i8 5, i64 5, i64 1, i64 3, i64 16, i32 0, i32 65535 }, %"struct.device::HidHapticGamepad::HapticReportData" { i16 6353, i16 -27648, i8 5, i64 5, i64 1, i64 3, i64 16, i32 0, i32 65535 }], align 16
@_ZN6device23kHapticReportDataLengthE = hidden local_unnamed_addr global i64 3, align 8
@_ZTVN6device16HidHapticGamepadE = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.device::HidHapticGamepad"*)* @_ZN6device16HidHapticGamepadD2Ev to i8*), i8* bitcast (void (%"class.device::HidHapticGamepad"*)* @_ZN6device16HidHapticGamepadD0Ev to i8*), i8* bitcast (void (%"class.device::HidHapticGamepad"*, double, double)* @_ZN6device16HidHapticGamepad12SetVibrationEdd to i8*), i8* bitcast (void (%"class.device::AbstractHapticGamepad"*)* @_ZN6device21AbstractHapticGamepad16SetZeroVibrationEv to i8*), i8* bitcast (double (%"class.device::AbstractHapticGamepad"*)* @_ZN6device21AbstractHapticGamepad26GetMaxEffectDurationMillisEv to i8*), i8* bitcast (void (%"class.base::WeakPtr"*, %"class.device::HidHapticGamepad"*)* @_ZN6device16HidHapticGamepad10GetWeakPtrEv to i8*), i8* bitcast (void (%"class.device::HidHapticGamepad"*)* @_ZN6device16HidHapticGamepad10DoShutdownEv to i8*)] }, align 8

@_ZN6device16HidHapticGamepadC1ERKNS0_16HapticReportDataENSt3__110unique_ptrINS_9HidWriterENS4_14default_deleteIS6_EEEE = hidden unnamed_addr alias void (%"class.device::HidHapticGamepad"*, %"struct.device::HidHapticGamepad::HapticReportData"*, %"class.device::HidWriter"*), void (%"class.device::HidHapticGamepad"*, %"struct.device::HidHapticGamepad::HapticReportData"*, %"class.device::HidWriter"*)* @_ZN6device16HidHapticGamepadC2ERKNS0_16HapticReportDataENSt3__110unique_ptrINS_9HidWriterENS4_14default_deleteIS6_EEEE
@_ZN6device16HidHapticGamepadD1Ev = hidden unnamed_addr alias void (%"class.device::HidHapticGamepad"*), void (%"class.device::HidHapticGamepad"*)* @_ZN6device16HidHapticGamepadD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device16HidHapticGamepadC2ERKNS0_16HapticReportDataENSt3__110unique_ptrINS_9HidWriterENS4_14default_deleteIS6_EEEE(%"class.device::HidHapticGamepad"*, %"struct.device::HidHapticGamepad::HapticReportData"* nocapture readonly dereferenceable(48), %"class.device::HidWriter"*) unnamed_addr #0 align 2 {
  %4 = ptrtoint %"class.device::HidWriter"* %2 to i64
  %5 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 0
  tail call void @_ZN6device21AbstractHapticGamepadC2Ev(%"class.device::AbstractHapticGamepad"* %5) #8
  %6 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN6device16HidHapticGamepadE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %1, i64 0, i32 2
  %9 = load i8, i8* %8, align 4
  store i8 %9, i8* %7, align 8
  %10 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 2
  %11 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %1, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  store i64 %12, i64* %10, align 8
  %13 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 3
  %14 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %1, i64 0, i32 4
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %13, align 8
  %16 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 4
  %17 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %1, i64 0, i32 5
  %18 = load i64, i64* %17, align 8
  store i64 %18, i64* %16, align 8
  %19 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 5
  %20 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %1, i64 0, i32 6
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %19, align 8
  %22 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 6
  %23 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %1, i64 0, i32 7
  %24 = load i32, i32* %23, align 8
  store i32 %24, i32* %22, align 8
  %25 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 7
  %26 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %1, i64 0, i32 8
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %25, align 4
  %28 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 8
  %29 = bitcast %"class.std::__1::unique_ptr"* %28 to i64*
  store i64 %4, i64* %29, align 8
  %30 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 9, i32 0
  %31 = ptrtoint %"class.device::HidHapticGamepad"* %0 to i64
  tail call void @_ZN4base8internal18WeakPtrFactoryBaseC2Em(%"class.base::internal::WeakPtrFactoryBase"* %30, i64 %31) #8
  ret void
}

declare void @_ZN6device21AbstractHapticGamepadC2Ev(%"class.device::AbstractHapticGamepad"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device16HidHapticGamepadD2Ev(%"class.device::HidHapticGamepad"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN6device16HidHapticGamepadE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 9, i32 0
  tail call void @_ZN4base8internal18WeakPtrFactoryBaseD2Ev(%"class.base::internal::WeakPtrFactoryBase"* %3) #8
  %4 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  %5 = load %"class.device::HidWriter"*, %"class.device::HidWriter"** %4, align 8
  store %"class.device::HidWriter"* null, %"class.device::HidWriter"** %4, align 8
  %6 = icmp eq %"class.device::HidWriter"* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.device::HidWriter"* %5 to void (%"class.device::HidWriter"*)***
  %9 = load void (%"class.device::HidWriter"*)**, void (%"class.device::HidWriter"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.device::HidWriter"*)*, void (%"class.device::HidWriter"*)** %9, i64 1
  %11 = load void (%"class.device::HidWriter"*)*, void (%"class.device::HidWriter"*)** %10, align 8
  tail call void %11(%"class.device::HidWriter"* nonnull %5) #8
  br label %12

12:                                               ; preds = %1, %7
  %13 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 0
  tail call void @_ZN6device21AbstractHapticGamepadD2Ev(%"class.device::AbstractHapticGamepad"* %13) #8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal18WeakPtrFactoryBaseD2Ev(%"class.base::internal::WeakPtrFactoryBase"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6device21AbstractHapticGamepadD2Ev(%"class.device::AbstractHapticGamepad"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device16HidHapticGamepadD0Ev(%"class.device::HidHapticGamepad"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN6device16HidHapticGamepadE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 9, i32 0
  tail call void @_ZN4base8internal18WeakPtrFactoryBaseD2Ev(%"class.base::internal::WeakPtrFactoryBase"* %3) #8
  %4 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  %5 = load %"class.device::HidWriter"*, %"class.device::HidWriter"** %4, align 8
  store %"class.device::HidWriter"* null, %"class.device::HidWriter"** %4, align 8
  %6 = icmp eq %"class.device::HidWriter"* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.device::HidWriter"* %5 to void (%"class.device::HidWriter"*)***
  %9 = load void (%"class.device::HidWriter"*)**, void (%"class.device::HidWriter"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.device::HidWriter"*)*, void (%"class.device::HidWriter"*)** %9, i64 1
  %11 = load void (%"class.device::HidWriter"*)*, void (%"class.device::HidWriter"*)** %10, align 8
  tail call void %11(%"class.device::HidWriter"* nonnull %5) #8
  br label %12

12:                                               ; preds = %1, %7
  %13 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 0
  tail call void @_ZN6device21AbstractHapticGamepadD2Ev(%"class.device::AbstractHapticGamepad"* %13) #8
  %14 = bitcast %"class.device::HidHapticGamepad"* %0 to i8*
  tail call void @_ZdlPv(i8* %14) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.device::HidHapticGamepad"* @_ZN6device16HidHapticGamepad6CreateEttNSt3__110unique_ptrINS_9HidWriterENS1_14default_deleteIS3_EEEE(i16 zeroext, i16 zeroext, %"class.device::HidWriter"*) local_unnamed_addr #0 align 2 {
  %4 = ptrtoint %"class.device::HidWriter"* %2 to i64
  %5 = load i64, i64* @_ZN6device23kHapticReportDataLengthE, align 8
  %6 = getelementptr inbounds [3 x %"struct.device::HidHapticGamepad::HapticReportData"], [3 x %"struct.device::HidHapticGamepad::HapticReportData"]* @_ZN6device17kHapticReportDataE, i64 0, i64 %5
  %7 = icmp eq i64 %5, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %3, %17
  %9 = phi %"struct.device::HidHapticGamepad::HapticReportData"* [ %18, %17 ], [ getelementptr inbounds ([3 x %"struct.device::HidHapticGamepad::HapticReportData"], [3 x %"struct.device::HidHapticGamepad::HapticReportData"]* @_ZN6device17kHapticReportDataE, i64 0, i64 0), %3 ]
  %10 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %9, i64 0, i32 0
  %11 = load i16, i16* %10, align 8
  %12 = icmp eq i16 %11, %0
  br i1 %12, label %13, label %17

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %9, i64 0, i32 1
  %15 = load i16, i16* %14, align 2
  %16 = icmp eq i16 %15, %1
  br i1 %16, label %20, label %17

17:                                               ; preds = %13, %8
  %18 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %9, i64 1
  %19 = icmp eq %"struct.device::HidHapticGamepad::HapticReportData"* %18, %6
  br i1 %19, label %62, label %8

20:                                               ; preds = %13, %3
  %21 = phi %"struct.device::HidHapticGamepad::HapticReportData"* [ getelementptr inbounds ([3 x %"struct.device::HidHapticGamepad::HapticReportData"], [3 x %"struct.device::HidHapticGamepad::HapticReportData"]* @_ZN6device17kHapticReportDataE, i64 0, i64 0), %3 ], [ %9, %13 ]
  %22 = icmp eq %"struct.device::HidHapticGamepad::HapticReportData"* %21, %6
  %23 = icmp eq %"struct.device::HidHapticGamepad::HapticReportData"* %21, null
  %24 = or i1 %22, %23
  br i1 %24, label %62, label %25

25:                                               ; preds = %20
  %26 = tail call i8* @_Znwm(i64 104) #9
  %27 = bitcast i8* %26 to %"class.device::AbstractHapticGamepad"*
  tail call void @_ZN6device21AbstractHapticGamepadC2Ev(%"class.device::AbstractHapticGamepad"* nonnull %27) #8
  %28 = bitcast i8* %26 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN6device16HidHapticGamepadE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %28, align 8
  %29 = getelementptr inbounds i8, i8* %26, i64 32
  %30 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %21, i64 0, i32 2
  %31 = load i8, i8* %30, align 4
  store i8 %31, i8* %29, align 8
  %32 = getelementptr inbounds i8, i8* %26, i64 40
  %33 = bitcast i8* %32 to i64*
  %34 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %21, i64 0, i32 3
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %33, align 8
  %36 = getelementptr inbounds i8, i8* %26, i64 48
  %37 = bitcast i8* %36 to i64*
  %38 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %21, i64 0, i32 4
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %37, align 8
  %40 = getelementptr inbounds i8, i8* %26, i64 56
  %41 = bitcast i8* %40 to i64*
  %42 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %21, i64 0, i32 5
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %41, align 8
  %44 = getelementptr inbounds i8, i8* %26, i64 64
  %45 = bitcast i8* %44 to i64*
  %46 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %21, i64 0, i32 6
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %45, align 8
  %48 = getelementptr inbounds i8, i8* %26, i64 72
  %49 = bitcast i8* %48 to i32*
  %50 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %21, i64 0, i32 7
  %51 = load i32, i32* %50, align 8
  store i32 %51, i32* %49, align 8
  %52 = getelementptr inbounds i8, i8* %26, i64 76
  %53 = bitcast i8* %52 to i32*
  %54 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %21, i64 0, i32 8
  %55 = load i32, i32* %54, align 4
  store i32 %55, i32* %53, align 4
  %56 = getelementptr inbounds i8, i8* %26, i64 80
  %57 = bitcast i8* %56 to i64*
  store i64 %4, i64* %57, align 8
  %58 = getelementptr inbounds i8, i8* %26, i64 88
  %59 = bitcast i8* %58 to %"class.base::internal::WeakPtrFactoryBase"*
  %60 = ptrtoint i8* %26 to i64
  tail call void @_ZN4base8internal18WeakPtrFactoryBaseC2Em(%"class.base::internal::WeakPtrFactoryBase"* %59, i64 %60) #8
  %61 = bitcast i8* %26 to %"class.device::HidHapticGamepad"*
  br label %69

62:                                               ; preds = %17, %20
  %63 = icmp eq %"class.device::HidWriter"* %2, null
  br i1 %63, label %69, label %64

64:                                               ; preds = %62
  %65 = bitcast %"class.device::HidWriter"* %2 to void (%"class.device::HidWriter"*)***
  %66 = load void (%"class.device::HidWriter"*)**, void (%"class.device::HidWriter"*)*** %65, align 8
  %67 = getelementptr inbounds void (%"class.device::HidWriter"*)*, void (%"class.device::HidWriter"*)** %66, i64 1
  %68 = load void (%"class.device::HidWriter"*)*, void (%"class.device::HidWriter"*)** %67, align 8
  tail call void %68(%"class.device::HidWriter"* nonnull %2) #8
  br label %69

69:                                               ; preds = %25, %62, %64
  %70 = phi %"class.device::HidHapticGamepad"* [ %61, %25 ], [ null, %62 ], [ null, %64 ]
  ret %"class.device::HidHapticGamepad"* %70
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"struct.device::HidHapticGamepad::HapticReportData"* @_ZN6device16HidHapticGamepad19GetHapticReportDataEtt(i16 zeroext, i16 zeroext) local_unnamed_addr #5 align 2 {
  %3 = load i64, i64* @_ZN6device23kHapticReportDataLengthE, align 8
  %4 = getelementptr inbounds [3 x %"struct.device::HidHapticGamepad::HapticReportData"], [3 x %"struct.device::HidHapticGamepad::HapticReportData"]* @_ZN6device17kHapticReportDataE, i64 0, i64 %3
  %5 = icmp eq i64 %3, 0
  br i1 %5, label %18, label %6

6:                                                ; preds = %2, %15
  %7 = phi %"struct.device::HidHapticGamepad::HapticReportData"* [ %16, %15 ], [ getelementptr inbounds ([3 x %"struct.device::HidHapticGamepad::HapticReportData"], [3 x %"struct.device::HidHapticGamepad::HapticReportData"]* @_ZN6device17kHapticReportDataE, i64 0, i64 0), %2 ]
  %8 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %7, i64 0, i32 0
  %9 = load i16, i16* %8, align 8
  %10 = icmp eq i16 %9, %0
  br i1 %10, label %11, label %15

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %7, i64 0, i32 1
  %13 = load i16, i16* %12, align 2
  %14 = icmp eq i16 %13, %1
  br i1 %14, label %18, label %15

15:                                               ; preds = %11, %6
  %16 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %7, i64 1
  %17 = icmp eq %"struct.device::HidHapticGamepad::HapticReportData"* %16, %4
  br i1 %17, label %18, label %6

18:                                               ; preds = %11, %15, %2
  %19 = phi %"struct.device::HidHapticGamepad::HapticReportData"* [ getelementptr inbounds ([3 x %"struct.device::HidHapticGamepad::HapticReportData"], [3 x %"struct.device::HidHapticGamepad::HapticReportData"]* @_ZN6device17kHapticReportDataE, i64 0, i64 0), %2 ], [ %7, %11 ], [ %4, %15 ]
  %20 = icmp eq %"struct.device::HidHapticGamepad::HapticReportData"* %19, %4
  %21 = select i1 %20, %"struct.device::HidHapticGamepad::HapticReportData"* null, %"struct.device::HidHapticGamepad::HapticReportData"* %19
  ret %"struct.device::HidHapticGamepad::HapticReportData"* %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN6device16HidHapticGamepad11IsHidHapticEtt(i16 zeroext, i16 zeroext) local_unnamed_addr #5 align 2 {
  %3 = load i64, i64* @_ZN6device23kHapticReportDataLengthE, align 8
  %4 = getelementptr inbounds [3 x %"struct.device::HidHapticGamepad::HapticReportData"], [3 x %"struct.device::HidHapticGamepad::HapticReportData"]* @_ZN6device17kHapticReportDataE, i64 0, i64 %3
  %5 = icmp eq i64 %3, 0
  br i1 %5, label %18, label %6

6:                                                ; preds = %2, %15
  %7 = phi %"struct.device::HidHapticGamepad::HapticReportData"* [ %16, %15 ], [ getelementptr inbounds ([3 x %"struct.device::HidHapticGamepad::HapticReportData"], [3 x %"struct.device::HidHapticGamepad::HapticReportData"]* @_ZN6device17kHapticReportDataE, i64 0, i64 0), %2 ]
  %8 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %7, i64 0, i32 0
  %9 = load i16, i16* %8, align 8
  %10 = icmp eq i16 %9, %0
  br i1 %10, label %11, label %15

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %7, i64 0, i32 1
  %13 = load i16, i16* %12, align 2
  %14 = icmp eq i16 %13, %1
  br i1 %14, label %18, label %15

15:                                               ; preds = %11, %6
  %16 = getelementptr inbounds %"struct.device::HidHapticGamepad::HapticReportData", %"struct.device::HidHapticGamepad::HapticReportData"* %7, i64 1
  %17 = icmp eq %"struct.device::HidHapticGamepad::HapticReportData"* %16, %4
  br i1 %17, label %18, label %6

18:                                               ; preds = %11, %15, %2
  %19 = phi %"struct.device::HidHapticGamepad::HapticReportData"* [ getelementptr inbounds ([3 x %"struct.device::HidHapticGamepad::HapticReportData"], [3 x %"struct.device::HidHapticGamepad::HapticReportData"]* @_ZN6device17kHapticReportDataE, i64 0, i64 0), %2 ], [ %7, %11 ], [ %4, %15 ]
  %20 = icmp ne %"struct.device::HidHapticGamepad::HapticReportData"* %19, %4
  ret i1 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device16HidHapticGamepad10DoShutdownEv(%"class.device::HidHapticGamepad"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  %3 = load %"class.device::HidWriter"*, %"class.device::HidWriter"** %2, align 8
  store %"class.device::HidWriter"* null, %"class.device::HidWriter"** %2, align 8
  %4 = icmp eq %"class.device::HidWriter"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.device::HidWriter"* %3 to void (%"class.device::HidWriter"*)***
  %7 = load void (%"class.device::HidWriter"*)**, void (%"class.device::HidWriter"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.device::HidWriter"*)*, void (%"class.device::HidWriter"*)** %7, i64 1
  %9 = load void (%"class.device::HidWriter"*)*, void (%"class.device::HidWriter"*)** %8, align 8
  tail call void %9(%"class.device::HidWriter"* nonnull %3) #8
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device16HidHapticGamepad12SetVibrationEdd(%"class.device::HidHapticGamepad"* nocapture readonly, double, double) unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = alloca %"class.std::__1::vector", align 8
  %6 = alloca %"class.std::__1::vector", align 8
  %7 = alloca %"class.std::__1::vector", align 8
  %8 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #8
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %12 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %3
  %16 = icmp slt i64 %13, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %15
  %18 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %18) #10
  unreachable

19:                                               ; preds = %15
  %20 = tail call i8* @_Znwm(i64 %13) #9
  store i8* %20, i8** %9, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 %13
  store i8* %21, i8** %11, align 8
  %22 = bitcast i8** %10 to i64*
  %23 = ptrtoint i8* %20 to i64
  %24 = sub i64 %13, %23
  %25 = getelementptr i8, i8* %20, i64 %24
  %26 = ptrtoint i8* %25 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %20, i8 0, i64 %26, i1 false) #8
  %27 = ptrtoint i8* %21 to i64
  store i64 %27, i64* %22, align 8
  br label %28

28:                                               ; preds = %3, %19
  %29 = phi i8* [ null, %3 ], [ %20, %19 ]
  %30 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 1
  %31 = load i8, i8* %30, align 8
  store i8 %31, i8* %29, align 1
  %32 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 3
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 4
  %35 = load i64, i64* %34, align 8
  %36 = icmp eq i64 %33, %35
  br i1 %36, label %37, label %142

37:                                               ; preds = %28
  %38 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %38) #8
  %39 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %41 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 0, i64 24, i1 false) #8
  %42 = fadd double %1, %2
  %43 = fcmp ogt double %42, 1.000000e+00
  %44 = select i1 %43, double 1.000000e+00, double %42
  %45 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 5
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 6
  %48 = load i32, i32* %47, align 8
  %49 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 7
  %50 = load i32, i32* %49, align 4
  %51 = bitcast %"class.std::__1::vector"* %5 to i64*
  %52 = bitcast i8** %40 to i64*
  store i64 0, i64* %52, align 8
  %53 = icmp ule i32 %50, %48
  %54 = icmp eq i64 %46, 0
  %55 = or i1 %54, %53
  br i1 %55, label %129, label %56

56:                                               ; preds = %37
  %57 = icmp eq i32 %48, 0
  %58 = icmp eq i32 %50, 1
  %59 = and i1 %57, %58
  %60 = fcmp ogt double %44, 0.000000e+00
  %61 = select i1 %60, double 1.000000e+00, double 0.000000e+00
  %62 = select i1 %59, double %61, double %44
  %63 = sub i32 %50, %48
  %64 = uitofp i32 %63 to double
  %65 = fmul double %62, %64
  %66 = uitofp i32 %48 to double
  %67 = fadd double %65, %66
  %68 = fptoui double %67 to i32
  %69 = bitcast i8** %41 to i64*
  br label %70

70:                                               ; preds = %124, %56
  %71 = phi i64 [ %120, %124 ], [ 0, %56 ]
  %72 = phi i8* [ %126, %124 ], [ null, %56 ]
  %73 = phi i8* [ %121, %124 ], [ null, %56 ]
  %74 = phi i64 [ %122, %124 ], [ %46, %56 ]
  %75 = phi i32 [ %125, %124 ], [ %68, %56 ]
  %76 = trunc i32 %75 to i8
  %77 = icmp ult i8* %73, %72
  %78 = ptrtoint i8* %72 to i64
  br i1 %77, label %79, label %82

79:                                               ; preds = %70
  store i8 %76, i8* %73, align 1
  %80 = getelementptr inbounds i8, i8* %73, i64 1
  %81 = ptrtoint i8* %80 to i64
  store i64 %81, i64* %52, align 8
  br label %119

82:                                               ; preds = %70
  %83 = ptrtoint i8* %73 to i64
  %84 = load i64, i64* %51, align 8
  %85 = sub i64 %83, %84
  %86 = add i64 %85, 1
  %87 = icmp slt i64 %86, 0
  %88 = inttoptr i64 %84 to i8*
  br i1 %87, label %89, label %91

89:                                               ; preds = %82
  %90 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %90) #10
  unreachable

91:                                               ; preds = %82
  %92 = sub i64 %78, %84
  %93 = icmp ult i64 %92, 4611686018427387903
  br i1 %93, label %94, label %99

94:                                               ; preds = %91
  %95 = shl i64 %92, 1
  %96 = icmp ult i64 %95, %86
  %97 = select i1 %96, i64 %86, i64 %95
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %102, label %99

99:                                               ; preds = %94, %91
  %100 = phi i64 [ %97, %94 ], [ 9223372036854775807, %91 ]
  %101 = tail call i8* @_Znwm(i64 %100) #9
  br label %102

102:                                              ; preds = %99, %94
  %103 = phi i64 [ %100, %99 ], [ 0, %94 ]
  %104 = phi i8* [ %101, %99 ], [ null, %94 ]
  %105 = getelementptr inbounds i8, i8* %104, i64 %85
  %106 = getelementptr inbounds i8, i8* %104, i64 %103
  %107 = ptrtoint i8* %106 to i64
  store i8 %76, i8* %105, align 1
  %108 = getelementptr inbounds i8, i8* %105, i64 1
  %109 = ptrtoint i8* %108 to i64
  %110 = sub i64 %71, %84
  %111 = sub i64 0, %110
  %112 = getelementptr inbounds i8, i8* %105, i64 %111
  %113 = ptrtoint i8* %112 to i64
  %114 = icmp sgt i64 %110, 0
  br i1 %114, label %115, label %116

115:                                              ; preds = %102
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %112, i8* align 1 %88, i64 %110, i1 false) #8
  br label %116

116:                                              ; preds = %115, %102
  store i64 %113, i64* %51, align 8
  store i64 %109, i64* %52, align 8
  store i64 %107, i64* %69, align 8
  %117 = icmp eq i64 %84, 0
  br i1 %117, label %119, label %118

118:                                              ; preds = %116
  tail call void @_ZdlPv(i8* nonnull %88) #9
  br label %119

119:                                              ; preds = %79, %116, %118
  %120 = phi i64 [ %81, %79 ], [ %109, %116 ], [ %109, %118 ]
  %121 = phi i8* [ %80, %79 ], [ %108, %116 ], [ %108, %118 ]
  %122 = add i64 %74, -8
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %127, label %124

124:                                              ; preds = %119
  %125 = lshr i32 %75, 8
  %126 = load i8*, i8** %41, align 8
  br label %70

127:                                              ; preds = %119
  %128 = load i8*, i8** %39, align 8
  br label %129

129:                                              ; preds = %127, %37
  %130 = phi i64 [ %120, %127 ], [ 0, %37 ]
  %131 = phi i8* [ %128, %127 ], [ null, %37 ]
  %132 = ptrtoint i8* %131 to i64
  %133 = sub i64 %130, %132
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %139, label %135

135:                                              ; preds = %129
  %136 = load i8*, i8** %9, align 8
  %137 = load i64, i64* %32, align 8
  %138 = getelementptr inbounds i8, i8* %136, i64 %137
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %138, i8* align 1 %131, i64 %133, i1 false) #8
  br label %139

139:                                              ; preds = %129, %135
  %140 = icmp eq i8* %131, null
  br i1 %140, label %350, label %141

141:                                              ; preds = %139
  store i64 %132, i64* %52, align 8
  tail call void @_ZdlPv(i8* nonnull %131) #9
  br label %350

142:                                              ; preds = %28
  %143 = bitcast %"class.std::__1::vector"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %143) #8
  %144 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %145 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %146 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %143, i8 0, i64 24, i1 false) #8
  %147 = bitcast %"class.std::__1::vector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %147) #8
  %148 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %149 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  %150 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %147, i8 0, i64 24, i1 false) #8
  %151 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 5
  %152 = load i64, i64* %151, align 8
  %153 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 6
  %154 = load i32, i32* %153, align 8
  %155 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 7
  %156 = load i32, i32* %155, align 4
  %157 = bitcast %"class.std::__1::vector"* %6 to i64*
  %158 = bitcast i8** %145 to i64*
  store i64 0, i64* %158, align 8
  %159 = icmp ule i32 %156, %154
  %160 = icmp eq i64 %152, 0
  %161 = or i1 %160, %159
  br i1 %161, label %162, label %164

162:                                              ; preds = %142
  %163 = bitcast %"class.std::__1::vector"* %7 to i64*
  br label %241

164:                                              ; preds = %142
  %165 = icmp eq i32 %154, 0
  %166 = icmp eq i32 %156, 1
  %167 = and i1 %165, %166
  %168 = fcmp ogt double %1, 0.000000e+00
  %169 = select i1 %168, double 1.000000e+00, double 0.000000e+00
  %170 = select i1 %167, double %169, double %1
  %171 = sub i32 %156, %154
  %172 = uitofp i32 %171 to double
  %173 = fmul double %170, %172
  %174 = uitofp i32 %154 to double
  %175 = fadd double %173, %174
  %176 = fptoui double %175 to i32
  %177 = bitcast i8** %146 to i64*
  br label %178

178:                                              ; preds = %232, %164
  %179 = phi i64 [ %228, %232 ], [ 0, %164 ]
  %180 = phi i8* [ %234, %232 ], [ null, %164 ]
  %181 = phi i8* [ %229, %232 ], [ null, %164 ]
  %182 = phi i64 [ %230, %232 ], [ %152, %164 ]
  %183 = phi i32 [ %233, %232 ], [ %176, %164 ]
  %184 = trunc i32 %183 to i8
  %185 = icmp ult i8* %181, %180
  %186 = ptrtoint i8* %180 to i64
  br i1 %185, label %187, label %190

187:                                              ; preds = %178
  store i8 %184, i8* %181, align 1
  %188 = getelementptr inbounds i8, i8* %181, i64 1
  %189 = ptrtoint i8* %188 to i64
  store i64 %189, i64* %158, align 8
  br label %227

190:                                              ; preds = %178
  %191 = ptrtoint i8* %181 to i64
  %192 = load i64, i64* %157, align 8
  %193 = sub i64 %191, %192
  %194 = add i64 %193, 1
  %195 = icmp slt i64 %194, 0
  %196 = inttoptr i64 %192 to i8*
  br i1 %195, label %197, label %199

197:                                              ; preds = %190
  %198 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %198) #10
  unreachable

199:                                              ; preds = %190
  %200 = sub i64 %186, %192
  %201 = icmp ult i64 %200, 4611686018427387903
  br i1 %201, label %202, label %207

202:                                              ; preds = %199
  %203 = shl i64 %200, 1
  %204 = icmp ult i64 %203, %194
  %205 = select i1 %204, i64 %194, i64 %203
  %206 = icmp eq i64 %205, 0
  br i1 %206, label %210, label %207

207:                                              ; preds = %202, %199
  %208 = phi i64 [ %205, %202 ], [ 9223372036854775807, %199 ]
  %209 = tail call i8* @_Znwm(i64 %208) #9
  br label %210

210:                                              ; preds = %207, %202
  %211 = phi i64 [ %208, %207 ], [ 0, %202 ]
  %212 = phi i8* [ %209, %207 ], [ null, %202 ]
  %213 = getelementptr inbounds i8, i8* %212, i64 %193
  %214 = getelementptr inbounds i8, i8* %212, i64 %211
  %215 = ptrtoint i8* %214 to i64
  store i8 %184, i8* %213, align 1
  %216 = getelementptr inbounds i8, i8* %213, i64 1
  %217 = ptrtoint i8* %216 to i64
  %218 = sub i64 %179, %192
  %219 = sub i64 0, %218
  %220 = getelementptr inbounds i8, i8* %213, i64 %219
  %221 = ptrtoint i8* %220 to i64
  %222 = icmp sgt i64 %218, 0
  br i1 %222, label %223, label %224

223:                                              ; preds = %210
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %220, i8* align 1 %196, i64 %218, i1 false) #8
  br label %224

224:                                              ; preds = %223, %210
  store i64 %221, i64* %157, align 8
  store i64 %217, i64* %158, align 8
  store i64 %215, i64* %177, align 8
  %225 = icmp eq i64 %192, 0
  br i1 %225, label %227, label %226

226:                                              ; preds = %224
  tail call void @_ZdlPv(i8* nonnull %196) #9
  br label %227

227:                                              ; preds = %187, %224, %226
  %228 = phi i64 [ %189, %187 ], [ %217, %224 ], [ %217, %226 ]
  %229 = phi i8* [ %188, %187 ], [ %216, %224 ], [ %216, %226 ]
  %230 = add i64 %182, -8
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %235, label %232

232:                                              ; preds = %227
  %233 = lshr i32 %183, 8
  %234 = load i8*, i8** %146, align 8
  br label %178

235:                                              ; preds = %227
  %236 = load i64, i64* %151, align 8
  %237 = load i32, i32* %153, align 8
  %238 = load i32, i32* %155, align 4
  %239 = bitcast %"class.std::__1::vector"* %7 to i64*
  %240 = load i64, i64* %239, align 8
  br label %241

241:                                              ; preds = %162, %235
  %242 = phi i64* [ %163, %162 ], [ %239, %235 ]
  %243 = phi i64 [ 0, %162 ], [ %228, %235 ]
  %244 = phi i64 [ 0, %162 ], [ %240, %235 ]
  %245 = phi i32 [ %156, %162 ], [ %238, %235 ]
  %246 = phi i32 [ %154, %162 ], [ %237, %235 ]
  %247 = phi i64 [ %152, %162 ], [ %236, %235 ]
  %248 = bitcast i8** %149 to i64*
  store i64 %244, i64* %248, align 8
  %249 = icmp ule i32 %245, %246
  %250 = icmp eq i64 %247, 0
  %251 = or i1 %250, %249
  br i1 %251, label %324, label %252

252:                                              ; preds = %241
  %253 = inttoptr i64 %244 to i8*
  %254 = icmp eq i32 %246, 0
  %255 = icmp eq i32 %245, 1
  %256 = and i1 %254, %255
  %257 = fcmp ogt double %2, 0.000000e+00
  %258 = select i1 %257, double 1.000000e+00, double 0.000000e+00
  %259 = select i1 %256, double %258, double %2
  %260 = sub i32 %245, %246
  %261 = uitofp i32 %260 to double
  %262 = fmul double %259, %261
  %263 = uitofp i32 %246 to double
  %264 = fadd double %262, %263
  %265 = fptoui double %264 to i32
  %266 = bitcast i8** %150 to i64*
  br label %267

267:                                              ; preds = %316, %252
  %268 = phi i64 [ %317, %316 ], [ %244, %252 ]
  %269 = phi i8* [ %318, %316 ], [ %253, %252 ]
  %270 = phi i64 [ %319, %316 ], [ %247, %252 ]
  %271 = phi i32 [ %320, %316 ], [ %265, %252 ]
  %272 = trunc i32 %271 to i8
  %273 = load i8*, i8** %150, align 8
  %274 = icmp ult i8* %269, %273
  %275 = ptrtoint i8* %273 to i64
  br i1 %274, label %276, label %279

276:                                              ; preds = %267
  store i8 %272, i8* %269, align 1
  %277 = getelementptr inbounds i8, i8* %269, i64 1
  %278 = ptrtoint i8* %277 to i64
  store i64 %278, i64* %248, align 8
  br label %316

279:                                              ; preds = %267
  %280 = ptrtoint i8* %269 to i64
  %281 = load i64, i64* %242, align 8
  %282 = sub i64 %280, %281
  %283 = add i64 %282, 1
  %284 = icmp slt i64 %283, 0
  %285 = inttoptr i64 %281 to i8*
  br i1 %284, label %286, label %288

286:                                              ; preds = %279
  %287 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %287) #10
  unreachable

288:                                              ; preds = %279
  %289 = sub i64 %275, %281
  %290 = icmp ult i64 %289, 4611686018427387903
  br i1 %290, label %291, label %296

291:                                              ; preds = %288
  %292 = shl i64 %289, 1
  %293 = icmp ult i64 %292, %283
  %294 = select i1 %293, i64 %283, i64 %292
  %295 = icmp eq i64 %294, 0
  br i1 %295, label %299, label %296

296:                                              ; preds = %291, %288
  %297 = phi i64 [ %294, %291 ], [ 9223372036854775807, %288 ]
  %298 = tail call i8* @_Znwm(i64 %297) #9
  br label %299

299:                                              ; preds = %296, %291
  %300 = phi i64 [ %297, %296 ], [ 0, %291 ]
  %301 = phi i8* [ %298, %296 ], [ null, %291 ]
  %302 = getelementptr inbounds i8, i8* %301, i64 %282
  %303 = getelementptr inbounds i8, i8* %301, i64 %300
  %304 = ptrtoint i8* %303 to i64
  store i8 %272, i8* %302, align 1
  %305 = getelementptr inbounds i8, i8* %302, i64 1
  %306 = ptrtoint i8* %305 to i64
  %307 = sub i64 %268, %281
  %308 = sub i64 0, %307
  %309 = getelementptr inbounds i8, i8* %302, i64 %308
  %310 = ptrtoint i8* %309 to i64
  %311 = icmp sgt i64 %307, 0
  br i1 %311, label %312, label %313

312:                                              ; preds = %299
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %309, i8* align 1 %285, i64 %307, i1 false) #8
  br label %313

313:                                              ; preds = %312, %299
  store i64 %310, i64* %242, align 8
  store i64 %306, i64* %248, align 8
  store i64 %304, i64* %266, align 8
  %314 = icmp eq i64 %281, 0
  br i1 %314, label %316, label %315

315:                                              ; preds = %313
  tail call void @_ZdlPv(i8* nonnull %285) #9
  br label %316

316:                                              ; preds = %276, %313, %315
  %317 = phi i64 [ %278, %276 ], [ %306, %313 ], [ %306, %315 ]
  %318 = phi i8* [ %277, %276 ], [ %305, %313 ], [ %305, %315 ]
  %319 = add i64 %270, -8
  %320 = lshr i32 %271, 8
  %321 = icmp eq i64 %319, 0
  br i1 %321, label %322, label %267

322:                                              ; preds = %316
  %323 = load i64, i64* %158, align 8
  br label %324

324:                                              ; preds = %322, %241
  %325 = phi i64 [ %317, %322 ], [ %244, %241 ]
  %326 = phi i64 [ %323, %322 ], [ %243, %241 ]
  %327 = load i8*, i8** %144, align 8
  %328 = ptrtoint i8* %327 to i64
  %329 = sub i64 %326, %328
  %330 = icmp eq i64 %329, 0
  br i1 %330, label %335, label %331

331:                                              ; preds = %324
  %332 = load i8*, i8** %9, align 8
  %333 = load i64, i64* %32, align 8
  %334 = getelementptr inbounds i8, i8* %332, i64 %333
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %334, i8* align 1 %327, i64 %329, i1 false) #8
  br label %335

335:                                              ; preds = %324, %331
  %336 = load i8*, i8** %148, align 8
  %337 = ptrtoint i8* %336 to i64
  %338 = sub i64 %325, %337
  %339 = icmp eq i64 %338, 0
  br i1 %339, label %344, label %340

340:                                              ; preds = %335
  %341 = load i8*, i8** %9, align 8
  %342 = load i64, i64* %34, align 8
  %343 = getelementptr inbounds i8, i8* %341, i64 %342
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %343, i8* align 1 %336, i64 %338, i1 false) #8
  br label %344

344:                                              ; preds = %335, %340
  %345 = icmp eq i8* %336, null
  br i1 %345, label %347, label %346

346:                                              ; preds = %344
  store i64 %337, i64* %248, align 8
  tail call void @_ZdlPv(i8* nonnull %336) #9
  br label %347

347:                                              ; preds = %344, %346
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %147) #8
  %348 = icmp eq i8* %327, null
  br i1 %348, label %350, label %349

349:                                              ; preds = %347
  store i64 %328, i64* %158, align 8
  tail call void @_ZdlPv(i8* nonnull %327) #9
  br label %350

350:                                              ; preds = %349, %347, %141, %139
  %351 = phi i8* [ %38, %139 ], [ %38, %141 ], [ %143, %347 ], [ %143, %349 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %351) #8
  %352 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  %353 = load %"class.device::HidWriter"*, %"class.device::HidWriter"** %352, align 8
  %354 = bitcast %"class.std::__1::vector"* %4 to i64*
  %355 = load i64, i64* %354, align 8
  %356 = bitcast i8** %10 to i64*
  %357 = load i64, i64* %356, align 8
  %358 = sub i64 %357, %355
  %359 = inttoptr i64 %355 to i8*
  %360 = bitcast %"class.device::HidWriter"* %353 to i64 (%"class.device::HidWriter"*, i64, i8*)***
  %361 = load i64 (%"class.device::HidWriter"*, i64, i8*)**, i64 (%"class.device::HidWriter"*, i64, i8*)*** %360, align 8
  %362 = getelementptr inbounds i64 (%"class.device::HidWriter"*, i64, i8*)*, i64 (%"class.device::HidWriter"*, i64, i8*)** %361, i64 2
  %363 = load i64 (%"class.device::HidWriter"*, i64, i8*)*, i64 (%"class.device::HidWriter"*, i64, i8*)** %362, align 8
  %364 = tail call i64 %363(%"class.device::HidWriter"* %353, i64 %358, i8* %359) #8
  %365 = icmp eq i64 %355, 0
  br i1 %365, label %367, label %366

366:                                              ; preds = %350
  store i64 %355, i64* %356, align 8
  tail call void @_ZdlPv(i8* nonnull %359) #9
  br label %367

367:                                              ; preds = %350, %366
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device16HidHapticGamepad10GetWeakPtrEv(%"class.base::WeakPtr"* noalias sret, %"class.device::HidHapticGamepad"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::internal::WeakReference", align 8
  %4 = alloca %"class.base::WeakPtr.22", align 8
  %5 = bitcast %"class.base::WeakPtr.22"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #8
  %6 = bitcast %"class.base::internal::WeakReference"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #8, !noalias !2
  %7 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %1, i64 0, i32 9, i32 0, i32 0
  call void @_ZNK4base8internal18WeakReferenceOwner6GetRefEv(%"class.base::internal::WeakReference"* nonnull sret %3, %"class.base::internal::WeakReferenceOwner"* %7) #8, !noalias !2
  %8 = getelementptr inbounds %"class.device::HidHapticGamepad", %"class.device::HidHapticGamepad"* %1, i64 0, i32 9, i32 0, i32 1
  %9 = load i64, i64* %8, align 8, !noalias !2
  %10 = getelementptr inbounds %"class.base::WeakPtr.22", %"class.base::WeakPtr.22"* %4, i64 0, i32 0
  call void @_ZN4base8internal11WeakPtrBaseC2ERKNS0_13WeakReferenceEm(%"class.base::internal::WeakPtrBase"* nonnull %10, %"class.base::internal::WeakReference"* nonnull dereferenceable(8) %3, i64 %9) #8
  call void @_ZN4base8internal13WeakReferenceD1Ev(%"class.base::internal::WeakReference"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #8, !noalias !2
  %11 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %0, i64 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.base::WeakPtr.22", %"class.base::WeakPtr.22"* %4, i64 0, i32 0, i32 0
  call void @_ZN4base8internal13WeakReferenceC1EOS1_(%"class.base::internal::WeakReference"* %11, %"class.base::internal::WeakReference"* nonnull dereferenceable(8) %12) #8
  %13 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %0, i64 0, i32 0, i32 1
  %14 = getelementptr inbounds %"class.base::WeakPtr.22", %"class.base::WeakPtr.22"* %4, i64 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %13, align 8
  call void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"* nonnull %10) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"*) unnamed_addr #2

declare void @_ZN6device21AbstractHapticGamepad16SetZeroVibrationEv(%"class.device::AbstractHapticGamepad"*) unnamed_addr #1

declare double @_ZN6device21AbstractHapticGamepad26GetMaxEffectDurationMillisEv(%"class.device::AbstractHapticGamepad"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare void @_ZN4base8internal18WeakPtrFactoryBaseC2Em(%"class.base::internal::WeakPtrFactoryBase"*, i64) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

declare void @_ZNK4base8internal18WeakReferenceOwner6GetRefEv(%"class.base::internal::WeakReference"* sret, %"class.base::internal::WeakReferenceOwner"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal13WeakReferenceD1Ev(%"class.base::internal::WeakReference"*) unnamed_addr #2

declare void @_ZN4base8internal11WeakPtrBaseC2ERKNS0_13WeakReferenceEm(%"class.base::internal::WeakPtrBase"*, %"class.base::internal::WeakReference"* dereferenceable(8), i64) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal13WeakReferenceC1EOS1_(%"class.base::internal::WeakReference"*, %"class.base::internal::WeakReference"* dereferenceable(8)) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK4base14WeakPtrFactoryIN6device16HidHapticGamepadEE10GetWeakPtrEv: argument 0"}
!4 = distinct !{!4, !"_ZNK4base14WeakPtrFactoryIN6device16HidHapticGamepadEE10GetWeakPtrEv"}
