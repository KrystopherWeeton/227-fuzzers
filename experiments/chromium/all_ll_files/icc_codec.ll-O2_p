; ModuleID = '../../third_party/libjxl/src/lib/jxl/icc_codec.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/icc_codec.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::__1::array" = type { [4 x i8] }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.jxl::ICCReader" = type { i64, i64, i64, i64, %"class.std::__1::vector", %"struct.jxl::ANSCode", %"class.jxl::ANSSymbolReader", %"class.jxl::PaddedBytes" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.jxl::ANSCode" = type { %"class.std::__1::unique_ptr", %"class.std::__1::vector.3", %"class.std::__1::vector.17", %"class.std::__1::vector.24", i8, i8, %"struct.jxl::LZ77Params", i64 }
%"class.std::__1::vector.3" = type { %"class.std::__1::__vector_base.4" }
%"class.std::__1::__vector_base.4" = type { %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"*, %"class.std::__1::__compressed_pair.12" }
%"struct.jxl::HuffmanDecodingData" = type { %"class.std::__1::vector.5" }
%"class.std::__1::vector.5" = type { %"class.std::__1::__vector_base.6" }
%"class.std::__1::__vector_base.6" = type { %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"*, %"class.std::__1::__compressed_pair.7" }
%"struct.jxl::HuffmanCode" = type { i8, i16 }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.jxl::HuffmanCode"* }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"struct.jxl::HuffmanDecodingData"* }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.19" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.jxl::HybridUintConfig"* }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { i32*, i32*, %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { i32* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.jxl::Fields" = type { i32 (...)** }
%"class.jxl::ANSSymbolReader" = type <{ %"struct.jxl::AliasTable::Entry"*, %"struct.jxl::HuffmanDecodingData"*, i8, [3 x i8], i32, %"struct.jxl::HybridUintConfig"*, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr", i32*, i32, i32, i32, i32, i32, i32, %"struct.jxl::HybridUintConfig", [120 x i32], i32, [4 x i8] }>
%"struct.jxl::AliasTable::Entry" = type { i8, i8, i16, i16, i16 }
%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }
%"struct.jxl::ANSSymbolReader::Checkpoint" = type { i32, i32, i32, i32, [512 x i32] }

$_ZN3jxl11PaddedBytesixEm = comdat any

$_ZN3jxl11PaddedBytesC2Em = comdat any

$_ZN3jxl11PaddedBytesD2Ev = comdat any

$_ZN3jxl15ANSSymbolReaderC2EPKNS_7ANSCodeEPNS_9BitReaderEm = comdat any

$_ZN3jxl9BitReader19BoundsCheckedRefillEv = comdat any

$_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE = comdat any

@_ZN3jxlL8kRtrcTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"rTRC" }, align 1
@_ZN3jxlL8kRxyzTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"rXYZ" }, align 1
@_ZN3jxlL11kTagStringsE = internal unnamed_addr constant [17 x %"struct.std::__1::array"*] [%"struct.std::__1::array"* @_ZN3jxlL8kCprtTagE, %"struct.std::__1::array"* @_ZN3jxlL8kWtptTagE, %"struct.std::__1::array"* @_ZN3jxlL8kBkptTagE, %"struct.std::__1::array"* @_ZN3jxlL8kRxyzTagE, %"struct.std::__1::array"* @_ZN3jxlL8kGxyzTagE, %"struct.std::__1::array"* @_ZN3jxlL8kBxyzTagE, %"struct.std::__1::array"* @_ZN3jxlL8kKxyzTagE, %"struct.std::__1::array"* @_ZN3jxlL8kRtrcTagE, %"struct.std::__1::array"* @_ZN3jxlL8kGtrcTagE, %"struct.std::__1::array"* @_ZN3jxlL8kBtrcTagE, %"struct.std::__1::array"* @_ZN3jxlL8kKtrcTagE, %"struct.std::__1::array"* @_ZN3jxlL8kChadTagE, %"struct.std::__1::array"* @_ZN3jxlL8kDescTagE, %"struct.std::__1::array"* @_ZN3jxlL8kChrmTagE, %"struct.std::__1::array"* @_ZN3jxlL8kDmndTagE, %"struct.std::__1::array"* @_ZN3jxlL8kDmddTagE, %"struct.std::__1::array"* @_ZN3jxlL8kLumiTagE], align 16
@_ZN3jxlL8kGxyzTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"gXYZ" }, align 1
@_ZN3jxlL8kBxyzTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"bXYZ" }, align 1
@_ZN3jxlL8kKxyzTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"kXYZ" }, align 1
@_ZN3jxlL8kWtptTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"wtpt" }, align 1
@_ZN3jxlL8kBkptTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"bkpt" }, align 1
@_ZN3jxlL8kLumiTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"lumi" }, align 1
@_ZN3jxlL8kGtrcTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"gTRC" }, align 1
@_ZN3jxlL8kBtrcTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"bTRC" }, align 1
@_ZN3jxlL8kXyz_TagE = internal constant %"struct.std::__1::array" { [4 x i8] c"XYZ " }, align 1
@_ZN3jxlL12kTypeStringsE = internal unnamed_addr constant [8 x %"struct.std::__1::array"*] [%"struct.std::__1::array"* @_ZN3jxlL8kXyz_TagE, %"struct.std::__1::array"* @_ZN3jxlL8kDescTagE, %"struct.std::__1::array"* @_ZN3jxlL8kTextTagE, %"struct.std::__1::array"* @_ZN3jxlL8kMlucTagE, %"struct.std::__1::array"* @_ZN3jxlL8kParaTagE, %"struct.std::__1::array"* @_ZN3jxlL8kCurvTagE, %"struct.std::__1::array"* @_ZN3jxlL8kSf32TagE, %"struct.std::__1::array"* @_ZN3jxlL8kGbd_TagE], align 16
@.str.36 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.37 = private unnamed_addr constant [57 x i8] c"../../third_party/libjxl/src/lib/jxl/base/padded_bytes.h\00", align 1
@.str.38 = private unnamed_addr constant [12 x i8] c"i <= size()\00", align 1
@_ZN3jxlL8kCprtTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"cprt" }, align 1
@_ZN3jxlL8kKtrcTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"kTRC" }, align 1
@_ZN3jxlL8kChadTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"chad" }, align 1
@_ZN3jxlL8kDescTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"desc" }, align 1
@_ZN3jxlL8kChrmTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"chrm" }, align 1
@_ZN3jxlL8kDmndTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"dmnd" }, align 1
@_ZN3jxlL8kDmddTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"dmdd" }, align 1
@_ZN3jxlL8kTextTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"text" }, align 1
@_ZN3jxlL8kMlucTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"mluc" }, align 1
@_ZN3jxlL8kParaTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"para" }, align 1
@_ZN3jxlL8kCurvTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"curv" }, align 1
@_ZN3jxlL8kSf32TagE = internal constant %"struct.std::__1::array" { [4 x i8] c"sf32" }, align 1
@_ZN3jxlL8kGbd_TagE = internal constant %"struct.std::__1::array" { [4 x i8] c"gbd " }, align 1
@_ZN3jxlL17kSpecialDistancesE = internal unnamed_addr constant [120 x [2 x i8]] [[2 x i8] c"\00\01", [2 x i8] c"\01\00", [2 x i8] c"\01\01", [2 x i8] c"\FF\01", [2 x i8] c"\00\02", [2 x i8] c"\02\00", [2 x i8] c"\01\02", [2 x i8] c"\FF\02", [2 x i8] c"\02\01", [2 x i8] c"\FE\01", [2 x i8] c"\02\02", [2 x i8] c"\FE\02", [2 x i8] c"\00\03", [2 x i8] c"\03\00", [2 x i8] c"\01\03", [2 x i8] c"\FF\03", [2 x i8] c"\03\01", [2 x i8] c"\FD\01", [2 x i8] c"\02\03", [2 x i8] c"\FE\03", [2 x i8] c"\03\02", [2 x i8] c"\FD\02", [2 x i8] c"\00\04", [2 x i8] c"\04\00", [2 x i8] c"\01\04", [2 x i8] c"\FF\04", [2 x i8] c"\04\01", [2 x i8] c"\FC\01", [2 x i8] c"\03\03", [2 x i8] c"\FD\03", [2 x i8] c"\02\04", [2 x i8] c"\FE\04", [2 x i8] c"\04\02", [2 x i8] c"\FC\02", [2 x i8] c"\00\05", [2 x i8] c"\03\04", [2 x i8] c"\FD\04", [2 x i8] c"\04\03", [2 x i8] c"\FC\03", [2 x i8] c"\05\00", [2 x i8] c"\01\05", [2 x i8] c"\FF\05", [2 x i8] c"\05\01", [2 x i8] c"\FB\01", [2 x i8] c"\02\05", [2 x i8] c"\FE\05", [2 x i8] c"\05\02", [2 x i8] c"\FB\02", [2 x i8] c"\04\04", [2 x i8] c"\FC\04", [2 x i8] c"\03\05", [2 x i8] c"\FD\05", [2 x i8] c"\05\03", [2 x i8] c"\FB\03", [2 x i8] c"\00\06", [2 x i8] c"\06\00", [2 x i8] c"\01\06", [2 x i8] c"\FF\06", [2 x i8] c"\06\01", [2 x i8] c"\FA\01", [2 x i8] c"\02\06", [2 x i8] c"\FE\06", [2 x i8] c"\06\02", [2 x i8] c"\FA\02", [2 x i8] c"\04\05", [2 x i8] c"\FC\05", [2 x i8] c"\05\04", [2 x i8] c"\FB\04", [2 x i8] c"\03\06", [2 x i8] c"\FD\06", [2 x i8] c"\06\03", [2 x i8] c"\FA\03", [2 x i8] c"\00\07", [2 x i8] c"\07\00", [2 x i8] c"\01\07", [2 x i8] c"\FF\07", [2 x i8] c"\05\05", [2 x i8] c"\FB\05", [2 x i8] c"\07\01", [2 x i8] c"\F9\01", [2 x i8] c"\04\06", [2 x i8] c"\FC\06", [2 x i8] c"\06\04", [2 x i8] c"\FA\04", [2 x i8] c"\02\07", [2 x i8] c"\FE\07", [2 x i8] c"\07\02", [2 x i8] c"\F9\02", [2 x i8] c"\03\07", [2 x i8] c"\FD\07", [2 x i8] c"\07\03", [2 x i8] c"\F9\03", [2 x i8] c"\05\06", [2 x i8] c"\FB\06", [2 x i8] c"\06\05", [2 x i8] c"\FA\05", [2 x i8] c"\08\00", [2 x i8] c"\04\07", [2 x i8] c"\FC\07", [2 x i8] c"\07\04", [2 x i8] c"\F9\04", [2 x i8] c"\08\01", [2 x i8] c"\08\02", [2 x i8] c"\06\06", [2 x i8] c"\FA\06", [2 x i8] c"\08\03", [2 x i8] c"\05\07", [2 x i8] c"\FB\07", [2 x i8] c"\07\05", [2 x i8] c"\F9\05", [2 x i8] c"\08\04", [2 x i8] c"\06\07", [2 x i8] c"\FA\07", [2 x i8] c"\07\06", [2 x i8] c"\F9\06", [2 x i8] c"\08\05", [2 x i8] c"\07\07", [2 x i8] c"\F9\07", [2 x i8] c"\08\06", [2 x i8] c"\08\07"], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl13CheckPreambleERKNS_11PaddedBytesEmm(%"class.jxl::PaddedBytes"* nocapture readonly dereferenceable(24), i64, i64) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %25, label %9

9:                                                ; preds = %3, %20
  %10 = phi i64 [ %21, %20 ], [ 0, %3 ]
  %11 = phi i64 [ %18, %20 ], [ 0, %3 ]
  %12 = getelementptr inbounds i8, i8* %5, i64 %10
  %13 = load i8, i8* %12, align 1
  %14 = and i8 %13, 127
  %15 = zext i8 %14 to i64
  %16 = mul nuw nsw i64 %10, 7
  %17 = shl i64 %15, %16
  %18 = or i64 %17, %11
  %19 = icmp sgt i8 %13, -1
  br i1 %19, label %25, label %20

20:                                               ; preds = %9
  %21 = add nuw nsw i64 %10, 1
  %22 = icmp ult i64 %21, %7
  %23 = icmp ult i64 %21, 10
  %24 = and i1 %23, %22
  br i1 %24, label %9, label %25

25:                                               ; preds = %9, %20, %3
  %26 = phi i64 [ 0, %3 ], [ %21, %20 ], [ %10, %9 ]
  %27 = phi i64 [ 0, %3 ], [ %18, %20 ], [ %18, %9 ]
  %28 = add nuw i64 %26, 1
  %29 = tail call i32 @_ZN3jxl12CheckIs32BitEm(i64 %27) #8
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %68

31:                                               ; preds = %25
  %32 = icmp ult i64 %28, %7
  br i1 %32, label %33, label %68

33:                                               ; preds = %31, %45
  %34 = phi i64 [ %47, %45 ], [ %28, %31 ]
  %35 = phi i64 [ %43, %45 ], [ 0, %31 ]
  %36 = phi i64 [ %46, %45 ], [ 0, %31 ]
  %37 = getelementptr inbounds i8, i8* %5, i64 %34
  %38 = load i8, i8* %37, align 1
  %39 = and i8 %38, 127
  %40 = zext i8 %39 to i64
  %41 = mul nuw nsw i64 %36, 7
  %42 = shl i64 %40, %41
  %43 = or i64 %42, %35
  %44 = icmp sgt i8 %38, -1
  br i1 %44, label %51, label %45

45:                                               ; preds = %33
  %46 = add nuw nsw i64 %36, 1
  %47 = add i64 %46, %28
  %48 = icmp ult i64 %47, %7
  %49 = icmp ult i64 %46, 10
  %50 = and i1 %49, %48
  br i1 %50, label %33, label %51

51:                                               ; preds = %33, %45
  %52 = phi i64 [ %36, %33 ], [ %46, %45 ]
  %53 = tail call i32 @_ZN3jxl12CheckIs32BitEm(i64 %43) #8
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %68

55:                                               ; preds = %51
  %56 = add i64 %26, 2
  %57 = add i64 %56, %52
  %58 = tail call i32 @_ZN3jxl16CheckOutOfBoundsEmmm(i64 %57, i64 %43, i64 %7) #8
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %68

60:                                               ; preds = %55
  %61 = add i64 %27, 65536
  %62 = icmp ult i64 %61, %1
  br i1 %62, label %68, label %63

63:                                               ; preds = %60
  %64 = icmp ne i64 %2, 0
  %65 = icmp ugt i64 %27, %2
  %66 = and i1 %64, %65
  %67 = zext i1 %66 to i32
  ret i32 %67

68:                                               ; preds = %60, %55, %51, %31, %25
  %69 = phi i32 [ %29, %25 ], [ 1, %31 ], [ %53, %51 ], [ %58, %55 ], [ 1, %60 ]
  ret i32 %69
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZN3jxl12CheckIs32BitEm(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @_ZN3jxl16CheckOutOfBoundsEmmm(i64, i64, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl12UnpredictICCEPKhmPNS_11PaddedBytesE(i8*, i64, %"class.jxl::PaddedBytes"*) local_unnamed_addr #0 {
  %4 = alloca %"class.jxl::PaddedBytes", align 8
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to %"struct.std::__1::array"*
  %7 = alloca %"class.jxl::PaddedBytes", align 8
  %8 = alloca %"class.jxl::PaddedBytes", align 8
  %9 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %2, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp ne i64 %10, 0
  %12 = icmp eq i64 %1, 0
  %13 = or i1 %12, %11
  br i1 %13, label %778, label %14

14:                                               ; preds = %3, %25
  %15 = phi i64 [ %26, %25 ], [ 0, %3 ]
  %16 = phi i64 [ %23, %25 ], [ 0, %3 ]
  %17 = getelementptr inbounds i8, i8* %0, i64 %15
  %18 = load i8, i8* %17, align 1
  %19 = and i8 %18, 127
  %20 = zext i8 %19 to i64
  %21 = mul nuw nsw i64 %15, 7
  %22 = shl i64 %20, %21
  %23 = or i64 %22, %16
  %24 = icmp sgt i8 %18, -1
  br i1 %24, label %30, label %25

25:                                               ; preds = %14
  %26 = add nuw nsw i64 %15, 1
  %27 = icmp ult i64 %26, %1
  %28 = icmp ult i64 %26, 10
  %29 = and i1 %28, %27
  br i1 %29, label %14, label %30

30:                                               ; preds = %14, %25
  %31 = phi i64 [ %15, %14 ], [ %26, %25 ]
  %32 = add nuw i64 %31, 1
  %33 = tail call i32 @_ZN3jxl12CheckIs32BitEm(i64 %23) #8
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %778

35:                                               ; preds = %30
  %36 = icmp ult i64 %32, %1
  br i1 %36, label %37, label %778

37:                                               ; preds = %35, %49
  %38 = phi i64 [ %51, %49 ], [ %32, %35 ]
  %39 = phi i64 [ %47, %49 ], [ 0, %35 ]
  %40 = phi i64 [ %50, %49 ], [ 0, %35 ]
  %41 = getelementptr inbounds i8, i8* %0, i64 %38
  %42 = load i8, i8* %41, align 1
  %43 = and i8 %42, 127
  %44 = zext i8 %43 to i64
  %45 = mul nuw nsw i64 %40, 7
  %46 = shl i64 %44, %45
  %47 = or i64 %46, %39
  %48 = icmp sgt i8 %42, -1
  br i1 %48, label %55, label %49

49:                                               ; preds = %37
  %50 = add nuw nsw i64 %40, 1
  %51 = add i64 %50, %32
  %52 = icmp ult i64 %51, %1
  %53 = icmp ult i64 %50, 10
  %54 = and i1 %53, %52
  br i1 %54, label %37, label %55

55:                                               ; preds = %37, %49
  %56 = phi i64 [ %40, %37 ], [ %50, %49 ]
  %57 = add i64 %31, 2
  %58 = add i64 %57, %56
  %59 = tail call i32 @_ZN3jxl12CheckIs32BitEm(i64 %47) #8
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %778

61:                                               ; preds = %55
  %62 = tail call i32 @_ZN3jxl16CheckOutOfBoundsEmmm(i64 %58, i64 %47, i64 %1) #8
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %778

64:                                               ; preds = %61
  %65 = add i64 %58, %47
  %66 = bitcast %"class.jxl::PaddedBytes"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %66) #8
  %67 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %4, i64 0, i32 0
  %68 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %4, i64 0, i32 2, i32 0, i32 0, i32 0
  %69 = bitcast %"class.jxl::PaddedBytes"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %69, i8 -86, i64 24, i1 false)
  call void @_ZN3jxl26ICCInitialHeaderPredictionEv(%"class.jxl::PaddedBytes"* nonnull sret %4) #8
  %70 = trunc i64 %23 to i32
  call void @_ZN3jxl12EncodeUint32EmjPNS_11PaddedBytesE(i64 0, i32 %70, %"class.jxl::PaddedBytes"* nonnull %4) #8
  %71 = load i64, i64* %9, align 8
  %72 = icmp eq i64 %71, %23
  br i1 %72, label %76, label %73

73:                                               ; preds = %64
  %74 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %2, i64 0, i32 2, i32 0, i32 0, i32 0
  %75 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %2, i64 0, i32 1
  br label %82

76:                                               ; preds = %121, %64
  %77 = phi i64 [ %65, %64 ], [ %92, %121 ]
  %78 = icmp ne i64 %47, 0
  %79 = icmp ne i64 %77, %1
  %80 = or i1 %78, %79
  %81 = zext i1 %80 to i32
  br label %772

82:                                               ; preds = %73, %121
  %83 = phi i64 [ %71, %73 ], [ %123, %121 ]
  %84 = phi i64 [ 0, %73 ], [ %122, %121 ]
  %85 = phi i64 [ %65, %73 ], [ %92, %121 ]
  %86 = icmp eq i64 %84, 128
  br i1 %86, label %125, label %87

87:                                               ; preds = %82
  %88 = load i8*, i8** %74, align 8
  %89 = load i8*, i8** %68, align 8
  call void @_ZN3jxl16ICCPredictHeaderEPKhmPhm(i8* %88, i64 %83, i8* %89, i64 %84) #8
  %90 = icmp ult i64 %85, %1
  br i1 %90, label %91, label %772

91:                                               ; preds = %87
  %92 = add nuw i64 %85, 1
  %93 = load i64, i64* %67, align 8
  %94 = icmp ult i64 %93, %84
  br i1 %94, label %95, label %98

95:                                               ; preds = %91
  %96 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.37, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38, i64 0, i64 0)) #8
  %97 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

98:                                               ; preds = %91
  %99 = getelementptr inbounds i8, i8* %0, i64 %85
  %100 = load i8, i8* %99, align 1
  %101 = load i8*, i8** %68, align 8
  %102 = getelementptr inbounds i8, i8* %101, i64 %84
  %103 = load i8, i8* %102, align 1
  %104 = add i8 %103, %100
  %105 = load i64, i64* %9, align 8
  %106 = load i64, i64* %75, align 8
  %107 = icmp eq i64 %105, %106
  br i1 %107, label %110, label %108

108:                                              ; preds = %98
  %109 = load i8*, i8** %74, align 8
  br label %116

110:                                              ; preds = %98
  %111 = add i64 %105, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %2, i64 %111) #8
  %112 = load i8*, i8** %74, align 8
  %113 = icmp eq i8* %112, null
  br i1 %113, label %121, label %114

114:                                              ; preds = %110
  %115 = load i64, i64* %9, align 8
  br label %116

116:                                              ; preds = %114, %108
  %117 = phi i8* [ %112, %114 ], [ %109, %108 ]
  %118 = phi i64 [ %115, %114 ], [ %105, %108 ]
  %119 = add i64 %118, 1
  store i64 %119, i64* %9, align 8
  %120 = getelementptr inbounds i8, i8* %117, i64 %118
  store i8 %104, i8* %120, align 1
  br label %121

121:                                              ; preds = %110, %116
  %122 = add nuw nsw i64 %84, 1
  %123 = load i64, i64* %9, align 8
  %124 = icmp eq i64 %123, %23
  br i1 %124, label %76, label %82

125:                                              ; preds = %82
  %126 = icmp ult i64 %58, %65
  br i1 %126, label %127, label %772

127:                                              ; preds = %125
  %128 = icmp ult i64 %58, %1
  br i1 %128, label %131, label %129

129:                                              ; preds = %127
  %130 = add nuw i64 %58, 1
  br label %363

131:                                              ; preds = %127, %143
  %132 = phi i64 [ %145, %143 ], [ %58, %127 ]
  %133 = phi i64 [ %141, %143 ], [ 0, %127 ]
  %134 = phi i64 [ %144, %143 ], [ 0, %127 ]
  %135 = getelementptr inbounds i8, i8* %0, i64 %132
  %136 = load i8, i8* %135, align 1
  %137 = and i8 %136, 127
  %138 = zext i8 %137 to i64
  %139 = mul nuw nsw i64 %134, 7
  %140 = shl i64 %138, %139
  %141 = or i64 %140, %133
  %142 = icmp sgt i8 %136, -1
  br i1 %142, label %149, label %143

143:                                              ; preds = %131
  %144 = add nuw nsw i64 %134, 1
  %145 = add i64 %144, %58
  %146 = icmp ult i64 %145, %1
  %147 = icmp ult i64 %144, 10
  %148 = and i1 %147, %146
  br i1 %148, label %131, label %149

149:                                              ; preds = %131, %143
  %150 = phi i64 [ %134, %131 ], [ %144, %143 ]
  %151 = add i64 %58, 1
  %152 = add i64 %151, %150
  %153 = icmp eq i64 %141, 0
  br i1 %153, label %363, label %154

154:                                              ; preds = %149
  %155 = add i64 %141, -1
  %156 = call i32 @_ZN3jxl12CheckIs32BitEm(i64 %155) #8
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %772

158:                                              ; preds = %154
  %159 = trunc i64 %155 to i32
  call void @_ZN3jxl12AppendUint32EjPNS_11PaddedBytesE(i32 %159, %"class.jxl::PaddedBytes"* %2) #8
  %160 = load i64, i64* %9, align 8
  %161 = icmp ugt i64 %160, %23
  %162 = icmp ugt i64 %152, %65
  %163 = or i1 %162, %161
  br i1 %163, label %772, label %164

164:                                              ; preds = %158
  %165 = mul i64 %155, 12
  %166 = add i64 %165, 128
  %167 = bitcast i32* %5 to i8*
  %168 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %6, i64 0, i32 0, i64 1
  %169 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %6, i64 0, i32 0, i64 2
  %170 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %6, i64 0, i32 0, i64 3
  br label %171

171:                                              ; preds = %164, %358
  %172 = phi i64 [ %160, %164 ], [ %359, %358 ]
  %173 = phi i64 [ %166, %164 ], [ %304, %358 ]
  %174 = phi i64 [ 0, %164 ], [ %339, %358 ]
  %175 = phi i64 [ %85, %164 ], [ %202, %358 ]
  %176 = phi i64 [ %152, %164 ], [ %338, %358 ]
  %177 = icmp eq i64 %176, %65
  br i1 %177, label %363, label %178

178:                                              ; preds = %171
  %179 = add i64 %176, 1
  %180 = getelementptr inbounds i8, i8* %0, i64 %176
  %181 = load i8, i8* %180, align 1
  %182 = and i8 %181, 63
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %167) #8
  store i32 -1431655766, i32* %5, align 4
  switch i8 %182, label %192 [
    i8 0, label %183
    i8 1, label %184
    i8 2, label %190
    i8 3, label %191
  ]

183:                                              ; preds = %178
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %167) #8
  br label %363

184:                                              ; preds = %178
  %185 = call i32 @_ZN3jxl16CheckOutOfBoundsEmmm(i64 %175, i64 4, i64 %1) #8
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %354

187:                                              ; preds = %184
  %188 = call i32 @_ZN3jxl13DecodeKeywordEPKhmm(i8* %0, i64 %1, i64 %175) #8
  store i32 %188, i32* %5, align 4
  %189 = add i64 %175, 4
  br label %201

190:                                              ; preds = %178
  store i32 1129469042, i32* %5, align 4
  br label %201

191:                                              ; preds = %178
  store i32 1515804786, i32* %5, align 4
  br label %201

192:                                              ; preds = %178
  %193 = zext i8 %182 to i64
  %194 = add nsw i64 %193, -4
  %195 = icmp ugt i64 %194, 16
  br i1 %195, label %354, label %196

196:                                              ; preds = %192
  %197 = getelementptr inbounds [17 x %"struct.std::__1::array"*], [17 x %"struct.std::__1::array"*]* @_ZN3jxlL11kTagStringsE, i64 0, i64 %194
  %198 = bitcast %"struct.std::__1::array"** %197 to i32**
  %199 = load i32*, i32** %198, align 8
  %200 = load i32, i32* %199, align 1
  store i32 %200, i32* %5, align 4
  br label %201

201:                                              ; preds = %187, %191, %196, %190
  %202 = phi i64 [ %175, %196 ], [ %175, %191 ], [ %175, %190 ], [ %189, %187 ]
  call void @_ZN3jxl13AppendKeywordERKNSt3__15arrayIhLm4EEEPNS_11PaddedBytesE(%"struct.std::__1::array"* nonnull dereferenceable(4) %6, %"class.jxl::PaddedBytes"* %2) #8
  %203 = load i8, i8* %167, align 4
  switch i8 %203, label %266 [
    i8 114, label %204
    i8 103, label %213
    i8 98, label %222
    i8 107, label %231
    i8 119, label %240
    i8 108, label %256
  ]

204:                                              ; preds = %201
  %205 = load i8, i8* %168, align 1
  %206 = icmp eq i8 %205, 88
  %207 = load i8, i8* %169, align 2
  %208 = icmp eq i8 %207, 89
  %209 = and i1 %206, %208
  %210 = load i8, i8* %170, align 1
  %211 = icmp eq i8 %210, 90
  %212 = and i1 %209, %211
  br i1 %212, label %265, label %266

213:                                              ; preds = %201
  %214 = load i8, i8* %168, align 1
  %215 = icmp eq i8 %214, 88
  %216 = load i8, i8* %169, align 2
  %217 = icmp eq i8 %216, 89
  %218 = and i1 %215, %217
  %219 = load i8, i8* %170, align 1
  %220 = icmp eq i8 %219, 90
  %221 = and i1 %218, %220
  br i1 %221, label %265, label %266

222:                                              ; preds = %201
  %223 = load i8, i8* %168, align 1
  %224 = icmp eq i8 %223, 88
  %225 = load i8, i8* %169, align 2
  br i1 %224, label %226, label %249

226:                                              ; preds = %222
  %227 = icmp eq i8 %225, 89
  %228 = load i8, i8* %170, align 1
  %229 = icmp eq i8 %228, 90
  %230 = and i1 %227, %229
  br i1 %230, label %265, label %266

231:                                              ; preds = %201
  %232 = load i8, i8* %168, align 1
  %233 = load i8, i8* %169, align 2
  %234 = icmp eq i8 %232, 88
  %235 = icmp eq i8 %233, 89
  %236 = and i1 %234, %235
  %237 = load i8, i8* %170, align 1
  %238 = icmp eq i8 %237, 90
  %239 = and i1 %236, %238
  br i1 %239, label %265, label %266

240:                                              ; preds = %201
  %241 = load i8, i8* %168, align 1
  %242 = load i8, i8* %169, align 2
  %243 = icmp eq i8 %241, 116
  %244 = icmp eq i8 %242, 112
  %245 = and i1 %243, %244
  %246 = load i8, i8* %170, align 1
  %247 = icmp eq i8 %246, 116
  %248 = and i1 %245, %247
  br i1 %248, label %265, label %266

249:                                              ; preds = %222
  %250 = load i8, i8* %170, align 1
  %251 = icmp eq i8 %223, 107
  %252 = icmp eq i8 %225, 112
  %253 = and i1 %251, %252
  %254 = icmp eq i8 %250, 116
  %255 = and i1 %253, %254
  br i1 %255, label %265, label %266

256:                                              ; preds = %201
  %257 = load i8, i8* %168, align 1
  %258 = load i8, i8* %169, align 2
  %259 = icmp eq i8 %257, 117
  %260 = icmp eq i8 %258, 109
  %261 = and i1 %259, %260
  %262 = load i8, i8* %170, align 1
  %263 = icmp eq i8 %262, 105
  %264 = and i1 %261, %263
  br i1 %264, label %265, label %266

265:                                              ; preds = %240, %226, %213, %256, %249, %231, %204
  br label %266

266:                                              ; preds = %249, %240, %231, %213, %204, %201, %226, %256, %265
  %267 = phi i64 [ 20, %265 ], [ %174, %256 ], [ %174, %226 ], [ %174, %201 ], [ %174, %204 ], [ %174, %213 ], [ %174, %231 ], [ %174, %240 ], [ %174, %249 ]
  %268 = and i8 %181, 64
  %269 = icmp eq i8 %268, 0
  br i1 %269, label %297, label %270

270:                                              ; preds = %266
  %271 = icmp ult i64 %179, %65
  br i1 %271, label %272, label %354

272:                                              ; preds = %270
  %273 = icmp ult i64 %179, %1
  br i1 %273, label %274, label %292

274:                                              ; preds = %272, %286
  %275 = phi i64 [ %288, %286 ], [ %179, %272 ]
  %276 = phi i64 [ %284, %286 ], [ 0, %272 ]
  %277 = phi i64 [ %287, %286 ], [ 0, %272 ]
  %278 = getelementptr inbounds i8, i8* %0, i64 %275
  %279 = load i8, i8* %278, align 1
  %280 = and i8 %279, 127
  %281 = zext i8 %280 to i64
  %282 = mul nuw nsw i64 %277, 7
  %283 = shl i64 %281, %282
  %284 = or i64 %283, %276
  %285 = icmp sgt i8 %279, -1
  br i1 %285, label %292, label %286

286:                                              ; preds = %274
  %287 = add nuw nsw i64 %277, 1
  %288 = add i64 %287, %179
  %289 = icmp ult i64 %288, %1
  %290 = icmp ult i64 %287, 10
  %291 = and i1 %290, %289
  br i1 %291, label %274, label %292

292:                                              ; preds = %274, %286, %272
  %293 = phi i64 [ 0, %272 ], [ %287, %286 ], [ %277, %274 ]
  %294 = phi i64 [ 0, %272 ], [ %284, %286 ], [ %284, %274 ]
  %295 = add i64 %176, 2
  %296 = add i64 %295, %293
  br label %302

297:                                              ; preds = %266
  %298 = call i32 @_ZN3jxl12CheckIs32BitEm(i64 %173) #8
  %299 = icmp eq i32 %298, 0
  br i1 %299, label %300, label %354

300:                                              ; preds = %297
  %301 = add i64 %173, %174
  br label %302

302:                                              ; preds = %292, %300
  %303 = phi i64 [ %179, %300 ], [ %296, %292 ]
  %304 = phi i64 [ %301, %300 ], [ %294, %292 ]
  %305 = call i32 @_ZN3jxl12CheckIs32BitEm(i64 %304) #8
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %307, label %354

307:                                              ; preds = %302
  %308 = trunc i64 %304 to i32
  call void @_ZN3jxl12AppendUint32EjPNS_11PaddedBytesE(i32 %308, %"class.jxl::PaddedBytes"* %2) #8
  %309 = icmp slt i8 %181, 0
  br i1 %309, label %310, label %337

310:                                              ; preds = %307
  %311 = icmp ult i64 %303, %65
  br i1 %311, label %312, label %354

312:                                              ; preds = %310
  %313 = icmp ult i64 %303, %1
  br i1 %313, label %314, label %332

314:                                              ; preds = %312, %326
  %315 = phi i64 [ %328, %326 ], [ %303, %312 ]
  %316 = phi i64 [ %324, %326 ], [ 0, %312 ]
  %317 = phi i64 [ %327, %326 ], [ 0, %312 ]
  %318 = getelementptr inbounds i8, i8* %0, i64 %315
  %319 = load i8, i8* %318, align 1
  %320 = and i8 %319, 127
  %321 = zext i8 %320 to i64
  %322 = mul nuw nsw i64 %317, 7
  %323 = shl i64 %321, %322
  %324 = or i64 %323, %316
  %325 = icmp sgt i8 %319, -1
  br i1 %325, label %332, label %326

326:                                              ; preds = %314
  %327 = add nuw nsw i64 %317, 1
  %328 = add nuw i64 %327, %303
  %329 = icmp ult i64 %328, %1
  %330 = icmp ult i64 %327, 10
  %331 = and i1 %330, %329
  br i1 %331, label %314, label %332

332:                                              ; preds = %314, %326, %312
  %333 = phi i64 [ 0, %312 ], [ %327, %326 ], [ %317, %314 ]
  %334 = phi i64 [ 0, %312 ], [ %324, %326 ], [ %324, %314 ]
  %335 = add i64 %303, 1
  %336 = add i64 %335, %333
  br label %337

337:                                              ; preds = %307, %332
  %338 = phi i64 [ %336, %332 ], [ %303, %307 ]
  %339 = phi i64 [ %334, %332 ], [ %267, %307 ]
  %340 = call i32 @_ZN3jxl12CheckIs32BitEm(i64 %339) #8
  %341 = icmp eq i32 %340, 0
  br i1 %341, label %342, label %354

342:                                              ; preds = %337
  %343 = trunc i64 %339 to i32
  call void @_ZN3jxl12AppendUint32EjPNS_11PaddedBytesE(i32 %343, %"class.jxl::PaddedBytes"* %2) #8
  switch i8 %182, label %358 [
    i8 2, label %344
    i8 3, label %345
  ]

344:                                              ; preds = %342
  call void @_ZN3jxl13AppendKeywordERKNSt3__15arrayIhLm4EEEPNS_11PaddedBytesE(%"struct.std::__1::array"* nonnull dereferenceable(4) @_ZN3jxlL8kGtrcTagE, %"class.jxl::PaddedBytes"* %2) #8
  call void @_ZN3jxl12AppendUint32EjPNS_11PaddedBytesE(i32 %308, %"class.jxl::PaddedBytes"* %2) #8
  call void @_ZN3jxl12AppendUint32EjPNS_11PaddedBytesE(i32 %343, %"class.jxl::PaddedBytes"* %2) #8
  call void @_ZN3jxl13AppendKeywordERKNSt3__15arrayIhLm4EEEPNS_11PaddedBytesE(%"struct.std::__1::array"* nonnull dereferenceable(4) @_ZN3jxlL8kBtrcTagE, %"class.jxl::PaddedBytes"* %2) #8
  br label %356

345:                                              ; preds = %342
  %346 = shl i64 %339, 1
  %347 = add i64 %346, %304
  %348 = call i32 @_ZN3jxl12CheckIs32BitEm(i64 %347) #8
  %349 = icmp eq i32 %348, 0
  br i1 %349, label %350, label %354

350:                                              ; preds = %345
  call void @_ZN3jxl13AppendKeywordERKNSt3__15arrayIhLm4EEEPNS_11PaddedBytesE(%"struct.std::__1::array"* nonnull dereferenceable(4) @_ZN3jxlL8kGxyzTagE, %"class.jxl::PaddedBytes"* %2) #8
  %351 = add i64 %339, %304
  %352 = trunc i64 %351 to i32
  call void @_ZN3jxl12AppendUint32EjPNS_11PaddedBytesE(i32 %352, %"class.jxl::PaddedBytes"* %2) #8
  call void @_ZN3jxl12AppendUint32EjPNS_11PaddedBytesE(i32 %343, %"class.jxl::PaddedBytes"* %2) #8
  call void @_ZN3jxl13AppendKeywordERKNSt3__15arrayIhLm4EEEPNS_11PaddedBytesE(%"struct.std::__1::array"* nonnull dereferenceable(4) @_ZN3jxlL8kBxyzTagE, %"class.jxl::PaddedBytes"* %2) #8
  %353 = trunc i64 %347 to i32
  br label %356

354:                                              ; preds = %184, %192, %270, %297, %302, %310, %337, %345
  %355 = phi i32 [ %348, %345 ], [ %340, %337 ], [ 1, %310 ], [ %305, %302 ], [ %298, %297 ], [ 1, %270 ], [ 1, %192 ], [ %185, %184 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %167) #8
  br label %772

356:                                              ; preds = %350, %344
  %357 = phi i32 [ %308, %344 ], [ %353, %350 ]
  call void @_ZN3jxl12AppendUint32EjPNS_11PaddedBytesE(i32 %357, %"class.jxl::PaddedBytes"* %2) #8
  call void @_ZN3jxl12AppendUint32EjPNS_11PaddedBytesE(i32 %343, %"class.jxl::PaddedBytes"* %2) #8
  br label %358

358:                                              ; preds = %356, %342
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %167) #8
  %359 = load i64, i64* %9, align 8
  %360 = icmp ugt i64 %359, %23
  %361 = icmp ugt i64 %338, %65
  %362 = or i1 %361, %360
  br i1 %362, label %772, label %171

363:                                              ; preds = %171, %183, %129, %149
  %364 = phi i64 [ %83, %149 ], [ %83, %129 ], [ %172, %183 ], [ %172, %171 ]
  %365 = phi i64 [ %152, %149 ], [ %130, %129 ], [ %179, %183 ], [ %65, %171 ]
  %366 = phi i64 [ %85, %149 ], [ %85, %129 ], [ %175, %183 ], [ %175, %171 ]
  %367 = icmp ugt i64 %364, %23
  %368 = icmp ugt i64 %365, %65
  %369 = or i1 %368, %367
  br i1 %369, label %772, label %370

370:                                              ; preds = %363
  %371 = bitcast %"class.jxl::PaddedBytes"* %8 to i8*
  %372 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %8, i64 0, i32 0
  %373 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %8, i64 0, i32 1
  %374 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %8, i64 0, i32 2, i32 0, i32 0, i32 0
  %375 = bitcast i64* %373 to i8*
  %376 = bitcast %"class.jxl::PaddedBytes"* %7 to i8*
  %377 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %7, i64 0, i32 0
  %378 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %7, i64 0, i32 1
  %379 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %7, i64 0, i32 2, i32 0, i32 0, i32 0
  %380 = bitcast i64* %378 to i8*
  %381 = icmp eq i64 %365, %65
  br i1 %381, label %765, label %384

382:                                              ; preds = %758
  %383 = icmp eq i64 %759, %65
  br i1 %383, label %765, label %384

384:                                              ; preds = %370, %382
  %385 = phi i64 [ %759, %382 ], [ %365, %370 ]
  %386 = phi i64 [ %760, %382 ], [ %366, %370 ]
  %387 = add i64 %385, 1
  %388 = getelementptr inbounds i8, i8* %0, i64 %385
  %389 = load i8, i8* %388, align 1
  %390 = zext i8 %389 to i64
  switch i8 %389, label %731 [
    i8 1, label %391
    i8 3, label %447
    i8 2, label %447
    i8 4, label %538
    i8 10, label %685
  ]

391:                                              ; preds = %384
  %392 = icmp ult i64 %387, %65
  br i1 %392, label %393, label %772

393:                                              ; preds = %391
  %394 = icmp ult i64 %387, %1
  br i1 %394, label %395, label %413

395:                                              ; preds = %393, %407
  %396 = phi i64 [ %409, %407 ], [ %387, %393 ]
  %397 = phi i64 [ %405, %407 ], [ 0, %393 ]
  %398 = phi i64 [ %408, %407 ], [ 0, %393 ]
  %399 = getelementptr inbounds i8, i8* %0, i64 %396
  %400 = load i8, i8* %399, align 1
  %401 = and i8 %400, 127
  %402 = zext i8 %401 to i64
  %403 = mul nuw nsw i64 %398, 7
  %404 = shl i64 %402, %403
  %405 = or i64 %404, %397
  %406 = icmp sgt i8 %400, -1
  br i1 %406, label %413, label %407

407:                                              ; preds = %395
  %408 = add nuw nsw i64 %398, 1
  %409 = add i64 %408, %387
  %410 = icmp ult i64 %409, %1
  %411 = icmp ult i64 %408, 10
  %412 = and i1 %411, %410
  br i1 %412, label %395, label %413

413:                                              ; preds = %395, %407, %393
  %414 = phi i64 [ 0, %393 ], [ %408, %407 ], [ %398, %395 ]
  %415 = phi i64 [ 0, %393 ], [ %405, %407 ], [ %405, %395 ]
  %416 = add i64 %385, 2
  %417 = add i64 %416, %414
  %418 = call i32 @_ZN3jxl16CheckOutOfBoundsEmmm(i64 %386, i64 %415, i64 %1) #8
  %419 = icmp eq i32 %418, 0
  br i1 %419, label %420, label %772

420:                                              ; preds = %413
  %421 = icmp eq i64 %415, 0
  br i1 %421, label %758, label %422

422:                                              ; preds = %420, %444
  %423 = phi i64 [ %445, %444 ], [ 0, %420 ]
  %424 = phi i64 [ %425, %444 ], [ %386, %420 ]
  %425 = add i64 %424, 1
  %426 = getelementptr inbounds i8, i8* %0, i64 %424
  %427 = load i8, i8* %426, align 1
  %428 = load i64, i64* %9, align 8
  %429 = load i64, i64* %75, align 8
  %430 = icmp eq i64 %428, %429
  br i1 %430, label %433, label %431

431:                                              ; preds = %422
  %432 = load i8*, i8** %74, align 8
  br label %439

433:                                              ; preds = %422
  %434 = add i64 %428, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %2, i64 %434) #8
  %435 = load i8*, i8** %74, align 8
  %436 = icmp eq i8* %435, null
  br i1 %436, label %444, label %437

437:                                              ; preds = %433
  %438 = load i64, i64* %9, align 8
  br label %439

439:                                              ; preds = %437, %431
  %440 = phi i8* [ %435, %437 ], [ %432, %431 ]
  %441 = phi i64 [ %438, %437 ], [ %428, %431 ]
  %442 = add i64 %441, 1
  store i64 %442, i64* %9, align 8
  %443 = getelementptr inbounds i8, i8* %440, i64 %441
  store i8 %427, i8* %443, align 1
  br label %444

444:                                              ; preds = %433, %439
  %445 = add nuw i64 %423, 1
  %446 = icmp eq i64 %445, %415
  br i1 %446, label %758, label %422

447:                                              ; preds = %384, %384
  %448 = icmp ult i64 %387, %65
  br i1 %448, label %449, label %772

449:                                              ; preds = %447
  %450 = icmp ult i64 %387, %1
  br i1 %450, label %451, label %469

451:                                              ; preds = %449, %463
  %452 = phi i64 [ %465, %463 ], [ %387, %449 ]
  %453 = phi i64 [ %461, %463 ], [ 0, %449 ]
  %454 = phi i64 [ %464, %463 ], [ 0, %449 ]
  %455 = getelementptr inbounds i8, i8* %0, i64 %452
  %456 = load i8, i8* %455, align 1
  %457 = and i8 %456, 127
  %458 = zext i8 %457 to i64
  %459 = mul nuw nsw i64 %454, 7
  %460 = shl i64 %458, %459
  %461 = or i64 %460, %453
  %462 = icmp sgt i8 %456, -1
  br i1 %462, label %469, label %463

463:                                              ; preds = %451
  %464 = add nuw nsw i64 %454, 1
  %465 = add i64 %464, %387
  %466 = icmp ult i64 %465, %1
  %467 = icmp ult i64 %464, 10
  %468 = and i1 %467, %466
  br i1 %468, label %451, label %469

469:                                              ; preds = %451, %463, %449
  %470 = phi i64 [ 0, %449 ], [ %464, %463 ], [ %454, %451 ]
  %471 = phi i64 [ 0, %449 ], [ %461, %463 ], [ %461, %451 ]
  %472 = add i64 %385, 2
  %473 = add i64 %472, %470
  %474 = call i32 @_ZN3jxl16CheckOutOfBoundsEmmm(i64 %386, i64 %471, i64 %1) #8
  %475 = icmp eq i32 %474, 0
  br i1 %475, label %476, label %772

476:                                              ; preds = %469
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %376) #8
  store i64 %471, i64* %377, align 8
  %477 = icmp eq i64 %471, 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %380, i8 0, i64 16, i1 false) #8
  br i1 %477, label %479, label %478

478:                                              ; preds = %476
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %7, i64 %471) #8
  br label %480

479:                                              ; preds = %487, %476
  switch i8 %389, label %499 [
    i8 2, label %496
    i8 3, label %495
  ]

480:                                              ; preds = %487, %478
  %481 = phi i64 [ %493, %487 ], [ 0, %478 ]
  %482 = load i64, i64* %377, align 8
  %483 = icmp ult i64 %482, %481
  br i1 %483, label %484, label %487

484:                                              ; preds = %480
  %485 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.37, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38, i64 0, i64 0)) #8
  %486 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

487:                                              ; preds = %480
  %488 = add i64 %481, %386
  %489 = getelementptr inbounds i8, i8* %0, i64 %488
  %490 = load i8, i8* %489, align 1
  %491 = load i8*, i8** %379, align 8
  %492 = getelementptr inbounds i8, i8* %491, i64 %481
  store i8 %490, i8* %492, align 1
  %493 = add nuw i64 %481, 1
  %494 = icmp eq i64 %493, %471
  br i1 %494, label %479, label %480

495:                                              ; preds = %479
  br label %496

496:                                              ; preds = %479, %495
  %497 = phi i64 [ 4, %495 ], [ 2, %479 ]
  %498 = load i8*, i8** %379, align 8
  call fastcc void @_ZN3jxl12_GLOBAL__N_17ShuffleEPhmm(i8* %498, i64 %471, i64 %497)
  br label %499

499:                                              ; preds = %496, %479
  br i1 %477, label %500, label %506

500:                                              ; preds = %534, %499
  %501 = phi i64 [ %386, %499 ], [ %535, %534 ]
  %502 = load i8*, i8** %379, align 8
  store i8* null, i8** %379, align 8
  %503 = icmp eq i8* %502, null
  br i1 %503, label %505, label %504

504:                                              ; preds = %500
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %502) #8
  br label %505

505:                                              ; preds = %504, %500
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %376) #8
  br label %758

506:                                              ; preds = %499, %534
  %507 = phi i64 [ %536, %534 ], [ 0, %499 ]
  %508 = phi i64 [ %535, %534 ], [ %386, %499 ]
  %509 = load i64, i64* %377, align 8
  %510 = icmp ult i64 %509, %507
  br i1 %510, label %511, label %514

511:                                              ; preds = %506
  %512 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.37, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38, i64 0, i64 0)) #8
  %513 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

514:                                              ; preds = %506
  %515 = load i8*, i8** %379, align 8
  %516 = getelementptr inbounds i8, i8* %515, i64 %507
  %517 = load i8, i8* %516, align 1
  %518 = load i64, i64* %9, align 8
  %519 = load i64, i64* %75, align 8
  %520 = icmp eq i64 %518, %519
  br i1 %520, label %523, label %521

521:                                              ; preds = %514
  %522 = load i8*, i8** %74, align 8
  br label %529

523:                                              ; preds = %514
  %524 = add i64 %518, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %2, i64 %524) #8
  %525 = load i8*, i8** %74, align 8
  %526 = icmp eq i8* %525, null
  br i1 %526, label %534, label %527

527:                                              ; preds = %523
  %528 = load i64, i64* %9, align 8
  br label %529

529:                                              ; preds = %527, %521
  %530 = phi i8* [ %525, %527 ], [ %522, %521 ]
  %531 = phi i64 [ %528, %527 ], [ %518, %521 ]
  %532 = add i64 %531, 1
  store i64 %532, i64* %9, align 8
  %533 = getelementptr inbounds i8, i8* %530, i64 %531
  store i8 %517, i8* %533, align 1
  br label %534

534:                                              ; preds = %523, %529
  %535 = add i64 %508, 1
  %536 = add nuw i64 %507, 1
  %537 = icmp eq i64 %536, %471
  br i1 %537, label %500, label %506

538:                                              ; preds = %384
  %539 = call i32 @_ZN3jxl16CheckOutOfBoundsEmmm(i64 %387, i64 2, i64 %65) #8
  %540 = icmp eq i32 %539, 0
  br i1 %540, label %541, label %772

541:                                              ; preds = %538
  %542 = add i64 %385, 2
  %543 = getelementptr inbounds i8, i8* %0, i64 %387
  %544 = load i8, i8* %543, align 1
  %545 = zext i8 %544 to i32
  %546 = and i32 %545, 3
  %547 = add nuw nsw i32 %546, 1
  %548 = zext i32 %547 to i64
  %549 = icmp eq i32 %547, 3
  br i1 %549, label %772, label %550

550:                                              ; preds = %541
  %551 = lshr i32 %545, 2
  %552 = and i32 %551, 3
  %553 = icmp eq i32 %552, 3
  br i1 %553, label %772, label %554

554:                                              ; preds = %550
  %555 = and i32 %545, 16
  %556 = icmp eq i32 %555, 0
  br i1 %556, label %584, label %557

557:                                              ; preds = %554
  %558 = icmp ult i64 %542, %65
  %559 = icmp ult i64 %542, %1
  %560 = and i1 %558, %559
  br i1 %560, label %561, label %772

561:                                              ; preds = %557, %573
  %562 = phi i64 [ %575, %573 ], [ %542, %557 ]
  %563 = phi i64 [ %571, %573 ], [ 0, %557 ]
  %564 = phi i64 [ %574, %573 ], [ 0, %557 ]
  %565 = getelementptr inbounds i8, i8* %0, i64 %562
  %566 = load i8, i8* %565, align 1
  %567 = and i8 %566, 127
  %568 = zext i8 %567 to i64
  %569 = mul nuw nsw i64 %564, 7
  %570 = shl i64 %568, %569
  %571 = or i64 %570, %563
  %572 = icmp sgt i8 %566, -1
  br i1 %572, label %579, label %573

573:                                              ; preds = %561
  %574 = add nuw nsw i64 %564, 1
  %575 = add i64 %574, %542
  %576 = icmp ult i64 %575, %1
  %577 = icmp ult i64 %574, 10
  %578 = and i1 %577, %576
  br i1 %578, label %561, label %579

579:                                              ; preds = %561, %573
  %580 = phi i64 [ %564, %561 ], [ %574, %573 ]
  %581 = add i64 %385, 3
  %582 = add i64 %581, %580
  %583 = icmp ult i64 %571, %548
  br i1 %583, label %772, label %584

584:                                              ; preds = %554, %579
  %585 = phi i64 [ %542, %554 ], [ %582, %579 ]
  %586 = phi i64 [ %548, %554 ], [ %571, %579 ]
  %587 = load i64, i64* %9, align 8
  %588 = icmp eq i64 %587, 0
  br i1 %588, label %772, label %589

589:                                              ; preds = %584
  %590 = add i64 %587, -1
  %591 = lshr i64 %590, 2
  %592 = icmp uge i64 %591, %586
  %593 = icmp ult i64 %585, %65
  %594 = and i1 %593, %592
  br i1 %594, label %595, label %772

595:                                              ; preds = %589
  %596 = icmp ult i64 %585, %1
  br i1 %596, label %597, label %615

597:                                              ; preds = %595, %609
  %598 = phi i64 [ %611, %609 ], [ %585, %595 ]
  %599 = phi i64 [ %607, %609 ], [ 0, %595 ]
  %600 = phi i64 [ %610, %609 ], [ 0, %595 ]
  %601 = getelementptr inbounds i8, i8* %0, i64 %598
  %602 = load i8, i8* %601, align 1
  %603 = and i8 %602, 127
  %604 = zext i8 %603 to i64
  %605 = mul nuw nsw i64 %600, 7
  %606 = shl i64 %604, %605
  %607 = or i64 %606, %599
  %608 = icmp sgt i8 %602, -1
  br i1 %608, label %615, label %609

609:                                              ; preds = %597
  %610 = add nuw nsw i64 %600, 1
  %611 = add nuw i64 %610, %585
  %612 = icmp ult i64 %611, %1
  %613 = icmp ult i64 %610, 10
  %614 = and i1 %613, %612
  br i1 %614, label %597, label %615

615:                                              ; preds = %597, %609, %595
  %616 = phi i64 [ 0, %595 ], [ %610, %609 ], [ %600, %597 ]
  %617 = phi i64 [ 0, %595 ], [ %607, %609 ], [ %607, %597 ]
  %618 = add i64 %585, 1
  %619 = add i64 %618, %616
  %620 = call i32 @_ZN3jxl16CheckOutOfBoundsEmmm(i64 %386, i64 %617, i64 %1) #8
  %621 = icmp eq i32 %620, 0
  br i1 %621, label %622, label %772

622:                                              ; preds = %615
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %371) #8
  store i64 %617, i64* %372, align 8
  %623 = icmp eq i64 %617, 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %375, i8 0, i64 16, i1 false) #8
  br i1 %623, label %625, label %624

624:                                              ; preds = %622
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %8, i64 %617) #8
  br label %627

625:                                              ; preds = %634, %622
  %626 = icmp eq i32 %546, 0
  br i1 %626, label %644, label %642

627:                                              ; preds = %634, %624
  %628 = phi i64 [ %640, %634 ], [ 0, %624 ]
  %629 = load i64, i64* %372, align 8
  %630 = icmp ult i64 %629, %628
  br i1 %630, label %631, label %634

631:                                              ; preds = %627
  %632 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.37, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38, i64 0, i64 0)) #8
  %633 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

634:                                              ; preds = %627
  %635 = add i64 %628, %386
  %636 = getelementptr inbounds i8, i8* %0, i64 %635
  %637 = load i8, i8* %636, align 1
  %638 = load i8*, i8** %374, align 8
  %639 = getelementptr inbounds i8, i8* %638, i64 %628
  store i8 %637, i8* %639, align 1
  %640 = add nuw i64 %628, 1
  %641 = icmp eq i64 %640, %617
  br i1 %641, label %625, label %627

642:                                              ; preds = %625
  %643 = load i8*, i8** %374, align 8
  call fastcc void @_ZN3jxl12_GLOBAL__N_17ShuffleEPhmm(i8* %643, i64 %617, i64 %548)
  br label %644

644:                                              ; preds = %625, %642
  %645 = load i64, i64* %9, align 8
  br i1 %623, label %646, label %651

646:                                              ; preds = %681, %644
  %647 = add i64 %617, %386
  %648 = load i8*, i8** %374, align 8
  store i8* null, i8** %374, align 8
  %649 = icmp eq i8* %648, null
  br i1 %649, label %684, label %650

650:                                              ; preds = %646
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %648) #8
  br label %684

651:                                              ; preds = %644, %681
  %652 = phi i64 [ %682, %681 ], [ 0, %644 ]
  %653 = load i8*, i8** %74, align 8
  %654 = call zeroext i8 @_ZN3jxl21LinearPredictICCValueEPKhmmmmi(i8* %653, i64 %645, i64 %652, i64 %586, i64 %548, i32 %552) #8
  %655 = load i64, i64* %372, align 8
  %656 = icmp ult i64 %655, %652
  br i1 %656, label %657, label %660

657:                                              ; preds = %651
  %658 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.37, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38, i64 0, i64 0)) #8
  %659 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

660:                                              ; preds = %651
  %661 = load i8*, i8** %374, align 8
  %662 = getelementptr inbounds i8, i8* %661, i64 %652
  %663 = load i8, i8* %662, align 1
  %664 = add i8 %663, %654
  %665 = load i64, i64* %9, align 8
  %666 = load i64, i64* %75, align 8
  %667 = icmp eq i64 %665, %666
  br i1 %667, label %670, label %668

668:                                              ; preds = %660
  %669 = load i8*, i8** %74, align 8
  br label %676

670:                                              ; preds = %660
  %671 = add i64 %665, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %2, i64 %671) #8
  %672 = load i8*, i8** %74, align 8
  %673 = icmp eq i8* %672, null
  br i1 %673, label %681, label %674

674:                                              ; preds = %670
  %675 = load i64, i64* %9, align 8
  br label %676

676:                                              ; preds = %674, %668
  %677 = phi i8* [ %672, %674 ], [ %669, %668 ]
  %678 = phi i64 [ %675, %674 ], [ %665, %668 ]
  %679 = add i64 %678, 1
  store i64 %679, i64* %9, align 8
  %680 = getelementptr inbounds i8, i8* %677, i64 %678
  store i8 %664, i8* %680, align 1
  br label %681

681:                                              ; preds = %670, %676
  %682 = add nuw i64 %652, 1
  %683 = icmp eq i64 %682, %617
  br i1 %683, label %646, label %651

684:                                              ; preds = %650, %646
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %371) #8
  br label %758

685:                                              ; preds = %384
  call void @_ZN3jxl13AppendKeywordERKNSt3__15arrayIhLm4EEEPNS_11PaddedBytesE(%"struct.std::__1::array"* nonnull dereferenceable(4) @_ZN3jxlL8kXyz_TagE, %"class.jxl::PaddedBytes"* %2) #8
  %686 = load i64, i64* %9, align 8
  %687 = load i64, i64* %75, align 8
  %688 = icmp eq i64 %686, %687
  br i1 %688, label %691, label %689

689:                                              ; preds = %685
  %690 = load i8*, i8** %74, align 8
  br label %697

691:                                              ; preds = %685
  %692 = add i64 %686, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %2, i64 %692) #8
  %693 = load i8*, i8** %74, align 8
  %694 = icmp eq i8* %693, null
  br i1 %694, label %702, label %695

695:                                              ; preds = %691
  %696 = load i64, i64* %9, align 8
  br label %697

697:                                              ; preds = %695, %689
  %698 = phi i8* [ %693, %695 ], [ %690, %689 ]
  %699 = phi i64 [ %696, %695 ], [ %686, %689 ]
  %700 = add i64 %699, 1
  store i64 %700, i64* %9, align 8
  %701 = getelementptr inbounds i8, i8* %698, i64 %699
  store i8 0, i8* %701, align 1
  br label %702

702:                                              ; preds = %691, %697
  %703 = load i64, i64* %9, align 8
  %704 = load i64, i64* %75, align 8
  %705 = icmp eq i64 %703, %704
  br i1 %705, label %782, label %780

706:                                              ; preds = %827, %728
  %707 = phi i64 [ %729, %728 ], [ 0, %827 ]
  %708 = phi i64 [ %709, %728 ], [ %386, %827 ]
  %709 = add i64 %708, 1
  %710 = getelementptr inbounds i8, i8* %0, i64 %708
  %711 = load i8, i8* %710, align 1
  %712 = load i64, i64* %9, align 8
  %713 = load i64, i64* %75, align 8
  %714 = icmp eq i64 %712, %713
  br i1 %714, label %717, label %715

715:                                              ; preds = %706
  %716 = load i8*, i8** %74, align 8
  br label %723

717:                                              ; preds = %706
  %718 = add i64 %712, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %2, i64 %718) #8
  %719 = load i8*, i8** %74, align 8
  %720 = icmp eq i8* %719, null
  br i1 %720, label %728, label %721

721:                                              ; preds = %717
  %722 = load i64, i64* %9, align 8
  br label %723

723:                                              ; preds = %721, %715
  %724 = phi i8* [ %719, %721 ], [ %716, %715 ]
  %725 = phi i64 [ %722, %721 ], [ %712, %715 ]
  %726 = add i64 %725, 1
  store i64 %726, i64* %9, align 8
  %727 = getelementptr inbounds i8, i8* %724, i64 %725
  store i8 %711, i8* %727, align 1
  br label %728

728:                                              ; preds = %717, %723
  %729 = add nuw nsw i64 %707, 1
  %730 = icmp eq i64 %729, 12
  br i1 %730, label %758, label %706

731:                                              ; preds = %384
  %732 = and i8 %389, -8
  %733 = icmp eq i8 %732, 16
  br i1 %733, label %734, label %772

734:                                              ; preds = %731
  %735 = add nsw i64 %390, -16
  %736 = getelementptr inbounds [8 x %"struct.std::__1::array"*], [8 x %"struct.std::__1::array"*]* @_ZN3jxlL12kTypeStringsE, i64 0, i64 %735
  %737 = load %"struct.std::__1::array"*, %"struct.std::__1::array"** %736, align 8
  call void @_ZN3jxl13AppendKeywordERKNSt3__15arrayIhLm4EEEPNS_11PaddedBytesE(%"struct.std::__1::array"* dereferenceable(4) %737, %"class.jxl::PaddedBytes"* %2) #8
  %738 = load i64, i64* %9, align 8
  %739 = load i64, i64* %75, align 8
  %740 = icmp eq i64 %738, %739
  br i1 %740, label %743, label %741

741:                                              ; preds = %734
  %742 = load i8*, i8** %74, align 8
  br label %749

743:                                              ; preds = %734
  %744 = add i64 %738, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %2, i64 %744) #8
  %745 = load i8*, i8** %74, align 8
  %746 = icmp eq i8* %745, null
  br i1 %746, label %754, label %747

747:                                              ; preds = %743
  %748 = load i64, i64* %9, align 8
  br label %749

749:                                              ; preds = %747, %741
  %750 = phi i8* [ %745, %747 ], [ %742, %741 ]
  %751 = phi i64 [ %748, %747 ], [ %738, %741 ]
  %752 = add i64 %751, 1
  store i64 %752, i64* %9, align 8
  %753 = getelementptr inbounds i8, i8* %750, i64 %751
  store i8 0, i8* %753, align 1
  br label %754

754:                                              ; preds = %743, %749
  %755 = load i64, i64* %9, align 8
  %756 = load i64, i64* %75, align 8
  %757 = icmp eq i64 %755, %756
  br i1 %757, label %832, label %830

758:                                              ; preds = %728, %444, %866, %872, %420, %505, %684
  %759 = phi i64 [ %619, %684 ], [ %473, %505 ], [ %417, %420 ], [ %387, %872 ], [ %387, %866 ], [ %417, %444 ], [ %387, %728 ]
  %760 = phi i64 [ %647, %684 ], [ %501, %505 ], [ %386, %420 ], [ %386, %872 ], [ %386, %866 ], [ %425, %444 ], [ %709, %728 ]
  %761 = load i64, i64* %9, align 8
  %762 = icmp ugt i64 %761, %23
  %763 = icmp ugt i64 %759, %65
  %764 = or i1 %763, %762
  br i1 %764, label %772, label %382

765:                                              ; preds = %382, %370
  %766 = phi i64 [ %364, %370 ], [ %761, %382 ]
  %767 = phi i64 [ %366, %370 ], [ %760, %382 ]
  %768 = icmp ne i64 %767, %1
  %769 = icmp ne i64 %766, %23
  %770 = or i1 %768, %769
  %771 = zext i1 %770 to i32
  br label %772

772:                                              ; preds = %87, %358, %758, %391, %413, %447, %469, %538, %827, %731, %541, %550, %557, %579, %584, %615, %589, %158, %363, %765, %76, %354, %154, %125
  %773 = phi i32 [ 1, %125 ], [ %156, %154 ], [ %355, %354 ], [ %81, %76 ], [ %771, %765 ], [ 1, %363 ], [ 1, %158 ], [ 1, %758 ], [ 1, %391 ], [ %418, %413 ], [ 1, %447 ], [ %474, %469 ], [ %539, %538 ], [ %828, %827 ], [ 1, %731 ], [ 1, %541 ], [ 1, %550 ], [ 1, %557 ], [ 1, %579 ], [ 1, %584 ], [ %620, %615 ], [ 1, %589 ], [ 1, %358 ], [ 1, %87 ]
  %774 = load i8*, i8** %68, align 8
  store i8* null, i8** %68, align 8
  %775 = icmp eq i8* %774, null
  br i1 %775, label %777, label %776

776:                                              ; preds = %772
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %774) #8
  br label %777

777:                                              ; preds = %772, %776
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %66) #8
  br label %778

778:                                              ; preds = %3, %30, %35, %55, %61, %777
  %779 = phi i32 [ 1, %3 ], [ %33, %30 ], [ 1, %35 ], [ %59, %55 ], [ %773, %777 ], [ %62, %61 ]
  ret i32 %779

780:                                              ; preds = %702
  %781 = load i8*, i8** %74, align 8
  br label %788

782:                                              ; preds = %702
  %783 = add i64 %703, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %2, i64 %783) #8
  %784 = load i8*, i8** %74, align 8
  %785 = icmp eq i8* %784, null
  br i1 %785, label %793, label %786

786:                                              ; preds = %782
  %787 = load i64, i64* %9, align 8
  br label %788

788:                                              ; preds = %786, %780
  %789 = phi i8* [ %784, %786 ], [ %781, %780 ]
  %790 = phi i64 [ %787, %786 ], [ %703, %780 ]
  %791 = add i64 %790, 1
  store i64 %791, i64* %9, align 8
  %792 = getelementptr inbounds i8, i8* %789, i64 %790
  store i8 0, i8* %792, align 1
  br label %793

793:                                              ; preds = %788, %782
  %794 = load i64, i64* %9, align 8
  %795 = load i64, i64* %75, align 8
  %796 = icmp eq i64 %794, %795
  br i1 %796, label %799, label %797

797:                                              ; preds = %793
  %798 = load i8*, i8** %74, align 8
  br label %805

799:                                              ; preds = %793
  %800 = add i64 %794, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %2, i64 %800) #8
  %801 = load i8*, i8** %74, align 8
  %802 = icmp eq i8* %801, null
  br i1 %802, label %810, label %803

803:                                              ; preds = %799
  %804 = load i64, i64* %9, align 8
  br label %805

805:                                              ; preds = %803, %797
  %806 = phi i8* [ %801, %803 ], [ %798, %797 ]
  %807 = phi i64 [ %804, %803 ], [ %794, %797 ]
  %808 = add i64 %807, 1
  store i64 %808, i64* %9, align 8
  %809 = getelementptr inbounds i8, i8* %806, i64 %807
  store i8 0, i8* %809, align 1
  br label %810

810:                                              ; preds = %805, %799
  %811 = load i64, i64* %9, align 8
  %812 = load i64, i64* %75, align 8
  %813 = icmp eq i64 %811, %812
  br i1 %813, label %816, label %814

814:                                              ; preds = %810
  %815 = load i8*, i8** %74, align 8
  br label %822

816:                                              ; preds = %810
  %817 = add i64 %811, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %2, i64 %817) #8
  %818 = load i8*, i8** %74, align 8
  %819 = icmp eq i8* %818, null
  br i1 %819, label %827, label %820

820:                                              ; preds = %816
  %821 = load i64, i64* %9, align 8
  br label %822

822:                                              ; preds = %820, %814
  %823 = phi i8* [ %818, %820 ], [ %815, %814 ]
  %824 = phi i64 [ %821, %820 ], [ %811, %814 ]
  %825 = add i64 %824, 1
  store i64 %825, i64* %9, align 8
  %826 = getelementptr inbounds i8, i8* %823, i64 %824
  store i8 0, i8* %826, align 1
  br label %827

827:                                              ; preds = %822, %816
  %828 = call i32 @_ZN3jxl16CheckOutOfBoundsEmmm(i64 %386, i64 12, i64 %1) #8
  %829 = icmp eq i32 %828, 0
  br i1 %829, label %706, label %772

830:                                              ; preds = %754
  %831 = load i8*, i8** %74, align 8
  br label %838

832:                                              ; preds = %754
  %833 = add i64 %755, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %2, i64 %833) #8
  %834 = load i8*, i8** %74, align 8
  %835 = icmp eq i8* %834, null
  br i1 %835, label %843, label %836

836:                                              ; preds = %832
  %837 = load i64, i64* %9, align 8
  br label %838

838:                                              ; preds = %836, %830
  %839 = phi i8* [ %834, %836 ], [ %831, %830 ]
  %840 = phi i64 [ %837, %836 ], [ %755, %830 ]
  %841 = add i64 %840, 1
  store i64 %841, i64* %9, align 8
  %842 = getelementptr inbounds i8, i8* %839, i64 %840
  store i8 0, i8* %842, align 1
  br label %843

843:                                              ; preds = %838, %832
  %844 = load i64, i64* %9, align 8
  %845 = load i64, i64* %75, align 8
  %846 = icmp eq i64 %844, %845
  br i1 %846, label %849, label %847

847:                                              ; preds = %843
  %848 = load i8*, i8** %74, align 8
  br label %855

849:                                              ; preds = %843
  %850 = add i64 %844, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %2, i64 %850) #8
  %851 = load i8*, i8** %74, align 8
  %852 = icmp eq i8* %851, null
  br i1 %852, label %860, label %853

853:                                              ; preds = %849
  %854 = load i64, i64* %9, align 8
  br label %855

855:                                              ; preds = %853, %847
  %856 = phi i8* [ %851, %853 ], [ %848, %847 ]
  %857 = phi i64 [ %854, %853 ], [ %844, %847 ]
  %858 = add i64 %857, 1
  store i64 %858, i64* %9, align 8
  %859 = getelementptr inbounds i8, i8* %856, i64 %857
  store i8 0, i8* %859, align 1
  br label %860

860:                                              ; preds = %855, %849
  %861 = load i64, i64* %9, align 8
  %862 = load i64, i64* %75, align 8
  %863 = icmp eq i64 %861, %862
  br i1 %863, label %866, label %864

864:                                              ; preds = %860
  %865 = load i8*, i8** %74, align 8
  br label %872

866:                                              ; preds = %860
  %867 = add i64 %861, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %2, i64 %867) #8
  %868 = load i8*, i8** %74, align 8
  %869 = icmp eq i8* %868, null
  br i1 %869, label %758, label %870

870:                                              ; preds = %866
  %871 = load i64, i64* %9, align 8
  br label %872

872:                                              ; preds = %870, %864
  %873 = phi i8* [ %868, %870 ], [ %865, %864 ]
  %874 = phi i64 [ %871, %870 ], [ %861, %864 ]
  %875 = add i64 %874, 1
  store i64 %875, i64* %9, align 8
  %876 = getelementptr inbounds i8, i8* %873, i64 %874
  store i8 0, i8* %876, align 1
  br label %758
}

declare void @_ZN3jxl26ICCInitialHeaderPredictionEv(%"class.jxl::PaddedBytes"* sret) local_unnamed_addr #2

declare void @_ZN3jxl12EncodeUint32EmjPNS_11PaddedBytesE(i64, i32, %"class.jxl::PaddedBytes"*) local_unnamed_addr #2

declare void @_ZN3jxl16ICCPredictHeaderEPKhmPhm(i8*, i64, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) i8* @_ZN3jxl11PaddedBytesixEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ult i64 %4, %1
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.37, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38, i64 0, i64 0)) #8
  %8 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  ret i8* %12
}

declare void @_ZN3jxl12AppendUint32EjPNS_11PaddedBytesE(i32, %"class.jxl::PaddedBytes"*) local_unnamed_addr #2

declare i32 @_ZN3jxl13DecodeKeywordEPKhmm(i8*, i64, i64) local_unnamed_addr #2

declare void @_ZN3jxl13AppendKeywordERKNSt3__15arrayIhLm4EEEPNS_11PaddedBytesE(%"struct.std::__1::array"* dereferenceable(4), %"class.jxl::PaddedBytes"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11PaddedBytesC2Em(%"class.jxl::PaddedBytes"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  %4 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 1
  %5 = icmp eq i64 %1, 0
  %6 = bitcast i64* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false)
  br i1 %5, label %8, label %7

7:                                                ; preds = %2
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %0, i64 %1) #8
  br label %8

8:                                                ; preds = %2, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_17ShuffleEPhmm(i8* nocapture, i64, i64) unnamed_addr #0 {
  %4 = alloca %"class.jxl::PaddedBytes", align 8
  %5 = add i64 %1, -1
  %6 = add i64 %5, %2
  %7 = udiv i64 %6, %2
  %8 = bitcast %"class.jxl::PaddedBytes"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #8
  %9 = bitcast %"class.jxl::PaddedBytes"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  call void @_ZN3jxl11PaddedBytesC2Em(%"class.jxl::PaddedBytes"* nonnull %4, i64 %1)
  %10 = icmp eq i64 %1, 0
  br i1 %10, label %26, label %12

11:                                               ; preds = %12
  br i1 %10, label %26, label %27

12:                                               ; preds = %3, %12
  %13 = phi i64 [ %24, %12 ], [ 0, %3 ]
  %14 = phi i64 [ %23, %12 ], [ 0, %3 ]
  %15 = phi i64 [ %22, %12 ], [ 0, %3 ]
  %16 = getelementptr inbounds i8, i8* %0, i64 %14
  %17 = load i8, i8* %16, align 1
  %18 = call dereferenceable(1) i8* @_ZN3jxl11PaddedBytesixEm(%"class.jxl::PaddedBytes"* nonnull %4, i64 %13)
  store i8 %17, i8* %18, align 1
  %19 = add i64 %14, %7
  %20 = icmp ult i64 %19, %1
  %21 = add i64 %15, 1
  %22 = select i1 %20, i64 %15, i64 %21
  %23 = select i1 %20, i64 %19, i64 %21
  %24 = add nuw i64 %13, 1
  %25 = icmp eq i64 %24, %1
  br i1 %25, label %11, label %12

26:                                               ; preds = %27, %3, %11
  call void @_ZN3jxl11PaddedBytesD2Ev(%"class.jxl::PaddedBytes"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #8
  ret void

27:                                               ; preds = %11, %27
  %28 = phi i64 [ %32, %27 ], [ 0, %11 ]
  %29 = call dereferenceable(1) i8* @_ZN3jxl11PaddedBytesixEm(%"class.jxl::PaddedBytes"* nonnull %4, i64 %28)
  %30 = load i8, i8* %29, align 1
  %31 = getelementptr inbounds i8, i8* %0, i64 %28
  store i8 %30, i8* %31, align 1
  %32 = add nuw i64 %28, 1
  %33 = icmp eq i64 %32, %1
  br i1 %33, label %26, label %27
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11PaddedBytesD2Ev(%"class.jxl::PaddedBytes"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  store i8* null, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %3) #8
  br label %6

6:                                                ; preds = %1, %5
  ret void
}

declare zeroext i8 @_ZN3jxl21LinearPredictICCValueEPKhmmmmi(i8*, i64, i64, i64, i64, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl9ICCReader4InitEPNS_9BitReaderEm(%"struct.jxl::ICCReader"*, %"class.jxl::BitReader"*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.jxl::ANSSymbolReader", align 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 2
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 4
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %7, %10
  %12 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 5
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %11, %13
  %15 = shl i64 %14, 3
  %16 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %15, %17
  %19 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 7
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 3
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 8
  %23 = ptrtoint i8* %22 to i64
  %24 = sub i64 %23, %10
  %25 = shl i64 %24, 3
  %26 = icmp ugt i64 %18, %25
  br i1 %26, label %251, label %27

27:                                               ; preds = %3
  %28 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 2
  store i64 %18, i64* %28, align 8
  %29 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %221

32:                                               ; preds = %27
  %33 = tail call i64 @_ZN3jxl8U64Coder4ReadEPNS_9BitReaderE(%"class.jxl::BitReader"* %1) #8
  %34 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 3
  store i64 %33, i64* %34, align 8
  %35 = icmp ugt i64 %33, 268435456
  br i1 %35, label %251, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 5
  %38 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 4
  %39 = tail call i32 @_ZN3jxl16DecodeHistogramsEPNS_9BitReaderEmPNS_7ANSCodeEPNSt3__16vectorIhNS4_9allocatorIhEEEEb(%"class.jxl::BitReader"* %1, i64 41, %"struct.jxl::ANSCode"* %37, %"class.std::__1::vector"* %38, i1 zeroext false) #8
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %251

41:                                               ; preds = %36
  %42 = bitcast %"class.jxl::ANSSymbolReader"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 592, i8* nonnull %42) #8
  call void @_ZN3jxl15ANSSymbolReaderC2EPKNS_7ANSCodeEPNS_9BitReaderEm(%"class.jxl::ANSSymbolReader"* nonnull %4, %"struct.jxl::ANSCode"* %37, %"class.jxl::BitReader"* %1, i64 0)
  %43 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 6
  %44 = bitcast %"class.jxl::ANSSymbolReader"* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* nonnull align 8 %42, i64 44, i1 false) #8
  %45 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 6, i32 10
  %46 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %4, i64 0, i32 10
  %47 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %46, i64 0, i32 0, i32 0, i32 0
  %48 = bitcast %"class.std::__1::unique_ptr"* %46 to i64*
  %49 = load i64, i64* %48, align 8
  store i8* null, i8** %47, align 8
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %45, i64 0, i32 0, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = bitcast %"class.std::__1::unique_ptr"* %45 to i64*
  store i64 %49, i64* %52, align 8
  %53 = icmp eq i8* %51, null
  br i1 %53, label %57, label %54

54:                                               ; preds = %41
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %51) #8
  %55 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %4, i64 0, i32 10, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  br label %57

57:                                               ; preds = %41, %54
  %58 = phi i8* [ null, %41 ], [ %56, %54 ]
  %59 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 6, i32 11
  %60 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %4, i64 0, i32 11
  %61 = bitcast i32** %59 to i8*
  %62 = bitcast i32** %60 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 532, i1 false) #8
  %63 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %4, i64 0, i32 10, i32 0, i32 0, i32 0
  store i8* null, i8** %63, align 8
  %64 = icmp eq i8* %58, null
  br i1 %64, label %66, label %65

65:                                               ; preds = %57
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %58) #8
  br label %66

66:                                               ; preds = %57, %65
  call void @llvm.lifetime.end.p0i8(i64 592, i8* nonnull %42) #8
  %67 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 0
  store i64 0, i64* %67, align 8
  %68 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 7
  %69 = load i64, i64* %34, align 8
  %70 = icmp ult i64 %69, 1024
  %71 = select i1 %70, i64 %69, i64 1024
  %72 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 7, i32 1
  %73 = load i64, i64* %72, align 8
  %74 = icmp ult i64 %73, %71
  br i1 %74, label %75, label %78

75:                                               ; preds = %66
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %68, i64 %71) #8
  %76 = load i64, i64* %67, align 8
  %77 = load i64, i64* %34, align 8
  br label %78

78:                                               ; preds = %66, %75
  %79 = phi i64 [ %69, %66 ], [ %77, %75 ]
  %80 = phi i64 [ 0, %66 ], [ %76, %75 ]
  %81 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 7, i32 2, i32 0, i32 0, i32 0
  %82 = load i8*, i8** %81, align 8
  %83 = icmp eq i8* %82, null
  %84 = select i1 %83, i64 0, i64 %71
  %85 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %68, i64 0, i32 0
  store i64 %84, i64* %85, align 8
  %86 = icmp ult i64 %79, 2
  %87 = select i1 %86, i64 %79, i64 2
  %88 = icmp ult i64 %80, %87
  br i1 %88, label %89, label %142

89:                                               ; preds = %78
  %90 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %38, i64 0, i32 0, i32 0
  br label %91

91:                                               ; preds = %89, %132
  %92 = phi i64 [ %80, %89 ], [ %137, %132 ]
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %117, label %94

94:                                               ; preds = %91
  %95 = add i64 %92, -1
  %96 = load i64, i64* %85, align 8
  %97 = icmp ult i64 %96, %95
  br i1 %97, label %98, label %101

98:                                               ; preds = %94
  %99 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.37, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38, i64 0, i64 0)) #8
  %100 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

101:                                              ; preds = %94
  %102 = load i8*, i8** %81, align 8
  %103 = getelementptr inbounds i8, i8* %102, i64 %95
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i64
  %106 = icmp ugt i64 %92, 1
  br i1 %106, label %107, label %117

107:                                              ; preds = %101
  %108 = add i64 %92, -2
  %109 = icmp ult i64 %96, %108
  br i1 %109, label %110, label %113

110:                                              ; preds = %107
  %111 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.37, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38, i64 0, i64 0)) #8
  %112 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

113:                                              ; preds = %107
  %114 = getelementptr inbounds i8, i8* %102, i64 %108
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i64
  br label %117

117:                                              ; preds = %91, %101, %113
  %118 = phi i64 [ %105, %113 ], [ %105, %101 ], [ 0, %91 ]
  %119 = phi i64 [ %116, %113 ], [ 0, %101 ], [ 0, %91 ]
  %120 = call i64 @_ZN3jxl13ICCANSContextEmmm(i64 %92, i64 %118, i64 %119) #8
  %121 = load i8*, i8** %90, align 8, !noalias !2
  %122 = getelementptr inbounds i8, i8* %121, i64 %120
  %123 = load i8, i8* %122, align 1, !noalias !2
  %124 = zext i8 %123 to i64
  %125 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* %43, i64 %124, %"class.jxl::BitReader"* %1) #8
  %126 = load i64, i64* %67, align 8
  %127 = load i64, i64* %85, align 8
  %128 = icmp ult i64 %127, %126
  br i1 %128, label %129, label %132

129:                                              ; preds = %117
  %130 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.37, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38, i64 0, i64 0)) #8
  %131 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

132:                                              ; preds = %117
  %133 = trunc i64 %125 to i8
  %134 = load i8*, i8** %81, align 8
  %135 = getelementptr inbounds i8, i8* %134, i64 %126
  store i8 %133, i8* %135, align 1
  %136 = load i64, i64* %67, align 8
  %137 = add i64 %136, 1
  store i64 %137, i64* %67, align 8
  %138 = load i64, i64* %34, align 8
  %139 = icmp ult i64 %138, 2
  %140 = select i1 %139, i64 %138, i64 2
  %141 = icmp ult i64 %137, %140
  br i1 %141, label %91, label %142

142:                                              ; preds = %132, %78
  %143 = phi i64 [ %80, %78 ], [ %137, %132 ]
  %144 = phi i64 [ %79, %78 ], [ %138, %132 ]
  %145 = icmp ugt i64 %144, 22
  br i1 %145, label %146, label %210

146:                                              ; preds = %142
  %147 = icmp ult i64 %143, 22
  br i1 %147, label %148, label %191

148:                                              ; preds = %146
  %149 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %38, i64 0, i32 0, i32 0
  br label %150

150:                                              ; preds = %148, %184
  %151 = phi i64 [ %143, %148 ], [ %189, %184 ]
  %152 = add nsw i64 %151, -1
  %153 = load i64, i64* %85, align 8
  %154 = icmp ult i64 %153, %152
  br i1 %154, label %155, label %158

155:                                              ; preds = %150
  %156 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.37, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38, i64 0, i64 0)) #8
  %157 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

158:                                              ; preds = %150
  %159 = load i8*, i8** %81, align 8
  %160 = add nsw i64 %151, -2
  %161 = icmp ult i64 %153, %160
  br i1 %161, label %162, label %165

162:                                              ; preds = %158
  %163 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.37, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38, i64 0, i64 0)) #8
  %164 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

165:                                              ; preds = %158
  %166 = getelementptr inbounds i8, i8* %159, i64 %152
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i64
  %169 = getelementptr inbounds i8, i8* %159, i64 %160
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i64
  %172 = call i64 @_ZN3jxl13ICCANSContextEmmm(i64 %151, i64 %168, i64 %171) #8
  %173 = load i8*, i8** %149, align 8, !noalias !5
  %174 = getelementptr inbounds i8, i8* %173, i64 %172
  %175 = load i8, i8* %174, align 1, !noalias !5
  %176 = zext i8 %175 to i64
  %177 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* %43, i64 %176, %"class.jxl::BitReader"* %1) #8
  %178 = load i64, i64* %67, align 8
  %179 = load i64, i64* %85, align 8
  %180 = icmp ult i64 %179, %178
  br i1 %180, label %181, label %184

181:                                              ; preds = %165
  %182 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.37, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38, i64 0, i64 0)) #8
  %183 = call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

184:                                              ; preds = %165
  %185 = trunc i64 %177 to i8
  %186 = load i8*, i8** %81, align 8
  %187 = getelementptr inbounds i8, i8* %186, i64 %178
  store i8 %185, i8* %187, align 1
  %188 = load i64, i64* %67, align 8
  %189 = add i64 %188, 1
  store i64 %189, i64* %67, align 8
  %190 = icmp ult i64 %189, 22
  br i1 %190, label %150, label %191

191:                                              ; preds = %184, %146
  %192 = load i64, i64* %6, align 8
  %193 = load i64, i64* %9, align 8
  %194 = sub i64 %192, %193
  %195 = load i64, i64* %12, align 8
  %196 = add i64 %194, %195
  %197 = shl i64 %196, 3
  %198 = load i64, i64* %16, align 8
  %199 = sub i64 %197, %198
  store i64 %199, i64* %19, align 8
  %200 = load i8*, i8** %20, align 8
  %201 = getelementptr inbounds i8, i8* %200, i64 8
  %202 = ptrtoint i8* %201 to i64
  %203 = sub i64 %202, %193
  %204 = shl i64 %203, 3
  %205 = icmp ugt i64 %199, %204
  br i1 %205, label %251, label %206

206:                                              ; preds = %191
  %207 = load i64, i64* %34, align 8
  %208 = call i32 @_ZN3jxl13CheckPreambleERKNS_11PaddedBytesEmm(%"class.jxl::PaddedBytes"* dereferenceable(24) %68, i64 %207, i64 %2)
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %210, label %251

210:                                              ; preds = %206, %142
  %211 = load i64, i64* %6, align 8
  %212 = load i64, i64* %9, align 8
  %213 = sub i64 %211, %212
  %214 = load i64, i64* %12, align 8
  %215 = add i64 %213, %214
  %216 = shl i64 %215, 3
  %217 = load i64, i64* %16, align 8
  %218 = sub i64 %216, %217
  %219 = load i64, i64* %28, align 8
  %220 = sub i64 %218, %219
  store i64 %220, i64* %29, align 8
  br label %251

221:                                              ; preds = %27
  %222 = load i64, i64* %16, align 8
  %223 = icmp ult i64 %222, %30
  br i1 %223, label %229, label %224, !prof !8

224:                                              ; preds = %221
  %225 = sub i64 %222, %30
  store i64 %225, i64* %16, align 8
  %226 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %227 = load i64, i64* %226, align 8
  %228 = lshr i64 %227, %30
  store i64 %228, i64* %226, align 8
  br label %251

229:                                              ; preds = %221
  %230 = sub i64 %30, %222
  %231 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %232 = lshr i64 %230, 3
  %233 = bitcast %"class.jxl::BitReader"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %233, i8 0, i64 16, i1 false) #8
  %234 = load i8*, i8** %5, align 8
  %235 = getelementptr inbounds i8, i8* %234, i64 %232
  store i8* %235, i8** %5, align 8
  %236 = and i64 %230, 7
  %237 = load i8*, i8** %20, align 8
  %238 = icmp ugt i8* %235, %237
  br i1 %238, label %239, label %242, !prof !9

239:                                              ; preds = %229
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %1) #8
  %240 = load i64, i64* %16, align 8
  %241 = load i64, i64* %231, align 8
  br label %246

242:                                              ; preds = %229
  %243 = bitcast i8* %235 to i64*
  %244 = load i64, i64* %243, align 1
  store i64 %244, i64* %231, align 8
  %245 = getelementptr inbounds i8, i8* %235, i64 7
  store i8* %245, i8** %5, align 8
  store i64 56, i64* %16, align 8
  br label %246

246:                                              ; preds = %242, %239
  %247 = phi i64 [ %241, %239 ], [ %244, %242 ]
  %248 = phi i64 [ %240, %239 ], [ 56, %242 ]
  %249 = sub i64 %248, %236
  store i64 %249, i64* %16, align 8
  %250 = lshr i64 %247, %236
  store i64 %250, i64* %231, align 8
  br label %251

251:                                              ; preds = %191, %3, %210, %224, %246, %206, %36, %32
  %252 = phi i32 [ -1, %3 ], [ 1, %32 ], [ %39, %36 ], [ -1, %191 ], [ %208, %206 ], [ 0, %246 ], [ 0, %224 ], [ 0, %210 ]
  ret i32 %252
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl9ICCReader8CheckEOIEPNS_9BitReaderE(%"struct.jxl::ICCReader"* nocapture readnone, %"class.jxl::BitReader"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 2
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 4
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 5
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %9, %11
  %13 = shl i64 %12, 3
  %14 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %13, %15
  %17 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 7
  store i64 %16, i64* %17, align 8
  %18 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 3
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 8
  %21 = ptrtoint i8* %20 to i64
  %22 = sub i64 %21, %8
  %23 = shl i64 %22, 3
  %24 = icmp ugt i64 %16, %23
  %25 = sext i1 %24 to i32
  ret i32 %25
}

declare i64 @_ZN3jxl8U64Coder4ReadEPNS_9BitReaderE(%"class.jxl::BitReader"*) local_unnamed_addr #2

declare i32 @_ZN3jxl16DecodeHistogramsEPNS_9BitReaderEmPNS_7ANSCodeEPNSt3__16vectorIhNS4_9allocatorIhEEEEb(%"class.jxl::BitReader"*, i64, %"struct.jxl::ANSCode"*, %"class.std::__1::vector"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl15ANSSymbolReaderC2EPKNS_7ANSCodeEPNS_9BitReaderEm(%"class.jxl::ANSSymbolReader"*, %"struct.jxl::ANSCode"*, %"class.jxl::BitReader"* noalias, i64) unnamed_addr #0 comdat align 2 {
  %5 = bitcast %"struct.jxl::ANSCode"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.jxl::ANSSymbolReader"* %0 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast %"struct.jxl::HuffmanDecodingData"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"struct.jxl::HuffmanDecodingData"** %8 to i64*
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 2
  %14 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 4
  %15 = load i8, i8* %14, align 8, !range !10
  store i8 %15, i8* %13, align 8
  %16 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 4
  store i32 1245184, i32* %16, align 4
  %17 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 5
  %18 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 2, i32 0, i32 0
  %19 = bitcast %"struct.jxl::HybridUintConfig"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"struct.jxl::HybridUintConfig"** %17 to i64*
  store i64 %20, i64* %21, align 8
  %22 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 10
  %23 = bitcast %"class.std::__1::unique_ptr"* %22 to i64*
  %24 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 11
  %25 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 15
  %26 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 16
  %27 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 17
  %28 = bitcast %"class.std::__1::unique_ptr"* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 36, i1 false)
  %29 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18
  %30 = bitcast i32* %27 to <4 x i32>*
  store <4 x i32> <i32 1048576, i32 4, i32 16, i32 2>, <4 x i32>* %30, align 4
  %31 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 3
  store i32 0, i32* %31, align 4
  %32 = icmp eq i8 %15, 0
  br i1 %32, label %33, label %76

33:                                               ; preds = %4
  %34 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %37 = load i8*, i8** %36, align 8
  %38 = icmp ugt i8* %35, %37
  br i1 %38, label %39, label %44, !prof !9

39:                                               ; preds = %33
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #8
  %40 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %43 = load i64, i64* %42, align 8
  br label %57

44:                                               ; preds = %33
  %45 = bitcast i8* %35 to i64*
  %46 = load i64, i64* %45, align 1
  %47 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = shl i64 %46, %48
  %50 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %51 = load i64, i64* %50, align 8
  %52 = or i64 %51, %49
  store i64 %52, i64* %50, align 8
  %53 = sub i64 63, %48
  %54 = lshr i64 %53, 3
  %55 = getelementptr inbounds i8, i8* %35, i64 %54
  store i8* %55, i8** %34, align 8
  %56 = or i64 %48, 56
  store i64 %56, i64* %47, align 8
  br label %57

57:                                               ; preds = %39, %44
  %58 = phi i64 [ %43, %39 ], [ %56, %44 ]
  %59 = phi i64 [ %41, %39 ], [ %52, %44 ]
  %60 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %61 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %62 = add i64 %58, -32
  store i64 %62, i64* %61, align 8
  %63 = lshr i64 %59, 32
  store i64 %63, i64* %60, align 8
  %64 = trunc i64 %59 to i32
  store i32 %64, i32* %16, align 4
  %65 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 6
  store i32 %67, i32* %68, align 8
  %69 = load i8, i8* %65, align 1
  %70 = zext i8 %69 to i32
  %71 = sub nsw i32 12, %70
  %72 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 7
  store i32 %71, i32* %72, align 4
  %73 = shl nsw i32 -1, %71
  %74 = xor i32 %73, -1
  %75 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 8
  store i32 %74, i32* %75, align 8
  br label %77

76:                                               ; preds = %4
  store i32 1245184, i32* %16, align 4
  br label %77

77:                                               ; preds = %76, %57
  %78 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 1
  %79 = load i8, i8* %78, align 8, !range !10
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %125, label %81

81:                                               ; preds = %77
  %82 = tail call i64 @_ZN3jxl12CacheAligned10NextOffsetEv() #8
  %83 = tail call i8* @_ZN3jxl12CacheAligned8AllocateEmm(i64 4194304, i64 %82) #8
  %84 = ptrtoint i8* %83 to i64
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %22, i64 0, i32 0, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  store i64 %84, i64* %23, align 8
  %87 = icmp eq i8* %86, null
  br i1 %87, label %90, label %88

88:                                               ; preds = %81
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %86) #8
  %89 = load i64, i64* %23, align 8
  br label %90

90:                                               ; preds = %88, %81
  %91 = phi i64 [ %89, %88 ], [ %84, %81 ]
  %92 = bitcast i32** %24 to i64*
  store i64 %91, i64* %92, align 8
  %93 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 5
  %94 = load i64, i64* %93, align 8
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %25, align 4
  %96 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 4
  %97 = bitcast %"struct.jxl::HybridUintConfig"* %29 to i8*
  %98 = bitcast %"struct.jxl::HybridUintConfig"* %96 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %97, i8* align 4 %98, i64 16, i1 false)
  %99 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 2
  %100 = load i32, i32* %99, align 4
  store i32 %100, i32* %27, align 4
  %101 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 3
  %102 = load i32, i32* %101, align 8
  store i32 %102, i32* %26, align 8
  %103 = icmp eq i64 %3, 0
  %104 = select i1 %103, i32 0, i32 120
  %105 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 20
  store i32 %104, i32* %105, align 8
  br i1 %103, label %125, label %106

106:                                              ; preds = %90
  %107 = trunc i64 %3 to i32
  br label %108

108:                                              ; preds = %106, %108
  %109 = phi i64 [ 0, %106 ], [ %121, %108 ]
  %110 = getelementptr inbounds [120 x [2 x i8]], [120 x [2 x i8]]* @_ZN3jxlL17kSpecialDistancesE, i64 0, i64 %109, i64 0
  %111 = load i8, i8* %110, align 2
  %112 = sext i8 %111 to i32
  %113 = getelementptr inbounds [120 x [2 x i8]], [120 x [2 x i8]]* @_ZN3jxlL17kSpecialDistancesE, i64 0, i64 %109, i64 1
  %114 = load i8, i8* %113, align 1
  %115 = sext i8 %114 to i32
  %116 = mul nsw i32 %115, %107
  %117 = add nsw i32 %116, %112
  %118 = icmp sgt i32 %117, 1
  %119 = select i1 %118, i32 %117, i32 1
  %120 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 19, i64 %109
  store i32 %119, i32* %120, align 4
  %121 = add nuw nsw i64 %109, 1
  %122 = load i32, i32* %105, align 8
  %123 = zext i32 %122 to i64
  %124 = icmp ult i64 %121, %123
  br i1 %124, label %108, label %125

125:                                              ; preds = %108, %90, %77
  ret void
}

declare i64 @_ZN3jxl13ICCANSContextEmmm(i64, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl9ICCReader7ProcessEPNS_9BitReaderEPNS_11PaddedBytesE(%"struct.jxl::ICCReader"*, %"class.jxl::BitReader"*, %"class.jxl::PaddedBytes"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"struct.jxl::ANSSymbolReader::Checkpoint", align 4
  %5 = bitcast %"struct.jxl::ANSSymbolReader::Checkpoint"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2064, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"struct.jxl::ANSSymbolReader::Checkpoint", %"struct.jxl::ANSSymbolReader::Checkpoint"* %4, i64 0, i32 4
  %7 = bitcast [512 x i32]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %7, i8 -86, i64 2048, i1 false)
  %8 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 6, i32 4
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"struct.jxl::ANSSymbolReader::Checkpoint", %"struct.jxl::ANSSymbolReader::Checkpoint"* %4, i64 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 6, i32 12
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %"struct.jxl::ANSSymbolReader::Checkpoint", %"struct.jxl::ANSSymbolReader::Checkpoint"* %4, i64 0, i32 3
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 6, i32 13
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"struct.jxl::ANSSymbolReader::Checkpoint", %"struct.jxl::ANSSymbolReader::Checkpoint"* %4, i64 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 6, i32 14
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %"struct.jxl::ANSSymbolReader::Checkpoint", %"struct.jxl::ANSSymbolReader::Checkpoint"* %4, i64 0, i32 2
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 6, i32 11
  %21 = load i32*, i32** %20, align 8
  %22 = icmp eq i32* %21, null
  %23 = bitcast i32* %21 to i8*
  br i1 %22, label %43, label %24

24:                                               ; preds = %3
  %25 = zext i32 %12 to i64
  %26 = and i64 %25, 1048575
  %27 = add nuw nsw i64 %25, 512
  %28 = and i64 %27, 1048575
  %29 = icmp ugt i64 %28, %26
  %30 = getelementptr inbounds %"struct.jxl::ANSSymbolReader::Checkpoint", %"struct.jxl::ANSSymbolReader::Checkpoint"* %4, i64 0, i32 4, i64 0
  %31 = bitcast i32* %30 to i8*
  %32 = getelementptr inbounds i32, i32* %21, i64 %26
  %33 = bitcast i32* %32 to i8*
  br i1 %29, label %34, label %37

34:                                               ; preds = %24
  %35 = sub nsw i64 %28, %26
  %36 = shl nsw i64 %35, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %33, i64 %36, i1 false) #8
  br label %43

37:                                               ; preds = %24
  %38 = sub nuw nsw i64 1048576, %26
  %39 = shl nuw nsw i64 %38, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %33, i64 %39, i1 false) #8
  %40 = getelementptr inbounds %"struct.jxl::ANSSymbolReader::Checkpoint", %"struct.jxl::ANSSymbolReader::Checkpoint"* %4, i64 0, i32 4, i64 %38
  %41 = bitcast i32* %40 to i8*
  %42 = shl nuw nsw i64 %28, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* nonnull align 4 %23, i64 %42, i1 false) #8
  br label %43

43:                                               ; preds = %3, %34, %37
  %44 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 2
  %45 = bitcast i8** %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 4
  %48 = bitcast i8** %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = sub i64 %46, %49
  %51 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 5
  %52 = load i64, i64* %51, align 8
  %53 = add i64 %50, %52
  %54 = shl i64 %53, 3
  %55 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %56 = load i64, i64* %55, align 8
  %57 = sub i64 %54, %56
  %58 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 2
  %59 = load i64, i64* %58, align 8
  %60 = sub i64 %57, %59
  %61 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 1
  store i64 %60, i64* %61, align 8
  %62 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 0
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 3
  %65 = load i64, i64* %64, align 8
  %66 = icmp ult i64 %63, %65
  br i1 %66, label %67, label %240

67:                                               ; preds = %43
  %68 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 7
  %69 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 3
  %70 = getelementptr inbounds %"struct.jxl::ANSSymbolReader::Checkpoint", %"struct.jxl::ANSSymbolReader::Checkpoint"* %4, i64 0, i32 4, i64 0
  %71 = bitcast i32* %70 to i8*
  %72 = bitcast i32** %20 to i8**
  %73 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 7
  %74 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 7, i32 1
  %75 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 7, i32 2, i32 0, i32 0, i32 0
  %76 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %73, i64 0, i32 0
  %77 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 6
  %78 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 7, i32 0
  %79 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 4, i32 0, i32 0
  br label %80

80:                                               ; preds = %67, %231
  %81 = phi i32 [ %18, %67 ], [ %195, %231 ]
  %82 = phi i32 [ %15, %67 ], [ %196, %231 ]
  %83 = phi i32 [ %12, %67 ], [ %197, %231 ]
  %84 = phi i32 [ %9, %67 ], [ %198, %231 ]
  %85 = phi i64 [ %63, %67 ], [ %236, %231 ]
  %86 = phi i64 [ %63, %67 ], [ %199, %231 ]
  %87 = and i64 %85, 511
  %88 = icmp ne i64 %87, 0
  %89 = icmp eq i64 %85, 0
  %90 = or i1 %89, %88
  br i1 %90, label %91, label %93

91:                                               ; preds = %80
  %92 = load i64, i64* %78, align 8
  br label %192

93:                                               ; preds = %80
  %94 = load i64, i64* %45, align 8
  %95 = load i64, i64* %48, align 8
  %96 = sub i64 %94, %95
  %97 = load i64, i64* %51, align 8
  %98 = add i64 %96, %97
  %99 = shl i64 %98, 3
  %100 = load i64, i64* %55, align 8
  %101 = sub i64 %99, %100
  store i64 %101, i64* %68, align 8
  %102 = load i8*, i8** %69, align 8
  %103 = getelementptr inbounds i8, i8* %102, i64 8
  %104 = ptrtoint i8* %103 to i64
  %105 = sub i64 %104, %95
  %106 = shl i64 %105, 3
  %107 = icmp ugt i64 %101, %106
  br i1 %107, label %108, label %130

108:                                              ; preds = %93
  store i32 %84, i32* %10, align 4
  store i32 %84, i32* %8, align 4
  store i32 %83, i32* %11, align 8
  store i32 %82, i32* %14, align 4
  store i32 %81, i32* %17, align 8
  %109 = load i32*, i32** %20, align 8
  %110 = icmp eq i32* %109, null
  br i1 %110, label %129, label %111

111:                                              ; preds = %108
  %112 = zext i32 %83 to i64
  %113 = and i64 %112, 1048575
  %114 = add nuw nsw i64 %112, 512
  %115 = and i64 %114, 1048575
  %116 = icmp ugt i64 %115, %113
  %117 = getelementptr inbounds i32, i32* %109, i64 %113
  %118 = bitcast i32* %117 to i8*
  br i1 %116, label %119, label %122

119:                                              ; preds = %111
  %120 = sub nsw i64 %115, %113
  %121 = shl nsw i64 %120, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %118, i8* align 4 %71, i64 %121, i1 false) #8
  br label %129

122:                                              ; preds = %111
  %123 = sub nuw nsw i64 1048576, %113
  %124 = shl nuw nsw i64 %123, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %118, i8* align 4 %71, i64 %124, i1 false) #8
  %125 = load i8*, i8** %72, align 8
  %126 = getelementptr inbounds %"struct.jxl::ANSSymbolReader::Checkpoint", %"struct.jxl::ANSSymbolReader::Checkpoint"* %4, i64 0, i32 4, i64 %123
  %127 = bitcast i32* %126 to i8*
  %128 = shl nuw nsw i64 %115, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %125, i8* align 4 %127, i64 %128, i1 false) #8
  br label %129

129:                                              ; preds = %122, %119, %108
  store i64 %86, i64* %62, align 8
  br label %300

130:                                              ; preds = %93
  %131 = load i32, i32* %8, align 4
  %132 = load i32, i32* %11, align 8
  store i32 %132, i32* %13, align 4
  %133 = load i32, i32* %14, align 4
  store i32 %133, i32* %16, align 4
  %134 = load i32, i32* %17, align 8
  store i32 %134, i32* %19, align 4
  %135 = load i32*, i32** %20, align 8
  %136 = icmp eq i32* %135, null
  %137 = bitcast i32* %135 to i8*
  br i1 %136, label %155, label %138

138:                                              ; preds = %130
  %139 = zext i32 %132 to i64
  %140 = and i64 %139, 1048575
  %141 = add nuw nsw i64 %139, 512
  %142 = and i64 %141, 1048575
  %143 = icmp ugt i64 %142, %140
  %144 = getelementptr inbounds i32, i32* %135, i64 %140
  %145 = bitcast i32* %144 to i8*
  br i1 %143, label %146, label %149

146:                                              ; preds = %138
  %147 = sub nsw i64 %142, %140
  %148 = shl nsw i64 %147, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %71, i8* align 4 %145, i64 %148, i1 false) #8
  br label %155

149:                                              ; preds = %138
  %150 = sub nuw nsw i64 1048576, %140
  %151 = shl nuw nsw i64 %150, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %71, i8* align 4 %145, i64 %151, i1 false) #8
  %152 = getelementptr inbounds %"struct.jxl::ANSSymbolReader::Checkpoint", %"struct.jxl::ANSSymbolReader::Checkpoint"* %4, i64 0, i32 4, i64 %150
  %153 = bitcast i32* %152 to i8*
  %154 = shl nuw nsw i64 %142, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %153, i8* nonnull align 4 %137, i64 %154, i1 false) #8
  br label %155

155:                                              ; preds = %130, %146, %149
  %156 = load i64, i64* %58, align 8
  %157 = sub i64 %101, %156
  store i64 %157, i64* %61, align 8
  %158 = load i64, i64* %62, align 8
  %159 = icmp ne i64 %158, 0
  %160 = and i64 %158, 65535
  %161 = icmp eq i64 %160, 0
  %162 = and i1 %159, %161
  br i1 %162, label %163, label %178

163:                                              ; preds = %155
  %164 = load i64, i64* %45, align 8
  %165 = load i64, i64* %48, align 8
  %166 = sub i64 %164, %165
  %167 = load i64, i64* %51, align 8
  %168 = add i64 %166, %167
  %169 = shl i64 %168, 3
  %170 = load i64, i64* %55, align 8
  %171 = add i64 %170, %156
  %172 = sub i64 %169, %171
  %173 = uitofp i64 %172 to float
  %174 = fmul float %173, 1.250000e-01
  %175 = uitofp i64 %158 to float
  %176 = fmul float %174, 2.560000e+02
  %177 = fcmp olt float %176, %175
  br i1 %177, label %299, label %178

178:                                              ; preds = %163, %155
  %179 = add i64 %158, 1024
  %180 = load i64, i64* %64, align 8
  %181 = icmp ult i64 %180, %179
  %182 = select i1 %181, i64 %180, i64 %179
  %183 = load i64, i64* %74, align 8
  %184 = icmp ult i64 %183, %182
  br i1 %184, label %185, label %187

185:                                              ; preds = %178
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %73, i64 %182) #8
  %186 = load i64, i64* %62, align 8
  br label %187

187:                                              ; preds = %178, %185
  %188 = phi i64 [ %158, %178 ], [ %186, %185 ]
  %189 = load i8*, i8** %75, align 8
  %190 = icmp eq i8* %189, null
  %191 = select i1 %190, i64 0, i64 %182
  store i64 %191, i64* %76, align 8
  br label %192

192:                                              ; preds = %91, %187
  %193 = phi i64 [ %92, %91 ], [ %191, %187 ]
  %194 = phi i64 [ %85, %91 ], [ %188, %187 ]
  %195 = phi i32 [ %81, %91 ], [ %134, %187 ]
  %196 = phi i32 [ %82, %91 ], [ %133, %187 ]
  %197 = phi i32 [ %83, %91 ], [ %132, %187 ]
  %198 = phi i32 [ %84, %91 ], [ %131, %187 ]
  %199 = phi i64 [ %86, %91 ], [ %158, %187 ]
  %200 = add i64 %194, -1
  %201 = icmp ult i64 %193, %200
  br i1 %201, label %202, label %205

202:                                              ; preds = %192
  %203 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.37, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38, i64 0, i64 0)) #8
  %204 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

205:                                              ; preds = %192
  %206 = load i8*, i8** %75, align 8
  %207 = add i64 %194, -2
  %208 = icmp ult i64 %193, %207
  br i1 %208, label %209, label %212

209:                                              ; preds = %205
  %210 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.37, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38, i64 0, i64 0)) #8
  %211 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

212:                                              ; preds = %205
  %213 = getelementptr inbounds i8, i8* %206, i64 %200
  %214 = load i8, i8* %213, align 1
  %215 = zext i8 %214 to i64
  %216 = getelementptr inbounds i8, i8* %206, i64 %207
  %217 = load i8, i8* %216, align 1
  %218 = zext i8 %217 to i64
  %219 = tail call i64 @_ZN3jxl13ICCANSContextEmmm(i64 %194, i64 %215, i64 %218) #8
  %220 = load i8*, i8** %79, align 8, !noalias !11
  %221 = getelementptr inbounds i8, i8* %220, i64 %219
  %222 = load i8, i8* %221, align 1, !noalias !11
  %223 = zext i8 %222 to i64
  %224 = tail call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* %77, i64 %223, %"class.jxl::BitReader"* %1) #8
  %225 = load i64, i64* %62, align 8
  %226 = load i64, i64* %78, align 8
  %227 = icmp ult i64 %226, %225
  br i1 %227, label %228, label %231

228:                                              ; preds = %212
  %229 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.37, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38, i64 0, i64 0)) #8
  %230 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

231:                                              ; preds = %212
  %232 = trunc i64 %224 to i8
  %233 = load i8*, i8** %75, align 8
  %234 = getelementptr inbounds i8, i8* %233, i64 %225
  store i8 %232, i8* %234, align 1
  %235 = load i64, i64* %62, align 8
  %236 = add i64 %235, 1
  store i64 %236, i64* %62, align 8
  %237 = load i64, i64* %64, align 8
  %238 = icmp ult i64 %236, %237
  br i1 %238, label %80, label %239

239:                                              ; preds = %231
  store i32 %198, i32* %10, align 4
  br label %240

240:                                              ; preds = %239, %43
  %241 = phi i32 [ %195, %239 ], [ %18, %43 ]
  %242 = phi i32 [ %196, %239 ], [ %15, %43 ]
  %243 = phi i32 [ %197, %239 ], [ %12, %43 ]
  %244 = phi i32 [ %198, %239 ], [ %9, %43 ]
  %245 = phi i64 [ %199, %239 ], [ %63, %43 ]
  %246 = load i64, i64* %45, align 8
  %247 = load i64, i64* %48, align 8
  %248 = sub i64 %246, %247
  %249 = load i64, i64* %51, align 8
  %250 = add i64 %248, %249
  %251 = shl i64 %250, 3
  %252 = load i64, i64* %55, align 8
  %253 = sub i64 %251, %252
  %254 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 7
  store i64 %253, i64* %254, align 8
  %255 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 3
  %256 = load i8*, i8** %255, align 8
  %257 = getelementptr inbounds i8, i8* %256, i64 8
  %258 = ptrtoint i8* %257 to i64
  %259 = sub i64 %258, %247
  %260 = shl i64 %259, 3
  %261 = icmp ugt i64 %253, %260
  br i1 %261, label %262, label %287

262:                                              ; preds = %240
  store i32 %244, i32* %8, align 4
  store i32 %243, i32* %11, align 8
  store i32 %242, i32* %14, align 4
  store i32 %241, i32* %17, align 8
  %263 = load i32*, i32** %20, align 8
  %264 = icmp eq i32* %263, null
  br i1 %264, label %286, label %265

265:                                              ; preds = %262
  %266 = zext i32 %243 to i64
  %267 = and i64 %266, 1048575
  %268 = add nuw nsw i64 %266, 512
  %269 = and i64 %268, 1048575
  %270 = icmp ugt i64 %269, %267
  %271 = getelementptr inbounds i32, i32* %263, i64 %267
  %272 = bitcast i32* %271 to i8*
  %273 = getelementptr inbounds %"struct.jxl::ANSSymbolReader::Checkpoint", %"struct.jxl::ANSSymbolReader::Checkpoint"* %4, i64 0, i32 4, i64 0
  %274 = bitcast i32* %273 to i8*
  br i1 %270, label %275, label %278

275:                                              ; preds = %265
  %276 = sub nsw i64 %269, %267
  %277 = shl nsw i64 %276, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %272, i8* align 4 %274, i64 %277, i1 false) #8
  br label %286

278:                                              ; preds = %265
  %279 = sub nuw nsw i64 1048576, %267
  %280 = shl nuw nsw i64 %279, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %272, i8* align 4 %274, i64 %280, i1 false) #8
  %281 = bitcast i32** %20 to i8**
  %282 = load i8*, i8** %281, align 8
  %283 = getelementptr inbounds %"struct.jxl::ANSSymbolReader::Checkpoint", %"struct.jxl::ANSSymbolReader::Checkpoint"* %4, i64 0, i32 4, i64 %279
  %284 = bitcast i32* %283 to i8*
  %285 = shl nuw nsw i64 %269, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %282, i8* align 4 %284, i64 %285, i1 false) #8
  br label %286

286:                                              ; preds = %278, %275, %262
  store i64 %245, i64* %62, align 8
  br label %300

287:                                              ; preds = %240
  %288 = load i64, i64* %58, align 8
  %289 = sub i64 %253, %288
  store i64 %289, i64* %61, align 8
  %290 = load i32, i32* %8, align 4
  %291 = icmp eq i32 %290, 1245184
  br i1 %291, label %292, label %300

292:                                              ; preds = %287
  %293 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %2, i64 0, i32 0
  store i64 0, i64* %293, align 8
  %294 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 7, i32 2, i32 0, i32 0, i32 0
  %295 = load i8*, i8** %294, align 8
  %296 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %0, i64 0, i32 7, i32 0
  %297 = load i64, i64* %296, align 8
  %298 = tail call i32 @_ZN3jxl12UnpredictICCEPKhmPNS_11PaddedBytesE(i8* %295, i64 %297, %"class.jxl::PaddedBytes"* %2)
  br label %300

299:                                              ; preds = %163
  store i32 %131, i32* %10, align 4
  br label %300

300:                                              ; preds = %299, %287, %292, %286, %129
  %301 = phi i32 [ -1, %129 ], [ %298, %292 ], [ -1, %286 ], [ 1, %287 ], [ 1, %299 ]
  call void @llvm.lifetime.end.p0i8(i64 2064, i8* nonnull %5) #8
  ret i32 %301
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl7ReadICCEPNS_9BitReaderEPNS_11PaddedBytesEm(%"class.jxl::BitReader"* noalias, %"class.jxl::PaddedBytes"* noalias, i64) local_unnamed_addr #0 {
  %4 = alloca %"struct.jxl::ICCReader", align 8
  %5 = bitcast %"struct.jxl::ICCReader"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 816, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %4, i64 0, i32 5, i32 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 680, i1 false)
  %7 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %4, i64 0, i32 5, i32 6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 136, i1 false) #8
  call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %7) #8
  %8 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %4, i64 0, i32 5, i32 7
  store i64 0, i64* %8, align 8
  %9 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %4, i64 0, i32 6, i32 4
  store i32 1245184, i32* %9, align 4
  %10 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %4, i64 0, i32 6, i32 10
  %11 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %4, i64 0, i32 6, i32 17
  %12 = bitcast %"class.std::__1::unique_ptr"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 36, i1 false) #8
  %13 = bitcast i32* %11 to <4 x i32>*
  store <4 x i32> <i32 1048576, i32 4, i32 16, i32 2>, <4 x i32>* %13, align 4
  %14 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %4, i64 0, i32 6, i32 18, i32 3
  store i32 0, i32* %14, align 4
  %15 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %4, i64 0, i32 7
  %16 = bitcast %"class.jxl::PaddedBytes"* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 24, i1 false) #8
  %17 = call i32 @_ZN3jxl9ICCReader4InitEPNS_9BitReaderEm(%"struct.jxl::ICCReader"* nonnull %4, %"class.jxl::BitReader"* %0, i64 %2)
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %3
  %20 = call i32 @_ZN3jxl9ICCReader7ProcessEPNS_9BitReaderEPNS_11PaddedBytesE(%"struct.jxl::ICCReader"* nonnull %4, %"class.jxl::BitReader"* %0, %"class.jxl::PaddedBytes"* %1)
  br label %21

21:                                               ; preds = %19, %3
  %22 = phi i32 [ %17, %3 ], [ %20, %19 ]
  %23 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %4, i64 0, i32 7, i32 2, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  store i8* null, i8** %23, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %27, label %26

26:                                               ; preds = %21
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %24) #8
  br label %27

27:                                               ; preds = %26, %21
  %28 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %4, i64 0, i32 6, i32 10, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  store i8* null, i8** %28, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %32, label %31

31:                                               ; preds = %27
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %29) #8
  br label %32

32:                                               ; preds = %31, %27
  %33 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %4, i64 0, i32 5, i32 3, i32 0, i32 0
  %34 = load i32*, i32** %33, align 8
  %35 = icmp eq i32* %34, null
  br i1 %35, label %41, label %36

36:                                               ; preds = %32
  %37 = ptrtoint i32* %34 to i64
  %38 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %4, i64 0, i32 5, i32 3, i32 0, i32 1
  %39 = bitcast i32** %38 to i64*
  store i64 %37, i64* %39, align 8
  %40 = bitcast i32* %34 to i8*
  call void @_ZdlPv(i8* %40) #10
  br label %41

41:                                               ; preds = %36, %32
  %42 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %4, i64 0, i32 5, i32 2, i32 0, i32 0
  %43 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %42, align 8
  %44 = icmp eq %"struct.jxl::HybridUintConfig"* %43, null
  br i1 %44, label %50, label %45

45:                                               ; preds = %41
  %46 = ptrtoint %"struct.jxl::HybridUintConfig"* %43 to i64
  %47 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %4, i64 0, i32 5, i32 2, i32 0, i32 1
  %48 = bitcast %"struct.jxl::HybridUintConfig"** %47 to i64*
  store i64 %46, i64* %48, align 8
  %49 = bitcast %"struct.jxl::HybridUintConfig"* %43 to i8*
  call void @_ZdlPv(i8* %49) #10
  br label %50

50:                                               ; preds = %45, %41
  %51 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %4, i64 0, i32 5, i32 1
  %52 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %51, i64 0, i32 0, i32 0
  %53 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %52, align 8
  %54 = icmp eq %"struct.jxl::HuffmanDecodingData"* %53, null
  br i1 %54, label %78, label %55

55:                                               ; preds = %50
  %56 = bitcast %"struct.jxl::HuffmanDecodingData"* %53 to i8*
  %57 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %4, i64 0, i32 5, i32 1, i32 0, i32 1
  %58 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %57, align 8
  %59 = icmp eq %"struct.jxl::HuffmanDecodingData"* %58, %53
  br i1 %59, label %76, label %60

60:                                               ; preds = %55, %71
  %61 = phi %"struct.jxl::HuffmanDecodingData"* [ %62, %71 ], [ %58, %55 ]
  %62 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %61, i64 -1
  %63 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %63, align 8
  %65 = icmp eq %"struct.jxl::HuffmanCode"* %64, null
  br i1 %65, label %71, label %66

66:                                               ; preds = %60
  %67 = ptrtoint %"struct.jxl::HuffmanCode"* %64 to i64
  %68 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %61, i64 -1, i32 0, i32 0, i32 1
  %69 = bitcast %"struct.jxl::HuffmanCode"** %68 to i64*
  store i64 %67, i64* %69, align 8
  %70 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %64, i64 0, i32 0
  call void @_ZdlPv(i8* %70) #10
  br label %71

71:                                               ; preds = %66, %60
  %72 = icmp eq %"struct.jxl::HuffmanDecodingData"* %62, %53
  br i1 %72, label %73, label %60

73:                                               ; preds = %71
  %74 = bitcast %"class.std::__1::vector.3"* %51 to i8**
  %75 = load i8*, i8** %74, align 8
  br label %76

76:                                               ; preds = %73, %55
  %77 = phi i8* [ %75, %73 ], [ %56, %55 ]
  store %"struct.jxl::HuffmanDecodingData"* %53, %"struct.jxl::HuffmanDecodingData"** %57, align 8
  call void @_ZdlPv(i8* %77) #10
  br label %78

78:                                               ; preds = %76, %50
  %79 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %4, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %80 = load i8*, i8** %79, align 8
  store i8* null, i8** %79, align 8
  %81 = icmp eq i8* %80, null
  br i1 %81, label %83, label %82

82:                                               ; preds = %78
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %80) #8
  br label %83

83:                                               ; preds = %78, %82
  %84 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %4, i64 0, i32 4, i32 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = icmp eq i8* %85, null
  br i1 %86, label %91, label %87

87:                                               ; preds = %83
  %88 = ptrtoint i8* %85 to i64
  %89 = getelementptr inbounds %"struct.jxl::ICCReader", %"struct.jxl::ICCReader"* %4, i64 0, i32 4, i32 0, i32 1
  %90 = bitcast i8** %89 to i64*
  store i64 %88, i64* %90, align 8
  call void @_ZdlPv(i8* nonnull %85) #10
  br label %91

91:                                               ; preds = %83, %87
  call void @llvm.lifetime.end.p0i8(i64 816, i8* nonnull %5) #8
  ret i32 %22
}

declare void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #2

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #4

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"*) local_unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 56
  br i1 %8, label %9, label %24

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ult i8* %11, %4
  br i1 %12, label %13, label %24

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %14, i8** %5, align 8
  %15 = load i8, i8* %11, align 1
  %16 = zext i8 %15 to i64
  %17 = shl i64 %16, %7
  %18 = load i64, i64* %10, align 8
  %19 = or i64 %17, %18
  store i64 %19, i64* %10, align 8
  %20 = add nuw nsw i64 %7, 8
  store i64 %20, i64* %6, align 8
  %21 = icmp ult i64 %20, 56
  %22 = icmp ult i8* %14, %4
  %23 = and i1 %21, %22
  br i1 %23, label %33, label %24

24:                                               ; preds = %13, %9, %33, %44, %55, %66, %77, %88, %1
  %25 = phi i64 [ %7, %1 ], [ %7, %9 ], [ %20, %13 ], [ %40, %33 ], [ %51, %44 ], [ %62, %55 ], [ %73, %66 ], [ %84, %77 ], [ %95, %88 ]
  %26 = sub i64 63, %25
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  store i64 %30, i64* %28, align 8
  %31 = and i64 %26, -8
  %32 = add i64 %31, %25
  store i64 %32, i64* %6, align 8
  ret void

33:                                               ; preds = %13
  %34 = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %34, i8** %5, align 8
  %35 = load i8, i8* %14, align 1
  %36 = zext i8 %35 to i64
  %37 = shl i64 %36, %20
  %38 = load i64, i64* %10, align 8
  %39 = or i64 %37, %38
  store i64 %39, i64* %10, align 8
  %40 = add nuw nsw i64 %7, 16
  store i64 %40, i64* %6, align 8
  %41 = icmp ult i64 %40, 56
  %42 = icmp ult i8* %34, %4
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %24

44:                                               ; preds = %33
  %45 = getelementptr inbounds i8, i8* %11, i64 3
  store i8* %45, i8** %5, align 8
  %46 = load i8, i8* %34, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, %40
  %49 = load i64, i64* %10, align 8
  %50 = or i64 %48, %49
  store i64 %50, i64* %10, align 8
  %51 = add nuw nsw i64 %7, 24
  store i64 %51, i64* %6, align 8
  %52 = icmp ult i64 %51, 56
  %53 = icmp ult i8* %45, %4
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %24

55:                                               ; preds = %44
  %56 = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %56, i8** %5, align 8
  %57 = load i8, i8* %45, align 1
  %58 = zext i8 %57 to i64
  %59 = shl i64 %58, %51
  %60 = load i64, i64* %10, align 8
  %61 = or i64 %59, %60
  store i64 %61, i64* %10, align 8
  %62 = add nuw nsw i64 %7, 32
  store i64 %62, i64* %6, align 8
  %63 = icmp ult i64 %62, 56
  %64 = icmp ult i8* %56, %4
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %24

66:                                               ; preds = %55
  %67 = getelementptr inbounds i8, i8* %11, i64 5
  store i8* %67, i8** %5, align 8
  %68 = load i8, i8* %56, align 1
  %69 = zext i8 %68 to i64
  %70 = shl i64 %69, %62
  %71 = load i64, i64* %10, align 8
  %72 = or i64 %70, %71
  store i64 %72, i64* %10, align 8
  %73 = add nuw nsw i64 %7, 40
  store i64 %73, i64* %6, align 8
  %74 = icmp ult i64 %73, 56
  %75 = icmp ult i8* %67, %4
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %24

77:                                               ; preds = %66
  %78 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %78, i8** %5, align 8
  %79 = load i8, i8* %67, align 1
  %80 = zext i8 %79 to i64
  %81 = shl i64 %80, %73
  %82 = load i64, i64* %10, align 8
  %83 = or i64 %81, %82
  store i64 %83, i64* %10, align 8
  %84 = add nuw nsw i64 %7, 48
  store i64 %84, i64* %6, align 8
  %85 = icmp ult i64 %84, 56
  %86 = icmp ult i8* %78, %4
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %24

88:                                               ; preds = %77
  %89 = getelementptr inbounds i8, i8* %11, i64 7
  store i8* %89, i8** %5, align 8
  %90 = load i8, i8* %78, align 1
  %91 = zext i8 %90 to i64
  %92 = shl i64 %91, %84
  %93 = load i64, i64* %10, align 8
  %94 = or i64 %92, %93
  store i64 %94, i64* %10, align 8
  %95 = add nuw nsw i64 %7, 56
  store i64 %95, i64* %6, align 8
  br label %24
}

declare i8* @_ZN3jxl12CacheAligned8AllocateEmm(i64, i64) local_unnamed_addr #2

declare i64 @_ZN3jxl12CacheAligned10NextOffsetEv() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"*, i64, %"class.jxl::BitReader"* noalias) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 13
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %7 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %8 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %9 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 1
  %11 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 4
  %12 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 0
  %13 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 6
  %14 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 7
  %15 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 8
  %16 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 17
  %17 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 1
  %18 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 2
  %19 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 3
  %20 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 0
  %21 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 16
  %22 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 15
  %23 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 5
  %24 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 20
  %25 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 12
  %26 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 14
  %27 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 11
  %28 = bitcast i32** %27 to i8**
  %29 = load i32, i32* %4, align 4
  br label %30

30:                                               ; preds = %333, %3
  %31 = phi i32 [ %334, %333 ], [ %29, %3 ]
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %48, label %33, !prof !8

33:                                               ; preds = %30
  %34 = load i32*, i32** %27, align 8
  %35 = load i32, i32* %26, align 8
  %36 = add i32 %35, 1
  store i32 %36, i32* %26, align 8
  %37 = and i32 %35, 1048575
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i32, i32* %34, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  %42 = add i32 %31, -1
  store i32 %42, i32* %4, align 4
  %43 = load i32, i32* %25, align 8
  %44 = add i32 %43, 1
  store i32 %44, i32* %25, align 8
  %45 = and i32 %43, 1048575
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i32, i32* %34, i64 %46
  store i32 %40, i32* %47, align 4
  br label %395

48:                                               ; preds = %30
  %49 = load i8*, i8** %5, align 8
  %50 = load i8*, i8** %6, align 8
  %51 = icmp ugt i8* %49, %50
  br i1 %51, label %52, label %53, !prof !9

52:                                               ; preds = %48
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #8
  br label %64

53:                                               ; preds = %48
  %54 = bitcast i8* %49 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = load i64, i64* %7, align 8
  %57 = shl i64 %55, %56
  %58 = load i64, i64* %8, align 8
  %59 = or i64 %58, %57
  store i64 %59, i64* %8, align 8
  %60 = sub i64 63, %56
  %61 = lshr i64 %60, 3
  %62 = getelementptr inbounds i8, i8* %49, i64 %61
  store i8* %62, i8** %5, align 8
  %63 = or i64 %56, 56
  store i64 %63, i64* %7, align 8
  br label %64

64:                                               ; preds = %52, %53
  %65 = load i8, i8* %9, align 8, !range !10, !noalias !14
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %72, label %67, !prof !8

67:                                               ; preds = %64
  %68 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %10, align 8, !noalias !17
  %69 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %68, i64 %1
  %70 = tail call zeroext i16 @_ZNK3jxl19HuffmanDecodingData10ReadSymbolEPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"* %69, %"class.jxl::BitReader"* %2) #8
  %71 = zext i16 %70 to i64
  br label %123

72:                                               ; preds = %64
  %73 = load i32, i32* %11, align 4, !noalias !20
  %74 = and i32 %73, 4095
  %75 = load %"struct.jxl::AliasTable::Entry"*, %"struct.jxl::AliasTable::Entry"** %12, align 8, !noalias !20
  %76 = load i32, i32* %13, align 8, !noalias !20
  %77 = zext i32 %76 to i64
  %78 = shl i64 %1, %77
  %79 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %75, i64 %78
  %80 = zext i32 %74 to i64
  %81 = load i32, i32* %14, align 4, !noalias !20
  %82 = zext i32 %81 to i64
  %83 = load i32, i32* %15, align 8, !noalias !20
  %84 = lshr i64 %80, %82
  %85 = and i32 %83, %74
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %79, i64 %84
  %88 = bitcast %"struct.jxl::AliasTable::Entry"* %87 to i64*
  %89 = load i64, i64* %88, align 1, !alias.scope !23, !noalias !26
  %90 = and i64 %89, 255
  %91 = lshr i64 %89, 8
  %92 = and i64 %91, 255
  %93 = lshr i64 %89, 16
  %94 = and i64 %93, 65535
  %95 = icmp ule i64 %90, %86
  %96 = select i1 %95, i64 %89, i64 0
  %97 = lshr i64 %96, 32
  %98 = and i64 %97, 65535
  %99 = lshr i64 %96, 48
  %100 = select i1 %95, i64 %92, i64 %84
  %101 = add nuw nsw i64 %98, %86
  %102 = xor i64 %99, %94
  %103 = lshr i32 %73, 12
  %104 = zext i32 %103 to i64
  %105 = mul nuw nsw i64 %102, %104
  %106 = add nuw nsw i64 %101, %105
  %107 = trunc i64 %106 to i32
  %108 = load i64, i64* %8, align 8, !alias.scope !20
  %109 = icmp ult i32 %107, 65536
  %110 = shl i32 %107, 16
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 65535
  %113 = or i32 %110, %112
  %114 = select i1 %109, i32 %113, i32 %107
  store i32 %114, i32* %11, align 4, !noalias !20
  %115 = select i1 %109, i64 16, i64 0
  %116 = load i64, i64* %7, align 8, !alias.scope !20
  %117 = sub i64 %116, %115
  store i64 %117, i64* %7, align 8, !alias.scope !20
  %118 = lshr i64 %108, %115
  store i64 %118, i64* %8, align 8, !alias.scope !20
  %119 = and i32 %114, 4095
  %120 = zext i32 %119 to i64
  %121 = lshr i64 %120, %82
  %122 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %79, i64 %121, i32 0
  tail call void @llvm.prefetch(i8* %122, i32 0, i32 3, i32 1) #8, !noalias !28
  br label %123

123:                                              ; preds = %67, %72
  %124 = phi i64 [ %71, %67 ], [ %100, %72 ]
  %125 = load i32, i32* %16, align 4
  %126 = zext i32 %125 to i64
  %127 = icmp ult i64 %124, %126
  br i1 %127, label %337, label %128, !prof !8

128:                                              ; preds = %123
  %129 = sub nsw i64 %124, %126
  %130 = load i32, i32* %17, align 4
  %131 = zext i32 %130 to i64
  %132 = load i32, i32* %18, align 4
  %133 = load i32, i32* %19, align 4
  %134 = zext i32 %133 to i64
  %135 = icmp ult i64 %129, %131
  br i1 %135, label %136, label %138

136:                                              ; preds = %128
  %137 = trunc i64 %129 to i32
  br label %171

138:                                              ; preds = %128
  %139 = load i32, i32* %20, align 4
  %140 = zext i32 %139 to i64
  %141 = zext i32 %132 to i64
  %142 = add nuw nsw i64 %134, %141
  %143 = sub nsw i64 %129, %131
  %144 = lshr i64 %143, %142
  %145 = sub i64 %144, %142
  %146 = add i64 %145, %140
  %147 = and i64 %146, 31
  %148 = shl nsw i32 -1, %133
  %149 = xor i32 %148, -1
  %150 = trunc i64 %129 to i32
  %151 = and i32 %149, %150
  %152 = lshr i64 %129, %134
  %153 = shl nsw i64 -1, %147
  %154 = xor i64 %153, -1
  %155 = load i64, i64* %8, align 8
  %156 = and i64 %155, %154
  %157 = load i64, i64* %7, align 8
  %158 = sub i64 %157, %147
  store i64 %158, i64* %7, align 8
  %159 = lshr i64 %155, %147
  store i64 %159, i64* %8, align 8
  %160 = shl i32 1, %132
  %161 = sext i32 %160 to i64
  %162 = add nsw i32 %160, -1
  %163 = sext i32 %162 to i64
  %164 = and i64 %152, %163
  %165 = or i64 %164, %161
  %166 = shl i64 %165, %147
  %167 = or i64 %156, %166
  %168 = shl i64 %167, %134
  %169 = trunc i64 %168 to i32
  %170 = or i32 %151, %169
  br label %171

171:                                              ; preds = %136, %138
  %172 = phi i32 [ %137, %136 ], [ %170, %138 ]
  %173 = load i32, i32* %21, align 8
  %174 = add i32 %173, %172
  store i32 %174, i32* %4, align 4
  %175 = load i8*, i8** %5, align 8
  %176 = load i8*, i8** %6, align 8
  %177 = icmp ugt i8* %175, %176
  br i1 %177, label %178, label %179, !prof !9

178:                                              ; preds = %171
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #8
  br label %190

179:                                              ; preds = %171
  %180 = bitcast i8* %175 to i64*
  %181 = load i64, i64* %180, align 1
  %182 = load i64, i64* %7, align 8
  %183 = shl i64 %181, %182
  %184 = load i64, i64* %8, align 8
  %185 = or i64 %184, %183
  store i64 %185, i64* %8, align 8
  %186 = sub i64 63, %182
  %187 = lshr i64 %186, 3
  %188 = getelementptr inbounds i8, i8* %175, i64 %187
  store i8* %188, i8** %5, align 8
  %189 = or i64 %182, 56
  store i64 %189, i64* %7, align 8
  br label %190

190:                                              ; preds = %178, %179
  %191 = load i32, i32* %22, align 4
  %192 = zext i32 %191 to i64
  %193 = load i8, i8* %9, align 8, !range !10, !noalias !29
  %194 = icmp eq i8 %193, 0
  br i1 %194, label %202, label %195, !prof !8

195:                                              ; preds = %190
  %196 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %10, align 8, !noalias !32
  %197 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %196, i64 %192
  %198 = tail call zeroext i16 @_ZNK3jxl19HuffmanDecodingData10ReadSymbolEPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"* %197, %"class.jxl::BitReader"* %2) #8
  %199 = zext i16 %198 to i64
  %200 = load i32, i32* %22, align 4
  %201 = zext i32 %200 to i64
  br label %253

202:                                              ; preds = %190
  %203 = load i32, i32* %11, align 4, !noalias !35
  %204 = and i32 %203, 4095
  %205 = load %"struct.jxl::AliasTable::Entry"*, %"struct.jxl::AliasTable::Entry"** %12, align 8, !noalias !35
  %206 = load i32, i32* %13, align 8, !noalias !35
  %207 = zext i32 %206 to i64
  %208 = shl i64 %192, %207
  %209 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %205, i64 %208
  %210 = zext i32 %204 to i64
  %211 = load i32, i32* %14, align 4, !noalias !35
  %212 = zext i32 %211 to i64
  %213 = load i32, i32* %15, align 8, !noalias !35
  %214 = lshr i64 %210, %212
  %215 = and i32 %213, %204
  %216 = zext i32 %215 to i64
  %217 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %209, i64 %214
  %218 = bitcast %"struct.jxl::AliasTable::Entry"* %217 to i64*
  %219 = load i64, i64* %218, align 1, !alias.scope !38, !noalias !41
  %220 = and i64 %219, 255
  %221 = lshr i64 %219, 8
  %222 = and i64 %221, 255
  %223 = lshr i64 %219, 16
  %224 = and i64 %223, 65535
  %225 = icmp ule i64 %220, %216
  %226 = select i1 %225, i64 %219, i64 0
  %227 = lshr i64 %226, 32
  %228 = and i64 %227, 65535
  %229 = lshr i64 %226, 48
  %230 = select i1 %225, i64 %222, i64 %214
  %231 = add nuw nsw i64 %228, %216
  %232 = xor i64 %229, %224
  %233 = lshr i32 %203, 12
  %234 = zext i32 %233 to i64
  %235 = mul nuw nsw i64 %232, %234
  %236 = add nuw nsw i64 %231, %235
  %237 = trunc i64 %236 to i32
  %238 = load i64, i64* %8, align 8, !alias.scope !35
  %239 = icmp ult i32 %237, 65536
  %240 = shl i32 %237, 16
  %241 = trunc i64 %238 to i32
  %242 = and i32 %241, 65535
  %243 = or i32 %240, %242
  %244 = select i1 %239, i32 %243, i32 %237
  store i32 %244, i32* %11, align 4, !noalias !35
  %245 = select i1 %239, i64 16, i64 0
  %246 = load i64, i64* %7, align 8, !alias.scope !35
  %247 = sub i64 %246, %245
  store i64 %247, i64* %7, align 8, !alias.scope !35
  %248 = lshr i64 %238, %245
  store i64 %248, i64* %8, align 8, !alias.scope !35
  %249 = and i32 %244, 4095
  %250 = zext i32 %249 to i64
  %251 = lshr i64 %250, %212
  %252 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %209, i64 %251, i32 0
  tail call void @llvm.prefetch(i8* %252, i32 0, i32 3, i32 1) #8, !noalias !43
  br label %253

253:                                              ; preds = %195, %202
  %254 = phi i64 [ %201, %195 ], [ %192, %202 ]
  %255 = phi i64 [ %199, %195 ], [ %230, %202 ]
  %256 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %23, align 8
  %257 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 1
  %258 = load i32, i32* %257, align 4
  %259 = zext i32 %258 to i64
  %260 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 2
  %261 = load i32, i32* %260, align 4
  %262 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 3
  %263 = load i32, i32* %262, align 4
  %264 = zext i32 %263 to i64
  %265 = icmp ult i64 %255, %259
  br i1 %265, label %266, label %268

266:                                              ; preds = %253
  %267 = trunc i64 %255 to i32
  br label %302

268:                                              ; preds = %253
  %269 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 0
  %270 = load i32, i32* %269, align 4
  %271 = zext i32 %270 to i64
  %272 = zext i32 %261 to i64
  %273 = add nuw nsw i64 %264, %272
  %274 = sub nsw i64 %255, %259
  %275 = lshr i64 %274, %273
  %276 = sub i64 %275, %273
  %277 = add i64 %276, %271
  %278 = and i64 %277, 31
  %279 = shl nsw i32 -1, %263
  %280 = xor i32 %279, -1
  %281 = trunc i64 %255 to i32
  %282 = and i32 %280, %281
  %283 = lshr i64 %255, %264
  %284 = shl nsw i64 -1, %278
  %285 = xor i64 %284, -1
  %286 = load i64, i64* %8, align 8
  %287 = and i64 %286, %285
  %288 = load i64, i64* %7, align 8
  %289 = sub i64 %288, %278
  store i64 %289, i64* %7, align 8
  %290 = lshr i64 %286, %278
  store i64 %290, i64* %8, align 8
  %291 = shl i32 1, %261
  %292 = sext i32 %291 to i64
  %293 = add nsw i32 %291, -1
  %294 = sext i32 %293 to i64
  %295 = and i64 %283, %294
  %296 = or i64 %295, %292
  %297 = shl i64 %296, %278
  %298 = or i64 %287, %297
  %299 = shl i64 %298, %264
  %300 = trunc i64 %299 to i32
  %301 = or i32 %282, %300
  br label %302

302:                                              ; preds = %266, %268
  %303 = phi i32 [ %267, %266 ], [ %301, %268 ]
  %304 = zext i32 %303 to i64
  %305 = load i32, i32* %24, align 8
  %306 = icmp ult i32 %303, %305
  br i1 %306, label %307, label %311, !prof !8

307:                                              ; preds = %302
  %308 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 19, i64 %304
  %309 = load i32, i32* %308, align 4
  %310 = zext i32 %309 to i64
  br label %315

311:                                              ; preds = %302
  %312 = zext i32 %305 to i64
  %313 = add nuw nsw i64 %304, 1
  %314 = sub nsw i64 %313, %312
  br label %315

315:                                              ; preds = %311, %307
  %316 = phi i64 [ %310, %307 ], [ %314, %311 ]
  %317 = load i32, i32* %25, align 8
  %318 = zext i32 %317 to i64
  %319 = icmp ugt i64 %316, %318
  %320 = select i1 %319, i64 %318, i64 %316, !prof !9
  %321 = icmp ult i64 %320, 1048576
  %322 = select i1 %321, i64 %320, i64 1048576, !prof !8
  %323 = trunc i64 %322 to i32
  %324 = sub i32 %317, %323
  store i32 %324, i32* %26, align 8
  %325 = icmp eq i64 %322, 0
  br i1 %325, label %326, label %333, !prof !9

326:                                              ; preds = %315
  %327 = load i32, i32* %4, align 4
  %328 = zext i32 %327 to i64
  %329 = icmp ult i64 %328, 1048576
  %330 = select i1 %329, i64 %328, i64 1048576
  %331 = load i8*, i8** %28, align 8
  %332 = shl nuw nsw i64 %330, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %331, i8 0, i64 %332, i1 false)
  br label %333

333:                                              ; preds = %326, %315
  %334 = load i32, i32* %4, align 4
  %335 = load i32, i32* %21, align 8
  %336 = icmp ult i32 %334, %335
  br i1 %336, label %395, label %30

337:                                              ; preds = %123
  %338 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %23, align 8
  %339 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 1
  %340 = load i32, i32* %339, align 4
  %341 = zext i32 %340 to i64
  %342 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 2
  %343 = load i32, i32* %342, align 4
  %344 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 3
  %345 = load i32, i32* %344, align 4
  %346 = zext i32 %345 to i64
  %347 = icmp ult i64 %124, %341
  br i1 %347, label %348, label %350

348:                                              ; preds = %337
  %349 = trunc i64 %124 to i32
  br label %384

350:                                              ; preds = %337
  %351 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 0
  %352 = load i32, i32* %351, align 4
  %353 = zext i32 %352 to i64
  %354 = zext i32 %343 to i64
  %355 = add nuw nsw i64 %346, %354
  %356 = sub nsw i64 %124, %341
  %357 = lshr i64 %356, %355
  %358 = sub i64 %357, %355
  %359 = add i64 %358, %353
  %360 = and i64 %359, 31
  %361 = shl nsw i32 -1, %345
  %362 = xor i32 %361, -1
  %363 = trunc i64 %124 to i32
  %364 = and i32 %362, %363
  %365 = lshr i64 %124, %346
  %366 = shl nsw i64 -1, %360
  %367 = xor i64 %366, -1
  %368 = load i64, i64* %8, align 8
  %369 = and i64 %368, %367
  %370 = load i64, i64* %7, align 8
  %371 = sub i64 %370, %360
  store i64 %371, i64* %7, align 8
  %372 = lshr i64 %368, %360
  store i64 %372, i64* %8, align 8
  %373 = shl i32 1, %343
  %374 = sext i32 %373 to i64
  %375 = add nsw i32 %373, -1
  %376 = sext i32 %375 to i64
  %377 = and i64 %365, %376
  %378 = or i64 %377, %374
  %379 = shl i64 %378, %360
  %380 = or i64 %369, %379
  %381 = shl i64 %380, %346
  %382 = trunc i64 %381 to i32
  %383 = or i32 %364, %382
  br label %384

384:                                              ; preds = %348, %350
  %385 = phi i32 [ %349, %348 ], [ %383, %350 ]
  %386 = zext i32 %385 to i64
  %387 = load i32*, i32** %27, align 8
  %388 = icmp eq i32* %387, null
  br i1 %388, label %395, label %389

389:                                              ; preds = %384
  %390 = load i32, i32* %25, align 8
  %391 = add i32 %390, 1
  store i32 %391, i32* %25, align 8
  %392 = and i32 %390, 1048575
  %393 = zext i32 %392 to i64
  %394 = getelementptr inbounds i32, i32* %387, i64 %393
  store i32 %385, i32* %394, align 4
  br label %395

395:                                              ; preds = %333, %384, %389, %33
  %396 = phi i64 [ %41, %33 ], [ %386, %384 ], [ %386, %389 ], [ 0, %333 ]
  ret i64 %396
}

declare zeroext i16 @_ZNK3jxl19HuffmanDecodingData10ReadSymbolEPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"*, %"class.jxl::BitReader"*) local_unnamed_addr #2

; Function Attrs: inaccessiblemem_or_argmemonly nounwind
declare void @llvm.prefetch(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #6

declare void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inaccessiblemem_or_argmemonly nounwind }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!4 = distinct !{!4, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!7 = distinct !{!7, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!8 = !{!"branch_weights", i32 2000, i32 1}
!9 = !{!"branch_weights", i32 1, i32 2000}
!10 = !{i8 0, i8 2}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!13 = distinct !{!13, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE: argument 0"}
!16 = distinct !{!16, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE"}
!17 = !{!18, !15}
!18 = distinct !{!18, !19, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE: argument 0"}
!19 = distinct !{!19, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE"}
!20 = !{!21, !15}
!21 = distinct !{!21, !22, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE: argument 0"}
!22 = distinct !{!22, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 1"}
!25 = distinct !{!25, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm"}
!26 = !{!27, !21}
!27 = distinct !{!27, !25, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 0"}
!28 = !{!21}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE: argument 0"}
!31 = distinct !{!31, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE"}
!32 = !{!33, !30}
!33 = distinct !{!33, !34, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE: argument 0"}
!34 = distinct !{!34, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE"}
!35 = !{!36, !30}
!36 = distinct !{!36, !37, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE: argument 0"}
!37 = distinct !{!37, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE"}
!38 = !{!39}
!39 = distinct !{!39, !40, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 1"}
!40 = distinct !{!40, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm"}
!41 = !{!42, !36}
!42 = distinct !{!42, !40, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 0"}
!43 = !{!36}
