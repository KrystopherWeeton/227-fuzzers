; ModuleID = '../../net/third_party/quiche/src/quic/core/quic_stream_sequencer_buffer.cc'
source_filename = "../../net/third_party/quiche/src/quic/core/quic_stream_sequencer_buffer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.absl::container_internal::btree_node" = type { i8 }
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.quic::QuicStreamSequencerBuffer" = type { i64, i64, i64, i64, i8, %"class.std::__1::unique_ptr", i64, %"class.quic::QuicIntervalSet" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** }
%"struct.quic::QuicStreamSequencerBuffer::BufferBlock" = type { [8192 x i8] }
%"class.quic::QuicIntervalSet" = type { %"class.absl::btree_set" }
%"class.absl::btree_set" = type { %"class.absl::container_internal::btree_set_container" }
%"class.absl::container_internal::btree_set_container" = type { %"class.absl::container_internal::btree_container" }
%"class.absl::container_internal::btree_container" = type { %"class.absl::container_internal::btree" }
%"class.absl::container_internal::btree" = type { %"class.absl::container_internal::CompressedTuple", %"class.absl::container_internal::btree_node"*, i64 }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.2" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.2" = type { %"class.absl::container_internal::btree_node"* }
%"class.quic::QuicInterval" = type { i64, i64 }
%"class.std::__1::allocator" = type { i8 }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.absl::string_view" = type { i8*, i64 }
%"class.absl::AlphaNum" = type { %"class.absl::string_view", [32 x i8] }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"struct.std::__1::pair" = type { %"struct.absl::container_internal::btree_iterator.11", i8, [7 x i8] }
%"struct.absl::container_internal::btree_iterator.11" = type <{ %"class.absl::container_internal::btree_node"*, i32, [4 x i8] }>
%struct.iovec = type { i8*, i64 }
%"class.std::__1::basic_ios" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32, [4 x i8] }>
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"struct.std::__1::pair.14" = type { i64, %"struct.absl::container_internal::btree_iterator.11" }

$_ZNK4quic15QuicIntervalSetImE10IsDisjointERKNS_12QuicIntervalImEE = comdat any

$_ZN4quic15QuicIntervalSetImE10DifferenceERKS1_ = comdat any

$_ZN4absl6StrCatIJmA19_cNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEA22_cmEEES8_RKNS_8AlphaNumESC_SC_SC_SC_DpRKT_ = comdat any

$_ZN4absl6StrCatIJbA19_cNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEA22_cmEEES8_RKNS_8AlphaNumESC_SC_SC_SC_DpRKT_ = comdat any

$_ZNK4quic15QuicIntervalSetImE8ToStringEv = comdat any

$_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_ = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZN4quic15QuicIntervalSetImE3AddERKNS_12QuicIntervalImEE = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE11erase_rangeENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESJ_ = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE22rebalance_after_deleteENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5eraseENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE22try_merge_or_rebalanceEPNS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE = comdat any

$_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE23rebalance_right_to_leftEiPSD_PSB_ = comdat any

$_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE23rebalance_left_to_rightEiPSD_PSB_ = comdat any

$_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5mergeEPSD_PSB_ = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE13insert_uniqueIS5_JRKS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEERKT_DpOT0_ = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16internal_emplaceIJRKS5_EEENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESM_DpOT_ = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18rebalance_or_splitEPNS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE = comdat any

$_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5splitEiPSD_PSB_ = comdat any

$_ZN4quic15QuicIntervalSetImE21AddOptimizedForAppendERKNS_12QuicIntervalImEE = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18insert_hint_uniqueIS5_JRKS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEESN_RKT_DpOT0_ = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18insert_hint_uniqueIS5_JS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEESL_RKT_DpOT0_ = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16internal_emplaceIJS5_EEENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESK_DpOT_ = comdat any

$_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE13insert_uniqueIS5_JS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEERKT_DpOT0_ = comdat any

$_ZN4quiclsImEEDTlsfp_decldtfp0_5beginEERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEERKNS_15QuicIntervalSetIT_EE = comdat any

$_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node = comdat any

@FLAGS_quic_reloadable_flag_quic_allocate_stream_sequencer_buffer_blocks_on_demand = external local_unnamed_addr global i8, align 1
@.str = private unnamed_addr constant [75 x i8] c"../../net/third_party/quiche/src/quic/core/quic_stream_sequencer_buffer.cc\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"Try to retire block twice\00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"Received empty stream frame without FIN.\00", align 1
@.str.3 = private unnamed_addr constant [38 x i8] c"Received data beyond available range.\00", align 1
@.str.4 = private unnamed_addr constant [50 x i8] c"Too many data intervals received for this stream.\00", align 1
@.str.5 = private unnamed_addr constant [84 x i8] c"QuicStreamSequencerBuffer error: OnStreamData() exceed array bounds.write offset = \00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c" write_block_num = \00", align 1
@.str.7 = private unnamed_addr constant [26 x i8] c" current_blocks_count_ = \00", align 1
@.str.8 = private unnamed_addr constant [64 x i8] c"QuicStreamSequencerBuffer error: OnStreamData() blocks_ is null\00", align 1
@.str.9 = private unnamed_addr constant [66 x i8] c"QuicStreamSequencerBuffer error: OnStreamData() dest == nullptr: \00", align 1
@.str.10 = private unnamed_addr constant [21 x i8] c" source == nullptr: \00", align 1
@.str.11 = private unnamed_addr constant [20 x i8] c" Writing at offset \00", align 1
@.str.12 = private unnamed_addr constant [19 x i8] c" Received frames: \00", align 1
@.str.13 = private unnamed_addr constant [22 x i8] c" total_bytes_read_ = \00", align 1
@.str.14 = private unnamed_addr constant [59 x i8] c"QuicStreamSequencerBuffer error: Readv() dest == nullptr: \00", align 1
@.str.15 = private unnamed_addr constant [10 x i8] c" blocks_[\00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c"] == nullptr: \00", align 1
@.str.17 = private unnamed_addr constant [55 x i8] c"QuicStreamSequencerBuffer error: fail to retire block \00", align 1
@.str.18 = private unnamed_addr constant [56 x i8] c" as the block is already released, total_bytes_read_ = \00", align 1
@.str.19 = private unnamed_addr constant [36 x i8] c"Read stopped at where it shouldn't.\00", align 1
@_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node = linkonce_odr hidden constant { %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 } { %"class.absl::container_internal::btree_node"* bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*), i8 0, i8 0, i8 0, i8 1 }, comdat, align 8
@.str.20 = private unnamed_addr constant [26 x i8] c"absl::string_view::substr\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8
@_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant { [5 x i8*], [5 x i8*] }, align 8
@_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant [4 x i8*], align 8
@_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant { [16 x i8*] }, align 8
@.str.22 = private unnamed_addr constant [2 x i8] c"{\00", align 1
@.str.23 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.24 = private unnamed_addr constant [3 x i8] c" }\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c")\00", align 1

@_ZN4quic25QuicStreamSequencerBufferC1Em = hidden unnamed_addr alias void (%"class.quic::QuicStreamSequencerBuffer"*, i64), void (%"class.quic::QuicStreamSequencerBuffer"*, i64)* @_ZN4quic25QuicStreamSequencerBufferC2Em
@_ZN4quic25QuicStreamSequencerBufferD1Ev = hidden unnamed_addr alias void (%"class.quic::QuicStreamSequencerBuffer"*), void (%"class.quic::QuicStreamSequencerBuffer"*)* @_ZN4quic25QuicStreamSequencerBufferD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic25QuicStreamSequencerBufferC2Em(%"class.quic::QuicStreamSequencerBuffer"*, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  %4 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 1
  %5 = add i64 %1, 8191
  %6 = lshr i64 %5, 13
  store i64 %6, i64* %4, align 8
  %7 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 2
  %8 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 4
  %9 = bitcast i64* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 16, i1 false)
  %10 = load i8, i8* @FLAGS_quic_reloadable_flag_quic_allocate_stream_sequencer_buffer_blocks_on_demand, align 1, !range !2
  store i8 %10, i8* %8, align 8
  %11 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 5
  %12 = bitcast %"class.std::__1::unique_ptr"* %11 to i64*
  store i64 0, i64* %12, align 8
  %13 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7
  %14 = bitcast %"class.quic::QuicIntervalSet"* %13 to i64*
  store i64 ptrtoint ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to i64), i64* %14, align 8
  %15 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 1
  store %"class.absl::container_internal::btree_node"* bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*), %"class.absl::container_internal::btree_node"** %15, align 8
  %16 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 0, i64* %16, align 8
  tail call void @_ZN4quic25QuicStreamSequencerBuffer5ClearEv(%"class.quic::QuicStreamSequencerBuffer"* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic25QuicStreamSequencerBuffer5ClearEv(%"class.quic::QuicStreamSequencerBuffer"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.quic::QuicInterval", align 8
  %3 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %4 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %3, align 8
  %5 = icmp eq %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %4, null
  br i1 %5, label %30, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 4
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  %10 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 2
  %11 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 1
  %12 = select i1 %9, i64* %11, i64* %10
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %30, label %15

15:                                               ; preds = %6, %28
  %16 = phi %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** [ %29, %28 ], [ %4, %6 ]
  %17 = phi i64 [ %26, %28 ], [ 0, %6 ]
  %18 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %16, i64 %17
  %19 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %18, align 8
  %20 = icmp eq %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* %19, null
  br i1 %20, label %25, label %21

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock", %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* %19, i64 0, i32 0, i64 0
  call void @_ZdlPv(i8* %22) #12
  %23 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %3, align 8
  %24 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %23, i64 %17
  store %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* null, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %24, align 8
  br label %25

25:                                               ; preds = %21, %15
  %26 = add nuw i64 %17, 1
  %27 = icmp eq i64 %26, %13
  br i1 %27, label %30, label %28

28:                                               ; preds = %25
  %29 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %3, align 8
  br label %15

30:                                               ; preds = %25, %6, %1
  %31 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 6
  store i64 0, i64* %31, align 8
  %32 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7
  %33 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 2
  %34 = load i64, i64* %33, align 8
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %40, label %36

36:                                               ; preds = %30
  %37 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %32, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %37, align 8
  %39 = bitcast %"class.quic::QuicIntervalSet"* %32 to %"class.std::__1::allocator"*
  call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %38, %"class.std::__1::allocator"* %39) #13
  br label %40

40:                                               ; preds = %30, %36
  %41 = bitcast %"class.quic::QuicIntervalSet"* %32 to <2 x %"class.absl::container_internal::btree_node"*>*
  store <2 x %"class.absl::container_internal::btree_node"*> <%"class.absl::container_internal::btree_node"* bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*), %"class.absl::container_internal::btree_node"* bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*)>, <2 x %"class.absl::container_internal::btree_node"*>* %41, align 8
  store i64 0, i64* %33, align 8
  %42 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 3
  %43 = bitcast %"class.quic::QuicInterval"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %43) #13
  %44 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %2, i64 0, i32 0
  store i64 0, i64* %44, align 8
  %45 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %2, i64 0, i32 1
  %46 = load i64, i64* %42, align 8
  store i64 %46, i64* %45, align 8
  call void @_ZN4quic15QuicIntervalSetImE3AddERKNS_12QuicIntervalImEE(%"class.quic::QuicIntervalSet"* %32, %"class.quic::QuicInterval"* nonnull dereferenceable(16) %2) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %43) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic25QuicStreamSequencerBufferD2Ev(%"class.quic::QuicStreamSequencerBuffer"*) unnamed_addr #0 align 2 {
  tail call void @_ZN4quic25QuicStreamSequencerBuffer5ClearEv(%"class.quic::QuicStreamSequencerBuffer"* %0)
  %2 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7
  %3 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %7, align 8
  %9 = bitcast %"class.quic::QuicIntervalSet"* %2 to %"class.std::__1::allocator"*
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %8, %"class.std::__1::allocator"* %9) #13
  br label %10

10:                                               ; preds = %1, %6
  %11 = bitcast %"class.quic::QuicIntervalSet"* %2 to <2 x %"class.absl::container_internal::btree_node"*>*
  store <2 x %"class.absl::container_internal::btree_node"*> <%"class.absl::container_internal::btree_node"* bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*), %"class.absl::container_internal::btree_node"* bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*)>, <2 x %"class.absl::container_internal::btree_node"*>* %11, align 8
  store i64 0, i64* %3, align 8
  %12 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %13 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %12, align 8
  store %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** null, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %12, align 8
  %14 = icmp eq %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %13, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %10
  %16 = bitcast %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %13 to i8*
  tail call void @_ZdaPv(i8* %16) #12
  br label %17

17:                                               ; preds = %10, %15
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4quic25QuicStreamSequencerBuffer11RetireBlockEm(%"class.quic::QuicStreamSequencerBuffer"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::LogMessage", align 8
  %4 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %5 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %4, align 8
  %6 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %5, i64 %1
  %7 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %6, align 8
  %8 = icmp eq %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* %7, null
  br i1 %8, label %9, label %16

9:                                                ; preds = %2
  %10 = tail call zeroext i1 @_ZN7logging22ShouldCreateLogMessageEi(i32 2) #13
  br i1 %10, label %11, label %20

11:                                               ; preds = %9
  %12 = bitcast %"class.logging::LogMessage"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %12) #13
  call void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"* nonnull %3, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str, i64 0, i64 0), i32 76, i32 2) #13
  %13 = getelementptr inbounds %"class.logging::LogMessage", %"class.logging::LogMessage"* %3, i64 0, i32 2
  %14 = bitcast %"class.std::__1::basic_ostringstream"* %13 to %"class.std::__1::basic_ostream"*
  %15 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %14, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i64 25) #13
  call void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"* nonnull %3) #13
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %12) #13
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock", %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* %7, i64 0, i32 0, i64 0
  tail call void @_ZdlPv(i8* %17) #12
  %18 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %4, align 8
  %19 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %18, i64 %1
  store %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* null, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %19, align 8
  br label %20

20:                                               ; preds = %11, %9, %16
  %21 = phi i1 [ true, %16 ], [ false, %9 ], [ false, %11 ]
  ret i1 %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN7logging22ShouldCreateLogMessageEi(i32) local_unnamed_addr #2

declare void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"*, i8*, i32, i32) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic25QuicStreamSequencerBuffer18MaybeAddMoreBlocksEm(%"class.quic::QuicStreamSequencerBuffer"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %6, %8
  br i1 %9, label %52, label %10

10:                                               ; preds = %2
  %11 = add i64 %1, -1
  %12 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  store i64 -6148914691236517206, i64* %3, align 8
  %13 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = icmp ult i64 %11, %14
  br i1 %15, label %16, label %22

16:                                               ; preds = %10
  %17 = urem i64 %11, %14
  %18 = lshr i64 %17, 13
  %19 = icmp ugt i64 %18, 7
  %20 = select i1 %19, i64 %18, i64 7
  %21 = add nuw nsw i64 %20, 1
  br label %22

22:                                               ; preds = %10, %16
  %23 = phi i64 [ %21, %16 ], [ %8, %10 ]
  store i64 %23, i64* %3, align 8
  %24 = icmp ult i64 %6, %23
  br i1 %24, label %25, label %51

25:                                               ; preds = %22
  %26 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26)
  %27 = shl i64 %6, 2
  store i64 %27, i64* %4, align 8
  %28 = icmp ult i64 %27, %23
  %29 = select i1 %28, i64* %3, i64* %4
  %30 = load i64, i64* %29, align 8
  %31 = icmp ult i64 %8, %30
  %32 = select i1 %31, i64* %7, i64* %29
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %4, align 8
  %34 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %33, i64 8) #13
  %35 = extractvalue { i64, i1 } %34, 1
  %36 = extractvalue { i64, i1 } %34, 0
  %37 = select i1 %35, i64 -1, i64 %36
  %38 = tail call i8* @_Znam(i64 %37) #12
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 0, i64 %37, i1 false) #13
  %39 = ptrtoint i8* %38 to i64
  %40 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 5
  %41 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %40, i64 0, i32 0, i32 0, i32 0
  %42 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %41, align 8
  %43 = icmp eq %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %42, null
  br i1 %43, label %44, label %46

44:                                               ; preds = %25
  %45 = bitcast %"class.std::__1::unique_ptr"* %40 to i64*
  store i64 %39, i64* %45, align 8
  br label %50

46:                                               ; preds = %25
  %47 = bitcast %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %42 to i8*
  %48 = shl i64 %6, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %38, i8* nonnull align 8 %47, i64 %48, i1 false)
  %49 = bitcast %"class.std::__1::unique_ptr"* %40 to i64*
  store i64 %39, i64* %49, align 8
  tail call void @_ZdaPv(i8* %47) #12
  br label %50

50:                                               ; preds = %46, %44
  store i64 %33, i64* %5, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  br label %51

51:                                               ; preds = %22, %50
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  br label %52

52:                                               ; preds = %2, %51
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK4quic25QuicStreamSequencerBuffer13GetBlockIndexEm(%"class.quic::QuicStreamSequencerBuffer"* nocapture readonly, i64) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = urem i64 %1, %4
  %6 = lshr i64 %5, 13
  ret i64 %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4quic25QuicStreamSequencerBuffer12OnStreamDataEmN4absl11string_viewEPmPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.quic::QuicStreamSequencerBuffer"*, i64, i8*, i64, i64* nocapture, %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %7 = alloca %"class.quic::QuicInterval", align 8
  %8 = alloca %"class.quic::QuicInterval", align 8
  %9 = alloca %"class.quic::QuicInterval", align 8
  %10 = alloca %"class.quic::QuicInterval", align 8
  %11 = alloca i64, align 8
  %12 = alloca %"class.quic::QuicIntervalSet", align 8
  %13 = alloca i64, align 8
  store i64 0, i64* %4, align 8
  %14 = icmp eq i64 %3, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %6
  %16 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %5, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0), i64 40) #13
  br label %296

17:                                               ; preds = %6
  %18 = add i64 %3, %1
  %19 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 3
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, %20
  %24 = icmp ugt i64 %18, %23
  %25 = icmp ult i64 %18, %1
  %26 = or i1 %25, %24
  br i1 %26, label %27, label %29

27:                                               ; preds = %17
  %28 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %5, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i64 0, i64 0), i64 37) #13
  br label %296

29:                                               ; preds = %17
  %30 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 4
  %31 = load i8, i8* %30, align 8, !range !2
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %34, label %33

33:                                               ; preds = %29
  tail call void @_ZN4quic25QuicStreamSequencerBuffer18MaybeAddMoreBlocksEm(%"class.quic::QuicStreamSequencerBuffer"* %0, i64 %18)
  br label %34

34:                                               ; preds = %29, %33
  %35 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7
  %36 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = load i64, i64* %36, align 8
  %38 = icmp eq i64 %37, 0
  %39 = bitcast %"class.quic::QuicInterval"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #13
  br i1 %38, label %129, label %40

40:                                               ; preds = %34
  %41 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 1
  %42 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %41, align 8, !noalias !3
  %43 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %42, i64 8, i32 0
  %44 = getelementptr inbounds i8, i8* %43, i64 2
  %45 = load i8, i8* %44, align 1, !noalias !3
  %46 = ptrtoint %"class.absl::container_internal::btree_node"* %42 to i64
  %47 = getelementptr inbounds i8, i8* %43, i64 3
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %66, label %50

50:                                               ; preds = %40
  %51 = zext i8 %45 to i32
  %52 = add nsw i32 %51, -1
  %53 = icmp eq i8 %45, 0
  br i1 %53, label %54, label %102

54:                                               ; preds = %50, %62
  %55 = phi %"class.absl::container_internal::btree_node"* [ %57, %62 ], [ %42, %50 ]
  %56 = bitcast %"class.absl::container_internal::btree_node"* %55 to %"class.absl::container_internal::btree_node"**
  %57 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %56, align 8
  %58 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %57, i64 8, i32 0
  %59 = getelementptr inbounds i8, i8* %58, i64 3
  %60 = load i8, i8* %59, align 1
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %62, label %102

62:                                               ; preds = %54
  %63 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %55, i64 8, i32 0
  %64 = load i8, i8* %63, align 1
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %54, label %98

66:                                               ; preds = %40
  %67 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %42, i64 256, i32 0
  %68 = bitcast i8* %67 to %"class.absl::container_internal::btree_node"**
  %69 = zext i8 %45 to i64
  %70 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %68, i64 %69
  %71 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %70, align 8
  %72 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %71, i64 8, i32 0
  %73 = getelementptr inbounds i8, i8* %72, i64 3
  %74 = load i8, i8* %73, align 1
  %75 = icmp eq i8 %74, 0
  %76 = getelementptr inbounds i8, i8* %72, i64 2
  %77 = load i8, i8* %76, align 1
  br i1 %75, label %78, label %92

78:                                               ; preds = %66, %78
  %79 = phi i8 [ %91, %78 ], [ %77, %66 ]
  %80 = phi %"class.absl::container_internal::btree_node"* [ %85, %78 ], [ %71, %66 ]
  %81 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %80, i64 256, i32 0
  %82 = bitcast i8* %81 to %"class.absl::container_internal::btree_node"**
  %83 = zext i8 %79 to i64
  %84 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %82, i64 %83
  %85 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %84, align 8
  %86 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %85, i64 8, i32 0
  %87 = getelementptr inbounds i8, i8* %86, i64 3
  %88 = load i8, i8* %87, align 1
  %89 = icmp eq i8 %88, 0
  %90 = getelementptr inbounds i8, i8* %86, i64 2
  %91 = load i8, i8* %90, align 1
  br i1 %89, label %78, label %92

92:                                               ; preds = %78, %66
  %93 = phi %"class.absl::container_internal::btree_node"* [ %71, %66 ], [ %85, %78 ]
  %94 = phi i8 [ %77, %66 ], [ %91, %78 ]
  %95 = ptrtoint %"class.absl::container_internal::btree_node"* %93 to i64
  %96 = zext i8 %94 to i32
  %97 = add nsw i32 %96, -1
  br label %102

98:                                               ; preds = %62
  %99 = ptrtoint %"class.absl::container_internal::btree_node"* %57 to i64
  %100 = zext i8 %64 to i32
  %101 = add nsw i32 %100, -1
  br label %102

102:                                              ; preds = %54, %50, %98, %92
  %103 = phi i32 [ %97, %92 ], [ %52, %50 ], [ %101, %98 ], [ %52, %54 ]
  %104 = phi i64 [ %95, %92 ], [ %46, %50 ], [ %99, %98 ], [ %46, %54 ]
  %105 = inttoptr i64 %104 to %"class.absl::container_internal::btree_node"*
  %106 = icmp eq i64 %104, 0
  br i1 %106, label %107, label %108, !prof !10

107:                                              ; preds = %102
  tail call void @llvm.trap() #13
  unreachable

108:                                              ; preds = %102
  %109 = icmp slt i32 %103, 0
  br i1 %109, label %110, label %111, !prof !10

110:                                              ; preds = %108
  tail call void @llvm.trap() #13
  unreachable

111:                                              ; preds = %108
  %112 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %105, i64 8, i32 0
  %113 = getelementptr inbounds i8, i8* %112, i64 2
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = icmp slt i32 %103, %115
  br i1 %116, label %118, label %117, !prof !11

117:                                              ; preds = %111
  tail call void @llvm.trap() #13
  unreachable

118:                                              ; preds = %111
  %119 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %105, i64 16, i32 0
  %120 = bitcast i8* %119 to %"class.quic::QuicInterval"*
  %121 = sext i32 %103 to i64
  %122 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %120, i64 %121, i32 1
  %123 = load i64, i64* %122, align 8
  %124 = icmp ugt i64 %123, %1
  br i1 %124, label %125, label %129

125:                                              ; preds = %118
  %126 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %10, i64 0, i32 0
  store i64 %1, i64* %126, align 8
  %127 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %10, i64 0, i32 1
  store i64 %18, i64* %127, align 8
  %128 = call zeroext i1 @_ZNK4quic15QuicIntervalSetImE10IsDisjointERKNS_12QuicIntervalImEE(%"class.quic::QuicIntervalSet"* %35, %"class.quic::QuicInterval"* nonnull dereferenceable(16) %10)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %39) #13
  br i1 %128, label %130, label %150

129:                                              ; preds = %34, %118
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %39) #13
  br label %130

130:                                              ; preds = %129, %125
  %131 = bitcast %"class.quic::QuicInterval"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %131) #13
  %132 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %9, i64 0, i32 0
  store i64 %1, i64* %132, align 8
  %133 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %9, i64 0, i32 1
  store i64 %18, i64* %133, align 8
  call void @_ZN4quic15QuicIntervalSetImE21AddOptimizedForAppendERKNS_12QuicIntervalImEE(%"class.quic::QuicIntervalSet"* %35, %"class.quic::QuicInterval"* nonnull dereferenceable(16) %9) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %131) #13
  %134 = load i64, i64* %36, align 8
  %135 = icmp ugt i64 %134, 9999
  br i1 %135, label %136, label %138

136:                                              ; preds = %130
  %137 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %5, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.4, i64 0, i64 0), i64 49) #13
  br label %296

138:                                              ; preds = %130
  %139 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %139) #13
  store i64 0, i64* %11, align 8
  %140 = call zeroext i1 @_ZN4quic25QuicStreamSequencerBuffer14CopyStreamDataEmN4absl11string_viewEPmPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.quic::QuicStreamSequencerBuffer"* %0, i64 %1, i8* %2, i64 %3, i64* nonnull %11, %"class.std::__1::basic_string"* %5)
  br i1 %140, label %141, label %148

141:                                              ; preds = %138
  %142 = load i64, i64* %11, align 8
  %143 = load i64, i64* %4, align 8
  %144 = add i64 %143, %142
  store i64 %144, i64* %4, align 8
  %145 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 6
  %146 = load i64, i64* %145, align 8
  %147 = add i64 %146, %144
  store i64 %147, i64* %145, align 8
  br label %148

148:                                              ; preds = %138, %141
  %149 = phi i32 [ 0, %141 ], [ 95, %138 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %139) #13
  br label %296

150:                                              ; preds = %125
  %151 = bitcast %"class.quic::QuicIntervalSet"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %151) #13
  %152 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %153 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %154 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %155 = bitcast %"class.quic::QuicIntervalSet"* %12 to i64*
  store i64 ptrtoint ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to i64), i64* %155, align 8
  store %"class.absl::container_internal::btree_node"* bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*), %"class.absl::container_internal::btree_node"** %153, align 8
  store i64 0, i64* %154, align 8
  %156 = bitcast %"class.quic::QuicInterval"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %156) #13
  %157 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %8, i64 0, i32 0
  store i64 %1, i64* %157, align 8
  %158 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %8, i64 0, i32 1
  store i64 %18, i64* %158, align 8
  call void @_ZN4quic15QuicIntervalSetImE3AddERKNS_12QuicIntervalImEE(%"class.quic::QuicIntervalSet"* nonnull %12, %"class.quic::QuicInterval"* nonnull dereferenceable(16) %8) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %156) #13
  call void @_ZN4quic15QuicIntervalSetImE10DifferenceERKS1_(%"class.quic::QuicIntervalSet"* nonnull %12, %"class.quic::QuicIntervalSet"* dereferenceable(24) %35)
  %159 = load i64, i64* %154, align 8
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %294, label %161

161:                                              ; preds = %150
  %162 = bitcast %"class.quic::QuicInterval"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %162) #13
  %163 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %7, i64 0, i32 0
  store i64 %1, i64* %163, align 8
  %164 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %7, i64 0, i32 1
  store i64 %18, i64* %164, align 8
  call void @_ZN4quic15QuicIntervalSetImE3AddERKNS_12QuicIntervalImEE(%"class.quic::QuicIntervalSet"* %35, %"class.quic::QuicInterval"* nonnull dereferenceable(16) %7) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %162) #13
  %165 = load i64, i64* %36, align 8
  %166 = icmp ugt i64 %165, 9999
  br i1 %166, label %167, label %169

167:                                              ; preds = %161
  %168 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %5, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.4, i64 0, i64 0), i64 49) #13
  br label %287

169:                                              ; preds = %161
  %170 = bitcast %"class.quic::QuicIntervalSet"* %12 to i64**
  %171 = load i64*, i64** %170, align 8
  %172 = load i64, i64* %171, align 8
  %173 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %153, align 8
  %174 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %173, i64 8, i32 0
  %175 = getelementptr inbounds i8, i8* %174, i64 2
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = inttoptr i64 %172 to %"class.absl::container_internal::btree_node"*
  %179 = icmp ne %"class.absl::container_internal::btree_node"* %173, %178
  %180 = icmp ne i8 %176, 0
  %181 = or i1 %179, %180
  br i1 %181, label %184, label %182

182:                                              ; preds = %169
  %183 = load i64, i64* %4, align 8
  br label %282

184:                                              ; preds = %169
  %185 = bitcast i64* %13 to i8*
  br label %186

186:                                              ; preds = %184, %274
  %187 = phi %"class.absl::container_internal::btree_node"* [ %178, %184 ], [ %277, %274 ]
  %188 = phi i32 [ 0, %184 ], [ %276, %274 ]
  %189 = phi i64 [ %172, %184 ], [ %275, %274 ]
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %191, label %192, !prof !10

191:                                              ; preds = %186
  call void @llvm.trap() #13
  unreachable

192:                                              ; preds = %186
  %193 = icmp slt i32 %188, 0
  br i1 %193, label %194, label %195, !prof !10

194:                                              ; preds = %192
  call void @llvm.trap() #13
  unreachable

195:                                              ; preds = %192
  %196 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %187, i64 8, i32 0
  %197 = getelementptr inbounds i8, i8* %196, i64 2
  %198 = load i8, i8* %197, align 1
  %199 = zext i8 %198 to i32
  %200 = icmp slt i32 %188, %199
  br i1 %200, label %202, label %201, !prof !11

201:                                              ; preds = %195
  call void @llvm.trap() #13
  unreachable

202:                                              ; preds = %195
  %203 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %187, i64 16, i32 0
  %204 = bitcast i8* %203 to %"class.quic::QuicInterval"*
  %205 = sext i32 %188 to i64
  %206 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %204, i64 %205, i32 0
  %207 = load i64, i64* %206, align 8
  %208 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %204, i64 %205, i32 1
  %209 = load i64, i64* %208, align 8
  %210 = sub i64 %209, %207
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #13
  store i64 0, i64* %13, align 8
  %211 = sub i64 %207, %1
  %212 = icmp ugt i64 %211, %3
  br i1 %212, label %213, label %214, !prof !10

213:                                              ; preds = %202
  call void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.20, i64 0, i64 0)) #14
  unreachable

214:                                              ; preds = %202
  %215 = sub i64 %3, %211
  %216 = icmp ugt i64 %215, %210
  %217 = select i1 %216, i64 %210, i64 %215
  %218 = icmp sgt i64 %217, -1
  br i1 %218, label %220, label %219, !prof !11

219:                                              ; preds = %214
  call void @llvm.trap() #13
  unreachable

220:                                              ; preds = %214
  %221 = getelementptr inbounds i8, i8* %2, i64 %211
  %222 = call zeroext i1 @_ZN4quic25QuicStreamSequencerBuffer14CopyStreamDataEmN4absl11string_viewEPmPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.quic::QuicStreamSequencerBuffer"* %0, i64 %207, i8* %221, i64 %217, i64* nonnull %13, %"class.std::__1::basic_string"* %5)
  br i1 %222, label %223, label %281

223:                                              ; preds = %220
  %224 = load i64, i64* %13, align 8
  %225 = load i64, i64* %4, align 8
  %226 = add i64 %225, %224
  store i64 %226, i64* %4, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #13
  %227 = getelementptr inbounds i8, i8* %196, i64 3
  %228 = load i8, i8* %227, align 1
  %229 = icmp eq i8 %228, 0
  %230 = add nuw nsw i32 %188, 1
  br i1 %229, label %249, label %231

231:                                              ; preds = %223
  %232 = load i8, i8* %197, align 1
  %233 = zext i8 %232 to i32
  %234 = icmp eq i32 %230, %233
  br i1 %234, label %235, label %274

235:                                              ; preds = %231, %244
  %236 = phi i8* [ %240, %244 ], [ %196, %231 ]
  %237 = phi %"class.absl::container_internal::btree_node"* [ %239, %244 ], [ %187, %231 ]
  %238 = bitcast %"class.absl::container_internal::btree_node"* %237 to %"class.absl::container_internal::btree_node"**
  %239 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %238, align 8
  %240 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %239, i64 8, i32 0
  %241 = getelementptr inbounds i8, i8* %240, i64 3
  %242 = load i8, i8* %241, align 1
  %243 = icmp eq i8 %242, 0
  br i1 %243, label %244, label %274

244:                                              ; preds = %235
  %245 = load i8, i8* %236, align 1
  %246 = getelementptr inbounds i8, i8* %240, i64 2
  %247 = load i8, i8* %246, align 1
  %248 = icmp eq i8 %245, %247
  br i1 %248, label %235, label %271

249:                                              ; preds = %223
  %250 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %187, i64 256, i32 0
  %251 = bitcast i8* %250 to %"class.absl::container_internal::btree_node"**
  %252 = sext i32 %230 to i64
  %253 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %251, i64 %252
  %254 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %253, align 8
  %255 = ptrtoint %"class.absl::container_internal::btree_node"* %254 to i64
  %256 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %254, i64 8, i32 0
  %257 = getelementptr inbounds i8, i8* %256, i64 3
  %258 = load i8, i8* %257, align 1
  %259 = icmp eq i8 %258, 0
  br i1 %259, label %260, label %274

260:                                              ; preds = %249, %260
  %261 = phi %"class.absl::container_internal::btree_node"* [ %264, %260 ], [ %254, %249 ]
  %262 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %261, i64 256, i32 0
  %263 = bitcast i8* %262 to %"class.absl::container_internal::btree_node"**
  %264 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %263, align 8
  %265 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %264, i64 8, i32 0
  %266 = getelementptr inbounds i8, i8* %265, i64 3
  %267 = load i8, i8* %266, align 1
  %268 = icmp eq i8 %267, 0
  br i1 %268, label %260, label %269

269:                                              ; preds = %260
  %270 = ptrtoint %"class.absl::container_internal::btree_node"* %264 to i64
  br label %274

271:                                              ; preds = %244
  %272 = ptrtoint %"class.absl::container_internal::btree_node"* %239 to i64
  %273 = zext i8 %245 to i32
  br label %274

274:                                              ; preds = %235, %271, %269, %231, %249
  %275 = phi i64 [ %189, %231 ], [ %255, %249 ], [ %270, %269 ], [ %272, %271 ], [ %189, %235 ]
  %276 = phi i32 [ %230, %231 ], [ 0, %249 ], [ 0, %269 ], [ %273, %271 ], [ %230, %235 ]
  %277 = inttoptr i64 %275 to %"class.absl::container_internal::btree_node"*
  %278 = icmp ne %"class.absl::container_internal::btree_node"* %173, %277
  %279 = icmp ne i32 %276, %177
  %280 = or i1 %278, %279
  br i1 %280, label %186, label %282

281:                                              ; preds = %220
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #13
  br label %287

282:                                              ; preds = %274, %182
  %283 = phi i64 [ %183, %182 ], [ %226, %274 ]
  %284 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 6
  %285 = load i64, i64* %284, align 8
  %286 = add i64 %285, %283
  store i64 %286, i64* %284, align 8
  br label %287

287:                                              ; preds = %281, %167, %282
  %288 = phi i32 [ 93, %167 ], [ 95, %281 ], [ 0, %282 ]
  %289 = load i64, i64* %154, align 8
  %290 = icmp eq i64 %289, 0
  br i1 %290, label %294, label %291

291:                                              ; preds = %287
  %292 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %152, align 8
  %293 = bitcast %"class.quic::QuicIntervalSet"* %12 to %"class.std::__1::allocator"*
  call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %292, %"class.std::__1::allocator"* nonnull %293) #13
  br label %294

294:                                              ; preds = %150, %287, %291
  %295 = phi i32 [ %288, %287 ], [ %288, %291 ], [ 0, %150 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %151) #13
  br label %296

296:                                              ; preds = %136, %27, %15, %294, %148
  %297 = phi i32 [ %149, %148 ], [ %295, %294 ], [ 50, %15 ], [ 1, %27 ], [ 93, %136 ]
  ret i32 %297
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4quic15QuicIntervalSetImE10IsDisjointERKNS_12QuicIntervalImEE(%"class.quic::QuicIntervalSet"*, %"class.quic::QuicInterval"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ult i64 %4, %6
  br i1 %7, label %8, label %189

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %10

10:                                               ; preds = %42, %8
  %11 = phi %"class.absl::container_internal::btree_node"** [ %9, %8 ], [ %46, %42 ]
  %12 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %11, align 8
  %13 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %12, i64 8, i32 0
  %14 = getelementptr inbounds i8, i8* %13, i64 2
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %34, label %17

17:                                               ; preds = %10
  %18 = zext i8 %15 to i32
  %19 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %12, i64 16, i32 0
  %20 = bitcast i8* %19 to %"class.quic::QuicInterval"*
  br label %21

21:                                               ; preds = %21, %17
  %22 = phi i32 [ 0, %17 ], [ %32, %21 ]
  %23 = phi i32 [ %18, %17 ], [ %31, %21 ]
  %24 = add nsw i32 %23, %22
  %25 = ashr i32 %24, 1
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %20, i64 %26, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = icmp uge i64 %4, %28
  %30 = add nsw i32 %25, 1
  %31 = select i1 %29, i32 %23, i32 %25
  %32 = select i1 %29, i32 %30, i32 %22
  %33 = icmp eq i32 %32, %31
  br i1 %33, label %34, label %21

34:                                               ; preds = %21, %10
  %35 = phi i32 [ 0, %10 ], [ %31, %21 ]
  %36 = getelementptr inbounds i8, i8* %13, i64 3
  %37 = load i8, i8* %36, align 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %42, label %39

39:                                               ; preds = %34
  %40 = zext i8 %15 to i32
  %41 = icmp eq i32 %35, %40
  br i1 %41, label %47, label %63

42:                                               ; preds = %34
  %43 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %12, i64 256, i32 0
  %44 = bitcast i8* %43 to %"class.absl::container_internal::btree_node"**
  %45 = sext i32 %35 to i64
  %46 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %44, i64 %45
  br label %10

47:                                               ; preds = %39, %55
  %48 = phi %"class.absl::container_internal::btree_node"* [ %50, %55 ], [ %12, %39 ]
  %49 = bitcast %"class.absl::container_internal::btree_node"* %48 to %"class.absl::container_internal::btree_node"**
  %50 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %49, align 8
  %51 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %50, i64 8, i32 0
  %52 = getelementptr inbounds i8, i8* %51, i64 3
  %53 = load i8, i8* %52, align 1
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %55, label %67

55:                                               ; preds = %47
  %56 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %48, i64 8, i32 0
  %57 = load i8, i8* %56, align 1
  %58 = getelementptr inbounds i8, i8* %51, i64 2
  %59 = load i8, i8* %58, align 1
  %60 = icmp eq i8 %57, %59
  br i1 %60, label %47, label %61

61:                                               ; preds = %55
  %62 = zext i8 %57 to i32
  br label %63

63:                                               ; preds = %61, %39
  %64 = phi i32 [ %62, %61 ], [ %35, %39 ]
  %65 = phi %"class.absl::container_internal::btree_node"* [ %50, %61 ], [ %12, %39 ]
  %66 = icmp eq %"class.absl::container_internal::btree_node"* %65, null
  br i1 %66, label %67, label %74

67:                                               ; preds = %47, %63
  %68 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %69 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %68, align 8
  %70 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %69, i64 8, i32 0
  %71 = getelementptr inbounds i8, i8* %70, i64 2
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  br label %74

74:                                               ; preds = %63, %67
  %75 = phi %"class.absl::container_internal::btree_node"* [ %69, %67 ], [ %65, %63 ]
  %76 = phi i32 [ %73, %67 ], [ %64, %63 ]
  %77 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %78 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %77, align 8
  %79 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %78, i64 8, i32 0
  %80 = getelementptr inbounds i8, i8* %79, i64 2
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = icmp ne %"class.absl::container_internal::btree_node"* %75, %78
  %84 = icmp ne i32 %76, %82
  %85 = or i1 %83, %84
  br i1 %85, label %86, label %106

86:                                               ; preds = %74
  %87 = icmp eq %"class.absl::container_internal::btree_node"* %75, null
  br i1 %87, label %88, label %89, !prof !10

88:                                               ; preds = %86
  tail call void @llvm.trap() #13
  unreachable

89:                                               ; preds = %86
  %90 = icmp slt i32 %76, 0
  br i1 %90, label %91, label %92, !prof !10

91:                                               ; preds = %89
  tail call void @llvm.trap() #13
  unreachable

92:                                               ; preds = %89
  %93 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %75, i64 8, i32 0
  %94 = getelementptr inbounds i8, i8* %93, i64 2
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = icmp slt i32 %76, %96
  br i1 %97, label %99, label %98, !prof !11

98:                                               ; preds = %92
  tail call void @llvm.trap() #13
  unreachable

99:                                               ; preds = %92
  %100 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %75, i64 16, i32 0
  %101 = bitcast i8* %100 to %"class.quic::QuicInterval"*
  %102 = sext i32 %76 to i64
  %103 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %101, i64 %102, i32 0
  %104 = load i64, i64* %103, align 8
  %105 = icmp ugt i64 %6, %104
  br i1 %105, label %189, label %106

106:                                              ; preds = %74, %99
  %107 = bitcast %"class.quic::QuicIntervalSet"* %0 to %"class.absl::container_internal::btree_node"***
  %108 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %107, align 8
  %109 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %108, align 8
  %110 = icmp eq %"class.absl::container_internal::btree_node"* %75, %109
  %111 = icmp eq i32 %76, 0
  %112 = and i1 %111, %110
  br i1 %112, label %189, label %113

113:                                              ; preds = %106
  %114 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %75, i64 8, i32 0
  %115 = getelementptr inbounds i8, i8* %114, i64 3
  %116 = load i8, i8* %115, align 1
  %117 = icmp eq i8 %116, 0
  br i1 %117, label %133, label %118

118:                                              ; preds = %113
  %119 = add nsw i32 %76, -1
  %120 = icmp sgt i32 %76, 0
  br i1 %120, label %167, label %121

121:                                              ; preds = %118, %129
  %122 = phi %"class.absl::container_internal::btree_node"* [ %124, %129 ], [ %75, %118 ]
  %123 = bitcast %"class.absl::container_internal::btree_node"* %122 to %"class.absl::container_internal::btree_node"**
  %124 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %123, align 8
  %125 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %124, i64 8, i32 0
  %126 = getelementptr inbounds i8, i8* %125, i64 3
  %127 = load i8, i8* %126, align 1
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %129, label %167

129:                                              ; preds = %121
  %130 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %122, i64 8, i32 0
  %131 = load i8, i8* %130, align 1
  %132 = icmp eq i8 %131, 0
  br i1 %132, label %121, label %164

133:                                              ; preds = %113
  %134 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %75, i64 256, i32 0
  %135 = bitcast i8* %134 to %"class.absl::container_internal::btree_node"**
  %136 = sext i32 %76 to i64
  %137 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %135, i64 %136
  %138 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %137, align 8
  %139 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %138, i64 8, i32 0
  %140 = getelementptr inbounds i8, i8* %139, i64 3
  %141 = load i8, i8* %140, align 1
  %142 = icmp eq i8 %141, 0
  %143 = getelementptr inbounds i8, i8* %139, i64 2
  %144 = load i8, i8* %143, align 1
  br i1 %142, label %145, label %159

145:                                              ; preds = %133, %145
  %146 = phi i8 [ %158, %145 ], [ %144, %133 ]
  %147 = phi %"class.absl::container_internal::btree_node"* [ %152, %145 ], [ %138, %133 ]
  %148 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %147, i64 256, i32 0
  %149 = bitcast i8* %148 to %"class.absl::container_internal::btree_node"**
  %150 = zext i8 %146 to i64
  %151 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %149, i64 %150
  %152 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %151, align 8
  %153 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %152, i64 8, i32 0
  %154 = getelementptr inbounds i8, i8* %153, i64 3
  %155 = load i8, i8* %154, align 1
  %156 = icmp eq i8 %155, 0
  %157 = getelementptr inbounds i8, i8* %153, i64 2
  %158 = load i8, i8* %157, align 1
  br i1 %156, label %145, label %159

159:                                              ; preds = %145, %133
  %160 = phi %"class.absl::container_internal::btree_node"* [ %138, %133 ], [ %152, %145 ]
  %161 = phi i8 [ %144, %133 ], [ %158, %145 ]
  %162 = zext i8 %161 to i32
  %163 = add nsw i32 %162, -1
  br label %167

164:                                              ; preds = %129
  %165 = zext i8 %131 to i32
  %166 = add nsw i32 %165, -1
  br label %167

167:                                              ; preds = %121, %164, %118, %159
  %168 = phi %"class.absl::container_internal::btree_node"* [ %160, %159 ], [ %75, %118 ], [ %124, %164 ], [ %75, %121 ]
  %169 = phi i32 [ %163, %159 ], [ %119, %118 ], [ %166, %164 ], [ %119, %121 ]
  %170 = icmp eq %"class.absl::container_internal::btree_node"* %168, null
  br i1 %170, label %171, label %172, !prof !10

171:                                              ; preds = %167
  tail call void @llvm.trap() #13
  unreachable

172:                                              ; preds = %167
  %173 = icmp slt i32 %169, 0
  br i1 %173, label %174, label %175, !prof !10

174:                                              ; preds = %172
  tail call void @llvm.trap() #13
  unreachable

175:                                              ; preds = %172
  %176 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %168, i64 8, i32 0
  %177 = getelementptr inbounds i8, i8* %176, i64 2
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i32
  %180 = icmp slt i32 %169, %179
  br i1 %180, label %182, label %181, !prof !11

181:                                              ; preds = %175
  tail call void @llvm.trap() #13
  unreachable

182:                                              ; preds = %175
  %183 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %168, i64 16, i32 0
  %184 = bitcast i8* %183 to %"class.quic::QuicInterval"*
  %185 = sext i32 %169 to i64
  %186 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %184, i64 %185, i32 1
  %187 = load i64, i64* %186, align 8
  %188 = icmp ule i64 %187, %4
  br label %189

189:                                              ; preds = %2, %106, %182, %99
  %190 = phi i1 [ true, %2 ], [ %188, %182 ], [ false, %99 ], [ true, %106 ]
  ret i1 %190
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4quic25QuicStreamSequencerBuffer14CopyStreamDataEmN4absl11string_viewEPmPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.quic::QuicStreamSequencerBuffer"*, i64, i8*, i64, i64* nocapture, %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %7 = alloca [6 x %"class.absl::string_view"], align 16
  %8 = alloca %"class.absl::AlphaNum", align 8
  %9 = alloca i64, align 8
  %10 = alloca %"class.std::__1::basic_string", align 8
  %11 = alloca %"class.absl::AlphaNum", align 16
  %12 = alloca %"class.absl::AlphaNum", align 8
  %13 = alloca %"class.std::__1::basic_string", align 8
  %14 = alloca %"class.absl::AlphaNum", align 8
  %15 = alloca %"class.absl::AlphaNum", align 8
  %16 = alloca %"class.absl::AlphaNum", align 8
  %17 = alloca %"class.absl::AlphaNum", align 8
  %18 = alloca %"class.absl::AlphaNum", align 8
  %19 = alloca %"class.std::__1::basic_string", align 8
  store i64 %1, i64* %9, align 8
  store i64 0, i64* %4, align 8
  %20 = icmp eq i64 %3, 0
  br i1 %20, label %228, label %21

21:                                               ; preds = %6
  %22 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 0
  %23 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 4
  %24 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 2
  %25 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 1
  %26 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 3
  %27 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %28 = bitcast %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %27 to i8**
  br label %29

29:                                               ; preds = %21, %220
  %30 = phi i64 [ %1, %21 ], [ %224, %220 ]
  %31 = phi i8* [ %2, %21 ], [ %221, %220 ]
  %32 = phi i64 [ %3, %21 ], [ %222, %220 ]
  %33 = load i64, i64* %22, align 8
  %34 = urem i64 %30, %33
  %35 = lshr i64 %34, 13
  %36 = and i64 %34, 8191
  %37 = load i8, i8* %23, align 8, !range !2
  %38 = icmp eq i8 %37, 0
  %39 = select i1 %38, i64* %25, i64* %24
  %40 = load i64, i64* %39, align 8
  %41 = add nuw nsw i64 %35, 1
  %42 = load i64, i64* %25, align 8
  %43 = icmp eq i64 %41, %42
  br i1 %43, label %44, label %48

44:                                               ; preds = %29
  %45 = and i64 %33, 8191
  %46 = icmp eq i64 %45, 0
  %47 = select i1 %46, i64 8192, i64 %45
  br label %48

48:                                               ; preds = %29, %44
  %49 = phi i64 [ %47, %44 ], [ 8192, %29 ]
  %50 = sub nsw i64 %49, %36
  %51 = add i64 %50, %30
  %52 = load i64, i64* %26, align 8
  %53 = add i64 %52, %33
  %54 = icmp ugt i64 %51, %53
  %55 = sub i64 %53, %30
  %56 = select i1 %54, i64 %55, i64 %50
  br i1 %38, label %57, label %78

57:                                               ; preds = %48
  %58 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %27, align 8
  %59 = icmp eq %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %58, null
  br i1 %59, label %60, label %78

60:                                               ; preds = %57
  %61 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %42, i64 8)
  %62 = extractvalue { i64, i1 } %61, 1
  %63 = extractvalue { i64, i1 } %61, 0
  %64 = select i1 %62, i64 -1, i64 %63
  %65 = tail call i8* @_Znam(i64 %64) #12
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %65, i8 0, i64 %64, i1 false)
  store i8* %65, i8** %28, align 8
  %66 = icmp eq i64 %42, 0
  br i1 %66, label %78, label %67

67:                                               ; preds = %60
  %68 = bitcast i8* %65 to %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**
  store %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* null, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %68, align 8
  %69 = load i64, i64* %25, align 8
  %70 = icmp ugt i64 %69, 1
  br i1 %70, label %71, label %78

71:                                               ; preds = %67, %71
  %72 = phi i64 [ %75, %71 ], [ 1, %67 ]
  %73 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %27, align 8
  %74 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %73, i64 %72
  store %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* null, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %74, align 8
  %75 = add nuw i64 %72, 1
  %76 = load i64, i64* %25, align 8
  %77 = icmp ult i64 %75, %76
  br i1 %77, label %71, label %78

78:                                               ; preds = %71, %67, %60, %48, %57
  %79 = icmp ult i64 %35, %40
  br i1 %79, label %141, label %80

80:                                               ; preds = %78
  %81 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %81) #13
  %82 = bitcast %"class.absl::AlphaNum"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %82) #13
  %83 = load i64, i64* %9, align 8
  %84 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %11, i64 0, i32 1, i64 0
  %85 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEmPc(i64 %83, i8* %84) #13
  %86 = ptrtoint i8* %85 to i64
  %87 = ptrtoint i8* %84 to i64
  %88 = sub i64 %86, %87
  %89 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %11, i64 0, i32 0, i32 0
  store i8* %84, i8** %89, align 16
  %90 = icmp sgt i64 %88, -1
  br i1 %90, label %92, label %91, !prof !11

91:                                               ; preds = %80
  call void @llvm.trap() #13
  unreachable

92:                                               ; preds = %80
  %93 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %11, i64 0, i32 0, i32 1
  store i64 %88, i64* %93, align 8
  %94 = bitcast %"class.absl::AlphaNum"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %94) #13
  %95 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %12, i64 0, i32 1, i64 0
  %96 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEmPc(i64 %35, i8* %95) #13
  %97 = ptrtoint i8* %96 to i64
  %98 = ptrtoint i8* %95 to i64
  %99 = sub i64 %97, %98
  %100 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %12, i64 0, i32 0, i32 0
  store i8* %95, i8** %100, align 8
  %101 = icmp sgt i64 %99, -1
  br i1 %101, label %103, label %102, !prof !11

102:                                              ; preds = %92
  call void @llvm.trap() #13
  unreachable

103:                                              ; preds = %92
  %104 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %12, i64 0, i32 0, i32 1
  store i64 %99, i64* %104, align 8
  %105 = bitcast [6 x %"class.absl::string_view"]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %105) #13, !noalias !12
  %106 = bitcast [6 x %"class.absl::string_view"]* %7 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint ([84 x i8]* @.str.5 to i64), i64 83>, <2 x i64>* %106, align 16, !noalias !12
  %107 = bitcast %"class.absl::AlphaNum"* %11 to <2 x i64>*
  %108 = load <2 x i64>, <2 x i64>* %107, align 16, !noalias !12
  %109 = getelementptr inbounds [6 x %"class.absl::string_view"], [6 x %"class.absl::string_view"]* %7, i64 0, i64 1, i32 0
  %110 = bitcast i8** %109 to <2 x i64>*
  store <2 x i64> %108, <2 x i64>* %110, align 16, !noalias !12
  %111 = getelementptr inbounds [6 x %"class.absl::string_view"], [6 x %"class.absl::string_view"]* %7, i64 0, i64 2, i32 0
  %112 = bitcast i8** %111 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint ([20 x i8]* @.str.6 to i64), i64 19>, <2 x i64>* %112, align 16, !noalias !12
  %113 = getelementptr inbounds [6 x %"class.absl::string_view"], [6 x %"class.absl::string_view"]* %7, i64 0, i64 3, i32 0
  %114 = bitcast i8** %113 to i64*
  store i64 %98, i64* %114, align 16, !noalias !12
  %115 = getelementptr inbounds [6 x %"class.absl::string_view"], [6 x %"class.absl::string_view"]* %7, i64 0, i64 3, i32 1
  store i64 %99, i64* %115, align 8, !noalias !12
  %116 = getelementptr inbounds [6 x %"class.absl::string_view"], [6 x %"class.absl::string_view"]* %7, i64 0, i64 4, i32 0
  %117 = bitcast i8** %116 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint ([26 x i8]* @.str.7 to i64), i64 25>, <2 x i64>* %117, align 16, !noalias !12
  %118 = bitcast %"class.absl::AlphaNum"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %118) #13, !noalias !12
  %119 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %8, i64 0, i32 1, i64 0
  %120 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEmPc(i64 %40, i8* %119) #13, !noalias !12
  %121 = ptrtoint i8* %120 to i64
  %122 = ptrtoint i8* %119 to i64
  %123 = sub i64 %121, %122
  %124 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %8, i64 0, i32 0, i32 0
  store i8* %119, i8** %124, align 8, !noalias !12
  %125 = icmp sgt i64 %123, -1
  br i1 %125, label %127, label %126, !prof !11

126:                                              ; preds = %103
  call void @llvm.trap() #13
  unreachable

127:                                              ; preds = %103
  %128 = getelementptr inbounds [6 x %"class.absl::string_view"], [6 x %"class.absl::string_view"]* %7, i64 0, i64 0
  %129 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %8, i64 0, i32 0, i32 1
  store i64 %123, i64* %129, align 8, !noalias !12
  %130 = getelementptr inbounds [6 x %"class.absl::string_view"], [6 x %"class.absl::string_view"]* %7, i64 0, i64 5, i32 0
  store i8* %119, i8** %130, align 16, !noalias !12
  %131 = getelementptr inbounds [6 x %"class.absl::string_view"], [6 x %"class.absl::string_view"]* %7, i64 0, i64 5, i32 1
  store i64 %123, i64* %131, align 8, !noalias !12
  call void @_ZN4absl16strings_internal9CatPiecesESt16initializer_listINS_11string_viewEE(%"class.std::__1::basic_string"* nonnull sret %10, %"class.absl::string_view"* nonnull %128, i64 6) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %118) #13, !noalias !12
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %105) #13, !noalias !12
  %132 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %133 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %132, i64 0, i32 1, i32 0
  %134 = load i8, i8* %133, align 1
  %135 = icmp slt i8 %134, 0
  br i1 %135, label %136, label %139

136:                                              ; preds = %127
  %137 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %138 = load i8*, i8** %137, align 8
  call void @_ZdlPv(i8* %138) #12
  br label %139

139:                                              ; preds = %136, %127
  %140 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %140, i8* nonnull align 8 %81, i64 24, i1 false) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %94) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %82) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %81) #13
  br label %228

141:                                              ; preds = %78
  %142 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %27, align 8
  %143 = icmp eq %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %142, null
  br i1 %143, label %144, label %146

144:                                              ; preds = %141
  %145 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %5, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.8, i64 0, i64 0), i64 63) #13
  br label %228

146:                                              ; preds = %141
  %147 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %142, i64 %35
  %148 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %147, align 8
  %149 = icmp eq %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* %148, null
  br i1 %149, label %150, label %156

150:                                              ; preds = %146
  %151 = tail call i8* @_Znwm(i64 8192) #12
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %151, i8 0, i64 8192, i1 false)
  %152 = bitcast %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %147 to i8**
  store i8* %151, i8** %152, align 8
  %153 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %27, align 8
  %154 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %153, i64 %35
  %155 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %154, align 8
  br label %156

156:                                              ; preds = %150, %146
  %157 = phi %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* [ %155, %150 ], [ %148, %146 ]
  %158 = icmp ult i64 %32, %56
  %159 = select i1 %158, i64 %32, i64 %56
  %160 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock", %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* %157, i64 0, i32 0, i64 %36
  %161 = icmp eq i8* %160, null
  %162 = icmp eq i8* %31, null
  %163 = or i1 %162, %161
  br i1 %163, label %164, label %220

164:                                              ; preds = %156
  %165 = bitcast %"class.std::__1::basic_string"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %165) #13
  %166 = bitcast %"class.absl::AlphaNum"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %166) #13
  %167 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %14, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.9, i64 0, i64 0), i8** %167, align 8
  %168 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %14, i64 0, i32 0, i32 1
  store i64 65, i64* %168, align 8
  %169 = bitcast %"class.absl::AlphaNum"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %169) #13
  %170 = zext i1 %161 to i32
  %171 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %15, i64 0, i32 1, i64 0
  %172 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %170, i8* %171) #13
  %173 = ptrtoint i8* %172 to i64
  %174 = ptrtoint i8* %171 to i64
  %175 = sub i64 %173, %174
  %176 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %15, i64 0, i32 0, i32 0
  store i8* %171, i8** %176, align 8
  %177 = icmp sgt i64 %175, -1
  br i1 %177, label %179, label %178, !prof !11

178:                                              ; preds = %164
  call void @llvm.trap() #13
  unreachable

179:                                              ; preds = %164
  %180 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %15, i64 0, i32 0, i32 1
  store i64 %175, i64* %180, align 8
  %181 = bitcast %"class.absl::AlphaNum"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %181) #13
  %182 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %16, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i64 0, i64 0), i8** %182, align 8
  %183 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %16, i64 0, i32 0, i32 1
  store i64 20, i64* %183, align 8
  %184 = bitcast %"class.absl::AlphaNum"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %184) #13
  %185 = zext i1 %162 to i32
  %186 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %17, i64 0, i32 1, i64 0
  %187 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %185, i8* %186) #13
  %188 = ptrtoint i8* %187 to i64
  %189 = ptrtoint i8* %186 to i64
  %190 = sub i64 %188, %189
  %191 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %17, i64 0, i32 0, i32 0
  store i8* %186, i8** %191, align 8
  %192 = icmp sgt i64 %190, -1
  br i1 %192, label %194, label %193, !prof !11

193:                                              ; preds = %179
  call void @llvm.trap() #13
  unreachable

194:                                              ; preds = %179
  %195 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %17, i64 0, i32 0, i32 1
  store i64 %190, i64* %195, align 8
  %196 = bitcast %"class.absl::AlphaNum"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %196) #13
  %197 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %18, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.11, i64 0, i64 0), i8** %197, align 8
  %198 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %18, i64 0, i32 0, i32 1
  store i64 19, i64* %198, align 8
  %199 = bitcast %"class.std::__1::basic_string"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %199) #13
  %200 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7
  call void @_ZNK4quic15QuicIntervalSetImE8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %19, %"class.quic::QuicIntervalSet"* %200) #13
  call void @_ZN4absl6StrCatIJmA19_cNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEA22_cmEEES8_RKNS_8AlphaNumESC_SC_SC_SC_DpRKT_(%"class.std::__1::basic_string"* nonnull sret %13, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %14, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %15, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %16, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %17, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %18, i64* nonnull dereferenceable(8) %9, [19 x i8]* nonnull dereferenceable(19) @.str.12, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %19, [22 x i8]* nonnull dereferenceable(22) @.str.13, i64* dereferenceable(8) %26)
  %201 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %202 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %201, i64 0, i32 1, i32 0
  %203 = load i8, i8* %202, align 1
  %204 = icmp slt i8 %203, 0
  br i1 %204, label %205, label %208

205:                                              ; preds = %194
  %206 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %207 = load i8*, i8** %206, align 8
  call void @_ZdlPv(i8* %207) #12
  br label %208

208:                                              ; preds = %205, %194
  %209 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %209, i8* nonnull align 8 %165, i64 24, i1 false) #13
  %210 = bitcast %"class.std::__1::basic_string"* %13 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %211 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %210, i64 0, i32 1, i32 0
  store i8 0, i8* %211, align 1
  store i8 0, i8* %165, align 8
  %212 = bitcast %"class.std::__1::basic_string"* %19 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %213 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %212, i64 0, i32 1, i32 0
  %214 = load i8, i8* %213, align 1
  %215 = icmp slt i8 %214, 0
  br i1 %215, label %216, label %219

216:                                              ; preds = %208
  %217 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %218 = load i8*, i8** %217, align 8
  call void @_ZdlPv(i8* %218) #12
  br label %219

219:                                              ; preds = %208, %216
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %199) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %196) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %184) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %181) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %169) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %166) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %165) #13
  br label %228

220:                                              ; preds = %156
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %160, i8* nonnull align 1 %31, i64 %159, i1 false)
  %221 = getelementptr inbounds i8, i8* %31, i64 %159
  %222 = sub i64 %32, %159
  %223 = load i64, i64* %9, align 8
  %224 = add i64 %223, %159
  store i64 %224, i64* %9, align 8
  %225 = load i64, i64* %4, align 8
  %226 = add i64 %225, %159
  store i64 %226, i64* %4, align 8
  %227 = icmp eq i64 %222, 0
  br i1 %227, label %228, label %29

228:                                              ; preds = %220, %144, %219, %139, %6
  %229 = phi i1 [ true, %6 ], [ false, %139 ], [ false, %219 ], [ false, %144 ], [ true, %220 ]
  ret i1 %229
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4quic15QuicIntervalSetImE10DifferenceERKS1_(%"class.quic::QuicIntervalSet"*, %"class.quic::QuicIntervalSet"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"struct.std::__1::pair", align 8
  %4 = alloca %"struct.std::__1::pair", align 8
  %5 = alloca %"class.absl::btree_set", align 16
  %6 = alloca %"class.absl::btree_set", align 16
  %7 = alloca %"class.quic::QuicInterval", align 8
  %8 = alloca %"class.quic::QuicInterval", align 8
  %9 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %325, label %12

12:                                               ; preds = %2
  %13 = bitcast %"class.absl::btree_set"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #13
  %14 = getelementptr inbounds %"class.absl::btree_set", %"class.absl::btree_set"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.absl::btree_set", %"class.absl::btree_set"* %6, i64 0, i32 0, i32 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.absl::btree_set", %"class.absl::btree_set"* %6, i64 0, i32 0, i32 0, i32 0, i32 2
  %17 = bitcast %"class.absl::btree_set"* %6 to i64*
  store i64 ptrtoint ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to i64), i64* %17, align 16
  store %"class.absl::container_internal::btree_node"* bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*), %"class.absl::container_internal::btree_node"** %15, align 8
  store i64 0, i64* %16, align 16
  %18 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0
  %19 = bitcast %"class.quic::QuicIntervalSet"* %0 to %"class.absl::container_internal::btree_node"***
  %20 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %19, align 8
  %21 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %20, align 8
  %22 = ptrtoint %"class.absl::container_internal::btree_node"* %21 to i64
  %23 = bitcast %"class.quic::QuicInterval"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #13
  %24 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %7, i64 0, i32 0
  %25 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %7, i64 0, i32 1
  %26 = icmp eq %"class.absl::container_internal::btree_node"* %21, null
  %27 = bitcast %"class.quic::QuicInterval"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 16, i1 false)
  br i1 %26, label %28, label %29, !prof !10

28:                                               ; preds = %12
  tail call void @llvm.trap() #13
  unreachable

29:                                               ; preds = %12
  %30 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %21, i64 8, i32 0
  %31 = getelementptr inbounds i8, i8* %30, i64 2
  %32 = load i8, i8* %31, align 1
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %35, !prof !10

34:                                               ; preds = %29
  tail call void @llvm.trap() #13
  unreachable

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %21, i64 16, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %23, i8* align 8 %36, i64 16, i1 false)
  %37 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %37, align 8
  %39 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %38, i64 8, i32 0
  %40 = getelementptr inbounds i8, i8* %39, i64 2
  %41 = load i8, i8* %40, align 1
  %42 = icmp ne %"class.absl::container_internal::btree_node"* %38, %21
  %43 = icmp ne i8 %41, 0
  %44 = or i1 %42, %43
  br i1 %44, label %47, label %45

45:                                               ; preds = %35
  %46 = ptrtoint %"class.absl::container_internal::btree_node"* %38 to i64
  br label %281

47:                                               ; preds = %35
  %48 = bitcast %"class.quic::QuicIntervalSet"* %1 to i64**
  %49 = load i64*, i64** %48, align 8
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %52 = bitcast %"class.quic::QuicInterval"* %8 to i8*
  %53 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %8, i64 0, i32 0
  %54 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %8, i64 0, i32 1
  %55 = bitcast %"struct.std::__1::pair"* %4 to i8*
  %56 = getelementptr inbounds %"class.absl::btree_set", %"class.absl::btree_set"* %6, i64 0, i32 0, i32 0, i32 0
  %57 = bitcast %"struct.std::__1::pair"* %3 to i8*
  br label %58

58:                                               ; preds = %47, %262
  %59 = phi %"class.absl::container_internal::btree_node"* [ %21, %47 ], [ %265, %262 ]
  %60 = phi i32 [ 0, %47 ], [ %269, %262 ]
  %61 = phi i64 [ %22, %47 ], [ %268, %262 ]
  %62 = phi i32 [ 0, %47 ], [ %263, %262 ]
  %63 = phi i64 [ %50, %47 ], [ %264, %262 ]
  %64 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %51, align 8
  %65 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %64, i64 8, i32 0
  %66 = getelementptr inbounds i8, i8* %65, i64 2
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = inttoptr i64 %63 to %"class.absl::container_internal::btree_node"*
  %70 = icmp eq %"class.absl::container_internal::btree_node"* %64, %69
  %71 = icmp eq i32 %62, %68
  %72 = and i1 %70, %71
  br i1 %72, label %94, label %73

73:                                               ; preds = %58
  %74 = load i64, i64* %25, align 8
  %75 = icmp eq i64 %63, 0
  br i1 %75, label %76, label %77, !prof !10

76:                                               ; preds = %73
  call void @llvm.trap() #13
  unreachable

77:                                               ; preds = %73
  %78 = icmp slt i32 %62, 0
  br i1 %78, label %79, label %80, !prof !10

79:                                               ; preds = %77
  call void @llvm.trap() #13
  unreachable

80:                                               ; preds = %77
  %81 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %69, i64 8, i32 0
  %82 = getelementptr inbounds i8, i8* %81, i64 2
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = icmp slt i32 %62, %84
  br i1 %85, label %87, label %86, !prof !11

86:                                               ; preds = %80
  call void @llvm.trap() #13
  unreachable

87:                                               ; preds = %80
  %88 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %69, i64 16, i32 0
  %89 = bitcast i8* %88 to %"class.quic::QuicInterval"*
  %90 = sext i32 %62 to i64
  %91 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %89, i64 %90, i32 0
  %92 = load i64, i64* %91, align 8
  %93 = icmp ugt i64 %74, %92
  br i1 %93, label %100, label %94

94:                                               ; preds = %87, %58
  %95 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %15, align 8
  %96 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %95, i64 8, i32 0
  %97 = getelementptr inbounds i8, i8* %96, i64 2
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %57) #13
  call void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18insert_hint_uniqueIS5_JRKS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEESN_RKT_DpOT0_(%"struct.std::__1::pair"* nonnull sret %3, %"class.absl::container_internal::btree"* nonnull %56, %"class.absl::container_internal::btree_node"* %95, i32 %99, %"class.quic::QuicInterval"* nonnull dereferenceable(16) %7, %"class.quic::QuicInterval"* nonnull dereferenceable(16) %7) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %57) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 0, i64 16, i1 false) #13
  br label %178

100:                                              ; preds = %87
  %101 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %89, i64 %90, i32 1
  %102 = load i64, i64* %101, align 8
  %103 = load i64, i64* %24, align 8
  %104 = icmp ugt i64 %102, %103
  br i1 %104, label %146, label %105

105:                                              ; preds = %100
  %106 = getelementptr inbounds i8, i8* %81, i64 3
  %107 = load i8, i8* %106, align 1
  %108 = icmp eq i8 %107, 0
  %109 = add nuw nsw i32 %62, 1
  br i1 %108, label %126, label %110

110:                                              ; preds = %105
  %111 = icmp eq i32 %109, %84
  br i1 %111, label %112, label %168

112:                                              ; preds = %110, %121
  %113 = phi i8* [ %117, %121 ], [ %81, %110 ]
  %114 = phi %"class.absl::container_internal::btree_node"* [ %116, %121 ], [ %69, %110 ]
  %115 = bitcast %"class.absl::container_internal::btree_node"* %114 to %"class.absl::container_internal::btree_node"**
  %116 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %115, align 8
  %117 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %116, i64 8, i32 0
  %118 = getelementptr inbounds i8, i8* %117, i64 3
  %119 = load i8, i8* %118, align 1
  %120 = icmp eq i8 %119, 0
  br i1 %120, label %121, label %168

121:                                              ; preds = %112
  %122 = load i8, i8* %113, align 1
  %123 = getelementptr inbounds i8, i8* %117, i64 2
  %124 = load i8, i8* %123, align 1
  %125 = icmp eq i8 %122, %124
  br i1 %125, label %112, label %165

126:                                              ; preds = %105
  %127 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %69, i64 256, i32 0
  %128 = bitcast i8* %127 to %"class.absl::container_internal::btree_node"**
  %129 = sext i32 %109 to i64
  %130 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %128, i64 %129
  %131 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %130, align 8
  %132 = ptrtoint %"class.absl::container_internal::btree_node"* %131 to i64
  %133 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %131, i64 8, i32 0
  %134 = getelementptr inbounds i8, i8* %133, i64 3
  %135 = load i8, i8* %134, align 1
  %136 = icmp eq i8 %135, 0
  br i1 %136, label %137, label %168

137:                                              ; preds = %126, %137
  %138 = phi %"class.absl::container_internal::btree_node"* [ %141, %137 ], [ %131, %126 ]
  %139 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %138, i64 256, i32 0
  %140 = bitcast i8* %139 to %"class.absl::container_internal::btree_node"**
  %141 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %140, align 8
  %142 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %141, i64 8, i32 0
  %143 = getelementptr inbounds i8, i8* %142, i64 3
  %144 = load i8, i8* %143, align 1
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %137, label %163

146:                                              ; preds = %100
  %147 = icmp ult i64 %103, %92
  br i1 %147, label %148, label %162

148:                                              ; preds = %146
  %149 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %15, align 8
  %150 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %149, i64 8, i32 0
  %151 = getelementptr inbounds i8, i8* %150, i64 2
  %152 = load i8, i8* %151, align 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52) #13
  %153 = zext i8 %152 to i32
  store i64 %103, i64* %53, align 8
  %154 = load i64, i64* %91, align 8
  store i64 %154, i64* %54, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %55) #13
  call void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18insert_hint_uniqueIS5_JS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEESL_RKT_DpOT0_(%"struct.std::__1::pair"* nonnull sret %4, %"class.absl::container_internal::btree"* nonnull %56, %"class.absl::container_internal::btree_node"* %149, i32 %153, %"class.quic::QuicInterval"* nonnull dereferenceable(16) %8, %"class.quic::QuicInterval"* nonnull dereferenceable(16) %8) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %55) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52) #13
  %155 = load i8, i8* %82, align 1
  %156 = zext i8 %155 to i32
  %157 = icmp slt i32 %62, %156
  br i1 %157, label %159, label %158, !prof !11

158:                                              ; preds = %148
  call void @llvm.trap() #13
  unreachable

159:                                              ; preds = %148
  %160 = load i64, i64* %101, align 8
  store i64 %160, i64* %24, align 8
  %161 = load i64, i64* %25, align 8
  br label %168

162:                                              ; preds = %146
  store i64 %102, i64* %24, align 8
  br label %168

163:                                              ; preds = %137
  %164 = ptrtoint %"class.absl::container_internal::btree_node"* %141 to i64
  br label %168

165:                                              ; preds = %121
  %166 = ptrtoint %"class.absl::container_internal::btree_node"* %116 to i64
  %167 = zext i8 %122 to i32
  br label %168

168:                                              ; preds = %112, %165, %163, %110, %126, %162, %159
  %169 = phi i64 [ %161, %159 ], [ %74, %162 ], [ %74, %110 ], [ %74, %126 ], [ %74, %163 ], [ %74, %165 ], [ %74, %112 ]
  %170 = phi i64 [ %160, %159 ], [ %102, %162 ], [ %103, %110 ], [ %103, %126 ], [ %103, %163 ], [ %103, %165 ], [ %103, %112 ]
  %171 = phi i64 [ %63, %159 ], [ %63, %162 ], [ %63, %110 ], [ %132, %126 ], [ %164, %163 ], [ %166, %165 ], [ %63, %112 ]
  %172 = phi i32 [ %62, %159 ], [ %62, %162 ], [ %109, %110 ], [ 0, %126 ], [ 0, %163 ], [ %167, %165 ], [ %84, %112 ]
  %173 = icmp ult i64 %170, %169
  br i1 %173, label %174, label %178

174:                                              ; preds = %168
  %175 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %37, align 8
  %176 = ptrtoint %"class.absl::container_internal::btree_node"* %175 to i64
  %177 = inttoptr i64 %61 to %"class.absl::container_internal::btree_node"*
  br label %262

178:                                              ; preds = %94, %168
  %179 = phi i32 [ %62, %94 ], [ %172, %168 ]
  %180 = phi i64 [ %63, %94 ], [ %171, %168 ]
  %181 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %59, i64 8, i32 0
  %182 = getelementptr inbounds i8, i8* %181, i64 3
  %183 = load i8, i8* %182, align 1
  %184 = icmp eq i8 %183, 0
  %185 = add nsw i32 %60, 1
  br i1 %184, label %205, label %186

186:                                              ; preds = %178
  %187 = getelementptr inbounds i8, i8* %181, i64 2
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = icmp eq i32 %185, %189
  br i1 %190, label %191, label %230

191:                                              ; preds = %186, %200
  %192 = phi i8* [ %196, %200 ], [ %181, %186 ]
  %193 = phi %"class.absl::container_internal::btree_node"* [ %195, %200 ], [ %59, %186 ]
  %194 = bitcast %"class.absl::container_internal::btree_node"* %193 to %"class.absl::container_internal::btree_node"**
  %195 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %194, align 8
  %196 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %195, i64 8, i32 0
  %197 = getelementptr inbounds i8, i8* %196, i64 3
  %198 = load i8, i8* %197, align 1
  %199 = icmp eq i8 %198, 0
  br i1 %199, label %200, label %230

200:                                              ; preds = %191
  %201 = load i8, i8* %192, align 1
  %202 = getelementptr inbounds i8, i8* %196, i64 2
  %203 = load i8, i8* %202, align 1
  %204 = icmp eq i8 %201, %203
  br i1 %204, label %191, label %227

205:                                              ; preds = %178
  %206 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %59, i64 256, i32 0
  %207 = bitcast i8* %206 to %"class.absl::container_internal::btree_node"**
  %208 = sext i32 %185 to i64
  %209 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %207, i64 %208
  %210 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %209, align 8
  %211 = ptrtoint %"class.absl::container_internal::btree_node"* %210 to i64
  %212 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %210, i64 8, i32 0
  %213 = getelementptr inbounds i8, i8* %212, i64 3
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 0
  br i1 %215, label %216, label %230

216:                                              ; preds = %205, %216
  %217 = phi %"class.absl::container_internal::btree_node"* [ %220, %216 ], [ %210, %205 ]
  %218 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %217, i64 256, i32 0
  %219 = bitcast i8* %218 to %"class.absl::container_internal::btree_node"**
  %220 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %219, align 8
  %221 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %220, i64 8, i32 0
  %222 = getelementptr inbounds i8, i8* %221, i64 3
  %223 = load i8, i8* %222, align 1
  %224 = icmp eq i8 %223, 0
  br i1 %224, label %216, label %225

225:                                              ; preds = %216
  %226 = ptrtoint %"class.absl::container_internal::btree_node"* %220 to i64
  br label %230

227:                                              ; preds = %200
  %228 = ptrtoint %"class.absl::container_internal::btree_node"* %195 to i64
  %229 = zext i8 %201 to i32
  br label %230

230:                                              ; preds = %191, %227, %225, %186, %205
  %231 = phi i64 [ %61, %186 ], [ %211, %205 ], [ %226, %225 ], [ %228, %227 ], [ %61, %191 ]
  %232 = phi i32 [ %185, %186 ], [ 0, %205 ], [ 0, %225 ], [ %229, %227 ], [ %185, %191 ]
  %233 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %37, align 8
  %234 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %233, i64 8, i32 0
  %235 = getelementptr inbounds i8, i8* %234, i64 2
  %236 = load i8, i8* %235, align 1
  %237 = zext i8 %236 to i32
  %238 = inttoptr i64 %231 to %"class.absl::container_internal::btree_node"*
  %239 = icmp ne %"class.absl::container_internal::btree_node"* %233, %238
  %240 = icmp ne i32 %232, %237
  %241 = or i1 %239, %240
  %242 = ptrtoint %"class.absl::container_internal::btree_node"* %233 to i64
  br i1 %241, label %243, label %262

243:                                              ; preds = %230
  %244 = icmp eq i64 %231, 0
  br i1 %244, label %245, label %246, !prof !10

245:                                              ; preds = %243
  call void @llvm.trap() #13
  unreachable

246:                                              ; preds = %243
  %247 = icmp slt i32 %232, 0
  br i1 %247, label %248, label %249, !prof !10

248:                                              ; preds = %246
  call void @llvm.trap() #13
  unreachable

249:                                              ; preds = %246
  %250 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %238, i64 8, i32 0
  %251 = getelementptr inbounds i8, i8* %250, i64 2
  %252 = load i8, i8* %251, align 1
  %253 = zext i8 %252 to i32
  %254 = icmp slt i32 %232, %253
  br i1 %254, label %256, label %255, !prof !11

255:                                              ; preds = %249
  call void @llvm.trap() #13
  unreachable

256:                                              ; preds = %249
  %257 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %238, i64 16, i32 0
  %258 = bitcast i8* %257 to %"class.quic::QuicInterval"*
  %259 = sext i32 %232 to i64
  %260 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %258, i64 %259
  %261 = bitcast %"class.quic::QuicInterval"* %260 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %23, i8* align 8 %261, i64 16, i1 false)
  br label %262

262:                                              ; preds = %174, %230, %256
  %263 = phi i32 [ %172, %174 ], [ %179, %230 ], [ %179, %256 ]
  %264 = phi i64 [ %171, %174 ], [ %180, %230 ], [ %180, %256 ]
  %265 = phi %"class.absl::container_internal::btree_node"* [ %177, %174 ], [ %238, %230 ], [ %238, %256 ]
  %266 = phi i64 [ %176, %174 ], [ %242, %230 ], [ %242, %256 ]
  %267 = phi %"class.absl::container_internal::btree_node"* [ %175, %174 ], [ %233, %230 ], [ %233, %256 ]
  %268 = phi i64 [ %61, %174 ], [ %231, %230 ], [ %231, %256 ]
  %269 = phi i32 [ %60, %174 ], [ %232, %230 ], [ %232, %256 ]
  %270 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %267, i64 8, i32 0
  %271 = getelementptr inbounds i8, i8* %270, i64 2
  %272 = load i8, i8* %271, align 1
  %273 = zext i8 %272 to i32
  %274 = icmp ne %"class.absl::container_internal::btree_node"* %267, %265
  %275 = icmp ne i32 %269, %273
  %276 = or i1 %274, %275
  br i1 %276, label %58, label %277

277:                                              ; preds = %262
  %278 = bitcast %"class.absl::btree_set"* %6 to <2 x i64>*
  %279 = load <2 x i64>, <2 x i64>* %278, align 16
  %280 = load i64, i64* %16, align 16
  br label %281

281:                                              ; preds = %45, %277
  %282 = phi i64 [ %46, %45 ], [ %266, %277 ]
  %283 = phi i64 [ 0, %45 ], [ %280, %277 ]
  %284 = phi <2 x i64> [ <i64 ptrtoint ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to i64), i64 ptrtoint ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to i64)>, %45 ], [ %279, %277 ]
  %285 = bitcast %"class.absl::container_internal::btree_node"** %15 to i64*
  %286 = bitcast %"class.absl::btree_set"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %286) #13
  %287 = getelementptr inbounds %"class.absl::btree_set", %"class.absl::btree_set"* %5, i64 0, i32 0, i32 0, i32 0, i32 2
  store i64 ptrtoint ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to i64), i64* %285, align 8
  %288 = bitcast %"class.absl::btree_set"* %5 to <2 x i64>*
  store <2 x i64> %284, <2 x i64>* %288, align 16
  store i64 0, i64* %16, align 16
  store i64 %283, i64* %287, align 16
  store %"class.absl::container_internal::btree_node"* bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*), %"class.absl::container_internal::btree_node"** %14, align 16
  %289 = icmp eq %"class.absl::btree_set"* %6, %18
  %290 = extractelement <2 x i64> %284, i32 0
  %291 = inttoptr i64 %290 to %"class.absl::container_internal::btree_node"*
  br i1 %289, label %297, label %292

292:                                              ; preds = %281
  %293 = bitcast %"class.quic::QuicIntervalSet"* %0 to i64*
  %294 = load i64, i64* %293, align 8
  store i64 %294, i64* %17, align 16
  store i64 %282, i64* %285, align 8
  %295 = bitcast %"class.quic::QuicIntervalSet"* %0 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to i64), i64 ptrtoint ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to i64)>, <2 x i64>* %295, align 8
  %296 = load i64, i64* %9, align 8
  store i64 %296, i64* %16, align 16
  store i64 0, i64* %9, align 8
  br label %297

297:                                              ; preds = %292, %281
  %298 = icmp eq %"class.absl::btree_set"* %5, %18
  br i1 %298, label %314, label %299

299:                                              ; preds = %297
  %300 = load i64, i64* %9, align 8
  %301 = icmp eq i64 %300, 0
  br i1 %301, label %309, label %302

302:                                              ; preds = %299
  %303 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %304 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %303, align 8
  %305 = bitcast %"class.quic::QuicIntervalSet"* %0 to %"class.std::__1::allocator"*
  call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %304, %"class.std::__1::allocator"* %305) #13
  %306 = bitcast %"class.absl::btree_set"* %5 to <2 x i64>*
  %307 = load <2 x i64>, <2 x i64>* %306, align 16
  %308 = load i64, i64* %287, align 16
  br label %309

309:                                              ; preds = %302, %299
  %310 = phi i64 [ %308, %302 ], [ %283, %299 ]
  %311 = phi <2 x i64> [ %307, %302 ], [ %284, %299 ]
  %312 = bitcast %"class.quic::QuicIntervalSet"* %0 to <2 x i64>*
  store <2 x i64> %311, <2 x i64>* %312, align 8
  %313 = bitcast %"class.absl::btree_set"* %5 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to i64), i64 ptrtoint ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to i64)>, <2 x i64>* %313, align 16
  store i64 %310, i64* %9, align 8
  store i64 0, i64* %287, align 16
  br label %318

314:                                              ; preds = %297
  %315 = icmp eq i64 %283, 0
  br i1 %315, label %318, label %316

316:                                              ; preds = %314
  %317 = bitcast %"class.absl::btree_set"* %5 to %"class.std::__1::allocator"*
  call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %291, %"class.std::__1::allocator"* nonnull %317) #13
  br label %318

318:                                              ; preds = %309, %314, %316
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %286) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #13
  %319 = load i64, i64* %16, align 16
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %324, label %321

321:                                              ; preds = %318
  %322 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %14, align 16
  %323 = bitcast %"class.absl::btree_set"* %6 to %"class.std::__1::allocator"*
  call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %322, %"class.std::__1::allocator"* nonnull %323) #13
  br label %324

324:                                              ; preds = %318, %321
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #13
  br label %325

325:                                              ; preds = %2, %324
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK4quic25QuicStreamSequencerBuffer16GetInBlockOffsetEm(%"class.quic::QuicStreamSequencerBuffer"* nocapture readonly, i64) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = urem i64 %1, %4
  %6 = and i64 %5, 8191
  ret i64 %6
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK4quic25QuicStreamSequencerBuffer16GetBlockCapacityEm(%"class.quic::QuicStreamSequencerBuffer"* nocapture readonly, i64) local_unnamed_addr #5 align 2 {
  %3 = add i64 %1, 1
  %4 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %3, %5
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %9, 8191
  %11 = icmp eq i64 %10, 0
  %12 = select i1 %11, i64 8192, i64 %10
  br label %13

13:                                               ; preds = %2, %7
  %14 = phi i64 [ %12, %7 ], [ 8192, %2 ]
  ret i64 %14
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl6StrCatIJmA19_cNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEA22_cmEEES8_RKNS_8AlphaNumESC_SC_SC_SC_DpRKT_(%"class.std::__1::basic_string"* noalias sret, %"class.absl::AlphaNum"* dereferenceable(48), %"class.absl::AlphaNum"* dereferenceable(48), %"class.absl::AlphaNum"* dereferenceable(48), %"class.absl::AlphaNum"* dereferenceable(48), %"class.absl::AlphaNum"* dereferenceable(48), i64* dereferenceable(8), [19 x i8]* dereferenceable(19), %"class.std::__1::basic_string"* dereferenceable(24), [22 x i8]* dereferenceable(22), i64* dereferenceable(8)) local_unnamed_addr #8 comdat {
  %12 = alloca [10 x %"class.absl::string_view"], align 16
  %13 = alloca %"class.absl::AlphaNum", align 8
  %14 = alloca %"class.absl::AlphaNum", align 8
  %15 = bitcast [10 x %"class.absl::string_view"]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %15) #13
  %16 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 0
  %17 = bitcast %"class.absl::AlphaNum"* %1 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 8
  %19 = bitcast [10 x %"class.absl::string_view"]* %12 to <2 x i64>*
  store <2 x i64> %18, <2 x i64>* %19, align 16
  %20 = bitcast %"class.absl::AlphaNum"* %2 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 8
  %22 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 1, i32 0
  %23 = bitcast i8** %22 to <2 x i64>*
  store <2 x i64> %21, <2 x i64>* %23, align 16
  %24 = bitcast %"class.absl::AlphaNum"* %3 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 8
  %26 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 2, i32 0
  %27 = bitcast i8** %26 to <2 x i64>*
  store <2 x i64> %25, <2 x i64>* %27, align 16
  %28 = bitcast %"class.absl::AlphaNum"* %4 to <2 x i64>*
  %29 = load <2 x i64>, <2 x i64>* %28, align 8
  %30 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 3, i32 0
  %31 = bitcast i8** %30 to <2 x i64>*
  store <2 x i64> %29, <2 x i64>* %31, align 16
  %32 = bitcast %"class.absl::AlphaNum"* %5 to <2 x i64>*
  %33 = load <2 x i64>, <2 x i64>* %32, align 8
  %34 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 4, i32 0
  %35 = bitcast i8** %34 to <2 x i64>*
  store <2 x i64> %33, <2 x i64>* %35, align 16
  %36 = bitcast %"class.absl::AlphaNum"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %36) #13
  %37 = load i64, i64* %6, align 8
  %38 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %13, i64 0, i32 1, i64 0
  %39 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEmPc(i64 %37, i8* %38) #13
  %40 = ptrtoint i8* %39 to i64
  %41 = ptrtoint i8* %38 to i64
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %13, i64 0, i32 0, i32 0
  store i8* %38, i8** %43, align 8
  %44 = icmp sgt i64 %42, -1
  br i1 %44, label %46, label %45, !prof !11

45:                                               ; preds = %11
  call void @llvm.trap() #13
  unreachable

46:                                               ; preds = %11
  %47 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %13, i64 0, i32 0, i32 1
  store i64 %42, i64* %47, align 8
  %48 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 5, i32 0
  store i8* %38, i8** %48, align 16
  %49 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 5, i32 1
  store i64 %42, i64* %49, align 8
  %50 = getelementptr inbounds [19 x i8], [19 x i8]* %7, i64 0, i64 0
  %51 = icmp eq [19 x i8]* %7, null
  br i1 %51, label %56, label %52

52:                                               ; preds = %46
  %53 = call i64 @strlen(i8* nonnull %50) #13
  %54 = icmp sgt i64 %53, -1
  br i1 %54, label %56, label %55, !prof !11

55:                                               ; preds = %52
  call void @llvm.trap() #13
  unreachable

56:                                               ; preds = %46, %52
  %57 = phi i64 [ 0, %46 ], [ %53, %52 ]
  %58 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 6, i32 0
  store i8* %50, i8** %58, align 16
  %59 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 6, i32 1
  store i64 %57, i64* %59, align 8
  %60 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %61 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %60, i64 0, i32 1, i32 0
  %62 = load i8, i8* %61, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %67, label %64

64:                                               ; preds = %56
  %65 = zext i8 %62 to i64
  %66 = ptrtoint %"class.std::__1::basic_string"* %8 to i64
  br label %74

67:                                               ; preds = %56
  %68 = bitcast %"class.std::__1::basic_string"* %8 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = icmp sgt i64 %71, -1
  br i1 %72, label %74, label %73, !prof !11

73:                                               ; preds = %67
  call void @llvm.trap() #13
  unreachable

74:                                               ; preds = %64, %67
  %75 = phi i64 [ %69, %67 ], [ %66, %64 ]
  %76 = phi i64 [ %71, %67 ], [ %65, %64 ]
  %77 = inttoptr i64 %75 to i8*
  %78 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 7, i32 0
  store i8* %77, i8** %78, align 16
  %79 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 7, i32 1
  store i64 %76, i64* %79, align 8
  %80 = getelementptr inbounds [22 x i8], [22 x i8]* %9, i64 0, i64 0
  %81 = icmp eq [22 x i8]* %9, null
  br i1 %81, label %86, label %82

82:                                               ; preds = %74
  %83 = call i64 @strlen(i8* nonnull %80) #13
  %84 = icmp sgt i64 %83, -1
  br i1 %84, label %86, label %85, !prof !11

85:                                               ; preds = %82
  call void @llvm.trap() #13
  unreachable

86:                                               ; preds = %74, %82
  %87 = phi i64 [ 0, %74 ], [ %83, %82 ]
  %88 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 8, i32 0
  store i8* %80, i8** %88, align 16
  %89 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 8, i32 1
  store i64 %87, i64* %89, align 8
  %90 = bitcast %"class.absl::AlphaNum"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %90) #13
  %91 = load i64, i64* %10, align 8
  %92 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %14, i64 0, i32 1, i64 0
  %93 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEmPc(i64 %91, i8* %92) #13
  %94 = ptrtoint i8* %93 to i64
  %95 = ptrtoint i8* %92 to i64
  %96 = sub i64 %94, %95
  %97 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %14, i64 0, i32 0, i32 0
  store i8* %92, i8** %97, align 8
  %98 = icmp sgt i64 %96, -1
  br i1 %98, label %100, label %99, !prof !11

99:                                               ; preds = %86
  call void @llvm.trap() #13
  unreachable

100:                                              ; preds = %86
  %101 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %14, i64 0, i32 0, i32 1
  store i64 %96, i64* %101, align 8
  %102 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 9, i32 0
  store i8* %92, i8** %102, align 16
  %103 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 9, i32 1
  store i64 %96, i64* %103, align 8
  call void @_ZN4absl16strings_internal9CatPiecesESt16initializer_listINS_11string_viewEE(%"class.std::__1::basic_string"* sret %0, %"class.absl::string_view"* nonnull %16, i64 10) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %90) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %36) #13
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %15) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4quic25QuicStreamSequencerBuffer25ReceivedFramesDebugStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.quic::QuicStreamSequencerBuffer"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %1, i64 0, i32 7
  tail call void @_ZNK4quic15QuicIntervalSetImE8ToStringEv(%"class.std::__1::basic_string"* sret %0, %"class.quic::QuicIntervalSet"* %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4quic25QuicStreamSequencerBuffer5ReadvEPK5iovecmPmPNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(%"class.quic::QuicStreamSequencerBuffer"*, %struct.iovec* nocapture readonly, i64, i64* nocapture, %"class.std::__1::basic_string"* nocapture) local_unnamed_addr #0 align 2 {
  %6 = alloca [6 x %"class.absl::string_view"], align 16
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca %"class.absl::AlphaNum", align 8
  %9 = alloca %"class.absl::AlphaNum", align 8
  %10 = alloca %"class.absl::AlphaNum", align 8
  %11 = alloca %"class.absl::AlphaNum", align 8
  %12 = alloca %"class.absl::AlphaNum", align 8
  %13 = alloca i8, align 1
  %14 = alloca %"class.std::__1::basic_string", align 8
  %15 = alloca %"class.std::__1::basic_string", align 8
  %16 = alloca %"class.absl::AlphaNum", align 16
  %17 = alloca %"class.absl::AlphaNum", align 16
  %18 = alloca %"class.std::__1::basic_string", align 8
  store i64 0, i64* %3, align 8
  %19 = icmp eq i64 %2, 0
  br i1 %19, label %297, label %20

20:                                               ; preds = %5
  %21 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 2
  %22 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7
  %23 = bitcast %"class.quic::QuicIntervalSet"* %22 to %"class.absl::container_internal::btree_node"***
  %24 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 3
  %25 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 0
  %26 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 1
  %27 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 6
  br label %29

29:                                               ; preds = %294, %20
  %30 = phi i64 [ 0, %20 ], [ %295, %294 ]
  %31 = load i64, i64* %21, align 8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %53, label %33

33:                                               ; preds = %29
  %34 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %23, align 8
  %35 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %34, align 8
  %36 = icmp eq %"class.absl::container_internal::btree_node"* %35, null
  br i1 %36, label %37, label %38, !prof !10

37:                                               ; preds = %33
  tail call void @llvm.trap() #13
  unreachable

38:                                               ; preds = %33
  %39 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %35, i64 8, i32 0
  %40 = getelementptr inbounds i8, i8* %39, i64 2
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %43, label %44, !prof !10

43:                                               ; preds = %38
  tail call void @llvm.trap() #13
  unreachable

44:                                               ; preds = %38
  %45 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %35, i64 16, i32 0
  %46 = bitcast i8* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %53

49:                                               ; preds = %44
  %50 = getelementptr inbounds i8, i8* %45, i64 8
  %51 = bitcast i8* %50 to i64*
  %52 = load i64, i64* %51, align 8
  br label %53

53:                                               ; preds = %29, %44, %49
  %54 = phi i64 [ %52, %49 ], [ 0, %44 ], [ 0, %29 ]
  %55 = load i64, i64* %24, align 8
  %56 = icmp eq i64 %54, %55
  br i1 %56, label %297, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds %struct.iovec, %struct.iovec* %1, i64 %30, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %294, label %61

61:                                               ; preds = %57
  %62 = getelementptr inbounds %struct.iovec, %struct.iovec* %1, i64 %30, i32 0
  %63 = load i8*, i8** %62, align 8
  br label %64

64:                                               ; preds = %292, %61
  %65 = phi i64 [ %293, %292 ], [ %31, %61 ]
  %66 = phi i8* [ %202, %292 ], [ %63, %61 ]
  %67 = phi i64 [ %203, %292 ], [ %59, %61 ]
  %68 = icmp eq i64 %65, 0
  br i1 %68, label %89, label %69

69:                                               ; preds = %64
  %70 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %23, align 8
  %71 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %70, align 8
  %72 = icmp eq %"class.absl::container_internal::btree_node"* %71, null
  br i1 %72, label %73, label %74, !prof !10

73:                                               ; preds = %69
  tail call void @llvm.trap() #13
  unreachable

74:                                               ; preds = %69
  %75 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %71, i64 8, i32 0
  %76 = getelementptr inbounds i8, i8* %75, i64 2
  %77 = load i8, i8* %76, align 1
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %79, label %80, !prof !10

79:                                               ; preds = %74
  tail call void @llvm.trap() #13
  unreachable

80:                                               ; preds = %74
  %81 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %71, i64 16, i32 0
  %82 = bitcast i8* %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %89

85:                                               ; preds = %80
  %86 = getelementptr inbounds i8, i8* %81, i64 8
  %87 = bitcast i8* %86 to i64*
  %88 = load i64, i64* %87, align 8
  br label %89

89:                                               ; preds = %64, %80, %85
  %90 = phi i64 [ %88, %85 ], [ 0, %80 ], [ 0, %64 ]
  %91 = load i64, i64* %24, align 8
  %92 = icmp eq i64 %90, %91
  br i1 %92, label %294, label %93

93:                                               ; preds = %89
  %94 = load i64, i64* %25, align 8
  %95 = urem i64 %91, %94
  %96 = lshr i64 %95, 13
  %97 = and i64 %95, 8191
  %98 = add nuw nsw i64 %96, 1
  %99 = load i64, i64* %26, align 8
  %100 = icmp eq i64 %98, %99
  br i1 %100, label %101, label %105

101:                                              ; preds = %93
  %102 = and i64 %94, 8191
  %103 = icmp eq i64 %102, 0
  %104 = select i1 %103, i64 8192, i64 %102
  br label %105

105:                                              ; preds = %93, %101
  %106 = phi i64 [ %104, %101 ], [ 8192, %93 ]
  br i1 %68, label %127, label %107

107:                                              ; preds = %105
  %108 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %23, align 8
  %109 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %108, align 8
  %110 = icmp eq %"class.absl::container_internal::btree_node"* %109, null
  br i1 %110, label %111, label %112, !prof !10

111:                                              ; preds = %107
  tail call void @llvm.trap() #13
  unreachable

112:                                              ; preds = %107
  %113 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %109, i64 8, i32 0
  %114 = getelementptr inbounds i8, i8* %113, i64 2
  %115 = load i8, i8* %114, align 1
  %116 = icmp eq i8 %115, 0
  br i1 %116, label %117, label %118, !prof !10

117:                                              ; preds = %112
  tail call void @llvm.trap() #13
  unreachable

118:                                              ; preds = %112
  %119 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %109, i64 16, i32 0
  %120 = bitcast i8* %119 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %127

123:                                              ; preds = %118
  %124 = getelementptr inbounds i8, i8* %119, i64 8
  %125 = bitcast i8* %124 to i64*
  %126 = load i64, i64* %125, align 8
  br label %127

127:                                              ; preds = %105, %118, %123
  %128 = phi i64 [ %126, %123 ], [ 0, %118 ], [ 0, %105 ]
  %129 = sub i64 %128, %91
  %130 = sub nsw i64 %106, %97
  %131 = icmp ult i64 %130, %129
  %132 = select i1 %131, i64 %130, i64 %129
  %133 = icmp ult i64 %67, %132
  %134 = select i1 %133, i64 %67, i64 %132
  %135 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %27, align 8
  %136 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %135, i64 %96
  %137 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %136, align 8
  %138 = icmp eq %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* %137, null
  %139 = icmp eq i8* %66, null
  %140 = or i1 %139, %138
  br i1 %140, label %141, label %200

141:                                              ; preds = %127
  %142 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %142) #13
  %143 = bitcast %"class.absl::AlphaNum"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %143) #13
  %144 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %8, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.14, i64 0, i64 0), i8** %144, align 8
  %145 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %8, i64 0, i32 0, i32 1
  store i64 58, i64* %145, align 8
  %146 = bitcast %"class.absl::AlphaNum"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %146) #13
  %147 = zext i1 %139 to i32
  %148 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %9, i64 0, i32 1, i64 0
  %149 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %147, i8* %148) #13
  %150 = ptrtoint i8* %149 to i64
  %151 = ptrtoint i8* %148 to i64
  %152 = sub i64 %150, %151
  %153 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %9, i64 0, i32 0, i32 0
  store i8* %148, i8** %153, align 8
  %154 = icmp sgt i64 %152, -1
  br i1 %154, label %156, label %155, !prof !11

155:                                              ; preds = %141
  call void @llvm.trap() #13
  unreachable

156:                                              ; preds = %141
  %157 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %9, i64 0, i32 0, i32 1
  store i64 %152, i64* %157, align 8
  %158 = bitcast %"class.absl::AlphaNum"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %158) #13
  %159 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %10, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0), i8** %159, align 8
  %160 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %10, i64 0, i32 0, i32 1
  store i64 9, i64* %160, align 8
  %161 = bitcast %"class.absl::AlphaNum"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %161) #13
  %162 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %11, i64 0, i32 1, i64 0
  %163 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEmPc(i64 %96, i8* %162) #13
  %164 = ptrtoint i8* %163 to i64
  %165 = ptrtoint i8* %162 to i64
  %166 = sub i64 %164, %165
  %167 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %11, i64 0, i32 0, i32 0
  store i8* %162, i8** %167, align 8
  %168 = icmp sgt i64 %166, -1
  br i1 %168, label %170, label %169, !prof !11

169:                                              ; preds = %156
  call void @llvm.trap() #13
  unreachable

170:                                              ; preds = %156
  %171 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %11, i64 0, i32 0, i32 1
  store i64 %166, i64* %171, align 8
  %172 = bitcast %"class.absl::AlphaNum"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %172) #13
  %173 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %12, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i64 0, i64 0), i8** %173, align 8
  %174 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %12, i64 0, i32 0, i32 1
  store i64 14, i64* %174, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %13) #13
  %175 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %27, align 8
  %176 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %175, i64 %96
  %177 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %176, align 8
  %178 = icmp eq %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* %177, null
  %179 = zext i1 %178 to i8
  store i8 %179, i8* %13, align 1
  %180 = bitcast %"class.std::__1::basic_string"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %180) #13
  call void @_ZNK4quic15QuicIntervalSetImE8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %14, %"class.quic::QuicIntervalSet"* %22) #13
  call void @_ZN4absl6StrCatIJbA19_cNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEA22_cmEEES8_RKNS_8AlphaNumESC_SC_SC_SC_DpRKT_(%"class.std::__1::basic_string"* nonnull sret %7, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %8, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %9, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %10, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %11, %"class.absl::AlphaNum"* nonnull dereferenceable(48) %12, i8* nonnull dereferenceable(1) %13, [19 x i8]* nonnull dereferenceable(19) @.str.12, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %14, [22 x i8]* nonnull dereferenceable(22) @.str.13, i64* dereferenceable(8) %24)
  %181 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %182 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %181, i64 0, i32 1, i32 0
  %183 = load i8, i8* %182, align 1
  %184 = icmp slt i8 %183, 0
  br i1 %184, label %185, label %188

185:                                              ; preds = %170
  %186 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %187 = load i8*, i8** %186, align 8
  call void @_ZdlPv(i8* %187) #12
  br label %188

188:                                              ; preds = %185, %170
  %189 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %189, i8* nonnull align 8 %142, i64 24, i1 false) #13
  %190 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %191 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %190, i64 0, i32 1, i32 0
  store i8 0, i8* %191, align 1
  store i8 0, i8* %142, align 8
  %192 = bitcast %"class.std::__1::basic_string"* %14 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %193 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %192, i64 0, i32 1, i32 0
  %194 = load i8, i8* %193, align 1
  %195 = icmp slt i8 %194, 0
  br i1 %195, label %196, label %199

196:                                              ; preds = %188
  %197 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %198 = load i8*, i8** %197, align 8
  call void @_ZdlPv(i8* %198) #12
  br label %199

199:                                              ; preds = %188, %196
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %180) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %13) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %172) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %161) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %158) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %146) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %143) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %142) #13
  br label %297

200:                                              ; preds = %127
  %201 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock", %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* %137, i64 0, i32 0, i64 %97
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %66, i8* align 1 %201, i64 %134, i1 false)
  %202 = getelementptr inbounds i8, i8* %66, i64 %134
  %203 = sub i64 %67, %134
  %204 = load i64, i64* %28, align 8
  %205 = sub i64 %204, %134
  store i64 %205, i64* %28, align 8
  %206 = load i64, i64* %24, align 8
  %207 = add i64 %206, %134
  store i64 %207, i64* %24, align 8
  %208 = load i64, i64* %3, align 8
  %209 = add i64 %208, %134
  store i64 %209, i64* %3, align 8
  br i1 %133, label %290, label %210

210:                                              ; preds = %200
  %211 = tail call zeroext i1 @_ZN4quic25QuicStreamSequencerBuffer18RetireBlockIfEmptyEm(%"class.quic::QuicStreamSequencerBuffer"* %0, i64 %96)
  br i1 %211, label %290, label %212

212:                                              ; preds = %210
  %213 = bitcast %"class.std::__1::basic_string"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %213) #13
  %214 = bitcast %"class.absl::AlphaNum"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %214) #13
  %215 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %16, i64 0, i32 1, i64 0
  %216 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEmPc(i64 %96, i8* %215) #13
  %217 = ptrtoint i8* %216 to i64
  %218 = ptrtoint i8* %215 to i64
  %219 = sub i64 %217, %218
  %220 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %16, i64 0, i32 0, i32 0
  store i8* %215, i8** %220, align 16
  %221 = icmp sgt i64 %219, -1
  br i1 %221, label %223, label %222, !prof !11

222:                                              ; preds = %212
  call void @llvm.trap() #13
  unreachable

223:                                              ; preds = %212
  %224 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %16, i64 0, i32 0, i32 1
  store i64 %219, i64* %224, align 8
  %225 = bitcast %"class.absl::AlphaNum"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %225) #13
  %226 = load i64, i64* %24, align 8
  %227 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %17, i64 0, i32 1, i64 0
  %228 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEmPc(i64 %226, i8* %227) #13
  %229 = ptrtoint i8* %228 to i64
  %230 = ptrtoint i8* %227 to i64
  %231 = sub i64 %229, %230
  %232 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %17, i64 0, i32 0, i32 0
  store i8* %227, i8** %232, align 16
  %233 = icmp sgt i64 %231, -1
  br i1 %233, label %235, label %234, !prof !11

234:                                              ; preds = %223
  call void @llvm.trap() #13
  unreachable

235:                                              ; preds = %223
  %236 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %17, i64 0, i32 0, i32 1
  store i64 %231, i64* %236, align 8
  %237 = bitcast %"class.std::__1::basic_string"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %237) #13
  call void @_ZNK4quic15QuicIntervalSetImE8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %18, %"class.quic::QuicIntervalSet"* %22) #13
  %238 = bitcast [6 x %"class.absl::string_view"]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %238) #13, !noalias !15
  %239 = getelementptr inbounds [6 x %"class.absl::string_view"], [6 x %"class.absl::string_view"]* %6, i64 0, i64 0
  %240 = bitcast [6 x %"class.absl::string_view"]* %6 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint ([55 x i8]* @.str.17 to i64), i64 54>, <2 x i64>* %240, align 16, !noalias !15
  %241 = bitcast %"class.absl::AlphaNum"* %16 to <2 x i64>*
  %242 = load <2 x i64>, <2 x i64>* %241, align 16, !noalias !15
  %243 = getelementptr inbounds [6 x %"class.absl::string_view"], [6 x %"class.absl::string_view"]* %6, i64 0, i64 1, i32 0
  %244 = bitcast i8** %243 to <2 x i64>*
  store <2 x i64> %242, <2 x i64>* %244, align 16, !noalias !15
  %245 = getelementptr inbounds [6 x %"class.absl::string_view"], [6 x %"class.absl::string_view"]* %6, i64 0, i64 2, i32 0
  %246 = bitcast i8** %245 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint ([56 x i8]* @.str.18 to i64), i64 55>, <2 x i64>* %246, align 16, !noalias !15
  %247 = bitcast %"class.absl::AlphaNum"* %17 to <2 x i64>*
  %248 = load <2 x i64>, <2 x i64>* %247, align 16, !noalias !15
  %249 = getelementptr inbounds [6 x %"class.absl::string_view"], [6 x %"class.absl::string_view"]* %6, i64 0, i64 3, i32 0
  %250 = bitcast i8** %249 to <2 x i64>*
  store <2 x i64> %248, <2 x i64>* %250, align 16, !noalias !15
  %251 = getelementptr inbounds [6 x %"class.absl::string_view"], [6 x %"class.absl::string_view"]* %6, i64 0, i64 4, i32 0
  %252 = bitcast i8** %251 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint ([19 x i8]* @.str.12 to i64), i64 18>, <2 x i64>* %252, align 16, !noalias !15
  %253 = bitcast %"class.std::__1::basic_string"* %18 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %254 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %253, i64 0, i32 1, i32 0
  %255 = load i8, i8* %254, align 1, !noalias !15
  %256 = icmp slt i8 %255, 0
  br i1 %256, label %260, label %257

257:                                              ; preds = %235
  %258 = zext i8 %255 to i64
  %259 = ptrtoint %"class.std::__1::basic_string"* %18 to i64
  br label %267

260:                                              ; preds = %235
  %261 = bitcast %"class.std::__1::basic_string"* %18 to i64*
  %262 = load i64, i64* %261, align 8, !noalias !15
  %263 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %264 = load i64, i64* %263, align 8, !noalias !15
  %265 = icmp sgt i64 %264, -1
  br i1 %265, label %267, label %266, !prof !11

266:                                              ; preds = %260
  call void @llvm.trap() #13
  unreachable

267:                                              ; preds = %257, %260
  %268 = phi i64 [ %262, %260 ], [ %259, %257 ]
  %269 = phi i64 [ %264, %260 ], [ %258, %257 ]
  %270 = inttoptr i64 %268 to i8*
  %271 = getelementptr inbounds [6 x %"class.absl::string_view"], [6 x %"class.absl::string_view"]* %6, i64 0, i64 5, i32 0
  store i8* %270, i8** %271, align 16, !noalias !15
  %272 = getelementptr inbounds [6 x %"class.absl::string_view"], [6 x %"class.absl::string_view"]* %6, i64 0, i64 5, i32 1
  store i64 %269, i64* %272, align 8, !noalias !15
  call void @_ZN4absl16strings_internal9CatPiecesESt16initializer_listINS_11string_viewEE(%"class.std::__1::basic_string"* nonnull sret %15, %"class.absl::string_view"* nonnull %239, i64 6) #13
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %238) #13, !noalias !15
  %273 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %274 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %273, i64 0, i32 1, i32 0
  %275 = load i8, i8* %274, align 1
  %276 = icmp slt i8 %275, 0
  br i1 %276, label %277, label %280

277:                                              ; preds = %267
  %278 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %279 = load i8*, i8** %278, align 8
  call void @_ZdlPv(i8* %279) #12
  br label %280

280:                                              ; preds = %277, %267
  %281 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %281, i8* nonnull align 8 %213, i64 24, i1 false) #13
  %282 = bitcast %"class.std::__1::basic_string"* %15 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %283 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %282, i64 0, i32 1, i32 0
  store i8 0, i8* %283, align 1
  store i8 0, i8* %213, align 8
  %284 = load i8, i8* %254, align 1
  %285 = icmp slt i8 %284, 0
  br i1 %285, label %286, label %289

286:                                              ; preds = %280
  %287 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %288 = load i8*, i8** %287, align 8
  call void @_ZdlPv(i8* %288) #12
  br label %289

289:                                              ; preds = %286, %280
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %237) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %225) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %214) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %213) #13
  br label %297

290:                                              ; preds = %200, %210
  %291 = icmp eq i64 %203, 0
  br i1 %291, label %294, label %292

292:                                              ; preds = %290
  %293 = load i64, i64* %21, align 8
  br label %64

294:                                              ; preds = %290, %89, %57
  %295 = add nuw i64 %30, 1
  %296 = icmp eq i64 %295, %2
  br i1 %296, label %297, label %29

297:                                              ; preds = %53, %294, %5, %199, %289
  %298 = phi i32 [ 95, %289 ], [ 95, %199 ], [ 0, %5 ], [ 0, %294 ], [ 0, %53 ]
  ret i32 %298
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4quic25QuicStreamSequencerBuffer13ReadableBytesEv(%"class.quic::QuicStreamSequencerBuffer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %27, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7
  %7 = bitcast %"class.quic::QuicIntervalSet"* %6 to %"class.absl::container_internal::btree_node"***
  %8 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %7, align 8
  %9 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %8, align 8
  %10 = icmp eq %"class.absl::container_internal::btree_node"* %9, null
  br i1 %10, label %11, label %12, !prof !10

11:                                               ; preds = %5
  tail call void @llvm.trap() #13
  unreachable

12:                                               ; preds = %5
  %13 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %9, i64 8, i32 0
  %14 = getelementptr inbounds i8, i8* %13, i64 2
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %18, !prof !10

17:                                               ; preds = %12
  tail call void @llvm.trap() #13
  unreachable

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %9, i64 16, i32 0
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %27

23:                                               ; preds = %18
  %24 = getelementptr inbounds i8, i8* %19, i64 8
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %25, align 8
  br label %27

27:                                               ; preds = %1, %18, %23
  %28 = phi i64 [ %26, %23 ], [ 0, %18 ], [ 0, %1 ]
  %29 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 3
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %28, %30
  ret i64 %31
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK4quic25QuicStreamSequencerBuffer15NextBlockToReadEv(%"class.quic::QuicStreamSequencerBuffer"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 3
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = urem i64 %3, %5
  %7 = lshr i64 %6, 13
  ret i64 %7
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK4quic25QuicStreamSequencerBuffer10ReadOffsetEv(%"class.quic::QuicStreamSequencerBuffer"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 3
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = urem i64 %3, %5
  %7 = and i64 %6, 8191
  ret i64 %7
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl6StrCatIJbA19_cNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEA22_cmEEES8_RKNS_8AlphaNumESC_SC_SC_SC_DpRKT_(%"class.std::__1::basic_string"* noalias sret, %"class.absl::AlphaNum"* dereferenceable(48), %"class.absl::AlphaNum"* dereferenceable(48), %"class.absl::AlphaNum"* dereferenceable(48), %"class.absl::AlphaNum"* dereferenceable(48), %"class.absl::AlphaNum"* dereferenceable(48), i8* dereferenceable(1), [19 x i8]* dereferenceable(19), %"class.std::__1::basic_string"* dereferenceable(24), [22 x i8]* dereferenceable(22), i64* dereferenceable(8)) local_unnamed_addr #8 comdat {
  %12 = alloca [10 x %"class.absl::string_view"], align 16
  %13 = alloca %"class.absl::AlphaNum", align 8
  %14 = alloca %"class.absl::AlphaNum", align 8
  %15 = bitcast [10 x %"class.absl::string_view"]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %15) #13
  %16 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 0
  %17 = bitcast %"class.absl::AlphaNum"* %1 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 8
  %19 = bitcast [10 x %"class.absl::string_view"]* %12 to <2 x i64>*
  store <2 x i64> %18, <2 x i64>* %19, align 16
  %20 = bitcast %"class.absl::AlphaNum"* %2 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 8
  %22 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 1, i32 0
  %23 = bitcast i8** %22 to <2 x i64>*
  store <2 x i64> %21, <2 x i64>* %23, align 16
  %24 = bitcast %"class.absl::AlphaNum"* %3 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 8
  %26 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 2, i32 0
  %27 = bitcast i8** %26 to <2 x i64>*
  store <2 x i64> %25, <2 x i64>* %27, align 16
  %28 = bitcast %"class.absl::AlphaNum"* %4 to <2 x i64>*
  %29 = load <2 x i64>, <2 x i64>* %28, align 8
  %30 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 3, i32 0
  %31 = bitcast i8** %30 to <2 x i64>*
  store <2 x i64> %29, <2 x i64>* %31, align 16
  %32 = bitcast %"class.absl::AlphaNum"* %5 to <2 x i64>*
  %33 = load <2 x i64>, <2 x i64>* %32, align 8
  %34 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 4, i32 0
  %35 = bitcast i8** %34 to <2 x i64>*
  store <2 x i64> %33, <2 x i64>* %35, align 16
  %36 = bitcast %"class.absl::AlphaNum"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %36) #13
  %37 = load i8, i8* %6, align 1, !range !2
  %38 = zext i8 %37 to i32
  %39 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %13, i64 0, i32 1, i64 0
  %40 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32 %38, i8* %39) #13
  %41 = ptrtoint i8* %40 to i64
  %42 = ptrtoint i8* %39 to i64
  %43 = sub i64 %41, %42
  %44 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %13, i64 0, i32 0, i32 0
  store i8* %39, i8** %44, align 8
  %45 = icmp sgt i64 %43, -1
  br i1 %45, label %47, label %46, !prof !11

46:                                               ; preds = %11
  call void @llvm.trap() #13
  unreachable

47:                                               ; preds = %11
  %48 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %13, i64 0, i32 0, i32 1
  store i64 %43, i64* %48, align 8
  %49 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 5, i32 0
  store i8* %39, i8** %49, align 16
  %50 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 5, i32 1
  store i64 %43, i64* %50, align 8
  %51 = getelementptr inbounds [19 x i8], [19 x i8]* %7, i64 0, i64 0
  %52 = icmp eq [19 x i8]* %7, null
  br i1 %52, label %57, label %53

53:                                               ; preds = %47
  %54 = call i64 @strlen(i8* nonnull %51) #13
  %55 = icmp sgt i64 %54, -1
  br i1 %55, label %57, label %56, !prof !11

56:                                               ; preds = %53
  call void @llvm.trap() #13
  unreachable

57:                                               ; preds = %47, %53
  %58 = phi i64 [ 0, %47 ], [ %54, %53 ]
  %59 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 6, i32 0
  store i8* %51, i8** %59, align 16
  %60 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 6, i32 1
  store i64 %58, i64* %60, align 8
  %61 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %62 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %61, i64 0, i32 1, i32 0
  %63 = load i8, i8* %62, align 1
  %64 = icmp slt i8 %63, 0
  br i1 %64, label %68, label %65

65:                                               ; preds = %57
  %66 = zext i8 %63 to i64
  %67 = ptrtoint %"class.std::__1::basic_string"* %8 to i64
  br label %75

68:                                               ; preds = %57
  %69 = bitcast %"class.std::__1::basic_string"* %8 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %72 = load i64, i64* %71, align 8
  %73 = icmp sgt i64 %72, -1
  br i1 %73, label %75, label %74, !prof !11

74:                                               ; preds = %68
  call void @llvm.trap() #13
  unreachable

75:                                               ; preds = %65, %68
  %76 = phi i64 [ %70, %68 ], [ %67, %65 ]
  %77 = phi i64 [ %72, %68 ], [ %66, %65 ]
  %78 = inttoptr i64 %76 to i8*
  %79 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 7, i32 0
  store i8* %78, i8** %79, align 16
  %80 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 7, i32 1
  store i64 %77, i64* %80, align 8
  %81 = getelementptr inbounds [22 x i8], [22 x i8]* %9, i64 0, i64 0
  %82 = icmp eq [22 x i8]* %9, null
  br i1 %82, label %87, label %83

83:                                               ; preds = %75
  %84 = call i64 @strlen(i8* nonnull %81) #13
  %85 = icmp sgt i64 %84, -1
  br i1 %85, label %87, label %86, !prof !11

86:                                               ; preds = %83
  call void @llvm.trap() #13
  unreachable

87:                                               ; preds = %75, %83
  %88 = phi i64 [ 0, %75 ], [ %84, %83 ]
  %89 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 8, i32 0
  store i8* %81, i8** %89, align 16
  %90 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 8, i32 1
  store i64 %88, i64* %90, align 8
  %91 = bitcast %"class.absl::AlphaNum"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %91) #13
  %92 = load i64, i64* %10, align 8
  %93 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %14, i64 0, i32 1, i64 0
  %94 = call i8* @_ZN4absl16numbers_internal15FastIntToBufferEmPc(i64 %92, i8* %93) #13
  %95 = ptrtoint i8* %94 to i64
  %96 = ptrtoint i8* %93 to i64
  %97 = sub i64 %95, %96
  %98 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %14, i64 0, i32 0, i32 0
  store i8* %93, i8** %98, align 8
  %99 = icmp sgt i64 %97, -1
  br i1 %99, label %101, label %100, !prof !11

100:                                              ; preds = %87
  call void @llvm.trap() #13
  unreachable

101:                                              ; preds = %87
  %102 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %14, i64 0, i32 0, i32 1
  store i64 %97, i64* %102, align 8
  %103 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 9, i32 0
  store i8* %93, i8** %103, align 16
  %104 = getelementptr inbounds [10 x %"class.absl::string_view"], [10 x %"class.absl::string_view"]* %12, i64 0, i64 9, i32 1
  store i64 %97, i64* %104, align 8
  call void @_ZN4absl16strings_internal9CatPiecesESt16initializer_listINS_11string_viewEE(%"class.std::__1::basic_string"* sret %0, %"class.absl::string_view"* nonnull %16, i64 10) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %91) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %36) #13
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %15) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4quic25QuicStreamSequencerBuffer18RetireBlockIfEmptyEm(%"class.quic::QuicStreamSequencerBuffer"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::LogMessage", align 8
  %4 = alloca %"class.logging::LogMessage", align 8
  %5 = alloca %"class.logging::LogMessage", align 8
  %6 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7
  %7 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 2
  %8 = load i64, i64* %7, align 8
  switch i64 %8, label %48 [
    i64 0, label %31
    i64 1, label %9
  ]

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %48, label %13

13:                                               ; preds = %9
  %14 = bitcast %"class.quic::QuicIntervalSet"* %6 to %"class.absl::container_internal::btree_node"***
  %15 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %14, align 8
  %16 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %15, align 8
  %17 = icmp eq %"class.absl::container_internal::btree_node"* %16, null
  br i1 %17, label %18, label %19, !prof !10

18:                                               ; preds = %13
  tail call void @llvm.trap() #13
  unreachable

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %16, i64 8, i32 0
  %21 = getelementptr inbounds i8, i8* %20, i64 2
  %22 = load i8, i8* %21, align 1
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %25, !prof !10

24:                                               ; preds = %19
  tail call void @llvm.trap() #13
  unreachable

25:                                               ; preds = %19
  %26 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %16, i64 16, i32 0
  %27 = getelementptr inbounds i8, i8* %26, i64 8
  %28 = bitcast i8* %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = icmp eq i64 %29, %11
  br i1 %30, label %31, label %48

31:                                               ; preds = %2, %25
  %32 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %33 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %32, align 8
  %34 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %33, i64 %1
  %35 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %34, align 8
  %36 = icmp eq %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* %35, null
  br i1 %36, label %37, label %44

37:                                               ; preds = %31
  %38 = tail call zeroext i1 @_ZN7logging22ShouldCreateLogMessageEi(i32 2) #13
  br i1 %38, label %39, label %237

39:                                               ; preds = %37
  %40 = bitcast %"class.logging::LogMessage"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %40) #13
  call void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"* nonnull %3, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str, i64 0, i64 0), i32 76, i32 2) #13
  %41 = getelementptr inbounds %"class.logging::LogMessage", %"class.logging::LogMessage"* %3, i64 0, i32 2
  %42 = bitcast %"class.std::__1::basic_ostringstream"* %41 to %"class.std::__1::basic_ostream"*
  %43 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %42, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i64 25) #13
  call void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"* nonnull %3) #13
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %40) #13
  br label %237

44:                                               ; preds = %31
  %45 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock", %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* %35, i64 0, i32 0, i64 0
  tail call void @_ZdlPv(i8* %45) #12
  %46 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %32, align 8
  %47 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %46, i64 %1
  store %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* null, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %47, align 8
  br label %237

48:                                               ; preds = %2, %9, %25
  %49 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 1
  %50 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %49, align 8, !noalias !18
  %51 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %50, i64 8, i32 0
  %52 = getelementptr inbounds i8, i8* %51, i64 2
  %53 = load i8, i8* %52, align 1, !noalias !18
  %54 = ptrtoint %"class.absl::container_internal::btree_node"* %50 to i64
  %55 = getelementptr inbounds i8, i8* %51, i64 3
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %74, label %58

58:                                               ; preds = %48
  %59 = zext i8 %53 to i32
  %60 = add nsw i32 %59, -1
  %61 = icmp eq i8 %53, 0
  br i1 %61, label %62, label %110

62:                                               ; preds = %58, %70
  %63 = phi %"class.absl::container_internal::btree_node"* [ %65, %70 ], [ %50, %58 ]
  %64 = bitcast %"class.absl::container_internal::btree_node"* %63 to %"class.absl::container_internal::btree_node"**
  %65 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %64, align 8
  %66 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %65, i64 8, i32 0
  %67 = getelementptr inbounds i8, i8* %66, i64 3
  %68 = load i8, i8* %67, align 1
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %70, label %110

70:                                               ; preds = %62
  %71 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %63, i64 8, i32 0
  %72 = load i8, i8* %71, align 1
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %62, label %106

74:                                               ; preds = %48
  %75 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %50, i64 256, i32 0
  %76 = bitcast i8* %75 to %"class.absl::container_internal::btree_node"**
  %77 = zext i8 %53 to i64
  %78 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %76, i64 %77
  %79 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %78, align 8
  %80 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %79, i64 8, i32 0
  %81 = getelementptr inbounds i8, i8* %80, i64 3
  %82 = load i8, i8* %81, align 1
  %83 = icmp eq i8 %82, 0
  %84 = getelementptr inbounds i8, i8* %80, i64 2
  %85 = load i8, i8* %84, align 1
  br i1 %83, label %86, label %100

86:                                               ; preds = %74, %86
  %87 = phi i8 [ %99, %86 ], [ %85, %74 ]
  %88 = phi %"class.absl::container_internal::btree_node"* [ %93, %86 ], [ %79, %74 ]
  %89 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %88, i64 256, i32 0
  %90 = bitcast i8* %89 to %"class.absl::container_internal::btree_node"**
  %91 = zext i8 %87 to i64
  %92 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %90, i64 %91
  %93 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %92, align 8
  %94 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %93, i64 8, i32 0
  %95 = getelementptr inbounds i8, i8* %94, i64 3
  %96 = load i8, i8* %95, align 1
  %97 = icmp eq i8 %96, 0
  %98 = getelementptr inbounds i8, i8* %94, i64 2
  %99 = load i8, i8* %98, align 1
  br i1 %97, label %86, label %100

100:                                              ; preds = %86, %74
  %101 = phi %"class.absl::container_internal::btree_node"* [ %79, %74 ], [ %93, %86 ]
  %102 = phi i8 [ %85, %74 ], [ %99, %86 ]
  %103 = ptrtoint %"class.absl::container_internal::btree_node"* %101 to i64
  %104 = zext i8 %102 to i32
  %105 = add nsw i32 %104, -1
  br label %110

106:                                              ; preds = %70
  %107 = ptrtoint %"class.absl::container_internal::btree_node"* %65 to i64
  %108 = zext i8 %72 to i32
  %109 = add nsw i32 %108, -1
  br label %110

110:                                              ; preds = %62, %106, %100, %58
  %111 = phi i32 [ %105, %100 ], [ %60, %58 ], [ %109, %106 ], [ %60, %62 ]
  %112 = phi i64 [ %103, %100 ], [ %54, %58 ], [ %107, %106 ], [ %54, %62 ]
  %113 = inttoptr i64 %112 to %"class.absl::container_internal::btree_node"*
  %114 = icmp eq i64 %112, 0
  br i1 %114, label %115, label %116, !prof !10

115:                                              ; preds = %110
  tail call void @llvm.trap() #13
  unreachable

116:                                              ; preds = %110
  %117 = icmp slt i32 %111, 0
  br i1 %117, label %118, label %119, !prof !10

118:                                              ; preds = %116
  tail call void @llvm.trap() #13
  unreachable

119:                                              ; preds = %116
  %120 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %113, i64 8, i32 0
  %121 = getelementptr inbounds i8, i8* %120, i64 2
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = icmp slt i32 %111, %123
  br i1 %124, label %126, label %125, !prof !11

125:                                              ; preds = %119
  tail call void @llvm.trap() #13
  unreachable

126:                                              ; preds = %119
  %127 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %113, i64 16, i32 0
  %128 = bitcast i8* %127 to %"class.quic::QuicInterval"*
  %129 = sext i32 %111 to i64
  %130 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %128, i64 %129, i32 1
  %131 = load i64, i64* %130, align 8
  %132 = add i64 %131, -1
  %133 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 0
  %134 = load i64, i64* %133, align 8
  %135 = urem i64 %132, %134
  %136 = lshr i64 %135, 13
  %137 = icmp eq i64 %136, %1
  br i1 %137, label %237, label %138

138:                                              ; preds = %126
  %139 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 3
  %140 = load i64, i64* %139, align 8
  %141 = urem i64 %140, %134
  %142 = lshr i64 %141, 13
  %143 = icmp eq i64 %142, %1
  br i1 %143, label %144, label %220

144:                                              ; preds = %138
  %145 = icmp ugt i64 %8, 1
  br i1 %145, label %146, label %213

146:                                              ; preds = %144
  %147 = bitcast %"class.quic::QuicIntervalSet"* %6 to %"class.absl::container_internal::btree_node"***
  %148 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %147, align 8
  %149 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %148, align 8
  %150 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %149, i64 8, i32 0
  %151 = getelementptr inbounds i8, i8* %150, i64 3
  %152 = load i8, i8* %151, align 1
  %153 = icmp eq i8 %152, 0
  br i1 %153, label %172, label %154

154:                                              ; preds = %146
  %155 = getelementptr inbounds i8, i8* %150, i64 2
  %156 = load i8, i8* %155, align 1
  %157 = icmp eq i8 %156, 1
  br i1 %157, label %158, label %192

158:                                              ; preds = %154, %167
  %159 = phi i8* [ %163, %167 ], [ %150, %154 ]
  %160 = phi %"class.absl::container_internal::btree_node"* [ %162, %167 ], [ %149, %154 ]
  %161 = bitcast %"class.absl::container_internal::btree_node"* %160 to %"class.absl::container_internal::btree_node"**
  %162 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %161, align 8
  %163 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %162, i64 8, i32 0
  %164 = getelementptr inbounds i8, i8* %163, i64 3
  %165 = load i8, i8* %164, align 1
  %166 = icmp eq i8 %165, 0
  br i1 %166, label %167, label %192

167:                                              ; preds = %158
  %168 = load i8, i8* %159, align 1
  %169 = getelementptr inbounds i8, i8* %163, i64 2
  %170 = load i8, i8* %169, align 1
  %171 = icmp eq i8 %168, %170
  br i1 %171, label %158, label %190

172:                                              ; preds = %146
  %173 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %149, i64 256, i32 0
  %174 = getelementptr inbounds i8, i8* %173, i64 8
  %175 = bitcast i8* %174 to %"class.absl::container_internal::btree_node"**
  %176 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, align 8
  %177 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %176, i64 8, i32 0
  %178 = getelementptr inbounds i8, i8* %177, i64 3
  %179 = load i8, i8* %178, align 1
  %180 = icmp eq i8 %179, 0
  br i1 %180, label %181, label %192

181:                                              ; preds = %172, %181
  %182 = phi %"class.absl::container_internal::btree_node"* [ %185, %181 ], [ %176, %172 ]
  %183 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %182, i64 256, i32 0
  %184 = bitcast i8* %183 to %"class.absl::container_internal::btree_node"**
  %185 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %184, align 8
  %186 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %185, i64 8, i32 0
  %187 = getelementptr inbounds i8, i8* %186, i64 3
  %188 = load i8, i8* %187, align 1
  %189 = icmp eq i8 %188, 0
  br i1 %189, label %181, label %192

190:                                              ; preds = %167
  %191 = zext i8 %168 to i32
  br label %192

192:                                              ; preds = %158, %181, %190, %154, %172
  %193 = phi %"class.absl::container_internal::btree_node"* [ %149, %154 ], [ %176, %172 ], [ %162, %190 ], [ %185, %181 ], [ %149, %158 ]
  %194 = phi i32 [ 1, %154 ], [ 0, %172 ], [ %191, %190 ], [ 0, %181 ], [ 1, %158 ]
  %195 = icmp eq %"class.absl::container_internal::btree_node"* %193, null
  br i1 %195, label %196, label %197, !prof !10

196:                                              ; preds = %192
  tail call void @llvm.trap() #13
  unreachable

197:                                              ; preds = %192
  %198 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %193, i64 8, i32 0
  %199 = getelementptr inbounds i8, i8* %198, i64 2
  %200 = load i8, i8* %199, align 1
  %201 = zext i8 %200 to i32
  %202 = icmp ult i32 %194, %201
  br i1 %202, label %204, label %203, !prof !11

203:                                              ; preds = %197
  tail call void @llvm.trap() #13
  unreachable

204:                                              ; preds = %197
  %205 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %193, i64 16, i32 0
  %206 = bitcast i8* %205 to %"class.quic::QuicInterval"*
  %207 = zext i32 %194 to i64
  %208 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %206, i64 %207, i32 0
  %209 = load i64, i64* %208, align 8
  %210 = urem i64 %209, %134
  %211 = lshr i64 %210, 13
  %212 = icmp eq i64 %211, %1
  br i1 %212, label %237, label %220

213:                                              ; preds = %144
  %214 = tail call zeroext i1 @_ZN7logging22ShouldCreateLogMessageEi(i32 2) #13
  br i1 %214, label %215, label %237

215:                                              ; preds = %213
  %216 = bitcast %"class.logging::LogMessage"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %216) #13
  call void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"* nonnull %5, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str, i64 0, i64 0), i32 519, i32 2) #13
  %217 = getelementptr inbounds %"class.logging::LogMessage", %"class.logging::LogMessage"* %5, i64 0, i32 2
  %218 = bitcast %"class.std::__1::basic_ostringstream"* %217 to %"class.std::__1::basic_ostream"*
  %219 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %218, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.19, i64 0, i64 0), i64 35) #13
  call void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %216) #13
  br label %237

220:                                              ; preds = %204, %138
  %221 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %222 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %221, align 8
  %223 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %222, i64 %1
  %224 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %223, align 8
  %225 = icmp eq %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* %224, null
  br i1 %225, label %226, label %233

226:                                              ; preds = %220
  %227 = tail call zeroext i1 @_ZN7logging22ShouldCreateLogMessageEi(i32 2) #13
  br i1 %227, label %228, label %237

228:                                              ; preds = %226
  %229 = bitcast %"class.logging::LogMessage"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %229) #13
  call void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"* nonnull %4, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str, i64 0, i64 0), i32 76, i32 2) #13
  %230 = getelementptr inbounds %"class.logging::LogMessage", %"class.logging::LogMessage"* %4, i64 0, i32 2
  %231 = bitcast %"class.std::__1::basic_ostringstream"* %230 to %"class.std::__1::basic_ostream"*
  %232 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %231, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i64 25) #13
  call void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"* nonnull %4) #13
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %229) #13
  br label %237

233:                                              ; preds = %220
  %234 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock", %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* %224, i64 0, i32 0, i64 0
  tail call void @_ZdlPv(i8* %234) #12
  %235 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %221, align 8
  %236 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %235, i64 %1
  store %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* null, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %236, align 8
  br label %237

237:                                              ; preds = %204, %233, %228, %226, %215, %213, %44, %39, %37, %126
  %238 = phi i1 [ true, %204 ], [ true, %126 ], [ true, %44 ], [ false, %37 ], [ false, %39 ], [ false, %213 ], [ false, %215 ], [ true, %233 ], [ false, %226 ], [ false, %228 ]
  ret i1 %238
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK4quic25QuicStreamSequencerBuffer18GetReadableRegionsEP5ioveci(%"class.quic::QuicStreamSequencerBuffer"* readonly, %struct.iovec* nocapture, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %29, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7
  %9 = bitcast %"class.quic::QuicIntervalSet"* %8 to %"class.absl::container_internal::btree_node"***
  %10 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %9, align 8
  %11 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %10, align 8
  %12 = icmp eq %"class.absl::container_internal::btree_node"* %11, null
  br i1 %12, label %13, label %14, !prof !10

13:                                               ; preds = %7
  tail call void @llvm.trap() #13
  unreachable

14:                                               ; preds = %7
  %15 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %11, i64 8, i32 0
  %16 = getelementptr inbounds i8, i8* %15, i64 2
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %20, !prof !10

19:                                               ; preds = %14
  tail call void @llvm.trap() #13
  unreachable

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %11, i64 16, i32 0
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %29

25:                                               ; preds = %20
  %26 = getelementptr inbounds i8, i8* %21, i64 8
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 8
  br label %29

29:                                               ; preds = %3, %20, %25
  %30 = phi i64 [ %28, %25 ], [ 0, %20 ], [ 0, %3 ]
  %31 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 3
  %32 = load i64, i64* %31, align 8
  %33 = icmp eq i64 %30, %32
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = bitcast %struct.iovec* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 16, i1 false)
  br label %173

36:                                               ; preds = %29
  %37 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = urem i64 %32, %38
  %40 = lshr i64 %39, 13
  br i1 %6, label %64, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7
  %43 = bitcast %"class.quic::QuicIntervalSet"* %42 to %"class.absl::container_internal::btree_node"***
  %44 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %43, align 8
  %45 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %44, align 8
  %46 = icmp eq %"class.absl::container_internal::btree_node"* %45, null
  br i1 %46, label %47, label %48, !prof !10

47:                                               ; preds = %41
  tail call void @llvm.trap() #13
  unreachable

48:                                               ; preds = %41
  %49 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %45, i64 8, i32 0
  %50 = getelementptr inbounds i8, i8* %49, i64 2
  %51 = load i8, i8* %50, align 1
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %53, label %54, !prof !10

53:                                               ; preds = %48
  tail call void @llvm.trap() #13
  unreachable

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %45, i64 16, i32 0
  %56 = bitcast i8* %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %64

59:                                               ; preds = %54
  %60 = getelementptr inbounds i8, i8* %55, i64 8
  %61 = bitcast i8* %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, -1
  br label %64

64:                                               ; preds = %36, %54, %59
  %65 = phi i64 [ %63, %59 ], [ -1, %54 ], [ -1, %36 ]
  %66 = urem i64 %65, %38
  %67 = and i64 %66, 8191
  %68 = lshr i64 %66, 13
  %69 = icmp ne i64 %40, %68
  %70 = and i64 %39, 8191
  %71 = icmp ugt i64 %70, %67
  %72 = or i1 %69, %71
  %73 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %74 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %73, align 8
  %75 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %74, i64 %40
  %76 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %75, align 8
  %77 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock", %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* %76, i64 0, i32 0, i64 %70
  %78 = getelementptr inbounds %struct.iovec, %struct.iovec* %1, i64 0, i32 0
  store i8* %77, i8** %78, align 8
  br i1 %72, label %109, label %79

79:                                               ; preds = %64
  %80 = load i64, i64* %4, align 8
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %104, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7
  %84 = bitcast %"class.quic::QuicIntervalSet"* %83 to %"class.absl::container_internal::btree_node"***
  %85 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %84, align 8
  %86 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %85, align 8
  %87 = icmp eq %"class.absl::container_internal::btree_node"* %86, null
  br i1 %87, label %88, label %89, !prof !10

88:                                               ; preds = %82
  tail call void @llvm.trap() #13
  unreachable

89:                                               ; preds = %82
  %90 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %86, i64 8, i32 0
  %91 = getelementptr inbounds i8, i8* %90, i64 2
  %92 = load i8, i8* %91, align 1
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %94, label %95, !prof !10

94:                                               ; preds = %89
  tail call void @llvm.trap() #13
  unreachable

95:                                               ; preds = %89
  %96 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %86, i64 16, i32 0
  %97 = bitcast i8* %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %104

100:                                              ; preds = %95
  %101 = getelementptr inbounds i8, i8* %96, i64 8
  %102 = bitcast i8* %101 to i64*
  %103 = load i64, i64* %102, align 8
  br label %104

104:                                              ; preds = %79, %95, %100
  %105 = phi i64 [ %103, %100 ], [ 0, %95 ], [ 0, %79 ]
  %106 = load i64, i64* %31, align 8
  %107 = sub i64 %105, %106
  %108 = getelementptr inbounds %struct.iovec, %struct.iovec* %1, i64 0, i32 1
  store i64 %107, i64* %108, align 8
  br label %173

109:                                              ; preds = %64
  %110 = add nuw nsw i64 %40, 1
  %111 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 1
  %112 = load i64, i64* %111, align 8
  %113 = icmp eq i64 %110, %112
  %114 = load i64, i64* %37, align 8
  br i1 %113, label %115, label %119

115:                                              ; preds = %109
  %116 = and i64 %114, 8191
  %117 = icmp eq i64 %116, 0
  %118 = select i1 %117, i64 8192, i64 %116
  br label %119

119:                                              ; preds = %109, %115
  %120 = phi i64 [ %118, %115 ], [ 8192, %109 ]
  %121 = load i64, i64* %31, align 8
  %122 = urem i64 %121, %114
  %123 = and i64 %122, 8191
  %124 = sub nsw i64 %120, %123
  %125 = getelementptr inbounds %struct.iovec, %struct.iovec* %1, i64 0, i32 1
  store i64 %124, i64* %125, align 8
  %126 = load i64, i64* %111, align 8
  %127 = urem i64 %110, %126
  %128 = icmp ne i64 %127, %68
  %129 = icmp sgt i32 %2, 1
  %130 = and i1 %129, %128
  br i1 %130, label %131, label %161

131:                                              ; preds = %119
  %132 = sext i32 %2 to i64
  br label %133

133:                                              ; preds = %131, %149
  %134 = phi i64 [ 1, %131 ], [ %152, %149 ]
  %135 = phi i64 [ %127, %131 ], [ %155, %149 ]
  %136 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %73, align 8
  %137 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %136, i64 %135
  %138 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %137, align 8
  %139 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock", %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* %138, i64 0, i32 0, i64 0
  %140 = getelementptr inbounds %struct.iovec, %struct.iovec* %1, i64 %134, i32 0
  store i8* %139, i8** %140, align 8
  %141 = add nuw nsw i64 %135, 1
  %142 = load i64, i64* %111, align 8
  %143 = icmp eq i64 %141, %142
  br i1 %143, label %144, label %149

144:                                              ; preds = %133
  %145 = load i64, i64* %37, align 8
  %146 = and i64 %145, 8191
  %147 = icmp eq i64 %146, 0
  %148 = select i1 %147, i64 8192, i64 %146
  br label %149

149:                                              ; preds = %133, %144
  %150 = phi i64 [ %148, %144 ], [ 8192, %133 ]
  %151 = getelementptr inbounds %struct.iovec, %struct.iovec* %1, i64 %134, i32 1
  store i64 %150, i64* %151, align 8
  %152 = add nuw nsw i64 %134, 1
  %153 = add nuw nsw i64 %40, %152
  %154 = load i64, i64* %111, align 8
  %155 = urem i64 %153, %154
  %156 = icmp ne i64 %155, %68
  %157 = icmp slt i64 %152, %132
  %158 = and i1 %157, %156
  br i1 %158, label %133, label %159

159:                                              ; preds = %149
  %160 = trunc i64 %152 to i32
  br i1 %157, label %162, label %173

161:                                              ; preds = %119
  br i1 %129, label %162, label %173

162:                                              ; preds = %159, %161
  %163 = phi i32 [ %160, %159 ], [ 1, %161 ]
  %164 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %73, align 8
  %165 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %164, i64 %68
  %166 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %165, align 8
  %167 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock", %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* %166, i64 0, i32 0, i64 0
  %168 = zext i32 %163 to i64
  %169 = getelementptr inbounds %struct.iovec, %struct.iovec* %1, i64 %168, i32 0
  store i8* %167, i8** %169, align 8
  %170 = add nuw nsw i64 %67, 1
  %171 = getelementptr inbounds %struct.iovec, %struct.iovec* %1, i64 %168, i32 1
  store i64 %170, i64* %171, align 8
  %172 = add nuw nsw i32 %163, 1
  br label %173

173:                                              ; preds = %159, %104, %162, %161, %34
  %174 = phi i32 [ 0, %34 ], [ 1, %104 ], [ %172, %162 ], [ 1, %161 ], [ %160, %159 ]
  ret i32 %174
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4quic25QuicStreamSequencerBuffer16FirstMissingByteEv(%"class.quic::QuicStreamSequencerBuffer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %27, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7
  %7 = bitcast %"class.quic::QuicIntervalSet"* %6 to %"class.absl::container_internal::btree_node"***
  %8 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %7, align 8
  %9 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %8, align 8
  %10 = icmp eq %"class.absl::container_internal::btree_node"* %9, null
  br i1 %10, label %11, label %12, !prof !10

11:                                               ; preds = %5
  tail call void @llvm.trap() #13
  unreachable

12:                                               ; preds = %5
  %13 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %9, i64 8, i32 0
  %14 = getelementptr inbounds i8, i8* %13, i64 2
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %18, !prof !10

17:                                               ; preds = %12
  tail call void @llvm.trap() #13
  unreachable

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %9, i64 16, i32 0
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %27

23:                                               ; preds = %18
  %24 = getelementptr inbounds i8, i8* %19, i64 8
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %25, align 8
  br label %27

27:                                               ; preds = %1, %18, %23
  %28 = phi i64 [ %26, %23 ], [ 0, %18 ], [ 0, %1 ]
  ret i64 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4quic25QuicStreamSequencerBuffer17GetReadableRegionEP5iovec(%"class.quic::QuicStreamSequencerBuffer"* readonly, %struct.iovec* nocapture) local_unnamed_addr #0 align 2 {
  %3 = tail call i32 @_ZNK4quic25QuicStreamSequencerBuffer18GetReadableRegionsEP5ioveci(%"class.quic::QuicStreamSequencerBuffer"* %0, %struct.iovec* %1, i32 1)
  %4 = icmp eq i32 %3, 1
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4quic25QuicStreamSequencerBuffer10PeekRegionEmP5iovec(%"class.quic::QuicStreamSequencerBuffer"* nocapture readonly, i64, %struct.iovec* nocapture) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, %1
  br i1 %6, label %114, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %114, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7
  %13 = bitcast %"class.quic::QuicIntervalSet"* %12 to %"class.absl::container_internal::btree_node"***
  %14 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %13, align 8
  %15 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %14, align 8
  %16 = icmp eq %"class.absl::container_internal::btree_node"* %15, null
  br i1 %16, label %17, label %18, !prof !10

17:                                               ; preds = %11
  tail call void @llvm.trap() #13
  unreachable

18:                                               ; preds = %11
  %19 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %15, i64 8, i32 0
  %20 = getelementptr inbounds i8, i8* %19, i64 2
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %24, !prof !10

23:                                               ; preds = %18
  tail call void @llvm.trap() #13
  unreachable

24:                                               ; preds = %18
  %25 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %15, i64 16, i32 0
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %29, label %114

29:                                               ; preds = %24
  %30 = getelementptr inbounds i8, i8* %25, i64 8
  %31 = bitcast i8* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = icmp ugt i64 %32, %1
  br i1 %33, label %34, label %114

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = urem i64 %1, %36
  %38 = lshr i64 %37, 13
  %39 = and i64 %37, 8191
  %40 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %41 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %40, align 8
  %42 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %41, i64 %38
  %43 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %42, align 8
  %44 = getelementptr inbounds %"struct.quic::QuicStreamSequencerBuffer::BufferBlock", %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"* %43, i64 0, i32 0, i64 %39
  %45 = getelementptr inbounds %struct.iovec, %struct.iovec* %2, i64 0, i32 0
  store i8* %44, i8** %45, align 8
  %46 = load i64, i64* %8, align 8
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %68, label %48

48:                                               ; preds = %34
  %49 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %13, align 8
  %50 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %49, align 8
  %51 = icmp eq %"class.absl::container_internal::btree_node"* %50, null
  br i1 %51, label %52, label %53, !prof !10

52:                                               ; preds = %48
  tail call void @llvm.trap() #13
  unreachable

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %50, i64 8, i32 0
  %55 = getelementptr inbounds i8, i8* %54, i64 2
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %58, label %59, !prof !10

58:                                               ; preds = %53
  tail call void @llvm.trap() #13
  unreachable

59:                                               ; preds = %53
  %60 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %50, i64 16, i32 0
  %61 = bitcast i8* %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %59
  %65 = getelementptr inbounds i8, i8* %60, i64 8
  %66 = bitcast i8* %65 to i64*
  %67 = load i64, i64* %66, align 8
  br label %68

68:                                               ; preds = %34, %59, %64
  %69 = phi i64 [ %67, %64 ], [ 0, %59 ], [ 0, %34 ]
  %70 = load i64, i64* %35, align 8
  %71 = urem i64 %69, %70
  %72 = lshr i64 %71, 13
  %73 = icmp eq i64 %38, %72
  br i1 %73, label %74, label %101

74:                                               ; preds = %68
  br i1 %47, label %95, label %75

75:                                               ; preds = %74
  %76 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %13, align 8
  %77 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %76, align 8
  %78 = icmp eq %"class.absl::container_internal::btree_node"* %77, null
  br i1 %78, label %79, label %80, !prof !10

79:                                               ; preds = %75
  tail call void @llvm.trap() #13
  unreachable

80:                                               ; preds = %75
  %81 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %77, i64 8, i32 0
  %82 = getelementptr inbounds i8, i8* %81, i64 2
  %83 = load i8, i8* %82, align 1
  %84 = icmp eq i8 %83, 0
  br i1 %84, label %85, label %86, !prof !10

85:                                               ; preds = %80
  tail call void @llvm.trap() #13
  unreachable

86:                                               ; preds = %80
  %87 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %77, i64 16, i32 0
  %88 = bitcast i8* %87 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %95

91:                                               ; preds = %86
  %92 = getelementptr inbounds i8, i8* %87, i64 8
  %93 = bitcast i8* %92 to i64*
  %94 = load i64, i64* %93, align 8
  br label %95

95:                                               ; preds = %74, %86, %91
  %96 = phi i64 [ %94, %91 ], [ 0, %86 ], [ 0, %74 ]
  %97 = urem i64 %96, %70
  %98 = and i64 %97, 8191
  %99 = sub nsw i64 %98, %39
  %100 = getelementptr inbounds %struct.iovec, %struct.iovec* %2, i64 0, i32 1
  store i64 %99, i64* %100, align 8
  br label %114

101:                                              ; preds = %68
  %102 = add nuw nsw i64 %38, 1
  %103 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 1
  %104 = load i64, i64* %103, align 8
  %105 = icmp eq i64 %102, %104
  br i1 %105, label %106, label %110

106:                                              ; preds = %101
  %107 = and i64 %70, 8191
  %108 = icmp eq i64 %107, 0
  %109 = select i1 %108, i64 8192, i64 %107
  br label %110

110:                                              ; preds = %101, %106
  %111 = phi i64 [ %109, %106 ], [ 8192, %101 ]
  %112 = sub nsw i64 %111, %39
  %113 = getelementptr inbounds %struct.iovec, %struct.iovec* %2, i64 0, i32 1
  store i64 %112, i64* %113, align 8
  br label %114

114:                                              ; preds = %7, %24, %95, %110, %29, %3
  %115 = phi i1 [ false, %3 ], [ false, %29 ], [ true, %110 ], [ true, %95 ], [ false, %24 ], [ false, %7 ]
  ret i1 %115
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4quic25QuicStreamSequencerBuffer12MarkConsumedEm(%"class.quic::QuicStreamSequencerBuffer"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %28, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7
  %8 = bitcast %"class.quic::QuicIntervalSet"* %7 to %"class.absl::container_internal::btree_node"***
  %9 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %8, align 8
  %10 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %9, align 8
  %11 = icmp eq %"class.absl::container_internal::btree_node"* %10, null
  br i1 %11, label %12, label %13, !prof !10

12:                                               ; preds = %6
  tail call void @llvm.trap() #13
  unreachable

13:                                               ; preds = %6
  %14 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %10, i64 8, i32 0
  %15 = getelementptr inbounds i8, i8* %14, i64 2
  %16 = load i8, i8* %15, align 1
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %19, !prof !10

18:                                               ; preds = %13
  tail call void @llvm.trap() #13
  unreachable

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %10, i64 16, i32 0
  %21 = bitcast i8* %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %28

24:                                               ; preds = %19
  %25 = getelementptr inbounds i8, i8* %20, i64 8
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  br label %28

28:                                               ; preds = %2, %19, %24
  %29 = phi i64 [ %27, %24 ], [ 0, %19 ], [ 0, %2 ]
  %30 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 3
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %29, %31
  %33 = icmp ult i64 %32, %1
  br i1 %33, label %100, label %34

34:                                               ; preds = %28
  %35 = icmp eq i64 %1, 0
  br i1 %35, label %100, label %36

36:                                               ; preds = %34
  %37 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 0
  %38 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7
  %39 = bitcast %"class.quic::QuicIntervalSet"* %38 to %"class.absl::container_internal::btree_node"***
  %40 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 1
  %41 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 6
  br label %42

42:                                               ; preds = %97, %36
  %43 = phi i64 [ %4, %36 ], [ %99, %97 ]
  %44 = phi i64 [ %31, %36 ], [ %98, %97 ]
  %45 = phi i64 [ %1, %36 ], [ %91, %97 ]
  %46 = load i64, i64* %37, align 8
  %47 = urem i64 %44, %46
  %48 = lshr i64 %47, 13
  %49 = and i64 %47, 8191
  %50 = icmp eq i64 %43, 0
  br i1 %50, label %71, label %51

51:                                               ; preds = %42
  %52 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %39, align 8
  %53 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %52, align 8
  %54 = icmp eq %"class.absl::container_internal::btree_node"* %53, null
  br i1 %54, label %55, label %56, !prof !10

55:                                               ; preds = %51
  tail call void @llvm.trap() #13
  unreachable

56:                                               ; preds = %51
  %57 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %53, i64 8, i32 0
  %58 = getelementptr inbounds i8, i8* %57, i64 2
  %59 = load i8, i8* %58, align 1
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %61, label %62, !prof !10

61:                                               ; preds = %56
  tail call void @llvm.trap() #13
  unreachable

62:                                               ; preds = %56
  %63 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %53, i64 16, i32 0
  %64 = bitcast i8* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %71

67:                                               ; preds = %62
  %68 = getelementptr inbounds i8, i8* %63, i64 8
  %69 = bitcast i8* %68 to i64*
  %70 = load i64, i64* %69, align 8
  br label %71

71:                                               ; preds = %42, %62, %67
  %72 = phi i64 [ %70, %67 ], [ 0, %62 ], [ 0, %42 ]
  %73 = sub i64 %72, %44
  %74 = add nuw nsw i64 %48, 1
  %75 = load i64, i64* %40, align 8
  %76 = icmp eq i64 %74, %75
  br i1 %76, label %77, label %81

77:                                               ; preds = %71
  %78 = and i64 %46, 8191
  %79 = icmp eq i64 %78, 0
  %80 = select i1 %79, i64 8192, i64 %78
  br label %81

81:                                               ; preds = %71, %77
  %82 = phi i64 [ %80, %77 ], [ 8192, %71 ]
  %83 = sub nsw i64 %82, %49
  %84 = icmp ult i64 %83, %73
  %85 = select i1 %84, i64 %83, i64 %73
  %86 = icmp ult i64 %85, %45
  %87 = select i1 %86, i64 %85, i64 %45
  %88 = add i64 %87, %44
  store i64 %88, i64* %30, align 8
  %89 = load i64, i64* %41, align 8
  %90 = sub i64 %89, %87
  store i64 %90, i64* %41, align 8
  %91 = sub i64 %45, %87
  %92 = icmp ugt i64 %85, %45
  br i1 %92, label %95, label %93

93:                                               ; preds = %81
  %94 = tail call zeroext i1 @_ZN4quic25QuicStreamSequencerBuffer18RetireBlockIfEmptyEm(%"class.quic::QuicStreamSequencerBuffer"* %0, i64 %48)
  br label %95

95:                                               ; preds = %81, %93
  %96 = icmp eq i64 %91, 0
  br i1 %96, label %100, label %97

97:                                               ; preds = %95
  %98 = load i64, i64* %30, align 8
  %99 = load i64, i64* %3, align 8
  br label %42

100:                                              ; preds = %95, %34, %28
  %101 = phi i1 [ false, %28 ], [ true, %34 ], [ true, %95 ]
  ret i1 %101
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4quic25QuicStreamSequencerBuffer19FlushBufferedFramesEv(%"class.quic::QuicStreamSequencerBuffer"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 3
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %91, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %8, align 8, !noalias !25
  %10 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %9, i64 8, i32 0
  %11 = getelementptr inbounds i8, i8* %10, i64 2
  %12 = load i8, i8* %11, align 1, !noalias !25
  %13 = ptrtoint %"class.absl::container_internal::btree_node"* %9 to i64
  %14 = getelementptr inbounds i8, i8* %10, i64 3
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %33, label %17

17:                                               ; preds = %7
  %18 = zext i8 %12 to i32
  %19 = add nsw i32 %18, -1
  %20 = icmp eq i8 %12, 0
  br i1 %20, label %21, label %69

21:                                               ; preds = %17, %29
  %22 = phi %"class.absl::container_internal::btree_node"* [ %24, %29 ], [ %9, %17 ]
  %23 = bitcast %"class.absl::container_internal::btree_node"* %22 to %"class.absl::container_internal::btree_node"**
  %24 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %23, align 8
  %25 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %24, i64 8, i32 0
  %26 = getelementptr inbounds i8, i8* %25, i64 3
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %69

29:                                               ; preds = %21
  %30 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %22, i64 8, i32 0
  %31 = load i8, i8* %30, align 1
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %21, label %65

33:                                               ; preds = %7
  %34 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %9, i64 256, i32 0
  %35 = bitcast i8* %34 to %"class.absl::container_internal::btree_node"**
  %36 = zext i8 %12 to i64
  %37 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %35, i64 %36
  %38 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %37, align 8
  %39 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %38, i64 8, i32 0
  %40 = getelementptr inbounds i8, i8* %39, i64 3
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 0
  %43 = getelementptr inbounds i8, i8* %39, i64 2
  %44 = load i8, i8* %43, align 1
  br i1 %42, label %45, label %59

45:                                               ; preds = %33, %45
  %46 = phi i8 [ %58, %45 ], [ %44, %33 ]
  %47 = phi %"class.absl::container_internal::btree_node"* [ %52, %45 ], [ %38, %33 ]
  %48 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %47, i64 256, i32 0
  %49 = bitcast i8* %48 to %"class.absl::container_internal::btree_node"**
  %50 = zext i8 %46 to i64
  %51 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %49, i64 %50
  %52 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %51, align 8
  %53 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %52, i64 8, i32 0
  %54 = getelementptr inbounds i8, i8* %53, i64 3
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 0
  %57 = getelementptr inbounds i8, i8* %53, i64 2
  %58 = load i8, i8* %57, align 1
  br i1 %56, label %45, label %59

59:                                               ; preds = %45, %33
  %60 = phi %"class.absl::container_internal::btree_node"* [ %38, %33 ], [ %52, %45 ]
  %61 = phi i8 [ %44, %33 ], [ %58, %45 ]
  %62 = ptrtoint %"class.absl::container_internal::btree_node"* %60 to i64
  %63 = zext i8 %61 to i32
  %64 = add nsw i32 %63, -1
  br label %69

65:                                               ; preds = %29
  %66 = ptrtoint %"class.absl::container_internal::btree_node"* %24 to i64
  %67 = zext i8 %31 to i32
  %68 = add nsw i32 %67, -1
  br label %69

69:                                               ; preds = %21, %65, %59, %17
  %70 = phi i32 [ %64, %59 ], [ %19, %17 ], [ %68, %65 ], [ %19, %21 ]
  %71 = phi i64 [ %62, %59 ], [ %13, %17 ], [ %66, %65 ], [ %13, %21 ]
  %72 = inttoptr i64 %71 to %"class.absl::container_internal::btree_node"*
  %73 = icmp eq i64 %71, 0
  br i1 %73, label %74, label %75, !prof !10

74:                                               ; preds = %69
  tail call void @llvm.trap() #13
  unreachable

75:                                               ; preds = %69
  %76 = icmp slt i32 %70, 0
  br i1 %76, label %77, label %78, !prof !10

77:                                               ; preds = %75
  tail call void @llvm.trap() #13
  unreachable

78:                                               ; preds = %75
  %79 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %72, i64 8, i32 0
  %80 = getelementptr inbounds i8, i8* %79, i64 2
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = icmp slt i32 %70, %82
  br i1 %83, label %85, label %84, !prof !11

84:                                               ; preds = %78
  tail call void @llvm.trap() #13
  unreachable

85:                                               ; preds = %78
  %86 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %72, i64 16, i32 0
  %87 = bitcast i8* %86 to %"class.quic::QuicInterval"*
  %88 = sext i32 %70 to i64
  %89 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %87, i64 %88, i32 1
  %90 = load i64, i64* %89, align 8
  br label %91

91:                                               ; preds = %1, %85
  %92 = phi i64 [ %90, %85 ], [ 0, %1 ]
  store i64 %92, i64* %2, align 8
  tail call void @_ZN4quic25QuicStreamSequencerBuffer5ClearEv(%"class.quic::QuicStreamSequencerBuffer"* %0)
  %93 = load i64, i64* %2, align 8
  %94 = sub i64 %93, %3
  ret i64 %94
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4quic25QuicStreamSequencerBuffer16NextExpectedByteEv(%"class.quic::QuicStreamSequencerBuffer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %89, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 1
  %7 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %6, align 8, !noalias !32
  %8 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %7, i64 8, i32 0
  %9 = getelementptr inbounds i8, i8* %8, i64 2
  %10 = load i8, i8* %9, align 1, !noalias !32
  %11 = ptrtoint %"class.absl::container_internal::btree_node"* %7 to i64
  %12 = getelementptr inbounds i8, i8* %8, i64 3
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %31, label %15

15:                                               ; preds = %5
  %16 = zext i8 %10 to i32
  %17 = add nsw i32 %16, -1
  %18 = icmp eq i8 %10, 0
  br i1 %18, label %19, label %67

19:                                               ; preds = %15, %27
  %20 = phi %"class.absl::container_internal::btree_node"* [ %22, %27 ], [ %7, %15 ]
  %21 = bitcast %"class.absl::container_internal::btree_node"* %20 to %"class.absl::container_internal::btree_node"**
  %22 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %21, align 8
  %23 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %22, i64 8, i32 0
  %24 = getelementptr inbounds i8, i8* %23, i64 3
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %67

27:                                               ; preds = %19
  %28 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %20, i64 8, i32 0
  %29 = load i8, i8* %28, align 1
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %19, label %63

31:                                               ; preds = %5
  %32 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %7, i64 256, i32 0
  %33 = bitcast i8* %32 to %"class.absl::container_internal::btree_node"**
  %34 = zext i8 %10 to i64
  %35 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %33, i64 %34
  %36 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %35, align 8
  %37 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %36, i64 8, i32 0
  %38 = getelementptr inbounds i8, i8* %37, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 0
  %41 = getelementptr inbounds i8, i8* %37, i64 2
  %42 = load i8, i8* %41, align 1
  br i1 %40, label %43, label %57

43:                                               ; preds = %31, %43
  %44 = phi i8 [ %56, %43 ], [ %42, %31 ]
  %45 = phi %"class.absl::container_internal::btree_node"* [ %50, %43 ], [ %36, %31 ]
  %46 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %45, i64 256, i32 0
  %47 = bitcast i8* %46 to %"class.absl::container_internal::btree_node"**
  %48 = zext i8 %44 to i64
  %49 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %47, i64 %48
  %50 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %49, align 8
  %51 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %50, i64 8, i32 0
  %52 = getelementptr inbounds i8, i8* %51, i64 3
  %53 = load i8, i8* %52, align 1
  %54 = icmp eq i8 %53, 0
  %55 = getelementptr inbounds i8, i8* %51, i64 2
  %56 = load i8, i8* %55, align 1
  br i1 %54, label %43, label %57

57:                                               ; preds = %43, %31
  %58 = phi %"class.absl::container_internal::btree_node"* [ %36, %31 ], [ %50, %43 ]
  %59 = phi i8 [ %42, %31 ], [ %56, %43 ]
  %60 = ptrtoint %"class.absl::container_internal::btree_node"* %58 to i64
  %61 = zext i8 %59 to i32
  %62 = add nsw i32 %61, -1
  br label %67

63:                                               ; preds = %27
  %64 = ptrtoint %"class.absl::container_internal::btree_node"* %22 to i64
  %65 = zext i8 %29 to i32
  %66 = add nsw i32 %65, -1
  br label %67

67:                                               ; preds = %19, %15, %63, %57
  %68 = phi i32 [ %62, %57 ], [ %17, %15 ], [ %66, %63 ], [ %17, %19 ]
  %69 = phi i64 [ %60, %57 ], [ %11, %15 ], [ %64, %63 ], [ %11, %19 ]
  %70 = inttoptr i64 %69 to %"class.absl::container_internal::btree_node"*
  %71 = icmp eq i64 %69, 0
  br i1 %71, label %72, label %73, !prof !10

72:                                               ; preds = %67
  tail call void @llvm.trap() #13
  unreachable

73:                                               ; preds = %67
  %74 = icmp slt i32 %68, 0
  br i1 %74, label %75, label %76, !prof !10

75:                                               ; preds = %73
  tail call void @llvm.trap() #13
  unreachable

76:                                               ; preds = %73
  %77 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %70, i64 8, i32 0
  %78 = getelementptr inbounds i8, i8* %77, i64 2
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = icmp slt i32 %68, %80
  br i1 %81, label %83, label %82, !prof !11

82:                                               ; preds = %76
  tail call void @llvm.trap() #13
  unreachable

83:                                               ; preds = %76
  %84 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %70, i64 16, i32 0
  %85 = bitcast i8* %84 to %"class.quic::QuicInterval"*
  %86 = sext i32 %68 to i64
  %87 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %85, i64 %86, i32 1
  %88 = load i64, i64* %87, align 8
  br label %89

89:                                               ; preds = %1, %83
  %90 = phi i64 [ %88, %83 ], [ 0, %1 ]
  ret i64 %90
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic25QuicStreamSequencerBuffer18ReleaseWholeBufferEv(%"class.quic::QuicStreamSequencerBuffer"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN4quic25QuicStreamSequencerBuffer5ClearEv(%"class.quic::QuicStreamSequencerBuffer"* %0)
  %2 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 2
  store i64 0, i64* %2, align 8
  %3 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %4 = load %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"**, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %3, align 8
  store %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** null, %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"*** %3, align 8
  %5 = icmp eq %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast %"struct.quic::QuicStreamSequencerBuffer::BufferBlock"** %4 to i8*
  tail call void @_ZdaPv(i8* %7) #12
  br label %8

8:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4quic25QuicStreamSequencerBuffer14HasBytesToReadEv(%"class.quic::QuicStreamSequencerBuffer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %27, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7
  %7 = bitcast %"class.quic::QuicIntervalSet"* %6 to %"class.absl::container_internal::btree_node"***
  %8 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %7, align 8
  %9 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %8, align 8
  %10 = icmp eq %"class.absl::container_internal::btree_node"* %9, null
  br i1 %10, label %11, label %12, !prof !10

11:                                               ; preds = %5
  tail call void @llvm.trap() #13
  unreachable

12:                                               ; preds = %5
  %13 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %9, i64 8, i32 0
  %14 = getelementptr inbounds i8, i8* %13, i64 2
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %18, !prof !10

17:                                               ; preds = %12
  tail call void @llvm.trap() #13
  unreachable

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %9, i64 16, i32 0
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %27

23:                                               ; preds = %18
  %24 = getelementptr inbounds i8, i8* %19, i64 8
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %25, align 8
  br label %27

27:                                               ; preds = %1, %18, %23
  %28 = phi i64 [ %26, %23 ], [ 0, %18 ], [ 0, %1 ]
  %29 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 3
  %30 = load i64, i64* %29, align 8
  %31 = icmp ne i64 %28, %30
  ret i1 %31
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK4quic25QuicStreamSequencerBuffer13BytesConsumedEv(%"class.quic::QuicStreamSequencerBuffer"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 3
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK4quic25QuicStreamSequencerBuffer13BytesBufferedEv(%"class.quic::QuicStreamSequencerBuffer"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 6
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4quic25QuicStreamSequencerBuffer5EmptyEv(%"class.quic::QuicStreamSequencerBuffer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7
  %3 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 2
  %4 = load i64, i64* %3, align 8
  switch i64 %4, label %27 [
    i64 0, label %28
    i64 1, label %5
  ]

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.quic::QuicStreamSequencerBuffer", %"class.quic::QuicStreamSequencerBuffer"* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %28, label %9

9:                                                ; preds = %5
  %10 = bitcast %"class.quic::QuicIntervalSet"* %2 to %"class.absl::container_internal::btree_node"***
  %11 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %10, align 8
  %12 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %11, align 8
  %13 = icmp eq %"class.absl::container_internal::btree_node"* %12, null
  br i1 %13, label %14, label %15, !prof !10

14:                                               ; preds = %9
  tail call void @llvm.trap() #13
  unreachable

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %12, i64 8, i32 0
  %17 = getelementptr inbounds i8, i8* %16, i64 2
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %21, !prof !10

20:                                               ; preds = %15
  tail call void @llvm.trap() #13
  unreachable

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %12, i64 16, i32 0
  %23 = getelementptr inbounds i8, i8* %22, i64 8
  %24 = bitcast i8* %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %25, %7
  br label %28

27:                                               ; preds = %1
  br label %28

28:                                               ; preds = %1, %27, %5, %21
  %29 = phi i1 [ true, %1 ], [ false, %5 ], [ %26, %21 ], [ false, %27 ]
  ret i1 %29
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4quic15QuicIntervalSetImE8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.quic::QuicIntervalSet"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.std::__1::basic_ostringstream", align 8
  %4 = bitcast %"class.std::__1::basic_ostringstream"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 264, i8* nonnull %4) #13
  %5 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %3, i64 0, i32 1
  %6 = bitcast %"class.std::__1::basic_stringbuf"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 256, i1 false)
  %7 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %3, i64 0, i32 2, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %3, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %3, i64 0, i32 1
  %10 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %9, i64 0, i32 0
  %11 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1) to i64*), align 8
  %12 = bitcast %"class.std::__1::basic_ostringstream"* %3 to i64*
  store i64 %11, i64* %12, align 8
  %13 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 2) to i64*), align 8
  %14 = bitcast %"class.std::__1::basic_ostringstream"* %3 to i8**
  %15 = inttoptr i64 %11 to i8*
  %16 = getelementptr i8, i8* %15, i64 -24
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds i8, i8* %4, i64 %18
  %20 = bitcast i8* %19 to i64*
  store i64 %13, i64* %20, align 8
  %21 = load i8*, i8** %14, align 8
  %22 = getelementptr i8, i8* %21, i64 -24
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds i8, i8* %4, i64 %24
  %26 = bitcast i8* %25 to %"class.std::__1::ios_base"*
  %27 = bitcast %"class.std::__1::basic_stringbuf"* %9 to i8*
  call void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"* %26, i8* %27) #13
  %28 = getelementptr inbounds i8, i8* %25, i64 136
  %29 = bitcast i8* %28 to %"class.std::__1::basic_ostream"**
  store %"class.std::__1::basic_ostream"* null, %"class.std::__1::basic_ostream"** %29, align 8
  %30 = getelementptr inbounds i8, i8* %25, i64 144
  %31 = bitcast i8* %30 to i32*
  store i32 -1, i32* %31, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %8, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %7, align 8
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"* %10) #13
  %32 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %9, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %32, align 8
  %33 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %3, i64 0, i32 1, i32 1
  %34 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %3, i64 0, i32 1, i32 3
  %35 = bitcast %"class.std::__1::basic_string"* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 32, i1 false) #13
  store i32 16, i32* %34, align 8
  %36 = bitcast %"class.std::__1::basic_ostringstream"* %3 to %"class.std::__1::basic_ostream"*
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN4quiclsImEEDTlsfp_decldtfp0_5beginEERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEERKNS_15QuicIntervalSetIT_EE(%"class.std::__1::basic_ostream"* nonnull dereferenceable(160) %36, %"class.quic::QuicIntervalSet"* dereferenceable(24) %1)
  call void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string"* sret %0, %"class.std::__1::basic_stringbuf"* %9) #13
  %38 = load i64, i64* bitcast ([4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE to i64*), align 8
  store i64 %38, i64* %12, align 8
  %39 = load i64, i64* bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 3) to i64*), align 8
  %40 = inttoptr i64 %38 to i8*
  %41 = getelementptr i8, i8* %40, i64 -24
  %42 = bitcast i8* %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds i8, i8* %4, i64 %43
  %45 = bitcast i8* %44 to i64*
  store i64 %39, i64* %45, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %32, align 8
  %46 = bitcast %"class.std::__1::basic_string"* %33 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %46, i64 0, i32 1, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp slt i8 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %2
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  call void @_ZdlPv(i8* %52) #12
  br label %53

53:                                               ; preds = %2, %50
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %10) #13
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* nonnull %36, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1)) #13
  %54 = getelementptr inbounds %"class.std::__1::basic_ostringstream", %"class.std::__1::basic_ostringstream"* %3, i64 0, i32 2
  %55 = bitcast %"class.std::__1::basic_ios.base"* %54 to %"class.std::__1::basic_ios"*
  call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %55) #13
  call void @llvm.lifetime.end.p0i8(i64 264, i8* nonnull %4) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"*, %"class.std::__1::allocator"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 8, i32 0
  %4 = getelementptr inbounds i8, i8* %3, i64 3
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %83

7:                                                ; preds = %2
  %8 = getelementptr inbounds i8, i8* %3, i64 2
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %83, label %11

11:                                               ; preds = %7
  %12 = bitcast %"class.absl::container_internal::btree_node"* %0 to %"class.absl::container_internal::btree_node"**
  %13 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %12, align 8
  br label %14

14:                                               ; preds = %11, %14
  %15 = phi %"class.absl::container_internal::btree_node"* [ %18, %14 ], [ %0, %11 ]
  %16 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %15, i64 256, i32 0
  %17 = bitcast i8* %16 to %"class.absl::container_internal::btree_node"**
  %18 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %17, align 8
  %19 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %18, i64 8, i32 0
  %20 = getelementptr inbounds i8, i8* %19, i64 3
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %14, label %23

23:                                               ; preds = %14
  %24 = bitcast %"class.absl::container_internal::btree_node"* %18 to %"class.absl::container_internal::btree_node"**
  %25 = load i8, i8* %19, align 1
  %26 = zext i8 %25 to i32
  %27 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %24, align 8
  br label %30

28:                                               ; preds = %78
  %29 = zext i8 %73 to i32
  br label %66

30:                                               ; preds = %66, %23
  %31 = phi i32 [ %26, %23 ], [ %69, %66 ]
  %32 = phi %"class.absl::container_internal::btree_node"* [ %27, %23 ], [ %68, %66 ]
  %33 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %32, i64 256, i32 0
  %34 = bitcast i8* %33 to %"class.absl::container_internal::btree_node"**
  %35 = sext i32 %31 to i64
  %36 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %34, i64 %35
  %37 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %36, align 8
  %38 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %37, i64 8, i32 0
  %39 = getelementptr inbounds i8, i8* %38, i64 3
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %56

42:                                               ; preds = %30, %42
  %43 = phi %"class.absl::container_internal::btree_node"* [ %46, %42 ], [ %37, %30 ]
  %44 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %43, i64 256, i32 0
  %45 = bitcast i8* %44 to %"class.absl::container_internal::btree_node"**
  %46 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %45, align 8
  %47 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %46, i64 8, i32 0
  %48 = getelementptr inbounds i8, i8* %47, i64 3
  %49 = load i8, i8* %48, align 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %42, label %51

51:                                               ; preds = %42
  %52 = load i8, i8* %47, align 1
  %53 = zext i8 %52 to i32
  %54 = bitcast %"class.absl::container_internal::btree_node"* %46 to %"class.absl::container_internal::btree_node"**
  %55 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %54, align 8
  br label %56

56:                                               ; preds = %30, %51
  %57 = phi %"class.absl::container_internal::btree_node"* [ %37, %30 ], [ %46, %51 ]
  %58 = phi i32 [ %31, %30 ], [ %53, %51 ]
  %59 = phi %"class.absl::container_internal::btree_node"* [ %32, %30 ], [ %55, %51 ]
  %60 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %57, i64 0, i32 0
  tail call void @_ZdlPv(i8* %60) #12
  %61 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %59, i64 8, i32 0
  %62 = getelementptr inbounds i8, i8* %61, i64 2
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = icmp slt i32 %58, %64
  br i1 %65, label %66, label %70

66:                                               ; preds = %56, %28
  %67 = phi i32 [ %58, %56 ], [ %29, %28 ]
  %68 = phi %"class.absl::container_internal::btree_node"* [ %59, %56 ], [ %75, %28 ]
  %69 = add nsw i32 %67, 1
  br label %30

70:                                               ; preds = %56, %78
  %71 = phi %"class.absl::container_internal::btree_node"* [ %75, %78 ], [ %59, %56 ]
  %72 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %71, i64 8, i32 0
  %73 = load i8, i8* %72, align 1
  %74 = bitcast %"class.absl::container_internal::btree_node"* %71 to %"class.absl::container_internal::btree_node"**
  %75 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %74, align 8
  %76 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %71, i64 0, i32 0
  tail call void @_ZdlPv(i8* %76) #12
  %77 = icmp eq %"class.absl::container_internal::btree_node"* %75, %13
  br i1 %77, label %85, label %78

78:                                               ; preds = %70
  %79 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %75, i64 8, i32 0
  %80 = getelementptr inbounds i8, i8* %79, i64 2
  %81 = load i8, i8* %80, align 1
  %82 = icmp ult i8 %73, %81
  br i1 %82, label %28, label %70

83:                                               ; preds = %7, %2
  %84 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 0, i32 0
  tail call void @_ZdlPv(i8* %84) #12
  br label %85

85:                                               ; preds = %70, %83
  ret void
}

; Function Attrs: noreturn
declare void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8*) local_unnamed_addr #9

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #10

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #11

declare i8* @_ZN4absl16numbers_internal15FastIntToBufferEmPc(i64, i8*) local_unnamed_addr #2

declare i8* @_ZN4absl16numbers_internal15FastIntToBufferEiPc(i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #13
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #13
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #13
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #13
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #13
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #13
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #13
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #13
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #13
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #13
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #12
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #13
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #13
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #12
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #13
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #13
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #3

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #3

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4quic15QuicIntervalSetImE3AddERKNS_12QuicIntervalImEE(%"class.quic::QuicIntervalSet"*, %"class.quic::QuicInterval"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"struct.std::__1::pair.14", align 8
  %4 = alloca %"class.quic::QuicInterval", align 8
  %5 = alloca %"struct.std::__1::pair", align 8
  %6 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %1, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %1, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp ult i64 %7, %9
  br i1 %10, label %11, label %343

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %13

13:                                               ; preds = %45, %11
  %14 = phi %"class.absl::container_internal::btree_node"** [ %12, %11 ], [ %49, %45 ]
  %15 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %14, align 8
  %16 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %15, i64 8, i32 0
  %17 = getelementptr inbounds i8, i8* %16, i64 2
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %37, label %20

20:                                               ; preds = %13
  %21 = zext i8 %18 to i32
  %22 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %15, i64 16, i32 0
  %23 = bitcast i8* %22 to %"class.quic::QuicInterval"*
  br label %24

24:                                               ; preds = %24, %20
  %25 = phi i32 [ 0, %20 ], [ %35, %24 ]
  %26 = phi i32 [ %21, %20 ], [ %34, %24 ]
  %27 = add nsw i32 %26, %25
  %28 = ashr i32 %27, 1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %23, i64 %29, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = icmp ult i64 %31, %7
  %33 = add nsw i32 %28, 1
  %34 = select i1 %32, i32 %26, i32 %28
  %35 = select i1 %32, i32 %33, i32 %25
  %36 = icmp eq i32 %35, %34
  br i1 %36, label %37, label %24

37:                                               ; preds = %24, %13
  %38 = phi i32 [ 0, %13 ], [ %34, %24 ]
  %39 = getelementptr inbounds i8, i8* %16, i64 3
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %45, label %42

42:                                               ; preds = %37
  %43 = zext i8 %18 to i32
  %44 = icmp eq i32 %38, %43
  br i1 %44, label %50, label %66

45:                                               ; preds = %37
  %46 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %15, i64 256, i32 0
  %47 = bitcast i8* %46 to %"class.absl::container_internal::btree_node"**
  %48 = sext i32 %38 to i64
  %49 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %47, i64 %48
  br label %13

50:                                               ; preds = %42, %58
  %51 = phi %"class.absl::container_internal::btree_node"* [ %53, %58 ], [ %15, %42 ]
  %52 = bitcast %"class.absl::container_internal::btree_node"* %51 to %"class.absl::container_internal::btree_node"**
  %53 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %52, align 8
  %54 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %53, i64 8, i32 0
  %55 = getelementptr inbounds i8, i8* %54, i64 3
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %58, label %70

58:                                               ; preds = %50
  %59 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %51, i64 8, i32 0
  %60 = load i8, i8* %59, align 1
  %61 = getelementptr inbounds i8, i8* %54, i64 2
  %62 = load i8, i8* %61, align 1
  %63 = icmp eq i8 %60, %62
  br i1 %63, label %50, label %64

64:                                               ; preds = %58
  %65 = zext i8 %60 to i32
  br label %66

66:                                               ; preds = %64, %42
  %67 = phi i32 [ %65, %64 ], [ %38, %42 ]
  %68 = phi %"class.absl::container_internal::btree_node"* [ %53, %64 ], [ %15, %42 ]
  %69 = icmp eq %"class.absl::container_internal::btree_node"* %68, null
  br i1 %69, label %70, label %77

70:                                               ; preds = %50, %66
  %71 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %72 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %71, align 8
  %73 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %72, i64 8, i32 0
  %74 = getelementptr inbounds i8, i8* %73, i64 2
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  br label %77

77:                                               ; preds = %66, %70
  %78 = phi %"class.absl::container_internal::btree_node"* [ %72, %70 ], [ %68, %66 ]
  %79 = phi i32 [ %76, %70 ], [ %67, %66 ]
  %80 = ptrtoint %"class.absl::container_internal::btree_node"* %78 to i64
  %81 = bitcast %"class.quic::QuicInterval"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %81) #13
  %82 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %4, i64 0, i32 0
  %83 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %4, i64 0, i32 1
  %84 = bitcast %"class.quic::QuicInterval"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %81, i8* align 8 %84, i64 16, i1 false)
  %85 = bitcast %"class.quic::QuicIntervalSet"* %0 to %"class.absl::container_internal::btree_node"***
  %86 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %85, align 8
  %87 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %86, align 8
  %88 = icmp ne %"class.absl::container_internal::btree_node"* %78, %87
  %89 = icmp ne i32 %79, 0
  %90 = or i1 %89, %88
  br i1 %90, label %91, label %226

91:                                               ; preds = %77
  %92 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %78, i64 8, i32 0
  %93 = getelementptr inbounds i8, i8* %92, i64 3
  %94 = load i8, i8* %93, align 1
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %111, label %96

96:                                               ; preds = %91
  %97 = add nsw i32 %79, -1
  %98 = icmp sgt i32 %79, 0
  br i1 %98, label %147, label %99

99:                                               ; preds = %96, %107
  %100 = phi %"class.absl::container_internal::btree_node"* [ %102, %107 ], [ %78, %96 ]
  %101 = bitcast %"class.absl::container_internal::btree_node"* %100 to %"class.absl::container_internal::btree_node"**
  %102 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %101, align 8
  %103 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %102, i64 8, i32 0
  %104 = getelementptr inbounds i8, i8* %103, i64 3
  %105 = load i8, i8* %104, align 1
  %106 = icmp eq i8 %105, 0
  br i1 %106, label %107, label %147

107:                                              ; preds = %99
  %108 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %100, i64 8, i32 0
  %109 = load i8, i8* %108, align 1
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %99, label %143

111:                                              ; preds = %91
  %112 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %78, i64 256, i32 0
  %113 = bitcast i8* %112 to %"class.absl::container_internal::btree_node"**
  %114 = sext i32 %79 to i64
  %115 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %113, i64 %114
  %116 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %115, align 8
  %117 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %116, i64 8, i32 0
  %118 = getelementptr inbounds i8, i8* %117, i64 3
  %119 = load i8, i8* %118, align 1
  %120 = icmp eq i8 %119, 0
  %121 = getelementptr inbounds i8, i8* %117, i64 2
  %122 = load i8, i8* %121, align 1
  br i1 %120, label %123, label %137

123:                                              ; preds = %111, %123
  %124 = phi i8 [ %136, %123 ], [ %122, %111 ]
  %125 = phi %"class.absl::container_internal::btree_node"* [ %130, %123 ], [ %116, %111 ]
  %126 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %125, i64 256, i32 0
  %127 = bitcast i8* %126 to %"class.absl::container_internal::btree_node"**
  %128 = zext i8 %124 to i64
  %129 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %127, i64 %128
  %130 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %129, align 8
  %131 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %130, i64 8, i32 0
  %132 = getelementptr inbounds i8, i8* %131, i64 3
  %133 = load i8, i8* %132, align 1
  %134 = icmp eq i8 %133, 0
  %135 = getelementptr inbounds i8, i8* %131, i64 2
  %136 = load i8, i8* %135, align 1
  br i1 %134, label %123, label %137

137:                                              ; preds = %123, %111
  %138 = phi %"class.absl::container_internal::btree_node"* [ %116, %111 ], [ %130, %123 ]
  %139 = phi i8 [ %122, %111 ], [ %136, %123 ]
  %140 = ptrtoint %"class.absl::container_internal::btree_node"* %138 to i64
  %141 = zext i8 %139 to i32
  %142 = add nsw i32 %141, -1
  br label %147

143:                                              ; preds = %107
  %144 = ptrtoint %"class.absl::container_internal::btree_node"* %102 to i64
  %145 = zext i8 %109 to i32
  %146 = add nsw i32 %145, -1
  br label %147

147:                                              ; preds = %99, %143, %96, %137
  %148 = phi i64 [ %140, %137 ], [ %80, %96 ], [ %144, %143 ], [ %80, %99 ]
  %149 = phi i32 [ %142, %137 ], [ %97, %96 ], [ %146, %143 ], [ %97, %99 ]
  %150 = inttoptr i64 %148 to %"class.absl::container_internal::btree_node"*
  %151 = icmp eq i64 %148, 0
  br i1 %151, label %152, label %153, !prof !10

152:                                              ; preds = %147
  tail call void @llvm.trap() #13
  unreachable

153:                                              ; preds = %147
  %154 = icmp slt i32 %149, 0
  br i1 %154, label %155, label %156, !prof !10

155:                                              ; preds = %153
  tail call void @llvm.trap() #13
  unreachable

156:                                              ; preds = %153
  %157 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %150, i64 8, i32 0
  %158 = getelementptr inbounds i8, i8* %157, i64 2
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = icmp slt i32 %149, %160
  br i1 %161, label %163, label %162, !prof !11

162:                                              ; preds = %156
  tail call void @llvm.trap() #13
  unreachable

163:                                              ; preds = %156
  %164 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %150, i64 16, i32 0
  %165 = bitcast i8* %164 to %"class.quic::QuicInterval"*
  %166 = sext i32 %149 to i64
  %167 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %165, i64 %166, i32 0
  %168 = load i64, i64* %167, align 8
  %169 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %165, i64 %166, i32 1
  %170 = load i64, i64* %169, align 8
  %171 = icmp ult i64 %168, %170
  br i1 %171, label %172, label %180

172:                                              ; preds = %163
  %173 = load i64, i64* %82, align 8
  %174 = load i64, i64* %83, align 8
  %175 = icmp uge i64 %173, %174
  %176 = icmp ult i64 %174, %168
  %177 = or i1 %175, %176
  %178 = icmp ult i64 %170, %173
  %179 = or i1 %178, %177
  br i1 %179, label %180, label %226

180:                                              ; preds = %163, %172
  %181 = getelementptr inbounds i8, i8* %157, i64 3
  %182 = load i8, i8* %181, align 1
  %183 = icmp eq i8 %182, 0
  %184 = add nuw nsw i32 %149, 1
  br i1 %183, label %201, label %185

185:                                              ; preds = %180
  %186 = icmp eq i32 %184, %160
  br i1 %186, label %187, label %226

187:                                              ; preds = %185, %196
  %188 = phi i8* [ %192, %196 ], [ %157, %185 ]
  %189 = phi %"class.absl::container_internal::btree_node"* [ %191, %196 ], [ %150, %185 ]
  %190 = bitcast %"class.absl::container_internal::btree_node"* %189 to %"class.absl::container_internal::btree_node"**
  %191 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %190, align 8
  %192 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %191, i64 8, i32 0
  %193 = getelementptr inbounds i8, i8* %192, i64 3
  %194 = load i8, i8* %193, align 1
  %195 = icmp eq i8 %194, 0
  br i1 %195, label %196, label %226

196:                                              ; preds = %187
  %197 = load i8, i8* %188, align 1
  %198 = getelementptr inbounds i8, i8* %192, i64 2
  %199 = load i8, i8* %198, align 1
  %200 = icmp eq i8 %197, %199
  br i1 %200, label %187, label %223

201:                                              ; preds = %180
  %202 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %150, i64 256, i32 0
  %203 = bitcast i8* %202 to %"class.absl::container_internal::btree_node"**
  %204 = sext i32 %184 to i64
  %205 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %203, i64 %204
  %206 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %205, align 8
  %207 = ptrtoint %"class.absl::container_internal::btree_node"* %206 to i64
  %208 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %206, i64 8, i32 0
  %209 = getelementptr inbounds i8, i8* %208, i64 3
  %210 = load i8, i8* %209, align 1
  %211 = icmp eq i8 %210, 0
  br i1 %211, label %212, label %226

212:                                              ; preds = %201, %212
  %213 = phi %"class.absl::container_internal::btree_node"* [ %216, %212 ], [ %206, %201 ]
  %214 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %213, i64 256, i32 0
  %215 = bitcast i8* %214 to %"class.absl::container_internal::btree_node"**
  %216 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %215, align 8
  %217 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %216, i64 8, i32 0
  %218 = getelementptr inbounds i8, i8* %217, i64 3
  %219 = load i8, i8* %218, align 1
  %220 = icmp eq i8 %219, 0
  br i1 %220, label %212, label %221

221:                                              ; preds = %212
  %222 = ptrtoint %"class.absl::container_internal::btree_node"* %216 to i64
  br label %226

223:                                              ; preds = %196
  %224 = ptrtoint %"class.absl::container_internal::btree_node"* %191 to i64
  %225 = zext i8 %197 to i32
  br label %226

226:                                              ; preds = %187, %223, %221, %185, %77, %201, %172
  %227 = phi i64 [ %148, %172 ], [ %148, %185 ], [ %207, %201 ], [ %80, %77 ], [ %222, %221 ], [ %224, %223 ], [ %148, %187 ]
  %228 = phi i32 [ %149, %172 ], [ %184, %185 ], [ 0, %201 ], [ 0, %77 ], [ 0, %221 ], [ %225, %223 ], [ %160, %187 ]
  %229 = inttoptr i64 %227 to %"class.absl::container_internal::btree_node"*
  %230 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %231 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %230, align 8
  %232 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %231, i64 8, i32 0
  %233 = getelementptr inbounds i8, i8* %232, i64 2
  %234 = load i8, i8* %233, align 1
  %235 = zext i8 %234 to i32
  %236 = icmp ne %"class.absl::container_internal::btree_node"* %231, %229
  %237 = icmp ne i32 %228, %235
  %238 = or i1 %236, %237
  br i1 %238, label %239, label %337

239:                                              ; preds = %226, %328
  %240 = phi %"class.absl::container_internal::btree_node"* [ %333, %328 ], [ %229, %226 ]
  %241 = phi i32 [ %330, %328 ], [ %228, %226 ]
  %242 = phi i64 [ %329, %328 ], [ %227, %226 ]
  %243 = icmp eq i64 %242, 0
  br i1 %243, label %244, label %245, !prof !10

244:                                              ; preds = %239
  tail call void @llvm.trap() #13
  unreachable

245:                                              ; preds = %239
  %246 = icmp slt i32 %241, 0
  br i1 %246, label %247, label %248, !prof !10

247:                                              ; preds = %245
  tail call void @llvm.trap() #13
  unreachable

248:                                              ; preds = %245
  %249 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %240, i64 8, i32 0
  %250 = getelementptr inbounds i8, i8* %249, i64 2
  %251 = load i8, i8* %250, align 1
  %252 = zext i8 %251 to i32
  %253 = icmp slt i32 %241, %252
  br i1 %253, label %255, label %254, !prof !11

254:                                              ; preds = %248
  tail call void @llvm.trap() #13
  unreachable

255:                                              ; preds = %248
  %256 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %240, i64 16, i32 0
  %257 = bitcast i8* %256 to %"class.quic::QuicInterval"*
  %258 = sext i32 %241 to i64
  %259 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %257, i64 %258, i32 0
  %260 = load i64, i64* %259, align 8
  %261 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %257, i64 %258, i32 1
  %262 = load i64, i64* %261, align 8
  %263 = icmp ult i64 %260, %262
  br i1 %263, label %264, label %337

264:                                              ; preds = %255
  %265 = load i64, i64* %82, align 8
  %266 = load i64, i64* %83, align 8
  %267 = icmp uge i64 %265, %266
  %268 = icmp ult i64 %266, %260
  %269 = or i1 %267, %268
  %270 = icmp ult i64 %262, %265
  %271 = or i1 %270, %269
  br i1 %271, label %337, label %272

272:                                              ; preds = %264
  %273 = icmp ult i64 %260, %265
  br i1 %273, label %274, label %276

274:                                              ; preds = %272
  store i64 %260, i64* %82, align 8
  %275 = load i64, i64* %261, align 8
  br label %276

276:                                              ; preds = %274, %272
  %277 = phi i64 [ %275, %274 ], [ %262, %272 ]
  %278 = icmp ugt i64 %277, %266
  br i1 %278, label %279, label %280

279:                                              ; preds = %276
  store i64 %277, i64* %83, align 8
  br label %280

280:                                              ; preds = %276, %279
  %281 = getelementptr inbounds i8, i8* %249, i64 3
  %282 = load i8, i8* %281, align 1
  %283 = icmp eq i8 %282, 0
  %284 = add nuw nsw i32 %241, 1
  br i1 %283, label %303, label %285

285:                                              ; preds = %280
  %286 = load i8, i8* %250, align 1
  %287 = zext i8 %286 to i32
  %288 = icmp eq i32 %284, %287
  br i1 %288, label %289, label %328

289:                                              ; preds = %285, %298
  %290 = phi i8* [ %294, %298 ], [ %249, %285 ]
  %291 = phi %"class.absl::container_internal::btree_node"* [ %293, %298 ], [ %240, %285 ]
  %292 = bitcast %"class.absl::container_internal::btree_node"* %291 to %"class.absl::container_internal::btree_node"**
  %293 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %292, align 8
  %294 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %293, i64 8, i32 0
  %295 = getelementptr inbounds i8, i8* %294, i64 3
  %296 = load i8, i8* %295, align 1
  %297 = icmp eq i8 %296, 0
  br i1 %297, label %298, label %328

298:                                              ; preds = %289
  %299 = load i8, i8* %290, align 1
  %300 = getelementptr inbounds i8, i8* %294, i64 2
  %301 = load i8, i8* %300, align 1
  %302 = icmp eq i8 %299, %301
  br i1 %302, label %289, label %325

303:                                              ; preds = %280
  %304 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %240, i64 256, i32 0
  %305 = bitcast i8* %304 to %"class.absl::container_internal::btree_node"**
  %306 = sext i32 %284 to i64
  %307 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %305, i64 %306
  %308 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %307, align 8
  %309 = ptrtoint %"class.absl::container_internal::btree_node"* %308 to i64
  %310 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %308, i64 8, i32 0
  %311 = getelementptr inbounds i8, i8* %310, i64 3
  %312 = load i8, i8* %311, align 1
  %313 = icmp eq i8 %312, 0
  br i1 %313, label %314, label %328

314:                                              ; preds = %303, %314
  %315 = phi %"class.absl::container_internal::btree_node"* [ %318, %314 ], [ %308, %303 ]
  %316 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %315, i64 256, i32 0
  %317 = bitcast i8* %316 to %"class.absl::container_internal::btree_node"**
  %318 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %317, align 8
  %319 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %318, i64 8, i32 0
  %320 = getelementptr inbounds i8, i8* %319, i64 3
  %321 = load i8, i8* %320, align 1
  %322 = icmp eq i8 %321, 0
  br i1 %322, label %314, label %323

323:                                              ; preds = %314
  %324 = ptrtoint %"class.absl::container_internal::btree_node"* %318 to i64
  br label %328

325:                                              ; preds = %298
  %326 = ptrtoint %"class.absl::container_internal::btree_node"* %293 to i64
  %327 = zext i8 %299 to i32
  br label %328

328:                                              ; preds = %289, %325, %323, %285, %303
  %329 = phi i64 [ %242, %285 ], [ %309, %303 ], [ %324, %323 ], [ %326, %325 ], [ %242, %289 ]
  %330 = phi i32 [ %284, %285 ], [ 0, %303 ], [ 0, %323 ], [ %327, %325 ], [ %284, %289 ]
  %331 = load i8, i8* %233, align 1
  %332 = zext i8 %331 to i32
  %333 = inttoptr i64 %329 to %"class.absl::container_internal::btree_node"*
  %334 = icmp ne %"class.absl::container_internal::btree_node"* %231, %333
  %335 = icmp ne i32 %330, %332
  %336 = or i1 %334, %335
  br i1 %336, label %239, label %337

337:                                              ; preds = %264, %255, %328, %226
  %338 = phi i32 [ %228, %226 ], [ %241, %264 ], [ %241, %255 ], [ %330, %328 ]
  %339 = phi %"class.absl::container_internal::btree_node"* [ %229, %226 ], [ %240, %264 ], [ %240, %255 ], [ %231, %328 ]
  %340 = bitcast %"struct.std::__1::pair.14"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %340) #13
  %341 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE11erase_rangeENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESJ_(%"struct.std::__1::pair.14"* nonnull sret %3, %"class.absl::container_internal::btree"* %341, %"class.absl::container_internal::btree_node"* %229, i32 %228, %"class.absl::container_internal::btree_node"* %339, i32 %338) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %340) #13
  %342 = bitcast %"struct.std::__1::pair"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %342) #13
  call void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE13insert_uniqueIS5_JRKS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEERKT_DpOT0_(%"struct.std::__1::pair"* nonnull sret %5, %"class.absl::container_internal::btree"* %341, %"class.quic::QuicInterval"* nonnull dereferenceable(16) %4, %"class.quic::QuicInterval"* nonnull dereferenceable(16) %4) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %342) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %81) #13
  br label %343

343:                                              ; preds = %2, %337
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE11erase_rangeENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESJ_(%"struct.std::__1::pair.14"* noalias sret, %"class.absl::container_internal::btree"*, %"class.absl::container_internal::btree_node"*, i32, %"class.absl::container_internal::btree_node"*, i32) local_unnamed_addr #0 comdat align 2 {
  %7 = icmp ne %"class.absl::container_internal::btree_node"* %2, %4
  %8 = icmp ne i32 %5, %3
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %406

10:                                               ; preds = %6
  %11 = ptrtoint %"class.absl::container_internal::btree_node"* %2 to i64
  br label %12

12:                                               ; preds = %67, %10
  %13 = phi %"class.absl::container_internal::btree_node"* [ %70, %67 ], [ %2, %10 ]
  %14 = phi i64 [ %17, %67 ], [ 0, %10 ]
  %15 = phi i32 [ %69, %67 ], [ %3, %10 ]
  %16 = phi i64 [ %68, %67 ], [ %11, %10 ]
  %17 = add nuw nsw i64 %14, 1
  %18 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %13, i64 8, i32 0
  %19 = getelementptr inbounds i8, i8* %18, i64 3
  %20 = load i8, i8* %19, align 1
  %21 = icmp eq i8 %20, 0
  %22 = add nsw i32 %15, 1
  br i1 %21, label %42, label %23

23:                                               ; preds = %12
  %24 = getelementptr inbounds i8, i8* %18, i64 2
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = icmp eq i32 %22, %26
  br i1 %27, label %28, label %67

28:                                               ; preds = %23, %37
  %29 = phi i8* [ %33, %37 ], [ %18, %23 ]
  %30 = phi %"class.absl::container_internal::btree_node"* [ %32, %37 ], [ %13, %23 ]
  %31 = bitcast %"class.absl::container_internal::btree_node"* %30 to %"class.absl::container_internal::btree_node"**
  %32 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %31, align 8
  %33 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %32, i64 8, i32 0
  %34 = getelementptr inbounds i8, i8* %33, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %67

37:                                               ; preds = %28
  %38 = load i8, i8* %29, align 1
  %39 = getelementptr inbounds i8, i8* %33, i64 2
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %38, %40
  br i1 %41, label %28, label %64

42:                                               ; preds = %12
  %43 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %13, i64 256, i32 0
  %44 = bitcast i8* %43 to %"class.absl::container_internal::btree_node"**
  %45 = sext i32 %22 to i64
  %46 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %44, i64 %45
  %47 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %46, align 8
  %48 = ptrtoint %"class.absl::container_internal::btree_node"* %47 to i64
  %49 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %47, i64 8, i32 0
  %50 = getelementptr inbounds i8, i8* %49, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %53, label %67

53:                                               ; preds = %42, %53
  %54 = phi %"class.absl::container_internal::btree_node"* [ %57, %53 ], [ %47, %42 ]
  %55 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %54, i64 256, i32 0
  %56 = bitcast i8* %55 to %"class.absl::container_internal::btree_node"**
  %57 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %56, align 8
  %58 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %57, i64 8, i32 0
  %59 = getelementptr inbounds i8, i8* %58, i64 3
  %60 = load i8, i8* %59, align 1
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %53, label %62

62:                                               ; preds = %53
  %63 = ptrtoint %"class.absl::container_internal::btree_node"* %57 to i64
  br label %67

64:                                               ; preds = %37
  %65 = ptrtoint %"class.absl::container_internal::btree_node"* %32 to i64
  %66 = zext i8 %38 to i32
  br label %67

67:                                               ; preds = %28, %64, %62, %42, %23
  %68 = phi i64 [ %16, %23 ], [ %48, %42 ], [ %63, %62 ], [ %65, %64 ], [ %16, %28 ]
  %69 = phi i32 [ %22, %23 ], [ 0, %42 ], [ 0, %62 ], [ %66, %64 ], [ %22, %28 ]
  %70 = inttoptr i64 %68 to %"class.absl::container_internal::btree_node"*
  %71 = icmp ne %"class.absl::container_internal::btree_node"* %70, %4
  %72 = icmp ne i32 %69, %5
  %73 = or i1 %71, %72
  br i1 %73, label %12, label %74

74:                                               ; preds = %67
  %75 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 2
  %76 = load i64, i64* %75, align 8
  %77 = icmp eq i64 %76, %17
  br i1 %77, label %78, label %83

78:                                               ; preds = %74
  %79 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %80 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %79, align 8
  %81 = bitcast %"class.absl::container_internal::btree"* %1 to %"class.std::__1::allocator"*
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %80, %"class.std::__1::allocator"* %81) #13
  %82 = bitcast %"class.absl::container_internal::btree"* %1 to <2 x %"class.absl::container_internal::btree_node"*>*
  store <2 x %"class.absl::container_internal::btree_node"*> <%"class.absl::container_internal::btree_node"* bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*), %"class.absl::container_internal::btree_node"* bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*)>, <2 x %"class.absl::container_internal::btree_node"*>* %82, align 8
  store i64 0, i64* %75, align 8
  br label %406

83:                                               ; preds = %74
  %84 = icmp eq %"class.absl::container_internal::btree_node"* %2, %4
  br i1 %84, label %85, label %236

85:                                               ; preds = %83
  %86 = sub nsw i32 %5, %3
  %87 = trunc i32 %86 to i8
  %88 = bitcast %"class.absl::container_internal::btree"* %1 to %"class.std::__1::allocator"*
  %89 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 8, i32 0
  %90 = getelementptr inbounds i8, i8* %89, i64 2
  %91 = load i8, i8* %90, align 1
  %92 = and i32 %3, 255
  %93 = and i32 %86, 255
  %94 = add nuw nsw i32 %93, %92
  %95 = zext i8 %91 to i32
  %96 = and i32 %94, 255
  %97 = sub nsw i32 %95, %96
  %98 = sext i32 %97 to i64
  %99 = zext i32 %96 to i64
  %100 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 16, i32 0
  %101 = bitcast i8* %100 to %"class.quic::QuicInterval"*
  %102 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %101, i64 %99
  %103 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %102, i64 %98
  %104 = icmp eq i32 %97, 0
  br i1 %104, label %152, label %105

105:                                              ; preds = %85
  %106 = zext i32 %92 to i64
  %107 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %101, i64 %106
  %108 = zext i8 %91 to i64
  %109 = shl nuw nsw i64 %108, 4
  %110 = add nsw i64 %109, -16
  %111 = shl nuw nsw i32 %96, 4
  %112 = zext i32 %111 to i64
  %113 = sub nsw i64 %110, %112
  %114 = lshr exact i64 %113, 4
  %115 = add nuw nsw i64 %114, 1
  %116 = and i64 %115, 3
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %128, label %118

118:                                              ; preds = %105, %118
  %119 = phi %"class.quic::QuicInterval"* [ %125, %118 ], [ %107, %105 ]
  %120 = phi %"class.quic::QuicInterval"* [ %124, %118 ], [ %102, %105 ]
  %121 = phi i64 [ %126, %118 ], [ %116, %105 ]
  %122 = bitcast %"class.quic::QuicInterval"* %119 to i8*
  %123 = bitcast %"class.quic::QuicInterval"* %120 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %122, i8* align 8 %123, i64 16, i1 false) #13
  %124 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %120, i64 1
  %125 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %119, i64 1
  %126 = add i64 %121, -1
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %118, !llvm.loop !39

128:                                              ; preds = %118, %105
  %129 = phi %"class.quic::QuicInterval"* [ %107, %105 ], [ %125, %118 ]
  %130 = phi %"class.quic::QuicInterval"* [ %102, %105 ], [ %124, %118 ]
  %131 = icmp ult i64 %113, 48
  br i1 %131, label %152, label %132

132:                                              ; preds = %128, %132
  %133 = phi %"class.quic::QuicInterval"* [ %150, %132 ], [ %129, %128 ]
  %134 = phi %"class.quic::QuicInterval"* [ %149, %132 ], [ %130, %128 ]
  %135 = bitcast %"class.quic::QuicInterval"* %133 to i8*
  %136 = bitcast %"class.quic::QuicInterval"* %134 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %135, i8* align 8 %136, i64 16, i1 false) #13
  %137 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %134, i64 1
  %138 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %133, i64 1
  %139 = bitcast %"class.quic::QuicInterval"* %138 to i8*
  %140 = bitcast %"class.quic::QuicInterval"* %137 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %139, i8* align 8 %140, i64 16, i1 false) #13
  %141 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %134, i64 2
  %142 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %133, i64 2
  %143 = bitcast %"class.quic::QuicInterval"* %142 to i8*
  %144 = bitcast %"class.quic::QuicInterval"* %141 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %143, i8* align 8 %144, i64 16, i1 false) #13
  %145 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %134, i64 3
  %146 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %133, i64 3
  %147 = bitcast %"class.quic::QuicInterval"* %146 to i8*
  %148 = bitcast %"class.quic::QuicInterval"* %145 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %147, i8* align 8 %148, i64 16, i1 false) #13
  %149 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %134, i64 4
  %150 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %133, i64 4
  %151 = icmp eq %"class.quic::QuicInterval"* %149, %103
  br i1 %151, label %152, label %132

152:                                              ; preds = %128, %132, %85
  %153 = getelementptr inbounds i8, i8* %89, i64 3
  %154 = load i8, i8* %153, align 1
  %155 = icmp eq i8 %154, 0
  br i1 %155, label %156, label %229

156:                                              ; preds = %152
  %157 = icmp eq i8 %87, 0
  br i1 %157, label %163, label %158

158:                                              ; preds = %156
  %159 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 256, i32 0
  %160 = bitcast i8* %159 to %"class.absl::container_internal::btree_node"**
  %161 = zext i32 %92 to i64
  %162 = zext i32 %93 to i64
  br label %191

163:                                              ; preds = %191, %156
  %164 = icmp ult i32 %94, %95
  br i1 %164, label %165, label %229

165:                                              ; preds = %163
  %166 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 256, i32 0
  %167 = bitcast i8* %166 to %"class.absl::container_internal::btree_node"**
  %168 = zext i32 %94 to i64
  %169 = zext i32 %93 to i64
  %170 = zext i8 %91 to i64
  %171 = sub nsw i64 %170, %168
  %172 = xor i64 %168, -1
  %173 = add nsw i64 %172, %170
  %174 = and i64 %171, 3
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %188, label %176

176:                                              ; preds = %165, %176
  %177 = phi i64 [ %179, %176 ], [ %168, %165 ]
  %178 = phi i64 [ %186, %176 ], [ %174, %165 ]
  %179 = add nuw nsw i64 %177, 1
  %180 = sub nsw i64 %179, %169
  %181 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, i64 %179
  %182 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %181, align 8
  %183 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, i64 %180
  store %"class.absl::container_internal::btree_node"* %182, %"class.absl::container_internal::btree_node"** %183, align 8
  %184 = trunc i64 %180 to i8
  %185 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %182, i64 8, i32 0
  store i8 %184, i8* %185, align 1
  %186 = add i64 %178, -1
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %188, label %176, !llvm.loop !41

188:                                              ; preds = %176, %165
  %189 = phi i64 [ %168, %165 ], [ %179, %176 ]
  %190 = icmp ult i64 %173, 3
  br i1 %190, label %229, label %198

191:                                              ; preds = %191, %158
  %192 = phi i64 [ 0, %158 ], [ %193, %191 ]
  %193 = add nuw nsw i64 %192, 1
  %194 = add nuw nsw i64 %193, %161
  %195 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %160, i64 %194
  %196 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %195, align 8
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %196, %"class.std::__1::allocator"* %88) #13
  %197 = icmp eq i64 %193, %162
  br i1 %197, label %163, label %191

198:                                              ; preds = %188, %198
  %199 = phi i64 [ %221, %198 ], [ %189, %188 ]
  %200 = add nuw nsw i64 %199, 1
  %201 = sub nsw i64 %200, %169
  %202 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, i64 %200
  %203 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %202, align 8
  %204 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, i64 %201
  store %"class.absl::container_internal::btree_node"* %203, %"class.absl::container_internal::btree_node"** %204, align 8
  %205 = trunc i64 %201 to i8
  %206 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %203, i64 8, i32 0
  store i8 %205, i8* %206, align 1
  %207 = add nuw nsw i64 %199, 2
  %208 = sub nsw i64 %207, %169
  %209 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, i64 %207
  %210 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %209, align 8
  %211 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, i64 %208
  store %"class.absl::container_internal::btree_node"* %210, %"class.absl::container_internal::btree_node"** %211, align 8
  %212 = trunc i64 %208 to i8
  %213 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %210, i64 8, i32 0
  store i8 %212, i8* %213, align 1
  %214 = add nuw nsw i64 %199, 3
  %215 = sub nsw i64 %214, %169
  %216 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, i64 %214
  %217 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %216, align 8
  %218 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, i64 %215
  store %"class.absl::container_internal::btree_node"* %217, %"class.absl::container_internal::btree_node"** %218, align 8
  %219 = trunc i64 %215 to i8
  %220 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %217, i64 8, i32 0
  store i8 %219, i8* %220, align 1
  %221 = add nuw nsw i64 %199, 4
  %222 = sub nsw i64 %221, %169
  %223 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, i64 %221
  %224 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %223, align 8
  %225 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %167, i64 %222
  store %"class.absl::container_internal::btree_node"* %224, %"class.absl::container_internal::btree_node"** %225, align 8
  %226 = trunc i64 %222 to i8
  %227 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %224, i64 8, i32 0
  store i8 %226, i8* %227, align 1
  %228 = icmp eq i64 %221, %170
  br i1 %228, label %229, label %198

229:                                              ; preds = %188, %198, %152, %163
  %230 = sub i8 %91, %87
  store i8 %230, i8* %90, align 1
  %231 = load i64, i64* %75, align 8
  %232 = sub nsw i64 %231, %17
  store i64 %232, i64* %75, align 8
  %233 = tail call { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE22rebalance_after_deleteENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"* %1, %"class.absl::container_internal::btree_node"* %2, i32 %3)
  %234 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %233, 0
  %235 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %233, 1
  br label %406

236:                                              ; preds = %83
  %237 = sub nsw i64 %76, %17
  %238 = bitcast %"class.absl::container_internal::btree"* %1 to %"class.std::__1::allocator"*
  br label %239

239:                                              ; preds = %236, %400
  %240 = phi i64 [ %76, %236 ], [ %404, %400 ]
  %241 = phi i32 [ %3, %236 ], [ %403, %400 ]
  %242 = phi %"class.absl::container_internal::btree_node"* [ %2, %236 ], [ %402, %400 ]
  %243 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %242, i64 8, i32 0
  %244 = getelementptr inbounds i8, i8* %243, i64 3
  %245 = load i8, i8* %244, align 1
  %246 = icmp eq i8 %245, 0
  br i1 %246, label %398, label %247

247:                                              ; preds = %239
  %248 = sub nsw i64 %240, %237
  %249 = getelementptr inbounds i8, i8* %243, i64 2
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i32
  %252 = sub nsw i32 %251, %241
  %253 = sext i32 %252 to i64
  %254 = icmp sgt i64 %248, %253
  %255 = select i1 %254, i64 %253, i64 %248
  %256 = trunc i64 %255 to i8
  %257 = and i32 %241, 255
  %258 = trunc i64 %255 to i32
  %259 = and i32 %258, 255
  %260 = add nuw nsw i32 %259, %257
  %261 = and i32 %260, 255
  %262 = sub nsw i32 %251, %261
  %263 = sext i32 %262 to i64
  %264 = zext i32 %261 to i64
  %265 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %242, i64 16, i32 0
  %266 = bitcast i8* %265 to %"class.quic::QuicInterval"*
  %267 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %266, i64 %264
  %268 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %267, i64 %263
  %269 = icmp eq i32 %262, 0
  br i1 %269, label %393, label %270

270:                                              ; preds = %247
  %271 = zext i32 %257 to i64
  %272 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %266, i64 %271
  %273 = zext i8 %250 to i64
  %274 = shl nuw nsw i64 %273, 4
  %275 = add nsw i64 %274, -16
  %276 = shl nuw nsw i32 %261, 4
  %277 = zext i32 %276 to i64
  %278 = sub nsw i64 %275, %277
  %279 = lshr exact i64 %278, 4
  %280 = add nuw nsw i64 %279, 1
  %281 = and i64 %280, 3
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %293, label %283

283:                                              ; preds = %270, %283
  %284 = phi %"class.quic::QuicInterval"* [ %290, %283 ], [ %272, %270 ]
  %285 = phi %"class.quic::QuicInterval"* [ %289, %283 ], [ %267, %270 ]
  %286 = phi i64 [ %291, %283 ], [ %281, %270 ]
  %287 = bitcast %"class.quic::QuicInterval"* %284 to i8*
  %288 = bitcast %"class.quic::QuicInterval"* %285 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %287, i8* align 8 %288, i64 16, i1 false) #13
  %289 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %285, i64 1
  %290 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %284, i64 1
  %291 = add i64 %286, -1
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %293, label %283, !llvm.loop !42

293:                                              ; preds = %283, %270
  %294 = phi %"class.quic::QuicInterval"* [ %272, %270 ], [ %290, %283 ]
  %295 = phi %"class.quic::QuicInterval"* [ %267, %270 ], [ %289, %283 ]
  %296 = icmp ult i64 %278, 48
  br i1 %296, label %317, label %297

297:                                              ; preds = %293, %297
  %298 = phi %"class.quic::QuicInterval"* [ %315, %297 ], [ %294, %293 ]
  %299 = phi %"class.quic::QuicInterval"* [ %314, %297 ], [ %295, %293 ]
  %300 = bitcast %"class.quic::QuicInterval"* %298 to i8*
  %301 = bitcast %"class.quic::QuicInterval"* %299 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %300, i8* align 8 %301, i64 16, i1 false) #13
  %302 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %299, i64 1
  %303 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %298, i64 1
  %304 = bitcast %"class.quic::QuicInterval"* %303 to i8*
  %305 = bitcast %"class.quic::QuicInterval"* %302 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %304, i8* align 8 %305, i64 16, i1 false) #13
  %306 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %299, i64 2
  %307 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %298, i64 2
  %308 = bitcast %"class.quic::QuicInterval"* %307 to i8*
  %309 = bitcast %"class.quic::QuicInterval"* %306 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %308, i8* align 8 %309, i64 16, i1 false) #13
  %310 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %299, i64 3
  %311 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %298, i64 3
  %312 = bitcast %"class.quic::QuicInterval"* %311 to i8*
  %313 = bitcast %"class.quic::QuicInterval"* %310 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %312, i8* align 8 %313, i64 16, i1 false) #13
  %314 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %299, i64 4
  %315 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %298, i64 4
  %316 = icmp eq %"class.quic::QuicInterval"* %314, %268
  br i1 %316, label %317, label %297

317:                                              ; preds = %297, %293
  %318 = load i8, i8* %244, align 1
  %319 = icmp eq i8 %318, 0
  br i1 %319, label %320, label %393

320:                                              ; preds = %317
  %321 = icmp eq i8 %256, 0
  br i1 %321, label %327, label %322

322:                                              ; preds = %320
  %323 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %242, i64 256, i32 0
  %324 = bitcast i8* %323 to %"class.absl::container_internal::btree_node"**
  %325 = zext i32 %257 to i64
  %326 = and i64 %255, 255
  br label %355

327:                                              ; preds = %355, %320
  %328 = icmp ult i32 %260, %251
  br i1 %328, label %329, label %393

329:                                              ; preds = %327
  %330 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %242, i64 256, i32 0
  %331 = bitcast i8* %330 to %"class.absl::container_internal::btree_node"**
  %332 = zext i32 %260 to i64
  %333 = and i64 %255, 255
  %334 = zext i8 %250 to i64
  %335 = sub nsw i64 %273, %332
  %336 = xor i64 %332, -1
  %337 = add nsw i64 %336, %273
  %338 = and i64 %335, 3
  %339 = icmp eq i64 %338, 0
  br i1 %339, label %352, label %340

340:                                              ; preds = %329, %340
  %341 = phi i64 [ %343, %340 ], [ %332, %329 ]
  %342 = phi i64 [ %350, %340 ], [ %338, %329 ]
  %343 = add nuw nsw i64 %341, 1
  %344 = sub nsw i64 %343, %333
  %345 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %331, i64 %343
  %346 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %345, align 8
  %347 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %331, i64 %344
  store %"class.absl::container_internal::btree_node"* %346, %"class.absl::container_internal::btree_node"** %347, align 8
  %348 = trunc i64 %344 to i8
  %349 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %346, i64 8, i32 0
  store i8 %348, i8* %349, align 1
  %350 = add i64 %342, -1
  %351 = icmp eq i64 %350, 0
  br i1 %351, label %352, label %340, !llvm.loop !43

352:                                              ; preds = %340, %329
  %353 = phi i64 [ %332, %329 ], [ %343, %340 ]
  %354 = icmp ult i64 %337, 3
  br i1 %354, label %393, label %362

355:                                              ; preds = %355, %322
  %356 = phi i64 [ 0, %322 ], [ %357, %355 ]
  %357 = add nuw nsw i64 %356, 1
  %358 = add nuw nsw i64 %357, %325
  %359 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %324, i64 %358
  %360 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %359, align 8
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %360, %"class.std::__1::allocator"* %238) #13
  %361 = icmp eq i64 %357, %326
  br i1 %361, label %327, label %355

362:                                              ; preds = %352, %362
  %363 = phi i64 [ %385, %362 ], [ %353, %352 ]
  %364 = add nuw nsw i64 %363, 1
  %365 = sub nsw i64 %364, %333
  %366 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %331, i64 %364
  %367 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %366, align 8
  %368 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %331, i64 %365
  store %"class.absl::container_internal::btree_node"* %367, %"class.absl::container_internal::btree_node"** %368, align 8
  %369 = trunc i64 %365 to i8
  %370 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %367, i64 8, i32 0
  store i8 %369, i8* %370, align 1
  %371 = add nuw nsw i64 %363, 2
  %372 = sub nsw i64 %371, %333
  %373 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %331, i64 %371
  %374 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %373, align 8
  %375 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %331, i64 %372
  store %"class.absl::container_internal::btree_node"* %374, %"class.absl::container_internal::btree_node"** %375, align 8
  %376 = trunc i64 %372 to i8
  %377 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %374, i64 8, i32 0
  store i8 %376, i8* %377, align 1
  %378 = add nuw nsw i64 %363, 3
  %379 = sub nsw i64 %378, %333
  %380 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %331, i64 %378
  %381 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %380, align 8
  %382 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %331, i64 %379
  store %"class.absl::container_internal::btree_node"* %381, %"class.absl::container_internal::btree_node"** %382, align 8
  %383 = trunc i64 %379 to i8
  %384 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %381, i64 8, i32 0
  store i8 %383, i8* %384, align 1
  %385 = add nuw nsw i64 %363, 4
  %386 = sub nsw i64 %385, %333
  %387 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %331, i64 %385
  %388 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %387, align 8
  %389 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %331, i64 %386
  store %"class.absl::container_internal::btree_node"* %388, %"class.absl::container_internal::btree_node"** %389, align 8
  %390 = trunc i64 %386 to i8
  %391 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %388, i64 8, i32 0
  store i8 %390, i8* %391, align 1
  %392 = icmp eq i64 %385, %334
  br i1 %392, label %393, label %362

393:                                              ; preds = %352, %362, %247, %317, %327
  %394 = sub i8 %250, %256
  store i8 %394, i8* %249, align 1
  %395 = load i64, i64* %75, align 8
  %396 = sub nsw i64 %395, %255
  store i64 %396, i64* %75, align 8
  %397 = tail call { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE22rebalance_after_deleteENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"* %1, %"class.absl::container_internal::btree_node"* %242, i32 %241)
  br label %400

398:                                              ; preds = %239
  %399 = tail call { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5eraseENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"* %1, %"class.absl::container_internal::btree_node"* %242, i32 %241)
  br label %400

400:                                              ; preds = %398, %393
  %401 = phi { %"class.absl::container_internal::btree_node"*, i32 } [ %399, %398 ], [ %397, %393 ]
  %402 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %401, 0
  %403 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %401, 1
  %404 = load i64, i64* %75, align 8
  %405 = icmp sgt i64 %404, %237
  br i1 %405, label %239, label %406

406:                                              ; preds = %400, %6, %229, %78
  %407 = phi i64 [ %17, %229 ], [ %17, %78 ], [ 0, %6 ], [ %17, %400 ]
  %408 = phi %"class.absl::container_internal::btree_node"* [ %234, %229 ], [ bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*), %78 ], [ %2, %6 ], [ %402, %400 ]
  %409 = phi i32 [ %235, %229 ], [ 0, %78 ], [ %5, %6 ], [ %403, %400 ]
  %410 = getelementptr inbounds %"struct.std::__1::pair.14", %"struct.std::__1::pair.14"* %0, i64 0, i32 0
  store i64 %407, i64* %410, align 8
  %411 = getelementptr inbounds %"struct.std::__1::pair.14", %"struct.std::__1::pair.14"* %0, i64 0, i32 1, i32 0
  store %"class.absl::container_internal::btree_node"* %408, %"class.absl::container_internal::btree_node"** %411, align 8
  %412 = getelementptr inbounds %"struct.std::__1::pair.14", %"struct.std::__1::pair.14"* %0, i64 0, i32 1, i32 1
  store i32 %409, i32* %412, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE22rebalance_after_deleteENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"*, %"class.absl::container_internal::btree_node"*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca { %"class.absl::container_internal::btree_node"*, i32 }, align 8
  %5 = bitcast { %"class.absl::container_internal::btree_node"*, i32 }* %4 to %"struct.absl::container_internal::btree_iterator.11"*
  %6 = getelementptr inbounds { %"class.absl::container_internal::btree_node"*, i32 }, { %"class.absl::container_internal::btree_node"*, i32 }* %4, i64 0, i32 0
  store %"class.absl::container_internal::btree_node"* %1, %"class.absl::container_internal::btree_node"** %6, align 8
  %7 = getelementptr inbounds { %"class.absl::container_internal::btree_node"*, i32 }, { %"class.absl::container_internal::btree_node"*, i32 }* %4, i64 0, i32 1
  store i32 %2, i32* %7, align 8
  %8 = bitcast { %"class.absl::container_internal::btree_node"*, i32 }* %4 to i64*
  %9 = ptrtoint %"class.absl::container_internal::btree_node"* %1 to i64
  %10 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %10, align 8
  %12 = icmp eq %"class.absl::container_internal::btree_node"* %11, %1
  br i1 %12, label %15, label %51

13:                                               ; preds = %68
  %14 = inttoptr i64 %75 to %"class.absl::container_internal::btree_node"*
  br label %15

15:                                               ; preds = %13, %3
  %16 = phi i32 [ %2, %3 ], [ %66, %13 ]
  %17 = phi i64 [ %9, %3 ], [ %67, %13 ]
  %18 = phi %"class.absl::container_internal::btree_node"* [ %1, %3 ], [ %14, %13 ]
  %19 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %18, i64 8, i32 0
  %20 = getelementptr inbounds i8, i8* %19, i64 2
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %40

23:                                               ; preds = %15
  %24 = getelementptr inbounds i8, i8* %19, i64 3
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 1
  store %"class.absl::container_internal::btree_node"* bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*), %"class.absl::container_internal::btree_node"** %28, align 8
  br label %37

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %18, i64 256, i32 0
  %31 = bitcast i8* %30 to %"class.absl::container_internal::btree_node"**
  %32 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %31, align 8
  %33 = bitcast %"class.absl::container_internal::btree_node"* %32 to i64**
  %34 = load i64*, i64** %33, align 8
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"class.absl::container_internal::btree_node"* %32 to i64*
  store i64 %35, i64* %36, align 8
  br label %37

37:                                               ; preds = %29, %27
  %38 = phi %"class.absl::container_internal::btree_node"* [ %32, %29 ], [ bitcast ({ %"class.absl::container_internal::btree_node"*, i8, i8, i8, i8 }* @_ZZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE9EmptyNodeEvE10empty_node to %"class.absl::container_internal::btree_node"*), %27 ]
  store %"class.absl::container_internal::btree_node"* %38, %"class.absl::container_internal::btree_node"** %10, align 8
  %39 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %18, %"class.std::__1::allocator"* %39) #13
  br label %40

40:                                               ; preds = %15, %37
  %41 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 2
  %42 = load i64, i64* %41, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %79

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 1
  %46 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %45, align 8
  %47 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %46, i64 8, i32 0
  %48 = getelementptr inbounds i8, i8* %47, i64 2
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  br label %135

51:                                               ; preds = %3, %68
  %52 = phi %"class.absl::container_internal::btree_node"* [ %76, %68 ], [ %1, %3 ]
  %53 = phi i8 [ %70, %68 ], [ 1, %3 ]
  %54 = phi i64 [ %67, %68 ], [ %9, %3 ]
  %55 = phi i32 [ %66, %68 ], [ %2, %3 ]
  %56 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %52, i64 8, i32 0
  %57 = getelementptr inbounds i8, i8* %56, i64 2
  %58 = load i8, i8* %57, align 1
  %59 = icmp ugt i8 %58, 6
  br i1 %59, label %79, label %60

60:                                               ; preds = %51
  %61 = call zeroext i1 @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE22try_merge_or_rebalanceEPNS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"* %0, %"struct.absl::container_internal::btree_iterator.11"* nonnull %5)
  %62 = and i8 %53, 1
  %63 = icmp eq i8 %62, 0
  %64 = load i64, i64* %8, align 8
  %65 = load i32, i32* %7, align 8
  %66 = select i1 %63, i32 %55, i32 %65
  %67 = select i1 %63, i64 %54, i64 %64
  br i1 %61, label %68, label %79

68:                                               ; preds = %60
  %69 = inttoptr i64 %64 to %"class.absl::container_internal::btree_node"*
  %70 = select i1 %63, i8 %53, i8 0
  %71 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %69, i64 8, i32 0
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  store i32 %73, i32* %7, align 8
  %74 = inttoptr i64 %64 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %8, align 8
  %76 = inttoptr i64 %75 to %"class.absl::container_internal::btree_node"*
  %77 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %10, align 8
  %78 = icmp eq %"class.absl::container_internal::btree_node"* %77, %76
  br i1 %78, label %13, label %51

79:                                               ; preds = %60, %51, %40
  %80 = phi i32 [ %16, %40 ], [ %66, %60 ], [ %55, %51 ]
  %81 = phi i64 [ %17, %40 ], [ %67, %60 ], [ %54, %51 ]
  %82 = inttoptr i64 %81 to %"class.absl::container_internal::btree_node"*
  %83 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %82, i64 8, i32 0
  %84 = getelementptr inbounds i8, i8* %83, i64 2
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = icmp eq i32 %80, %86
  br i1 %87, label %88, label %131

88:                                               ; preds = %79
  %89 = getelementptr inbounds i8, i8* %83, i64 3
  %90 = load i8, i8* %89, align 1
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %106, label %92

92:                                               ; preds = %88, %101
  %93 = phi i8* [ %97, %101 ], [ %83, %88 ]
  %94 = phi %"class.absl::container_internal::btree_node"* [ %96, %101 ], [ %82, %88 ]
  %95 = bitcast %"class.absl::container_internal::btree_node"* %94 to %"class.absl::container_internal::btree_node"**
  %96 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %95, align 8
  %97 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %96, i64 8, i32 0
  %98 = getelementptr inbounds i8, i8* %97, i64 3
  %99 = load i8, i8* %98, align 1
  %100 = icmp eq i8 %99, 0
  br i1 %100, label %101, label %131

101:                                              ; preds = %92
  %102 = load i8, i8* %93, align 1
  %103 = getelementptr inbounds i8, i8* %97, i64 2
  %104 = load i8, i8* %103, align 1
  %105 = icmp eq i8 %102, %104
  br i1 %105, label %92, label %128

106:                                              ; preds = %88
  %107 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %82, i64 256, i32 0
  %108 = bitcast i8* %107 to %"class.absl::container_internal::btree_node"**
  %109 = zext i8 %85 to i64
  %110 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %108, i64 %109
  %111 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %110, align 8
  %112 = ptrtoint %"class.absl::container_internal::btree_node"* %111 to i64
  %113 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %111, i64 8, i32 0
  %114 = getelementptr inbounds i8, i8* %113, i64 3
  %115 = load i8, i8* %114, align 1
  %116 = icmp eq i8 %115, 0
  br i1 %116, label %117, label %131

117:                                              ; preds = %106, %117
  %118 = phi %"class.absl::container_internal::btree_node"* [ %121, %117 ], [ %111, %106 ]
  %119 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %118, i64 256, i32 0
  %120 = bitcast i8* %119 to %"class.absl::container_internal::btree_node"**
  %121 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %120, align 8
  %122 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %121, i64 8, i32 0
  %123 = getelementptr inbounds i8, i8* %122, i64 3
  %124 = load i8, i8* %123, align 1
  %125 = icmp eq i8 %124, 0
  br i1 %125, label %117, label %126

126:                                              ; preds = %117
  %127 = ptrtoint %"class.absl::container_internal::btree_node"* %121 to i64
  br label %131

128:                                              ; preds = %101
  %129 = ptrtoint %"class.absl::container_internal::btree_node"* %96 to i64
  %130 = zext i8 %102 to i32
  br label %131

131:                                              ; preds = %92, %128, %126, %106, %79
  %132 = phi i32 [ %80, %79 ], [ 0, %106 ], [ 0, %126 ], [ %130, %128 ], [ %80, %92 ]
  %133 = phi i64 [ %81, %79 ], [ %112, %106 ], [ %127, %126 ], [ %129, %128 ], [ %81, %92 ]
  %134 = inttoptr i64 %133 to %"class.absl::container_internal::btree_node"*
  br label %135

135:                                              ; preds = %131, %44
  %136 = phi %"class.absl::container_internal::btree_node"* [ %46, %44 ], [ %134, %131 ]
  %137 = phi i32 [ %50, %44 ], [ %132, %131 ]
  %138 = insertvalue { %"class.absl::container_internal::btree_node"*, i32 } undef, %"class.absl::container_internal::btree_node"* %136, 0
  %139 = insertvalue { %"class.absl::container_internal::btree_node"*, i32 } %138, i32 %137, 1
  ret { %"class.absl::container_internal::btree_node"*, i32 } %139
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5eraseENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"*, %"class.absl::container_internal::btree_node"*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %1, i64 8, i32 0
  %5 = getelementptr inbounds i8, i8* %4, i64 3
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %48

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %1, i64 256, i32 0
  %10 = bitcast i8* %9 to %"class.absl::container_internal::btree_node"**
  %11 = sext i32 %2 to i64
  %12 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %10, i64 %11
  %13 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %12, align 8
  %14 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %13, i64 8, i32 0
  %15 = getelementptr inbounds i8, i8* %14, i64 3
  %16 = load i8, i8* %15, align 1
  %17 = icmp eq i8 %16, 0
  %18 = getelementptr inbounds i8, i8* %14, i64 2
  %19 = load i8, i8* %18, align 1
  br i1 %17, label %20, label %34

20:                                               ; preds = %8, %20
  %21 = phi i8 [ %33, %20 ], [ %19, %8 ]
  %22 = phi %"class.absl::container_internal::btree_node"* [ %27, %20 ], [ %13, %8 ]
  %23 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %22, i64 256, i32 0
  %24 = bitcast i8* %23 to %"class.absl::container_internal::btree_node"**
  %25 = zext i8 %21 to i64
  %26 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %24, i64 %25
  %27 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %26, align 8
  %28 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %27, i64 8, i32 0
  %29 = getelementptr inbounds i8, i8* %28, i64 3
  %30 = load i8, i8* %29, align 1
  %31 = icmp eq i8 %30, 0
  %32 = getelementptr inbounds i8, i8* %28, i64 2
  %33 = load i8, i8* %32, align 1
  br i1 %31, label %20, label %34

34:                                               ; preds = %20, %8
  %35 = phi %"class.absl::container_internal::btree_node"* [ %13, %8 ], [ %27, %20 ]
  %36 = phi i8 [ %19, %8 ], [ %33, %20 ]
  %37 = zext i8 %36 to i32
  %38 = add nsw i32 %37, -1
  %39 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %35, i64 16, i32 0
  %40 = bitcast i8* %39 to %"class.quic::QuicInterval"*
  %41 = sext i32 %38 to i64
  %42 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %40, i64 %41
  %43 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %1, i64 16, i32 0
  %44 = bitcast i8* %43 to %"class.quic::QuicInterval"*
  %45 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %44, i64 %11
  %46 = bitcast %"class.quic::QuicInterval"* %45 to i8*
  %47 = bitcast %"class.quic::QuicInterval"* %42 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 16, i1 false) #13
  br label %48

48:                                               ; preds = %3, %34
  %49 = phi i32 [ %38, %34 ], [ %2, %3 ]
  %50 = phi %"class.absl::container_internal::btree_node"* [ %35, %34 ], [ %1, %3 ]
  %51 = phi i1 [ true, %34 ], [ false, %3 ]
  %52 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  %53 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %50, i64 8, i32 0
  %54 = getelementptr inbounds i8, i8* %53, i64 2
  %55 = load i8, i8* %54, align 1
  %56 = and i32 %49, 255
  %57 = add nuw nsw i32 %56, 1
  %58 = zext i8 %55 to i32
  %59 = and i32 %57, 255
  %60 = sub nsw i32 %58, %59
  %61 = sext i32 %60 to i64
  %62 = zext i32 %59 to i64
  %63 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %50, i64 16, i32 0
  %64 = bitcast i8* %63 to %"class.quic::QuicInterval"*
  %65 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %64, i64 %62
  %66 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %65, i64 %61
  %67 = icmp eq i32 %60, 0
  br i1 %67, label %115, label %68

68:                                               ; preds = %48
  %69 = zext i32 %56 to i64
  %70 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %64, i64 %69
  %71 = zext i8 %55 to i64
  %72 = shl nuw nsw i64 %71, 4
  %73 = add nsw i64 %72, -16
  %74 = shl nuw nsw i32 %59, 4
  %75 = zext i32 %74 to i64
  %76 = sub nsw i64 %73, %75
  %77 = lshr exact i64 %76, 4
  %78 = add nuw nsw i64 %77, 1
  %79 = and i64 %78, 3
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %91, label %81

81:                                               ; preds = %68, %81
  %82 = phi %"class.quic::QuicInterval"* [ %88, %81 ], [ %70, %68 ]
  %83 = phi %"class.quic::QuicInterval"* [ %87, %81 ], [ %65, %68 ]
  %84 = phi i64 [ %89, %81 ], [ %79, %68 ]
  %85 = bitcast %"class.quic::QuicInterval"* %82 to i8*
  %86 = bitcast %"class.quic::QuicInterval"* %83 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %85, i8* align 8 %86, i64 16, i1 false) #13
  %87 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %83, i64 1
  %88 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %82, i64 1
  %89 = add i64 %84, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %81, !llvm.loop !44

91:                                               ; preds = %81, %68
  %92 = phi %"class.quic::QuicInterval"* [ %70, %68 ], [ %88, %81 ]
  %93 = phi %"class.quic::QuicInterval"* [ %65, %68 ], [ %87, %81 ]
  %94 = icmp ult i64 %76, 48
  br i1 %94, label %115, label %95

95:                                               ; preds = %91, %95
  %96 = phi %"class.quic::QuicInterval"* [ %113, %95 ], [ %92, %91 ]
  %97 = phi %"class.quic::QuicInterval"* [ %112, %95 ], [ %93, %91 ]
  %98 = bitcast %"class.quic::QuicInterval"* %96 to i8*
  %99 = bitcast %"class.quic::QuicInterval"* %97 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 %99, i64 16, i1 false) #13
  %100 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %97, i64 1
  %101 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %96, i64 1
  %102 = bitcast %"class.quic::QuicInterval"* %101 to i8*
  %103 = bitcast %"class.quic::QuicInterval"* %100 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %102, i8* align 8 %103, i64 16, i1 false) #13
  %104 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %97, i64 2
  %105 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %96, i64 2
  %106 = bitcast %"class.quic::QuicInterval"* %105 to i8*
  %107 = bitcast %"class.quic::QuicInterval"* %104 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 16, i1 false) #13
  %108 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %97, i64 3
  %109 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %96, i64 3
  %110 = bitcast %"class.quic::QuicInterval"* %109 to i8*
  %111 = bitcast %"class.quic::QuicInterval"* %108 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* align 8 %111, i64 16, i1 false) #13
  %112 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %97, i64 4
  %113 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %96, i64 4
  %114 = icmp eq %"class.quic::QuicInterval"* %112, %66
  br i1 %114, label %115, label %95

115:                                              ; preds = %91, %95, %48
  %116 = getelementptr inbounds i8, i8* %53, i64 3
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 0
  br i1 %118, label %119, label %177

119:                                              ; preds = %115
  %120 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %50, i64 256, i32 0
  %121 = bitcast i8* %120 to %"class.absl::container_internal::btree_node"**
  %122 = add nuw nsw i32 %56, 1
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %123
  %125 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %124, align 8
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %125, %"class.std::__1::allocator"* %52) #13
  %126 = icmp ult i32 %57, %58
  br i1 %126, label %127, label %177

127:                                              ; preds = %119
  %128 = zext i32 %57 to i64
  %129 = zext i8 %55 to i64
  %130 = add nsw i64 %128, -1
  %131 = sub nsw i64 %129, %128
  %132 = add nsw i64 %129, -2
  %133 = sub nsw i64 %132, %130
  %134 = and i64 %131, 3
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %147, label %136

136:                                              ; preds = %127, %136
  %137 = phi i64 [ %139, %136 ], [ %128, %127 ]
  %138 = phi i64 [ %145, %136 ], [ %134, %127 ]
  %139 = add nuw nsw i64 %137, 1
  %140 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %139
  %141 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %140, align 8
  %142 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %137
  store %"class.absl::container_internal::btree_node"* %141, %"class.absl::container_internal::btree_node"** %142, align 8
  %143 = trunc i64 %137 to i8
  %144 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %141, i64 8, i32 0
  store i8 %143, i8* %144, align 1
  %145 = add i64 %138, -1
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %147, label %136, !llvm.loop !45

147:                                              ; preds = %136, %127
  %148 = phi i64 [ %128, %127 ], [ %139, %136 ]
  %149 = icmp ult i64 %133, 3
  br i1 %149, label %177, label %150

150:                                              ; preds = %147, %150
  %151 = phi i64 [ %170, %150 ], [ %148, %147 ]
  %152 = add nuw nsw i64 %151, 1
  %153 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %152
  %154 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %153, align 8
  %155 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %151
  store %"class.absl::container_internal::btree_node"* %154, %"class.absl::container_internal::btree_node"** %155, align 8
  %156 = trunc i64 %151 to i8
  %157 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %154, i64 8, i32 0
  store i8 %156, i8* %157, align 1
  %158 = add nuw nsw i64 %151, 2
  %159 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %158
  %160 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %159, align 8
  %161 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %152
  store %"class.absl::container_internal::btree_node"* %160, %"class.absl::container_internal::btree_node"** %161, align 8
  %162 = trunc i64 %152 to i8
  %163 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %160, i64 8, i32 0
  store i8 %162, i8* %163, align 1
  %164 = add nuw nsw i64 %151, 3
  %165 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %164
  %166 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %165, align 8
  %167 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %158
  store %"class.absl::container_internal::btree_node"* %166, %"class.absl::container_internal::btree_node"** %167, align 8
  %168 = trunc i64 %158 to i8
  %169 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %166, i64 8, i32 0
  store i8 %168, i8* %169, align 1
  %170 = add nuw nsw i64 %151, 4
  %171 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %170
  %172 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %171, align 8
  %173 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %121, i64 %164
  store %"class.absl::container_internal::btree_node"* %172, %"class.absl::container_internal::btree_node"** %173, align 8
  %174 = trunc i64 %164 to i8
  %175 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %172, i64 8, i32 0
  store i8 %174, i8* %175, align 1
  %176 = icmp eq i64 %170, %129
  br i1 %176, label %177, label %150

177:                                              ; preds = %147, %150, %115, %119
  %178 = add i8 %55, -1
  store i8 %178, i8* %54, align 1
  %179 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 2
  %180 = load i64, i64* %179, align 8
  %181 = add nsw i64 %180, -1
  store i64 %181, i64* %179, align 8
  %182 = tail call { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE22rebalance_after_deleteENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"* %0, %"class.absl::container_internal::btree_node"* %50, i32 %49)
  %183 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %182, 0
  %184 = ptrtoint %"class.absl::container_internal::btree_node"* %183 to i64
  %185 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %182, 1
  br i1 %51, label %186, label %236

186:                                              ; preds = %177
  %187 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %183, i64 8, i32 0
  %188 = getelementptr inbounds i8, i8* %187, i64 3
  %189 = load i8, i8* %188, align 1
  %190 = icmp eq i8 %189, 0
  %191 = add nsw i32 %185, 1
  br i1 %190, label %211, label %192

192:                                              ; preds = %186
  %193 = getelementptr inbounds i8, i8* %187, i64 2
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i32
  %196 = icmp eq i32 %191, %195
  br i1 %196, label %197, label %236

197:                                              ; preds = %192, %206
  %198 = phi i8* [ %202, %206 ], [ %187, %192 ]
  %199 = phi %"class.absl::container_internal::btree_node"* [ %201, %206 ], [ %183, %192 ]
  %200 = bitcast %"class.absl::container_internal::btree_node"* %199 to %"class.absl::container_internal::btree_node"**
  %201 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %200, align 8
  %202 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %201, i64 8, i32 0
  %203 = getelementptr inbounds i8, i8* %202, i64 3
  %204 = load i8, i8* %203, align 1
  %205 = icmp eq i8 %204, 0
  br i1 %205, label %206, label %236

206:                                              ; preds = %197
  %207 = load i8, i8* %198, align 1
  %208 = getelementptr inbounds i8, i8* %202, i64 2
  %209 = load i8, i8* %208, align 1
  %210 = icmp eq i8 %207, %209
  br i1 %210, label %197, label %233

211:                                              ; preds = %186
  %212 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %183, i64 256, i32 0
  %213 = bitcast i8* %212 to %"class.absl::container_internal::btree_node"**
  %214 = sext i32 %191 to i64
  %215 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %213, i64 %214
  %216 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %215, align 8
  %217 = ptrtoint %"class.absl::container_internal::btree_node"* %216 to i64
  %218 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %216, i64 8, i32 0
  %219 = getelementptr inbounds i8, i8* %218, i64 3
  %220 = load i8, i8* %219, align 1
  %221 = icmp eq i8 %220, 0
  br i1 %221, label %222, label %236

222:                                              ; preds = %211, %222
  %223 = phi %"class.absl::container_internal::btree_node"* [ %226, %222 ], [ %216, %211 ]
  %224 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %223, i64 256, i32 0
  %225 = bitcast i8* %224 to %"class.absl::container_internal::btree_node"**
  %226 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %225, align 8
  %227 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %226, i64 8, i32 0
  %228 = getelementptr inbounds i8, i8* %227, i64 3
  %229 = load i8, i8* %228, align 1
  %230 = icmp eq i8 %229, 0
  br i1 %230, label %222, label %231

231:                                              ; preds = %222
  %232 = ptrtoint %"class.absl::container_internal::btree_node"* %226 to i64
  br label %236

233:                                              ; preds = %206
  %234 = ptrtoint %"class.absl::container_internal::btree_node"* %201 to i64
  %235 = zext i8 %207 to i32
  br label %236

236:                                              ; preds = %197, %233, %231, %192, %211, %177
  %237 = phi i32 [ %185, %177 ], [ %191, %192 ], [ 0, %211 ], [ 0, %231 ], [ %235, %233 ], [ %191, %197 ]
  %238 = phi i64 [ %184, %177 ], [ %184, %192 ], [ %217, %211 ], [ %232, %231 ], [ %234, %233 ], [ %184, %197 ]
  %239 = inttoptr i64 %238 to %"class.absl::container_internal::btree_node"*
  %240 = insertvalue { %"class.absl::container_internal::btree_node"*, i32 } undef, %"class.absl::container_internal::btree_node"* %239, 0
  %241 = insertvalue { %"class.absl::container_internal::btree_node"*, i32 } %240, i32 %237, 1
  ret { %"class.absl::container_internal::btree_node"*, i32 } %241
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE22try_merge_or_rebalanceEPNS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"*, %"struct.absl::container_internal::btree_iterator.11"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.absl::container_internal::btree_iterator.11", %"struct.absl::container_internal::btree_iterator.11"* %1, i64 0, i32 0
  %4 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %3, align 8
  %5 = bitcast %"class.absl::container_internal::btree_node"* %4 to %"class.absl::container_internal::btree_node"**
  %6 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %4, i64 8, i32 0
  %8 = load i8, i8* %7, align 1
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %37, label %10

10:                                               ; preds = %2
  %11 = zext i8 %8 to i64
  %12 = add nsw i64 %11, -1
  %13 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %6, i64 256, i32 0
  %14 = bitcast i8* %13 to %"class.absl::container_internal::btree_node"**
  %15 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %14, i64 %12
  %16 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %15, align 8
  %17 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %16, i64 8, i32 0
  %18 = getelementptr inbounds i8, i8* %17, i64 2
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = add nuw nsw i32 %20, 1
  %22 = getelementptr inbounds i8, i8* %7, i64 2
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = add nuw nsw i32 %21, %24
  %26 = icmp ult i32 %25, 16
  br i1 %26, label %27, label %37

27:                                               ; preds = %10
  %28 = getelementptr inbounds %"struct.absl::container_internal::btree_iterator.11", %"struct.absl::container_internal::btree_iterator.11"* %1, i64 0, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = add nsw i32 %29, %21
  store i32 %30, i32* %28, align 8
  %31 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5mergeEPSD_PSB_(%"class.absl::container_internal::btree_node"* %16, %"class.absl::container_internal::btree_node"* %4, %"class.std::__1::allocator"* %31) #13
  %32 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 1
  %33 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %32, align 8
  %34 = icmp eq %"class.absl::container_internal::btree_node"* %33, %4
  br i1 %34, label %35, label %36

35:                                               ; preds = %27
  store %"class.absl::container_internal::btree_node"* %16, %"class.absl::container_internal::btree_node"** %32, align 8
  br label %36

36:                                               ; preds = %27, %35
  store %"class.absl::container_internal::btree_node"* %16, %"class.absl::container_internal::btree_node"** %3, align 8
  br label %113

37:                                               ; preds = %2, %10
  %38 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %6, i64 8, i32 0
  %39 = getelementptr inbounds i8, i8* %38, i64 2
  %40 = load i8, i8* %39, align 1
  %41 = icmp ult i8 %8, %40
  br i1 %41, label %42, label %80

42:                                               ; preds = %37
  %43 = zext i8 %8 to i64
  %44 = add nuw nsw i64 %43, 1
  %45 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %6, i64 256, i32 0
  %46 = bitcast i8* %45 to %"class.absl::container_internal::btree_node"**
  %47 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %46, i64 %44
  %48 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %47, align 8
  %49 = getelementptr inbounds i8, i8* %7, i64 2
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = add nuw nsw i32 %51, 1
  %53 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %48, i64 8, i32 0
  %54 = getelementptr inbounds i8, i8* %53, i64 2
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = add nuw nsw i32 %52, %56
  %58 = icmp ult i32 %57, 16
  br i1 %58, label %59, label %65

59:                                               ; preds = %42
  %60 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5mergeEPSD_PSB_(%"class.absl::container_internal::btree_node"* %4, %"class.absl::container_internal::btree_node"* %48, %"class.std::__1::allocator"* %60) #13
  %61 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 1
  %62 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %61, align 8
  %63 = icmp eq %"class.absl::container_internal::btree_node"* %62, %48
  br i1 %63, label %64, label %113

64:                                               ; preds = %59
  store %"class.absl::container_internal::btree_node"* %4, %"class.absl::container_internal::btree_node"** %61, align 8
  br label %113

65:                                               ; preds = %42
  %66 = icmp ugt i8 %55, 7
  br i1 %66, label %67, label %80

67:                                               ; preds = %65
  %68 = icmp eq i8 %50, 0
  br i1 %68, label %73, label %69

69:                                               ; preds = %67
  %70 = getelementptr inbounds %"struct.absl::container_internal::btree_iterator.11", %"struct.absl::container_internal::btree_iterator.11"* %1, i64 0, i32 1
  %71 = load i32, i32* %70, align 8
  %72 = icmp sgt i32 %71, 0
  br i1 %72, label %73, label %80

73:                                               ; preds = %69, %67
  %74 = sub nsw i32 %56, %51
  %75 = sdiv i32 %74, 2
  %76 = add nsw i32 %56, -1
  %77 = icmp slt i32 %76, %75
  %78 = select i1 %77, i32 %76, i32 %75
  %79 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE23rebalance_right_to_leftEiPSD_PSB_(%"class.absl::container_internal::btree_node"* %4, i32 %78, %"class.absl::container_internal::btree_node"* %48, %"class.std::__1::allocator"* %79)
  br label %113

80:                                               ; preds = %69, %65, %37
  br i1 %9, label %113, label %81

81:                                               ; preds = %80
  %82 = zext i8 %8 to i64
  %83 = add nsw i64 %82, -1
  %84 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %6, i64 256, i32 0
  %85 = bitcast i8* %84 to %"class.absl::container_internal::btree_node"**
  %86 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %85, i64 %83
  %87 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %86, align 8
  %88 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %87, i64 8, i32 0
  %89 = getelementptr inbounds i8, i8* %88, i64 2
  %90 = load i8, i8* %89, align 1
  %91 = icmp ugt i8 %90, 7
  br i1 %91, label %92, label %113

92:                                               ; preds = %81
  %93 = getelementptr inbounds i8, i8* %7, i64 2
  %94 = load i8, i8* %93, align 1
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %101, label %96

96:                                               ; preds = %92
  %97 = getelementptr inbounds %"struct.absl::container_internal::btree_iterator.11", %"struct.absl::container_internal::btree_iterator.11"* %1, i64 0, i32 1
  %98 = load i32, i32* %97, align 8
  %99 = zext i8 %94 to i32
  %100 = icmp slt i32 %98, %99
  br i1 %100, label %101, label %113

101:                                              ; preds = %92, %96
  %102 = phi i32 [ %99, %96 ], [ 0, %92 ]
  %103 = zext i8 %90 to i32
  %104 = sub nsw i32 %103, %102
  %105 = sdiv i32 %104, 2
  %106 = add nsw i32 %103, -1
  %107 = icmp slt i32 %106, %105
  %108 = select i1 %107, i32 %106, i32 %105
  %109 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE23rebalance_left_to_rightEiPSD_PSB_(%"class.absl::container_internal::btree_node"* %87, i32 %108, %"class.absl::container_internal::btree_node"* %4, %"class.std::__1::allocator"* %109)
  %110 = getelementptr inbounds %"struct.absl::container_internal::btree_iterator.11", %"struct.absl::container_internal::btree_iterator.11"* %1, i64 0, i32 1
  %111 = load i32, i32* %110, align 8
  %112 = add nsw i32 %111, %108
  store i32 %112, i32* %110, align 8
  br label %113

113:                                              ; preds = %80, %81, %96, %64, %59, %73, %101, %36
  %114 = phi i1 [ false, %101 ], [ true, %36 ], [ false, %80 ], [ true, %64 ], [ true, %59 ], [ false, %73 ], [ false, %96 ], [ false, %81 ]
  ret i1 %114
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE23rebalance_right_to_leftEiPSD_PSB_(%"class.absl::container_internal::btree_node"*, i32, %"class.absl::container_internal::btree_node"*, %"class.std::__1::allocator"*) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 8, i32 0
  %6 = getelementptr inbounds i8, i8* %5, i64 2
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i64
  %9 = load i8, i8* %5, align 1
  %10 = zext i8 %9 to i64
  %11 = bitcast %"class.absl::container_internal::btree_node"* %0 to %"class.absl::container_internal::btree_node"**
  %12 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %11, align 8
  %13 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 16, i32 0
  %14 = bitcast i8* %13 to %"class.quic::QuicInterval"*
  %15 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %14, i64 %8
  %16 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %12, i64 16, i32 0
  %17 = bitcast i8* %16 to %"class.quic::QuicInterval"*
  %18 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %17, i64 %10
  %19 = bitcast %"class.quic::QuicInterval"* %15 to i8*
  %20 = bitcast %"class.quic::QuicInterval"* %18 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 16, i1 false) #13
  %21 = add nsw i32 %1, -1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 16, i32 0
  %24 = bitcast i8* %23 to %"class.quic::QuicInterval"*
  %25 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %24, i64 %22
  %26 = icmp eq i32 %21, 0
  br i1 %26, label %76, label %27

27:                                               ; preds = %4
  %28 = shl nuw nsw i64 %8, 32
  %29 = add nuw nsw i64 %28, 4294967296
  %30 = lshr exact i64 %29, 32
  %31 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %14, i64 %30
  %32 = shl nsw i64 %22, 4
  %33 = add nsw i64 %32, -16
  %34 = lshr exact i64 %33, 4
  %35 = add nuw nsw i64 %34, 1
  %36 = and i64 %35, 3
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %48, label %38

38:                                               ; preds = %27, %38
  %39 = phi %"class.quic::QuicInterval"* [ %45, %38 ], [ %31, %27 ]
  %40 = phi %"class.quic::QuicInterval"* [ %44, %38 ], [ %24, %27 ]
  %41 = phi i64 [ %46, %38 ], [ %36, %27 ]
  %42 = bitcast %"class.quic::QuicInterval"* %39 to i8*
  %43 = bitcast %"class.quic::QuicInterval"* %40 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 16, i1 false) #13
  %44 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %40, i64 1
  %45 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %39, i64 1
  %46 = add i64 %41, -1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %38, !llvm.loop !46

48:                                               ; preds = %38, %27
  %49 = phi %"class.quic::QuicInterval"* [ %31, %27 ], [ %45, %38 ]
  %50 = phi %"class.quic::QuicInterval"* [ %24, %27 ], [ %44, %38 ]
  %51 = icmp ult i64 %33, 48
  br i1 %51, label %72, label %52

52:                                               ; preds = %48, %52
  %53 = phi %"class.quic::QuicInterval"* [ %70, %52 ], [ %49, %48 ]
  %54 = phi %"class.quic::QuicInterval"* [ %69, %52 ], [ %50, %48 ]
  %55 = bitcast %"class.quic::QuicInterval"* %53 to i8*
  %56 = bitcast %"class.quic::QuicInterval"* %54 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %55, i8* align 8 %56, i64 16, i1 false) #13
  %57 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %54, i64 1
  %58 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %53, i64 1
  %59 = bitcast %"class.quic::QuicInterval"* %58 to i8*
  %60 = bitcast %"class.quic::QuicInterval"* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 16, i1 false) #13
  %61 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %54, i64 2
  %62 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %53, i64 2
  %63 = bitcast %"class.quic::QuicInterval"* %62 to i8*
  %64 = bitcast %"class.quic::QuicInterval"* %61 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 16, i1 false) #13
  %65 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %54, i64 3
  %66 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %53, i64 3
  %67 = bitcast %"class.quic::QuicInterval"* %66 to i8*
  %68 = bitcast %"class.quic::QuicInterval"* %65 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 16, i1 false) #13
  %69 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %54, i64 4
  %70 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %53, i64 4
  %71 = icmp eq %"class.quic::QuicInterval"* %69, %25
  br i1 %71, label %72, label %52

72:                                               ; preds = %52, %48
  %73 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %11, align 8
  %74 = load i8, i8* %5, align 1
  %75 = zext i8 %74 to i64
  br label %76

76:                                               ; preds = %72, %4
  %77 = phi i64 [ %75, %72 ], [ %10, %4 ]
  %78 = phi %"class.absl::container_internal::btree_node"* [ %73, %72 ], [ %12, %4 ]
  %79 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %78, i64 16, i32 0
  %80 = bitcast i8* %79 to %"class.quic::QuicInterval"*
  %81 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %80, i64 %77
  %82 = bitcast %"class.quic::QuicInterval"* %81 to i8*
  %83 = bitcast %"class.quic::QuicInterval"* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 16, i1 false) #13
  %84 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 8, i32 0
  %85 = getelementptr inbounds i8, i8* %84, i64 2
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = sub nsw i32 %87, %1
  %89 = sext i32 %88 to i64
  %90 = sext i32 %1 to i64
  %91 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %24, i64 %90
  %92 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %91, i64 %89
  %93 = icmp eq i32 %88, 0
  br i1 %93, label %138, label %94

94:                                               ; preds = %76
  %95 = zext i8 %86 to i64
  %96 = shl nuw nsw i64 %95, 4
  %97 = add nsw i64 %96, -16
  %98 = shl nsw i64 %90, 4
  %99 = sub nsw i64 %97, %98
  %100 = lshr exact i64 %99, 4
  %101 = add nuw nsw i64 %100, 1
  %102 = and i64 %101, 3
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %114, label %104

104:                                              ; preds = %94, %104
  %105 = phi %"class.quic::QuicInterval"* [ %111, %104 ], [ %24, %94 ]
  %106 = phi %"class.quic::QuicInterval"* [ %110, %104 ], [ %91, %94 ]
  %107 = phi i64 [ %112, %104 ], [ %102, %94 ]
  %108 = bitcast %"class.quic::QuicInterval"* %105 to i8*
  %109 = bitcast %"class.quic::QuicInterval"* %106 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %108, i8* align 8 %109, i64 16, i1 false) #13
  %110 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %106, i64 1
  %111 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %105, i64 1
  %112 = add i64 %107, -1
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %104, !llvm.loop !47

114:                                              ; preds = %104, %94
  %115 = phi %"class.quic::QuicInterval"* [ %24, %94 ], [ %111, %104 ]
  %116 = phi %"class.quic::QuicInterval"* [ %91, %94 ], [ %110, %104 ]
  %117 = icmp ult i64 %99, 48
  br i1 %117, label %138, label %118

118:                                              ; preds = %114, %118
  %119 = phi %"class.quic::QuicInterval"* [ %136, %118 ], [ %115, %114 ]
  %120 = phi %"class.quic::QuicInterval"* [ %135, %118 ], [ %116, %114 ]
  %121 = bitcast %"class.quic::QuicInterval"* %119 to i8*
  %122 = bitcast %"class.quic::QuicInterval"* %120 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %121, i8* align 8 %122, i64 16, i1 false) #13
  %123 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %120, i64 1
  %124 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %119, i64 1
  %125 = bitcast %"class.quic::QuicInterval"* %124 to i8*
  %126 = bitcast %"class.quic::QuicInterval"* %123 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* align 8 %126, i64 16, i1 false) #13
  %127 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %120, i64 2
  %128 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %119, i64 2
  %129 = bitcast %"class.quic::QuicInterval"* %128 to i8*
  %130 = bitcast %"class.quic::QuicInterval"* %127 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %129, i8* align 8 %130, i64 16, i1 false) #13
  %131 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %120, i64 3
  %132 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %119, i64 3
  %133 = bitcast %"class.quic::QuicInterval"* %132 to i8*
  %134 = bitcast %"class.quic::QuicInterval"* %131 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %133, i8* align 8 %134, i64 16, i1 false) #13
  %135 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %120, i64 4
  %136 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %119, i64 4
  %137 = icmp eq %"class.quic::QuicInterval"* %135, %92
  br i1 %137, label %138, label %118

138:                                              ; preds = %114, %118, %76
  %139 = getelementptr inbounds i8, i8* %5, i64 3
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 0
  br i1 %141, label %142, label %221

142:                                              ; preds = %138
  %143 = icmp sgt i32 %1, 0
  br i1 %143, label %144, label %170

144:                                              ; preds = %142
  %145 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 256, i32 0
  %146 = bitcast i8* %145 to %"class.absl::container_internal::btree_node"**
  %147 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 256, i32 0
  %148 = bitcast i8* %147 to %"class.absl::container_internal::btree_node"**
  %149 = zext i32 %1 to i64
  %150 = and i64 %149, 1
  %151 = icmp eq i32 %1, 1
  br i1 %151, label %154, label %152

152:                                              ; preds = %144
  %153 = sub nsw i64 %149, %150
  br label %177

154:                                              ; preds = %177, %144
  %155 = phi i64 [ 0, %144 ], [ %194, %177 ]
  %156 = icmp eq i64 %150, 0
  br i1 %156, label %170, label %157

157:                                              ; preds = %154
  %158 = load i8, i8* %6, align 1
  %159 = zext i8 %158 to i32
  %160 = trunc i64 %155 to i32
  %161 = add i32 %160, 1
  %162 = add i32 %161, %159
  %163 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %146, i64 %155
  %164 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %163, align 8
  %165 = zext i32 %162 to i64
  %166 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %148, i64 %165
  store %"class.absl::container_internal::btree_node"* %164, %"class.absl::container_internal::btree_node"** %166, align 8
  %167 = trunc i32 %162 to i8
  %168 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %164, i64 8, i32 0
  store i8 %167, i8* %168, align 1
  %169 = bitcast %"class.absl::container_internal::btree_node"* %164 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %0, %"class.absl::container_internal::btree_node"** %169, align 8
  br label %170

170:                                              ; preds = %157, %154, %142
  %171 = load i8, i8* %85, align 1
  %172 = zext i8 %171 to i32
  %173 = icmp slt i32 %172, %1
  br i1 %173, label %221, label %174

174:                                              ; preds = %170
  %175 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 256, i32 0
  %176 = bitcast i8* %175 to %"class.absl::container_internal::btree_node"**
  br label %206

177:                                              ; preds = %177, %152
  %178 = phi i64 [ 0, %152 ], [ %194, %177 ]
  %179 = phi i64 [ %153, %152 ], [ %204, %177 ]
  %180 = load i8, i8* %6, align 1
  %181 = zext i8 %180 to i32
  %182 = or i64 %178, 1
  %183 = trunc i64 %182 to i32
  %184 = add i32 %183, %181
  %185 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %146, i64 %178
  %186 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %185, align 8
  %187 = zext i32 %184 to i64
  %188 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %148, i64 %187
  store %"class.absl::container_internal::btree_node"* %186, %"class.absl::container_internal::btree_node"** %188, align 8
  %189 = trunc i32 %184 to i8
  %190 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %186, i64 8, i32 0
  store i8 %189, i8* %190, align 1
  %191 = bitcast %"class.absl::container_internal::btree_node"* %186 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %0, %"class.absl::container_internal::btree_node"** %191, align 8
  %192 = load i8, i8* %6, align 1
  %193 = zext i8 %192 to i32
  %194 = add nuw nsw i64 %178, 2
  %195 = trunc i64 %194 to i32
  %196 = add i32 %195, %193
  %197 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %146, i64 %182
  %198 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %197, align 8
  %199 = zext i32 %196 to i64
  %200 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %148, i64 %199
  store %"class.absl::container_internal::btree_node"* %198, %"class.absl::container_internal::btree_node"** %200, align 8
  %201 = trunc i32 %196 to i8
  %202 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %198, i64 8, i32 0
  store i8 %201, i8* %202, align 1
  %203 = bitcast %"class.absl::container_internal::btree_node"* %198 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %0, %"class.absl::container_internal::btree_node"** %203, align 8
  %204 = add i64 %179, -2
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %154, label %177

206:                                              ; preds = %206, %174
  %207 = phi i64 [ %215, %206 ], [ 0, %174 ]
  %208 = add nsw i64 %207, %90
  %209 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %176, i64 %208
  %210 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %209, align 8
  %211 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %176, i64 %207
  store %"class.absl::container_internal::btree_node"* %210, %"class.absl::container_internal::btree_node"** %211, align 8
  %212 = trunc i64 %207 to i8
  %213 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %210, i64 8, i32 0
  store i8 %212, i8* %213, align 1
  %214 = bitcast %"class.absl::container_internal::btree_node"* %210 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %2, %"class.absl::container_internal::btree_node"** %214, align 8
  %215 = add nuw nsw i64 %207, 1
  %216 = load i8, i8* %85, align 1
  %217 = zext i8 %216 to i32
  %218 = sub nsw i32 %217, %1
  %219 = sext i32 %218 to i64
  %220 = icmp slt i64 %207, %219
  br i1 %220, label %206, label %221

221:                                              ; preds = %206, %170, %138
  %222 = load i8, i8* %6, align 1
  %223 = trunc i32 %1 to i8
  %224 = add i8 %222, %223
  store i8 %224, i8* %6, align 1
  %225 = load i8, i8* %85, align 1
  %226 = sub i8 %225, %223
  store i8 %226, i8* %85, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE23rebalance_left_to_rightEiPSD_PSB_(%"class.absl::container_internal::btree_node"*, i32, %"class.absl::container_internal::btree_node"*, %"class.std::__1::allocator"*) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 8, i32 0
  %6 = getelementptr inbounds i8, i8* %5, i64 2
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i64
  %9 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 16, i32 0
  %10 = bitcast i8* %9 to %"class.quic::QuicInterval"*
  %11 = shl nuw nsw i64 %8, 32
  %12 = add nsw i64 %11, -4294967296
  %13 = ashr exact i64 %12, 32
  %14 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %10, i64 %13
  %15 = sub nsw i64 0, %8
  %16 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %14, i64 %15
  %17 = icmp eq i8 %7, 0
  br i1 %17, label %65, label %18

18:                                               ; preds = %4
  %19 = zext i32 %1 to i64
  %20 = add nuw nsw i64 %8, %19
  %21 = shl i64 %20, 32
  %22 = add i64 %21, -4294967296
  %23 = ashr exact i64 %22, 32
  %24 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %10, i64 %23
  %25 = shl nuw nsw i64 %8, 4
  %26 = add nsw i64 %25, -16
  %27 = lshr exact i64 %26, 4
  %28 = add nuw nsw i64 %27, 1
  %29 = and i64 %28, 3
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %41, label %31

31:                                               ; preds = %18, %31
  %32 = phi %"class.quic::QuicInterval"* [ %38, %31 ], [ %24, %18 ]
  %33 = phi %"class.quic::QuicInterval"* [ %37, %31 ], [ %14, %18 ]
  %34 = phi i64 [ %39, %31 ], [ %29, %18 ]
  %35 = bitcast %"class.quic::QuicInterval"* %32 to i8*
  %36 = bitcast %"class.quic::QuicInterval"* %33 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 16, i1 false) #13
  %37 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %33, i64 -1
  %38 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %32, i64 -1
  %39 = add i64 %34, -1
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %31, !llvm.loop !48

41:                                               ; preds = %31, %18
  %42 = phi %"class.quic::QuicInterval"* [ %24, %18 ], [ %38, %31 ]
  %43 = phi %"class.quic::QuicInterval"* [ %14, %18 ], [ %37, %31 ]
  %44 = icmp ult i64 %26, 48
  br i1 %44, label %65, label %45

45:                                               ; preds = %41, %45
  %46 = phi %"class.quic::QuicInterval"* [ %63, %45 ], [ %42, %41 ]
  %47 = phi %"class.quic::QuicInterval"* [ %62, %45 ], [ %43, %41 ]
  %48 = bitcast %"class.quic::QuicInterval"* %46 to i8*
  %49 = bitcast %"class.quic::QuicInterval"* %47 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 16, i1 false) #13
  %50 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %47, i64 -1
  %51 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %46, i64 -1
  %52 = bitcast %"class.quic::QuicInterval"* %51 to i8*
  %53 = bitcast %"class.quic::QuicInterval"* %50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 16, i1 false) #13
  %54 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %47, i64 -2
  %55 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %46, i64 -2
  %56 = bitcast %"class.quic::QuicInterval"* %55 to i8*
  %57 = bitcast %"class.quic::QuicInterval"* %54 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 16, i1 false) #13
  %58 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %47, i64 -3
  %59 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %46, i64 -3
  %60 = bitcast %"class.quic::QuicInterval"* %59 to i8*
  %61 = bitcast %"class.quic::QuicInterval"* %58 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 16, i1 false) #13
  %62 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %47, i64 -4
  %63 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %46, i64 -4
  %64 = icmp eq %"class.quic::QuicInterval"* %62, %16
  br i1 %64, label %65, label %45

65:                                               ; preds = %41, %45, %4
  %66 = add nsw i32 %1, -1
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 8, i32 0
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = bitcast %"class.absl::container_internal::btree_node"* %0 to %"class.absl::container_internal::btree_node"**
  %72 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %71, align 8
  %73 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %10, i64 %67
  %74 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %72, i64 16, i32 0
  %75 = bitcast i8* %74 to %"class.quic::QuicInterval"*
  %76 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %75, i64 %70
  %77 = bitcast %"class.quic::QuicInterval"* %73 to i8*
  %78 = bitcast %"class.quic::QuicInterval"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 16, i1 false) #13
  %79 = getelementptr inbounds i8, i8* %68, i64 2
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = sub nsw i32 %81, %66
  %83 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 16, i32 0
  %84 = bitcast i8* %83 to %"class.quic::QuicInterval"*
  %85 = sext i32 %82 to i64
  %86 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %84, i64 %85
  %87 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %86, i64 %67
  %88 = icmp eq i32 %66, 0
  br i1 %88, label %133, label %89

89:                                               ; preds = %65
  %90 = shl nsw i64 %67, 4
  %91 = add nsw i64 %90, -16
  %92 = lshr exact i64 %91, 4
  %93 = add nuw nsw i64 %92, 1
  %94 = and i64 %93, 3
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %106, label %96

96:                                               ; preds = %89, %96
  %97 = phi %"class.quic::QuicInterval"* [ %103, %96 ], [ %10, %89 ]
  %98 = phi %"class.quic::QuicInterval"* [ %102, %96 ], [ %86, %89 ]
  %99 = phi i64 [ %104, %96 ], [ %94, %89 ]
  %100 = bitcast %"class.quic::QuicInterval"* %97 to i8*
  %101 = bitcast %"class.quic::QuicInterval"* %98 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 16, i1 false) #13
  %102 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %98, i64 1
  %103 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %97, i64 1
  %104 = add i64 %99, -1
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %106, label %96, !llvm.loop !49

106:                                              ; preds = %96, %89
  %107 = phi %"class.quic::QuicInterval"* [ %10, %89 ], [ %103, %96 ]
  %108 = phi %"class.quic::QuicInterval"* [ %86, %89 ], [ %102, %96 ]
  %109 = icmp ult i64 %91, 48
  br i1 %109, label %130, label %110

110:                                              ; preds = %106, %110
  %111 = phi %"class.quic::QuicInterval"* [ %128, %110 ], [ %107, %106 ]
  %112 = phi %"class.quic::QuicInterval"* [ %127, %110 ], [ %108, %106 ]
  %113 = bitcast %"class.quic::QuicInterval"* %111 to i8*
  %114 = bitcast %"class.quic::QuicInterval"* %112 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %113, i8* align 8 %114, i64 16, i1 false) #13
  %115 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %112, i64 1
  %116 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 1
  %117 = bitcast %"class.quic::QuicInterval"* %116 to i8*
  %118 = bitcast %"class.quic::QuicInterval"* %115 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %118, i64 16, i1 false) #13
  %119 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %112, i64 2
  %120 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 2
  %121 = bitcast %"class.quic::QuicInterval"* %120 to i8*
  %122 = bitcast %"class.quic::QuicInterval"* %119 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %121, i8* align 8 %122, i64 16, i1 false) #13
  %123 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %112, i64 3
  %124 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 3
  %125 = bitcast %"class.quic::QuicInterval"* %124 to i8*
  %126 = bitcast %"class.quic::QuicInterval"* %123 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* align 8 %126, i64 16, i1 false) #13
  %127 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %112, i64 4
  %128 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 4
  %129 = icmp eq %"class.quic::QuicInterval"* %127, %87
  br i1 %129, label %130, label %110

130:                                              ; preds = %110, %106
  %131 = load i8, i8* %79, align 1
  %132 = zext i8 %131 to i32
  br label %133

133:                                              ; preds = %130, %65
  %134 = phi i32 [ %132, %130 ], [ %81, %65 ]
  %135 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %71, align 8
  %136 = load i8, i8* %68, align 1
  %137 = zext i8 %136 to i64
  %138 = sub nsw i32 %134, %1
  %139 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %135, i64 16, i32 0
  %140 = bitcast i8* %139 to %"class.quic::QuicInterval"*
  %141 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %140, i64 %137
  %142 = sext i32 %138 to i64
  %143 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %84, i64 %142
  %144 = bitcast %"class.quic::QuicInterval"* %141 to i8*
  %145 = bitcast %"class.quic::QuicInterval"* %143 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %144, i8* align 8 %145, i64 16, i1 false) #13
  %146 = getelementptr inbounds i8, i8* %68, i64 3
  %147 = load i8, i8* %146, align 1
  %148 = icmp eq i8 %147, 0
  br i1 %148, label %149, label %247

149:                                              ; preds = %133
  %150 = load i8, i8* %6, align 1
  %151 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 256, i32 0
  %152 = bitcast i8* %151 to %"class.absl::container_internal::btree_node"**
  %153 = zext i8 %150 to i64
  %154 = sext i32 %1 to i64
  %155 = and i64 %153, 1
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %157, label %166

157:                                              ; preds = %149
  %158 = add nsw i64 %153, %154
  %159 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %152, i64 %153
  %160 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %159, align 8
  %161 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %152, i64 %158
  store %"class.absl::container_internal::btree_node"* %160, %"class.absl::container_internal::btree_node"** %161, align 8
  %162 = trunc i64 %158 to i8
  %163 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %160, i64 8, i32 0
  store i8 %162, i8* %163, align 1
  %164 = bitcast %"class.absl::container_internal::btree_node"* %160 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %2, %"class.absl::container_internal::btree_node"** %164, align 8
  %165 = add nsw i64 %153, -1
  br label %166

166:                                              ; preds = %157, %149
  %167 = phi i64 [ %153, %149 ], [ %165, %157 ]
  %168 = icmp eq i8 %150, 0
  br i1 %168, label %169, label %179

169:                                              ; preds = %179, %166
  %170 = icmp slt i32 %1, 1
  br i1 %170, label %247, label %171

171:                                              ; preds = %169
  %172 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 256, i32 0
  %173 = bitcast i8* %172 to %"class.absl::container_internal::btree_node"**
  %174 = zext i32 %1 to i64
  %175 = and i64 %174, 1
  %176 = icmp eq i32 %1, 1
  br i1 %176, label %230, label %177

177:                                              ; preds = %171
  %178 = sub nsw i64 %174, %175
  br label %198

179:                                              ; preds = %166, %179
  %180 = phi i64 [ %196, %179 ], [ %167, %166 ]
  %181 = add nsw i64 %180, %154
  %182 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %152, i64 %180
  %183 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %182, align 8
  %184 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %152, i64 %181
  store %"class.absl::container_internal::btree_node"* %183, %"class.absl::container_internal::btree_node"** %184, align 8
  %185 = trunc i64 %181 to i8
  %186 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %183, i64 8, i32 0
  store i8 %185, i8* %186, align 1
  %187 = bitcast %"class.absl::container_internal::btree_node"* %183 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %2, %"class.absl::container_internal::btree_node"** %187, align 8
  %188 = add nsw i64 %180, -1
  %189 = add nsw i64 %188, %154
  %190 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %152, i64 %188
  %191 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %190, align 8
  %192 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %152, i64 %189
  store %"class.absl::container_internal::btree_node"* %191, %"class.absl::container_internal::btree_node"** %192, align 8
  %193 = trunc i64 %189 to i8
  %194 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %191, i64 8, i32 0
  store i8 %193, i8* %194, align 1
  %195 = bitcast %"class.absl::container_internal::btree_node"* %191 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %2, %"class.absl::container_internal::btree_node"** %195, align 8
  %196 = add nsw i64 %180, -2
  %197 = icmp slt i64 %180, 2
  br i1 %197, label %169, label %179

198:                                              ; preds = %198, %177
  %199 = phi i64 [ 1, %177 ], [ %227, %198 ]
  %200 = phi i64 [ %178, %177 ], [ %228, %198 ]
  %201 = add nsw i64 %199, -1
  %202 = load i8, i8* %79, align 1
  %203 = zext i8 %202 to i32
  %204 = trunc i64 %199 to i32
  %205 = sub i32 %204, %1
  %206 = add i32 %205, %203
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %173, i64 %207
  %209 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %208, align 8
  %210 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %152, i64 %201
  store %"class.absl::container_internal::btree_node"* %209, %"class.absl::container_internal::btree_node"** %210, align 8
  %211 = trunc i64 %201 to i8
  %212 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %209, i64 8, i32 0
  store i8 %211, i8* %212, align 1
  %213 = bitcast %"class.absl::container_internal::btree_node"* %209 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %2, %"class.absl::container_internal::btree_node"** %213, align 8
  %214 = load i8, i8* %79, align 1
  %215 = zext i8 %214 to i32
  %216 = trunc i64 %199 to i32
  %217 = add i32 %216, 1
  %218 = sub i32 %217, %1
  %219 = add i32 %218, %215
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %173, i64 %220
  %222 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %221, align 8
  %223 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %152, i64 %199
  store %"class.absl::container_internal::btree_node"* %222, %"class.absl::container_internal::btree_node"** %223, align 8
  %224 = trunc i64 %199 to i8
  %225 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %222, i64 8, i32 0
  store i8 %224, i8* %225, align 1
  %226 = bitcast %"class.absl::container_internal::btree_node"* %222 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %2, %"class.absl::container_internal::btree_node"** %226, align 8
  %227 = add nuw nsw i64 %199, 2
  %228 = add i64 %200, -2
  %229 = icmp eq i64 %228, 0
  br i1 %229, label %230, label %198

230:                                              ; preds = %198, %171
  %231 = phi i64 [ 1, %171 ], [ %227, %198 ]
  %232 = icmp eq i64 %175, 0
  br i1 %232, label %247, label %233

233:                                              ; preds = %230
  %234 = add nsw i64 %231, -1
  %235 = load i8, i8* %79, align 1
  %236 = zext i8 %235 to i32
  %237 = trunc i64 %231 to i32
  %238 = sub i32 %237, %1
  %239 = add i32 %238, %236
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %173, i64 %240
  %242 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %241, align 8
  %243 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %152, i64 %234
  store %"class.absl::container_internal::btree_node"* %242, %"class.absl::container_internal::btree_node"** %243, align 8
  %244 = trunc i64 %234 to i8
  %245 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %242, i64 8, i32 0
  store i8 %244, i8* %245, align 1
  %246 = bitcast %"class.absl::container_internal::btree_node"* %242 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %2, %"class.absl::container_internal::btree_node"** %246, align 8
  br label %247

247:                                              ; preds = %233, %230, %169, %133
  %248 = load i8, i8* %79, align 1
  %249 = trunc i32 %1 to i8
  %250 = sub i8 %248, %249
  store i8 %250, i8* %79, align 1
  %251 = load i8, i8* %6, align 1
  %252 = add i8 %251, %249
  store i8 %252, i8* %6, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5mergeEPSD_PSB_(%"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"*, %"class.std::__1::allocator"*) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 8, i32 0
  %5 = getelementptr inbounds i8, i8* %4, i64 2
  %6 = load i8, i8* %5, align 1
  %7 = bitcast %"class.absl::container_internal::btree_node"* %0 to %"class.absl::container_internal::btree_node"**
  %8 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %7, align 8
  %9 = load i8, i8* %4, align 1
  %10 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %8, i64 16, i32 0
  %11 = bitcast i8* %10 to %"class.quic::QuicInterval"*
  %12 = zext i8 %9 to i64
  %13 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %11, i64 %12
  %14 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 16, i32 0
  %15 = bitcast i8* %14 to %"class.quic::QuicInterval"*
  %16 = zext i8 %6 to i64
  %17 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %15, i64 %16
  %18 = bitcast %"class.quic::QuicInterval"* %13 to i8*
  %19 = bitcast %"class.quic::QuicInterval"* %17 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %18, i64 16, i1 false) #13
  %20 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %1, i64 8, i32 0
  %21 = getelementptr inbounds i8, i8* %20, i64 2
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %1, i64 16, i32 0
  %25 = bitcast i8* %24 to %"class.quic::QuicInterval"*
  %26 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %25, i64 %23
  %27 = icmp eq i8 %22, 0
  br i1 %27, label %73, label %28

28:                                               ; preds = %3
  %29 = shl nuw nsw i64 %16, 32
  %30 = add nuw nsw i64 %29, 4294967296
  %31 = lshr exact i64 %30, 32
  %32 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %15, i64 %31
  %33 = shl nuw nsw i64 %23, 4
  %34 = add nsw i64 %33, -16
  %35 = lshr exact i64 %34, 4
  %36 = add nuw nsw i64 %35, 1
  %37 = and i64 %36, 3
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %49, label %39

39:                                               ; preds = %28, %39
  %40 = phi %"class.quic::QuicInterval"* [ %46, %39 ], [ %32, %28 ]
  %41 = phi %"class.quic::QuicInterval"* [ %45, %39 ], [ %25, %28 ]
  %42 = phi i64 [ %47, %39 ], [ %37, %28 ]
  %43 = bitcast %"class.quic::QuicInterval"* %40 to i8*
  %44 = bitcast %"class.quic::QuicInterval"* %41 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %44, i64 16, i1 false) #13
  %45 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %41, i64 1
  %46 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %40, i64 1
  %47 = add i64 %42, -1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %39, !llvm.loop !50

49:                                               ; preds = %39, %28
  %50 = phi %"class.quic::QuicInterval"* [ %32, %28 ], [ %46, %39 ]
  %51 = phi %"class.quic::QuicInterval"* [ %25, %28 ], [ %45, %39 ]
  %52 = icmp ult i64 %34, 48
  br i1 %52, label %73, label %53

53:                                               ; preds = %49, %53
  %54 = phi %"class.quic::QuicInterval"* [ %71, %53 ], [ %50, %49 ]
  %55 = phi %"class.quic::QuicInterval"* [ %70, %53 ], [ %51, %49 ]
  %56 = bitcast %"class.quic::QuicInterval"* %54 to i8*
  %57 = bitcast %"class.quic::QuicInterval"* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 16, i1 false) #13
  %58 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %55, i64 1
  %59 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %54, i64 1
  %60 = bitcast %"class.quic::QuicInterval"* %59 to i8*
  %61 = bitcast %"class.quic::QuicInterval"* %58 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 16, i1 false) #13
  %62 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %55, i64 2
  %63 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %54, i64 2
  %64 = bitcast %"class.quic::QuicInterval"* %63 to i8*
  %65 = bitcast %"class.quic::QuicInterval"* %62 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 16, i1 false) #13
  %66 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %55, i64 3
  %67 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %54, i64 3
  %68 = bitcast %"class.quic::QuicInterval"* %67 to i8*
  %69 = bitcast %"class.quic::QuicInterval"* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 16, i1 false) #13
  %70 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %55, i64 4
  %71 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %54, i64 4
  %72 = icmp eq %"class.quic::QuicInterval"* %70, %26
  br i1 %72, label %73, label %53

73:                                               ; preds = %49, %53, %3
  %74 = getelementptr inbounds i8, i8* %4, i64 3
  %75 = load i8, i8* %74, align 1
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %79, label %77

77:                                               ; preds = %73
  %78 = load i8, i8* %21, align 1
  br label %100

79:                                               ; preds = %73
  %80 = load i8, i8* %5, align 1
  %81 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %1, i64 256, i32 0
  %82 = bitcast i8* %81 to %"class.absl::container_internal::btree_node"**
  %83 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 256, i32 0
  %84 = bitcast i8* %83 to %"class.absl::container_internal::btree_node"**
  %85 = zext i8 %80 to i64
  br label %86

86:                                               ; preds = %86, %79
  %87 = phi i64 [ %96, %86 ], [ 0, %79 ]
  %88 = phi i64 [ %89, %86 ], [ %85, %79 ]
  %89 = add nuw nsw i64 %88, 1
  %90 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %82, i64 %87
  %91 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %90, align 8
  %92 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %84, i64 %89
  store %"class.absl::container_internal::btree_node"* %91, %"class.absl::container_internal::btree_node"** %92, align 8
  %93 = trunc i64 %89 to i8
  %94 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %91, i64 8, i32 0
  store i8 %93, i8* %94, align 1
  %95 = bitcast %"class.absl::container_internal::btree_node"* %91 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %0, %"class.absl::container_internal::btree_node"** %95, align 8
  %96 = add nuw nsw i64 %87, 1
  %97 = load i8, i8* %21, align 1
  %98 = zext i8 %97 to i64
  %99 = icmp ult i64 %87, %98
  br i1 %99, label %86, label %100

100:                                              ; preds = %86, %77
  %101 = phi i8 [ %78, %77 ], [ %97, %86 ]
  %102 = load i8, i8* %5, align 1
  %103 = add i8 %102, 1
  %104 = add i8 %103, %101
  store i8 %104, i8* %5, align 1
  store i8 0, i8* %21, align 1
  %105 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %7, align 8
  %106 = load i8, i8* %4, align 1
  %107 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %105, i64 8, i32 0
  %108 = getelementptr inbounds i8, i8* %107, i64 2
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %106 to i32
  %111 = add nuw nsw i32 %110, 1
  %112 = zext i8 %109 to i32
  %113 = and i32 %111, 255
  %114 = sub nsw i32 %112, %113
  %115 = sext i32 %114 to i64
  %116 = zext i32 %113 to i64
  %117 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %105, i64 16, i32 0
  %118 = bitcast i8* %117 to %"class.quic::QuicInterval"*
  %119 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %118, i64 %116
  %120 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %119, i64 %115
  %121 = icmp eq i32 %114, 0
  br i1 %121, label %169, label %122

122:                                              ; preds = %100
  %123 = zext i8 %106 to i64
  %124 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %118, i64 %123
  %125 = zext i8 %109 to i64
  %126 = shl nuw nsw i64 %125, 4
  %127 = add nsw i64 %126, -16
  %128 = shl nuw nsw i32 %113, 4
  %129 = zext i32 %128 to i64
  %130 = sub nsw i64 %127, %129
  %131 = lshr exact i64 %130, 4
  %132 = add nuw nsw i64 %131, 1
  %133 = and i64 %132, 3
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %145, label %135

135:                                              ; preds = %122, %135
  %136 = phi %"class.quic::QuicInterval"* [ %142, %135 ], [ %124, %122 ]
  %137 = phi %"class.quic::QuicInterval"* [ %141, %135 ], [ %119, %122 ]
  %138 = phi i64 [ %143, %135 ], [ %133, %122 ]
  %139 = bitcast %"class.quic::QuicInterval"* %136 to i8*
  %140 = bitcast %"class.quic::QuicInterval"* %137 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %139, i8* align 8 %140, i64 16, i1 false) #13
  %141 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %137, i64 1
  %142 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %136, i64 1
  %143 = add i64 %138, -1
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %135, !llvm.loop !51

145:                                              ; preds = %135, %122
  %146 = phi %"class.quic::QuicInterval"* [ %124, %122 ], [ %142, %135 ]
  %147 = phi %"class.quic::QuicInterval"* [ %119, %122 ], [ %141, %135 ]
  %148 = icmp ult i64 %130, 48
  br i1 %148, label %169, label %149

149:                                              ; preds = %145, %149
  %150 = phi %"class.quic::QuicInterval"* [ %167, %149 ], [ %146, %145 ]
  %151 = phi %"class.quic::QuicInterval"* [ %166, %149 ], [ %147, %145 ]
  %152 = bitcast %"class.quic::QuicInterval"* %150 to i8*
  %153 = bitcast %"class.quic::QuicInterval"* %151 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %152, i8* align 8 %153, i64 16, i1 false) #13
  %154 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %151, i64 1
  %155 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %150, i64 1
  %156 = bitcast %"class.quic::QuicInterval"* %155 to i8*
  %157 = bitcast %"class.quic::QuicInterval"* %154 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %156, i8* align 8 %157, i64 16, i1 false) #13
  %158 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %151, i64 2
  %159 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %150, i64 2
  %160 = bitcast %"class.quic::QuicInterval"* %159 to i8*
  %161 = bitcast %"class.quic::QuicInterval"* %158 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %160, i8* align 8 %161, i64 16, i1 false) #13
  %162 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %151, i64 3
  %163 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %150, i64 3
  %164 = bitcast %"class.quic::QuicInterval"* %163 to i8*
  %165 = bitcast %"class.quic::QuicInterval"* %162 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %164, i8* align 8 %165, i64 16, i1 false) #13
  %166 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %151, i64 4
  %167 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %150, i64 4
  %168 = icmp eq %"class.quic::QuicInterval"* %166, %120
  br i1 %168, label %169, label %149

169:                                              ; preds = %145, %149, %100
  %170 = getelementptr inbounds i8, i8* %107, i64 3
  %171 = load i8, i8* %170, align 1
  %172 = icmp eq i8 %171, 0
  br i1 %172, label %173, label %231

173:                                              ; preds = %169
  %174 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %105, i64 256, i32 0
  %175 = bitcast i8* %174 to %"class.absl::container_internal::btree_node"**
  %176 = zext i8 %106 to i64
  %177 = add nuw nsw i64 %176, 1
  %178 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %177
  %179 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %178, align 8
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %179, %"class.std::__1::allocator"* %2) #13
  %180 = icmp ult i32 %111, %112
  br i1 %180, label %181, label %231

181:                                              ; preds = %173
  %182 = zext i32 %111 to i64
  %183 = zext i8 %109 to i64
  %184 = add nsw i64 %182, -1
  %185 = sub nsw i64 %183, %182
  %186 = add nsw i64 %183, -2
  %187 = sub nsw i64 %186, %184
  %188 = and i64 %185, 3
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %201, label %190

190:                                              ; preds = %181, %190
  %191 = phi i64 [ %193, %190 ], [ %182, %181 ]
  %192 = phi i64 [ %199, %190 ], [ %188, %181 ]
  %193 = add nuw nsw i64 %191, 1
  %194 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %193
  %195 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %194, align 8
  %196 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %191
  store %"class.absl::container_internal::btree_node"* %195, %"class.absl::container_internal::btree_node"** %196, align 8
  %197 = trunc i64 %191 to i8
  %198 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %195, i64 8, i32 0
  store i8 %197, i8* %198, align 1
  %199 = add i64 %192, -1
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %201, label %190, !llvm.loop !52

201:                                              ; preds = %190, %181
  %202 = phi i64 [ %182, %181 ], [ %193, %190 ]
  %203 = icmp ult i64 %187, 3
  br i1 %203, label %231, label %204

204:                                              ; preds = %201, %204
  %205 = phi i64 [ %224, %204 ], [ %202, %201 ]
  %206 = add nuw nsw i64 %205, 1
  %207 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %206
  %208 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %207, align 8
  %209 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %205
  store %"class.absl::container_internal::btree_node"* %208, %"class.absl::container_internal::btree_node"** %209, align 8
  %210 = trunc i64 %205 to i8
  %211 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %208, i64 8, i32 0
  store i8 %210, i8* %211, align 1
  %212 = add nuw nsw i64 %205, 2
  %213 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %212
  %214 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %213, align 8
  %215 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %206
  store %"class.absl::container_internal::btree_node"* %214, %"class.absl::container_internal::btree_node"** %215, align 8
  %216 = trunc i64 %206 to i8
  %217 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %214, i64 8, i32 0
  store i8 %216, i8* %217, align 1
  %218 = add nuw nsw i64 %205, 3
  %219 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %218
  %220 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %219, align 8
  %221 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %212
  store %"class.absl::container_internal::btree_node"* %220, %"class.absl::container_internal::btree_node"** %221, align 8
  %222 = trunc i64 %212 to i8
  %223 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %220, i64 8, i32 0
  store i8 %222, i8* %223, align 1
  %224 = add nuw nsw i64 %205, 4
  %225 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %224
  %226 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %225, align 8
  %227 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %175, i64 %218
  store %"class.absl::container_internal::btree_node"* %226, %"class.absl::container_internal::btree_node"** %227, align 8
  %228 = trunc i64 %218 to i8
  %229 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %226, i64 8, i32 0
  store i8 %228, i8* %229, align 1
  %230 = icmp eq i64 %224, %183
  br i1 %230, label %231, label %204

231:                                              ; preds = %201, %204, %169, %173
  %232 = add i8 %109, -1
  store i8 %232, i8* %108, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE13insert_uniqueIS5_JRKS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEERKT_DpOT0_(%"struct.std::__1::pair"* noalias sret, %"class.absl::container_internal::btree"*, %"class.quic::QuicInterval"* dereferenceable(16), %"class.quic::QuicInterval"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %18

8:                                                ; preds = %4
  %9 = tail call i8* @_Znwm(i64 32) #12
  %10 = bitcast i8* %9 to i8**
  store i8* %9, i8** %10, align 8
  %11 = getelementptr inbounds i8, i8* %9, i64 8
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds i8, i8* %9, i64 9
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds i8, i8* %9, i64 10
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds i8, i8* %9, i64 11
  store i8 1, i8* %14, align 1
  %15 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 1
  %16 = bitcast %"class.absl::container_internal::btree_node"** %15 to i8**
  store i8* %9, i8** %16, align 8
  %17 = bitcast %"class.absl::container_internal::btree"* %1 to i8**
  store i8* %9, i8** %17, align 8
  br label %18

18:                                               ; preds = %8, %4
  %19 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %2, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  br label %22

22:                                               ; preds = %54, %18
  %23 = phi %"class.absl::container_internal::btree_node"** [ %19, %18 ], [ %58, %54 ]
  %24 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %23, align 8
  %25 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %24, i64 8, i32 0
  %26 = getelementptr inbounds i8, i8* %25, i64 2
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %46, label %29

29:                                               ; preds = %22
  %30 = zext i8 %27 to i32
  %31 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %24, i64 16, i32 0
  %32 = bitcast i8* %31 to %"class.quic::QuicInterval"*
  br label %33

33:                                               ; preds = %33, %29
  %34 = phi i32 [ 0, %29 ], [ %44, %33 ]
  %35 = phi i32 [ %30, %29 ], [ %43, %33 ]
  %36 = add nsw i32 %35, %34
  %37 = ashr i32 %36, 1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %32, i64 %38, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = icmp ult i64 %40, %21
  %42 = add nsw i32 %37, 1
  %43 = select i1 %41, i32 %35, i32 %37
  %44 = select i1 %41, i32 %42, i32 %34
  %45 = icmp eq i32 %44, %43
  br i1 %45, label %46, label %33

46:                                               ; preds = %33, %22
  %47 = phi i32 [ 0, %22 ], [ %43, %33 ]
  %48 = getelementptr inbounds i8, i8* %25, i64 3
  %49 = load i8, i8* %48, align 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %54, label %51

51:                                               ; preds = %46
  %52 = zext i8 %27 to i32
  %53 = icmp eq i32 %47, %52
  br i1 %53, label %59, label %75

54:                                               ; preds = %46
  %55 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %24, i64 256, i32 0
  %56 = bitcast i8* %55 to %"class.absl::container_internal::btree_node"**
  %57 = sext i32 %47 to i64
  %58 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %56, i64 %57
  br label %22

59:                                               ; preds = %51, %67
  %60 = phi %"class.absl::container_internal::btree_node"* [ %62, %67 ], [ %24, %51 ]
  %61 = bitcast %"class.absl::container_internal::btree_node"* %60 to %"class.absl::container_internal::btree_node"**
  %62 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %61, align 8
  %63 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %62, i64 8, i32 0
  %64 = getelementptr inbounds i8, i8* %63, i64 3
  %65 = load i8, i8* %64, align 1
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %67, label %92

67:                                               ; preds = %59
  %68 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %60, i64 8, i32 0
  %69 = load i8, i8* %68, align 1
  %70 = getelementptr inbounds i8, i8* %63, i64 2
  %71 = load i8, i8* %70, align 1
  %72 = icmp eq i8 %69, %71
  br i1 %72, label %59, label %73

73:                                               ; preds = %67
  %74 = zext i8 %69 to i32
  br label %75

75:                                               ; preds = %73, %51
  %76 = phi i32 [ %74, %73 ], [ %47, %51 ]
  %77 = phi %"class.absl::container_internal::btree_node"* [ %62, %73 ], [ %24, %51 ]
  %78 = icmp eq %"class.absl::container_internal::btree_node"* %77, null
  br i1 %78, label %92, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %77, i64 16, i32 0
  %81 = bitcast i8* %80 to %"class.quic::QuicInterval"*
  %82 = sext i32 %76 to i64
  %83 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %81, i64 %82, i32 0
  %84 = load i64, i64* %83, align 8
  %85 = icmp ult i64 %21, %84
  br i1 %85, label %92, label %86

86:                                               ; preds = %79
  %87 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 0
  store %"class.absl::container_internal::btree_node"* %77, %"class.absl::container_internal::btree_node"** %87, align 8
  %88 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 1
  store i32 %76, i32* %88, align 8
  %89 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 2, i64 0
  %90 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  %91 = bitcast i8* %89 to i32*
  store i32 -1431655766, i32* %91, align 4
  store i8 0, i8* %90, align 8
  br label %99

92:                                               ; preds = %59, %79, %75
  %93 = tail call { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16internal_emplaceIJRKS5_EEENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESM_DpOT_(%"class.absl::container_internal::btree"* %1, %"class.absl::container_internal::btree_node"* %24, i32 %47, %"class.quic::QuicInterval"* dereferenceable(16) %3)
  %94 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %93, 0
  %95 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %93, 1
  %96 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 0
  store %"class.absl::container_internal::btree_node"* %94, %"class.absl::container_internal::btree_node"** %96, align 8
  %97 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 1
  store i32 %95, i32* %97, align 8
  %98 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  store i8 1, i8* %98, align 8
  br label %99

99:                                               ; preds = %86, %92
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16internal_emplaceIJRKS5_EEENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESM_DpOT_(%"class.absl::container_internal::btree"*, %"class.absl::container_internal::btree_node"*, i32, %"class.quic::QuicInterval"* dereferenceable(16)) local_unnamed_addr #8 comdat align 2 {
  %5 = alloca { %"class.absl::container_internal::btree_node"*, i32 }, align 8
  %6 = bitcast { %"class.absl::container_internal::btree_node"*, i32 }* %5 to %"struct.absl::container_internal::btree_iterator.11"*
  %7 = getelementptr inbounds { %"class.absl::container_internal::btree_node"*, i32 }, { %"class.absl::container_internal::btree_node"*, i32 }* %5, i64 0, i32 0
  store %"class.absl::container_internal::btree_node"* %1, %"class.absl::container_internal::btree_node"** %7, align 8
  %8 = getelementptr inbounds { %"class.absl::container_internal::btree_node"*, i32 }, { %"class.absl::container_internal::btree_node"*, i32 }* %5, i64 0, i32 1
  store i32 %2, i32* %8, align 8
  %9 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %1, i64 8, i32 0
  %10 = getelementptr inbounds i8, i8* %9, i64 3
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %46

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %1, i64 256, i32 0
  %15 = bitcast i8* %14 to %"class.absl::container_internal::btree_node"**
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %15, i64 %16
  %18 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %17, align 8
  store %"class.absl::container_internal::btree_node"* %18, %"class.absl::container_internal::btree_node"** %7, align 8
  %19 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %18, i64 8, i32 0
  %20 = getelementptr inbounds i8, i8* %19, i64 3
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, 0
  %23 = getelementptr inbounds i8, i8* %19, i64 2
  %24 = load i8, i8* %23, align 1
  br i1 %22, label %25, label %39

25:                                               ; preds = %13, %25
  %26 = phi i8 [ %38, %25 ], [ %24, %13 ]
  %27 = phi %"class.absl::container_internal::btree_node"* [ %32, %25 ], [ %18, %13 ]
  %28 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %27, i64 256, i32 0
  %29 = bitcast i8* %28 to %"class.absl::container_internal::btree_node"**
  %30 = zext i8 %26 to i64
  %31 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %29, i64 %30
  %32 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %31, align 8
  store %"class.absl::container_internal::btree_node"* %32, %"class.absl::container_internal::btree_node"** %7, align 8
  %33 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %32, i64 8, i32 0
  %34 = getelementptr inbounds i8, i8* %33, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 0
  %37 = getelementptr inbounds i8, i8* %33, i64 2
  %38 = load i8, i8* %37, align 1
  br i1 %36, label %25, label %39

39:                                               ; preds = %25, %13
  %40 = phi %"class.absl::container_internal::btree_node"* [ %18, %13 ], [ %32, %25 ]
  %41 = phi i8 [ %24, %13 ], [ %38, %25 ]
  %42 = zext i8 %41 to i32
  store i32 %42, i32* %8, align 8
  %43 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %40, i64 8, i32 0
  %44 = getelementptr inbounds i8, i8* %43, i64 3
  %45 = load i8, i8* %44, align 1
  br label %46

46:                                               ; preds = %4, %39
  %47 = phi i8 [ %11, %4 ], [ %45, %39 ]
  %48 = phi %"class.absl::container_internal::btree_node"* [ %1, %4 ], [ %40, %39 ]
  %49 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %48, i64 8, i32 0
  %50 = icmp eq i8 %47, 0
  %51 = select i1 %50, i8 15, i8 %47
  %52 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  %53 = getelementptr inbounds i8, i8* %49, i64 2
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %51 to i32
  %56 = icmp eq i8 %54, %51
  br i1 %56, label %57, label %138

57:                                               ; preds = %46
  %58 = icmp ult i8 %51, 15
  br i1 %58, label %59, label %136

59:                                               ; preds = %57
  %60 = shl nuw nsw i32 %55, 1
  %61 = icmp ult i32 %60, 15
  %62 = select i1 %61, i32 %60, i32 15
  %63 = shl nuw nsw i32 %62, 4
  %64 = add nuw nsw i32 %63, 23
  %65 = and i32 %64, 496
  %66 = zext i32 %65 to i64
  %67 = tail call i8* @_Znwm(i64 %66) #12
  %68 = bitcast i8* %67 to i8**
  store i8* %67, i8** %68, align 8
  %69 = getelementptr inbounds i8, i8* %67, i64 8
  store i8 0, i8* %69, align 1
  %70 = getelementptr inbounds i8, i8* %67, i64 9
  store i8 0, i8* %70, align 1
  %71 = getelementptr inbounds i8, i8* %67, i64 10
  store i8 0, i8* %71, align 1
  %72 = trunc i32 %62 to i8
  %73 = getelementptr inbounds i8, i8* %67, i64 11
  store i8 %72, i8* %73, align 1
  %74 = bitcast { %"class.absl::container_internal::btree_node"*, i32 }* %5 to i8**
  store i8* %67, i8** %74, align 8
  %75 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %76 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %75, align 8
  %77 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %76, i64 8, i32 0
  %78 = getelementptr inbounds i8, i8* %77, i64 2
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i64
  %81 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %76, i64 16, i32 0
  %82 = bitcast i8* %81 to %"class.quic::QuicInterval"*
  %83 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %82, i64 %80
  %84 = icmp eq i8 %79, 0
  %85 = bitcast i8* %67 to %"class.absl::container_internal::btree_node"*
  br i1 %84, label %131, label %86

86:                                               ; preds = %59
  %87 = getelementptr inbounds i8, i8* %67, i64 16
  %88 = bitcast i8* %87 to %"class.quic::QuicInterval"*
  %89 = shl nuw nsw i64 %80, 4
  %90 = add nsw i64 %89, -16
  %91 = lshr exact i64 %90, 4
  %92 = add nuw nsw i64 %91, 1
  %93 = and i64 %92, 3
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %86, %95
  %96 = phi %"class.quic::QuicInterval"* [ %102, %95 ], [ %88, %86 ]
  %97 = phi %"class.quic::QuicInterval"* [ %101, %95 ], [ %82, %86 ]
  %98 = phi i64 [ %103, %95 ], [ %93, %86 ]
  %99 = bitcast %"class.quic::QuicInterval"* %96 to i8*
  %100 = bitcast %"class.quic::QuicInterval"* %97 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %100, i64 16, i1 false) #13
  %101 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %97, i64 1
  %102 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %96, i64 1
  %103 = add i64 %98, -1
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %95, !llvm.loop !53

105:                                              ; preds = %95, %86
  %106 = phi %"class.quic::QuicInterval"* [ %88, %86 ], [ %102, %95 ]
  %107 = phi %"class.quic::QuicInterval"* [ %82, %86 ], [ %101, %95 ]
  %108 = icmp ult i64 %90, 48
  br i1 %108, label %129, label %109

109:                                              ; preds = %105, %109
  %110 = phi %"class.quic::QuicInterval"* [ %127, %109 ], [ %106, %105 ]
  %111 = phi %"class.quic::QuicInterval"* [ %126, %109 ], [ %107, %105 ]
  %112 = bitcast %"class.quic::QuicInterval"* %110 to i8*
  %113 = bitcast %"class.quic::QuicInterval"* %111 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %112, i8* align 8 %113, i64 16, i1 false) #13
  %114 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 1
  %115 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %110, i64 1
  %116 = bitcast %"class.quic::QuicInterval"* %115 to i8*
  %117 = bitcast %"class.quic::QuicInterval"* %114 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %116, i8* align 8 %117, i64 16, i1 false) #13
  %118 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 2
  %119 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %110, i64 2
  %120 = bitcast %"class.quic::QuicInterval"* %119 to i8*
  %121 = bitcast %"class.quic::QuicInterval"* %118 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %120, i8* align 8 %121, i64 16, i1 false) #13
  %122 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 3
  %123 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %110, i64 3
  %124 = bitcast %"class.quic::QuicInterval"* %123 to i8*
  %125 = bitcast %"class.quic::QuicInterval"* %122 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %124, i8* align 8 %125, i64 16, i1 false) #13
  %126 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 4
  %127 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %110, i64 4
  %128 = icmp eq %"class.quic::QuicInterval"* %126, %83
  br i1 %128, label %129, label %109

129:                                              ; preds = %109, %105
  %130 = load i8, i8* %78, align 1
  br label %131

131:                                              ; preds = %129, %59
  %132 = phi i8 [ %130, %129 ], [ 0, %59 ]
  store i8 %132, i8* %71, align 1
  store i8 0, i8* %78, align 1
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %76, %"class.std::__1::allocator"* %52)
  %133 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 1
  %134 = bitcast %"class.absl::container_internal::btree_node"** %133 to i8**
  store i8* %67, i8** %134, align 8
  %135 = bitcast %"class.absl::container_internal::btree"* %0 to i8**
  store i8* %67, i8** %135, align 8
  br label %138

136:                                              ; preds = %57
  call void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18rebalance_or_splitEPNS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"* %0, %"struct.absl::container_internal::btree_iterator.11"* nonnull %6)
  %137 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %7, align 8
  br label %138

138:                                              ; preds = %131, %136, %46
  %139 = phi %"class.absl::container_internal::btree_node"* [ %85, %131 ], [ %137, %136 ], [ %48, %46 ]
  %140 = load i32, i32* %8, align 8
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %139, i64 8, i32 0
  %143 = getelementptr inbounds i8, i8* %142, i64 2
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i64
  %146 = icmp sgt i64 %145, %141
  br i1 %146, label %147, label %204

147:                                              ; preds = %138
  %148 = sub nsw i64 %145, %141
  %149 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %139, i64 16, i32 0
  %150 = bitcast i8* %149 to %"class.quic::QuicInterval"*
  %151 = shl nuw nsw i64 %145, 32
  %152 = add nsw i64 %151, -4294967296
  %153 = ashr exact i64 %152, 32
  %154 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %150, i64 %153
  %155 = sub nsw i64 0, %148
  %156 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %154, i64 %155
  %157 = icmp eq i64 %148, 0
  br i1 %157, label %204, label %158

158:                                              ; preds = %147
  %159 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %150, i64 %145
  %160 = shl nuw nsw i64 %145, 4
  %161 = add nsw i64 %160, -16
  %162 = shl nsw i64 %141, 4
  %163 = sub nsw i64 %161, %162
  %164 = lshr exact i64 %163, 4
  %165 = add nuw nsw i64 %164, 1
  %166 = and i64 %165, 3
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %178, label %168

168:                                              ; preds = %158, %168
  %169 = phi %"class.quic::QuicInterval"* [ %175, %168 ], [ %159, %158 ]
  %170 = phi %"class.quic::QuicInterval"* [ %174, %168 ], [ %154, %158 ]
  %171 = phi i64 [ %176, %168 ], [ %166, %158 ]
  %172 = bitcast %"class.quic::QuicInterval"* %169 to i8*
  %173 = bitcast %"class.quic::QuicInterval"* %170 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %172, i8* align 8 %173, i64 16, i1 false) #13
  %174 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %170, i64 -1
  %175 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %169, i64 -1
  %176 = add i64 %171, -1
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %168, !llvm.loop !54

178:                                              ; preds = %168, %158
  %179 = phi %"class.quic::QuicInterval"* [ %159, %158 ], [ %175, %168 ]
  %180 = phi %"class.quic::QuicInterval"* [ %154, %158 ], [ %174, %168 ]
  %181 = icmp ult i64 %163, 48
  br i1 %181, label %202, label %182

182:                                              ; preds = %178, %182
  %183 = phi %"class.quic::QuicInterval"* [ %200, %182 ], [ %179, %178 ]
  %184 = phi %"class.quic::QuicInterval"* [ %199, %182 ], [ %180, %178 ]
  %185 = bitcast %"class.quic::QuicInterval"* %183 to i8*
  %186 = bitcast %"class.quic::QuicInterval"* %184 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %185, i8* align 8 %186, i64 16, i1 false) #13
  %187 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %184, i64 -1
  %188 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %183, i64 -1
  %189 = bitcast %"class.quic::QuicInterval"* %188 to i8*
  %190 = bitcast %"class.quic::QuicInterval"* %187 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %189, i8* align 8 %190, i64 16, i1 false) #13
  %191 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %184, i64 -2
  %192 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %183, i64 -2
  %193 = bitcast %"class.quic::QuicInterval"* %192 to i8*
  %194 = bitcast %"class.quic::QuicInterval"* %191 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %193, i8* align 8 %194, i64 16, i1 false) #13
  %195 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %184, i64 -3
  %196 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %183, i64 -3
  %197 = bitcast %"class.quic::QuicInterval"* %196 to i8*
  %198 = bitcast %"class.quic::QuicInterval"* %195 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %197, i8* align 8 %198, i64 16, i1 false) #13
  %199 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %184, i64 -4
  %200 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %183, i64 -4
  %201 = icmp eq %"class.quic::QuicInterval"* %199, %156
  br i1 %201, label %202, label %182

202:                                              ; preds = %182, %178
  %203 = load i8, i8* %143, align 1
  br label %204

204:                                              ; preds = %138, %202, %147
  %205 = phi i8 [ %203, %202 ], [ %144, %147 ], [ %144, %138 ]
  %206 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %139, i64 16, i32 0
  %207 = bitcast i8* %206 to %"class.quic::QuicInterval"*
  %208 = and i64 %141, 255
  %209 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %207, i64 %208
  %210 = bitcast %"class.quic::QuicInterval"* %209 to i8*
  %211 = bitcast %"class.quic::QuicInterval"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %210, i8* align 8 %211, i64 16, i1 false) #13
  %212 = add i8 %205, 1
  store i8 %212, i8* %143, align 1
  %213 = getelementptr inbounds i8, i8* %142, i64 3
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 0
  br i1 %215, label %216, label %270

216:                                              ; preds = %204
  %217 = zext i8 %212 to i64
  %218 = add nsw i64 %141, 1
  %219 = icmp slt i64 %218, %217
  br i1 %219, label %220, label %270

220:                                              ; preds = %216
  %221 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %139, i64 256, i32 0
  %222 = bitcast i8* %221 to %"class.absl::container_internal::btree_node"**
  %223 = xor i64 %141, 3
  %224 = add nsw i64 %223, %217
  %225 = add nsw i64 %217, -2
  %226 = sub nsw i64 %225, %141
  %227 = and i64 %224, 3
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %240, label %229

229:                                              ; preds = %220, %229
  %230 = phi i64 [ %232, %229 ], [ %217, %220 ]
  %231 = phi i64 [ %238, %229 ], [ %227, %220 ]
  %232 = add nsw i64 %230, -1
  %233 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %232
  %234 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %233, align 8
  %235 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %230
  store %"class.absl::container_internal::btree_node"* %234, %"class.absl::container_internal::btree_node"** %235, align 8
  %236 = trunc i64 %230 to i8
  %237 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %234, i64 8, i32 0
  store i8 %236, i8* %237, align 1
  %238 = add i64 %231, -1
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %240, label %229, !llvm.loop !55

240:                                              ; preds = %229, %220
  %241 = phi i64 [ %217, %220 ], [ %232, %229 ]
  %242 = icmp ult i64 %226, 3
  br i1 %242, label %270, label %243

243:                                              ; preds = %240, %243
  %244 = phi i64 [ %263, %243 ], [ %241, %240 ]
  %245 = add nsw i64 %244, -1
  %246 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %245
  %247 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %246, align 8
  %248 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %244
  store %"class.absl::container_internal::btree_node"* %247, %"class.absl::container_internal::btree_node"** %248, align 8
  %249 = trunc i64 %244 to i8
  %250 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %247, i64 8, i32 0
  store i8 %249, i8* %250, align 1
  %251 = add nsw i64 %244, -2
  %252 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %251
  %253 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %252, align 8
  %254 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %245
  store %"class.absl::container_internal::btree_node"* %253, %"class.absl::container_internal::btree_node"** %254, align 8
  %255 = trunc i64 %245 to i8
  %256 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %253, i64 8, i32 0
  store i8 %255, i8* %256, align 1
  %257 = add nsw i64 %244, -3
  %258 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %257
  %259 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %258, align 8
  %260 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %251
  store %"class.absl::container_internal::btree_node"* %259, %"class.absl::container_internal::btree_node"** %260, align 8
  %261 = trunc i64 %251 to i8
  %262 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %259, i64 8, i32 0
  store i8 %261, i8* %262, align 1
  %263 = add nsw i64 %244, -4
  %264 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %263
  %265 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %264, align 8
  %266 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %257
  store %"class.absl::container_internal::btree_node"* %265, %"class.absl::container_internal::btree_node"** %266, align 8
  %267 = trunc i64 %257 to i8
  %268 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %265, i64 8, i32 0
  store i8 %267, i8* %268, align 1
  %269 = icmp slt i64 %218, %263
  br i1 %269, label %243, label %270

270:                                              ; preds = %240, %243, %204, %216
  %271 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 2
  %272 = load i64, i64* %271, align 8
  %273 = add nsw i64 %272, 1
  store i64 %273, i64* %271, align 8
  %274 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %7, align 8
  %275 = load i32, i32* %8, align 8
  %276 = insertvalue { %"class.absl::container_internal::btree_node"*, i32 } undef, %"class.absl::container_internal::btree_node"* %274, 0
  %277 = insertvalue { %"class.absl::container_internal::btree_node"*, i32 } %276, i32 %275, 1
  ret { %"class.absl::container_internal::btree_node"*, i32 } %277
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18rebalance_or_splitEPNS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"*, %"struct.absl::container_internal::btree_iterator.11"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"struct.absl::container_internal::btree_iterator.11", align 8
  %4 = getelementptr inbounds %"struct.absl::container_internal::btree_iterator.11", %"struct.absl::container_internal::btree_iterator.11"* %1, i64 0, i32 0
  %5 = getelementptr inbounds %"struct.absl::container_internal::btree_iterator.11", %"struct.absl::container_internal::btree_iterator.11"* %1, i64 0, i32 1
  %6 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %4, align 8
  %7 = bitcast %"class.absl::container_internal::btree_node"* %6 to %"class.absl::container_internal::btree_node"**
  %8 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %7, align 8
  %9 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %9, align 8
  %11 = icmp eq %"class.absl::container_internal::btree_node"* %6, %10
  br i1 %11, label %106, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %6, i64 8, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %50, label %16

16:                                               ; preds = %12
  %17 = zext i8 %14 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %8, i64 256, i32 0
  %20 = bitcast i8* %19 to %"class.absl::container_internal::btree_node"**
  %21 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %20, i64 %18
  %22 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %21, align 8
  %23 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %22, i64 8, i32 0
  %24 = getelementptr inbounds i8, i8* %23, i64 2
  %25 = load i8, i8* %24, align 1
  %26 = icmp ult i8 %25, 15
  br i1 %26, label %27, label %50

27:                                               ; preds = %16
  %28 = zext i8 %25 to i32
  %29 = sub nuw nsw i32 15, %28
  %30 = load i32, i32* %5, align 4
  %31 = icmp slt i32 %30, 15
  %32 = zext i1 %31 to i32
  %33 = lshr i32 %29, %32
  %34 = icmp sgt i32 %33, 1
  %35 = select i1 %34, i32 %33, i32 1
  %36 = icmp sge i32 %30, %35
  %37 = add nuw nsw i32 %35, %28
  %38 = icmp ult i32 %37, 15
  %39 = or i1 %36, %38
  br i1 %39, label %40, label %50

40:                                               ; preds = %27
  %41 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE23rebalance_right_to_leftEiPSD_PSB_(%"class.absl::container_internal::btree_node"* %22, i32 %35, %"class.absl::container_internal::btree_node"* %6, %"class.std::__1::allocator"* %41)
  %42 = load i32, i32* %5, align 4
  %43 = sub nsw i32 %42, %35
  store i32 %43, i32* %5, align 4
  %44 = icmp slt i32 %43, 0
  br i1 %44, label %45, label %160

45:                                               ; preds = %40
  %46 = load i8, i8* %24, align 1
  %47 = zext i8 %46 to i32
  %48 = add nsw i32 %43, 1
  %49 = add nsw i32 %48, %47
  store i32 %49, i32* %5, align 4
  store %"class.absl::container_internal::btree_node"* %22, %"class.absl::container_internal::btree_node"** %4, align 8
  br label %160

50:                                               ; preds = %12, %27, %16
  %51 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %8, i64 8, i32 0
  %52 = getelementptr inbounds i8, i8* %51, i64 2
  %53 = load i8, i8* %52, align 1
  %54 = icmp ult i8 %14, %53
  br i1 %54, label %55, label %95

55:                                               ; preds = %50
  %56 = zext i8 %14 to i64
  %57 = add nuw nsw i64 %56, 1
  %58 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %8, i64 256, i32 0
  %59 = bitcast i8* %58 to %"class.absl::container_internal::btree_node"**
  %60 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %59, i64 %57
  %61 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %60, align 8
  %62 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %61, i64 8, i32 0
  %63 = getelementptr inbounds i8, i8* %62, i64 2
  %64 = load i8, i8* %63, align 1
  %65 = icmp ult i8 %64, 15
  br i1 %65, label %66, label %95

66:                                               ; preds = %55
  %67 = zext i8 %64 to i32
  %68 = sub nuw nsw i32 15, %67
  %69 = load i32, i32* %5, align 4
  %70 = icmp sgt i32 %69, 0
  %71 = select i1 %70, i32 2, i32 1
  %72 = sdiv i32 %68, %71
  %73 = icmp sgt i32 %72, 1
  %74 = select i1 %73, i32 %72, i32 1
  %75 = getelementptr inbounds i8, i8* %13, i64 2
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = sub nsw i32 %77, %74
  %79 = icmp sle i32 %69, %78
  %80 = add nuw nsw i32 %74, %67
  %81 = icmp ult i32 %80, 15
  %82 = or i1 %79, %81
  br i1 %82, label %83, label %95

83:                                               ; preds = %66
  %84 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE23rebalance_left_to_rightEiPSD_PSB_(%"class.absl::container_internal::btree_node"* %6, i32 %74, %"class.absl::container_internal::btree_node"* %61, %"class.std::__1::allocator"* %84)
  %85 = load i32, i32* %5, align 4
  %86 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %4, align 8
  %87 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %86, i64 8, i32 0
  %88 = getelementptr inbounds i8, i8* %87, i64 2
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = icmp sgt i32 %85, %90
  br i1 %91, label %92, label %160

92:                                               ; preds = %83
  %93 = xor i32 %90, -1
  %94 = add i32 %85, %93
  store i32 %94, i32* %5, align 4
  store %"class.absl::container_internal::btree_node"* %61, %"class.absl::container_internal::btree_node"** %4, align 8
  br label %160

95:                                               ; preds = %55, %66, %50
  %96 = icmp eq i8 %53, 15
  br i1 %96, label %97, label %117

97:                                               ; preds = %95
  %98 = bitcast %"struct.absl::container_internal::btree_iterator.11"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %98) #13
  %99 = getelementptr inbounds %"struct.absl::container_internal::btree_iterator.11", %"struct.absl::container_internal::btree_iterator.11"* %3, i64 0, i32 1
  %100 = bitcast %"class.absl::container_internal::btree_node"* %6 to i64*
  %101 = bitcast %"struct.absl::container_internal::btree_iterator.11"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %101, i8 -86, i64 16, i1 false)
  %102 = load i64, i64* %100, align 8
  %103 = load i8, i8* %13, align 1
  %104 = zext i8 %103 to i32
  %105 = bitcast %"struct.absl::container_internal::btree_iterator.11"* %3 to i64*
  store i64 %102, i64* %105, align 8
  store i32 %104, i32* %99, align 8
  call void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18rebalance_or_splitEPNS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"* %0, %"struct.absl::container_internal::btree_iterator.11"* nonnull %3)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %98) #13
  br label %117

106:                                              ; preds = %2
  %107 = tail call i8* @_Znwm(i64 384) #12
  %108 = bitcast i8* %107 to %"class.absl::container_internal::btree_node"*
  %109 = bitcast i8* %107 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %8, %"class.absl::container_internal::btree_node"** %109, align 8
  %110 = getelementptr inbounds i8, i8* %107, i64 8
  %111 = bitcast i8* %110 to i32*
  store i32 0, i32* %111, align 1
  %112 = getelementptr inbounds i8, i8* %107, i64 256
  %113 = bitcast i8* %112 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %6, %"class.absl::container_internal::btree_node"** %113, align 8
  %114 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %6, i64 8, i32 0
  store i8 0, i8* %114, align 1
  %115 = bitcast %"class.absl::container_internal::btree_node"* %6 to i8**
  store i8* %107, i8** %115, align 8
  %116 = bitcast %"class.absl::container_internal::btree"* %0 to i8**
  store i8* %107, i8** %116, align 8
  br label %117

117:                                              ; preds = %95, %97, %106
  %118 = phi %"class.absl::container_internal::btree_node"* [ %8, %97 ], [ %8, %95 ], [ %108, %106 ]
  %119 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %4, align 8
  %120 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %119, i64 8, i32 0
  %121 = getelementptr inbounds i8, i8* %120, i64 3
  %122 = load i8, i8* %121, align 1
  %123 = icmp eq i8 %122, 0
  br i1 %123, label %140, label %124

124:                                              ; preds = %117
  %125 = call i8* @_Znwm(i64 256) #12
  %126 = bitcast i8* %125 to %"class.absl::container_internal::btree_node"*
  %127 = bitcast i8* %125 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %118, %"class.absl::container_internal::btree_node"** %127, align 8
  %128 = getelementptr inbounds i8, i8* %125, i64 8
  store i8 0, i8* %128, align 1
  %129 = getelementptr inbounds i8, i8* %125, i64 9
  store i8 0, i8* %129, align 1
  %130 = getelementptr inbounds i8, i8* %125, i64 10
  store i8 0, i8* %130, align 1
  %131 = getelementptr inbounds i8, i8* %125, i64 11
  store i8 15, i8* %131, align 1
  %132 = load i32, i32* %5, align 4
  %133 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5splitEiPSD_PSB_(%"class.absl::container_internal::btree_node"* %119, i32 %132, %"class.absl::container_internal::btree_node"* nonnull %126, %"class.std::__1::allocator"* %133)
  %134 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 1
  %135 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %134, align 8
  %136 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %4, align 8
  %137 = icmp eq %"class.absl::container_internal::btree_node"* %135, %136
  br i1 %137, label %138, label %148

138:                                              ; preds = %124
  %139 = bitcast %"class.absl::container_internal::btree_node"** %134 to i8**
  store i8* %125, i8** %139, align 8
  br label %148

140:                                              ; preds = %117
  %141 = call i8* @_Znwm(i64 384) #12
  %142 = bitcast i8* %141 to %"class.absl::container_internal::btree_node"*
  %143 = bitcast i8* %141 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %118, %"class.absl::container_internal::btree_node"** %143, align 8
  %144 = getelementptr inbounds i8, i8* %141, i64 8
  %145 = bitcast i8* %144 to i32*
  store i32 0, i32* %145, align 1
  %146 = load i32, i32* %5, align 4
  %147 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5splitEiPSD_PSB_(%"class.absl::container_internal::btree_node"* %119, i32 %146, %"class.absl::container_internal::btree_node"* nonnull %142, %"class.std::__1::allocator"* %147)
  br label %148

148:                                              ; preds = %124, %138, %140
  %149 = phi %"class.absl::container_internal::btree_node"* [ %126, %138 ], [ %126, %124 ], [ %142, %140 ]
  %150 = load i32, i32* %5, align 4
  %151 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %4, align 8
  %152 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %151, i64 8, i32 0
  %153 = getelementptr inbounds i8, i8* %152, i64 2
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i32
  %156 = icmp sgt i32 %150, %155
  br i1 %156, label %157, label %160

157:                                              ; preds = %148
  %158 = xor i32 %155, -1
  %159 = add i32 %150, %158
  store i32 %159, i32* %5, align 4
  store %"class.absl::container_internal::btree_node"* %149, %"class.absl::container_internal::btree_node"** %4, align 8
  br label %160

160:                                              ; preds = %83, %92, %40, %45, %148, %157
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE5splitEiPSD_PSB_(%"class.absl::container_internal::btree_node"*, i32, %"class.absl::container_internal::btree_node"*, %"class.std::__1::allocator"*) local_unnamed_addr #0 comdat align 2 {
  switch i32 %1, label %10 [
    i32 0, label %5
    i32 15, label %15
  ]

5:                                                ; preds = %4
  %6 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 8, i32 0
  %7 = getelementptr inbounds i8, i8* %6, i64 2
  %8 = load i8, i8* %7, align 1
  %9 = add i8 %8, -1
  br label %15

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 8, i32 0
  %12 = getelementptr inbounds i8, i8* %11, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = lshr i8 %13, 1
  br label %15

15:                                               ; preds = %4, %10, %5
  %16 = phi i8 [ %14, %10 ], [ %9, %5 ], [ 0, %4 ]
  %17 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 8, i32 0
  %18 = getelementptr inbounds i8, i8* %17, i64 2
  store i8 %16, i8* %18, align 1
  %19 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 8, i32 0
  %20 = getelementptr inbounds i8, i8* %19, i64 2
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 8, i32 0
  %23 = getelementptr inbounds i8, i8* %22, i64 2
  %24 = sub i8 %21, %16
  store i8 %24, i8* %20, align 1
  %25 = load i8, i8* %23, align 1
  %26 = zext i8 %25 to i64
  %27 = zext i8 %24 to i64
  %28 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 16, i32 0
  %29 = bitcast i8* %28 to %"class.quic::QuicInterval"*
  %30 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %29, i64 %27
  %31 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %30, i64 %26
  %32 = icmp eq i8 %25, 0
  br i1 %32, label %78, label %33

33:                                               ; preds = %15
  %34 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 16, i32 0
  %35 = bitcast i8* %34 to %"class.quic::QuicInterval"*
  %36 = shl nuw nsw i64 %26, 4
  %37 = add nsw i64 %36, -16
  %38 = lshr exact i64 %37, 4
  %39 = add nuw nsw i64 %38, 1
  %40 = and i64 %39, 3
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %52, label %42

42:                                               ; preds = %33, %42
  %43 = phi %"class.quic::QuicInterval"* [ %49, %42 ], [ %35, %33 ]
  %44 = phi %"class.quic::QuicInterval"* [ %48, %42 ], [ %30, %33 ]
  %45 = phi i64 [ %50, %42 ], [ %40, %33 ]
  %46 = bitcast %"class.quic::QuicInterval"* %43 to i8*
  %47 = bitcast %"class.quic::QuicInterval"* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 16, i1 false) #13
  %48 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %44, i64 1
  %49 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %43, i64 1
  %50 = add i64 %45, -1
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %42, !llvm.loop !56

52:                                               ; preds = %42, %33
  %53 = phi %"class.quic::QuicInterval"* [ %35, %33 ], [ %49, %42 ]
  %54 = phi %"class.quic::QuicInterval"* [ %30, %33 ], [ %48, %42 ]
  %55 = icmp ult i64 %37, 48
  br i1 %55, label %76, label %56

56:                                               ; preds = %52, %56
  %57 = phi %"class.quic::QuicInterval"* [ %74, %56 ], [ %53, %52 ]
  %58 = phi %"class.quic::QuicInterval"* [ %73, %56 ], [ %54, %52 ]
  %59 = bitcast %"class.quic::QuicInterval"* %57 to i8*
  %60 = bitcast %"class.quic::QuicInterval"* %58 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 16, i1 false) #13
  %61 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %58, i64 1
  %62 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %57, i64 1
  %63 = bitcast %"class.quic::QuicInterval"* %62 to i8*
  %64 = bitcast %"class.quic::QuicInterval"* %61 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 16, i1 false) #13
  %65 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %58, i64 2
  %66 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %57, i64 2
  %67 = bitcast %"class.quic::QuicInterval"* %66 to i8*
  %68 = bitcast %"class.quic::QuicInterval"* %65 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 16, i1 false) #13
  %69 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %58, i64 3
  %70 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %57, i64 3
  %71 = bitcast %"class.quic::QuicInterval"* %70 to i8*
  %72 = bitcast %"class.quic::QuicInterval"* %69 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* align 8 %72, i64 16, i1 false) #13
  %73 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %58, i64 4
  %74 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %57, i64 4
  %75 = icmp eq %"class.quic::QuicInterval"* %73, %31
  br i1 %75, label %76, label %56

76:                                               ; preds = %56, %52
  %77 = load i8, i8* %20, align 1
  br label %78

78:                                               ; preds = %76, %15
  %79 = phi i8 [ %77, %76 ], [ %24, %15 ]
  %80 = add i8 %79, -1
  store i8 %80, i8* %20, align 1
  %81 = bitcast %"class.absl::container_internal::btree_node"* %0 to %"class.absl::container_internal::btree_node"**
  %82 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %81, align 8
  %83 = load i8, i8* %19, align 1
  %84 = zext i8 %83 to i64
  %85 = zext i8 %80 to i64
  %86 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %29, i64 %85
  %87 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %82, i64 8, i32 0
  %88 = getelementptr inbounds i8, i8* %87, i64 2
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i64
  %91 = icmp ugt i8 %89, %83
  br i1 %91, label %92, label %149

92:                                               ; preds = %78
  %93 = sub nsw i64 %90, %84
  %94 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %82, i64 16, i32 0
  %95 = bitcast i8* %94 to %"class.quic::QuicInterval"*
  %96 = shl nuw nsw i64 %90, 32
  %97 = add nsw i64 %96, -4294967296
  %98 = ashr exact i64 %97, 32
  %99 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %95, i64 %98
  %100 = sub nsw i64 0, %93
  %101 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %99, i64 %100
  %102 = icmp eq i64 %93, 0
  br i1 %102, label %149, label %103

103:                                              ; preds = %92
  %104 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %95, i64 %90
  %105 = shl nuw nsw i64 %90, 4
  %106 = add nsw i64 %105, -16
  %107 = shl nuw nsw i64 %84, 4
  %108 = sub nsw i64 %106, %107
  %109 = lshr exact i64 %108, 4
  %110 = add nuw nsw i64 %109, 1
  %111 = and i64 %110, 3
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %123, label %113

113:                                              ; preds = %103, %113
  %114 = phi %"class.quic::QuicInterval"* [ %120, %113 ], [ %104, %103 ]
  %115 = phi %"class.quic::QuicInterval"* [ %119, %113 ], [ %99, %103 ]
  %116 = phi i64 [ %121, %113 ], [ %111, %103 ]
  %117 = bitcast %"class.quic::QuicInterval"* %114 to i8*
  %118 = bitcast %"class.quic::QuicInterval"* %115 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %118, i64 16, i1 false) #13
  %119 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %115, i64 -1
  %120 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %114, i64 -1
  %121 = add i64 %116, -1
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %113, !llvm.loop !57

123:                                              ; preds = %113, %103
  %124 = phi %"class.quic::QuicInterval"* [ %104, %103 ], [ %120, %113 ]
  %125 = phi %"class.quic::QuicInterval"* [ %99, %103 ], [ %119, %113 ]
  %126 = icmp ult i64 %108, 48
  br i1 %126, label %147, label %127

127:                                              ; preds = %123, %127
  %128 = phi %"class.quic::QuicInterval"* [ %145, %127 ], [ %124, %123 ]
  %129 = phi %"class.quic::QuicInterval"* [ %144, %127 ], [ %125, %123 ]
  %130 = bitcast %"class.quic::QuicInterval"* %128 to i8*
  %131 = bitcast %"class.quic::QuicInterval"* %129 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %130, i8* align 8 %131, i64 16, i1 false) #13
  %132 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %129, i64 -1
  %133 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %128, i64 -1
  %134 = bitcast %"class.quic::QuicInterval"* %133 to i8*
  %135 = bitcast %"class.quic::QuicInterval"* %132 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %134, i8* align 8 %135, i64 16, i1 false) #13
  %136 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %129, i64 -2
  %137 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %128, i64 -2
  %138 = bitcast %"class.quic::QuicInterval"* %137 to i8*
  %139 = bitcast %"class.quic::QuicInterval"* %136 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %138, i8* align 8 %139, i64 16, i1 false) #13
  %140 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %129, i64 -3
  %141 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %128, i64 -3
  %142 = bitcast %"class.quic::QuicInterval"* %141 to i8*
  %143 = bitcast %"class.quic::QuicInterval"* %140 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %142, i8* align 8 %143, i64 16, i1 false) #13
  %144 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %129, i64 -4
  %145 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %128, i64 -4
  %146 = icmp eq %"class.quic::QuicInterval"* %144, %101
  br i1 %146, label %147, label %127

147:                                              ; preds = %127, %123
  %148 = load i8, i8* %88, align 1
  br label %149

149:                                              ; preds = %78, %147, %92
  %150 = phi i8 [ %148, %147 ], [ %89, %92 ], [ %89, %78 ]
  %151 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %82, i64 16, i32 0
  %152 = bitcast i8* %151 to %"class.quic::QuicInterval"*
  %153 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %152, i64 %84
  %154 = bitcast %"class.quic::QuicInterval"* %86 to i8*
  %155 = bitcast %"class.quic::QuicInterval"* %153 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %155, i8* align 8 %154, i64 16, i1 false) #13
  %156 = add i8 %150, 1
  store i8 %156, i8* %88, align 1
  %157 = getelementptr inbounds i8, i8* %87, i64 3
  %158 = load i8, i8* %157, align 1
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %160, label %214

160:                                              ; preds = %149
  %161 = zext i8 %156 to i64
  %162 = add nuw nsw i64 %84, 1
  %163 = icmp ult i64 %162, %161
  br i1 %163, label %164, label %214

164:                                              ; preds = %160
  %165 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %82, i64 256, i32 0
  %166 = bitcast i8* %165 to %"class.absl::container_internal::btree_node"**
  %167 = xor i64 %84, 3
  %168 = add nuw nsw i64 %167, %161
  %169 = add nsw i64 %161, -2
  %170 = sub nsw i64 %169, %84
  %171 = and i64 %168, 3
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %184, label %173

173:                                              ; preds = %164, %173
  %174 = phi i64 [ %176, %173 ], [ %161, %164 ]
  %175 = phi i64 [ %182, %173 ], [ %171, %164 ]
  %176 = add nsw i64 %174, -1
  %177 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %166, i64 %176
  %178 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %177, align 8
  %179 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %166, i64 %174
  store %"class.absl::container_internal::btree_node"* %178, %"class.absl::container_internal::btree_node"** %179, align 8
  %180 = trunc i64 %174 to i8
  %181 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %178, i64 8, i32 0
  store i8 %180, i8* %181, align 1
  %182 = add i64 %175, -1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %173, !llvm.loop !58

184:                                              ; preds = %173, %164
  %185 = phi i64 [ %161, %164 ], [ %176, %173 ]
  %186 = icmp ult i64 %170, 3
  br i1 %186, label %214, label %187

187:                                              ; preds = %184, %187
  %188 = phi i64 [ %207, %187 ], [ %185, %184 ]
  %189 = add nsw i64 %188, -1
  %190 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %166, i64 %189
  %191 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %190, align 8
  %192 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %166, i64 %188
  store %"class.absl::container_internal::btree_node"* %191, %"class.absl::container_internal::btree_node"** %192, align 8
  %193 = trunc i64 %188 to i8
  %194 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %191, i64 8, i32 0
  store i8 %193, i8* %194, align 1
  %195 = add nsw i64 %188, -2
  %196 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %166, i64 %195
  %197 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %196, align 8
  %198 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %166, i64 %189
  store %"class.absl::container_internal::btree_node"* %197, %"class.absl::container_internal::btree_node"** %198, align 8
  %199 = trunc i64 %189 to i8
  %200 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %197, i64 8, i32 0
  store i8 %199, i8* %200, align 1
  %201 = add nsw i64 %188, -3
  %202 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %166, i64 %201
  %203 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %202, align 8
  %204 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %166, i64 %195
  store %"class.absl::container_internal::btree_node"* %203, %"class.absl::container_internal::btree_node"** %204, align 8
  %205 = trunc i64 %195 to i8
  %206 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %203, i64 8, i32 0
  store i8 %205, i8* %206, align 1
  %207 = add nsw i64 %188, -4
  %208 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %166, i64 %207
  %209 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %208, align 8
  %210 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %166, i64 %201
  store %"class.absl::container_internal::btree_node"* %209, %"class.absl::container_internal::btree_node"** %210, align 8
  %211 = trunc i64 %201 to i8
  %212 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %209, i64 8, i32 0
  store i8 %211, i8* %212, align 1
  %213 = icmp slt i64 %162, %207
  br i1 %213, label %187, label %214

214:                                              ; preds = %184, %187, %149, %160
  %215 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %81, align 8
  %216 = load i8, i8* %19, align 1
  %217 = zext i8 %216 to i32
  %218 = add nuw nsw i32 %217, 1
  %219 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %215, i64 256, i32 0
  %220 = bitcast i8* %219 to %"class.absl::container_internal::btree_node"**
  %221 = zext i32 %218 to i64
  %222 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %220, i64 %221
  store %"class.absl::container_internal::btree_node"* %2, %"class.absl::container_internal::btree_node"** %222, align 8
  %223 = trunc i32 %218 to i8
  store i8 %223, i8* %22, align 1
  %224 = bitcast %"class.absl::container_internal::btree_node"* %2 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %215, %"class.absl::container_internal::btree_node"** %224, align 8
  %225 = getelementptr inbounds i8, i8* %19, i64 3
  %226 = load i8, i8* %225, align 1
  %227 = icmp eq i8 %226, 0
  br i1 %227, label %228, label %251

228:                                              ; preds = %214
  %229 = load i8, i8* %20, align 1
  %230 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %0, i64 256, i32 0
  %231 = bitcast i8* %230 to %"class.absl::container_internal::btree_node"**
  %232 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 256, i32 0
  %233 = bitcast i8* %232 to %"class.absl::container_internal::btree_node"**
  %234 = zext i8 %229 to i64
  br label %235

235:                                              ; preds = %235, %228
  %236 = phi i64 [ %246, %235 ], [ 0, %228 ]
  %237 = phi i64 [ %239, %235 ], [ %234, %228 ]
  %238 = phi i32 [ %247, %235 ], [ 0, %228 ]
  %239 = add nuw nsw i64 %237, 1
  %240 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %231, i64 %239
  %241 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %240, align 8
  %242 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %233, i64 %236
  store %"class.absl::container_internal::btree_node"* %241, %"class.absl::container_internal::btree_node"** %242, align 8
  %243 = trunc i32 %238 to i8
  %244 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %241, i64 8, i32 0
  store i8 %243, i8* %244, align 1
  %245 = bitcast %"class.absl::container_internal::btree_node"* %241 to %"class.absl::container_internal::btree_node"**
  store %"class.absl::container_internal::btree_node"* %2, %"class.absl::container_internal::btree_node"** %245, align 8
  %246 = add nuw nsw i64 %236, 1
  %247 = add nuw nsw i32 %238, 1
  %248 = load i8, i8* %23, align 1
  %249 = zext i8 %248 to i64
  %250 = icmp ult i64 %236, %249
  br i1 %250, label %235, label %251

251:                                              ; preds = %235, %214
  ret void
}

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4quic15QuicIntervalSetImE21AddOptimizedForAppendERKNS_12QuicIntervalImEE(%"class.quic::QuicIntervalSet"*, %"class.quic::QuicInterval"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %7

6:                                                ; preds = %2
  tail call void @_ZN4quic15QuicIntervalSetImE3AddERKNS_12QuicIntervalImEE(%"class.quic::QuicIntervalSet"* %0, %"class.quic::QuicInterval"* dereferenceable(16) %1)
  br label %320

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %8, align 8, !noalias !59
  %10 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %9, i64 8, i32 0
  %11 = getelementptr inbounds i8, i8* %10, i64 2
  %12 = load i8, i8* %11, align 1, !noalias !59
  %13 = zext i8 %12 to i32
  %14 = ptrtoint %"class.absl::container_internal::btree_node"* %9 to i64
  %15 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %1, i64 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds i8, i8* %10, i64 3
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %35, label %20

20:                                               ; preds = %7
  %21 = add nsw i32 %13, -1
  %22 = icmp eq i8 %12, 0
  br i1 %22, label %23, label %71

23:                                               ; preds = %20, %31
  %24 = phi %"class.absl::container_internal::btree_node"* [ %26, %31 ], [ %9, %20 ]
  %25 = bitcast %"class.absl::container_internal::btree_node"* %24 to %"class.absl::container_internal::btree_node"**
  %26 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %25, align 8
  %27 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %26, i64 8, i32 0
  %28 = getelementptr inbounds i8, i8* %27, i64 3
  %29 = load i8, i8* %28, align 1
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %71

31:                                               ; preds = %23
  %32 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %24, i64 8, i32 0
  %33 = load i8, i8* %32, align 1
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %23, label %67

35:                                               ; preds = %7
  %36 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %9, i64 256, i32 0
  %37 = bitcast i8* %36 to %"class.absl::container_internal::btree_node"**
  %38 = zext i8 %12 to i64
  %39 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %37, i64 %38
  %40 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %39, align 8
  %41 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %40, i64 8, i32 0
  %42 = getelementptr inbounds i8, i8* %41, i64 3
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 0
  %45 = getelementptr inbounds i8, i8* %41, i64 2
  %46 = load i8, i8* %45, align 1
  br i1 %44, label %47, label %61

47:                                               ; preds = %35, %47
  %48 = phi i8 [ %60, %47 ], [ %46, %35 ]
  %49 = phi %"class.absl::container_internal::btree_node"* [ %54, %47 ], [ %40, %35 ]
  %50 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %49, i64 256, i32 0
  %51 = bitcast i8* %50 to %"class.absl::container_internal::btree_node"**
  %52 = zext i8 %48 to i64
  %53 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %51, i64 %52
  %54 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %53, align 8
  %55 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %54, i64 8, i32 0
  %56 = getelementptr inbounds i8, i8* %55, i64 3
  %57 = load i8, i8* %56, align 1
  %58 = icmp eq i8 %57, 0
  %59 = getelementptr inbounds i8, i8* %55, i64 2
  %60 = load i8, i8* %59, align 1
  br i1 %58, label %47, label %61

61:                                               ; preds = %47, %35
  %62 = phi %"class.absl::container_internal::btree_node"* [ %40, %35 ], [ %54, %47 ]
  %63 = phi i8 [ %46, %35 ], [ %60, %47 ]
  %64 = ptrtoint %"class.absl::container_internal::btree_node"* %62 to i64
  %65 = zext i8 %63 to i32
  %66 = add nsw i32 %65, -1
  br label %71

67:                                               ; preds = %31
  %68 = ptrtoint %"class.absl::container_internal::btree_node"* %26 to i64
  %69 = zext i8 %33 to i32
  %70 = add nsw i32 %69, -1
  br label %71

71:                                               ; preds = %23, %20, %67, %61
  %72 = phi i32 [ %66, %61 ], [ %21, %20 ], [ %70, %67 ], [ %21, %23 ]
  %73 = phi i64 [ %64, %61 ], [ %14, %20 ], [ %68, %67 ], [ %14, %23 ]
  %74 = inttoptr i64 %73 to %"class.absl::container_internal::btree_node"*
  %75 = icmp eq i64 %73, 0
  br i1 %75, label %76, label %77, !prof !10

76:                                               ; preds = %71
  tail call void @llvm.trap() #13
  unreachable

77:                                               ; preds = %71
  %78 = icmp slt i32 %72, 0
  br i1 %78, label %79, label %80, !prof !10

79:                                               ; preds = %77
  tail call void @llvm.trap() #13
  unreachable

80:                                               ; preds = %77
  %81 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %74, i64 8, i32 0
  %82 = getelementptr inbounds i8, i8* %81, i64 2
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = icmp slt i32 %72, %84
  br i1 %85, label %87, label %86, !prof !11

86:                                               ; preds = %80
  tail call void @llvm.trap() #13
  unreachable

87:                                               ; preds = %80
  %88 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %74, i64 16, i32 0
  %89 = bitcast i8* %88 to %"class.quic::QuicInterval"*
  %90 = sext i32 %72 to i64
  %91 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %89, i64 %90, i32 0
  %92 = load i64, i64* %91, align 8
  %93 = icmp ult i64 %16, %92
  br i1 %93, label %169, label %94

94:                                               ; preds = %87
  br i1 %19, label %110, label %95

95:                                               ; preds = %94
  %96 = add nsw i32 %13, -1
  %97 = icmp eq i8 %12, 0
  br i1 %97, label %98, label %146

98:                                               ; preds = %95, %106
  %99 = phi %"class.absl::container_internal::btree_node"* [ %101, %106 ], [ %9, %95 ]
  %100 = bitcast %"class.absl::container_internal::btree_node"* %99 to %"class.absl::container_internal::btree_node"**
  %101 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %100, align 8
  %102 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %101, i64 8, i32 0
  %103 = getelementptr inbounds i8, i8* %102, i64 3
  %104 = load i8, i8* %103, align 1
  %105 = icmp eq i8 %104, 0
  br i1 %105, label %106, label %146

106:                                              ; preds = %98
  %107 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %99, i64 8, i32 0
  %108 = load i8, i8* %107, align 1
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %98, label %142

110:                                              ; preds = %94
  %111 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %9, i64 256, i32 0
  %112 = bitcast i8* %111 to %"class.absl::container_internal::btree_node"**
  %113 = zext i8 %12 to i64
  %114 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %112, i64 %113
  %115 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %114, align 8
  %116 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %115, i64 8, i32 0
  %117 = getelementptr inbounds i8, i8* %116, i64 3
  %118 = load i8, i8* %117, align 1
  %119 = icmp eq i8 %118, 0
  %120 = getelementptr inbounds i8, i8* %116, i64 2
  %121 = load i8, i8* %120, align 1
  br i1 %119, label %122, label %136

122:                                              ; preds = %110, %122
  %123 = phi i8 [ %135, %122 ], [ %121, %110 ]
  %124 = phi %"class.absl::container_internal::btree_node"* [ %129, %122 ], [ %115, %110 ]
  %125 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %124, i64 256, i32 0
  %126 = bitcast i8* %125 to %"class.absl::container_internal::btree_node"**
  %127 = zext i8 %123 to i64
  %128 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %126, i64 %127
  %129 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %128, align 8
  %130 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %129, i64 8, i32 0
  %131 = getelementptr inbounds i8, i8* %130, i64 3
  %132 = load i8, i8* %131, align 1
  %133 = icmp eq i8 %132, 0
  %134 = getelementptr inbounds i8, i8* %130, i64 2
  %135 = load i8, i8* %134, align 1
  br i1 %133, label %122, label %136

136:                                              ; preds = %122, %110
  %137 = phi %"class.absl::container_internal::btree_node"* [ %115, %110 ], [ %129, %122 ]
  %138 = phi i8 [ %121, %110 ], [ %135, %122 ]
  %139 = ptrtoint %"class.absl::container_internal::btree_node"* %137 to i64
  %140 = zext i8 %138 to i32
  %141 = add nsw i32 %140, -1
  br label %146

142:                                              ; preds = %106
  %143 = ptrtoint %"class.absl::container_internal::btree_node"* %101 to i64
  %144 = zext i8 %108 to i32
  %145 = add nsw i32 %144, -1
  br label %146

146:                                              ; preds = %98, %95, %142, %136
  %147 = phi i32 [ %141, %136 ], [ %96, %95 ], [ %145, %142 ], [ %96, %98 ]
  %148 = phi i64 [ %139, %136 ], [ %14, %95 ], [ %143, %142 ], [ %14, %98 ]
  %149 = inttoptr i64 %148 to %"class.absl::container_internal::btree_node"*
  %150 = icmp eq i64 %148, 0
  br i1 %150, label %151, label %152, !prof !10

151:                                              ; preds = %146
  tail call void @llvm.trap() #13
  unreachable

152:                                              ; preds = %146
  %153 = icmp slt i32 %147, 0
  br i1 %153, label %154, label %155, !prof !10

154:                                              ; preds = %152
  tail call void @llvm.trap() #13
  unreachable

155:                                              ; preds = %152
  %156 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %149, i64 8, i32 0
  %157 = getelementptr inbounds i8, i8* %156, i64 2
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = icmp slt i32 %147, %159
  br i1 %160, label %162, label %161, !prof !11

161:                                              ; preds = %155
  tail call void @llvm.trap() #13
  unreachable

162:                                              ; preds = %155
  %163 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %149, i64 16, i32 0
  %164 = bitcast i8* %163 to %"class.quic::QuicInterval"*
  %165 = sext i32 %147 to i64
  %166 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %164, i64 %165, i32 1
  %167 = load i64, i64* %166, align 8
  %168 = icmp ugt i64 %16, %167
  br i1 %168, label %169, label %170

169:                                              ; preds = %162, %87
  tail call void @_ZN4quic15QuicIntervalSetImE3AddERKNS_12QuicIntervalImEE(%"class.quic::QuicIntervalSet"* %0, %"class.quic::QuicInterval"* dereferenceable(16) %1)
  br label %320

170:                                              ; preds = %162
  %171 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %1, i64 0, i32 1
  %172 = load i64, i64* %171, align 8
  br i1 %19, label %188, label %173

173:                                              ; preds = %170
  %174 = add nsw i32 %13, -1
  %175 = icmp eq i8 %12, 0
  br i1 %175, label %176, label %224

176:                                              ; preds = %173, %184
  %177 = phi %"class.absl::container_internal::btree_node"* [ %179, %184 ], [ %9, %173 ]
  %178 = bitcast %"class.absl::container_internal::btree_node"* %177 to %"class.absl::container_internal::btree_node"**
  %179 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %178, align 8
  %180 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %179, i64 8, i32 0
  %181 = getelementptr inbounds i8, i8* %180, i64 3
  %182 = load i8, i8* %181, align 1
  %183 = icmp eq i8 %182, 0
  br i1 %183, label %184, label %224

184:                                              ; preds = %176
  %185 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %177, i64 8, i32 0
  %186 = load i8, i8* %185, align 1
  %187 = icmp eq i8 %186, 0
  br i1 %187, label %176, label %220

188:                                              ; preds = %170
  %189 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %9, i64 256, i32 0
  %190 = bitcast i8* %189 to %"class.absl::container_internal::btree_node"**
  %191 = zext i8 %12 to i64
  %192 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %190, i64 %191
  %193 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %192, align 8
  %194 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %193, i64 8, i32 0
  %195 = getelementptr inbounds i8, i8* %194, i64 3
  %196 = load i8, i8* %195, align 1
  %197 = icmp eq i8 %196, 0
  %198 = getelementptr inbounds i8, i8* %194, i64 2
  %199 = load i8, i8* %198, align 1
  br i1 %197, label %200, label %214

200:                                              ; preds = %188, %200
  %201 = phi i8 [ %213, %200 ], [ %199, %188 ]
  %202 = phi %"class.absl::container_internal::btree_node"* [ %207, %200 ], [ %193, %188 ]
  %203 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %202, i64 256, i32 0
  %204 = bitcast i8* %203 to %"class.absl::container_internal::btree_node"**
  %205 = zext i8 %201 to i64
  %206 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %204, i64 %205
  %207 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %206, align 8
  %208 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %207, i64 8, i32 0
  %209 = getelementptr inbounds i8, i8* %208, i64 3
  %210 = load i8, i8* %209, align 1
  %211 = icmp eq i8 %210, 0
  %212 = getelementptr inbounds i8, i8* %208, i64 2
  %213 = load i8, i8* %212, align 1
  br i1 %211, label %200, label %214

214:                                              ; preds = %200, %188
  %215 = phi %"class.absl::container_internal::btree_node"* [ %193, %188 ], [ %207, %200 ]
  %216 = phi i8 [ %199, %188 ], [ %213, %200 ]
  %217 = ptrtoint %"class.absl::container_internal::btree_node"* %215 to i64
  %218 = zext i8 %216 to i32
  %219 = add nsw i32 %218, -1
  br label %224

220:                                              ; preds = %184
  %221 = ptrtoint %"class.absl::container_internal::btree_node"* %179 to i64
  %222 = zext i8 %186 to i32
  %223 = add nsw i32 %222, -1
  br label %224

224:                                              ; preds = %176, %173, %220, %214
  %225 = phi i32 [ %219, %214 ], [ %174, %173 ], [ %223, %220 ], [ %174, %176 ]
  %226 = phi i64 [ %217, %214 ], [ %14, %173 ], [ %221, %220 ], [ %14, %176 ]
  %227 = inttoptr i64 %226 to %"class.absl::container_internal::btree_node"*
  %228 = icmp eq i64 %226, 0
  br i1 %228, label %229, label %230, !prof !10

229:                                              ; preds = %224
  tail call void @llvm.trap() #13
  unreachable

230:                                              ; preds = %224
  %231 = icmp slt i32 %225, 0
  br i1 %231, label %232, label %233, !prof !10

232:                                              ; preds = %230
  tail call void @llvm.trap() #13
  unreachable

233:                                              ; preds = %230
  %234 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %227, i64 8, i32 0
  %235 = getelementptr inbounds i8, i8* %234, i64 2
  %236 = load i8, i8* %235, align 1
  %237 = zext i8 %236 to i32
  %238 = icmp slt i32 %225, %237
  br i1 %238, label %240, label %239, !prof !11

239:                                              ; preds = %233
  tail call void @llvm.trap() #13
  unreachable

240:                                              ; preds = %233
  %241 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %227, i64 16, i32 0
  %242 = bitcast i8* %241 to %"class.quic::QuicInterval"*
  %243 = sext i32 %225 to i64
  %244 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %242, i64 %243, i32 1
  %245 = load i64, i64* %244, align 8
  %246 = icmp ugt i64 %172, %245
  br i1 %246, label %247, label %320

247:                                              ; preds = %240
  br i1 %19, label %263, label %248

248:                                              ; preds = %247
  %249 = add nsw i32 %13, -1
  %250 = icmp eq i8 %12, 0
  br i1 %250, label %251, label %299

251:                                              ; preds = %248, %259
  %252 = phi %"class.absl::container_internal::btree_node"* [ %254, %259 ], [ %9, %248 ]
  %253 = bitcast %"class.absl::container_internal::btree_node"* %252 to %"class.absl::container_internal::btree_node"**
  %254 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %253, align 8
  %255 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %254, i64 8, i32 0
  %256 = getelementptr inbounds i8, i8* %255, i64 3
  %257 = load i8, i8* %256, align 1
  %258 = icmp eq i8 %257, 0
  br i1 %258, label %259, label %299

259:                                              ; preds = %251
  %260 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %252, i64 8, i32 0
  %261 = load i8, i8* %260, align 1
  %262 = icmp eq i8 %261, 0
  br i1 %262, label %251, label %295

263:                                              ; preds = %247
  %264 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %9, i64 256, i32 0
  %265 = bitcast i8* %264 to %"class.absl::container_internal::btree_node"**
  %266 = zext i8 %12 to i64
  %267 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %265, i64 %266
  %268 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %267, align 8
  %269 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %268, i64 8, i32 0
  %270 = getelementptr inbounds i8, i8* %269, i64 3
  %271 = load i8, i8* %270, align 1
  %272 = icmp eq i8 %271, 0
  %273 = getelementptr inbounds i8, i8* %269, i64 2
  %274 = load i8, i8* %273, align 1
  br i1 %272, label %275, label %289

275:                                              ; preds = %263, %275
  %276 = phi i8 [ %288, %275 ], [ %274, %263 ]
  %277 = phi %"class.absl::container_internal::btree_node"* [ %282, %275 ], [ %268, %263 ]
  %278 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %277, i64 256, i32 0
  %279 = bitcast i8* %278 to %"class.absl::container_internal::btree_node"**
  %280 = zext i8 %276 to i64
  %281 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %279, i64 %280
  %282 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %281, align 8
  %283 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %282, i64 8, i32 0
  %284 = getelementptr inbounds i8, i8* %283, i64 3
  %285 = load i8, i8* %284, align 1
  %286 = icmp eq i8 %285, 0
  %287 = getelementptr inbounds i8, i8* %283, i64 2
  %288 = load i8, i8* %287, align 1
  br i1 %286, label %275, label %289

289:                                              ; preds = %275, %263
  %290 = phi %"class.absl::container_internal::btree_node"* [ %268, %263 ], [ %282, %275 ]
  %291 = phi i8 [ %274, %263 ], [ %288, %275 ]
  %292 = ptrtoint %"class.absl::container_internal::btree_node"* %290 to i64
  %293 = zext i8 %291 to i32
  %294 = add nsw i32 %293, -1
  br label %299

295:                                              ; preds = %259
  %296 = ptrtoint %"class.absl::container_internal::btree_node"* %254 to i64
  %297 = zext i8 %261 to i32
  %298 = add nsw i32 %297, -1
  br label %299

299:                                              ; preds = %251, %248, %295, %289
  %300 = phi i32 [ %294, %289 ], [ %249, %248 ], [ %298, %295 ], [ %249, %251 ]
  %301 = phi i64 [ %292, %289 ], [ %14, %248 ], [ %296, %295 ], [ %14, %251 ]
  %302 = inttoptr i64 %301 to %"class.absl::container_internal::btree_node"*
  %303 = icmp eq i64 %301, 0
  br i1 %303, label %304, label %305, !prof !10

304:                                              ; preds = %299
  tail call void @llvm.trap() #13
  unreachable

305:                                              ; preds = %299
  %306 = icmp slt i32 %300, 0
  br i1 %306, label %307, label %308, !prof !10

307:                                              ; preds = %305
  tail call void @llvm.trap() #13
  unreachable

308:                                              ; preds = %305
  %309 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %302, i64 8, i32 0
  %310 = getelementptr inbounds i8, i8* %309, i64 2
  %311 = load i8, i8* %310, align 1
  %312 = zext i8 %311 to i32
  %313 = icmp slt i32 %300, %312
  br i1 %313, label %315, label %314, !prof !11

314:                                              ; preds = %308
  tail call void @llvm.trap() #13
  unreachable

315:                                              ; preds = %308
  %316 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %302, i64 16, i32 0
  %317 = bitcast i8* %316 to %"class.quic::QuicInterval"*
  %318 = sext i32 %300 to i64
  %319 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %317, i64 %318, i32 1
  store i64 %172, i64* %319, align 8
  br label %320

320:                                              ; preds = %169, %315, %240, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18insert_hint_uniqueIS5_JRKS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEESN_RKT_DpOT0_(%"struct.std::__1::pair"* noalias sret, %"class.absl::container_internal::btree"*, %"class.absl::container_internal::btree_node"*, i32, %"class.quic::QuicInterval"* dereferenceable(16), %"class.quic::QuicInterval"* dereferenceable(16)) local_unnamed_addr #8 comdat align 2 {
  %7 = ptrtoint %"class.absl::container_internal::btree_node"* %2 to i64
  %8 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %181, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 1
  %13 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %12, align 8
  %14 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %13, i64 8, i32 0
  %15 = getelementptr inbounds i8, i8* %14, i64 2
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = icmp eq %"class.absl::container_internal::btree_node"* %13, %2
  %19 = icmp eq i32 %17, %3
  %20 = and i1 %18, %19
  br i1 %20, label %30, label %21

21:                                               ; preds = %11
  %22 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 16, i32 0
  %23 = bitcast i8* %22 to %"class.quic::QuicInterval"*
  %24 = sext i32 %3 to i64
  %25 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %4, i64 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %23, i64 %24, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = icmp ult i64 %26, %28
  br i1 %29, label %30, label %109

30:                                               ; preds = %11, %21
  %31 = bitcast %"class.absl::container_internal::btree"* %1 to %"class.absl::container_internal::btree_node"***
  %32 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %31, align 8
  %33 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %32, align 8
  %34 = icmp eq %"class.absl::container_internal::btree_node"* %33, %2
  %35 = icmp eq i32 %3, 0
  %36 = and i1 %35, %34
  br i1 %36, label %102, label %37

37:                                               ; preds = %30
  %38 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 8, i32 0
  %39 = getelementptr inbounds i8, i8* %38, i64 3
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %57, label %42

42:                                               ; preds = %37
  %43 = add nsw i32 %3, -1
  %44 = icmp sgt i32 %3, 0
  br i1 %44, label %91, label %45

45:                                               ; preds = %42, %53
  %46 = phi %"class.absl::container_internal::btree_node"* [ %48, %53 ], [ %2, %42 ]
  %47 = bitcast %"class.absl::container_internal::btree_node"* %46 to %"class.absl::container_internal::btree_node"**
  %48 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %47, align 8
  %49 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %48, i64 8, i32 0
  %50 = getelementptr inbounds i8, i8* %49, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %53, label %91

53:                                               ; preds = %45
  %54 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %46, i64 8, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %45, label %88

57:                                               ; preds = %37
  %58 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 256, i32 0
  %59 = bitcast i8* %58 to %"class.absl::container_internal::btree_node"**
  %60 = sext i32 %3 to i64
  %61 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %59, i64 %60
  %62 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %61, align 8
  %63 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %62, i64 8, i32 0
  %64 = getelementptr inbounds i8, i8* %63, i64 3
  %65 = load i8, i8* %64, align 1
  %66 = icmp eq i8 %65, 0
  %67 = getelementptr inbounds i8, i8* %63, i64 2
  %68 = load i8, i8* %67, align 1
  br i1 %66, label %69, label %83

69:                                               ; preds = %57, %69
  %70 = phi i8 [ %82, %69 ], [ %68, %57 ]
  %71 = phi %"class.absl::container_internal::btree_node"* [ %76, %69 ], [ %62, %57 ]
  %72 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %71, i64 256, i32 0
  %73 = bitcast i8* %72 to %"class.absl::container_internal::btree_node"**
  %74 = zext i8 %70 to i64
  %75 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %73, i64 %74
  %76 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %75, align 8
  %77 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %76, i64 8, i32 0
  %78 = getelementptr inbounds i8, i8* %77, i64 3
  %79 = load i8, i8* %78, align 1
  %80 = icmp eq i8 %79, 0
  %81 = getelementptr inbounds i8, i8* %77, i64 2
  %82 = load i8, i8* %81, align 1
  br i1 %80, label %69, label %83

83:                                               ; preds = %69, %57
  %84 = phi %"class.absl::container_internal::btree_node"* [ %62, %57 ], [ %76, %69 ]
  %85 = phi i8 [ %68, %57 ], [ %82, %69 ]
  %86 = zext i8 %85 to i32
  %87 = add nsw i32 %86, -1
  br label %91

88:                                               ; preds = %53
  %89 = zext i8 %55 to i32
  %90 = add nsw i32 %89, -1
  br label %91

91:                                               ; preds = %45, %88, %83, %42
  %92 = phi i32 [ %87, %83 ], [ %43, %42 ], [ %90, %88 ], [ %43, %45 ]
  %93 = phi %"class.absl::container_internal::btree_node"* [ %84, %83 ], [ %2, %42 ], [ %48, %88 ], [ %2, %45 ]
  %94 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %93, i64 16, i32 0
  %95 = bitcast i8* %94 to %"class.quic::QuicInterval"*
  %96 = sext i32 %92 to i64
  %97 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %95, i64 %96, i32 0
  %98 = load i64, i64* %97, align 8
  %99 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %4, i64 0, i32 0
  %100 = load i64, i64* %99, align 8
  %101 = icmp ult i64 %98, %100
  br i1 %101, label %102, label %181

102:                                              ; preds = %30, %91
  %103 = tail call { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16internal_emplaceIJRKS5_EEENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESM_DpOT_(%"class.absl::container_internal::btree"* %1, %"class.absl::container_internal::btree_node"* %2, i32 %3, %"class.quic::QuicInterval"* dereferenceable(16) %5)
  %104 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %103, 0
  %105 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %103, 1
  %106 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 0
  store %"class.absl::container_internal::btree_node"* %104, %"class.absl::container_internal::btree_node"** %106, align 8
  %107 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 1
  store i32 %105, i32* %107, align 8
  %108 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  store i8 1, i8* %108, align 8
  br label %182

109:                                              ; preds = %21
  %110 = icmp ult i64 %28, %26
  br i1 %110, label %111, label %177

111:                                              ; preds = %109
  %112 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 8, i32 0
  %113 = getelementptr inbounds i8, i8* %112, i64 3
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 0
  %116 = add nsw i32 %3, 1
  br i1 %115, label %136, label %117

117:                                              ; preds = %111
  %118 = getelementptr inbounds i8, i8* %112, i64 2
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = icmp eq i32 %116, %120
  br i1 %121, label %122, label %157

122:                                              ; preds = %117, %131
  %123 = phi i8* [ %127, %131 ], [ %112, %117 ]
  %124 = phi %"class.absl::container_internal::btree_node"* [ %126, %131 ], [ %2, %117 ]
  %125 = bitcast %"class.absl::container_internal::btree_node"* %124 to %"class.absl::container_internal::btree_node"**
  %126 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %125, align 8
  %127 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %126, i64 8, i32 0
  %128 = getelementptr inbounds i8, i8* %127, i64 3
  %129 = load i8, i8* %128, align 1
  %130 = icmp eq i8 %129, 0
  br i1 %130, label %131, label %157

131:                                              ; preds = %122
  %132 = load i8, i8* %123, align 1
  %133 = getelementptr inbounds i8, i8* %127, i64 2
  %134 = load i8, i8* %133, align 1
  %135 = icmp eq i8 %132, %134
  br i1 %135, label %122, label %155

136:                                              ; preds = %111
  %137 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 256, i32 0
  %138 = bitcast i8* %137 to %"class.absl::container_internal::btree_node"**
  %139 = sext i32 %116 to i64
  %140 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %138, i64 %139
  %141 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %140, align 8
  %142 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %141, i64 8, i32 0
  %143 = getelementptr inbounds i8, i8* %142, i64 3
  %144 = load i8, i8* %143, align 1
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %146, label %157

146:                                              ; preds = %136, %146
  %147 = phi %"class.absl::container_internal::btree_node"* [ %150, %146 ], [ %141, %136 ]
  %148 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %147, i64 256, i32 0
  %149 = bitcast i8* %148 to %"class.absl::container_internal::btree_node"**
  %150 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %149, align 8
  %151 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %150, i64 8, i32 0
  %152 = getelementptr inbounds i8, i8* %151, i64 3
  %153 = load i8, i8* %152, align 1
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %146, label %157

155:                                              ; preds = %131
  %156 = zext i8 %132 to i32
  br label %157

157:                                              ; preds = %122, %146, %155, %117, %136
  %158 = phi %"class.absl::container_internal::btree_node"* [ %2, %117 ], [ %141, %136 ], [ %126, %155 ], [ %150, %146 ], [ %2, %122 ]
  %159 = phi i32 [ %116, %117 ], [ 0, %136 ], [ %156, %155 ], [ 0, %146 ], [ %116, %122 ]
  %160 = icmp eq %"class.absl::container_internal::btree_node"* %158, %13
  %161 = icmp eq i32 %159, %17
  %162 = and i1 %160, %161
  br i1 %162, label %170, label %163

163:                                              ; preds = %157
  %164 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %158, i64 16, i32 0
  %165 = bitcast i8* %164 to %"class.quic::QuicInterval"*
  %166 = sext i32 %159 to i64
  %167 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %165, i64 %166, i32 0
  %168 = load i64, i64* %167, align 8
  %169 = icmp ult i64 %26, %168
  br i1 %169, label %170, label %181

170:                                              ; preds = %157, %163
  %171 = tail call { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16internal_emplaceIJRKS5_EEENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESM_DpOT_(%"class.absl::container_internal::btree"* %1, %"class.absl::container_internal::btree_node"* %158, i32 %159, %"class.quic::QuicInterval"* dereferenceable(16) %5)
  %172 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %171, 0
  %173 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %171, 1
  %174 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 0
  store %"class.absl::container_internal::btree_node"* %172, %"class.absl::container_internal::btree_node"** %174, align 8
  %175 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 1
  store i32 %173, i32* %175, align 8
  %176 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  store i8 1, i8* %176, align 8
  br label %182

177:                                              ; preds = %109
  %178 = bitcast %"struct.std::__1::pair"* %0 to i64*
  store i64 %7, i64* %178, align 8
  %179 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 1
  store i32 %3, i32* %179, align 8
  %180 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  store i8 0, i8* %180, align 8
  br label %182

181:                                              ; preds = %91, %163, %6
  tail call void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE13insert_uniqueIS5_JRKS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEERKT_DpOT0_(%"struct.std::__1::pair"* sret %0, %"class.absl::container_internal::btree"* %1, %"class.quic::QuicInterval"* dereferenceable(16) %4, %"class.quic::QuicInterval"* dereferenceable(16) %5)
  br label %182

182:                                              ; preds = %181, %177, %170, %102
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18insert_hint_uniqueIS5_JS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEESL_RKT_DpOT0_(%"struct.std::__1::pair"* noalias sret, %"class.absl::container_internal::btree"*, %"class.absl::container_internal::btree_node"*, i32, %"class.quic::QuicInterval"* dereferenceable(16), %"class.quic::QuicInterval"* dereferenceable(16)) local_unnamed_addr #8 comdat align 2 {
  %7 = ptrtoint %"class.absl::container_internal::btree_node"* %2 to i64
  %8 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %181, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 1
  %13 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %12, align 8
  %14 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %13, i64 8, i32 0
  %15 = getelementptr inbounds i8, i8* %14, i64 2
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = icmp eq %"class.absl::container_internal::btree_node"* %13, %2
  %19 = icmp eq i32 %17, %3
  %20 = and i1 %18, %19
  br i1 %20, label %30, label %21

21:                                               ; preds = %11
  %22 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 16, i32 0
  %23 = bitcast i8* %22 to %"class.quic::QuicInterval"*
  %24 = sext i32 %3 to i64
  %25 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %4, i64 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %23, i64 %24, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = icmp ult i64 %26, %28
  br i1 %29, label %30, label %109

30:                                               ; preds = %11, %21
  %31 = bitcast %"class.absl::container_internal::btree"* %1 to %"class.absl::container_internal::btree_node"***
  %32 = load %"class.absl::container_internal::btree_node"**, %"class.absl::container_internal::btree_node"*** %31, align 8
  %33 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %32, align 8
  %34 = icmp eq %"class.absl::container_internal::btree_node"* %33, %2
  %35 = icmp eq i32 %3, 0
  %36 = and i1 %35, %34
  br i1 %36, label %102, label %37

37:                                               ; preds = %30
  %38 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 8, i32 0
  %39 = getelementptr inbounds i8, i8* %38, i64 3
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %57, label %42

42:                                               ; preds = %37
  %43 = add nsw i32 %3, -1
  %44 = icmp sgt i32 %3, 0
  br i1 %44, label %91, label %45

45:                                               ; preds = %42, %53
  %46 = phi %"class.absl::container_internal::btree_node"* [ %48, %53 ], [ %2, %42 ]
  %47 = bitcast %"class.absl::container_internal::btree_node"* %46 to %"class.absl::container_internal::btree_node"**
  %48 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %47, align 8
  %49 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %48, i64 8, i32 0
  %50 = getelementptr inbounds i8, i8* %49, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %53, label %91

53:                                               ; preds = %45
  %54 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %46, i64 8, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %45, label %88

57:                                               ; preds = %37
  %58 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 256, i32 0
  %59 = bitcast i8* %58 to %"class.absl::container_internal::btree_node"**
  %60 = sext i32 %3 to i64
  %61 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %59, i64 %60
  %62 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %61, align 8
  %63 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %62, i64 8, i32 0
  %64 = getelementptr inbounds i8, i8* %63, i64 3
  %65 = load i8, i8* %64, align 1
  %66 = icmp eq i8 %65, 0
  %67 = getelementptr inbounds i8, i8* %63, i64 2
  %68 = load i8, i8* %67, align 1
  br i1 %66, label %69, label %83

69:                                               ; preds = %57, %69
  %70 = phi i8 [ %82, %69 ], [ %68, %57 ]
  %71 = phi %"class.absl::container_internal::btree_node"* [ %76, %69 ], [ %62, %57 ]
  %72 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %71, i64 256, i32 0
  %73 = bitcast i8* %72 to %"class.absl::container_internal::btree_node"**
  %74 = zext i8 %70 to i64
  %75 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %73, i64 %74
  %76 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %75, align 8
  %77 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %76, i64 8, i32 0
  %78 = getelementptr inbounds i8, i8* %77, i64 3
  %79 = load i8, i8* %78, align 1
  %80 = icmp eq i8 %79, 0
  %81 = getelementptr inbounds i8, i8* %77, i64 2
  %82 = load i8, i8* %81, align 1
  br i1 %80, label %69, label %83

83:                                               ; preds = %69, %57
  %84 = phi %"class.absl::container_internal::btree_node"* [ %62, %57 ], [ %76, %69 ]
  %85 = phi i8 [ %68, %57 ], [ %82, %69 ]
  %86 = zext i8 %85 to i32
  %87 = add nsw i32 %86, -1
  br label %91

88:                                               ; preds = %53
  %89 = zext i8 %55 to i32
  %90 = add nsw i32 %89, -1
  br label %91

91:                                               ; preds = %45, %88, %83, %42
  %92 = phi i32 [ %87, %83 ], [ %43, %42 ], [ %90, %88 ], [ %43, %45 ]
  %93 = phi %"class.absl::container_internal::btree_node"* [ %84, %83 ], [ %2, %42 ], [ %48, %88 ], [ %2, %45 ]
  %94 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %93, i64 16, i32 0
  %95 = bitcast i8* %94 to %"class.quic::QuicInterval"*
  %96 = sext i32 %92 to i64
  %97 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %95, i64 %96, i32 0
  %98 = load i64, i64* %97, align 8
  %99 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %4, i64 0, i32 0
  %100 = load i64, i64* %99, align 8
  %101 = icmp ult i64 %98, %100
  br i1 %101, label %102, label %181

102:                                              ; preds = %30, %91
  %103 = tail call { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16internal_emplaceIJS5_EEENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESK_DpOT_(%"class.absl::container_internal::btree"* %1, %"class.absl::container_internal::btree_node"* %2, i32 %3, %"class.quic::QuicInterval"* dereferenceable(16) %5)
  %104 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %103, 0
  %105 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %103, 1
  %106 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 0
  store %"class.absl::container_internal::btree_node"* %104, %"class.absl::container_internal::btree_node"** %106, align 8
  %107 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 1
  store i32 %105, i32* %107, align 8
  %108 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  store i8 1, i8* %108, align 8
  br label %182

109:                                              ; preds = %21
  %110 = icmp ult i64 %28, %26
  br i1 %110, label %111, label %177

111:                                              ; preds = %109
  %112 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 8, i32 0
  %113 = getelementptr inbounds i8, i8* %112, i64 3
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 0
  %116 = add nsw i32 %3, 1
  br i1 %115, label %136, label %117

117:                                              ; preds = %111
  %118 = getelementptr inbounds i8, i8* %112, i64 2
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = icmp eq i32 %116, %120
  br i1 %121, label %122, label %157

122:                                              ; preds = %117, %131
  %123 = phi i8* [ %127, %131 ], [ %112, %117 ]
  %124 = phi %"class.absl::container_internal::btree_node"* [ %126, %131 ], [ %2, %117 ]
  %125 = bitcast %"class.absl::container_internal::btree_node"* %124 to %"class.absl::container_internal::btree_node"**
  %126 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %125, align 8
  %127 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %126, i64 8, i32 0
  %128 = getelementptr inbounds i8, i8* %127, i64 3
  %129 = load i8, i8* %128, align 1
  %130 = icmp eq i8 %129, 0
  br i1 %130, label %131, label %157

131:                                              ; preds = %122
  %132 = load i8, i8* %123, align 1
  %133 = getelementptr inbounds i8, i8* %127, i64 2
  %134 = load i8, i8* %133, align 1
  %135 = icmp eq i8 %132, %134
  br i1 %135, label %122, label %155

136:                                              ; preds = %111
  %137 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %2, i64 256, i32 0
  %138 = bitcast i8* %137 to %"class.absl::container_internal::btree_node"**
  %139 = sext i32 %116 to i64
  %140 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %138, i64 %139
  %141 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %140, align 8
  %142 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %141, i64 8, i32 0
  %143 = getelementptr inbounds i8, i8* %142, i64 3
  %144 = load i8, i8* %143, align 1
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %146, label %157

146:                                              ; preds = %136, %146
  %147 = phi %"class.absl::container_internal::btree_node"* [ %150, %146 ], [ %141, %136 ]
  %148 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %147, i64 256, i32 0
  %149 = bitcast i8* %148 to %"class.absl::container_internal::btree_node"**
  %150 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %149, align 8
  %151 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %150, i64 8, i32 0
  %152 = getelementptr inbounds i8, i8* %151, i64 3
  %153 = load i8, i8* %152, align 1
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %146, label %157

155:                                              ; preds = %131
  %156 = zext i8 %132 to i32
  br label %157

157:                                              ; preds = %122, %146, %155, %117, %136
  %158 = phi %"class.absl::container_internal::btree_node"* [ %2, %117 ], [ %141, %136 ], [ %126, %155 ], [ %150, %146 ], [ %2, %122 ]
  %159 = phi i32 [ %116, %117 ], [ 0, %136 ], [ %156, %155 ], [ 0, %146 ], [ %116, %122 ]
  %160 = icmp eq %"class.absl::container_internal::btree_node"* %158, %13
  %161 = icmp eq i32 %159, %17
  %162 = and i1 %160, %161
  br i1 %162, label %170, label %163

163:                                              ; preds = %157
  %164 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %158, i64 16, i32 0
  %165 = bitcast i8* %164 to %"class.quic::QuicInterval"*
  %166 = sext i32 %159 to i64
  %167 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %165, i64 %166, i32 0
  %168 = load i64, i64* %167, align 8
  %169 = icmp ult i64 %26, %168
  br i1 %169, label %170, label %181

170:                                              ; preds = %157, %163
  %171 = tail call { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16internal_emplaceIJS5_EEENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESK_DpOT_(%"class.absl::container_internal::btree"* %1, %"class.absl::container_internal::btree_node"* %158, i32 %159, %"class.quic::QuicInterval"* dereferenceable(16) %5)
  %172 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %171, 0
  %173 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %171, 1
  %174 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 0
  store %"class.absl::container_internal::btree_node"* %172, %"class.absl::container_internal::btree_node"** %174, align 8
  %175 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 1
  store i32 %173, i32* %175, align 8
  %176 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  store i8 1, i8* %176, align 8
  br label %182

177:                                              ; preds = %109
  %178 = bitcast %"struct.std::__1::pair"* %0 to i64*
  store i64 %7, i64* %178, align 8
  %179 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 1
  store i32 %3, i32* %179, align 8
  %180 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  store i8 0, i8* %180, align 8
  br label %182

181:                                              ; preds = %91, %163, %6
  tail call void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE13insert_uniqueIS5_JS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEERKT_DpOT0_(%"struct.std::__1::pair"* sret %0, %"class.absl::container_internal::btree"* %1, %"class.quic::QuicInterval"* dereferenceable(16) %4, %"class.quic::QuicInterval"* dereferenceable(16) %5)
  br label %182

182:                                              ; preds = %181, %177, %170, %102
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16internal_emplaceIJS5_EEENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESK_DpOT_(%"class.absl::container_internal::btree"*, %"class.absl::container_internal::btree_node"*, i32, %"class.quic::QuicInterval"* dereferenceable(16)) local_unnamed_addr #8 comdat align 2 {
  %5 = alloca { %"class.absl::container_internal::btree_node"*, i32 }, align 8
  %6 = bitcast { %"class.absl::container_internal::btree_node"*, i32 }* %5 to %"struct.absl::container_internal::btree_iterator.11"*
  %7 = getelementptr inbounds { %"class.absl::container_internal::btree_node"*, i32 }, { %"class.absl::container_internal::btree_node"*, i32 }* %5, i64 0, i32 0
  store %"class.absl::container_internal::btree_node"* %1, %"class.absl::container_internal::btree_node"** %7, align 8
  %8 = getelementptr inbounds { %"class.absl::container_internal::btree_node"*, i32 }, { %"class.absl::container_internal::btree_node"*, i32 }* %5, i64 0, i32 1
  store i32 %2, i32* %8, align 8
  %9 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %1, i64 8, i32 0
  %10 = getelementptr inbounds i8, i8* %9, i64 3
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %46

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %1, i64 256, i32 0
  %15 = bitcast i8* %14 to %"class.absl::container_internal::btree_node"**
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %15, i64 %16
  %18 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %17, align 8
  store %"class.absl::container_internal::btree_node"* %18, %"class.absl::container_internal::btree_node"** %7, align 8
  %19 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %18, i64 8, i32 0
  %20 = getelementptr inbounds i8, i8* %19, i64 3
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, 0
  %23 = getelementptr inbounds i8, i8* %19, i64 2
  %24 = load i8, i8* %23, align 1
  br i1 %22, label %25, label %39

25:                                               ; preds = %13, %25
  %26 = phi i8 [ %38, %25 ], [ %24, %13 ]
  %27 = phi %"class.absl::container_internal::btree_node"* [ %32, %25 ], [ %18, %13 ]
  %28 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %27, i64 256, i32 0
  %29 = bitcast i8* %28 to %"class.absl::container_internal::btree_node"**
  %30 = zext i8 %26 to i64
  %31 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %29, i64 %30
  %32 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %31, align 8
  store %"class.absl::container_internal::btree_node"* %32, %"class.absl::container_internal::btree_node"** %7, align 8
  %33 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %32, i64 8, i32 0
  %34 = getelementptr inbounds i8, i8* %33, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 0
  %37 = getelementptr inbounds i8, i8* %33, i64 2
  %38 = load i8, i8* %37, align 1
  br i1 %36, label %25, label %39

39:                                               ; preds = %25, %13
  %40 = phi %"class.absl::container_internal::btree_node"* [ %18, %13 ], [ %32, %25 ]
  %41 = phi i8 [ %24, %13 ], [ %38, %25 ]
  %42 = zext i8 %41 to i32
  store i32 %42, i32* %8, align 8
  %43 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %40, i64 8, i32 0
  %44 = getelementptr inbounds i8, i8* %43, i64 3
  %45 = load i8, i8* %44, align 1
  br label %46

46:                                               ; preds = %4, %39
  %47 = phi i8 [ %11, %4 ], [ %45, %39 ]
  %48 = phi %"class.absl::container_internal::btree_node"* [ %1, %4 ], [ %40, %39 ]
  %49 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %48, i64 8, i32 0
  %50 = icmp eq i8 %47, 0
  %51 = select i1 %50, i8 15, i8 %47
  %52 = bitcast %"class.absl::container_internal::btree"* %0 to %"class.std::__1::allocator"*
  %53 = getelementptr inbounds i8, i8* %49, i64 2
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %51 to i32
  %56 = icmp eq i8 %54, %51
  br i1 %56, label %57, label %138

57:                                               ; preds = %46
  %58 = icmp ult i8 %51, 15
  br i1 %58, label %59, label %136

59:                                               ; preds = %57
  %60 = shl nuw nsw i32 %55, 1
  %61 = icmp ult i32 %60, 15
  %62 = select i1 %61, i32 %60, i32 15
  %63 = shl nuw nsw i32 %62, 4
  %64 = add nuw nsw i32 %63, 23
  %65 = and i32 %64, 496
  %66 = zext i32 %65 to i64
  %67 = tail call i8* @_Znwm(i64 %66) #12
  %68 = bitcast i8* %67 to i8**
  store i8* %67, i8** %68, align 8
  %69 = getelementptr inbounds i8, i8* %67, i64 8
  store i8 0, i8* %69, align 1
  %70 = getelementptr inbounds i8, i8* %67, i64 9
  store i8 0, i8* %70, align 1
  %71 = getelementptr inbounds i8, i8* %67, i64 10
  store i8 0, i8* %71, align 1
  %72 = trunc i32 %62 to i8
  %73 = getelementptr inbounds i8, i8* %67, i64 11
  store i8 %72, i8* %73, align 1
  %74 = bitcast { %"class.absl::container_internal::btree_node"*, i32 }* %5 to i8**
  store i8* %67, i8** %74, align 8
  %75 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %76 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %75, align 8
  %77 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %76, i64 8, i32 0
  %78 = getelementptr inbounds i8, i8* %77, i64 2
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i64
  %81 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %76, i64 16, i32 0
  %82 = bitcast i8* %81 to %"class.quic::QuicInterval"*
  %83 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %82, i64 %80
  %84 = icmp eq i8 %79, 0
  %85 = bitcast i8* %67 to %"class.absl::container_internal::btree_node"*
  br i1 %84, label %131, label %86

86:                                               ; preds = %59
  %87 = getelementptr inbounds i8, i8* %67, i64 16
  %88 = bitcast i8* %87 to %"class.quic::QuicInterval"*
  %89 = shl nuw nsw i64 %80, 4
  %90 = add nsw i64 %89, -16
  %91 = lshr exact i64 %90, 4
  %92 = add nuw nsw i64 %91, 1
  %93 = and i64 %92, 3
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %86, %95
  %96 = phi %"class.quic::QuicInterval"* [ %102, %95 ], [ %88, %86 ]
  %97 = phi %"class.quic::QuicInterval"* [ %101, %95 ], [ %82, %86 ]
  %98 = phi i64 [ %103, %95 ], [ %93, %86 ]
  %99 = bitcast %"class.quic::QuicInterval"* %96 to i8*
  %100 = bitcast %"class.quic::QuicInterval"* %97 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %100, i64 16, i1 false) #13
  %101 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %97, i64 1
  %102 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %96, i64 1
  %103 = add i64 %98, -1
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %95, !llvm.loop !64

105:                                              ; preds = %95, %86
  %106 = phi %"class.quic::QuicInterval"* [ %88, %86 ], [ %102, %95 ]
  %107 = phi %"class.quic::QuicInterval"* [ %82, %86 ], [ %101, %95 ]
  %108 = icmp ult i64 %90, 48
  br i1 %108, label %129, label %109

109:                                              ; preds = %105, %109
  %110 = phi %"class.quic::QuicInterval"* [ %127, %109 ], [ %106, %105 ]
  %111 = phi %"class.quic::QuicInterval"* [ %126, %109 ], [ %107, %105 ]
  %112 = bitcast %"class.quic::QuicInterval"* %110 to i8*
  %113 = bitcast %"class.quic::QuicInterval"* %111 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %112, i8* align 8 %113, i64 16, i1 false) #13
  %114 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 1
  %115 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %110, i64 1
  %116 = bitcast %"class.quic::QuicInterval"* %115 to i8*
  %117 = bitcast %"class.quic::QuicInterval"* %114 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %116, i8* align 8 %117, i64 16, i1 false) #13
  %118 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 2
  %119 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %110, i64 2
  %120 = bitcast %"class.quic::QuicInterval"* %119 to i8*
  %121 = bitcast %"class.quic::QuicInterval"* %118 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %120, i8* align 8 %121, i64 16, i1 false) #13
  %122 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 3
  %123 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %110, i64 3
  %124 = bitcast %"class.quic::QuicInterval"* %123 to i8*
  %125 = bitcast %"class.quic::QuicInterval"* %122 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %124, i8* align 8 %125, i64 16, i1 false) #13
  %126 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %111, i64 4
  %127 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %110, i64 4
  %128 = icmp eq %"class.quic::QuicInterval"* %126, %83
  br i1 %128, label %129, label %109

129:                                              ; preds = %109, %105
  %130 = load i8, i8* %78, align 1
  br label %131

131:                                              ; preds = %129, %59
  %132 = phi i8 [ %130, %129 ], [ 0, %59 ]
  store i8 %132, i8* %71, align 1
  store i8 0, i8* %78, align 1
  tail call void @_ZN4absl18container_internal10btree_nodeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16clear_and_deleteEPSD_PSB_(%"class.absl::container_internal::btree_node"* %76, %"class.std::__1::allocator"* %52)
  %133 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 1
  %134 = bitcast %"class.absl::container_internal::btree_node"** %133 to i8**
  store i8* %67, i8** %134, align 8
  %135 = bitcast %"class.absl::container_internal::btree"* %0 to i8**
  store i8* %67, i8** %135, align 8
  br label %138

136:                                              ; preds = %57
  call void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE18rebalance_or_splitEPNS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EE(%"class.absl::container_internal::btree"* %0, %"struct.absl::container_internal::btree_iterator.11"* nonnull %6)
  %137 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %7, align 8
  br label %138

138:                                              ; preds = %131, %136, %46
  %139 = phi %"class.absl::container_internal::btree_node"* [ %85, %131 ], [ %137, %136 ], [ %48, %46 ]
  %140 = load i32, i32* %8, align 8
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %139, i64 8, i32 0
  %143 = getelementptr inbounds i8, i8* %142, i64 2
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i64
  %146 = icmp sgt i64 %145, %141
  br i1 %146, label %147, label %204

147:                                              ; preds = %138
  %148 = sub nsw i64 %145, %141
  %149 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %139, i64 16, i32 0
  %150 = bitcast i8* %149 to %"class.quic::QuicInterval"*
  %151 = shl nuw nsw i64 %145, 32
  %152 = add nsw i64 %151, -4294967296
  %153 = ashr exact i64 %152, 32
  %154 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %150, i64 %153
  %155 = sub nsw i64 0, %148
  %156 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %154, i64 %155
  %157 = icmp eq i64 %148, 0
  br i1 %157, label %204, label %158

158:                                              ; preds = %147
  %159 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %150, i64 %145
  %160 = shl nuw nsw i64 %145, 4
  %161 = add nsw i64 %160, -16
  %162 = shl nsw i64 %141, 4
  %163 = sub nsw i64 %161, %162
  %164 = lshr exact i64 %163, 4
  %165 = add nuw nsw i64 %164, 1
  %166 = and i64 %165, 3
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %178, label %168

168:                                              ; preds = %158, %168
  %169 = phi %"class.quic::QuicInterval"* [ %175, %168 ], [ %159, %158 ]
  %170 = phi %"class.quic::QuicInterval"* [ %174, %168 ], [ %154, %158 ]
  %171 = phi i64 [ %176, %168 ], [ %166, %158 ]
  %172 = bitcast %"class.quic::QuicInterval"* %169 to i8*
  %173 = bitcast %"class.quic::QuicInterval"* %170 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %172, i8* align 8 %173, i64 16, i1 false) #13
  %174 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %170, i64 -1
  %175 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %169, i64 -1
  %176 = add i64 %171, -1
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %168, !llvm.loop !65

178:                                              ; preds = %168, %158
  %179 = phi %"class.quic::QuicInterval"* [ %159, %158 ], [ %175, %168 ]
  %180 = phi %"class.quic::QuicInterval"* [ %154, %158 ], [ %174, %168 ]
  %181 = icmp ult i64 %163, 48
  br i1 %181, label %202, label %182

182:                                              ; preds = %178, %182
  %183 = phi %"class.quic::QuicInterval"* [ %200, %182 ], [ %179, %178 ]
  %184 = phi %"class.quic::QuicInterval"* [ %199, %182 ], [ %180, %178 ]
  %185 = bitcast %"class.quic::QuicInterval"* %183 to i8*
  %186 = bitcast %"class.quic::QuicInterval"* %184 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %185, i8* align 8 %186, i64 16, i1 false) #13
  %187 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %184, i64 -1
  %188 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %183, i64 -1
  %189 = bitcast %"class.quic::QuicInterval"* %188 to i8*
  %190 = bitcast %"class.quic::QuicInterval"* %187 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %189, i8* align 8 %190, i64 16, i1 false) #13
  %191 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %184, i64 -2
  %192 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %183, i64 -2
  %193 = bitcast %"class.quic::QuicInterval"* %192 to i8*
  %194 = bitcast %"class.quic::QuicInterval"* %191 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %193, i8* align 8 %194, i64 16, i1 false) #13
  %195 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %184, i64 -3
  %196 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %183, i64 -3
  %197 = bitcast %"class.quic::QuicInterval"* %196 to i8*
  %198 = bitcast %"class.quic::QuicInterval"* %195 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %197, i8* align 8 %198, i64 16, i1 false) #13
  %199 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %184, i64 -4
  %200 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %183, i64 -4
  %201 = icmp eq %"class.quic::QuicInterval"* %199, %156
  br i1 %201, label %202, label %182

202:                                              ; preds = %182, %178
  %203 = load i8, i8* %143, align 1
  br label %204

204:                                              ; preds = %138, %202, %147
  %205 = phi i8 [ %203, %202 ], [ %144, %147 ], [ %144, %138 ]
  %206 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %139, i64 16, i32 0
  %207 = bitcast i8* %206 to %"class.quic::QuicInterval"*
  %208 = and i64 %141, 255
  %209 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %207, i64 %208
  %210 = bitcast %"class.quic::QuicInterval"* %209 to i8*
  %211 = bitcast %"class.quic::QuicInterval"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %210, i8* align 8 %211, i64 16, i1 false) #13
  %212 = add i8 %205, 1
  store i8 %212, i8* %143, align 1
  %213 = getelementptr inbounds i8, i8* %142, i64 3
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 0
  br i1 %215, label %216, label %270

216:                                              ; preds = %204
  %217 = zext i8 %212 to i64
  %218 = add nsw i64 %141, 1
  %219 = icmp slt i64 %218, %217
  br i1 %219, label %220, label %270

220:                                              ; preds = %216
  %221 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %139, i64 256, i32 0
  %222 = bitcast i8* %221 to %"class.absl::container_internal::btree_node"**
  %223 = xor i64 %141, 3
  %224 = add nsw i64 %223, %217
  %225 = add nsw i64 %217, -2
  %226 = sub nsw i64 %225, %141
  %227 = and i64 %224, 3
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %240, label %229

229:                                              ; preds = %220, %229
  %230 = phi i64 [ %232, %229 ], [ %217, %220 ]
  %231 = phi i64 [ %238, %229 ], [ %227, %220 ]
  %232 = add nsw i64 %230, -1
  %233 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %232
  %234 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %233, align 8
  %235 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %230
  store %"class.absl::container_internal::btree_node"* %234, %"class.absl::container_internal::btree_node"** %235, align 8
  %236 = trunc i64 %230 to i8
  %237 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %234, i64 8, i32 0
  store i8 %236, i8* %237, align 1
  %238 = add i64 %231, -1
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %240, label %229, !llvm.loop !66

240:                                              ; preds = %229, %220
  %241 = phi i64 [ %217, %220 ], [ %232, %229 ]
  %242 = icmp ult i64 %226, 3
  br i1 %242, label %270, label %243

243:                                              ; preds = %240, %243
  %244 = phi i64 [ %263, %243 ], [ %241, %240 ]
  %245 = add nsw i64 %244, -1
  %246 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %245
  %247 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %246, align 8
  %248 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %244
  store %"class.absl::container_internal::btree_node"* %247, %"class.absl::container_internal::btree_node"** %248, align 8
  %249 = trunc i64 %244 to i8
  %250 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %247, i64 8, i32 0
  store i8 %249, i8* %250, align 1
  %251 = add nsw i64 %244, -2
  %252 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %251
  %253 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %252, align 8
  %254 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %245
  store %"class.absl::container_internal::btree_node"* %253, %"class.absl::container_internal::btree_node"** %254, align 8
  %255 = trunc i64 %245 to i8
  %256 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %253, i64 8, i32 0
  store i8 %255, i8* %256, align 1
  %257 = add nsw i64 %244, -3
  %258 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %257
  %259 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %258, align 8
  %260 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %251
  store %"class.absl::container_internal::btree_node"* %259, %"class.absl::container_internal::btree_node"** %260, align 8
  %261 = trunc i64 %251 to i8
  %262 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %259, i64 8, i32 0
  store i8 %261, i8* %262, align 1
  %263 = add nsw i64 %244, -4
  %264 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %263
  %265 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %264, align 8
  %266 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %222, i64 %257
  store %"class.absl::container_internal::btree_node"* %265, %"class.absl::container_internal::btree_node"** %266, align 8
  %267 = trunc i64 %257 to i8
  %268 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %265, i64 8, i32 0
  store i8 %267, i8* %268, align 1
  %269 = icmp slt i64 %218, %263
  br i1 %269, label %243, label %270

270:                                              ; preds = %240, %243, %204, %216
  %271 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %0, i64 0, i32 2
  %272 = load i64, i64* %271, align 8
  %273 = add nsw i64 %272, 1
  store i64 %273, i64* %271, align 8
  %274 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %7, align 8
  %275 = load i32, i32* %8, align 8
  %276 = insertvalue { %"class.absl::container_internal::btree_node"*, i32 } undef, %"class.absl::container_internal::btree_node"* %274, 0
  %277 = insertvalue { %"class.absl::container_internal::btree_node"*, i32 } %276, i32 %275, 1
  ret { %"class.absl::container_internal::btree_node"*, i32 } %277
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE13insert_uniqueIS5_JS5_EEENS9_4pairINS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EEbEERKT_DpOT0_(%"struct.std::__1::pair"* noalias sret, %"class.absl::container_internal::btree"*, %"class.quic::QuicInterval"* dereferenceable(16), %"class.quic::QuicInterval"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %18

8:                                                ; preds = %4
  %9 = tail call i8* @_Znwm(i64 32) #12
  %10 = bitcast i8* %9 to i8**
  store i8* %9, i8** %10, align 8
  %11 = getelementptr inbounds i8, i8* %9, i64 8
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds i8, i8* %9, i64 9
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds i8, i8* %9, i64 10
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds i8, i8* %9, i64 11
  store i8 1, i8* %14, align 1
  %15 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 1
  %16 = bitcast %"class.absl::container_internal::btree_node"** %15 to i8**
  store i8* %9, i8** %16, align 8
  %17 = bitcast %"class.absl::container_internal::btree"* %1 to i8**
  store i8* %9, i8** %17, align 8
  br label %18

18:                                               ; preds = %8, %4
  %19 = getelementptr inbounds %"class.absl::container_internal::btree", %"class.absl::container_internal::btree"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %2, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  br label %22

22:                                               ; preds = %54, %18
  %23 = phi %"class.absl::container_internal::btree_node"** [ %19, %18 ], [ %58, %54 ]
  %24 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %23, align 8
  %25 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %24, i64 8, i32 0
  %26 = getelementptr inbounds i8, i8* %25, i64 2
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %46, label %29

29:                                               ; preds = %22
  %30 = zext i8 %27 to i32
  %31 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %24, i64 16, i32 0
  %32 = bitcast i8* %31 to %"class.quic::QuicInterval"*
  br label %33

33:                                               ; preds = %33, %29
  %34 = phi i32 [ 0, %29 ], [ %44, %33 ]
  %35 = phi i32 [ %30, %29 ], [ %43, %33 ]
  %36 = add nsw i32 %35, %34
  %37 = ashr i32 %36, 1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %32, i64 %38, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = icmp ult i64 %40, %21
  %42 = add nsw i32 %37, 1
  %43 = select i1 %41, i32 %35, i32 %37
  %44 = select i1 %41, i32 %42, i32 %34
  %45 = icmp eq i32 %44, %43
  br i1 %45, label %46, label %33

46:                                               ; preds = %33, %22
  %47 = phi i32 [ 0, %22 ], [ %43, %33 ]
  %48 = getelementptr inbounds i8, i8* %25, i64 3
  %49 = load i8, i8* %48, align 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %54, label %51

51:                                               ; preds = %46
  %52 = zext i8 %27 to i32
  %53 = icmp eq i32 %47, %52
  br i1 %53, label %59, label %75

54:                                               ; preds = %46
  %55 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %24, i64 256, i32 0
  %56 = bitcast i8* %55 to %"class.absl::container_internal::btree_node"**
  %57 = sext i32 %47 to i64
  %58 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %56, i64 %57
  br label %22

59:                                               ; preds = %51, %67
  %60 = phi %"class.absl::container_internal::btree_node"* [ %62, %67 ], [ %24, %51 ]
  %61 = bitcast %"class.absl::container_internal::btree_node"* %60 to %"class.absl::container_internal::btree_node"**
  %62 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %61, align 8
  %63 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %62, i64 8, i32 0
  %64 = getelementptr inbounds i8, i8* %63, i64 3
  %65 = load i8, i8* %64, align 1
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %67, label %92

67:                                               ; preds = %59
  %68 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %60, i64 8, i32 0
  %69 = load i8, i8* %68, align 1
  %70 = getelementptr inbounds i8, i8* %63, i64 2
  %71 = load i8, i8* %70, align 1
  %72 = icmp eq i8 %69, %71
  br i1 %72, label %59, label %73

73:                                               ; preds = %67
  %74 = zext i8 %69 to i32
  br label %75

75:                                               ; preds = %73, %51
  %76 = phi i32 [ %74, %73 ], [ %47, %51 ]
  %77 = phi %"class.absl::container_internal::btree_node"* [ %62, %73 ], [ %24, %51 ]
  %78 = icmp eq %"class.absl::container_internal::btree_node"* %77, null
  br i1 %78, label %92, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %77, i64 16, i32 0
  %81 = bitcast i8* %80 to %"class.quic::QuicInterval"*
  %82 = sext i32 %76 to i64
  %83 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %81, i64 %82, i32 0
  %84 = load i64, i64* %83, align 8
  %85 = icmp ult i64 %21, %84
  br i1 %85, label %92, label %86

86:                                               ; preds = %79
  %87 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 0
  store %"class.absl::container_internal::btree_node"* %77, %"class.absl::container_internal::btree_node"** %87, align 8
  %88 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 1
  store i32 %76, i32* %88, align 8
  %89 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 2, i64 0
  %90 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  %91 = bitcast i8* %89 to i32*
  store i32 -1431655766, i32* %91, align 4
  store i8 0, i8* %90, align 8
  br label %99

92:                                               ; preds = %59, %79, %75
  %93 = tail call { %"class.absl::container_internal::btree_node"*, i32 } @_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE16internal_emplaceIJS5_EEENS0_14btree_iteratorINS0_10btree_nodeISC_EERS5_PS5_EESK_DpOT_(%"class.absl::container_internal::btree"* %1, %"class.absl::container_internal::btree_node"* %24, i32 %47, %"class.quic::QuicInterval"* dereferenceable(16) %3)
  %94 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %93, 0
  %95 = extractvalue { %"class.absl::container_internal::btree_node"*, i32 } %93, 1
  %96 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 0
  store %"class.absl::container_internal::btree_node"* %94, %"class.absl::container_internal::btree_node"** %96, align 8
  %97 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 1
  store i32 %95, i32* %97, align 8
  %98 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  store i8 1, i8* %98, align 8
  br label %99

99:                                               ; preds = %86, %92
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #4

declare void @_ZN4absl16strings_internal9CatPiecesESt16initializer_listINS_11string_viewEE(%"class.std::__1::basic_string"* sret, %"class.absl::string_view"*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN4quiclsImEEDTlsfp_decldtfp0_5beginEERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEERKNS_15QuicIntervalSetIT_EE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.quic::QuicIntervalSet"* dereferenceable(24)) local_unnamed_addr #0 comdat {
  %3 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i64 0, i64 0), i64 1) #13
  %4 = bitcast %"class.quic::QuicIntervalSet"* %1 to i64**
  %5 = load i64*, i64** %4, align 8
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.quic::QuicIntervalSet", %"class.quic::QuicIntervalSet"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %8 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %7, align 8
  %9 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %8, i64 8, i32 0
  %10 = getelementptr inbounds i8, i8* %9, i64 2
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = inttoptr i64 %6 to %"class.absl::container_internal::btree_node"*
  %14 = icmp ne %"class.absl::container_internal::btree_node"* %8, %13
  %15 = icmp ne i8 %11, 0
  %16 = or i1 %14, %15
  br i1 %16, label %19, label %17

17:                                               ; preds = %96, %2
  %18 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i64 0, i64 0), i64 2) #13
  ret %"class.std::__1::basic_ostream"* %0

19:                                               ; preds = %2, %96
  %20 = phi %"class.absl::container_internal::btree_node"* [ %99, %96 ], [ %13, %2 ]
  %21 = phi i32 [ %98, %96 ], [ 0, %2 ]
  %22 = phi i64 [ %97, %96 ], [ %6, %2 ]
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %25, !prof !10

24:                                               ; preds = %19
  tail call void @llvm.trap() #13
  unreachable

25:                                               ; preds = %19
  %26 = icmp slt i32 %21, 0
  br i1 %26, label %27, label %28, !prof !10

27:                                               ; preds = %25
  tail call void @llvm.trap() #13
  unreachable

28:                                               ; preds = %25
  %29 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %20, i64 8, i32 0
  %30 = getelementptr inbounds i8, i8* %29, i64 2
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = icmp slt i32 %21, %32
  br i1 %33, label %35, label %34, !prof !11

34:                                               ; preds = %28
  tail call void @llvm.trap() #13
  unreachable

35:                                               ; preds = %28
  %36 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %20, i64 16, i32 0
  %37 = bitcast i8* %36 to %"class.quic::QuicInterval"*
  %38 = sext i32 %21 to i64
  %39 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.23, i64 0, i64 0), i64 1) #13
  %40 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %39, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0), i64 1) #13
  %41 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %37, i64 %38, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"* %40, i64 %42) #13
  %44 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i64 0, i64 0), i64 2) #13
  %45 = getelementptr inbounds %"class.quic::QuicInterval", %"class.quic::QuicInterval"* %37, i64 %38, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"* %44, i64 %46) #13
  %48 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %47, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0), i64 1) #13
  %49 = getelementptr inbounds i8, i8* %29, i64 3
  %50 = load i8, i8* %49, align 1
  %51 = icmp eq i8 %50, 0
  %52 = add nuw nsw i32 %21, 1
  br i1 %51, label %71, label %53

53:                                               ; preds = %35
  %54 = load i8, i8* %30, align 1
  %55 = zext i8 %54 to i32
  %56 = icmp eq i32 %52, %55
  br i1 %56, label %57, label %96

57:                                               ; preds = %53, %66
  %58 = phi i8* [ %62, %66 ], [ %29, %53 ]
  %59 = phi %"class.absl::container_internal::btree_node"* [ %61, %66 ], [ %20, %53 ]
  %60 = bitcast %"class.absl::container_internal::btree_node"* %59 to %"class.absl::container_internal::btree_node"**
  %61 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %60, align 8
  %62 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %61, i64 8, i32 0
  %63 = getelementptr inbounds i8, i8* %62, i64 3
  %64 = load i8, i8* %63, align 1
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %66, label %96

66:                                               ; preds = %57
  %67 = load i8, i8* %58, align 1
  %68 = getelementptr inbounds i8, i8* %62, i64 2
  %69 = load i8, i8* %68, align 1
  %70 = icmp eq i8 %67, %69
  br i1 %70, label %57, label %93

71:                                               ; preds = %35
  %72 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %20, i64 256, i32 0
  %73 = bitcast i8* %72 to %"class.absl::container_internal::btree_node"**
  %74 = sext i32 %52 to i64
  %75 = getelementptr inbounds %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %73, i64 %74
  %76 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %75, align 8
  %77 = ptrtoint %"class.absl::container_internal::btree_node"* %76 to i64
  %78 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %76, i64 8, i32 0
  %79 = getelementptr inbounds i8, i8* %78, i64 3
  %80 = load i8, i8* %79, align 1
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %82, label %96

82:                                               ; preds = %71, %82
  %83 = phi %"class.absl::container_internal::btree_node"* [ %86, %82 ], [ %76, %71 ]
  %84 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %83, i64 256, i32 0
  %85 = bitcast i8* %84 to %"class.absl::container_internal::btree_node"**
  %86 = load %"class.absl::container_internal::btree_node"*, %"class.absl::container_internal::btree_node"** %85, align 8
  %87 = getelementptr inbounds %"class.absl::container_internal::btree_node", %"class.absl::container_internal::btree_node"* %86, i64 8, i32 0
  %88 = getelementptr inbounds i8, i8* %87, i64 3
  %89 = load i8, i8* %88, align 1
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %82, label %91

91:                                               ; preds = %82
  %92 = ptrtoint %"class.absl::container_internal::btree_node"* %86 to i64
  br label %96

93:                                               ; preds = %66
  %94 = ptrtoint %"class.absl::container_internal::btree_node"* %61 to i64
  %95 = zext i8 %67 to i32
  br label %96

96:                                               ; preds = %57, %93, %91, %53, %71
  %97 = phi i64 [ %22, %53 ], [ %77, %71 ], [ %92, %91 ], [ %94, %93 ], [ %22, %57 ]
  %98 = phi i32 [ %52, %53 ], [ 0, %71 ], [ 0, %91 ], [ %95, %93 ], [ %52, %57 ]
  %99 = inttoptr i64 %97 to %"class.absl::container_internal::btree_node"*
  %100 = icmp ne %"class.absl::container_internal::btree_node"* %8, %99
  %101 = icmp ne i32 %98, %12
  %102 = or i1 %100, %101
  br i1 %102, label %19, label %17
}

declare void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"*, i8*) local_unnamed_addr #2

declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"*, i64) local_unnamed_addr #2

declare void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string"* sret, %"class.std::__1::basic_stringbuf"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"*, i8**) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { cold noreturn nounwind }
attributes #11 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { builtin nounwind }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4, !6, !8}
!4 = distinct !{!4, !5, !"_ZNK4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE6rbeginEv: argument 0"}
!5 = distinct !{!5, !"_ZNK4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE6rbeginEv"}
!6 = distinct !{!6, !7, !"_ZNK4absl18container_internal15btree_containerINS0_5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS4_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS6_EELi256ELb0EEEEEE6rbeginEv: argument 0"}
!7 = distinct !{!7, !"_ZNK4absl18container_internal15btree_containerINS0_5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS4_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS6_EELi256ELb0EEEEEE6rbeginEv"}
!8 = distinct !{!8, !9, !"_ZNK4quic15QuicIntervalSetImE6rbeginEv: argument 0"}
!9 = distinct !{!9, !"_ZNK4quic15QuicIntervalSetImE6rbeginEv"}
!10 = !{!"branch_weights", i32 1, i32 2000}
!11 = !{!"branch_weights", i32 2000, i32 1}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN4absl6StrCatIJmEEENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_8AlphaNumESA_SA_SA_SA_DpRKT_: argument 0"}
!14 = distinct !{!14, !"_ZN4absl6StrCatIJmEEENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_8AlphaNumESA_SA_SA_SA_DpRKT_"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN4absl6StrCatIJNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEES7_RKNS_8AlphaNumESA_SA_SA_SA_DpRKT_: argument 0"}
!17 = distinct !{!17, !"_ZN4absl6StrCatIJNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEES7_RKNS_8AlphaNumESA_SA_SA_SA_DpRKT_"}
!18 = !{!19, !21, !23}
!19 = distinct !{!19, !20, !"_ZNK4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE6rbeginEv: argument 0"}
!20 = distinct !{!20, !"_ZNK4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE6rbeginEv"}
!21 = distinct !{!21, !22, !"_ZNK4absl18container_internal15btree_containerINS0_5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS4_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS6_EELi256ELb0EEEEEE6rbeginEv: argument 0"}
!22 = distinct !{!22, !"_ZNK4absl18container_internal15btree_containerINS0_5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS4_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS6_EELi256ELb0EEEEEE6rbeginEv"}
!23 = distinct !{!23, !24, !"_ZNK4quic15QuicIntervalSetImE6rbeginEv: argument 0"}
!24 = distinct !{!24, !"_ZNK4quic15QuicIntervalSetImE6rbeginEv"}
!25 = !{!26, !28, !30}
!26 = distinct !{!26, !27, !"_ZNK4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE6rbeginEv: argument 0"}
!27 = distinct !{!27, !"_ZNK4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE6rbeginEv"}
!28 = distinct !{!28, !29, !"_ZNK4absl18container_internal15btree_containerINS0_5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS4_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS6_EELi256ELb0EEEEEE6rbeginEv: argument 0"}
!29 = distinct !{!29, !"_ZNK4absl18container_internal15btree_containerINS0_5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS4_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS6_EELi256ELb0EEEEEE6rbeginEv"}
!30 = distinct !{!30, !31, !"_ZNK4quic15QuicIntervalSetImE6rbeginEv: argument 0"}
!31 = distinct !{!31, !"_ZNK4quic15QuicIntervalSetImE6rbeginEv"}
!32 = !{!33, !35, !37}
!33 = distinct !{!33, !34, !"_ZNK4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE6rbeginEv: argument 0"}
!34 = distinct !{!34, !"_ZNK4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE6rbeginEv"}
!35 = distinct !{!35, !36, !"_ZNK4absl18container_internal15btree_containerINS0_5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS4_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS6_EELi256ELb0EEEEEE6rbeginEv: argument 0"}
!36 = distinct !{!36, !"_ZNK4absl18container_internal15btree_containerINS0_5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS4_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS6_EELi256ELb0EEEEEE6rbeginEv"}
!37 = distinct !{!37, !38, !"_ZNK4quic15QuicIntervalSetImE6rbeginEv: argument 0"}
!38 = distinct !{!38, !"_ZNK4quic15QuicIntervalSetImE6rbeginEv"}
!39 = distinct !{!39, !40}
!40 = !{!"llvm.loop.unroll.disable"}
!41 = distinct !{!41, !40}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !40}
!44 = distinct !{!44, !40}
!45 = distinct !{!45, !40}
!46 = distinct !{!46, !40}
!47 = distinct !{!47, !40}
!48 = distinct !{!48, !40}
!49 = distinct !{!49, !40}
!50 = distinct !{!50, !40}
!51 = distinct !{!51, !40}
!52 = distinct !{!52, !40}
!53 = distinct !{!53, !40}
!54 = distinct !{!54, !40}
!55 = distinct !{!55, !40}
!56 = distinct !{!56, !40}
!57 = distinct !{!57, !40}
!58 = distinct !{!58, !40}
!59 = !{!60, !62}
!60 = distinct !{!60, !61, !"_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE6rbeginEv: argument 0"}
!61 = distinct !{!61, !"_ZN4absl18container_internal5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS3_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS5_EELi256ELb0EEEE6rbeginEv"}
!62 = distinct !{!62, !63, !"_ZN4absl18container_internal15btree_containerINS0_5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS4_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS6_EELi256ELb0EEEEEE6rbeginEv: argument 0"}
!63 = distinct !{!63, !"_ZN4absl18container_internal15btree_containerINS0_5btreeINS0_10set_paramsIN4quic12QuicIntervalImEENS4_15QuicIntervalSetImE12IntervalLessENSt3__19allocatorIS6_EELi256ELb0EEEEEE6rbeginEv"}
!64 = distinct !{!64, !40}
!65 = distinct !{!65, !40}
!66 = distinct !{!66, !40}
