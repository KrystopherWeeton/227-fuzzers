; ModuleID = '../../net/third_party/quiche/src/spdy/core/spdy_prefixed_buffer_reader.cc'
source_filename = "../../net/third_party/quiche/src/spdy/core/spdy_prefixed_buffer_reader.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.spdy::SpdyPrefixedBufferReader" = type { i8*, i8*, i64, i64 }
%"struct.spdy::SpdyPinnableBufferPiece" = type { i8*, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }

@_ZN4spdy24SpdyPrefixedBufferReaderC1EPKcmS2_m = hidden unnamed_addr alias void (%"class.spdy::SpdyPrefixedBufferReader"*, i8*, i64, i8*, i64), void (%"class.spdy::SpdyPrefixedBufferReader"*, i8*, i64, i8*, i64)* @_ZN4spdy24SpdyPrefixedBufferReaderC2EPKcmS2_m

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4spdy24SpdyPrefixedBufferReaderC2EPKcmS2_m(%"class.spdy::SpdyPrefixedBufferReader"* nocapture, i8*, i64, i8*, i64) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.spdy::SpdyPrefixedBufferReader", %"class.spdy::SpdyPrefixedBufferReader"* %0, i64 0, i32 0
  store i8* %1, i8** %6, align 8
  %7 = getelementptr inbounds %"class.spdy::SpdyPrefixedBufferReader", %"class.spdy::SpdyPrefixedBufferReader"* %0, i64 0, i32 1
  store i8* %3, i8** %7, align 8
  %8 = getelementptr inbounds %"class.spdy::SpdyPrefixedBufferReader", %"class.spdy::SpdyPrefixedBufferReader"* %0, i64 0, i32 2
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %"class.spdy::SpdyPrefixedBufferReader", %"class.spdy::SpdyPrefixedBufferReader"* %0, i64 0, i32 3
  store i64 %4, i64* %9, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN4spdy24SpdyPrefixedBufferReader9AvailableEv(%"class.spdy::SpdyPrefixedBufferReader"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.spdy::SpdyPrefixedBufferReader", %"class.spdy::SpdyPrefixedBufferReader"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.spdy::SpdyPrefixedBufferReader", %"class.spdy::SpdyPrefixedBufferReader"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, %3
  ret i64 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4spdy24SpdyPrefixedBufferReader5ReadNEmPc(%"class.spdy::SpdyPrefixedBufferReader"* nocapture, i64, i8* nocapture) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.spdy::SpdyPrefixedBufferReader", %"class.spdy::SpdyPrefixedBufferReader"* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.spdy::SpdyPrefixedBufferReader", %"class.spdy::SpdyPrefixedBufferReader"* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, %5
  %9 = icmp ult i64 %8, %1
  br i1 %9, label %50, label %10

10:                                               ; preds = %3
  %11 = icmp ult i64 %5, %1
  br i1 %11, label %23, label %12

12:                                               ; preds = %10
  %13 = getelementptr inbounds %"class.spdy::SpdyPrefixedBufferReader", %"class.spdy::SpdyPrefixedBufferReader"* %0, i64 0, i32 0
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %12
  %16 = load i8*, i8** %13, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %16, i64 %1, i1 false) #6
  %17 = load i64, i64* %4, align 8
  br label %18

18:                                               ; preds = %12, %15
  %19 = phi i64 [ %5, %12 ], [ %17, %15 ]
  %20 = load i8*, i8** %13, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  store i8* %21, i8** %13, align 8
  %22 = sub i64 %19, %1
  br label %47

23:                                               ; preds = %10
  %24 = icmp eq i64 %5, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %23
  %26 = getelementptr inbounds %"class.spdy::SpdyPrefixedBufferReader", %"class.spdy::SpdyPrefixedBufferReader"* %0, i64 0, i32 1
  br label %35

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.spdy::SpdyPrefixedBufferReader", %"class.spdy::SpdyPrefixedBufferReader"* %0, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %29, i64 %5, i1 false) #6
  %30 = getelementptr inbounds i8, i8* %2, i64 %5
  %31 = load i64, i64* %4, align 8
  %32 = sub i64 %1, %31
  store i64 0, i64* %4, align 8
  %33 = getelementptr inbounds %"class.spdy::SpdyPrefixedBufferReader", %"class.spdy::SpdyPrefixedBufferReader"* %0, i64 0, i32 1
  %34 = icmp eq i64 %32, 0
  br i1 %34, label %40, label %35

35:                                               ; preds = %25, %27
  %36 = phi i8** [ %26, %25 ], [ %33, %27 ]
  %37 = phi i8* [ %2, %25 ], [ %30, %27 ]
  %38 = phi i64 [ %1, %25 ], [ %32, %27 ]
  %39 = load i8*, i8** %36, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %39, i64 %38, i1 false) #6
  br label %40

40:                                               ; preds = %27, %35
  %41 = phi i8** [ %33, %27 ], [ %36, %35 ]
  %42 = phi i64 [ 0, %27 ], [ %38, %35 ]
  %43 = load i8*, i8** %41, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 %42
  store i8* %44, i8** %41, align 8
  %45 = load i64, i64* %6, align 8
  %46 = sub i64 %45, %42
  br label %47

47:                                               ; preds = %18, %40
  %48 = phi i64* [ %6, %40 ], [ %4, %18 ]
  %49 = phi i64 [ %46, %40 ], [ %22, %18 ]
  store i64 %49, i64* %48, align 8
  br label %50

50:                                               ; preds = %47, %3
  %51 = phi i1 [ false, %3 ], [ true, %47 ]
  ret i1 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4spdy24SpdyPrefixedBufferReader5ReadNEmPNS_23SpdyPinnableBufferPieceE(%"class.spdy::SpdyPrefixedBufferReader"* nocapture, i64, %"struct.spdy::SpdyPinnableBufferPiece"* nocapture) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.spdy::SpdyPrefixedBufferReader", %"class.spdy::SpdyPrefixedBufferReader"* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.spdy::SpdyPrefixedBufferReader", %"class.spdy::SpdyPrefixedBufferReader"* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, %5
  %9 = icmp ult i64 %8, %1
  br i1 %9, label %85, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"struct.spdy::SpdyPinnableBufferPiece", %"struct.spdy::SpdyPinnableBufferPiece"* %2, i64 0, i32 2, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  store i8* null, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %10
  tail call void @_ZdaPv(i8* nonnull %12) #7
  br label %15

15:                                               ; preds = %10, %14
  %16 = getelementptr inbounds %"struct.spdy::SpdyPinnableBufferPiece", %"struct.spdy::SpdyPinnableBufferPiece"* %2, i64 0, i32 1
  store i64 %1, i64* %16, align 8
  %17 = load i64, i64* %4, align 8
  %18 = icmp ult i64 %17, %1
  br i1 %18, label %28, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.spdy::SpdyPrefixedBufferReader", %"class.spdy::SpdyPrefixedBufferReader"* %0, i64 0, i32 0
  %21 = bitcast %"class.spdy::SpdyPrefixedBufferReader"* %0 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"struct.spdy::SpdyPinnableBufferPiece"* %2 to i64*
  store i64 %22, i64* %23, align 8
  %24 = load i8*, i8** %20, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  store i8* %25, i8** %20, align 8
  %26 = load i64, i64* %4, align 8
  %27 = sub i64 %26, %1
  store i64 %27, i64* %4, align 8
  br label %85

28:                                               ; preds = %15
  %29 = icmp eq i64 %17, 0
  br i1 %29, label %76, label %30

30:                                               ; preds = %28
  %31 = tail call i8* @_Znam(i64 %1) #7
  %32 = load i8*, i8** %11, align 8
  store i8* %31, i8** %11, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %36, label %34

34:                                               ; preds = %30
  tail call void @_ZdaPv(i8* nonnull %32) #7
  %35 = load i8*, i8** %11, align 8
  br label %36

36:                                               ; preds = %30, %34
  %37 = phi i8* [ %31, %30 ], [ %35, %34 ]
  %38 = getelementptr inbounds %"struct.spdy::SpdyPinnableBufferPiece", %"struct.spdy::SpdyPinnableBufferPiece"* %2, i64 0, i32 0
  store i8* %37, i8** %38, align 8
  %39 = load i64, i64* %4, align 8
  %40 = load i64, i64* %6, align 8
  %41 = add i64 %40, %39
  %42 = icmp ult i64 %41, %1
  br i1 %42, label %85, label %43

43:                                               ; preds = %36
  %44 = icmp ult i64 %39, %1
  br i1 %44, label %52, label %45

45:                                               ; preds = %43
  %46 = getelementptr inbounds %"class.spdy::SpdyPrefixedBufferReader", %"class.spdy::SpdyPrefixedBufferReader"* %0, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %47, i64 %1, i1 false) #6
  %48 = load i64, i64* %4, align 8
  %49 = load i8*, i8** %46, align 8
  %50 = getelementptr inbounds i8, i8* %49, i64 %1
  store i8* %50, i8** %46, align 8
  %51 = sub i64 %48, %1
  store i64 %51, i64* %4, align 8
  br label %85

52:                                               ; preds = %43
  %53 = icmp eq i64 %39, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %52
  %55 = getelementptr inbounds %"class.spdy::SpdyPrefixedBufferReader", %"class.spdy::SpdyPrefixedBufferReader"* %0, i64 0, i32 1
  br label %64

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.spdy::SpdyPrefixedBufferReader", %"class.spdy::SpdyPrefixedBufferReader"* %0, i64 0, i32 0
  %58 = load i8*, i8** %57, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %58, i64 %39, i1 false) #6
  %59 = getelementptr inbounds i8, i8* %37, i64 %39
  %60 = load i64, i64* %4, align 8
  %61 = sub i64 %1, %60
  store i64 0, i64* %4, align 8
  %62 = getelementptr inbounds %"class.spdy::SpdyPrefixedBufferReader", %"class.spdy::SpdyPrefixedBufferReader"* %0, i64 0, i32 1
  %63 = icmp eq i64 %61, 0
  br i1 %63, label %69, label %64

64:                                               ; preds = %56, %54
  %65 = phi i8** [ %55, %54 ], [ %62, %56 ]
  %66 = phi i8* [ %37, %54 ], [ %59, %56 ]
  %67 = phi i64 [ %1, %54 ], [ %61, %56 ]
  %68 = load i8*, i8** %65, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %66, i8* align 1 %68, i64 %67, i1 false) #6
  br label %69

69:                                               ; preds = %64, %56
  %70 = phi i8** [ %62, %56 ], [ %65, %64 ]
  %71 = phi i64 [ 0, %56 ], [ %67, %64 ]
  %72 = load i8*, i8** %70, align 8
  %73 = getelementptr inbounds i8, i8* %72, i64 %71
  store i8* %73, i8** %70, align 8
  %74 = load i64, i64* %6, align 8
  %75 = sub i64 %74, %71
  store i64 %75, i64* %6, align 8
  br label %85

76:                                               ; preds = %28
  %77 = getelementptr inbounds %"class.spdy::SpdyPrefixedBufferReader", %"class.spdy::SpdyPrefixedBufferReader"* %0, i64 0, i32 1
  %78 = bitcast i8** %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = bitcast %"struct.spdy::SpdyPinnableBufferPiece"* %2 to i64*
  store i64 %79, i64* %80, align 8
  %81 = load i8*, i8** %77, align 8
  %82 = getelementptr inbounds i8, i8* %81, i64 %1
  store i8* %82, i8** %77, align 8
  %83 = load i64, i64* %6, align 8
  %84 = sub i64 %83, %1
  store i64 %84, i64* %6, align 8
  br label %85

85:                                               ; preds = %69, %45, %36, %3, %76, %19
  %86 = phi i1 [ true, %19 ], [ true, %76 ], [ false, %3 ], [ true, %36 ], [ true, %45 ], [ true, %69 ]
  ret i1 %86
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
