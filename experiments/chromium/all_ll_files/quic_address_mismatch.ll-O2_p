; ModuleID = '../../net/quic/quic_address_mismatch.cc'
source_filename = "../../net/quic/quic_address_mismatch.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.net::IPEndPoint" = type { %"class.net::IPAddress", i16 }
%"class.net::IPAddress" = type { %"class.net::IPAddressBytes" }
%"class.net::IPAddressBytes" = type { %"struct.std::__1::array", i8 }
%"struct.std::__1::array" = type { [16 x i8] }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

$_ZZN7logging15CheckOpValueStrIN3net19QuicAddressMismatchEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_ = comdat any

@.str = private unnamed_addr constant [37 x i8] c"sample == QUIC_ADDRESS_MISMATCH_BASE\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"../../net/quic/quic_address_mismatch.cc\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3net18GetAddressMismatchERKNS_10IPEndPointES2_(%"class.net::IPEndPoint"* dereferenceable(20), %"class.net::IPEndPoint"* dereferenceable(20)) local_unnamed_addr #0 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.net::IPAddress", align 1
  %5 = alloca %"class.net::IPAddress", align 1
  %6 = alloca %"class.net::IPAddress", align 1
  %7 = alloca %"class.net::IPAddress", align 1
  %8 = alloca %"class.logging::CheckOpResult", align 8
  %9 = alloca i32, align 4
  %10 = alloca %"class.logging::CheckError", align 8
  %11 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %0, i64 0, i32 0
  %12 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %0, i64 0, i32 0, i32 0, i32 1
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %67, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %1, i64 0, i32 0
  %17 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %1, i64 0, i32 0, i32 0, i32 1
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %67, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %21) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %21, i8 -86, i64 17, i1 false)
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* nonnull %4, %"class.net::IPAddress"* dereferenceable(17) %11) #5
  %22 = call zeroext i1 @_ZNK3net9IPAddress16IsIPv4MappedIPv6Ev(%"class.net::IPAddress"* nonnull %4) #5
  br i1 %22, label %23, label %25

23:                                               ; preds = %20
  %24 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %5, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %24) #5
  call void @_ZN3net27ConvertIPv4MappedIPv6ToIPv4ERKNS_9IPAddressE(%"class.net::IPAddress"* nonnull sret %5, %"class.net::IPAddress"* nonnull dereferenceable(17) %4) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %21, i8* nonnull align 1 %24, i64 17, i1 false)
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %24) #5
  br label %25

25:                                               ; preds = %23, %20
  %26 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %26) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %26, i8 -86, i64 17, i1 false)
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* nonnull %6, %"class.net::IPAddress"* dereferenceable(17) %16) #5
  %27 = call zeroext i1 @_ZNK3net9IPAddress16IsIPv4MappedIPv6Ev(%"class.net::IPAddress"* nonnull %6) #5
  br i1 %27, label %28, label %30

28:                                               ; preds = %25
  %29 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %29) #5
  call void @_ZN3net27ConvertIPv4MappedIPv6ToIPv4ERKNS_9IPAddressE(%"class.net::IPAddress"* nonnull sret %7, %"class.net::IPAddress"* nonnull dereferenceable(17) %6) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %26, i8* nonnull align 1 %29, i64 17, i1 false)
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %29) #5
  br label %30

30:                                               ; preds = %28, %25
  %31 = call zeroext i1 @_ZNK3net9IPAddressneERKS0_(%"class.net::IPAddress"* nonnull %4, %"class.net::IPAddress"* nonnull dereferenceable(17) %6) #5
  br i1 %31, label %39, label %32

32:                                               ; preds = %30
  %33 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %0, i64 0, i32 1
  %34 = load i16, i16* %33, align 2
  %35 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %1, i64 0, i32 1
  %36 = load i16, i16* %35, align 2
  %37 = icmp eq i16 %34, %36
  %38 = select i1 %37, i32 6, i32 4
  br label %39

39:                                               ; preds = %32, %30
  %40 = phi i32 [ 0, %30 ], [ %38, %32 ]
  %41 = call zeroext i1 @_ZNK3net9IPAddress6IsIPv4Ev(%"class.net::IPAddress"* nonnull %4) #5
  %42 = call zeroext i1 @_ZNK3net9IPAddress6IsIPv4Ev(%"class.net::IPAddress"* nonnull %6) #5
  %43 = xor i1 %41, %42
  br i1 %43, label %44, label %62

44:                                               ; preds = %39
  %45 = bitcast %"class.logging::CheckOpResult"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #5
  %46 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %8, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %46, align 8
  %47 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %47) #5
  store i32 0, i32* %9, align 4
  %48 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48)
  %49 = icmp eq i32 %40, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %44
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48)
  store i8* null, i8** %46, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %47) #5
  br label %60

51:                                               ; preds = %44
  %52 = call i8* @_ZN7logging15CheckOpValueStrEi(i32 %40) #5
  %53 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %47, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIN3net19QuicAddressMismatchEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i8* %52, i8* %53) #5
  %54 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48)
  store i8* %55, i8** %46, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %47) #5
  %56 = icmp eq i8* %55, null
  br i1 %56, label %60, label %57

57:                                               ; preds = %51
  %58 = bitcast %"class.logging::CheckError"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %10, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i32 42, %"class.logging::CheckOpResult"* nonnull %8) #5
  %59 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %10) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %58) #5
  br label %60

60:                                               ; preds = %50, %51, %57
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #5
  %61 = add nuw nsw i32 %40, 2
  br label %62

62:                                               ; preds = %60, %39
  %63 = phi i32 [ %61, %60 ], [ %40, %39 ]
  %64 = xor i1 %41, true
  %65 = zext i1 %64 to i32
  %66 = add nuw nsw i32 %63, %65
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %26) #5
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %21) #5
  br label %67

67:                                               ; preds = %2, %15, %62
  %68 = phi i32 [ %66, %62 ], [ -1, %15 ], [ -1, %2 ]
  ret i32 %68
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"*, %"class.net::IPAddress"* dereferenceable(17)) unnamed_addr #2

declare zeroext i1 @_ZNK3net9IPAddress16IsIPv4MappedIPv6Ev(%"class.net::IPAddress"*) local_unnamed_addr #2

declare void @_ZN3net27ConvertIPv4MappedIPv6ToIPv4ERKNS_9IPAddressE(%"class.net::IPAddress"* sret, %"class.net::IPAddress"* dereferenceable(17)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZNK3net9IPAddressneERKS0_(%"class.net::IPAddress"*, %"class.net::IPAddress"* dereferenceable(17)) local_unnamed_addr #2

declare zeroext i1 @_ZNK3net9IPAddress6IsIPv4Ev(%"class.net::IPAddress"*) local_unnamed_addr #2

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEi(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8*, void (%"class.std::__1::basic_ostream"*, i8*)*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN7logging15CheckOpValueStrIN3net19QuicAddressMismatchEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS3_14remove_pointerIS5_E4typeEEE5valueEPcE4typeES7_ENUlRNS3_13basic_ostreamIcNS3_11char_traitsIcEEEEPKvE_8__invokeESI_SK_(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*) #4 comdat align 2 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(%"class.std::__1::basic_ostream"* %0, i32 %4) #5
  ret void
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(%"class.std::__1::basic_ostream"*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
