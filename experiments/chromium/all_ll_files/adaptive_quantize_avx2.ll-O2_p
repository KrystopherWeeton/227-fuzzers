; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/adaptive_quantize_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/adaptive_quantize_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_quantize_b_adaptive_avx2(i32* nocapture readonly, i64, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readonly, i16* nocapture readonly) local_unnamed_addr #0 {
  %13 = load i16, i16* %8, align 2
  %14 = sext i16 %13 to i32
  %15 = mul nsw i32 %14, 325
  %16 = add nsw i32 %15, 64
  %17 = ashr i32 %16, 7
  %18 = load i16, i16* %2, align 2
  %19 = sext i16 %18 to i32
  %20 = shl nsw i32 %19, 5
  %21 = add nsw i32 %20, -1
  %22 = add nsw i32 %21, %17
  %23 = getelementptr inbounds i16, i16* %8, i64 1
  %24 = load i16, i16* %23, align 2
  %25 = sext i16 %24 to i32
  %26 = mul nsw i32 %25, 325
  %27 = add nsw i32 %26, 64
  %28 = ashr i32 %27, 7
  %29 = getelementptr inbounds i16, i16* %2, i64 1
  %30 = load i16, i16* %29, align 2
  %31 = sext i16 %30 to i32
  %32 = shl nsw i32 %31, 5
  %33 = add nsw i32 %32, -1
  %34 = add nsw i32 %33, %28
  %35 = insertelement <8 x i32> undef, i32 %34, i32 0
  %36 = shufflevector <8 x i32> %35, <8 x i32> undef, <8 x i32> zeroinitializer
  %37 = insertelement <8 x i32> %36, i32 %22, i32 0
  %38 = bitcast i16* %2 to <2 x i64>*
  %39 = load <2 x i64>, <2 x i64>* %38, align 16
  %40 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
  %41 = bitcast <4 x i64> %40 to <16 x i16>
  %42 = add <16 x i16> %41, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %43 = bitcast <16 x i16> %42 to <4 x i64>
  %44 = bitcast i16* %3 to <2 x i64>*
  %45 = load <2 x i64>, <2 x i64>* %44, align 16
  %46 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
  %47 = bitcast i16* %4 to <2 x i64>*
  %48 = load <2 x i64>, <2 x i64>* %47, align 16
  %49 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
  %50 = bitcast i16* %8 to <2 x i64>*
  %51 = load <2 x i64>, <2 x i64>* %50, align 16
  %52 = shufflevector <2 x i64> %51, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
  %53 = bitcast i16* %5 to <2 x i64>*
  %54 = load <2 x i64>, <2 x i64>* %53, align 16
  %55 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
  %56 = bitcast i32* %0 to <8 x i32>*
  %57 = load <8 x i32>, <8 x i32>* %56, align 32
  %58 = getelementptr inbounds i32, i32* %0, i64 8
  %59 = bitcast i32* %58 to <8 x i32>*
  %60 = load <8 x i32>, <8 x i32>* %59, align 32
  %61 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %57, <8 x i32> %60) #4
  %62 = sub <16 x i16> zeroinitializer, %61
  %63 = icmp slt <16 x i16> %61, zeroinitializer
  %64 = select <16 x i1> %63, <16 x i16> %62, <16 x i16> %61
  %65 = shufflevector <16 x i16> %64, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %66 = shufflevector <16 x i16> %64, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %67 = bitcast <16 x i16> %65 to <8 x i32>
  %68 = shl <8 x i32> %67, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %69 = icmp sgt <8 x i32> %68, %37
  %70 = sext <8 x i1> %69 to <8 x i32>
  %71 = bitcast <16 x i16> %66 to <8 x i32>
  %72 = shl <8 x i32> %71, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %73 = icmp sgt <8 x i32> %72, %36
  %74 = sext <8 x i1> %73 to <8 x i32>
  %75 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %70, <8 x i32> %74) #4
  %76 = bitcast <16 x i16> %75 to <4 x i64>
  %77 = shufflevector <4 x i64> %76, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %78 = bitcast <4 x i64> %77 to <32 x i8>
  %79 = icmp slt <32 x i8> %78, zeroinitializer
  %80 = bitcast <32 x i1> %79 to i32
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %87, label %82

82:                                               ; preds = %12
  %83 = bitcast i16* %11 to <4 x i64>*
  %84 = load <4 x i64>, <4 x i64>* %83, align 1
  %85 = and <4 x i64> %84, %77
  %86 = bitcast <4 x i64> %85 to <16 x i16>
  br label %87

87:                                               ; preds = %12, %82
  %88 = phi i32 [ 0, %12 ], [ 1, %82 ]
  %89 = phi <16 x i16> [ zeroinitializer, %12 ], [ %86, %82 ]
  %90 = icmp sgt <16 x i16> %89, zeroinitializer
  %91 = select <16 x i1> %90, <16 x i16> %89, <16 x i16> zeroinitializer
  %92 = icmp sgt <16 x i16> %64, %42
  %93 = sext <16 x i1> %92 to <16 x i16>
  %94 = bitcast <16 x i16> %93 to <4 x i64>
  %95 = shufflevector <4 x i64> %43, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %96 = shufflevector <4 x i64> %94, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %97 = bitcast <4 x i64> %96 to <32 x i8>
  %98 = icmp slt <32 x i8> %97, zeroinitializer
  %99 = bitcast <32 x i1> %98 to i32
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %108

101:                                              ; preds = %87
  %102 = bitcast i32* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %102, i8 0, i64 64, i1 false)
  %103 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %104 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %105 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %106 = shufflevector <2 x i64> %51, <2 x i64> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %107 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %107, i8 0, i64 64, i1 false)
  br label %143

108:                                              ; preds = %87
  %109 = bitcast i16* %11 to <4 x i64>*
  %110 = load <4 x i64>, <4 x i64>* %109, align 1
  %111 = and <4 x i64> %110, %96
  %112 = bitcast <4 x i64> %111 to <16 x i16>
  %113 = icmp sgt <16 x i16> %112, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i16> %112, <16 x i16> zeroinitializer
  %115 = bitcast <16 x i16> %114 to <4 x i64>
  %116 = bitcast <4 x i64> %46 to <16 x i16>
  %117 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %64, <16 x i16> %116) #4
  %118 = bitcast <4 x i64> %49 to <16 x i16>
  %119 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %117, <16 x i16> %118) #4
  %120 = add <16 x i16> %119, %117
  %121 = bitcast <4 x i64> %55 to <16 x i16>
  %122 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %120, <16 x i16> %121) #4
  %123 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %124 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %125 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %126 = tail call <16 x i16> @llvm.x86.avx2.psign.w(<16 x i16> %122, <16 x i16> %61) #4
  %127 = and <16 x i16> %126, %93
  %128 = ashr <16 x i16> %127, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %129 = shufflevector <16 x i16> %127, <16 x i16> %128, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %130 = shufflevector <16 x i16> %127, <16 x i16> %128, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %131 = bitcast i32* %6 to <16 x i16>*
  store <16 x i16> %129, <16 x i16>* %131, align 32
  %132 = getelementptr inbounds i32, i32* %6, i64 8
  %133 = bitcast i32* %132 to <16 x i16>*
  store <16 x i16> %130, <16 x i16>* %133, align 32
  %134 = bitcast <4 x i64> %52 to <16 x i16>
  %135 = mul <16 x i16> %127, %134
  %136 = shufflevector <2 x i64> %51, <2 x i64> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %137 = ashr <16 x i16> %135, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %138 = shufflevector <16 x i16> %135, <16 x i16> %137, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %139 = shufflevector <16 x i16> %135, <16 x i16> %137, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %140 = bitcast i32* %7 to <16 x i16>*
  store <16 x i16> %138, <16 x i16>* %140, align 32
  %141 = getelementptr inbounds i32, i32* %7, i64 8
  %142 = bitcast i32* %141 to <16 x i16>*
  store <16 x i16> %139, <16 x i16>* %142, align 32
  br label %143

143:                                              ; preds = %108, %101
  %144 = phi <16 x i16> [ zeroinitializer, %101 ], [ %114, %108 ]
  %145 = phi <4 x i64> [ zeroinitializer, %101 ], [ %115, %108 ]
  %146 = phi i32 [ 0, %101 ], [ 1, %108 ]
  %147 = phi <4 x i64> [ %103, %101 ], [ %123, %108 ]
  %148 = phi <4 x i64> [ %104, %101 ], [ %124, %108 ]
  %149 = phi <4 x i64> [ %106, %101 ], [ %136, %108 ]
  %150 = phi <4 x i64> [ %105, %101 ], [ %125, %108 ]
  %151 = icmp sgt i64 %1, 16
  br i1 %151, label %152, label %267

152:                                              ; preds = %143
  %153 = bitcast <4 x i64> %95 to <16 x i16>
  %154 = bitcast <4 x i64> %147 to <16 x i16>
  %155 = bitcast <4 x i64> %148 to <16 x i16>
  %156 = bitcast <4 x i64> %150 to <16 x i16>
  %157 = bitcast <4 x i64> %149 to <16 x i16>
  br label %158

158:                                              ; preds = %152, %231
  %159 = phi i64 [ 16, %152 ], [ %261, %231 ]
  %160 = phi i32 [ 16, %152 ], [ %260, %231 ]
  %161 = phi <16 x i16> [ %144, %152 ], [ %238, %231 ]
  %162 = phi <16 x i16> [ %91, %152 ], [ %209, %231 ]
  %163 = phi i32 [ %146, %152 ], [ 1, %231 ]
  %164 = phi i32 [ %88, %152 ], [ %206, %231 ]
  %165 = sext i32 %160 to i64
  br label %166

166:                                              ; preds = %158, %218
  %167 = phi i64 [ %165, %158 ], [ %229, %218 ]
  %168 = phi i64 [ %159, %158 ], [ %229, %218 ]
  %169 = phi <16 x i16> [ %161, %158 ], [ %220, %218 ]
  %170 = phi <16 x i16> [ %162, %158 ], [ %209, %218 ]
  %171 = phi i32 [ %164, %158 ], [ %206, %218 ]
  %172 = getelementptr inbounds i32, i32* %0, i64 %168
  %173 = bitcast i32* %172 to <8 x i32>*
  %174 = load <8 x i32>, <8 x i32>* %173, align 32
  %175 = getelementptr inbounds i32, i32* %172, i64 8
  %176 = bitcast i32* %175 to <8 x i32>*
  %177 = load <8 x i32>, <8 x i32>* %176, align 32
  %178 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %174, <8 x i32> %177) #4
  %179 = sub <16 x i16> zeroinitializer, %178
  %180 = icmp slt <16 x i16> %178, zeroinitializer
  %181 = select <16 x i1> %180, <16 x i16> %179, <16 x i16> %178
  %182 = getelementptr inbounds i16, i16* %11, i64 %168
  %183 = shufflevector <16 x i16> %181, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %184 = shufflevector <16 x i16> %181, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %185 = bitcast <16 x i16> %183 to <8 x i32>
  %186 = shl <8 x i32> %185, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %187 = icmp sgt <8 x i32> %186, %36
  %188 = sext <8 x i1> %187 to <8 x i32>
  %189 = bitcast <16 x i16> %184 to <8 x i32>
  %190 = shl <8 x i32> %189, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %191 = icmp sgt <8 x i32> %190, %36
  %192 = sext <8 x i1> %191 to <8 x i32>
  %193 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %188, <8 x i32> %192) #4
  %194 = bitcast <16 x i16> %193 to <4 x i64>
  %195 = shufflevector <4 x i64> %194, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %196 = bitcast <4 x i64> %195 to <32 x i8>
  %197 = icmp slt <32 x i8> %196, zeroinitializer
  %198 = bitcast <32 x i1> %197 to i32
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %205, label %200

200:                                              ; preds = %166
  %201 = bitcast i16* %182 to <4 x i64>*
  %202 = load <4 x i64>, <4 x i64>* %201, align 1
  %203 = and <4 x i64> %202, %195
  %204 = bitcast <4 x i64> %203 to <16 x i16>
  br label %205

205:                                              ; preds = %166, %200
  %206 = phi i32 [ %171, %166 ], [ 1, %200 ]
  %207 = phi <16 x i16> [ zeroinitializer, %166 ], [ %204, %200 ]
  %208 = icmp sgt <16 x i16> %207, %170
  %209 = select <16 x i1> %208, <16 x i16> %207, <16 x i16> %170
  %210 = icmp sgt <16 x i16> %181, %153
  %211 = sext <16 x i1> %210 to <16 x i16>
  %212 = bitcast <16 x i16> %211 to <4 x i64>
  %213 = shufflevector <4 x i64> %212, <4 x i64> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %214 = bitcast <4 x i64> %213 to <32 x i8>
  %215 = icmp slt <32 x i8> %214, zeroinitializer
  %216 = bitcast <32 x i1> %215 to i32
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %218, label %231

218:                                              ; preds = %205
  %219 = icmp sgt <16 x i16> %169, zeroinitializer
  %220 = select <16 x i1> %219, <16 x i16> %169, <16 x i16> zeroinitializer
  %221 = getelementptr inbounds i32, i32* %6, i64 %168
  %222 = bitcast i32* %221 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %222, align 32
  %223 = getelementptr inbounds i32, i32* %221, i64 8
  %224 = bitcast i32* %223 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %224, align 32
  %225 = getelementptr inbounds i32, i32* %7, i64 %168
  %226 = bitcast i32* %225 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %226, align 32
  %227 = getelementptr inbounds i32, i32* %225, i64 8
  %228 = bitcast i32* %227 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %228, align 32
  %229 = add i64 %167, 16
  %230 = icmp slt i64 %229, %1
  br i1 %230, label %166, label %265

231:                                              ; preds = %205
  %232 = trunc i64 %167 to i32
  %233 = bitcast i16* %182 to <4 x i64>*
  %234 = load <4 x i64>, <4 x i64>* %233, align 1
  %235 = and <4 x i64> %234, %213
  %236 = bitcast <4 x i64> %235 to <16 x i16>
  %237 = icmp slt <16 x i16> %169, %236
  %238 = select <16 x i1> %237, <16 x i16> %236, <16 x i16> %169
  %239 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %181, <16 x i16> %154) #4
  %240 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %239, <16 x i16> %155) #4
  %241 = add <16 x i16> %240, %239
  %242 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %241, <16 x i16> %156) #4
  %243 = tail call <16 x i16> @llvm.x86.avx2.psign.w(<16 x i16> %242, <16 x i16> %178) #4
  %244 = and <16 x i16> %243, %211
  %245 = getelementptr inbounds i32, i32* %6, i64 %168
  %246 = ashr <16 x i16> %244, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %247 = shufflevector <16 x i16> %244, <16 x i16> %246, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %248 = shufflevector <16 x i16> %244, <16 x i16> %246, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %249 = bitcast i32* %245 to <16 x i16>*
  store <16 x i16> %247, <16 x i16>* %249, align 32
  %250 = getelementptr inbounds i32, i32* %245, i64 8
  %251 = bitcast i32* %250 to <16 x i16>*
  store <16 x i16> %248, <16 x i16>* %251, align 32
  %252 = mul <16 x i16> %244, %157
  %253 = getelementptr inbounds i32, i32* %7, i64 %168
  %254 = ashr <16 x i16> %252, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %255 = shufflevector <16 x i16> %252, <16 x i16> %254, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %256 = shufflevector <16 x i16> %252, <16 x i16> %254, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %257 = bitcast i32* %253 to <16 x i16>*
  store <16 x i16> %255, <16 x i16>* %257, align 32
  %258 = getelementptr inbounds i32, i32* %253, i64 8
  %259 = bitcast i32* %258 to <16 x i16>*
  store <16 x i16> %256, <16 x i16>* %259, align 32
  %260 = add nsw i32 %232, 16
  %261 = sext i32 %260 to i64
  %262 = icmp slt i64 %261, %1
  br i1 %262, label %158, label %263

263:                                              ; preds = %231
  %264 = bitcast <16 x i16> %238 to <4 x i64>
  br label %267

265:                                              ; preds = %218
  %266 = bitcast <16 x i16> %220 to <4 x i64>
  br label %267

267:                                              ; preds = %143, %263, %265
  %268 = phi i32 [ %163, %265 ], [ 1, %263 ], [ %146, %143 ]
  %269 = phi i32 [ %206, %265 ], [ %206, %263 ], [ %88, %143 ]
  %270 = phi <16 x i16> [ %209, %265 ], [ %209, %263 ], [ %91, %143 ]
  %271 = phi <4 x i64> [ %266, %265 ], [ %264, %263 ], [ %145, %143 ]
  %272 = bitcast <16 x i16> %270 to <4 x i64>
  %273 = icmp eq i32 %269, 0
  br i1 %273, label %299, label %274

274:                                              ; preds = %267
  %275 = shufflevector <4 x i64> %272, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %276 = shufflevector <4 x i64> %272, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %277 = bitcast <2 x i64> %275 to <8 x i16>
  %278 = bitcast <2 x i64> %276 to <8 x i16>
  %279 = icmp sgt <8 x i16> %277, %278
  %280 = select <8 x i1> %279, <8 x i16> %277, <8 x i16> %278
  %281 = bitcast <8 x i16> %280 to <2 x i64>
  %282 = shufflevector <2 x i64> %281, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %283 = bitcast <2 x i64> %282 to <8 x i16>
  %284 = icmp slt <8 x i16> %280, %283
  %285 = select <8 x i1> %284, <8 x i16> %283, <8 x i16> %280
  %286 = bitcast <8 x i16> %285 to <4 x i32>
  %287 = shufflevector <4 x i32> %286, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 0, i32 0>
  %288 = bitcast <4 x i32> %287 to <8 x i16>
  %289 = icmp slt <8 x i16> %285, %288
  %290 = select <8 x i1> %289, <8 x i16> %288, <8 x i16> %285
  %291 = bitcast <8 x i16> %290 to <4 x i32>
  %292 = lshr <4 x i32> %291, <i32 16, i32 16, i32 16, i32 16>
  %293 = bitcast <4 x i32> %292 to <8 x i16>
  %294 = icmp sgt <8 x i16> %290, %293
  %295 = select <8 x i1> %294, <8 x i16> %290, <8 x i16> %293
  %296 = extractelement <8 x i16> %295, i64 0
  %297 = zext i16 %296 to i32
  %298 = add nuw nsw i32 %297, 1
  br label %299

299:                                              ; preds = %267, %274
  %300 = phi i32 [ %298, %274 ], [ 0, %267 ]
  %301 = icmp eq i32 %268, 0
  br i1 %301, label %326, label %302

302:                                              ; preds = %299
  %303 = shufflevector <4 x i64> %271, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %304 = shufflevector <4 x i64> %271, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %305 = bitcast <2 x i64> %303 to <8 x i16>
  %306 = bitcast <2 x i64> %304 to <8 x i16>
  %307 = icmp sgt <8 x i16> %305, %306
  %308 = select <8 x i1> %307, <8 x i16> %305, <8 x i16> %306
  %309 = bitcast <8 x i16> %308 to <2 x i64>
  %310 = shufflevector <2 x i64> %309, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %311 = bitcast <2 x i64> %310 to <8 x i16>
  %312 = icmp slt <8 x i16> %308, %311
  %313 = select <8 x i1> %312, <8 x i16> %311, <8 x i16> %308
  %314 = bitcast <8 x i16> %313 to <4 x i32>
  %315 = shufflevector <4 x i32> %314, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 0, i32 0>
  %316 = bitcast <4 x i32> %315 to <8 x i16>
  %317 = icmp slt <8 x i16> %313, %316
  %318 = select <8 x i1> %317, <8 x i16> %316, <8 x i16> %313
  %319 = bitcast <8 x i16> %318 to <4 x i32>
  %320 = lshr <4 x i32> %319, <i32 16, i32 16, i32 16, i32 16>
  %321 = bitcast <4 x i32> %320 to <8 x i16>
  %322 = icmp sgt <8 x i16> %318, %321
  %323 = select <8 x i1> %322, <8 x i16> %318, <8 x i16> %321
  %324 = extractelement <8 x i16> %323, i64 0
  %325 = zext i16 %324 to i32
  br label %326

326:                                              ; preds = %299, %302
  %327 = phi i32 [ %325, %302 ], [ -1, %299 ]
  %328 = icmp slt i32 %327, %300
  br i1 %328, label %332, label %329

329:                                              ; preds = %326
  %330 = sext i32 %327 to i64
  %331 = sext i32 %300 to i64
  br label %334

332:                                              ; preds = %334, %326
  %333 = zext i32 %300 to i64
  br label %343

334:                                              ; preds = %329, %334
  %335 = phi i64 [ %330, %329 ], [ %341, %334 ]
  %336 = getelementptr inbounds i16, i16* %10, i64 %335
  %337 = load i16, i16* %336, align 2
  %338 = sext i16 %337 to i64
  %339 = getelementptr inbounds i32, i32* %6, i64 %338
  store i32 0, i32* %339, align 4
  %340 = getelementptr inbounds i32, i32* %7, i64 %338
  store i32 0, i32* %340, align 4
  %341 = add nsw i64 %335, -1
  %342 = icmp sgt i64 %335, %331
  br i1 %342, label %334, label %332

343:                                              ; preds = %332, %347
  %344 = phi i64 [ %333, %332 ], [ %345, %347 ]
  %345 = add nsw i64 %344, -1
  %346 = icmp sgt i64 %344, 0
  br i1 %346, label %347, label %357

347:                                              ; preds = %343
  %348 = getelementptr inbounds i16, i16* %10, i64 %345
  %349 = load i16, i16* %348, align 2
  %350 = sext i16 %349 to i64
  %351 = getelementptr inbounds i32, i32* %6, i64 %350
  %352 = load i32, i32* %351, align 4
  %353 = icmp eq i32 %352, 0
  br i1 %353, label %343, label %354

354:                                              ; preds = %347
  %355 = trunc i64 %345 to i16
  %356 = add i16 %355, 1
  br label %357

357:                                              ; preds = %343, %354
  %358 = phi i16 [ %356, %354 ], [ 0, %343 ]
  store i16 %358, i16* %9, align 2
  %359 = icmp sgt i32 %300, 0
  br i1 %359, label %360, label %374

360:                                              ; preds = %357, %360
  %361 = phi i64 [ %371, %360 ], [ 0, %357 ]
  %362 = phi i32 [ %370, %360 ], [ -1, %357 ]
  %363 = getelementptr inbounds i16, i16* %10, i64 %361
  %364 = load i16, i16* %363, align 2
  %365 = sext i16 %364 to i64
  %366 = getelementptr inbounds i32, i32* %6, i64 %365
  %367 = load i32, i32* %366, align 4
  %368 = icmp eq i32 %367, 0
  %369 = trunc i64 %361 to i32
  %370 = select i1 %368, i32 %362, i32 %369
  %371 = add nuw nsw i64 %361, 1
  %372 = icmp ult i64 %371, %333
  %373 = and i1 %368, %372
  br i1 %373, label %360, label %374

374:                                              ; preds = %360, %357
  %375 = phi i32 [ -1, %357 ], [ %370, %360 ]
  %376 = zext i16 %358 to i32
  %377 = add nsw i32 %376, -1
  %378 = icmp ne i16 %358, 0
  %379 = icmp eq i32 %375, %377
  %380 = and i1 %378, %379
  br i1 %380, label %381, label %411

381:                                              ; preds = %374
  %382 = sext i32 %375 to i64
  %383 = getelementptr inbounds i16, i16* %10, i64 %382
  %384 = load i16, i16* %383, align 2
  %385 = sext i16 %384 to i64
  %386 = getelementptr inbounds i32, i32* %6, i64 %385
  %387 = load i32, i32* %386, align 4
  switch i32 %387, label %411 [
    i32 1, label %388
    i32 -1, label %388
  ]

388:                                              ; preds = %381, %381
  %389 = getelementptr inbounds i32, i32* %0, i64 %385
  %390 = load i32, i32* %389, align 4
  %391 = shl nsw i32 %390, 5
  %392 = ashr i32 %390, 31
  %393 = xor i32 %391, %392
  %394 = sub nsw i32 %393, %392
  %395 = icmp ne i16 %384, 0
  %396 = zext i1 %395 to i64
  %397 = getelementptr inbounds i16, i16* %8, i64 %396
  %398 = load i16, i16* %397, align 2
  %399 = sext i16 %398 to i32
  %400 = mul nsw i32 %399, 525
  %401 = add nsw i32 %400, 64
  %402 = ashr i32 %401, 7
  %403 = getelementptr inbounds i16, i16* %2, i64 %396
  %404 = load i16, i16* %403, align 2
  %405 = sext i16 %404 to i32
  %406 = shl nsw i32 %405, 5
  %407 = add nsw i32 %402, %406
  %408 = icmp slt i32 %394, %407
  br i1 %408, label %409, label %411

409:                                              ; preds = %388
  store i32 0, i32* %386, align 4
  %410 = getelementptr inbounds i32, i32* %7, i64 %385
  store i32 0, i32* %410, align 4
  store i16 0, i16* %9, align 2
  br label %411

411:                                              ; preds = %381, %409, %388, %374
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32>, <8 x i32>) #2

; Function Attrs: nounwind readnone speculatable
declare <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16>, <16 x i16>) #3

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16>, <16 x i16>) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.psign.w(<16 x i16>, <16 x i16>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
