; ModuleID = 'gen/third_party/blink/renderer/bindings/core/v8/v8_mutation_event.cc'
source_filename = "gen/third_party/blink/renderer/bindings/core/v8/v8_mutation_event.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.blink::WrapperTypeInfo" = type { i16, void (%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Template"*)*, void (%"class.v8::Context"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Template"*, i64)*, i8*, %"struct.blink::WrapperTypeInfo"*, i8 }
%"class.v8::Isolate" = type { i8 }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.127", %"class.std::__1::unique_ptr.127", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.137", %"class.std::__1::unique_ptr.143", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.155", %"class.std::__1::unique_ptr.161", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.167", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.4", %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.14", %"class.std::__1::unique_ptr.20", %"class.std::__1::unique_ptr.26", %"class.std::__1::unique_ptr.32", %"class.std::__1::unique_ptr.39", %"class.std::__1::unique_ptr.46", %"class.std::__1::unique_ptr.46", %"class.std::__1::unique_ptr.53", %"class.std::__1::unique_ptr.60", %"class.std::__1::unique_ptr.67", %"class.std::__1::unique_ptr.67", %"class.std::__1::unique_ptr.74", %"class.std::__1::unique_ptr.81", %"class.std::__1::unique_ptr.88", %"class.std::__1::unique_ptr.111", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.14" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.26" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.35" }
%"struct.std::__1::__atomic_base.35" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.blink::Worklist.42"* }
%"class.blink::Worklist.42" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"class.blink::Worklist.49"* }
%"class.blink::Worklist.49" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.53" = type { %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"class.blink::Worklist.56"* }
%"class.blink::Worklist.56" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"class.blink::Worklist.63"* }
%"class.blink::Worklist.63" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.67" = type { %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.blink::Worklist.70"* }
%"class.blink::Worklist.70" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.blink::Worklist.77"* }
%"class.blink::Worklist.77" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.81" = type { %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"class.blink::Worklist.84"* }
%"class.blink::Worklist.84" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.91", %"class.std::__1::__compressed_pair.98", %"class.std::__1::__compressed_pair.103", %"class.std::__1::__compressed_pair.105", [4 x i8] }>
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93", %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { i64 }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { float }
%"class.std::__1::unique_ptr.111" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.114", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.114" = type { %"class.std::__1::__compressed_pair.115" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116" }
%"struct.std::__1::__compressed_pair_elem.116" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.135" }
%"class.WTF::VectorBuffer.135" = type { %"class.WTF::VectorBufferBase.136" }
%"class.WTF::VectorBufferBase.136" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.137" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.143" = type { %"class.std::__1::__compressed_pair.144" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.149" }
%"class.std::__1::unique_ptr.149" = type { %"class.std::__1::__compressed_pair.150" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.151" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.42"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.49"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.56"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.63"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.70"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.171" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.161" = type { %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.167" = type { %"struct.std::__1::__atomic_base.168" }
%"struct.std::__1::__atomic_base.168" = type { %"struct.std::__1::__cxx_atomic_impl.169" }
%"struct.std::__1::__cxx_atomic_impl.169" = type { %"struct.std::__1::__cxx_atomic_base_impl.170" }
%"struct.std::__1::__cxx_atomic_base_impl.170" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.v8::Template" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::Object" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"struct.blink::bindings::IDLMemberInstaller::ConstantValueConfig" = type { i8*, i64 }
%"class.base::span" = type { %"struct.base::internal::ExtentStorage", %"struct.blink::bindings::IDLMemberInstaller::AttributeConfig"* }
%"struct.base::internal::ExtentStorage" = type { i64 }
%"struct.blink::bindings::IDLMemberInstaller::AttributeConfig" = type <{ i8*, void (%"class.v8::FunctionCallbackInfo"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, i16, [6 x i8] }>
%"class.base::span.181" = type { %"struct.base::internal::ExtentStorage", %"struct.blink::bindings::IDLMemberInstaller::ConstantValueConfig"* }
%"class.base::span.182" = type { %"struct.base::internal::ExtentStorage", %"struct.blink::bindings::IDLMemberInstaller::OperationConfig"* }
%"struct.blink::bindings::IDLMemberInstaller::OperationConfig" = type <{ i8*, void (%"class.v8::FunctionCallbackInfo"*)*, [3 x i8], [5 x i8] }>
%"class.v8::FunctionTemplate" = type { i8 }
%"class.v8::ObjectTemplate" = type { i8 }
%"class.v8::Signature" = type { i8 }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member.194", %"class.blink::Member.196", %"class.blink::Member.194", %"class.blink::Member.194", %"class.blink::Member.198" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::Member.196" = type { %"class.blink::MemberBase.197" }
%"class.blink::MemberBase.197" = type { %"class.blink::TreeScope"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.202", %"class.blink::Member.204", %"class.blink::Member.196", %"class.blink::Member.206", %"class.blink::Member.206", %"class.blink::Member.229", %"class.blink::Member.231", %"class.blink::Member.233", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.238", %"class.blink::HeapVector.240" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.202" = type { %"class.blink::MemberBase.203" }
%"class.blink::MemberBase.203" = type { %"class.blink::ContainerNode"* }
%"class.blink::ContainerNode" = type opaque
%"class.blink::Member.204" = type { %"class.blink::MemberBase.205" }
%"class.blink::MemberBase.205" = type { %"class.blink::Document"* }
%"class.blink::Document" = type opaque
%"class.blink::Member.206" = type { %"class.blink::MemberBase.207" }
%"class.blink::MemberBase.207" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap.210" }
%"class.blink::HeapHashMap.210" = type { %"class.WTF::HashMap.213" }
%"class.WTF::HashMap.213" = type { %"class.WTF::HashTable.214" }
%"class.WTF::HashTable.214" = type <{ %"struct.WTF::KeyValuePair.216"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.216" = type { %"class.WTF::AtomicString", %"class.blink::Member.217" }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.183 }
%class.scoped_refptr.183 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.184" }
%"struct.std::__1::atomic.184" = type { %"struct.std::__1::__atomic_base.185" }
%"struct.std::__1::__atomic_base.185" = type { %"struct.std::__1::__atomic_base.186" }
%"struct.std::__1::__atomic_base.186" = type { %"struct.std::__1::__cxx_atomic_impl.187" }
%"struct.std::__1::__cxx_atomic_impl.187" = type { %"struct.std::__1::__cxx_atomic_base_impl.188" }
%"struct.std::__1::__cxx_atomic_base_impl.188" = type { i32 }
%"class.blink::Member.217" = type { %"class.blink::MemberBase.218" }
%"class.blink::MemberBase.218" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.221", i32, %"class.blink::HeapVector" }
%"class.blink::Member.221" = type { %"class.blink::MemberBase.222" }
%"class.blink::MemberBase.222" = type { %"class.blink::Element"* }
%"class.blink::Element" = type opaque
%"class.blink::HeapVector" = type { %"class.WTF::Vector.225" }
%"class.WTF::Vector.225" = type { %"class.WTF::VectorBuffer.226" }
%"class.WTF::VectorBuffer.226" = type { %"class.WTF::VectorBufferBase.227" }
%"class.WTF::VectorBufferBase.227" = type { %"class.blink::Member.221"*, i32, i32 }
%"class.blink::Member.229" = type { %"class.blink::MemberBase.230" }
%"class.blink::MemberBase.230" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.231" = type { %"class.blink::MemberBase.232" }
%"class.blink::MemberBase.232" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.233" = type { %"class.blink::MemberBase.234" }
%"class.blink::MemberBase.234" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.235" }
%"class.blink::Member.235" = type { %"class.blink::MemberBase.236" }
%"class.blink::MemberBase.236" = type { %"class.blink::HeapHashMap.237"* }
%"class.blink::HeapHashMap.237" = type opaque
%"class.blink::Member.238" = type { %"class.blink::MemberBase.239" }
%"class.blink::MemberBase.239" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.240" = type { %"class.WTF::Vector.243" }
%"class.WTF::Vector.243" = type { %"class.WTF::VectorBuffer.244" }
%"class.WTF::VectorBuffer.244" = type { %"class.WTF::VectorBufferBase.245" }
%"class.WTF::VectorBufferBase.245" = type { %"class.blink::Member.246"*, i32, i32 }
%"class.blink::Member.246" = type opaque
%"class.blink::Member.194" = type { %"class.blink::MemberBase.195" }
%"class.blink::MemberBase.195" = type { %"class.blink::Node"* }
%"class.blink::Member.198" = type { %"class.blink::MemberBase.199" }
%"class.blink::MemberBase.199" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.250, %"class.blink::Member.251", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%class.scoped_refptr.250 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::Member.251" = type { %"class.blink::MemberBase.252" }
%"class.blink::MemberBase.252" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent.253" }
%"class.blink::Persistent.253" = type { %"class.blink::PersistentBase.254" }
%"class.blink::PersistentBase.254" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.v8::Value" = type { i8 }
%"class.blink::V8PerIsolateData" = type { i32, %"class.gin::IsolateHolder", %"class.WTF::HashMap.280", %"class.WTF::HashMap.280", %"class.WTF::HashMap.285", %"class.std::__1::unique_ptr.290", %"class.std::__1::unique_ptr.337", %"class.blink::Persistent.253", i8, i8, i8, %"class.WTF::Vector.351", %"class.std::__1::unique_ptr.356", %"class.blink::Persistent.362", %"class.blink::Persistent.366", %"class.blink::RuntimeCallStats", void (%"class.v8::Isolate"*, i32, i32)*, void (%"class.v8::Isolate"*, i32, i32)*, i64 }
%"class.gin::IsolateHolder" = type { %"class.std::__1::unique_ptr.262", %"class.v8::Isolate"*, %"class.std::__1::unique_ptr.268", %"class.std::__1::unique_ptr.274", i32, i32 }
%"class.std::__1::unique_ptr.262" = type { %"class.std::__1::__compressed_pair.263" }
%"class.std::__1::__compressed_pair.263" = type { %"struct.std::__1::__compressed_pair_elem.264" }
%"struct.std::__1::__compressed_pair_elem.264" = type { %"class.v8::SnapshotCreator"* }
%"class.v8::SnapshotCreator" = type { i8* }
%"class.std::__1::unique_ptr.268" = type { %"class.std::__1::__compressed_pair.269" }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.270" }
%"struct.std::__1::__compressed_pair_elem.270" = type { %"class.gin::PerIsolateData"* }
%"class.gin::PerIsolateData" = type opaque
%"class.std::__1::unique_ptr.274" = type { %"class.std::__1::__compressed_pair.275" }
%"class.std::__1::__compressed_pair.275" = type { %"struct.std::__1::__compressed_pair_elem.276" }
%"struct.std::__1::__compressed_pair_elem.276" = type { %"class.gin::V8IsolateMemoryDumpProvider"* }
%"class.gin::V8IsolateMemoryDumpProvider" = type opaque
%"class.WTF::HashMap.280" = type { %"class.WTF::HashTable.281" }
%"class.WTF::HashTable.281" = type <{ %"struct.WTF::KeyValuePair.284"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.284" = type opaque
%"class.WTF::HashMap.285" = type { %"class.WTF::HashTable.286" }
%"class.WTF::HashTable.286" = type <{ %"struct.WTF::KeyValuePair.289"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.289" = type opaque
%"class.std::__1::unique_ptr.290" = type { %"class.std::__1::__compressed_pair.291" }
%"class.std::__1::__compressed_pair.291" = type { %"struct.std::__1::__compressed_pair_elem.292" }
%"struct.std::__1::__compressed_pair_elem.292" = type { %"class.blink::StringCache"* }
%"class.blink::StringCache" = type { %"class.v8::GlobalValueMap", %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference", %"class.v8::GlobalValueMap.298", %class.scoped_refptr.183 }
%"class.v8::GlobalValueMap" = type { %"class.v8::PersistentValueMapBase" }
%"class.v8::PersistentValueMapBase" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.293", i8* }
%"class.WTF::HashMap.293" = type { %"class.WTF::HashTable.294" }
%"class.WTF::HashTable.294" = type <{ %"struct.WTF::KeyValuePair.297"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.297" = type { %"class.WTF::StringImpl"*, i64 }
%"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference" = type { i64 }
%"class.v8::GlobalValueMap.298" = type { %"class.v8::PersistentValueMapBase.299" }
%"class.v8::PersistentValueMapBase.299" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.300", i8* }
%"class.WTF::HashMap.300" = type { %"class.WTF::HashTable.301" }
%"class.WTF::HashTable.301" = type <{ %"struct.WTF::KeyValuePair.304"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.304" = type { %"class.blink::ParkableStringImpl"*, i64 }
%"class.blink::ParkableStringImpl" = type { %"class.WTF::RefCounted.305", %"class.WTF::String", %"class.std::__1::unique_ptr.307" }
%"class.WTF::RefCounted.305" = type { %"class.base::RefCounted.306" }
%"class.base::RefCounted.306" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::unique_ptr.307" = type { %"class.std::__1::__compressed_pair.308" }
%"class.std::__1::__compressed_pair.308" = type { %"struct.std::__1::__compressed_pair_elem.309" }
%"struct.std::__1::__compressed_pair_elem.309" = type { %"struct.blink::ParkableStringImpl::ParkableMetadata"* }
%"struct.blink::ParkableStringImpl::ParkableMetadata" = type { %"class.WTF::Mutex", i32, i8, i8, %"class.std::__1::unique_ptr.310", %"class.std::__1::unique_ptr.321", %"class.WTF::Vector.327", i8, i32 }
%"class.std::__1::unique_ptr.310" = type { %"class.std::__1::__compressed_pair.311" }
%"class.std::__1::__compressed_pair.311" = type { %"struct.std::__1::__compressed_pair_elem.312" }
%"struct.std::__1::__compressed_pair_elem.312" = type { %"class.WTF::Vector.313"* }
%"class.WTF::Vector.313" = type { %"class.WTF::VectorBuffer.314" }
%"class.WTF::VectorBuffer.314" = type { %"class.WTF::VectorBufferBase.315" }
%"class.WTF::VectorBufferBase.315" = type { i8*, i32, i32 }
%"class.std::__1::unique_ptr.321" = type { %"class.std::__1::__compressed_pair.322" }
%"class.std::__1::__compressed_pair.322" = type { %"struct.std::__1::__compressed_pair_elem.323" }
%"struct.std::__1::__compressed_pair_elem.323" = type { %"class.blink::DiskDataMetadata"* }
%"class.blink::DiskDataMetadata" = type { i64, i64 }
%"class.WTF::Vector.327" = type { %"class.WTF::VectorBuffer.328" }
%"class.WTF::VectorBuffer.328" = type { %"class.WTF::VectorBufferBase.315", [32 x i8] }
%"class.std::__1::unique_ptr.337" = type { %"class.std::__1::__compressed_pair.338" }
%"class.std::__1::__compressed_pair.338" = type { %"struct.std::__1::__compressed_pair_elem.339" }
%"struct.std::__1::__compressed_pair_elem.339" = type { %"class.blink::V8PrivateProperty"* }
%"class.blink::V8PrivateProperty" = type { %"class.blink::ScopedPersistent.340", %"class.WTF::HashMap.343" }
%"class.blink::ScopedPersistent.340" = type { %"class.v8::Persistent.341" }
%"class.v8::Persistent.341" = type { %"class.v8::PersistentBase.342" }
%"class.v8::PersistentBase.342" = type { %"class.v8::Private"* }
%"class.v8::Private" = type { i8 }
%"class.WTF::HashMap.343" = type { %"class.WTF::HashTable.344" }
%"class.WTF::HashTable.344" = type <{ %"struct.WTF::KeyValuePair.347"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.347" = type opaque
%"class.WTF::Vector.351" = type { %"class.WTF::VectorBuffer.352" }
%"class.WTF::VectorBuffer.352" = type { %"class.WTF::VectorBufferBase.353" }
%"class.WTF::VectorBufferBase.353" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type opaque
%"class.std::__1::unique_ptr.356" = type { %"class.std::__1::__compressed_pair.357" }
%"class.std::__1::__compressed_pair.357" = type { %"struct.std::__1::__compressed_pair_elem.358" }
%"struct.std::__1::__compressed_pair_elem.358" = type { %"class.blink::V8PerIsolateData::Data"* }
%"class.blink::V8PerIsolateData::Data" = type { i32 (...)** }
%"class.blink::Persistent.362" = type { %"class.blink::PersistentBase.363" }
%"class.blink::PersistentBase.363" = type { %"class.blink::V8PerIsolateData::GarbageCollectedData"*, %"class.blink::PersistentNodePtr" }
%"class.blink::V8PerIsolateData::GarbageCollectedData" = type { i32 (...)** }
%"class.blink::Persistent.366" = type { %"class.blink::PersistentBase.367" }
%"class.blink::PersistentBase.367" = type { %"class.blink::ActiveScriptWrappableManager"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ActiveScriptWrappableManager" = type { %"class.blink::HeapVector.370", i64 }
%"class.blink::HeapVector.370" = type { %"class.WTF::Vector.373" }
%"class.WTF::Vector.373" = type { %"class.WTF::VectorBuffer.374" }
%"class.WTF::VectorBuffer.374" = type { %"class.WTF::VectorBufferBase.375" }
%"class.WTF::VectorBufferBase.375" = type { %"struct.std::__1::pair.376"*, i32, i32 }
%"struct.std::__1::pair.376" = type { %"class.blink::UntracedMember", %"class.blink::Member.378" }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase.377" }
%"class.blink::MemberBase.377" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::ActiveScriptWrappableBase" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Member.378" = type { %"class.blink::MemberBase.379" }
%"class.blink::MemberBase.379" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::RuntimeCallStats" = type { %"class.blink::RuntimeCallTimer"*, i8, [40 x %"class.blink::RuntimeCallCounter"], %"class.base::TickClock"* }
%"class.blink::RuntimeCallTimer" = type { %"class.blink::RuntimeCallCounter"*, %"class.blink::RuntimeCallTimer"*, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::TickClock"* }
%"class.blink::RuntimeCallCounter" = type { i64, %"class.base::TimeDelta", i8* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference.462" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference.462" = type { %"class.v8::TracedReference.463" }
%"class.v8::TracedReference.463" = type { %"class.v8::BasicTracedReference.464" }
%"class.v8::BasicTracedReference.464" = type { %"class.v8::TracedReferenceBase" }
%"class.blink::bindings::NativeValueTraitsStringAdapter" = type { %"class.v8::Local.457", %"class.WTF::String", %"class.WTF::StringView::StackBackingStore" }
%"class.v8::Local.457" = type { %"class.v8::String"* }
%"class.v8::String" = type { i8 }
%"class.WTF::StringView::StackBackingStore" = type { [64 x i16], %"class.std::__1::unique_ptr.458" }
%"class.std::__1::unique_ptr.458" = type { %"class.std::__1::__compressed_pair.459" }
%"class.std::__1::__compressed_pair.459" = type { %"struct.std::__1::__compressed_pair_elem.460" }
%"struct.std::__1::__compressed_pair_elem.460" = type { i8* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.426", i32, i8, [3 x i8], %"class.blink::HeapVector.428", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.436", %"class.blink::Member.438", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.447", %"class.blink::Member.453", %"class.blink::Member.455", i8, [7 x i8] }>
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.383" }
%"class.blink::HeapHashMap.383" = type { %"class.WTF::HashMap.386" }
%"class.WTF::HashMap.386" = type { %"class.WTF::HashTable.387" }
%"class.WTF::HashTable.387" = type <{ %"struct.WTF::KeyValuePair.389"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.389" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.395" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet" }
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet" }
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.392" }
%"class.WTF::HashTable.392" = type <{ %"class.blink::WeakMember.394"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.394" = type opaque
%"class.blink::Supplementable.395" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.396" }
%"class.blink::HeapHashMap.396" = type { %"class.WTF::HashMap.399" }
%"class.WTF::HashMap.399" = type { %"class.WTF::HashTable.400" }
%"class.WTF::HashTable.400" = type <{ %"struct.WTF::KeyValuePair.402"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.402" = type { i8*, %"class.blink::Member.403" }
%"class.blink::Member.403" = type { %"class.blink::MemberBase.404" }
%"class.blink::MemberBase.404" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.405" }
%"class.blink::Member.405" = type { %"class.blink::MemberBase.406" }
%"class.blink::MemberBase.406" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.407, %"class.std::__1::unique_ptr.408", %"class.std::__1::unique_ptr.408", %"class.std::__1::unique_ptr.414", %"class.std::__1::unique_ptr.414", %"class.blink::Member.420", i32, [4 x i8], %"class.WTF::HashSet.422", i32, i32 }
%class.scoped_refptr.407 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type opaque
%"class.std::__1::unique_ptr.408" = type { %"class.std::__1::__compressed_pair.409" }
%"class.std::__1::__compressed_pair.409" = type { %"struct.std::__1::__compressed_pair_elem.410" }
%"struct.std::__1::__compressed_pair_elem.410" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type opaque
%"class.std::__1::unique_ptr.414" = type { %"class.std::__1::__compressed_pair.415" }
%"class.std::__1::__compressed_pair.415" = type { %"struct.std::__1::__compressed_pair_elem.416" }
%"struct.std::__1::__compressed_pair_elem.416" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.blink::Member.420" = type { %"class.blink::MemberBase.421" }
%"class.blink::MemberBase.421" = type { %"class.blink::ExecutionContext"* }
%"class.WTF::HashSet.422" = type { %"class.WTF::HashTable.423" }
%"class.WTF::HashTable.423" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.426" = type { %"class.blink::MemberBase.427" }
%"class.blink::MemberBase.427" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector.428" = type { %"class.WTF::Vector.431" }
%"class.WTF::Vector.431" = type { %"class.WTF::VectorBuffer.432" }
%"class.WTF::VectorBuffer.432" = type { %"class.WTF::VectorBufferBase.433" }
%"class.WTF::VectorBufferBase.433" = type { %"class.blink::Member.434"*, i32, i32 }
%"class.blink::Member.434" = type opaque
%"class.blink::Member.436" = type { %"class.blink::MemberBase.437" }
%"class.blink::MemberBase.437" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.438" = type { %"class.blink::MemberBase.439" }
%"class.blink::MemberBase.439" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.440", i32, i32 }
%"class.blink::HeapHashMap.440" = type { %"class.WTF::HashMap.443" }
%"class.WTF::HashMap.443" = type { %"class.WTF::HashTable.444" }
%"class.WTF::HashTable.444" = type <{ %"struct.WTF::KeyValuePair.446"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.446" = type opaque
%"class.std::__1::unique_ptr.447" = type { %"class.std::__1::__compressed_pair.448" }
%"class.std::__1::__compressed_pair.448" = type { %"struct.std::__1::__compressed_pair_elem.449" }
%"struct.std::__1::__compressed_pair_elem.449" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.453" = type { %"class.blink::MemberBase.454" }
%"class.blink::MemberBase.454" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.455" = type { %"class.blink::MemberBase.456" }
%"class.blink::MemberBase.456" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.blink::MutationEvent" = type <{ %"class.blink::Event", %"class.blink::Member.194", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i16, [6 x i8] }>
%"class.blink::Event" = type { %"class.blink::ScriptWrappable", %"class.WTF::AtomicString", i16, i32, i8, %"class.blink::probe::AsyncTaskId", %"class.blink::Member", %"class.blink::Member", %"class.blink::Member.190", %"class.blink::Member.192", %"class.base::TimeTicks" }
%"class.blink::probe::AsyncTaskId" = type { i8, %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i64 }
%"class.blink::Member" = type { %"class.blink::MemberBase.189" }
%"class.blink::MemberBase.189" = type { %"class.blink::EventTarget"* }
%"class.blink::Member.190" = type { %"class.blink::MemberBase.191" }
%"class.blink::MemberBase.191" = type { %"class.blink::Event"* }
%"class.blink::Member.192" = type { %"class.blink::MemberBase.193" }
%"class.blink::MemberBase.193" = type { %"class.blink::EventPath"* }
%"class.blink::EventPath" = type opaque
%"class.v8::Boolean" = type { i8 }
%"class.v8::internal::Isolate" = type opaque
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.255" }
%"class.std::__1::__compressed_pair.255" = type { %"struct.std::__1::__compressed_pair_elem.256" }
%"struct.std::__1::__compressed_pair_elem.256" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.257 }
%union.anon.257 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"class.v8::Int32" = type { i8 }

$_ZN5blink12DOMDataStore18SetReturnValueFastEN2v811ReturnValueINS1_5ValueEEEPNS_15ScriptWrappableENS1_5LocalINS1_6ObjectEEEPKS5_ = comdat any

$_ZN5blink11ScriptState4FromEN2v85LocalINS1_7ContextEEE = comdat any

$_ZN3WTF9HashTableIN5blink10WeakMemberIKNS1_15ScriptWrappableEEENS_12KeyValuePairIS5_NS1_23TraceWrapperV8ReferenceIN2v86ObjectEEEEENS_24KeyValuePairKeyExtractorENS_10MemberHashIS4_EENS_18HashMapValueTraitsINS_10HashTraitsIS5_EENSG_ISA_EEEESH_NS1_13HeapAllocatorEE4findEPS4_ = comdat any

$_ZN5blink17NativeValueTraitsINS_15IDLStringBaseV2ILNS_8bindings17IDLStringConvModeE0EEEvE11NativeValueEPN2v87IsolateENS6_5LocalINS6_5ValueEEERNS_14ExceptionStateE = comdat any

@.str = private unnamed_addr constant [14 x i8] c"MutationEvent\00", align 1
@_ZN5blink7V8Event18wrapper_type_info_E = external global %"struct.blink::WrapperTypeInfo", align 8
@_ZN5blink15V8MutationEvent18wrapper_type_info_E = hidden constant %"struct.blink::WrapperTypeInfo" { i16 1, void (%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Template"*)* @_ZN5blink15V8MutationEvent24InstallInterfaceTemplateEPN2v87IsolateERKNS_15DOMWrapperWorldENS1_5LocalINS1_8TemplateEEE, void (%"class.v8::Context"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Template"*, i64)* null, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), %"struct.blink::WrapperTypeInfo"* @_ZN5blink7V8Event18wrapper_type_info_E, i8 8 }, align 8
@_ZN5blink13MutationEvent18wrapper_type_info_E = hidden local_unnamed_addr constant %"struct.blink::WrapperTypeInfo"* @_ZN5blink15V8MutationEvent18wrapper_type_info_E, align 8
@_ZZN5blink15V8MutationEvent30InstallUnconditionalPropertiesEPN2v87IsolateERKNS_15DOMWrapperWorldENS1_5LocalINS1_8TemplateEEES9_S9_E15kAttributeTable = internal constant [6 x { i8*, void (%"class.v8::FunctionCallbackInfo"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, i8, i8 }] [{ i8*, void (%"class.v8::FunctionCallbackInfo"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, i8, i8 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), void (%"class.v8::FunctionCallbackInfo"*)* @_ZN5blink12_GLOBAL__N_117v8_mutation_event31RelatedNodeAttributeGetCallbackERKN2v820FunctionCallbackInfoINS2_5ValueEEE, void (%"class.v8::FunctionCallbackInfo"*)* null, i8 104, i8 0 }, { i8*, void (%"class.v8::FunctionCallbackInfo"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0), void (%"class.v8::FunctionCallbackInfo"*)* @_ZN5blink12_GLOBAL__N_117v8_mutation_event29PrevValueAttributeGetCallbackERKN2v820FunctionCallbackInfoINS2_5ValueEEE, void (%"class.v8::FunctionCallbackInfo"*)* null, i8 104, i8 0 }, { i8*, void (%"class.v8::FunctionCallbackInfo"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, i8, i8 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), void (%"class.v8::FunctionCallbackInfo"*)* @_ZN5blink12_GLOBAL__N_117v8_mutation_event28NewValueAttributeGetCallbackERKN2v820FunctionCallbackInfoINS2_5ValueEEE, void (%"class.v8::FunctionCallbackInfo"*)* null, i8 104, i8 0 }, { i8*, void (%"class.v8::FunctionCallbackInfo"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, i8, i8 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i32 0, i32 0), void (%"class.v8::FunctionCallbackInfo"*)* @_ZN5blink12_GLOBAL__N_117v8_mutation_event28AttrNameAttributeGetCallbackERKN2v820FunctionCallbackInfoINS2_5ValueEEE, void (%"class.v8::FunctionCallbackInfo"*)* null, i8 104, i8 0 }, { i8*, void (%"class.v8::FunctionCallbackInfo"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, i8, i8 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i32 0, i32 0), void (%"class.v8::FunctionCallbackInfo"*)* @_ZN5blink12_GLOBAL__N_117v8_mutation_event30AttrChangeAttributeGetCallbackERKN2v820FunctionCallbackInfoINS2_5ValueEEE, void (%"class.v8::FunctionCallbackInfo"*)* null, i8 104, i8 0 }, { i8*, void (%"class.v8::FunctionCallbackInfo"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), void (%"class.v8::FunctionCallbackInfo"*)* @_ZN5blink12_GLOBAL__N_117v8_mutation_event29IsTrustedAttributeGetCallbackERKN2v820FunctionCallbackInfoINS2_5ValueEEE, void (%"class.v8::FunctionCallbackInfo"*)* null, i8 100, i8 0 }], align 16
@.str.1 = private unnamed_addr constant [12 x i8] c"relatedNode\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"prevValue\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"newValue\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"attrName\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"attrChange\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"isTrusted\00", align 1
@_ZZN5blink15V8MutationEvent30InstallUnconditionalPropertiesEPN2v87IsolateERKNS_15DOMWrapperWorldENS1_5LocalINS1_8TemplateEEES9_S9_E19kConstantValueTable = internal constant [3 x %"struct.blink::bindings::IDLMemberInstaller::ConstantValueConfig"] [%"struct.blink::bindings::IDLMemberInstaller::ConstantValueConfig" { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i32 0, i32 0), i64 1 }, %"struct.blink::bindings::IDLMemberInstaller::ConstantValueConfig" { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i32 0, i32 0), i64 2 }, %"struct.blink::bindings::IDLMemberInstaller::ConstantValueConfig" { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), i64 3 }], align 16
@.str.7 = private unnamed_addr constant [13 x i8] c"MODIFICATION\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"ADDITION\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"REMOVAL\00", align 1
@_ZZN5blink15V8MutationEvent30InstallUnconditionalPropertiesEPN2v87IsolateERKNS_15DOMWrapperWorldENS1_5LocalINS1_8TemplateEEES9_S9_E15kOperationTable = internal constant [1 x { i8*, void (%"class.v8::FunctionCallbackInfo"*)*, i8, i8, i8 }] [{ i8*, void (%"class.v8::FunctionCallbackInfo"*)*, i8, i8, i8 } { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.10, i32 0, i32 0), void (%"class.v8::FunctionCallbackInfo"*)* @_ZN5blink12_GLOBAL__N_117v8_mutation_event34InitMutationEventOperationCallbackERKN2v820FunctionCallbackInfoINS2_5ValueEEE, i8 0, i8 104, i8 0 }], align 16
@.str.10 = private unnamed_addr constant [18 x i8] c"initMutationEvent\00", align 1
@_ZN3WTF8internal25g_main_thread_stack_startE = external local_unnamed_addr global i64, align 8
@_ZN3WTF8internal39g_main_thread_underestimated_stack_sizeE = external local_unnamed_addr global i64, align 8
@_ZN5blink15DOMWrapperWorld41number_of_non_main_worlds_in_main_thread_E = external local_unnamed_addr global i32, align 4
@.str.11 = private unnamed_addr constant [66 x i8] c"../../third_party/blink/renderer/platform/bindings/script_state.h\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"script_state\00", align 1
@.str.13 = private unnamed_addr constant [34 x i8] c"script_state->context_ == context\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"undefined\00", align 1
@_ZTVN5blink14ExceptionStateE = external unnamed_addr constant { [9 x i8*] }, align 8
@_ZN5blink4Node18wrapper_type_info_E = external local_unnamed_addr constant %"struct.blink::WrapperTypeInfo"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15V8MutationEvent24InstallInterfaceTemplateEPN2v87IsolateERKNS_15DOMWrapperWorldENS1_5LocalINS1_8TemplateEEE(%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"* dereferenceable(32), %"class.v8::Template"*) #0 align 2 {
  %4 = alloca %"class.base::span", align 8
  %5 = alloca %"class.base::span.181", align 8
  %6 = alloca %"class.base::span.182", align 8
  %7 = bitcast %"class.v8::Template"* %2 to %"class.v8::FunctionTemplate"*
  %8 = tail call %"class.v8::ObjectTemplate"* @_ZN2v816FunctionTemplate16InstanceTemplateEv(%"class.v8::FunctionTemplate"* %7) #6
  %9 = tail call %"class.v8::ObjectTemplate"* @_ZN2v816FunctionTemplate17PrototypeTemplateEv(%"class.v8::FunctionTemplate"* %7) #6
  %10 = tail call %"class.v8::Template"* @_ZNK5blink15WrapperTypeInfo18GetV8ClassTemplateEPN2v87IsolateERKNS_15DOMWrapperWorldE(%"struct.blink::WrapperTypeInfo"* nonnull @_ZN5blink7V8Event18wrapper_type_info_E, %"class.v8::Isolate"* %0, %"class.blink::DOMWrapperWorld"* dereferenceable(32) %1) #6
  %11 = bitcast %"class.v8::Template"* %10 to %"class.v8::FunctionTemplate"*
  tail call void @_ZN5blink8bindings25SetupIDLInterfaceTemplateEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_14ObjectTemplateEEES9_NS7_INS1_16FunctionTemplateEEESB_(%"class.v8::Isolate"* %0, %"struct.blink::WrapperTypeInfo"* nonnull @_ZN5blink15V8MutationEvent18wrapper_type_info_E, %"class.v8::ObjectTemplate"* %8, %"class.v8::ObjectTemplate"* %9, %"class.v8::FunctionTemplate"* %7, %"class.v8::FunctionTemplate"* %11) #6
  %12 = bitcast %"class.v8::ObjectTemplate"* %8 to %"class.v8::Template"*
  %13 = bitcast %"class.v8::ObjectTemplate"* %9 to %"class.v8::Template"*
  %14 = bitcast %"class.base::span"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14)
  %15 = bitcast %"class.base::span.181"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15)
  %16 = bitcast %"class.base::span.182"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16)
  %17 = tail call %"class.v8::Signature"* @_ZN2v89Signature3NewEPNS_7IsolateENS_5LocalINS_16FunctionTemplateEEE(%"class.v8::Isolate"* %0, %"class.v8::FunctionTemplate"* %7) #6
  %18 = getelementptr inbounds %"class.base::span", %"class.base::span"* %4, i64 0, i32 0, i32 0
  store i64 6, i64* %18, align 8
  %19 = getelementptr inbounds %"class.base::span", %"class.base::span"* %4, i64 0, i32 1
  store %"struct.blink::bindings::IDLMemberInstaller::AttributeConfig"* bitcast ([6 x { i8*, void (%"class.v8::FunctionCallbackInfo"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, i8, i8 }]* @_ZZN5blink15V8MutationEvent30InstallUnconditionalPropertiesEPN2v87IsolateERKNS_15DOMWrapperWorldENS1_5LocalINS1_8TemplateEEES9_S9_E15kAttributeTable to %"struct.blink::bindings::IDLMemberInstaller::AttributeConfig"*), %"struct.blink::bindings::IDLMemberInstaller::AttributeConfig"** %19, align 8
  tail call void @_ZN5blink8bindings18IDLMemberInstaller17InstallAttributesEPN2v87IsolateERKNS_15DOMWrapperWorldENS2_5LocalINS2_8TemplateEEESA_SA_NS8_INS2_9SignatureEEEN4base4spanIKNS1_15AttributeConfigELm18446744073709551615EEE(%"class.v8::Isolate"* %0, %"class.blink::DOMWrapperWorld"* dereferenceable(32) %1, %"class.v8::Template"* %12, %"class.v8::Template"* %13, %"class.v8::Template"* %2, %"class.v8::Signature"* %17, %"class.base::span"* nonnull byval(%"class.base::span") align 8 %4) #6
  %20 = getelementptr inbounds %"class.base::span.181", %"class.base::span.181"* %5, i64 0, i32 0, i32 0
  store i64 3, i64* %20, align 8
  %21 = getelementptr inbounds %"class.base::span.181", %"class.base::span.181"* %5, i64 0, i32 1
  store %"struct.blink::bindings::IDLMemberInstaller::ConstantValueConfig"* getelementptr inbounds ([3 x %"struct.blink::bindings::IDLMemberInstaller::ConstantValueConfig"], [3 x %"struct.blink::bindings::IDLMemberInstaller::ConstantValueConfig"]* @_ZZN5blink15V8MutationEvent30InstallUnconditionalPropertiesEPN2v87IsolateERKNS_15DOMWrapperWorldENS1_5LocalINS1_8TemplateEEES9_S9_E19kConstantValueTable, i64 0, i64 0), %"struct.blink::bindings::IDLMemberInstaller::ConstantValueConfig"** %21, align 8
  tail call void @_ZN5blink8bindings18IDLMemberInstaller16InstallConstantsEPN2v87IsolateERKNS_15DOMWrapperWorldENS2_5LocalINS2_8TemplateEEESA_SA_NS8_INS2_9SignatureEEEN4base4spanIKNS1_19ConstantValueConfigELm18446744073709551615EEE(%"class.v8::Isolate"* %0, %"class.blink::DOMWrapperWorld"* dereferenceable(32) %1, %"class.v8::Template"* %12, %"class.v8::Template"* %13, %"class.v8::Template"* %2, %"class.v8::Signature"* %17, %"class.base::span.181"* nonnull byval(%"class.base::span.181") align 8 %5) #6
  %22 = getelementptr inbounds %"class.base::span.182", %"class.base::span.182"* %6, i64 0, i32 0, i32 0
  store i64 1, i64* %22, align 8
  %23 = getelementptr inbounds %"class.base::span.182", %"class.base::span.182"* %6, i64 0, i32 1
  store %"struct.blink::bindings::IDLMemberInstaller::OperationConfig"* bitcast ([1 x { i8*, void (%"class.v8::FunctionCallbackInfo"*)*, i8, i8, i8 }]* @_ZZN5blink15V8MutationEvent30InstallUnconditionalPropertiesEPN2v87IsolateERKNS_15DOMWrapperWorldENS1_5LocalINS1_8TemplateEEES9_S9_E15kOperationTable to %"struct.blink::bindings::IDLMemberInstaller::OperationConfig"*), %"struct.blink::bindings::IDLMemberInstaller::OperationConfig"** %23, align 8
  tail call void @_ZN5blink8bindings18IDLMemberInstaller17InstallOperationsEPN2v87IsolateERKNS_15DOMWrapperWorldENS2_5LocalINS2_8TemplateEEESA_SA_NS8_INS2_9SignatureEEEN4base4spanIKNS1_15OperationConfigELm18446744073709551615EEE(%"class.v8::Isolate"* %0, %"class.blink::DOMWrapperWorld"* dereferenceable(32) %1, %"class.v8::Template"* %12, %"class.v8::Template"* %13, %"class.v8::Template"* %2, %"class.v8::Signature"* %17, %"class.base::span.182"* nonnull byval(%"class.base::span.182") align 8 %6) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.v8::ObjectTemplate"* @_ZN2v816FunctionTemplate16InstanceTemplateEv(%"class.v8::FunctionTemplate"*) local_unnamed_addr #2

declare %"class.v8::ObjectTemplate"* @_ZN2v816FunctionTemplate17PrototypeTemplateEv(%"class.v8::FunctionTemplate"*) local_unnamed_addr #2

declare %"class.v8::Template"* @_ZNK5blink15WrapperTypeInfo18GetV8ClassTemplateEPN2v87IsolateERKNS_15DOMWrapperWorldE(%"struct.blink::WrapperTypeInfo"*, %"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"* dereferenceable(32)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN5blink8bindings25SetupIDLInterfaceTemplateEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_14ObjectTemplateEEES9_NS7_INS1_16FunctionTemplateEEESB_(%"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::ObjectTemplate"*, %"class.v8::ObjectTemplate"*, %"class.v8::FunctionTemplate"*, %"class.v8::FunctionTemplate"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15V8MutationEvent30InstallUnconditionalPropertiesEPN2v87IsolateERKNS_15DOMWrapperWorldENS1_5LocalINS1_8TemplateEEES9_S9_(%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"* dereferenceable(32), %"class.v8::Template"*, %"class.v8::Template"*, %"class.v8::Template"*) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.base::span", align 8
  %7 = alloca %"class.base::span.181", align 8
  %8 = alloca %"class.base::span.182", align 8
  %9 = bitcast %"class.v8::Template"* %4 to %"class.v8::FunctionTemplate"*
  %10 = tail call %"class.v8::Signature"* @_ZN2v89Signature3NewEPNS_7IsolateENS_5LocalINS_16FunctionTemplateEEE(%"class.v8::Isolate"* %0, %"class.v8::FunctionTemplate"* %9) #6
  %11 = getelementptr inbounds %"class.base::span", %"class.base::span"* %6, i64 0, i32 0, i32 0
  store i64 6, i64* %11, align 8
  %12 = getelementptr inbounds %"class.base::span", %"class.base::span"* %6, i64 0, i32 1
  store %"struct.blink::bindings::IDLMemberInstaller::AttributeConfig"* bitcast ([6 x { i8*, void (%"class.v8::FunctionCallbackInfo"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, i8, i8 }]* @_ZZN5blink15V8MutationEvent30InstallUnconditionalPropertiesEPN2v87IsolateERKNS_15DOMWrapperWorldENS1_5LocalINS1_8TemplateEEES9_S9_E15kAttributeTable to %"struct.blink::bindings::IDLMemberInstaller::AttributeConfig"*), %"struct.blink::bindings::IDLMemberInstaller::AttributeConfig"** %12, align 8
  tail call void @_ZN5blink8bindings18IDLMemberInstaller17InstallAttributesEPN2v87IsolateERKNS_15DOMWrapperWorldENS2_5LocalINS2_8TemplateEEESA_SA_NS8_INS2_9SignatureEEEN4base4spanIKNS1_15AttributeConfigELm18446744073709551615EEE(%"class.v8::Isolate"* %0, %"class.blink::DOMWrapperWorld"* dereferenceable(32) %1, %"class.v8::Template"* %2, %"class.v8::Template"* %3, %"class.v8::Template"* %4, %"class.v8::Signature"* %10, %"class.base::span"* nonnull byval(%"class.base::span") align 8 %6) #6
  %13 = getelementptr inbounds %"class.base::span.181", %"class.base::span.181"* %7, i64 0, i32 0, i32 0
  store i64 3, i64* %13, align 8
  %14 = getelementptr inbounds %"class.base::span.181", %"class.base::span.181"* %7, i64 0, i32 1
  store %"struct.blink::bindings::IDLMemberInstaller::ConstantValueConfig"* getelementptr inbounds ([3 x %"struct.blink::bindings::IDLMemberInstaller::ConstantValueConfig"], [3 x %"struct.blink::bindings::IDLMemberInstaller::ConstantValueConfig"]* @_ZZN5blink15V8MutationEvent30InstallUnconditionalPropertiesEPN2v87IsolateERKNS_15DOMWrapperWorldENS1_5LocalINS1_8TemplateEEES9_S9_E19kConstantValueTable, i64 0, i64 0), %"struct.blink::bindings::IDLMemberInstaller::ConstantValueConfig"** %14, align 8
  tail call void @_ZN5blink8bindings18IDLMemberInstaller16InstallConstantsEPN2v87IsolateERKNS_15DOMWrapperWorldENS2_5LocalINS2_8TemplateEEESA_SA_NS8_INS2_9SignatureEEEN4base4spanIKNS1_19ConstantValueConfigELm18446744073709551615EEE(%"class.v8::Isolate"* %0, %"class.blink::DOMWrapperWorld"* dereferenceable(32) %1, %"class.v8::Template"* %2, %"class.v8::Template"* %3, %"class.v8::Template"* %4, %"class.v8::Signature"* %10, %"class.base::span.181"* nonnull byval(%"class.base::span.181") align 8 %7) #6
  %15 = getelementptr inbounds %"class.base::span.182", %"class.base::span.182"* %8, i64 0, i32 0, i32 0
  store i64 1, i64* %15, align 8
  %16 = getelementptr inbounds %"class.base::span.182", %"class.base::span.182"* %8, i64 0, i32 1
  store %"struct.blink::bindings::IDLMemberInstaller::OperationConfig"* bitcast ([1 x { i8*, void (%"class.v8::FunctionCallbackInfo"*)*, i8, i8, i8 }]* @_ZZN5blink15V8MutationEvent30InstallUnconditionalPropertiesEPN2v87IsolateERKNS_15DOMWrapperWorldENS1_5LocalINS1_8TemplateEEES9_S9_E15kOperationTable to %"struct.blink::bindings::IDLMemberInstaller::OperationConfig"*), %"struct.blink::bindings::IDLMemberInstaller::OperationConfig"** %16, align 8
  tail call void @_ZN5blink8bindings18IDLMemberInstaller17InstallOperationsEPN2v87IsolateERKNS_15DOMWrapperWorldENS2_5LocalINS2_8TemplateEEESA_SA_NS8_INS2_9SignatureEEEN4base4spanIKNS1_15OperationConfigELm18446744073709551615EEE(%"class.v8::Isolate"* %0, %"class.blink::DOMWrapperWorld"* dereferenceable(32) %1, %"class.v8::Template"* %2, %"class.v8::Template"* %3, %"class.v8::Template"* %4, %"class.v8::Signature"* %10, %"class.base::span.182"* nonnull byval(%"class.base::span.182") align 8 %8) #6
  ret void
}

declare %"class.v8::Signature"* @_ZN2v89Signature3NewEPNS_7IsolateENS_5LocalINS_16FunctionTemplateEEE(%"class.v8::Isolate"*, %"class.v8::FunctionTemplate"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5blink12_GLOBAL__N_117v8_mutation_event31RelatedNodeAttributeGetCallbackERKN2v820FunctionCallbackInfoINS2_5ValueEEE(%"class.v8::FunctionCallbackInfo"* nocapture readonly dereferenceable(24)) #0 {
  %2 = getelementptr inbounds %"class.v8::FunctionCallbackInfo", %"class.v8::FunctionCallbackInfo"* %0, i64 0, i32 1
  %3 = load i64*, i64** %2, align 8
  %4 = getelementptr inbounds i64, i64* %3, i64 -1
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, -1
  %7 = inttoptr i64 %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = and i64 %5, -4294967296
  %10 = zext i32 %8 to i64
  %11 = or i64 %9, %10
  %12 = add i64 %11, 7
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13, align 2
  switch i16 %14, label %19 [
    i16 1057, label %15
    i16 1056, label %15
    i16 1040, label %15
  ]

15:                                               ; preds = %1, %1, %1
  %16 = add i64 %5, 19
  %17 = inttoptr i64 %16 to i8**
  %18 = load i8*, i8** %17, align 1
  br label %22

19:                                               ; preds = %1
  %20 = bitcast i64* %4 to %"class.v8::Object"*
  %21 = tail call i8* @_ZN2v86Object38SlowGetAlignedPointerFromInternalFieldEi(%"class.v8::Object"* %20, i32 1) #6
  br label %22

22:                                               ; preds = %15, %19
  %23 = phi i8* [ %18, %15 ], [ %21, %19 ]
  %24 = getelementptr inbounds i8, i8* %23, i64 104
  %25 = bitcast i8* %24 to %"class.blink::Node"**
  %26 = load %"class.blink::Node"*, %"class.blink::Node"** %25, align 8
  %27 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %26, i64 0, i32 0, i32 0
  %28 = icmp eq %"class.blink::Node"* %26, null
  %29 = getelementptr inbounds %"class.v8::FunctionCallbackInfo", %"class.v8::FunctionCallbackInfo"* %0, i64 0, i32 0
  %30 = load i64*, i64** %29, align 8
  %31 = getelementptr inbounds i64, i64* %30, i64 3
  br i1 %28, label %32, label %38, !prof !2

32:                                               ; preds = %22
  %33 = getelementptr inbounds i64, i64* %30, i64 1
  %34 = load i64, i64* %33, align 8
  %35 = add i64 %34, 176
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36, align 8
  store i64 %37, i64* %31, align 8
  br label %61

38:                                               ; preds = %22
  %39 = bitcast i8* %23 to %"class.blink::ScriptWrappable"*
  %40 = load i64*, i64** %2, align 8
  %41 = getelementptr inbounds i64, i64* %40, i64 -1
  %42 = bitcast i64* %41 to %"class.v8::Object"*
  %43 = tail call zeroext i1 @_ZN5blink12DOMDataStore18SetReturnValueFastEN2v811ReturnValueINS1_5ValueEEEPNS_15ScriptWrappableENS1_5LocalINS1_6ObjectEEEPKS5_(i64* %31, %"class.blink::ScriptWrappable"* nonnull %27, %"class.v8::Object"* %42, %"class.blink::ScriptWrappable"* %39) #6
  br i1 %43, label %61, label %44

44:                                               ; preds = %38
  %45 = load i64*, i64** %2, align 8
  %46 = getelementptr inbounds i64, i64* %45, i64 -1
  %47 = bitcast i64* %46 to %"class.v8::Object"*
  %48 = tail call %"class.v8::Context"* @_ZN2v86Object15CreationContextEv(%"class.v8::Object"* %47) #6
  %49 = tail call %"class.blink::ScriptState"* @_ZN5blink11ScriptState4FromEN2v85LocalINS1_7ContextEEE(%"class.v8::Context"* %48) #6
  %50 = bitcast %"class.blink::Node"* %26 to %"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)***
  %51 = load %"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)**, %"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)*** %50, align 8
  %52 = getelementptr inbounds %"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)*, %"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)** %51, i64 7
  %53 = load %"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)*, %"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)** %52, align 8
  %54 = tail call %"class.v8::Value"* %53(%"class.blink::ScriptWrappable"* nonnull %27, %"class.blink::ScriptState"* %49) #6
  %55 = icmp eq %"class.v8::Value"* %54, null
  br i1 %55, label %61, label %56

56:                                               ; preds = %44
  %57 = load i64*, i64** %29, align 8
  %58 = getelementptr inbounds i64, i64* %57, i64 3
  %59 = bitcast %"class.v8::Value"* %54 to i64*
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %58, align 8
  br label %61

61:                                               ; preds = %32, %38, %44, %56
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5blink12_GLOBAL__N_117v8_mutation_event29PrevValueAttributeGetCallbackERKN2v820FunctionCallbackInfoINS2_5ValueEEE(%"class.v8::FunctionCallbackInfo"* nocapture readonly dereferenceable(24)) #0 {
  %2 = getelementptr inbounds %"class.v8::FunctionCallbackInfo", %"class.v8::FunctionCallbackInfo"* %0, i64 0, i32 1
  %3 = load i64*, i64** %2, align 8
  %4 = getelementptr inbounds i64, i64* %3, i64 -1
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, -1
  %7 = inttoptr i64 %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = and i64 %5, -4294967296
  %10 = zext i32 %8 to i64
  %11 = or i64 %9, %10
  %12 = add i64 %11, 7
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13, align 2
  switch i16 %14, label %19 [
    i16 1057, label %15
    i16 1056, label %15
    i16 1040, label %15
  ]

15:                                               ; preds = %1, %1, %1
  %16 = add i64 %5, 19
  %17 = inttoptr i64 %16 to i8**
  %18 = load i8*, i8** %17, align 1
  br label %22

19:                                               ; preds = %1
  %20 = bitcast i64* %4 to %"class.v8::Object"*
  %21 = tail call i8* @_ZN2v86Object38SlowGetAlignedPointerFromInternalFieldEi(%"class.v8::Object"* %20, i32 1) #6
  br label %22

22:                                               ; preds = %15, %19
  %23 = phi i8* [ %18, %15 ], [ %21, %19 ]
  %24 = getelementptr inbounds i8, i8* %23, i64 112
  %25 = bitcast i8* %24 to %"class.WTF::StringImpl"**
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, null
  br i1 %27, label %67, label %28

28:                                               ; preds = %22
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %45

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = zext i32 %35 to i33
  %37 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %36, i33 1) #6
  %38 = extractvalue { i33, i1 } %37, 1
  %39 = extractvalue { i33, i1 } %37, 0
  %40 = icmp slt i33 %39, 0
  %41 = or i1 %38, %40
  br i1 %41, label %42, label %43, !prof !2

42:                                               ; preds = %33
  tail call void @llvm.trap() #6
  unreachable

43:                                               ; preds = %33
  %44 = trunc i33 %39 to i32
  store i32 %44, i32* %34, align 4
  br label %45

45:                                               ; preds = %28, %43
  %46 = getelementptr inbounds %"class.v8::FunctionCallbackInfo", %"class.v8::FunctionCallbackInfo"* %0, i64 0, i32 0
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds i64, i64* %47, i64 1
  %49 = load i64, i64* %48, align 8
  %50 = add i64 %49, 8
  %51 = inttoptr i64 %50 to %"class.blink::V8PerIsolateData"**
  %52 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %51, align 8
  %53 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %52, i64 0, i32 5, i32 0, i32 0, i32 0
  %54 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %53, align 8
  %55 = getelementptr inbounds i64, i64* %47, i64 3
  %56 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %54, i64 0, i32 3, i32 0
  %57 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %56, align 8
  %58 = icmp eq %"class.WTF::StringImpl"* %57, %26
  br i1 %58, label %59, label %66

59:                                               ; preds = %45
  %60 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %54, i64 0, i32 1, i32 0
  %61 = load i64, i64* %60, align 8
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %76, label %63

63:                                               ; preds = %59
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %55, align 8
  br label %76

66:                                               ; preds = %45
  tail call void @_ZN5blink11StringCache28SetReturnValueFromStringSlowEN2v811ReturnValueINS1_5ValueEEEPN3WTF10StringImplE(%"class.blink::StringCache"* %54, i64* %55, %"class.WTF::StringImpl"* nonnull %26) #6
  br label %76

67:                                               ; preds = %22
  %68 = getelementptr inbounds %"class.v8::FunctionCallbackInfo", %"class.v8::FunctionCallbackInfo"* %0, i64 0, i32 0
  %69 = load i64*, i64** %68, align 8
  %70 = getelementptr inbounds i64, i64* %69, i64 1
  %71 = getelementptr inbounds i64, i64* %69, i64 3
  %72 = load i64, i64* %70, align 8
  %73 = add i64 %72, 200
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %71, align 8
  br label %88

76:                                               ; preds = %59, %63, %66
  %77 = load atomic i32, i32* %29 monotonic, align 4
  %78 = and i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %81 = load i32, i32* %80, align 4
  br i1 %79, label %82, label %84

82:                                               ; preds = %76
  %83 = add i32 %81, -1
  store i32 %83, i32* %80, align 4
  br label %84

84:                                               ; preds = %82, %76
  %85 = phi i32 [ %83, %82 ], [ %81, %76 ]
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %88

87:                                               ; preds = %84
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #6
  br label %88

88:                                               ; preds = %67, %84, %87
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5blink12_GLOBAL__N_117v8_mutation_event28NewValueAttributeGetCallbackERKN2v820FunctionCallbackInfoINS2_5ValueEEE(%"class.v8::FunctionCallbackInfo"* nocapture readonly dereferenceable(24)) #0 {
  %2 = getelementptr inbounds %"class.v8::FunctionCallbackInfo", %"class.v8::FunctionCallbackInfo"* %0, i64 0, i32 1
  %3 = load i64*, i64** %2, align 8
  %4 = getelementptr inbounds i64, i64* %3, i64 -1
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, -1
  %7 = inttoptr i64 %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = and i64 %5, -4294967296
  %10 = zext i32 %8 to i64
  %11 = or i64 %9, %10
  %12 = add i64 %11, 7
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13, align 2
  switch i16 %14, label %19 [
    i16 1057, label %15
    i16 1056, label %15
    i16 1040, label %15
  ]

15:                                               ; preds = %1, %1, %1
  %16 = add i64 %5, 19
  %17 = inttoptr i64 %16 to i8**
  %18 = load i8*, i8** %17, align 1
  br label %22

19:                                               ; preds = %1
  %20 = bitcast i64* %4 to %"class.v8::Object"*
  %21 = tail call i8* @_ZN2v86Object38SlowGetAlignedPointerFromInternalFieldEi(%"class.v8::Object"* %20, i32 1) #6
  br label %22

22:                                               ; preds = %15, %19
  %23 = phi i8* [ %18, %15 ], [ %21, %19 ]
  %24 = getelementptr inbounds i8, i8* %23, i64 120
  %25 = bitcast i8* %24 to %"class.WTF::StringImpl"**
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, null
  br i1 %27, label %67, label %28

28:                                               ; preds = %22
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %45

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = zext i32 %35 to i33
  %37 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %36, i33 1) #6
  %38 = extractvalue { i33, i1 } %37, 1
  %39 = extractvalue { i33, i1 } %37, 0
  %40 = icmp slt i33 %39, 0
  %41 = or i1 %38, %40
  br i1 %41, label %42, label %43, !prof !2

42:                                               ; preds = %33
  tail call void @llvm.trap() #6
  unreachable

43:                                               ; preds = %33
  %44 = trunc i33 %39 to i32
  store i32 %44, i32* %34, align 4
  br label %45

45:                                               ; preds = %28, %43
  %46 = getelementptr inbounds %"class.v8::FunctionCallbackInfo", %"class.v8::FunctionCallbackInfo"* %0, i64 0, i32 0
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds i64, i64* %47, i64 1
  %49 = load i64, i64* %48, align 8
  %50 = add i64 %49, 8
  %51 = inttoptr i64 %50 to %"class.blink::V8PerIsolateData"**
  %52 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %51, align 8
  %53 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %52, i64 0, i32 5, i32 0, i32 0, i32 0
  %54 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %53, align 8
  %55 = getelementptr inbounds i64, i64* %47, i64 3
  %56 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %54, i64 0, i32 3, i32 0
  %57 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %56, align 8
  %58 = icmp eq %"class.WTF::StringImpl"* %57, %26
  br i1 %58, label %59, label %66

59:                                               ; preds = %45
  %60 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %54, i64 0, i32 1, i32 0
  %61 = load i64, i64* %60, align 8
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %76, label %63

63:                                               ; preds = %59
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %55, align 8
  br label %76

66:                                               ; preds = %45
  tail call void @_ZN5blink11StringCache28SetReturnValueFromStringSlowEN2v811ReturnValueINS1_5ValueEEEPN3WTF10StringImplE(%"class.blink::StringCache"* %54, i64* %55, %"class.WTF::StringImpl"* nonnull %26) #6
  br label %76

67:                                               ; preds = %22
  %68 = getelementptr inbounds %"class.v8::FunctionCallbackInfo", %"class.v8::FunctionCallbackInfo"* %0, i64 0, i32 0
  %69 = load i64*, i64** %68, align 8
  %70 = getelementptr inbounds i64, i64* %69, i64 1
  %71 = getelementptr inbounds i64, i64* %69, i64 3
  %72 = load i64, i64* %70, align 8
  %73 = add i64 %72, 200
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %71, align 8
  br label %88

76:                                               ; preds = %59, %63, %66
  %77 = load atomic i32, i32* %29 monotonic, align 4
  %78 = and i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %81 = load i32, i32* %80, align 4
  br i1 %79, label %82, label %84

82:                                               ; preds = %76
  %83 = add i32 %81, -1
  store i32 %83, i32* %80, align 4
  br label %84

84:                                               ; preds = %82, %76
  %85 = phi i32 [ %83, %82 ], [ %81, %76 ]
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %88

87:                                               ; preds = %84
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #6
  br label %88

88:                                               ; preds = %67, %84, %87
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5blink12_GLOBAL__N_117v8_mutation_event28AttrNameAttributeGetCallbackERKN2v820FunctionCallbackInfoINS2_5ValueEEE(%"class.v8::FunctionCallbackInfo"* nocapture readonly dereferenceable(24)) #0 {
  %2 = getelementptr inbounds %"class.v8::FunctionCallbackInfo", %"class.v8::FunctionCallbackInfo"* %0, i64 0, i32 1
  %3 = load i64*, i64** %2, align 8
  %4 = getelementptr inbounds i64, i64* %3, i64 -1
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, -1
  %7 = inttoptr i64 %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = and i64 %5, -4294967296
  %10 = zext i32 %8 to i64
  %11 = or i64 %9, %10
  %12 = add i64 %11, 7
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13, align 2
  switch i16 %14, label %19 [
    i16 1057, label %15
    i16 1056, label %15
    i16 1040, label %15
  ]

15:                                               ; preds = %1, %1, %1
  %16 = add i64 %5, 19
  %17 = inttoptr i64 %16 to i8**
  %18 = load i8*, i8** %17, align 1
  br label %22

19:                                               ; preds = %1
  %20 = bitcast i64* %4 to %"class.v8::Object"*
  %21 = tail call i8* @_ZN2v86Object38SlowGetAlignedPointerFromInternalFieldEi(%"class.v8::Object"* %20, i32 1) #6
  br label %22

22:                                               ; preds = %15, %19
  %23 = phi i8* [ %18, %15 ], [ %21, %19 ]
  %24 = getelementptr inbounds i8, i8* %23, i64 128
  %25 = bitcast i8* %24 to %"class.WTF::StringImpl"**
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, null
  br i1 %27, label %67, label %28

28:                                               ; preds = %22
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %45

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = zext i32 %35 to i33
  %37 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %36, i33 1) #6
  %38 = extractvalue { i33, i1 } %37, 1
  %39 = extractvalue { i33, i1 } %37, 0
  %40 = icmp slt i33 %39, 0
  %41 = or i1 %38, %40
  br i1 %41, label %42, label %43, !prof !2

42:                                               ; preds = %33
  tail call void @llvm.trap() #6
  unreachable

43:                                               ; preds = %33
  %44 = trunc i33 %39 to i32
  store i32 %44, i32* %34, align 4
  br label %45

45:                                               ; preds = %28, %43
  %46 = getelementptr inbounds %"class.v8::FunctionCallbackInfo", %"class.v8::FunctionCallbackInfo"* %0, i64 0, i32 0
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds i64, i64* %47, i64 1
  %49 = load i64, i64* %48, align 8
  %50 = add i64 %49, 8
  %51 = inttoptr i64 %50 to %"class.blink::V8PerIsolateData"**
  %52 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %51, align 8
  %53 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %52, i64 0, i32 5, i32 0, i32 0, i32 0
  %54 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %53, align 8
  %55 = getelementptr inbounds i64, i64* %47, i64 3
  %56 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %54, i64 0, i32 3, i32 0
  %57 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %56, align 8
  %58 = icmp eq %"class.WTF::StringImpl"* %57, %26
  br i1 %58, label %59, label %66

59:                                               ; preds = %45
  %60 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %54, i64 0, i32 1, i32 0
  %61 = load i64, i64* %60, align 8
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %76, label %63

63:                                               ; preds = %59
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %55, align 8
  br label %76

66:                                               ; preds = %45
  tail call void @_ZN5blink11StringCache28SetReturnValueFromStringSlowEN2v811ReturnValueINS1_5ValueEEEPN3WTF10StringImplE(%"class.blink::StringCache"* %54, i64* %55, %"class.WTF::StringImpl"* nonnull %26) #6
  br label %76

67:                                               ; preds = %22
  %68 = getelementptr inbounds %"class.v8::FunctionCallbackInfo", %"class.v8::FunctionCallbackInfo"* %0, i64 0, i32 0
  %69 = load i64*, i64** %68, align 8
  %70 = getelementptr inbounds i64, i64* %69, i64 1
  %71 = getelementptr inbounds i64, i64* %69, i64 3
  %72 = load i64, i64* %70, align 8
  %73 = add i64 %72, 200
  %74 = inttoptr i64 %73 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %71, align 8
  br label %88

76:                                               ; preds = %59, %63, %66
  %77 = load atomic i32, i32* %29 monotonic, align 4
  %78 = and i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %81 = load i32, i32* %80, align 4
  br i1 %79, label %82, label %84

82:                                               ; preds = %76
  %83 = add i32 %81, -1
  store i32 %83, i32* %80, align 4
  br label %84

84:                                               ; preds = %82, %76
  %85 = phi i32 [ %83, %82 ], [ %81, %76 ]
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %88

87:                                               ; preds = %84
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #6
  br label %88

88:                                               ; preds = %67, %84, %87
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5blink12_GLOBAL__N_117v8_mutation_event30AttrChangeAttributeGetCallbackERKN2v820FunctionCallbackInfoINS2_5ValueEEE(%"class.v8::FunctionCallbackInfo"* nocapture readonly dereferenceable(24)) #0 {
  %2 = getelementptr inbounds %"class.v8::FunctionCallbackInfo", %"class.v8::FunctionCallbackInfo"* %0, i64 0, i32 1
  %3 = load i64*, i64** %2, align 8
  %4 = getelementptr inbounds i64, i64* %3, i64 -1
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, -1
  %7 = inttoptr i64 %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = and i64 %5, -4294967296
  %10 = zext i32 %8 to i64
  %11 = or i64 %9, %10
  %12 = add i64 %11, 7
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13, align 2
  switch i16 %14, label %19 [
    i16 1057, label %15
    i16 1056, label %15
    i16 1040, label %15
  ]

15:                                               ; preds = %1, %1, %1
  %16 = add i64 %5, 19
  %17 = inttoptr i64 %16 to i8**
  %18 = load i8*, i8** %17, align 1
  br label %22

19:                                               ; preds = %1
  %20 = bitcast i64* %4 to %"class.v8::Object"*
  %21 = tail call i8* @_ZN2v86Object38SlowGetAlignedPointerFromInternalFieldEi(%"class.v8::Object"* %20, i32 1) #6
  br label %22

22:                                               ; preds = %15, %19
  %23 = phi i8* [ %18, %15 ], [ %21, %19 ]
  %24 = getelementptr inbounds i8, i8* %23, i64 136
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 8
  %27 = zext i16 %26 to i64
  %28 = getelementptr inbounds %"class.v8::FunctionCallbackInfo", %"class.v8::FunctionCallbackInfo"* %0, i64 0, i32 0
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds i64, i64* %29, i64 3
  %31 = shl nuw nsw i64 %27, 1
  store i64 %31, i64* %30, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5blink12_GLOBAL__N_117v8_mutation_event29IsTrustedAttributeGetCallbackERKN2v820FunctionCallbackInfoINS2_5ValueEEE(%"class.v8::FunctionCallbackInfo"* nocapture readonly dereferenceable(24)) #0 {
  %2 = getelementptr inbounds %"class.v8::FunctionCallbackInfo", %"class.v8::FunctionCallbackInfo"* %0, i64 0, i32 1
  %3 = load i64*, i64** %2, align 8
  %4 = getelementptr inbounds i64, i64* %3, i64 -1
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, -1
  %7 = inttoptr i64 %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = and i64 %5, -4294967296
  %10 = zext i32 %8 to i64
  %11 = or i64 %9, %10
  %12 = add i64 %11, 7
  %13 = inttoptr i64 %12 to i16*
  %14 = load i16, i16* %13, align 2
  switch i16 %14, label %19 [
    i16 1057, label %15
    i16 1056, label %15
    i16 1040, label %15
  ]

15:                                               ; preds = %1, %1, %1
  %16 = add i64 %5, 19
  %17 = inttoptr i64 %16 to i8**
  %18 = load i8*, i8** %17, align 1
  br label %22

19:                                               ; preds = %1
  %20 = bitcast i64* %4 to %"class.v8::Object"*
  %21 = tail call i8* @_ZN2v86Object38SlowGetAlignedPointerFromInternalFieldEi(%"class.v8::Object"* %20, i32 1) #6
  br label %22

22:                                               ; preds = %15, %19
  %23 = phi i8* [ %18, %15 ], [ %21, %19 ]
  %24 = getelementptr inbounds i8, i8* %23, i64 24
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 8
  %27 = and i16 %26, 256
  %28 = icmp eq i16 %27, 0
  %29 = getelementptr inbounds %"class.v8::FunctionCallbackInfo", %"class.v8::FunctionCallbackInfo"* %0, i64 0, i32 0
  %30 = load i64*, i64** %29, align 8
  %31 = getelementptr inbounds i64, i64* %30, i64 3
  %32 = getelementptr inbounds i64, i64* %30, i64 1
  %33 = load i64, i64* %32, align 8
  %34 = select i1 %28, i64 192, i64 184
  %35 = add i64 %34, %33
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36, align 8
  store i64 %37, i64* %31, align 8
  ret void
}

declare void @_ZN5blink8bindings18IDLMemberInstaller17InstallAttributesEPN2v87IsolateERKNS_15DOMWrapperWorldENS2_5LocalINS2_8TemplateEEESA_SA_NS8_INS2_9SignatureEEEN4base4spanIKNS1_15AttributeConfigELm18446744073709551615EEE(%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"* dereferenceable(32), %"class.v8::Template"*, %"class.v8::Template"*, %"class.v8::Template"*, %"class.v8::Signature"*, %"class.base::span"* byval(%"class.base::span") align 8) local_unnamed_addr #2

declare void @_ZN5blink8bindings18IDLMemberInstaller16InstallConstantsEPN2v87IsolateERKNS_15DOMWrapperWorldENS2_5LocalINS2_8TemplateEEESA_SA_NS8_INS2_9SignatureEEEN4base4spanIKNS1_19ConstantValueConfigELm18446744073709551615EEE(%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"* dereferenceable(32), %"class.v8::Template"*, %"class.v8::Template"*, %"class.v8::Template"*, %"class.v8::Signature"*, %"class.base::span.181"* byval(%"class.base::span.181") align 8) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5blink12_GLOBAL__N_117v8_mutation_event34InitMutationEventOperationCallbackERKN2v820FunctionCallbackInfoINS2_5ValueEEE(%"class.v8::FunctionCallbackInfo"* readonly dereferenceable(24)) #0 {
  %2 = alloca %"class.blink::ExceptionState", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"class.blink::bindings::NativeValueTraitsStringAdapter", align 8
  %5 = alloca %"class.WTF::String", align 8
  %6 = alloca %"class.blink::bindings::NativeValueTraitsStringAdapter", align 8
  %7 = alloca %"class.WTF::String", align 8
  %8 = alloca %"class.blink::bindings::NativeValueTraitsStringAdapter", align 8
  %9 = alloca %"class.WTF::String", align 8
  %10 = alloca %"class.blink::bindings::NativeValueTraitsStringAdapter", align 8
  %11 = alloca %"class.WTF::AtomicString", align 8
  %12 = alloca %"class.WTF::String", align 8
  %13 = alloca %"class.WTF::String", align 8
  %14 = alloca %"class.WTF::String", align 8
  %15 = getelementptr inbounds %"class.v8::FunctionCallbackInfo", %"class.v8::FunctionCallbackInfo"* %0, i64 0, i32 0
  %16 = load i64*, i64** %15, align 8
  %17 = getelementptr inbounds i64, i64* %16, i64 1
  %18 = bitcast i64* %17 to %"class.v8::Isolate"**
  %19 = load %"class.v8::Isolate"*, %"class.v8::Isolate"** %18, align 8
  %20 = tail call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %19) #6
  %21 = tail call %"class.blink::ExecutionContext"* @_ZN5blink16ExecutionContext4FromEN2v85LocalINS1_7ContextEEE(%"class.v8::Context"* %20) #6
  %22 = icmp eq %"class.blink::ExecutionContext"* %21, null
  %23 = getelementptr inbounds %"class.blink::ExecutionContext", %"class.blink::ExecutionContext"* %21, i64 0, i32 3
  %24 = icmp eq %"class.blink::UseCounter"* %23, null
  %25 = or i1 %22, %24
  br i1 %25, label %31, label %26

26:                                               ; preds = %1
  %27 = bitcast %"class.blink::UseCounter"* %23 to void (%"class.blink::UseCounter"*, i32)***
  %28 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %27, align 8
  %29 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %28, i64 3
  %30 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %29, align 8
  tail call void %30(%"class.blink::UseCounter"* nonnull %23, i32 870) #6
  br label %31

31:                                               ; preds = %1, %26
  %32 = getelementptr inbounds %"class.v8::FunctionCallbackInfo", %"class.v8::FunctionCallbackInfo"* %0, i64 0, i32 1
  %33 = load i64*, i64** %32, align 8
  %34 = getelementptr inbounds i64, i64* %33, i64 -1
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %35, -1
  %37 = inttoptr i64 %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = and i64 %35, -4294967296
  %40 = zext i32 %38 to i64
  %41 = or i64 %39, %40
  %42 = add i64 %41, 7
  %43 = inttoptr i64 %42 to i16*
  %44 = load i16, i16* %43, align 2
  switch i16 %44, label %49 [
    i16 1057, label %45
    i16 1056, label %45
    i16 1040, label %45
  ]

45:                                               ; preds = %31, %31, %31
  %46 = add i64 %35, 19
  %47 = inttoptr i64 %46 to i8**
  %48 = load i8*, i8** %47, align 1
  br label %52

49:                                               ; preds = %31
  %50 = bitcast i64* %34 to %"class.v8::Object"*
  %51 = tail call i8* @_ZN2v86Object38SlowGetAlignedPointerFromInternalFieldEi(%"class.v8::Object"* %50, i32 1) #6
  br label %52

52:                                               ; preds = %45, %49
  %53 = phi i8* [ %48, %45 ], [ %51, %49 ]
  %54 = bitcast i8* %53 to %"class.blink::MutationEvent"*
  %55 = bitcast %"class.blink::ExceptionState"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %55) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 -86, i64 56, i1 false)
  %56 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %2, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink14ExceptionStateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %56, align 8
  %57 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %2, i64 0, i32 1, i32 0
  store i16 6, i16* %57, align 8
  %58 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %2, i64 0, i32 1, i32 1
  store i16 0, i16* %58, align 2
  %59 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %2, i64 0, i32 1, i32 2
  %60 = bitcast i8** %59 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.10, i64 0, i64 0)>, <2 x i8*>* %60, align 8
  %61 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %2, i64 0, i32 2
  store %"class.blink::ExceptionState::ContextScope"* null, %"class.blink::ExceptionState::ContextScope"** %61, align 8
  %62 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %2, i64 0, i32 3
  store %"class.v8::Isolate"* %19, %"class.v8::Isolate"** %62, align 8
  %63 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %2, i64 0, i32 4
  store i32 0, i32* %63, align 8
  %64 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %2, i64 0, i32 5, i32 0, i32 0
  %65 = bitcast %"class.WTF::StringImpl"** %64 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %65, i8 0, i64 16, i1 false) #6
  %66 = getelementptr inbounds %"class.v8::FunctionCallbackInfo", %"class.v8::FunctionCallbackInfo"* %0, i64 0, i32 2
  %67 = load i32, i32* %66, align 8
  %68 = icmp sgt i32 %67, 0
  br i1 %68, label %75, label %69

69:                                               ; preds = %52
  %70 = load i64*, i64** %15, align 8
  %71 = getelementptr inbounds i64, i64* %70, i64 1
  %72 = load i64, i64* %71, align 8
  %73 = add i64 %72, 160
  %74 = inttoptr i64 %73 to %"class.v8::Value"*
  br label %78

75:                                               ; preds = %52
  %76 = bitcast i64** %32 to %"class.v8::Value"**
  %77 = load %"class.v8::Value"*, %"class.v8::Value"** %76, align 8
  br label %78

78:                                               ; preds = %69, %75
  %79 = phi %"class.v8::Value"* [ %74, %69 ], [ %77, %75 ]
  %80 = bitcast %"class.v8::Value"* %79 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = and i64 %81, 3
  %83 = icmp eq i64 %82, 1
  br i1 %83, label %84, label %145

84:                                               ; preds = %78
  %85 = add i64 %81, -1
  %86 = inttoptr i64 %85 to i32*
  %87 = load i32, i32* %86, align 4
  %88 = and i64 %81, -4294967296
  %89 = zext i32 %87 to i64
  %90 = or i64 %88, %89
  %91 = add i64 %90, 7
  %92 = inttoptr i64 %91 to i16*
  %93 = load i16, i16* %92, align 2
  %94 = icmp eq i16 %93, 67
  br i1 %94, label %95, label %145

95:                                               ; preds = %84
  %96 = add i64 %81, 23
  %97 = inttoptr i64 %96 to i32*
  %98 = load i32, i32* %97, align 4
  %99 = and i32 %98, -2
  %100 = icmp eq i32 %99, 10
  br i1 %100, label %101, label %145

101:                                              ; preds = %95
  %102 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %102) #6
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i64 0, i64 0), i64 9) #6
  %103 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %104 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %103, align 8
  %105 = icmp eq %"class.WTF::StringImpl"* %104, null
  br i1 %105, label %143, label %106

106:                                              ; preds = %101
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %104, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %108 = load atomic i32, i32* %107 monotonic, align 4
  %109 = and i32 %108, 2
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %113, label %111

111:                                              ; preds = %106
  %112 = ptrtoint %"class.WTF::StringImpl"* %104 to i64
  br label %128

113:                                              ; preds = %106
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %104, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  %116 = zext i32 %115 to i33
  %117 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %116, i33 1) #6
  %118 = extractvalue { i33, i1 } %117, 1
  %119 = extractvalue { i33, i1 } %117, 0
  %120 = icmp slt i33 %119, 0
  %121 = or i1 %118, %120
  br i1 %121, label %122, label %123, !prof !2

122:                                              ; preds = %113
  call void @llvm.trap() #6
  unreachable

123:                                              ; preds = %113
  %124 = trunc i33 %119 to i32
  store i32 %124, i32* %114, align 4
  %125 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %103, align 8
  %126 = ptrtoint %"class.WTF::StringImpl"* %104 to i64
  %127 = icmp eq %"class.WTF::StringImpl"* %125, null
  br i1 %127, label %143, label %128

128:                                              ; preds = %111, %123
  %129 = phi i64 [ %112, %111 ], [ %126, %123 ]
  %130 = phi %"class.WTF::StringImpl"* [ %104, %111 ], [ %125, %123 ]
  %131 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %130, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %132 = load atomic i32, i32* %131 monotonic, align 4
  %133 = and i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %130, i64 0, i32 0
  %136 = load i32, i32* %135, align 4
  br i1 %134, label %137, label %139

137:                                              ; preds = %128
  %138 = add i32 %136, -1
  store i32 %138, i32* %135, align 4
  br label %139

139:                                              ; preds = %137, %128
  %140 = phi i32 [ %138, %137 ], [ %136, %128 ]
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %143

142:                                              ; preds = %139
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %130) #6
  br label %143

143:                                              ; preds = %101, %123, %139, %142
  %144 = phi i64 [ %126, %123 ], [ %129, %139 ], [ %129, %142 ], [ 0, %101 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %102) #6
  br label %169

145:                                              ; preds = %84, %78, %95
  %146 = bitcast %"class.blink::bindings::NativeValueTraitsStringAdapter"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %146) #6
  br i1 %68, label %153, label %147

147:                                              ; preds = %145
  %148 = load i64*, i64** %15, align 8
  %149 = getelementptr inbounds i64, i64* %148, i64 1
  %150 = load i64, i64* %149, align 8
  %151 = add i64 %150, 160
  %152 = inttoptr i64 %151 to %"class.v8::Value"*
  br label %156

153:                                              ; preds = %145
  %154 = bitcast i64** %32 to %"class.v8::Value"**
  %155 = load %"class.v8::Value"*, %"class.v8::Value"** %154, align 8
  br label %156

156:                                              ; preds = %147, %153
  %157 = phi %"class.v8::Value"* [ %152, %147 ], [ %155, %153 ]
  call void @_ZN5blink17NativeValueTraitsINS_15IDLStringBaseV2ILNS_8bindings17IDLStringConvModeE0EEEvE11NativeValueEPN2v87IsolateENS6_5LocalINS6_5ValueEEERNS_14ExceptionStateE(%"class.blink::bindings::NativeValueTraitsStringAdapter"* nonnull sret %4, %"class.v8::Isolate"* %19, %"class.v8::Value"* %157, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %2) #6
  %158 = bitcast %"class.blink::bindings::NativeValueTraitsStringAdapter"* %4 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = getelementptr inbounds %"class.blink::bindings::NativeValueTraitsStringAdapter", %"class.blink::bindings::NativeValueTraitsStringAdapter"* %4, i64 0, i32 1
  %161 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %160, i64 0, i32 0, i32 0
  %162 = bitcast %"class.WTF::String"* %160 to i64*
  %163 = load i64, i64* %162, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %161, align 8
  %164 = getelementptr inbounds %"class.blink::bindings::NativeValueTraitsStringAdapter", %"class.blink::bindings::NativeValueTraitsStringAdapter"* %4, i64 0, i32 2, i32 1
  %165 = bitcast %"class.std::__1::unique_ptr.458"* %164 to i64*
  %166 = load i64, i64* %165, align 8
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %146) #6
  %167 = load i32, i32* %63, align 8
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %169, label %1026

169:                                              ; preds = %156, %143
  %170 = phi i64 [ 0, %143 ], [ %166, %156 ]
  %171 = phi i64 [ %144, %143 ], [ %163, %156 ]
  %172 = phi i64 [ 0, %143 ], [ %159, %156 ]
  %173 = load i32, i32* %66, align 8
  %174 = icmp sgt i32 %173, 1
  br i1 %174, label %181, label %175

175:                                              ; preds = %169
  %176 = load i64*, i64** %15, align 8
  %177 = getelementptr inbounds i64, i64* %176, i64 1
  %178 = load i64, i64* %177, align 8
  %179 = add i64 %178, 160
  %180 = inttoptr i64 %179 to %"class.v8::Value"*
  br label %185

181:                                              ; preds = %169
  %182 = load i64*, i64** %32, align 8
  %183 = getelementptr inbounds i64, i64* %182, i64 1
  %184 = bitcast i64* %183 to %"class.v8::Value"*
  br label %185

185:                                              ; preds = %175, %181
  %186 = phi %"class.v8::Value"* [ %180, %175 ], [ %184, %181 ]
  %187 = bitcast %"class.v8::Value"* %186 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = and i64 %188, 3
  %190 = icmp eq i64 %189, 1
  br i1 %190, label %191, label %208

191:                                              ; preds = %185
  %192 = add i64 %188, -1
  %193 = inttoptr i64 %192 to i32*
  %194 = load i32, i32* %193, align 4
  %195 = and i64 %188, -4294967296
  %196 = zext i32 %194 to i64
  %197 = or i64 %195, %196
  %198 = add i64 %197, 7
  %199 = inttoptr i64 %198 to i16*
  %200 = load i16, i16* %199, align 2
  %201 = icmp eq i16 %200, 67
  br i1 %201, label %202, label %208

202:                                              ; preds = %191
  %203 = add i64 %188, 23
  %204 = inttoptr i64 %203 to i32*
  %205 = load i32, i32* %204, align 4
  %206 = and i32 %205, -2
  %207 = icmp eq i32 %206, 10
  br i1 %207, label %233, label %208

208:                                              ; preds = %191, %185, %202
  br i1 %174, label %215, label %209

209:                                              ; preds = %208
  %210 = load i64*, i64** %15, align 8
  %211 = getelementptr inbounds i64, i64* %210, i64 1
  %212 = load i64, i64* %211, align 8
  %213 = add i64 %212, 160
  %214 = inttoptr i64 %213 to %"class.v8::Value"*
  br label %219

215:                                              ; preds = %208
  %216 = load i64*, i64** %32, align 8
  %217 = getelementptr inbounds i64, i64* %216, i64 1
  %218 = bitcast i64* %217 to %"class.v8::Value"*
  br label %219

219:                                              ; preds = %209, %215
  %220 = phi %"class.v8::Value"* [ %214, %209 ], [ %218, %215 ]
  %221 = call zeroext i1 @_ZNK2v85Value9IsBooleanEv(%"class.v8::Value"* %220) #6
  br i1 %221, label %222, label %225, !prof !3

222:                                              ; preds = %219
  %223 = bitcast %"class.v8::Value"* %220 to %"class.v8::Boolean"*
  %224 = call zeroext i1 @_ZNK2v87Boolean5ValueEv(%"class.v8::Boolean"* %223) #6
  br label %227

225:                                              ; preds = %219
  %226 = call zeroext i1 @_ZNK2v85Value12BooleanValueEPNS_7IsolateE(%"class.v8::Value"* %220, %"class.v8::Isolate"* %19) #6
  br label %227

227:                                              ; preds = %222, %225
  %228 = phi i1 [ %224, %222 ], [ %226, %225 ]
  %229 = load i32, i32* %63, align 8
  %230 = icmp eq i32 %229, 0
  br i1 %230, label %231, label %1026

231:                                              ; preds = %227
  %232 = load i32, i32* %66, align 8
  br label %233

233:                                              ; preds = %231, %202
  %234 = phi i32 [ %232, %231 ], [ %173, %202 ]
  %235 = phi i1 [ %228, %231 ], [ false, %202 ]
  %236 = icmp sgt i32 %234, 2
  br i1 %236, label %243, label %237

237:                                              ; preds = %233
  %238 = load i64*, i64** %15, align 8
  %239 = getelementptr inbounds i64, i64* %238, i64 1
  %240 = load i64, i64* %239, align 8
  %241 = add i64 %240, 160
  %242 = inttoptr i64 %241 to %"class.v8::Value"*
  br label %247

243:                                              ; preds = %233
  %244 = load i64*, i64** %32, align 8
  %245 = getelementptr inbounds i64, i64* %244, i64 2
  %246 = bitcast i64* %245 to %"class.v8::Value"*
  br label %247

247:                                              ; preds = %237, %243
  %248 = phi %"class.v8::Value"* [ %242, %237 ], [ %246, %243 ]
  %249 = bitcast %"class.v8::Value"* %248 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = and i64 %250, 3
  %252 = icmp eq i64 %251, 1
  br i1 %252, label %253, label %270

253:                                              ; preds = %247
  %254 = add i64 %250, -1
  %255 = inttoptr i64 %254 to i32*
  %256 = load i32, i32* %255, align 4
  %257 = and i64 %250, -4294967296
  %258 = zext i32 %256 to i64
  %259 = or i64 %257, %258
  %260 = add i64 %259, 7
  %261 = inttoptr i64 %260 to i16*
  %262 = load i16, i16* %261, align 2
  %263 = icmp eq i16 %262, 67
  br i1 %263, label %264, label %270

264:                                              ; preds = %253
  %265 = add i64 %250, 23
  %266 = inttoptr i64 %265 to i32*
  %267 = load i32, i32* %266, align 4
  %268 = and i32 %267, -2
  %269 = icmp eq i32 %268, 10
  br i1 %269, label %295, label %270

270:                                              ; preds = %253, %247, %264
  br i1 %236, label %277, label %271

271:                                              ; preds = %270
  %272 = load i64*, i64** %15, align 8
  %273 = getelementptr inbounds i64, i64* %272, i64 1
  %274 = load i64, i64* %273, align 8
  %275 = add i64 %274, 160
  %276 = inttoptr i64 %275 to %"class.v8::Value"*
  br label %281

277:                                              ; preds = %270
  %278 = load i64*, i64** %32, align 8
  %279 = getelementptr inbounds i64, i64* %278, i64 2
  %280 = bitcast i64* %279 to %"class.v8::Value"*
  br label %281

281:                                              ; preds = %271, %277
  %282 = phi %"class.v8::Value"* [ %276, %271 ], [ %280, %277 ]
  %283 = call zeroext i1 @_ZNK2v85Value9IsBooleanEv(%"class.v8::Value"* %282) #6
  br i1 %283, label %284, label %287, !prof !3

284:                                              ; preds = %281
  %285 = bitcast %"class.v8::Value"* %282 to %"class.v8::Boolean"*
  %286 = call zeroext i1 @_ZNK2v87Boolean5ValueEv(%"class.v8::Boolean"* %285) #6
  br label %289

287:                                              ; preds = %281
  %288 = call zeroext i1 @_ZNK2v85Value12BooleanValueEPNS_7IsolateE(%"class.v8::Value"* %282, %"class.v8::Isolate"* %19) #6
  br label %289

289:                                              ; preds = %284, %287
  %290 = phi i1 [ %286, %284 ], [ %288, %287 ]
  %291 = load i32, i32* %63, align 8
  %292 = icmp eq i32 %291, 0
  br i1 %292, label %293, label %1026

293:                                              ; preds = %289
  %294 = load i32, i32* %66, align 8
  br label %295

295:                                              ; preds = %293, %264
  %296 = phi i32 [ %294, %293 ], [ %234, %264 ]
  %297 = phi i1 [ %290, %293 ], [ false, %264 ]
  %298 = icmp sgt i32 %296, 3
  br i1 %298, label %305, label %299

299:                                              ; preds = %295
  %300 = load i64*, i64** %15, align 8
  %301 = getelementptr inbounds i64, i64* %300, i64 1
  %302 = load i64, i64* %301, align 8
  %303 = add i64 %302, 160
  %304 = inttoptr i64 %303 to %"class.v8::Value"*
  br label %309

305:                                              ; preds = %295
  %306 = load i64*, i64** %32, align 8
  %307 = getelementptr inbounds i64, i64* %306, i64 3
  %308 = bitcast i64* %307 to %"class.v8::Value"*
  br label %309

309:                                              ; preds = %299, %305
  %310 = phi %"class.v8::Value"* [ %304, %299 ], [ %308, %305 ]
  %311 = bitcast %"class.v8::Value"* %310 to i64*
  %312 = load i64, i64* %311, align 8
  %313 = and i64 %312, 3
  %314 = icmp eq i64 %313, 1
  br i1 %314, label %315, label %332

315:                                              ; preds = %309
  %316 = add i64 %312, -1
  %317 = inttoptr i64 %316 to i32*
  %318 = load i32, i32* %317, align 4
  %319 = and i64 %312, -4294967296
  %320 = zext i32 %318 to i64
  %321 = or i64 %319, %320
  %322 = add i64 %321, 7
  %323 = inttoptr i64 %322 to i16*
  %324 = load i16, i16* %323, align 2
  %325 = icmp eq i16 %324, 67
  br i1 %325, label %326, label %332

326:                                              ; preds = %315
  %327 = add i64 %312, 23
  %328 = inttoptr i64 %327 to i32*
  %329 = load i32, i32* %328, align 4
  %330 = and i32 %329, -2
  %331 = icmp eq i32 %330, 10
  br i1 %331, label %399, label %332

332:                                              ; preds = %315, %309, %326
  br i1 %298, label %339, label %333

333:                                              ; preds = %332
  %334 = load i64*, i64** %15, align 8
  %335 = getelementptr inbounds i64, i64* %334, i64 1
  %336 = load i64, i64* %335, align 8
  %337 = add i64 %336, 160
  %338 = inttoptr i64 %337 to %"class.v8::Value"*
  br label %343

339:                                              ; preds = %332
  %340 = load i64*, i64** %32, align 8
  %341 = getelementptr inbounds i64, i64* %340, i64 3
  %342 = bitcast i64* %341 to %"class.v8::Value"*
  br label %343

343:                                              ; preds = %333, %339
  %344 = phi %"class.v8::Value"* [ %338, %333 ], [ %342, %339 ]
  %345 = load %"struct.blink::WrapperTypeInfo"*, %"struct.blink::WrapperTypeInfo"** @_ZN5blink4Node18wrapper_type_info_E, align 8
  %346 = ptrtoint %"class.v8::Isolate"* %19 to i64
  %347 = add i64 %346, 8
  %348 = inttoptr i64 %347 to %"class.blink::V8PerIsolateData"**
  %349 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %348, align 8
  %350 = call zeroext i1 @_ZN5blink16V8PerIsolateData11HasInstanceEPKNS_15WrapperTypeInfoEN2v85LocalINS4_5ValueEEE(%"class.blink::V8PerIsolateData"* %349, %"struct.blink::WrapperTypeInfo"* %345, %"class.v8::Value"* %344) #6
  %351 = bitcast %"class.v8::Value"* %344 to i64*
  %352 = load i64, i64* %351, align 8
  br i1 %350, label %353, label %373

353:                                              ; preds = %343
  %354 = add i64 %352, -1
  %355 = inttoptr i64 %354 to i32*
  %356 = load i32, i32* %355, align 4
  %357 = and i64 %352, -4294967296
  %358 = zext i32 %356 to i64
  %359 = or i64 %357, %358
  %360 = add i64 %359, 7
  %361 = inttoptr i64 %360 to i16*
  %362 = load i16, i16* %361, align 2
  switch i16 %362, label %367 [
    i16 1057, label %363
    i16 1056, label %363
    i16 1040, label %363
  ]

363:                                              ; preds = %353, %353, %353
  %364 = add i64 %352, 19
  %365 = inttoptr i64 %364 to i8**
  %366 = load i8*, i8** %365, align 1
  br label %370

367:                                              ; preds = %353
  %368 = bitcast %"class.v8::Value"* %344 to %"class.v8::Object"*
  %369 = call i8* @_ZN2v86Object38SlowGetAlignedPointerFromInternalFieldEi(%"class.v8::Object"* %368, i32 1) #6
  br label %370

370:                                              ; preds = %367, %363
  %371 = phi i8* [ %366, %363 ], [ %369, %367 ]
  %372 = bitcast i8* %371 to %"class.blink::Node"*
  br label %393

373:                                              ; preds = %343
  %374 = and i64 %352, 3
  %375 = icmp eq i64 %374, 1
  br i1 %375, label %376, label %392

376:                                              ; preds = %373
  %377 = add i64 %352, -1
  %378 = inttoptr i64 %377 to i32*
  %379 = load i32, i32* %378, align 4
  %380 = and i64 %352, -4294967296
  %381 = zext i32 %379 to i64
  %382 = or i64 %380, %381
  %383 = add i64 %382, 7
  %384 = inttoptr i64 %383 to i16*
  %385 = load i16, i16* %384, align 2
  %386 = icmp eq i16 %385, 67
  br i1 %386, label %387, label %392

387:                                              ; preds = %376
  %388 = add i64 %352, 23
  %389 = inttoptr i64 %388 to i32*
  %390 = load i32, i32* %389, align 4
  %391 = ashr i32 %390, 1
  switch i32 %391, label %392 [
    i32 5, label %393
    i32 3, label %393
  ]

392:                                              ; preds = %387, %376, %373
  call void @_ZN5blink8bindings35NativeValueTraitsInterfaceNotOfTypeEPKNS_15WrapperTypeInfoEiRNS_14ExceptionStateE(%"struct.blink::WrapperTypeInfo"* %345, i32 3, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %2) #6
  br label %393

393:                                              ; preds = %370, %387, %387, %392
  %394 = phi %"class.blink::Node"* [ %372, %370 ], [ null, %392 ], [ null, %387 ], [ null, %387 ]
  %395 = load i32, i32* %63, align 8
  %396 = icmp eq i32 %395, 0
  br i1 %396, label %397, label %1026

397:                                              ; preds = %393
  %398 = load i32, i32* %66, align 8
  br label %399

399:                                              ; preds = %397, %326
  %400 = phi i32 [ %398, %397 ], [ %296, %326 ]
  %401 = phi %"class.blink::Node"* [ %394, %397 ], [ null, %326 ]
  %402 = icmp sgt i32 %400, 4
  br i1 %402, label %409, label %403

403:                                              ; preds = %399
  %404 = load i64*, i64** %15, align 8
  %405 = getelementptr inbounds i64, i64* %404, i64 1
  %406 = load i64, i64* %405, align 8
  %407 = add i64 %406, 160
  %408 = inttoptr i64 %407 to %"class.v8::Value"*
  br label %413

409:                                              ; preds = %399
  %410 = load i64*, i64** %32, align 8
  %411 = getelementptr inbounds i64, i64* %410, i64 4
  %412 = bitcast i64* %411 to %"class.v8::Value"*
  br label %413

413:                                              ; preds = %403, %409
  %414 = phi %"class.v8::Value"* [ %408, %403 ], [ %412, %409 ]
  %415 = bitcast %"class.v8::Value"* %414 to i64*
  %416 = load i64, i64* %415, align 8
  %417 = and i64 %416, 3
  %418 = icmp eq i64 %417, 1
  br i1 %418, label %419, label %480

419:                                              ; preds = %413
  %420 = add i64 %416, -1
  %421 = inttoptr i64 %420 to i32*
  %422 = load i32, i32* %421, align 4
  %423 = and i64 %416, -4294967296
  %424 = zext i32 %422 to i64
  %425 = or i64 %423, %424
  %426 = add i64 %425, 7
  %427 = inttoptr i64 %426 to i16*
  %428 = load i16, i16* %427, align 2
  %429 = icmp eq i16 %428, 67
  br i1 %429, label %430, label %480

430:                                              ; preds = %419
  %431 = add i64 %416, 23
  %432 = inttoptr i64 %431 to i32*
  %433 = load i32, i32* %432, align 4
  %434 = and i32 %433, -2
  %435 = icmp eq i32 %434, 10
  br i1 %435, label %436, label %480

436:                                              ; preds = %430
  %437 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %437) #6
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %5, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i64 0, i64 0), i64 9) #6
  %438 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  %439 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %438, align 8
  %440 = icmp eq %"class.WTF::StringImpl"* %439, null
  br i1 %440, label %478, label %441

441:                                              ; preds = %436
  %442 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %439, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %443 = load atomic i32, i32* %442 monotonic, align 4
  %444 = and i32 %443, 2
  %445 = icmp eq i32 %444, 0
  br i1 %445, label %448, label %446

446:                                              ; preds = %441
  %447 = ptrtoint %"class.WTF::StringImpl"* %439 to i64
  br label %463

448:                                              ; preds = %441
  %449 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %439, i64 0, i32 0
  %450 = load i32, i32* %449, align 4
  %451 = zext i32 %450 to i33
  %452 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %451, i33 1) #6
  %453 = extractvalue { i33, i1 } %452, 1
  %454 = extractvalue { i33, i1 } %452, 0
  %455 = icmp slt i33 %454, 0
  %456 = or i1 %453, %455
  br i1 %456, label %457, label %458, !prof !2

457:                                              ; preds = %448
  call void @llvm.trap() #6
  unreachable

458:                                              ; preds = %448
  %459 = trunc i33 %454 to i32
  store i32 %459, i32* %449, align 4
  %460 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %438, align 8
  %461 = ptrtoint %"class.WTF::StringImpl"* %439 to i64
  %462 = icmp eq %"class.WTF::StringImpl"* %460, null
  br i1 %462, label %478, label %463

463:                                              ; preds = %446, %458
  %464 = phi i64 [ %447, %446 ], [ %461, %458 ]
  %465 = phi %"class.WTF::StringImpl"* [ %439, %446 ], [ %460, %458 ]
  %466 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %465, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %467 = load atomic i32, i32* %466 monotonic, align 4
  %468 = and i32 %467, 2
  %469 = icmp eq i32 %468, 0
  %470 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %465, i64 0, i32 0
  %471 = load i32, i32* %470, align 4
  br i1 %469, label %472, label %474

472:                                              ; preds = %463
  %473 = add i32 %471, -1
  store i32 %473, i32* %470, align 4
  br label %474

474:                                              ; preds = %472, %463
  %475 = phi i32 [ %473, %472 ], [ %471, %463 ]
  %476 = icmp eq i32 %475, 0
  br i1 %476, label %477, label %478

477:                                              ; preds = %474
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %465) #6
  br label %478

478:                                              ; preds = %436, %458, %474, %477
  %479 = phi i64 [ %461, %458 ], [ %464, %474 ], [ %464, %477 ], [ 0, %436 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %437) #6
  br label %505

480:                                              ; preds = %419, %413, %430
  %481 = bitcast %"class.blink::bindings::NativeValueTraitsStringAdapter"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %481) #6
  br i1 %402, label %488, label %482

482:                                              ; preds = %480
  %483 = load i64*, i64** %15, align 8
  %484 = getelementptr inbounds i64, i64* %483, i64 1
  %485 = load i64, i64* %484, align 8
  %486 = add i64 %485, 160
  %487 = inttoptr i64 %486 to %"class.v8::Value"*
  br label %492

488:                                              ; preds = %480
  %489 = load i64*, i64** %32, align 8
  %490 = getelementptr inbounds i64, i64* %489, i64 4
  %491 = bitcast i64* %490 to %"class.v8::Value"*
  br label %492

492:                                              ; preds = %482, %488
  %493 = phi %"class.v8::Value"* [ %487, %482 ], [ %491, %488 ]
  call void @_ZN5blink17NativeValueTraitsINS_15IDLStringBaseV2ILNS_8bindings17IDLStringConvModeE0EEEvE11NativeValueEPN2v87IsolateENS6_5LocalINS6_5ValueEEERNS_14ExceptionStateE(%"class.blink::bindings::NativeValueTraitsStringAdapter"* nonnull sret %6, %"class.v8::Isolate"* %19, %"class.v8::Value"* %493, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %2) #6
  %494 = bitcast %"class.blink::bindings::NativeValueTraitsStringAdapter"* %6 to i64*
  %495 = load i64, i64* %494, align 8
  %496 = getelementptr inbounds %"class.blink::bindings::NativeValueTraitsStringAdapter", %"class.blink::bindings::NativeValueTraitsStringAdapter"* %6, i64 0, i32 1
  %497 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %496, i64 0, i32 0, i32 0
  %498 = bitcast %"class.WTF::String"* %496 to i64*
  %499 = load i64, i64* %498, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %497, align 8
  %500 = getelementptr inbounds %"class.blink::bindings::NativeValueTraitsStringAdapter", %"class.blink::bindings::NativeValueTraitsStringAdapter"* %6, i64 0, i32 2, i32 1
  %501 = bitcast %"class.std::__1::unique_ptr.458"* %500 to i64*
  %502 = load i64, i64* %501, align 8
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %481) #6
  %503 = load i32, i32* %63, align 8
  %504 = icmp eq i32 %503, 0
  br i1 %504, label %505, label %1004

505:                                              ; preds = %492, %478
  %506 = phi i64 [ %479, %478 ], [ %499, %492 ]
  %507 = phi i64 [ 0, %478 ], [ %502, %492 ]
  %508 = phi i64 [ 0, %478 ], [ %495, %492 ]
  %509 = load i32, i32* %66, align 8
  %510 = icmp sgt i32 %509, 5
  br i1 %510, label %517, label %511

511:                                              ; preds = %505
  %512 = load i64*, i64** %15, align 8
  %513 = getelementptr inbounds i64, i64* %512, i64 1
  %514 = load i64, i64* %513, align 8
  %515 = add i64 %514, 160
  %516 = inttoptr i64 %515 to %"class.v8::Value"*
  br label %521

517:                                              ; preds = %505
  %518 = load i64*, i64** %32, align 8
  %519 = getelementptr inbounds i64, i64* %518, i64 5
  %520 = bitcast i64* %519 to %"class.v8::Value"*
  br label %521

521:                                              ; preds = %511, %517
  %522 = phi %"class.v8::Value"* [ %516, %511 ], [ %520, %517 ]
  %523 = bitcast %"class.v8::Value"* %522 to i64*
  %524 = load i64, i64* %523, align 8
  %525 = and i64 %524, 3
  %526 = icmp eq i64 %525, 1
  br i1 %526, label %527, label %588

527:                                              ; preds = %521
  %528 = add i64 %524, -1
  %529 = inttoptr i64 %528 to i32*
  %530 = load i32, i32* %529, align 4
  %531 = and i64 %524, -4294967296
  %532 = zext i32 %530 to i64
  %533 = or i64 %531, %532
  %534 = add i64 %533, 7
  %535 = inttoptr i64 %534 to i16*
  %536 = load i16, i16* %535, align 2
  %537 = icmp eq i16 %536, 67
  br i1 %537, label %538, label %588

538:                                              ; preds = %527
  %539 = add i64 %524, 23
  %540 = inttoptr i64 %539 to i32*
  %541 = load i32, i32* %540, align 4
  %542 = and i32 %541, -2
  %543 = icmp eq i32 %542, 10
  br i1 %543, label %544, label %588

544:                                              ; preds = %538
  %545 = bitcast %"class.WTF::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %545) #6
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %7, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i64 0, i64 0), i64 9) #6
  %546 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  %547 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %546, align 8
  %548 = icmp eq %"class.WTF::StringImpl"* %547, null
  br i1 %548, label %586, label %549

549:                                              ; preds = %544
  %550 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %547, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %551 = load atomic i32, i32* %550 monotonic, align 4
  %552 = and i32 %551, 2
  %553 = icmp eq i32 %552, 0
  br i1 %553, label %556, label %554

554:                                              ; preds = %549
  %555 = ptrtoint %"class.WTF::StringImpl"* %547 to i64
  br label %571

556:                                              ; preds = %549
  %557 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %547, i64 0, i32 0
  %558 = load i32, i32* %557, align 4
  %559 = zext i32 %558 to i33
  %560 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %559, i33 1) #6
  %561 = extractvalue { i33, i1 } %560, 1
  %562 = extractvalue { i33, i1 } %560, 0
  %563 = icmp slt i33 %562, 0
  %564 = or i1 %561, %563
  br i1 %564, label %565, label %566, !prof !2

565:                                              ; preds = %556
  call void @llvm.trap() #6
  unreachable

566:                                              ; preds = %556
  %567 = trunc i33 %562 to i32
  store i32 %567, i32* %557, align 4
  %568 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %546, align 8
  %569 = ptrtoint %"class.WTF::StringImpl"* %547 to i64
  %570 = icmp eq %"class.WTF::StringImpl"* %568, null
  br i1 %570, label %586, label %571

571:                                              ; preds = %554, %566
  %572 = phi i64 [ %555, %554 ], [ %569, %566 ]
  %573 = phi %"class.WTF::StringImpl"* [ %547, %554 ], [ %568, %566 ]
  %574 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %573, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %575 = load atomic i32, i32* %574 monotonic, align 4
  %576 = and i32 %575, 2
  %577 = icmp eq i32 %576, 0
  %578 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %573, i64 0, i32 0
  %579 = load i32, i32* %578, align 4
  br i1 %577, label %580, label %582

580:                                              ; preds = %571
  %581 = add i32 %579, -1
  store i32 %581, i32* %578, align 4
  br label %582

582:                                              ; preds = %580, %571
  %583 = phi i32 [ %581, %580 ], [ %579, %571 ]
  %584 = icmp eq i32 %583, 0
  br i1 %584, label %585, label %586

585:                                              ; preds = %582
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %573) #6
  br label %586

586:                                              ; preds = %544, %566, %582, %585
  %587 = phi i64 [ %569, %566 ], [ %572, %582 ], [ %572, %585 ], [ 0, %544 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %545) #6
  br label %613

588:                                              ; preds = %527, %521, %538
  %589 = bitcast %"class.blink::bindings::NativeValueTraitsStringAdapter"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %589) #6
  br i1 %510, label %596, label %590

590:                                              ; preds = %588
  %591 = load i64*, i64** %15, align 8
  %592 = getelementptr inbounds i64, i64* %591, i64 1
  %593 = load i64, i64* %592, align 8
  %594 = add i64 %593, 160
  %595 = inttoptr i64 %594 to %"class.v8::Value"*
  br label %600

596:                                              ; preds = %588
  %597 = load i64*, i64** %32, align 8
  %598 = getelementptr inbounds i64, i64* %597, i64 5
  %599 = bitcast i64* %598 to %"class.v8::Value"*
  br label %600

600:                                              ; preds = %590, %596
  %601 = phi %"class.v8::Value"* [ %595, %590 ], [ %599, %596 ]
  call void @_ZN5blink17NativeValueTraitsINS_15IDLStringBaseV2ILNS_8bindings17IDLStringConvModeE0EEEvE11NativeValueEPN2v87IsolateENS6_5LocalINS6_5ValueEEERNS_14ExceptionStateE(%"class.blink::bindings::NativeValueTraitsStringAdapter"* nonnull sret %8, %"class.v8::Isolate"* %19, %"class.v8::Value"* %601, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %2) #6
  %602 = bitcast %"class.blink::bindings::NativeValueTraitsStringAdapter"* %8 to i64*
  %603 = load i64, i64* %602, align 8
  %604 = getelementptr inbounds %"class.blink::bindings::NativeValueTraitsStringAdapter", %"class.blink::bindings::NativeValueTraitsStringAdapter"* %8, i64 0, i32 1
  %605 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %604, i64 0, i32 0, i32 0
  %606 = bitcast %"class.WTF::String"* %604 to i64*
  %607 = load i64, i64* %606, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %605, align 8
  %608 = getelementptr inbounds %"class.blink::bindings::NativeValueTraitsStringAdapter", %"class.blink::bindings::NativeValueTraitsStringAdapter"* %8, i64 0, i32 2, i32 1
  %609 = bitcast %"class.std::__1::unique_ptr.458"* %608 to i64*
  %610 = load i64, i64* %609, align 8
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %589) #6
  %611 = load i32, i32* %63, align 8
  %612 = icmp eq i32 %611, 0
  br i1 %612, label %613, label %982

613:                                              ; preds = %600, %586
  %614 = phi i64 [ 0, %586 ], [ %603, %600 ]
  %615 = phi i64 [ %587, %586 ], [ %607, %600 ]
  %616 = phi i64 [ 0, %586 ], [ %610, %600 ]
  %617 = load i32, i32* %66, align 8
  %618 = icmp sgt i32 %617, 6
  br i1 %618, label %625, label %619

619:                                              ; preds = %613
  %620 = load i64*, i64** %15, align 8
  %621 = getelementptr inbounds i64, i64* %620, i64 1
  %622 = load i64, i64* %621, align 8
  %623 = add i64 %622, 160
  %624 = inttoptr i64 %623 to %"class.v8::Value"*
  br label %629

625:                                              ; preds = %613
  %626 = load i64*, i64** %32, align 8
  %627 = getelementptr inbounds i64, i64* %626, i64 6
  %628 = bitcast i64* %627 to %"class.v8::Value"*
  br label %629

629:                                              ; preds = %619, %625
  %630 = phi %"class.v8::Value"* [ %624, %619 ], [ %628, %625 ]
  %631 = bitcast %"class.v8::Value"* %630 to i64*
  %632 = load i64, i64* %631, align 8
  %633 = and i64 %632, 3
  %634 = icmp eq i64 %633, 1
  br i1 %634, label %635, label %696

635:                                              ; preds = %629
  %636 = add i64 %632, -1
  %637 = inttoptr i64 %636 to i32*
  %638 = load i32, i32* %637, align 4
  %639 = and i64 %632, -4294967296
  %640 = zext i32 %638 to i64
  %641 = or i64 %639, %640
  %642 = add i64 %641, 7
  %643 = inttoptr i64 %642 to i16*
  %644 = load i16, i16* %643, align 2
  %645 = icmp eq i16 %644, 67
  br i1 %645, label %646, label %696

646:                                              ; preds = %635
  %647 = add i64 %632, 23
  %648 = inttoptr i64 %647 to i32*
  %649 = load i32, i32* %648, align 4
  %650 = and i32 %649, -2
  %651 = icmp eq i32 %650, 10
  br i1 %651, label %652, label %696

652:                                              ; preds = %646
  %653 = bitcast %"class.WTF::String"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %653) #6
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %9, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i64 0, i64 0), i64 9) #6
  %654 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %9, i64 0, i32 0, i32 0
  %655 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %654, align 8
  %656 = icmp eq %"class.WTF::StringImpl"* %655, null
  br i1 %656, label %694, label %657

657:                                              ; preds = %652
  %658 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %655, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %659 = load atomic i32, i32* %658 monotonic, align 4
  %660 = and i32 %659, 2
  %661 = icmp eq i32 %660, 0
  br i1 %661, label %664, label %662

662:                                              ; preds = %657
  %663 = ptrtoint %"class.WTF::StringImpl"* %655 to i64
  br label %679

664:                                              ; preds = %657
  %665 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %655, i64 0, i32 0
  %666 = load i32, i32* %665, align 4
  %667 = zext i32 %666 to i33
  %668 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %667, i33 1) #6
  %669 = extractvalue { i33, i1 } %668, 1
  %670 = extractvalue { i33, i1 } %668, 0
  %671 = icmp slt i33 %670, 0
  %672 = or i1 %669, %671
  br i1 %672, label %673, label %674, !prof !2

673:                                              ; preds = %664
  call void @llvm.trap() #6
  unreachable

674:                                              ; preds = %664
  %675 = trunc i33 %670 to i32
  store i32 %675, i32* %665, align 4
  %676 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %654, align 8
  %677 = ptrtoint %"class.WTF::StringImpl"* %655 to i64
  %678 = icmp eq %"class.WTF::StringImpl"* %676, null
  br i1 %678, label %694, label %679

679:                                              ; preds = %662, %674
  %680 = phi i64 [ %663, %662 ], [ %677, %674 ]
  %681 = phi %"class.WTF::StringImpl"* [ %655, %662 ], [ %676, %674 ]
  %682 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %681, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %683 = load atomic i32, i32* %682 monotonic, align 4
  %684 = and i32 %683, 2
  %685 = icmp eq i32 %684, 0
  %686 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %681, i64 0, i32 0
  %687 = load i32, i32* %686, align 4
  br i1 %685, label %688, label %690

688:                                              ; preds = %679
  %689 = add i32 %687, -1
  store i32 %689, i32* %686, align 4
  br label %690

690:                                              ; preds = %688, %679
  %691 = phi i32 [ %689, %688 ], [ %687, %679 ]
  %692 = icmp eq i32 %691, 0
  br i1 %692, label %693, label %694

693:                                              ; preds = %690
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %681) #6
  br label %694

694:                                              ; preds = %652, %674, %690, %693
  %695 = phi i64 [ %677, %674 ], [ %680, %690 ], [ %680, %693 ], [ 0, %652 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %653) #6
  br label %721

696:                                              ; preds = %635, %629, %646
  %697 = bitcast %"class.blink::bindings::NativeValueTraitsStringAdapter"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %697) #6
  br i1 %618, label %704, label %698

698:                                              ; preds = %696
  %699 = load i64*, i64** %15, align 8
  %700 = getelementptr inbounds i64, i64* %699, i64 1
  %701 = load i64, i64* %700, align 8
  %702 = add i64 %701, 160
  %703 = inttoptr i64 %702 to %"class.v8::Value"*
  br label %708

704:                                              ; preds = %696
  %705 = load i64*, i64** %32, align 8
  %706 = getelementptr inbounds i64, i64* %705, i64 6
  %707 = bitcast i64* %706 to %"class.v8::Value"*
  br label %708

708:                                              ; preds = %698, %704
  %709 = phi %"class.v8::Value"* [ %703, %698 ], [ %707, %704 ]
  call void @_ZN5blink17NativeValueTraitsINS_15IDLStringBaseV2ILNS_8bindings17IDLStringConvModeE0EEEvE11NativeValueEPN2v87IsolateENS6_5LocalINS6_5ValueEEERNS_14ExceptionStateE(%"class.blink::bindings::NativeValueTraitsStringAdapter"* nonnull sret %10, %"class.v8::Isolate"* %19, %"class.v8::Value"* %709, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %2) #6
  %710 = bitcast %"class.blink::bindings::NativeValueTraitsStringAdapter"* %10 to i64*
  %711 = load i64, i64* %710, align 8
  %712 = getelementptr inbounds %"class.blink::bindings::NativeValueTraitsStringAdapter", %"class.blink::bindings::NativeValueTraitsStringAdapter"* %10, i64 0, i32 1
  %713 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %712, i64 0, i32 0, i32 0
  %714 = bitcast %"class.WTF::String"* %712 to i64*
  %715 = load i64, i64* %714, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %713, align 8
  %716 = getelementptr inbounds %"class.blink::bindings::NativeValueTraitsStringAdapter", %"class.blink::bindings::NativeValueTraitsStringAdapter"* %10, i64 0, i32 2, i32 1
  %717 = bitcast %"class.std::__1::unique_ptr.458"* %716 to i64*
  %718 = load i64, i64* %717, align 8
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %697) #6
  %719 = load i32, i32* %63, align 8
  %720 = icmp eq i32 %719, 0
  br i1 %720, label %721, label %960

721:                                              ; preds = %708, %694
  %722 = phi i64 [ 0, %694 ], [ %711, %708 ]
  %723 = phi i64 [ %695, %694 ], [ %715, %708 ]
  %724 = phi i64 [ 0, %694 ], [ %718, %708 ]
  %725 = load i32, i32* %66, align 8
  %726 = icmp sgt i32 %725, 7
  br i1 %726, label %733, label %727

727:                                              ; preds = %721
  %728 = load i64*, i64** %15, align 8
  %729 = getelementptr inbounds i64, i64* %728, i64 1
  %730 = load i64, i64* %729, align 8
  %731 = add i64 %730, 160
  %732 = inttoptr i64 %731 to %"class.v8::Value"*
  br label %737

733:                                              ; preds = %721
  %734 = load i64*, i64** %32, align 8
  %735 = getelementptr inbounds i64, i64* %734, i64 7
  %736 = bitcast i64* %735 to %"class.v8::Value"*
  br label %737

737:                                              ; preds = %727, %733
  %738 = phi %"class.v8::Value"* [ %732, %727 ], [ %736, %733 ]
  %739 = bitcast %"class.v8::Value"* %738 to i64*
  %740 = load i64, i64* %739, align 8
  %741 = and i64 %740, 3
  %742 = icmp eq i64 %741, 1
  br i1 %742, label %743, label %760

743:                                              ; preds = %737
  %744 = add i64 %740, -1
  %745 = inttoptr i64 %744 to i32*
  %746 = load i32, i32* %745, align 4
  %747 = and i64 %740, -4294967296
  %748 = zext i32 %746 to i64
  %749 = or i64 %747, %748
  %750 = add i64 %749, 7
  %751 = inttoptr i64 %750 to i16*
  %752 = load i16, i16* %751, align 2
  %753 = icmp eq i16 %752, 67
  br i1 %753, label %754, label %760

754:                                              ; preds = %743
  %755 = add i64 %740, 23
  %756 = inttoptr i64 %755 to i32*
  %757 = load i32, i32* %756, align 4
  %758 = and i32 %757, -2
  %759 = icmp eq i32 %758, 10
  br i1 %759, label %776, label %760

760:                                              ; preds = %743, %737, %754
  br i1 %726, label %767, label %761

761:                                              ; preds = %760
  %762 = load i64*, i64** %15, align 8
  %763 = getelementptr inbounds i64, i64* %762, i64 1
  %764 = load i64, i64* %763, align 8
  %765 = add i64 %764, 160
  %766 = inttoptr i64 %765 to %"class.v8::Value"*
  br label %771

767:                                              ; preds = %760
  %768 = load i64*, i64** %32, align 8
  %769 = getelementptr inbounds i64, i64* %768, i64 7
  %770 = bitcast i64* %769 to %"class.v8::Value"*
  br label %771

771:                                              ; preds = %761, %767
  %772 = phi %"class.v8::Value"* [ %766, %761 ], [ %770, %767 ]
  %773 = call zeroext i16 @_ZN5blink8ToUInt16EPN2v87IsolateENS0_5LocalINS0_5ValueEEENS_30IntegerConversionConfigurationERNS_14ExceptionStateE(%"class.v8::Isolate"* %19, %"class.v8::Value"* %772, i32 0, %"class.blink::ExceptionState"* nonnull dereferenceable(72) %2) #6
  %774 = load i32, i32* %63, align 8
  %775 = icmp eq i32 %774, 0
  br i1 %775, label %776, label %960

776:                                              ; preds = %771, %754
  %777 = phi i16 [ %773, %771 ], [ 0, %754 ]
  %778 = bitcast %"class.WTF::AtomicString"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %778) #6
  %779 = icmp eq i64 %172, 0
  br i1 %779, label %783, label %780, !prof !2

780:                                              ; preds = %776
  %781 = inttoptr i64 %172 to %"class.v8::String"*
  %782 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF12AtomicStringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %781, i32 0) #6
  br label %809

783:                                              ; preds = %776
  %784 = inttoptr i64 %171 to %"class.WTF::StringImpl"*
  %785 = icmp eq i64 %171, 0
  br i1 %785, label %809, label %786

786:                                              ; preds = %783
  %787 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %784, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %788 = load atomic i32, i32* %787 acquire, align 4
  %789 = and i32 %788, 4
  %790 = icmp eq i32 %789, 0
  br i1 %790, label %807, label %791

791:                                              ; preds = %786
  %792 = load atomic i32, i32* %787 monotonic, align 4
  %793 = and i32 %792, 2
  %794 = icmp eq i32 %793, 0
  br i1 %794, label %795, label %809

795:                                              ; preds = %791
  %796 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %784, i64 0, i32 0
  %797 = load i32, i32* %796, align 4
  %798 = zext i32 %797 to i33
  %799 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %798, i33 1) #6
  %800 = extractvalue { i33, i1 } %799, 1
  %801 = extractvalue { i33, i1 } %799, 0
  %802 = icmp slt i33 %801, 0
  %803 = or i1 %800, %802
  br i1 %803, label %804, label %805, !prof !2

804:                                              ; preds = %795
  call void @llvm.trap() #6
  unreachable

805:                                              ; preds = %795
  %806 = trunc i33 %801 to i32
  store i32 %806, i32* %796, align 4
  br label %809

807:                                              ; preds = %786
  %808 = call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %784) #6
  br label %809

809:                                              ; preds = %780, %783, %791, %805, %807
  %810 = phi %"class.WTF::StringImpl"* [ %782, %780 ], [ %808, %807 ], [ %784, %791 ], [ %784, %805 ], [ null, %783 ]
  %811 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %11, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %810, %"class.WTF::StringImpl"** %811, align 8
  %812 = bitcast %"class.WTF::String"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %812) #6
  %813 = icmp eq i64 %508, 0
  br i1 %813, label %817, label %814, !prof !2

814:                                              ; preds = %809
  %815 = inttoptr i64 %508 to %"class.v8::String"*
  %816 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %815, i32 0) #6
  br label %837

817:                                              ; preds = %809
  %818 = inttoptr i64 %506 to %"class.WTF::StringImpl"*
  %819 = icmp eq i64 %506, 0
  br i1 %819, label %837, label %820

820:                                              ; preds = %817
  %821 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %818, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %822 = load atomic i32, i32* %821 monotonic, align 4
  %823 = and i32 %822, 2
  %824 = icmp eq i32 %823, 0
  br i1 %824, label %825, label %837

825:                                              ; preds = %820
  %826 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %818, i64 0, i32 0
  %827 = load i32, i32* %826, align 4
  %828 = zext i32 %827 to i33
  %829 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %828, i33 1) #6
  %830 = extractvalue { i33, i1 } %829, 1
  %831 = extractvalue { i33, i1 } %829, 0
  %832 = icmp slt i33 %831, 0
  %833 = or i1 %830, %832
  br i1 %833, label %834, label %835, !prof !2

834:                                              ; preds = %825
  call void @llvm.trap() #6
  unreachable

835:                                              ; preds = %825
  %836 = trunc i33 %831 to i32
  store i32 %836, i32* %826, align 4
  br label %837

837:                                              ; preds = %814, %817, %820, %835
  %838 = phi %"class.WTF::StringImpl"* [ %816, %814 ], [ null, %817 ], [ %818, %820 ], [ %818, %835 ]
  %839 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %838, %"class.WTF::StringImpl"** %839, align 8
  %840 = bitcast %"class.WTF::String"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %840) #6
  %841 = icmp eq i64 %614, 0
  br i1 %841, label %845, label %842, !prof !2

842:                                              ; preds = %837
  %843 = inttoptr i64 %614 to %"class.v8::String"*
  %844 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %843, i32 0) #6
  br label %865

845:                                              ; preds = %837
  %846 = inttoptr i64 %615 to %"class.WTF::StringImpl"*
  %847 = icmp eq i64 %615, 0
  br i1 %847, label %865, label %848

848:                                              ; preds = %845
  %849 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %846, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %850 = load atomic i32, i32* %849 monotonic, align 4
  %851 = and i32 %850, 2
  %852 = icmp eq i32 %851, 0
  br i1 %852, label %853, label %865

853:                                              ; preds = %848
  %854 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %846, i64 0, i32 0
  %855 = load i32, i32* %854, align 4
  %856 = zext i32 %855 to i33
  %857 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %856, i33 1) #6
  %858 = extractvalue { i33, i1 } %857, 1
  %859 = extractvalue { i33, i1 } %857, 0
  %860 = icmp slt i33 %859, 0
  %861 = or i1 %858, %860
  br i1 %861, label %862, label %863, !prof !2

862:                                              ; preds = %853
  call void @llvm.trap() #6
  unreachable

863:                                              ; preds = %853
  %864 = trunc i33 %859 to i32
  store i32 %864, i32* %854, align 4
  br label %865

865:                                              ; preds = %842, %845, %848, %863
  %866 = phi %"class.WTF::StringImpl"* [ %844, %842 ], [ null, %845 ], [ %846, %848 ], [ %846, %863 ]
  %867 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %13, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %866, %"class.WTF::StringImpl"** %867, align 8
  %868 = bitcast %"class.WTF::String"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %868) #6
  %869 = icmp eq i64 %722, 0
  br i1 %869, label %873, label %870, !prof !2

870:                                              ; preds = %865
  %871 = inttoptr i64 %722 to %"class.v8::String"*
  %872 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %871, i32 0) #6
  br label %893

873:                                              ; preds = %865
  %874 = inttoptr i64 %723 to %"class.WTF::StringImpl"*
  %875 = icmp eq i64 %723, 0
  br i1 %875, label %893, label %876

876:                                              ; preds = %873
  %877 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %874, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %878 = load atomic i32, i32* %877 monotonic, align 4
  %879 = and i32 %878, 2
  %880 = icmp eq i32 %879, 0
  br i1 %880, label %881, label %893

881:                                              ; preds = %876
  %882 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %874, i64 0, i32 0
  %883 = load i32, i32* %882, align 4
  %884 = zext i32 %883 to i33
  %885 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %884, i33 1) #6
  %886 = extractvalue { i33, i1 } %885, 1
  %887 = extractvalue { i33, i1 } %885, 0
  %888 = icmp slt i33 %887, 0
  %889 = or i1 %886, %888
  br i1 %889, label %890, label %891, !prof !2

890:                                              ; preds = %881
  call void @llvm.trap() #6
  unreachable

891:                                              ; preds = %881
  %892 = trunc i33 %887 to i32
  store i32 %892, i32* %882, align 4
  br label %893

893:                                              ; preds = %870, %873, %876, %891
  %894 = phi %"class.WTF::StringImpl"* [ %872, %870 ], [ null, %873 ], [ %874, %876 ], [ %874, %891 ]
  %895 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %14, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %894, %"class.WTF::StringImpl"** %895, align 8
  call void @_ZN5blink13MutationEvent17initMutationEventERKN3WTF12AtomicStringEbbPNS_4NodeERKNS1_6StringES9_S9_t(%"class.blink::MutationEvent"* %54, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %11, i1 zeroext %235, i1 zeroext %297, %"class.blink::Node"* %401, %"class.WTF::String"* nonnull dereferenceable(8) %12, %"class.WTF::String"* nonnull dereferenceable(8) %13, %"class.WTF::String"* nonnull dereferenceable(8) %14, i16 zeroext %777) #6
  %896 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %895, align 8
  %897 = icmp eq %"class.WTF::StringImpl"* %896, null
  br i1 %897, label %911, label %898

898:                                              ; preds = %893
  %899 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %896, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %900 = load atomic i32, i32* %899 monotonic, align 4
  %901 = and i32 %900, 2
  %902 = icmp eq i32 %901, 0
  %903 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %896, i64 0, i32 0
  %904 = load i32, i32* %903, align 4
  br i1 %902, label %905, label %907

905:                                              ; preds = %898
  %906 = add i32 %904, -1
  store i32 %906, i32* %903, align 4
  br label %907

907:                                              ; preds = %905, %898
  %908 = phi i32 [ %906, %905 ], [ %904, %898 ]
  %909 = icmp eq i32 %908, 0
  br i1 %909, label %910, label %911

910:                                              ; preds = %907
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %896) #6
  br label %911

911:                                              ; preds = %893, %907, %910
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %868) #6
  %912 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %867, align 8
  %913 = icmp eq %"class.WTF::StringImpl"* %912, null
  br i1 %913, label %927, label %914

914:                                              ; preds = %911
  %915 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %912, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %916 = load atomic i32, i32* %915 monotonic, align 4
  %917 = and i32 %916, 2
  %918 = icmp eq i32 %917, 0
  %919 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %912, i64 0, i32 0
  %920 = load i32, i32* %919, align 4
  br i1 %918, label %921, label %923

921:                                              ; preds = %914
  %922 = add i32 %920, -1
  store i32 %922, i32* %919, align 4
  br label %923

923:                                              ; preds = %921, %914
  %924 = phi i32 [ %922, %921 ], [ %920, %914 ]
  %925 = icmp eq i32 %924, 0
  br i1 %925, label %926, label %927

926:                                              ; preds = %923
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %912) #6
  br label %927

927:                                              ; preds = %911, %923, %926
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %840) #6
  %928 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %839, align 8
  %929 = icmp eq %"class.WTF::StringImpl"* %928, null
  br i1 %929, label %943, label %930

930:                                              ; preds = %927
  %931 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %928, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %932 = load atomic i32, i32* %931 monotonic, align 4
  %933 = and i32 %932, 2
  %934 = icmp eq i32 %933, 0
  %935 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %928, i64 0, i32 0
  %936 = load i32, i32* %935, align 4
  br i1 %934, label %937, label %939

937:                                              ; preds = %930
  %938 = add i32 %936, -1
  store i32 %938, i32* %935, align 4
  br label %939

939:                                              ; preds = %937, %930
  %940 = phi i32 [ %938, %937 ], [ %936, %930 ]
  %941 = icmp eq i32 %940, 0
  br i1 %941, label %942, label %943

942:                                              ; preds = %939
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %928) #6
  br label %943

943:                                              ; preds = %927, %939, %942
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %812) #6
  %944 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %811, align 8
  %945 = icmp eq %"class.WTF::StringImpl"* %944, null
  br i1 %945, label %959, label %946

946:                                              ; preds = %943
  %947 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %944, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %948 = load atomic i32, i32* %947 monotonic, align 4
  %949 = and i32 %948, 2
  %950 = icmp eq i32 %949, 0
  %951 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %944, i64 0, i32 0
  %952 = load i32, i32* %951, align 4
  br i1 %950, label %953, label %955

953:                                              ; preds = %946
  %954 = add i32 %952, -1
  store i32 %954, i32* %951, align 4
  br label %955

955:                                              ; preds = %953, %946
  %956 = phi i32 [ %954, %953 ], [ %952, %946 ]
  %957 = icmp eq i32 %956, 0
  br i1 %957, label %958, label %959

958:                                              ; preds = %955
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %944) #6
  br label %959

959:                                              ; preds = %943, %955, %958
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %778) #6
  br label %960

960:                                              ; preds = %771, %708, %959
  %961 = phi i64 [ %723, %959 ], [ %723, %771 ], [ %715, %708 ]
  %962 = phi i64 [ %724, %959 ], [ %724, %771 ], [ %718, %708 ]
  %963 = icmp eq i64 %962, 0
  br i1 %963, label %966, label %964

964:                                              ; preds = %960
  %965 = inttoptr i64 %962 to i8*
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %965) #6
  br label %966

966:                                              ; preds = %964, %960
  %967 = inttoptr i64 %961 to %"class.WTF::StringImpl"*
  %968 = icmp eq i64 %961, 0
  br i1 %968, label %982, label %969

969:                                              ; preds = %966
  %970 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %967, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %971 = load atomic i32, i32* %970 monotonic, align 4
  %972 = and i32 %971, 2
  %973 = icmp eq i32 %972, 0
  %974 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %967, i64 0, i32 0
  %975 = load i32, i32* %974, align 4
  br i1 %973, label %976, label %978

976:                                              ; preds = %969
  %977 = add i32 %975, -1
  store i32 %977, i32* %974, align 4
  br label %978

978:                                              ; preds = %976, %969
  %979 = phi i32 [ %977, %976 ], [ %975, %969 ]
  %980 = icmp eq i32 %979, 0
  br i1 %980, label %981, label %982

981:                                              ; preds = %978
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %967) #6
  br label %982

982:                                              ; preds = %981, %978, %966, %600
  %983 = phi i64 [ %607, %600 ], [ %615, %966 ], [ %615, %978 ], [ %615, %981 ]
  %984 = phi i64 [ %610, %600 ], [ %616, %966 ], [ %616, %978 ], [ %616, %981 ]
  %985 = icmp eq i64 %984, 0
  br i1 %985, label %988, label %986

986:                                              ; preds = %982
  %987 = inttoptr i64 %984 to i8*
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %987) #6
  br label %988

988:                                              ; preds = %986, %982
  %989 = inttoptr i64 %983 to %"class.WTF::StringImpl"*
  %990 = icmp eq i64 %983, 0
  br i1 %990, label %1004, label %991

991:                                              ; preds = %988
  %992 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %989, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %993 = load atomic i32, i32* %992 monotonic, align 4
  %994 = and i32 %993, 2
  %995 = icmp eq i32 %994, 0
  %996 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %989, i64 0, i32 0
  %997 = load i32, i32* %996, align 4
  br i1 %995, label %998, label %1000

998:                                              ; preds = %991
  %999 = add i32 %997, -1
  store i32 %999, i32* %996, align 4
  br label %1000

1000:                                             ; preds = %998, %991
  %1001 = phi i32 [ %999, %998 ], [ %997, %991 ]
  %1002 = icmp eq i32 %1001, 0
  br i1 %1002, label %1003, label %1004

1003:                                             ; preds = %1000
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %989) #6
  br label %1004

1004:                                             ; preds = %1003, %1000, %988, %492
  %1005 = phi i64 [ %499, %492 ], [ %506, %988 ], [ %506, %1000 ], [ %506, %1003 ]
  %1006 = phi i64 [ %502, %492 ], [ %507, %988 ], [ %507, %1000 ], [ %507, %1003 ]
  %1007 = icmp eq i64 %1006, 0
  br i1 %1007, label %1010, label %1008

1008:                                             ; preds = %1004
  %1009 = inttoptr i64 %1006 to i8*
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1009) #6
  br label %1010

1010:                                             ; preds = %1008, %1004
  %1011 = inttoptr i64 %1005 to %"class.WTF::StringImpl"*
  %1012 = icmp eq i64 %1005, 0
  br i1 %1012, label %1026, label %1013

1013:                                             ; preds = %1010
  %1014 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1011, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1015 = load atomic i32, i32* %1014 monotonic, align 4
  %1016 = and i32 %1015, 2
  %1017 = icmp eq i32 %1016, 0
  %1018 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1011, i64 0, i32 0
  %1019 = load i32, i32* %1018, align 4
  br i1 %1017, label %1020, label %1022

1020:                                             ; preds = %1013
  %1021 = add i32 %1019, -1
  store i32 %1021, i32* %1018, align 4
  br label %1022

1022:                                             ; preds = %1020, %1013
  %1023 = phi i32 [ %1021, %1020 ], [ %1019, %1013 ]
  %1024 = icmp eq i32 %1023, 0
  br i1 %1024, label %1025, label %1026

1025:                                             ; preds = %1022
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1011) #6
  br label %1026

1026:                                             ; preds = %1025, %1022, %1010, %393, %289, %227, %156
  %1027 = phi i64 [ %170, %393 ], [ %170, %289 ], [ %170, %227 ], [ %166, %156 ], [ %170, %1010 ], [ %170, %1022 ], [ %170, %1025 ]
  %1028 = phi i64 [ %171, %393 ], [ %171, %289 ], [ %171, %227 ], [ %163, %156 ], [ %171, %1010 ], [ %171, %1022 ], [ %171, %1025 ]
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5blink14ExceptionStateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %56, align 8
  %1029 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %2, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %1030 = load i64*, i64** %1029, align 8
  %1031 = icmp eq i64* %1030, null
  br i1 %1031, label %1041, label %1032

1032:                                             ; preds = %1026
  %1033 = load %"class.v8::Isolate"*, %"class.v8::Isolate"** %62, align 8
  %1034 = bitcast %"class.v8::Isolate"* %1033 to %"class.v8::internal::Isolate"*
  %1035 = load i64, i64* %1030, align 8
  %1036 = call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %1034, i64 %1035) #6
  %1037 = call zeroext i1 @_ZN2v87Isolate22IsExecutionTerminatingEv(%"class.v8::Isolate"* %1033) #6
  br i1 %1037, label %1041, label %1038

1038:                                             ; preds = %1032
  %1039 = bitcast i64* %1036 to %"class.v8::Value"*
  %1040 = call %"class.v8::Value"* @_ZN2v87Isolate14ThrowExceptionENS_5LocalINS_5ValueEEE(%"class.v8::Isolate"* %1033, %"class.v8::Value"* %1039) #6
  br label %1041

1041:                                             ; preds = %1038, %1032, %1026
  %1042 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %64, align 8
  %1043 = icmp eq %"class.WTF::StringImpl"* %1042, null
  br i1 %1043, label %1057, label %1044

1044:                                             ; preds = %1041
  %1045 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1042, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1046 = load atomic i32, i32* %1045 monotonic, align 4
  %1047 = and i32 %1046, 2
  %1048 = icmp eq i32 %1047, 0
  %1049 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1042, i64 0, i32 0
  %1050 = load i32, i32* %1049, align 4
  br i1 %1048, label %1051, label %1053

1051:                                             ; preds = %1044
  %1052 = add i32 %1050, -1
  store i32 %1052, i32* %1049, align 4
  br label %1053

1053:                                             ; preds = %1051, %1044
  %1054 = phi i32 [ %1052, %1051 ], [ %1050, %1044 ]
  %1055 = icmp eq i32 %1054, 0
  br i1 %1055, label %1056, label %1057

1056:                                             ; preds = %1053
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1042) #6
  br label %1057

1057:                                             ; preds = %1041, %1053, %1056
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %55) #6
  %1058 = icmp eq i64 %1027, 0
  br i1 %1058, label %1061, label %1059

1059:                                             ; preds = %1057
  %1060 = inttoptr i64 %1027 to i8*
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1060) #6
  br label %1061

1061:                                             ; preds = %1059, %1057
  %1062 = inttoptr i64 %1028 to %"class.WTF::StringImpl"*
  %1063 = icmp eq i64 %1028, 0
  br i1 %1063, label %1077, label %1064

1064:                                             ; preds = %1061
  %1065 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1062, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1066 = load atomic i32, i32* %1065 monotonic, align 4
  %1067 = and i32 %1066, 2
  %1068 = icmp eq i32 %1067, 0
  %1069 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1062, i64 0, i32 0
  %1070 = load i32, i32* %1069, align 4
  br i1 %1068, label %1071, label %1073

1071:                                             ; preds = %1064
  %1072 = add i32 %1070, -1
  store i32 %1072, i32* %1069, align 4
  br label %1073

1073:                                             ; preds = %1071, %1064
  %1074 = phi i32 [ %1072, %1071 ], [ %1070, %1064 ]
  %1075 = icmp eq i32 %1074, 0
  br i1 %1075, label %1076, label %1077

1076:                                             ; preds = %1073
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1062) #6
  br label %1077

1077:                                             ; preds = %1061, %1073, %1076
  ret void
}

declare void @_ZN5blink8bindings18IDLMemberInstaller17InstallOperationsEPN2v87IsolateERKNS_15DOMWrapperWorldENS2_5LocalINS2_8TemplateEEESA_SA_NS8_INS2_9SignatureEEEN4base4spanIKNS1_15OperationConfigELm18446744073709551615EEE(%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"* dereferenceable(32), %"class.v8::Template"*, %"class.v8::Template"*, %"class.v8::Template"*, %"class.v8::Signature"*, %"class.base::span.182"* byval(%"class.base::span.182") align 8) local_unnamed_addr #2

declare i8* @_ZN2v86Object38SlowGetAlignedPointerFromInternalFieldEi(%"class.v8::Object"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink12DOMDataStore18SetReturnValueFastEN2v811ReturnValueINS1_5ValueEEEPNS_15ScriptWrappableENS1_5LocalINS1_6ObjectEEEPKS5_(i64*, %"class.blink::ScriptWrappable"*, %"class.v8::Object"*, %"class.blink::ScriptWrappable"*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca i64, align 8
  %6 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #6
  %7 = load i64, i64* @_ZN3WTF8internal25g_main_thread_stack_startE, align 8
  %8 = ptrtoint i64* %5 to i64
  %9 = sub i64 %7, %8
  %10 = load i64, i64* @_ZN3WTF8internal39g_main_thread_underestimated_stack_sizeE, align 8
  %11 = icmp ult i64 %9, %10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  %12 = load i32, i32* @_ZN5blink15DOMWrapperWorld41number_of_non_main_worlds_in_main_thread_E, align 4
  %13 = icmp eq i32 %12, 0
  %14 = and i1 %11, %13
  br i1 %14, label %28, label %15

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.blink::ScriptWrappable", %"class.blink::ScriptWrappable"* %3, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %17 = load i64*, i64** %16, align 8
  %18 = icmp eq i64* %17, null
  %19 = icmp eq %"class.v8::Object"* %2, null
  %20 = or i1 %19, %18
  br i1 %20, label %26, label %21

21:                                               ; preds = %15
  %22 = bitcast %"class.v8::Object"* %2 to i64*
  %23 = load i64, i64* %17, align 8
  %24 = load i64, i64* %22, align 8
  %25 = icmp eq i64 %23, %24
  br i1 %25, label %28, label %37

26:                                               ; preds = %15
  %27 = and i1 %19, %18
  br i1 %27, label %28, label %37

28:                                               ; preds = %21, %26, %4
  %29 = getelementptr inbounds %"class.blink::ScriptWrappable", %"class.blink::ScriptWrappable"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %30 = load i64*, i64** %29, align 8
  %31 = icmp eq i64* %30, null
  %32 = getelementptr inbounds i64, i64* %0, i64 -1
  %33 = select i1 %31, i64* %32, i64* %30, !prof !2
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %0, align 8
  %35 = load i64*, i64** %29, align 8
  %36 = icmp ne i64* %35, null
  br label %80

37:                                               ; preds = %21, %26
  %38 = getelementptr inbounds i64, i64* %0, i64 -2
  %39 = bitcast i64* %38 to %"class.v8::Isolate"**
  %40 = load %"class.v8::Isolate"*, %"class.v8::Isolate"** %39, align 8
  %41 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %40) #6
  %42 = call %"class.blink::ScriptState"* @_ZN5blink11ScriptState4FromEN2v85LocalINS1_7ContextEEE(%"class.v8::Context"* %41) #6
  %43 = getelementptr inbounds %"class.blink::ScriptState", %"class.blink::ScriptState"* %42, i64 0, i32 2, i32 0
  %44 = load %"class.blink::DOMWrapperWorld"*, %"class.blink::DOMWrapperWorld"** %43, align 8
  %45 = getelementptr inbounds %"class.blink::DOMWrapperWorld", %"class.blink::DOMWrapperWorld"* %44, i64 0, i32 3, i32 0, i32 0
  %46 = load %"class.blink::DOMDataStore"*, %"class.blink::DOMDataStore"** %45, align 8
  %47 = getelementptr inbounds %"class.blink::DOMDataStore", %"class.blink::DOMDataStore"* %46, i64 0, i32 1
  %48 = load i8, i8* %47, align 8, !range !4
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %59, label %50

50:                                               ; preds = %37
  %51 = getelementptr inbounds %"class.blink::ScriptWrappable", %"class.blink::ScriptWrappable"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %52 = load i64*, i64** %51, align 8
  %53 = icmp eq i64* %52, null
  %54 = getelementptr inbounds i64, i64* %0, i64 -1
  %55 = select i1 %53, i64* %54, i64* %52, !prof !2
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %0, align 8
  %57 = load i64*, i64** %51, align 8
  %58 = icmp ne i64* %57, null
  br label %80

59:                                               ; preds = %37
  %60 = getelementptr inbounds %"class.blink::DOMDataStore", %"class.blink::DOMDataStore"* %46, i64 0, i32 3, i32 0
  %61 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %60, i64 0, i32 0
  %62 = call { %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"* } @_ZN3WTF9HashTableIN5blink10WeakMemberIKNS1_15ScriptWrappableEEENS_12KeyValuePairIS5_NS1_23TraceWrapperV8ReferenceIN2v86ObjectEEEEENS_24KeyValuePairKeyExtractorENS_10MemberHashIS4_EENS_18HashMapValueTraitsINS_10HashTraitsIS5_EENSG_ISA_EEEESH_NS1_13HeapAllocatorEE4findEPS4_(%"class.WTF::HashTable"* %61, %"class.blink::ScriptWrappable"* %1) #6
  %63 = extractvalue { %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"* } %62, 0
  %64 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %60, i64 0, i32 0, i32 0
  %65 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %64, align 8
  %66 = getelementptr inbounds %"class.blink::DOMDataStore", %"class.blink::DOMDataStore"* %46, i64 0, i32 3, i32 0, i32 0, i32 1
  %67 = load i32, i32* %66, align 8
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %65, i64 %68
  %70 = icmp eq %"struct.WTF::KeyValuePair"* %63, %69
  br i1 %70, label %80, label %71

71:                                               ; preds = %59
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %63, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %73 = load i64*, i64** %72, align 8
  %74 = icmp eq i64* %73, null
  br i1 %74, label %75, label %78, !prof !2

75:                                               ; preds = %71
  %76 = getelementptr inbounds i64, i64* %0, i64 -1
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %0, align 8
  br label %80

78:                                               ; preds = %71
  %79 = load i64, i64* %73, align 8
  store i64 %79, i64* %0, align 8
  br label %80

80:                                               ; preds = %78, %75, %59, %50, %28
  %81 = phi i1 [ %36, %28 ], [ %58, %50 ], [ false, %59 ], [ true, %75 ], [ true, %78 ]
  ret i1 %81
}

declare %"class.v8::Context"* @_ZN2v86Object15CreationContextEv(%"class.v8::Object"*) local_unnamed_addr #2

declare %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::ScriptState"* @_ZN5blink11ScriptState4FromEN2v85LocalINS1_7ContextEEE(%"class.v8::Context"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = bitcast %"class.v8::Context"* %0 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 23
  %7 = inttoptr i64 %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = and i64 %5, -4294967296
  %10 = zext i32 %8 to i64
  %11 = or i64 %9, %10
  %12 = add i64 %11, 23
  %13 = inttoptr i64 %12 to i8**
  %14 = load i8*, i8** %13, align 1
  %15 = bitcast i8* %14 to %"class.blink::ScriptState"*
  %16 = icmp eq i8* %14, null
  br i1 %16, label %17, label %20

17:                                               ; preds = %1
  %18 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #6
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.11, i64 0, i64 0), i32 175, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i64 0, i64 0)) #6
  %19 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #6
  br label %20

20:                                               ; preds = %1, %17
  %21 = getelementptr inbounds i8, i8* %14, i64 8
  %22 = bitcast i8* %21 to i64**
  %23 = load i64*, i64** %22, align 8
  %24 = icmp eq i64* %23, null
  %25 = icmp eq %"class.v8::Context"* %0, null
  %26 = or i1 %25, %24
  br i1 %26, label %31, label %27

27:                                               ; preds = %20
  %28 = load i64, i64* %23, align 8
  %29 = load i64, i64* %4, align 8
  %30 = icmp eq i64 %28, %29
  br i1 %30, label %36, label %33

31:                                               ; preds = %20
  %32 = and i1 %25, %24
  br i1 %32, label %36, label %33

33:                                               ; preds = %27, %31
  %34 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #6
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.11, i64 0, i64 0), i32 176, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.13, i64 0, i64 0)) #6
  %35 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #6
  br label %36

36:                                               ; preds = %27, %31, %33
  ret %"class.blink::ScriptState"* %15
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"* } @_ZN3WTF9HashTableIN5blink10WeakMemberIKNS1_15ScriptWrappableEEENS_12KeyValuePairIS5_NS1_23TraceWrapperV8ReferenceIN2v86ObjectEEEEENS_24KeyValuePairKeyExtractorENS_10MemberHashIS4_EENS_18HashMapValueTraitsINS_10HashTraitsIS5_EENSG_ISA_EEEESH_NS1_13HeapAllocatorEE4findEPS4_(%"class.WTF::HashTable"*, %"class.blink::ScriptWrappable"*) local_unnamed_addr #0 comdat align 2 {
  %3 = ptrtoint %"class.blink::ScriptWrappable"* %1 to i64
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  %7 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  br i1 %6, label %69, label %9

9:                                                ; preds = %2
  %10 = add i32 %8, -1
  %11 = zext i32 %10 to i64
  %12 = shl i64 %3, 32
  %13 = xor i64 %12, -1
  %14 = add i64 %13, %3
  %15 = lshr i64 %14, 22
  %16 = xor i64 %15, %14
  %17 = shl i64 %16, 13
  %18 = xor i64 %17, -1
  %19 = add i64 %16, %18
  %20 = lshr i64 %19, 8
  %21 = xor i64 %20, %19
  %22 = mul i64 %21, 9
  %23 = lshr i64 %22, 15
  %24 = xor i64 %23, %22
  %25 = shl i64 %24, 27
  %26 = xor i64 %25, -1
  %27 = add i64 %24, %26
  %28 = lshr i64 %27, 31
  %29 = xor i64 %28, %27
  %30 = trunc i64 %29 to i32
  %31 = and i32 %10, %30
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %5, i64 %32
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %33, i64 0, i32 0, i32 0, i32 0
  %35 = load %"class.blink::ScriptWrappable"*, %"class.blink::ScriptWrappable"** %34, align 8
  %36 = icmp eq %"class.blink::ScriptWrappable"* %35, %1
  br i1 %36, label %66, label %37

37:                                               ; preds = %9
  %38 = xor i32 %30, -1
  %39 = lshr i32 %30, 23
  %40 = add i32 %39, %38
  %41 = shl i32 %40, 12
  %42 = xor i32 %41, %40
  %43 = lshr i32 %42, 7
  %44 = xor i32 %43, %42
  %45 = shl i32 %44, 2
  %46 = xor i32 %45, %44
  %47 = lshr i32 %46, 20
  %48 = xor i32 %47, %46
  %49 = or i32 %48, 1
  %50 = zext i32 %49 to i64
  br label %51

51:                                               ; preds = %57, %37
  %52 = phi i64 [ %32, %37 ], [ %61, %57 ]
  %53 = phi i64 [ 0, %37 ], [ %59, %57 ]
  %54 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %5, i64 %52, i32 0, i32 0, i32 0
  %55 = load %"class.blink::ScriptWrappable"*, %"class.blink::ScriptWrappable"** %54, align 8
  %56 = icmp eq %"class.blink::ScriptWrappable"* %55, null
  br i1 %56, label %69, label %57

57:                                               ; preds = %51
  %58 = icmp eq i64 %53, 0
  %59 = select i1 %58, i64 %50, i64 %53
  %60 = add i64 %59, %52
  %61 = and i64 %60, %11
  %62 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %5, i64 %61
  %63 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = load %"class.blink::ScriptWrappable"*, %"class.blink::ScriptWrappable"** %63, align 8
  %65 = icmp eq %"class.blink::ScriptWrappable"* %64, %1
  br i1 %65, label %66, label %51

66:                                               ; preds = %57, %9
  %67 = phi %"struct.WTF::KeyValuePair"* [ %33, %9 ], [ %62, %57 ]
  %68 = icmp eq %"struct.WTF::KeyValuePair"* %67, null
  br i1 %68, label %69, label %72

69:                                               ; preds = %51, %66, %2
  %70 = zext i32 %8 to i64
  %71 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %5, i64 %70
  br label %75

72:                                               ; preds = %66
  %73 = zext i32 %8 to i64
  %74 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %5, i64 %73
  br label %75

75:                                               ; preds = %69, %72
  %76 = phi %"struct.WTF::KeyValuePair"* [ %67, %72 ], [ %71, %69 ]
  %77 = phi %"struct.WTF::KeyValuePair"* [ %74, %72 ], [ %71, %69 ]
  %78 = insertvalue { %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"* } undef, %"struct.WTF::KeyValuePair"* %76, 0
  %79 = insertvalue { %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"* } %78, %"struct.WTF::KeyValuePair"* %77, 1
  ret { %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"* } %79
}

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

declare void @_ZN5blink11StringCache28SetReturnValueFromStringSlowEN2v811ReturnValueINS1_5ValueEEEPN3WTF10StringImplE(%"class.blink::StringCache"*, i64*, %"class.WTF::StringImpl"*) local_unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare %"class.blink::ExecutionContext"* @_ZN5blink16ExecutionContext4FromEN2v85LocalINS1_7ContextEEE(%"class.v8::Context"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN5blink13MutationEvent17initMutationEventERKN3WTF12AtomicStringEbbPNS_4NodeERKNS1_6StringES9_S9_t(%"class.blink::MutationEvent"*, %"class.WTF::AtomicString"* dereferenceable(8), i1 zeroext, i1 zeroext, %"class.blink::Node"*, %"class.WTF::String"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8), i16 zeroext) local_unnamed_addr #2

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink17NativeValueTraitsINS_15IDLStringBaseV2ILNS_8bindings17IDLStringConvModeE0EEEvE11NativeValueEPN2v87IsolateENS6_5LocalINS6_5ValueEEERNS_14ExceptionStateE(%"class.blink::bindings::NativeValueTraitsStringAdapter"* noalias sret, %"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.v8::TryCatch", align 8
  %6 = bitcast %"class.v8::Value"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 3
  %9 = icmp eq i64 %8, 1
  br i1 %9, label %10, label %26

10:                                               ; preds = %4
  %11 = add i64 %7, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = and i64 %7, -4294967296
  %15 = zext i32 %13 to i64
  %16 = or i64 %14, %15
  %17 = add i64 %16, 7
  %18 = inttoptr i64 %17 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = icmp ult i16 %19, 64
  br i1 %20, label %21, label %26

21:                                               ; preds = %10
  %22 = bitcast %"class.blink::bindings::NativeValueTraitsStringAdapter"* %0 to %"class.v8::Value"**
  store %"class.v8::Value"* %2, %"class.v8::Value"** %22, align 8
  %23 = getelementptr inbounds %"class.blink::bindings::NativeValueTraitsStringAdapter", %"class.blink::bindings::NativeValueTraitsStringAdapter"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %23, align 8
  %24 = getelementptr inbounds %"class.blink::bindings::NativeValueTraitsStringAdapter", %"class.blink::bindings::NativeValueTraitsStringAdapter"* %0, i64 0, i32 2, i32 1
  %25 = bitcast %"class.std::__1::unique_ptr.458"* %24 to i64*
  store i64 0, i64* %25, align 8
  br label %54

26:                                               ; preds = %4, %10
  %27 = tail call zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"* %2) #6
  br i1 %27, label %28, label %36

28:                                               ; preds = %26
  %29 = bitcast %"class.v8::Value"* %2 to %"class.v8::Int32"*
  %30 = tail call i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"* %29) #6
  %31 = getelementptr inbounds %"class.blink::bindings::NativeValueTraitsStringAdapter", %"class.blink::bindings::NativeValueTraitsStringAdapter"* %0, i64 0, i32 0, i32 0
  store %"class.v8::String"* null, %"class.v8::String"** %31, align 8
  %32 = tail call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32 %30) #6
  %33 = getelementptr inbounds %"class.blink::bindings::NativeValueTraitsStringAdapter", %"class.blink::bindings::NativeValueTraitsStringAdapter"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"** %33, align 8
  %34 = getelementptr inbounds %"class.blink::bindings::NativeValueTraitsStringAdapter", %"class.blink::bindings::NativeValueTraitsStringAdapter"* %0, i64 0, i32 2, i32 1
  %35 = bitcast %"class.std::__1::unique_ptr.458"* %34 to i64*
  store i64 0, i64* %35, align 8
  br label %54

36:                                               ; preds = %26
  %37 = bitcast %"class.v8::TryCatch"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %37) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %37, i8 -86, i64 48, i1 false)
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %5, %"class.v8::Isolate"* %1) #6
  %38 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %1) #6
  %39 = call %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"* %2, %"class.v8::Context"* %38) #6
  %40 = icmp eq %"class.v8::String"* %39, null
  br i1 %40, label %41, label %48

41:                                               ; preds = %36
  %42 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #6
  %43 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %44 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %43, align 8
  %45 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %44, i64 5
  %46 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %45, align 8
  call void %46(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %42) #6
  %47 = bitcast %"class.blink::bindings::NativeValueTraitsStringAdapter"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 152, i1 false)
  br label %53

48:                                               ; preds = %36
  %49 = getelementptr inbounds %"class.blink::bindings::NativeValueTraitsStringAdapter", %"class.blink::bindings::NativeValueTraitsStringAdapter"* %0, i64 0, i32 0, i32 0
  store %"class.v8::String"* %39, %"class.v8::String"** %49, align 8
  %50 = getelementptr inbounds %"class.blink::bindings::NativeValueTraitsStringAdapter", %"class.blink::bindings::NativeValueTraitsStringAdapter"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %50, align 8
  %51 = getelementptr inbounds %"class.blink::bindings::NativeValueTraitsStringAdapter", %"class.blink::bindings::NativeValueTraitsStringAdapter"* %0, i64 0, i32 2, i32 1
  %52 = bitcast %"class.std::__1::unique_ptr.458"* %51 to i64*
  store i64 0, i64* %52, align 8
  br label %53

53:                                               ; preds = %48, %41
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %37) #6
  br label %54

54:                                               ; preds = %53, %28, %21
  ret void
}

declare zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"*) local_unnamed_addr #2

declare i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"*) local_unnamed_addr #2

declare void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"*, %"class.v8::Isolate"*) unnamed_addr #2

declare %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"*, %"class.v8::Context"*) local_unnamed_addr #2

declare %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"*) unnamed_addr #3

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32) local_unnamed_addr #2

declare void @_ZN3WTF10Partitions10BufferFreeEPv(i8*) local_unnamed_addr #2

declare zeroext i1 @_ZNK2v85Value9IsBooleanEv(%"class.v8::Value"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK2v87Boolean5ValueEv(%"class.v8::Boolean"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK2v85Value12BooleanValueEPNS_7IsolateE(%"class.v8::Value"*, %"class.v8::Isolate"*) local_unnamed_addr #2

declare zeroext i1 @_ZN5blink16V8PerIsolateData11HasInstanceEPKNS_15WrapperTypeInfoEN2v85LocalINS4_5ValueEEE(%"class.blink::V8PerIsolateData"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Value"*) local_unnamed_addr #2

declare void @_ZN5blink8bindings35NativeValueTraitsInterfaceNotOfTypeEPKNS_15WrapperTypeInfoEiRNS_14ExceptionStateE(%"struct.blink::WrapperTypeInfo"*, i32, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #2

declare zeroext i16 @_ZN5blink8ToUInt16EPN2v87IsolateENS0_5LocalINS0_5ValueEEENS_30IntegerConversionConfigurationERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, i32, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF12AtomicStringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"*, i32) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZN2v87Isolate22IsExecutionTerminatingEv(%"class.v8::Isolate"*) local_unnamed_addr #2

declare %"class.v8::Value"* @_ZN2v87Isolate14ThrowExceptionENS_5LocalINS_5ValueEEE(%"class.v8::Isolate"*, %"class.v8::Value"*) local_unnamed_addr #2

declare i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i8 0, i8 2}
