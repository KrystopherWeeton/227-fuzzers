; ModuleID = '../../media/formats/common/offset_byte_queue.cc'
source_filename = "../../media/formats/common/offset_byte_queue.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.media::OffsetByteQueue" = type { %"class.media::ByteQueue", i8*, i32, i64 }
%"class.media::ByteQueue" = type { i64, i64, i32, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }

@_ZN5media15OffsetByteQueueC1Ev = hidden unnamed_addr alias void (%"class.media::OffsetByteQueue"*), void (%"class.media::OffsetByteQueue"*)* @_ZN5media15OffsetByteQueueC2Ev
@_ZN5media15OffsetByteQueueD1Ev = hidden unnamed_addr alias void (%"class.media::OffsetByteQueue"*), void (%"class.media::OffsetByteQueue"*)* @_ZN5media15OffsetByteQueueD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media15OffsetByteQueueC2Ev(%"class.media::OffsetByteQueue"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 0
  tail call void @_ZN5media9ByteQueueC1Ev(%"class.media::ByteQueue"* %2) #4
  %3 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 1
  store i8* null, i8** %3, align 8
  %4 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 2
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 3
  store i64 0, i64* %5, align 8
  ret void
}

declare void @_ZN5media9ByteQueueC1Ev(%"class.media::ByteQueue"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media15OffsetByteQueueD2Ev(%"class.media::OffsetByteQueue"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 0
  tail call void @_ZN5media9ByteQueueD1Ev(%"class.media::ByteQueue"* %2) #4
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5media9ByteQueueD1Ev(%"class.media::ByteQueue"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media15OffsetByteQueue5ResetEv(%"class.media::OffsetByteQueue"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 0
  tail call void @_ZN5media9ByteQueue5ResetEv(%"class.media::ByteQueue"* %2) #4
  %3 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 1
  store i8* null, i8** %3, align 8
  %4 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 2
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 3
  store i64 0, i64* %5, align 8
  ret void
}

declare void @_ZN5media9ByteQueue5ResetEv(%"class.media::ByteQueue"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media15OffsetByteQueue4PushEPKhi(%"class.media::OffsetByteQueue"*, i8*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 0
  tail call void @_ZN5media9ByteQueue4PushEPKhi(%"class.media::ByteQueue"* %4, i8* %1, i32 %2) #4
  %5 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 2
  tail call void @_ZNK5media9ByteQueue4PeekEPPKhPi(%"class.media::ByteQueue"* %4, i8** %5, i32* %6) #4
  ret void
}

declare void @_ZN5media9ByteQueue4PushEPKhi(%"class.media::ByteQueue"*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media15OffsetByteQueue4SyncEv(%"class.media::OffsetByteQueue"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 2
  tail call void @_ZNK5media9ByteQueue4PeekEPPKhPi(%"class.media::ByteQueue"* %2, i8** %3, i32* %4) #4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5media15OffsetByteQueue4PeekEPPKhPi(%"class.media::OffsetByteQueue"* nocapture readonly, i8** nocapture, i32* nocapture) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 1
  %9 = load i8*, i8** %8, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi i8* [ %9, %7 ], [ null, %3 ]
  store i8* %11, i8** %1, align 8
  %12 = load i32, i32* %4, align 8
  store i32 %12, i32* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media15OffsetByteQueue3PopEi(%"class.media::OffsetByteQueue"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 0
  tail call void @_ZN5media9ByteQueue3PopEi(%"class.media::ByteQueue"* %3, i32 %1) #4
  %4 = sext i32 %1 to i64
  %5 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = add nsw i64 %6, %4
  store i64 %7, i64* %5, align 8
  %8 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 2
  tail call void @_ZNK5media9ByteQueue4PeekEPPKhPi(%"class.media::ByteQueue"* %3, i8** %8, i32* %9) #4
  ret void
}

declare void @_ZN5media9ByteQueue3PopEi(%"class.media::ByteQueue"*, i32) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5media15OffsetByteQueue6PeekAtElPPKhPi(%"class.media::OffsetByteQueue"* nocapture readonly, i64, i8** nocapture, i32* nocapture) local_unnamed_addr #3 align 2 {
  %5 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = icmp sgt i64 %6, %1
  br i1 %7, label %14, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = sext i32 %10 to i64
  %12 = add nsw i64 %6, %11
  %13 = icmp sgt i64 %12, %1
  br i1 %13, label %15, label %14

14:                                               ; preds = %8, %4
  store i8* null, i8** %2, align 8
  br label %25

15:                                               ; preds = %8
  %16 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 1
  %17 = load i8*, i8** %16, align 8
  %18 = sub nsw i64 %1, %6
  %19 = getelementptr inbounds i8, i8* %17, i64 %18
  store i8* %19, i8** %2, align 8
  %20 = load i64, i64* %5, align 8
  %21 = load i32, i32* %9, align 8
  %22 = sub i64 %20, %1
  %23 = trunc i64 %22 to i32
  %24 = add i32 %21, %23
  br label %25

25:                                               ; preds = %15, %14
  %26 = phi i32 [ %24, %15 ], [ 0, %14 ]
  store i32 %26, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5media15OffsetByteQueue4TrimEl(%"class.media::OffsetByteQueue"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp sgt i64 %4, %1
  br i1 %5, label %27, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = add nsw i64 %4, %9
  %11 = icmp slt i64 %10, %1
  br i1 %11, label %12, label %14

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 0
  tail call void @_ZN5media9ByteQueue3PopEi(%"class.media::ByteQueue"* %13, i32 %8) #4
  br label %20

14:                                               ; preds = %6
  %15 = sub nsw i64 %1, %4
  %16 = trunc i64 %15 to i32
  %17 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 0
  tail call void @_ZN5media9ByteQueue3PopEi(%"class.media::ByteQueue"* %17, i32 %16) #4
  %18 = shl i64 %15, 32
  %19 = ashr exact i64 %18, 32
  br label %20

20:                                               ; preds = %12, %14
  %21 = phi i64 [ %19, %14 ], [ %9, %12 ]
  %22 = phi %"class.media::ByteQueue"* [ %17, %14 ], [ %13, %12 ]
  %23 = phi i1 [ true, %14 ], [ false, %12 ]
  %24 = load i64, i64* %3, align 8
  %25 = add nsw i64 %24, %21
  store i64 %25, i64* %3, align 8
  %26 = getelementptr inbounds %"class.media::OffsetByteQueue", %"class.media::OffsetByteQueue"* %0, i64 0, i32 1
  tail call void @_ZNK5media9ByteQueue4PeekEPPKhPi(%"class.media::ByteQueue"* %22, i8** %26, i32* %7) #4
  br label %27

27:                                               ; preds = %20, %2
  %28 = phi i1 [ true, %2 ], [ %23, %20 ]
  ret i1 %28
}

declare void @_ZNK5media9ByteQueue4PeekEPPKhPi(%"class.media::ByteQueue"*, i8**, i32*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
