; ModuleID = '../../third_party/skia/src/gpu/gradients/generated/GrDualIntervalGradientColorizer.cpp'
source_filename = "../../third_party/skia/src/gpu/gradients/generated/GrDualIntervalGradientColorizer.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.GrDualIntervalGradientColorizer = type { %class.GrFragmentProcessor.base, %struct.SkRGBA4f, %struct.SkRGBA4f, %struct.SkRGBA4f, %struct.SkRGBA4f, float }
%class.GrFragmentProcessor.base = type <{ %class.GrProcessor, %class.SkSTArray, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage" }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray.3 }
%class.SkAlignedSTStorage = type { [8 x i8] }
%class.SkTArray.3 = type { %"class.std::__1::unique_ptr.4"*, i64 }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %class.GrFragmentProcessor* }
%class.GrFragmentProcessor = type <{ %class.GrProcessor, %class.SkSTArray, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage", [4 x i8] }>
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%struct.SkRGBA4f = type { float, float, float, float }
%class.GrGLSLFragmentProcessor = type { i32 (...)**, %class.SkTArray, %class.SkTArray.1 }
%class.SkTArray = type { %class.SkString*, i64 }
%class.SkString = type { %class.sk_sp }
%class.sk_sp = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkTArray.1 = type { %"class.std::__1::unique_ptr"*, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.GrGLSLFragmentProcessor* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.GrProcessorKeyBuilder = type { i32 (...)**, %class.SkTArray.16*, i32, i32 }
%class.SkTArray.16 = type { i32*, i64 }
%class.GrGLSLDualIntervalGradientColorizer = type <{ %class.GrGLSLFragmentProcessor, %class.GrResourceHandle, %class.GrResourceHandle, %class.GrResourceHandle, %class.GrResourceHandle, %class.GrResourceHandle, [4 x i8] }>
%class.GrResourceHandle = type { i32 }
%"struct.GrGLSLFragmentProcessor::EmitArgs" = type { %class.GrGLSLFPFragmentBuilder*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*, %class.GrFragmentProcessor*, i8*, i8*, %"class.GrGLSLFragmentProcessor::BuilderInputProvider"* }
%class.GrGLSLFPFragmentBuilder = type <{ i32 (...)**, [4 x i8], [4 x i8], %class.GrGLSLShaderBuilder.base, [12 x i8] }>
%class.GrGLSLShaderBuilder.base = type <{ i32 (...)**, %class.GrGLSLProgramBuilder*, %"class.SkSL::String", %class.SkSTArray.27, %class.SkString, %class.SkString, %class.SkString, %class.SkSTArray.29, [8 x i8], %class.GrTBlockList, %class.GrTBlockList, i32, [4 x i8], [2 x %class.SkSTArray.38], i32, i8, [3 x i8], i32 }>
%class.GrGLSLProgramBuilder = type { i32 (...)**, [8 x i8], %class.GrGLSLVertexBuilder, %class.GrGLSLGeometryBuilder, %class.GrGLSLFragmentShaderBuilder, i32, %class.GrProgramDesc*, %class.GrProgramInfo*, %struct.GrGLSLBuiltinUniformHandles, %"class.std::__1::unique_ptr.101", %"class.std::__1::unique_ptr.108", %"class.std::__1::vector", i32, %class.SkSTArray.119 }
%class.GrGLSLVertexBuilder = type { %class.GrGLSLVertexGeoBuilder.base, [12 x i8] }
%class.GrGLSLVertexGeoBuilder.base = type { %class.GrGLSLShaderBuilder.base }
%class.GrGLSLGeometryBuilder = type { %class.GrGLSLVertexGeoBuilder.base, i32, [8 x i8] }
%class.GrGLSLFragmentShaderBuilder = type <{ %class.GrGLSLFPFragmentBuilder.base, [4 x i8], %class.GrGLSLXPFragmentBuilder.base, %class.SkTArray.40, %class.SkString, %class.GrShaderVar*, i8, i8, i8, i8, [4 x i8], %class.GrGLSLShaderBuilder.base, [12 x i8] }>
%class.GrGLSLFPFragmentBuilder.base = type <{ i32 (...)**, [4 x i8] }>
%class.GrGLSLXPFragmentBuilder.base = type { i32 (...)** }
%class.SkTArray.40 = type { i32*, i64 }
%class.GrShaderVar = type { i32, i32, i32, %class.SkString, %class.SkString, %class.SkString }
%class.GrProgramDesc = type <{ %class.SkSTArray.41, i32, [4 x i8] }>
%class.SkSTArray.41 = type { %class.SkAlignedSTStorage.42, %class.SkTArray.16 }
%class.SkAlignedSTStorage.42 = type { [132 x i8] }
%class.GrProgramInfo = type { i32, i8, %class.GrBackendFormat, i32, i8, %class.GrPipeline*, %struct.GrUserStencilSettings*, %class.GrGeometryProcessor*, i32, i8, i8, i32, i32 }
%class.GrBackendFormat = type { i32, i8, %union.anon.43, i32, [4 x i8] }
%union.anon.43 = type { %struct.anon.44 }
%struct.anon.44 = type { i32, [4 x i8], %struct.GrVkYcbcrConversionInfo }
%struct.GrVkYcbcrConversionInfo = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%class.GrPipeline = type <{ %class.GrSurfaceProxyView, %struct.SkIPoint, i32, [4 x i8], %class.GrWindowRectsState, i8, [7 x i8], %class.sk_sp.92, %class.SkAutoSTArray, i32, %class.GrSwizzle, [2 x i8] }>
%class.GrSurfaceProxyView = type <{ %class.sk_sp.46, i32, %class.GrSwizzle, [2 x i8] }>
%class.sk_sp.46 = type { %class.GrSurfaceProxy* }
%class.GrSurfaceProxy = type { i32 (...)**, %class.SkNVRefCnt, %class.sk_sp.47, i32, [4 x i8], %class.GrBackendFormat, %struct.SkISize, i32, i8, i32, %"class.GrSurfaceProxy::UniqueID", %"class.std::__1::function", i8, i8, i8, i8, i32, %"struct.std::__1::atomic.86" }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.sk_sp.47 = type { %class.GrSurface* }
%class.GrSurface = type { %class.GrGpuResource, %struct.SkISize, i32, i8, %class.sk_sp.51 }
%class.GrGpuResource = type { i32 (...)**, %class.GrIORef, i32, i32, %"class.std::__1::chrono::time_point", %class.GrScratchKey, %class.GrUniqueKey, %class.GrGpu*, i64, i8, i8, %"class.GrGpuResource::UniqueID" }
%class.GrIORef = type { %"struct.std::__1::atomic", %"struct.std::__1::atomic" }
%"class.std::__1::chrono::time_point" = type { %"class.std::__1::chrono::duration" }
%"class.std::__1::chrono::duration" = type { i64 }
%class.GrScratchKey = type { %class.GrResourceKey }
%class.GrResourceKey = type { %class.SkAutoSTMalloc }
%class.SkAutoSTMalloc = type <{ i32*, %union.anon.48, [4 x i8] }>
%union.anon.48 = type { [7 x i32] }
%class.GrUniqueKey = type { %class.GrResourceKey, %class.sk_sp.49, i8* }
%class.sk_sp.49 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.50, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.50 = type { %"struct.std::__1::atomic" }
%class.GrGpu = type opaque
%"class.GrGpuResource::UniqueID" = type { i32 }
%class.sk_sp.51 = type { %class.GrRefCntedCallback* }
%class.GrRefCntedCallback = type { %class.SkNVRefCnt.52, void (i8*)*, i8* }
%class.SkNVRefCnt.52 = type { %"struct.std::__1::atomic" }
%struct.SkISize = type { i32, i32 }
%"class.GrSurfaceProxy::UniqueID" = type { i32 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"struct.GrSurfaceProxy::LazyCallbackResult"*, %"union.std::__1::__function::__policy_storage"*, %class.GrResourceProvider*, %"struct.GrSurfaceProxy::LazySurfaceDesc"*)* }
%"struct.GrSurfaceProxy::LazyCallbackResult" = type <{ %class.sk_sp.47, i32, i8, [3 x i8] }>
%class.GrResourceProvider = type { %class.GrResourceCache*, %class.GrGpu*, %class.sk_sp.83, %class.sk_sp.85, %class.sk_sp.85 }
%class.GrResourceCache = type { %class.GrProxyProvider*, %class.GrThreadSafeCache*, i32, %class.SkTDPQueue, %class.SkTDArray, %class.SkTMultiMap, %class.SkTDynamicHash.59, i64, i64, i32, i64, i64, i32, [4 x i8], %"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox", %"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox", %class.SkTHashMap, %"class.GrDirectContext::DirectContextID", i32, %class.GrSingleOwner* }
%class.GrProxyProvider = type opaque
%class.GrThreadSafeCache = type opaque
%class.SkTDPQueue = type { %class.SkTDArray }
%class.SkTDArray = type { %class.GrGpuResource**, i32, i32 }
%class.SkTMultiMap = type <{ %class.SkTDynamicHash, i32, [4 x i8] }>
%class.SkTDynamicHash = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.53" }
%"class.std::__1::unique_ptr.53" = type { %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.59 = type { %class.SkTHashTable.60 }
%class.SkTHashTable.60 = type { i32, i32, %class.SkAutoTArray.61 }
%class.SkAutoTArray.61 = type { %"class.std::__1::unique_ptr.62" }
%"class.std::__1::unique_ptr.62" = type { %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot" = type <{ %class.GrGpuResource*, i32, [4 x i8] }>
%"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox" = type <{ %class.SkTArray.68, %class.SkMutex, i32, [4 x i8] }>
%class.SkTArray.68 = type { %class.GrUniqueKeyInvalidatedMessage*, i64 }
%class.GrUniqueKeyInvalidatedMessage = type <{ %class.GrUniqueKey, i32, i8, [3 x i8] }>
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.69" }
%"struct.std::__1::atomic.69" = type { %"struct.std::__1::__atomic_base.70" }
%"struct.std::__1::__atomic_base.70" = type { %"struct.std::__1::__atomic_base.71" }
%"struct.std::__1::__atomic_base.71" = type { %"struct.std::__1::__cxx_atomic_impl.72" }
%"struct.std::__1::__cxx_atomic_impl.72" = type { %"struct.std::__1::__cxx_atomic_base_impl.73" }
%"struct.std::__1::__cxx_atomic_base_impl.73" = type { i8 }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox" = type <{ %class.SkTArray.74, %class.SkMutex, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.SkTArray.74 = type { %struct.GrTextureFreedMessage*, i64 }
%struct.GrTextureFreedMessage = type <{ %class.GrTexture*, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.GrTexture = type <{ i32 (...)**, i32, i32, i32, [4 x i8], %class.GrSurface }>
%class.SkTHashMap = type { %class.SkTHashTable.75 }
%class.SkTHashTable.75 = type { i32, i32, %class.SkAutoTArray.76 }
%class.SkAutoTArray.76 = type { %"class.std::__1::unique_ptr.77" }
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot" = type opaque
%"class.GrDirectContext::DirectContextID" = type { i32 }
%class.GrSingleOwner = type { i8 }
%class.sk_sp.83 = type { %class.GrCaps* }
%class.GrCaps = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp.84, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8, i8 }>
%class.sk_sp.84 = type { %class.GrShaderCaps* }
%class.GrDriverBugWorkarounds = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%class.sk_sp.85 = type { %class.GrGpuBuffer* }
%class.GrGpuBuffer = type { %class.GrGpuResource, %class.GrBuffer, i8*, i64, i32, i32 }
%class.GrBuffer = type { i32 (...)** }
%"struct.GrSurfaceProxy::LazySurfaceDesc" = type <{ %struct.SkISize, i32, i8, i8, [2 x i8], i32, [4 x i8], %class.GrBackendFormat*, i8, i8, [6 x i8] }>
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"struct.std::__1::atomic.86" = type { %"struct.std::__1::__atomic_base.87" }
%"struct.std::__1::__atomic_base.87" = type { %"struct.std::__1::__atomic_base.88" }
%"struct.std::__1::__atomic_base.88" = type { %"struct.std::__1::__cxx_atomic_impl.89" }
%"struct.std::__1::__cxx_atomic_impl.89" = type { %"struct.std::__1::__cxx_atomic_base_impl.90" }
%"struct.std::__1::__cxx_atomic_base_impl.90" = type { i64 }
%struct.SkIPoint = type { i32, i32 }
%class.GrWindowRectsState = type { i8, %class.GrWindowRectangles }
%class.GrWindowRectangles = type { i32, %union.anon.91 }
%union.anon.91 = type { %"struct.GrWindowRectangles::Rec"*, [8 x i8] }
%"struct.GrWindowRectangles::Rec" = type { %class.GrNonAtomicRef, [8 x %struct.SkIRect] }
%class.GrNonAtomicRef = type { i32 }
%struct.SkIRect = type { i32, i32, i32, i32 }
%class.sk_sp.92 = type { %class.GrXferProcessor* }
%class.GrXferProcessor = type <{ %class.GrProcessor, %class.GrNonAtomicRef.93, i8, i8, [2 x i8] }>
%class.GrNonAtomicRef.93 = type { i32 }
%class.SkAutoSTArray = type { i32, %"class.std::__1::unique_ptr.94"*, [24 x i8] }
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %class.GrFragmentProcessor* }
%class.GrSwizzle = type { i16 }
%struct.GrUserStencilSettings = type { [2 x i16], %struct.GrTStencilFaceSettings, [2 x i16], %struct.GrTStencilFaceSettings }
%struct.GrTStencilFaceSettings = type { i16, i16, i16, i8, i8, i16 }
%class.GrGeometryProcessor = type <{ %class.GrProcessor, %class.GrNonAtomicRef.100, i32, %"class.GrGeometryProcessor::AttributeSet", %"class.GrGeometryProcessor::AttributeSet", i32, [4 x i8] }>
%class.GrNonAtomicRef.100 = type { i32 }
%"class.GrGeometryProcessor::AttributeSet" = type { %"class.GrGeometryProcessor::Attribute"*, i32, i32, i64 }
%"class.GrGeometryProcessor::Attribute" = type { i8*, i32, i32 }
%struct.GrGLSLBuiltinUniformHandles = type { %class.GrResourceHandle, %class.GrResourceHandle }
%"class.std::__1::unique_ptr.101" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %class.GrGLSLGeometryProcessor* }
%class.GrGLSLGeometryProcessor = type { i32 (...)**, %class.SkTArray.104 }
%class.SkTArray.104 = type { %"struct.GrGLSLGeometryProcessor::TransformInfo"*, i64 }
%"struct.GrGLSLGeometryProcessor::TransformInfo" = type { %class.GrShaderVar, %class.GrShaderVar, %class.GrFragmentProcessor* }
%"class.std::__1::unique_ptr.108" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %class.GrGLSLXferProcessor* }
%class.GrGLSLXferProcessor = type { i32 (...)**, %class.GrResourceHandle, %class.GrResourceHandle }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"class.std::__1::unique_ptr"* }
%class.SkSTArray.119 = type { %class.SkAlignedSTStorage.120, %class.SkTArray.121 }
%class.SkAlignedSTStorage.120 = type { [160 x i8] }
%class.SkTArray.121 = type { %class.GrShaderVar*, i64 }
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.25 }
%union.anon.25 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%class.SkSTArray.27 = type { %class.SkAlignedSTStorage.28, %class.SkTArray }
%class.SkAlignedSTStorage.28 = type { [120 x i8] }
%class.SkSTArray.29 = type { %class.SkAlignedSTStorage.30, %class.SkTArray.31 }
%class.SkAlignedSTStorage.30 = type { [16 x i8] }
%class.SkTArray.31 = type { %"class.std::__1::unique_ptr.32"*, i64 }
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"class.SkSL::Statement"* }
%"class.SkSL::Statement" = type { %"class.SkSL::IRNode" }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%class.GrTBlockList = type { %class.GrSBlockAllocator }
%class.GrSBlockAllocator = type { [88 x i8], [8 x i8] }
%class.SkSTArray.38 = type { %class.SkAlignedSTStorage.39, %class.SkTArray }
%class.SkAlignedSTStorage.39 = type { [8 x i8] }
%class.GrGLSLUniformHandler = type { i32 (...)**, %class.GrGLSLProgramBuilder* }
%"class.GrGLSLFragmentProcessor::BuilderInputProvider" = type opaque
%class.GrGLSLShaderBuilder = type <{ i32 (...)**, %class.GrGLSLProgramBuilder*, %"class.SkSL::String", %class.SkSTArray.27, %class.SkString, %class.SkString, %class.SkString, %class.SkSTArray.29, [8 x i8], %class.GrTBlockList, %class.GrTBlockList, i32, [4 x i8], [2 x %class.SkSTArray.38], i32, i8, [3 x i8], i32, [12 x i8] }>
%class.GrGLSLProgramDataManager = type { i32 (...)** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

$_ZN31GrDualIntervalGradientColorizerD0Ev = comdat any

$_ZNK31GrDualIntervalGradientColorizer4nameEv = comdat any

$_ZNK19GrFragmentProcessor30constantOutputForConstantInputERK8SkRGBA4fIL11SkAlphaType2EE = comdat any

$_ZN19GrFragmentProcessorD2Ev = comdat any

$_ZN19GrFragmentProcessorD0Ev = comdat any

$_ZN23GrGLSLFragmentProcessorD2Ev = comdat any

$_ZN35GrGLSLDualIntervalGradientColorizerD0Ev = comdat any

$_ZN35GrGLSLDualIntervalGradientColorizer8emitCodeERN23GrGLSLFragmentProcessor8EmitArgsE = comdat any

$_ZN35GrGLSLDualIntervalGradientColorizer9onSetDataERK24GrGLSLProgramDataManagerRK19GrFragmentProcessor = comdat any

$_ZN23GrGLSLFragmentProcessorD0Ev = comdat any

$_ZN23GrGLSLFragmentProcessor9onSetDataERK24GrGLSLProgramDataManagerRK19GrFragmentProcessor = comdat any

$_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz = comdat any

$_ZTV19GrFragmentProcessor = comdat any

$_ZTV35GrGLSLDualIntervalGradientColorizer = comdat any

$_ZTV23GrGLSLFragmentProcessor = comdat any

@_ZTV31GrDualIntervalGradientColorizer = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrFragmentProcessor*)* @_ZN19GrFragmentProcessorD2Ev to i8*), i8* bitcast (void (%class.GrDualIntervalGradientColorizer*)* @_ZN31GrDualIntervalGradientColorizerD0Ev to i8*), i8* bitcast (i8* (%class.GrDualIntervalGradientColorizer*)* @_ZNK31GrDualIntervalGradientColorizer4nameEv to i8*), i8* bitcast (%class.GrFragmentProcessor* (%class.GrDualIntervalGradientColorizer*)* @_ZNK31GrDualIntervalGradientColorizer5cloneEv to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%class.GrFragmentProcessor*, %struct.SkRGBA4f*)* @_ZNK19GrFragmentProcessor30constantOutputForConstantInputERK8SkRGBA4fIL11SkAlphaType2EE to i8*), i8* bitcast (%class.GrGLSLFragmentProcessor* (%class.GrDualIntervalGradientColorizer*)* @_ZNK31GrDualIntervalGradientColorizer17onMakeProgramImplEv to i8*), i8* bitcast (void (%class.GrDualIntervalGradientColorizer*, %class.GrShaderCaps*, %class.GrProcessorKeyBuilder*)* @_ZNK31GrDualIntervalGradientColorizer21onGetGLSLProcessorKeyERK12GrShaderCapsP21GrProcessorKeyBuilder to i8*), i8* bitcast (i1 (%class.GrDualIntervalGradientColorizer*, %class.GrFragmentProcessor*)* @_ZNK31GrDualIntervalGradientColorizer9onIsEqualERK19GrFragmentProcessor to i8*)] }, align 8
@_ZTV19GrFragmentProcessor = linkonce_odr hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrFragmentProcessor*)* @_ZN19GrFragmentProcessorD2Ev to i8*), i8* bitcast (void (%class.GrFragmentProcessor*)* @_ZN19GrFragmentProcessorD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%class.GrFragmentProcessor*, %struct.SkRGBA4f*)* @_ZNK19GrFragmentProcessor30constantOutputForConstantInputERK8SkRGBA4fIL11SkAlphaType2EE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8
@.str = private unnamed_addr constant [30 x i8] c"DualIntervalGradientColorizer\00", align 1
@.str.1 = private unnamed_addr constant [53 x i8] c"../../third_party/skia/src/gpu/GrFragmentProcessor.h\00", align 1
@.str.2 = private unnamed_addr constant [62 x i8] c"Subclass must override this if advertising this optimization.\00", align 1
@_ZTV35GrGLSLDualIntervalGradientColorizer = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrGLSLFragmentProcessor*)* @_ZN23GrGLSLFragmentProcessorD2Ev to i8*), i8* bitcast (void (%class.GrGLSLDualIntervalGradientColorizer*)* @_ZN35GrGLSLDualIntervalGradientColorizerD0Ev to i8*), i8* bitcast (void (%class.GrGLSLDualIntervalGradientColorizer*, %"struct.GrGLSLFragmentProcessor::EmitArgs"*)* @_ZN35GrGLSLDualIntervalGradientColorizer8emitCodeERN23GrGLSLFragmentProcessor8EmitArgsE to i8*), i8* bitcast (void (%class.GrGLSLDualIntervalGradientColorizer*, %class.GrGLSLProgramDataManager*, %class.GrFragmentProcessor*)* @_ZN35GrGLSLDualIntervalGradientColorizer9onSetDataERK24GrGLSLProgramDataManagerRK19GrFragmentProcessor to i8*)] }, comdat, align 8
@_ZTV23GrGLSLFragmentProcessor = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrGLSLFragmentProcessor*)* @_ZN23GrGLSLFragmentProcessorD2Ev to i8*), i8* bitcast (void (%class.GrGLSLFragmentProcessor*)* @_ZN23GrGLSLFragmentProcessorD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%class.GrGLSLFragmentProcessor*, %class.GrGLSLProgramDataManager*, %class.GrFragmentProcessor*)* @_ZN23GrGLSLFragmentProcessor9onSetDataERK24GrGLSLProgramDataManagerRK19GrFragmentProcessor to i8*)] }, comdat, align 8
@.str.3 = private unnamed_addr constant [8 x i8] c"scale01\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"bias01\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"scale23\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"bias23\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"threshold\00", align 1
@.str.8 = private unnamed_addr constant [176 x i8] c"half t = half(%s.x);\0Afloat4 scale;\0Afloat4 bias;\0A\0Aif (t < %s) {\0A    scale = %s;\0A    bias = %s;\0A} else {\0A    scale = %s;\0A    bias = %s;\0A}\0Areturn half4(float(t) * scale + bias);\0A\00", align 1

@_ZN31GrDualIntervalGradientColorizerC1ERKS_ = hidden unnamed_addr alias void (%class.GrDualIntervalGradientColorizer*, %class.GrDualIntervalGradientColorizer*), void (%class.GrDualIntervalGradientColorizer*, %class.GrDualIntervalGradientColorizer*)* @_ZN31GrDualIntervalGradientColorizerC2ERKS_

; Function Attrs: nounwind ssp uwtable
define hidden %class.GrGLSLFragmentProcessor* @_ZNK31GrDualIntervalGradientColorizer17onMakeProgramImplEv(%class.GrDualIntervalGradientColorizer* nocapture readnone) unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 64) #13
  %3 = bitcast i8* %2 to i32 (...)***
  %4 = getelementptr inbounds i8, i8* %2, i64 16
  %5 = bitcast i8* %4 to i64*
  %6 = getelementptr inbounds i8, i8* %2, i64 8
  %7 = bitcast i8* %6 to %class.SkString**
  store %class.SkString* null, %class.SkString** %7, align 8
  store i64 1, i64* %5, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 32
  %9 = bitcast i8* %8 to i64*
  %10 = getelementptr inbounds i8, i8* %2, i64 24
  %11 = bitcast i8* %10 to %"class.std::__1::unique_ptr"**
  store %"class.std::__1::unique_ptr"* null, %"class.std::__1::unique_ptr"** %11, align 8
  store i64 1, i64* %9, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV35GrGLSLDualIntervalGradientColorizer, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %12 = getelementptr inbounds i8, i8* %2, i64 40
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 -1, i64 20, i1 false) #12
  %13 = bitcast i8* %2 to %class.GrGLSLFragmentProcessor*
  ret %class.GrGLSLFragmentProcessor* %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK31GrDualIntervalGradientColorizer21onGetGLSLProcessorKeyERK12GrShaderCapsP21GrProcessorKeyBuilder(%class.GrDualIntervalGradientColorizer* nocapture, %class.GrShaderCaps* nocapture dereferenceable(144), %class.GrProcessorKeyBuilder* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK31GrDualIntervalGradientColorizer9onIsEqualERK19GrFragmentProcessor(%class.GrDualIntervalGradientColorizer* nocapture readonly, %class.GrFragmentProcessor* nocapture readonly dereferenceable(64)) unnamed_addr #3 align 2 {
  %3 = bitcast %class.GrFragmentProcessor* %1 to %class.GrDualIntervalGradientColorizer*
  %4 = getelementptr inbounds %class.GrFragmentProcessor, %class.GrFragmentProcessor* %1, i64 0, i32 5
  %5 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 1, i32 3
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 3
  %8 = bitcast [4 x i8]* %7 to float*
  %9 = load float, float* %8, align 4
  %10 = fcmp oeq float %6, %9
  br i1 %10, label %11, label %119

11:                                               ; preds = %2
  %12 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 1, i32 0
  %13 = load float, float* %12, align 4
  %14 = bitcast [4 x i8]* %4 to float*
  %15 = load float, float* %14, align 4
  %16 = fcmp oeq float %13, %15
  br i1 %16, label %17, label %119

17:                                               ; preds = %11
  %18 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 1, i32 1
  %19 = load float, float* %18, align 4
  %20 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 1
  %21 = bitcast [4 x i8]* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = fcmp oeq float %19, %22
  br i1 %23, label %24, label %119

24:                                               ; preds = %17
  %25 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 1, i32 2
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 2
  %28 = bitcast [4 x i8]* %27 to float*
  %29 = load float, float* %28, align 4
  %30 = fcmp une float %26, %29
  br i1 %30, label %119, label %31

31:                                               ; preds = %24
  %32 = getelementptr inbounds %class.GrFragmentProcessor, %class.GrFragmentProcessor* %1, i64 1, i32 0, i32 2
  %33 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 2, i32 3
  %34 = load float, float* %33, align 4
  %35 = getelementptr inbounds i32, i32* %32, i64 3
  %36 = bitcast i32* %35 to float*
  %37 = load float, float* %36, align 4
  %38 = fcmp oeq float %34, %37
  br i1 %38, label %39, label %119

39:                                               ; preds = %31
  %40 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 2, i32 0
  %41 = load float, float* %40, align 4
  %42 = bitcast i32* %32 to float*
  %43 = load float, float* %42, align 4
  %44 = fcmp oeq float %41, %43
  br i1 %44, label %45, label %119

45:                                               ; preds = %39
  %46 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 2, i32 1
  %47 = load float, float* %46, align 4
  %48 = getelementptr inbounds i32, i32* %32, i64 1
  %49 = bitcast i32* %48 to float*
  %50 = load float, float* %49, align 4
  %51 = fcmp oeq float %47, %50
  br i1 %51, label %52, label %119

52:                                               ; preds = %45
  %53 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 2, i32 2
  %54 = load float, float* %53, align 4
  %55 = getelementptr inbounds i32, i32* %32, i64 2
  %56 = bitcast i32* %55 to float*
  %57 = load float, float* %56, align 4
  %58 = fcmp une float %54, %57
  br i1 %58, label %119, label %59

59:                                               ; preds = %52
  %60 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 3, i32 3
  %61 = load float, float* %60, align 4
  %62 = getelementptr inbounds %class.GrFragmentProcessor, %class.GrFragmentProcessor* %1, i64 1, i32 2
  %63 = bitcast %class.GrFragmentProcessor** %62 to float*
  %64 = load float, float* %63, align 4
  %65 = fcmp oeq float %61, %64
  br i1 %65, label %66, label %119

66:                                               ; preds = %59
  %67 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 3, i32 0
  %68 = load float, float* %67, align 4
  %69 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %3, i64 0, i32 3, i32 0
  %70 = load float, float* %69, align 4
  %71 = fcmp oeq float %68, %70
  br i1 %71, label %72, label %119

72:                                               ; preds = %66
  %73 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 3, i32 1
  %74 = load float, float* %73, align 4
  %75 = getelementptr inbounds %class.GrFragmentProcessor, %class.GrFragmentProcessor* %1, i64 1, i32 1, i32 1, i32 1
  %76 = bitcast i64* %75 to float*
  %77 = load float, float* %76, align 4
  %78 = fcmp oeq float %74, %77
  br i1 %78, label %79, label %119

79:                                               ; preds = %72
  %80 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 3, i32 2
  %81 = load float, float* %80, align 4
  %82 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %3, i64 0, i32 3, i32 2
  %83 = load float, float* %82, align 4
  %84 = fcmp une float %81, %83
  br i1 %84, label %119, label %85

85:                                               ; preds = %79
  %86 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 4, i32 3
  %87 = load float, float* %86, align 4
  %88 = getelementptr inbounds %class.GrFragmentProcessor, %class.GrFragmentProcessor* %1, i64 1, i32 4, i32 1
  %89 = bitcast i8* %88 to float*
  %90 = load float, float* %89, align 4
  %91 = fcmp oeq float %87, %90
  br i1 %91, label %92, label %119

92:                                               ; preds = %85
  %93 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 4, i32 0
  %94 = load float, float* %93, align 4
  %95 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %3, i64 0, i32 4, i32 0
  %96 = load float, float* %95, align 4
  %97 = fcmp oeq float %94, %96
  br i1 %97, label %98, label %119

98:                                               ; preds = %92
  %99 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 4, i32 1
  %100 = load float, float* %99, align 4
  %101 = getelementptr inbounds %class.GrFragmentProcessor, %class.GrFragmentProcessor* %1, i64 1, i32 3
  %102 = bitcast i32* %101 to float*
  %103 = load float, float* %102, align 4
  %104 = fcmp oeq float %100, %103
  br i1 %104, label %105, label %119

105:                                              ; preds = %98
  %106 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 4, i32 2
  %107 = load float, float* %106, align 4
  %108 = getelementptr inbounds %class.GrFragmentProcessor, %class.GrFragmentProcessor* %1, i64 1, i32 4
  %109 = bitcast %"struct.SkSL::SampleUsage"* %108 to float*
  %110 = load float, float* %109, align 4
  %111 = fcmp une float %107, %110
  br i1 %111, label %119, label %112

112:                                              ; preds = %105
  %113 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 5
  %114 = load float, float* %113, align 4
  %115 = getelementptr inbounds %class.GrFragmentProcessor, %class.GrFragmentProcessor* %1, i64 1, i32 5
  %116 = bitcast [4 x i8]* %115 to float*
  %117 = load float, float* %116, align 4
  %118 = fcmp oeq float %114, %117
  br label %119

119:                                              ; preds = %85, %92, %98, %59, %66, %72, %31, %39, %45, %2, %11, %17, %112, %105, %79, %52, %24
  %120 = phi i1 [ false, %24 ], [ false, %52 ], [ false, %79 ], [ false, %105 ], [ %118, %112 ], [ false, %17 ], [ false, %11 ], [ false, %2 ], [ false, %45 ], [ false, %39 ], [ false, %31 ], [ false, %72 ], [ false, %66 ], [ false, %59 ], [ false, %98 ], [ false, %92 ], [ false, %85 ]
  ret i1 %120
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN31GrDualIntervalGradientColorizerC2ERKS_(%class.GrDualIntervalGradientColorizer*, %class.GrDualIntervalGradientColorizer* dereferenceable(128)) unnamed_addr #0 align 2 {
  %3 = bitcast %class.GrDualIntervalGradientColorizer* %0 to %class.GrFragmentProcessor*
  %4 = bitcast %class.GrDualIntervalGradientColorizer* %1 to %class.GrFragmentProcessor*
  %5 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %1, i64 0, i32 0, i32 3
  %6 = load i32, i32* %5, align 8
  %7 = and i32 %6, 7
  %8 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 0, i32 0, i32 1
  store i32 51, i32* %9, align 8
  %10 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 0, i32 0, i32 2
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 0, i32 1, i32 1
  %12 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %13 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 0, i32 1, i32 1, i32 1
  %14 = bitcast %class.SkTArray.3* %11 to i8**
  store i8* %12, i8** %14, align 8
  store i64 8589934592, i64* %13, align 8
  %15 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 0, i32 2
  store %class.GrFragmentProcessor* null, %class.GrFragmentProcessor** %15, align 8
  %16 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 0, i32 3
  store i32 %7, i32* %16, align 8
  %17 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 0, i32 4, i32 0
  store i32 0, i32* %17, align 4
  %18 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 0, i32 4, i32 1
  store i8 0, i8* %18, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTV31GrDualIntervalGradientColorizer, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %19 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 1
  %20 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %1, i64 0, i32 1
  %21 = bitcast %struct.SkRGBA4f* %19 to i8*
  %22 = bitcast %struct.SkRGBA4f* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %21, i8* align 4 %22, i64 16, i1 false)
  %23 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 2
  %24 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %1, i64 0, i32 2
  %25 = bitcast %struct.SkRGBA4f* %23 to i8*
  %26 = bitcast %struct.SkRGBA4f* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %25, i8* align 4 %26, i64 16, i1 false)
  %27 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 3
  %28 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %1, i64 0, i32 3
  %29 = bitcast %struct.SkRGBA4f* %27 to i8*
  %30 = bitcast %struct.SkRGBA4f* %28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %29, i8* align 4 %30, i64 16, i1 false)
  %31 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 4
  %32 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %1, i64 0, i32 4
  %33 = bitcast %struct.SkRGBA4f* %31 to i8*
  %34 = bitcast %struct.SkRGBA4f* %32 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %33, i8* align 4 %34, i64 16, i1 false)
  %35 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 5
  %36 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %1, i64 0, i32 5
  %37 = bitcast float* %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = bitcast float* %35 to i32*
  store i32 %38, i32* %39, align 4
  tail call void @_ZN19GrFragmentProcessor34cloneAndRegisterAllChildProcessorsERKS_(%class.GrFragmentProcessor* %3, %class.GrFragmentProcessor* dereferenceable(64) %4) #12
  %40 = load i32, i32* %16, align 8
  %41 = or i32 %40, 16
  store i32 %41, i32* %16, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN19GrFragmentProcessor34cloneAndRegisterAllChildProcessorsERKS_(%class.GrFragmentProcessor*, %class.GrFragmentProcessor* dereferenceable(64)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %class.GrFragmentProcessor* @_ZNK31GrDualIntervalGradientColorizer5cloneEv(%class.GrDualIntervalGradientColorizer*) unnamed_addr #0 align 2 {
  %2 = tail call i8* @_ZN11GrProcessornwEm(i64 128) #12
  %3 = bitcast i8* %2 to %class.GrFragmentProcessor*
  %4 = bitcast %class.GrDualIntervalGradientColorizer* %0 to %class.GrFragmentProcessor*
  %5 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 0, i32 3
  %6 = load i32, i32* %5, align 8
  %7 = and i32 %6, 7
  %8 = bitcast i8* %2 to i32 (...)***
  %9 = getelementptr inbounds i8, i8* %2, i64 8
  %10 = bitcast i8* %9 to i32*
  store i32 51, i32* %10, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 12
  %12 = bitcast i8* %11 to i32*
  store i32 0, i32* %12, align 4
  %13 = getelementptr inbounds i8, i8* %2, i64 24
  %14 = getelementptr inbounds i8, i8* %2, i64 16
  %15 = getelementptr inbounds i8, i8* %2, i64 32
  %16 = bitcast i8* %15 to i64*
  %17 = bitcast i8* %13 to i8**
  store i8* %14, i8** %17, align 8
  store i64 8589934592, i64* %16, align 8
  %18 = getelementptr inbounds i8, i8* %2, i64 40
  %19 = bitcast i8* %18 to %class.GrFragmentProcessor**
  store %class.GrFragmentProcessor* null, %class.GrFragmentProcessor** %19, align 8
  %20 = getelementptr inbounds i8, i8* %2, i64 48
  %21 = bitcast i8* %20 to i32*
  store i32 %7, i32* %21, align 8
  %22 = getelementptr inbounds i8, i8* %2, i64 52
  %23 = bitcast i8* %22 to i32*
  store i32 0, i32* %23, align 4
  %24 = getelementptr inbounds i8, i8* %2, i64 56
  store i8 0, i8* %24, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTV31GrDualIntervalGradientColorizer, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %25 = getelementptr inbounds i8, i8* %2, i64 60
  %26 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 1
  %27 = bitcast %struct.SkRGBA4f* %26 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %25, i8* align 4 %27, i64 16, i1 false) #12
  %28 = getelementptr inbounds i8, i8* %2, i64 76
  %29 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 2
  %30 = bitcast %struct.SkRGBA4f* %29 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %28, i8* align 4 %30, i64 16, i1 false) #12
  %31 = getelementptr inbounds i8, i8* %2, i64 92
  %32 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 3
  %33 = bitcast %struct.SkRGBA4f* %32 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %33, i64 16, i1 false) #12
  %34 = getelementptr inbounds i8, i8* %2, i64 108
  %35 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 4
  %36 = bitcast %struct.SkRGBA4f* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %34, i8* align 4 %36, i64 16, i1 false) #12
  %37 = getelementptr inbounds i8, i8* %2, i64 124
  %38 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 5
  %39 = bitcast float* %38 to i32*
  %40 = load i32, i32* %39, align 4
  %41 = bitcast i8* %37 to i32*
  store i32 %40, i32* %41, align 4
  tail call void @_ZN19GrFragmentProcessor34cloneAndRegisterAllChildProcessorsERKS_(%class.GrFragmentProcessor* %3, %class.GrFragmentProcessor* dereferenceable(64) %4) #12
  %42 = load i32, i32* %21, align 8
  %43 = or i32 %42, 16
  store i32 %43, i32* %21, align 8
  ret %class.GrFragmentProcessor* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.GrFragmentProcessor* @_ZN31GrDualIntervalGradientColorizer4MakeERK8SkRGBA4fIL11SkAlphaType2EES4_S4_S4_f(%struct.SkRGBA4f* nocapture readonly dereferenceable(16), %struct.SkRGBA4f* nocapture readonly dereferenceable(16), %struct.SkRGBA4f* nocapture readonly dereferenceable(16), %struct.SkRGBA4f* nocapture readonly dereferenceable(16), float) local_unnamed_addr #5 align 2 {
  %6 = bitcast %struct.SkRGBA4f* %0 to <4 x float>*
  %7 = load <4 x float>, <4 x float>* %6, align 1
  %8 = bitcast %struct.SkRGBA4f* %1 to <4 x float>*
  %9 = load <4 x float>, <4 x float>* %8, align 1
  %10 = fsub <4 x float> %9, %7
  %11 = insertelement <4 x float> undef, float %4, i32 0
  %12 = shufflevector <4 x float> %11, <4 x float> undef, <4 x i32> zeroinitializer
  %13 = fdiv <4 x float> %10, %12
  %14 = bitcast %struct.SkRGBA4f* %2 to <4 x float>*
  %15 = load <4 x float>, <4 x float>* %14, align 1
  %16 = bitcast %struct.SkRGBA4f* %3 to <4 x float>*
  %17 = load <4 x float>, <4 x float>* %16, align 1
  %18 = fsub <4 x float> %17, %15
  %19 = fsub float 1.000000e+00, %4
  %20 = insertelement <4 x float> undef, float %19, i32 0
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <4 x i32> zeroinitializer
  %22 = fdiv <4 x float> %18, %21
  %23 = fmul <4 x float> %12, %22
  %24 = fsub <4 x float> %15, %23
  %25 = tail call i8* @_ZN11GrProcessornwEm(i64 128) #12
  %26 = shufflevector <4 x float> %13, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %27 = shufflevector <4 x float> %13, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %28 = bitcast %struct.SkRGBA4f* %0 to <2 x i64>*
  %29 = load <2 x i64>, <2 x i64>* %28, align 4
  %30 = shufflevector <4 x float> %22, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %31 = shufflevector <4 x float> %22, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %32 = shufflevector <4 x float> %24, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %33 = shufflevector <4 x float> %24, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %34 = bitcast i8* %25 to i32 (...)***
  %35 = getelementptr inbounds i8, i8* %25, i64 8
  %36 = bitcast i8* %35 to i32*
  store i32 51, i32* %36, align 8
  %37 = getelementptr inbounds i8, i8* %25, i64 12
  %38 = bitcast i8* %37 to i32*
  store i32 0, i32* %38, align 4
  %39 = getelementptr inbounds i8, i8* %25, i64 24
  %40 = getelementptr inbounds i8, i8* %25, i64 16
  %41 = getelementptr inbounds i8, i8* %25, i64 32
  %42 = bitcast i8* %41 to i64*
  %43 = bitcast i8* %39 to i8**
  store i8* %40, i8** %43, align 8
  store i64 8589934592, i64* %42, align 8
  %44 = getelementptr inbounds i8, i8* %25, i64 40
  %45 = getelementptr inbounds i8, i8* %25, i64 48
  %46 = bitcast i8* %45 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 17, i1 false) #12
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTV31GrDualIntervalGradientColorizer, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %34, align 8
  %47 = getelementptr inbounds i8, i8* %25, i64 60
  %48 = bitcast i8* %47 to <2 x float>*
  store <2 x float> %26, <2 x float>* %48, align 4
  %49 = getelementptr inbounds i8, i8* %25, i64 68
  %50 = bitcast i8* %49 to <2 x float>*
  store <2 x float> %27, <2 x float>* %50, align 4
  %51 = getelementptr inbounds i8, i8* %25, i64 76
  %52 = bitcast i8* %51 to <2 x i64>*
  store <2 x i64> %29, <2 x i64>* %52, align 4
  %53 = getelementptr inbounds i8, i8* %25, i64 92
  %54 = bitcast i8* %53 to <2 x float>*
  store <2 x float> %30, <2 x float>* %54, align 4
  %55 = getelementptr inbounds i8, i8* %25, i64 100
  %56 = bitcast i8* %55 to <2 x float>*
  store <2 x float> %31, <2 x float>* %56, align 4
  %57 = getelementptr inbounds i8, i8* %25, i64 108
  %58 = bitcast i8* %57 to <2 x float>*
  store <2 x float> %32, <2 x float>* %58, align 4
  %59 = getelementptr inbounds i8, i8* %25, i64 116
  %60 = bitcast i8* %59 to <2 x float>*
  store <2 x float> %33, <2 x float>* %60, align 4
  %61 = getelementptr inbounds i8, i8* %25, i64 124
  %62 = bitcast i8* %61 to float*
  store float %4, float* %62, align 4
  store i32 16, i32* %46, align 8
  %63 = bitcast i8* %25 to %class.GrFragmentProcessor*
  ret %class.GrFragmentProcessor* %63
}

declare i8* @_ZN11GrProcessornwEm(i64) local_unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN31GrDualIntervalGradientColorizerD0Ev(%class.GrDualIntervalGradientColorizer*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTV19GrFragmentProcessor, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 0, i32 1, i32 1
  %4 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %0, i64 0, i32 0, i32 1, i32 1, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 4294967294
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.SkTArray.3, %class.SkTArray.3* %3, i64 0, i32 0
  br label %14

10:                                               ; preds = %25, %1
  %11 = phi i64 [ %5, %1 ], [ %27, %25 ]
  %12 = and i64 %11, 1
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %34, label %31

14:                                               ; preds = %25, %8
  %15 = phi i64 [ 0, %8 ], [ %26, %25 ]
  %16 = load %"class.std::__1::unique_ptr.4"*, %"class.std::__1::unique_ptr.4"** %9, align 8
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr.4", %"class.std::__1::unique_ptr.4"* %16, i64 %15, i32 0, i32 0, i32 0
  %18 = load %class.GrFragmentProcessor*, %class.GrFragmentProcessor** %17, align 8
  store %class.GrFragmentProcessor* null, %class.GrFragmentProcessor** %17, align 8
  %19 = icmp eq %class.GrFragmentProcessor* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %14
  %21 = bitcast %class.GrFragmentProcessor* %18 to void (%class.GrFragmentProcessor*)***
  %22 = load void (%class.GrFragmentProcessor*)**, void (%class.GrFragmentProcessor*)*** %21, align 8
  %23 = getelementptr inbounds void (%class.GrFragmentProcessor*)*, void (%class.GrFragmentProcessor*)** %22, i64 1
  %24 = load void (%class.GrFragmentProcessor*)*, void (%class.GrFragmentProcessor*)** %23, align 8
  tail call void %24(%class.GrFragmentProcessor* nonnull %18) #12
  br label %25

25:                                               ; preds = %20, %14
  %26 = add nuw nsw i64 %15, 1
  %27 = load i64, i64* %4, align 8
  %28 = lshr i64 %27, 1
  %29 = and i64 %28, 2147483647
  %30 = icmp ult i64 %26, %29
  br i1 %30, label %14, label %10

31:                                               ; preds = %10
  %32 = bitcast %class.SkTArray.3* %3 to i8**
  %33 = load i8*, i8** %32, align 8
  tail call void @_Z7sk_freePv(i8* %33) #12
  br label %34

34:                                               ; preds = %10, %31
  %35 = bitcast %class.GrDualIntervalGradientColorizer* %0 to i8*
  tail call void @_ZN11GrProcessordlEPv(i8* %35) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK31GrDualIntervalGradientColorizer4nameEv(%class.GrDualIntervalGradientColorizer*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { <2 x float>, <2 x float> } @_ZNK19GrFragmentProcessor30constantOutputForConstantInputERK8SkRGBA4fIL11SkAlphaType2EE(%class.GrFragmentProcessor*, %struct.SkRGBA4f* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 397, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.2, i64 0, i64 0)) #14
  unreachable
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN19GrFragmentProcessorD2Ev(%class.GrFragmentProcessor*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %class.GrFragmentProcessor, %class.GrFragmentProcessor* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTV19GrFragmentProcessor, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrFragmentProcessor, %class.GrFragmentProcessor* %0, i64 0, i32 1, i32 0, i32 0, i64 8
  %4 = getelementptr inbounds %class.GrFragmentProcessor, %class.GrFragmentProcessor* %0, i64 0, i32 1, i32 0, i32 0, i64 16
  %5 = bitcast i8* %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 4294967294
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %1
  %10 = bitcast i8* %3 to %"class.std::__1::unique_ptr.4"**
  br label %15

11:                                               ; preds = %26, %1
  %12 = phi i64 [ %6, %1 ], [ %28, %26 ]
  %13 = and i64 %12, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %35, label %32

15:                                               ; preds = %26, %9
  %16 = phi i64 [ 0, %9 ], [ %27, %26 ]
  %17 = load %"class.std::__1::unique_ptr.4"*, %"class.std::__1::unique_ptr.4"** %10, align 8
  %18 = getelementptr inbounds %"class.std::__1::unique_ptr.4", %"class.std::__1::unique_ptr.4"* %17, i64 %16, i32 0, i32 0, i32 0
  %19 = load %class.GrFragmentProcessor*, %class.GrFragmentProcessor** %18, align 8
  store %class.GrFragmentProcessor* null, %class.GrFragmentProcessor** %18, align 8
  %20 = icmp eq %class.GrFragmentProcessor* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %15
  %22 = bitcast %class.GrFragmentProcessor* %19 to void (%class.GrFragmentProcessor*)***
  %23 = load void (%class.GrFragmentProcessor*)**, void (%class.GrFragmentProcessor*)*** %22, align 8
  %24 = getelementptr inbounds void (%class.GrFragmentProcessor*)*, void (%class.GrFragmentProcessor*)** %23, i64 1
  %25 = load void (%class.GrFragmentProcessor*)*, void (%class.GrFragmentProcessor*)** %24, align 8
  tail call void %25(%class.GrFragmentProcessor* nonnull %19) #12
  br label %26

26:                                               ; preds = %21, %15
  %27 = add nuw nsw i64 %16, 1
  %28 = load i64, i64* %5, align 8
  %29 = lshr i64 %28, 1
  %30 = and i64 %29, 2147483647
  %31 = icmp ult i64 %27, %30
  br i1 %31, label %15, label %11

32:                                               ; preds = %11
  %33 = bitcast i8* %3 to i8**
  %34 = load i8*, i8** %33, align 8
  tail call void @_Z7sk_freePv(i8* %34) #12
  br label %35

35:                                               ; preds = %11, %32
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN19GrFragmentProcessorD0Ev(%class.GrFragmentProcessor*) unnamed_addr #6 comdat align 2 {
  tail call void @llvm.trap() #14
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN11GrProcessordlEPv(i8*) local_unnamed_addr #8

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN23GrGLSLFragmentProcessorD2Ev(%class.GrGLSLFragmentProcessor*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.GrGLSLFragmentProcessor, %class.GrGLSLFragmentProcessor* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV23GrGLSLFragmentProcessor, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrGLSLFragmentProcessor, %class.GrGLSLFragmentProcessor* %0, i64 0, i32 2
  %4 = getelementptr inbounds %class.GrGLSLFragmentProcessor, %class.GrGLSLFragmentProcessor* %0, i64 0, i32 2, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 4294967294
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.SkTArray.1, %class.SkTArray.1* %3, i64 0, i32 0
  br label %14

10:                                               ; preds = %25, %1
  %11 = phi i64 [ %5, %1 ], [ %27, %25 ]
  %12 = and i64 %11, 1
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %34, label %31

14:                                               ; preds = %25, %8
  %15 = phi i64 [ 0, %8 ], [ %26, %25 ]
  %16 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %9, align 8
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %16, i64 %15, i32 0, i32 0, i32 0
  %18 = load %class.GrGLSLFragmentProcessor*, %class.GrGLSLFragmentProcessor** %17, align 8
  store %class.GrGLSLFragmentProcessor* null, %class.GrGLSLFragmentProcessor** %17, align 8
  %19 = icmp eq %class.GrGLSLFragmentProcessor* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %14
  %21 = bitcast %class.GrGLSLFragmentProcessor* %18 to void (%class.GrGLSLFragmentProcessor*)***
  %22 = load void (%class.GrGLSLFragmentProcessor*)**, void (%class.GrGLSLFragmentProcessor*)*** %21, align 8
  %23 = getelementptr inbounds void (%class.GrGLSLFragmentProcessor*)*, void (%class.GrGLSLFragmentProcessor*)** %22, i64 1
  %24 = load void (%class.GrGLSLFragmentProcessor*)*, void (%class.GrGLSLFragmentProcessor*)** %23, align 8
  tail call void %24(%class.GrGLSLFragmentProcessor* nonnull %18) #12
  br label %25

25:                                               ; preds = %20, %14
  %26 = add nuw nsw i64 %15, 1
  %27 = load i64, i64* %4, align 8
  %28 = lshr i64 %27, 1
  %29 = and i64 %28, 2147483647
  %30 = icmp ult i64 %26, %29
  br i1 %30, label %14, label %10

31:                                               ; preds = %10
  %32 = bitcast %class.SkTArray.1* %3 to i8**
  %33 = load i8*, i8** %32, align 8
  tail call void @_Z7sk_freePv(i8* %33) #12
  br label %34

34:                                               ; preds = %10, %31
  %35 = getelementptr inbounds %class.GrGLSLFragmentProcessor, %class.GrGLSLFragmentProcessor* %0, i64 0, i32 1
  %36 = getelementptr inbounds %class.GrGLSLFragmentProcessor, %class.GrGLSLFragmentProcessor* %0, i64 0, i32 1, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = and i64 %37, 4294967294
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %34
  %41 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %35, i64 0, i32 0
  br label %46

42:                                               ; preds = %46, %34
  %43 = phi i64 [ %37, %34 ], [ %51, %46 ]
  %44 = and i64 %43, 1
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %58, label %55

46:                                               ; preds = %46, %40
  %47 = phi i64 [ 0, %40 ], [ %50, %46 ]
  %48 = load %class.SkString*, %class.SkString** %41, align 8
  %49 = getelementptr inbounds %class.SkString, %class.SkString* %48, i64 %47
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %49) #12
  %50 = add nuw nsw i64 %47, 1
  %51 = load i64, i64* %36, align 8
  %52 = lshr i64 %51, 1
  %53 = and i64 %52, 2147483647
  %54 = icmp ult i64 %50, %53
  br i1 %54, label %46, label %42

55:                                               ; preds = %42
  %56 = bitcast %class.SkTArray* %35 to i8**
  %57 = load i8*, i8** %56, align 8
  tail call void @_Z7sk_freePv(i8* %57) #12
  br label %58

58:                                               ; preds = %42, %55
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN35GrGLSLDualIntervalGradientColorizerD0Ev(%class.GrGLSLDualIntervalGradientColorizer*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %class.GrGLSLDualIntervalGradientColorizer, %class.GrGLSLDualIntervalGradientColorizer* %0, i64 0, i32 0
  tail call void @_ZN23GrGLSLFragmentProcessorD2Ev(%class.GrGLSLFragmentProcessor* %2) #12
  %3 = bitcast %class.GrGLSLDualIntervalGradientColorizer* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN35GrGLSLDualIntervalGradientColorizer8emitCodeERN23GrGLSLFragmentProcessor8EmitArgsE(%class.GrGLSLDualIntervalGradientColorizer*, %"struct.GrGLSLFragmentProcessor::EmitArgs"* dereferenceable(56)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.GrGLSLFragmentProcessor::EmitArgs", %"struct.GrGLSLFragmentProcessor::EmitArgs"* %1, i64 0, i32 0
  %4 = load %class.GrGLSLFPFragmentBuilder*, %class.GrGLSLFPFragmentBuilder** %3, align 8
  %5 = getelementptr inbounds %"struct.GrGLSLFragmentProcessor::EmitArgs", %"struct.GrGLSLFragmentProcessor::EmitArgs"* %1, i64 0, i32 3
  %6 = load %class.GrFragmentProcessor*, %class.GrFragmentProcessor** %5, align 8
  %7 = getelementptr inbounds %"struct.GrGLSLFragmentProcessor::EmitArgs", %"struct.GrGLSLFragmentProcessor::EmitArgs"* %1, i64 0, i32 1
  %8 = load %class.GrGLSLUniformHandler*, %class.GrGLSLUniformHandler** %7, align 8
  %9 = bitcast %class.GrGLSLUniformHandler* %8 to i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)***
  %10 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)**, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*** %9, align 8
  %11 = getelementptr inbounds i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %10, i64 13
  %12 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %11, align 8
  %13 = tail call i32 %12(%class.GrGLSLUniformHandler* %8, %class.GrFragmentProcessor* %6, i32 16, i32 24, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i1 zeroext true, i32 0, i8** null) #12
  %14 = getelementptr inbounds %class.GrGLSLDualIntervalGradientColorizer, %class.GrGLSLDualIntervalGradientColorizer* %0, i64 0, i32 1, i32 0
  store i32 %13, i32* %14, align 8
  %15 = load %class.GrGLSLUniformHandler*, %class.GrGLSLUniformHandler** %7, align 8
  %16 = bitcast %class.GrGLSLUniformHandler* %15 to i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)***
  %17 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)**, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*** %16, align 8
  %18 = getelementptr inbounds i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %17, i64 13
  %19 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %18, align 8
  %20 = tail call i32 %19(%class.GrGLSLUniformHandler* %15, %class.GrFragmentProcessor* %6, i32 16, i32 24, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i1 zeroext true, i32 0, i8** null) #12
  %21 = getelementptr inbounds %class.GrGLSLDualIntervalGradientColorizer, %class.GrGLSLDualIntervalGradientColorizer* %0, i64 0, i32 2, i32 0
  store i32 %20, i32* %21, align 4
  %22 = load %class.GrGLSLUniformHandler*, %class.GrGLSLUniformHandler** %7, align 8
  %23 = bitcast %class.GrGLSLUniformHandler* %22 to i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)***
  %24 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)**, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*** %23, align 8
  %25 = getelementptr inbounds i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %24, i64 13
  %26 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %25, align 8
  %27 = tail call i32 %26(%class.GrGLSLUniformHandler* %22, %class.GrFragmentProcessor* %6, i32 16, i32 24, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0), i1 zeroext true, i32 0, i8** null) #12
  %28 = getelementptr inbounds %class.GrGLSLDualIntervalGradientColorizer, %class.GrGLSLDualIntervalGradientColorizer* %0, i64 0, i32 3, i32 0
  store i32 %27, i32* %28, align 8
  %29 = load %class.GrGLSLUniformHandler*, %class.GrGLSLUniformHandler** %7, align 8
  %30 = bitcast %class.GrGLSLUniformHandler* %29 to i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)***
  %31 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)**, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*** %30, align 8
  %32 = getelementptr inbounds i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %31, i64 13
  %33 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %32, align 8
  %34 = tail call i32 %33(%class.GrGLSLUniformHandler* %29, %class.GrFragmentProcessor* %6, i32 16, i32 24, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i1 zeroext true, i32 0, i8** null) #12
  %35 = getelementptr inbounds %class.GrGLSLDualIntervalGradientColorizer, %class.GrGLSLDualIntervalGradientColorizer* %0, i64 0, i32 4, i32 0
  store i32 %34, i32* %35, align 4
  %36 = load %class.GrGLSLUniformHandler*, %class.GrGLSLUniformHandler** %7, align 8
  %37 = bitcast %class.GrGLSLUniformHandler* %36 to i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)***
  %38 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)**, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*** %37, align 8
  %39 = getelementptr inbounds i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %38, i64 13
  %40 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %39, align 8
  %41 = tail call i32 %40(%class.GrGLSLUniformHandler* %36, %class.GrFragmentProcessor* %6, i32 16, i32 28, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0), i1 zeroext true, i32 0, i8** null) #12
  %42 = getelementptr inbounds %class.GrGLSLDualIntervalGradientColorizer, %class.GrGLSLDualIntervalGradientColorizer* %0, i64 0, i32 5, i32 0
  store i32 %41, i32* %42, align 8
  %43 = bitcast %class.GrGLSLFPFragmentBuilder* %4 to i8**
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr i8, i8* %44, i64 -24
  %46 = bitcast i8* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %class.GrGLSLFPFragmentBuilder* %4 to i8*
  %49 = getelementptr inbounds i8, i8* %48, i64 %47
  %50 = bitcast i8* %49 to %class.GrGLSLShaderBuilder*
  %51 = getelementptr inbounds %"struct.GrGLSLFragmentProcessor::EmitArgs", %"struct.GrGLSLFragmentProcessor::EmitArgs"* %1, i64 0, i32 5
  %52 = load i8*, i8** %51, align 8
  %53 = load %class.GrGLSLUniformHandler*, %class.GrGLSLUniformHandler** %7, align 8
  %54 = bitcast %class.GrGLSLUniformHandler* %53 to i8* (%class.GrGLSLUniformHandler*, i32)***
  %55 = load i8* (%class.GrGLSLUniformHandler*, i32)**, i8* (%class.GrGLSLUniformHandler*, i32)*** %54, align 8
  %56 = getelementptr inbounds i8* (%class.GrGLSLUniformHandler*, i32)*, i8* (%class.GrGLSLUniformHandler*, i32)** %55, i64 3
  %57 = load i8* (%class.GrGLSLUniformHandler*, i32)*, i8* (%class.GrGLSLUniformHandler*, i32)** %56, align 8
  %58 = tail call i8* %57(%class.GrGLSLUniformHandler* %53, i32 %41) #12
  %59 = load %class.GrGLSLUniformHandler*, %class.GrGLSLUniformHandler** %7, align 8
  %60 = load i32, i32* %14, align 8
  %61 = bitcast %class.GrGLSLUniformHandler* %59 to i8* (%class.GrGLSLUniformHandler*, i32)***
  %62 = load i8* (%class.GrGLSLUniformHandler*, i32)**, i8* (%class.GrGLSLUniformHandler*, i32)*** %61, align 8
  %63 = getelementptr inbounds i8* (%class.GrGLSLUniformHandler*, i32)*, i8* (%class.GrGLSLUniformHandler*, i32)** %62, i64 3
  %64 = load i8* (%class.GrGLSLUniformHandler*, i32)*, i8* (%class.GrGLSLUniformHandler*, i32)** %63, align 8
  %65 = tail call i8* %64(%class.GrGLSLUniformHandler* %59, i32 %60) #12
  %66 = load %class.GrGLSLUniformHandler*, %class.GrGLSLUniformHandler** %7, align 8
  %67 = load i32, i32* %21, align 4
  %68 = bitcast %class.GrGLSLUniformHandler* %66 to i8* (%class.GrGLSLUniformHandler*, i32)***
  %69 = load i8* (%class.GrGLSLUniformHandler*, i32)**, i8* (%class.GrGLSLUniformHandler*, i32)*** %68, align 8
  %70 = getelementptr inbounds i8* (%class.GrGLSLUniformHandler*, i32)*, i8* (%class.GrGLSLUniformHandler*, i32)** %69, i64 3
  %71 = load i8* (%class.GrGLSLUniformHandler*, i32)*, i8* (%class.GrGLSLUniformHandler*, i32)** %70, align 8
  %72 = tail call i8* %71(%class.GrGLSLUniformHandler* %66, i32 %67) #12
  %73 = load %class.GrGLSLUniformHandler*, %class.GrGLSLUniformHandler** %7, align 8
  %74 = load i32, i32* %28, align 8
  %75 = bitcast %class.GrGLSLUniformHandler* %73 to i8* (%class.GrGLSLUniformHandler*, i32)***
  %76 = load i8* (%class.GrGLSLUniformHandler*, i32)**, i8* (%class.GrGLSLUniformHandler*, i32)*** %75, align 8
  %77 = getelementptr inbounds i8* (%class.GrGLSLUniformHandler*, i32)*, i8* (%class.GrGLSLUniformHandler*, i32)** %76, i64 3
  %78 = load i8* (%class.GrGLSLUniformHandler*, i32)*, i8* (%class.GrGLSLUniformHandler*, i32)** %77, align 8
  %79 = tail call i8* %78(%class.GrGLSLUniformHandler* %73, i32 %74) #12
  %80 = load %class.GrGLSLUniformHandler*, %class.GrGLSLUniformHandler** %7, align 8
  %81 = load i32, i32* %35, align 4
  %82 = bitcast %class.GrGLSLUniformHandler* %80 to i8* (%class.GrGLSLUniformHandler*, i32)***
  %83 = load i8* (%class.GrGLSLUniformHandler*, i32)**, i8* (%class.GrGLSLUniformHandler*, i32)*** %82, align 8
  %84 = getelementptr inbounds i8* (%class.GrGLSLUniformHandler*, i32)*, i8* (%class.GrGLSLUniformHandler*, i32)** %83, i64 3
  %85 = load i8* (%class.GrGLSLUniformHandler*, i32)*, i8* (%class.GrGLSLUniformHandler*, i32)** %84, align 8
  %86 = tail call i8* %85(%class.GrGLSLUniformHandler* %80, i32 %81) #12
  tail call void (%class.GrGLSLShaderBuilder*, i8*, ...) @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder* %50, i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.8, i64 0, i64 0), i8* %52, i8* %58, i8* %65, i8* %72, i8* %79, i8* %86)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN35GrGLSLDualIntervalGradientColorizer9onSetDataERK24GrGLSLProgramDataManagerRK19GrFragmentProcessor(%class.GrGLSLDualIntervalGradientColorizer*, %class.GrGLSLProgramDataManager* dereferenceable(8), %class.GrFragmentProcessor* dereferenceable(64)) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %class.GrFragmentProcessor* %2 to %class.GrDualIntervalGradientColorizer*
  %5 = getelementptr inbounds %class.GrGLSLDualIntervalGradientColorizer, %class.GrGLSLDualIntervalGradientColorizer* %0, i64 0, i32 1, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %class.GrFragmentProcessor, %class.GrFragmentProcessor* %2, i64 0, i32 5
  %8 = bitcast [4 x i8]* %7 to float*
  %9 = bitcast %class.GrGLSLProgramDataManager* %1 to void (%class.GrGLSLProgramDataManager*, i32, i32, float*)***
  %10 = load void (%class.GrGLSLProgramDataManager*, i32, i32, float*)**, void (%class.GrGLSLProgramDataManager*, i32, i32, float*)*** %9, align 8
  %11 = getelementptr inbounds void (%class.GrGLSLProgramDataManager*, i32, i32, float*)*, void (%class.GrGLSLProgramDataManager*, i32, i32, float*)** %10, i64 17
  %12 = load void (%class.GrGLSLProgramDataManager*, i32, i32, float*)*, void (%class.GrGLSLProgramDataManager*, i32, i32, float*)** %11, align 8
  tail call void %12(%class.GrGLSLProgramDataManager* %1, i32 %6, i32 1, float* %8) #12
  %13 = getelementptr inbounds %class.GrGLSLDualIntervalGradientColorizer, %class.GrGLSLDualIntervalGradientColorizer* %0, i64 0, i32 2, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %class.GrFragmentProcessor, %class.GrFragmentProcessor* %2, i64 1, i32 0, i32 2
  %16 = bitcast i32* %15 to float*
  %17 = load void (%class.GrGLSLProgramDataManager*, i32, i32, float*)**, void (%class.GrGLSLProgramDataManager*, i32, i32, float*)*** %9, align 8
  %18 = getelementptr inbounds void (%class.GrGLSLProgramDataManager*, i32, i32, float*)*, void (%class.GrGLSLProgramDataManager*, i32, i32, float*)** %17, i64 17
  %19 = load void (%class.GrGLSLProgramDataManager*, i32, i32, float*)*, void (%class.GrGLSLProgramDataManager*, i32, i32, float*)** %18, align 8
  tail call void %19(%class.GrGLSLProgramDataManager* %1, i32 %14, i32 1, float* %16) #12
  %20 = getelementptr inbounds %class.GrGLSLDualIntervalGradientColorizer, %class.GrGLSLDualIntervalGradientColorizer* %0, i64 0, i32 3, i32 0
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %4, i64 0, i32 3, i32 0
  %23 = load void (%class.GrGLSLProgramDataManager*, i32, i32, float*)**, void (%class.GrGLSLProgramDataManager*, i32, i32, float*)*** %9, align 8
  %24 = getelementptr inbounds void (%class.GrGLSLProgramDataManager*, i32, i32, float*)*, void (%class.GrGLSLProgramDataManager*, i32, i32, float*)** %23, i64 17
  %25 = load void (%class.GrGLSLProgramDataManager*, i32, i32, float*)*, void (%class.GrGLSLProgramDataManager*, i32, i32, float*)** %24, align 8
  tail call void %25(%class.GrGLSLProgramDataManager* %1, i32 %21, i32 1, float* %22) #12
  %26 = getelementptr inbounds %class.GrGLSLDualIntervalGradientColorizer, %class.GrGLSLDualIntervalGradientColorizer* %0, i64 0, i32 4, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %class.GrDualIntervalGradientColorizer, %class.GrDualIntervalGradientColorizer* %4, i64 0, i32 4, i32 0
  %29 = load void (%class.GrGLSLProgramDataManager*, i32, i32, float*)**, void (%class.GrGLSLProgramDataManager*, i32, i32, float*)*** %9, align 8
  %30 = getelementptr inbounds void (%class.GrGLSLProgramDataManager*, i32, i32, float*)*, void (%class.GrGLSLProgramDataManager*, i32, i32, float*)** %29, i64 17
  %31 = load void (%class.GrGLSLProgramDataManager*, i32, i32, float*)*, void (%class.GrGLSLProgramDataManager*, i32, i32, float*)** %30, align 8
  tail call void %31(%class.GrGLSLProgramDataManager* %1, i32 %27, i32 1, float* %28) #12
  %32 = getelementptr inbounds %class.GrGLSLDualIntervalGradientColorizer, %class.GrGLSLDualIntervalGradientColorizer* %0, i64 0, i32 5, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = getelementptr inbounds %class.GrFragmentProcessor, %class.GrFragmentProcessor* %2, i64 1, i32 5
  %35 = bitcast [4 x i8]* %34 to float*
  %36 = load float, float* %35, align 4
  %37 = bitcast %class.GrGLSLProgramDataManager* %1 to void (%class.GrGLSLProgramDataManager*, i32, float)***
  %38 = load void (%class.GrGLSLProgramDataManager*, i32, float)**, void (%class.GrGLSLProgramDataManager*, i32, float)*** %37, align 8
  %39 = getelementptr inbounds void (%class.GrGLSLProgramDataManager*, i32, float)*, void (%class.GrGLSLProgramDataManager*, i32, float)** %38, i64 4
  %40 = load void (%class.GrGLSLProgramDataManager*, i32, float)*, void (%class.GrGLSLProgramDataManager*, i32, float)** %39, align 8
  tail call void %40(%class.GrGLSLProgramDataManager* %1, i32 %33, float %36) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN23GrGLSLFragmentProcessorD0Ev(%class.GrGLSLFragmentProcessor*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #14
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN23GrGLSLFragmentProcessor9onSetDataERK24GrGLSLProgramDataManagerRK19GrFragmentProcessor(%class.GrGLSLFragmentProcessor*, %class.GrGLSLProgramDataManager* dereferenceable(8), %class.GrFragmentProcessor* dereferenceable(64)) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind
declare void @_ZN8SkStringD1Ev(%class.SkString*) unnamed_addr #8

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder*, i8*, ...) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #12
  %5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0
  %6 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 24, i1 false)
  call void @llvm.va_start(i8* nonnull %4)
  %7 = getelementptr inbounds %class.GrGLSLShaderBuilder, %class.GrGLSLShaderBuilder* %0, i64 0, i32 3, i32 0, i32 0, i64 120
  %8 = getelementptr inbounds %class.GrGLSLShaderBuilder, %class.GrGLSLShaderBuilder* %0, i64 0, i32 14
  %9 = load i32, i32* %8, align 8
  %10 = bitcast i8* %7 to %class.SkString**
  %11 = load %class.SkString*, %class.SkString** %10, align 8
  %12 = sext i32 %9 to i64
  %13 = getelementptr inbounds %class.SkString, %class.SkString* %11, i64 %12
  call void @_ZN8SkString12appendVAListEPKcP13__va_list_tag(%class.SkString* %13, i8* %1, %struct.__va_list_tag* nonnull %5) #12
  call void @llvm.va_end(i8* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #12
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #12

declare void @_ZN8SkString12appendVAListEPKcP13__va_list_tag(%class.SkString*, i8*, %struct.__va_list_tag*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #12

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
