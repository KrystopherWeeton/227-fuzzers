; ModuleID = '../../third_party/dav1d/libdav1d/src/msac.c'
source_filename = "../../third_party/dav1d/libdav1d/src/msac.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.MsacContext = type { i8*, i8*, i64, i32, i32, i32, i32 (%struct.MsacContext*, i16*, i64)* }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @dav1d_msac_decode_bool_equi_c(%struct.MsacContext* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 48
  %7 = zext i32 %3 to i64
  %8 = icmp ult i64 %6, %7
  tail call void @llvm.assume(i1 %8)
  %9 = lshr i32 %3, 8
  %10 = shl nuw nsw i32 %9, 7
  %11 = or i32 %10, 4
  %12 = zext i32 %11 to i64
  %13 = shl i64 %12, 48
  %14 = icmp uge i64 %5, %13
  %15 = sub nsw i64 0, %13
  %16 = select i1 %14, i64 %15, i64 0
  %17 = shl nuw i32 %11, 1
  %18 = sub i32 %3, %17
  %19 = select i1 %14, i32 %18, i32 0
  %20 = add i32 %19, %11
  %21 = tail call i32 @llvm.ctlz.i32(i32 %20, i1 true) #3, !range !2
  %22 = xor i32 %21, 16
  %23 = icmp ult i32 %20, 65536
  tail call void @llvm.assume(i1 %23) #3
  %24 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = sub nsw i32 %25, %22
  store i32 %26, i32* %24, align 4
  %27 = add i64 %5, 1
  %28 = add i64 %27, %16
  %29 = zext i32 %22 to i64
  %30 = shl i64 %28, %29
  %31 = add i64 %30, -1
  store i64 %31, i64* %4, align 8
  %32 = shl i32 %20, %22
  store i32 %32, i32* %2, align 8
  %33 = icmp slt i32 %26, 0
  br i1 %33, label %34, label %170

34:                                               ; preds = %1
  %35 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 1
  %38 = load i8*, i8** %37, align 8
  %39 = sub i32 40, %26
  %40 = icmp sgt i32 %39, -1
  %41 = icmp ult i8* %36, %38
  %42 = and i1 %40, %41
  br i1 %42, label %43, label %165

43:                                               ; preds = %34
  %44 = ptrtoint i8* %36 to i64
  %45 = lshr i32 %39, 3
  %46 = zext i32 %45 to i64
  %47 = xor i64 %44, -1
  %48 = getelementptr i8, i8* %38, i64 %47
  %49 = ptrtoint i8* %48 to i64
  %50 = icmp ult i64 %46, %49
  %51 = select i1 %50, i64 %46, i64 %49
  %52 = inttoptr i64 %51 to i8*
  %53 = getelementptr i8, i8* %52, i64 1
  %54 = ptrtoint i8* %53 to i64
  %55 = icmp ult i8* %53, inttoptr (i64 4 to i8*)
  br i1 %55, label %147, label %56

56:                                               ; preds = %43
  %57 = and i64 %54, -4
  %58 = trunc i64 %57 to i32
  %59 = mul i32 %58, -8
  %60 = add i32 %39, %59
  %61 = getelementptr i8, i8* %36, i64 %57
  %62 = insertelement <2 x i32> undef, i32 %39, i32 0
  %63 = shufflevector <2 x i32> %62, <2 x i32> undef, <2 x i32> zeroinitializer
  %64 = add <2 x i32> %63, <i32 0, i32 -8>
  %65 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %31, i32 0
  %66 = add i64 %57, -4
  %67 = lshr exact i64 %66, 2
  %68 = add nuw nsw i64 %67, 1
  %69 = and i64 %68, 1
  %70 = icmp eq i64 %66, 0
  br i1 %70, label %115, label %71

71:                                               ; preds = %56
  %72 = sub nuw nsw i64 %68, %69
  br label %73

73:                                               ; preds = %73, %71
  %74 = phi i64 [ 0, %71 ], [ %111, %73 ]
  %75 = phi <2 x i64> [ %65, %71 ], [ %109, %73 ]
  %76 = phi <2 x i64> [ zeroinitializer, %71 ], [ %110, %73 ]
  %77 = phi <2 x i32> [ %64, %71 ], [ %112, %73 ]
  %78 = phi i64 [ %72, %71 ], [ %113, %73 ]
  %79 = add <2 x i32> %77, <i32 -16, i32 -16>
  %80 = getelementptr i8, i8* %36, i64 %74
  %81 = bitcast i8* %80 to <2 x i8>*
  %82 = load <2 x i8>, <2 x i8>* %81, align 1
  %83 = getelementptr i8, i8* %80, i64 2
  %84 = bitcast i8* %83 to <2 x i8>*
  %85 = load <2 x i8>, <2 x i8>* %84, align 1
  %86 = zext <2 x i8> %82 to <2 x i64>
  %87 = zext <2 x i8> %85 to <2 x i64>
  %88 = zext <2 x i32> %77 to <2 x i64>
  %89 = zext <2 x i32> %79 to <2 x i64>
  %90 = shl <2 x i64> %86, %88
  %91 = shl <2 x i64> %87, %89
  %92 = xor <2 x i64> %90, %75
  %93 = xor <2 x i64> %91, %76
  %94 = or i64 %74, 4
  %95 = add <2 x i32> %77, <i32 -32, i32 -32>
  %96 = add <2 x i32> %77, <i32 -48, i32 -48>
  %97 = getelementptr i8, i8* %36, i64 %94
  %98 = bitcast i8* %97 to <2 x i8>*
  %99 = load <2 x i8>, <2 x i8>* %98, align 1
  %100 = getelementptr i8, i8* %97, i64 2
  %101 = bitcast i8* %100 to <2 x i8>*
  %102 = load <2 x i8>, <2 x i8>* %101, align 1
  %103 = zext <2 x i8> %99 to <2 x i64>
  %104 = zext <2 x i8> %102 to <2 x i64>
  %105 = zext <2 x i32> %95 to <2 x i64>
  %106 = zext <2 x i32> %96 to <2 x i64>
  %107 = shl <2 x i64> %103, %105
  %108 = shl <2 x i64> %104, %106
  %109 = xor <2 x i64> %107, %92
  %110 = xor <2 x i64> %108, %93
  %111 = add i64 %74, 8
  %112 = add <2 x i32> %77, <i32 -64, i32 -64>
  %113 = add i64 %78, -2
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %73, !llvm.loop !3

115:                                              ; preds = %73, %56
  %116 = phi <2 x i64> [ undef, %56 ], [ %109, %73 ]
  %117 = phi <2 x i64> [ undef, %56 ], [ %110, %73 ]
  %118 = phi i64 [ 0, %56 ], [ %111, %73 ]
  %119 = phi <2 x i64> [ %65, %56 ], [ %109, %73 ]
  %120 = phi <2 x i64> [ zeroinitializer, %56 ], [ %110, %73 ]
  %121 = phi <2 x i32> [ %64, %56 ], [ %112, %73 ]
  %122 = icmp eq i64 %69, 0
  br i1 %122, label %139, label %123

123:                                              ; preds = %115
  %124 = getelementptr i8, i8* %36, i64 %118
  %125 = getelementptr i8, i8* %124, i64 2
  %126 = bitcast i8* %125 to <2 x i8>*
  %127 = load <2 x i8>, <2 x i8>* %126, align 1
  %128 = zext <2 x i8> %127 to <2 x i64>
  %129 = add <2 x i32> %121, <i32 -16, i32 -16>
  %130 = zext <2 x i32> %129 to <2 x i64>
  %131 = shl <2 x i64> %128, %130
  %132 = xor <2 x i64> %131, %120
  %133 = bitcast i8* %124 to <2 x i8>*
  %134 = load <2 x i8>, <2 x i8>* %133, align 1
  %135 = zext <2 x i8> %134 to <2 x i64>
  %136 = zext <2 x i32> %121 to <2 x i64>
  %137 = shl <2 x i64> %135, %136
  %138 = xor <2 x i64> %137, %119
  br label %139

139:                                              ; preds = %115, %123
  %140 = phi <2 x i64> [ %116, %115 ], [ %138, %123 ]
  %141 = phi <2 x i64> [ %117, %115 ], [ %132, %123 ]
  %142 = xor <2 x i64> %141, %140
  %143 = shufflevector <2 x i64> %142, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %144 = xor <2 x i64> %142, %143
  %145 = extractelement <2 x i64> %144, i32 0
  %146 = icmp eq i64 %57, %54
  br i1 %146, label %165, label %147

147:                                              ; preds = %139, %43
  %148 = phi i64 [ %31, %43 ], [ %145, %139 ]
  %149 = phi i32 [ %39, %43 ], [ %60, %139 ]
  %150 = phi i8* [ %36, %43 ], [ %61, %139 ]
  br label %151

151:                                              ; preds = %147, %151
  %152 = phi i64 [ %160, %151 ], [ %148, %147 ]
  %153 = phi i32 [ %161, %151 ], [ %149, %147 ]
  %154 = phi i8* [ %155, %151 ], [ %150, %147 ]
  %155 = getelementptr inbounds i8, i8* %154, i64 1
  %156 = load i8, i8* %154, align 1
  %157 = zext i8 %156 to i64
  %158 = zext i32 %153 to i64
  %159 = shl i64 %157, %158
  %160 = xor i64 %159, %152
  %161 = add nsw i32 %153, -8
  %162 = icmp sgt i32 %161, -1
  %163 = icmp ult i8* %155, %38
  %164 = and i1 %162, %163
  br i1 %164, label %151, label %165, !llvm.loop !5

165:                                              ; preds = %151, %139, %34
  %166 = phi i8* [ %36, %34 ], [ %61, %139 ], [ %155, %151 ]
  %167 = phi i32 [ %39, %34 ], [ %60, %139 ], [ %161, %151 ]
  %168 = phi i64 [ %31, %34 ], [ %145, %139 ], [ %160, %151 ]
  store i64 %168, i64* %4, align 8
  %169 = sub i32 40, %167
  store i32 %169, i32* %24, align 4
  store i8* %166, i8** %35, align 8
  br label %170

170:                                              ; preds = %1, %165
  %171 = xor i1 %14, true
  %172 = zext i1 %171 to i32
  ret i32 %172
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @dav1d_msac_decode_bool_c(%struct.MsacContext* nocapture, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 3
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %6, 48
  %8 = zext i32 %4 to i64
  %9 = icmp ult i64 %7, %8
  tail call void @llvm.assume(i1 %9)
  %10 = lshr i32 %4, 8
  %11 = lshr i32 %1, 6
  %12 = mul i32 %10, %11
  %13 = lshr i32 %12, 1
  %14 = add nuw i32 %13, 4
  %15 = zext i32 %14 to i64
  %16 = shl i64 %15, 48
  %17 = icmp uge i64 %6, %16
  %18 = sub i64 0, %16
  %19 = select i1 %17, i64 %18, i64 0
  %20 = shl i32 %14, 1
  %21 = sub i32 %4, %20
  %22 = select i1 %17, i32 %21, i32 0
  %23 = add i32 %22, %14
  %24 = tail call i32 @llvm.ctlz.i32(i32 %23, i1 true) #3, !range !2
  %25 = xor i32 %24, 16
  %26 = icmp ult i32 %23, 65536
  tail call void @llvm.assume(i1 %26) #3
  %27 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 4
  %28 = load i32, i32* %27, align 4
  %29 = sub nsw i32 %28, %25
  store i32 %29, i32* %27, align 4
  %30 = add i64 %6, 1
  %31 = add i64 %30, %19
  %32 = zext i32 %25 to i64
  %33 = shl i64 %31, %32
  %34 = add i64 %33, -1
  store i64 %34, i64* %5, align 8
  %35 = shl i32 %23, %25
  store i32 %35, i32* %3, align 8
  %36 = icmp slt i32 %29, 0
  br i1 %36, label %37, label %173

37:                                               ; preds = %2
  %38 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 1
  %41 = load i8*, i8** %40, align 8
  %42 = sub i32 40, %29
  %43 = icmp sgt i32 %42, -1
  %44 = icmp ult i8* %39, %41
  %45 = and i1 %43, %44
  br i1 %45, label %46, label %168

46:                                               ; preds = %37
  %47 = ptrtoint i8* %39 to i64
  %48 = lshr i32 %42, 3
  %49 = zext i32 %48 to i64
  %50 = xor i64 %47, -1
  %51 = getelementptr i8, i8* %41, i64 %50
  %52 = ptrtoint i8* %51 to i64
  %53 = icmp ult i64 %49, %52
  %54 = select i1 %53, i64 %49, i64 %52
  %55 = inttoptr i64 %54 to i8*
  %56 = getelementptr i8, i8* %55, i64 1
  %57 = ptrtoint i8* %56 to i64
  %58 = icmp ult i8* %56, inttoptr (i64 4 to i8*)
  br i1 %58, label %150, label %59

59:                                               ; preds = %46
  %60 = and i64 %57, -4
  %61 = trunc i64 %60 to i32
  %62 = mul i32 %61, -8
  %63 = add i32 %42, %62
  %64 = getelementptr i8, i8* %39, i64 %60
  %65 = insertelement <2 x i32> undef, i32 %42, i32 0
  %66 = shufflevector <2 x i32> %65, <2 x i32> undef, <2 x i32> zeroinitializer
  %67 = add <2 x i32> %66, <i32 0, i32 -8>
  %68 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %34, i32 0
  %69 = add i64 %60, -4
  %70 = lshr exact i64 %69, 2
  %71 = add nuw nsw i64 %70, 1
  %72 = and i64 %71, 1
  %73 = icmp eq i64 %69, 0
  br i1 %73, label %118, label %74

74:                                               ; preds = %59
  %75 = sub nuw nsw i64 %71, %72
  br label %76

76:                                               ; preds = %76, %74
  %77 = phi i64 [ 0, %74 ], [ %114, %76 ]
  %78 = phi <2 x i64> [ %68, %74 ], [ %112, %76 ]
  %79 = phi <2 x i64> [ zeroinitializer, %74 ], [ %113, %76 ]
  %80 = phi <2 x i32> [ %67, %74 ], [ %115, %76 ]
  %81 = phi i64 [ %75, %74 ], [ %116, %76 ]
  %82 = add <2 x i32> %80, <i32 -16, i32 -16>
  %83 = getelementptr i8, i8* %39, i64 %77
  %84 = bitcast i8* %83 to <2 x i8>*
  %85 = load <2 x i8>, <2 x i8>* %84, align 1
  %86 = getelementptr i8, i8* %83, i64 2
  %87 = bitcast i8* %86 to <2 x i8>*
  %88 = load <2 x i8>, <2 x i8>* %87, align 1
  %89 = zext <2 x i8> %85 to <2 x i64>
  %90 = zext <2 x i8> %88 to <2 x i64>
  %91 = zext <2 x i32> %80 to <2 x i64>
  %92 = zext <2 x i32> %82 to <2 x i64>
  %93 = shl <2 x i64> %89, %91
  %94 = shl <2 x i64> %90, %92
  %95 = xor <2 x i64> %93, %78
  %96 = xor <2 x i64> %94, %79
  %97 = or i64 %77, 4
  %98 = add <2 x i32> %80, <i32 -32, i32 -32>
  %99 = add <2 x i32> %80, <i32 -48, i32 -48>
  %100 = getelementptr i8, i8* %39, i64 %97
  %101 = bitcast i8* %100 to <2 x i8>*
  %102 = load <2 x i8>, <2 x i8>* %101, align 1
  %103 = getelementptr i8, i8* %100, i64 2
  %104 = bitcast i8* %103 to <2 x i8>*
  %105 = load <2 x i8>, <2 x i8>* %104, align 1
  %106 = zext <2 x i8> %102 to <2 x i64>
  %107 = zext <2 x i8> %105 to <2 x i64>
  %108 = zext <2 x i32> %98 to <2 x i64>
  %109 = zext <2 x i32> %99 to <2 x i64>
  %110 = shl <2 x i64> %106, %108
  %111 = shl <2 x i64> %107, %109
  %112 = xor <2 x i64> %110, %95
  %113 = xor <2 x i64> %111, %96
  %114 = add i64 %77, 8
  %115 = add <2 x i32> %80, <i32 -64, i32 -64>
  %116 = add i64 %81, -2
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %76, !llvm.loop !7

118:                                              ; preds = %76, %59
  %119 = phi <2 x i64> [ undef, %59 ], [ %112, %76 ]
  %120 = phi <2 x i64> [ undef, %59 ], [ %113, %76 ]
  %121 = phi i64 [ 0, %59 ], [ %114, %76 ]
  %122 = phi <2 x i64> [ %68, %59 ], [ %112, %76 ]
  %123 = phi <2 x i64> [ zeroinitializer, %59 ], [ %113, %76 ]
  %124 = phi <2 x i32> [ %67, %59 ], [ %115, %76 ]
  %125 = icmp eq i64 %72, 0
  br i1 %125, label %142, label %126

126:                                              ; preds = %118
  %127 = getelementptr i8, i8* %39, i64 %121
  %128 = getelementptr i8, i8* %127, i64 2
  %129 = bitcast i8* %128 to <2 x i8>*
  %130 = load <2 x i8>, <2 x i8>* %129, align 1
  %131 = zext <2 x i8> %130 to <2 x i64>
  %132 = add <2 x i32> %124, <i32 -16, i32 -16>
  %133 = zext <2 x i32> %132 to <2 x i64>
  %134 = shl <2 x i64> %131, %133
  %135 = xor <2 x i64> %134, %123
  %136 = bitcast i8* %127 to <2 x i8>*
  %137 = load <2 x i8>, <2 x i8>* %136, align 1
  %138 = zext <2 x i8> %137 to <2 x i64>
  %139 = zext <2 x i32> %124 to <2 x i64>
  %140 = shl <2 x i64> %138, %139
  %141 = xor <2 x i64> %140, %122
  br label %142

142:                                              ; preds = %118, %126
  %143 = phi <2 x i64> [ %119, %118 ], [ %141, %126 ]
  %144 = phi <2 x i64> [ %120, %118 ], [ %135, %126 ]
  %145 = xor <2 x i64> %144, %143
  %146 = shufflevector <2 x i64> %145, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %147 = xor <2 x i64> %145, %146
  %148 = extractelement <2 x i64> %147, i32 0
  %149 = icmp eq i64 %60, %57
  br i1 %149, label %168, label %150

150:                                              ; preds = %142, %46
  %151 = phi i64 [ %34, %46 ], [ %148, %142 ]
  %152 = phi i32 [ %42, %46 ], [ %63, %142 ]
  %153 = phi i8* [ %39, %46 ], [ %64, %142 ]
  br label %154

154:                                              ; preds = %150, %154
  %155 = phi i64 [ %163, %154 ], [ %151, %150 ]
  %156 = phi i32 [ %164, %154 ], [ %152, %150 ]
  %157 = phi i8* [ %158, %154 ], [ %153, %150 ]
  %158 = getelementptr inbounds i8, i8* %157, i64 1
  %159 = load i8, i8* %157, align 1
  %160 = zext i8 %159 to i64
  %161 = zext i32 %156 to i64
  %162 = shl i64 %160, %161
  %163 = xor i64 %162, %155
  %164 = add nsw i32 %156, -8
  %165 = icmp sgt i32 %164, -1
  %166 = icmp ult i8* %158, %41
  %167 = and i1 %165, %166
  br i1 %167, label %154, label %168, !llvm.loop !8

168:                                              ; preds = %154, %142, %37
  %169 = phi i8* [ %39, %37 ], [ %64, %142 ], [ %158, %154 ]
  %170 = phi i32 [ %42, %37 ], [ %63, %142 ], [ %164, %154 ]
  %171 = phi i64 [ %34, %37 ], [ %148, %142 ], [ %163, %154 ]
  store i64 %171, i64* %5, align 8
  %172 = sub i32 40, %170
  store i32 %172, i32* %27, align 4
  store i8* %169, i8** %38, align 8
  br label %173

173:                                              ; preds = %2, %168
  %174 = xor i1 %17, true
  %175 = zext i1 %174 to i32
  ret i32 %175
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @dav1d_msac_decode_subexp(%struct.MsacContext*, i32, i32, i32) local_unnamed_addr #0 {
  %5 = ashr i32 %2, %3
  %6 = icmp eq i32 %5, 8
  tail call void @llvm.assume(i1 %6)
  %7 = tail call i32 @dav1d_msac_decode_bool_equi_sse2(%struct.MsacContext* %0) #3
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %19, label %9

9:                                                ; preds = %4
  %10 = tail call i32 @dav1d_msac_decode_bool_equi_sse2(%struct.MsacContext* %0) #3
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %16, label %12

12:                                               ; preds = %9
  %13 = tail call i32 @dav1d_msac_decode_bool_equi_sse2(%struct.MsacContext* %0) #3
  %14 = add i32 %3, 1
  %15 = add i32 %14, %13
  br label %16

16:                                               ; preds = %9, %12
  %17 = phi i32 [ %15, %12 ], [ %3, %9 ]
  %18 = shl i32 1, %17
  br label %19

19:                                               ; preds = %4, %16
  %20 = phi i32 [ %17, %16 ], [ %3, %4 ]
  %21 = phi i32 [ %18, %16 ], [ 0, %4 ]
  %22 = icmp eq i32 %20, 0
  br i1 %22, label %31, label %23

23:                                               ; preds = %19, %23
  %24 = phi i32 [ %29, %23 ], [ 0, %19 ]
  %25 = phi i32 [ %26, %23 ], [ %20, %19 ]
  %26 = add i32 %25, -1
  %27 = shl i32 %24, 1
  %28 = tail call i32 @dav1d_msac_decode_bool_equi_sse2(%struct.MsacContext* %0) #3
  %29 = or i32 %28, %27
  %30 = icmp eq i32 %26, 0
  br i1 %30, label %31, label %23

31:                                               ; preds = %23, %19
  %32 = phi i32 [ 0, %19 ], [ %29, %23 ]
  %33 = add i32 %32, %21
  %34 = shl i32 %1, 1
  %35 = icmp sgt i32 %34, %2
  br i1 %35, label %48, label %36

36:                                               ; preds = %31
  %37 = icmp ult i32 %34, %33
  br i1 %37, label %66, label %38

38:                                               ; preds = %36
  %39 = and i32 %33, 1
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %38
  %42 = lshr i32 %33, 1
  %43 = add i32 %42, %1
  br label %66

44:                                               ; preds = %38
  %45 = add i32 %33, 1
  %46 = lshr i32 %45, 1
  %47 = sub i32 %1, %46
  br label %66

48:                                               ; preds = %31
  %49 = add nsw i32 %2, -1
  %50 = sub nsw i32 %49, %1
  %51 = shl i32 %50, 1
  %52 = icmp ult i32 %51, %33
  br i1 %52, label %63, label %53

53:                                               ; preds = %48
  %54 = and i32 %33, 1
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %59

56:                                               ; preds = %53
  %57 = lshr i32 %33, 1
  %58 = add i32 %57, %50
  br label %63

59:                                               ; preds = %53
  %60 = add i32 %33, 1
  %61 = lshr i32 %60, 1
  %62 = sub i32 %50, %61
  br label %63

63:                                               ; preds = %48, %56, %59
  %64 = phi i32 [ %58, %56 ], [ %62, %59 ], [ %33, %48 ]
  %65 = sub i32 %49, %64
  br label %66

66:                                               ; preds = %44, %41, %36, %63
  %67 = phi i32 [ %65, %63 ], [ %43, %41 ], [ %47, %44 ], [ %33, %36 ]
  ret i32 %67
}

declare i32 @dav1d_msac_decode_bool_equi_sse2(%struct.MsacContext*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @dav1d_msac_decode_symbol_adapt_c(%struct.MsacContext* nocapture, i16* nocapture, i64) #0 {
  %4 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 48
  %7 = trunc i64 %6 to i32
  %8 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = lshr i32 %9, 8
  %11 = icmp ult i64 %2, 16
  tail call void @llvm.assume(i1 %11)
  %12 = getelementptr inbounds i16, i16* %1, i64 %2
  %13 = load i16, i16* %12, align 2
  %14 = icmp ult i16 %13, 33
  tail call void @llvm.assume(i1 %14)
  %15 = trunc i64 %2 to i32
  br label %16

16:                                               ; preds = %16, %3
  %17 = phi i32 [ %9, %3 ], [ %29, %16 ]
  %18 = phi i32 [ -1, %3 ], [ %19, %16 ]
  %19 = add i32 %18, 1
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds i16, i16* %1, i64 %20
  %22 = load i16, i16* %21, align 2
  %23 = lshr i16 %22, 6
  %24 = zext i16 %23 to i32
  %25 = mul i32 %10, %24
  %26 = lshr i32 %25, 1
  %27 = sub i32 %15, %19
  %28 = shl i32 %27, 2
  %29 = add i32 %26, %28
  %30 = icmp ugt i32 %29, %7
  br i1 %30, label %16, label %31

31:                                               ; preds = %16
  %32 = zext i32 %19 to i64
  %33 = icmp ule i32 %17, %9
  tail call void @llvm.assume(i1 %33)
  %34 = zext i32 %29 to i64
  %35 = shl i64 %34, 48
  %36 = sub i32 %17, %29
  %37 = tail call i32 @llvm.ctlz.i32(i32 %36, i1 true) #3, !range !2
  %38 = xor i32 %37, 16
  %39 = icmp ult i32 %36, 65536
  tail call void @llvm.assume(i1 %39) #3
  %40 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 4
  %41 = load i32, i32* %40, align 4
  %42 = sub nsw i32 %41, %38
  store i32 %42, i32* %40, align 4
  %43 = add i64 %5, 1
  %44 = sub i64 %43, %35
  %45 = zext i32 %38 to i64
  %46 = shl i64 %44, %45
  %47 = add i64 %46, -1
  store i64 %47, i64* %4, align 8
  %48 = shl i32 %36, %38
  store i32 %48, i32* %8, align 8
  %49 = icmp slt i32 %42, 0
  br i1 %49, label %50, label %186

50:                                               ; preds = %31
  %51 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 1
  %54 = load i8*, i8** %53, align 8
  %55 = sub i32 40, %42
  %56 = icmp sgt i32 %55, -1
  %57 = icmp ult i8* %52, %54
  %58 = and i1 %56, %57
  br i1 %58, label %59, label %181

59:                                               ; preds = %50
  %60 = ptrtoint i8* %52 to i64
  %61 = lshr i32 %55, 3
  %62 = zext i32 %61 to i64
  %63 = xor i64 %60, -1
  %64 = getelementptr i8, i8* %54, i64 %63
  %65 = ptrtoint i8* %64 to i64
  %66 = icmp ult i64 %62, %65
  %67 = select i1 %66, i64 %62, i64 %65
  %68 = inttoptr i64 %67 to i8*
  %69 = getelementptr i8, i8* %68, i64 1
  %70 = ptrtoint i8* %69 to i64
  %71 = icmp ult i8* %69, inttoptr (i64 4 to i8*)
  br i1 %71, label %163, label %72

72:                                               ; preds = %59
  %73 = and i64 %70, -4
  %74 = trunc i64 %73 to i32
  %75 = mul i32 %74, -8
  %76 = add i32 %55, %75
  %77 = getelementptr i8, i8* %52, i64 %73
  %78 = insertelement <2 x i32> undef, i32 %55, i32 0
  %79 = shufflevector <2 x i32> %78, <2 x i32> undef, <2 x i32> zeroinitializer
  %80 = add <2 x i32> %79, <i32 0, i32 -8>
  %81 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %47, i32 0
  %82 = add i64 %73, -4
  %83 = lshr exact i64 %82, 2
  %84 = add nuw nsw i64 %83, 1
  %85 = and i64 %84, 1
  %86 = icmp eq i64 %82, 0
  br i1 %86, label %131, label %87

87:                                               ; preds = %72
  %88 = sub nuw nsw i64 %84, %85
  br label %89

89:                                               ; preds = %89, %87
  %90 = phi i64 [ 0, %87 ], [ %127, %89 ]
  %91 = phi <2 x i64> [ %81, %87 ], [ %125, %89 ]
  %92 = phi <2 x i64> [ zeroinitializer, %87 ], [ %126, %89 ]
  %93 = phi <2 x i32> [ %80, %87 ], [ %128, %89 ]
  %94 = phi i64 [ %88, %87 ], [ %129, %89 ]
  %95 = add <2 x i32> %93, <i32 -16, i32 -16>
  %96 = getelementptr i8, i8* %52, i64 %90
  %97 = bitcast i8* %96 to <2 x i8>*
  %98 = load <2 x i8>, <2 x i8>* %97, align 1
  %99 = getelementptr i8, i8* %96, i64 2
  %100 = bitcast i8* %99 to <2 x i8>*
  %101 = load <2 x i8>, <2 x i8>* %100, align 1
  %102 = zext <2 x i8> %98 to <2 x i64>
  %103 = zext <2 x i8> %101 to <2 x i64>
  %104 = zext <2 x i32> %93 to <2 x i64>
  %105 = zext <2 x i32> %95 to <2 x i64>
  %106 = shl <2 x i64> %102, %104
  %107 = shl <2 x i64> %103, %105
  %108 = xor <2 x i64> %106, %91
  %109 = xor <2 x i64> %107, %92
  %110 = or i64 %90, 4
  %111 = add <2 x i32> %93, <i32 -32, i32 -32>
  %112 = add <2 x i32> %93, <i32 -48, i32 -48>
  %113 = getelementptr i8, i8* %52, i64 %110
  %114 = bitcast i8* %113 to <2 x i8>*
  %115 = load <2 x i8>, <2 x i8>* %114, align 1
  %116 = getelementptr i8, i8* %113, i64 2
  %117 = bitcast i8* %116 to <2 x i8>*
  %118 = load <2 x i8>, <2 x i8>* %117, align 1
  %119 = zext <2 x i8> %115 to <2 x i64>
  %120 = zext <2 x i8> %118 to <2 x i64>
  %121 = zext <2 x i32> %111 to <2 x i64>
  %122 = zext <2 x i32> %112 to <2 x i64>
  %123 = shl <2 x i64> %119, %121
  %124 = shl <2 x i64> %120, %122
  %125 = xor <2 x i64> %123, %108
  %126 = xor <2 x i64> %124, %109
  %127 = add i64 %90, 8
  %128 = add <2 x i32> %93, <i32 -64, i32 -64>
  %129 = add i64 %94, -2
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %89, !llvm.loop !9

131:                                              ; preds = %89, %72
  %132 = phi <2 x i64> [ undef, %72 ], [ %125, %89 ]
  %133 = phi <2 x i64> [ undef, %72 ], [ %126, %89 ]
  %134 = phi i64 [ 0, %72 ], [ %127, %89 ]
  %135 = phi <2 x i64> [ %81, %72 ], [ %125, %89 ]
  %136 = phi <2 x i64> [ zeroinitializer, %72 ], [ %126, %89 ]
  %137 = phi <2 x i32> [ %80, %72 ], [ %128, %89 ]
  %138 = icmp eq i64 %85, 0
  br i1 %138, label %155, label %139

139:                                              ; preds = %131
  %140 = getelementptr i8, i8* %52, i64 %134
  %141 = getelementptr i8, i8* %140, i64 2
  %142 = bitcast i8* %141 to <2 x i8>*
  %143 = load <2 x i8>, <2 x i8>* %142, align 1
  %144 = zext <2 x i8> %143 to <2 x i64>
  %145 = add <2 x i32> %137, <i32 -16, i32 -16>
  %146 = zext <2 x i32> %145 to <2 x i64>
  %147 = shl <2 x i64> %144, %146
  %148 = xor <2 x i64> %147, %136
  %149 = bitcast i8* %140 to <2 x i8>*
  %150 = load <2 x i8>, <2 x i8>* %149, align 1
  %151 = zext <2 x i8> %150 to <2 x i64>
  %152 = zext <2 x i32> %137 to <2 x i64>
  %153 = shl <2 x i64> %151, %152
  %154 = xor <2 x i64> %153, %135
  br label %155

155:                                              ; preds = %131, %139
  %156 = phi <2 x i64> [ %132, %131 ], [ %154, %139 ]
  %157 = phi <2 x i64> [ %133, %131 ], [ %148, %139 ]
  %158 = xor <2 x i64> %157, %156
  %159 = shufflevector <2 x i64> %158, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %160 = xor <2 x i64> %158, %159
  %161 = extractelement <2 x i64> %160, i32 0
  %162 = icmp eq i64 %73, %70
  br i1 %162, label %181, label %163

163:                                              ; preds = %155, %59
  %164 = phi i64 [ %47, %59 ], [ %161, %155 ]
  %165 = phi i32 [ %55, %59 ], [ %76, %155 ]
  %166 = phi i8* [ %52, %59 ], [ %77, %155 ]
  br label %167

167:                                              ; preds = %163, %167
  %168 = phi i64 [ %176, %167 ], [ %164, %163 ]
  %169 = phi i32 [ %177, %167 ], [ %165, %163 ]
  %170 = phi i8* [ %171, %167 ], [ %166, %163 ]
  %171 = getelementptr inbounds i8, i8* %170, i64 1
  %172 = load i8, i8* %170, align 1
  %173 = zext i8 %172 to i64
  %174 = zext i32 %169 to i64
  %175 = shl i64 %173, %174
  %176 = xor i64 %175, %168
  %177 = add nsw i32 %169, -8
  %178 = icmp sgt i32 %177, -1
  %179 = icmp ult i8* %171, %54
  %180 = and i1 %178, %179
  br i1 %180, label %167, label %181, !llvm.loop !10

181:                                              ; preds = %167, %155, %50
  %182 = phi i8* [ %52, %50 ], [ %77, %155 ], [ %171, %167 ]
  %183 = phi i32 [ %55, %50 ], [ %76, %155 ], [ %177, %167 ]
  %184 = phi i64 [ %47, %50 ], [ %161, %155 ], [ %176, %167 ]
  store i64 %184, i64* %4, align 8
  %185 = sub i32 40, %183
  store i32 %185, i32* %40, align 4
  store i8* %182, i8** %51, align 8
  br label %186

186:                                              ; preds = %31, %181
  %187 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 5
  %188 = load i32, i32* %187, align 8
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %323, label %190

190:                                              ; preds = %186
  %191 = load i16, i16* %12, align 2
  %192 = lshr i16 %191, 4
  %193 = add nuw nsw i16 %192, 4
  %194 = zext i16 %193 to i32
  %195 = icmp ugt i64 %2, 2
  %196 = zext i1 %195 to i32
  %197 = add nuw nsw i32 %194, %196
  %198 = icmp eq i32 %19, 0
  br i1 %198, label %233, label %199

199:                                              ; preds = %190
  %200 = icmp ult i32 %19, 16
  br i1 %200, label %201, label %203

201:                                              ; preds = %231, %199
  %202 = phi i64 [ 0, %199 ], [ %204, %231 ]
  br label %296

203:                                              ; preds = %199
  %204 = and i64 %32, 4294967280
  %205 = insertelement <8 x i32> undef, i32 %197, i32 0
  %206 = shufflevector <8 x i32> %205, <8 x i32> undef, <8 x i32> zeroinitializer
  %207 = insertelement <8 x i32> undef, i32 %197, i32 0
  %208 = shufflevector <8 x i32> %207, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %209

209:                                              ; preds = %209, %203
  %210 = phi i64 [ 0, %203 ], [ %229, %209 ]
  %211 = getelementptr inbounds i16, i16* %1, i64 %210
  %212 = bitcast i16* %211 to <8 x i16>*
  %213 = load <8 x i16>, <8 x i16>* %212, align 2
  %214 = getelementptr inbounds i16, i16* %211, i64 8
  %215 = bitcast i16* %214 to <8 x i16>*
  %216 = load <8 x i16>, <8 x i16>* %215, align 2
  %217 = zext <8 x i16> %213 to <8 x i32>
  %218 = zext <8 x i16> %216 to <8 x i32>
  %219 = sub nsw <8 x i32> <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>, %217
  %220 = sub nsw <8 x i32> <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>, %218
  %221 = ashr <8 x i32> %219, %206
  %222 = ashr <8 x i32> %220, %208
  %223 = trunc <8 x i32> %221 to <8 x i16>
  %224 = trunc <8 x i32> %222 to <8 x i16>
  %225 = add <8 x i16> %213, %223
  %226 = add <8 x i16> %216, %224
  %227 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> %225, <8 x i16>* %227, align 2
  %228 = bitcast i16* %214 to <8 x i16>*
  store <8 x i16> %226, <8 x i16>* %228, align 2
  %229 = add i64 %210, 16
  %230 = icmp eq i64 %229, %204
  br i1 %230, label %231, label %209, !llvm.loop !11

231:                                              ; preds = %209
  %232 = icmp eq i64 %204, %32
  br i1 %232, label %233, label %201

233:                                              ; preds = %296, %231, %190
  %234 = zext i32 %19 to i64
  %235 = icmp ult i64 %234, %2
  br i1 %235, label %236, label %319

236:                                              ; preds = %233
  %237 = add i32 %18, 2
  %238 = zext i32 %237 to i64
  %239 = icmp ult i64 %238, %2
  %240 = select i1 %239, i64 %2, i64 %238
  %241 = add nuw nsw i64 %240, 1
  %242 = sub nsw i64 %241, %238
  %243 = icmp ult i64 %242, 16
  br i1 %243, label %244, label %247

244:                                              ; preds = %294, %247, %236
  %245 = phi i64 [ %234, %247 ], [ %234, %236 ], [ %266, %294 ]
  %246 = phi i32 [ %19, %247 ], [ %19, %236 ], [ %268, %294 ]
  br label %307

247:                                              ; preds = %236
  %248 = add i32 %18, 2
  %249 = zext i32 %248 to i64
  %250 = icmp ult i64 %249, %2
  %251 = select i1 %250, i64 %2, i64 %249
  %252 = sub nsw i64 %251, %249
  %253 = trunc i64 %252 to i32
  %254 = sub i32 -2, %18
  %255 = icmp ult i32 %254, %253
  %256 = icmp ugt i64 %252, 4294967295
  %257 = or i1 %255, %256
  %258 = trunc i64 %252 to i32
  %259 = sub i32 -3, %18
  %260 = icmp ult i32 %259, %258
  %261 = icmp ugt i64 %252, 4294967295
  %262 = or i1 %260, %261
  %263 = or i1 %257, %262
  br i1 %263, label %244, label %264

264:                                              ; preds = %247
  %265 = and i64 %242, -16
  %266 = add nsw i64 %265, %234
  %267 = trunc i64 %265 to i32
  %268 = add i32 %19, %267
  %269 = insertelement <8 x i32> undef, i32 %197, i32 0
  %270 = shufflevector <8 x i32> %269, <8 x i32> undef, <8 x i32> zeroinitializer
  %271 = insertelement <8 x i32> undef, i32 %197, i32 0
  %272 = shufflevector <8 x i32> %271, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %273

273:                                              ; preds = %273, %264
  %274 = phi i64 [ 0, %264 ], [ %292, %273 ]
  %275 = add i64 %274, %234
  %276 = getelementptr inbounds i16, i16* %1, i64 %275
  %277 = bitcast i16* %276 to <8 x i16>*
  %278 = load <8 x i16>, <8 x i16>* %277, align 2
  %279 = getelementptr inbounds i16, i16* %276, i64 8
  %280 = bitcast i16* %279 to <8 x i16>*
  %281 = load <8 x i16>, <8 x i16>* %280, align 2
  %282 = zext <8 x i16> %278 to <8 x i32>
  %283 = zext <8 x i16> %281 to <8 x i32>
  %284 = lshr <8 x i32> %282, %270
  %285 = lshr <8 x i32> %283, %272
  %286 = trunc <8 x i32> %284 to <8 x i16>
  %287 = trunc <8 x i32> %285 to <8 x i16>
  %288 = sub <8 x i16> %278, %286
  %289 = sub <8 x i16> %281, %287
  %290 = bitcast i16* %276 to <8 x i16>*
  store <8 x i16> %288, <8 x i16>* %290, align 2
  %291 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %289, <8 x i16>* %291, align 2
  %292 = add i64 %274, 16
  %293 = icmp eq i64 %292, %265
  br i1 %293, label %294, label %273, !llvm.loop !12

294:                                              ; preds = %273
  %295 = icmp eq i64 %242, %265
  br i1 %295, label %319, label %244

296:                                              ; preds = %201, %296
  %297 = phi i64 [ %305, %296 ], [ %202, %201 ]
  %298 = getelementptr inbounds i16, i16* %1, i64 %297
  %299 = load i16, i16* %298, align 2
  %300 = zext i16 %299 to i32
  %301 = sub nsw i32 32768, %300
  %302 = ashr i32 %301, %197
  %303 = trunc i32 %302 to i16
  %304 = add i16 %299, %303
  store i16 %304, i16* %298, align 2
  %305 = add nuw nsw i64 %297, 1
  %306 = icmp eq i64 %305, %32
  br i1 %306, label %233, label %296, !llvm.loop !13

307:                                              ; preds = %244, %307
  %308 = phi i64 [ %317, %307 ], [ %245, %244 ]
  %309 = phi i32 [ %316, %307 ], [ %246, %244 ]
  %310 = getelementptr inbounds i16, i16* %1, i64 %308
  %311 = load i16, i16* %310, align 2
  %312 = zext i16 %311 to i32
  %313 = lshr i32 %312, %197
  %314 = trunc i32 %313 to i16
  %315 = sub i16 %311, %314
  store i16 %315, i16* %310, align 2
  %316 = add i32 %309, 1
  %317 = zext i32 %316 to i64
  %318 = icmp ult i64 %317, %2
  br i1 %318, label %307, label %319, !llvm.loop !14

319:                                              ; preds = %307, %294, %233
  %320 = icmp ult i16 %191, 32
  %321 = zext i1 %320 to i16
  %322 = add i16 %191, %321
  store i16 %322, i16* %12, align 2
  br label %323

323:                                              ; preds = %186, %319
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @dav1d_msac_decode_bool_adapt_c(%struct.MsacContext*, i16* nocapture) local_unnamed_addr #0 {
  %3 = load i16, i16* %1, align 2
  %4 = zext i16 %3 to i32
  %5 = tail call i32 @dav1d_msac_decode_bool_sse2(%struct.MsacContext* %0, i32 %4) #3
  %6 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 5
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %32, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds i16, i16* %1, i64 1
  %11 = load i16, i16* %10, align 2
  %12 = lshr i16 %11, 4
  %13 = add nuw nsw i16 %12, 4
  %14 = zext i16 %13 to i32
  %15 = icmp eq i32 %5, 0
  %16 = load i16, i16* %1, align 2
  %17 = zext i16 %16 to i32
  br i1 %15, label %23, label %18

18:                                               ; preds = %9
  %19 = sub nsw i32 32768, %17
  %20 = ashr i32 %19, %14
  %21 = trunc i32 %20 to i16
  %22 = add i16 %16, %21
  br label %27

23:                                               ; preds = %9
  %24 = lshr i32 %17, %14
  %25 = trunc i32 %24 to i16
  %26 = sub i16 %16, %25
  br label %27

27:                                               ; preds = %23, %18
  %28 = phi i16 [ %26, %23 ], [ %22, %18 ]
  store i16 %28, i16* %1, align 2
  %29 = icmp ult i16 %11, 32
  %30 = zext i1 %29 to i16
  %31 = add i16 %11, %30
  store i16 %31, i16* %10, align 2
  br label %32

32:                                               ; preds = %2, %27
  ret i32 %5
}

declare i32 @dav1d_msac_decode_bool_sse2(%struct.MsacContext*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @dav1d_msac_decode_hi_tok_c(%struct.MsacContext*, i16*) local_unnamed_addr #0 {
  %3 = tail call i32 @dav1d_msac_decode_symbol_adapt4_sse2(%struct.MsacContext* %0, i16* %1, i64 3) #3
  %4 = add i32 %3, 3
  %5 = icmp eq i32 %3, 3
  br i1 %5, label %6, label %17

6:                                                ; preds = %2
  %7 = tail call i32 @dav1d_msac_decode_symbol_adapt4_sse2(%struct.MsacContext* %0, i16* %1, i64 3) #3
  %8 = add i32 %7, 6
  %9 = icmp eq i32 %7, 3
  br i1 %9, label %10, label %17

10:                                               ; preds = %6
  %11 = tail call i32 @dav1d_msac_decode_symbol_adapt4_sse2(%struct.MsacContext* %0, i16* %1, i64 3) #3
  %12 = add i32 %11, 9
  %13 = icmp eq i32 %11, 3
  br i1 %13, label %14, label %17

14:                                               ; preds = %10
  %15 = tail call i32 @dav1d_msac_decode_symbol_adapt4_sse2(%struct.MsacContext* %0, i16* %1, i64 3) #3
  %16 = add i32 %15, 12
  br label %17

17:                                               ; preds = %6, %14, %10, %2
  %18 = phi i32 [ %16, %14 ], [ %12, %10 ], [ %8, %6 ], [ %4, %2 ]
  ret i32 %18
}

declare i32 @dav1d_msac_decode_symbol_adapt4_sse2(%struct.MsacContext*, i16*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @dav1d_msac_init(%struct.MsacContext*, i8*, i64, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 0
  store i8* %1, i8** %5, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 1
  store i8* %6, i8** %7, align 8
  %8 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 2
  store i64 9223372036854775807, i64* %8, align 8
  %9 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 3
  store i32 32768, i32* %9, align 8
  %10 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 4
  store i32 -15, i32* %10, align 4
  %11 = icmp eq i32 %3, 0
  %12 = zext i1 %11 to i32
  %13 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 5
  store i32 %12, i32* %13, align 8
  %14 = icmp sgt i64 %2, 0
  br i1 %14, label %15, label %22

15:                                               ; preds = %4
  %16 = getelementptr inbounds i8, i8* %1, i64 1
  %17 = load i8, i8* %1, align 1
  %18 = zext i8 %17 to i64
  %19 = shl nuw nsw i64 %18, 55
  %20 = xor i64 %19, 9223372036854775807
  %21 = icmp sgt i64 %2, 1
  br i1 %21, label %27, label %22

22:                                               ; preds = %15, %34, %48, %62, %27, %41, %55, %4
  %23 = phi i8* [ %1, %4 ], [ %16, %15 ], [ %28, %27 ], [ %35, %34 ], [ %42, %41 ], [ %49, %48 ], [ %56, %55 ], [ %63, %62 ]
  %24 = phi i32 [ -15, %4 ], [ -7, %15 ], [ 1, %27 ], [ 9, %34 ], [ 17, %41 ], [ 25, %48 ], [ 33, %55 ], [ 41, %62 ]
  %25 = phi i64 [ 9223372036854775807, %4 ], [ %20, %15 ], [ %32, %27 ], [ %39, %34 ], [ %46, %41 ], [ %53, %48 ], [ %60, %55 ], [ %67, %62 ]
  store i64 %25, i64* %8, align 8
  store i32 %24, i32* %10, align 4
  store i8* %23, i8** %5, align 8
  %26 = getelementptr inbounds %struct.MsacContext, %struct.MsacContext* %0, i64 0, i32 6
  store i32 (%struct.MsacContext*, i16*, i64)* @dav1d_msac_decode_symbol_adapt_c, i32 (%struct.MsacContext*, i16*, i64)** %26, align 8
  tail call void @dav1d_msac_init_x86(%struct.MsacContext* %0) #3
  ret void

27:                                               ; preds = %15
  %28 = getelementptr inbounds i8, i8* %1, i64 2
  %29 = load i8, i8* %16, align 1
  %30 = zext i8 %29 to i64
  %31 = shl nuw nsw i64 %30, 47
  %32 = xor i64 %31, %20
  %33 = icmp eq i64 %2, 2
  br i1 %33, label %22, label %34

34:                                               ; preds = %27
  %35 = getelementptr inbounds i8, i8* %1, i64 3
  %36 = load i8, i8* %28, align 1
  %37 = zext i8 %36 to i64
  %38 = shl nuw nsw i64 %37, 39
  %39 = xor i64 %38, %32
  %40 = icmp sgt i64 %2, 3
  br i1 %40, label %41, label %22

41:                                               ; preds = %34
  %42 = getelementptr inbounds i8, i8* %1, i64 4
  %43 = load i8, i8* %35, align 1
  %44 = zext i8 %43 to i64
  %45 = shl nuw nsw i64 %44, 31
  %46 = xor i64 %45, %39
  %47 = icmp eq i64 %2, 4
  br i1 %47, label %22, label %48

48:                                               ; preds = %41
  %49 = getelementptr inbounds i8, i8* %1, i64 5
  %50 = load i8, i8* %42, align 1
  %51 = zext i8 %50 to i64
  %52 = shl nuw nsw i64 %51, 23
  %53 = xor i64 %52, %46
  %54 = icmp sgt i64 %2, 5
  br i1 %54, label %55, label %22

55:                                               ; preds = %48
  %56 = getelementptr inbounds i8, i8* %1, i64 6
  %57 = load i8, i8* %49, align 1
  %58 = zext i8 %57 to i64
  %59 = shl nuw nsw i64 %58, 15
  %60 = xor i64 %59, %53
  %61 = icmp eq i64 %2, 6
  br i1 %61, label %22, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds i8, i8* %1, i64 7
  %64 = load i8, i8* %56, align 1
  %65 = zext i8 %64 to i64
  %66 = shl nuw nsw i64 %65, 7
  %67 = xor i64 %66, %60
  br label %22
}

declare void @dav1d_msac_init_x86(%struct.MsacContext*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #2

; Function Attrs: nounwind
declare void @llvm.assume(i1) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6, !4}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !6, !4}
!9 = distinct !{!9, !4}
!10 = distinct !{!10, !6, !4}
!11 = distinct !{!11, !4}
!12 = distinct !{!12, !4}
!13 = distinct !{!13, !6, !4}
!14 = distinct !{!14, !4}
