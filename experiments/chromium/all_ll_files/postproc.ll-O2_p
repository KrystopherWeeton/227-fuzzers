; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/common/postproc.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/common/postproc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%union.int_mv = type { i32 }
%union.b_mode_info = type { i32 }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.mv_context = type { [19 x i8] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }
%struct.vp8_ppflags_t = type { i32, i32, i32, i32, i32, i32, i32 }

@.str = private unnamed_addr constant [36 x i8] c"Failed to allocate MFQE framebuffer\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_deblock(%struct.VP8Common* nocapture readonly, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i32) local_unnamed_addr #0 {
  %5 = sitofp i32 %3 to double
  %6 = fmul double %5, 6.000000e-05
  %7 = insertelement <2 x double> <double undef, double 6.700000e-03>, double %6, i32 0
  %8 = insertelement <2 x double> undef, double %5, i32 0
  %9 = shufflevector <2 x double> %8, <2 x double> undef, <2 x i32> zeroinitializer
  %10 = fmul <2 x double> %7, %9
  %11 = fmul <2 x double> %10, %9
  %12 = extractelement <2 x double> %11, i32 0
  %13 = extractelement <2 x double> %11, i32 1
  %14 = fsub double %12, %13
  %15 = fmul double %5, 3.060000e-01
  %16 = fadd double %15, %14
  %17 = fadd double %16, 0x3F7A9FBE76C8B439
  %18 = fadd double %17, 5.000000e-01
  %19 = fptosi double %18 to i32
  %20 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 21
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 28
  %23 = load i32, i32* %22, align 8
  %24 = shl nsw i32 %23, 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %21, i64 %25
  %27 = icmp sgt i32 %19, 0
  br i1 %27, label %28, label %114

28:                                               ; preds = %4
  %29 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 27
  %30 = load i32, i32* %29, align 4
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %115

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 41
  %34 = load %struct.modeinfo*, %struct.modeinfo** %33, align 16
  %35 = lshr i32 %19, 1
  %36 = trunc i32 %35 to i8
  %37 = and i8 %36, 127
  %38 = trunc i32 %19 to i8
  %39 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %40 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %41 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 13
  %42 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 4
  %43 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0
  %44 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %45 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  %46 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 14
  %47 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 9
  %48 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5
  %49 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %50 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 15
  br label %51

51:                                               ; preds = %111, %32
  %52 = phi i32 [ %23, %32 ], [ %113, %111 ]
  %53 = phi i32 [ 0, %32 ], [ %108, %111 ]
  %54 = phi %struct.modeinfo* [ %34, %32 ], [ %112, %111 ]
  %55 = icmp sgt i32 %52, 0
  br i1 %55, label %56, label %71

56:                                               ; preds = %51, %56
  %57 = phi i8* [ %66, %56 ], [ %26, %51 ]
  %58 = phi i8* [ %65, %56 ], [ %21, %51 ]
  %59 = phi i32 [ %68, %56 ], [ 0, %51 ]
  %60 = phi %struct.modeinfo* [ %67, %56 ], [ %54, %51 ]
  %61 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %60, i64 0, i32 0, i32 6
  %62 = load i8, i8* %61, align 1
  %63 = icmp eq i8 %62, 0
  %64 = select i1 %63, i8 %38, i8 %37
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %58, i8 %64, i64 16, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 %64, i64 8, i1 false)
  %65 = getelementptr inbounds i8, i8* %58, i64 16
  %66 = getelementptr inbounds i8, i8* %57, i64 8
  %67 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %60, i64 1
  %68 = add nuw nsw i32 %59, 1
  %69 = load i32, i32* %22, align 8
  %70 = icmp slt i32 %68, %69
  br i1 %70, label %56, label %71

71:                                               ; preds = %56, %51
  %72 = phi %struct.modeinfo* [ %54, %51 ], [ %67, %56 ]
  %73 = load i8*, i8** %39, align 8
  %74 = shl nsw i32 %53, 4
  %75 = load i32, i32* %40, align 8
  %76 = mul nsw i32 %75, %74
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %73, i64 %77
  %79 = load i8*, i8** %41, align 8
  %80 = load i32, i32* %42, align 8
  %81 = mul nsw i32 %80, %74
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %79, i64 %82
  %84 = load i32, i32* %43, align 8
  tail call void @vpx_post_proc_down_and_across_mb_row_sse2(i8* %78, i8* %83, i32 %75, i32 %80, i32 %84, i8* %21, i32 16) #3
  %85 = load i8*, i8** %44, align 8
  %86 = shl nsw i32 %53, 3
  %87 = load i32, i32* %45, align 4
  %88 = mul nsw i32 %87, %86
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %85, i64 %89
  %91 = load i8*, i8** %46, align 8
  %92 = load i32, i32* %47, align 4
  %93 = mul nsw i32 %92, %86
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i8, i8* %91, i64 %94
  %96 = load i32, i32* %48, align 4
  tail call void @vpx_post_proc_down_and_across_mb_row_sse2(i8* %90, i8* %95, i32 %87, i32 %92, i32 %96, i8* %26, i32 8) #3
  %97 = load i8*, i8** %49, align 8
  %98 = load i32, i32* %45, align 4
  %99 = mul nsw i32 %98, %86
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i8, i8* %97, i64 %100
  %102 = load i8*, i8** %50, align 8
  %103 = load i32, i32* %47, align 4
  %104 = mul nsw i32 %103, %86
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds i8, i8* %102, i64 %105
  %107 = load i32, i32* %48, align 4
  tail call void @vpx_post_proc_down_and_across_mb_row_sse2(i8* %101, i8* %106, i32 %98, i32 %103, i32 %107, i8* %26, i32 8) #3
  %108 = add nuw nsw i32 %53, 1
  %109 = load i32, i32* %29, align 4
  %110 = icmp slt i32 %108, %109
  br i1 %110, label %111, label %115

111:                                              ; preds = %71
  %112 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %72, i64 1
  %113 = load i32, i32* %22, align 8
  br label %51

114:                                              ; preds = %4
  tail call void @vp8_yv12_copy_frame_c(%struct.yv12_buffer_config* %1, %struct.yv12_buffer_config* %2) #3
  br label %115

115:                                              ; preds = %71, %28, %114
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @vpx_post_proc_down_and_across_mb_row_sse2(i8*, i8*, i32, i32, i32, i8*, i32) local_unnamed_addr #2

declare void @vp8_yv12_copy_frame_c(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_de_noise(%struct.VP8Common* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %5 = sitofp i32 %2 to double
  %6 = fmul double %5, 6.000000e-05
  %7 = insertelement <2 x double> <double undef, double 6.700000e-03>, double %6, i32 0
  %8 = insertelement <2 x double> undef, double %5, i32 0
  %9 = shufflevector <2 x double> %8, <2 x double> undef, <2 x i32> zeroinitializer
  %10 = fmul <2 x double> %7, %9
  %11 = fmul <2 x double> %10, %9
  %12 = extractelement <2 x double> %11, i32 0
  %13 = extractelement <2 x double> %11, i32 1
  %14 = fsub double %12, %13
  %15 = fmul double %5, 3.060000e-01
  %16 = fadd double %15, %14
  %17 = fadd double %16, 0x3F7A9FBE76C8B439
  %18 = fadd double %17, 5.000000e-01
  %19 = fptosi double %18 to i32
  %20 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 27
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 28
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 21
  %25 = load i8*, i8** %24, align 8
  %26 = trunc i32 %19 to i8
  %27 = shl nsw i32 %23, 4
  %28 = sext i32 %27 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %26, i64 %28, i1 false)
  %29 = icmp sgt i32 %21, 0
  br i1 %29, label %30, label %65

30:                                               ; preds = %4
  %31 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %32 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %33 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0
  %34 = icmp eq i32 %3, 1
  %35 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %36 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  %37 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5
  %38 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  br label %39

39:                                               ; preds = %62, %30
  %40 = phi i32 [ 0, %30 ], [ %63, %62 ]
  %41 = load i8*, i8** %31, align 8
  %42 = shl i32 %40, 4
  %43 = load i32, i32* %32, align 8
  %44 = mul nsw i32 %42, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i8, i8* %41, i64 %45
  %47 = load i32, i32* %33, align 8
  tail call void @vpx_post_proc_down_and_across_mb_row_sse2(i8* %46, i8* %46, i32 %43, i32 %43, i32 %47, i8* %25, i32 16) #3
  br i1 %34, label %48, label %62

48:                                               ; preds = %39
  %49 = load i8*, i8** %35, align 8
  %50 = shl nsw i32 %40, 3
  %51 = load i32, i32* %36, align 4
  %52 = mul nsw i32 %51, %50
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %49, i64 %53
  %55 = load i32, i32* %37, align 4
  tail call void @vpx_post_proc_down_and_across_mb_row_sse2(i8* %54, i8* %54, i32 %51, i32 %51, i32 %55, i8* %25, i32 8) #3
  %56 = load i8*, i8** %38, align 8
  %57 = load i32, i32* %36, align 4
  %58 = mul nsw i32 %57, %50
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %56, i64 %59
  %61 = load i32, i32* %37, align 4
  tail call void @vpx_post_proc_down_and_across_mb_row_sse2(i8* %60, i8* %60, i32 %57, i32 %57, i32 %61, i8* %25, i32 8) #3
  br label %62

62:                                               ; preds = %39, %48
  %63 = add nuw nsw i32 %40, 1
  %64 = icmp eq i32 %63, %21
  br i1 %64, label %65, label %39

65:                                               ; preds = %62, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_post_proc_frame(%struct.VP8Common*, %struct.yv12_buffer_config* nocapture, %struct.vp8_ppflags_t* nocapture readonly) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 46
  %5 = load i32, i32* %4, align 16
  %6 = mul nsw i32 %5, 10
  %7 = getelementptr inbounds %struct.vp8_ppflags_t, %struct.vp8_ppflags_t* %2, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.vp8_ppflags_t, %struct.vp8_ppflags_t* %2, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.vp8_ppflags_t, %struct.vp8_ppflags_t* %2, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 10
  %14 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %13, align 8
  %15 = icmp eq %struct.yv12_buffer_config* %14, null
  %16 = bitcast %struct.yv12_buffer_config* %14 to i8*
  br i1 %15, label %239, label %17

17:                                               ; preds = %3
  %18 = sdiv i32 %6, 6
  %19 = icmp sgt i32 %6, 383
  %20 = select i1 %19, i32 63, i32 %18
  %21 = icmp eq i32 %8, 0
  br i1 %21, label %22, label %36

22:                                               ; preds = %17
  %23 = bitcast %struct.yv12_buffer_config* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* nonnull align 8 %16, i64 160, i1 false)
  %24 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 5
  %25 = load i32, i32* %24, align 16
  %26 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0
  store i32 %25, i32* %26, align 8
  %27 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 6
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1
  store i32 %28, i32* %29, align 4
  %30 = sdiv i32 %28, 2
  %31 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 6
  store i32 %30, i32* %31, align 8
  %32 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 34
  %33 = load i32, i32* %32, align 16
  %34 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 64, i32 2
  store i32 %33, i32* %34, align 8
  %35 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 64, i32 3
  store i32 1, i32* %35, align 4
  br label %239

36:                                               ; preds = %17
  %37 = and i32 %8, 4
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %50

39:                                               ; preds = %36
  %40 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 64, i32 5
  %41 = load i8*, i8** %40, align 8
  %42 = icmp eq i8* %41, null
  br i1 %42, label %43, label %50

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 5
  %45 = load i32, i32* %44, align 16
  %46 = add nsw i32 %45, 256
  %47 = sext i32 %46 to i64
  %48 = tail call i8* @vpx_calloc(i64 %47, i64 1) #3
  store i8* %48, i8** %40, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %239, label %50

50:                                               ; preds = %43, %39, %36
  %51 = and i32 %8, 8
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %141, label %53

53:                                               ; preds = %50
  %54 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 20
  %55 = load i32, i32* %54, align 16
  %56 = icmp ne i32 %55, 0
  %57 = and i32 %8, 3
  %58 = icmp eq i32 %57, 0
  %59 = or i1 %58, %56
  br i1 %59, label %79, label %60

60:                                               ; preds = %53
  %61 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 5
  %62 = load i32, i32* %61, align 16
  %63 = add nsw i32 %62, 15
  %64 = and i32 %63, -16
  %65 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 6
  %66 = load i32, i32* %65, align 4
  %67 = add nsw i32 %66, 15
  %68 = and i32 %67, -16
  %69 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 19
  %70 = tail call i32 @vp8_yv12_alloc_frame_buffer(%struct.yv12_buffer_config* %69, i32 %64, i32 %68, i32 32) #3
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %74, label %72

72:                                               ; preds = %60
  %73 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %73, i32 2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0)) #3
  br label %74

74:                                               ; preds = %60, %72
  store i32 1, i32* %54, align 16
  %75 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 19, i32 17
  %76 = load i8*, i8** %75, align 8
  %77 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18, i32 20
  %78 = load i64, i64* %77, align 16
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %76, i8 -128, i64 %78, i1 false)
  br label %79

79:                                               ; preds = %53, %74
  tail call void @vpx_clear_system_state() #3
  %80 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 64, i32 3
  %81 = load i32, i32* %80, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %142, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 60
  %85 = load i32, i32* %84, align 4
  %86 = icmp ugt i32 %85, 10
  br i1 %86, label %87, label %142

87:                                               ; preds = %83
  %88 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 64, i32 2
  %89 = load i32, i32* %88, align 8
  %90 = icmp slt i32 %89, 60
  br i1 %90, label %91, label %142

91:                                               ; preds = %87
  %92 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 34
  %93 = load i32, i32* %92, align 16
  %94 = sub nsw i32 %93, %89
  %95 = icmp sgt i32 %94, 19
  br i1 %95, label %96, label %142

96:                                               ; preds = %91
  tail call void @vp8_multiframe_quality_enhance(%struct.VP8Common* %0) #3
  %97 = and i32 %8, 1
  %98 = icmp ne i32 %97, 0
  %99 = xor i1 %98, true
  %100 = and i32 %8, 2
  %101 = icmp eq i32 %100, 0
  %102 = and i1 %101, %99
  br i1 %102, label %135, label %103

103:                                              ; preds = %96
  %104 = load i32, i32* %54, align 16
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %135, label %106

106:                                              ; preds = %103
  %107 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18
  %108 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 19
  tail call void @vp8_yv12_copy_frame_c(%struct.yv12_buffer_config* %107, %struct.yv12_buffer_config* %108) #3
  br i1 %101, label %133, label %109

109:                                              ; preds = %106
  %110 = mul i32 %10, 10
  %111 = add nsw i32 %20, -50
  %112 = add i32 %111, %110
  tail call void @vp8_deblock(%struct.VP8Common* %0, %struct.yv12_buffer_config* %108, %struct.yv12_buffer_config* %107, i32 %112)
  %113 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18, i32 13
  %114 = load i8*, i8** %113, align 8
  %115 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18, i32 4
  %116 = load i32, i32* %115, align 8
  %117 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18, i32 1
  %118 = load i32, i32* %117, align 4
  %119 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %107, i64 0, i32 0
  %120 = load i32, i32* %119, align 8
  %121 = icmp sgt i32 %112, 20
  %122 = select i1 %121, i32 %112, i32 20
  %123 = mul i32 %122, 10
  %124 = add i32 %123, -500
  %125 = sdiv i32 %124, 8
  %126 = add nsw i32 %125, 50
  %127 = mul nsw i32 %126, %126
  %128 = udiv i32 %127, 3
  tail call void @vpx_mbpost_proc_across_ip_sse2(i8* %114, i32 %116, i32 %118, i32 %120, i32 %128) #3
  %129 = load i8*, i8** %113, align 8
  %130 = load i32, i32* %115, align 8
  %131 = load i32, i32* %117, align 4
  %132 = load i32, i32* %119, align 8
  tail call void @vpx_mbpost_proc_down_sse2(i8* %129, i32 %130, i32 %131, i32 %132, i32 %128) #3
  br label %135

133:                                              ; preds = %106
  br i1 %98, label %134, label %135

134:                                              ; preds = %133
  tail call void @vp8_deblock(%struct.VP8Common* %0, %struct.yv12_buffer_config* %108, %struct.yv12_buffer_config* %107, i32 %20)
  br label %135

135:                                              ; preds = %96, %103, %109, %134, %133
  %136 = load i32, i32* %88, align 8
  %137 = mul nsw i32 %136, 3
  %138 = load i32, i32* %92, align 16
  %139 = add nsw i32 %137, %138
  %140 = ashr i32 %139, 2
  store i32 %140, i32* %88, align 8
  br label %187

141:                                              ; preds = %50
  tail call void @vpx_clear_system_state() #3
  br label %142

142:                                              ; preds = %141, %79, %91, %87, %83
  %143 = and i32 %8, 2
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %174, label %145

145:                                              ; preds = %142
  %146 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %13, align 8
  %147 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18
  %148 = mul i32 %10, 10
  %149 = add nsw i32 %20, -50
  %150 = add i32 %149, %148
  tail call void @vp8_deblock(%struct.VP8Common* %0, %struct.yv12_buffer_config* %146, %struct.yv12_buffer_config* %147, i32 %150)
  %151 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18, i32 13
  %152 = load i8*, i8** %151, align 8
  %153 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18, i32 4
  %154 = load i32, i32* %153, align 8
  %155 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18, i32 1
  %156 = load i32, i32* %155, align 4
  %157 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %147, i64 0, i32 0
  %158 = load i32, i32* %157, align 8
  %159 = icmp sgt i32 %150, 20
  %160 = select i1 %159, i32 %150, i32 20
  %161 = mul i32 %160, 10
  %162 = add i32 %161, -500
  %163 = sdiv i32 %162, 8
  %164 = add nsw i32 %163, 50
  %165 = mul nsw i32 %164, %164
  %166 = udiv i32 %165, 3
  tail call void @vpx_mbpost_proc_across_ip_sse2(i8* %152, i32 %154, i32 %156, i32 %158, i32 %166) #3
  %167 = load i8*, i8** %151, align 8
  %168 = load i32, i32* %153, align 8
  %169 = load i32, i32* %155, align 4
  %170 = load i32, i32* %157, align 8
  tail call void @vpx_mbpost_proc_down_sse2(i8* %167, i32 %168, i32 %169, i32 %170, i32 %166) #3
  %171 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 34
  %172 = load i32, i32* %171, align 16
  %173 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 64, i32 2
  store i32 %172, i32* %173, align 8
  br label %187

174:                                              ; preds = %142
  %175 = and i32 %8, 1
  %176 = icmp eq i32 %175, 0
  %177 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %13, align 8
  %178 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18
  br i1 %176, label %183, label %179

179:                                              ; preds = %174
  tail call void @vp8_deblock(%struct.VP8Common* %0, %struct.yv12_buffer_config* %177, %struct.yv12_buffer_config* %178, i32 %20)
  %180 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 34
  %181 = load i32, i32* %180, align 16
  %182 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 64, i32 2
  store i32 %181, i32* %182, align 8
  br label %187

183:                                              ; preds = %174
  tail call void @vp8_yv12_copy_frame_c(%struct.yv12_buffer_config* %177, %struct.yv12_buffer_config* %178) #3
  %184 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 34
  %185 = load i32, i32* %184, align 16
  %186 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 64, i32 2
  store i32 %185, i32* %186, align 8
  br label %187

187:                                              ; preds = %145, %183, %179, %135
  %188 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 64, i32 3
  store i32 1, i32* %188, align 4
  br i1 %38, label %189, label %227

189:                                              ; preds = %187
  %190 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 64, i32 0
  %191 = load i32, i32* %190, align 16
  %192 = icmp eq i32 %191, %20
  br i1 %192, label %193, label %200

193:                                              ; preds = %189
  %194 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 64, i32 1
  %195 = load i32, i32* %194, align 4
  %196 = icmp eq i32 %195, %12
  br i1 %196, label %197, label %200

197:                                              ; preds = %193
  %198 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 64, i32 4
  %199 = load i32, i32* %198, align 16
  br label %215

200:                                              ; preds = %193, %189
  tail call void @vpx_clear_system_state() #3
  %201 = sitofp i32 %12 to double
  %202 = fadd double %201, 5.000000e-01
  %203 = sitofp i32 %20 to double
  %204 = fmul double %203, 6.000000e-01
  %205 = fdiv double %204, 6.300000e+01
  %206 = fadd double %202, %205
  %207 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 64, i32 5
  %208 = load i8*, i8** %207, align 8
  %209 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 5
  %210 = load i32, i32* %209, align 16
  %211 = add nsw i32 %210, 256
  %212 = tail call i32 @vpx_setup_noise(double %206, i8* %208, i32 %211) #3
  %213 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 64, i32 4
  store i32 %212, i32* %213, align 8
  store i32 %20, i32* %190, align 8
  %214 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 64, i32 1
  store i32 %12, i32* %214, align 4
  br label %215

215:                                              ; preds = %197, %200
  %216 = phi i32 [ %199, %197 ], [ %212, %200 ]
  %217 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18, i32 13
  %218 = load i8*, i8** %217, align 8
  %219 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 64, i32 5
  %220 = load i8*, i8** %219, align 8
  %221 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18, i32 0
  %222 = load i32, i32* %221, align 16
  %223 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18, i32 1
  %224 = load i32, i32* %223, align 4
  %225 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18, i32 4
  %226 = load i32, i32* %225, align 16
  tail call void @vpx_plane_add_noise_sse2(i8* %218, i8* %220, i32 %216, i32 %216, i32 %222, i32 %224, i32 %226) #3
  br label %227

227:                                              ; preds = %215, %187
  %228 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18
  %229 = bitcast %struct.yv12_buffer_config* %1 to i8*
  %230 = bitcast %struct.yv12_buffer_config* %228 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %229, i8* align 16 %230, i64 160, i1 false)
  %231 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 5
  %232 = load i32, i32* %231, align 16
  %233 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0
  store i32 %232, i32* %233, align 8
  %234 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 6
  %235 = load i32, i32* %234, align 4
  %236 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1
  store i32 %235, i32* %236, align 4
  %237 = sdiv i32 %235, 2
  %238 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 6
  store i32 %237, i32* %238, align 8
  br label %239

239:                                              ; preds = %43, %3, %227, %22
  %240 = phi i32 [ 0, %227 ], [ 0, %22 ], [ -1, %3 ], [ 1, %43 ]
  ret i32 %240
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i8* @vpx_calloc(i64, i64) local_unnamed_addr #2

declare i32 @vp8_yv12_alloc_frame_buffer(%struct.yv12_buffer_config*, i32, i32, i32) local_unnamed_addr #2

declare void @vpx_internal_error(%struct.vpx_internal_error_info*, i32, i8*, ...) local_unnamed_addr #2

declare void @vpx_clear_system_state() local_unnamed_addr #2

declare void @vp8_multiframe_quality_enhance(%struct.VP8Common*) local_unnamed_addr #2

declare i32 @vpx_setup_noise(double, i8*, i32) local_unnamed_addr #2

declare void @vpx_plane_add_noise_sse2(i8*, i8*, i32, i32, i32, i32, i32) local_unnamed_addr #2

declare void @vpx_mbpost_proc_across_ip_sse2(i8*, i32, i32, i32, i32) local_unnamed_addr #2

declare void @vpx_mbpost_proc_down_sse2(i8*, i32, i32, i32, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
