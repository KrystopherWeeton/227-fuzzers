; ModuleID = '../../third_party/blink/renderer/modules/indexeddb/idb_value.cc'
source_filename = "../../third_party/blink/renderer/modules/indexeddb/idb_value.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::IDBValue" = type { %class.scoped_refptr, %"class.WTF::Vector.5", %"class.WTF::Vector.12", %"class.std::__1::unique_ptr.17", %"class.blink::IDBKeyPath", %"class.v8::Isolate"*, i64 }
%class.scoped_refptr = type { %"class.WTF::SharedBuffer"* }
%"class.WTF::Vector.5" = type { %"class.WTF::VectorBuffer.6" }
%"class.WTF::VectorBuffer.6" = type { %"class.WTF::VectorBufferBase.7" }
%"class.WTF::VectorBufferBase.7" = type { %"class.blink::WebBlobInfo"*, i32, i32 }
%"class.blink::WebBlobInfo" = type { i8, %"class.blink::WebString", %"class.blink::WebString", i64, %"class.blink::WebPrivatePtr", %"class.blink::WebString", %"class.absl::optional" }
%"class.blink::WebPrivatePtr" = type { i8* }
%"class.blink::WebString" = type { %class.scoped_refptr.8 }
%class.scoped_refptr.8 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.base::Time" }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.WTF::Vector.12" = type { %"class.WTF::VectorBuffer.13" }
%"class.WTF::VectorBuffer.13" = type { %"class.WTF::VectorBufferBase.14" }
%"class.WTF::VectorBufferBase.14" = type { %"class.mojo::PendingRemote"*, i32, i32 }
%"class.mojo::PendingRemote" = type { %"struct.mojo::internal::PendingRemoteState" }
%"struct.mojo::internal::PendingRemoteState" = type { %"class.mojo::ScopedHandleBase", i32 }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessagePipeHandle" }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::IDBKey"* }
%"class.blink::IDBKey" = type { i32, %"class.WTF::Vector.18", %class.scoped_refptr, %"class.WTF::String", double, i64 }
%"class.WTF::Vector.18" = type { %"class.WTF::VectorBuffer.19" }
%"class.WTF::VectorBuffer.19" = type { %"class.WTF::VectorBufferBase.20" }
%"class.WTF::VectorBufferBase.20" = type { %"class.std::__1::unique_ptr.17"*, i32, i32 }
%"class.WTF::String" = type { %class.scoped_refptr.8 }
%"class.blink::IDBKeyPath" = type { i32, %"class.WTF::String", %"class.WTF::Vector.24" }
%"class.WTF::Vector.24" = type { %"class.WTF::VectorBuffer.25" }
%"class.WTF::VectorBuffer.25" = type { %"class.WTF::VectorBufferBase.26" }
%"class.WTF::VectorBufferBase.26" = type { %"class.WTF::String"*, i32, i32 }
%"class.v8::Isolate" = type { i8 }
%"class.WTF::SharedBuffer" = type { %"class.WTF::RefCounted", i64, %"class.WTF::Vector", %"class.WTF::Vector.0" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.WTF::Vector.0" = type { %"class.WTF::VectorBuffer.1" }
%"class.WTF::VectorBuffer.1" = type { %"class.WTF::VectorBufferBase.2" }
%"class.WTF::VectorBufferBase.2" = type { %"class.std::__1::unique_ptr"*, i32, i32 }
%"class.std::__1::unique_ptr" = type opaque
%"class.blink::SerializedScriptValue" = type <{ %"class.WTF::ThreadSafeRefCounted", [4 x i8], %"class.std::__1::unique_ptr.35", i64, %"class.WTF::Vector.39", %"class.WTF::Vector.44", %"class.WTF::Vector.50", %"class.WTF::Vector.68", %class.scoped_refptr.78, %"class.WTF::HashMap", %"class.WTF::Vector.89", %"class.WTF::Vector.39", %"class.WTF::Vector.12", %"class.WTF::HashMap.95", i8, [7 x i8] }>
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.30" }
%"struct.std::__1::atomic.30" = type { %"struct.std::__1::__atomic_base.31" }
%"struct.std::__1::__atomic_base.31" = type { %"struct.std::__1::__atomic_base.32" }
%"struct.std::__1::__atomic_base.32" = type { %"struct.std::__1::__cxx_atomic_impl.33" }
%"struct.std::__1::__cxx_atomic_impl.33" = type { %"struct.std::__1::__cxx_atomic_base_impl.34" }
%"struct.std::__1::__cxx_atomic_base_impl.34" = type { i32 }
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { i8* }
%"class.WTF::Vector.44" = type { %"class.WTF::VectorBuffer.45" }
%"class.WTF::VectorBuffer.45" = type { %"class.WTF::VectorBufferBase.46", [8 x i8] }
%"class.WTF::VectorBufferBase.46" = type { %class.scoped_refptr.47*, i32, i32 }
%class.scoped_refptr.47 = type { %"class.blink::StaticBitmapImage"* }
%"class.blink::StaticBitmapImage" = type opaque
%"class.WTF::Vector.50" = type { %"class.WTF::VectorBuffer.51" }
%"class.WTF::VectorBuffer.51" = type { %"class.WTF::VectorBufferBase.52" }
%"class.WTF::VectorBufferBase.52" = type { %"class.blink::SerializedScriptValue::Stream"*, i32, i32 }
%"class.blink::SerializedScriptValue::Stream" = type { %"class.blink::MessagePortChannel", %"class.std::__1::unique_ptr.54", %"class.std::__1::unique_ptr.60" }
%"class.blink::MessagePortChannel" = type { %class.scoped_refptr.53 }
%class.scoped_refptr.53 = type { %"class.blink::MessagePortChannel::State"* }
%"class.blink::MessagePortChannel::State" = type opaque
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.blink::ReadableStreamTransferringOptimizer"* }
%"class.blink::ReadableStreamTransferringOptimizer" = type { i32 (...)** }
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"class.blink::WritableStreamTransferringOptimizer"* }
%"class.blink::WritableStreamTransferringOptimizer" = type { i32 (...)** }
%"class.WTF::Vector.68" = type { %"class.WTF::VectorBuffer.69" }
%"class.WTF::VectorBuffer.69" = type { %"class.WTF::VectorBufferBase.70" }
%"class.WTF::VectorBufferBase.70" = type { %"class.v8::CompiledWasmModule"*, i32, i32 }
%"class.v8::CompiledWasmModule" = type { %"class.std::__1::shared_ptr.71", %"class.std::__1::basic_string" }
%"class.std::__1::shared_ptr.71" = type { %"class.v8::internal::wasm::NativeModule"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::wasm::NativeModule" = type opaque
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.74 }
%union.anon.74 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%class.scoped_refptr.78 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type { %"class.WTF::RefCounted.79", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i16, %"class.absl::optional.81", i8, i8, i8, i8, i8, i8, %"class.base::UnguessableToken", %class.scoped_refptr.86 }
%"class.WTF::RefCounted.79" = type { %"class.base::RefCounted.80" }
%"class.base::RefCounted.80" = type { %"class.base::subtle::RefCountedBase" }
%"class.absl::optional.81" = type { %"class.absl::optional_internal::optional_data.82" }
%"class.absl::optional_internal::optional_data.82" = type { %"class.absl::optional_internal::optional_data_base.83" }
%"class.absl::optional_internal::optional_data_base.83" = type { %"class.absl::optional_internal::optional_data_dtor_base.84" }
%"class.absl::optional_internal::optional_data_dtor_base.84" = type { i8, %union.anon.85 }
%union.anon.85 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%class.scoped_refptr.86 = type { %"class.blink::SecurityOrigin"* }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.WTF::Vector.89" = type { %"class.WTF::VectorBuffer.90" }
%"class.WTF::VectorBuffer.90" = type { %"class.WTF::VectorBufferBase.91" }
%"class.WTF::VectorBufferBase.91" = type { %"class.mojo::ScopedHandleBase.92"*, i32, i32 }
%"class.mojo::ScopedHandleBase.92" = type { %"class.mojo::Handle" }
%"class.WTF::Vector.39" = type { %"class.WTF::VectorBuffer.40" }
%"class.WTF::VectorBuffer.40" = type { %"class.WTF::VectorBufferBase.41", [16 x i8] }
%"class.WTF::VectorBufferBase.41" = type { %"class.blink::ArrayBufferContents"*, i32, i32 }
%"class.blink::ArrayBufferContents" = type { %"class.std::__1::shared_ptr" }
%"class.std::__1::shared_ptr" = type { %"class.v8::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::BackingStore" = type { i8 }
%"class.WTF::HashMap.95" = type { %"class.WTF::HashTable.96" }
%"class.WTF::HashTable.96" = type <{ %"struct.WTF::KeyValuePair.99"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.99" = type { i8**, %"class.std::__1::unique_ptr.117" }
%"class.std::__1::unique_ptr.117" = type { %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"class.blink::SerializedScriptValue::Attachment"* }
%"class.blink::SerializedScriptValue::Attachment" = type { i32 (...)** }
%"class.blink::BlobDataHandle" = type { %"class.WTF::ThreadSafeRefCounted.102", %"class.WTF::String", %"class.WTF::String", i64, i8, %"class.mojo::PendingRemote.104", %"class.WTF::Mutex" }
%"class.WTF::ThreadSafeRefCounted.102" = type { %"class.base::RefCountedThreadSafe.103" }
%"class.base::RefCountedThreadSafe.103" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.mojo::PendingRemote.104" = type { %"struct.mojo::internal::PendingRemoteState" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr.111" }
%"class.std::__1::unique_ptr.111" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"class.blink::mojom::blink::IDBReturnValue"* }
%"class.blink::mojom::blink::IDBReturnValue" = type { %"class.std::__1::unique_ptr.105", %"class.std::__1::unique_ptr.17", %"class.blink::IDBKeyPath" }
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"class.blink::IDBValue"* }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN5blink8IDBValue21SetInjectedPrimaryKeyENSt3__110unique_ptrINS_6IDBKeyENS1_14default_deleteIS3_EEEENS_10IDBKeyPathE = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

$_ZN3WTF6VectorIN5blink11WebBlobInfoELj0ENS_18PartitionAllocatorEE2atEj = comdat any

@.str = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.1 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.3 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1

@_ZN5blink8IDBValueC1E13scoped_refptrIN3WTF12SharedBufferEENS2_6VectorINS_11WebBlobInfoELj0ENS2_18PartitionAllocatorEEENS5_IN4mojo13PendingRemoteINS_5mojom5blink29FileSystemAccessTransferTokenEEELj0ES7_EE = hidden unnamed_addr alias void (%"class.blink::IDBValue"*, %"class.WTF::SharedBuffer"*, %"class.WTF::Vector.5"*, %"class.WTF::Vector.12"*), void (%"class.blink::IDBValue"*, %"class.WTF::SharedBuffer"*, %"class.WTF::Vector.5"*, %"class.WTF::Vector.12"*)* @_ZN5blink8IDBValueC2E13scoped_refptrIN3WTF12SharedBufferEENS2_6VectorINS_11WebBlobInfoELj0ENS2_18PartitionAllocatorEEENS5_IN4mojo13PendingRemoteINS_5mojom5blink29FileSystemAccessTransferTokenEEELj0ES7_EE
@_ZN5blink8IDBValueD1Ev = hidden unnamed_addr alias void (%"class.blink::IDBValue"*), void (%"class.blink::IDBValue"*)* @_ZN5blink8IDBValueD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8IDBValueC2E13scoped_refptrIN3WTF12SharedBufferEENS2_6VectorINS_11WebBlobInfoELj0ENS2_18PartitionAllocatorEEENS5_IN4mojo13PendingRemoteINS_5mojom5blink29FileSystemAccessTransferTokenEEELj0ES7_EE(%"class.blink::IDBValue"* nocapture, %"class.WTF::SharedBuffer"*, %"class.WTF::Vector.5"* nocapture, %"class.WTF::Vector.12"* nocapture) unnamed_addr #0 align 2 {
  %5 = ptrtoint %"class.WTF::SharedBuffer"* %1 to i64
  %6 = bitcast %"class.blink::IDBValue"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %10 = bitcast %"class.WTF::Vector.5"* %2 to i64*
  %11 = bitcast %"class.WTF::Vector.5"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 16, i1 false) #8
  %12 = load i64, i64* %10, align 8
  %13 = bitcast %"class.WTF::Vector.5"* %7 to i64*
  store atomic i64 0, i64* %10 monotonic, align 8
  store atomic i64 %12, i64* %13 monotonic, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %2, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %8, align 4
  %16 = load i32, i32* %14, align 4
  store i32 %16, i32* %8, align 4
  store i32 %15, i32* %14, align 4
  %17 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %2, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %9, align 4
  %19 = load i32, i32* %17, align 4
  store i32 %19, i32* %9, align 4
  store i32 %18, i32* %17, align 4
  %20 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 2
  %21 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %22 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %23 = bitcast %"class.WTF::Vector.12"* %3 to i64*
  %24 = bitcast %"class.WTF::Vector.12"* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 16, i1 false) #8
  %25 = load i64, i64* %23, align 8
  %26 = bitcast %"class.WTF::Vector.12"* %20 to i64*
  store atomic i64 0, i64* %23 monotonic, align 8
  store atomic i64 %25, i64* %26 monotonic, align 8
  %27 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %3, i64 0, i32 0, i32 0, i32 1
  %28 = load i32, i32* %21, align 4
  %29 = load i32, i32* %27, align 4
  store i32 %29, i32* %21, align 4
  store i32 %28, i32* %27, align 4
  %30 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %3, i64 0, i32 0, i32 0, i32 2
  %31 = load i32, i32* %22, align 4
  %32 = load i32, i32* %30, align 4
  store i32 %32, i32* %22, align 4
  store i32 %31, i32* %30, align 4
  %33 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 3
  %34 = bitcast %"class.std::__1::unique_ptr.17"* %33 to i64*
  store i64 0, i64* %34, align 8
  %35 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 4, i32 0
  store i32 0, i32* %35, align 8
  %36 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 4, i32 1, i32 0, i32 0
  %37 = bitcast %"class.WTF::StringImpl"** %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 40, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8IDBValueD2Ev(%"class.blink::IDBValue"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 5
  %3 = load %"class.v8::Isolate"*, %"class.v8::Isolate"** %2, align 8
  %4 = icmp eq %"class.v8::Isolate"* %3, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 6
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %12, label %9

9:                                                ; preds = %5
  %10 = sub nsw i64 0, %7
  %11 = tail call i64 @_ZN2v87Isolate37AdjustAmountOfExternalAllocatedMemoryEl(%"class.v8::Isolate"* nonnull %3, i64 %10) #8
  br label %12

12:                                               ; preds = %5, %1, %9
  %13 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 4, i32 2
  %14 = getelementptr inbounds %"class.WTF::Vector.24", %"class.WTF::Vector.24"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = load %"class.WTF::String"*, %"class.WTF::String"** %14, align 8
  %16 = icmp eq %"class.WTF::String"* %15, null
  br i1 %16, label %51, label %17, !prof !2

17:                                               ; preds = %12
  %18 = bitcast %"class.WTF::String"* %15 to i8*
  %19 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 4, i32 2, i32 0, i32 0, i32 2
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %49, label %22, !prof !3

22:                                               ; preds = %17
  %23 = zext i32 %20 to i64
  %24 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %15, i64 %23
  br label %25

25:                                               ; preds = %43, %22
  %26 = phi %"class.WTF::String"* [ %44, %43 ], [ %15, %22 ]
  %27 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %26, i64 0, i32 0, i32 0
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %28, null
  br i1 %29, label %43, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  br i1 %34, label %37, label %39

37:                                               ; preds = %30
  %38 = add i32 %36, -1
  store i32 %38, i32* %35, align 4
  br label %39

39:                                               ; preds = %37, %30
  %40 = phi i32 [ %38, %37 ], [ %36, %30 ]
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %39
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %28) #8
  br label %43

43:                                               ; preds = %42, %39, %25
  %44 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %26, i64 1
  %45 = icmp eq %"class.WTF::String"* %44, %24
  br i1 %45, label %46, label %25

46:                                               ; preds = %43
  store i32 0, i32* %19, align 4
  %47 = bitcast %"class.WTF::Vector.24"* %13 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %46, %17
  %50 = phi i8* [ %48, %46 ], [ %18, %17 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #8
  store %"class.WTF::String"* null, %"class.WTF::String"** %14, align 8
  br label %51

51:                                               ; preds = %49, %12
  %52 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 4, i32 1, i32 0, i32 0
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %52, align 8
  %54 = icmp eq %"class.WTF::StringImpl"* %53, null
  br i1 %54, label %68, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = load atomic i32, i32* %56 monotonic, align 4
  %58 = and i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 0, i32 0
  %61 = load i32, i32* %60, align 4
  br i1 %59, label %62, label %64

62:                                               ; preds = %55
  %63 = add i32 %61, -1
  store i32 %63, i32* %60, align 4
  br label %64

64:                                               ; preds = %62, %55
  %65 = phi i32 [ %63, %62 ], [ %61, %55 ]
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %68

67:                                               ; preds = %64
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %53) #8
  br label %68

68:                                               ; preds = %51, %64, %67
  %69 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %70 = load %"class.blink::IDBKey"*, %"class.blink::IDBKey"** %69, align 8
  store %"class.blink::IDBKey"* null, %"class.blink::IDBKey"** %69, align 8
  %71 = icmp eq %"class.blink::IDBKey"* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %68
  tail call void @_ZN5blink6IDBKeyD1Ev(%"class.blink::IDBKey"* nonnull %70) #8
  %73 = bitcast %"class.blink::IDBKey"* %70 to i8*
  tail call void @free(i8* %73) #8
  br label %74

74:                                               ; preds = %68, %72
  %75 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 2
  %76 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %75, i64 0, i32 0, i32 0, i32 0
  %77 = load %"class.mojo::PendingRemote"*, %"class.mojo::PendingRemote"** %76, align 8
  %78 = icmp eq %"class.mojo::PendingRemote"* %77, null
  br i1 %78, label %97, label %79, !prof !2

79:                                               ; preds = %74
  %80 = bitcast %"class.mojo::PendingRemote"* %77 to i8*
  %81 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %82 = load i32, i32* %81, align 4
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %95, label %84, !prof !3

84:                                               ; preds = %79
  %85 = zext i32 %82 to i64
  %86 = getelementptr inbounds %"class.mojo::PendingRemote", %"class.mojo::PendingRemote"* %77, i64 %85
  br label %87

87:                                               ; preds = %87, %84
  %88 = phi %"class.mojo::PendingRemote"* [ %90, %87 ], [ %77, %84 ]
  %89 = getelementptr inbounds %"class.mojo::PendingRemote", %"class.mojo::PendingRemote"* %88, i64 0, i32 0
  tail call void @_ZN4mojo8internal18PendingRemoteStateD1Ev(%"struct.mojo::internal::PendingRemoteState"* %89) #8
  %90 = getelementptr inbounds %"class.mojo::PendingRemote", %"class.mojo::PendingRemote"* %88, i64 1
  %91 = icmp eq %"class.mojo::PendingRemote"* %90, %86
  br i1 %91, label %92, label %87

92:                                               ; preds = %87
  store i32 0, i32* %81, align 4
  %93 = bitcast %"class.WTF::Vector.12"* %75 to i8**
  %94 = load i8*, i8** %93, align 8
  br label %95

95:                                               ; preds = %92, %79
  %96 = phi i8* [ %94, %92 ], [ %80, %79 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %96) #8
  store %"class.mojo::PendingRemote"* null, %"class.mojo::PendingRemote"** %76, align 8
  br label %97

97:                                               ; preds = %74, %95
  %98 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %99 = load %"class.blink::WebBlobInfo"*, %"class.blink::WebBlobInfo"** %98, align 8
  %100 = icmp eq %"class.blink::WebBlobInfo"* %99, null
  br i1 %100, label %117, label %101, !prof !2

101:                                              ; preds = %97
  %102 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %114, label %105, !prof !3

105:                                              ; preds = %101
  %106 = zext i32 %103 to i64
  %107 = getelementptr inbounds %"class.blink::WebBlobInfo", %"class.blink::WebBlobInfo"* %99, i64 %106
  br label %108

108:                                              ; preds = %108, %105
  %109 = phi %"class.blink::WebBlobInfo"* [ %110, %108 ], [ %99, %105 ]
  tail call void @_ZN5blink11WebBlobInfoD1Ev(%"class.blink::WebBlobInfo"* %109) #8
  %110 = getelementptr inbounds %"class.blink::WebBlobInfo", %"class.blink::WebBlobInfo"* %109, i64 1
  %111 = icmp eq %"class.blink::WebBlobInfo"* %110, %107
  br i1 %111, label %112, label %108

112:                                              ; preds = %108
  store i32 0, i32* %102, align 4
  %113 = load %"class.blink::WebBlobInfo"*, %"class.blink::WebBlobInfo"** %98, align 8
  br label %114

114:                                              ; preds = %112, %101
  %115 = phi %"class.blink::WebBlobInfo"* [ %99, %101 ], [ %113, %112 ]
  %116 = getelementptr inbounds %"class.blink::WebBlobInfo", %"class.blink::WebBlobInfo"* %115, i64 0, i32 0
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %116) #8
  store %"class.blink::WebBlobInfo"* null, %"class.blink::WebBlobInfo"** %98, align 8
  br label %117

117:                                              ; preds = %97, %114
  %118 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 0, i32 0
  %119 = load %"class.WTF::SharedBuffer"*, %"class.WTF::SharedBuffer"** %118, align 8
  %120 = icmp eq %"class.WTF::SharedBuffer"* %119, null
  br i1 %120, label %128, label %121

121:                                              ; preds = %117
  %122 = getelementptr inbounds %"class.WTF::SharedBuffer", %"class.WTF::SharedBuffer"* %119, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %122) #8
  %123 = getelementptr inbounds %"class.WTF::SharedBuffer", %"class.WTF::SharedBuffer"* %119, i64 0, i32 0, i32 0, i32 0, i32 0
  %124 = load i32, i32* %123, align 4
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %128

126:                                              ; preds = %121
  tail call void @_ZN3WTF12SharedBufferD1Ev(%"class.WTF::SharedBuffer"* nonnull %119) #8
  %127 = bitcast %"class.WTF::SharedBuffer"* %119 to i8*
  tail call void @free(i8* %127) #8
  br label %128

128:                                              ; preds = %117, %121, %126
  ret void
}

declare i64 @_ZN2v87Isolate37AdjustAmountOfExternalAllocatedMemoryEl(%"class.v8::Isolate"*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SerializedScriptValue"* @_ZNK5blink8IDBValue21CreateSerializedValueEv(%"class.blink::IDBValue"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.WTF::SharedBuffer"*, %"class.WTF::SharedBuffer"** %2, align 8
  %4 = icmp eq %"class.WTF::SharedBuffer"* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::SharedBuffer", %"class.WTF::SharedBuffer"* %3, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %6) #8
  br label %7

7:                                                ; preds = %1, %5
  %8 = tail call %"class.blink::SerializedScriptValue"* @_ZN5blink21SerializedScriptValue6CreateE13scoped_refptrIKN3WTF12SharedBufferEE(%"class.WTF::SharedBuffer"* %3) #8
  ret %"class.blink::SerializedScriptValue"* %8
}

declare %"class.blink::SerializedScriptValue"* @_ZN5blink21SerializedScriptValue6CreateE13scoped_refptrIKN3WTF12SharedBufferEE(%"class.WTF::SharedBuffer"*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink8IDBValue6IsNullEv(%"class.blink::IDBValue"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.WTF::SharedBuffer"*, %"class.WTF::SharedBuffer"** %2, align 8
  %4 = icmp eq %"class.WTF::SharedBuffer"* %3, null
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8IDBValue10SetIsolateEPN2v87IsolateE(%"class.blink::IDBValue"* nocapture, %"class.v8::Isolate"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 5
  store %"class.v8::Isolate"* %1, %"class.v8::Isolate"** %3, align 8
  %4 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::SharedBuffer"*, %"class.WTF::SharedBuffer"** %4, align 8
  %6 = icmp eq %"class.WTF::SharedBuffer"* %5, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 6
  store i64 0, i64* %8, align 8
  br label %16

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::SharedBuffer", %"class.WTF::SharedBuffer"* %5, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 6
  store i64 %11, i64* %12, align 8
  %13 = icmp eq i64 %11, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %9
  %15 = tail call i64 @_ZN2v87Isolate37AdjustAmountOfExternalAllocatedMemoryEl(%"class.v8::Isolate"* %1, i64 %11) #8
  br label %16

16:                                               ; preds = %7, %9, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8IDBValue7SetDataE13scoped_refptrIN3WTF12SharedBufferEE(%"class.blink::IDBValue"* nocapture, %"class.WTF::SharedBuffer"*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.WTF::SharedBuffer"* %1 to i64
  %4 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 6
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.WTF::SharedBuffer", %"class.WTF::SharedBuffer"* %1, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %4, align 8
  %8 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 5
  %9 = load %"class.v8::Isolate"*, %"class.v8::Isolate"** %8, align 8
  %10 = sub nsw i64 %7, %5
  %11 = tail call i64 @_ZN2v87Isolate37AdjustAmountOfExternalAllocatedMemoryEl(%"class.v8::Isolate"* %9, i64 %10) #8
  %12 = bitcast %"class.blink::IDBValue"* %0 to i64*
  %13 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 0, i32 0
  %14 = load %"class.WTF::SharedBuffer"*, %"class.WTF::SharedBuffer"** %13, align 8
  store i64 %3, i64* %12, align 8
  %15 = icmp eq %"class.WTF::SharedBuffer"* %14, null
  br i1 %15, label %23, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.WTF::SharedBuffer", %"class.WTF::SharedBuffer"* %14, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %17) #8
  %18 = getelementptr inbounds %"class.WTF::SharedBuffer", %"class.WTF::SharedBuffer"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %16
  tail call void @_ZN3WTF12SharedBufferD1Ev(%"class.WTF::SharedBuffer"* nonnull %14) #8
  %22 = bitcast %"class.WTF::SharedBuffer"* %14 to i8*
  tail call void @free(i8* %22) #8
  br label %23

23:                                               ; preds = %21, %16, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::BlobDataHandle"* @_ZN5blink8IDBValue12TakeLastBlobEv(%"class.blink::IDBValue"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, -1
  %6 = tail call dereferenceable(64) %"class.blink::WebBlobInfo"* @_ZN3WTF6VectorIN5blink11WebBlobInfoELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.5"* %2, i32 %5) #8
  %7 = tail call %"class.blink::BlobDataHandle"* @_ZNK5blink11WebBlobInfo13GetBlobHandleEv(%"class.blink::WebBlobInfo"* %6) #8
  %8 = load i32, i32* %3, align 4
  %9 = add i32 %8, -1
  %10 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %2, i64 0, i32 0, i32 0, i32 0
  %11 = load %"class.blink::WebBlobInfo"*, %"class.blink::WebBlobInfo"** %10, align 8
  %12 = zext i32 %8 to i64
  %13 = getelementptr inbounds %"class.blink::WebBlobInfo", %"class.blink::WebBlobInfo"* %11, i64 %12
  %14 = zext i32 %9 to i64
  %15 = getelementptr inbounds %"class.blink::WebBlobInfo", %"class.blink::WebBlobInfo"* %11, i64 %14
  br label %16

16:                                               ; preds = %16, %1
  %17 = phi %"class.blink::WebBlobInfo"* [ %18, %16 ], [ %15, %1 ]
  tail call void @_ZN5blink11WebBlobInfoD1Ev(%"class.blink::WebBlobInfo"* %17) #8
  %18 = getelementptr inbounds %"class.blink::WebBlobInfo", %"class.blink::WebBlobInfo"* %17, i64 1
  %19 = icmp eq %"class.blink::WebBlobInfo"* %18, %13
  br i1 %19, label %20, label %16

20:                                               ; preds = %16
  store i32 %9, i32* %3, align 4
  ret %"class.blink::BlobDataHandle"* %7
}

declare %"class.blink::BlobDataHandle"* @_ZNK5blink11WebBlobInfo13GetBlobHandleEv(%"class.blink::WebBlobInfo"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::IDBValue"* @_ZN5blink8IDBValue18ConvertReturnValueERKN4mojo9StructPtrINS_5mojom5blink14IDBReturnValueEEE(%"class.mojo::StructPtr"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.blink::IDBKeyPath", align 8
  %3 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load %"class.blink::mojom::blink::IDBReturnValue"*, %"class.blink::mojom::blink::IDBReturnValue"** %3, align 8
  %5 = icmp eq %"class.blink::mojom::blink::IDBReturnValue"* %4, null
  br i1 %5, label %6, label %20

6:                                                ; preds = %1
  %7 = tail call i8* @_Znwm(i64 96) #9
  %8 = bitcast i8* %7 to i64*
  store i64 0, i64* %8, align 8
  %9 = getelementptr inbounds i8, i8* %7, i64 8
  %10 = getelementptr inbounds i8, i8* %7, i64 16
  %11 = bitcast i8* %10 to i32*
  %12 = getelementptr inbounds i8, i8* %7, i64 20
  %13 = bitcast i8* %12 to i32*
  %14 = bitcast i8* %9 to i64*
  store atomic i64 0, i64* %14 monotonic, align 8
  store i32 0, i32* %11, align 4
  store i32 0, i32* %13, align 4
  %15 = getelementptr inbounds i8, i8* %7, i64 24
  %16 = getelementptr inbounds i8, i8* %7, i64 32
  %17 = bitcast i8* %15 to i64*
  store atomic i64 0, i64* %17 monotonic, align 8
  %18 = getelementptr inbounds i8, i8* %7, i64 56
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 40, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %16, i8 0, i64 20, i1 false) #8
  %19 = bitcast i8* %7 to %"class.blink::IDBValue"*
  br label %158

20:                                               ; preds = %1
  %21 = getelementptr inbounds %"class.blink::mojom::blink::IDBReturnValue", %"class.blink::mojom::blink::IDBReturnValue"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.blink::mojom::blink::IDBReturnValue", %"class.blink::mojom::blink::IDBReturnValue"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = load %"class.blink::IDBValue"*, %"class.blink::IDBValue"** %22, align 8
  store %"class.blink::IDBValue"* null, %"class.blink::IDBValue"** %21, align 8
  %24 = load %"class.blink::mojom::blink::IDBReturnValue"*, %"class.blink::mojom::blink::IDBReturnValue"** %3, align 8
  %25 = getelementptr inbounds %"class.blink::mojom::blink::IDBReturnValue", %"class.blink::mojom::blink::IDBReturnValue"* %24, i64 0, i32 1, i32 0, i32 0, i32 0
  %26 = load %"class.blink::IDBKey"*, %"class.blink::IDBKey"** %25, align 8
  store %"class.blink::IDBKey"* null, %"class.blink::IDBKey"** %25, align 8
  %27 = load %"class.blink::mojom::blink::IDBReturnValue"*, %"class.blink::mojom::blink::IDBReturnValue"** %3, align 8
  %28 = getelementptr inbounds %"class.blink::IDBKeyPath", %"class.blink::IDBKeyPath"* %2, i64 0, i32 0
  %29 = getelementptr inbounds %"class.blink::mojom::blink::IDBReturnValue", %"class.blink::mojom::blink::IDBReturnValue"* %27, i64 0, i32 2, i32 0
  %30 = load i32, i32* %29, align 8
  store i32 %30, i32* %28, align 8
  %31 = getelementptr inbounds %"class.blink::mojom::blink::IDBReturnValue", %"class.blink::mojom::blink::IDBReturnValue"* %27, i64 0, i32 2, i32 1, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = getelementptr inbounds %"class.blink::IDBKeyPath", %"class.blink::IDBKeyPath"* %2, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"** %33, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %34, label %52, label %35

35:                                               ; preds = %20
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %52

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i33
  %44 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %43, i33 1) #8
  %45 = extractvalue { i33, i1 } %44, 1
  %46 = extractvalue { i33, i1 } %44, 0
  %47 = icmp slt i33 %46, 0
  %48 = or i1 %45, %47
  br i1 %48, label %49, label %50, !prof !3

49:                                               ; preds = %40
  tail call void @llvm.trap() #8
  unreachable

50:                                               ; preds = %40
  %51 = trunc i33 %46 to i32
  store i32 %51, i32* %41, align 4
  br label %52

52:                                               ; preds = %50, %35, %20
  %53 = getelementptr inbounds %"class.blink::IDBKeyPath", %"class.blink::IDBKeyPath"* %2, i64 0, i32 2
  %54 = getelementptr inbounds %"class.blink::mojom::blink::IDBReturnValue", %"class.blink::mojom::blink::IDBReturnValue"* %27, i64 0, i32 2, i32 2, i32 0, i32 0, i32 1
  %55 = load i32, i32* %54, align 8
  %56 = getelementptr inbounds %"class.WTF::Vector.24", %"class.WTF::Vector.24"* %53, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %56, align 8
  %57 = getelementptr inbounds %"class.blink::IDBKeyPath", %"class.blink::IDBKeyPath"* %2, i64 0, i32 2, i32 0, i32 0, i32 1
  store i32 0, i32* %57, align 8
  %58 = icmp eq i32 %55, 0
  br i1 %58, label %68, label %59

59:                                               ; preds = %52
  %60 = zext i32 %55 to i64
  %61 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %60) #8
  %62 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %61, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #8
  %63 = ptrtoint i8* %62 to i64
  %64 = bitcast %"class.WTF::Vector.24"* %53 to i64*
  store atomic i64 %63, i64* %64 monotonic, align 8
  %65 = lshr i64 %61, 3
  %66 = trunc i64 %65 to i32
  store i32 %66, i32* %57, align 8
  %67 = bitcast i8* %62 to %"class.WTF::String"*
  br label %68

68:                                               ; preds = %59, %52
  %69 = phi %"class.WTF::String"* [ null, %52 ], [ %67, %59 ]
  %70 = getelementptr inbounds %"class.blink::mojom::blink::IDBReturnValue", %"class.blink::mojom::blink::IDBReturnValue"* %27, i64 0, i32 2, i32 2, i32 0, i32 0, i32 2
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %"class.blink::IDBKeyPath", %"class.blink::IDBKeyPath"* %2, i64 0, i32 2, i32 0, i32 0, i32 2
  store i32 %71, i32* %72, align 4
  %73 = getelementptr inbounds %"class.blink::mojom::blink::IDBReturnValue", %"class.blink::mojom::blink::IDBReturnValue"* %27, i64 0, i32 2, i32 2, i32 0, i32 0, i32 0
  %74 = load %"class.WTF::String"*, %"class.WTF::String"** %73, align 8
  %75 = zext i32 %71 to i64
  %76 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %74, i64 %75
  %77 = icmp eq i32 %71, 0
  br i1 %77, label %106, label %78

78:                                               ; preds = %68, %102
  %79 = phi %"class.WTF::String"* [ %103, %102 ], [ %69, %68 ]
  %80 = phi %"class.WTF::String"* [ %104, %102 ], [ %74, %68 ]
  %81 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %80, i64 0, i32 0, i32 0
  %82 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %81, align 8
  %83 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %79, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %82, %"class.WTF::StringImpl"** %83, align 8
  %84 = icmp eq %"class.WTF::StringImpl"* %82, null
  br i1 %84, label %102, label %85

85:                                               ; preds = %78
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %82, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %87 = load atomic i32, i32* %86 monotonic, align 4
  %88 = and i32 %87, 2
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %102

90:                                               ; preds = %85
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %82, i64 0, i32 0
  %92 = load i32, i32* %91, align 4
  %93 = zext i32 %92 to i33
  %94 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %93, i33 1) #8
  %95 = extractvalue { i33, i1 } %94, 1
  %96 = extractvalue { i33, i1 } %94, 0
  %97 = icmp slt i33 %96, 0
  %98 = or i1 %95, %97
  br i1 %98, label %99, label %100, !prof !3

99:                                               ; preds = %90
  tail call void @llvm.trap() #8
  unreachable

100:                                              ; preds = %90
  %101 = trunc i33 %96 to i32
  store i32 %101, i32* %91, align 4
  br label %102

102:                                              ; preds = %100, %85, %78
  %103 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %79, i64 1
  %104 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %80, i64 1
  %105 = icmp eq %"class.WTF::String"* %104, %76
  br i1 %105, label %106, label %78

106:                                              ; preds = %102, %68
  call void @_ZN5blink8IDBValue21SetInjectedPrimaryKeyENSt3__110unique_ptrINS_6IDBKeyENS1_14default_deleteIS3_EEEENS_10IDBKeyPathE(%"class.blink::IDBValue"* %23, %"class.blink::IDBKey"* %26, %"class.blink::IDBKeyPath"* nonnull %2)
  %107 = load %"class.WTF::String"*, %"class.WTF::String"** %56, align 8
  %108 = icmp eq %"class.WTF::String"* %107, null
  br i1 %108, label %142, label %109, !prof !2

109:                                              ; preds = %106
  %110 = bitcast %"class.WTF::String"* %107 to i8*
  %111 = load i32, i32* %72, align 4
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %140, label %113, !prof !3

113:                                              ; preds = %109
  %114 = zext i32 %111 to i64
  %115 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %107, i64 %114
  br label %116

116:                                              ; preds = %134, %113
  %117 = phi %"class.WTF::String"* [ %135, %134 ], [ %107, %113 ]
  %118 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %117, i64 0, i32 0, i32 0
  %119 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %118, align 8
  %120 = icmp eq %"class.WTF::StringImpl"* %119, null
  br i1 %120, label %134, label %121

121:                                              ; preds = %116
  %122 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %119, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %123 = load atomic i32, i32* %122 monotonic, align 4
  %124 = and i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %119, i64 0, i32 0
  %127 = load i32, i32* %126, align 4
  br i1 %125, label %128, label %130

128:                                              ; preds = %121
  %129 = add i32 %127, -1
  store i32 %129, i32* %126, align 4
  br label %130

130:                                              ; preds = %128, %121
  %131 = phi i32 [ %129, %128 ], [ %127, %121 ]
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %133, label %134

133:                                              ; preds = %130
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %119) #8
  br label %134

134:                                              ; preds = %133, %130, %116
  %135 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %117, i64 1
  %136 = icmp eq %"class.WTF::String"* %135, %115
  br i1 %136, label %137, label %116

137:                                              ; preds = %134
  store i32 0, i32* %72, align 4
  %138 = bitcast %"class.WTF::Vector.24"* %53 to i8**
  %139 = load i8*, i8** %138, align 8
  br label %140

140:                                              ; preds = %137, %109
  %141 = phi i8* [ %139, %137 ], [ %110, %109 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %141) #8
  store %"class.WTF::String"* null, %"class.WTF::String"** %56, align 8
  br label %142

142:                                              ; preds = %140, %106
  %143 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %144 = icmp eq %"class.WTF::StringImpl"* %143, null
  br i1 %144, label %158, label %145

145:                                              ; preds = %142
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %143, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %147 = load atomic i32, i32* %146 monotonic, align 4
  %148 = and i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %143, i64 0, i32 0
  %151 = load i32, i32* %150, align 4
  br i1 %149, label %152, label %154

152:                                              ; preds = %145
  %153 = add i32 %151, -1
  store i32 %153, i32* %150, align 4
  br label %154

154:                                              ; preds = %152, %145
  %155 = phi i32 [ %153, %152 ], [ %151, %145 ]
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %158

157:                                              ; preds = %154
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %143) #8
  br label %158

158:                                              ; preds = %142, %154, %157, %6
  %159 = phi %"class.blink::IDBValue"* [ %23, %142 ], [ %23, %154 ], [ %23, %157 ], [ %19, %6 ]
  ret %"class.blink::IDBValue"* %159
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8IDBValue21SetInjectedPrimaryKeyENSt3__110unique_ptrINS_6IDBKeyENS1_14default_deleteIS3_EEEENS_10IDBKeyPathE(%"class.blink::IDBValue"*, %"class.blink::IDBKey"*, %"class.blink::IDBKeyPath"*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"class.blink::IDBKey"* %1 to i64
  %5 = icmp eq %"class.blink::IDBKey"* %1, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.blink::IDBKey", %"class.blink::IDBKey"* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 6
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  tail call void @_ZN5blink6IDBKeyD1Ev(%"class.blink::IDBKey"* nonnull %1) #8
  %11 = bitcast %"class.blink::IDBKey"* %1 to i8*
  tail call void @free(i8* %11) #8
  br label %12

12:                                               ; preds = %3, %10, %6
  %13 = phi i64 [ 0, %10 ], [ %4, %6 ], [ %4, %3 ]
  %14 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 3
  %15 = getelementptr inbounds %"class.std::__1::unique_ptr.17", %"class.std::__1::unique_ptr.17"* %14, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::IDBKey"*, %"class.blink::IDBKey"** %15, align 8
  %17 = bitcast %"class.std::__1::unique_ptr.17"* %14 to i64*
  store i64 %13, i64* %17, align 8
  %18 = icmp eq %"class.blink::IDBKey"* %16, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %12
  tail call void @_ZN5blink6IDBKeyD1Ev(%"class.blink::IDBKey"* nonnull %16) #8
  %20 = bitcast %"class.blink::IDBKey"* %16 to i8*
  tail call void @free(i8* %20) #8
  br label %21

21:                                               ; preds = %12, %19
  %22 = getelementptr inbounds %"class.blink::IDBKeyPath", %"class.blink::IDBKeyPath"* %2, i64 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 4, i32 0
  store i32 %23, i32* %24, align 8
  %25 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 4, i32 1
  %26 = getelementptr inbounds %"class.blink::IDBKeyPath", %"class.blink::IDBKeyPath"* %2, i64 0, i32 1
  %27 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %26, i64 0, i32 0, i32 0
  %28 = bitcast %"class.WTF::String"* %26 to i64*
  %29 = load i64, i64* %28, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %27, align 8
  %30 = bitcast %"class.WTF::String"* %25 to i64*
  %31 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %25, i64 0, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  store i64 %29, i64* %30, align 8
  %33 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %33, label %47, label %34

34:                                               ; preds = %21
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load atomic i32, i32* %35 monotonic, align 4
  %37 = and i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %40 = load i32, i32* %39, align 4
  br i1 %38, label %41, label %43

41:                                               ; preds = %34
  %42 = add i32 %40, -1
  store i32 %42, i32* %39, align 4
  br label %43

43:                                               ; preds = %41, %34
  %44 = phi i32 [ %42, %41 ], [ %40, %34 ]
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %43
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %32) #8
  br label %47

47:                                               ; preds = %46, %43, %21
  %48 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 4, i32 2
  %49 = getelementptr inbounds %"class.blink::IDBKeyPath", %"class.blink::IDBKeyPath"* %2, i64 0, i32 2
  %50 = bitcast %"class.WTF::Vector.24"* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %"class.WTF::Vector.24"* %48 to i64*
  %53 = load i64, i64* %52, align 8
  store atomic i64 %53, i64* %50 monotonic, align 8
  store atomic i64 %51, i64* %52 monotonic, align 8
  %54 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 4, i32 2, i32 0, i32 0, i32 1
  %55 = getelementptr inbounds %"class.blink::IDBKeyPath", %"class.blink::IDBKeyPath"* %2, i64 0, i32 2, i32 0, i32 0, i32 1
  %56 = load i32, i32* %54, align 4
  %57 = load i32, i32* %55, align 4
  store i32 %57, i32* %54, align 4
  store i32 %56, i32* %55, align 4
  %58 = getelementptr inbounds %"class.blink::IDBValue", %"class.blink::IDBValue"* %0, i64 0, i32 4, i32 2, i32 0, i32 0, i32 2
  %59 = getelementptr inbounds %"class.blink::IDBKeyPath", %"class.blink::IDBKeyPath"* %2, i64 0, i32 2, i32 0, i32 0, i32 2
  %60 = load i32, i32* %58, align 4
  %61 = load i32, i32* %59, align 4
  store i32 %61, i32* %58, align 4
  store i32 %60, i32* %59, align 4
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4mojo8internal18PendingRemoteStateD1Ev(%"struct.mojo::internal::PendingRemoteState"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN5blink11WebBlobInfoD1Ev(%"class.blink::WebBlobInfo"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN5blink6IDBKeyD1Ev(%"class.blink::IDBKey"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.1, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #8
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #1

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN3WTF12SharedBufferD1Ev(%"class.WTF::SharedBuffer"*) unnamed_addr #4

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(64) %"class.blink::WebBlobInfo"* @_ZN3WTF6VectorIN5blink11WebBlobInfoELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.5"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #8
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i8* %14, i8* %15) #8
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #8
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #8
  %23 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::WebBlobInfo"*, %"class.blink::WebBlobInfo"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::WebBlobInfo", %"class.blink::WebBlobInfo"* %24, i64 %25
  ret %"class.blink::WebBlobInfo"* %26
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
