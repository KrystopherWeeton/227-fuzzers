; ModuleID = '../../third_party/blink/renderer/modules/sanitizer_api/sanitizer_config_impl.cc'
source_filename = "../../third_party/blink/renderer/modules/sanitizer_api/sanitizer_config_impl.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StaticSingleton" = type { %"class.WTF::StaticSingleton<blink::SanitizerConfigImpl>::InstanceStorage" }
%"class.WTF::StaticSingleton<blink::SanitizerConfigImpl>::InstanceStorage" = type { %"struct.blink::SanitizerConfigImpl"* }
%"struct.blink::SanitizerConfigImpl" = type { %"class.WTF::HashSet", %"class.WTF::HashSet", %"class.WTF::HashSet", %"class.WTF::HashMap", %"class.WTF::HashMap", i8, [7 x i8] }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"class.WTF::String"*, i32, i32, i32, [4 x i8] }>
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable.8" }
%"class.WTF::HashTable.8" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::String", %"class.WTF::Vector.1" }
%"class.WTF::Vector.1" = type { %"class.WTF::VectorBuffer.2" }
%"class.WTF::VectorBuffer.2" = type { %"class.WTF::VectorBufferBase.3" }
%"class.WTF::VectorBufferBase.3" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::StaticSingleton.30" = type { %"class.WTF::StaticSingleton<blink::Persistent<blink::SanitizerConfig> >::InstanceStorage" }
%"class.WTF::StaticSingleton<blink::Persistent<blink::SanitizerConfig> >::InstanceStorage" = type { [16 x i8] }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.170", %"class.std::__1::unique_ptr.170", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.181", %"class.std::__1::unique_ptr.187", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.199", %"class.std::__1::unique_ptr.205", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.212", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.37", %"class.std::__1::unique_ptr.41", %"class.std::__1::unique_ptr.47", %"class.std::__1::unique_ptr.53", %"class.std::__1::unique_ptr.59", %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.76", %"class.std::__1::unique_ptr.83", %"class.std::__1::unique_ptr.83", %"class.std::__1::unique_ptr.90", %"class.std::__1::unique_ptr.97", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.111", %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.125", %"class.std::__1::unique_ptr.150", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.41" = type { %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.53" = type { %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.65" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, {}* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.68" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.68" = type { %"struct.std::__1::__atomic_base.69" }
%"struct.std::__1::__atomic_base.69" = type { %"struct.std::__1::__atomic_base.70" }
%"struct.std::__1::__atomic_base.70" = type { %"struct.std::__1::__cxx_atomic_impl.71" }
%"struct.std::__1::__cxx_atomic_impl.71" = type { %"struct.std::__1::__cxx_atomic_base_impl.72" }
%"struct.std::__1::__cxx_atomic_base_impl.72" = type { i64 }
%"class.std::__1::unique_ptr.76" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"class.blink::Worklist.79"* }
%"class.blink::Worklist.79" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.68" }
%"class.std::__1::unique_ptr.83" = type { %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %"class.blink::Worklist.86"* }
%"class.blink::Worklist.86" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.68" }
%"class.std::__1::unique_ptr.90" = type { %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { %"class.blink::Worklist.93"* }
%"class.blink::Worklist.93" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.68" }
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.blink::Worklist.100"* }
%"class.blink::Worklist.100" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.68" }
%"class.std::__1::unique_ptr.104" = type { %"class.std::__1::__compressed_pair.105" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"class.blink::Worklist.107"* }
%"class.blink::Worklist.107" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.68" }
%"class.std::__1::unique_ptr.111" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"class.blink::Worklist.114"* }
%"class.blink::Worklist.114" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.68" }
%"class.std::__1::unique_ptr.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { %"class.blink::Worklist.121"* }
%"class.blink::Worklist.121" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.68" }
%"class.std::__1::unique_ptr.125" = type { %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.128", %"class.std::__1::__compressed_pair.137", %"class.std::__1::__compressed_pair.142", %"class.std::__1::__compressed_pair.144", [4 x i8] }>
%"class.std::__1::unique_ptr.128" = type { %"class.std::__1::__compressed_pair.129" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.130", %"struct.std::__1::__compressed_pair_elem.131" }
%"struct.std::__1::__compressed_pair_elem.130" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.131" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { i64 }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { float }
%"class.std::__1::unique_ptr.150" = type { %"class.std::__1::__compressed_pair.151" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.153", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.153" = type { %"class.std::__1::__compressed_pair.154" }
%"class.std::__1::__compressed_pair.154" = type { %"struct.std::__1::__compressed_pair_elem.155" }
%"struct.std::__1::__compressed_pair_elem.155" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.162" }
%"class.WTF::Vector.162" = type { %"class.WTF::VectorBuffer.163" }
%"class.WTF::VectorBuffer.163" = type { %"class.WTF::VectorBufferBase.164" }
%"class.WTF::VectorBufferBase.164" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.170" = type { %"class.std::__1::__compressed_pair.171" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.178" }
%"class.WTF::VectorBuffer.178" = type { %"class.WTF::VectorBufferBase.179" }
%"class.WTF::VectorBufferBase.179" = type { %"struct.std::__1::pair.180"*, i32, i32 }
%"struct.std::__1::pair.180" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.181" = type { %"class.std::__1::__compressed_pair.182" }
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.183" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.187" = type { %"class.std::__1::__compressed_pair.188" }
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.193" }
%"class.std::__1::unique_ptr.193" = type { %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.79"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.86"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.93"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.100"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.107"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.216" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.216" = type { %"struct.std::__1::__compressed_pair_elem.217" }
%"struct.std::__1::__compressed_pair_elem.217" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.199" = type { %"class.std::__1::__compressed_pair.200" }
%"class.std::__1::__compressed_pair.200" = type { %"struct.std::__1::__compressed_pair_elem.201" }
%"struct.std::__1::__compressed_pair_elem.201" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.205" = type { %"class.std::__1::__compressed_pair.206" }
%"class.std::__1::__compressed_pair.206" = type { %"struct.std::__1::__compressed_pair_elem.207" }
%"struct.std::__1::__compressed_pair_elem.207" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.211 }
%class.scoped_refptr.211 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.212" = type { %"struct.std::__1::__atomic_base.213" }
%"struct.std::__1::__atomic_base.213" = type { %"struct.std::__1::__cxx_atomic_impl.214" }
%"struct.std::__1::__cxx_atomic_impl.214" = type { %"struct.std::__1::__cxx_atomic_base_impl.215" }
%"struct.std::__1::__cxx_atomic_base_impl.215" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.blink::SanitizerConfig" = type { %"class.blink::IDLDictionaryBase", i8, i8, i8, i8, i8, i8, %"class.WTF::Vector", i8, %"class.WTF::Vector.1", %"class.WTF::Vector.1", %"class.WTF::Vector", %"class.WTF::Vector.1" }
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { %"class.WTF::String", %"class.WTF::Vector.1" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"struct.std::__1::pair.221" = type { i8*, %"class.WTF::Vector.1" }
%"class.blink::PersistentBase" = type { %"class.blink::SanitizerConfig"*, %"class.blink::PersistentNodePtr" }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.base::Location" = type { i8*, i8*, i32, i8* }

$_ZN5blink19SanitizerConfigImplD2Ev = comdat any

$_ZN5blink19SanitizerConfigImplC2EOS0_ = comdat any

$_ZN5blink19SanitizerConfigImplC2ERKS0_ = comdat any

$_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj = comdat any

$_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_ = comdat any

$_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE16LookupForWritingERKS1_ = comdat any

$_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E22ReserveCapacityForSizeEj = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E8RehashToEPS6_jSF_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E16LookupForWritingERKS1_ = comdat any

$_ZN3WTF5MoverINS_12KeyValuePairINS_6StringENS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEES4_NS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IS5_EEEELb1EE4MoveEOS6_RS6_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6insertINS_22IdentityHashTranslatorIS8_SD_S4_EERKS1_RKS6_EENS_18HashTableAddResultISE_S6_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6ExpandEPS6_ = comdat any

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

$_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_S1_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6insertINS_17HashMapTranslatorISD_S8_S4_EERKS1_RS5_EENS_18HashTableAddResultISE_S6_EEOT0_OT1_ = comdat any

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS1_EEvOT_ = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv = comdat any

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRPKcEEvOT_ = comdat any

$_ZN3WTF6VectorINSt3__14pairINS_6StringENS0_IS3_Lj0ENS_18PartitionAllocatorEEEEELj0ES4_E14AppendSlowCaseINS2_IPKcS5_EEEEvOT_ = comdat any

$_ZN3WTF6VectorINSt3__14pairINS_6StringENS0_IS3_Lj0ENS_18PartitionAllocatorEEEEELj0ES4_E16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__14pairINS_6StringENS_6VectorIS4_Lj0ES0_EEEEEEmm = comdat any

$_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_15SanitizerConfigELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE0EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv = comdat any

$_ZN5blink10TraceTraitINS_15SanitizerConfigEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = comdat any

@_ZZN5blink12_GLOBAL__N_120GetDefaultConfigImplEvE9s_config_ = internal unnamed_addr global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZN5blink12_GLOBAL__N_120GetDefaultConfigImplEvE9s_config_ = internal global i64 0, align 8
@.str = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@.str.1 = private unnamed_addr constant [39 x i8] c"!static_cast<int>( new_capacity >> 31)\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_6StringENS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEEEEPKcv = private unnamed_addr constant [133 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<WTF::String, WTF::Vector<WTF::String, 0, WTF::PartitionAllocator> >]\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.4 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZZN5blink12_GLOBAL__N_116GetDefaultConfigEvE9s_config_ = internal global %"class.WTF::StaticSingleton.30" zeroinitializer, align 8
@_ZGVZN5blink12_GLOBAL__N_116GetDefaultConfigEvE9s_config_ = internal global i64 0, align 8
@_ZN5blink12_GLOBAL__N_121kDefaultAllowElementsE = internal constant [112 x i8*] [i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.54, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.63, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.67, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.69, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.72, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.74, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.75, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.76, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.77, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.78, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.79, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.80, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.81, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.82, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.83, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.84, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.85, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.86, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.89, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.90, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.91, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.92, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.93, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.94, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.95, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.98, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.99, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.100, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.101, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.102, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.103, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.104, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.105, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.106, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.107, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.108, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.110, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.111, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.114, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.115, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.116, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.117, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.120, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.121, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.122, i32 0, i32 0)], align 16
@_ZN5blink12_GLOBAL__N_123kDefaultAllowAttributesE = internal constant [225 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.123, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.124, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.125, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.126, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.128, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.129, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.130, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.131, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.132, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.133, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.134, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.135, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.137, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.138, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.139, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.140, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.141, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.142, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.144, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.145, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.146, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.147, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.148, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.149, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.150, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.151, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.152, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.153, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.154, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.155, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.156, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.157, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.159, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.160, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.161, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.162, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.163, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.164, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.165, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.166, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.167, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.168, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.170, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.171, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.172, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.173, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.174, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.175, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.176, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.177, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.178, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.179, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.180, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.181, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.182, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.183, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.184, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.185, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.186, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.187, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.188, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.189, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.190, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.191, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.192, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.193, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.194, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.195, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.196, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.197, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.198, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.199, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.200, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.201, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.202, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.203, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.204, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.205, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.206, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.207, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.208, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.209, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.210, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.211, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.212, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.213, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.214, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.215, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.216, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.217, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.218, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.219, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.220, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.221, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.222, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.223, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.224, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.225, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.226, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.227, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.228, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.229, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.230, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.231, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.232, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.233, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.234, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.235, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.236, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.237, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.238, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.239, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.240, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.241, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.242, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.243, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.244, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.245, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.246, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.247, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.248, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.249, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.250, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.251, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.252, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.253, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.254, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.255, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.256, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.257, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.258, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.259, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.260, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.261, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.262, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.263, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.264, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.265, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.266, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.267, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.268, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.269, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.270, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.271, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.272, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.273, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.274, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.275, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.276, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.262, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.263, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.264, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.265, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.266, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.267, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.268, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.269, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.270, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.271, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.272, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.273, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.274, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.275, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.276, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.277, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.278, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.279, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.280, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.281, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.282, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.283, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.284, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.285, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.286, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.287, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.288, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.289, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.290, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.291, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.292, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.293, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.100, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.294, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.295, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.296, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.297, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.298, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.299, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.300, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.301, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.106, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.104, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.302, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.303, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.304, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.305, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.306, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.307, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.308, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.309, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.310, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.311, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.312, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.313, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.314, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.315, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.316, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.317, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.318, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.319, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.320, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.321, i32 0, i32 0)], align 16
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.9 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.10 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@.str.11 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"abbr\00", align 1
@.str.13 = private unnamed_addr constant [8 x i8] c"acronym\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"address\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"area\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"article\00", align 1
@.str.17 = private unnamed_addr constant [6 x i8] c"aside\00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c"audio\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"b\00", align 1
@.str.20 = private unnamed_addr constant [4 x i8] c"bdi\00", align 1
@.str.21 = private unnamed_addr constant [4 x i8] c"bdo\00", align 1
@.str.22 = private unnamed_addr constant [4 x i8] c"big\00", align 1
@.str.23 = private unnamed_addr constant [11 x i8] c"blockquote\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"body\00", align 1
@.str.25 = private unnamed_addr constant [3 x i8] c"br\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"button\00", align 1
@.str.27 = private unnamed_addr constant [7 x i8] c"canvas\00", align 1
@.str.28 = private unnamed_addr constant [8 x i8] c"caption\00", align 1
@.str.29 = private unnamed_addr constant [7 x i8] c"center\00", align 1
@.str.30 = private unnamed_addr constant [5 x i8] c"cite\00", align 1
@.str.31 = private unnamed_addr constant [5 x i8] c"code\00", align 1
@.str.32 = private unnamed_addr constant [4 x i8] c"col\00", align 1
@.str.33 = private unnamed_addr constant [9 x i8] c"colgroup\00", align 1
@.str.34 = private unnamed_addr constant [9 x i8] c"datalist\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"dd\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c"del\00", align 1
@.str.37 = private unnamed_addr constant [8 x i8] c"details\00", align 1
@.str.38 = private unnamed_addr constant [7 x i8] c"dialog\00", align 1
@.str.39 = private unnamed_addr constant [4 x i8] c"dfn\00", align 1
@.str.40 = private unnamed_addr constant [4 x i8] c"dir\00", align 1
@.str.41 = private unnamed_addr constant [4 x i8] c"div\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"dl\00", align 1
@.str.43 = private unnamed_addr constant [3 x i8] c"dt\00", align 1
@.str.44 = private unnamed_addr constant [3 x i8] c"em\00", align 1
@.str.45 = private unnamed_addr constant [9 x i8] c"fieldset\00", align 1
@.str.46 = private unnamed_addr constant [11 x i8] c"figcaption\00", align 1
@.str.47 = private unnamed_addr constant [7 x i8] c"figure\00", align 1
@.str.48 = private unnamed_addr constant [5 x i8] c"font\00", align 1
@.str.49 = private unnamed_addr constant [7 x i8] c"footer\00", align 1
@.str.50 = private unnamed_addr constant [5 x i8] c"form\00", align 1
@.str.51 = private unnamed_addr constant [3 x i8] c"h1\00", align 1
@.str.52 = private unnamed_addr constant [3 x i8] c"h2\00", align 1
@.str.53 = private unnamed_addr constant [3 x i8] c"h3\00", align 1
@.str.54 = private unnamed_addr constant [3 x i8] c"h4\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c"h5\00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"h6\00", align 1
@.str.57 = private unnamed_addr constant [5 x i8] c"head\00", align 1
@.str.58 = private unnamed_addr constant [7 x i8] c"header\00", align 1
@.str.59 = private unnamed_addr constant [7 x i8] c"hgroup\00", align 1
@.str.60 = private unnamed_addr constant [3 x i8] c"hr\00", align 1
@.str.61 = private unnamed_addr constant [5 x i8] c"html\00", align 1
@.str.62 = private unnamed_addr constant [2 x i8] c"i\00", align 1
@.str.63 = private unnamed_addr constant [4 x i8] c"img\00", align 1
@.str.64 = private unnamed_addr constant [6 x i8] c"input\00", align 1
@.str.65 = private unnamed_addr constant [4 x i8] c"ins\00", align 1
@.str.66 = private unnamed_addr constant [4 x i8] c"kbd\00", align 1
@.str.67 = private unnamed_addr constant [7 x i8] c"keygen\00", align 1
@.str.68 = private unnamed_addr constant [6 x i8] c"label\00", align 1
@.str.69 = private unnamed_addr constant [7 x i8] c"legend\00", align 1
@.str.70 = private unnamed_addr constant [3 x i8] c"li\00", align 1
@.str.71 = private unnamed_addr constant [5 x i8] c"link\00", align 1
@.str.72 = private unnamed_addr constant [8 x i8] c"listing\00", align 1
@.str.73 = private unnamed_addr constant [4 x i8] c"map\00", align 1
@.str.74 = private unnamed_addr constant [5 x i8] c"mark\00", align 1
@.str.75 = private unnamed_addr constant [5 x i8] c"menu\00", align 1
@.str.76 = private unnamed_addr constant [5 x i8] c"meta\00", align 1
@.str.77 = private unnamed_addr constant [6 x i8] c"meter\00", align 1
@.str.78 = private unnamed_addr constant [4 x i8] c"nav\00", align 1
@.str.79 = private unnamed_addr constant [5 x i8] c"nobr\00", align 1
@.str.80 = private unnamed_addr constant [3 x i8] c"ol\00", align 1
@.str.81 = private unnamed_addr constant [9 x i8] c"optgroup\00", align 1
@.str.82 = private unnamed_addr constant [7 x i8] c"option\00", align 1
@.str.83 = private unnamed_addr constant [7 x i8] c"output\00", align 1
@.str.84 = private unnamed_addr constant [2 x i8] c"p\00", align 1
@.str.85 = private unnamed_addr constant [8 x i8] c"picture\00", align 1
@.str.86 = private unnamed_addr constant [4 x i8] c"pre\00", align 1
@.str.87 = private unnamed_addr constant [9 x i8] c"progress\00", align 1
@.str.88 = private unnamed_addr constant [2 x i8] c"q\00", align 1
@.str.89 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.90 = private unnamed_addr constant [3 x i8] c"rp\00", align 1
@.str.91 = private unnamed_addr constant [3 x i8] c"rt\00", align 1
@.str.92 = private unnamed_addr constant [4 x i8] c"rtc\00", align 1
@.str.93 = private unnamed_addr constant [5 x i8] c"ruby\00", align 1
@.str.94 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.95 = private unnamed_addr constant [5 x i8] c"samp\00", align 1
@.str.96 = private unnamed_addr constant [8 x i8] c"section\00", align 1
@.str.97 = private unnamed_addr constant [7 x i8] c"select\00", align 1
@.str.98 = private unnamed_addr constant [6 x i8] c"small\00", align 1
@.str.99 = private unnamed_addr constant [7 x i8] c"source\00", align 1
@.str.100 = private unnamed_addr constant [5 x i8] c"span\00", align 1
@.str.101 = private unnamed_addr constant [7 x i8] c"strike\00", align 1
@.str.102 = private unnamed_addr constant [7 x i8] c"strong\00", align 1
@.str.103 = private unnamed_addr constant [4 x i8] c"sub\00", align 1
@.str.104 = private unnamed_addr constant [8 x i8] c"summary\00", align 1
@.str.105 = private unnamed_addr constant [4 x i8] c"sup\00", align 1
@.str.106 = private unnamed_addr constant [6 x i8] c"style\00", align 1
@.str.107 = private unnamed_addr constant [6 x i8] c"table\00", align 1
@.str.108 = private unnamed_addr constant [6 x i8] c"tbody\00", align 1
@.str.109 = private unnamed_addr constant [3 x i8] c"td\00", align 1
@.str.110 = private unnamed_addr constant [9 x i8] c"textarea\00", align 1
@.str.111 = private unnamed_addr constant [6 x i8] c"tfoot\00", align 1
@.str.112 = private unnamed_addr constant [3 x i8] c"th\00", align 1
@.str.113 = private unnamed_addr constant [6 x i8] c"thead\00", align 1
@.str.114 = private unnamed_addr constant [5 x i8] c"time\00", align 1
@.str.115 = private unnamed_addr constant [3 x i8] c"tr\00", align 1
@.str.116 = private unnamed_addr constant [6 x i8] c"track\00", align 1
@.str.117 = private unnamed_addr constant [3 x i8] c"tt\00", align 1
@.str.118 = private unnamed_addr constant [2 x i8] c"u\00", align 1
@.str.119 = private unnamed_addr constant [3 x i8] c"ul\00", align 1
@.str.120 = private unnamed_addr constant [4 x i8] c"var\00", align 1
@.str.121 = private unnamed_addr constant [6 x i8] c"video\00", align 1
@.str.122 = private unnamed_addr constant [4 x i8] c"wbr\00", align 1
@.str.123 = private unnamed_addr constant [7 x i8] c"accept\00", align 1
@.str.124 = private unnamed_addr constant [15 x i8] c"accept-charset\00", align 1
@.str.125 = private unnamed_addr constant [10 x i8] c"accesskey\00", align 1
@.str.126 = private unnamed_addr constant [7 x i8] c"action\00", align 1
@.str.127 = private unnamed_addr constant [6 x i8] c"align\00", align 1
@.str.128 = private unnamed_addr constant [6 x i8] c"alink\00", align 1
@.str.129 = private unnamed_addr constant [6 x i8] c"allow\00", align 1
@.str.130 = private unnamed_addr constant [16 x i8] c"allowfullscreen\00", align 1
@.str.131 = private unnamed_addr constant [4 x i8] c"alt\00", align 1
@.str.132 = private unnamed_addr constant [7 x i8] c"anchor\00", align 1
@.str.133 = private unnamed_addr constant [8 x i8] c"archive\00", align 1
@.str.134 = private unnamed_addr constant [3 x i8] c"as\00", align 1
@.str.135 = private unnamed_addr constant [6 x i8] c"async\00", align 1
@.str.136 = private unnamed_addr constant [15 x i8] c"autocapitalize\00", align 1
@.str.137 = private unnamed_addr constant [13 x i8] c"autocomplete\00", align 1
@.str.138 = private unnamed_addr constant [12 x i8] c"autocorrect\00", align 1
@.str.139 = private unnamed_addr constant [10 x i8] c"autofocus\00", align 1
@.str.140 = private unnamed_addr constant [21 x i8] c"autopictureinpicture\00", align 1
@.str.141 = private unnamed_addr constant [9 x i8] c"autoplay\00", align 1
@.str.142 = private unnamed_addr constant [5 x i8] c"axis\00", align 1
@.str.143 = private unnamed_addr constant [11 x i8] c"background\00", align 1
@.str.144 = private unnamed_addr constant [9 x i8] c"behavior\00", align 1
@.str.145 = private unnamed_addr constant [8 x i8] c"bgcolor\00", align 1
@.str.146 = private unnamed_addr constant [7 x i8] c"border\00", align 1
@.str.147 = private unnamed_addr constant [12 x i8] c"bordercolor\00", align 1
@.str.148 = private unnamed_addr constant [8 x i8] c"capture\00", align 1
@.str.149 = private unnamed_addr constant [12 x i8] c"cellpadding\00", align 1
@.str.150 = private unnamed_addr constant [12 x i8] c"cellspacing\00", align 1
@.str.151 = private unnamed_addr constant [10 x i8] c"challenge\00", align 1
@.str.152 = private unnamed_addr constant [5 x i8] c"char\00", align 1
@.str.153 = private unnamed_addr constant [8 x i8] c"charoff\00", align 1
@.str.154 = private unnamed_addr constant [8 x i8] c"charset\00", align 1
@.str.155 = private unnamed_addr constant [8 x i8] c"checked\00", align 1
@.str.156 = private unnamed_addr constant [6 x i8] c"class\00", align 1
@.str.157 = private unnamed_addr constant [8 x i8] c"classid\00", align 1
@.str.158 = private unnamed_addr constant [6 x i8] c"clear\00", align 1
@.str.159 = private unnamed_addr constant [9 x i8] c"codebase\00", align 1
@.str.160 = private unnamed_addr constant [9 x i8] c"codetype\00", align 1
@.str.161 = private unnamed_addr constant [6 x i8] c"color\00", align 1
@.str.162 = private unnamed_addr constant [5 x i8] c"cols\00", align 1
@.str.163 = private unnamed_addr constant [8 x i8] c"colspan\00", align 1
@.str.164 = private unnamed_addr constant [8 x i8] c"compact\00", align 1
@.str.165 = private unnamed_addr constant [8 x i8] c"content\00", align 1
@.str.166 = private unnamed_addr constant [16 x i8] c"contenteditable\00", align 1
@.str.167 = private unnamed_addr constant [9 x i8] c"controls\00", align 1
@.str.168 = private unnamed_addr constant [13 x i8] c"controlslist\00", align 1
@.str.169 = private unnamed_addr constant [22 x i8] c"conversiondestination\00", align 1
@.str.170 = private unnamed_addr constant [7 x i8] c"coords\00", align 1
@.str.171 = private unnamed_addr constant [12 x i8] c"crossorigin\00", align 1
@.str.172 = private unnamed_addr constant [4 x i8] c"csp\00", align 1
@.str.173 = private unnamed_addr constant [5 x i8] c"data\00", align 1
@.str.174 = private unnamed_addr constant [9 x i8] c"datetime\00", align 1
@.str.175 = private unnamed_addr constant [8 x i8] c"declare\00", align 1
@.str.176 = private unnamed_addr constant [9 x i8] c"decoding\00", align 1
@.str.177 = private unnamed_addr constant [8 x i8] c"default\00", align 1
@.str.178 = private unnamed_addr constant [6 x i8] c"defer\00", align 1
@.str.179 = private unnamed_addr constant [10 x i8] c"direction\00", align 1
@.str.180 = private unnamed_addr constant [8 x i8] c"dirname\00", align 1
@.str.181 = private unnamed_addr constant [9 x i8] c"disabled\00", align 1
@.str.182 = private unnamed_addr constant [24 x i8] c"disablepictureinpicture\00", align 1
@.str.183 = private unnamed_addr constant [22 x i8] c"disableremoteplayback\00", align 1
@.str.184 = private unnamed_addr constant [23 x i8] c"disallowdocumentaccess\00", align 1
@.str.185 = private unnamed_addr constant [9 x i8] c"download\00", align 1
@.str.186 = private unnamed_addr constant [10 x i8] c"draggable\00", align 1
@.str.187 = private unnamed_addr constant [14 x i8] c"elementtiming\00", align 1
@.str.188 = private unnamed_addr constant [8 x i8] c"enctype\00", align 1
@.str.189 = private unnamed_addr constant [4 x i8] c"end\00", align 1
@.str.190 = private unnamed_addr constant [13 x i8] c"enterkeyhint\00", align 1
@.str.191 = private unnamed_addr constant [6 x i8] c"event\00", align 1
@.str.192 = private unnamed_addr constant [12 x i8] c"exportparts\00", align 1
@.str.193 = private unnamed_addr constant [5 x i8] c"face\00", align 1
@.str.194 = private unnamed_addr constant [4 x i8] c"for\00", align 1
@.str.195 = private unnamed_addr constant [11 x i8] c"formaction\00", align 1
@.str.196 = private unnamed_addr constant [12 x i8] c"formenctype\00", align 1
@.str.197 = private unnamed_addr constant [11 x i8] c"formmethod\00", align 1
@.str.198 = private unnamed_addr constant [15 x i8] c"formnovalidate\00", align 1
@.str.199 = private unnamed_addr constant [11 x i8] c"formtarget\00", align 1
@.str.200 = private unnamed_addr constant [6 x i8] c"frame\00", align 1
@.str.201 = private unnamed_addr constant [12 x i8] c"frameborder\00", align 1
@.str.202 = private unnamed_addr constant [8 x i8] c"headers\00", align 1
@.str.203 = private unnamed_addr constant [7 x i8] c"height\00", align 1
@.str.204 = private unnamed_addr constant [7 x i8] c"hidden\00", align 1
@.str.205 = private unnamed_addr constant [5 x i8] c"high\00", align 1
@.str.206 = private unnamed_addr constant [5 x i8] c"href\00", align 1
@.str.207 = private unnamed_addr constant [9 x i8] c"hreflang\00", align 1
@.str.208 = private unnamed_addr constant [14 x i8] c"hreftranslate\00", align 1
@.str.209 = private unnamed_addr constant [7 x i8] c"hspace\00", align 1
@.str.210 = private unnamed_addr constant [11 x i8] c"http-equiv\00", align 1
@.str.211 = private unnamed_addr constant [3 x i8] c"id\00", align 1
@.str.212 = private unnamed_addr constant [11 x i8] c"imagesizes\00", align 1
@.str.213 = private unnamed_addr constant [12 x i8] c"imagesrcset\00", align 1
@.str.214 = private unnamed_addr constant [11 x i8] c"importance\00", align 1
@.str.215 = private unnamed_addr constant [15 x i8] c"impressiondata\00", align 1
@.str.216 = private unnamed_addr constant [17 x i8] c"impressionexpiry\00", align 1
@.str.217 = private unnamed_addr constant [12 x i8] c"incremental\00", align 1
@.str.218 = private unnamed_addr constant [6 x i8] c"inert\00", align 1
@.str.219 = private unnamed_addr constant [10 x i8] c"inputmode\00", align 1
@.str.220 = private unnamed_addr constant [10 x i8] c"integrity\00", align 1
@.str.221 = private unnamed_addr constant [10 x i8] c"invisible\00", align 1
@.str.222 = private unnamed_addr constant [3 x i8] c"is\00", align 1
@.str.223 = private unnamed_addr constant [6 x i8] c"ismap\00", align 1
@.str.224 = private unnamed_addr constant [8 x i8] c"keytype\00", align 1
@.str.225 = private unnamed_addr constant [5 x i8] c"kind\00", align 1
@.str.226 = private unnamed_addr constant [5 x i8] c"lang\00", align 1
@.str.227 = private unnamed_addr constant [9 x i8] c"language\00", align 1
@.str.228 = private unnamed_addr constant [12 x i8] c"latencyhint\00", align 1
@.str.229 = private unnamed_addr constant [11 x i8] c"leftmargin\00", align 1
@.str.230 = private unnamed_addr constant [5 x i8] c"list\00", align 1
@.str.231 = private unnamed_addr constant [8 x i8] c"loading\00", align 1
@.str.232 = private unnamed_addr constant [9 x i8] c"longdesc\00", align 1
@.str.233 = private unnamed_addr constant [5 x i8] c"loop\00", align 1
@.str.234 = private unnamed_addr constant [4 x i8] c"low\00", align 1
@.str.235 = private unnamed_addr constant [7 x i8] c"lowsrc\00", align 1
@.str.236 = private unnamed_addr constant [9 x i8] c"manifest\00", align 1
@.str.237 = private unnamed_addr constant [13 x i8] c"marginheight\00", align 1
@.str.238 = private unnamed_addr constant [12 x i8] c"marginwidth\00", align 1
@.str.239 = private unnamed_addr constant [4 x i8] c"max\00", align 1
@.str.240 = private unnamed_addr constant [10 x i8] c"maxlength\00", align 1
@.str.241 = private unnamed_addr constant [10 x i8] c"mayscript\00", align 1
@.str.242 = private unnamed_addr constant [6 x i8] c"media\00", align 1
@.str.243 = private unnamed_addr constant [7 x i8] c"method\00", align 1
@.str.244 = private unnamed_addr constant [4 x i8] c"min\00", align 1
@.str.245 = private unnamed_addr constant [10 x i8] c"minlength\00", align 1
@.str.246 = private unnamed_addr constant [9 x i8] c"multiple\00", align 1
@.str.247 = private unnamed_addr constant [6 x i8] c"muted\00", align 1
@.str.248 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.249 = private unnamed_addr constant [7 x i8] c"nohref\00", align 1
@.str.250 = private unnamed_addr constant [9 x i8] c"nomodule\00", align 1
@.str.251 = private unnamed_addr constant [6 x i8] c"nonce\00", align 1
@.str.252 = private unnamed_addr constant [9 x i8] c"noresize\00", align 1
@.str.253 = private unnamed_addr constant [8 x i8] c"noshade\00", align 1
@.str.254 = private unnamed_addr constant [11 x i8] c"novalidate\00", align 1
@.str.255 = private unnamed_addr constant [7 x i8] c"nowrap\00", align 1
@.str.256 = private unnamed_addr constant [7 x i8] c"object\00", align 1
@.str.257 = private unnamed_addr constant [5 x i8] c"open\00", align 1
@.str.258 = private unnamed_addr constant [8 x i8] c"optimum\00", align 1
@.str.259 = private unnamed_addr constant [5 x i8] c"part\00", align 1
@.str.260 = private unnamed_addr constant [8 x i8] c"pattern\00", align 1
@.str.261 = private unnamed_addr constant [5 x i8] c"ping\00", align 1
@.str.262 = private unnamed_addr constant [12 x i8] c"placeholder\00", align 1
@.str.263 = private unnamed_addr constant [12 x i8] c"playsinline\00", align 1
@.str.264 = private unnamed_addr constant [7 x i8] c"policy\00", align 1
@.str.265 = private unnamed_addr constant [7 x i8] c"poster\00", align 1
@.str.266 = private unnamed_addr constant [8 x i8] c"preload\00", align 1
@.str.267 = private unnamed_addr constant [7 x i8] c"pseudo\00", align 1
@.str.268 = private unnamed_addr constant [9 x i8] c"readonly\00", align 1
@.str.269 = private unnamed_addr constant [15 x i8] c"referrerpolicy\00", align 1
@.str.270 = private unnamed_addr constant [4 x i8] c"rel\00", align 1
@.str.271 = private unnamed_addr constant [16 x i8] c"reportingorigin\00", align 1
@.str.272 = private unnamed_addr constant [9 x i8] c"required\00", align 1
@.str.273 = private unnamed_addr constant [10 x i8] c"resources\00", align 1
@.str.274 = private unnamed_addr constant [4 x i8] c"rev\00", align 1
@.str.275 = private unnamed_addr constant [9 x i8] c"reversed\00", align 1
@.str.276 = private unnamed_addr constant [5 x i8] c"role\00", align 1
@.str.277 = private unnamed_addr constant [5 x i8] c"rows\00", align 1
@.str.278 = private unnamed_addr constant [8 x i8] c"rowspan\00", align 1
@.str.279 = private unnamed_addr constant [6 x i8] c"rules\00", align 1
@.str.280 = private unnamed_addr constant [8 x i8] c"sandbox\00", align 1
@.str.281 = private unnamed_addr constant [7 x i8] c"scheme\00", align 1
@.str.282 = private unnamed_addr constant [6 x i8] c"scope\00", align 1
@.str.283 = private unnamed_addr constant [7 x i8] c"scopes\00", align 1
@.str.284 = private unnamed_addr constant [13 x i8] c"scrollamount\00", align 1
@.str.285 = private unnamed_addr constant [12 x i8] c"scrolldelay\00", align 1
@.str.286 = private unnamed_addr constant [10 x i8] c"scrolling\00", align 1
@.str.287 = private unnamed_addr constant [9 x i8] c"selected\00", align 1
@.str.288 = private unnamed_addr constant [11 x i8] c"shadowroot\00", align 1
@.str.289 = private unnamed_addr constant [25 x i8] c"shadowrootdelegatesfocus\00", align 1
@.str.290 = private unnamed_addr constant [6 x i8] c"shape\00", align 1
@.str.291 = private unnamed_addr constant [5 x i8] c"size\00", align 1
@.str.292 = private unnamed_addr constant [6 x i8] c"sizes\00", align 1
@.str.293 = private unnamed_addr constant [5 x i8] c"slot\00", align 1
@.str.294 = private unnamed_addr constant [11 x i8] c"spellcheck\00", align 1
@.str.295 = private unnamed_addr constant [4 x i8] c"src\00", align 1
@.str.296 = private unnamed_addr constant [7 x i8] c"srcdoc\00", align 1
@.str.297 = private unnamed_addr constant [8 x i8] c"srclang\00", align 1
@.str.298 = private unnamed_addr constant [7 x i8] c"srcset\00", align 1
@.str.299 = private unnamed_addr constant [8 x i8] c"standby\00", align 1
@.str.300 = private unnamed_addr constant [6 x i8] c"start\00", align 1
@.str.301 = private unnamed_addr constant [5 x i8] c"step\00", align 1
@.str.302 = private unnamed_addr constant [9 x i8] c"tabindex\00", align 1
@.str.303 = private unnamed_addr constant [7 x i8] c"target\00", align 1
@.str.304 = private unnamed_addr constant [5 x i8] c"text\00", align 1
@.str.305 = private unnamed_addr constant [6 x i8] c"title\00", align 1
@.str.306 = private unnamed_addr constant [10 x i8] c"topmargin\00", align 1
@.str.307 = private unnamed_addr constant [10 x i8] c"translate\00", align 1
@.str.308 = private unnamed_addr constant [10 x i8] c"truespeed\00", align 1
@.str.309 = private unnamed_addr constant [11 x i8] c"trusttoken\00", align 1
@.str.310 = private unnamed_addr constant [5 x i8] c"type\00", align 1
@.str.311 = private unnamed_addr constant [7 x i8] c"usemap\00", align 1
@.str.312 = private unnamed_addr constant [7 x i8] c"valign\00", align 1
@.str.313 = private unnamed_addr constant [6 x i8] c"value\00", align 1
@.str.314 = private unnamed_addr constant [10 x i8] c"valuetype\00", align 1
@.str.315 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.316 = private unnamed_addr constant [22 x i8] c"virtualkeyboardpolicy\00", align 1
@.str.317 = private unnamed_addr constant [6 x i8] c"vlink\00", align 1
@.str.318 = private unnamed_addr constant [7 x i8] c"vspace\00", align 1
@.str.319 = private unnamed_addr constant [16 x i8] c"webkitdirectory\00", align 1
@.str.320 = private unnamed_addr constant [6 x i8] c"width\00", align 1
@.str.321 = private unnamed_addr constant [5 x i8] c"wrap\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__14pairINS_6StringENS_6VectorIS3_Lj0ENS_18PartitionAllocatorEEEEEEEPKcv = private unnamed_addr constant [130 x i8] c"const char *WTF::GetStringWithTypeName() [T = std::__1::pair<WTF::String, WTF::Vector<WTF::String, 0, WTF::PartitionAllocator> >]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19SanitizerConfigImpl4FromEPKNS_15SanitizerConfigE(%"struct.blink::SanitizerConfigImpl"* noalias sret, %"class.blink::SanitizerConfig"* readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"class.WTF::String", align 8
  %5 = alloca %"class.WTF::String", align 8
  %6 = alloca %"struct.blink::SanitizerConfigImpl", align 8
  %7 = alloca %"struct.blink::SanitizerConfigImpl", align 8
  %8 = alloca %"struct.blink::SanitizerConfigImpl", align 8
  %9 = icmp eq %"class.blink::SanitizerConfig"* %1, null
  br i1 %9, label %10, label %22

10:                                               ; preds = %2
  %11 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink12_GLOBAL__N_120GetDefaultConfigImplEvE9s_config_ to i8*) acquire, align 8, !noalias !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %20, !prof !5

13:                                               ; preds = %10
  %14 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink12_GLOBAL__N_120GetDefaultConfigImplEvE9s_config_) #11
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %13
  %17 = tail call i8* @_Znwm(i64 128) #12
  %18 = bitcast i8* %17 to %"struct.blink::SanitizerConfigImpl"*
  %19 = tail call fastcc %"class.blink::SanitizerConfig"* @_ZN5blink12_GLOBAL__N_116GetDefaultConfigEv() #11
  tail call void @_ZN5blink19SanitizerConfigImpl4FromEPKNS_15SanitizerConfigE(%"struct.blink::SanitizerConfigImpl"* nonnull sret %18, %"class.blink::SanitizerConfig"* %19) #11
  store i8* %17, i8** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink12_GLOBAL__N_120GetDefaultConfigImplEvE9s_config_ to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink12_GLOBAL__N_120GetDefaultConfigImplEvE9s_config_) #11
  br label %20

20:                                               ; preds = %10, %13, %16
  %21 = load %"struct.blink::SanitizerConfigImpl"*, %"struct.blink::SanitizerConfigImpl"** getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink12_GLOBAL__N_120GetDefaultConfigImplEvE9s_config_, i64 0, i32 0, i32 0), align 8, !noalias !2
  tail call void @_ZN5blink19SanitizerConfigImplC2ERKS0_(%"struct.blink::SanitizerConfigImpl"* %0, %"struct.blink::SanitizerConfigImpl"* dereferenceable(128) %21) #11
  br label %238

22:                                               ; preds = %2
  %23 = bitcast %"struct.blink::SanitizerConfigImpl"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %23) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 128, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 0, i64 20, i1 false) #11
  %24 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %6, i64 0, i32 1
  %25 = bitcast %"class.WTF::HashSet"* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 20, i1 false) #11
  %26 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %6, i64 0, i32 2
  %27 = bitcast %"class.WTF::HashSet"* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 20, i1 false) #11
  %28 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %6, i64 0, i32 3
  %29 = bitcast %"class.WTF::HashMap"* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 20, i1 false) #11
  %30 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %6, i64 0, i32 4
  %31 = bitcast %"class.WTF::HashMap"* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 20, i1 false) #11
  %32 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %1, i64 0, i32 2
  %33 = load i8, i8* %32, align 1, !range !6
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %22
  %36 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %1, i64 0, i32 8
  %37 = load i8, i8* %36, align 8, !range !6
  br label %38

38:                                               ; preds = %22, %35
  %39 = phi i8 [ 0, %22 ], [ %37, %35 ]
  %40 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %6, i64 0, i32 5
  store i8 %39, i8* %40, align 8
  %41 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %1, i64 0, i32 6
  %42 = load i8, i8* %41, align 1, !range !6
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %78, label %44

44:                                               ; preds = %38
  %45 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %1, i64 0, i32 12, i32 0, i32 0, i32 0
  %46 = load %"class.WTF::String"*, %"class.WTF::String"** %45, align 8
  %47 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %1, i64 0, i32 12, i32 0, i32 0, i32 2
  %48 = load i32, i32* %47, align 4
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %46, i64 %49
  %51 = icmp eq i32 %48, 0
  br i1 %51, label %78, label %52

52:                                               ; preds = %44
  %53 = bitcast %"class.WTF::String"* %5 to i8*
  %54 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  %55 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %26, i64 0, i32 0
  br label %56

56:                                               ; preds = %75, %52
  %57 = phi %"class.WTF::String"* [ %46, %52 ], [ %76, %75 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %53) #11
  %58 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String10UpperASCIIEv(%"class.WTF::String"* %57) #11
  store %"class.WTF::StringImpl"* %58, %"class.WTF::StringImpl"** %54, align 8
  %59 = call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_S1_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %55, %"class.WTF::String"* nonnull dereferenceable(8) %5, %"class.WTF::String"* nonnull dereferenceable(8) %5) #11
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %75, label %62

62:                                               ; preds = %56
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %68 = load i32, i32* %67, align 4
  br i1 %66, label %69, label %71

69:                                               ; preds = %62
  %70 = add i32 %68, -1
  store i32 %70, i32* %67, align 4
  br label %71

71:                                               ; preds = %69, %62
  %72 = phi i32 [ %70, %69 ], [ %68, %62 ]
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %71
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #11
  br label %75

75:                                               ; preds = %74, %71, %56
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %53) #11
  %76 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %57, i64 1
  %77 = icmp eq %"class.WTF::String"* %76, %50
  br i1 %77, label %78, label %56

78:                                               ; preds = %75, %38, %44
  %79 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %1, i64 0, i32 4
  %80 = load i8, i8* %79, align 1, !range !6
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %116, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %1, i64 0, i32 10, i32 0, i32 0, i32 0
  %84 = load %"class.WTF::String"*, %"class.WTF::String"** %83, align 8
  %85 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %1, i64 0, i32 10, i32 0, i32 0, i32 2
  %86 = load i32, i32* %85, align 4
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %84, i64 %87
  %89 = icmp eq i32 %86, 0
  br i1 %89, label %116, label %90

90:                                               ; preds = %82
  %91 = bitcast %"class.WTF::String"* %4 to i8*
  %92 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %93 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %24, i64 0, i32 0
  br label %94

94:                                               ; preds = %113, %90
  %95 = phi %"class.WTF::String"* [ %84, %90 ], [ %114, %113 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %91) #11
  %96 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String10UpperASCIIEv(%"class.WTF::String"* %95) #11
  store %"class.WTF::StringImpl"* %96, %"class.WTF::StringImpl"** %92, align 8
  %97 = call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_S1_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %93, %"class.WTF::String"* nonnull dereferenceable(8) %4, %"class.WTF::String"* nonnull dereferenceable(8) %4) #11
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %92, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %113, label %100

100:                                              ; preds = %94
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  br i1 %104, label %107, label %109

107:                                              ; preds = %100
  %108 = add i32 %106, -1
  store i32 %108, i32* %105, align 4
  br label %109

109:                                              ; preds = %107, %100
  %110 = phi i32 [ %108, %107 ], [ %106, %100 ]
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %98) #11
  br label %113

113:                                              ; preds = %112, %109, %94
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %91) #11
  %114 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %95, i64 1
  %115 = icmp eq %"class.WTF::String"* %114, %88
  br i1 %115, label %116, label %94

116:                                              ; preds = %113, %78, %82
  %117 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %1, i64 0, i32 3
  %118 = load i8, i8* %117, align 2, !range !6
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %154, label %120

120:                                              ; preds = %116
  %121 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %1, i64 0, i32 9, i32 0, i32 0, i32 0
  %122 = load %"class.WTF::String"*, %"class.WTF::String"** %121, align 8
  %123 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %1, i64 0, i32 9, i32 0, i32 0, i32 2
  %124 = load i32, i32* %123, align 4
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %122, i64 %125
  %127 = icmp eq i32 %124, 0
  br i1 %127, label %189, label %128

128:                                              ; preds = %120
  %129 = bitcast %"class.WTF::String"* %3 to i8*
  %130 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %131 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %6, i64 0, i32 0, i32 0
  br label %132

132:                                              ; preds = %151, %128
  %133 = phi %"class.WTF::String"* [ %122, %128 ], [ %152, %151 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %129) #11
  %134 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String10UpperASCIIEv(%"class.WTF::String"* %133) #11
  store %"class.WTF::StringImpl"* %134, %"class.WTF::StringImpl"** %130, align 8
  %135 = call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_S1_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* nonnull %131, %"class.WTF::String"* nonnull dereferenceable(8) %3, %"class.WTF::String"* nonnull dereferenceable(8) %3) #11
  %136 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %130, align 8
  %137 = icmp eq %"class.WTF::StringImpl"* %136, null
  br i1 %137, label %151, label %138

138:                                              ; preds = %132
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %136, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %140 = load atomic i32, i32* %139 monotonic, align 4
  %141 = and i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %136, i64 0, i32 0
  %144 = load i32, i32* %143, align 4
  br i1 %142, label %145, label %147

145:                                              ; preds = %138
  %146 = add i32 %144, -1
  store i32 %146, i32* %143, align 4
  br label %147

147:                                              ; preds = %145, %138
  %148 = phi i32 [ %146, %145 ], [ %144, %138 ]
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %150, label %151

150:                                              ; preds = %147
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %136) #11
  br label %151

151:                                              ; preds = %150, %147, %132
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %129) #11
  %152 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %133, i64 1
  %153 = icmp eq %"class.WTF::String"* %152, %126
  br i1 %153, label %189, label %132

154:                                              ; preds = %116
  %155 = bitcast %"struct.blink::SanitizerConfigImpl"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %155) #11
  %156 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink12_GLOBAL__N_120GetDefaultConfigImplEvE9s_config_ to i8*) acquire, align 8, !noalias !7
  %157 = icmp eq i8 %156, 0
  br i1 %157, label %158, label %165, !prof !5

158:                                              ; preds = %154
  %159 = call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink12_GLOBAL__N_120GetDefaultConfigImplEvE9s_config_) #11
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %165, label %161

161:                                              ; preds = %158
  %162 = call i8* @_Znwm(i64 128) #12
  %163 = bitcast i8* %162 to %"struct.blink::SanitizerConfigImpl"*
  %164 = call fastcc %"class.blink::SanitizerConfig"* @_ZN5blink12_GLOBAL__N_116GetDefaultConfigEv() #11
  call void @_ZN5blink19SanitizerConfigImpl4FromEPKNS_15SanitizerConfigE(%"struct.blink::SanitizerConfigImpl"* nonnull sret %163, %"class.blink::SanitizerConfig"* %164) #11
  store i8* %162, i8** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink12_GLOBAL__N_120GetDefaultConfigImplEvE9s_config_ to i8**), align 8
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink12_GLOBAL__N_120GetDefaultConfigImplEvE9s_config_) #11
  br label %165

165:                                              ; preds = %154, %158, %161
  %166 = load %"struct.blink::SanitizerConfigImpl"*, %"struct.blink::SanitizerConfigImpl"** getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink12_GLOBAL__N_120GetDefaultConfigImplEvE9s_config_, i64 0, i32 0, i32 0), align 8, !noalias !7
  call void @_ZN5blink19SanitizerConfigImplC2ERKS0_(%"struct.blink::SanitizerConfigImpl"* nonnull %7, %"struct.blink::SanitizerConfigImpl"* dereferenceable(128) %166) #11
  %167 = bitcast %"struct.blink::SanitizerConfigImpl"* %7 to i64*
  %168 = load i64, i64* %167, align 8
  %169 = bitcast %"struct.blink::SanitizerConfigImpl"* %6 to i64*
  %170 = load i64, i64* %169, align 8
  store atomic i64 %170, i64* %167 monotonic, align 8
  store atomic i64 %168, i64* %169 monotonic, align 8
  %171 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %6, i64 0, i32 0, i32 0, i32 1
  %172 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %7, i64 0, i32 0, i32 0, i32 1
  %173 = load i32, i32* %171, align 8
  %174 = load i32, i32* %172, align 8
  store i32 %174, i32* %171, align 8
  store i32 %173, i32* %172, align 8
  %175 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %6, i64 0, i32 0, i32 0, i32 2
  %176 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %7, i64 0, i32 0, i32 0, i32 2
  %177 = load i32, i32* %175, align 4
  %178 = load i32, i32* %176, align 4
  store i32 %178, i32* %175, align 4
  store i32 %177, i32* %176, align 4
  %179 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %6, i64 0, i32 0, i32 0, i32 3
  %180 = load i32, i32* %179, align 8
  %181 = and i32 %180, 2147483647
  %182 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %7, i64 0, i32 0, i32 0, i32 3
  %183 = load i32, i32* %182, align 8
  %184 = and i32 %183, 2147483647
  %185 = and i32 %180, -2147483648
  %186 = or i32 %184, %185
  store i32 %186, i32* %179, align 8
  %187 = and i32 %183, -2147483648
  %188 = or i32 %187, %181
  store i32 %188, i32* %182, align 8
  call void @_ZN5blink19SanitizerConfigImplD2Ev(%"struct.blink::SanitizerConfigImpl"* nonnull %7) #11
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %155) #11
  br label %189

189:                                              ; preds = %151, %120, %165
  %190 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %1, i64 0, i32 5
  %191 = load i8, i8* %190, align 4, !range !6
  %192 = icmp eq i8 %191, 0
  br i1 %192, label %195, label %193

193:                                              ; preds = %189
  %194 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %1, i64 0, i32 11
  call fastcc void @_ZN5blink12_GLOBAL__N_113AttrFormatterERN3WTF7HashMapINS1_6StringENS1_6VectorIS3_Lj0ENS1_18PartitionAllocatorEEENS1_10StringHashENS1_10HashTraitsIS3_EENS8_IS6_EES5_EERKNS4_INSt3__14pairIS3_S6_EELj0ES5_EE(%"class.WTF::HashMap"* dereferenceable(24) %30, %"class.WTF::Vector"* dereferenceable(16) %194)
  br label %195

195:                                              ; preds = %189, %193
  %196 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %1, i64 0, i32 1
  %197 = load i8, i8* %196, align 8, !range !6
  %198 = icmp eq i8 %197, 0
  br i1 %198, label %201, label %199

199:                                              ; preds = %195
  %200 = getelementptr inbounds %"class.blink::SanitizerConfig", %"class.blink::SanitizerConfig"* %1, i64 0, i32 7
  call fastcc void @_ZN5blink12_GLOBAL__N_113AttrFormatterERN3WTF7HashMapINS1_6StringENS1_6VectorIS3_Lj0ENS1_18PartitionAllocatorEEENS1_10StringHashENS1_10HashTraitsIS3_EENS8_IS6_EES5_EERKNS4_INSt3__14pairIS3_S6_EELj0ES5_EE(%"class.WTF::HashMap"* dereferenceable(24) %28, %"class.WTF::Vector"* dereferenceable(16) %200)
  br label %237

201:                                              ; preds = %195
  %202 = bitcast %"struct.blink::SanitizerConfigImpl"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %202) #11
  %203 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink12_GLOBAL__N_120GetDefaultConfigImplEvE9s_config_ to i8*) acquire, align 8, !noalias !10
  %204 = icmp eq i8 %203, 0
  br i1 %204, label %205, label %212, !prof !5

205:                                              ; preds = %201
  %206 = call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink12_GLOBAL__N_120GetDefaultConfigImplEvE9s_config_) #11
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %212, label %208

208:                                              ; preds = %205
  %209 = call i8* @_Znwm(i64 128) #12
  %210 = bitcast i8* %209 to %"struct.blink::SanitizerConfigImpl"*
  %211 = call fastcc %"class.blink::SanitizerConfig"* @_ZN5blink12_GLOBAL__N_116GetDefaultConfigEv() #11
  call void @_ZN5blink19SanitizerConfigImpl4FromEPKNS_15SanitizerConfigE(%"struct.blink::SanitizerConfigImpl"* nonnull sret %210, %"class.blink::SanitizerConfig"* %211) #11
  store i8* %209, i8** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink12_GLOBAL__N_120GetDefaultConfigImplEvE9s_config_ to i8**), align 8
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink12_GLOBAL__N_120GetDefaultConfigImplEvE9s_config_) #11
  br label %212

212:                                              ; preds = %201, %205, %208
  %213 = load %"struct.blink::SanitizerConfigImpl"*, %"struct.blink::SanitizerConfigImpl"** getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink12_GLOBAL__N_120GetDefaultConfigImplEvE9s_config_, i64 0, i32 0, i32 0), align 8, !noalias !10
  call void @_ZN5blink19SanitizerConfigImplC2ERKS0_(%"struct.blink::SanitizerConfigImpl"* nonnull %8, %"struct.blink::SanitizerConfigImpl"* dereferenceable(128) %213) #11
  %214 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %8, i64 0, i32 3
  %215 = bitcast %"class.WTF::HashMap"* %214 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = bitcast %"class.WTF::HashMap"* %28 to i64*
  %218 = load i64, i64* %217, align 8
  store atomic i64 %218, i64* %215 monotonic, align 8
  store atomic i64 %216, i64* %217 monotonic, align 8
  %219 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %6, i64 0, i32 3, i32 0, i32 1
  %220 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %8, i64 0, i32 3, i32 0, i32 1
  %221 = load i32, i32* %219, align 8
  %222 = load i32, i32* %220, align 8
  store i32 %222, i32* %219, align 8
  store i32 %221, i32* %220, align 8
  %223 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %6, i64 0, i32 3, i32 0, i32 2
  %224 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %8, i64 0, i32 3, i32 0, i32 2
  %225 = load i32, i32* %223, align 4
  %226 = load i32, i32* %224, align 4
  store i32 %226, i32* %223, align 4
  store i32 %225, i32* %224, align 4
  %227 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %6, i64 0, i32 3, i32 0, i32 3
  %228 = load i32, i32* %227, align 8
  %229 = and i32 %228, 2147483647
  %230 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %8, i64 0, i32 3, i32 0, i32 3
  %231 = load i32, i32* %230, align 8
  %232 = and i32 %231, 2147483647
  %233 = and i32 %228, -2147483648
  %234 = or i32 %232, %233
  store i32 %234, i32* %227, align 8
  %235 = and i32 %231, -2147483648
  %236 = or i32 %235, %229
  store i32 %236, i32* %230, align 8
  call void @_ZN5blink19SanitizerConfigImplD2Ev(%"struct.blink::SanitizerConfigImpl"* nonnull %8) #11
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %202) #11
  br label %237

237:                                              ; preds = %212, %199
  call void @_ZN5blink19SanitizerConfigImplC2EOS0_(%"struct.blink::SanitizerConfigImpl"* %0, %"struct.blink::SanitizerConfigImpl"* nonnull dereferenceable(128) %6)
  call void @_ZN5blink19SanitizerConfigImplD2Ev(%"struct.blink::SanitizerConfigImpl"* nonnull %6) #11
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %23) #11
  br label %238

238:                                              ; preds = %237, %20
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink19SanitizerConfigImplD2Ev(%"struct.blink::SanitizerConfigImpl"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 4, i32 0, i32 0
  %3 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %2, align 8
  %4 = icmp eq %"struct.WTF::KeyValuePair"* %3, null
  br i1 %4, label %80, label %5, !prof !13

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 4, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %78, label %9

9:                                                ; preds = %5
  %10 = zext i32 %7 to i64
  br label %11

11:                                               ; preds = %75, %9
  %12 = phi i64 [ 0, %9 ], [ %76, %75 ]
  %13 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %3, i64 %12
  %14 = bitcast %"struct.WTF::KeyValuePair"* %13 to i8**
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %15, inttoptr (i64 -1 to i8*)
  br i1 %16, label %75, label %17

17:                                               ; preds = %11
  %18 = bitcast i8* %15 to %"class.WTF::StringImpl"*
  %19 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %3, i64 %12, i32 1
  %20 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %19, i64 0, i32 0, i32 0, i32 0
  %21 = load %"class.WTF::String"*, %"class.WTF::String"** %20, align 8
  %22 = icmp eq %"class.WTF::String"* %21, null
  br i1 %22, label %59, label %23, !prof !13

23:                                               ; preds = %17
  %24 = bitcast %"class.WTF::String"* %21 to i8*
  %25 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %3, i64 %12, i32 1, i32 0, i32 0, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %55, label %28, !prof !14

28:                                               ; preds = %23
  %29 = zext i32 %26 to i64
  %30 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %21, i64 %29
  br label %31

31:                                               ; preds = %49, %28
  %32 = phi %"class.WTF::String"* [ %50, %49 ], [ %21, %28 ]
  %33 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 0, i32 0, i32 0
  %34 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %34, null
  br i1 %35, label %49, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  br i1 %40, label %43, label %45

43:                                               ; preds = %36
  %44 = add i32 %42, -1
  store i32 %44, i32* %41, align 4
  br label %45

45:                                               ; preds = %43, %36
  %46 = phi i32 [ %44, %43 ], [ %42, %36 ]
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %45
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %34) #11
  br label %49

49:                                               ; preds = %48, %45, %31
  %50 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 1
  %51 = icmp eq %"class.WTF::String"* %50, %30
  br i1 %51, label %52, label %31

52:                                               ; preds = %49
  store i32 0, i32* %25, align 4
  %53 = bitcast %"class.WTF::Vector.1"* %19 to i8**
  %54 = load i8*, i8** %53, align 8
  br label %55

55:                                               ; preds = %52, %23
  %56 = phi i8* [ %54, %52 ], [ %24, %23 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %56) #11
  store %"class.WTF::String"* null, %"class.WTF::String"** %20, align 8
  %57 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %13, i64 0, i32 0, i32 0, i32 0
  %58 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %57, align 8
  br label %59

59:                                               ; preds = %55, %17
  %60 = phi %"class.WTF::StringImpl"* [ %58, %55 ], [ %18, %17 ]
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %75, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %68 = load i32, i32* %67, align 4
  br i1 %66, label %69, label %71

69:                                               ; preds = %62
  %70 = add i32 %68, -1
  store i32 %70, i32* %67, align 4
  br label %71

71:                                               ; preds = %69, %62
  %72 = phi i32 [ %70, %69 ], [ %68, %62 ]
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %71
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #11
  br label %75

75:                                               ; preds = %74, %71, %59, %11
  %76 = add nuw nsw i64 %12, 1
  %77 = icmp eq i64 %76, %10
  br i1 %77, label %78, label %11

78:                                               ; preds = %75, %5
  %79 = bitcast %"struct.WTF::KeyValuePair"* %3 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %79) #11
  store %"struct.WTF::KeyValuePair"* null, %"struct.WTF::KeyValuePair"** %2, align 8
  br label %80

80:                                               ; preds = %1, %78
  %81 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 3, i32 0, i32 0
  %82 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %81, align 8
  %83 = icmp eq %"struct.WTF::KeyValuePair"* %82, null
  br i1 %83, label %159, label %84, !prof !13

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 3, i32 0, i32 1
  %86 = load i32, i32* %85, align 8
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %157, label %88

88:                                               ; preds = %84
  %89 = zext i32 %86 to i64
  br label %90

90:                                               ; preds = %154, %88
  %91 = phi i64 [ 0, %88 ], [ %155, %154 ]
  %92 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %82, i64 %91
  %93 = bitcast %"struct.WTF::KeyValuePair"* %92 to i8**
  %94 = load i8*, i8** %93, align 8
  %95 = icmp eq i8* %94, inttoptr (i64 -1 to i8*)
  br i1 %95, label %154, label %96

96:                                               ; preds = %90
  %97 = bitcast i8* %94 to %"class.WTF::StringImpl"*
  %98 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %82, i64 %91, i32 1
  %99 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = load %"class.WTF::String"*, %"class.WTF::String"** %99, align 8
  %101 = icmp eq %"class.WTF::String"* %100, null
  br i1 %101, label %138, label %102, !prof !13

102:                                              ; preds = %96
  %103 = bitcast %"class.WTF::String"* %100 to i8*
  %104 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %82, i64 %91, i32 1, i32 0, i32 0, i32 2
  %105 = load i32, i32* %104, align 4
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %134, label %107, !prof !14

107:                                              ; preds = %102
  %108 = zext i32 %105 to i64
  %109 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %100, i64 %108
  br label %110

110:                                              ; preds = %128, %107
  %111 = phi %"class.WTF::String"* [ %129, %128 ], [ %100, %107 ]
  %112 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %111, i64 0, i32 0, i32 0
  %113 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %112, align 8
  %114 = icmp eq %"class.WTF::StringImpl"* %113, null
  br i1 %114, label %128, label %115

115:                                              ; preds = %110
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %117 = load atomic i32, i32* %116 monotonic, align 4
  %118 = and i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 0
  %121 = load i32, i32* %120, align 4
  br i1 %119, label %122, label %124

122:                                              ; preds = %115
  %123 = add i32 %121, -1
  store i32 %123, i32* %120, align 4
  br label %124

124:                                              ; preds = %122, %115
  %125 = phi i32 [ %123, %122 ], [ %121, %115 ]
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %128

127:                                              ; preds = %124
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %113) #11
  br label %128

128:                                              ; preds = %127, %124, %110
  %129 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %111, i64 1
  %130 = icmp eq %"class.WTF::String"* %129, %109
  br i1 %130, label %131, label %110

131:                                              ; preds = %128
  store i32 0, i32* %104, align 4
  %132 = bitcast %"class.WTF::Vector.1"* %98 to i8**
  %133 = load i8*, i8** %132, align 8
  br label %134

134:                                              ; preds = %131, %102
  %135 = phi i8* [ %133, %131 ], [ %103, %102 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %135) #11
  store %"class.WTF::String"* null, %"class.WTF::String"** %99, align 8
  %136 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %92, i64 0, i32 0, i32 0, i32 0
  %137 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %136, align 8
  br label %138

138:                                              ; preds = %134, %96
  %139 = phi %"class.WTF::StringImpl"* [ %137, %134 ], [ %97, %96 ]
  %140 = icmp eq %"class.WTF::StringImpl"* %139, null
  br i1 %140, label %154, label %141

141:                                              ; preds = %138
  %142 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %139, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %143 = load atomic i32, i32* %142 monotonic, align 4
  %144 = and i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %139, i64 0, i32 0
  %147 = load i32, i32* %146, align 4
  br i1 %145, label %148, label %150

148:                                              ; preds = %141
  %149 = add i32 %147, -1
  store i32 %149, i32* %146, align 4
  br label %150

150:                                              ; preds = %148, %141
  %151 = phi i32 [ %149, %148 ], [ %147, %141 ]
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %154

153:                                              ; preds = %150
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %139) #11
  br label %154

154:                                              ; preds = %153, %150, %138, %90
  %155 = add nuw nsw i64 %91, 1
  %156 = icmp eq i64 %155, %89
  br i1 %156, label %157, label %90

157:                                              ; preds = %154, %84
  %158 = bitcast %"struct.WTF::KeyValuePair"* %82 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %158) #11
  store %"struct.WTF::KeyValuePair"* null, %"struct.WTF::KeyValuePair"** %81, align 8
  br label %159

159:                                              ; preds = %80, %157
  %160 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 2, i32 0, i32 0
  %161 = load %"class.WTF::String"*, %"class.WTF::String"** %160, align 8
  %162 = icmp eq %"class.WTF::String"* %161, null
  br i1 %162, label %195, label %163, !prof !13

163:                                              ; preds = %159
  %164 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 2, i32 0, i32 1
  %165 = load i32, i32* %164, align 8
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %193, label %167

167:                                              ; preds = %163
  %168 = zext i32 %165 to i64
  br label %169

169:                                              ; preds = %190, %167
  %170 = phi i64 [ 0, %167 ], [ %191, %190 ]
  %171 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %161, i64 %170
  %172 = bitcast %"class.WTF::String"* %171 to i8**
  %173 = load i8*, i8** %172, align 8
  %174 = bitcast i8* %173 to %"class.WTF::StringImpl"*
  %175 = ptrtoint i8* %173 to i64
  switch i64 %175, label %176 [
    i64 -1, label %190
    i64 0, label %190
  ]

176:                                              ; preds = %169
  %177 = getelementptr inbounds i8, i8* %173, i64 8
  %178 = bitcast i8* %177 to i32*
  %179 = load atomic i32, i32* %178 monotonic, align 4
  %180 = and i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = bitcast i8* %173 to i32*
  %183 = load i32, i32* %182, align 4
  br i1 %181, label %184, label %186

184:                                              ; preds = %176
  %185 = add i32 %183, -1
  store i32 %185, i32* %182, align 4
  br label %186

186:                                              ; preds = %184, %176
  %187 = phi i32 [ %185, %184 ], [ %183, %176 ]
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %189, label %190

189:                                              ; preds = %186
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %174) #11
  br label %190

190:                                              ; preds = %189, %186, %169, %169
  %191 = add nuw nsw i64 %170, 1
  %192 = icmp eq i64 %191, %168
  br i1 %192, label %193, label %169

193:                                              ; preds = %190, %163
  %194 = bitcast %"class.WTF::String"* %161 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %194) #11
  store %"class.WTF::String"* null, %"class.WTF::String"** %160, align 8
  br label %195

195:                                              ; preds = %159, %193
  %196 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 1, i32 0, i32 0
  %197 = load %"class.WTF::String"*, %"class.WTF::String"** %196, align 8
  %198 = icmp eq %"class.WTF::String"* %197, null
  br i1 %198, label %231, label %199, !prof !13

199:                                              ; preds = %195
  %200 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 1, i32 0, i32 1
  %201 = load i32, i32* %200, align 8
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %229, label %203

203:                                              ; preds = %199
  %204 = zext i32 %201 to i64
  br label %205

205:                                              ; preds = %226, %203
  %206 = phi i64 [ 0, %203 ], [ %227, %226 ]
  %207 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %197, i64 %206
  %208 = bitcast %"class.WTF::String"* %207 to i8**
  %209 = load i8*, i8** %208, align 8
  %210 = bitcast i8* %209 to %"class.WTF::StringImpl"*
  %211 = ptrtoint i8* %209 to i64
  switch i64 %211, label %212 [
    i64 -1, label %226
    i64 0, label %226
  ]

212:                                              ; preds = %205
  %213 = getelementptr inbounds i8, i8* %209, i64 8
  %214 = bitcast i8* %213 to i32*
  %215 = load atomic i32, i32* %214 monotonic, align 4
  %216 = and i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = bitcast i8* %209 to i32*
  %219 = load i32, i32* %218, align 4
  br i1 %217, label %220, label %222

220:                                              ; preds = %212
  %221 = add i32 %219, -1
  store i32 %221, i32* %218, align 4
  br label %222

222:                                              ; preds = %220, %212
  %223 = phi i32 [ %221, %220 ], [ %219, %212 ]
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %225, label %226

225:                                              ; preds = %222
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %210) #11
  br label %226

226:                                              ; preds = %225, %222, %205, %205
  %227 = add nuw nsw i64 %206, 1
  %228 = icmp eq i64 %227, %204
  br i1 %228, label %229, label %205

229:                                              ; preds = %226, %199
  %230 = bitcast %"class.WTF::String"* %197 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %230) #11
  store %"class.WTF::String"* null, %"class.WTF::String"** %196, align 8
  br label %231

231:                                              ; preds = %195, %229
  %232 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 0, i32 0, i32 0
  %233 = load %"class.WTF::String"*, %"class.WTF::String"** %232, align 8
  %234 = icmp eq %"class.WTF::String"* %233, null
  br i1 %234, label %267, label %235, !prof !13

235:                                              ; preds = %231
  %236 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 0, i32 0, i32 1
  %237 = load i32, i32* %236, align 8
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %265, label %239

239:                                              ; preds = %235
  %240 = zext i32 %237 to i64
  br label %241

241:                                              ; preds = %262, %239
  %242 = phi i64 [ 0, %239 ], [ %263, %262 ]
  %243 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %233, i64 %242
  %244 = bitcast %"class.WTF::String"* %243 to i8**
  %245 = load i8*, i8** %244, align 8
  %246 = bitcast i8* %245 to %"class.WTF::StringImpl"*
  %247 = ptrtoint i8* %245 to i64
  switch i64 %247, label %248 [
    i64 -1, label %262
    i64 0, label %262
  ]

248:                                              ; preds = %241
  %249 = getelementptr inbounds i8, i8* %245, i64 8
  %250 = bitcast i8* %249 to i32*
  %251 = load atomic i32, i32* %250 monotonic, align 4
  %252 = and i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = bitcast i8* %245 to i32*
  %255 = load i32, i32* %254, align 4
  br i1 %253, label %256, label %258

256:                                              ; preds = %248
  %257 = add i32 %255, -1
  store i32 %257, i32* %254, align 4
  br label %258

258:                                              ; preds = %256, %248
  %259 = phi i32 [ %257, %256 ], [ %255, %248 ]
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %262

261:                                              ; preds = %258
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %246) #11
  br label %262

262:                                              ; preds = %261, %258, %241, %241
  %263 = add nuw nsw i64 %242, 1
  %264 = icmp eq i64 %263, %240
  br i1 %264, label %265, label %241

265:                                              ; preds = %262, %235
  %266 = bitcast %"class.WTF::String"* %233 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %266) #11
  store %"class.WTF::String"* null, %"class.WTF::String"** %232, align 8
  br label %267

267:                                              ; preds = %231, %265
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN5blink12_GLOBAL__N_113AttrFormatterERN3WTF7HashMapINS1_6StringENS1_6VectorIS3_Lj0ENS1_18PartitionAllocatorEEENS1_10StringHashENS1_10HashTraitsIS3_EENS8_IS6_EES5_EERKNS4_INSt3__14pairIS3_S6_EELj0ES5_EE(%"class.WTF::HashMap"* dereferenceable(24), %"class.WTF::Vector"* nocapture readonly dereferenceable(16)) unnamed_addr #0 {
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = alloca %"class.WTF::Vector.1", align 8
  %6 = alloca [1 x %"class.WTF::String"], align 8
  %7 = alloca %"class.WTF::String", align 8
  %8 = alloca %"class.WTF::Vector.1", align 8
  %9 = alloca %"class.WTF::String", align 8
  %10 = bitcast %"class.WTF::Vector.1"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  %11 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %5, i64 0, i32 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %5, i64 0, i32 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %5, i64 0, i32 0, i32 0, i32 2
  %14 = bitcast [1 x %"class.WTF::String"]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #11
  %15 = getelementptr inbounds [1 x %"class.WTF::String"], [1 x %"class.WTF::String"]* %6, i64 0, i64 0
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i64 1) #11
  %16 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 8) #11
  %17 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %16, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #11
  %18 = ptrtoint i8* %17 to i64
  %19 = bitcast %"class.WTF::Vector.1"* %5 to i64*
  store atomic i64 %18, i64* %19 monotonic, align 8
  %20 = lshr i64 %16, 3
  %21 = trunc i64 %20 to i32
  store i32 %21, i32* %12, align 8
  store i32 1, i32* %13, align 4
  %22 = getelementptr inbounds [1 x %"class.WTF::String"], [1 x %"class.WTF::String"]* %6, i64 0, i64 0, i32 0, i32 0
  %23 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %22, align 8
  %24 = bitcast i8* %17 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %23, %"class.WTF::StringImpl"** %24, align 8
  %25 = icmp eq %"class.WTF::StringImpl"* %23, null
  br i1 %25, label %43, label %26

26:                                               ; preds = %2
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %23, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = and i32 %28, 2
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %43

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %23, i64 0, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = zext i32 %33 to i33
  %35 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %34, i33 1) #11
  %36 = extractvalue { i33, i1 } %35, 1
  %37 = extractvalue { i33, i1 } %35, 0
  %38 = icmp slt i33 %37, 0
  %39 = or i1 %36, %38
  br i1 %39, label %40, label %41, !prof !14

40:                                               ; preds = %31
  call void @llvm.trap() #11
  unreachable

41:                                               ; preds = %31
  %42 = trunc i33 %37 to i32
  store i32 %42, i32* %32, align 4
  br label %43

43:                                               ; preds = %41, %26, %2
  %44 = getelementptr inbounds [1 x %"class.WTF::String"], [1 x %"class.WTF::String"]* %6, i64 0, i64 0, i32 0, i32 0
  %45 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %44, align 8
  %46 = icmp eq %"class.WTF::StringImpl"* %45, null
  br i1 %46, label %60, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 0
  %53 = load i32, i32* %52, align 4
  br i1 %51, label %54, label %56

54:                                               ; preds = %47
  %55 = add i32 %53, -1
  store i32 %55, i32* %52, align 4
  br label %56

56:                                               ; preds = %54, %47
  %57 = phi i32 [ %55, %54 ], [ %53, %47 ]
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %56
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %45) #11
  br label %60

60:                                               ; preds = %43, %56, %59
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #11
  %61 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 0
  %62 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %61, align 8
  %63 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %64 = load i32, i32* %63, align 4
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %62, i64 %65
  %67 = icmp eq i32 %64, 0
  br i1 %67, label %89, label %68

68:                                               ; preds = %60
  %69 = bitcast %"class.WTF::String"* %7 to i8*
  %70 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  %71 = bitcast %"class.WTF::StringView"* %3 to i8*
  %72 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 0
  %73 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  %74 = bitcast i8** %73 to %"class.WTF::StringImpl"**
  %75 = bitcast %"class.WTF::StringView"* %3 to i64*
  %76 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  %77 = bitcast %"class.WTF::StringView"* %4 to i8*
  %78 = bitcast %"class.WTF::StringView"* %4 to i64*
  %79 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  %80 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  %81 = bitcast %"class.WTF::Vector.1"* %8 to i8*
  %82 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %8, i64 0, i32 0, i32 0, i32 0
  %83 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %8, i64 0, i32 0, i32 0, i32 1
  %84 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %8, i64 0, i32 0, i32 0, i32 2
  %85 = bitcast %"class.WTF::String"* %9 to i8*
  %86 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %9, i64 0, i32 0, i32 0
  %87 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %0, i64 0, i32 0
  %88 = bitcast %"class.WTF::Vector.1"* %8 to i8**
  br label %126

89:                                               ; preds = %284, %60
  %90 = load %"class.WTF::String"*, %"class.WTF::String"** %11, align 8
  %91 = icmp eq %"class.WTF::String"* %90, null
  br i1 %91, label %125, label %92, !prof !13

92:                                               ; preds = %89
  %93 = bitcast %"class.WTF::String"* %90 to i8*
  %94 = load i32, i32* %13, align 4
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %123, label %96, !prof !14

96:                                               ; preds = %92
  %97 = zext i32 %94 to i64
  %98 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %90, i64 %97
  br label %99

99:                                               ; preds = %117, %96
  %100 = phi %"class.WTF::String"* [ %118, %117 ], [ %90, %96 ]
  %101 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %100, i64 0, i32 0, i32 0
  %102 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %101, align 8
  %103 = icmp eq %"class.WTF::StringImpl"* %102, null
  br i1 %103, label %117, label %104

104:                                              ; preds = %99
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %102, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %106 = load atomic i32, i32* %105 monotonic, align 4
  %107 = and i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %102, i64 0, i32 0
  %110 = load i32, i32* %109, align 4
  br i1 %108, label %111, label %113

111:                                              ; preds = %104
  %112 = add i32 %110, -1
  store i32 %112, i32* %109, align 4
  br label %113

113:                                              ; preds = %111, %104
  %114 = phi i32 [ %112, %111 ], [ %110, %104 ]
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %117

116:                                              ; preds = %113
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %102) #11
  br label %117

117:                                              ; preds = %116, %113, %99
  %118 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %100, i64 1
  %119 = icmp eq %"class.WTF::String"* %118, %98
  br i1 %119, label %120, label %99

120:                                              ; preds = %117
  store i32 0, i32* %13, align 4
  %121 = bitcast %"class.WTF::Vector.1"* %5 to i8**
  %122 = load i8*, i8** %121, align 8
  br label %123

123:                                              ; preds = %120, %92
  %124 = phi i8* [ %122, %120 ], [ %93, %92 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %124) #11
  store %"class.WTF::String"* null, %"class.WTF::String"** %11, align 8
  br label %125

125:                                              ; preds = %89, %123
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  ret void

126:                                              ; preds = %68, %284
  %127 = phi %"struct.std::__1::pair"* [ %62, %68 ], [ %285, %284 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #11
  %128 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %127, i64 0, i32 0
  %129 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String10LowerASCIIEv(%"class.WTF::String"* %128) #11
  store %"class.WTF::StringImpl"* %129, %"class.WTF::StringImpl"** %70, align 8
  %130 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %127, i64 0, i32 1
  %131 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %127, i64 0, i32 1, i32 0, i32 0, i32 2
  %132 = load i32, i32* %131, align 4
  %133 = load i32, i32* %13, align 4
  %134 = icmp eq i32 %132, %133
  br i1 %134, label %135, label %157

135:                                              ; preds = %126
  %136 = icmp eq i32 %132, 0
  br i1 %136, label %190, label %137

137:                                              ; preds = %135
  %138 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %130, i64 0, i32 0, i32 0, i32 0
  %139 = load %"class.WTF::String"*, %"class.WTF::String"** %138, align 8
  %140 = load %"class.WTF::String"*, %"class.WTF::String"** %11, align 8
  %141 = zext i32 %132 to i64
  %142 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %139, i64 %141
  br label %143

143:                                              ; preds = %151, %137
  %144 = phi %"class.WTF::String"* [ %153, %151 ], [ %140, %137 ]
  %145 = phi %"class.WTF::String"* [ %152, %151 ], [ %139, %137 ]
  %146 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %145, i64 0, i32 0, i32 0
  %147 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %146, align 8
  %148 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %144, i64 0, i32 0, i32 0
  %149 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %148, align 8
  %150 = call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %147, %"class.WTF::StringImpl"* %149) #11
  br i1 %150, label %151, label %155

151:                                              ; preds = %143
  %152 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %145, i64 1
  %153 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %144, i64 1
  %154 = icmp eq %"class.WTF::String"* %152, %142
  br i1 %154, label %190, label %143

155:                                              ; preds = %143
  %156 = load i32, i32* %131, align 4
  br label %157

157:                                              ; preds = %155, %126
  %158 = phi i32 [ %156, %155 ], [ %132, %126 ]
  %159 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %130, i64 0, i32 0, i32 0, i32 0
  %160 = load %"class.WTF::String"*, %"class.WTF::String"** %159, align 8
  %161 = zext i32 %158 to i64
  %162 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %160, i64 %161
  %163 = icmp eq i32 %158, 0
  br i1 %163, label %192, label %164

164:                                              ; preds = %157, %180
  %165 = phi %"class.WTF::String"* [ %181, %180 ], [ %160, %157 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %71) #11
  %166 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %165, i64 0, i32 0, i32 0
  %167 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %166, align 8
  %168 = icmp eq %"class.WTF::StringImpl"* %167, null
  br i1 %168, label %169, label %171

169:                                              ; preds = %164
  store i8* null, i8** %73, align 8
  %170 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %170, i64* %75, align 8
  br label %176

171:                                              ; preds = %164
  store %"class.WTF::StringImpl"* %167, %"class.WTF::StringImpl"** %72, align 8
  %172 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %167, i64 0, i32 1
  %173 = load i32, i32* %172, align 4
  %174 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %167, i64 1
  store %"class.WTF::StringImpl"* %174, %"class.WTF::StringImpl"** %74, align 8
  %175 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %176

176:                                              ; preds = %171, %169
  %177 = phi i64 [ %175, %171 ], [ %170, %169 ]
  %178 = phi i32 [ %173, %171 ], [ 0, %169 ]
  store i32 %178, i32* %76, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %77) #11
  store i64 %177, i64* %78, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i8** %79, align 8
  store i32 1, i32* %80, align 8
  %179 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %4) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %77) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %71) #11
  br i1 %179, label %183, label %180

180:                                              ; preds = %176
  %181 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %165, i64 1
  %182 = icmp ult %"class.WTF::String"* %181, %162
  br i1 %182, label %164, label %192

183:                                              ; preds = %176
  %184 = ptrtoint %"class.WTF::String"* %165 to i64
  %185 = ptrtoint %"class.WTF::String"* %160 to i64
  %186 = sub i64 %184, %185
  %187 = lshr exact i64 %186, 3
  %188 = trunc i64 %187 to i32
  %189 = icmp eq i32 %188, -1
  br i1 %189, label %192, label %190

190:                                              ; preds = %151, %183, %135
  %191 = call { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6insertINS_17HashMapTranslatorISD_S8_S4_EERKS1_RS5_EENS_18HashTableAddResultISE_S6_EEOT0_OT1_(%"class.WTF::HashTable.8"* %87, %"class.WTF::String"* nonnull dereferenceable(8) %7, %"class.WTF::Vector.1"* nonnull dereferenceable(16) %5) #11
  br label %268

192:                                              ; preds = %180, %183, %157
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %81) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %81, i8 0, i64 16, i1 false) #11
  %193 = load %"class.WTF::String"*, %"class.WTF::String"** %159, align 8
  %194 = load i32, i32* %131, align 4
  %195 = zext i32 %194 to i64
  %196 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %193, i64 %195
  %197 = icmp eq i32 %194, 0
  br i1 %197, label %198, label %235

198:                                              ; preds = %265, %192
  %199 = call { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6insertINS_17HashMapTranslatorISD_S8_S4_EERKS1_RS5_EENS_18HashTableAddResultISE_S6_EEOT0_OT1_(%"class.WTF::HashTable.8"* %87, %"class.WTF::String"* nonnull dereferenceable(8) %7, %"class.WTF::Vector.1"* nonnull dereferenceable(16) %8) #11
  %200 = load %"class.WTF::String"*, %"class.WTF::String"** %82, align 8
  %201 = icmp eq %"class.WTF::String"* %200, null
  br i1 %201, label %234, label %202, !prof !13

202:                                              ; preds = %198
  %203 = bitcast %"class.WTF::String"* %200 to i8*
  %204 = load i32, i32* %84, align 4
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %232, label %206, !prof !14

206:                                              ; preds = %202
  %207 = zext i32 %204 to i64
  %208 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %200, i64 %207
  br label %209

209:                                              ; preds = %227, %206
  %210 = phi %"class.WTF::String"* [ %228, %227 ], [ %200, %206 ]
  %211 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %210, i64 0, i32 0, i32 0
  %212 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %211, align 8
  %213 = icmp eq %"class.WTF::StringImpl"* %212, null
  br i1 %213, label %227, label %214

214:                                              ; preds = %209
  %215 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %212, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %216 = load atomic i32, i32* %215 monotonic, align 4
  %217 = and i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %212, i64 0, i32 0
  %220 = load i32, i32* %219, align 4
  br i1 %218, label %221, label %223

221:                                              ; preds = %214
  %222 = add i32 %220, -1
  store i32 %222, i32* %219, align 4
  br label %223

223:                                              ; preds = %221, %214
  %224 = phi i32 [ %222, %221 ], [ %220, %214 ]
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %226, label %227

226:                                              ; preds = %223
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %212) #11
  br label %227

227:                                              ; preds = %226, %223, %209
  %228 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %210, i64 1
  %229 = icmp eq %"class.WTF::String"* %228, %208
  br i1 %229, label %230, label %209

230:                                              ; preds = %227
  store i32 0, i32* %84, align 4
  %231 = load i8*, i8** %88, align 8
  br label %232

232:                                              ; preds = %230, %202
  %233 = phi i8* [ %231, %230 ], [ %203, %202 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %233) #11
  store %"class.WTF::String"* null, %"class.WTF::String"** %82, align 8
  br label %234

234:                                              ; preds = %198, %232
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %81) #11
  br label %268

235:                                              ; preds = %192, %265
  %236 = phi %"class.WTF::String"* [ %266, %265 ], [ %193, %192 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %85) #11
  %237 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String10UpperASCIIEv(%"class.WTF::String"* %236) #11
  store %"class.WTF::StringImpl"* %237, %"class.WTF::StringImpl"** %86, align 8
  %238 = load i32, i32* %84, align 4
  %239 = load i32, i32* %83, align 8
  %240 = icmp eq i32 %238, %239
  br i1 %240, label %249, label %241, !prof !14

241:                                              ; preds = %235
  %242 = ptrtoint %"class.WTF::StringImpl"* %237 to i64
  %243 = load %"class.WTF::String"*, %"class.WTF::String"** %82, align 8
  %244 = zext i32 %238 to i64
  %245 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %243, i64 %244
  %246 = bitcast %"class.WTF::String"* %245 to i64*
  store i64 %242, i64* %246, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %86, align 8
  %247 = load i32, i32* %84, align 4
  %248 = add i32 %247, 1
  store i32 %248, i32* %84, align 4
  br label %265

249:                                              ; preds = %235
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS1_EEvOT_(%"class.WTF::Vector.1"* nonnull %8, %"class.WTF::String"* nonnull dereferenceable(8) %9) #11
  %250 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %86, align 8
  %251 = icmp eq %"class.WTF::StringImpl"* %250, null
  br i1 %251, label %265, label %252

252:                                              ; preds = %249
  %253 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %250, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %254 = load atomic i32, i32* %253 monotonic, align 4
  %255 = and i32 %254, 2
  %256 = icmp eq i32 %255, 0
  %257 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %250, i64 0, i32 0
  %258 = load i32, i32* %257, align 4
  br i1 %256, label %259, label %261

259:                                              ; preds = %252
  %260 = add i32 %258, -1
  store i32 %260, i32* %257, align 4
  br label %261

261:                                              ; preds = %259, %252
  %262 = phi i32 [ %260, %259 ], [ %258, %252 ]
  %263 = icmp eq i32 %262, 0
  br i1 %263, label %264, label %265

264:                                              ; preds = %261
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %250) #11
  br label %265

265:                                              ; preds = %241, %249, %261, %264
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %85) #11
  %266 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %236, i64 1
  %267 = icmp eq %"class.WTF::String"* %266, %196
  br i1 %267, label %198, label %235

268:                                              ; preds = %234, %190
  %269 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %70, align 8
  %270 = icmp eq %"class.WTF::StringImpl"* %269, null
  br i1 %270, label %284, label %271

271:                                              ; preds = %268
  %272 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %269, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %273 = load atomic i32, i32* %272 monotonic, align 4
  %274 = and i32 %273, 2
  %275 = icmp eq i32 %274, 0
  %276 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %269, i64 0, i32 0
  %277 = load i32, i32* %276, align 4
  br i1 %275, label %278, label %280

278:                                              ; preds = %271
  %279 = add i32 %277, -1
  store i32 %279, i32* %276, align 4
  br label %280

280:                                              ; preds = %278, %271
  %281 = phi i32 [ %279, %278 ], [ %277, %271 ]
  %282 = icmp eq i32 %281, 0
  br i1 %282, label %283, label %284

283:                                              ; preds = %280
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %269) #11
  br label %284

284:                                              ; preds = %268, %280, %283
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #11
  %285 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %127, i64 1
  %286 = icmp eq %"struct.std::__1::pair"* %285, %66
  br i1 %286, label %89, label %126
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink19SanitizerConfigImplC2EOS0_(%"struct.blink::SanitizerConfigImpl"*, %"struct.blink::SanitizerConfigImpl"* dereferenceable(128)) unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 0, i32 0, i32 2
  %5 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 0, i32 0, i32 3
  %6 = bitcast %"struct.blink::SanitizerConfigImpl"* %1 to i64*
  %7 = bitcast %"struct.blink::SanitizerConfigImpl"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 20, i1 false) #11
  %8 = load i64, i64* %6, align 8
  %9 = bitcast %"struct.blink::SanitizerConfigImpl"* %0 to i64*
  store atomic i64 0, i64* %6 monotonic, align 8
  store atomic i64 %8, i64* %9 monotonic, align 8
  %10 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %3, align 4
  %12 = load i32, i32* %10, align 4
  store i32 %12, i32* %3, align 4
  store i32 %11, i32* %10, align 4
  %13 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 0, i32 0, i32 2
  %14 = load i32, i32* %4, align 4
  %15 = load i32, i32* %13, align 4
  store i32 %15, i32* %4, align 4
  store i32 %14, i32* %13, align 4
  %16 = load i32, i32* %5, align 8
  %17 = and i32 %16, 2147483647
  %18 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 0, i32 0, i32 3
  %19 = load i32, i32* %18, align 8
  %20 = and i32 %19, 2147483647
  %21 = and i32 %16, -2147483648
  %22 = or i32 %20, %21
  store i32 %22, i32* %5, align 8
  %23 = load i32, i32* %18, align 8
  %24 = and i32 %23, -2147483648
  %25 = or i32 %24, %17
  store i32 %25, i32* %18, align 8
  %26 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 1
  %27 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 1
  %28 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 1, i32 0, i32 1
  %29 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 1, i32 0, i32 2
  %30 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 1, i32 0, i32 3
  %31 = bitcast %"class.WTF::HashSet"* %27 to i64*
  %32 = bitcast %"class.WTF::HashSet"* %26 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 20, i1 false) #11
  %33 = load i64, i64* %31, align 8
  %34 = bitcast %"class.WTF::HashSet"* %26 to i64*
  store atomic i64 0, i64* %31 monotonic, align 8
  store atomic i64 %33, i64* %34 monotonic, align 8
  %35 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 1, i32 0, i32 1
  %36 = load i32, i32* %28, align 4
  %37 = load i32, i32* %35, align 4
  store i32 %37, i32* %28, align 4
  store i32 %36, i32* %35, align 4
  %38 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 1, i32 0, i32 2
  %39 = load i32, i32* %29, align 4
  %40 = load i32, i32* %38, align 4
  store i32 %40, i32* %29, align 4
  store i32 %39, i32* %38, align 4
  %41 = load i32, i32* %30, align 8
  %42 = and i32 %41, 2147483647
  %43 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 1, i32 0, i32 3
  %44 = load i32, i32* %43, align 8
  %45 = and i32 %44, 2147483647
  %46 = and i32 %41, -2147483648
  %47 = or i32 %45, %46
  store i32 %47, i32* %30, align 8
  %48 = load i32, i32* %43, align 8
  %49 = and i32 %48, -2147483648
  %50 = or i32 %49, %42
  store i32 %50, i32* %43, align 8
  %51 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 2
  %52 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 2
  %53 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 2, i32 0, i32 1
  %54 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 2, i32 0, i32 2
  %55 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 2, i32 0, i32 3
  %56 = bitcast %"class.WTF::HashSet"* %52 to i64*
  %57 = bitcast %"class.WTF::HashSet"* %51 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %57, i8 0, i64 20, i1 false) #11
  %58 = load i64, i64* %56, align 8
  %59 = bitcast %"class.WTF::HashSet"* %51 to i64*
  store atomic i64 0, i64* %56 monotonic, align 8
  store atomic i64 %58, i64* %59 monotonic, align 8
  %60 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 2, i32 0, i32 1
  %61 = load i32, i32* %53, align 4
  %62 = load i32, i32* %60, align 4
  store i32 %62, i32* %53, align 4
  store i32 %61, i32* %60, align 4
  %63 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 2, i32 0, i32 2
  %64 = load i32, i32* %54, align 4
  %65 = load i32, i32* %63, align 4
  store i32 %65, i32* %54, align 4
  store i32 %64, i32* %63, align 4
  %66 = load i32, i32* %55, align 8
  %67 = and i32 %66, 2147483647
  %68 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 2, i32 0, i32 3
  %69 = load i32, i32* %68, align 8
  %70 = and i32 %69, 2147483647
  %71 = and i32 %66, -2147483648
  %72 = or i32 %70, %71
  store i32 %72, i32* %55, align 8
  %73 = load i32, i32* %68, align 8
  %74 = and i32 %73, -2147483648
  %75 = or i32 %74, %67
  store i32 %75, i32* %68, align 8
  %76 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 3
  %77 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 3
  %78 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 3, i32 0, i32 1
  %79 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 3, i32 0, i32 2
  %80 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 3, i32 0, i32 3
  %81 = bitcast %"class.WTF::HashMap"* %77 to i64*
  %82 = bitcast %"class.WTF::HashMap"* %76 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %82, i8 0, i64 20, i1 false) #11
  %83 = load i64, i64* %81, align 8
  %84 = bitcast %"class.WTF::HashMap"* %76 to i64*
  store atomic i64 0, i64* %81 monotonic, align 8
  store atomic i64 %83, i64* %84 monotonic, align 8
  %85 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 3, i32 0, i32 1
  %86 = load i32, i32* %78, align 4
  %87 = load i32, i32* %85, align 4
  store i32 %87, i32* %78, align 4
  store i32 %86, i32* %85, align 4
  %88 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 3, i32 0, i32 2
  %89 = load i32, i32* %79, align 4
  %90 = load i32, i32* %88, align 4
  store i32 %90, i32* %79, align 4
  store i32 %89, i32* %88, align 4
  %91 = load i32, i32* %80, align 8
  %92 = and i32 %91, 2147483647
  %93 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 3, i32 0, i32 3
  %94 = load i32, i32* %93, align 8
  %95 = and i32 %94, 2147483647
  %96 = and i32 %91, -2147483648
  %97 = or i32 %95, %96
  store i32 %97, i32* %80, align 8
  %98 = load i32, i32* %93, align 8
  %99 = and i32 %98, -2147483648
  %100 = or i32 %99, %92
  store i32 %100, i32* %93, align 8
  %101 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 4
  %102 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 4
  %103 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 4, i32 0, i32 1
  %104 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 4, i32 0, i32 2
  %105 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 4, i32 0, i32 3
  %106 = bitcast %"class.WTF::HashMap"* %102 to i64*
  %107 = bitcast %"class.WTF::HashMap"* %101 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %107, i8 0, i64 20, i1 false) #11
  %108 = load i64, i64* %106, align 8
  %109 = bitcast %"class.WTF::HashMap"* %101 to i64*
  store atomic i64 0, i64* %106 monotonic, align 8
  store atomic i64 %108, i64* %109 monotonic, align 8
  %110 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 4, i32 0, i32 1
  %111 = load i32, i32* %103, align 4
  %112 = load i32, i32* %110, align 4
  store i32 %112, i32* %103, align 4
  store i32 %111, i32* %110, align 4
  %113 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 4, i32 0, i32 2
  %114 = load i32, i32* %104, align 4
  %115 = load i32, i32* %113, align 4
  store i32 %115, i32* %104, align 4
  store i32 %114, i32* %113, align 4
  %116 = load i32, i32* %105, align 8
  %117 = and i32 %116, 2147483647
  %118 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 4, i32 0, i32 3
  %119 = load i32, i32* %118, align 8
  %120 = and i32 %119, 2147483647
  %121 = and i32 %116, -2147483648
  %122 = or i32 %120, %121
  store i32 %122, i32* %105, align 8
  %123 = load i32, i32* %118, align 8
  %124 = and i32 %123, -2147483648
  %125 = or i32 %124, %117
  store i32 %125, i32* %118, align 8
  %126 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 5
  %127 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 5
  %128 = load i8, i8* %127, align 8, !range !6
  store i8 %128, i8* %126, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SanitizerConfig"* @_ZN5blink19SanitizerConfigImpl13defaultConfigEv() local_unnamed_addr #0 align 2 {
  %1 = tail call fastcc %"class.blink::SanitizerConfig"* @_ZN5blink12_GLOBAL__N_116GetDefaultConfigEv()
  ret %"class.blink::SanitizerConfig"* %1
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %"class.blink::SanitizerConfig"* @_ZN5blink12_GLOBAL__N_116GetDefaultConfigEv() unnamed_addr #0 {
  %1 = alloca %"class.WTF::Vector.1", align 8
  %2 = alloca i8*, align 8
  %3 = alloca [1 x %"class.WTF::String"], align 8
  %4 = alloca %"class.WTF::Vector", align 8
  %5 = alloca %"struct.std::__1::pair.221", align 8
  %6 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink12_GLOBAL__N_116GetDefaultConfigEvE9s_config_ to i8*) acquire, align 8
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %369, !prof !5

8:                                                ; preds = %0
  %9 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink12_GLOBAL__N_116GetDefaultConfigEvE9s_config_) #11
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %369, label %11

11:                                               ; preds = %8
  %12 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64 104) #11
  %13 = bitcast i8* %12 to %"class.blink::SanitizerConfig"*
  tail call void @_ZN5blink15SanitizerConfigC1Ev(%"class.blink::SanitizerConfig"* %13) #11
  %14 = getelementptr inbounds i8, i8* %12, i64 -4
  %15 = bitcast i8* %14 to i16*
  %16 = load atomic i16, i16* %15 monotonic, align 2
  %17 = or i16 %16, 1
  store atomic i16 %17, i16* %15 release, align 2
  %18 = bitcast %"class.WTF::Vector.1"* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #11
  %19 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %1, i64 0, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %1, i64 0, i32 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %1, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 16, i1 false) #11
  %22 = bitcast i8** %2 to i8*
  %23 = bitcast i8** %2 to i64*
  br label %55

24:                                               ; preds = %75
  call void @_ZN5blink15SanitizerConfig16setAllowElementsERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::SanitizerConfig"* %13, %"class.WTF::Vector.1"* nonnull dereferenceable(16) %1) #11
  %25 = bitcast [1 x %"class.WTF::String"]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #11
  %26 = getelementptr inbounds [1 x %"class.WTF::String"], [1 x %"class.WTF::String"]* %3, i64 0, i64 0
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i64 1) #11
  %27 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 8) #11
  %28 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #11
  %29 = lshr i64 %27, 3
  %30 = trunc i64 %29 to i32
  %31 = getelementptr inbounds [1 x %"class.WTF::String"], [1 x %"class.WTF::String"]* %3, i64 0, i64 0, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = bitcast i8* %28 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"** %33, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %34, label %52, label %35

35:                                               ; preds = %24
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %52

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i33
  %44 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %43, i33 1) #11
  %45 = extractvalue { i33, i1 } %44, 1
  %46 = extractvalue { i33, i1 } %44, 0
  %47 = icmp slt i33 %46, 0
  %48 = or i1 %45, %47
  br i1 %48, label %49, label %50, !prof !14

49:                                               ; preds = %40
  call void @llvm.trap() #11
  unreachable

50:                                               ; preds = %40
  %51 = trunc i33 %46 to i32
  store i32 %51, i32* %41, align 4
  br label %52

52:                                               ; preds = %50, %35, %24
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %54 = icmp eq %"class.WTF::StringImpl"* %53, null
  br i1 %54, label %94, label %81

55:                                               ; preds = %78, %11
  %56 = phi i32 [ 0, %11 ], [ %80, %78 ]
  %57 = phi i32 [ 0, %11 ], [ %79, %78 ]
  %58 = phi i8** [ getelementptr inbounds ([112 x i8*], [112 x i8*]* @_ZN5blink12_GLOBAL__N_121kDefaultAllowElementsE, i64 0, i64 0), %11 ], [ %76, %78 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #11
  %59 = bitcast i8** %58 to i64*
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %23, align 8
  %61 = icmp eq i32 %57, %56
  %62 = inttoptr i64 %60 to i8*
  br i1 %61, label %74, label %63, !prof !14

63:                                               ; preds = %55
  %64 = load %"class.WTF::String"*, %"class.WTF::String"** %19, align 8
  %65 = zext i32 %57 to i64
  %66 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %64, i64 %65
  %67 = icmp eq i64 %60, 0
  br i1 %67, label %70, label %68

68:                                               ; preds = %63
  %69 = call i64 @strlen(i8* nonnull %62) #13
  br label %70

70:                                               ; preds = %68, %63
  %71 = phi i64 [ %69, %68 ], [ 0, %63 ]
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %66, i8* %62, i64 %71) #11
  %72 = load i32, i32* %21, align 4
  %73 = add i32 %72, 1
  store i32 %73, i32* %21, align 4
  br label %75

74:                                               ; preds = %55
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRPKcEEvOT_(%"class.WTF::Vector.1"* nonnull %1, i8** nonnull dereferenceable(8) %2) #11
  br label %75

75:                                               ; preds = %74, %70
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #11
  %76 = getelementptr inbounds i8*, i8** %58, i64 1
  %77 = icmp eq i8** %76, getelementptr inbounds ([112 x i8*], [112 x i8*]* @_ZN5blink12_GLOBAL__N_121kDefaultAllowElementsE, i64 1, i64 0)
  br i1 %77, label %24, label %78

78:                                               ; preds = %75
  %79 = load i32, i32* %21, align 4
  %80 = load i32, i32* %20, align 8
  br label %55

81:                                               ; preds = %52
  %82 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %83 = load atomic i32, i32* %82 monotonic, align 4
  %84 = and i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 0, i32 0
  %87 = load i32, i32* %86, align 4
  br i1 %85, label %88, label %90

88:                                               ; preds = %81
  %89 = add i32 %87, -1
  store i32 %89, i32* %86, align 4
  br label %90

90:                                               ; preds = %88, %81
  %91 = phi i32 [ %89, %88 ], [ %87, %81 ]
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %94

93:                                               ; preds = %90
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %53) #11
  br label %94

94:                                               ; preds = %93, %90, %52
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #11
  %95 = bitcast %"class.WTF::Vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %95) #11
  %96 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 0
  %97 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 1
  %98 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %95, i8 0, i64 16, i1 false) #11
  %99 = bitcast %"struct.std::__1::pair.221"* %5 to i8*
  %100 = bitcast %"struct.std::__1::pair.221"* %5 to i64*
  %101 = getelementptr inbounds %"struct.std::__1::pair.221", %"struct.std::__1::pair.221"* %5, i64 0, i32 1
  %102 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %101, i64 0, i32 0, i32 0, i32 0
  %103 = getelementptr inbounds %"struct.std::__1::pair.221", %"struct.std::__1::pair.221"* %5, i64 0, i32 1, i32 0, i32 0, i32 1
  %104 = icmp eq i32 %30, 0
  %105 = and i64 %29, 4294967295
  %106 = bitcast %"class.WTF::Vector.1"* %101 to i64*
  %107 = getelementptr inbounds %"struct.std::__1::pair.221", %"struct.std::__1::pair.221"* %5, i64 0, i32 1, i32 0, i32 0, i32 2
  %108 = getelementptr inbounds %"struct.std::__1::pair.221", %"struct.std::__1::pair.221"* %5, i64 0, i32 0
  %109 = bitcast %"class.WTF::Vector.1"* %101 to i8**
  br label %242

110:                                              ; preds = %337
  call void @_ZN5blink15SanitizerConfig18setAllowAttributesERKN3WTF6VectorINSt3__14pairINS1_6StringENS2_IS5_Lj0ENS1_18PartitionAllocatorEEEEELj0ES6_EE(%"class.blink::SanitizerConfig"* %13, %"class.WTF::Vector"* nonnull dereferenceable(16) %4) #11
  %111 = getelementptr inbounds i8, i8* %12, i64 32
  store i8 0, i8* %111, align 8
  %112 = getelementptr inbounds i8, i8* %12, i64 9
  store i8 1, i8* %112, align 1
  %113 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %96, align 8
  %114 = icmp eq %"struct.std::__1::pair"* %113, null
  br i1 %114, label %187, label %115, !prof !13

115:                                              ; preds = %110
  %116 = bitcast %"struct.std::__1::pair"* %113 to i8*
  %117 = load i32, i32* %98, align 4
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %185, label %119, !prof !14

119:                                              ; preds = %115
  %120 = zext i32 %117 to i64
  %121 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %113, i64 %120
  br label %122

122:                                              ; preds = %179, %119
  %123 = phi %"struct.std::__1::pair"* [ %180, %179 ], [ %113, %119 ]
  %124 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %123, i64 0, i32 1
  %125 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %124, i64 0, i32 0, i32 0, i32 0
  %126 = load %"class.WTF::String"*, %"class.WTF::String"** %125, align 8
  %127 = icmp eq %"class.WTF::String"* %126, null
  br i1 %127, label %162, label %128, !prof !13

128:                                              ; preds = %122
  %129 = bitcast %"class.WTF::String"* %126 to i8*
  %130 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %123, i64 0, i32 1, i32 0, i32 0, i32 2
  %131 = load i32, i32* %130, align 4
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %160, label %133, !prof !14

133:                                              ; preds = %128
  %134 = zext i32 %131 to i64
  %135 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %126, i64 %134
  br label %136

136:                                              ; preds = %154, %133
  %137 = phi %"class.WTF::String"* [ %155, %154 ], [ %126, %133 ]
  %138 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %137, i64 0, i32 0, i32 0
  %139 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %138, align 8
  %140 = icmp eq %"class.WTF::StringImpl"* %139, null
  br i1 %140, label %154, label %141

141:                                              ; preds = %136
  %142 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %139, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %143 = load atomic i32, i32* %142 monotonic, align 4
  %144 = and i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %139, i64 0, i32 0
  %147 = load i32, i32* %146, align 4
  br i1 %145, label %148, label %150

148:                                              ; preds = %141
  %149 = add i32 %147, -1
  store i32 %149, i32* %146, align 4
  br label %150

150:                                              ; preds = %148, %141
  %151 = phi i32 [ %149, %148 ], [ %147, %141 ]
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %154

153:                                              ; preds = %150
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %139) #11
  br label %154

154:                                              ; preds = %153, %150, %136
  %155 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %137, i64 1
  %156 = icmp eq %"class.WTF::String"* %155, %135
  br i1 %156, label %157, label %136

157:                                              ; preds = %154
  store i32 0, i32* %130, align 4
  %158 = bitcast %"class.WTF::Vector.1"* %124 to i8**
  %159 = load i8*, i8** %158, align 8
  br label %160

160:                                              ; preds = %157, %128
  %161 = phi i8* [ %159, %157 ], [ %129, %128 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %161) #11
  store %"class.WTF::String"* null, %"class.WTF::String"** %125, align 8
  br label %162

162:                                              ; preds = %160, %122
  %163 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %123, i64 0, i32 0, i32 0, i32 0
  %164 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %163, align 8
  %165 = icmp eq %"class.WTF::StringImpl"* %164, null
  br i1 %165, label %179, label %166

166:                                              ; preds = %162
  %167 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %164, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %168 = load atomic i32, i32* %167 monotonic, align 4
  %169 = and i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %164, i64 0, i32 0
  %172 = load i32, i32* %171, align 4
  br i1 %170, label %173, label %175

173:                                              ; preds = %166
  %174 = add i32 %172, -1
  store i32 %174, i32* %171, align 4
  br label %175

175:                                              ; preds = %173, %166
  %176 = phi i32 [ %174, %173 ], [ %172, %166 ]
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %178, label %179

178:                                              ; preds = %175
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %164) #11
  br label %179

179:                                              ; preds = %178, %175, %162
  %180 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %123, i64 1
  %181 = icmp eq %"struct.std::__1::pair"* %180, %121
  br i1 %181, label %182, label %122

182:                                              ; preds = %179
  store i32 0, i32* %98, align 4
  %183 = bitcast %"class.WTF::Vector"* %4 to i8**
  %184 = load i8*, i8** %183, align 8
  br label %185

185:                                              ; preds = %182, %115
  %186 = phi i8* [ %184, %182 ], [ %116, %115 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %186) #11
  store %"struct.std::__1::pair"* null, %"struct.std::__1::pair"** %96, align 8
  br label %187

187:                                              ; preds = %185, %110
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %95) #11
  %188 = icmp eq i8* %28, null
  br i1 %188, label %206, label %189, !prof !13

189:                                              ; preds = %187
  %190 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %191 = icmp eq %"class.WTF::StringImpl"* %190, null
  br i1 %191, label %205, label %192

192:                                              ; preds = %189
  %193 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %190, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %194 = load atomic i32, i32* %193 monotonic, align 4
  %195 = and i32 %194, 2
  %196 = icmp eq i32 %195, 0
  %197 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %190, i64 0, i32 0
  %198 = load i32, i32* %197, align 4
  br i1 %196, label %199, label %201

199:                                              ; preds = %192
  %200 = add i32 %198, -1
  store i32 %200, i32* %197, align 4
  br label %201

201:                                              ; preds = %199, %192
  %202 = phi i32 [ %200, %199 ], [ %198, %192 ]
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %204, label %205

204:                                              ; preds = %201
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %190) #11
  br label %205

205:                                              ; preds = %204, %201, %189
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %28) #11
  br label %206

206:                                              ; preds = %205, %187
  %207 = load %"class.WTF::String"*, %"class.WTF::String"** %19, align 8
  %208 = icmp eq %"class.WTF::String"* %207, null
  br i1 %208, label %340, label %209, !prof !13

209:                                              ; preds = %206
  %210 = bitcast %"class.WTF::String"* %207 to i8*
  %211 = load i32, i32* %21, align 4
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %240, label %213, !prof !14

213:                                              ; preds = %209
  %214 = zext i32 %211 to i64
  %215 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %207, i64 %214
  br label %216

216:                                              ; preds = %234, %213
  %217 = phi %"class.WTF::String"* [ %235, %234 ], [ %207, %213 ]
  %218 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %217, i64 0, i32 0, i32 0
  %219 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %218, align 8
  %220 = icmp eq %"class.WTF::StringImpl"* %219, null
  br i1 %220, label %234, label %221

221:                                              ; preds = %216
  %222 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %219, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %223 = load atomic i32, i32* %222 monotonic, align 4
  %224 = and i32 %223, 2
  %225 = icmp eq i32 %224, 0
  %226 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %219, i64 0, i32 0
  %227 = load i32, i32* %226, align 4
  br i1 %225, label %228, label %230

228:                                              ; preds = %221
  %229 = add i32 %227, -1
  store i32 %229, i32* %226, align 4
  br label %230

230:                                              ; preds = %228, %221
  %231 = phi i32 [ %229, %228 ], [ %227, %221 ]
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %233, label %234

233:                                              ; preds = %230
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %219) #11
  br label %234

234:                                              ; preds = %233, %230, %216
  %235 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %217, i64 1
  %236 = icmp eq %"class.WTF::String"* %235, %215
  br i1 %236, label %237, label %216

237:                                              ; preds = %234
  store i32 0, i32* %21, align 4
  %238 = bitcast %"class.WTF::Vector.1"* %1 to i8**
  %239 = load i8*, i8** %238, align 8
  br label %240

240:                                              ; preds = %237, %209
  %241 = phi i8* [ %239, %237 ], [ %210, %209 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %241) #11
  store %"class.WTF::String"* null, %"class.WTF::String"** %19, align 8
  br label %340

242:                                              ; preds = %337, %94
  %243 = phi i8** [ getelementptr inbounds ([225 x i8*], [225 x i8*]* @_ZN5blink12_GLOBAL__N_123kDefaultAllowAttributesE, i64 0, i64 0), %94 ], [ %338, %337 ]
  %244 = bitcast i8** %243 to i64*
  %245 = load i64, i64* %244, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %99) #11
  store i64 %245, i64* %100, align 8, !alias.scope !15
  store %"class.WTF::String"* null, %"class.WTF::String"** %102, align 8, !alias.scope !15
  store i32 0, i32* %103, align 8, !alias.scope !15
  br i1 %104, label %253, label %246

246:                                              ; preds = %242
  %247 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %105) #11, !noalias !15
  %248 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %247, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #11, !noalias !15
  %249 = ptrtoint i8* %248 to i64
  store atomic i64 %249, i64* %106 monotonic, align 8, !alias.scope !15
  %250 = lshr i64 %247, 3
  %251 = trunc i64 %250 to i32
  store i32 %251, i32* %103, align 8, !alias.scope !15
  %252 = bitcast i8* %248 to %"class.WTF::String"*
  br label %253

253:                                              ; preds = %246, %242
  %254 = phi %"class.WTF::String"* [ null, %242 ], [ %252, %246 ]
  store i32 1, i32* %107, align 4, !alias.scope !15
  %255 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8, !noalias !15
  %256 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %254, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %255, %"class.WTF::StringImpl"** %256, align 8, !noalias !15
  %257 = icmp eq %"class.WTF::StringImpl"* %255, null
  br i1 %257, label %275, label %258

258:                                              ; preds = %253
  %259 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %255, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %260 = load atomic i32, i32* %259 monotonic, align 4, !noalias !15
  %261 = and i32 %260, 2
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %263, label %275

263:                                              ; preds = %258
  %264 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %255, i64 0, i32 0
  %265 = load i32, i32* %264, align 4, !noalias !15
  %266 = zext i32 %265 to i33
  %267 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %266, i33 1) #11
  %268 = extractvalue { i33, i1 } %267, 1
  %269 = extractvalue { i33, i1 } %267, 0
  %270 = icmp slt i33 %269, 0
  %271 = or i1 %268, %270
  br i1 %271, label %272, label %273, !prof !14

272:                                              ; preds = %263
  call void @llvm.trap() #11, !noalias !15
  unreachable

273:                                              ; preds = %263
  %274 = trunc i33 %269 to i32
  store i32 %274, i32* %264, align 4, !noalias !15
  br label %275

275:                                              ; preds = %273, %258, %253
  %276 = load i32, i32* %98, align 4
  %277 = load i32, i32* %97, align 8
  %278 = icmp eq i32 %276, %277
  br i1 %278, label %301, label %279, !prof !14

279:                                              ; preds = %275
  %280 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %96, align 8
  %281 = zext i32 %276 to i64
  %282 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %280, i64 %281, i32 0
  %283 = load i8*, i8** %108, align 8
  %284 = icmp eq i8* %283, null
  br i1 %284, label %287, label %285

285:                                              ; preds = %279
  %286 = call i64 @strlen(i8* nonnull %283) #13
  br label %287

287:                                              ; preds = %285, %279
  %288 = phi i64 [ %286, %285 ], [ 0, %279 ]
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %282, i8* %283, i64 %288) #11
  %289 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %280, i64 %281, i32 1
  %290 = bitcast %"class.WTF::Vector.1"* %289 to i8*
  %291 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %280, i64 %281, i32 1, i32 0, i32 0, i32 1
  %292 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %280, i64 %281, i32 1, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* align 8 %290, i8 0, i64 16, i1 false) #11
  %293 = load i64, i64* %106, align 8
  %294 = bitcast %"class.WTF::Vector.1"* %289 to i64*
  store atomic i64 0, i64* %106 monotonic, align 8
  store atomic i64 %293, i64* %294 monotonic, align 8
  %295 = load i32, i32* %291, align 4
  %296 = load i32, i32* %103, align 8
  store i32 %296, i32* %291, align 4
  store i32 %295, i32* %103, align 8
  %297 = load i32, i32* %292, align 4
  %298 = load i32, i32* %107, align 4
  store i32 %298, i32* %292, align 4
  store i32 %297, i32* %107, align 4
  %299 = load i32, i32* %98, align 4
  %300 = add i32 %299, 1
  store i32 %300, i32* %98, align 4
  br label %302

301:                                              ; preds = %275
  call void @_ZN3WTF6VectorINSt3__14pairINS_6StringENS0_IS3_Lj0ENS_18PartitionAllocatorEEEEELj0ES4_E14AppendSlowCaseINS2_IPKcS5_EEEEvOT_(%"class.WTF::Vector"* nonnull %4, %"struct.std::__1::pair.221"* nonnull dereferenceable(24) %5) #11
  br label %302

302:                                              ; preds = %301, %287
  %303 = load %"class.WTF::String"*, %"class.WTF::String"** %102, align 8
  %304 = icmp eq %"class.WTF::String"* %303, null
  br i1 %304, label %337, label %305, !prof !13

305:                                              ; preds = %302
  %306 = bitcast %"class.WTF::String"* %303 to i8*
  %307 = load i32, i32* %107, align 4
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %335, label %309, !prof !14

309:                                              ; preds = %305
  %310 = zext i32 %307 to i64
  %311 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %303, i64 %310
  br label %312

312:                                              ; preds = %330, %309
  %313 = phi %"class.WTF::String"* [ %331, %330 ], [ %303, %309 ]
  %314 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %313, i64 0, i32 0, i32 0
  %315 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %314, align 8
  %316 = icmp eq %"class.WTF::StringImpl"* %315, null
  br i1 %316, label %330, label %317

317:                                              ; preds = %312
  %318 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %315, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %319 = load atomic i32, i32* %318 monotonic, align 4
  %320 = and i32 %319, 2
  %321 = icmp eq i32 %320, 0
  %322 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %315, i64 0, i32 0
  %323 = load i32, i32* %322, align 4
  br i1 %321, label %324, label %326

324:                                              ; preds = %317
  %325 = add i32 %323, -1
  store i32 %325, i32* %322, align 4
  br label %326

326:                                              ; preds = %324, %317
  %327 = phi i32 [ %325, %324 ], [ %323, %317 ]
  %328 = icmp eq i32 %327, 0
  br i1 %328, label %329, label %330

329:                                              ; preds = %326
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %315) #11
  br label %330

330:                                              ; preds = %329, %326, %312
  %331 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %313, i64 1
  %332 = icmp eq %"class.WTF::String"* %331, %311
  br i1 %332, label %333, label %312

333:                                              ; preds = %330
  store i32 0, i32* %107, align 4
  %334 = load i8*, i8** %109, align 8
  br label %335

335:                                              ; preds = %333, %305
  %336 = phi i8* [ %334, %333 ], [ %306, %305 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %336) #11
  store %"class.WTF::String"* null, %"class.WTF::String"** %102, align 8
  br label %337

337:                                              ; preds = %335, %302
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %99) #11
  %338 = getelementptr inbounds i8*, i8** %243, i64 1
  %339 = icmp eq i8** %338, getelementptr inbounds ([225 x i8*], [225 x i8*]* @_ZN5blink12_GLOBAL__N_123kDefaultAllowAttributesE, i64 1, i64 0)
  br i1 %339, label %110, label %242

340:                                              ; preds = %240, %206
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #11
  store i8* %12, i8** bitcast (%"class.WTF::StaticSingleton.30"* @_ZZN5blink12_GLOBAL__N_116GetDefaultConfigEvE9s_config_ to i8**), align 8
  store %"class.blink::PersistentNode"* null, %"class.blink::PersistentNode"** bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton.30", %"class.WTF::StaticSingleton.30"* @_ZZN5blink12_GLOBAL__N_116GetDefaultConfigEvE9s_config_, i64 0, i32 0, i32 0, i64 8) to %"class.blink::PersistentNode"**), align 8
  %341 = ptrtoint i8* %12 to i64
  switch i64 %341, label %342 [
    i64 0, label %368
    i64 -1, label %368
  ]

342:                                              ; preds = %340
  %343 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %344 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %343, i64 0, i32 1
  %345 = call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %344) #11
  %346 = icmp eq i8* %345, null
  br i1 %346, label %347, label %349, !prof !14

347:                                              ; preds = %342
  %348 = call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #11
  call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %344, i8* %348) #11
  br label %349

349:                                              ; preds = %347, %342
  %350 = phi i8* [ %348, %347 ], [ %345, %342 ]
  %351 = bitcast i8* %350 to %"class.blink::ThreadState"**
  %352 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %351, align 8
  %353 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %352, i64 0, i32 3, i32 0, i32 0, i32 0
  %354 = load %"class.blink::PersistentRegion"*, %"class.blink::PersistentRegion"** %353, align 8
  %355 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %354, i64 0, i32 0, i32 0
  %356 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %355, align 8
  %357 = icmp eq %"class.blink::PersistentNode"* %356, null
  br i1 %357, label %358, label %361, !prof !14

358:                                              ; preds = %349
  %359 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %354, i64 0, i32 0
  call void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"* %359) #11
  %360 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %355, align 8
  br label %361

361:                                              ; preds = %358, %349
  %362 = phi %"class.blink::PersistentNode"* [ %360, %358 ], [ %356, %349 ]
  %363 = bitcast %"class.blink::PersistentNode"* %362 to i64*
  %364 = load i64, i64* %363, align 8
  %365 = bitcast %"class.blink::PersistentRegion"* %354 to i64*
  store i64 %364, i64* %365, align 8
  %366 = bitcast %"class.blink::PersistentNode"* %362 to %"class.blink::PersistentBase"**
  store %"class.blink::PersistentBase"* bitcast (%"class.WTF::StaticSingleton.30"* @_ZZN5blink12_GLOBAL__N_116GetDefaultConfigEvE9s_config_ to %"class.blink::PersistentBase"*), %"class.blink::PersistentBase"** %366, align 8
  %367 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %362, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_15SanitizerConfigELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE0EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv, void (%"class.blink::Visitor"*, i8*)** %367, align 8
  store %"class.blink::PersistentNode"* %362, %"class.blink::PersistentNode"** bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton.30", %"class.WTF::StaticSingleton.30"* @_ZZN5blink12_GLOBAL__N_116GetDefaultConfigEvE9s_config_, i64 0, i32 0, i32 0, i64 8) to %"class.blink::PersistentNode"**), align 8
  br label %368

368:                                              ; preds = %340, %340, %361
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink12_GLOBAL__N_116GetDefaultConfigEvE9s_config_) #11
  br label %369

369:                                              ; preds = %8, %368, %0
  %370 = load %"class.blink::SanitizerConfig"*, %"class.blink::SanitizerConfig"** bitcast (%"class.WTF::StaticSingleton.30"* @_ZZN5blink12_GLOBAL__N_116GetDefaultConfigEvE9s_config_ to %"class.blink::SanitizerConfig"**), align 8
  ret %"class.blink::SanitizerConfig"* %370
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink19SanitizerConfigImplC2ERKS0_(%"struct.blink::SanitizerConfigImpl"*, %"struct.blink::SanitizerConfigImpl"* dereferenceable(128)) unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 0, i32 0, i32 2
  %5 = bitcast %"struct.blink::SanitizerConfigImpl"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 20, i1 false) #11
  %6 = load i32, i32* %4, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %43, label %8

8:                                                ; preds = %2
  tail call void @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable"* %3, i32 %6) #11
  %9 = load i32, i32* %4, align 4
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.WTF::String"*, %"class.WTF::String"** %11, align 8
  %13 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 %15
  br i1 %10, label %43, label %17

17:                                               ; preds = %8
  %18 = icmp eq i32 %14, 0
  br i1 %18, label %26, label %19

19:                                               ; preds = %17, %23
  %20 = phi %"class.WTF::String"* [ %24, %23 ], [ %12, %17 ]
  %21 = bitcast %"class.WTF::String"* %20 to i64*
  %22 = load i64, i64* %21, align 8
  switch i64 %22, label %26 [
    i64 -1, label %23
    i64 0, label %23
  ]

23:                                               ; preds = %19, %19
  %24 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %20, i64 1
  %25 = icmp eq %"class.WTF::String"* %24, %16
  br i1 %25, label %43, label %19

26:                                               ; preds = %19, %17
  %27 = phi %"class.WTF::String"* [ %12, %17 ], [ %20, %19 ]
  %28 = icmp eq %"class.WTF::String"* %27, %16
  br i1 %28, label %43, label %29

29:                                               ; preds = %26, %41
  %30 = phi %"class.WTF::String"* [ %35, %41 ], [ %27, %26 ]
  %31 = tail call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %3, %"class.WTF::String"* dereferenceable(8) %30, %"class.WTF::String"* dereferenceable(8) %30) #11
  %32 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %30, i64 1
  %33 = icmp eq %"class.WTF::String"* %32, %16
  br i1 %33, label %43, label %34

34:                                               ; preds = %29, %38
  %35 = phi %"class.WTF::String"* [ %39, %38 ], [ %32, %29 ]
  %36 = bitcast %"class.WTF::String"* %35 to i64*
  %37 = load i64, i64* %36, align 8
  switch i64 %37, label %41 [
    i64 -1, label %38
    i64 0, label %38
  ]

38:                                               ; preds = %34, %34
  %39 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %35, i64 1
  %40 = icmp eq %"class.WTF::String"* %39, %16
  br i1 %40, label %43, label %34

41:                                               ; preds = %34
  %42 = icmp eq %"class.WTF::String"* %35, %16
  br i1 %42, label %43, label %29

43:                                               ; preds = %23, %29, %41, %38, %2, %8, %26
  %44 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 1
  %45 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %44, i64 0, i32 0
  %46 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 1, i32 0, i32 2
  %47 = bitcast %"class.WTF::HashSet"* %44 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 20, i1 false) #11
  %48 = load i32, i32* %46, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %85, label %50

50:                                               ; preds = %43
  tail call void @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable"* %45, i32 %48) #11
  %51 = load i32, i32* %46, align 4
  %52 = icmp eq i32 %51, 0
  %53 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 1, i32 0, i32 0
  %54 = load %"class.WTF::String"*, %"class.WTF::String"** %53, align 8
  %55 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 1, i32 0, i32 1
  %56 = load i32, i32* %55, align 8
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %54, i64 %57
  br i1 %52, label %85, label %59

59:                                               ; preds = %50
  %60 = icmp eq i32 %56, 0
  br i1 %60, label %68, label %61

61:                                               ; preds = %59, %65
  %62 = phi %"class.WTF::String"* [ %66, %65 ], [ %54, %59 ]
  %63 = bitcast %"class.WTF::String"* %62 to i64*
  %64 = load i64, i64* %63, align 8
  switch i64 %64, label %68 [
    i64 -1, label %65
    i64 0, label %65
  ]

65:                                               ; preds = %61, %61
  %66 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %62, i64 1
  %67 = icmp eq %"class.WTF::String"* %66, %58
  br i1 %67, label %85, label %61

68:                                               ; preds = %61, %59
  %69 = phi %"class.WTF::String"* [ %54, %59 ], [ %62, %61 ]
  %70 = icmp eq %"class.WTF::String"* %69, %58
  br i1 %70, label %85, label %71

71:                                               ; preds = %68, %83
  %72 = phi %"class.WTF::String"* [ %77, %83 ], [ %69, %68 ]
  %73 = tail call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %45, %"class.WTF::String"* dereferenceable(8) %72, %"class.WTF::String"* dereferenceable(8) %72) #11
  %74 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %72, i64 1
  %75 = icmp eq %"class.WTF::String"* %74, %58
  br i1 %75, label %85, label %76

76:                                               ; preds = %71, %80
  %77 = phi %"class.WTF::String"* [ %81, %80 ], [ %74, %71 ]
  %78 = bitcast %"class.WTF::String"* %77 to i64*
  %79 = load i64, i64* %78, align 8
  switch i64 %79, label %83 [
    i64 -1, label %80
    i64 0, label %80
  ]

80:                                               ; preds = %76, %76
  %81 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %77, i64 1
  %82 = icmp eq %"class.WTF::String"* %81, %58
  br i1 %82, label %85, label %76

83:                                               ; preds = %76
  %84 = icmp eq %"class.WTF::String"* %77, %58
  br i1 %84, label %85, label %71

85:                                               ; preds = %65, %71, %83, %80, %43, %50, %68
  %86 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 2
  %87 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %86, i64 0, i32 0
  %88 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 2, i32 0, i32 2
  %89 = bitcast %"class.WTF::HashSet"* %86 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %89, i8 0, i64 20, i1 false) #11
  %90 = load i32, i32* %88, align 4
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %127, label %92

92:                                               ; preds = %85
  tail call void @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable"* %87, i32 %90) #11
  %93 = load i32, i32* %88, align 4
  %94 = icmp eq i32 %93, 0
  %95 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 2, i32 0, i32 0
  %96 = load %"class.WTF::String"*, %"class.WTF::String"** %95, align 8
  %97 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 2, i32 0, i32 1
  %98 = load i32, i32* %97, align 8
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %96, i64 %99
  br i1 %94, label %127, label %101

101:                                              ; preds = %92
  %102 = icmp eq i32 %98, 0
  br i1 %102, label %110, label %103

103:                                              ; preds = %101, %107
  %104 = phi %"class.WTF::String"* [ %108, %107 ], [ %96, %101 ]
  %105 = bitcast %"class.WTF::String"* %104 to i64*
  %106 = load i64, i64* %105, align 8
  switch i64 %106, label %110 [
    i64 -1, label %107
    i64 0, label %107
  ]

107:                                              ; preds = %103, %103
  %108 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %104, i64 1
  %109 = icmp eq %"class.WTF::String"* %108, %100
  br i1 %109, label %127, label %103

110:                                              ; preds = %103, %101
  %111 = phi %"class.WTF::String"* [ %96, %101 ], [ %104, %103 ]
  %112 = icmp eq %"class.WTF::String"* %111, %100
  br i1 %112, label %127, label %113

113:                                              ; preds = %110, %125
  %114 = phi %"class.WTF::String"* [ %119, %125 ], [ %111, %110 ]
  %115 = tail call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %87, %"class.WTF::String"* dereferenceable(8) %114, %"class.WTF::String"* dereferenceable(8) %114) #11
  %116 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %114, i64 1
  %117 = icmp eq %"class.WTF::String"* %116, %100
  br i1 %117, label %127, label %118

118:                                              ; preds = %113, %122
  %119 = phi %"class.WTF::String"* [ %123, %122 ], [ %116, %113 ]
  %120 = bitcast %"class.WTF::String"* %119 to i64*
  %121 = load i64, i64* %120, align 8
  switch i64 %121, label %125 [
    i64 -1, label %122
    i64 0, label %122
  ]

122:                                              ; preds = %118, %118
  %123 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %119, i64 1
  %124 = icmp eq %"class.WTF::String"* %123, %100
  br i1 %124, label %127, label %118

125:                                              ; preds = %118
  %126 = icmp eq %"class.WTF::String"* %119, %100
  br i1 %126, label %127, label %113

127:                                              ; preds = %107, %113, %125, %122, %85, %92, %110
  %128 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 3
  %129 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %128, i64 0, i32 0
  %130 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 3, i32 0, i32 2
  %131 = bitcast %"class.WTF::HashMap"* %128 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %131, i8 0, i64 20, i1 false) #11
  %132 = load i32, i32* %130, align 4
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %170, label %134

134:                                              ; preds = %127
  tail call void @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E22ReserveCapacityForSizeEj(%"class.WTF::HashTable.8"* %129, i32 %132) #11
  %135 = load i32, i32* %130, align 4
  %136 = icmp eq i32 %135, 0
  %137 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 3, i32 0, i32 0
  %138 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %137, align 8
  %139 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 3, i32 0, i32 1
  %140 = load i32, i32* %139, align 8
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %138, i64 %141
  br i1 %136, label %170, label %143

143:                                              ; preds = %134
  %144 = icmp eq i32 %140, 0
  br i1 %144, label %152, label %145

145:                                              ; preds = %143, %149
  %146 = phi %"struct.WTF::KeyValuePair"* [ %150, %149 ], [ %138, %143 ]
  %147 = bitcast %"struct.WTF::KeyValuePair"* %146 to i64*
  %148 = load i64, i64* %147, align 8
  switch i64 %148, label %152 [
    i64 -1, label %149
    i64 0, label %149
  ]

149:                                              ; preds = %145, %145
  %150 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %146, i64 1
  %151 = icmp eq %"struct.WTF::KeyValuePair"* %150, %142
  br i1 %151, label %170, label %145

152:                                              ; preds = %145, %143
  %153 = phi %"struct.WTF::KeyValuePair"* [ %138, %143 ], [ %146, %145 ]
  %154 = icmp eq %"struct.WTF::KeyValuePair"* %153, %142
  br i1 %154, label %170, label %155

155:                                              ; preds = %152, %168
  %156 = phi %"struct.WTF::KeyValuePair"* [ %162, %168 ], [ %153, %152 ]
  %157 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %156, i64 0, i32 0
  %158 = tail call { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6insertINS_22IdentityHashTranslatorIS8_SD_S4_EERKS1_RKS6_EENS_18HashTableAddResultISE_S6_EEOT0_OT1_(%"class.WTF::HashTable.8"* %129, %"class.WTF::String"* dereferenceable(8) %157, %"struct.WTF::KeyValuePair"* dereferenceable(24) %156) #11
  %159 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %156, i64 1
  %160 = icmp eq %"struct.WTF::KeyValuePair"* %159, %142
  br i1 %160, label %170, label %161

161:                                              ; preds = %155, %165
  %162 = phi %"struct.WTF::KeyValuePair"* [ %166, %165 ], [ %159, %155 ]
  %163 = bitcast %"struct.WTF::KeyValuePair"* %162 to i64*
  %164 = load i64, i64* %163, align 8
  switch i64 %164, label %168 [
    i64 -1, label %165
    i64 0, label %165
  ]

165:                                              ; preds = %161, %161
  %166 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %162, i64 1
  %167 = icmp eq %"struct.WTF::KeyValuePair"* %166, %142
  br i1 %167, label %170, label %161

168:                                              ; preds = %161
  %169 = icmp eq %"struct.WTF::KeyValuePair"* %162, %142
  br i1 %169, label %170, label %155

170:                                              ; preds = %149, %155, %168, %165, %127, %134, %152
  %171 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 4
  %172 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %171, i64 0, i32 0
  %173 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 4, i32 0, i32 2
  %174 = bitcast %"class.WTF::HashMap"* %171 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %174, i8 0, i64 20, i1 false) #11
  %175 = load i32, i32* %173, align 4
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %213, label %177

177:                                              ; preds = %170
  tail call void @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E22ReserveCapacityForSizeEj(%"class.WTF::HashTable.8"* %172, i32 %175) #11
  %178 = load i32, i32* %173, align 4
  %179 = icmp eq i32 %178, 0
  %180 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 4, i32 0, i32 0
  %181 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %180, align 8
  %182 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 4, i32 0, i32 1
  %183 = load i32, i32* %182, align 8
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %181, i64 %184
  br i1 %179, label %213, label %186

186:                                              ; preds = %177
  %187 = icmp eq i32 %183, 0
  br i1 %187, label %195, label %188

188:                                              ; preds = %186, %192
  %189 = phi %"struct.WTF::KeyValuePair"* [ %193, %192 ], [ %181, %186 ]
  %190 = bitcast %"struct.WTF::KeyValuePair"* %189 to i64*
  %191 = load i64, i64* %190, align 8
  switch i64 %191, label %195 [
    i64 -1, label %192
    i64 0, label %192
  ]

192:                                              ; preds = %188, %188
  %193 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %189, i64 1
  %194 = icmp eq %"struct.WTF::KeyValuePair"* %193, %185
  br i1 %194, label %213, label %188

195:                                              ; preds = %188, %186
  %196 = phi %"struct.WTF::KeyValuePair"* [ %181, %186 ], [ %189, %188 ]
  %197 = icmp eq %"struct.WTF::KeyValuePair"* %196, %185
  br i1 %197, label %213, label %198

198:                                              ; preds = %195, %211
  %199 = phi %"struct.WTF::KeyValuePair"* [ %205, %211 ], [ %196, %195 ]
  %200 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %199, i64 0, i32 0
  %201 = tail call { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6insertINS_22IdentityHashTranslatorIS8_SD_S4_EERKS1_RKS6_EENS_18HashTableAddResultISE_S6_EEOT0_OT1_(%"class.WTF::HashTable.8"* %172, %"class.WTF::String"* dereferenceable(8) %200, %"struct.WTF::KeyValuePair"* dereferenceable(24) %199) #11
  %202 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %199, i64 1
  %203 = icmp eq %"struct.WTF::KeyValuePair"* %202, %185
  br i1 %203, label %213, label %204

204:                                              ; preds = %198, %208
  %205 = phi %"struct.WTF::KeyValuePair"* [ %209, %208 ], [ %202, %198 ]
  %206 = bitcast %"struct.WTF::KeyValuePair"* %205 to i64*
  %207 = load i64, i64* %206, align 8
  switch i64 %207, label %211 [
    i64 -1, label %208
    i64 0, label %208
  ]

208:                                              ; preds = %204, %204
  %209 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %205, i64 1
  %210 = icmp eq %"struct.WTF::KeyValuePair"* %209, %185
  br i1 %210, label %213, label %204

211:                                              ; preds = %204
  %212 = icmp eq %"struct.WTF::KeyValuePair"* %205, %185
  br i1 %212, label %213, label %198

213:                                              ; preds = %192, %198, %211, %208, %170, %177, %195
  %214 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %0, i64 0, i32 5
  %215 = getelementptr inbounds %"struct.blink::SanitizerConfigImpl", %"struct.blink::SanitizerConfigImpl"* %1, i64 0, i32 5
  %216 = load i8, i8* %215, align 8, !range !6
  store i8 %216, i8* %214, align 8
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %2, %5
  %6 = phi i32 [ %9, %5 ], [ %1, %2 ]
  %7 = phi i32 [ %8, %5 ], [ %1, %2 ]
  %8 = or i32 %7, %6
  %9 = lshr i32 %6, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %5

11:                                               ; preds = %5
  %12 = shl i32 %8, 1
  %13 = add i32 %12, 2
  %14 = icmp ugt i32 %13, 8
  %15 = select i1 %14, i32 %13, i32 8
  br label %16

16:                                               ; preds = %11, %2
  %17 = phi i32 [ 8, %2 ], [ %15, %11 ]
  %18 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = icmp ugt i32 %17, %19
  br i1 %20, label %21, label %32

21:                                               ; preds = %16
  %22 = icmp slt i32 %17, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %21
  %24 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #11
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 1094, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0)) #11
  %25 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #11
  br label %26

26:                                               ; preds = %21, %23
  %27 = zext i32 %17 to i64
  %28 = shl nuw nsw i64 %27, 3
  %29 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #11
  call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 0, i64 %28, i1 false) #11
  %30 = bitcast i8* %29 to %"class.WTF::String"*
  %31 = call %"class.WTF::String"* @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_(%"class.WTF::HashTable"* %0, %"class.WTF::String"* %30, i32 %17, %"class.WTF::String"* null) #11
  br label %32

32:                                               ; preds = %26, %16
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #5

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::String"* @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_(%"class.WTF::HashTable"*, %"class.WTF::String"*, i32, %"class.WTF::String"*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.WTF::HashTable", align 8
  %6 = bitcast %"class.WTF::HashTable"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #11
  %7 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %5, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %5, i64 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %5, i64 0, i32 3
  %11 = bitcast %"class.WTF::HashTable"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  store %"class.WTF::String"* %1, %"class.WTF::String"** %7, align 8
  store i32 %2, i32* %8, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  br i1 %14, label %16, label %21

16:                                               ; preds = %4
  %17 = ptrtoint %"class.WTF::String"* %1 to i64
  %18 = bitcast %"class.WTF::HashTable"* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.WTF::HashTable"* %5 to i64*
  br label %28

21:                                               ; preds = %4
  %22 = load %"class.WTF::String"*, %"class.WTF::String"** %15, align 8
  %23 = ptrtoint %"class.WTF::String"* %22 to i64
  br label %71

24:                                               ; preds = %110
  %25 = bitcast %"class.WTF::HashTable"* %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.WTF::HashTable"* %0 to i64*
  br label %28

28:                                               ; preds = %16, %24
  %29 = phi i64* [ %20, %16 ], [ %25, %24 ]
  %30 = phi i64* [ %18, %16 ], [ %27, %24 ]
  %31 = phi i64 [ %17, %16 ], [ %26, %24 ]
  %32 = phi i64 [ %19, %16 ], [ %111, %24 ]
  %33 = phi %"class.WTF::String"* [ null, %16 ], [ %114, %24 ]
  %34 = phi i32 [ 0, %16 ], [ %112, %24 ]
  store atomic i64 %31, i64* %30 monotonic, align 8
  store i32 %2, i32* %12, align 8
  store i64 %32, i64* %29, align 8
  store i32 %34, i32* %8, align 8
  %35 = inttoptr i64 %32 to %"class.WTF::String"*
  %36 = icmp eq i64 %32, 0
  br i1 %36, label %67, label %37

37:                                               ; preds = %28
  %38 = icmp eq i32 %34, 0
  br i1 %38, label %65, label %39

39:                                               ; preds = %37
  %40 = zext i32 %34 to i64
  br label %41

41:                                               ; preds = %62, %39
  %42 = phi i64 [ 0, %39 ], [ %63, %62 ]
  %43 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %35, i64 %42
  %44 = bitcast %"class.WTF::String"* %43 to i8**
  %45 = load i8*, i8** %44, align 8
  %46 = bitcast i8* %45 to %"class.WTF::StringImpl"*
  %47 = ptrtoint i8* %45 to i64
  switch i64 %47, label %48 [
    i64 -1, label %62
    i64 0, label %62
  ]

48:                                               ; preds = %41
  %49 = getelementptr inbounds i8, i8* %45, i64 8
  %50 = bitcast i8* %49 to i32*
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = bitcast i8* %45 to i32*
  %55 = load i32, i32* %54, align 4
  br i1 %53, label %56, label %58

56:                                               ; preds = %48
  %57 = add i32 %55, -1
  store i32 %57, i32* %54, align 4
  br label %58

58:                                               ; preds = %56, %48
  %59 = phi i32 [ %57, %56 ], [ %55, %48 ]
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %46) #11
  br label %62

62:                                               ; preds = %61, %58, %41, %41
  %63 = add nuw nsw i64 %42, 1
  %64 = icmp eq i64 %63, %40
  br i1 %64, label %65, label %41

65:                                               ; preds = %62, %37
  %66 = inttoptr i64 %32 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %66) #11
  store atomic i64 0, i64* %29 monotonic, align 8
  store i32 0, i32* %8, align 8
  store i32 0, i32* %9, align 4
  br label %67

67:                                               ; preds = %28, %65
  %68 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %69 = load i32, i32* %68, align 8
  %70 = and i32 %69, -2147483648
  store i32 %70, i32* %68, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #11
  ret %"class.WTF::String"* %33

71:                                               ; preds = %21, %110
  %72 = phi i64 [ %111, %110 ], [ %23, %21 ]
  %73 = phi i32 [ %112, %110 ], [ %13, %21 ]
  %74 = phi %"class.WTF::String"* [ %113, %110 ], [ %22, %21 ]
  %75 = phi %"class.WTF::String"* [ %114, %110 ], [ null, %21 ]
  %76 = phi i32 [ %115, %110 ], [ 0, %21 ]
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %74, i64 %77
  %79 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %78, i64 0, i32 0, i32 0
  %80 = bitcast %"class.WTF::String"* %78 to i64*
  %81 = load i64, i64* %80, align 8
  switch i64 %81, label %82 [
    i64 -1, label %110
    i64 0, label %110
  ]

82:                                               ; preds = %71
  %83 = call { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE16LookupForWritingERKS1_(%"class.WTF::HashTable"* nonnull %5, %"class.WTF::String"* dereferenceable(8) %78) #11
  %84 = extractvalue { %"class.WTF::String"*, i8 } %83, 0
  %85 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %84, i64 0, i32 0, i32 0
  %86 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %85, align 8
  %87 = icmp eq %"class.WTF::StringImpl"* %86, null
  br i1 %87, label %101, label %88

88:                                               ; preds = %82
  %89 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = load atomic i32, i32* %89 monotonic, align 4
  %91 = and i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 0
  %94 = load i32, i32* %93, align 4
  br i1 %92, label %95, label %97

95:                                               ; preds = %88
  %96 = add i32 %94, -1
  store i32 %96, i32* %93, align 4
  br label %97

97:                                               ; preds = %95, %88
  %98 = phi i32 [ %96, %95 ], [ %94, %88 ]
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %101

100:                                              ; preds = %97
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %86) #11
  br label %101

101:                                              ; preds = %82, %97, %100
  %102 = load i64, i64* %80, align 8
  %103 = bitcast %"class.WTF::String"* %84 to i64*
  store i64 %102, i64* %103, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %79, align 8
  %104 = load %"class.WTF::String"*, %"class.WTF::String"** %15, align 8
  %105 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %104, i64 %77
  %106 = icmp eq %"class.WTF::String"* %105, %3
  %107 = select i1 %106, %"class.WTF::String"* %84, %"class.WTF::String"* %75
  %108 = load i32, i32* %12, align 8
  %109 = ptrtoint %"class.WTF::String"* %104 to i64
  br label %110

110:                                              ; preds = %71, %71, %101
  %111 = phi i64 [ %72, %71 ], [ %109, %101 ], [ %72, %71 ]
  %112 = phi i32 [ %73, %71 ], [ %108, %101 ], [ %73, %71 ]
  %113 = phi %"class.WTF::String"* [ %74, %71 ], [ %104, %101 ], [ %74, %71 ]
  %114 = phi %"class.WTF::String"* [ %75, %71 ], [ %107, %101 ], [ %75, %71 ]
  %115 = add i32 %76, 1
  %116 = icmp eq i32 %115, %112
  br i1 %116, label %24, label %71
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE16LookupForWritingERKS1_(%"class.WTF::HashTable"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %4 = load %"class.WTF::String"*, %"class.WTF::String"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = lshr i32 %12, 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %2
  %16 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %10) #11
  br label %17

17:                                               ; preds = %15, %2
  %18 = phi i32 [ %16, %15 ], [ %13, %2 ]
  %19 = and i32 %18, %7
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 %20
  %22 = ptrtoint %"class.WTF::String"* %21 to i64
  %23 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %21, i64 0, i32 0, i32 0
  %24 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %23, align 8
  %25 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %25, label %42, label %26

26:                                               ; preds = %17
  %27 = xor i32 %18, -1
  %28 = lshr i32 %18, 23
  %29 = add i32 %28, %27
  %30 = shl i32 %29, 12
  %31 = xor i32 %30, %29
  %32 = lshr i32 %31, 7
  %33 = xor i32 %32, %31
  %34 = shl i32 %33, 2
  %35 = xor i32 %34, %33
  %36 = lshr i32 %35, 20
  %37 = xor i32 %36, %35
  %38 = or i32 %37, 1
  %39 = zext i32 %38 to i64
  br label %48

40:                                               ; preds = %61
  %41 = ptrtoint %"class.WTF::String"* %67 to i64
  br label %42

42:                                               ; preds = %40, %17
  %43 = phi i64 [ %22, %17 ], [ %41, %40 ]
  %44 = phi %"class.WTF::String"* [ null, %17 ], [ %62, %40 ]
  %45 = icmp eq %"class.WTF::String"* %44, null
  %46 = ptrtoint %"class.WTF::String"* %44 to i64
  %47 = select i1 %45, i64 %43, i64 %46
  br label %72

48:                                               ; preds = %61, %26
  %49 = phi %"class.WTF::String"* [ null, %26 ], [ %62, %61 ]
  %50 = phi %"class.WTF::StringImpl"* [ %24, %26 ], [ %70, %61 ]
  %51 = phi i64 [ %22, %26 ], [ %68, %61 ]
  %52 = phi %"class.WTF::String"* [ %21, %26 ], [ %67, %61 ]
  %53 = phi i64 [ %20, %26 ], [ %66, %61 ]
  %54 = phi i64 [ 0, %26 ], [ %64, %61 ]
  %55 = bitcast %"class.WTF::String"* %52 to i8**
  %56 = load i8*, i8** %55, align 8
  %57 = icmp eq i8* %56, inttoptr (i64 -1 to i8*)
  br i1 %57, label %61, label %58

58:                                               ; preds = %48
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %60 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* nonnull %50, %"class.WTF::StringImpl"* %59) #11
  br i1 %60, label %72, label %61

61:                                               ; preds = %58, %48
  %62 = phi %"class.WTF::String"* [ %49, %58 ], [ %52, %48 ]
  %63 = icmp eq i64 %54, 0
  %64 = select i1 %63, i64 %39, i64 %54
  %65 = add i64 %64, %53
  %66 = and i64 %65, %8
  %67 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 %66
  %68 = ptrtoint %"class.WTF::String"* %67 to i64
  %69 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %67, i64 0, i32 0, i32 0
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %71 = icmp eq %"class.WTF::StringImpl"* %70, null
  br i1 %71, label %40, label %48

72:                                               ; preds = %58, %42
  %73 = phi i64 [ %47, %42 ], [ %51, %58 ]
  %74 = phi i8 [ 0, %42 ], [ 1, %58 ]
  %75 = inttoptr i64 %73 to %"class.WTF::String"*
  %76 = insertvalue { %"class.WTF::String"*, i8 } undef, %"class.WTF::String"* %75, 0
  %77 = insertvalue { %"class.WTF::String"*, i8 } %76, i8 %74, 1
  ret { %"class.WTF::String"*, i8 } %77
}

declare i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"*) local_unnamed_addr #5

declare zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #5

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #5

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"*, %"class.WTF::String"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"class.WTF::String"*, %"class.WTF::String"** %4, align 8
  %6 = icmp eq %"class.WTF::String"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"class.WTF::String"* @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable"* %0, %"class.WTF::String"* null)
  %9 = load %"class.WTF::String"*, %"class.WTF::String"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"class.WTF::String"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %10
  %23 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %17) #11
  br label %24

24:                                               ; preds = %10, %22
  %25 = phi i32 [ %23, %22 ], [ %20, %10 ]
  %26 = and i32 %25, %14
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 %27
  %29 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %28, i64 0, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %31, label %78, label %32

32:                                               ; preds = %24
  %33 = xor i32 %25, -1
  %34 = lshr i32 %25, 23
  %35 = add i32 %34, %33
  %36 = shl i32 %35, 12
  %37 = xor i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = xor i32 %38, %37
  %40 = shl i32 %39, 2
  %41 = xor i32 %40, %39
  %42 = lshr i32 %41, 20
  %43 = xor i32 %42, %41
  %44 = or i32 %43, 1
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %32, %58
  %47 = phi %"class.WTF::StringImpl"* [ %30, %32 ], [ %66, %58 ]
  %48 = phi %"class.WTF::String"* [ %28, %32 ], [ %64, %58 ]
  %49 = phi %"class.WTF::String"* [ null, %32 ], [ %59, %58 ]
  %50 = phi i64 [ %27, %32 ], [ %63, %58 ]
  %51 = phi i64 [ 0, %32 ], [ %61, %58 ]
  %52 = bitcast %"class.WTF::String"* %48 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq i8* %53, inttoptr (i64 -1 to i8*)
  br i1 %54, label %58, label %55

55:                                               ; preds = %46
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %57 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* nonnull %47, %"class.WTF::StringImpl"* %56) #11
  br i1 %57, label %131, label %58

58:                                               ; preds = %46, %55
  %59 = phi %"class.WTF::String"* [ %49, %55 ], [ %48, %46 ]
  %60 = icmp eq i64 %51, 0
  %61 = select i1 %60, i64 %45, i64 %51
  %62 = add i64 %61, %50
  %63 = and i64 %62, %15
  %64 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 %63
  %65 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %64, i64 0, i32 0, i32 0
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %65, align 8
  %67 = icmp eq %"class.WTF::StringImpl"* %66, null
  br i1 %67, label %68, label %46

68:                                               ; preds = %58
  %69 = icmp eq %"class.WTF::String"* %59, null
  br i1 %69, label %78, label %70

70:                                               ; preds = %68
  %71 = bitcast %"class.WTF::String"* %59 to i64*
  store i64 0, i64* %71, align 8
  %72 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %73 = load i32, i32* %72, align 8
  %74 = add i32 %73, 2147483647
  %75 = and i32 %74, 2147483647
  %76 = and i32 %73, -2147483648
  %77 = or i32 %75, %76
  store i32 %77, i32* %72, align 8
  br label %78

78:                                               ; preds = %24, %68, %70
  %79 = phi %"class.WTF::String"* [ %59, %70 ], [ %64, %68 ], [ %28, %24 ]
  %80 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %81 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %80, align 8
  %82 = icmp eq %"class.WTF::StringImpl"* %81, null
  br i1 %82, label %100, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = load atomic i32, i32* %84 monotonic, align 4
  %86 = and i32 %85, 2
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %100

88:                                               ; preds = %83
  %89 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 0
  %90 = load i32, i32* %89, align 4
  %91 = zext i32 %90 to i33
  %92 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %91, i33 1) #11
  %93 = extractvalue { i33, i1 } %92, 1
  %94 = extractvalue { i33, i1 } %92, 0
  %95 = icmp slt i33 %94, 0
  %96 = or i1 %93, %95
  br i1 %96, label %97, label %98, !prof !14

97:                                               ; preds = %88
  tail call void @llvm.trap() #11
  unreachable

98:                                               ; preds = %88
  %99 = trunc i33 %94 to i32
  store i32 %99, i32* %89, align 4
  br label %100

100:                                              ; preds = %98, %83, %78
  %101 = ptrtoint %"class.WTF::StringImpl"* %81 to i64
  %102 = bitcast %"class.WTF::String"* %79 to i64*
  %103 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %79, i64 0, i32 0, i32 0
  %104 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %103, align 8
  store i64 %101, i64* %102, align 8
  %105 = icmp eq %"class.WTF::StringImpl"* %104, null
  br i1 %105, label %119, label %106

106:                                              ; preds = %100
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %104, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %108 = load atomic i32, i32* %107 monotonic, align 4
  %109 = and i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %104, i64 0, i32 0
  %112 = load i32, i32* %111, align 4
  br i1 %110, label %113, label %115

113:                                              ; preds = %106
  %114 = add i32 %112, -1
  store i32 %114, i32* %111, align 4
  br label %115

115:                                              ; preds = %113, %106
  %116 = phi i32 [ %114, %113 ], [ %112, %106 ]
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %119

118:                                              ; preds = %115
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %104) #11
  br label %119

119:                                              ; preds = %100, %115, %118
  %120 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %121 = load i32, i32* %120, align 4
  %122 = add i32 %121, 1
  store i32 %122, i32* %120, align 4
  %123 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %124 = load i32, i32* %123, align 8
  %125 = add i32 %124, %122
  %126 = shl i32 %125, 1
  %127 = load i32, i32* %12, align 8
  %128 = icmp ult i32 %126, %127
  br i1 %128, label %131, label %129

129:                                              ; preds = %119
  %130 = tail call %"class.WTF::String"* @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable"* %0, %"class.WTF::String"* %79)
  br label %131

131:                                              ; preds = %55, %119, %129
  %132 = phi i8 [ 1, %119 ], [ 1, %129 ], [ 0, %55 ]
  %133 = phi %"class.WTF::String"* [ %79, %119 ], [ %130, %129 ], [ %48, %55 ]
  %134 = insertvalue { %"class.WTF::String"*, i8 } undef, %"class.WTF::String"* %133, 0
  %135 = insertvalue { %"class.WTF::String"*, i8 } %134, i8 %132, 1
  ret { %"class.WTF::String"*, i8 } %135
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::String"* @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable"*, %"class.WTF::String"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #11
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #11
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* %22, i8* %23) #11
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #11
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #11
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #11
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 3
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #11
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #11
  %36 = bitcast i8* %35 to %"class.WTF::String"*
  %37 = call %"class.WTF::String"* @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_(%"class.WTF::HashTable"* %0, %"class.WTF::String"* %36, i32 %32, %"class.WTF::String"* %1) #11
  ret %"class.WTF::String"* %37
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #5

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E22ReserveCapacityForSizeEj(%"class.WTF::HashTable.8"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %2, %5
  %6 = phi i32 [ %9, %5 ], [ %1, %2 ]
  %7 = phi i32 [ %8, %5 ], [ %1, %2 ]
  %8 = or i32 %7, %6
  %9 = lshr i32 %6, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %5

11:                                               ; preds = %5
  %12 = shl i32 %8, 1
  %13 = add i32 %12, 2
  %14 = icmp ugt i32 %13, 8
  %15 = select i1 %14, i32 %13, i32 8
  br label %16

16:                                               ; preds = %11, %2
  %17 = phi i32 [ 8, %2 ], [ %15, %11 ]
  %18 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = icmp ugt i32 %17, %19
  br i1 %20, label %21, label %63

21:                                               ; preds = %16
  %22 = icmp slt i32 %17, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %21
  %24 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #11
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 1094, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0)) #11
  %25 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #11
  br label %26

26:                                               ; preds = %21, %23
  %27 = zext i32 %17 to i64
  %28 = mul nuw nsw i64 %27, 24
  %29 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([133 x i8], [133 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_6StringENS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEEEEPKcv, i64 0, i64 0)) #11
  %30 = bitcast i8* %29 to %"struct.WTF::KeyValuePair"*
  %31 = and i64 %27, 1
  %32 = sub nsw i64 %27, %31
  br label %33

33:                                               ; preds = %33, %26
  %34 = phi i64 [ 0, %26 ], [ %49, %33 ]
  %35 = phi i64 [ %32, %26 ], [ %50, %33 ]
  %36 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %34
  %37 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %34, i32 1
  %38 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %34, i32 1, i32 0, i32 0, i32 1
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %34, i32 1, i32 0, i32 0, i32 2
  %40 = bitcast %"class.WTF::Vector.1"* %37 to i64*
  %41 = bitcast %"struct.WTF::KeyValuePair"* %36 to i64*
  store i64 0, i64* %41, align 8
  store atomic i64 0, i64* %40 monotonic, align 8
  store i32 0, i32* %38, align 4
  store i32 0, i32* %39, align 4
  %42 = or i64 %34, 1
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %42
  %44 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %42, i32 1
  %45 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %42, i32 1, i32 0, i32 0, i32 1
  %46 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %42, i32 1, i32 0, i32 0, i32 2
  %47 = bitcast %"class.WTF::Vector.1"* %44 to i64*
  %48 = bitcast %"struct.WTF::KeyValuePair"* %43 to i64*
  store i64 0, i64* %48, align 8
  store atomic i64 0, i64* %47 monotonic, align 8
  store i32 0, i32* %45, align 4
  store i32 0, i32* %46, align 4
  %49 = add nuw nsw i64 %34, 2
  %50 = add i64 %35, -2
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %33

52:                                               ; preds = %33
  %53 = icmp eq i64 %31, 0
  br i1 %53, label %61, label %54

54:                                               ; preds = %52
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %49
  %56 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %49, i32 1
  %57 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %49, i32 1, i32 0, i32 0, i32 1
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 %49, i32 1, i32 0, i32 0, i32 2
  %59 = bitcast %"class.WTF::Vector.1"* %56 to i64*
  %60 = bitcast %"struct.WTF::KeyValuePair"* %55 to i64*
  store i64 0, i64* %60, align 8
  store atomic i64 0, i64* %59 monotonic, align 8
  store i32 0, i32* %57, align 4
  store i32 0, i32* %58, align 4
  br label %61

61:                                               ; preds = %52, %54
  %62 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E8RehashToEPS6_jSF_(%"class.WTF::HashTable.8"* %0, %"struct.WTF::KeyValuePair"* %30, i32 %17, %"struct.WTF::KeyValuePair"* null) #11
  br label %63

63:                                               ; preds = %61, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E8RehashToEPS6_jSF_(%"class.WTF::HashTable.8"*, %"struct.WTF::KeyValuePair"*, i32, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.WTF::HashTable.8", align 8
  %6 = bitcast %"class.WTF::HashTable.8"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #11
  %7 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %5, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %5, i64 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %5, i64 0, i32 3
  %11 = bitcast %"class.WTF::HashTable.8"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  store %"struct.WTF::KeyValuePair"* %1, %"struct.WTF::KeyValuePair"** %7, align 8
  store i32 %2, i32* %8, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 0
  br i1 %14, label %16, label %21

16:                                               ; preds = %4
  %17 = ptrtoint %"struct.WTF::KeyValuePair"* %1 to i64
  %18 = bitcast %"class.WTF::HashTable.8"* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.WTF::HashTable.8"* %5 to i64*
  br label %28

21:                                               ; preds = %4
  %22 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %15, align 8
  %23 = ptrtoint %"struct.WTF::KeyValuePair"* %22 to i64
  br label %114

24:                                               ; preds = %134
  %25 = bitcast %"class.WTF::HashTable.8"* %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.WTF::HashTable.8"* %0 to i64*
  br label %28

28:                                               ; preds = %16, %24
  %29 = phi i64* [ %20, %16 ], [ %25, %24 ]
  %30 = phi i64* [ %18, %16 ], [ %27, %24 ]
  %31 = phi i64 [ %17, %16 ], [ %26, %24 ]
  %32 = phi i64 [ %19, %16 ], [ %135, %24 ]
  %33 = phi %"struct.WTF::KeyValuePair"* [ null, %16 ], [ %138, %24 ]
  %34 = phi i32 [ 0, %16 ], [ %136, %24 ]
  store atomic i64 %31, i64* %30 monotonic, align 8
  store i32 %2, i32* %12, align 8
  store i64 %32, i64* %29, align 8
  store i32 %34, i32* %8, align 8
  %35 = inttoptr i64 %32 to %"struct.WTF::KeyValuePair"*
  %36 = icmp eq i64 %32, 0
  br i1 %36, label %110, label %37

37:                                               ; preds = %28
  %38 = icmp eq i32 %34, 0
  br i1 %38, label %108, label %39

39:                                               ; preds = %37
  %40 = zext i32 %34 to i64
  br label %41

41:                                               ; preds = %105, %39
  %42 = phi i64 [ 0, %39 ], [ %106, %105 ]
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %35, i64 %42
  %44 = bitcast %"struct.WTF::KeyValuePair"* %43 to i8**
  %45 = load i8*, i8** %44, align 8
  %46 = icmp eq i8* %45, inttoptr (i64 -1 to i8*)
  br i1 %46, label %105, label %47

47:                                               ; preds = %41
  %48 = bitcast i8* %45 to %"class.WTF::StringImpl"*
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %35, i64 %42, i32 1
  %50 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = load %"class.WTF::String"*, %"class.WTF::String"** %50, align 8
  %52 = icmp eq %"class.WTF::String"* %51, null
  br i1 %52, label %89, label %53, !prof !13

53:                                               ; preds = %47
  %54 = bitcast %"class.WTF::String"* %51 to i8*
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %35, i64 %42, i32 1, i32 0, i32 0, i32 2
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %85, label %58, !prof !14

58:                                               ; preds = %53
  %59 = zext i32 %56 to i64
  %60 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %51, i64 %59
  br label %61

61:                                               ; preds = %79, %58
  %62 = phi %"class.WTF::String"* [ %80, %79 ], [ %51, %58 ]
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %62, i64 0, i32 0, i32 0
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %63, align 8
  %65 = icmp eq %"class.WTF::StringImpl"* %64, null
  br i1 %65, label %79, label %66

66:                                               ; preds = %61
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = and i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  br i1 %70, label %73, label %75

73:                                               ; preds = %66
  %74 = add i32 %72, -1
  store i32 %74, i32* %71, align 4
  br label %75

75:                                               ; preds = %73, %66
  %76 = phi i32 [ %74, %73 ], [ %72, %66 ]
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %79

78:                                               ; preds = %75
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %64) #11
  br label %79

79:                                               ; preds = %78, %75, %61
  %80 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %62, i64 1
  %81 = icmp eq %"class.WTF::String"* %80, %60
  br i1 %81, label %82, label %61

82:                                               ; preds = %79
  store i32 0, i32* %55, align 4
  %83 = bitcast %"class.WTF::Vector.1"* %49 to i8**
  %84 = load i8*, i8** %83, align 8
  br label %85

85:                                               ; preds = %82, %53
  %86 = phi i8* [ %84, %82 ], [ %54, %53 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %86) #11
  store %"class.WTF::String"* null, %"class.WTF::String"** %50, align 8
  %87 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %43, i64 0, i32 0, i32 0, i32 0
  %88 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %87, align 8
  br label %89

89:                                               ; preds = %85, %47
  %90 = phi %"class.WTF::StringImpl"* [ %88, %85 ], [ %48, %47 ]
  %91 = icmp eq %"class.WTF::StringImpl"* %90, null
  br i1 %91, label %105, label %92

92:                                               ; preds = %89
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %90, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %94 = load atomic i32, i32* %93 monotonic, align 4
  %95 = and i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %90, i64 0, i32 0
  %98 = load i32, i32* %97, align 4
  br i1 %96, label %99, label %101

99:                                               ; preds = %92
  %100 = add i32 %98, -1
  store i32 %100, i32* %97, align 4
  br label %101

101:                                              ; preds = %99, %92
  %102 = phi i32 [ %100, %99 ], [ %98, %92 ]
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %105

104:                                              ; preds = %101
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %90) #11
  br label %105

105:                                              ; preds = %104, %101, %89, %41
  %106 = add nuw nsw i64 %42, 1
  %107 = icmp eq i64 %106, %40
  br i1 %107, label %108, label %41

108:                                              ; preds = %105, %37
  %109 = inttoptr i64 %32 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %109) #11
  store atomic i64 0, i64* %29 monotonic, align 8
  store i32 0, i32* %8, align 8
  store i32 0, i32* %9, align 4
  br label %110

110:                                              ; preds = %28, %108
  %111 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 3
  %112 = load i32, i32* %111, align 8
  %113 = and i32 %112, -2147483648
  store i32 %113, i32* %111, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #11
  ret %"struct.WTF::KeyValuePair"* %33

114:                                              ; preds = %21, %134
  %115 = phi i64 [ %135, %134 ], [ %23, %21 ]
  %116 = phi i32 [ %136, %134 ], [ %13, %21 ]
  %117 = phi %"struct.WTF::KeyValuePair"* [ %137, %134 ], [ %22, %21 ]
  %118 = phi %"struct.WTF::KeyValuePair"* [ %138, %134 ], [ null, %21 ]
  %119 = phi i32 [ %139, %134 ], [ 0, %21 ]
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %117, i64 %120
  %122 = bitcast %"struct.WTF::KeyValuePair"* %121 to i64*
  %123 = load i64, i64* %122, align 8
  switch i64 %123, label %124 [
    i64 -1, label %134
    i64 0, label %134
  ]

124:                                              ; preds = %114
  %125 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %121, i64 0, i32 0
  %126 = call { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E16LookupForWritingERKS1_(%"class.WTF::HashTable.8"* nonnull %5, %"class.WTF::String"* dereferenceable(8) %125) #11
  %127 = extractvalue { %"struct.WTF::KeyValuePair"*, i8 } %126, 0
  call void @_ZN3WTF5MoverINS_12KeyValuePairINS_6StringENS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEES4_NS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IS5_EEEELb1EE4MoveEOS6_RS6_(%"struct.WTF::KeyValuePair"* dereferenceable(24) %121, %"struct.WTF::KeyValuePair"* dereferenceable(24) %127) #11
  %128 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %15, align 8
  %129 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %128, i64 %120
  %130 = icmp eq %"struct.WTF::KeyValuePair"* %129, %3
  %131 = select i1 %130, %"struct.WTF::KeyValuePair"* %127, %"struct.WTF::KeyValuePair"* %118
  %132 = load i32, i32* %12, align 8
  %133 = ptrtoint %"struct.WTF::KeyValuePair"* %128 to i64
  br label %134

134:                                              ; preds = %114, %114, %124
  %135 = phi i64 [ %115, %114 ], [ %133, %124 ], [ %115, %114 ]
  %136 = phi i32 [ %116, %114 ], [ %132, %124 ], [ %116, %114 ]
  %137 = phi %"struct.WTF::KeyValuePair"* [ %117, %114 ], [ %128, %124 ], [ %117, %114 ]
  %138 = phi %"struct.WTF::KeyValuePair"* [ %118, %114 ], [ %131, %124 ], [ %118, %114 ]
  %139 = add i32 %119, 1
  %140 = icmp eq i32 %139, %136
  br i1 %140, label %24, label %114
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E16LookupForWritingERKS1_(%"class.WTF::HashTable.8"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = lshr i32 %12, 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %2
  %16 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %10) #11
  br label %17

17:                                               ; preds = %15, %2
  %18 = phi i32 [ %16, %15 ], [ %13, %2 ]
  %19 = and i32 %18, %7
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %20
  %22 = ptrtoint %"struct.WTF::KeyValuePair"* %21 to i64
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %21, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %23, align 8
  %25 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %25, label %42, label %26

26:                                               ; preds = %17
  %27 = xor i32 %18, -1
  %28 = lshr i32 %18, 23
  %29 = add i32 %28, %27
  %30 = shl i32 %29, 12
  %31 = xor i32 %30, %29
  %32 = lshr i32 %31, 7
  %33 = xor i32 %32, %31
  %34 = shl i32 %33, 2
  %35 = xor i32 %34, %33
  %36 = lshr i32 %35, 20
  %37 = xor i32 %36, %35
  %38 = or i32 %37, 1
  %39 = zext i32 %38 to i64
  br label %48

40:                                               ; preds = %61
  %41 = ptrtoint %"struct.WTF::KeyValuePair"* %67 to i64
  br label %42

42:                                               ; preds = %40, %17
  %43 = phi i64 [ %22, %17 ], [ %41, %40 ]
  %44 = phi %"struct.WTF::KeyValuePair"* [ null, %17 ], [ %62, %40 ]
  %45 = icmp eq %"struct.WTF::KeyValuePair"* %44, null
  %46 = ptrtoint %"struct.WTF::KeyValuePair"* %44 to i64
  %47 = select i1 %45, i64 %43, i64 %46
  br label %72

48:                                               ; preds = %61, %26
  %49 = phi %"struct.WTF::KeyValuePair"* [ null, %26 ], [ %62, %61 ]
  %50 = phi i64 [ %22, %26 ], [ %68, %61 ]
  %51 = phi %"struct.WTF::KeyValuePair"* [ %21, %26 ], [ %67, %61 ]
  %52 = phi i64 [ %20, %26 ], [ %66, %61 ]
  %53 = phi i64 [ 0, %26 ], [ %64, %61 ]
  %54 = bitcast %"struct.WTF::KeyValuePair"* %51 to i8**
  %55 = load i8*, i8** %54, align 8
  %56 = icmp eq i8* %55, inttoptr (i64 -1 to i8*)
  br i1 %56, label %61, label %57

57:                                               ; preds = %48
  %58 = bitcast i8* %55 to %"class.WTF::StringImpl"*
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %60 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %58, %"class.WTF::StringImpl"* %59) #11
  br i1 %60, label %72, label %61

61:                                               ; preds = %57, %48
  %62 = phi %"struct.WTF::KeyValuePair"* [ %49, %57 ], [ %51, %48 ]
  %63 = icmp eq i64 %53, 0
  %64 = select i1 %63, i64 %39, i64 %53
  %65 = add i64 %64, %52
  %66 = and i64 %65, %8
  %67 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %66
  %68 = ptrtoint %"struct.WTF::KeyValuePair"* %67 to i64
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %67, i64 0, i32 0, i32 0, i32 0
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %71 = icmp eq %"class.WTF::StringImpl"* %70, null
  br i1 %71, label %40, label %48

72:                                               ; preds = %57, %42
  %73 = phi i64 [ %47, %42 ], [ %50, %57 ]
  %74 = phi i8 [ 0, %42 ], [ 1, %57 ]
  %75 = inttoptr i64 %73 to %"struct.WTF::KeyValuePair"*
  %76 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } undef, %"struct.WTF::KeyValuePair"* %75, 0
  %77 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } %76, i8 %74, 1
  ret { %"struct.WTF::KeyValuePair"*, i8 } %77
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5MoverINS_12KeyValuePairINS_6StringENS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEES4_NS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IS5_EEEELb1EE4MoveEOS6_RS6_(%"struct.WTF::KeyValuePair"* dereferenceable(24), %"struct.WTF::KeyValuePair"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 0, i32 1
  %4 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %3, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::String"*, %"class.WTF::String"** %4, align 8
  %6 = icmp eq %"class.WTF::String"* %5, null
  br i1 %6, label %41, label %7, !prof !13

7:                                                ; preds = %2
  %8 = bitcast %"class.WTF::String"* %5 to i8*
  %9 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %39, label %12, !prof !14

12:                                               ; preds = %7
  %13 = zext i32 %10 to i64
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 %13
  br label %15

15:                                               ; preds = %33, %12
  %16 = phi %"class.WTF::String"* [ %34, %33 ], [ %5, %12 ]
  %17 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %16, i64 0, i32 0, i32 0
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %18, null
  br i1 %19, label %33, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  br i1 %24, label %27, label %29

27:                                               ; preds = %20
  %28 = add i32 %26, -1
  store i32 %28, i32* %25, align 4
  br label %29

29:                                               ; preds = %27, %20
  %30 = phi i32 [ %28, %27 ], [ %26, %20 ]
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %29
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %18) #11
  br label %33

33:                                               ; preds = %32, %29, %15
  %34 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %16, i64 1
  %35 = icmp eq %"class.WTF::String"* %34, %14
  br i1 %35, label %36, label %15

36:                                               ; preds = %33
  store i32 0, i32* %9, align 4
  %37 = bitcast %"class.WTF::Vector.1"* %3 to i8**
  %38 = load i8*, i8** %37, align 8
  br label %39

39:                                               ; preds = %36, %7
  %40 = phi i8* [ %38, %36 ], [ %8, %7 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %40) #11
  store %"class.WTF::String"* null, %"class.WTF::String"** %4, align 8
  br label %41

41:                                               ; preds = %39, %2
  %42 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 0, i32 0, i32 0, i32 0
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %42, align 8
  %44 = icmp eq %"class.WTF::StringImpl"* %43, null
  br i1 %44, label %58, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load atomic i32, i32* %46 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  br i1 %49, label %52, label %54

52:                                               ; preds = %45
  %53 = add i32 %51, -1
  store i32 %53, i32* %50, align 4
  br label %54

54:                                               ; preds = %52, %45
  %55 = phi i32 [ %53, %52 ], [ %51, %45 ]
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %54
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %43) #11
  br label %58

58:                                               ; preds = %41, %54, %57
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0, i32 0, i32 0
  %60 = bitcast %"struct.WTF::KeyValuePair"* %0 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = bitcast %"struct.WTF::KeyValuePair"* %1 to i64*
  store i64 %61, i64* %62, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %59, align 8
  %63 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 0, i32 1, i32 0, i32 0, i32 1
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %66 = bitcast %"class.WTF::Vector.1"* %63 to i64*
  %67 = bitcast %"class.WTF::Vector.1"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %67, i8 0, i64 16, i1 false) #11
  %68 = load i64, i64* %66, align 8
  %69 = bitcast %"class.WTF::Vector.1"* %3 to i64*
  store atomic i64 0, i64* %66 monotonic, align 8
  store atomic i64 %68, i64* %69 monotonic, align 8
  %70 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %71 = load i32, i32* %64, align 4
  %72 = load i32, i32* %70, align 4
  store i32 %72, i32* %64, align 4
  store i32 %71, i32* %70, align 4
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %74 = load i32, i32* %65, align 4
  %75 = load i32, i32* %73, align 4
  store i32 %75, i32* %65, align 4
  store i32 %74, i32* %73, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6insertINS_22IdentityHashTranslatorIS8_SD_S4_EERKS1_RKS6_EENS_18HashTableAddResultISE_S6_EEOT0_OT1_(%"class.WTF::HashTable.8"*, %"class.WTF::String"* dereferenceable(8), %"struct.WTF::KeyValuePair"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6ExpandEPS6_(%"class.WTF::HashTable.8"* %0, %"struct.WTF::KeyValuePair"* null)
  %9 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %10
  %23 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %17) #11
  br label %24

24:                                               ; preds = %10, %22
  %25 = phi i32 [ %23, %22 ], [ %20, %10 ]
  %26 = and i32 %25, %14
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %27
  %29 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %28, i64 0, i32 0, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %31, label %82, label %32

32:                                               ; preds = %24
  %33 = xor i32 %25, -1
  %34 = lshr i32 %25, 23
  %35 = add i32 %34, %33
  %36 = shl i32 %35, 12
  %37 = xor i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = xor i32 %38, %37
  %40 = shl i32 %39, 2
  %41 = xor i32 %40, %39
  %42 = lshr i32 %41, 20
  %43 = xor i32 %42, %41
  %44 = or i32 %43, 1
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %32, %58
  %47 = phi %"struct.WTF::KeyValuePair"* [ %28, %32 ], [ %64, %58 ]
  %48 = phi %"struct.WTF::KeyValuePair"* [ null, %32 ], [ %59, %58 ]
  %49 = phi i64 [ %27, %32 ], [ %63, %58 ]
  %50 = phi i64 [ 0, %32 ], [ %61, %58 ]
  %51 = bitcast %"struct.WTF::KeyValuePair"* %47 to i8**
  %52 = load i8*, i8** %51, align 8
  %53 = icmp eq i8* %52, inttoptr (i64 -1 to i8*)
  br i1 %53, label %58, label %54

54:                                               ; preds = %46
  %55 = bitcast i8* %52 to %"class.WTF::StringImpl"*
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %57 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %55, %"class.WTF::StringImpl"* %56) #11
  br i1 %57, label %138, label %58

58:                                               ; preds = %46, %54
  %59 = phi %"struct.WTF::KeyValuePair"* [ %48, %54 ], [ %47, %46 ]
  %60 = icmp eq i64 %50, 0
  %61 = select i1 %60, i64 %45, i64 %50
  %62 = add i64 %61, %49
  %63 = and i64 %62, %15
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %63
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %65, align 8
  %67 = icmp eq %"class.WTF::StringImpl"* %66, null
  br i1 %67, label %68, label %46

68:                                               ; preds = %58
  %69 = icmp eq %"struct.WTF::KeyValuePair"* %59, null
  br i1 %69, label %82, label %70

70:                                               ; preds = %68
  %71 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %59, i64 0, i32 1
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %59, i64 0, i32 1, i32 0, i32 0, i32 1
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %59, i64 0, i32 1, i32 0, i32 0, i32 2
  %74 = bitcast %"class.WTF::Vector.1"* %71 to i64*
  %75 = bitcast %"struct.WTF::KeyValuePair"* %59 to i64*
  store i64 0, i64* %75, align 8
  store atomic i64 0, i64* %74 monotonic, align 8
  store i32 0, i32* %72, align 4
  store i32 0, i32* %73, align 4
  %76 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 3
  %77 = load i32, i32* %76, align 8
  %78 = add i32 %77, 2147483647
  %79 = and i32 %78, 2147483647
  %80 = and i32 %77, -2147483648
  %81 = or i32 %79, %80
  store i32 %81, i32* %76, align 8
  br label %82

82:                                               ; preds = %24, %68, %70
  %83 = phi %"struct.WTF::KeyValuePair"* [ %59, %70 ], [ %64, %68 ], [ %28, %24 ]
  %84 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %2, i64 0, i32 0, i32 0, i32 0
  %85 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %84, align 8
  %86 = icmp eq %"class.WTF::StringImpl"* %85, null
  br i1 %86, label %104, label %87

87:                                               ; preds = %82
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %85, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = load atomic i32, i32* %88 monotonic, align 4
  %90 = and i32 %89, 2
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %104

92:                                               ; preds = %87
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %85, i64 0, i32 0
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i33
  %96 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %95, i33 1) #11
  %97 = extractvalue { i33, i1 } %96, 1
  %98 = extractvalue { i33, i1 } %96, 0
  %99 = icmp slt i33 %98, 0
  %100 = or i1 %97, %99
  br i1 %100, label %101, label %102, !prof !14

101:                                              ; preds = %92
  tail call void @llvm.trap() #11
  unreachable

102:                                              ; preds = %92
  %103 = trunc i33 %98 to i32
  store i32 %103, i32* %93, align 4
  br label %104

104:                                              ; preds = %102, %87, %82
  %105 = ptrtoint %"class.WTF::StringImpl"* %85 to i64
  %106 = bitcast %"struct.WTF::KeyValuePair"* %83 to i64*
  %107 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %83, i64 0, i32 0, i32 0, i32 0
  %108 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %107, align 8
  store i64 %105, i64* %106, align 8
  %109 = icmp eq %"class.WTF::StringImpl"* %108, null
  br i1 %109, label %123, label %110

110:                                              ; preds = %104
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %112 = load atomic i32, i32* %111 monotonic, align 4
  %113 = and i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 0, i32 0
  %116 = load i32, i32* %115, align 4
  br i1 %114, label %117, label %119

117:                                              ; preds = %110
  %118 = add i32 %116, -1
  store i32 %118, i32* %115, align 4
  br label %119

119:                                              ; preds = %117, %110
  %120 = phi i32 [ %118, %117 ], [ %116, %110 ]
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %123

122:                                              ; preds = %119
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %108) #11
  br label %123

123:                                              ; preds = %104, %119, %122
  %124 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %83, i64 0, i32 1
  %125 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %2, i64 0, i32 1
  %126 = tail call dereferenceable(16) %"class.WTF::Vector.1"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector.1"* %124, %"class.WTF::Vector.1"* dereferenceable(16) %125) #11
  %127 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 2
  %128 = load i32, i32* %127, align 4
  %129 = add i32 %128, 1
  store i32 %129, i32* %127, align 4
  %130 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 3
  %131 = load i32, i32* %130, align 8
  %132 = add i32 %131, %129
  %133 = shl i32 %132, 1
  %134 = load i32, i32* %12, align 8
  %135 = icmp ult i32 %133, %134
  br i1 %135, label %138, label %136

136:                                              ; preds = %123
  %137 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6ExpandEPS6_(%"class.WTF::HashTable.8"* %0, %"struct.WTF::KeyValuePair"* %83)
  br label %138

138:                                              ; preds = %54, %123, %136
  %139 = phi i8 [ 1, %123 ], [ 1, %136 ], [ 0, %54 ]
  %140 = phi %"struct.WTF::KeyValuePair"* [ %83, %123 ], [ %137, %136 ], [ %47, %54 ]
  %141 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } undef, %"struct.WTF::KeyValuePair"* %140, 0
  %142 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } %141, i8 %139, 1
  ret { %"struct.WTF::KeyValuePair"*, i8 } %142
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6ExpandEPS6_(%"class.WTF::HashTable.8"*, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #11
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #11
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* %22, i8* %23) #11
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #11
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #11
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #11
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = mul nuw nsw i64 %33, 24
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([133 x i8], [133 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_6StringENS_6VectorIS2_Lj0ENS_18PartitionAllocatorEEEEEEEPKcv, i64 0, i64 0)) #11
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair"*
  %37 = icmp eq i32 %32, 0
  br i1 %37, label %72, label %38

38:                                               ; preds = %31
  %39 = and i64 %33, 1
  %40 = icmp eq i32 %32, 1
  br i1 %40, label %62, label %41

41:                                               ; preds = %38
  %42 = sub nsw i64 %33, %39
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %59, %43 ]
  %45 = phi i64 [ %42, %41 ], [ %60, %43 ]
  %46 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %44
  %47 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %44, i32 1
  %48 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %44, i32 1, i32 0, i32 0, i32 1
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %44, i32 1, i32 0, i32 0, i32 2
  %50 = bitcast %"class.WTF::Vector.1"* %47 to i64*
  %51 = bitcast %"struct.WTF::KeyValuePair"* %46 to i64*
  store i64 0, i64* %51, align 8
  store atomic i64 0, i64* %50 monotonic, align 8
  store i32 0, i32* %48, align 4
  store i32 0, i32* %49, align 4
  %52 = or i64 %44, 1
  %53 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %52
  %54 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %52, i32 1
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %52, i32 1, i32 0, i32 0, i32 1
  %56 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %52, i32 1, i32 0, i32 0, i32 2
  %57 = bitcast %"class.WTF::Vector.1"* %54 to i64*
  %58 = bitcast %"struct.WTF::KeyValuePair"* %53 to i64*
  store i64 0, i64* %58, align 8
  store atomic i64 0, i64* %57 monotonic, align 8
  store i32 0, i32* %55, align 4
  store i32 0, i32* %56, align 4
  %59 = add nuw nsw i64 %44, 2
  %60 = add i64 %45, -2
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %43

62:                                               ; preds = %43, %38
  %63 = phi i64 [ 0, %38 ], [ %59, %43 ]
  %64 = icmp eq i64 %39, 0
  br i1 %64, label %72, label %65

65:                                               ; preds = %62
  %66 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %63
  %67 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %63, i32 1
  %68 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %63, i32 1, i32 0, i32 0, i32 1
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %63, i32 1, i32 0, i32 0, i32 2
  %70 = bitcast %"class.WTF::Vector.1"* %67 to i64*
  %71 = bitcast %"struct.WTF::KeyValuePair"* %66 to i64*
  store i64 0, i64* %71, align 8
  store atomic i64 0, i64* %70 monotonic, align 8
  store i32 0, i32* %68, align 4
  store i32 0, i32* %69, align 4
  br label %72

72:                                               ; preds = %65, %62, %31
  %73 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E8RehashToEPS6_jSF_(%"class.WTF::HashTable.8"* %0, %"struct.WTF::KeyValuePair"* %36, i32 %32, %"struct.WTF::KeyValuePair"* %1) #11
  ret %"struct.WTF::KeyValuePair"* %73
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector.1"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector.1"*, %"class.WTF::Vector.1"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector.1"* %1, %0
  br i1 %3, label %219, label %4, !prof !14

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %39

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.WTF::String"*, %"class.WTF::String"** %11, align 8
  %13 = zext i32 %6 to i64
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 %13
  %15 = zext i32 %8 to i64
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 %15
  br label %17

17:                                               ; preds = %35, %10
  %18 = phi %"class.WTF::String"* [ %36, %35 ], [ %16, %10 ]
  %19 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = and i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  br i1 %26, label %29, label %31

29:                                               ; preds = %22
  %30 = add i32 %28, -1
  store i32 %30, i32* %27, align 4
  br label %31

31:                                               ; preds = %29, %22
  %32 = phi i32 [ %30, %29 ], [ %28, %22 ]
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %20) #11
  br label %35

35:                                               ; preds = %34, %31, %17
  %36 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 1
  %37 = icmp eq %"class.WTF::String"* %36, %14
  br i1 %37, label %38, label %17

38:                                               ; preds = %35
  store i32 %8, i32* %5, align 4
  br label %116

39:                                               ; preds = %4
  %40 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = icmp ugt i32 %8, %41
  br i1 %42, label %43, label %114

43:                                               ; preds = %39
  %44 = icmp eq i32 %41, 0
  br i1 %44, label %80, label %45

45:                                               ; preds = %43
  %46 = icmp eq i32 %6, 0
  br i1 %46, label %74, label %47

47:                                               ; preds = %45
  %48 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %49 = load %"class.WTF::String"*, %"class.WTF::String"** %48, align 8
  %50 = zext i32 %6 to i64
  %51 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %49, i64 %50
  br label %52

52:                                               ; preds = %70, %47
  %53 = phi %"class.WTF::String"* [ %71, %70 ], [ %49, %47 ]
  %54 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %53, i64 0, i32 0, i32 0
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %70, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  br i1 %61, label %64, label %66

64:                                               ; preds = %57
  %65 = add i32 %63, -1
  store i32 %65, i32* %62, align 4
  br label %66

66:                                               ; preds = %64, %57
  %67 = phi i32 [ %65, %64 ], [ %63, %57 ]
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %55) #11
  br label %70

70:                                               ; preds = %69, %66, %52
  %71 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %53, i64 1
  %72 = icmp eq %"class.WTF::String"* %71, %51
  br i1 %72, label %73, label %52

73:                                               ; preds = %70
  store i32 0, i32* %5, align 4
  br label %74

74:                                               ; preds = %73, %45
  %75 = bitcast %"class.WTF::Vector.1"* %0 to i8**
  %76 = load i8*, i8** %75, align 8
  %77 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 0, i64* %77 monotonic, align 8
  store i32 0, i32* %40, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %76) #11
  %78 = load i32, i32* %7, align 4
  %79 = load i32, i32* %40, align 8
  br label %80

80:                                               ; preds = %43, %74
  %81 = phi i32 [ 0, %43 ], [ %79, %74 ]
  %82 = phi i32 [ %8, %43 ], [ %78, %74 ]
  %83 = icmp ult i32 %81, %82
  br i1 %83, label %84, label %114, !prof !13

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %86 = load %"class.WTF::String"*, %"class.WTF::String"** %85, align 8
  %87 = icmp eq %"class.WTF::String"* %86, null
  %88 = zext i32 %82 to i64
  %89 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %88) #11
  %90 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %89, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #11
  br i1 %87, label %91, label %96

91:                                               ; preds = %84
  %92 = ptrtoint i8* %90 to i64
  %93 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %92, i64* %93 monotonic, align 8
  %94 = lshr i64 %89, 3
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %40, align 8
  br label %114

96:                                               ; preds = %84
  %97 = lshr i64 %89, 3
  %98 = ptrtoint i8* %90 to i64
  %99 = load %"class.WTF::String"*, %"class.WTF::String"** %85, align 8
  %100 = icmp ne i8* %90, null
  %101 = icmp ne %"class.WTF::String"* %99, null
  %102 = and i1 %100, %101
  %103 = bitcast %"class.WTF::String"* %99 to i8*
  br i1 %102, label %104, label %110, !prof !13

104:                                              ; preds = %96
  %105 = load i32, i32* %5, align 4
  %106 = zext i32 %105 to i64
  %107 = shl nuw nsw i64 %106, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %90, i8* nonnull align 8 %103, i64 %107, i1 false) #11
  %108 = bitcast %"class.WTF::Vector.1"* %0 to i8**
  %109 = load i8*, i8** %108, align 8
  br label %110

110:                                              ; preds = %104, %96
  %111 = phi i8* [ %109, %104 ], [ %103, %96 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %111) #11
  %112 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %98, i64* %112 monotonic, align 8
  %113 = trunc i64 %97 to i32
  store i32 %113, i32* %40, align 8
  br label %114

114:                                              ; preds = %39, %80, %91, %110
  %115 = load i32, i32* %5, align 4
  br label %116

116:                                              ; preds = %114, %38
  %117 = phi i32 [ %115, %114 ], [ %8, %38 ]
  %118 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %1, i64 0, i32 0, i32 0, i32 0
  %119 = load %"class.WTF::String"*, %"class.WTF::String"** %118, align 8
  %120 = zext i32 %117 to i64
  %121 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %119, i64 %120
  %122 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %123 = load %"class.WTF::String"*, %"class.WTF::String"** %122, align 8
  %124 = icmp eq i32 %117, 0
  br i1 %124, label %175, label %125

125:                                              ; preds = %116, %167
  %126 = phi %"class.WTF::String"* [ %169, %167 ], [ %123, %116 ]
  %127 = phi %"class.WTF::String"* [ %168, %167 ], [ %119, %116 ]
  %128 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %127, i64 0, i32 0, i32 0
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %128, align 8
  %130 = icmp eq %"class.WTF::StringImpl"* %129, null
  br i1 %130, label %148, label %131

131:                                              ; preds = %125
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %133 = load atomic i32, i32* %132 monotonic, align 4
  %134 = and i32 %133, 2
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %148

136:                                              ; preds = %131
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 0
  %138 = load i32, i32* %137, align 4
  %139 = zext i32 %138 to i33
  %140 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %139, i33 1) #11
  %141 = extractvalue { i33, i1 } %140, 1
  %142 = extractvalue { i33, i1 } %140, 0
  %143 = icmp slt i33 %142, 0
  %144 = or i1 %141, %143
  br i1 %144, label %145, label %146, !prof !14

145:                                              ; preds = %136
  tail call void @llvm.trap() #11
  unreachable

146:                                              ; preds = %136
  %147 = trunc i33 %142 to i32
  store i32 %147, i32* %137, align 4
  br label %148

148:                                              ; preds = %146, %131, %125
  %149 = ptrtoint %"class.WTF::StringImpl"* %129 to i64
  %150 = bitcast %"class.WTF::String"* %126 to i64*
  %151 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %126, i64 0, i32 0, i32 0
  %152 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %151, align 8
  store i64 %149, i64* %150, align 8
  %153 = icmp eq %"class.WTF::StringImpl"* %152, null
  br i1 %153, label %167, label %154

154:                                              ; preds = %148
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = load atomic i32, i32* %155 monotonic, align 4
  %157 = and i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 0
  %160 = load i32, i32* %159, align 4
  br i1 %158, label %161, label %163

161:                                              ; preds = %154
  %162 = add i32 %160, -1
  store i32 %162, i32* %159, align 4
  br label %163

163:                                              ; preds = %161, %154
  %164 = phi i32 [ %162, %161 ], [ %160, %154 ]
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %163
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %152) #11
  br label %167

167:                                              ; preds = %166, %163, %148
  %168 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %127, i64 1
  %169 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %126, i64 1
  %170 = icmp eq %"class.WTF::String"* %168, %121
  br i1 %170, label %171, label %125

171:                                              ; preds = %167
  %172 = load %"class.WTF::String"*, %"class.WTF::String"** %118, align 8
  %173 = load i32, i32* %5, align 4
  %174 = load %"class.WTF::String"*, %"class.WTF::String"** %122, align 8
  br label %175

175:                                              ; preds = %171, %116
  %176 = phi %"class.WTF::String"* [ %174, %171 ], [ %123, %116 ]
  %177 = phi i32 [ %173, %171 ], [ 0, %116 ]
  %178 = phi %"class.WTF::String"* [ %172, %171 ], [ %119, %116 ]
  %179 = zext i32 %177 to i64
  %180 = load i32, i32* %7, align 4
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %178, i64 %181
  %183 = icmp eq i32 %177, %180
  br i1 %183, label %217, label %184

184:                                              ; preds = %175
  %185 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %176, i64 %179
  %186 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %178, i64 %179
  br label %187

187:                                              ; preds = %184, %211
  %188 = phi %"class.WTF::String"* [ %212, %211 ], [ %185, %184 ]
  %189 = phi %"class.WTF::String"* [ %213, %211 ], [ %186, %184 ]
  %190 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %189, i64 0, i32 0, i32 0
  %191 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %190, align 8
  %192 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %188, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %191, %"class.WTF::StringImpl"** %192, align 8
  %193 = icmp eq %"class.WTF::StringImpl"* %191, null
  br i1 %193, label %211, label %194

194:                                              ; preds = %187
  %195 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %196 = load atomic i32, i32* %195 monotonic, align 4
  %197 = and i32 %196, 2
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %211

199:                                              ; preds = %194
  %200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = zext i32 %201 to i33
  %203 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %202, i33 1) #11
  %204 = extractvalue { i33, i1 } %203, 1
  %205 = extractvalue { i33, i1 } %203, 0
  %206 = icmp slt i33 %205, 0
  %207 = or i1 %204, %206
  br i1 %207, label %208, label %209, !prof !14

208:                                              ; preds = %199
  tail call void @llvm.trap() #11
  unreachable

209:                                              ; preds = %199
  %210 = trunc i33 %205 to i32
  store i32 %210, i32* %200, align 4
  br label %211

211:                                              ; preds = %209, %194, %187
  %212 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %188, i64 1
  %213 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %189, i64 1
  %214 = icmp eq %"class.WTF::String"* %213, %182
  br i1 %214, label %215, label %187

215:                                              ; preds = %211
  %216 = load i32, i32* %7, align 4
  br label %217

217:                                              ; preds = %215, %175
  %218 = phi i32 [ %216, %215 ], [ %177, %175 ]
  store i32 %218, i32* %5, align 4
  br label %219

219:                                              ; preds = %2, %217
  ret %"class.WTF::Vector.1"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #11
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #11
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #11
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #11
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #11
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #11
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String10UpperASCIIEv(%"class.WTF::String"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.WTF::String"*, i8 } @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_S1_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"*, %"class.WTF::String"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"class.WTF::String"*, %"class.WTF::String"** %4, align 8
  %6 = icmp eq %"class.WTF::String"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"class.WTF::String"* @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable"* %0, %"class.WTF::String"* null)
  %9 = load %"class.WTF::String"*, %"class.WTF::String"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"class.WTF::String"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %10
  %23 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %17) #11
  br label %24

24:                                               ; preds = %10, %22
  %25 = phi i32 [ %23, %22 ], [ %20, %10 ]
  %26 = and i32 %25, %14
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 %27
  %29 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %28, i64 0, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %31, label %70, label %32

32:                                               ; preds = %24
  %33 = xor i32 %25, -1
  %34 = lshr i32 %25, 23
  %35 = add i32 %34, %33
  %36 = shl i32 %35, 12
  %37 = xor i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = xor i32 %38, %37
  %40 = shl i32 %39, 2
  %41 = xor i32 %40, %39
  %42 = lshr i32 %41, 20
  %43 = xor i32 %42, %41
  %44 = or i32 %43, 1
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %32, %58
  %47 = phi %"class.WTF::StringImpl"* [ %30, %32 ], [ %66, %58 ]
  %48 = phi %"class.WTF::String"* [ %28, %32 ], [ %64, %58 ]
  %49 = phi %"class.WTF::String"* [ null, %32 ], [ %59, %58 ]
  %50 = phi i64 [ %27, %32 ], [ %63, %58 ]
  %51 = phi i64 [ 0, %32 ], [ %61, %58 ]
  %52 = bitcast %"class.WTF::String"* %48 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq i8* %53, inttoptr (i64 -1 to i8*)
  br i1 %54, label %58, label %55

55:                                               ; preds = %46
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %57 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* nonnull %47, %"class.WTF::StringImpl"* %56) #11
  br i1 %57, label %115, label %58

58:                                               ; preds = %46, %55
  %59 = phi %"class.WTF::String"* [ %49, %55 ], [ %48, %46 ]
  %60 = icmp eq i64 %51, 0
  %61 = select i1 %60, i64 %45, i64 %51
  %62 = add i64 %61, %50
  %63 = and i64 %62, %15
  %64 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 %63
  %65 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %64, i64 0, i32 0, i32 0
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %65, align 8
  %67 = icmp eq %"class.WTF::StringImpl"* %66, null
  br i1 %67, label %68, label %46

68:                                               ; preds = %58
  %69 = icmp eq %"class.WTF::String"* %59, null
  br i1 %69, label %70, label %73

70:                                               ; preds = %24, %68
  %71 = phi %"class.WTF::String"* [ %64, %68 ], [ %28, %24 ]
  %72 = bitcast %"class.WTF::String"* %71 to i64*
  br label %81

73:                                               ; preds = %68
  %74 = bitcast %"class.WTF::String"* %59 to i64*
  store i64 0, i64* %74, align 8
  %75 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %76 = load i32, i32* %75, align 8
  %77 = add i32 %76, 2147483647
  %78 = and i32 %77, 2147483647
  %79 = and i32 %76, -2147483648
  %80 = or i32 %78, %79
  store i32 %80, i32* %75, align 8
  br label %81

81:                                               ; preds = %70, %73
  %82 = phi i64* [ %72, %70 ], [ %74, %73 ]
  %83 = phi %"class.WTF::String"* [ %71, %70 ], [ %59, %73 ]
  %84 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %85 = bitcast %"class.WTF::String"* %2 to i64*
  %86 = load i64, i64* %85, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %84, align 8
  %87 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %83, i64 0, i32 0, i32 0
  %88 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %87, align 8
  store i64 %86, i64* %82, align 8
  %89 = icmp eq %"class.WTF::StringImpl"* %88, null
  br i1 %89, label %103, label %90

90:                                               ; preds = %81
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %88, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = load atomic i32, i32* %91 monotonic, align 4
  %93 = and i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %88, i64 0, i32 0
  %96 = load i32, i32* %95, align 4
  br i1 %94, label %97, label %99

97:                                               ; preds = %90
  %98 = add i32 %96, -1
  store i32 %98, i32* %95, align 4
  br label %99

99:                                               ; preds = %97, %90
  %100 = phi i32 [ %98, %97 ], [ %96, %90 ]
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %103

102:                                              ; preds = %99
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %88) #11
  br label %103

103:                                              ; preds = %81, %99, %102
  %104 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %105 = load i32, i32* %104, align 4
  %106 = add i32 %105, 1
  store i32 %106, i32* %104, align 4
  %107 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %108 = load i32, i32* %107, align 8
  %109 = add i32 %108, %106
  %110 = shl i32 %109, 1
  %111 = load i32, i32* %12, align 8
  %112 = icmp ult i32 %110, %111
  br i1 %112, label %115, label %113

113:                                              ; preds = %103
  %114 = tail call %"class.WTF::String"* @_ZN3WTF9HashTableINS_6StringES1_NS_17IdentityExtractorENS_10StringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable"* %0, %"class.WTF::String"* %83)
  br label %115

115:                                              ; preds = %55, %103, %113
  %116 = phi i8 [ 1, %103 ], [ 1, %113 ], [ 0, %55 ]
  %117 = phi %"class.WTF::String"* [ %83, %103 ], [ %114, %113 ], [ %48, %55 ]
  %118 = insertvalue { %"class.WTF::String"*, i8 } undef, %"class.WTF::String"* %117, 0
  %119 = insertvalue { %"class.WTF::String"*, i8 } %118, i8 %116, 1
  ret { %"class.WTF::String"*, i8 } %119
}

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String10LowerASCIIEv(%"class.WTF::String"*) local_unnamed_addr #5

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #9

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #5

declare zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #5

declare zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24), %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6insertINS_17HashMapTranslatorISD_S8_S4_EERKS1_RS5_EENS_18HashTableAddResultISE_S6_EEOT0_OT1_(%"class.WTF::HashTable.8"*, %"class.WTF::String"* dereferenceable(8), %"class.WTF::Vector.1"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6ExpandEPS6_(%"class.WTF::HashTable.8"* %0, %"struct.WTF::KeyValuePair"* null)
  %9 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %10
  %23 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %17) #11
  br label %24

24:                                               ; preds = %10, %22
  %25 = phi i32 [ %23, %22 ], [ %20, %10 ]
  %26 = and i32 %25, %14
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %27
  %29 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %28, i64 0, i32 0, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %31, label %82, label %32

32:                                               ; preds = %24
  %33 = xor i32 %25, -1
  %34 = lshr i32 %25, 23
  %35 = add i32 %34, %33
  %36 = shl i32 %35, 12
  %37 = xor i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = xor i32 %38, %37
  %40 = shl i32 %39, 2
  %41 = xor i32 %40, %39
  %42 = lshr i32 %41, 20
  %43 = xor i32 %42, %41
  %44 = or i32 %43, 1
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %32, %58
  %47 = phi %"struct.WTF::KeyValuePair"* [ %28, %32 ], [ %64, %58 ]
  %48 = phi %"struct.WTF::KeyValuePair"* [ null, %32 ], [ %59, %58 ]
  %49 = phi i64 [ %27, %32 ], [ %63, %58 ]
  %50 = phi i64 [ 0, %32 ], [ %61, %58 ]
  %51 = bitcast %"struct.WTF::KeyValuePair"* %47 to i8**
  %52 = load i8*, i8** %51, align 8
  %53 = icmp eq i8* %52, inttoptr (i64 -1 to i8*)
  br i1 %53, label %58, label %54

54:                                               ; preds = %46
  %55 = bitcast i8* %52 to %"class.WTF::StringImpl"*
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %57 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %55, %"class.WTF::StringImpl"* %56) #11
  br i1 %57, label %136, label %58

58:                                               ; preds = %46, %54
  %59 = phi %"struct.WTF::KeyValuePair"* [ %48, %54 ], [ %47, %46 ]
  %60 = icmp eq i64 %50, 0
  %61 = select i1 %60, i64 %45, i64 %50
  %62 = add i64 %61, %49
  %63 = and i64 %62, %15
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %63
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %65, align 8
  %67 = icmp eq %"class.WTF::StringImpl"* %66, null
  br i1 %67, label %68, label %46

68:                                               ; preds = %58
  %69 = icmp eq %"struct.WTF::KeyValuePair"* %59, null
  br i1 %69, label %82, label %70

70:                                               ; preds = %68
  %71 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %59, i64 0, i32 1
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %59, i64 0, i32 1, i32 0, i32 0, i32 1
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %59, i64 0, i32 1, i32 0, i32 0, i32 2
  %74 = bitcast %"class.WTF::Vector.1"* %71 to i64*
  %75 = bitcast %"struct.WTF::KeyValuePair"* %59 to i64*
  store i64 0, i64* %75, align 8
  store atomic i64 0, i64* %74 monotonic, align 8
  store i32 0, i32* %72, align 4
  store i32 0, i32* %73, align 4
  %76 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 3
  %77 = load i32, i32* %76, align 8
  %78 = add i32 %77, 2147483647
  %79 = and i32 %78, 2147483647
  %80 = and i32 %77, -2147483648
  %81 = or i32 %79, %80
  store i32 %81, i32* %76, align 8
  br label %82

82:                                               ; preds = %24, %68, %70
  %83 = phi %"struct.WTF::KeyValuePair"* [ %59, %70 ], [ %64, %68 ], [ %28, %24 ]
  %84 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %85 = icmp eq %"class.WTF::StringImpl"* %84, null
  br i1 %85, label %103, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = and i32 %88, 2
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %103

91:                                               ; preds = %86
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 0
  %93 = load i32, i32* %92, align 4
  %94 = zext i32 %93 to i33
  %95 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %94, i33 1) #11
  %96 = extractvalue { i33, i1 } %95, 1
  %97 = extractvalue { i33, i1 } %95, 0
  %98 = icmp slt i33 %97, 0
  %99 = or i1 %96, %98
  br i1 %99, label %100, label %101, !prof !14

100:                                              ; preds = %91
  tail call void @llvm.trap() #11
  unreachable

101:                                              ; preds = %91
  %102 = trunc i33 %97 to i32
  store i32 %102, i32* %92, align 4
  br label %103

103:                                              ; preds = %101, %86, %82
  %104 = ptrtoint %"class.WTF::StringImpl"* %84 to i64
  %105 = bitcast %"struct.WTF::KeyValuePair"* %83 to i64*
  %106 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %83, i64 0, i32 0, i32 0, i32 0
  %107 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %106, align 8
  store i64 %104, i64* %105, align 8
  %108 = icmp eq %"class.WTF::StringImpl"* %107, null
  br i1 %108, label %122, label %109

109:                                              ; preds = %103
  %110 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %107, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %111 = load atomic i32, i32* %110 monotonic, align 4
  %112 = and i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %107, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  br i1 %113, label %116, label %118

116:                                              ; preds = %109
  %117 = add i32 %115, -1
  store i32 %117, i32* %114, align 4
  br label %118

118:                                              ; preds = %116, %109
  %119 = phi i32 [ %117, %116 ], [ %115, %109 ]
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %122

121:                                              ; preds = %118
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %107) #11
  br label %122

122:                                              ; preds = %103, %118, %121
  %123 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %83, i64 0, i32 1
  %124 = tail call dereferenceable(16) %"class.WTF::Vector.1"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector.1"* %123, %"class.WTF::Vector.1"* dereferenceable(16) %2) #11
  %125 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 2
  %126 = load i32, i32* %125, align 4
  %127 = add i32 %126, 1
  store i32 %127, i32* %125, align 4
  %128 = getelementptr inbounds %"class.WTF::HashTable.8", %"class.WTF::HashTable.8"* %0, i64 0, i32 3
  %129 = load i32, i32* %128, align 8
  %130 = add i32 %129, %127
  %131 = shl i32 %130, 1
  %132 = load i32, i32* %12, align 8
  %133 = icmp ult i32 %131, %132
  br i1 %133, label %136, label %134

134:                                              ; preds = %122
  %135 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_6StringENS_12KeyValuePairIS1_NS_6VectorIS1_Lj0ENS_18PartitionAllocatorEEEEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSA_IS5_EEEESB_S4_E6ExpandEPS6_(%"class.WTF::HashTable.8"* %0, %"struct.WTF::KeyValuePair"* %83)
  br label %136

136:                                              ; preds = %54, %122, %134
  %137 = phi i8 [ 1, %122 ], [ 1, %134 ], [ 0, %54 ]
  %138 = phi %"struct.WTF::KeyValuePair"* [ %83, %122 ], [ %135, %134 ], [ %47, %54 ]
  %139 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } undef, %"struct.WTF::KeyValuePair"* %138, 0
  %140 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } %139, i8 %137, 1
  ret { %"struct.WTF::KeyValuePair"*, i8 } %140
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS1_EEvOT_(%"class.WTF::Vector.1"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %8 = icmp ugt %"class.WTF::String"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 %10
  %12 = icmp ugt %"class.WTF::String"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !13

24:                                               ; preds = %13
  %25 = icmp eq %"class.WTF::String"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %26) #11
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #11
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.WTF::String"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"class.WTF::String"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !13

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #11
  %47 = bitcast %"class.WTF::Vector.1"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #11
  %51 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.WTF::String"* %1 to i64
  %56 = ptrtoint %"class.WTF::String"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !13

69:                                               ; preds = %54
  %70 = icmp eq %"class.WTF::String"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %71) #11
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #11
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.WTF::String"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"class.WTF::String"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !13

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #11
  %87 = bitcast %"class.WTF::Vector.1"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #11
  %91 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.WTF::String"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.WTF::String"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"class.WTF::String"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"class.WTF::String"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %100, i64 %103
  %105 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %101, i64 0, i32 0, i32 0
  %106 = bitcast %"class.WTF::String"* %101 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %"class.WTF::String"* %104 to i64*
  store i64 %107, i64* %108, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %105, align 8
  %109 = load i32, i32* %3, align 4
  %110 = add i32 %109, 1
  store i32 %110, i32* %3, align 4
  ret void
}

declare void @_ZN5blink15SanitizerConfig16setAllowElementsERKN3WTF6VectorINS1_6StringELj0ENS1_18PartitionAllocatorEEE(%"class.blink::SanitizerConfig"*, %"class.WTF::Vector.1"* dereferenceable(16)) local_unnamed_addr #5

declare void @_ZN5blink15SanitizerConfig18setAllowAttributesERKN3WTF6VectorINSt3__14pairINS1_6StringENS2_IS5_Lj0ENS1_18PartitionAllocatorEEEEELj0ES6_EE(%"class.blink::SanitizerConfig"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #5

declare void @_ZN5blink15SanitizerConfigC1Ev(%"class.blink::SanitizerConfig"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #11
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !14

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #11
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #11
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #11
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #11
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #11
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #11
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #11
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* %40, i8* %41) #11
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #11
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.9, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #11
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #11
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #11
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !14

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #11
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #5

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #5

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #5

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::IDLDictionaryBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::IDLDictionaryBase"* %3, %"class.blink::Visitor"* %0) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::IDLDictionaryBase"*
  %3 = bitcast i8* %0 to void (%"class.blink::IDLDictionaryBase"*)***
  %4 = load void (%"class.blink::IDLDictionaryBase"*)**, void (%"class.blink::IDLDictionaryBase"*)*** %3, align 8
  %5 = load void (%"class.blink::IDLDictionaryBase"*)*, void (%"class.blink::IDLDictionaryBase"*)** %4, align 8
  tail call void %5(%"class.blink::IDLDictionaryBase"* %2) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #5

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRPKcEEvOT_(%"class.WTF::Vector.1"*, i8** dereferenceable(8)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = lshr i32 %7, 2
  %9 = add i32 %7, 1
  %10 = add i32 %9, %8
  %11 = icmp ugt i32 %10, 4
  %12 = select i1 %11, i32 %10, i32 4
  %13 = icmp ugt i32 %12, %5
  %14 = select i1 %13, i32 %12, i32 %5
  %15 = icmp ult i32 %7, %14
  %16 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::String"*, %"class.WTF::String"** %16, align 8
  br i1 %15, label %18, label %45, !prof !13

18:                                               ; preds = %2
  %19 = icmp eq %"class.WTF::String"* %17, null
  %20 = zext i32 %14 to i64
  %21 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %20) #11
  %22 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %21, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #11
  %23 = ptrtoint i8* %22 to i64
  br i1 %19, label %24, label %26

24:                                               ; preds = %18
  %25 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %23, i64* %25 monotonic, align 8
  br label %41

26:                                               ; preds = %18
  %27 = load %"class.WTF::String"*, %"class.WTF::String"** %16, align 8
  %28 = icmp ne i8* %22, null
  %29 = icmp ne %"class.WTF::String"* %27, null
  %30 = and i1 %28, %29
  %31 = bitcast %"class.WTF::String"* %27 to i8*
  br i1 %30, label %32, label %38, !prof !13

32:                                               ; preds = %26
  %33 = load i32, i32* %3, align 4
  %34 = zext i32 %33 to i64
  %35 = shl nuw nsw i64 %34, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %22, i8* nonnull align 8 %31, i64 %35, i1 false) #11
  %36 = bitcast %"class.WTF::Vector.1"* %0 to i8**
  %37 = load i8*, i8** %36, align 8
  br label %38

38:                                               ; preds = %32, %26
  %39 = phi i8* [ %37, %32 ], [ %31, %26 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %39) #11
  %40 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %23, i64* %40 monotonic, align 8
  br label %41

41:                                               ; preds = %38, %24
  %42 = lshr i64 %21, 3
  %43 = trunc i64 %42 to i32
  store i32 %43, i32* %6, align 8
  %44 = bitcast i8* %22 to %"class.WTF::String"*
  br label %45

45:                                               ; preds = %41, %2
  %46 = phi %"class.WTF::String"* [ %17, %2 ], [ %44, %41 ]
  %47 = load i32, i32* %3, align 4
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %46, i64 %48
  %50 = load i8*, i8** %1, align 8
  %51 = icmp eq i8* %50, null
  br i1 %51, label %54, label %52

52:                                               ; preds = %45
  %53 = tail call i64 @strlen(i8* nonnull %50) #13
  br label %54

54:                                               ; preds = %45, %52
  %55 = phi i64 [ %53, %52 ], [ 0, %45 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %49, i8* %50, i64 %55) #11
  %56 = load i32, i32* %3, align 4
  %57 = add i32 %56, 1
  store i32 %57, i32* %3, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINSt3__14pairINS_6StringENS0_IS3_Lj0ENS_18PartitionAllocatorEEEEELj0ES4_E14AppendSlowCaseINS2_IPKcS5_EEEEvOT_(%"class.WTF::Vector"*, %"struct.std::__1::pair.221"* dereferenceable(24)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = lshr i32 %7, 2
  %9 = add i32 %7, 1
  %10 = add i32 %9, %8
  %11 = icmp ugt i32 %10, 4
  %12 = select i1 %11, i32 %10, i32 4
  %13 = icmp ugt i32 %12, %5
  %14 = select i1 %13, i32 %12, i32 %5
  %15 = icmp ult i32 %7, %14
  br i1 %15, label %16, label %29, !prof !13

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %18 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %17, align 8
  %19 = icmp eq %"struct.std::__1::pair"* %18, null
  br i1 %19, label %20, label %28

20:                                               ; preds = %16
  %21 = zext i32 %14 to i64
  %22 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__14pairINS_6StringENS_6VectorIS4_Lj0ES0_EEEEEEmm(i64 %21) #11
  %23 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %22, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__14pairINS_6StringENS_6VectorIS3_Lj0ENS_18PartitionAllocatorEEEEEEEPKcv, i64 0, i64 0)) #11
  %24 = ptrtoint i8* %23 to i64
  %25 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %24, i64* %25 monotonic, align 8
  %26 = udiv i64 %22, 24
  %27 = trunc i64 %26 to i32
  store i32 %27, i32* %6, align 8
  br label %29

28:                                               ; preds = %16
  tail call void @_ZN3WTF6VectorINSt3__14pairINS_6StringENS0_IS3_Lj0ENS_18PartitionAllocatorEEEEELj0ES4_E16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %14) #11
  br label %29

29:                                               ; preds = %2, %20, %28
  %30 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %31 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %30, align 8
  %32 = load i32, i32* %3, align 4
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %31, i64 %33, i32 0
  %35 = getelementptr inbounds %"struct.std::__1::pair.221", %"struct.std::__1::pair.221"* %1, i64 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = icmp eq i8* %36, null
  br i1 %37, label %40, label %38

38:                                               ; preds = %29
  %39 = tail call i64 @strlen(i8* nonnull %36) #13
  br label %40

40:                                               ; preds = %29, %38
  %41 = phi i64 [ %39, %38 ], [ 0, %29 ]
  tail call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* %34, i8* %36, i64 %41) #11
  %42 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %31, i64 %33, i32 1
  %43 = bitcast %"class.WTF::Vector.1"* %42 to i8*
  %44 = getelementptr inbounds %"struct.std::__1::pair.221", %"struct.std::__1::pair.221"* %1, i64 0, i32 1
  %45 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %31, i64 %33, i32 1, i32 0, i32 0, i32 1
  %46 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %31, i64 %33, i32 1, i32 0, i32 0, i32 2
  %47 = bitcast %"class.WTF::Vector.1"* %44 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %43, i8 0, i64 16, i1 false) #11
  %48 = load i64, i64* %47, align 8
  %49 = bitcast %"class.WTF::Vector.1"* %42 to i64*
  store atomic i64 0, i64* %47 monotonic, align 8
  store atomic i64 %48, i64* %49 monotonic, align 8
  %50 = getelementptr inbounds %"struct.std::__1::pair.221", %"struct.std::__1::pair.221"* %1, i64 0, i32 1, i32 0, i32 0, i32 1
  %51 = load i32, i32* %45, align 4
  %52 = load i32, i32* %50, align 4
  store i32 %52, i32* %45, align 4
  store i32 %51, i32* %50, align 4
  %53 = getelementptr inbounds %"struct.std::__1::pair.221", %"struct.std::__1::pair.221"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %54 = load i32, i32* %46, align 4
  %55 = load i32, i32* %53, align 4
  store i32 %55, i32* %46, align 4
  store i32 %54, i32* %53, align 4
  %56 = load i32, i32* %3, align 4
  %57 = add i32 %56, 1
  store i32 %57, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINSt3__14pairINS_6StringENS0_IS3_Lj0ENS_18PartitionAllocatorEEEEELj0ES4_E16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %92

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %6, i64 %9
  %11 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %11 monotonic, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %8, 0
  br i1 %13, label %90, label %14

14:                                               ; preds = %4, %86
  %15 = phi %"struct.std::__1::pair"* [ %88, %86 ], [ %6, %4 ]
  %16 = phi %"struct.std::__1::pair"* [ %87, %86 ], [ null, %4 ]
  %17 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %15, i64 0, i32 0, i32 0, i32 0
  %18 = bitcast %"struct.std::__1::pair"* %15 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"struct.std::__1::pair"* %16 to i64*
  store i64 %19, i64* %20, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %17, align 8
  %21 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %16, i64 0, i32 1
  %22 = bitcast %"class.WTF::Vector.1"* %21 to i8*
  %23 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %15, i64 0, i32 1
  %24 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %16, i64 0, i32 1, i32 0, i32 0, i32 1
  %25 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %16, i64 0, i32 1, i32 0, i32 0, i32 2
  %26 = bitcast %"class.WTF::Vector.1"* %23 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 16, i1 false) #11
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"class.WTF::Vector.1"* %21 to i64*
  store atomic i64 0, i64* %26 monotonic, align 8
  store atomic i64 %27, i64* %28 monotonic, align 8
  %29 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %15, i64 0, i32 1, i32 0, i32 0, i32 1
  %30 = load i32, i32* %24, align 4
  %31 = load i32, i32* %29, align 4
  store i32 %31, i32* %24, align 4
  store i32 %30, i32* %29, align 4
  %32 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %15, i64 0, i32 1, i32 0, i32 0, i32 2
  %33 = load i32, i32* %25, align 4
  %34 = load i32, i32* %32, align 4
  store i32 %34, i32* %25, align 4
  store i32 %33, i32* %32, align 4
  %35 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %23, i64 0, i32 0, i32 0, i32 0
  %36 = load %"class.WTF::String"*, %"class.WTF::String"** %35, align 8
  %37 = icmp eq %"class.WTF::String"* %36, null
  br i1 %37, label %70, label %38, !prof !13

38:                                               ; preds = %14
  %39 = bitcast %"class.WTF::String"* %36 to i8*
  %40 = icmp eq i32 %33, 0
  br i1 %40, label %68, label %41, !prof !14

41:                                               ; preds = %38
  %42 = zext i32 %33 to i64
  %43 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %36, i64 %42
  br label %44

44:                                               ; preds = %62, %41
  %45 = phi %"class.WTF::String"* [ %63, %62 ], [ %36, %41 ]
  %46 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %45, i64 0, i32 0, i32 0
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %46, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %47, null
  br i1 %48, label %62, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 0
  %55 = load i32, i32* %54, align 4
  br i1 %53, label %56, label %58

56:                                               ; preds = %49
  %57 = add i32 %55, -1
  store i32 %57, i32* %54, align 4
  br label %58

58:                                               ; preds = %56, %49
  %59 = phi i32 [ %57, %56 ], [ %55, %49 ]
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %47) #11
  br label %62

62:                                               ; preds = %61, %58, %44
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %45, i64 1
  %64 = icmp eq %"class.WTF::String"* %63, %43
  br i1 %64, label %65, label %44

65:                                               ; preds = %62
  store i32 0, i32* %32, align 4
  %66 = bitcast %"class.WTF::Vector.1"* %23 to i8**
  %67 = load i8*, i8** %66, align 8
  br label %68

68:                                               ; preds = %65, %38
  %69 = phi i8* [ %67, %65 ], [ %39, %38 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %69) #11
  store %"class.WTF::String"* null, %"class.WTF::String"** %35, align 8
  br label %70

70:                                               ; preds = %68, %14
  %71 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %72 = icmp eq %"class.WTF::StringImpl"* %71, null
  br i1 %72, label %86, label %73

73:                                               ; preds = %70
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load atomic i32, i32* %74 monotonic, align 4
  %76 = and i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 0
  %79 = load i32, i32* %78, align 4
  br i1 %77, label %80, label %82

80:                                               ; preds = %73
  %81 = add i32 %79, -1
  store i32 %81, i32* %78, align 4
  br label %82

82:                                               ; preds = %80, %73
  %83 = phi i32 [ %81, %80 ], [ %79, %73 ]
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %86

85:                                               ; preds = %82
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %71) #11
  br label %86

86:                                               ; preds = %70, %82, %85
  %87 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %16, i64 1
  %88 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %15, i64 1
  %89 = icmp eq %"struct.std::__1::pair"* %88, %10
  br i1 %89, label %90, label %14

90:                                               ; preds = %86, %4
  %91 = bitcast %"struct.std::__1::pair"* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %91) #11
  br label %193

92:                                               ; preds = %2
  %93 = zext i32 %1 to i64
  %94 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__14pairINS_6StringENS_6VectorIS4_Lj0ES0_EEEEEEmm(i64 %93) #11
  %95 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %94, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__14pairINS_6StringENS_6VectorIS3_Lj0ENS_18PartitionAllocatorEEEEEEEPKcv, i64 0, i64 0)) #11
  %96 = udiv i64 %94, 24
  %97 = ptrtoint i8* %95 to i64
  %98 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %99 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %98, align 8
  %100 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %101 = load i32, i32* %100, align 4
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %99, i64 %102
  %104 = icmp eq i32 %101, 0
  br i1 %104, label %105, label %107

105:                                              ; preds = %92
  %106 = bitcast %"struct.std::__1::pair"* %99 to i8*
  br label %188

107:                                              ; preds = %92
  %108 = bitcast i8* %95 to %"struct.std::__1::pair"*
  br label %109

109:                                              ; preds = %107, %181
  %110 = phi %"struct.std::__1::pair"* [ %183, %181 ], [ %99, %107 ]
  %111 = phi %"struct.std::__1::pair"* [ %182, %181 ], [ %108, %107 ]
  %112 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %110, i64 0, i32 0, i32 0, i32 0
  %113 = bitcast %"struct.std::__1::pair"* %110 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"struct.std::__1::pair"* %111 to i64*
  store i64 %114, i64* %115, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %112, align 8
  %116 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %111, i64 0, i32 1
  %117 = bitcast %"class.WTF::Vector.1"* %116 to i8*
  %118 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %110, i64 0, i32 1
  %119 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %111, i64 0, i32 1, i32 0, i32 0, i32 1
  %120 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %111, i64 0, i32 1, i32 0, i32 0, i32 2
  %121 = bitcast %"class.WTF::Vector.1"* %118 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %117, i8 0, i64 16, i1 false) #11
  %122 = load i64, i64* %121, align 8
  %123 = bitcast %"class.WTF::Vector.1"* %116 to i64*
  store atomic i64 0, i64* %121 monotonic, align 8
  store atomic i64 %122, i64* %123 monotonic, align 8
  %124 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %110, i64 0, i32 1, i32 0, i32 0, i32 1
  %125 = load i32, i32* %119, align 4
  %126 = load i32, i32* %124, align 4
  store i32 %126, i32* %119, align 4
  store i32 %125, i32* %124, align 4
  %127 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %110, i64 0, i32 1, i32 0, i32 0, i32 2
  %128 = load i32, i32* %120, align 4
  %129 = load i32, i32* %127, align 4
  store i32 %129, i32* %120, align 4
  store i32 %128, i32* %127, align 4
  %130 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %118, i64 0, i32 0, i32 0, i32 0
  %131 = load %"class.WTF::String"*, %"class.WTF::String"** %130, align 8
  %132 = icmp eq %"class.WTF::String"* %131, null
  br i1 %132, label %165, label %133, !prof !13

133:                                              ; preds = %109
  %134 = bitcast %"class.WTF::String"* %131 to i8*
  %135 = icmp eq i32 %128, 0
  br i1 %135, label %163, label %136, !prof !14

136:                                              ; preds = %133
  %137 = zext i32 %128 to i64
  %138 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %131, i64 %137
  br label %139

139:                                              ; preds = %157, %136
  %140 = phi %"class.WTF::String"* [ %158, %157 ], [ %131, %136 ]
  %141 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %140, i64 0, i32 0, i32 0
  %142 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %141, align 8
  %143 = icmp eq %"class.WTF::StringImpl"* %142, null
  br i1 %143, label %157, label %144

144:                                              ; preds = %139
  %145 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %142, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %146 = load atomic i32, i32* %145 monotonic, align 4
  %147 = and i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %142, i64 0, i32 0
  %150 = load i32, i32* %149, align 4
  br i1 %148, label %151, label %153

151:                                              ; preds = %144
  %152 = add i32 %150, -1
  store i32 %152, i32* %149, align 4
  br label %153

153:                                              ; preds = %151, %144
  %154 = phi i32 [ %152, %151 ], [ %150, %144 ]
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %157

156:                                              ; preds = %153
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %142) #11
  br label %157

157:                                              ; preds = %156, %153, %139
  %158 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %140, i64 1
  %159 = icmp eq %"class.WTF::String"* %158, %138
  br i1 %159, label %160, label %139

160:                                              ; preds = %157
  store i32 0, i32* %127, align 4
  %161 = bitcast %"class.WTF::Vector.1"* %118 to i8**
  %162 = load i8*, i8** %161, align 8
  br label %163

163:                                              ; preds = %160, %133
  %164 = phi i8* [ %162, %160 ], [ %134, %133 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %164) #11
  store %"class.WTF::String"* null, %"class.WTF::String"** %130, align 8
  br label %165

165:                                              ; preds = %163, %109
  %166 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %112, align 8
  %167 = icmp eq %"class.WTF::StringImpl"* %166, null
  br i1 %167, label %181, label %168

168:                                              ; preds = %165
  %169 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %166, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %170 = load atomic i32, i32* %169 monotonic, align 4
  %171 = and i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %166, i64 0, i32 0
  %174 = load i32, i32* %173, align 4
  br i1 %172, label %175, label %177

175:                                              ; preds = %168
  %176 = add i32 %174, -1
  store i32 %176, i32* %173, align 4
  br label %177

177:                                              ; preds = %175, %168
  %178 = phi i32 [ %176, %175 ], [ %174, %168 ]
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %180, label %181

180:                                              ; preds = %177
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %166) #11
  br label %181

181:                                              ; preds = %165, %177, %180
  %182 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %111, i64 1
  %183 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %110, i64 1
  %184 = icmp eq %"struct.std::__1::pair"* %183, %103
  br i1 %184, label %185, label %109

185:                                              ; preds = %181
  %186 = bitcast %"class.WTF::Vector"* %0 to i8**
  %187 = load i8*, i8** %186, align 8
  br label %188

188:                                              ; preds = %105, %185
  %189 = phi i8* [ %187, %185 ], [ %106, %105 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %189) #11
  %190 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %97, i64* %190 monotonic, align 8
  %191 = trunc i64 %96 to i32
  %192 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %191, i32* %192, align 8
  br label %193

193:                                              ; preds = %188, %90
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINSt3__14pairINS_6StringENS_6VectorIS4_Lj0ES0_EEEEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 89391104
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #11
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 89391104) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #11
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #11
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #11
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #11
  %20 = mul i64 %0, 24
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #11
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_15SanitizerConfigELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE0EEEXadL_ZNKS5_15TracePersistentEPNS_7VisitorEEEE10TrampolineES7_PKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = alloca %"class.base::Location", align 8
  %4 = bitcast i8* %1 to %"class.blink::SanitizerConfig"**
  %5 = load %"class.blink::SanitizerConfig"*, %"class.blink::SanitizerConfig"** %4, align 8
  %6 = bitcast %"class.base::Location"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #11
  call void @_ZN4base8LocationC1Ev(%"class.base::Location"* nonnull %3) #11
  %7 = icmp eq %"class.blink::SanitizerConfig"* %5, null
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.blink::SanitizerConfig"* %5 to i8*
  %10 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, {}*, %"class.base::Location"*)***
  %11 = load void (%"class.blink::Visitor"*, i8*, i8*, {}*, %"class.base::Location"*)**, void (%"class.blink::Visitor"*, i8*, i8*, {}*, %"class.base::Location"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, {}*, %"class.base::Location"*)*, void (%"class.blink::Visitor"*, i8*, i8*, {}*, %"class.base::Location"*)** %11, i64 8
  %13 = load void (%"class.blink::Visitor"*, i8*, i8*, {}*, %"class.base::Location"*)*, void (%"class.blink::Visitor"*, i8*, i8*, {}*, %"class.base::Location"*)** %12, align 8
  call void %13(%"class.blink::Visitor"* %0, i8* nonnull %9, i8* nonnull %9, {}* bitcast (void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_15SanitizerConfigEE5TraceEPNS_7VisitorEPKv to {}*), %"class.base::Location"* nonnull dereferenceable(32) %3) #11
  br label %14

14:                                               ; preds = %2, %8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #11
  ret void
}

declare void @_ZN4base8LocationC1Ev(%"class.base::Location"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_15SanitizerConfigEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::SanitizerConfig"*
  %4 = bitcast i8* %1 to void (%"class.blink::SanitizerConfig"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::SanitizerConfig"*, %"class.blink::Visitor"*)**, void (%"class.blink::SanitizerConfig"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::SanitizerConfig"*, %"class.blink::Visitor"*)*, void (%"class.blink::SanitizerConfig"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::SanitizerConfig"*, %"class.blink::Visitor"*)*, void (%"class.blink::SanitizerConfig"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::SanitizerConfig"* %3, %"class.blink::Visitor"* %0) #11
  ret void
}

declare void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN5blink12_GLOBAL__N_120GetDefaultConfigImplEv: argument 0"}
!4 = distinct !{!4, !"_ZN5blink12_GLOBAL__N_120GetDefaultConfigImplEv"}
!5 = !{!"branch_weights", i32 1, i32 1048575}
!6 = !{i8 0, i8 2}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN5blink12_GLOBAL__N_120GetDefaultConfigImplEv: argument 0"}
!9 = distinct !{!9, !"_ZN5blink12_GLOBAL__N_120GetDefaultConfigImplEv"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN5blink12_GLOBAL__N_120GetDefaultConfigImplEv: argument 0"}
!12 = distinct !{!12, !"_ZN5blink12_GLOBAL__N_120GetDefaultConfigImplEv"}
!13 = !{!"branch_weights", i32 2000, i32 1}
!14 = !{!"branch_weights", i32 1, i32 2000}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZNSt3__19make_pairIRPKcRN3WTF6VectorINS4_6StringELj0ENS4_18PartitionAllocatorEEEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENSB_IT0_E4typeEEEOSC_OSF_: argument 0"}
!17 = distinct !{!17, !"_ZNSt3__19make_pairIRPKcRN3WTF6VectorINS4_6StringELj0ENS4_18PartitionAllocatorEEEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENSB_IT0_E4typeEEEOSC_OSF_"}
