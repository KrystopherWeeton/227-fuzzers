; ModuleID = '../../third_party/opus/src/silk/float/energy_FLP.c'
source_filename = "../../third_party/opus/src/silk/float/energy_FLP.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @silk_energy_FLP(float* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = add nsw i32 %1, -3
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %9

5:                                                ; preds = %2
  %6 = sext i32 %3 to i64
  br label %37

7:                                                ; preds = %37
  %8 = and i32 %1, -4
  br label %9

9:                                                ; preds = %7, %2
  %10 = phi i32 [ 0, %2 ], [ %8, %7 ]
  %11 = phi double [ 0.000000e+00, %2 ], [ %60, %7 ]
  %12 = icmp slt i32 %10, %1
  br i1 %12, label %13, label %91

13:                                               ; preds = %9
  %14 = zext i32 %10 to i64
  %15 = zext i32 %1 to i64
  %16 = xor i64 %14, -1
  %17 = add nsw i64 %16, %15
  %18 = and i64 %15, 3
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %32, label %20

20:                                               ; preds = %13, %20
  %21 = phi i64 [ %29, %20 ], [ %14, %13 ]
  %22 = phi double [ %28, %20 ], [ %11, %13 ]
  %23 = phi i64 [ %30, %20 ], [ %18, %13 ]
  %24 = getelementptr inbounds float, float* %0, i64 %21
  %25 = load float, float* %24, align 4
  %26 = fpext float %25 to double
  %27 = fmul double %26, %26
  %28 = fadd double %22, %27
  %29 = add nuw nsw i64 %21, 1
  %30 = add i64 %23, -1
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %20, !llvm.loop !2

32:                                               ; preds = %20, %13
  %33 = phi double [ undef, %13 ], [ %28, %20 ]
  %34 = phi i64 [ %14, %13 ], [ %29, %20 ]
  %35 = phi double [ %11, %13 ], [ %28, %20 ]
  %36 = icmp ult i64 %17, 3
  br i1 %36, label %91, label %63

37:                                               ; preds = %5, %37
  %38 = phi i64 [ 0, %5 ], [ %61, %37 ]
  %39 = phi double [ 0.000000e+00, %5 ], [ %60, %37 ]
  %40 = getelementptr inbounds float, float* %0, i64 %38
  %41 = load float, float* %40, align 4
  %42 = fpext float %41 to double
  %43 = fmul double %42, %42
  %44 = or i64 %38, 1
  %45 = getelementptr inbounds float, float* %0, i64 %44
  %46 = load float, float* %45, align 4
  %47 = fpext float %46 to double
  %48 = fmul double %47, %47
  %49 = fadd double %43, %48
  %50 = or i64 %38, 2
  %51 = getelementptr inbounds float, float* %0, i64 %50
  %52 = bitcast float* %51 to <2 x float>*
  %53 = load <2 x float>, <2 x float>* %52, align 4
  %54 = fpext <2 x float> %53 to <2 x double>
  %55 = fmul <2 x double> %54, %54
  %56 = extractelement <2 x double> %55, i32 0
  %57 = fadd double %49, %56
  %58 = extractelement <2 x double> %55, i32 1
  %59 = fadd double %57, %58
  %60 = fadd double %39, %59
  %61 = add nuw nsw i64 %38, 4
  %62 = icmp slt i64 %61, %6
  br i1 %62, label %37, label %7

63:                                               ; preds = %32, %63
  %64 = phi i64 [ %89, %63 ], [ %34, %32 ]
  %65 = phi double [ %88, %63 ], [ %35, %32 ]
  %66 = getelementptr inbounds float, float* %0, i64 %64
  %67 = load float, float* %66, align 4
  %68 = fpext float %67 to double
  %69 = fmul double %68, %68
  %70 = fadd double %65, %69
  %71 = add nuw nsw i64 %64, 1
  %72 = getelementptr inbounds float, float* %0, i64 %71
  %73 = load float, float* %72, align 4
  %74 = fpext float %73 to double
  %75 = fmul double %74, %74
  %76 = fadd double %70, %75
  %77 = add nuw nsw i64 %64, 2
  %78 = getelementptr inbounds float, float* %0, i64 %77
  %79 = load float, float* %78, align 4
  %80 = fpext float %79 to double
  %81 = fmul double %80, %80
  %82 = fadd double %76, %81
  %83 = add nuw nsw i64 %64, 3
  %84 = getelementptr inbounds float, float* %0, i64 %83
  %85 = load float, float* %84, align 4
  %86 = fpext float %85 to double
  %87 = fmul double %86, %86
  %88 = fadd double %82, %87
  %89 = add nuw nsw i64 %64, 4
  %90 = icmp eq i64 %89, %15
  br i1 %90, label %91, label %63

91:                                               ; preds = %32, %63, %9
  %92 = phi double [ %11, %9 ], [ %33, %32 ], [ %88, %63 ]
  ret double %92
}

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
