; ModuleID = '../../third_party/libwebp/src/dsp/dec.c'
source_filename = "../../third_party/libwebp/src/dsp/dec.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@VP8DspInit.VP8DspInit_body_last_cpuinfo_used = internal global i32 (i32)* bitcast (i32 (i32)** @VP8DspInit.VP8DspInit_body_last_cpuinfo_used to i32 (i32)*), align 8
@VP8GetCPUInfo = external local_unnamed_addr global i32 (i32)*, align 8
@VP8TransformWHT = common hidden local_unnamed_addr global void (i16*, i16*)* null, align 8
@VP8PredLuma16 = common hidden local_unnamed_addr global [7 x void (i8*)*] zeroinitializer, align 16
@VP8PredLuma4 = common hidden local_unnamed_addr global [10 x void (i8*)*] zeroinitializer, align 16
@VP8PredChroma8 = common hidden local_unnamed_addr global [7 x void (i8*)*] zeroinitializer, align 16
@VP8Transform = common hidden local_unnamed_addr global void (i16*, i8*, i32)* null, align 8
@VP8TransformAC3 = common hidden local_unnamed_addr global void (i16*, i8*)* null, align 8
@VP8TransformUV = common hidden local_unnamed_addr global void (i16*, i8*)* null, align 8
@VP8TransformDC = common hidden local_unnamed_addr global void (i16*, i8*)* null, align 8
@VP8TransformDCUV = common hidden local_unnamed_addr global void (i16*, i8*)* null, align 8
@VP8VFilter16 = common hidden local_unnamed_addr global void (i8*, i32, i32, i32, i32)* null, align 8
@VP8HFilter16 = common hidden local_unnamed_addr global void (i8*, i32, i32, i32, i32)* null, align 8
@VP8VFilter8 = common hidden local_unnamed_addr global void (i8*, i8*, i32, i32, i32, i32)* null, align 8
@VP8HFilter8 = common hidden local_unnamed_addr global void (i8*, i8*, i32, i32, i32, i32)* null, align 8
@VP8VFilter16i = common hidden local_unnamed_addr global void (i8*, i32, i32, i32, i32)* null, align 8
@VP8HFilter16i = common hidden local_unnamed_addr global void (i8*, i32, i32, i32, i32)* null, align 8
@VP8VFilter8i = common hidden local_unnamed_addr global void (i8*, i8*, i32, i32, i32, i32)* null, align 8
@VP8HFilter8i = common hidden local_unnamed_addr global void (i8*, i8*, i32, i32, i32, i32)* null, align 8
@VP8SimpleVFilter16 = common hidden local_unnamed_addr global void (i8*, i32, i32)* null, align 8
@VP8SimpleHFilter16 = common hidden local_unnamed_addr global void (i8*, i32, i32)* null, align 8
@VP8SimpleVFilter16i = common hidden local_unnamed_addr global void (i8*, i32, i32)* null, align 8
@VP8SimpleHFilter16i = common hidden local_unnamed_addr global void (i8*, i32, i32)* null, align 8
@VP8DitherCombine8x8 = common hidden local_unnamed_addr global void (i8*, i8*, i32)* null, align 8
@VP8kabs0 = external local_unnamed_addr constant i8*, align 8
@VP8ksclip1 = external local_unnamed_addr constant i8*, align 8
@VP8ksclip2 = external local_unnamed_addr constant i8*, align 8
@VP8kclip1 = external local_unnamed_addr constant i8*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8DspInit() local_unnamed_addr #0 {
  %1 = load volatile i32 (i32)*, i32 (i32)** @VP8DspInit.VP8DspInit_body_last_cpuinfo_used, align 8
  %2 = load i32 (i32)*, i32 (i32)** @VP8GetCPUInfo, align 8
  %3 = icmp eq i32 (i32)* %1, %2
  br i1 %3, label %17, label %4

4:                                                ; preds = %0
  tail call void @VP8InitClipTables() #5
  store void (i16*, i16*)* @TransformWHT_C, void (i16*, i16*)** @VP8TransformWHT, align 8
  store void (i16*, i8*, i32)* @TransformTwo_C, void (i16*, i8*, i32)** @VP8Transform, align 8
  store void (i16*, i8*)* @TransformDC_C, void (i16*, i8*)** @VP8TransformDC, align 8
  store void (i16*, i8*)* @TransformAC3_C, void (i16*, i8*)** @VP8TransformAC3, align 8
  store void (i16*, i8*)* @TransformUV_C, void (i16*, i8*)** @VP8TransformUV, align 8
  store void (i16*, i8*)* @TransformDCUV_C, void (i16*, i8*)** @VP8TransformDCUV, align 8
  store void (i8*, i32, i32, i32, i32)* @VFilter16_C, void (i8*, i32, i32, i32, i32)** @VP8VFilter16, align 8
  store void (i8*, i32, i32, i32, i32)* @VFilter16i_C, void (i8*, i32, i32, i32, i32)** @VP8VFilter16i, align 8
  store void (i8*, i32, i32, i32, i32)* @HFilter16_C, void (i8*, i32, i32, i32, i32)** @VP8HFilter16, align 8
  store void (i8*, i8*, i32, i32, i32, i32)* @VFilter8_C, void (i8*, i8*, i32, i32, i32, i32)** @VP8VFilter8, align 8
  store void (i8*, i8*, i32, i32, i32, i32)* @VFilter8i_C, void (i8*, i8*, i32, i32, i32, i32)** @VP8VFilter8i, align 8
  store void (i8*, i32, i32)* @SimpleVFilter16_C, void (i8*, i32, i32)** @VP8SimpleVFilter16, align 8
  store void (i8*, i32, i32)* @SimpleHFilter16_C, void (i8*, i32, i32)** @VP8SimpleHFilter16, align 8
  store void (i8*, i32, i32)* @SimpleVFilter16i_C, void (i8*, i32, i32)** @VP8SimpleVFilter16i, align 8
  store void (i8*, i32, i32)* @SimpleHFilter16i_C, void (i8*, i32, i32)** @VP8SimpleHFilter16i, align 8
  store void (i8*, i32, i32, i32, i32)* @HFilter16i_C, void (i8*, i32, i32, i32, i32)** @VP8HFilter16i, align 8
  store void (i8*, i8*, i32, i32, i32, i32)* @HFilter8_C, void (i8*, i8*, i32, i32, i32, i32)** @VP8HFilter8, align 8
  store void (i8*, i8*, i32, i32, i32, i32)* @HFilter8i_C, void (i8*, i8*, i32, i32, i32, i32)** @VP8HFilter8i, align 8
  store <2 x void (i8*)*> <void (i8*)* @DC4_C, void (i8*)* @TM4_C>, <2 x void (i8*)*>* bitcast ([10 x void (i8*)*]* @VP8PredLuma4 to <2 x void (i8*)*>*), align 16
  store <2 x void (i8*)*> <void (i8*)* @VE4_C, void (i8*)* @HE4_C>, <2 x void (i8*)*>* bitcast (void (i8*)** getelementptr inbounds ([10 x void (i8*)*], [10 x void (i8*)*]* @VP8PredLuma4, i64 0, i64 2) to <2 x void (i8*)*>*), align 16
  store <2 x void (i8*)*> <void (i8*)* @RD4_C, void (i8*)* @VR4_C>, <2 x void (i8*)*>* bitcast (void (i8*)** getelementptr inbounds ([10 x void (i8*)*], [10 x void (i8*)*]* @VP8PredLuma4, i64 0, i64 4) to <2 x void (i8*)*>*), align 16
  store <2 x void (i8*)*> <void (i8*)* @LD4_C, void (i8*)* @VL4_C>, <2 x void (i8*)*>* bitcast (void (i8*)** getelementptr inbounds ([10 x void (i8*)*], [10 x void (i8*)*]* @VP8PredLuma4, i64 0, i64 6) to <2 x void (i8*)*>*), align 16
  store <2 x void (i8*)*> <void (i8*)* @HD4_C, void (i8*)* @HU4_C>, <2 x void (i8*)*>* bitcast (void (i8*)** getelementptr inbounds ([10 x void (i8*)*], [10 x void (i8*)*]* @VP8PredLuma4, i64 0, i64 8) to <2 x void (i8*)*>*), align 16
  store <2 x void (i8*)*> <void (i8*)* @DC16_C, void (i8*)* @TM16_C>, <2 x void (i8*)*>* bitcast ([7 x void (i8*)*]* @VP8PredLuma16 to <2 x void (i8*)*>*), align 16
  store <2 x void (i8*)*> <void (i8*)* @VE16_C, void (i8*)* @HE16_C>, <2 x void (i8*)*>* bitcast (void (i8*)** getelementptr inbounds ([7 x void (i8*)*], [7 x void (i8*)*]* @VP8PredLuma16, i64 0, i64 2) to <2 x void (i8*)*>*), align 16
  store <2 x void (i8*)*> <void (i8*)* @DC16NoTop_C, void (i8*)* @DC16NoLeft_C>, <2 x void (i8*)*>* bitcast (void (i8*)** getelementptr inbounds ([7 x void (i8*)*], [7 x void (i8*)*]* @VP8PredLuma16, i64 0, i64 4) to <2 x void (i8*)*>*), align 16
  store void (i8*)* @DC16NoTopLeft_C, void (i8*)** getelementptr inbounds ([7 x void (i8*)*], [7 x void (i8*)*]* @VP8PredLuma16, i64 0, i64 6), align 16
  store <2 x void (i8*)*> <void (i8*)* @DC8uv_C, void (i8*)* @TM8uv_C>, <2 x void (i8*)*>* bitcast ([7 x void (i8*)*]* @VP8PredChroma8 to <2 x void (i8*)*>*), align 16
  store <2 x void (i8*)*> <void (i8*)* @VE8uv_C, void (i8*)* @HE8uv_C>, <2 x void (i8*)*>* bitcast (void (i8*)** getelementptr inbounds ([7 x void (i8*)*], [7 x void (i8*)*]* @VP8PredChroma8, i64 0, i64 2) to <2 x void (i8*)*>*), align 16
  store <2 x void (i8*)*> <void (i8*)* @DC8uvNoTop_C, void (i8*)* @DC8uvNoLeft_C>, <2 x void (i8*)*>* bitcast (void (i8*)** getelementptr inbounds ([7 x void (i8*)*], [7 x void (i8*)*]* @VP8PredChroma8, i64 0, i64 4) to <2 x void (i8*)*>*), align 16
  store void (i8*)* @DC8uvNoTopLeft_C, void (i8*)** getelementptr inbounds ([7 x void (i8*)*], [7 x void (i8*)*]* @VP8PredChroma8, i64 0, i64 6), align 16
  store void (i8*, i8*, i32)* @DitherCombine8x8_C, void (i8*, i8*, i32)** @VP8DitherCombine8x8, align 8
  %5 = load i32 (i32)*, i32 (i32)** @VP8GetCPUInfo, align 8
  %6 = icmp eq i32 (i32)* %5, null
  br i1 %6, label %15, label %7

7:                                                ; preds = %4
  %8 = tail call i32 %5(i32 0) #5
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %7
  tail call void @VP8DspInitSSE2() #5
  %11 = load i32 (i32)*, i32 (i32)** @VP8GetCPUInfo, align 8
  %12 = tail call i32 %11(i32 3) #5
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %10
  tail call void @VP8DspInitSSE41() #5
  br label %15

15:                                               ; preds = %4, %7, %10, %14
  %16 = load i64, i64* bitcast (i32 (i32)** @VP8GetCPUInfo to i64*), align 8
  store volatile i64 %16, i64* bitcast (i32 (i32)** @VP8DspInit.VP8DspInit_body_last_cpuinfo_used to i64*), align 8
  br label %17

17:                                               ; preds = %0, %15
  ret void
}

declare void @VP8InitClipTables() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @TransformWHT_C(i16* nocapture readonly, i16* nocapture) #0 {
  %3 = alloca [16 x i32], align 16
  %4 = bitcast [16 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 64, i1 false)
  %5 = load i16, i16* %0, align 2
  %6 = sext i16 %5 to i32
  %7 = getelementptr inbounds i16, i16* %0, i64 12
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i32
  %10 = add nsw i32 %9, %6
  %11 = getelementptr inbounds i16, i16* %0, i64 4
  %12 = load i16, i16* %11, align 2
  %13 = sext i16 %12 to i32
  %14 = getelementptr inbounds i16, i16* %0, i64 8
  %15 = load i16, i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = add nsw i32 %16, %13
  %18 = sub nsw i32 %13, %16
  %19 = sub nsw i32 %6, %9
  %20 = add nsw i32 %17, %10
  %21 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 0
  store i32 %20, i32* %21, align 16
  %22 = sub nsw i32 %10, %17
  %23 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 8
  store i32 %22, i32* %23, align 16
  %24 = add nsw i32 %18, %19
  %25 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 4
  store i32 %24, i32* %25, align 16
  %26 = sub nsw i32 %19, %18
  %27 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 12
  store i32 %26, i32* %27, align 16
  %28 = getelementptr inbounds i16, i16* %0, i64 1
  %29 = load i16, i16* %28, align 2
  %30 = sext i16 %29 to i32
  %31 = getelementptr inbounds i16, i16* %0, i64 13
  %32 = load i16, i16* %31, align 2
  %33 = sext i16 %32 to i32
  %34 = add nsw i32 %33, %30
  %35 = getelementptr inbounds i16, i16* %0, i64 5
  %36 = load i16, i16* %35, align 2
  %37 = sext i16 %36 to i32
  %38 = getelementptr inbounds i16, i16* %0, i64 9
  %39 = load i16, i16* %38, align 2
  %40 = sext i16 %39 to i32
  %41 = add nsw i32 %40, %37
  %42 = sub nsw i32 %37, %40
  %43 = sub nsw i32 %30, %33
  %44 = add nsw i32 %41, %34
  %45 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 1
  store i32 %44, i32* %45, align 4
  %46 = sub nsw i32 %34, %41
  %47 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 9
  store i32 %46, i32* %47, align 4
  %48 = add nsw i32 %42, %43
  %49 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 5
  store i32 %48, i32* %49, align 4
  %50 = sub nsw i32 %43, %42
  %51 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 13
  store i32 %50, i32* %51, align 4
  %52 = getelementptr inbounds i16, i16* %0, i64 2
  %53 = load i16, i16* %52, align 2
  %54 = sext i16 %53 to i32
  %55 = getelementptr inbounds i16, i16* %0, i64 14
  %56 = load i16, i16* %55, align 2
  %57 = sext i16 %56 to i32
  %58 = add nsw i32 %57, %54
  %59 = getelementptr inbounds i16, i16* %0, i64 6
  %60 = load i16, i16* %59, align 2
  %61 = sext i16 %60 to i32
  %62 = getelementptr inbounds i16, i16* %0, i64 10
  %63 = load i16, i16* %62, align 2
  %64 = sext i16 %63 to i32
  %65 = add nsw i32 %64, %61
  %66 = sub nsw i32 %61, %64
  %67 = sub nsw i32 %54, %57
  %68 = add nsw i32 %65, %58
  %69 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 2
  store i32 %68, i32* %69, align 8
  %70 = sub nsw i32 %58, %65
  %71 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 10
  store i32 %70, i32* %71, align 8
  %72 = add nsw i32 %66, %67
  %73 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 6
  store i32 %72, i32* %73, align 8
  %74 = sub nsw i32 %67, %66
  %75 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 14
  store i32 %74, i32* %75, align 8
  %76 = getelementptr inbounds i16, i16* %0, i64 3
  %77 = load i16, i16* %76, align 2
  %78 = sext i16 %77 to i32
  %79 = getelementptr inbounds i16, i16* %0, i64 15
  %80 = load i16, i16* %79, align 2
  %81 = sext i16 %80 to i32
  %82 = add nsw i32 %81, %78
  %83 = getelementptr inbounds i16, i16* %0, i64 7
  %84 = load i16, i16* %83, align 2
  %85 = sext i16 %84 to i32
  %86 = getelementptr inbounds i16, i16* %0, i64 11
  %87 = load i16, i16* %86, align 2
  %88 = sext i16 %87 to i32
  %89 = add nsw i32 %88, %85
  %90 = sub nsw i32 %85, %88
  %91 = sub nsw i32 %78, %81
  %92 = add nsw i32 %89, %82
  %93 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 3
  store i32 %92, i32* %93, align 4
  %94 = sub nsw i32 %82, %89
  %95 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 11
  store i32 %94, i32* %95, align 4
  %96 = add nsw i32 %90, %91
  %97 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 7
  store i32 %96, i32* %97, align 4
  %98 = sub nsw i32 %91, %90
  %99 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 15
  store i32 %98, i32* %99, align 4
  %100 = add nsw i32 %20, 3
  %101 = add nsw i32 %100, %92
  %102 = add nsw i32 %68, %44
  %103 = sub nsw i32 %44, %68
  %104 = sub nsw i32 %100, %92
  %105 = add nsw i32 %102, %101
  %106 = lshr i32 %105, 3
  %107 = trunc i32 %106 to i16
  store i16 %107, i16* %1, align 2
  %108 = add nsw i32 %103, %104
  %109 = lshr i32 %108, 3
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds i16, i16* %1, i64 16
  store i16 %110, i16* %111, align 2
  %112 = sub nsw i32 %101, %102
  %113 = lshr i32 %112, 3
  %114 = trunc i32 %113 to i16
  %115 = getelementptr inbounds i16, i16* %1, i64 32
  store i16 %114, i16* %115, align 2
  %116 = sub nsw i32 %104, %103
  %117 = lshr i32 %116, 3
  %118 = trunc i32 %117 to i16
  %119 = getelementptr inbounds i16, i16* %1, i64 48
  store i16 %118, i16* %119, align 2
  %120 = getelementptr inbounds i16, i16* %1, i64 64
  %121 = load i32, i32* %25, align 16
  %122 = add nsw i32 %121, 3
  %123 = add nsw i32 %122, %96
  %124 = add nsw i32 %72, %48
  %125 = sub nsw i32 %48, %72
  %126 = sub nsw i32 %122, %96
  %127 = add nsw i32 %124, %123
  %128 = lshr i32 %127, 3
  %129 = trunc i32 %128 to i16
  store i16 %129, i16* %120, align 2
  %130 = add nsw i32 %125, %126
  %131 = lshr i32 %130, 3
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds i16, i16* %1, i64 80
  store i16 %132, i16* %133, align 2
  %134 = sub nsw i32 %123, %124
  %135 = lshr i32 %134, 3
  %136 = trunc i32 %135 to i16
  %137 = getelementptr inbounds i16, i16* %1, i64 96
  store i16 %136, i16* %137, align 2
  %138 = sub nsw i32 %126, %125
  %139 = lshr i32 %138, 3
  %140 = trunc i32 %139 to i16
  %141 = getelementptr inbounds i16, i16* %1, i64 112
  store i16 %140, i16* %141, align 2
  %142 = getelementptr inbounds i16, i16* %1, i64 128
  %143 = load i32, i32* %23, align 16
  %144 = add nsw i32 %143, 3
  %145 = add nsw i32 %144, %94
  %146 = load i32, i32* %47, align 4
  %147 = add nsw i32 %70, %146
  %148 = sub nsw i32 %146, %70
  %149 = sub nsw i32 %144, %94
  %150 = add nsw i32 %147, %145
  %151 = lshr i32 %150, 3
  %152 = trunc i32 %151 to i16
  store i16 %152, i16* %142, align 2
  %153 = add nsw i32 %148, %149
  %154 = lshr i32 %153, 3
  %155 = trunc i32 %154 to i16
  %156 = getelementptr inbounds i16, i16* %1, i64 144
  store i16 %155, i16* %156, align 2
  %157 = sub nsw i32 %145, %147
  %158 = lshr i32 %157, 3
  %159 = trunc i32 %158 to i16
  %160 = getelementptr inbounds i16, i16* %1, i64 160
  store i16 %159, i16* %160, align 2
  %161 = sub nsw i32 %149, %148
  %162 = lshr i32 %161, 3
  %163 = trunc i32 %162 to i16
  %164 = getelementptr inbounds i16, i16* %1, i64 176
  store i16 %163, i16* %164, align 2
  %165 = getelementptr inbounds i16, i16* %1, i64 192
  %166 = load i32, i32* %27, align 16
  %167 = add nsw i32 %166, 3
  %168 = add nsw i32 %167, %98
  %169 = load i32, i32* %51, align 4
  %170 = load i32, i32* %75, align 8
  %171 = add nsw i32 %170, %169
  %172 = sub nsw i32 %169, %170
  %173 = sub nsw i32 %167, %98
  %174 = add nsw i32 %171, %168
  %175 = lshr i32 %174, 3
  %176 = trunc i32 %175 to i16
  store i16 %176, i16* %165, align 2
  %177 = add nsw i32 %172, %173
  %178 = lshr i32 %177, 3
  %179 = trunc i32 %178 to i16
  %180 = getelementptr inbounds i16, i16* %1, i64 208
  store i16 %179, i16* %180, align 2
  %181 = sub nsw i32 %168, %171
  %182 = lshr i32 %181, 3
  %183 = trunc i32 %182 to i16
  %184 = getelementptr inbounds i16, i16* %1, i64 224
  store i16 %183, i16* %184, align 2
  %185 = sub nsw i32 %173, %172
  %186 = lshr i32 %185, 3
  %187 = trunc i32 %186 to i16
  %188 = getelementptr inbounds i16, i16* %1, i64 240
  store i16 %187, i16* %188, align 2
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @TransformTwo_C(i16* nocapture readonly, i8* nocapture, i32) #0 {
  tail call fastcc void @TransformOne_C(i16* %0, i8* %1)
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds i16, i16* %0, i64 16
  %7 = getelementptr inbounds i8, i8* %1, i64 4
  tail call fastcc void @TransformOne_C(i16* %6, i8* %7)
  br label %8

8:                                                ; preds = %3, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @TransformDC_C(i16* nocapture readonly, i8* nocapture) #2 {
  %3 = load i16, i16* %0, align 2
  %4 = sext i16 %3 to i32
  %5 = add nsw i32 %4, 4
  %6 = ashr i32 %5, 3
  %7 = load i8, i8* %1, align 1
  %8 = zext i8 %7 to i32
  %9 = add nsw i32 %6, %8
  %10 = icmp ugt i32 %9, 255
  %11 = icmp slt i32 %9, 0
  %12 = select i1 %11, i32 0, i32 255
  %13 = select i1 %10, i32 %12, i32 %9
  %14 = trunc i32 %13 to i8
  store i8 %14, i8* %1, align 1
  %15 = getelementptr inbounds i8, i8* %1, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = add nsw i32 %6, %17
  %19 = icmp ugt i32 %18, 255
  %20 = icmp slt i32 %18, 0
  %21 = select i1 %20, i32 0, i32 255
  %22 = select i1 %19, i32 %21, i32 %18
  %23 = trunc i32 %22 to i8
  store i8 %23, i8* %15, align 1
  %24 = getelementptr inbounds i8, i8* %1, i64 2
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = add nsw i32 %6, %26
  %28 = icmp ugt i32 %27, 255
  %29 = icmp slt i32 %27, 0
  %30 = select i1 %29, i32 0, i32 255
  %31 = select i1 %28, i32 %30, i32 %27
  %32 = trunc i32 %31 to i8
  store i8 %32, i8* %24, align 1
  %33 = getelementptr inbounds i8, i8* %1, i64 3
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = add nsw i32 %6, %35
  %37 = icmp ugt i32 %36, 255
  %38 = icmp slt i32 %36, 0
  %39 = select i1 %38, i32 0, i32 255
  %40 = select i1 %37, i32 %39, i32 %36
  %41 = trunc i32 %40 to i8
  store i8 %41, i8* %33, align 1
  %42 = getelementptr inbounds i8, i8* %1, i64 32
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = add nsw i32 %6, %44
  %46 = icmp ugt i32 %45, 255
  %47 = icmp slt i32 %45, 0
  %48 = select i1 %47, i32 0, i32 255
  %49 = select i1 %46, i32 %48, i32 %45
  %50 = trunc i32 %49 to i8
  store i8 %50, i8* %42, align 1
  %51 = getelementptr inbounds i8, i8* %1, i64 33
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = add nsw i32 %6, %53
  %55 = icmp ugt i32 %54, 255
  %56 = icmp slt i32 %54, 0
  %57 = select i1 %56, i32 0, i32 255
  %58 = select i1 %55, i32 %57, i32 %54
  %59 = trunc i32 %58 to i8
  store i8 %59, i8* %51, align 1
  %60 = getelementptr inbounds i8, i8* %1, i64 34
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = add nsw i32 %6, %62
  %64 = icmp ugt i32 %63, 255
  %65 = icmp slt i32 %63, 0
  %66 = select i1 %65, i32 0, i32 255
  %67 = select i1 %64, i32 %66, i32 %63
  %68 = trunc i32 %67 to i8
  store i8 %68, i8* %60, align 1
  %69 = getelementptr inbounds i8, i8* %1, i64 35
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = add nsw i32 %6, %71
  %73 = icmp ugt i32 %72, 255
  %74 = icmp slt i32 %72, 0
  %75 = select i1 %74, i32 0, i32 255
  %76 = select i1 %73, i32 %75, i32 %72
  %77 = trunc i32 %76 to i8
  store i8 %77, i8* %69, align 1
  %78 = getelementptr inbounds i8, i8* %1, i64 64
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = add nsw i32 %6, %80
  %82 = icmp ugt i32 %81, 255
  %83 = icmp slt i32 %81, 0
  %84 = select i1 %83, i32 0, i32 255
  %85 = select i1 %82, i32 %84, i32 %81
  %86 = trunc i32 %85 to i8
  store i8 %86, i8* %78, align 1
  %87 = getelementptr inbounds i8, i8* %1, i64 65
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = add nsw i32 %6, %89
  %91 = icmp ugt i32 %90, 255
  %92 = icmp slt i32 %90, 0
  %93 = select i1 %92, i32 0, i32 255
  %94 = select i1 %91, i32 %93, i32 %90
  %95 = trunc i32 %94 to i8
  store i8 %95, i8* %87, align 1
  %96 = getelementptr inbounds i8, i8* %1, i64 66
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = add nsw i32 %6, %98
  %100 = icmp ugt i32 %99, 255
  %101 = icmp slt i32 %99, 0
  %102 = select i1 %101, i32 0, i32 255
  %103 = select i1 %100, i32 %102, i32 %99
  %104 = trunc i32 %103 to i8
  store i8 %104, i8* %96, align 1
  %105 = getelementptr inbounds i8, i8* %1, i64 67
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = add nsw i32 %6, %107
  %109 = icmp ugt i32 %108, 255
  %110 = icmp slt i32 %108, 0
  %111 = select i1 %110, i32 0, i32 255
  %112 = select i1 %109, i32 %111, i32 %108
  %113 = trunc i32 %112 to i8
  store i8 %113, i8* %105, align 1
  %114 = getelementptr inbounds i8, i8* %1, i64 96
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = add nsw i32 %6, %116
  %118 = icmp ugt i32 %117, 255
  %119 = icmp slt i32 %117, 0
  %120 = select i1 %119, i32 0, i32 255
  %121 = select i1 %118, i32 %120, i32 %117
  %122 = trunc i32 %121 to i8
  store i8 %122, i8* %114, align 1
  %123 = getelementptr inbounds i8, i8* %1, i64 97
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = add nsw i32 %6, %125
  %127 = icmp ugt i32 %126, 255
  %128 = icmp slt i32 %126, 0
  %129 = select i1 %128, i32 0, i32 255
  %130 = select i1 %127, i32 %129, i32 %126
  %131 = trunc i32 %130 to i8
  store i8 %131, i8* %123, align 1
  %132 = getelementptr inbounds i8, i8* %1, i64 98
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = add nsw i32 %6, %134
  %136 = icmp ugt i32 %135, 255
  %137 = icmp slt i32 %135, 0
  %138 = select i1 %137, i32 0, i32 255
  %139 = select i1 %136, i32 %138, i32 %135
  %140 = trunc i32 %139 to i8
  store i8 %140, i8* %132, align 1
  %141 = getelementptr inbounds i8, i8* %1, i64 99
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  %144 = add nsw i32 %6, %143
  %145 = icmp ugt i32 %144, 255
  %146 = icmp slt i32 %144, 0
  %147 = select i1 %146, i32 0, i32 255
  %148 = select i1 %145, i32 %147, i32 %144
  %149 = trunc i32 %148 to i8
  store i8 %149, i8* %141, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @TransformAC3_C(i16* nocapture readonly, i8* nocapture) #2 {
  %3 = load i16, i16* %0, align 2
  %4 = sext i16 %3 to i32
  %5 = add nsw i32 %4, 4
  %6 = getelementptr inbounds i16, i16* %0, i64 4
  %7 = load i16, i16* %6, align 2
  %8 = sext i16 %7 to i32
  %9 = mul nsw i32 %8, 35468
  %10 = ashr i32 %9, 16
  %11 = mul nsw i32 %8, 20091
  %12 = ashr i32 %11, 16
  %13 = add nsw i32 %12, %8
  %14 = getelementptr inbounds i16, i16* %0, i64 1
  %15 = load i16, i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = mul nsw i32 %16, 35468
  %18 = ashr i32 %17, 16
  %19 = mul nsw i32 %16, 20091
  %20 = ashr i32 %19, 16
  %21 = add nsw i32 %20, %16
  %22 = add nsw i32 %13, %5
  %23 = load i8, i8* %1, align 1
  %24 = zext i8 %23 to i32
  %25 = add nsw i32 %22, %21
  %26 = ashr i32 %25, 3
  %27 = add nsw i32 %26, %24
  %28 = icmp ugt i32 %27, 255
  %29 = icmp slt i32 %27, 0
  %30 = select i1 %29, i32 0, i32 255
  %31 = select i1 %28, i32 %30, i32 %27
  %32 = trunc i32 %31 to i8
  store i8 %32, i8* %1, align 1
  %33 = getelementptr inbounds i8, i8* %1, i64 1
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = add nsw i32 %22, %18
  %37 = ashr i32 %36, 3
  %38 = add nsw i32 %37, %35
  %39 = icmp ugt i32 %38, 255
  %40 = icmp slt i32 %38, 0
  %41 = select i1 %40, i32 0, i32 255
  %42 = select i1 %39, i32 %41, i32 %38
  %43 = trunc i32 %42 to i8
  store i8 %43, i8* %33, align 1
  %44 = getelementptr inbounds i8, i8* %1, i64 2
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = sub nsw i32 %22, %18
  %48 = ashr i32 %47, 3
  %49 = add nsw i32 %48, %46
  %50 = icmp ugt i32 %49, 255
  %51 = icmp slt i32 %49, 0
  %52 = select i1 %51, i32 0, i32 255
  %53 = select i1 %50, i32 %52, i32 %49
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %44, align 1
  %55 = getelementptr inbounds i8, i8* %1, i64 3
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = sub nsw i32 %22, %21
  %59 = ashr i32 %58, 3
  %60 = add nsw i32 %59, %57
  %61 = icmp ugt i32 %60, 255
  %62 = icmp slt i32 %60, 0
  %63 = select i1 %62, i32 0, i32 255
  %64 = select i1 %61, i32 %63, i32 %60
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %55, align 1
  %66 = add nsw i32 %10, %5
  %67 = getelementptr inbounds i8, i8* %1, i64 32
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = add nsw i32 %21, %66
  %71 = ashr i32 %70, 3
  %72 = add nsw i32 %71, %69
  %73 = icmp ugt i32 %72, 255
  %74 = icmp slt i32 %72, 0
  %75 = select i1 %74, i32 0, i32 255
  %76 = select i1 %73, i32 %75, i32 %72
  %77 = trunc i32 %76 to i8
  store i8 %77, i8* %67, align 1
  %78 = getelementptr inbounds i8, i8* %1, i64 33
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = add nsw i32 %66, %18
  %82 = ashr i32 %81, 3
  %83 = add nsw i32 %82, %80
  %84 = icmp ugt i32 %83, 255
  %85 = icmp slt i32 %83, 0
  %86 = select i1 %85, i32 0, i32 255
  %87 = select i1 %84, i32 %86, i32 %83
  %88 = trunc i32 %87 to i8
  store i8 %88, i8* %78, align 1
  %89 = getelementptr inbounds i8, i8* %1, i64 34
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = sub nsw i32 %66, %18
  %93 = ashr i32 %92, 3
  %94 = add nsw i32 %93, %91
  %95 = icmp ugt i32 %94, 255
  %96 = icmp slt i32 %94, 0
  %97 = select i1 %96, i32 0, i32 255
  %98 = select i1 %95, i32 %97, i32 %94
  %99 = trunc i32 %98 to i8
  store i8 %99, i8* %89, align 1
  %100 = getelementptr inbounds i8, i8* %1, i64 35
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = sub nsw i32 %66, %21
  %104 = ashr i32 %103, 3
  %105 = add nsw i32 %104, %102
  %106 = icmp ugt i32 %105, 255
  %107 = icmp slt i32 %105, 0
  %108 = select i1 %107, i32 0, i32 255
  %109 = select i1 %106, i32 %108, i32 %105
  %110 = trunc i32 %109 to i8
  store i8 %110, i8* %100, align 1
  %111 = sub nsw i32 %5, %10
  %112 = getelementptr inbounds i8, i8* %1, i64 64
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = add nsw i32 %21, %111
  %116 = ashr i32 %115, 3
  %117 = add nsw i32 %116, %114
  %118 = icmp ugt i32 %117, 255
  %119 = icmp slt i32 %117, 0
  %120 = select i1 %119, i32 0, i32 255
  %121 = select i1 %118, i32 %120, i32 %117
  %122 = trunc i32 %121 to i8
  store i8 %122, i8* %112, align 1
  %123 = getelementptr inbounds i8, i8* %1, i64 65
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = add nsw i32 %111, %18
  %127 = ashr i32 %126, 3
  %128 = add nsw i32 %127, %125
  %129 = icmp ugt i32 %128, 255
  %130 = icmp slt i32 %128, 0
  %131 = select i1 %130, i32 0, i32 255
  %132 = select i1 %129, i32 %131, i32 %128
  %133 = trunc i32 %132 to i8
  store i8 %133, i8* %123, align 1
  %134 = getelementptr inbounds i8, i8* %1, i64 66
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = sub nsw i32 %111, %18
  %138 = ashr i32 %137, 3
  %139 = add nsw i32 %138, %136
  %140 = icmp ugt i32 %139, 255
  %141 = icmp slt i32 %139, 0
  %142 = select i1 %141, i32 0, i32 255
  %143 = select i1 %140, i32 %142, i32 %139
  %144 = trunc i32 %143 to i8
  store i8 %144, i8* %134, align 1
  %145 = getelementptr inbounds i8, i8* %1, i64 67
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = sub nsw i32 %111, %21
  %149 = ashr i32 %148, 3
  %150 = add nsw i32 %149, %147
  %151 = icmp ugt i32 %150, 255
  %152 = icmp slt i32 %150, 0
  %153 = select i1 %152, i32 0, i32 255
  %154 = select i1 %151, i32 %153, i32 %150
  %155 = trunc i32 %154 to i8
  store i8 %155, i8* %145, align 1
  %156 = sub nsw i32 %5, %13
  %157 = getelementptr inbounds i8, i8* %1, i64 96
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = add nsw i32 %156, %21
  %161 = ashr i32 %160, 3
  %162 = add nsw i32 %161, %159
  %163 = icmp ugt i32 %162, 255
  %164 = icmp slt i32 %162, 0
  %165 = select i1 %164, i32 0, i32 255
  %166 = select i1 %163, i32 %165, i32 %162
  %167 = trunc i32 %166 to i8
  store i8 %167, i8* %157, align 1
  %168 = getelementptr inbounds i8, i8* %1, i64 97
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i32
  %171 = add nsw i32 %156, %18
  %172 = ashr i32 %171, 3
  %173 = add nsw i32 %172, %170
  %174 = icmp ugt i32 %173, 255
  %175 = icmp slt i32 %173, 0
  %176 = select i1 %175, i32 0, i32 255
  %177 = select i1 %174, i32 %176, i32 %173
  %178 = trunc i32 %177 to i8
  store i8 %178, i8* %168, align 1
  %179 = getelementptr inbounds i8, i8* %1, i64 98
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i32
  %182 = sub nsw i32 %156, %18
  %183 = ashr i32 %182, 3
  %184 = add nsw i32 %183, %181
  %185 = icmp ugt i32 %184, 255
  %186 = icmp slt i32 %184, 0
  %187 = select i1 %186, i32 0, i32 255
  %188 = select i1 %185, i32 %187, i32 %184
  %189 = trunc i32 %188 to i8
  store i8 %189, i8* %179, align 1
  %190 = getelementptr inbounds i8, i8* %1, i64 99
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i32
  %193 = sub nsw i32 %156, %21
  %194 = ashr i32 %193, 3
  %195 = add nsw i32 %194, %192
  %196 = icmp ugt i32 %195, 255
  %197 = icmp slt i32 %195, 0
  %198 = select i1 %197, i32 0, i32 255
  %199 = select i1 %196, i32 %198, i32 %195
  %200 = trunc i32 %199 to i8
  store i8 %200, i8* %190, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @TransformUV_C(i16*, i8*) #0 {
  %3 = load void (i16*, i8*, i32)*, void (i16*, i8*, i32)** @VP8Transform, align 8
  tail call void %3(i16* %0, i8* %1, i32 1) #5
  %4 = load void (i16*, i8*, i32)*, void (i16*, i8*, i32)** @VP8Transform, align 8
  %5 = getelementptr inbounds i16, i16* %0, i64 32
  %6 = getelementptr inbounds i8, i8* %1, i64 128
  tail call void %4(i16* %5, i8* %6, i32 1) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @TransformDCUV_C(i16*, i8*) #0 {
  %3 = load i16, i16* %0, align 2
  %4 = icmp eq i16 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %2
  %6 = load void (i16*, i8*)*, void (i16*, i8*)** @VP8TransformDC, align 8
  tail call void %6(i16* %0, i8* %1) #5
  br label %7

7:                                                ; preds = %2, %5
  %8 = getelementptr inbounds i16, i16* %0, i64 16
  %9 = load i16, i16* %8, align 2
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %7
  %12 = load void (i16*, i8*)*, void (i16*, i8*)** @VP8TransformDC, align 8
  %13 = getelementptr inbounds i8, i8* %1, i64 4
  tail call void %12(i16* %8, i8* %13) #5
  br label %14

14:                                               ; preds = %7, %11
  %15 = getelementptr inbounds i16, i16* %0, i64 32
  %16 = load i16, i16* %15, align 2
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  %19 = load void (i16*, i8*)*, void (i16*, i8*)** @VP8TransformDC, align 8
  %20 = getelementptr inbounds i8, i8* %1, i64 128
  tail call void %19(i16* %15, i8* %20) #5
  br label %21

21:                                               ; preds = %14, %18
  %22 = getelementptr inbounds i16, i16* %0, i64 48
  %23 = load i16, i16* %22, align 2
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %21
  %26 = load void (i16*, i8*)*, void (i16*, i8*)** @VP8TransformDC, align 8
  %27 = getelementptr inbounds i8, i8* %1, i64 132
  tail call void %26(i16* %22, i8* %27) #5
  br label %28

28:                                               ; preds = %21, %25
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @VFilter16_C(i8*, i32, i32, i32, i32) #2 {
  tail call fastcc void @FilterLoop26_C(i8* %0, i32 %1, i32 1, i32 16, i32 %2, i32 %3, i32 %4)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @VFilter16i_C(i8*, i32, i32, i32, i32) #2 {
  %6 = shl nsw i32 %1, 2
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds i8, i8* %0, i64 %7
  tail call fastcc void @FilterLoop24_C(i8* %8, i32 %1, i32 1, i32 16, i32 %2, i32 %3, i32 %4)
  %9 = getelementptr inbounds i8, i8* %8, i64 %7
  tail call fastcc void @FilterLoop24_C(i8* %9, i32 %1, i32 1, i32 16, i32 %2, i32 %3, i32 %4)
  %10 = getelementptr inbounds i8, i8* %9, i64 %7
  tail call fastcc void @FilterLoop24_C(i8* %10, i32 %1, i32 1, i32 16, i32 %2, i32 %3, i32 %4)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @HFilter16_C(i8*, i32, i32, i32, i32) #2 {
  tail call fastcc void @FilterLoop26_C(i8* %0, i32 1, i32 %1, i32 16, i32 %2, i32 %3, i32 %4)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @VFilter8_C(i8*, i8*, i32, i32, i32, i32) #2 {
  tail call fastcc void @FilterLoop26_C(i8* %0, i32 %2, i32 1, i32 8, i32 %3, i32 %4, i32 %5)
  tail call fastcc void @FilterLoop26_C(i8* %1, i32 %2, i32 1, i32 8, i32 %3, i32 %4, i32 %5)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @VFilter8i_C(i8*, i8*, i32, i32, i32, i32) #2 {
  %7 = shl nsw i32 %2, 2
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %0, i64 %8
  tail call fastcc void @FilterLoop24_C(i8* %9, i32 %2, i32 1, i32 8, i32 %3, i32 %4, i32 %5)
  %10 = getelementptr inbounds i8, i8* %1, i64 %8
  tail call fastcc void @FilterLoop24_C(i8* %10, i32 %2, i32 1, i32 8, i32 %3, i32 %4, i32 %5)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @SimpleVFilter16_C(i8* nocapture, i32, i32) #2 {
  %4 = shl nsw i32 %2, 1
  %5 = or i32 %4, 1
  %6 = mul nsw i32 %1, -2
  %7 = sext i32 %6 to i64
  %8 = sub nsw i32 0, %1
  %9 = sext i32 %8 to i64
  %10 = sext i32 %1 to i64
  %11 = load i8*, i8** @VP8kabs0, align 8
  br label %12

12:                                               ; preds = %38, %3
  %13 = phi i64 [ 0, %3 ], [ %39, %38 ]
  %14 = getelementptr inbounds i8, i8* %0, i64 %13
  %15 = getelementptr inbounds i8, i8* %14, i64 %7
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds i8, i8* %14, i64 %9
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i64
  %21 = load i8, i8* %14, align 1
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds i8, i8* %14, i64 %10
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i64
  %26 = sub nsw i64 %20, %22
  %27 = getelementptr inbounds i8, i8* %11, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = shl nuw nsw i32 %29, 2
  %31 = sub nsw i64 %17, %25
  %32 = getelementptr inbounds i8, i8* %11, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = add nuw nsw i32 %30, %34
  %36 = icmp sgt i32 %35, %5
  br i1 %36, label %38, label %37

37:                                               ; preds = %12
  tail call fastcc void @DoFilter2_C(i8* %14, i32 %1)
  br label %38

38:                                               ; preds = %12, %37
  %39 = add nuw nsw i64 %13, 1
  %40 = icmp eq i64 %39, 16
  br i1 %40, label %41, label %12

41:                                               ; preds = %38
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @SimpleHFilter16_C(i8* nocapture, i32, i32) #2 {
  %4 = shl nsw i32 %2, 1
  %5 = or i32 %4, 1
  %6 = load i8*, i8** @VP8kabs0, align 8
  %7 = load i8*, i8** @VP8ksclip1, align 8
  %8 = load i8*, i8** @VP8ksclip2, align 8
  %9 = load i8*, i8** @VP8kclip1, align 8
  %10 = sext i32 %1 to i64
  br label %11

11:                                               ; preds = %66, %3
  %12 = phi i64 [ 0, %3 ], [ %67, %66 ]
  %13 = mul nsw i64 %12, %10
  %14 = getelementptr inbounds i8, i8* %0, i64 %13
  %15 = getelementptr inbounds i8, i8* %14, i64 -2
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds i8, i8* %14, i64 -1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i64
  %21 = load i8, i8* %14, align 1
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds i8, i8* %14, i64 1
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i64
  %26 = sub nsw i64 %20, %22
  %27 = getelementptr inbounds i8, i8* %6, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = shl nuw nsw i32 %29, 2
  %31 = sub nsw i64 %17, %25
  %32 = getelementptr inbounds i8, i8* %6, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = add nuw nsw i32 %30, %34
  %36 = icmp sgt i32 %35, %5
  br i1 %36, label %66, label %37

37:                                               ; preds = %11
  %38 = zext i8 %19 to i32
  %39 = zext i8 %21 to i32
  %40 = sub nsw i32 %39, %38
  %41 = mul nsw i32 %40, 3
  %42 = getelementptr inbounds i8, i8* %7, i64 %31
  %43 = load i8, i8* %42, align 1
  %44 = sext i8 %43 to i32
  %45 = add nsw i32 %41, %44
  %46 = add nsw i32 %45, 4
  %47 = ashr i32 %46, 3
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* %8, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = sext i8 %50 to i32
  %52 = add nsw i32 %45, 3
  %53 = ashr i32 %52, 3
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %8, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = add nsw i32 %57, %38
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %9, i64 %59
  %61 = load i8, i8* %60, align 1
  store i8 %61, i8* %18, align 1
  %62 = sub nsw i32 %39, %51
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %9, i64 %63
  %65 = load i8, i8* %64, align 1
  store i8 %65, i8* %14, align 1
  br label %66

66:                                               ; preds = %11, %37
  %67 = add nuw nsw i64 %12, 1
  %68 = icmp eq i64 %67, 16
  br i1 %68, label %69, label %11

69:                                               ; preds = %66
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @SimpleVFilter16i_C(i8* nocapture, i32, i32) #2 {
  %4 = shl nsw i32 %1, 2
  %5 = sext i32 %4 to i64
  %6 = shl nsw i32 %2, 1
  %7 = or i32 %6, 1
  %8 = mul nsw i32 %1, -2
  %9 = sext i32 %8 to i64
  %10 = sub nsw i32 0, %1
  %11 = sext i32 %10 to i64
  %12 = sext i32 %1 to i64
  %13 = load i8*, i8** @VP8kabs0, align 8
  %14 = load i8*, i8** @VP8ksclip1, align 8
  %15 = load i8*, i8** @VP8ksclip2, align 8
  %16 = load i8*, i8** @VP8kclip1, align 8
  %17 = getelementptr inbounds i8, i8* %0, i64 %5
  br label %18

18:                                               ; preds = %72, %3
  %19 = phi i64 [ 0, %3 ], [ %73, %72 ]
  %20 = getelementptr inbounds i8, i8* %17, i64 %19
  %21 = getelementptr inbounds i8, i8* %20, i64 %9
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds i8, i8* %20, i64 %11
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i64
  %27 = load i8, i8* %20, align 1
  %28 = zext i8 %27 to i64
  %29 = getelementptr inbounds i8, i8* %20, i64 %12
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = sub nsw i64 %26, %28
  %33 = getelementptr inbounds i8, i8* %13, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = shl nuw nsw i32 %35, 2
  %37 = sub nsw i64 %23, %31
  %38 = getelementptr inbounds i8, i8* %13, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = add nuw nsw i32 %36, %40
  %42 = icmp sgt i32 %41, %7
  br i1 %42, label %72, label %43

43:                                               ; preds = %18
  %44 = zext i8 %25 to i32
  %45 = zext i8 %27 to i32
  %46 = sub nsw i32 %45, %44
  %47 = mul nsw i32 %46, 3
  %48 = getelementptr inbounds i8, i8* %14, i64 %37
  %49 = load i8, i8* %48, align 1
  %50 = sext i8 %49 to i32
  %51 = add nsw i32 %47, %50
  %52 = add nsw i32 %51, 4
  %53 = ashr i32 %52, 3
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %15, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = add nsw i32 %51, 3
  %59 = ashr i32 %58, 3
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %15, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = sext i8 %62 to i32
  %64 = add nsw i32 %63, %44
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %16, i64 %65
  %67 = load i8, i8* %66, align 1
  store i8 %67, i8* %24, align 1
  %68 = sub nsw i32 %45, %57
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %16, i64 %69
  %71 = load i8, i8* %70, align 1
  store i8 %71, i8* %20, align 1
  br label %72

72:                                               ; preds = %43, %18
  %73 = add nuw nsw i64 %19, 1
  %74 = icmp eq i64 %73, 16
  br i1 %74, label %75, label %18

75:                                               ; preds = %72
  %76 = getelementptr inbounds i8, i8* %17, i64 %5
  br label %77

77:                                               ; preds = %131, %75
  %78 = phi i64 [ 0, %75 ], [ %132, %131 ]
  %79 = getelementptr inbounds i8, i8* %76, i64 %78
  %80 = getelementptr inbounds i8, i8* %79, i64 %9
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i64
  %83 = getelementptr inbounds i8, i8* %79, i64 %11
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i64
  %86 = load i8, i8* %79, align 1
  %87 = zext i8 %86 to i64
  %88 = getelementptr inbounds i8, i8* %79, i64 %12
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i64
  %91 = sub nsw i64 %85, %87
  %92 = getelementptr inbounds i8, i8* %13, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = shl nuw nsw i32 %94, 2
  %96 = sub nsw i64 %82, %90
  %97 = getelementptr inbounds i8, i8* %13, i64 %96
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = add nuw nsw i32 %95, %99
  %101 = icmp sgt i32 %100, %7
  br i1 %101, label %131, label %102

102:                                              ; preds = %77
  %103 = zext i8 %84 to i32
  %104 = zext i8 %86 to i32
  %105 = sub nsw i32 %104, %103
  %106 = mul nsw i32 %105, 3
  %107 = getelementptr inbounds i8, i8* %14, i64 %96
  %108 = load i8, i8* %107, align 1
  %109 = sext i8 %108 to i32
  %110 = add nsw i32 %106, %109
  %111 = add nsw i32 %110, 4
  %112 = ashr i32 %111, 3
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i8, i8* %15, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = sext i8 %115 to i32
  %117 = add nsw i32 %110, 3
  %118 = ashr i32 %117, 3
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i8, i8* %15, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = sext i8 %121 to i32
  %123 = add nsw i32 %122, %103
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds i8, i8* %16, i64 %124
  %126 = load i8, i8* %125, align 1
  store i8 %126, i8* %83, align 1
  %127 = sub nsw i32 %104, %116
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds i8, i8* %16, i64 %128
  %130 = load i8, i8* %129, align 1
  store i8 %130, i8* %79, align 1
  br label %131

131:                                              ; preds = %102, %77
  %132 = add nuw nsw i64 %78, 1
  %133 = icmp eq i64 %132, 16
  br i1 %133, label %134, label %77

134:                                              ; preds = %131
  %135 = getelementptr inbounds i8, i8* %76, i64 %5
  br label %136

136:                                              ; preds = %190, %134
  %137 = phi i64 [ 0, %134 ], [ %191, %190 ]
  %138 = getelementptr inbounds i8, i8* %135, i64 %137
  %139 = getelementptr inbounds i8, i8* %138, i64 %9
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i64
  %142 = getelementptr inbounds i8, i8* %138, i64 %11
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i64
  %145 = load i8, i8* %138, align 1
  %146 = zext i8 %145 to i64
  %147 = getelementptr inbounds i8, i8* %138, i64 %12
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i64
  %150 = sub nsw i64 %144, %146
  %151 = getelementptr inbounds i8, i8* %13, i64 %150
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i32
  %154 = shl nuw nsw i32 %153, 2
  %155 = sub nsw i64 %141, %149
  %156 = getelementptr inbounds i8, i8* %13, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = add nuw nsw i32 %154, %158
  %160 = icmp sgt i32 %159, %7
  br i1 %160, label %190, label %161

161:                                              ; preds = %136
  %162 = zext i8 %143 to i32
  %163 = zext i8 %145 to i32
  %164 = sub nsw i32 %163, %162
  %165 = mul nsw i32 %164, 3
  %166 = getelementptr inbounds i8, i8* %14, i64 %155
  %167 = load i8, i8* %166, align 1
  %168 = sext i8 %167 to i32
  %169 = add nsw i32 %165, %168
  %170 = add nsw i32 %169, 4
  %171 = ashr i32 %170, 3
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds i8, i8* %15, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = sext i8 %174 to i32
  %176 = add nsw i32 %169, 3
  %177 = ashr i32 %176, 3
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i8, i8* %15, i64 %178
  %180 = load i8, i8* %179, align 1
  %181 = sext i8 %180 to i32
  %182 = add nsw i32 %181, %162
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds i8, i8* %16, i64 %183
  %185 = load i8, i8* %184, align 1
  store i8 %185, i8* %142, align 1
  %186 = sub nsw i32 %163, %175
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds i8, i8* %16, i64 %187
  %189 = load i8, i8* %188, align 1
  store i8 %189, i8* %138, align 1
  br label %190

190:                                              ; preds = %161, %136
  %191 = add nuw nsw i64 %137, 1
  %192 = icmp eq i64 %191, 16
  br i1 %192, label %193, label %136

193:                                              ; preds = %190
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @SimpleHFilter16i_C(i8* nocapture, i32, i32) #2 {
  %4 = shl nsw i32 %2, 1
  %5 = or i32 %4, 1
  %6 = load i8*, i8** @VP8kabs0, align 8
  %7 = load i8*, i8** @VP8ksclip1, align 8
  %8 = load i8*, i8** @VP8ksclip2, align 8
  %9 = load i8*, i8** @VP8kclip1, align 8
  %10 = sext i32 %1 to i64
  %11 = getelementptr inbounds i8, i8* %0, i64 4
  br label %12

12:                                               ; preds = %67, %3
  %13 = phi i64 [ 0, %3 ], [ %68, %67 ]
  %14 = mul nsw i64 %13, %10
  %15 = getelementptr inbounds i8, i8* %11, i64 %14
  %16 = getelementptr inbounds i8, i8* %15, i64 -2
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i64
  %19 = getelementptr inbounds i8, i8* %15, i64 -1
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i64
  %22 = load i8, i8* %15, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds i8, i8* %15, i64 1
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i64
  %27 = sub nsw i64 %21, %23
  %28 = getelementptr inbounds i8, i8* %6, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = shl nuw nsw i32 %30, 2
  %32 = sub nsw i64 %18, %26
  %33 = getelementptr inbounds i8, i8* %6, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = add nuw nsw i32 %31, %35
  %37 = icmp sgt i32 %36, %5
  br i1 %37, label %67, label %38

38:                                               ; preds = %12
  %39 = zext i8 %20 to i32
  %40 = zext i8 %22 to i32
  %41 = sub nsw i32 %40, %39
  %42 = mul nsw i32 %41, 3
  %43 = getelementptr inbounds i8, i8* %7, i64 %32
  %44 = load i8, i8* %43, align 1
  %45 = sext i8 %44 to i32
  %46 = add nsw i32 %42, %45
  %47 = add nsw i32 %46, 4
  %48 = ashr i32 %47, 3
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %8, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = sext i8 %51 to i32
  %53 = add nsw i32 %46, 3
  %54 = ashr i32 %53, 3
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %8, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = sext i8 %57 to i32
  %59 = add nsw i32 %58, %39
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %9, i64 %60
  %62 = load i8, i8* %61, align 1
  store i8 %62, i8* %19, align 1
  %63 = sub nsw i32 %40, %52
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %9, i64 %64
  %66 = load i8, i8* %65, align 1
  store i8 %66, i8* %15, align 1
  br label %67

67:                                               ; preds = %38, %12
  %68 = add nuw nsw i64 %13, 1
  %69 = icmp eq i64 %68, 16
  br i1 %69, label %70, label %12

70:                                               ; preds = %67
  %71 = getelementptr inbounds i8, i8* %0, i64 8
  br label %72

72:                                               ; preds = %127, %70
  %73 = phi i64 [ 0, %70 ], [ %128, %127 ]
  %74 = mul nsw i64 %73, %10
  %75 = getelementptr inbounds i8, i8* %71, i64 %74
  %76 = getelementptr inbounds i8, i8* %75, i64 -2
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i64
  %79 = getelementptr inbounds i8, i8* %75, i64 -1
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i64
  %82 = load i8, i8* %75, align 1
  %83 = zext i8 %82 to i64
  %84 = getelementptr inbounds i8, i8* %75, i64 1
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i64
  %87 = sub nsw i64 %81, %83
  %88 = getelementptr inbounds i8, i8* %6, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = shl nuw nsw i32 %90, 2
  %92 = sub nsw i64 %78, %86
  %93 = getelementptr inbounds i8, i8* %6, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = add nuw nsw i32 %91, %95
  %97 = icmp sgt i32 %96, %5
  br i1 %97, label %127, label %98

98:                                               ; preds = %72
  %99 = zext i8 %80 to i32
  %100 = zext i8 %82 to i32
  %101 = sub nsw i32 %100, %99
  %102 = mul nsw i32 %101, 3
  %103 = getelementptr inbounds i8, i8* %7, i64 %92
  %104 = load i8, i8* %103, align 1
  %105 = sext i8 %104 to i32
  %106 = add nsw i32 %102, %105
  %107 = add nsw i32 %106, 4
  %108 = ashr i32 %107, 3
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i8, i8* %8, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = sext i8 %111 to i32
  %113 = add nsw i32 %106, 3
  %114 = ashr i32 %113, 3
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds i8, i8* %8, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = sext i8 %117 to i32
  %119 = add nsw i32 %118, %99
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* %9, i64 %120
  %122 = load i8, i8* %121, align 1
  store i8 %122, i8* %79, align 1
  %123 = sub nsw i32 %100, %112
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds i8, i8* %9, i64 %124
  %126 = load i8, i8* %125, align 1
  store i8 %126, i8* %75, align 1
  br label %127

127:                                              ; preds = %98, %72
  %128 = add nuw nsw i64 %73, 1
  %129 = icmp eq i64 %128, 16
  br i1 %129, label %130, label %72

130:                                              ; preds = %127
  %131 = getelementptr inbounds i8, i8* %0, i64 12
  br label %132

132:                                              ; preds = %187, %130
  %133 = phi i64 [ 0, %130 ], [ %188, %187 ]
  %134 = mul nsw i64 %133, %10
  %135 = getelementptr inbounds i8, i8* %131, i64 %134
  %136 = getelementptr inbounds i8, i8* %135, i64 -2
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i64
  %139 = getelementptr inbounds i8, i8* %135, i64 -1
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i64
  %142 = load i8, i8* %135, align 1
  %143 = zext i8 %142 to i64
  %144 = getelementptr inbounds i8, i8* %135, i64 1
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i64
  %147 = sub nsw i64 %141, %143
  %148 = getelementptr inbounds i8, i8* %6, i64 %147
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = shl nuw nsw i32 %150, 2
  %152 = sub nsw i64 %138, %146
  %153 = getelementptr inbounds i8, i8* %6, i64 %152
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i32
  %156 = add nuw nsw i32 %151, %155
  %157 = icmp sgt i32 %156, %5
  br i1 %157, label %187, label %158

158:                                              ; preds = %132
  %159 = zext i8 %140 to i32
  %160 = zext i8 %142 to i32
  %161 = sub nsw i32 %160, %159
  %162 = mul nsw i32 %161, 3
  %163 = getelementptr inbounds i8, i8* %7, i64 %152
  %164 = load i8, i8* %163, align 1
  %165 = sext i8 %164 to i32
  %166 = add nsw i32 %162, %165
  %167 = add nsw i32 %166, 4
  %168 = ashr i32 %167, 3
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i8, i8* %8, i64 %169
  %171 = load i8, i8* %170, align 1
  %172 = sext i8 %171 to i32
  %173 = add nsw i32 %166, 3
  %174 = ashr i32 %173, 3
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds i8, i8* %8, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = sext i8 %177 to i32
  %179 = add nsw i32 %178, %159
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds i8, i8* %9, i64 %180
  %182 = load i8, i8* %181, align 1
  store i8 %182, i8* %139, align 1
  %183 = sub nsw i32 %160, %172
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds i8, i8* %9, i64 %184
  %186 = load i8, i8* %185, align 1
  store i8 %186, i8* %135, align 1
  br label %187

187:                                              ; preds = %158, %132
  %188 = add nuw nsw i64 %133, 1
  %189 = icmp eq i64 %188, 16
  br i1 %189, label %190, label %132

190:                                              ; preds = %187
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @HFilter16i_C(i8*, i32, i32, i32, i32) #2 {
  %6 = getelementptr inbounds i8, i8* %0, i64 4
  tail call fastcc void @FilterLoop24_C(i8* %6, i32 1, i32 %1, i32 16, i32 %2, i32 %3, i32 %4)
  %7 = getelementptr inbounds i8, i8* %0, i64 8
  tail call fastcc void @FilterLoop24_C(i8* %7, i32 1, i32 %1, i32 16, i32 %2, i32 %3, i32 %4)
  %8 = getelementptr inbounds i8, i8* %0, i64 12
  tail call fastcc void @FilterLoop24_C(i8* %8, i32 1, i32 %1, i32 16, i32 %2, i32 %3, i32 %4)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @HFilter8_C(i8*, i8*, i32, i32, i32, i32) #2 {
  tail call fastcc void @FilterLoop26_C(i8* %0, i32 1, i32 %2, i32 8, i32 %3, i32 %4, i32 %5)
  tail call fastcc void @FilterLoop26_C(i8* %1, i32 1, i32 %2, i32 8, i32 %3, i32 %4, i32 %5)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @HFilter8i_C(i8*, i8*, i32, i32, i32, i32) #2 {
  %7 = getelementptr inbounds i8, i8* %0, i64 4
  tail call fastcc void @FilterLoop24_C(i8* %7, i32 1, i32 %2, i32 8, i32 %3, i32 %4, i32 %5)
  %8 = getelementptr inbounds i8, i8* %1, i64 4
  tail call fastcc void @FilterLoop24_C(i8* %8, i32 1, i32 %2, i32 8, i32 %3, i32 %4, i32 %5)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @DC4_C(i8* nocapture) #0 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -32
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds i8, i8* %0, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = add nuw nsw i32 %4, 4
  %9 = add nuw nsw i32 %8, %7
  %10 = getelementptr inbounds i8, i8* %0, i64 -31
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds i8, i8* %0, i64 31
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = add nuw nsw i32 %9, %12
  %17 = add nuw nsw i32 %16, %15
  %18 = getelementptr inbounds i8, i8* %0, i64 -30
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds i8, i8* %0, i64 63
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = add nuw nsw i32 %17, %20
  %25 = add nuw nsw i32 %24, %23
  %26 = getelementptr inbounds i8, i8* %0, i64 -29
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = getelementptr inbounds i8, i8* %0, i64 95
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = add nuw nsw i32 %25, %28
  %33 = add nuw nsw i32 %32, %31
  %34 = lshr i32 %33, 3
  %35 = trunc i32 %34 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %35, i64 4, i1 false)
  %36 = getelementptr inbounds i8, i8* %0, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %35, i64 4, i1 false)
  %37 = getelementptr inbounds i8, i8* %0, i64 64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 %35, i64 4, i1 false)
  %38 = getelementptr inbounds i8, i8* %0, i64 96
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 %35, i64 4, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @TM4_C(i8* nocapture) #2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -32
  %3 = load i8*, i8** @VP8kclip1, align 8
  %4 = getelementptr inbounds i8, i8* %0, i64 -33
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i64
  %7 = sub nsw i64 0, %6
  %8 = getelementptr inbounds i8, i8* %3, i64 %7
  %9 = getelementptr inbounds i8, i8* %0, i64 -1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i64
  %12 = getelementptr inbounds i8, i8* %8, i64 %11
  %13 = load i8, i8* %2, align 1
  %14 = zext i8 %13 to i64
  %15 = getelementptr inbounds i8, i8* %12, i64 %14
  %16 = load i8, i8* %15, align 1
  store i8 %16, i8* %0, align 1
  %17 = getelementptr inbounds i8, i8* %0, i64 -31
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i64
  %20 = getelementptr inbounds i8, i8* %12, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds i8, i8* %0, i64 -30
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i64
  %26 = getelementptr inbounds i8, i8* %12, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %0, i64 -29
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds i8, i8* %12, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %33, i8* %34, align 1
  %35 = getelementptr inbounds i8, i8* %0, i64 32
  %36 = getelementptr inbounds i8, i8* %0, i64 31
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i64
  %39 = getelementptr inbounds i8, i8* %8, i64 %38
  %40 = getelementptr inbounds i8, i8* %39, i64 %14
  %41 = load i8, i8* %40, align 1
  store i8 %41, i8* %35, align 1
  %42 = getelementptr inbounds i8, i8* %39, i64 %19
  %43 = load i8, i8* %42, align 1
  %44 = getelementptr inbounds i8, i8* %0, i64 33
  store i8 %43, i8* %44, align 1
  %45 = getelementptr inbounds i8, i8* %39, i64 %25
  %46 = load i8, i8* %45, align 1
  %47 = getelementptr inbounds i8, i8* %0, i64 34
  store i8 %46, i8* %47, align 1
  %48 = getelementptr inbounds i8, i8* %39, i64 %31
  %49 = load i8, i8* %48, align 1
  %50 = getelementptr inbounds i8, i8* %0, i64 35
  store i8 %49, i8* %50, align 1
  %51 = getelementptr inbounds i8, i8* %0, i64 64
  %52 = getelementptr inbounds i8, i8* %0, i64 63
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds i8, i8* %8, i64 %54
  %56 = getelementptr inbounds i8, i8* %55, i64 %14
  %57 = load i8, i8* %56, align 1
  store i8 %57, i8* %51, align 1
  %58 = getelementptr inbounds i8, i8* %55, i64 %19
  %59 = load i8, i8* %58, align 1
  %60 = getelementptr inbounds i8, i8* %0, i64 65
  store i8 %59, i8* %60, align 1
  %61 = getelementptr inbounds i8, i8* %55, i64 %25
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds i8, i8* %0, i64 66
  store i8 %62, i8* %63, align 1
  %64 = getelementptr inbounds i8, i8* %55, i64 %31
  %65 = load i8, i8* %64, align 1
  %66 = getelementptr inbounds i8, i8* %0, i64 67
  store i8 %65, i8* %66, align 1
  %67 = getelementptr inbounds i8, i8* %0, i64 96
  %68 = getelementptr inbounds i8, i8* %0, i64 95
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds i8, i8* %8, i64 %70
  %72 = getelementptr inbounds i8, i8* %71, i64 %14
  %73 = load i8, i8* %72, align 1
  store i8 %73, i8* %67, align 1
  %74 = getelementptr inbounds i8, i8* %71, i64 %19
  %75 = load i8, i8* %74, align 1
  %76 = getelementptr inbounds i8, i8* %0, i64 97
  store i8 %75, i8* %76, align 1
  %77 = getelementptr inbounds i8, i8* %71, i64 %25
  %78 = load i8, i8* %77, align 1
  %79 = getelementptr inbounds i8, i8* %0, i64 98
  store i8 %78, i8* %79, align 1
  %80 = getelementptr inbounds i8, i8* %71, i64 %31
  %81 = load i8, i8* %80, align 1
  %82 = getelementptr inbounds i8, i8* %0, i64 99
  store i8 %81, i8* %82, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @VE4_C(i8* nocapture) #2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -32
  %3 = getelementptr inbounds i8, i8* %0, i64 -33
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = load i8, i8* %2, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 1
  %9 = getelementptr inbounds i8, i8* %0, i64 -31
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = add nuw nsw i32 %11, 2
  %13 = add nuw nsw i32 %12, %5
  %14 = add nuw nsw i32 %13, %8
  %15 = lshr i32 %14, 2
  %16 = trunc i32 %15 to i8
  %17 = shl nuw nsw i32 %11, 1
  %18 = getelementptr inbounds i8, i8* %0, i64 -30
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = add nuw nsw i32 %20, 2
  %22 = add nuw nsw i32 %21, %7
  %23 = add nuw nsw i32 %22, %17
  %24 = lshr i32 %23, 2
  %25 = trunc i32 %24 to i8
  %26 = shl nuw nsw i32 %20, 1
  %27 = getelementptr inbounds i8, i8* %0, i64 -29
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = add nuw nsw i32 %12, %26
  %31 = add nuw nsw i32 %30, %29
  %32 = lshr i32 %31, 2
  %33 = trunc i32 %32 to i8
  %34 = shl nuw nsw i32 %29, 1
  %35 = getelementptr inbounds i8, i8* %0, i64 -28
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = add nuw nsw i32 %21, %34
  %39 = add nuw nsw i32 %38, %37
  %40 = lshr i32 %39, 2
  %41 = trunc i32 %40 to i8
  store i8 %16, i8* %0, align 1
  %42 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %25, i8* %42, align 1
  %43 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %33, i8* %43, align 1
  %44 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %41, i8* %44, align 1
  %45 = getelementptr inbounds i8, i8* %0, i64 32
  store i8 %16, i8* %45, align 1
  %46 = getelementptr inbounds i8, i8* %0, i64 33
  store i8 %25, i8* %46, align 1
  %47 = getelementptr inbounds i8, i8* %0, i64 34
  store i8 %33, i8* %47, align 1
  %48 = getelementptr inbounds i8, i8* %0, i64 35
  store i8 %41, i8* %48, align 1
  %49 = getelementptr inbounds i8, i8* %0, i64 64
  store i8 %16, i8* %49, align 1
  %50 = getelementptr inbounds i8, i8* %0, i64 65
  store i8 %25, i8* %50, align 1
  %51 = getelementptr inbounds i8, i8* %0, i64 66
  store i8 %33, i8* %51, align 1
  %52 = getelementptr inbounds i8, i8* %0, i64 67
  store i8 %41, i8* %52, align 1
  %53 = getelementptr inbounds i8, i8* %0, i64 96
  store i8 %16, i8* %53, align 1
  %54 = getelementptr inbounds i8, i8* %0, i64 97
  store i8 %25, i8* %54, align 1
  %55 = getelementptr inbounds i8, i8* %0, i64 98
  store i8 %33, i8* %55, align 1
  %56 = getelementptr inbounds i8, i8* %0, i64 99
  store i8 %41, i8* %56, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @RD4_C(i8*) #2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -1
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds i8, i8* %0, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8, i8* %0, i64 63
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = getelementptr inbounds i8, i8* %0, i64 95
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds i8, i8* %0, i64 -33
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds i8, i8* %0, i64 -32
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds i8, i8* %0, i64 -31
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds i8, i8* %0, i64 -30
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds i8, i8* %0, i64 -29
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = shl nuw nsw i32 %10, 1
  %30 = add nuw nsw i32 %7, 2
  %31 = add nuw nsw i32 %30, %29
  %32 = add nuw nsw i32 %31, %13
  %33 = lshr i32 %32, 2
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds i8, i8* %0, i64 96
  store i8 %34, i8* %35, align 1
  %36 = shl nuw nsw i32 %7, 1
  %37 = add nuw nsw i32 %4, 2
  %38 = add nuw nsw i32 %37, %36
  %39 = add nuw nsw i32 %38, %10
  %40 = lshr i32 %39, 2
  %41 = trunc i32 %40 to i8
  %42 = getelementptr inbounds i8, i8* %0, i64 64
  store i8 %41, i8* %42, align 1
  %43 = getelementptr inbounds i8, i8* %0, i64 97
  store i8 %41, i8* %43, align 1
  %44 = shl nuw nsw i32 %4, 1
  %45 = add nuw nsw i32 %30, %44
  %46 = add nuw nsw i32 %45, %16
  %47 = lshr i32 %46, 2
  %48 = trunc i32 %47 to i8
  %49 = getelementptr inbounds i8, i8* %0, i64 32
  store i8 %48, i8* %49, align 1
  %50 = getelementptr inbounds i8, i8* %0, i64 65
  store i8 %48, i8* %50, align 1
  %51 = getelementptr inbounds i8, i8* %0, i64 98
  store i8 %48, i8* %51, align 1
  %52 = shl nuw nsw i32 %16, 1
  %53 = add nuw nsw i32 %37, %19
  %54 = add nuw nsw i32 %53, %52
  %55 = lshr i32 %54, 2
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %0, align 1
  %57 = getelementptr inbounds i8, i8* %0, i64 33
  store i8 %56, i8* %57, align 1
  %58 = getelementptr inbounds i8, i8* %0, i64 66
  store i8 %56, i8* %58, align 1
  %59 = getelementptr inbounds i8, i8* %0, i64 99
  store i8 %56, i8* %59, align 1
  %60 = shl nuw nsw i32 %19, 1
  %61 = add nuw nsw i32 %16, 2
  %62 = add nuw nsw i32 %61, %22
  %63 = add nuw nsw i32 %62, %60
  %64 = lshr i32 %63, 2
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %65, i8* %66, align 1
  %67 = getelementptr inbounds i8, i8* %0, i64 34
  store i8 %65, i8* %67, align 1
  %68 = getelementptr inbounds i8, i8* %0, i64 67
  store i8 %65, i8* %68, align 1
  %69 = shl nuw nsw i32 %22, 1
  %70 = add nuw nsw i32 %19, 2
  %71 = add nuw nsw i32 %70, %25
  %72 = add nuw nsw i32 %71, %69
  %73 = lshr i32 %72, 2
  %74 = trunc i32 %73 to i8
  %75 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %74, i8* %75, align 1
  %76 = getelementptr inbounds i8, i8* %0, i64 35
  store i8 %74, i8* %76, align 1
  %77 = shl nuw nsw i32 %25, 1
  %78 = add nuw nsw i32 %22, 2
  %79 = add nuw nsw i32 %78, %28
  %80 = add nuw nsw i32 %79, %77
  %81 = lshr i32 %80, 2
  %82 = trunc i32 %81 to i8
  %83 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %82, i8* %83, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @LD4_C(i8*) #2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -32
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds i8, i8* %0, i64 -31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8, i8* %0, i64 -30
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = getelementptr inbounds i8, i8* %0, i64 -29
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds i8, i8* %0, i64 -28
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds i8, i8* %0, i64 -27
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds i8, i8* %0, i64 -26
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds i8, i8* %0, i64 -25
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = shl nuw nsw i32 %7, 1
  %27 = add nuw nsw i32 %10, 2
  %28 = add nuw nsw i32 %27, %4
  %29 = add nuw nsw i32 %28, %26
  %30 = lshr i32 %29, 2
  %31 = trunc i32 %30 to i8
  store i8 %31, i8* %0, align 1
  %32 = shl nuw nsw i32 %10, 1
  %33 = add nuw nsw i32 %13, 2
  %34 = add nuw nsw i32 %33, %7
  %35 = add nuw nsw i32 %34, %32
  %36 = lshr i32 %35, 2
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds i8, i8* %0, i64 32
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %37, i8* %39, align 1
  %40 = shl nuw nsw i32 %13, 1
  %41 = add nuw nsw i32 %27, %40
  %42 = add nuw nsw i32 %41, %16
  %43 = lshr i32 %42, 2
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds i8, i8* %0, i64 64
  store i8 %44, i8* %45, align 1
  %46 = getelementptr inbounds i8, i8* %0, i64 33
  store i8 %44, i8* %46, align 1
  %47 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %44, i8* %47, align 1
  %48 = shl nuw nsw i32 %16, 1
  %49 = add nuw nsw i32 %33, %48
  %50 = add nuw nsw i32 %49, %19
  %51 = lshr i32 %50, 2
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds i8, i8* %0, i64 96
  store i8 %52, i8* %53, align 1
  %54 = getelementptr inbounds i8, i8* %0, i64 65
  store i8 %52, i8* %54, align 1
  %55 = getelementptr inbounds i8, i8* %0, i64 34
  store i8 %52, i8* %55, align 1
  %56 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %52, i8* %56, align 1
  %57 = shl nuw nsw i32 %19, 1
  %58 = add nuw nsw i32 %16, 2
  %59 = add nuw nsw i32 %58, %57
  %60 = add nuw nsw i32 %59, %22
  %61 = lshr i32 %60, 2
  %62 = trunc i32 %61 to i8
  %63 = getelementptr inbounds i8, i8* %0, i64 97
  store i8 %62, i8* %63, align 1
  %64 = getelementptr inbounds i8, i8* %0, i64 66
  store i8 %62, i8* %64, align 1
  %65 = getelementptr inbounds i8, i8* %0, i64 35
  store i8 %62, i8* %65, align 1
  %66 = shl nuw nsw i32 %22, 1
  %67 = add nuw nsw i32 %19, 2
  %68 = add nuw nsw i32 %67, %66
  %69 = add nuw nsw i32 %68, %25
  %70 = lshr i32 %69, 2
  %71 = trunc i32 %70 to i8
  %72 = getelementptr inbounds i8, i8* %0, i64 98
  store i8 %71, i8* %72, align 1
  %73 = getelementptr inbounds i8, i8* %0, i64 67
  store i8 %71, i8* %73, align 1
  %74 = shl nuw nsw i32 %25, 1
  %75 = add nuw nsw i32 %22, 2
  %76 = add nuw nsw i32 %75, %25
  %77 = add nuw nsw i32 %76, %74
  %78 = lshr i32 %77, 2
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds i8, i8* %0, i64 99
  store i8 %79, i8* %80, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @HE4_C(i8* nocapture) #2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -33
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds i8, i8* %0, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8, i8* %0, i64 31
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = getelementptr inbounds i8, i8* %0, i64 63
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds i8, i8* %0, i64 95
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = shl nuw nsw i32 %7, 1
  %18 = add nuw nsw i32 %10, 2
  %19 = add nuw nsw i32 %18, %4
  %20 = add nuw nsw i32 %19, %17
  %21 = lshr i32 %20, 2
  %22 = and i32 %21, 255
  %23 = mul nuw i32 %22, 16843009
  %24 = bitcast i8* %0 to i32*
  store i32 %23, i32* %24, align 1
  %25 = getelementptr inbounds i8, i8* %0, i64 32
  %26 = shl nuw nsw i32 %10, 1
  %27 = add nuw nsw i32 %13, 2
  %28 = add nuw nsw i32 %27, %7
  %29 = add nuw nsw i32 %28, %26
  %30 = lshr i32 %29, 2
  %31 = and i32 %30, 255
  %32 = mul nuw i32 %31, 16843009
  %33 = bitcast i8* %25 to i32*
  store i32 %32, i32* %33, align 1
  %34 = getelementptr inbounds i8, i8* %0, i64 64
  %35 = shl nuw nsw i32 %13, 1
  %36 = add nuw nsw i32 %18, %35
  %37 = add nuw nsw i32 %36, %16
  %38 = lshr i32 %37, 2
  %39 = and i32 %38, 255
  %40 = mul nuw i32 %39, 16843009
  %41 = bitcast i8* %34 to i32*
  store i32 %40, i32* %41, align 1
  %42 = getelementptr inbounds i8, i8* %0, i64 96
  %43 = shl nuw nsw i32 %16, 1
  %44 = add nuw nsw i32 %27, %16
  %45 = add nuw nsw i32 %44, %43
  %46 = lshr i32 %45, 2
  %47 = and i32 %46, 255
  %48 = mul nuw i32 %47, 16843009
  %49 = bitcast i8* %42 to i32*
  store i32 %48, i32* %49, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @VR4_C(i8*) #2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -1
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds i8, i8* %0, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8, i8* %0, i64 63
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = getelementptr inbounds i8, i8* %0, i64 -33
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds i8, i8* %0, i64 -32
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds i8, i8* %0, i64 -31
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds i8, i8* %0, i64 -30
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds i8, i8* %0, i64 -29
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = add nuw nsw i32 %16, 1
  %27 = add nuw nsw i32 %26, %13
  %28 = lshr i32 %27, 1
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds i8, i8* %0, i64 65
  store i8 %29, i8* %30, align 1
  store i8 %29, i8* %0, align 1
  %31 = add nuw nsw i32 %26, %19
  %32 = lshr i32 %31, 1
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds i8, i8* %0, i64 66
  store i8 %33, i8* %34, align 1
  %35 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %33, i8* %35, align 1
  %36 = add nuw nsw i32 %19, 1
  %37 = add nuw nsw i32 %36, %22
  %38 = lshr i32 %37, 1
  %39 = trunc i32 %38 to i8
  %40 = getelementptr inbounds i8, i8* %0, i64 67
  store i8 %39, i8* %40, align 1
  %41 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %39, i8* %41, align 1
  %42 = add nuw nsw i32 %22, 1
  %43 = add nuw nsw i32 %42, %25
  %44 = lshr i32 %43, 1
  %45 = trunc i32 %44 to i8
  %46 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %45, i8* %46, align 1
  %47 = shl nuw nsw i32 %7, 1
  %48 = add nuw nsw i32 %4, 2
  %49 = add nuw nsw i32 %48, %10
  %50 = add nuw nsw i32 %49, %47
  %51 = lshr i32 %50, 2
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds i8, i8* %0, i64 96
  store i8 %52, i8* %53, align 1
  %54 = shl nuw nsw i32 %4, 1
  %55 = add nuw nsw i32 %13, 2
  %56 = add nuw nsw i32 %55, %7
  %57 = add nuw nsw i32 %56, %54
  %58 = lshr i32 %57, 2
  %59 = trunc i32 %58 to i8
  %60 = getelementptr inbounds i8, i8* %0, i64 64
  store i8 %59, i8* %60, align 1
  %61 = shl nuw nsw i32 %13, 1
  %62 = add nuw nsw i32 %48, %61
  %63 = add nuw nsw i32 %62, %16
  %64 = lshr i32 %63, 2
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds i8, i8* %0, i64 97
  store i8 %65, i8* %66, align 1
  %67 = getelementptr inbounds i8, i8* %0, i64 32
  store i8 %65, i8* %67, align 1
  %68 = shl nuw nsw i32 %16, 1
  %69 = add nuw nsw i32 %55, %68
  %70 = add nuw nsw i32 %69, %19
  %71 = lshr i32 %70, 2
  %72 = trunc i32 %71 to i8
  %73 = getelementptr inbounds i8, i8* %0, i64 98
  store i8 %72, i8* %73, align 1
  %74 = getelementptr inbounds i8, i8* %0, i64 33
  store i8 %72, i8* %74, align 1
  %75 = shl nuw nsw i32 %19, 1
  %76 = add nuw nsw i32 %16, 2
  %77 = add nuw nsw i32 %76, %75
  %78 = add nuw nsw i32 %77, %22
  %79 = lshr i32 %78, 2
  %80 = trunc i32 %79 to i8
  %81 = getelementptr inbounds i8, i8* %0, i64 99
  store i8 %80, i8* %81, align 1
  %82 = getelementptr inbounds i8, i8* %0, i64 34
  store i8 %80, i8* %82, align 1
  %83 = shl nuw nsw i32 %22, 1
  %84 = add nuw nsw i32 %19, 2
  %85 = add nuw nsw i32 %84, %83
  %86 = add nuw nsw i32 %85, %25
  %87 = lshr i32 %86, 2
  %88 = trunc i32 %87 to i8
  %89 = getelementptr inbounds i8, i8* %0, i64 35
  store i8 %88, i8* %89, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @VL4_C(i8*) #2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -32
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds i8, i8* %0, i64 -31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8, i8* %0, i64 -30
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = getelementptr inbounds i8, i8* %0, i64 -29
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds i8, i8* %0, i64 -28
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds i8, i8* %0, i64 -27
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds i8, i8* %0, i64 -26
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds i8, i8* %0, i64 -25
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = add nuw nsw i32 %7, 1
  %27 = add nuw nsw i32 %26, %4
  %28 = lshr i32 %27, 1
  %29 = trunc i32 %28 to i8
  store i8 %29, i8* %0, align 1
  %30 = add nuw nsw i32 %26, %10
  %31 = lshr i32 %30, 1
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds i8, i8* %0, i64 64
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %32, i8* %34, align 1
  %35 = add nuw nsw i32 %10, 1
  %36 = add nuw nsw i32 %35, %13
  %37 = lshr i32 %36, 1
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds i8, i8* %0, i64 65
  store i8 %38, i8* %39, align 1
  %40 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %38, i8* %40, align 1
  %41 = add nuw nsw i32 %13, 1
  %42 = add nuw nsw i32 %41, %16
  %43 = lshr i32 %42, 1
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds i8, i8* %0, i64 66
  store i8 %44, i8* %45, align 1
  %46 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %44, i8* %46, align 1
  %47 = shl nuw nsw i32 %7, 1
  %48 = add nuw nsw i32 %10, 2
  %49 = add nuw nsw i32 %48, %4
  %50 = add nuw nsw i32 %49, %47
  %51 = lshr i32 %50, 2
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds i8, i8* %0, i64 32
  store i8 %52, i8* %53, align 1
  %54 = shl nuw nsw i32 %10, 1
  %55 = add nuw nsw i32 %13, 2
  %56 = add nuw nsw i32 %55, %7
  %57 = add nuw nsw i32 %56, %54
  %58 = lshr i32 %57, 2
  %59 = trunc i32 %58 to i8
  %60 = getelementptr inbounds i8, i8* %0, i64 96
  store i8 %59, i8* %60, align 1
  %61 = getelementptr inbounds i8, i8* %0, i64 33
  store i8 %59, i8* %61, align 1
  %62 = shl nuw nsw i32 %13, 1
  %63 = add nuw nsw i32 %48, %62
  %64 = add nuw nsw i32 %63, %16
  %65 = lshr i32 %64, 2
  %66 = trunc i32 %65 to i8
  %67 = getelementptr inbounds i8, i8* %0, i64 97
  store i8 %66, i8* %67, align 1
  %68 = getelementptr inbounds i8, i8* %0, i64 34
  store i8 %66, i8* %68, align 1
  %69 = shl nuw nsw i32 %16, 1
  %70 = add nuw nsw i32 %55, %69
  %71 = add nuw nsw i32 %70, %19
  %72 = lshr i32 %71, 2
  %73 = trunc i32 %72 to i8
  %74 = getelementptr inbounds i8, i8* %0, i64 98
  store i8 %73, i8* %74, align 1
  %75 = getelementptr inbounds i8, i8* %0, i64 35
  store i8 %73, i8* %75, align 1
  %76 = shl nuw nsw i32 %19, 1
  %77 = add nuw nsw i32 %16, 2
  %78 = add nuw nsw i32 %77, %76
  %79 = add nuw nsw i32 %78, %22
  %80 = lshr i32 %79, 2
  %81 = trunc i32 %80 to i8
  %82 = getelementptr inbounds i8, i8* %0, i64 67
  store i8 %81, i8* %82, align 1
  %83 = shl nuw nsw i32 %22, 1
  %84 = add nuw nsw i32 %19, 2
  %85 = add nuw nsw i32 %84, %83
  %86 = add nuw nsw i32 %85, %25
  %87 = lshr i32 %86, 2
  %88 = trunc i32 %87 to i8
  %89 = getelementptr inbounds i8, i8* %0, i64 99
  store i8 %88, i8* %89, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @HD4_C(i8*) #2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -1
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds i8, i8* %0, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8, i8* %0, i64 63
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = getelementptr inbounds i8, i8* %0, i64 95
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds i8, i8* %0, i64 -33
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds i8, i8* %0, i64 -32
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds i8, i8* %0, i64 -31
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds i8, i8* %0, i64 -30
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = add nuw nsw i32 %4, 1
  %27 = add nuw nsw i32 %26, %16
  %28 = lshr i32 %27, 1
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds i8, i8* %0, i64 34
  store i8 %29, i8* %30, align 1
  store i8 %29, i8* %0, align 1
  %31 = add nuw nsw i32 %26, %7
  %32 = lshr i32 %31, 1
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds i8, i8* %0, i64 66
  store i8 %33, i8* %34, align 1
  %35 = getelementptr inbounds i8, i8* %0, i64 32
  store i8 %33, i8* %35, align 1
  %36 = add nuw nsw i32 %7, 1
  %37 = add nuw nsw i32 %36, %10
  %38 = lshr i32 %37, 1
  %39 = trunc i32 %38 to i8
  %40 = getelementptr inbounds i8, i8* %0, i64 98
  store i8 %39, i8* %40, align 1
  %41 = getelementptr inbounds i8, i8* %0, i64 64
  store i8 %39, i8* %41, align 1
  %42 = add nuw nsw i32 %10, 1
  %43 = add nuw nsw i32 %42, %13
  %44 = lshr i32 %43, 1
  %45 = trunc i32 %44 to i8
  %46 = getelementptr inbounds i8, i8* %0, i64 96
  store i8 %45, i8* %46, align 1
  %47 = shl nuw nsw i32 %22, 1
  %48 = add nuw nsw i32 %19, 2
  %49 = add nuw nsw i32 %48, %47
  %50 = add nuw nsw i32 %49, %25
  %51 = lshr i32 %50, 2
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %52, i8* %53, align 1
  %54 = shl nuw nsw i32 %19, 1
  %55 = add nuw nsw i32 %16, 2
  %56 = add nuw nsw i32 %55, %54
  %57 = add nuw nsw i32 %56, %22
  %58 = lshr i32 %57, 2
  %59 = trunc i32 %58 to i8
  %60 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %59, i8* %60, align 1
  %61 = shl nuw nsw i32 %16, 1
  %62 = add nuw nsw i32 %4, 2
  %63 = add nuw nsw i32 %62, %61
  %64 = add nuw nsw i32 %63, %19
  %65 = lshr i32 %64, 2
  %66 = trunc i32 %65 to i8
  %67 = getelementptr inbounds i8, i8* %0, i64 35
  store i8 %66, i8* %67, align 1
  %68 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %66, i8* %68, align 1
  %69 = shl nuw nsw i32 %4, 1
  %70 = add nuw nsw i32 %7, 2
  %71 = add nuw nsw i32 %70, %69
  %72 = add nuw nsw i32 %71, %16
  %73 = lshr i32 %72, 2
  %74 = trunc i32 %73 to i8
  %75 = getelementptr inbounds i8, i8* %0, i64 67
  store i8 %74, i8* %75, align 1
  %76 = getelementptr inbounds i8, i8* %0, i64 33
  store i8 %74, i8* %76, align 1
  %77 = shl nuw nsw i32 %7, 1
  %78 = add nuw nsw i32 %62, %10
  %79 = add nuw nsw i32 %78, %77
  %80 = lshr i32 %79, 2
  %81 = trunc i32 %80 to i8
  %82 = getelementptr inbounds i8, i8* %0, i64 99
  store i8 %81, i8* %82, align 1
  %83 = getelementptr inbounds i8, i8* %0, i64 65
  store i8 %81, i8* %83, align 1
  %84 = shl nuw nsw i32 %10, 1
  %85 = add nuw nsw i32 %70, %13
  %86 = add nuw nsw i32 %85, %84
  %87 = lshr i32 %86, 2
  %88 = trunc i32 %87 to i8
  %89 = getelementptr inbounds i8, i8* %0, i64 97
  store i8 %88, i8* %89, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @HU4_C(i8* nocapture) #2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -1
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds i8, i8* %0, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8, i8* %0, i64 63
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = getelementptr inbounds i8, i8* %0, i64 95
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = add nuw nsw i32 %7, 1
  %15 = add nuw nsw i32 %14, %4
  %16 = lshr i32 %15, 1
  %17 = trunc i32 %16 to i8
  store i8 %17, i8* %0, align 1
  %18 = add nuw nsw i32 %14, %10
  %19 = lshr i32 %18, 1
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds i8, i8* %0, i64 32
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %20, i8* %22, align 1
  %23 = add nuw nsw i32 %10, 1
  %24 = add nuw nsw i32 %23, %13
  %25 = lshr i32 %24, 1
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds i8, i8* %0, i64 64
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds i8, i8* %0, i64 34
  store i8 %26, i8* %28, align 1
  %29 = shl nuw nsw i32 %7, 1
  %30 = add nuw nsw i32 %10, 2
  %31 = add nuw nsw i32 %30, %4
  %32 = add nuw nsw i32 %31, %29
  %33 = lshr i32 %32, 2
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %34, i8* %35, align 1
  %36 = shl nuw nsw i32 %10, 1
  %37 = add nuw nsw i32 %13, 2
  %38 = add nuw nsw i32 %37, %7
  %39 = add nuw nsw i32 %38, %36
  %40 = lshr i32 %39, 2
  %41 = trunc i32 %40 to i8
  %42 = getelementptr inbounds i8, i8* %0, i64 33
  store i8 %41, i8* %42, align 1
  %43 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %41, i8* %43, align 1
  %44 = shl nuw nsw i32 %13, 1
  %45 = add nuw nsw i32 %30, %13
  %46 = add nuw nsw i32 %45, %44
  %47 = lshr i32 %46, 2
  %48 = trunc i32 %47 to i8
  %49 = getelementptr inbounds i8, i8* %0, i64 65
  store i8 %48, i8* %49, align 1
  %50 = getelementptr inbounds i8, i8* %0, i64 35
  store i8 %48, i8* %50, align 1
  %51 = getelementptr inbounds i8, i8* %0, i64 96
  %52 = getelementptr inbounds i8, i8* %0, i64 66
  store i8 %12, i8* %52, align 1
  %53 = getelementptr inbounds i8, i8* %0, i64 67
  store i8 %12, i8* %53, align 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 %12, i64 4, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @DC16_C(i8* nocapture) #0 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -1
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds i8, i8* %0, i64 -32
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = add nuw nsw i32 %4, 16
  %9 = add nuw nsw i32 %8, %7
  %10 = getelementptr inbounds i8, i8* %0, i64 31
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds i8, i8* %0, i64 -31
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = add nuw nsw i32 %9, %12
  %17 = add nuw nsw i32 %16, %15
  %18 = getelementptr inbounds i8, i8* %0, i64 63
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds i8, i8* %0, i64 -30
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = add nuw nsw i32 %17, %20
  %25 = add nuw nsw i32 %24, %23
  %26 = getelementptr inbounds i8, i8* %0, i64 95
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = getelementptr inbounds i8, i8* %0, i64 -29
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = add nuw nsw i32 %25, %28
  %33 = add nuw nsw i32 %32, %31
  %34 = getelementptr inbounds i8, i8* %0, i64 127
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = getelementptr inbounds i8, i8* %0, i64 -28
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = add nuw nsw i32 %33, %36
  %41 = add nuw nsw i32 %40, %39
  %42 = getelementptr inbounds i8, i8* %0, i64 159
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds i8, i8* %0, i64 -27
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = add nuw nsw i32 %41, %44
  %49 = add nuw nsw i32 %48, %47
  %50 = getelementptr inbounds i8, i8* %0, i64 191
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = getelementptr inbounds i8, i8* %0, i64 -26
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = add nuw nsw i32 %49, %52
  %57 = add nuw nsw i32 %56, %55
  %58 = getelementptr inbounds i8, i8* %0, i64 223
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = getelementptr inbounds i8, i8* %0, i64 -25
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = add nuw nsw i32 %57, %60
  %65 = add nuw nsw i32 %64, %63
  %66 = getelementptr inbounds i8, i8* %0, i64 255
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = getelementptr inbounds i8, i8* %0, i64 -24
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = add nuw nsw i32 %65, %68
  %73 = add nuw nsw i32 %72, %71
  %74 = getelementptr inbounds i8, i8* %0, i64 287
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = getelementptr inbounds i8, i8* %0, i64 -23
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = add nuw nsw i32 %73, %76
  %81 = add nuw nsw i32 %80, %79
  %82 = getelementptr inbounds i8, i8* %0, i64 319
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = getelementptr inbounds i8, i8* %0, i64 -22
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = add nuw nsw i32 %81, %84
  %89 = add nuw nsw i32 %88, %87
  %90 = getelementptr inbounds i8, i8* %0, i64 351
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = getelementptr inbounds i8, i8* %0, i64 -21
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = add nuw nsw i32 %89, %92
  %97 = add nuw nsw i32 %96, %95
  %98 = getelementptr inbounds i8, i8* %0, i64 383
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = getelementptr inbounds i8, i8* %0, i64 -20
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = add nuw nsw i32 %97, %100
  %105 = add nuw nsw i32 %104, %103
  %106 = getelementptr inbounds i8, i8* %0, i64 415
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = getelementptr inbounds i8, i8* %0, i64 -19
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = add nuw nsw i32 %105, %108
  %113 = add nuw nsw i32 %112, %111
  %114 = getelementptr inbounds i8, i8* %0, i64 447
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = getelementptr inbounds i8, i8* %0, i64 -18
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = add nuw nsw i32 %113, %116
  %121 = add nuw nsw i32 %120, %119
  %122 = getelementptr inbounds i8, i8* %0, i64 479
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = getelementptr inbounds i8, i8* %0, i64 -17
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = add nuw nsw i32 %121, %124
  %129 = add nuw nsw i32 %128, %127
  %130 = lshr i32 %129, 5
  %131 = trunc i32 %130 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %131, i64 16, i1 false) #5
  %132 = getelementptr inbounds i8, i8* %0, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %132, i8 %131, i64 16, i1 false) #5
  %133 = getelementptr inbounds i8, i8* %0, i64 64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %133, i8 %131, i64 16, i1 false) #5
  %134 = getelementptr inbounds i8, i8* %0, i64 96
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %134, i8 %131, i64 16, i1 false) #5
  %135 = getelementptr inbounds i8, i8* %0, i64 128
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %135, i8 %131, i64 16, i1 false) #5
  %136 = getelementptr inbounds i8, i8* %0, i64 160
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %136, i8 %131, i64 16, i1 false) #5
  %137 = getelementptr inbounds i8, i8* %0, i64 192
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %137, i8 %131, i64 16, i1 false) #5
  %138 = getelementptr inbounds i8, i8* %0, i64 224
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %138, i8 %131, i64 16, i1 false) #5
  %139 = getelementptr inbounds i8, i8* %0, i64 256
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %139, i8 %131, i64 16, i1 false) #5
  %140 = getelementptr inbounds i8, i8* %0, i64 288
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %140, i8 %131, i64 16, i1 false) #5
  %141 = getelementptr inbounds i8, i8* %0, i64 320
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %141, i8 %131, i64 16, i1 false) #5
  %142 = getelementptr inbounds i8, i8* %0, i64 352
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %142, i8 %131, i64 16, i1 false) #5
  %143 = getelementptr inbounds i8, i8* %0, i64 384
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %143, i8 %131, i64 16, i1 false) #5
  %144 = getelementptr inbounds i8, i8* %0, i64 416
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %144, i8 %131, i64 16, i1 false) #5
  %145 = getelementptr inbounds i8, i8* %0, i64 448
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %145, i8 %131, i64 16, i1 false) #5
  %146 = getelementptr inbounds i8, i8* %0, i64 480
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %146, i8 %131, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @TM16_C(i8* nocapture) #2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -32
  %3 = load i8*, i8** @VP8kclip1, align 8
  %4 = getelementptr inbounds i8, i8* %0, i64 -33
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i64
  %7 = sub nsw i64 0, %6
  %8 = getelementptr inbounds i8, i8* %3, i64 %7
  %9 = getelementptr inbounds i8, i8* %0, i64 -31
  %10 = getelementptr inbounds i8, i8* %0, i64 -30
  %11 = getelementptr inbounds i8, i8* %0, i64 -29
  %12 = getelementptr inbounds i8, i8* %0, i64 -28
  %13 = getelementptr inbounds i8, i8* %0, i64 -27
  %14 = getelementptr inbounds i8, i8* %0, i64 -26
  %15 = getelementptr inbounds i8, i8* %0, i64 -25
  %16 = getelementptr inbounds i8, i8* %0, i64 -24
  %17 = getelementptr inbounds i8, i8* %0, i64 -23
  %18 = getelementptr inbounds i8, i8* %0, i64 -22
  %19 = getelementptr inbounds i8, i8* %0, i64 -21
  %20 = getelementptr inbounds i8, i8* %0, i64 -20
  %21 = getelementptr inbounds i8, i8* %0, i64 -19
  %22 = getelementptr inbounds i8, i8* %0, i64 -18
  %23 = getelementptr inbounds i8, i8* %0, i64 -17
  br label %24

24:                                               ; preds = %24, %1
  %25 = phi i32 [ 0, %1 ], [ %111, %24 ]
  %26 = phi i8* [ %0, %1 ], [ %110, %24 ]
  %27 = getelementptr inbounds i8, i8* %26, i64 -1
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i64
  %30 = getelementptr inbounds i8, i8* %8, i64 %29
  %31 = load i8, i8* %2, align 1
  %32 = zext i8 %31 to i64
  %33 = getelementptr inbounds i8, i8* %30, i64 %32
  %34 = load i8, i8* %33, align 1
  store i8 %34, i8* %26, align 1
  %35 = load i8, i8* %9, align 1
  %36 = zext i8 %35 to i64
  %37 = getelementptr inbounds i8, i8* %30, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds i8, i8* %26, i64 1
  store i8 %38, i8* %39, align 1
  %40 = load i8, i8* %10, align 1
  %41 = zext i8 %40 to i64
  %42 = getelementptr inbounds i8, i8* %30, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = getelementptr inbounds i8, i8* %26, i64 2
  store i8 %43, i8* %44, align 1
  %45 = load i8, i8* %11, align 1
  %46 = zext i8 %45 to i64
  %47 = getelementptr inbounds i8, i8* %30, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds i8, i8* %26, i64 3
  store i8 %48, i8* %49, align 1
  %50 = load i8, i8* %12, align 1
  %51 = zext i8 %50 to i64
  %52 = getelementptr inbounds i8, i8* %30, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = getelementptr inbounds i8, i8* %26, i64 4
  store i8 %53, i8* %54, align 1
  %55 = load i8, i8* %13, align 1
  %56 = zext i8 %55 to i64
  %57 = getelementptr inbounds i8, i8* %30, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = getelementptr inbounds i8, i8* %26, i64 5
  store i8 %58, i8* %59, align 1
  %60 = load i8, i8* %14, align 1
  %61 = zext i8 %60 to i64
  %62 = getelementptr inbounds i8, i8* %30, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = getelementptr inbounds i8, i8* %26, i64 6
  store i8 %63, i8* %64, align 1
  %65 = load i8, i8* %15, align 1
  %66 = zext i8 %65 to i64
  %67 = getelementptr inbounds i8, i8* %30, i64 %66
  %68 = load i8, i8* %67, align 1
  %69 = getelementptr inbounds i8, i8* %26, i64 7
  store i8 %68, i8* %69, align 1
  %70 = load i8, i8* %16, align 1
  %71 = zext i8 %70 to i64
  %72 = getelementptr inbounds i8, i8* %30, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = getelementptr inbounds i8, i8* %26, i64 8
  store i8 %73, i8* %74, align 1
  %75 = load i8, i8* %17, align 1
  %76 = zext i8 %75 to i64
  %77 = getelementptr inbounds i8, i8* %30, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = getelementptr inbounds i8, i8* %26, i64 9
  store i8 %78, i8* %79, align 1
  %80 = load i8, i8* %18, align 1
  %81 = zext i8 %80 to i64
  %82 = getelementptr inbounds i8, i8* %30, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = getelementptr inbounds i8, i8* %26, i64 10
  store i8 %83, i8* %84, align 1
  %85 = load i8, i8* %19, align 1
  %86 = zext i8 %85 to i64
  %87 = getelementptr inbounds i8, i8* %30, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = getelementptr inbounds i8, i8* %26, i64 11
  store i8 %88, i8* %89, align 1
  %90 = load i8, i8* %20, align 1
  %91 = zext i8 %90 to i64
  %92 = getelementptr inbounds i8, i8* %30, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = getelementptr inbounds i8, i8* %26, i64 12
  store i8 %93, i8* %94, align 1
  %95 = load i8, i8* %21, align 1
  %96 = zext i8 %95 to i64
  %97 = getelementptr inbounds i8, i8* %30, i64 %96
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr inbounds i8, i8* %26, i64 13
  store i8 %98, i8* %99, align 1
  %100 = load i8, i8* %22, align 1
  %101 = zext i8 %100 to i64
  %102 = getelementptr inbounds i8, i8* %30, i64 %101
  %103 = load i8, i8* %102, align 1
  %104 = getelementptr inbounds i8, i8* %26, i64 14
  store i8 %103, i8* %104, align 1
  %105 = load i8, i8* %23, align 1
  %106 = zext i8 %105 to i64
  %107 = getelementptr inbounds i8, i8* %30, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = getelementptr inbounds i8, i8* %26, i64 15
  store i8 %108, i8* %109, align 1
  %110 = getelementptr inbounds i8, i8* %26, i64 32
  %111 = add nuw nsw i32 %25, 1
  %112 = icmp eq i32 %111, 16
  br i1 %112, label %113, label %24

113:                                              ; preds = %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @VE16_C(i8* nocapture) #0 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -32
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %2, i64 16, i1 false)
  %3 = getelementptr inbounds i8, i8* %0, i64 32
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 1 %2, i64 16, i1 false)
  %4 = getelementptr inbounds i8, i8* %0, i64 64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4, i8* align 1 %2, i64 16, i1 false)
  %5 = getelementptr inbounds i8, i8* %0, i64 96
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %2, i64 16, i1 false)
  %6 = getelementptr inbounds i8, i8* %0, i64 128
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %2, i64 16, i1 false)
  %7 = getelementptr inbounds i8, i8* %0, i64 160
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %2, i64 16, i1 false)
  %8 = getelementptr inbounds i8, i8* %0, i64 192
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 16, i1 false)
  %9 = getelementptr inbounds i8, i8* %0, i64 224
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 16, i1 false)
  %10 = getelementptr inbounds i8, i8* %0, i64 256
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 16, i1 false)
  %11 = getelementptr inbounds i8, i8* %0, i64 288
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 16, i1 false)
  %12 = getelementptr inbounds i8, i8* %0, i64 320
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %2, i64 16, i1 false)
  %13 = getelementptr inbounds i8, i8* %0, i64 352
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %2, i64 16, i1 false)
  %14 = getelementptr inbounds i8, i8* %0, i64 384
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %2, i64 16, i1 false)
  %15 = getelementptr inbounds i8, i8* %0, i64 416
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %2, i64 16, i1 false)
  %16 = getelementptr inbounds i8, i8* %0, i64 448
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %2, i64 16, i1 false)
  %17 = getelementptr inbounds i8, i8* %0, i64 480
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %2, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @HE16_C(i8* nocapture) #0 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -1
  %3 = load i8, i8* %2, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %3, i64 16, i1 false)
  %4 = getelementptr inbounds i8, i8* %0, i64 32
  %5 = getelementptr inbounds i8, i8* %0, i64 31
  %6 = load i8, i8* %5, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 %6, i64 16, i1 false)
  %7 = getelementptr inbounds i8, i8* %0, i64 64
  %8 = getelementptr inbounds i8, i8* %0, i64 63
  %9 = load i8, i8* %8, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 %9, i64 16, i1 false)
  %10 = getelementptr inbounds i8, i8* %0, i64 96
  %11 = getelementptr inbounds i8, i8* %0, i64 95
  %12 = load i8, i8* %11, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 %12, i64 16, i1 false)
  %13 = getelementptr inbounds i8, i8* %0, i64 128
  %14 = getelementptr inbounds i8, i8* %0, i64 127
  %15 = load i8, i8* %14, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 %15, i64 16, i1 false)
  %16 = getelementptr inbounds i8, i8* %0, i64 160
  %17 = getelementptr inbounds i8, i8* %0, i64 159
  %18 = load i8, i8* %17, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 %18, i64 16, i1 false)
  %19 = getelementptr inbounds i8, i8* %0, i64 192
  %20 = getelementptr inbounds i8, i8* %0, i64 191
  %21 = load i8, i8* %20, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 %21, i64 16, i1 false)
  %22 = getelementptr inbounds i8, i8* %0, i64 224
  %23 = getelementptr inbounds i8, i8* %0, i64 223
  %24 = load i8, i8* %23, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %24, i64 16, i1 false)
  %25 = getelementptr inbounds i8, i8* %0, i64 256
  %26 = getelementptr inbounds i8, i8* %0, i64 255
  %27 = load i8, i8* %26, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %27, i64 16, i1 false)
  %28 = getelementptr inbounds i8, i8* %0, i64 288
  %29 = getelementptr inbounds i8, i8* %0, i64 287
  %30 = load i8, i8* %29, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %30, i64 16, i1 false)
  %31 = getelementptr inbounds i8, i8* %0, i64 320
  %32 = getelementptr inbounds i8, i8* %0, i64 319
  %33 = load i8, i8* %32, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %33, i64 16, i1 false)
  %34 = getelementptr inbounds i8, i8* %0, i64 352
  %35 = getelementptr inbounds i8, i8* %0, i64 351
  %36 = load i8, i8* %35, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 %36, i64 16, i1 false)
  %37 = getelementptr inbounds i8, i8* %0, i64 384
  %38 = getelementptr inbounds i8, i8* %0, i64 383
  %39 = load i8, i8* %38, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 %39, i64 16, i1 false)
  %40 = getelementptr inbounds i8, i8* %0, i64 416
  %41 = getelementptr inbounds i8, i8* %0, i64 415
  %42 = load i8, i8* %41, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 %42, i64 16, i1 false)
  %43 = getelementptr inbounds i8, i8* %0, i64 448
  %44 = getelementptr inbounds i8, i8* %0, i64 447
  %45 = load i8, i8* %44, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %43, i8 %45, i64 16, i1 false)
  %46 = getelementptr inbounds i8, i8* %0, i64 480
  %47 = getelementptr inbounds i8, i8* %0, i64 479
  %48 = load i8, i8* %47, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 %48, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @DC16NoTop_C(i8* nocapture) #0 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -1
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = add nuw nsw i32 %4, 8
  %6 = getelementptr inbounds i8, i8* %0, i64 31
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = add nuw nsw i32 %5, %8
  %10 = getelementptr inbounds i8, i8* %0, i64 63
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = add nuw nsw i32 %9, %12
  %14 = getelementptr inbounds i8, i8* %0, i64 95
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = add nuw nsw i32 %13, %16
  %18 = getelementptr inbounds i8, i8* %0, i64 127
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = add nuw nsw i32 %17, %20
  %22 = getelementptr inbounds i8, i8* %0, i64 159
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = add nuw nsw i32 %21, %24
  %26 = getelementptr inbounds i8, i8* %0, i64 191
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = add nuw nsw i32 %25, %28
  %30 = getelementptr inbounds i8, i8* %0, i64 223
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = add nuw nsw i32 %29, %32
  %34 = getelementptr inbounds i8, i8* %0, i64 255
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = add nuw nsw i32 %33, %36
  %38 = getelementptr inbounds i8, i8* %0, i64 287
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = add nuw nsw i32 %37, %40
  %42 = getelementptr inbounds i8, i8* %0, i64 319
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = add nuw nsw i32 %41, %44
  %46 = getelementptr inbounds i8, i8* %0, i64 351
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = add nuw nsw i32 %45, %48
  %50 = getelementptr inbounds i8, i8* %0, i64 383
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = add nuw nsw i32 %49, %52
  %54 = getelementptr inbounds i8, i8* %0, i64 415
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = add nuw nsw i32 %53, %56
  %58 = getelementptr inbounds i8, i8* %0, i64 447
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = add nuw nsw i32 %57, %60
  %62 = getelementptr inbounds i8, i8* %0, i64 479
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = add nuw nsw i32 %61, %64
  %66 = lshr i32 %65, 4
  %67 = trunc i32 %66 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %67, i64 16, i1 false) #5
  %68 = getelementptr inbounds i8, i8* %0, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %68, i8 %67, i64 16, i1 false) #5
  %69 = getelementptr inbounds i8, i8* %0, i64 64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %69, i8 %67, i64 16, i1 false) #5
  %70 = getelementptr inbounds i8, i8* %0, i64 96
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %70, i8 %67, i64 16, i1 false) #5
  %71 = getelementptr inbounds i8, i8* %0, i64 128
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %71, i8 %67, i64 16, i1 false) #5
  %72 = getelementptr inbounds i8, i8* %0, i64 160
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %72, i8 %67, i64 16, i1 false) #5
  %73 = getelementptr inbounds i8, i8* %0, i64 192
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %73, i8 %67, i64 16, i1 false) #5
  %74 = getelementptr inbounds i8, i8* %0, i64 224
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %74, i8 %67, i64 16, i1 false) #5
  %75 = getelementptr inbounds i8, i8* %0, i64 256
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %75, i8 %67, i64 16, i1 false) #5
  %76 = getelementptr inbounds i8, i8* %0, i64 288
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %76, i8 %67, i64 16, i1 false) #5
  %77 = getelementptr inbounds i8, i8* %0, i64 320
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %77, i8 %67, i64 16, i1 false) #5
  %78 = getelementptr inbounds i8, i8* %0, i64 352
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %78, i8 %67, i64 16, i1 false) #5
  %79 = getelementptr inbounds i8, i8* %0, i64 384
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %79, i8 %67, i64 16, i1 false) #5
  %80 = getelementptr inbounds i8, i8* %0, i64 416
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %80, i8 %67, i64 16, i1 false) #5
  %81 = getelementptr inbounds i8, i8* %0, i64 448
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %81, i8 %67, i64 16, i1 false) #5
  %82 = getelementptr inbounds i8, i8* %0, i64 480
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %82, i8 %67, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @DC16NoLeft_C(i8* nocapture) #0 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -32
  %3 = bitcast i8* %2 to <16 x i8>*
  %4 = load <16 x i8>, <16 x i8>* %3, align 1
  %5 = zext <16 x i8> %4 to <16 x i32>
  %6 = shufflevector <16 x i32> %5, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = add nuw nsw <16 x i32> %6, %5
  %8 = shufflevector <16 x i32> %7, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <16 x i32> %7, %8
  %10 = shufflevector <16 x i32> %9, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <16 x i32> %9, %10
  %12 = shufflevector <16 x i32> %11, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <16 x i32> %11, %12
  %14 = extractelement <16 x i32> %13, i32 0
  %15 = add nuw nsw i32 %14, 8
  %16 = lshr i32 %15, 4
  %17 = trunc i32 %16 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %17, i64 16, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %0, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %17, i64 16, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %0, i64 64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 %17, i64 16, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %0, i64 96
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 %17, i64 16, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %0, i64 128
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %17, i64 16, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %0, i64 160
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %17, i64 16, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %0, i64 192
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %17, i64 16, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %0, i64 224
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %17, i64 16, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %0, i64 256
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %17, i64 16, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %0, i64 288
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %17, i64 16, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %0, i64 320
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %17, i64 16, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %0, i64 352
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %17, i64 16, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %0, i64 384
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 %17, i64 16, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %0, i64 416
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %17, i64 16, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %0, i64 448
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %17, i64 16, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %0, i64 480
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 %17, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @DC16NoTopLeft_C(i8* nocapture) #0 {
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 -128, i64 16, i1 false) #5
  %2 = getelementptr inbounds i8, i8* %0, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 -128, i64 16, i1 false) #5
  %3 = getelementptr inbounds i8, i8* %0, i64 64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %3, i8 -128, i64 16, i1 false) #5
  %4 = getelementptr inbounds i8, i8* %0, i64 96
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 -128, i64 16, i1 false) #5
  %5 = getelementptr inbounds i8, i8* %0, i64 128
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 -128, i64 16, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %0, i64 160
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 -128, i64 16, i1 false) #5
  %7 = getelementptr inbounds i8, i8* %0, i64 192
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 -128, i64 16, i1 false) #5
  %8 = getelementptr inbounds i8, i8* %0, i64 224
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 -128, i64 16, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %0, i64 256
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 -128, i64 16, i1 false) #5
  %10 = getelementptr inbounds i8, i8* %0, i64 288
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 -128, i64 16, i1 false) #5
  %11 = getelementptr inbounds i8, i8* %0, i64 320
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 -128, i64 16, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %0, i64 352
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 -128, i64 16, i1 false) #5
  %13 = getelementptr inbounds i8, i8* %0, i64 384
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 -128, i64 16, i1 false) #5
  %14 = getelementptr inbounds i8, i8* %0, i64 416
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %14, i8 -128, i64 16, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %0, i64 448
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 -128, i64 16, i1 false) #5
  %16 = getelementptr inbounds i8, i8* %0, i64 480
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 -128, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @DC8uv_C(i8* nocapture) #0 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -32
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds i8, i8* %0, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = add nuw nsw i32 %4, 8
  %9 = add nuw nsw i32 %8, %7
  %10 = getelementptr inbounds i8, i8* %0, i64 -31
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds i8, i8* %0, i64 31
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = add nuw nsw i32 %9, %12
  %17 = add nuw nsw i32 %16, %15
  %18 = getelementptr inbounds i8, i8* %0, i64 -30
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds i8, i8* %0, i64 63
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = add nuw nsw i32 %17, %20
  %25 = add nuw nsw i32 %24, %23
  %26 = getelementptr inbounds i8, i8* %0, i64 -29
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = getelementptr inbounds i8, i8* %0, i64 95
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = add nuw nsw i32 %25, %28
  %33 = add nuw nsw i32 %32, %31
  %34 = getelementptr inbounds i8, i8* %0, i64 -28
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = getelementptr inbounds i8, i8* %0, i64 127
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = add nuw nsw i32 %33, %36
  %41 = add nuw nsw i32 %40, %39
  %42 = getelementptr inbounds i8, i8* %0, i64 -27
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds i8, i8* %0, i64 159
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = add nuw nsw i32 %41, %44
  %49 = add nuw nsw i32 %48, %47
  %50 = getelementptr inbounds i8, i8* %0, i64 -26
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = getelementptr inbounds i8, i8* %0, i64 191
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = add nuw nsw i32 %49, %52
  %57 = add nuw nsw i32 %56, %55
  %58 = getelementptr inbounds i8, i8* %0, i64 -25
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = getelementptr inbounds i8, i8* %0, i64 223
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = add nuw nsw i32 %57, %60
  %65 = add nuw nsw i32 %64, %63
  %66 = lshr i32 %65, 4
  %67 = trunc i32 %66 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %67, i64 8, i1 false) #5
  %68 = getelementptr inbounds i8, i8* %0, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %68, i8 %67, i64 8, i1 false) #5
  %69 = getelementptr inbounds i8, i8* %0, i64 64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %69, i8 %67, i64 8, i1 false) #5
  %70 = getelementptr inbounds i8, i8* %0, i64 96
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %70, i8 %67, i64 8, i1 false) #5
  %71 = getelementptr inbounds i8, i8* %0, i64 128
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %71, i8 %67, i64 8, i1 false) #5
  %72 = getelementptr inbounds i8, i8* %0, i64 160
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %72, i8 %67, i64 8, i1 false) #5
  %73 = getelementptr inbounds i8, i8* %0, i64 192
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %73, i8 %67, i64 8, i1 false) #5
  %74 = getelementptr inbounds i8, i8* %0, i64 224
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %74, i8 %67, i64 8, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @TM8uv_C(i8* nocapture) #2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -32
  %3 = load i8*, i8** @VP8kclip1, align 8
  %4 = getelementptr inbounds i8, i8* %0, i64 -33
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i64
  %7 = sub nsw i64 0, %6
  %8 = getelementptr inbounds i8, i8* %3, i64 %7
  %9 = getelementptr inbounds i8, i8* %0, i64 -31
  %10 = getelementptr inbounds i8, i8* %0, i64 -30
  %11 = getelementptr inbounds i8, i8* %0, i64 -29
  %12 = getelementptr inbounds i8, i8* %0, i64 -28
  %13 = getelementptr inbounds i8, i8* %0, i64 -27
  %14 = getelementptr inbounds i8, i8* %0, i64 -26
  %15 = getelementptr inbounds i8, i8* %0, i64 -25
  br label %16

16:                                               ; preds = %16, %1
  %17 = phi i32 [ 0, %1 ], [ %63, %16 ]
  %18 = phi i8* [ %0, %1 ], [ %62, %16 ]
  %19 = getelementptr inbounds i8, i8* %18, i64 -1
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i64
  %22 = getelementptr inbounds i8, i8* %8, i64 %21
  %23 = load i8, i8* %2, align 1
  %24 = zext i8 %23 to i64
  %25 = getelementptr inbounds i8, i8* %22, i64 %24
  %26 = load i8, i8* %25, align 1
  store i8 %26, i8* %18, align 1
  %27 = load i8, i8* %9, align 1
  %28 = zext i8 %27 to i64
  %29 = getelementptr inbounds i8, i8* %22, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = getelementptr inbounds i8, i8* %18, i64 1
  store i8 %30, i8* %31, align 1
  %32 = load i8, i8* %10, align 1
  %33 = zext i8 %32 to i64
  %34 = getelementptr inbounds i8, i8* %22, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = getelementptr inbounds i8, i8* %18, i64 2
  store i8 %35, i8* %36, align 1
  %37 = load i8, i8* %11, align 1
  %38 = zext i8 %37 to i64
  %39 = getelementptr inbounds i8, i8* %22, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = getelementptr inbounds i8, i8* %18, i64 3
  store i8 %40, i8* %41, align 1
  %42 = load i8, i8* %12, align 1
  %43 = zext i8 %42 to i64
  %44 = getelementptr inbounds i8, i8* %22, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr inbounds i8, i8* %18, i64 4
  store i8 %45, i8* %46, align 1
  %47 = load i8, i8* %13, align 1
  %48 = zext i8 %47 to i64
  %49 = getelementptr inbounds i8, i8* %22, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = getelementptr inbounds i8, i8* %18, i64 5
  store i8 %50, i8* %51, align 1
  %52 = load i8, i8* %14, align 1
  %53 = zext i8 %52 to i64
  %54 = getelementptr inbounds i8, i8* %22, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = getelementptr inbounds i8, i8* %18, i64 6
  store i8 %55, i8* %56, align 1
  %57 = load i8, i8* %15, align 1
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds i8, i8* %22, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = getelementptr inbounds i8, i8* %18, i64 7
  store i8 %60, i8* %61, align 1
  %62 = getelementptr inbounds i8, i8* %18, i64 32
  %63 = add nuw nsw i32 %17, 1
  %64 = icmp eq i32 %63, 8
  br i1 %64, label %65, label %16

65:                                               ; preds = %16
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @VE8uv_C(i8* nocapture) #2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -32
  %3 = bitcast i8* %2 to i64*
  %4 = bitcast i8* %0 to i64*
  %5 = load i64, i64* %3, align 1
  store i64 %5, i64* %4, align 1
  %6 = getelementptr inbounds i8, i8* %0, i64 32
  %7 = bitcast i8* %6 to i64*
  store i64 %5, i64* %7, align 1
  %8 = getelementptr inbounds i8, i8* %0, i64 64
  %9 = bitcast i8* %8 to i64*
  store i64 %5, i64* %9, align 1
  %10 = getelementptr inbounds i8, i8* %0, i64 96
  %11 = bitcast i8* %10 to i64*
  store i64 %5, i64* %11, align 1
  %12 = getelementptr inbounds i8, i8* %0, i64 128
  %13 = bitcast i8* %12 to i64*
  store i64 %5, i64* %13, align 1
  %14 = getelementptr inbounds i8, i8* %0, i64 160
  %15 = bitcast i8* %14 to i64*
  store i64 %5, i64* %15, align 1
  %16 = getelementptr inbounds i8, i8* %0, i64 192
  %17 = bitcast i8* %16 to i64*
  store i64 %5, i64* %17, align 1
  %18 = getelementptr inbounds i8, i8* %0, i64 224
  %19 = bitcast i8* %18 to i64*
  store i64 %5, i64* %19, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @HE8uv_C(i8* nocapture) #0 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -1
  %3 = load i8, i8* %2, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %3, i64 8, i1 false)
  %4 = getelementptr inbounds i8, i8* %0, i64 32
  %5 = getelementptr inbounds i8, i8* %0, i64 31
  %6 = load i8, i8* %5, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 %6, i64 8, i1 false)
  %7 = getelementptr inbounds i8, i8* %0, i64 64
  %8 = getelementptr inbounds i8, i8* %0, i64 63
  %9 = load i8, i8* %8, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 %9, i64 8, i1 false)
  %10 = getelementptr inbounds i8, i8* %0, i64 96
  %11 = getelementptr inbounds i8, i8* %0, i64 95
  %12 = load i8, i8* %11, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 %12, i64 8, i1 false)
  %13 = getelementptr inbounds i8, i8* %0, i64 128
  %14 = getelementptr inbounds i8, i8* %0, i64 127
  %15 = load i8, i8* %14, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 %15, i64 8, i1 false)
  %16 = getelementptr inbounds i8, i8* %0, i64 160
  %17 = getelementptr inbounds i8, i8* %0, i64 159
  %18 = load i8, i8* %17, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 %18, i64 8, i1 false)
  %19 = getelementptr inbounds i8, i8* %0, i64 192
  %20 = getelementptr inbounds i8, i8* %0, i64 191
  %21 = load i8, i8* %20, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 %21, i64 8, i1 false)
  %22 = getelementptr inbounds i8, i8* %0, i64 224
  %23 = getelementptr inbounds i8, i8* %0, i64 223
  %24 = load i8, i8* %23, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %24, i64 8, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @DC8uvNoTop_C(i8* nocapture) #0 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -1
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = add nuw nsw i32 %4, 4
  %6 = getelementptr inbounds i8, i8* %0, i64 31
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = add nuw nsw i32 %5, %8
  %10 = getelementptr inbounds i8, i8* %0, i64 63
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = add nuw nsw i32 %9, %12
  %14 = getelementptr inbounds i8, i8* %0, i64 95
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = add nuw nsw i32 %13, %16
  %18 = getelementptr inbounds i8, i8* %0, i64 127
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = add nuw nsw i32 %17, %20
  %22 = getelementptr inbounds i8, i8* %0, i64 159
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = add nuw nsw i32 %21, %24
  %26 = getelementptr inbounds i8, i8* %0, i64 191
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = add nuw nsw i32 %25, %28
  %30 = getelementptr inbounds i8, i8* %0, i64 223
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = add nuw nsw i32 %29, %32
  %34 = lshr i32 %33, 3
  %35 = trunc i32 %34 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %35, i64 8, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %0, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %35, i64 8, i1 false) #5
  %37 = getelementptr inbounds i8, i8* %0, i64 64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 %35, i64 8, i1 false) #5
  %38 = getelementptr inbounds i8, i8* %0, i64 96
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 %35, i64 8, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %0, i64 128
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %35, i64 8, i1 false) #5
  %40 = getelementptr inbounds i8, i8* %0, i64 160
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 %35, i64 8, i1 false) #5
  %41 = getelementptr inbounds i8, i8* %0, i64 192
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 %35, i64 8, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %0, i64 224
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %35, i64 8, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @DC8uvNoLeft_C(i8* nocapture) #0 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -32
  %3 = bitcast i8* %2 to <8 x i8>*
  %4 = load <8 x i8>, <8 x i8>* %3, align 1
  %5 = zext <8 x i8> %4 to <8 x i32>
  %6 = shufflevector <8 x i32> %5, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %7 = add nuw nsw <8 x i32> %6, %5
  %8 = shufflevector <8 x i32> %7, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <8 x i32> %7, %8
  %10 = shufflevector <8 x i32> %9, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <8 x i32> %9, %10
  %12 = extractelement <8 x i32> %11, i32 0
  %13 = add nuw nsw i32 %12, 4
  %14 = lshr i32 %13, 3
  %15 = trunc i32 %14 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %15, i64 8, i1 false) #5
  %16 = getelementptr inbounds i8, i8* %0, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 %15, i64 8, i1 false) #5
  %17 = getelementptr inbounds i8, i8* %0, i64 64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %17, i8 %15, i64 8, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %0, i64 96
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %15, i64 8, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %0, i64 128
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 %15, i64 8, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %0, i64 160
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 %15, i64 8, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %0, i64 192
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %15, i64 8, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %0, i64 224
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %15, i64 8, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @DC8uvNoTopLeft_C(i8* nocapture) #0 {
  %2 = bitcast i8* %0 to i64*
  store i64 -9187201950435737472, i64* %2, align 1
  %3 = getelementptr inbounds i8, i8* %0, i64 32
  %4 = bitcast i8* %3 to i64*
  store i64 -9187201950435737472, i64* %4, align 1
  %5 = getelementptr inbounds i8, i8* %0, i64 64
  %6 = bitcast i8* %5 to i64*
  store i64 -9187201950435737472, i64* %6, align 1
  %7 = getelementptr inbounds i8, i8* %0, i64 96
  %8 = bitcast i8* %7 to i64*
  store i64 -9187201950435737472, i64* %8, align 1
  %9 = getelementptr inbounds i8, i8* %0, i64 128
  %10 = bitcast i8* %9 to i64*
  store i64 -9187201950435737472, i64* %10, align 1
  %11 = getelementptr inbounds i8, i8* %0, i64 160
  %12 = bitcast i8* %11 to i64*
  store i64 -9187201950435737472, i64* %12, align 1
  %13 = getelementptr inbounds i8, i8* %0, i64 192
  %14 = bitcast i8* %13 to i64*
  store i64 -9187201950435737472, i64* %14, align 1
  %15 = getelementptr inbounds i8, i8* %0, i64 224
  %16 = bitcast i8* %15 to i64*
  store i64 -9187201950435737472, i64* %16, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @DitherCombine8x8_C(i8* nocapture readonly, i8* nocapture, i32) #2 {
  %4 = sext i32 %2 to i64
  %5 = icmp eq i32 %2, 1
  br i1 %5, label %124, label %6

6:                                                ; preds = %3, %6
  %7 = phi i8* [ %121, %6 ], [ %0, %3 ]
  %8 = phi i8* [ %120, %6 ], [ %1, %3 ]
  %9 = phi i32 [ %122, %6 ], [ 0, %3 ]
  %10 = load i8, i8* %7, align 1
  %11 = zext i8 %10 to i32
  %12 = add nsw i32 %11, -120
  %13 = ashr i32 %12, 4
  %14 = load i8, i8* %8, align 1
  %15 = zext i8 %14 to i32
  %16 = add nsw i32 %13, %15
  %17 = icmp ugt i32 %16, 255
  %18 = icmp slt i32 %16, 0
  %19 = select i1 %18, i32 0, i32 255
  %20 = select i1 %17, i32 %19, i32 %16
  %21 = trunc i32 %20 to i8
  store i8 %21, i8* %8, align 1
  %22 = getelementptr inbounds i8, i8* %7, i64 1
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = add nsw i32 %24, -120
  %26 = ashr i32 %25, 4
  %27 = getelementptr inbounds i8, i8* %8, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = add nsw i32 %26, %29
  %31 = icmp ugt i32 %30, 255
  %32 = icmp slt i32 %30, 0
  %33 = select i1 %32, i32 0, i32 255
  %34 = select i1 %31, i32 %33, i32 %30
  %35 = trunc i32 %34 to i8
  store i8 %35, i8* %27, align 1
  %36 = getelementptr inbounds i8, i8* %7, i64 2
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = add nsw i32 %38, -120
  %40 = ashr i32 %39, 4
  %41 = getelementptr inbounds i8, i8* %8, i64 2
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = add nsw i32 %40, %43
  %45 = icmp ugt i32 %44, 255
  %46 = icmp slt i32 %44, 0
  %47 = select i1 %46, i32 0, i32 255
  %48 = select i1 %45, i32 %47, i32 %44
  %49 = trunc i32 %48 to i8
  store i8 %49, i8* %41, align 1
  %50 = getelementptr inbounds i8, i8* %7, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = add nsw i32 %52, -120
  %54 = ashr i32 %53, 4
  %55 = getelementptr inbounds i8, i8* %8, i64 3
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = add nsw i32 %54, %57
  %59 = icmp ugt i32 %58, 255
  %60 = icmp slt i32 %58, 0
  %61 = select i1 %60, i32 0, i32 255
  %62 = select i1 %59, i32 %61, i32 %58
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %55, align 1
  %64 = getelementptr inbounds i8, i8* %7, i64 4
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = add nsw i32 %66, -120
  %68 = ashr i32 %67, 4
  %69 = getelementptr inbounds i8, i8* %8, i64 4
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = add nsw i32 %68, %71
  %73 = icmp ugt i32 %72, 255
  %74 = icmp slt i32 %72, 0
  %75 = select i1 %74, i32 0, i32 255
  %76 = select i1 %73, i32 %75, i32 %72
  %77 = trunc i32 %76 to i8
  store i8 %77, i8* %69, align 1
  %78 = getelementptr inbounds i8, i8* %7, i64 5
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = add nsw i32 %80, -120
  %82 = ashr i32 %81, 4
  %83 = getelementptr inbounds i8, i8* %8, i64 5
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = add nsw i32 %82, %85
  %87 = icmp ugt i32 %86, 255
  %88 = icmp slt i32 %86, 0
  %89 = select i1 %88, i32 0, i32 255
  %90 = select i1 %87, i32 %89, i32 %86
  %91 = trunc i32 %90 to i8
  store i8 %91, i8* %83, align 1
  %92 = getelementptr inbounds i8, i8* %7, i64 6
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = add nsw i32 %94, -120
  %96 = ashr i32 %95, 4
  %97 = getelementptr inbounds i8, i8* %8, i64 6
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = add nsw i32 %96, %99
  %101 = icmp ugt i32 %100, 255
  %102 = icmp slt i32 %100, 0
  %103 = select i1 %102, i32 0, i32 255
  %104 = select i1 %101, i32 %103, i32 %100
  %105 = trunc i32 %104 to i8
  store i8 %105, i8* %97, align 1
  %106 = getelementptr inbounds i8, i8* %7, i64 7
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = add nsw i32 %108, -120
  %110 = ashr i32 %109, 4
  %111 = getelementptr inbounds i8, i8* %8, i64 7
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = add nsw i32 %110, %113
  %115 = icmp ugt i32 %114, 255
  %116 = icmp slt i32 %114, 0
  %117 = select i1 %116, i32 0, i32 255
  %118 = select i1 %115, i32 %117, i32 %114
  %119 = trunc i32 %118 to i8
  store i8 %119, i8* %111, align 1
  %120 = getelementptr inbounds i8, i8* %8, i64 %4
  %121 = getelementptr inbounds i8, i8* %7, i64 8
  %122 = add nuw nsw i32 %9, 1
  %123 = icmp eq i32 %122, 8
  br i1 %123, label %245, label %6

124:                                              ; preds = %3
  %125 = getelementptr i8, i8* %1, i64 6
  %126 = load i8, i8* %125, align 1
  br label %127

127:                                              ; preds = %127, %124
  %128 = phi i8 [ %126, %124 ], [ %240, %127 ]
  %129 = phi i8* [ %0, %124 ], [ %242, %127 ]
  %130 = phi i8* [ %1, %124 ], [ %241, %127 ]
  %131 = phi i32 [ 0, %124 ], [ %243, %127 ]
  %132 = load i8, i8* %129, align 1
  %133 = zext i8 %132 to i32
  %134 = add nsw i32 %133, -120
  %135 = ashr i32 %134, 4
  %136 = load i8, i8* %130, align 1
  %137 = zext i8 %136 to i32
  %138 = add nsw i32 %135, %137
  %139 = icmp ugt i32 %138, 255
  %140 = icmp slt i32 %138, 0
  %141 = select i1 %140, i32 0, i32 255
  %142 = select i1 %139, i32 %141, i32 %138
  %143 = trunc i32 %142 to i8
  store i8 %143, i8* %130, align 1
  %144 = getelementptr inbounds i8, i8* %129, i64 1
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = add nsw i32 %146, -120
  %148 = ashr i32 %147, 4
  %149 = getelementptr inbounds i8, i8* %130, i64 1
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = add nsw i32 %148, %151
  %153 = icmp ugt i32 %152, 255
  %154 = icmp slt i32 %152, 0
  %155 = select i1 %154, i32 0, i32 255
  %156 = select i1 %153, i32 %155, i32 %152
  %157 = trunc i32 %156 to i8
  store i8 %157, i8* %149, align 1
  %158 = getelementptr inbounds i8, i8* %129, i64 2
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = add nsw i32 %160, -120
  %162 = ashr i32 %161, 4
  %163 = getelementptr inbounds i8, i8* %130, i64 2
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = add nsw i32 %162, %165
  %167 = icmp ugt i32 %166, 255
  %168 = icmp slt i32 %166, 0
  %169 = select i1 %168, i32 0, i32 255
  %170 = select i1 %167, i32 %169, i32 %166
  %171 = trunc i32 %170 to i8
  store i8 %171, i8* %163, align 1
  %172 = getelementptr inbounds i8, i8* %129, i64 3
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i32
  %175 = add nsw i32 %174, -120
  %176 = ashr i32 %175, 4
  %177 = getelementptr inbounds i8, i8* %130, i64 3
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i32
  %180 = add nsw i32 %176, %179
  %181 = icmp ugt i32 %180, 255
  %182 = icmp slt i32 %180, 0
  %183 = select i1 %182, i32 0, i32 255
  %184 = select i1 %181, i32 %183, i32 %180
  %185 = trunc i32 %184 to i8
  store i8 %185, i8* %177, align 1
  %186 = getelementptr inbounds i8, i8* %129, i64 4
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i32
  %189 = add nsw i32 %188, -120
  %190 = ashr i32 %189, 4
  %191 = getelementptr inbounds i8, i8* %130, i64 4
  %192 = load i8, i8* %191, align 1
  %193 = zext i8 %192 to i32
  %194 = add nsw i32 %190, %193
  %195 = icmp ugt i32 %194, 255
  %196 = icmp slt i32 %194, 0
  %197 = select i1 %196, i32 0, i32 255
  %198 = select i1 %195, i32 %197, i32 %194
  %199 = trunc i32 %198 to i8
  store i8 %199, i8* %191, align 1
  %200 = getelementptr inbounds i8, i8* %129, i64 5
  %201 = load i8, i8* %200, align 1
  %202 = zext i8 %201 to i32
  %203 = add nsw i32 %202, -120
  %204 = ashr i32 %203, 4
  %205 = getelementptr inbounds i8, i8* %130, i64 5
  %206 = load i8, i8* %205, align 1
  %207 = zext i8 %206 to i32
  %208 = add nsw i32 %204, %207
  %209 = icmp ugt i32 %208, 255
  %210 = icmp slt i32 %208, 0
  %211 = select i1 %210, i32 0, i32 255
  %212 = select i1 %209, i32 %211, i32 %208
  %213 = trunc i32 %212 to i8
  store i8 %213, i8* %205, align 1
  %214 = getelementptr inbounds i8, i8* %129, i64 6
  %215 = load i8, i8* %214, align 1
  %216 = zext i8 %215 to i32
  %217 = add nsw i32 %216, -120
  %218 = ashr i32 %217, 4
  %219 = getelementptr inbounds i8, i8* %130, i64 6
  %220 = zext i8 %128 to i32
  %221 = add nsw i32 %218, %220
  %222 = icmp ugt i32 %221, 255
  %223 = icmp slt i32 %221, 0
  %224 = select i1 %223, i32 0, i32 255
  %225 = select i1 %222, i32 %224, i32 %221
  %226 = trunc i32 %225 to i8
  store i8 %226, i8* %219, align 1
  %227 = getelementptr inbounds i8, i8* %129, i64 7
  %228 = load i8, i8* %227, align 1
  %229 = zext i8 %228 to i32
  %230 = add nsw i32 %229, -120
  %231 = ashr i32 %230, 4
  %232 = getelementptr inbounds i8, i8* %130, i64 7
  %233 = load i8, i8* %232, align 1
  %234 = zext i8 %233 to i32
  %235 = add nsw i32 %231, %234
  %236 = icmp ugt i32 %235, 255
  %237 = icmp slt i32 %235, 0
  %238 = select i1 %237, i32 0, i32 255
  %239 = select i1 %236, i32 %238, i32 %235
  %240 = trunc i32 %239 to i8
  store i8 %240, i8* %232, align 1
  %241 = getelementptr inbounds i8, i8* %130, i64 %4
  %242 = getelementptr inbounds i8, i8* %129, i64 8
  %243 = add nuw nsw i32 %131, 1
  %244 = icmp eq i32 %243, 8
  br i1 %244, label %245, label %127

245:                                              ; preds = %6, %127
  ret void
}

declare void @VP8DspInitSSE2() local_unnamed_addr #1

declare void @VP8DspInitSSE41() local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @TransformOne_C(i16* nocapture readonly, i8* nocapture) unnamed_addr #0 {
  %3 = alloca [16 x i32], align 16
  %4 = bitcast [16 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #5
  %5 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 8
  %6 = bitcast i32* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 32, i1 false)
  %7 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 0
  %8 = load i16, i16* %0, align 2
  %9 = sext i16 %8 to i32
  %10 = getelementptr inbounds i16, i16* %0, i64 8
  %11 = load i16, i16* %10, align 2
  %12 = sext i16 %11 to i32
  %13 = add nsw i32 %12, %9
  %14 = sub nsw i32 %9, %12
  %15 = getelementptr inbounds i16, i16* %0, i64 4
  %16 = load i16, i16* %15, align 2
  %17 = sext i16 %16 to i32
  %18 = mul nsw i32 %17, 35468
  %19 = ashr i32 %18, 16
  %20 = getelementptr inbounds i16, i16* %0, i64 12
  %21 = load i16, i16* %20, align 2
  %22 = sext i16 %21 to i32
  %23 = mul nsw i32 %22, 20091
  %24 = ashr i32 %23, 16
  %25 = sub nsw i32 %19, %22
  %26 = sub nsw i32 %25, %24
  %27 = mul nsw i32 %17, 20091
  %28 = ashr i32 %27, 16
  %29 = add nsw i32 %28, %17
  %30 = mul nsw i32 %22, 35468
  %31 = ashr i32 %30, 16
  %32 = add nsw i32 %29, %31
  %33 = add nsw i32 %32, %13
  store i32 %33, i32* %7, align 16
  %34 = add nsw i32 %26, %14
  %35 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 1
  store i32 %34, i32* %35, align 4
  %36 = sub nsw i32 %14, %26
  %37 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 2
  store i32 %36, i32* %37, align 8
  %38 = sub nsw i32 %13, %32
  %39 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 3
  store i32 %38, i32* %39, align 4
  %40 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 4
  %41 = getelementptr inbounds i16, i16* %0, i64 1
  %42 = load i16, i16* %41, align 2
  %43 = sext i16 %42 to i32
  %44 = getelementptr inbounds i16, i16* %0, i64 9
  %45 = load i16, i16* %44, align 2
  %46 = sext i16 %45 to i32
  %47 = add nsw i32 %46, %43
  %48 = sub nsw i32 %43, %46
  %49 = getelementptr inbounds i16, i16* %0, i64 5
  %50 = load i16, i16* %49, align 2
  %51 = sext i16 %50 to i32
  %52 = mul nsw i32 %51, 35468
  %53 = ashr i32 %52, 16
  %54 = getelementptr inbounds i16, i16* %0, i64 13
  %55 = load i16, i16* %54, align 2
  %56 = sext i16 %55 to i32
  %57 = mul nsw i32 %56, 20091
  %58 = ashr i32 %57, 16
  %59 = sub nsw i32 %53, %56
  %60 = sub nsw i32 %59, %58
  %61 = mul nsw i32 %51, 20091
  %62 = ashr i32 %61, 16
  %63 = add nsw i32 %62, %51
  %64 = mul nsw i32 %56, 35468
  %65 = ashr i32 %64, 16
  %66 = add nsw i32 %63, %65
  %67 = add nsw i32 %66, %47
  store i32 %67, i32* %40, align 16
  %68 = add nsw i32 %60, %48
  %69 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 5
  store i32 %68, i32* %69, align 4
  %70 = sub nsw i32 %48, %60
  %71 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 6
  store i32 %70, i32* %71, align 8
  %72 = sub nsw i32 %47, %66
  %73 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 7
  store i32 %72, i32* %73, align 4
  %74 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 8
  %75 = getelementptr inbounds i16, i16* %0, i64 2
  %76 = load i16, i16* %75, align 2
  %77 = sext i16 %76 to i32
  %78 = getelementptr inbounds i16, i16* %0, i64 10
  %79 = load i16, i16* %78, align 2
  %80 = sext i16 %79 to i32
  %81 = add nsw i32 %80, %77
  %82 = sub nsw i32 %77, %80
  %83 = getelementptr inbounds i16, i16* %0, i64 6
  %84 = load i16, i16* %83, align 2
  %85 = sext i16 %84 to i32
  %86 = mul nsw i32 %85, 35468
  %87 = ashr i32 %86, 16
  %88 = getelementptr inbounds i16, i16* %0, i64 14
  %89 = load i16, i16* %88, align 2
  %90 = sext i16 %89 to i32
  %91 = mul nsw i32 %90, 20091
  %92 = ashr i32 %91, 16
  %93 = sub nsw i32 %87, %90
  %94 = sub nsw i32 %93, %92
  %95 = mul nsw i32 %85, 20091
  %96 = ashr i32 %95, 16
  %97 = add nsw i32 %96, %85
  %98 = mul nsw i32 %90, 35468
  %99 = ashr i32 %98, 16
  %100 = add nsw i32 %97, %99
  %101 = add nsw i32 %100, %81
  store i32 %101, i32* %74, align 16
  %102 = add nsw i32 %94, %82
  %103 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 9
  store i32 %102, i32* %103, align 4
  %104 = sub nsw i32 %82, %94
  %105 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 10
  store i32 %104, i32* %105, align 8
  %106 = sub nsw i32 %81, %100
  %107 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 11
  store i32 %106, i32* %107, align 4
  %108 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 12
  %109 = getelementptr inbounds i16, i16* %0, i64 3
  %110 = load i16, i16* %109, align 2
  %111 = sext i16 %110 to i32
  %112 = getelementptr inbounds i16, i16* %0, i64 11
  %113 = load i16, i16* %112, align 2
  %114 = sext i16 %113 to i32
  %115 = add nsw i32 %114, %111
  %116 = sub nsw i32 %111, %114
  %117 = getelementptr inbounds i16, i16* %0, i64 7
  %118 = load i16, i16* %117, align 2
  %119 = sext i16 %118 to i32
  %120 = mul nsw i32 %119, 35468
  %121 = ashr i32 %120, 16
  %122 = getelementptr inbounds i16, i16* %0, i64 15
  %123 = load i16, i16* %122, align 2
  %124 = sext i16 %123 to i32
  %125 = mul nsw i32 %124, 20091
  %126 = ashr i32 %125, 16
  %127 = sub nsw i32 %121, %124
  %128 = sub nsw i32 %127, %126
  %129 = mul nsw i32 %119, 20091
  %130 = ashr i32 %129, 16
  %131 = add nsw i32 %130, %119
  %132 = mul nsw i32 %124, 35468
  %133 = ashr i32 %132, 16
  %134 = add nsw i32 %131, %133
  %135 = add nsw i32 %134, %115
  store i32 %135, i32* %108, align 16
  %136 = add nsw i32 %128, %116
  %137 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 13
  store i32 %136, i32* %137, align 4
  %138 = sub nsw i32 %116, %128
  %139 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 14
  store i32 %138, i32* %139, align 8
  %140 = sub nsw i32 %115, %134
  %141 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 15
  store i32 %140, i32* %141, align 4
  br label %142

142:                                              ; preds = %212, %2
  %143 = phi i32 [ %216, %212 ], [ %67, %2 ]
  %144 = phi i8* [ %214, %212 ], [ %1, %2 ]
  %145 = phi i32* [ %213, %212 ], [ %7, %2 ]
  %146 = phi i32 [ %210, %212 ], [ 0, %2 ]
  %147 = load i32, i32* %145, align 4
  %148 = add nsw i32 %147, 4
  %149 = getelementptr inbounds i32, i32* %145, i64 8
  %150 = load i32, i32* %149, align 4
  %151 = add nsw i32 %148, %150
  %152 = sub nsw i32 %148, %150
  %153 = mul nsw i32 %143, 35468
  %154 = ashr i32 %153, 16
  %155 = getelementptr inbounds i32, i32* %145, i64 12
  %156 = load i32, i32* %155, align 4
  %157 = mul nsw i32 %156, 20091
  %158 = ashr i32 %157, 16
  %159 = sub i32 %154, %156
  %160 = sub i32 %159, %158
  %161 = mul nsw i32 %143, 20091
  %162 = ashr i32 %161, 16
  %163 = add nsw i32 %162, %143
  %164 = mul nsw i32 %156, 35468
  %165 = ashr i32 %164, 16
  %166 = add nsw i32 %163, %165
  %167 = load i8, i8* %144, align 1
  %168 = zext i8 %167 to i32
  %169 = add nsw i32 %166, %151
  %170 = ashr i32 %169, 3
  %171 = add nsw i32 %170, %168
  %172 = icmp ugt i32 %171, 255
  %173 = icmp slt i32 %171, 0
  %174 = select i1 %173, i32 0, i32 255
  %175 = select i1 %172, i32 %174, i32 %171
  %176 = trunc i32 %175 to i8
  store i8 %176, i8* %144, align 1
  %177 = getelementptr inbounds i8, i8* %144, i64 1
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i32
  %180 = add nsw i32 %160, %152
  %181 = ashr i32 %180, 3
  %182 = add nsw i32 %181, %179
  %183 = icmp ugt i32 %182, 255
  %184 = icmp slt i32 %182, 0
  %185 = select i1 %184, i32 0, i32 255
  %186 = select i1 %183, i32 %185, i32 %182
  %187 = trunc i32 %186 to i8
  store i8 %187, i8* %177, align 1
  %188 = getelementptr inbounds i8, i8* %144, i64 2
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i32
  %191 = sub nsw i32 %152, %160
  %192 = ashr i32 %191, 3
  %193 = add nsw i32 %192, %190
  %194 = icmp ugt i32 %193, 255
  %195 = icmp slt i32 %193, 0
  %196 = select i1 %195, i32 0, i32 255
  %197 = select i1 %194, i32 %196, i32 %193
  %198 = trunc i32 %197 to i8
  store i8 %198, i8* %188, align 1
  %199 = getelementptr inbounds i8, i8* %144, i64 3
  %200 = load i8, i8* %199, align 1
  %201 = zext i8 %200 to i32
  %202 = sub nsw i32 %151, %166
  %203 = ashr i32 %202, 3
  %204 = add nsw i32 %203, %201
  %205 = icmp ugt i32 %204, 255
  %206 = icmp slt i32 %204, 0
  %207 = select i1 %206, i32 0, i32 255
  %208 = select i1 %205, i32 %207, i32 %204
  %209 = trunc i32 %208 to i8
  store i8 %209, i8* %199, align 1
  %210 = add nuw nsw i32 %146, 1
  %211 = icmp eq i32 %210, 4
  br i1 %211, label %217, label %212

212:                                              ; preds = %142
  %213 = getelementptr inbounds i32, i32* %145, i64 1
  %214 = getelementptr inbounds i8, i8* %144, i64 32
  %215 = getelementptr inbounds i32, i32* %145, i64 5
  %216 = load i32, i32* %215, align 4
  br label %142

217:                                              ; preds = %142
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #5
  ret void
}

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal fastcc void @FilterLoop26_C(i8*, i32, i32, i32, i32, i32, i32) unnamed_addr #4 {
  %8 = shl nsw i32 %4, 1
  %9 = or i32 %8, 1
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %203

11:                                               ; preds = %7
  %12 = mul nsw i32 %1, -3
  %13 = sext i32 %12 to i64
  %14 = mul nsw i32 %1, -2
  %15 = sext i32 %14 to i64
  %16 = sub nsw i32 0, %1
  %17 = sext i32 %16 to i64
  %18 = sext i32 %1 to i64
  %19 = shl nsw i32 %1, 1
  %20 = sext i32 %19 to i64
  %21 = mul nsw i32 %1, 3
  %22 = sext i32 %21 to i64
  %23 = load i8*, i8** @VP8kabs0, align 8
  %24 = mul nsw i32 %1, -4
  %25 = sext i32 %24 to i64
  %26 = load i8*, i8** @VP8ksclip1, align 8
  %27 = load i8*, i8** @VP8kclip1, align 8
  %28 = load i8*, i8** @VP8ksclip2, align 8
  %29 = sext i32 %2 to i64
  br label %30

30:                                               ; preds = %11, %200
  %31 = phi i32 [ %3, %11 ], [ %33, %200 ]
  %32 = phi i8* [ %0, %11 ], [ %201, %200 ]
  %33 = add nsw i32 %31, -1
  %34 = getelementptr inbounds i8, i8* %32, i64 %13
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = getelementptr inbounds i8, i8* %32, i64 %15
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = getelementptr inbounds i8, i8* %32, i64 %17
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = load i8, i8* %32, align 1
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds i8, i8* %32, i64 %18
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = getelementptr inbounds i8, i8* %32, i64 %20
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = getelementptr inbounds i8, i8* %32, i64 %22
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = sub nsw i32 %42, %44
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %23, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = shl nuw nsw i32 %58, 2
  %60 = sub nsw i32 %39, %47
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %23, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = add nuw nsw i32 %59, %64
  %66 = icmp sgt i32 %65, %9
  br i1 %66, label %200, label %67

67:                                               ; preds = %30
  %68 = getelementptr inbounds i8, i8* %32, i64 %25
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = sub nsw i32 %70, %36
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %23, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = icmp sgt i32 %75, %5
  br i1 %76, label %200, label %77

77:                                               ; preds = %67
  %78 = sub nsw i32 %36, %39
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %23, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = icmp sgt i32 %82, %5
  br i1 %83, label %200, label %84

84:                                               ; preds = %77
  %85 = sub nsw i32 %39, %42
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %23, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = icmp sgt i32 %89, %5
  br i1 %90, label %200, label %91

91:                                               ; preds = %84
  %92 = sub nsw i32 %53, %50
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i8, i8* %23, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = icmp sgt i32 %96, %5
  br i1 %97, label %200, label %98

98:                                               ; preds = %91
  %99 = sub nsw i32 %50, %47
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i8, i8* %23, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = icmp sgt i32 %103, %5
  br i1 %104, label %200, label %105

105:                                              ; preds = %98
  %106 = sub nsw i32 %47, %44
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i8, i8* %23, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = icmp sgt i32 %110, %5
  br i1 %111, label %200, label %112

112:                                              ; preds = %105
  %113 = zext i8 %38 to i64
  %114 = zext i8 %41 to i64
  %115 = sub nsw i64 %113, %114
  %116 = getelementptr inbounds i8, i8* %23, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = icmp sgt i32 %118, %6
  %120 = zext i8 %46 to i64
  br i1 %119, label %128, label %121

121:                                              ; preds = %112
  %122 = zext i8 %43 to i64
  %123 = sub nsw i64 %120, %122
  %124 = getelementptr inbounds i8, i8* %23, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = icmp sgt i32 %126, %6
  br i1 %127, label %128, label %156

128:                                              ; preds = %112, %121
  %129 = sub nsw i32 %44, %42
  %130 = mul nsw i32 %129, 3
  %131 = sub nsw i64 %113, %120
  %132 = getelementptr inbounds i8, i8* %26, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = sext i8 %133 to i32
  %135 = add nsw i32 %130, %134
  %136 = add nsw i32 %135, 4
  %137 = ashr i32 %136, 3
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds i8, i8* %28, i64 %138
  %140 = load i8, i8* %139, align 1
  %141 = sext i8 %140 to i32
  %142 = add nsw i32 %135, 3
  %143 = ashr i32 %142, 3
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i8, i8* %28, i64 %144
  %146 = load i8, i8* %145, align 1
  %147 = sext i8 %146 to i32
  %148 = add nsw i32 %147, %42
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds i8, i8* %27, i64 %149
  %151 = load i8, i8* %150, align 1
  store i8 %151, i8* %40, align 1
  %152 = sub nsw i32 %44, %141
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds i8, i8* %27, i64 %153
  %155 = load i8, i8* %154, align 1
  store i8 %155, i8* %32, align 1
  br label %200

156:                                              ; preds = %121
  %157 = sub nsw i32 %44, %42
  %158 = mul nsw i32 %157, 3
  %159 = getelementptr inbounds i8, i8* %26, i64 %61
  %160 = load i8, i8* %159, align 1
  %161 = sext i8 %160 to i32
  %162 = add nsw i32 %158, %161
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds i8, i8* %26, i64 %163
  %165 = load i8, i8* %164, align 1
  %166 = sext i8 %165 to i32
  %167 = mul nsw i32 %166, 27
  %168 = add nsw i32 %167, 63
  %169 = ashr i32 %168, 7
  %170 = mul nsw i32 %166, 18
  %171 = add nsw i32 %170, 63
  %172 = ashr i32 %171, 7
  %173 = mul nsw i32 %166, 9
  %174 = add nsw i32 %173, 63
  %175 = ashr i32 %174, 7
  %176 = add nsw i32 %175, %36
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds i8, i8* %27, i64 %177
  %179 = load i8, i8* %178, align 1
  store i8 %179, i8* %34, align 1
  %180 = add nsw i32 %172, %39
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds i8, i8* %27, i64 %181
  %183 = load i8, i8* %182, align 1
  store i8 %183, i8* %37, align 1
  %184 = add nsw i32 %169, %42
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds i8, i8* %27, i64 %185
  %187 = load i8, i8* %186, align 1
  store i8 %187, i8* %40, align 1
  %188 = sub nsw i32 %44, %169
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds i8, i8* %27, i64 %189
  %191 = load i8, i8* %190, align 1
  store i8 %191, i8* %32, align 1
  %192 = sub nsw i32 %47, %172
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds i8, i8* %27, i64 %193
  %195 = load i8, i8* %194, align 1
  store i8 %195, i8* %45, align 1
  %196 = sub nsw i32 %50, %175
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i8, i8* %27, i64 %197
  %199 = load i8, i8* %198, align 1
  store i8 %199, i8* %48, align 1
  br label %200

200:                                              ; preds = %67, %77, %84, %91, %98, %30, %105, %128, %156
  %201 = getelementptr inbounds i8, i8* %32, i64 %29
  %202 = icmp sgt i32 %33, 0
  br i1 %202, label %30, label %203

203:                                              ; preds = %200, %7
  ret void
}

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal fastcc void @DoFilter2_C(i8* nocapture, i32) unnamed_addr #4 {
  %3 = mul nsw i32 %1, -2
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 %4
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i64
  %8 = sub nsw i32 0, %1
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i8, i8* %0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = load i8, i8* %0, align 1
  %14 = zext i8 %13 to i32
  %15 = sext i32 %1 to i64
  %16 = getelementptr inbounds i8, i8* %0, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i64
  %19 = sub nsw i32 %14, %12
  %20 = mul nsw i32 %19, 3
  %21 = load i8*, i8** @VP8ksclip1, align 8
  %22 = sub nsw i64 %7, %18
  %23 = getelementptr inbounds i8, i8* %21, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = sext i8 %24 to i32
  %26 = add nsw i32 %20, %25
  %27 = load i8*, i8** @VP8ksclip2, align 8
  %28 = add nsw i32 %26, 4
  %29 = ashr i32 %28, 3
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i8, i8* %27, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = sext i8 %32 to i32
  %34 = add nsw i32 %26, 3
  %35 = ashr i32 %34, 3
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %27, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = sext i8 %38 to i32
  %40 = load i8*, i8** @VP8kclip1, align 8
  %41 = add nsw i32 %39, %12
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %40, i64 %42
  %44 = load i8, i8* %43, align 1
  store i8 %44, i8* %10, align 1
  %45 = sub nsw i32 %14, %33
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %40, i64 %46
  %48 = load i8, i8* %47, align 1
  store i8 %48, i8* %0, align 1
  ret void
}

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal fastcc void @FilterLoop24_C(i8*, i32, i32, i32, i32, i32, i32) unnamed_addr #4 {
  %8 = shl nsw i32 %4, 1
  %9 = or i32 %8, 1
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %192

11:                                               ; preds = %7
  %12 = mul nsw i32 %1, -3
  %13 = sext i32 %12 to i64
  %14 = mul nsw i32 %1, -2
  %15 = sext i32 %14 to i64
  %16 = sub nsw i32 0, %1
  %17 = sext i32 %16 to i64
  %18 = sext i32 %1 to i64
  %19 = shl nsw i32 %1, 1
  %20 = sext i32 %19 to i64
  %21 = mul nsw i32 %1, 3
  %22 = sext i32 %21 to i64
  %23 = load i8*, i8** @VP8kabs0, align 8
  %24 = mul nsw i32 %1, -4
  %25 = sext i32 %24 to i64
  %26 = load i8*, i8** @VP8ksclip2, align 8
  %27 = load i8*, i8** @VP8kclip1, align 8
  %28 = load i8*, i8** @VP8ksclip1, align 8
  %29 = sext i32 %2 to i64
  br label %30

30:                                               ; preds = %11, %189
  %31 = phi i32 [ %3, %11 ], [ %33, %189 ]
  %32 = phi i8* [ %0, %11 ], [ %190, %189 ]
  %33 = add nsw i32 %31, -1
  %34 = getelementptr inbounds i8, i8* %32, i64 %13
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = getelementptr inbounds i8, i8* %32, i64 %15
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = getelementptr inbounds i8, i8* %32, i64 %17
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = load i8, i8* %32, align 1
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds i8, i8* %32, i64 %18
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = getelementptr inbounds i8, i8* %32, i64 %20
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = getelementptr inbounds i8, i8* %32, i64 %22
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = sub nsw i32 %42, %44
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %23, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = shl nuw nsw i32 %58, 2
  %60 = sub nsw i32 %39, %47
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %23, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = add nuw nsw i32 %59, %64
  %66 = icmp sgt i32 %65, %9
  br i1 %66, label %189, label %67

67:                                               ; preds = %30
  %68 = getelementptr inbounds i8, i8* %32, i64 %25
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = sub nsw i32 %70, %36
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %23, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = icmp sgt i32 %75, %5
  br i1 %76, label %189, label %77

77:                                               ; preds = %67
  %78 = sub nsw i32 %36, %39
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %23, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = icmp sgt i32 %82, %5
  br i1 %83, label %189, label %84

84:                                               ; preds = %77
  %85 = sub nsw i32 %39, %42
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %23, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = icmp sgt i32 %89, %5
  br i1 %90, label %189, label %91

91:                                               ; preds = %84
  %92 = sub nsw i32 %53, %50
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i8, i8* %23, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = icmp sgt i32 %96, %5
  br i1 %97, label %189, label %98

98:                                               ; preds = %91
  %99 = sub nsw i32 %50, %47
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i8, i8* %23, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = icmp sgt i32 %103, %5
  br i1 %104, label %189, label %105

105:                                              ; preds = %98
  %106 = sub nsw i32 %47, %44
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i8, i8* %23, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = icmp sgt i32 %110, %5
  br i1 %111, label %189, label %112

112:                                              ; preds = %105
  %113 = zext i8 %38 to i64
  %114 = zext i8 %41 to i64
  %115 = sub nsw i64 %113, %114
  %116 = getelementptr inbounds i8, i8* %23, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = icmp sgt i32 %118, %6
  %120 = zext i8 %46 to i64
  br i1 %119, label %128, label %121

121:                                              ; preds = %112
  %122 = zext i8 %43 to i64
  %123 = sub nsw i64 %120, %122
  %124 = getelementptr inbounds i8, i8* %23, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = icmp sgt i32 %126, %6
  br i1 %127, label %128, label %156

128:                                              ; preds = %112, %121
  %129 = sub nsw i32 %44, %42
  %130 = mul nsw i32 %129, 3
  %131 = sub nsw i64 %113, %120
  %132 = getelementptr inbounds i8, i8* %28, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = sext i8 %133 to i32
  %135 = add nsw i32 %130, %134
  %136 = add nsw i32 %135, 4
  %137 = ashr i32 %136, 3
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds i8, i8* %26, i64 %138
  %140 = load i8, i8* %139, align 1
  %141 = sext i8 %140 to i32
  %142 = add nsw i32 %135, 3
  %143 = ashr i32 %142, 3
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i8, i8* %26, i64 %144
  %146 = load i8, i8* %145, align 1
  %147 = sext i8 %146 to i32
  %148 = add nsw i32 %147, %42
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds i8, i8* %27, i64 %149
  %151 = load i8, i8* %150, align 1
  store i8 %151, i8* %40, align 1
  %152 = sub nsw i32 %44, %141
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds i8, i8* %27, i64 %153
  %155 = load i8, i8* %154, align 1
  store i8 %155, i8* %32, align 1
  br label %189

156:                                              ; preds = %121
  %157 = sub nsw i32 %44, %42
  %158 = mul nsw i32 %157, 3
  %159 = add nsw i32 %158, 4
  %160 = ashr i32 %159, 3
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds i8, i8* %26, i64 %161
  %163 = load i8, i8* %162, align 1
  %164 = sext i8 %163 to i32
  %165 = add nsw i32 %158, 3
  %166 = ashr i32 %165, 3
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i8, i8* %26, i64 %167
  %169 = load i8, i8* %168, align 1
  %170 = sext i8 %169 to i32
  %171 = add nsw i32 %164, 1
  %172 = ashr i32 %171, 1
  %173 = add nsw i32 %172, %39
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds i8, i8* %27, i64 %174
  %176 = load i8, i8* %175, align 1
  store i8 %176, i8* %37, align 1
  %177 = add nsw i32 %170, %42
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i8, i8* %27, i64 %178
  %180 = load i8, i8* %179, align 1
  store i8 %180, i8* %40, align 1
  %181 = sub nsw i32 %44, %164
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds i8, i8* %27, i64 %182
  %184 = load i8, i8* %183, align 1
  store i8 %184, i8* %32, align 1
  %185 = sub nsw i32 %47, %172
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds i8, i8* %27, i64 %186
  %188 = load i8, i8* %187, align 1
  store i8 %188, i8* %45, align 1
  br label %189

189:                                              ; preds = %67, %77, %84, %91, %98, %30, %105, %128, %156
  %190 = getelementptr inbounds i8, i8* %32, i64 %29
  %191 = icmp sgt i32 %33, 0
  br i1 %191, label %30, label %192

192:                                              ; preds = %189, %7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { inlinehint nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
