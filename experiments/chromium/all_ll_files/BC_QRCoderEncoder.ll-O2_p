; ModuleID = '../../third_party/pdfium/fxbarcode/qrcode/BC_QRCoderEncoder.cpp'
source_filename = "../../third_party/pdfium/fxbarcode/qrcode/BC_QRCoderEncoder.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CBC_ReedSolomonGF256 = type { %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", [256 x i32], [256 x i32] }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CBC_ReedSolomonGF256Poly* }
%class.CBC_ReedSolomonGF256Poly = type opaque
%class.CBC_QRCoderMode = type <{ %"class.std::__1::vector.15", i32, [4 x i8] }>
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.16" }
%"class.std::__1::__vector_base.16" = type { i32*, i32*, %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { i32* }
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.10", i64 }
%"class.fxcrt::UnownedPtr.10" = type { i32* }
%class.CBC_QRCoderErrorCorrectionLevel = type opaque
%class.CBC_QRCoder = type { %"class.fxcrt::UnownedPtr", i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::unique_ptr.1" }
%"class.fxcrt::UnownedPtr" = type { %class.CBC_QRCoderErrorCorrectionLevel* }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.CBC_CommonByteMatrix* }
%class.CBC_CommonByteMatrix = type { i32, i32, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { i8* }
%class.CBC_ReedSolomonEncoder = type { %"class.fxcrt::UnownedPtr.35", %"class.std::__1::vector.36" }
%"class.fxcrt::UnownedPtr.35" = type { %class.CBC_ReedSolomonGF256* }
%"class.std::__1::vector.36" = type { %"class.std::__1::__vector_base.37" }
%"class.std::__1::__vector_base.37" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.26" = type { %"class.std::__1::__vector_base.27" }
%"class.std::__1::__vector_base.27" = type { %"struct.(anonymous namespace)::QRCoderBlockPair"*, %"struct.(anonymous namespace)::QRCoderBlockPair"*, %"class.std::__1::__compressed_pair.28" }
%"struct.(anonymous namespace)::QRCoderBlockPair" = type { %"class.std::__1::vector", %"class.std::__1::vector" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"struct.(anonymous namespace)::QRCoderBlockPair"* }
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr.11" }
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%class.CBC_QRCoderBitVector = type { i64, %"class.std::__1::vector" }
%class.CBC_QRCoderVersion = type { i32, i32, [4 x %"class.std::__1::unique_ptr.20"] }
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %class.CBC_QRCoderECBlocks* }
%class.CBC_QRCoderECBlocks = type { %struct.CBC_QRCoderECBlockData* }
%struct.CBC_QRCoderECBlockData = type opaque
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN12_GLOBAL__N_113g_QRCodeFieldE = internal unnamed_addr global %class.CBC_ReedSolomonGF256* null, align 8
@.str = private unnamed_addr constant [5 x i8] c"utf8\00", align 1
@_ZN15CBC_QRCoderMode5sBYTEE = external local_unnamed_addr global %class.CBC_QRCoderMode*, align 8
@.str.1 = private unnamed_addr constant [10 x i8] c"SHIFT_JIS\00", align 1
@_ZN15CBC_QRCoderMode6sKANJIE = external local_unnamed_addr global %class.CBC_QRCoderMode*, align 8
@_ZN15CBC_QRCoderMode13sALPHANUMERICE = external local_unnamed_addr global %class.CBC_QRCoderMode*, align 8
@_ZN15CBC_QRCoderMode8sNUMERICE = external local_unnamed_addr global %class.CBC_QRCoderMode*, align 8
@_ZN12_GLOBAL__N_119g_alphaNumericTableE = internal unnamed_addr constant [59 x i8] c"$\FF\FF\FF%&\FF\FF\FF\FF'(\FF)*+\00\01\02\03\04\05\06\07\08\09,\FF\FF\FF\FF\FF\FF\0A\0B\0C\0D\0E\0F\10\11\12\13\14\15\16\17\18\19\1A\1B\1C\1D\1E\1F !\22#", align 16
@_ZN15CBC_QRCoderMode4sGBKE = external local_unnamed_addr global %class.CBC_QRCoderMode*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CBC_QRCoderEncoder10InitializeEv() local_unnamed_addr #0 align 2 {
  %1 = tail call i8* @_Znwm(i64 2064) #7
  %2 = bitcast i8* %1 to %class.CBC_ReedSolomonGF256*
  tail call void @_ZN20CBC_ReedSolomonGF256C1Ei(%class.CBC_ReedSolomonGF256* nonnull %2, i32 285) #8
  store i8* %1, i8** bitcast (%class.CBC_ReedSolomonGF256** @_ZN12_GLOBAL__N_113g_QRCodeFieldE to i8**), align 8
  tail call void @_ZN20CBC_ReedSolomonGF2564InitEv(%class.CBC_ReedSolomonGF256* nonnull %2) #8
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

declare void @_ZN20CBC_ReedSolomonGF256C1Ei(%class.CBC_ReedSolomonGF256*, i32) unnamed_addr #2

declare void @_ZN20CBC_ReedSolomonGF2564InitEv(%class.CBC_ReedSolomonGF256*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CBC_QRCoderEncoder8FinalizeEv() local_unnamed_addr #0 align 2 {
  %1 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** @_ZN12_GLOBAL__N_113g_QRCodeFieldE, align 8
  %2 = icmp eq %class.CBC_ReedSolomonGF256* %1, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %0
  tail call void @_ZN20CBC_ReedSolomonGF256D1Ev(%class.CBC_ReedSolomonGF256* nonnull %1) #8
  %4 = bitcast %class.CBC_ReedSolomonGF256* %1 to i8*
  tail call void @_ZdlPv(i8* %4) #7
  br label %5

5:                                                ; preds = %3, %0
  store %class.CBC_ReedSolomonGF256* null, %class.CBC_ReedSolomonGF256** @_ZN12_GLOBAL__N_113g_QRCodeFieldE, align 8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN20CBC_ReedSolomonGF256D1Ev(%class.CBC_ReedSolomonGF256*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN18CBC_QRCoderEncoder6EncodeEN5fxcrt18StringViewTemplateIwEEPK31CBC_QRCoderErrorCorrectionLevelP11CBC_QRCoder(%"class.fxcrt::StringViewTemplate"* nocapture readonly, %class.CBC_QRCoderErrorCorrectionLevel*, %class.CBC_QRCoder*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector.15", align 8
  %5 = alloca %class.CBC_ReedSolomonEncoder, align 8
  %6 = alloca %"class.std::__1::vector", align 8
  %7 = alloca %"class.std::__1::vector.26", align 8
  %8 = alloca %"class.fxcrt::ByteString", align 8
  %9 = alloca %"class.fxcrt::ByteString", align 8
  %10 = alloca %"class.fxcrt::ByteString", align 8
  %11 = alloca %"class.fxcrt::StringViewTemplate", align 8
  %12 = alloca %"class.fxcrt::ByteString", align 8
  %13 = alloca %class.CBC_QRCoderBitVector, align 8
  %14 = alloca %"class.fxcrt::ByteString", align 8
  %15 = alloca %class.CBC_QRCoderBitVector, align 8
  %16 = alloca %class.CBC_QRCoderBitVector, align 8
  %17 = bitcast %"class.fxcrt::ByteString"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  %18 = getelementptr inbounds %"class.fxcrt::ByteString", %"class.fxcrt::ByteString"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %18, align 8
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0)) #8
  %19 = bitcast %"class.fxcrt::ByteString"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #8
  %20 = getelementptr inbounds %"class.fxcrt::ByteString", %"class.fxcrt::ByteString"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %20, align 8
  %21 = bitcast %"class.fxcrt::StringViewTemplate"* %11 to i8*
  %22 = bitcast %"class.fxcrt::StringViewTemplate"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %21, i8* align 8 %22, i64 16, i1 false)
  call void @_Z13FX_UTF8EncodeN5fxcrt18StringViewTemplateIwEE(%"class.fxcrt::ByteString"* nonnull sret %10, %"class.fxcrt::StringViewTemplate"* nonnull %11) #8
  call void @_ZN5fxcrt10ByteStringC1ERKS0_(%"class.fxcrt::ByteString"* nonnull %12, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %9) #8
  %23 = call zeroext i1 @_ZNK5fxcrt10ByteStringeqEPKc(%"class.fxcrt::ByteString"* nonnull %12, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0)) #8
  br i1 %23, label %69, label %24

24:                                               ; preds = %3
  %25 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %20, align 8
  %26 = icmp eq %"class.fxcrt::StringDataTemplate"* %25, null
  %27 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %25, i64 0, i32 1
  br label %28

28:                                               ; preds = %58, %24
  %29 = phi i8 [ %59, %58 ], [ 0, %24 ]
  %30 = phi i8 [ %60, %58 ], [ 0, %24 ]
  %31 = phi i64 [ %61, %58 ], [ 0, %24 ]
  br i1 %26, label %34, label %32

32:                                               ; preds = %28
  %33 = load i64, i64* %27, align 8
  br label %34

34:                                               ; preds = %32, %28
  %35 = phi i64 [ %33, %32 ], [ 0, %28 ]
  %36 = icmp ult i64 %31, %35
  br i1 %36, label %37, label %62

37:                                               ; preds = %34
  br i1 %26, label %41, label %38

38:                                               ; preds = %37
  %39 = load i64, i64* %27, align 8
  %40 = icmp ugt i64 %39, %31
  br i1 %40, label %42, label %41, !prof !2

41:                                               ; preds = %38, %37
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !4
  unreachable

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %25, i64 0, i32 3, i64 %31
  %44 = load i8, i8* %43, align 1
  %45 = sext i8 %44 to i32
  %46 = add nsw i32 %45, -48
  %47 = icmp ult i32 %46, 10
  br i1 %47, label %58, label %48

48:                                               ; preds = %42
  %49 = icmp slt i8 %44, 32
  br i1 %49, label %69, label %50

50:                                               ; preds = %48
  %51 = add nsw i32 %45, -32
  %52 = icmp ult i32 %51, 59
  br i1 %52, label %53, label %69

53:                                               ; preds = %50
  %54 = sext i32 %51 to i64
  %55 = lshr i64 8455721934, %54
  %56 = and i64 %55, 1
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %69

58:                                               ; preds = %53, %42
  %59 = phi i8 [ 1, %42 ], [ %29, %53 ]
  %60 = phi i8 [ %30, %42 ], [ 1, %53 ]
  %61 = add nuw i64 %31, 1
  br label %28

62:                                               ; preds = %34
  %63 = and i8 %30, 1
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %65, label %69

65:                                               ; preds = %62
  %66 = and i8 %29, 1
  %67 = icmp eq i8 %66, 0
  %68 = select i1 %67, %class.CBC_QRCoderMode** @_ZN15CBC_QRCoderMode5sBYTEE, %class.CBC_QRCoderMode** @_ZN15CBC_QRCoderMode8sNUMERICE
  br label %69

69:                                               ; preds = %48, %50, %53, %3, %62, %65
  %70 = phi %class.CBC_QRCoderMode** [ @_ZN15CBC_QRCoderMode6sKANJIE, %3 ], [ @_ZN15CBC_QRCoderMode13sALPHANUMERICE, %62 ], [ %68, %65 ], [ @_ZN15CBC_QRCoderMode5sBYTEE, %53 ], [ @_ZN15CBC_QRCoderMode5sBYTEE, %50 ], [ @_ZN15CBC_QRCoderMode5sBYTEE, %48 ]
  %71 = load %class.CBC_QRCoderMode*, %class.CBC_QRCoderMode** %70, align 8
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %12) #8
  %72 = bitcast %class.CBC_QRCoderBitVector* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %72) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %72, i8 -86, i64 32, i1 false)
  call void @_ZN20CBC_QRCoderBitVectorC1Ev(%class.CBC_QRCoderBitVector* nonnull %13) #8
  call void @_ZN5fxcrt10ByteStringC1ERKS0_(%"class.fxcrt::ByteString"* nonnull %14, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %9) #8
  %73 = bitcast %"class.fxcrt::ByteString"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %73)
  %74 = load %class.CBC_QRCoderMode*, %class.CBC_QRCoderMode** @_ZN15CBC_QRCoderMode8sNUMERICE, align 8
  %75 = icmp eq %class.CBC_QRCoderMode* %74, %71
  br i1 %75, label %76, label %137

76:                                               ; preds = %69
  %77 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %20, align 8
  %78 = icmp eq %"class.fxcrt::StringDataTemplate"* %77, null
  br i1 %78, label %283, label %79

79:                                               ; preds = %76
  %80 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %77, i64 0, i32 1
  %81 = load i64, i64* %80, align 8
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %283, label %84

83:                                               ; preds = %133, %130
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !4
  unreachable

84:                                               ; preds = %79, %133
  %85 = phi %"class.fxcrt::StringDataTemplate"* [ %131, %133 ], [ %77, %79 ]
  %86 = phi i64 [ %128, %133 ], [ 0, %79 ]
  %87 = phi i64 [ %135, %133 ], [ %81, %79 ]
  %88 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %85, i64 0, i32 3, i64 %86
  %89 = load i8, i8* %88, align 1
  %90 = sext i8 %89 to i32
  %91 = add nsw i32 %90, -48
  %92 = add i64 %86, 2
  %93 = icmp ult i64 %92, %81
  %94 = add nuw i64 %86, 1
  br i1 %93, label %95, label %114

95:                                               ; preds = %84
  %96 = icmp ugt i64 %87, %94
  br i1 %96, label %98, label %97, !prof !2

97:                                               ; preds = %95
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !4
  unreachable

98:                                               ; preds = %95
  %99 = icmp ugt i64 %87, %92
  br i1 %99, label %101, label %100, !prof !2

100:                                              ; preds = %98
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !4
  unreachable

101:                                              ; preds = %98
  %102 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %85, i64 0, i32 3, i64 %94
  %103 = load i8, i8* %102, align 1
  %104 = sext i8 %103 to i32
  %105 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %85, i64 0, i32 3, i64 %92
  %106 = load i8, i8* %105, align 1
  %107 = sext i8 %106 to i32
  %108 = mul nsw i32 %91, 100
  %109 = mul nsw i32 %104, 10
  %110 = add nsw i32 %108, -528
  %111 = add nsw i32 %110, %107
  %112 = add nsw i32 %111, %109
  call void @_ZN20CBC_QRCoderBitVector10AppendBitsEii(%class.CBC_QRCoderBitVector* nonnull %13, i32 %112, i32 10) #8
  %113 = add nuw i64 %86, 3
  br label %127

114:                                              ; preds = %84
  %115 = icmp ult i64 %94, %81
  br i1 %115, label %116, label %126

116:                                              ; preds = %114
  %117 = icmp ugt i64 %87, %94
  br i1 %117, label %119, label %118, !prof !2

118:                                              ; preds = %116
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !4
  unreachable

119:                                              ; preds = %116
  %120 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %85, i64 0, i32 3, i64 %94
  %121 = load i8, i8* %120, align 1
  %122 = sext i8 %121 to i32
  %123 = mul nsw i32 %91, 10
  %124 = add nsw i32 %123, -48
  %125 = add nsw i32 %124, %122
  call void @_ZN20CBC_QRCoderBitVector10AppendBitsEii(%class.CBC_QRCoderBitVector* nonnull %13, i32 %125, i32 7) #8
  br label %127

126:                                              ; preds = %114
  call void @_ZN20CBC_QRCoderBitVector10AppendBitsEii(%class.CBC_QRCoderBitVector* nonnull %13, i32 %91, i32 4) #8
  br label %127

127:                                              ; preds = %126, %119, %101
  %128 = phi i64 [ %113, %101 ], [ %92, %119 ], [ %94, %126 ]
  %129 = icmp ult i64 %128, %81
  br i1 %129, label %130, label %283

130:                                              ; preds = %127
  %131 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %20, align 8
  %132 = icmp eq %"class.fxcrt::StringDataTemplate"* %131, null
  br i1 %132, label %83, label %133

133:                                              ; preds = %130
  %134 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %131, i64 0, i32 1
  %135 = load i64, i64* %134, align 8
  %136 = icmp ugt i64 %135, %128
  br i1 %136, label %84, label %83, !prof !2

137:                                              ; preds = %69
  %138 = load %class.CBC_QRCoderMode*, %class.CBC_QRCoderMode** @_ZN15CBC_QRCoderMode13sALPHANUMERICE, align 8
  %139 = icmp eq %class.CBC_QRCoderMode* %138, %71
  br i1 %139, label %140, label %204

140:                                              ; preds = %137
  %141 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %20, align 8
  %142 = icmp eq %"class.fxcrt::StringDataTemplate"* %141, null
  br i1 %142, label %283, label %143

143:                                              ; preds = %140
  %144 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %141, i64 0, i32 1
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %283, label %148

147:                                              ; preds = %200, %197
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !4
  unreachable

148:                                              ; preds = %143, %200
  %149 = phi %"class.fxcrt::StringDataTemplate"* [ %198, %200 ], [ %141, %143 ]
  %150 = phi i64 [ %195, %200 ], [ 0, %143 ]
  %151 = phi i64 [ %202, %200 ], [ %145, %143 ]
  %152 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %149, i64 0, i32 3, i64 %150
  %153 = load i8, i8* %152, align 1
  %154 = icmp slt i8 %153, 32
  br i1 %154, label %282, label %155

155:                                              ; preds = %148
  %156 = sext i8 %153 to i32
  %157 = add nsw i32 %156, -32
  %158 = icmp ult i32 %157, 59
  br i1 %158, label %159, label %282

159:                                              ; preds = %155
  %160 = sext i32 %157 to i64
  %161 = getelementptr inbounds [59 x i8], [59 x i8]* @_ZN12_GLOBAL__N_119g_alphaNumericTableE, i64 0, i64 %160
  %162 = load i8, i8* %161, align 1
  %163 = sext i8 %162 to i32
  %164 = lshr i64 8455721934, %160
  %165 = and i64 %164, 1
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %167, label %282

167:                                              ; preds = %159
  %168 = add nuw i64 %150, 1
  %169 = icmp ult i64 %168, %145
  br i1 %169, label %170, label %193

170:                                              ; preds = %167
  %171 = icmp ugt i64 %151, %168
  br i1 %171, label %173, label %172, !prof !2

172:                                              ; preds = %170
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !4
  unreachable

173:                                              ; preds = %170
  %174 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %149, i64 0, i32 3, i64 %168
  %175 = load i8, i8* %174, align 1
  %176 = icmp slt i8 %175, 32
  br i1 %176, label %282, label %177

177:                                              ; preds = %173
  %178 = sext i8 %175 to i32
  %179 = add nsw i32 %178, -32
  %180 = icmp ult i32 %179, 59
  br i1 %180, label %181, label %282

181:                                              ; preds = %177
  %182 = sext i32 %179 to i64
  %183 = lshr i64 8455721934, %182
  %184 = and i64 %183, 1
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %186, label %282

186:                                              ; preds = %181
  %187 = getelementptr inbounds [59 x i8], [59 x i8]* @_ZN12_GLOBAL__N_119g_alphaNumericTableE, i64 0, i64 %182
  %188 = load i8, i8* %187, align 1
  %189 = sext i8 %188 to i32
  %190 = mul nsw i32 %163, 45
  %191 = add nsw i32 %190, %189
  call void @_ZN20CBC_QRCoderBitVector10AppendBitsEii(%class.CBC_QRCoderBitVector* nonnull %13, i32 %191, i32 11) #8
  %192 = add nuw i64 %150, 2
  br label %194

193:                                              ; preds = %167
  call void @_ZN20CBC_QRCoderBitVector10AppendBitsEii(%class.CBC_QRCoderBitVector* nonnull %13, i32 %163, i32 6) #8
  br label %194

194:                                              ; preds = %193, %186
  %195 = phi i64 [ %192, %186 ], [ %168, %193 ]
  %196 = icmp ult i64 %195, %145
  br i1 %196, label %197, label %283

197:                                              ; preds = %194
  %198 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %20, align 8
  %199 = icmp eq %"class.fxcrt::StringDataTemplate"* %198, null
  br i1 %199, label %147, label %200

200:                                              ; preds = %197
  %201 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %198, i64 0, i32 1
  %202 = load i64, i64* %201, align 8
  %203 = icmp ugt i64 %202, %195
  br i1 %203, label %148, label %147, !prof !2

204:                                              ; preds = %137
  %205 = load %class.CBC_QRCoderMode*, %class.CBC_QRCoderMode** @_ZN15CBC_QRCoderMode5sBYTEE, align 8
  %206 = icmp eq %class.CBC_QRCoderMode* %205, %71
  br i1 %206, label %207, label %230

207:                                              ; preds = %204
  call void @_ZN5fxcrt10ByteStringC1ERKS0_(%"class.fxcrt::ByteString"* nonnull %8, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %14) #8
  br label %208

208:                                              ; preds = %224, %207
  %209 = phi i64 [ 0, %207 ], [ %228, %224 ]
  %210 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %20, align 8
  %211 = icmp eq %"class.fxcrt::StringDataTemplate"* %210, null
  br i1 %211, label %215, label %212

212:                                              ; preds = %208
  %213 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %210, i64 0, i32 1
  %214 = load i64, i64* %213, align 8
  br label %215

215:                                              ; preds = %212, %208
  %216 = phi i64 [ %214, %212 ], [ 0, %208 ]
  %217 = icmp ult i64 %209, %216
  br i1 %217, label %218, label %229

218:                                              ; preds = %215
  br i1 %211, label %223, label %219

219:                                              ; preds = %218
  %220 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %210, i64 0, i32 1
  %221 = load i64, i64* %220, align 8
  %222 = icmp ugt i64 %221, %209
  br i1 %222, label %224, label %223, !prof !2

223:                                              ; preds = %219, %218
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !4
  unreachable

224:                                              ; preds = %219
  %225 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %210, i64 0, i32 3, i64 %209
  %226 = load i8, i8* %225, align 1
  %227 = sext i8 %226 to i32
  call void @_ZN20CBC_QRCoderBitVector10AppendBitsEii(%class.CBC_QRCoderBitVector* nonnull %13, i32 %227, i32 8) #8
  %228 = add nuw i64 %209, 1
  br label %208

229:                                              ; preds = %215
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %8) #8
  br label %283

230:                                              ; preds = %204
  %231 = load %class.CBC_QRCoderMode*, %class.CBC_QRCoderMode** @_ZN15CBC_QRCoderMode6sKANJIE, align 8
  %232 = icmp eq %class.CBC_QRCoderMode* %231, %71
  br i1 %232, label %283, label %233

233:                                              ; preds = %230
  %234 = load %class.CBC_QRCoderMode*, %class.CBC_QRCoderMode** @_ZN15CBC_QRCoderMode4sGBKE, align 8
  %235 = icmp eq %class.CBC_QRCoderMode* %234, %71
  br i1 %235, label %236, label %282

236:                                              ; preds = %233
  %237 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %20, align 8
  %238 = icmp eq %"class.fxcrt::StringDataTemplate"* %237, null
  br i1 %238, label %283, label %239

239:                                              ; preds = %236
  %240 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %237, i64 0, i32 1
  %241 = load i64, i64* %240, align 8
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %283, label %244

243:                                              ; preds = %278, %275
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !4
  unreachable

244:                                              ; preds = %239, %278
  %245 = phi %"class.fxcrt::StringDataTemplate"* [ %276, %278 ], [ %237, %239 ]
  %246 = phi i64 [ %273, %278 ], [ 0, %239 ]
  %247 = phi i64 [ %280, %278 ], [ %241, %239 ]
  %248 = or i64 %246, 1
  %249 = icmp ugt i64 %247, %248
  br i1 %249, label %251, label %250, !prof !2

250:                                              ; preds = %244
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !4
  unreachable

251:                                              ; preds = %244
  %252 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %245, i64 0, i32 3, i64 %246
  %253 = load i8, i8* %252, align 1
  %254 = sext i8 %253 to i32
  %255 = shl nsw i32 %254, 8
  %256 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %245, i64 0, i32 3, i64 %248
  %257 = load i8, i8* %256, align 1
  %258 = sext i8 %257 to i32
  %259 = or i32 %255, %258
  %260 = add nsw i32 %259, -41377
  %261 = icmp ult i32 %260, 2398
  br i1 %261, label %267, label %262

262:                                              ; preds = %251
  %263 = add nsw i32 %259, -45217
  %264 = icmp ult i32 %263, 19038
  br i1 %264, label %265, label %282

265:                                              ; preds = %262
  %266 = add nsw i32 %259, -42657
  br label %267

267:                                              ; preds = %265, %251
  %268 = phi i32 [ %266, %265 ], [ %260, %251 ]
  %269 = lshr i32 %268, 8
  %270 = mul nuw nsw i32 %269, 96
  %271 = and i32 %268, 255
  %272 = add nuw nsw i32 %270, %271
  call void @_ZN20CBC_QRCoderBitVector10AppendBitsEii(%class.CBC_QRCoderBitVector* nonnull %13, i32 %272, i32 13) #8
  %273 = add i64 %246, 2
  %274 = icmp ult i64 %273, %241
  br i1 %274, label %275, label %283

275:                                              ; preds = %267
  %276 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %20, align 8
  %277 = icmp eq %"class.fxcrt::StringDataTemplate"* %276, null
  br i1 %277, label %243, label %278

278:                                              ; preds = %275
  %279 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %276, i64 0, i32 1
  %280 = load i64, i64* %279, align 8
  %281 = icmp ugt i64 %280, %273
  br i1 %281, label %244, label %243, !prof !2

282:                                              ; preds = %262, %148, %155, %159, %173, %177, %181, %233
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %73)
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %14) #8
  br label %1008

283:                                              ; preds = %267, %194, %127, %229, %76, %79, %143, %140, %230, %239, %236
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %73)
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %14) #8
  %284 = call i64 @_ZNK20CBC_QRCoderBitVector11sizeInBytesEv(%class.CBC_QRCoderBitVector* nonnull %13) #8
  %285 = trunc i64 %284 to i32
  call void @_ZN11CBC_QRCoder10SetECLevelEPK31CBC_QRCoderErrorCorrectionLevel(%class.CBC_QRCoder* %2, %class.CBC_QRCoderErrorCorrectionLevel* %1) #8
  %286 = add nsw i32 %285, 3
  br label %287

287:                                              ; preds = %296, %283
  %288 = phi i32 [ 1, %283 ], [ %297, %296 ]
  %289 = call %class.CBC_QRCoderVersion* @_ZN18CBC_QRCoderVersion19GetVersionForNumberEi(i32 %288) #8
  %290 = call i32 @_ZNK18CBC_QRCoderVersion17GetTotalCodeWordsEv(%class.CBC_QRCoderVersion* %289) #8
  %291 = call %class.CBC_QRCoderECBlocks* @_ZNK18CBC_QRCoderVersion19GetECBlocksForLevelERK31CBC_QRCoderErrorCorrectionLevel(%class.CBC_QRCoderVersion* %289, %class.CBC_QRCoderErrorCorrectionLevel* %1) #8
  %292 = call i32 @_ZNK19CBC_QRCoderECBlocks19GetTotalECCodeWordsEv(%class.CBC_QRCoderECBlocks* %291) #8
  %293 = call i32 @_ZNK19CBC_QRCoderECBlocks12GetNumBlocksEv(%class.CBC_QRCoderECBlocks* %291) #8
  %294 = sub nsw i32 %290, %292
  %295 = icmp slt i32 %294, %286
  br i1 %295, label %296, label %299

296:                                              ; preds = %287
  %297 = add nuw nsw i32 %288, 1
  %298 = icmp eq i32 %297, 41
  br i1 %298, label %1008, label %287

299:                                              ; preds = %287
  call void @_ZN11CBC_QRCoder10SetVersionEi(%class.CBC_QRCoder* %2, i32 %288) #8
  call void @_ZN11CBC_QRCoder16SetNumTotalBytesEi(%class.CBC_QRCoder* %2, i32 %290) #8
  call void @_ZN11CBC_QRCoder15SetNumDataBytesEi(%class.CBC_QRCoder* %2, i32 %294) #8
  call void @_ZN11CBC_QRCoder14SetNumRSBlocksEi(%class.CBC_QRCoder* %2, i32 %293) #8
  call void @_ZN11CBC_QRCoder13SetNumECBytesEi(%class.CBC_QRCoder* %2, i32 %292) #8
  %300 = call i32 @_ZNK18CBC_QRCoderVersion22GetDimensionForVersionEv(%class.CBC_QRCoderVersion* %289) #8
  call void @_ZN11CBC_QRCoder14SetMatrixWidthEi(%class.CBC_QRCoder* %2, i32 %300) #8
  %301 = bitcast %class.CBC_QRCoderBitVector* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %301) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %301, i8 -86, i64 32, i1 false)
  call void @_ZN20CBC_QRCoderBitVectorC1Ev(%class.CBC_QRCoderBitVector* nonnull %15) #8
  %302 = call i32 @_ZNK15CBC_QRCoderMode7GetBitsEv(%class.CBC_QRCoderMode* %71) #8
  call void @_ZN20CBC_QRCoderBitVector10AppendBitsEii(%class.CBC_QRCoderBitVector* nonnull %15, i32 %302, i32 4) #8
  %303 = load %class.CBC_QRCoderMode*, %class.CBC_QRCoderMode** @_ZN15CBC_QRCoderMode4sGBKE, align 8
  %304 = icmp eq %class.CBC_QRCoderMode* %303, %71
  br i1 %304, label %305, label %306

305:                                              ; preds = %299
  call void @_ZN20CBC_QRCoderBitVector10AppendBitsEii(%class.CBC_QRCoderBitVector* nonnull %15, i32 1, i32 4) #8
  br label %306

306:                                              ; preds = %299, %305
  %307 = load %class.CBC_QRCoderMode*, %class.CBC_QRCoderMode** @_ZN15CBC_QRCoderMode5sBYTEE, align 8
  %308 = icmp eq %class.CBC_QRCoderMode* %71, %307
  br i1 %308, label %309, label %311

309:                                              ; preds = %306
  %310 = call i64 @_ZNK20CBC_QRCoderBitVector11sizeInBytesEv(%class.CBC_QRCoderBitVector* nonnull %13) #8
  br label %314

311:                                              ; preds = %306
  %312 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %0, i64 0, i32 0, i32 1
  %313 = load i64, i64* %312, align 8
  br label %314

314:                                              ; preds = %311, %309
  %315 = phi i64 [ %310, %309 ], [ %313, %311 ]
  %316 = trunc i64 %315 to i32
  %317 = call i32 @_ZNK11CBC_QRCoder10GetVersionEv(%class.CBC_QRCoder* %2) #8
  %318 = call %class.CBC_QRCoderVersion* @_ZN18CBC_QRCoderVersion19GetVersionForNumberEi(i32 %317) #8
  %319 = icmp eq %class.CBC_QRCoderVersion* %318, null
  br i1 %319, label %1006, label %320

320:                                              ; preds = %314
  %321 = call i32 @_ZNK18CBC_QRCoderVersion16GetVersionNumberEv(%class.CBC_QRCoderVersion* nonnull %318) #8
  %322 = call i32 @_ZNK15CBC_QRCoderMode21GetCharacterCountBitsEi(%class.CBC_QRCoderMode* %71, i32 %321) #8
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %1006, label %324

324:                                              ; preds = %320
  %325 = shl nsw i32 -1, %322
  %326 = xor i32 %325, -1
  %327 = icmp sgt i32 %322, %326
  br i1 %327, label %334, label %328

328:                                              ; preds = %324
  %329 = load %class.CBC_QRCoderMode*, %class.CBC_QRCoderMode** @_ZN15CBC_QRCoderMode4sGBKE, align 8
  %330 = icmp eq %class.CBC_QRCoderMode* %329, %71
  br i1 %330, label %331, label %333

331:                                              ; preds = %328
  %332 = sdiv i32 %316, 2
  call void @_ZN20CBC_QRCoderBitVector10AppendBitsEii(%class.CBC_QRCoderBitVector* nonnull %15, i32 %332, i32 %322) #8
  br label %333

333:                                              ; preds = %331, %328
  call void @_ZN20CBC_QRCoderBitVector10AppendBitsEii(%class.CBC_QRCoderBitVector* nonnull %15, i32 %316, i32 %322) #8
  br label %334

334:                                              ; preds = %333, %324
  call void @_ZN20CBC_QRCoderBitVector15AppendBitVectorEPKS_(%class.CBC_QRCoderBitVector* nonnull %15, %class.CBC_QRCoderBitVector* nonnull %13) #8
  %335 = call i32 @_ZNK11CBC_QRCoder15GetNumDataBytesEv(%class.CBC_QRCoder* %2) #8
  %336 = shl i32 %335, 3
  %337 = sext i32 %336 to i64
  %338 = call i64 @_ZNK20CBC_QRCoderBitVector4SizeEv(%class.CBC_QRCoderBitVector* nonnull %15) #8
  %339 = icmp ugt i64 %338, %337
  br i1 %339, label %1006, label %340

340:                                              ; preds = %334
  %341 = call i64 @_ZNK20CBC_QRCoderBitVector4SizeEv(%class.CBC_QRCoderBitVector* nonnull %15) #8
  %342 = icmp ult i64 %341, %337
  br i1 %342, label %348, label %343

343:                                              ; preds = %380, %377, %374, %348, %340
  %344 = call i64 @_ZNK20CBC_QRCoderBitVector4SizeEv(%class.CBC_QRCoderBitVector* nonnull %15) #8
  %345 = trunc i64 %344 to i32
  %346 = and i32 %345, 7
  %347 = icmp eq i32 %346, 0
  br i1 %347, label %358, label %351

348:                                              ; preds = %340
  call void @_ZN20CBC_QRCoderBitVector9AppendBitEi(%class.CBC_QRCoderBitVector* nonnull %15, i32 0) #8
  %349 = call i64 @_ZNK20CBC_QRCoderBitVector4SizeEv(%class.CBC_QRCoderBitVector* nonnull %15) #8
  %350 = icmp ult i64 %349, %337
  br i1 %350, label %374, label %343

351:                                              ; preds = %343
  %352 = sub nuw nsw i32 8, %346
  %353 = icmp eq i32 %352, 0
  br i1 %353, label %358, label %354

354:                                              ; preds = %351, %354
  %355 = phi i32 [ %356, %354 ], [ 0, %351 ]
  call void @_ZN20CBC_QRCoderBitVector9AppendBitEi(%class.CBC_QRCoderBitVector* nonnull %15, i32 0) #8
  %356 = add nuw nsw i32 %355, 1
  %357 = icmp eq i32 %356, %352
  br i1 %357, label %358, label %354

358:                                              ; preds = %354, %351, %343
  %359 = call i64 @_ZNK20CBC_QRCoderBitVector4SizeEv(%class.CBC_QRCoderBitVector* nonnull %15) #8
  %360 = and i64 %359, 7
  %361 = icmp eq i64 %360, 0
  br i1 %361, label %362, label %1006

362:                                              ; preds = %358
  %363 = call i64 @_ZNK20CBC_QRCoderBitVector11sizeInBytesEv(%class.CBC_QRCoderBitVector* nonnull %15) #8
  %364 = trunc i64 %363 to i32
  %365 = sub i32 %335, %364
  %366 = icmp sgt i32 %365, 0
  br i1 %366, label %367, label %381

367:                                              ; preds = %362, %367
  %368 = phi i32 [ %372, %367 ], [ 0, %362 ]
  %369 = and i32 %368, 1
  %370 = icmp eq i32 %369, 0
  %371 = select i1 %370, i32 236, i32 17
  call void @_ZN20CBC_QRCoderBitVector10AppendBitsEii(%class.CBC_QRCoderBitVector* nonnull %15, i32 %371, i32 8) #8
  %372 = add nuw nsw i32 %368, 1
  %373 = icmp eq i32 %372, %365
  br i1 %373, label %381, label %367

374:                                              ; preds = %348
  call void @_ZN20CBC_QRCoderBitVector9AppendBitEi(%class.CBC_QRCoderBitVector* nonnull %15, i32 0) #8
  %375 = call i64 @_ZNK20CBC_QRCoderBitVector4SizeEv(%class.CBC_QRCoderBitVector* nonnull %15) #8
  %376 = icmp ult i64 %375, %337
  br i1 %376, label %377, label %343

377:                                              ; preds = %374
  call void @_ZN20CBC_QRCoderBitVector9AppendBitEi(%class.CBC_QRCoderBitVector* nonnull %15, i32 0) #8
  %378 = call i64 @_ZNK20CBC_QRCoderBitVector4SizeEv(%class.CBC_QRCoderBitVector* nonnull %15) #8
  %379 = icmp ult i64 %378, %337
  br i1 %379, label %380, label %343

380:                                              ; preds = %377
  call void @_ZN20CBC_QRCoderBitVector9AppendBitEi(%class.CBC_QRCoderBitVector* nonnull %15, i32 0) #8
  br label %343

381:                                              ; preds = %367, %362
  %382 = call i64 @_ZNK20CBC_QRCoderBitVector4SizeEv(%class.CBC_QRCoderBitVector* nonnull %15) #8
  %383 = icmp eq i64 %382, %337
  br i1 %383, label %384, label %1006

384:                                              ; preds = %381
  %385 = bitcast %class.CBC_QRCoderBitVector* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %385) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %385, i8 -86, i64 32, i1 false)
  call void @_ZN20CBC_QRCoderBitVectorC1Ev(%class.CBC_QRCoderBitVector* nonnull %16) #8
  %386 = call i32 @_ZNK11CBC_QRCoder16GetNumTotalBytesEv(%class.CBC_QRCoder* %2) #8
  %387 = call i32 @_ZNK11CBC_QRCoder15GetNumDataBytesEv(%class.CBC_QRCoder* %2) #8
  %388 = call i32 @_ZNK11CBC_QRCoder14GetNumRSBlocksEv(%class.CBC_QRCoder* %2) #8
  %389 = call i64 @_ZNK20CBC_QRCoderBitVector11sizeInBytesEv(%class.CBC_QRCoderBitVector* nonnull %15) #8
  %390 = sext i32 %387 to i64
  %391 = icmp eq i64 %389, %390
  br i1 %391, label %392, label %1004

392:                                              ; preds = %384
  %393 = bitcast %"class.std::__1::vector.26"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %393) #8
  %394 = getelementptr inbounds %"class.std::__1::vector.26", %"class.std::__1::vector.26"* %7, i64 0, i32 0, i32 0
  %395 = getelementptr inbounds %"class.std::__1::vector.26", %"class.std::__1::vector.26"* %7, i64 0, i32 0, i32 1
  %396 = getelementptr inbounds %"class.std::__1::vector.26", %"class.std::__1::vector.26"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %397 = sext i32 %388 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %393, i8 0, i64 24, i1 false) #8
  %398 = icmp eq i32 %388, 0
  br i1 %398, label %820, label %399

399:                                              ; preds = %392
  %400 = icmp slt i32 %388, 0
  br i1 %400, label %401, label %403

401:                                              ; preds = %399
  %402 = bitcast %"class.std::__1::vector.26"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %402) #9
  unreachable

403:                                              ; preds = %399
  %404 = mul nsw i64 %397, 48
  %405 = call i8* @_Znwm(i64 %404) #7
  %406 = bitcast i8* %405 to %"struct.(anonymous namespace)::QRCoderBlockPair"*
  %407 = bitcast %"class.std::__1::vector.26"* %7 to i8**
  store i8* %405, i8** %407, align 8
  %408 = getelementptr inbounds %"struct.(anonymous namespace)::QRCoderBlockPair", %"struct.(anonymous namespace)::QRCoderBlockPair"* %406, i64 %397
  store %"struct.(anonymous namespace)::QRCoderBlockPair"* %408, %"struct.(anonymous namespace)::QRCoderBlockPair"** %396, align 8
  %409 = bitcast %"struct.(anonymous namespace)::QRCoderBlockPair"** %395 to i64*
  %410 = ptrtoint i8* %405 to i64
  %411 = add nsw i64 %397, -1
  %412 = getelementptr %"struct.(anonymous namespace)::QRCoderBlockPair", %"struct.(anonymous namespace)::QRCoderBlockPair"* %406, i64 %411, i32 0, i32 0, i32 0
  %413 = ptrtoint i8** %412 to i64
  %414 = sub i64 %413, %410
  %415 = urem i64 %414, 48
  %416 = add i64 %414, 48
  %417 = sub i64 %416, %415
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %405, i8 0, i64 %417, i1 false) #8
  %418 = ptrtoint %"struct.(anonymous namespace)::QRCoderBlockPair"* %408 to i64
  store i64 %418, i64* %409, align 8
  %419 = srem i32 %386, %388
  %420 = sub nsw i32 %388, %419
  %421 = sdiv i32 %386, %388
  %422 = sdiv i32 %387, %388
  %423 = sub i32 %421, %422
  %424 = icmp slt i32 %423, 1
  %425 = sext i32 %423 to i64
  %426 = bitcast %"class.std::__1::vector.15"* %4 to i8*
  %427 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %4, i64 0, i32 0, i32 0
  %428 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %4, i64 0, i32 0, i32 1
  %429 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %430 = bitcast %"class.std::__1::vector.15"* %4 to i8**
  %431 = bitcast i32** %428 to i64*
  %432 = bitcast %class.CBC_ReedSolomonEncoder* %5 to i8*
  %433 = bitcast %"class.std::__1::vector"* %6 to i8*
  %434 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %435 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %436 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %437 = bitcast i8** %434 to i64*
  %438 = bitcast %"class.std::__1::vector"* %6 to i64*
  %439 = bitcast i8** %436 to i64*
  %440 = sext i32 %420 to i64
  %441 = zext i32 %388 to i64
  br label %451

442:                                              ; preds = %796, %807
  %443 = bitcast %"class.std::__1::vector"* %803 to i64*
  store i64 %767, i64* %443, align 8
  %444 = getelementptr inbounds %"struct.(anonymous namespace)::QRCoderBlockPair", %"struct.(anonymous namespace)::QRCoderBlockPair"* %802, i64 %452, i32 1, i32 0, i32 1
  %445 = bitcast i8** %444 to i64*
  store i64 %768, i64* %445, align 8
  %446 = getelementptr inbounds %"struct.(anonymous namespace)::QRCoderBlockPair", %"struct.(anonymous namespace)::QRCoderBlockPair"* %802, i64 %452, i32 1, i32 0, i32 2, i32 0, i32 0
  %447 = bitcast i8** %446 to i64*
  store i64 %769, i64* %447, align 8
  %448 = add nsw i32 %458, %453
  %449 = add nuw nsw i64 %452, 1
  %450 = icmp eq i64 %449, %441
  br i1 %450, label %820, label %451

451:                                              ; preds = %442, %403
  %452 = phi i64 [ 0, %403 ], [ %449, %442 ]
  %453 = phi i32 [ 0, %403 ], [ %448, %442 ]
  %454 = phi i64 [ 0, %403 ], [ %782, %442 ]
  %455 = phi i64 [ 0, %403 ], [ %785, %442 ]
  %456 = icmp sge i64 %452, %440
  %457 = zext i1 %456 to i32
  %458 = add nsw i32 %422, %457
  %459 = icmp slt i32 %458, 0
  %460 = or i1 %424, %459
  br i1 %460, label %937, label %461

461:                                              ; preds = %451
  %462 = sext i32 %458 to i64
  %463 = icmp eq i32 %458, 0
  br i1 %463, label %472, label %464

464:                                              ; preds = %461
  %465 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %462, i64 1) #8
  %466 = ptrtoint i8* %465 to i64
  %467 = getelementptr inbounds i8, i8* %465, i64 %462
  %468 = ptrtoint i8* %467 to i64
  %469 = sub i64 %462, %466
  %470 = getelementptr i8, i8* %465, i64 %469
  %471 = ptrtoint i8* %470 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %465, i8 0, i64 %471, i1 false) #8
  br label %472

472:                                              ; preds = %461, %464
  %473 = phi i64 [ %468, %464 ], [ 0, %461 ]
  %474 = phi i64 [ %466, %464 ], [ 0, %461 ]
  %475 = phi i8* [ %465, %464 ], [ null, %461 ]
  %476 = call i8* @_ZNK20CBC_QRCoderBitVector8GetArrayEv(%class.CBC_QRCoderBitVector* nonnull %15) #8
  %477 = sext i32 %453 to i64
  %478 = getelementptr inbounds i8, i8* %476, i64 %477
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %475, i8* align 1 %478, i64 %462, i1 false) #8
  %479 = ptrtoint i8* %475 to i64
  %480 = sub i64 %473, %479
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %426) #8, !noalias !5
  %481 = add i64 %480, %425
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %426, i8 0, i64 24, i1 false) #8, !noalias !5
  %482 = icmp eq i64 %481, 0
  br i1 %482, label %500, label %483

483:                                              ; preds = %472
  %484 = icmp ugt i64 %481, 4611686018427387903
  br i1 %484, label %485, label %487

485:                                              ; preds = %483
  %486 = bitcast %"class.std::__1::vector.15"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %486) #9, !noalias !5
  unreachable

487:                                              ; preds = %483
  %488 = shl i64 %481, 2
  %489 = call i8* @_Znwm(i64 %488) #7, !noalias !5
  %490 = bitcast i8* %489 to i32*
  store i8* %489, i8** %430, align 8, !noalias !5
  %491 = getelementptr inbounds i32, i32* %490, i64 %481
  store i32* %491, i32** %429, align 8, !noalias !5
  %492 = ptrtoint i8* %489 to i64
  %493 = add nsw i64 %481, -1
  %494 = getelementptr i32, i32* %490, i64 %493
  %495 = ptrtoint i32* %494 to i64
  %496 = sub i64 4, %492
  %497 = add i64 %496, %495
  %498 = and i64 %497, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %489, i8 0, i64 %498, i1 false) #8, !noalias !5
  %499 = ptrtoint i32* %491 to i64
  store i64 %499, i64* %431, align 8, !noalias !5
  br label %500

500:                                              ; preds = %487, %472
  %501 = phi i8* [ null, %472 ], [ %489, %487 ]
  %502 = phi i32* [ null, %472 ], [ %490, %487 ]
  %503 = getelementptr inbounds i8, i8* %475, i64 %480
  %504 = icmp eq i64 %480, 0
  br i1 %504, label %584, label %505

505:                                              ; preds = %500
  %506 = icmp ult i64 %480, 8
  br i1 %506, label %573, label %507

507:                                              ; preds = %505
  %508 = getelementptr i32, i32* %502, i64 %480
  %509 = bitcast i32* %508 to i8*
  %510 = icmp ult i8* %501, %503
  %511 = icmp ult i8* %475, %509
  %512 = and i1 %510, %511
  br i1 %512, label %573, label %513

513:                                              ; preds = %507
  %514 = and i64 %480, -8
  %515 = getelementptr i32, i32* %502, i64 %514
  %516 = getelementptr i8, i8* %475, i64 %514
  %517 = add i64 %514, -8
  %518 = lshr exact i64 %517, 3
  %519 = add nuw nsw i64 %518, 1
  %520 = and i64 %519, 1
  %521 = icmp eq i64 %517, 0
  br i1 %521, label %555, label %522

522:                                              ; preds = %513
  %523 = sub nuw nsw i64 %519, %520
  br label %524

524:                                              ; preds = %524, %522
  %525 = phi i64 [ 0, %522 ], [ %552, %524 ]
  %526 = phi i64 [ %523, %522 ], [ %553, %524 ]
  %527 = getelementptr i32, i32* %502, i64 %525
  %528 = getelementptr i8, i8* %475, i64 %525
  %529 = bitcast i8* %528 to <4 x i8>*
  %530 = load <4 x i8>, <4 x i8>* %529, align 1, !alias.scope !8, !noalias !5
  %531 = getelementptr i8, i8* %528, i64 4
  %532 = bitcast i8* %531 to <4 x i8>*
  %533 = load <4 x i8>, <4 x i8>* %532, align 1, !alias.scope !8, !noalias !5
  %534 = zext <4 x i8> %530 to <4 x i32>
  %535 = zext <4 x i8> %533 to <4 x i32>
  %536 = bitcast i32* %527 to <4 x i32>*
  store <4 x i32> %534, <4 x i32>* %536, align 4, !alias.scope !11, !noalias !13
  %537 = getelementptr i32, i32* %527, i64 4
  %538 = bitcast i32* %537 to <4 x i32>*
  store <4 x i32> %535, <4 x i32>* %538, align 4, !alias.scope !11, !noalias !13
  %539 = or i64 %525, 8
  %540 = getelementptr i32, i32* %502, i64 %539
  %541 = getelementptr i8, i8* %475, i64 %539
  %542 = bitcast i8* %541 to <4 x i8>*
  %543 = load <4 x i8>, <4 x i8>* %542, align 1, !alias.scope !8, !noalias !5
  %544 = getelementptr i8, i8* %541, i64 4
  %545 = bitcast i8* %544 to <4 x i8>*
  %546 = load <4 x i8>, <4 x i8>* %545, align 1, !alias.scope !8, !noalias !5
  %547 = zext <4 x i8> %543 to <4 x i32>
  %548 = zext <4 x i8> %546 to <4 x i32>
  %549 = bitcast i32* %540 to <4 x i32>*
  store <4 x i32> %547, <4 x i32>* %549, align 4, !alias.scope !11, !noalias !13
  %550 = getelementptr i32, i32* %540, i64 4
  %551 = bitcast i32* %550 to <4 x i32>*
  store <4 x i32> %548, <4 x i32>* %551, align 4, !alias.scope !11, !noalias !13
  %552 = add i64 %525, 16
  %553 = add i64 %526, -2
  %554 = icmp eq i64 %553, 0
  br i1 %554, label %555, label %524, !llvm.loop !14

555:                                              ; preds = %524, %513
  %556 = phi i64 [ 0, %513 ], [ %552, %524 ]
  %557 = icmp eq i64 %520, 0
  br i1 %557, label %571, label %558

558:                                              ; preds = %555
  %559 = getelementptr i32, i32* %502, i64 %556
  %560 = getelementptr i8, i8* %475, i64 %556
  %561 = bitcast i8* %560 to <4 x i8>*
  %562 = load <4 x i8>, <4 x i8>* %561, align 1, !alias.scope !8, !noalias !5
  %563 = getelementptr i8, i8* %560, i64 4
  %564 = bitcast i8* %563 to <4 x i8>*
  %565 = load <4 x i8>, <4 x i8>* %564, align 1, !alias.scope !8, !noalias !5
  %566 = zext <4 x i8> %562 to <4 x i32>
  %567 = zext <4 x i8> %565 to <4 x i32>
  %568 = bitcast i32* %559 to <4 x i32>*
  store <4 x i32> %566, <4 x i32>* %568, align 4, !alias.scope !11, !noalias !13
  %569 = getelementptr i32, i32* %559, i64 4
  %570 = bitcast i32* %569 to <4 x i32>*
  store <4 x i32> %567, <4 x i32>* %570, align 4, !alias.scope !11, !noalias !13
  br label %571

571:                                              ; preds = %555, %558
  %572 = icmp eq i64 %480, %514
  br i1 %572, label %584, label %573

573:                                              ; preds = %571, %507, %505
  %574 = phi i32* [ %502, %507 ], [ %502, %505 ], [ %515, %571 ]
  %575 = phi i8* [ %475, %507 ], [ %475, %505 ], [ %516, %571 ]
  br label %576

576:                                              ; preds = %573, %576
  %577 = phi i32* [ %582, %576 ], [ %574, %573 ]
  %578 = phi i8* [ %581, %576 ], [ %575, %573 ]
  %579 = load i8, i8* %578, align 1, !noalias !5
  %580 = zext i8 %579 to i32
  store i32 %580, i32* %577, align 4, !noalias !5
  %581 = getelementptr inbounds i8, i8* %578, i64 1
  %582 = getelementptr inbounds i32, i32* %577, i64 1
  %583 = icmp eq i8* %581, %503
  br i1 %583, label %584, label %576, !llvm.loop !16

584:                                              ; preds = %576, %571, %500
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %432) #8, !noalias !5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %432, i8 -86, i64 32, i1 false) #8, !noalias !5
  %585 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** @_ZN12_GLOBAL__N_113g_QRCodeFieldE, align 8, !noalias !5
  call void @_ZN22CBC_ReedSolomonEncoderC1EP20CBC_ReedSolomonGF256(%class.CBC_ReedSolomonEncoder* nonnull %5, %class.CBC_ReedSolomonGF256* %585) #8, !noalias !5
  %586 = call zeroext i1 @_ZN22CBC_ReedSolomonEncoder6EncodeEPNSt3__16vectorIiNS0_9allocatorIiEEEEm(%class.CBC_ReedSolomonEncoder* nonnull %5, %"class.std::__1::vector.15"* nonnull %4, i64 %425) #8, !noalias !5
  br i1 %586, label %587, label %766

587:                                              ; preds = %584
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %433) #8, !noalias !5
  %588 = load i32*, i32** %427, align 8, !noalias !5
  %589 = ptrtoint i32* %588 to i64
  %590 = getelementptr inbounds i32, i32* %588, i64 %480
  %591 = bitcast i32* %590 to i8*
  %592 = load i32*, i32** %428, align 8, !noalias !5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %433, i8 0, i64 24, i1 false) #8, !noalias !5
  %593 = ptrtoint i32* %590 to i64
  %594 = ptrtoint i32* %592 to i64
  %595 = sub i64 %594, %593
  %596 = ashr exact i64 %595, 2
  %597 = icmp eq i64 %595, 0
  br i1 %597, label %762, label %598

598:                                              ; preds = %587
  %599 = icmp slt i64 %595, 0
  br i1 %599, label %600, label %602

600:                                              ; preds = %598
  %601 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %601) #9, !noalias !5
  unreachable

602:                                              ; preds = %598
  %603 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %596, i64 1) #8, !noalias !5
  store i8* %603, i8** %434, align 8, !noalias !5
  store i8* %603, i8** %435, align 8, !noalias !5
  %604 = getelementptr inbounds i8, i8* %603, i64 %596
  store i8* %604, i8** %436, align 8, !noalias !5
  %605 = icmp eq i32* %590, %592
  %606 = ptrtoint i8* %603 to i64
  br i1 %605, label %719, label %607

607:                                              ; preds = %602
  %608 = getelementptr i32, i32* %592, i64 -1
  %609 = sub i64 %479, %473
  %610 = getelementptr i32, i32* %608, i64 %609
  %611 = ptrtoint i32* %610 to i64
  %612 = sub i64 %611, %589
  %613 = lshr i64 %612, 2
  %614 = add nuw nsw i64 %613, 1
  %615 = icmp ult i64 %614, 4
  br i1 %615, label %616, label %642

616:                                              ; preds = %717, %642, %607
  %617 = phi i8* [ %603, %642 ], [ %603, %607 ], [ %661, %717 ]
  %618 = phi i32* [ %590, %642 ], [ %590, %607 ], [ %662, %717 ]
  %619 = ptrtoint i32* %618 to i64
  %620 = getelementptr i32, i32* %592, i64 -1
  %621 = ptrtoint i32* %620 to i64
  %622 = sub i64 %621, %619
  %623 = lshr i64 %622, 2
  %624 = add nuw nsw i64 %623, 1
  %625 = and i64 %624, 7
  %626 = icmp eq i64 %625, 0
  br i1 %626, label %637, label %627

627:                                              ; preds = %616, %627
  %628 = phi i8* [ %634, %627 ], [ %617, %616 ]
  %629 = phi i32* [ %633, %627 ], [ %618, %616 ]
  %630 = phi i64 [ %635, %627 ], [ %625, %616 ]
  %631 = load i32, i32* %629, align 4, !noalias !5
  %632 = trunc i32 %631 to i8
  store i8 %632, i8* %628, align 1, !noalias !5
  %633 = getelementptr inbounds i32, i32* %629, i64 1
  %634 = getelementptr inbounds i8, i8* %628, i64 1
  %635 = add i64 %630, -1
  %636 = icmp eq i64 %635, 0
  br i1 %636, label %637, label %627, !llvm.loop !17

637:                                              ; preds = %627, %616
  %638 = phi i8* [ undef, %616 ], [ %634, %627 ]
  %639 = phi i8* [ %617, %616 ], [ %634, %627 ]
  %640 = phi i32* [ %618, %616 ], [ %633, %627 ]
  %641 = icmp ult i64 %622, 28
  br i1 %641, label %757, label %721

642:                                              ; preds = %607
  %643 = getelementptr i8, i8* %603, i64 1
  %644 = getelementptr i32, i32* %592, i64 -1
  %645 = sub i64 %479, %473
  %646 = getelementptr i32, i32* %644, i64 %645
  %647 = ptrtoint i32* %646 to i64
  %648 = sub i64 %647, %589
  %649 = lshr i64 %648, 2
  %650 = getelementptr i8, i8* %643, i64 %649
  %651 = getelementptr i32, i32* %588, i64 1
  %652 = add i64 %473, %649
  %653 = sub i64 %652, %479
  %654 = getelementptr i32, i32* %651, i64 %653
  %655 = bitcast i32* %654 to i8*
  %656 = icmp ult i8* %603, %655
  %657 = icmp ugt i8* %650, %591
  %658 = and i1 %656, %657
  br i1 %658, label %616, label %659

659:                                              ; preds = %642
  %660 = and i64 %614, 9223372036854775804
  %661 = getelementptr i8, i8* %603, i64 %660
  %662 = getelementptr i32, i32* %590, i64 %660
  %663 = add nsw i64 %660, -4
  %664 = lshr exact i64 %663, 2
  %665 = add nuw nsw i64 %664, 1
  %666 = and i64 %665, 1
  %667 = icmp eq i64 %663, 0
  br i1 %667, label %701, label %668

668:                                              ; preds = %659
  %669 = sub nuw nsw i64 %665, %666
  br label %670

670:                                              ; preds = %670, %668
  %671 = phi i64 [ 0, %668 ], [ %698, %670 ]
  %672 = phi i64 [ %669, %668 ], [ %699, %670 ]
  %673 = getelementptr i8, i8* %603, i64 %671
  %674 = getelementptr i32, i32* %590, i64 %671
  %675 = bitcast i32* %674 to <2 x i32>*
  %676 = load <2 x i32>, <2 x i32>* %675, align 4, !alias.scope !19, !noalias !5
  %677 = getelementptr i32, i32* %674, i64 2
  %678 = bitcast i32* %677 to <2 x i32>*
  %679 = load <2 x i32>, <2 x i32>* %678, align 4, !alias.scope !19, !noalias !5
  %680 = trunc <2 x i32> %676 to <2 x i8>
  %681 = trunc <2 x i32> %679 to <2 x i8>
  %682 = bitcast i8* %673 to <2 x i8>*
  store <2 x i8> %680, <2 x i8>* %682, align 1, !alias.scope !22, !noalias !24
  %683 = getelementptr i8, i8* %673, i64 2
  %684 = bitcast i8* %683 to <2 x i8>*
  store <2 x i8> %681, <2 x i8>* %684, align 1, !alias.scope !22, !noalias !24
  %685 = or i64 %671, 4
  %686 = getelementptr i8, i8* %603, i64 %685
  %687 = getelementptr i32, i32* %590, i64 %685
  %688 = bitcast i32* %687 to <2 x i32>*
  %689 = load <2 x i32>, <2 x i32>* %688, align 4, !alias.scope !19, !noalias !5
  %690 = getelementptr i32, i32* %687, i64 2
  %691 = bitcast i32* %690 to <2 x i32>*
  %692 = load <2 x i32>, <2 x i32>* %691, align 4, !alias.scope !19, !noalias !5
  %693 = trunc <2 x i32> %689 to <2 x i8>
  %694 = trunc <2 x i32> %692 to <2 x i8>
  %695 = bitcast i8* %686 to <2 x i8>*
  store <2 x i8> %693, <2 x i8>* %695, align 1, !alias.scope !22, !noalias !24
  %696 = getelementptr i8, i8* %686, i64 2
  %697 = bitcast i8* %696 to <2 x i8>*
  store <2 x i8> %694, <2 x i8>* %697, align 1, !alias.scope !22, !noalias !24
  %698 = add i64 %671, 8
  %699 = add i64 %672, -2
  %700 = icmp eq i64 %699, 0
  br i1 %700, label %701, label %670, !llvm.loop !25

701:                                              ; preds = %670, %659
  %702 = phi i64 [ 0, %659 ], [ %698, %670 ]
  %703 = icmp eq i64 %666, 0
  br i1 %703, label %717, label %704

704:                                              ; preds = %701
  %705 = getelementptr i8, i8* %603, i64 %702
  %706 = getelementptr i32, i32* %590, i64 %702
  %707 = bitcast i32* %706 to <2 x i32>*
  %708 = load <2 x i32>, <2 x i32>* %707, align 4, !alias.scope !19, !noalias !5
  %709 = getelementptr i32, i32* %706, i64 2
  %710 = bitcast i32* %709 to <2 x i32>*
  %711 = load <2 x i32>, <2 x i32>* %710, align 4, !alias.scope !19, !noalias !5
  %712 = trunc <2 x i32> %708 to <2 x i8>
  %713 = trunc <2 x i32> %711 to <2 x i8>
  %714 = bitcast i8* %705 to <2 x i8>*
  store <2 x i8> %712, <2 x i8>* %714, align 1, !alias.scope !22, !noalias !24
  %715 = getelementptr i8, i8* %705, i64 2
  %716 = bitcast i8* %715 to <2 x i8>*
  store <2 x i8> %713, <2 x i8>* %716, align 1, !alias.scope !22, !noalias !24
  br label %717

717:                                              ; preds = %701, %704
  %718 = icmp eq i64 %614, %660
  br i1 %718, label %757, label %616

719:                                              ; preds = %602
  %720 = ptrtoint i8* %604 to i64
  store i64 %606, i64* %437, align 8, !noalias !5
  br label %762

721:                                              ; preds = %637, %721
  %722 = phi i8* [ %755, %721 ], [ %639, %637 ]
  %723 = phi i32* [ %754, %721 ], [ %640, %637 ]
  %724 = load i32, i32* %723, align 4, !noalias !5
  %725 = trunc i32 %724 to i8
  store i8 %725, i8* %722, align 1, !noalias !5
  %726 = getelementptr inbounds i32, i32* %723, i64 1
  %727 = getelementptr inbounds i8, i8* %722, i64 1
  %728 = load i32, i32* %726, align 4, !noalias !5
  %729 = trunc i32 %728 to i8
  store i8 %729, i8* %727, align 1, !noalias !5
  %730 = getelementptr inbounds i32, i32* %723, i64 2
  %731 = getelementptr inbounds i8, i8* %722, i64 2
  %732 = load i32, i32* %730, align 4, !noalias !5
  %733 = trunc i32 %732 to i8
  store i8 %733, i8* %731, align 1, !noalias !5
  %734 = getelementptr inbounds i32, i32* %723, i64 3
  %735 = getelementptr inbounds i8, i8* %722, i64 3
  %736 = load i32, i32* %734, align 4, !noalias !5
  %737 = trunc i32 %736 to i8
  store i8 %737, i8* %735, align 1, !noalias !5
  %738 = getelementptr inbounds i32, i32* %723, i64 4
  %739 = getelementptr inbounds i8, i8* %722, i64 4
  %740 = load i32, i32* %738, align 4, !noalias !5
  %741 = trunc i32 %740 to i8
  store i8 %741, i8* %739, align 1, !noalias !5
  %742 = getelementptr inbounds i32, i32* %723, i64 5
  %743 = getelementptr inbounds i8, i8* %722, i64 5
  %744 = load i32, i32* %742, align 4, !noalias !5
  %745 = trunc i32 %744 to i8
  store i8 %745, i8* %743, align 1, !noalias !5
  %746 = getelementptr inbounds i32, i32* %723, i64 6
  %747 = getelementptr inbounds i8, i8* %722, i64 6
  %748 = load i32, i32* %746, align 4, !noalias !5
  %749 = trunc i32 %748 to i8
  store i8 %749, i8* %747, align 1, !noalias !5
  %750 = getelementptr inbounds i32, i32* %723, i64 7
  %751 = getelementptr inbounds i8, i8* %722, i64 7
  %752 = load i32, i32* %750, align 4, !noalias !5
  %753 = trunc i32 %752 to i8
  store i8 %753, i8* %751, align 1, !noalias !5
  %754 = getelementptr inbounds i32, i32* %723, i64 8
  %755 = getelementptr inbounds i8, i8* %722, i64 8
  %756 = icmp eq i32* %754, %592
  br i1 %756, label %757, label %721, !llvm.loop !26

757:                                              ; preds = %637, %721, %717
  %758 = phi i8* [ %661, %717 ], [ %638, %637 ], [ %755, %721 ]
  %759 = ptrtoint i8* %758 to i64
  store i64 %759, i64* %437, align 8, !noalias !5
  %760 = load i64, i64* %438, align 8, !noalias !5
  %761 = load i64, i64* %439, align 8, !noalias !5
  br label %762

762:                                              ; preds = %757, %719, %587
  %763 = phi i64 [ %761, %757 ], [ %720, %719 ], [ 0, %587 ]
  %764 = phi i64 [ %760, %757 ], [ %606, %719 ], [ 0, %587 ]
  %765 = phi i64 [ %759, %757 ], [ %606, %719 ], [ 0, %587 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %433) #8, !noalias !5
  br label %766

766:                                              ; preds = %762, %584
  %767 = phi i64 [ %764, %762 ], [ 0, %584 ]
  %768 = phi i64 [ %765, %762 ], [ 0, %584 ]
  %769 = phi i64 [ %763, %762 ], [ 0, %584 ]
  call void @_ZN22CBC_ReedSolomonEncoderD1Ev(%class.CBC_ReedSolomonEncoder* nonnull %5) #8, !noalias !5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %432) #8, !noalias !5
  %770 = load i32*, i32** %427, align 8, !noalias !5
  %771 = icmp eq i32* %770, null
  br i1 %771, label %775, label %772

772:                                              ; preds = %766
  %773 = ptrtoint i32* %770 to i64
  store i64 %773, i64* %431, align 8, !noalias !5
  %774 = bitcast i32* %770 to i8*
  call void @_ZdlPv(i8* %774) #7, !noalias !5
  br label %775

775:                                              ; preds = %772, %766
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %426) #8, !noalias !5
  %776 = inttoptr i64 %767 to i8*
  %777 = inttoptr i64 %768 to i8*
  %778 = icmp eq i8* %776, %777
  br i1 %778, label %812, label %779

779:                                              ; preds = %775
  %780 = sub i64 %473, %474
  %781 = icmp ult i64 %454, %780
  %782 = select i1 %781, i64 %780, i64 %454
  %783 = sub i64 %768, %767
  %784 = icmp ult i64 %455, %783
  %785 = select i1 %784, i64 %783, i64 %455
  %786 = load %"struct.(anonymous namespace)::QRCoderBlockPair"*, %"struct.(anonymous namespace)::QRCoderBlockPair"** %394, align 8
  %787 = getelementptr inbounds %"struct.(anonymous namespace)::QRCoderBlockPair", %"struct.(anonymous namespace)::QRCoderBlockPair"* %786, i64 %452, i32 0
  %788 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %787, i64 0, i32 0, i32 0
  %789 = load i8*, i8** %788, align 8
  %790 = icmp eq i8* %789, null
  br i1 %790, label %796, label %791

791:                                              ; preds = %779
  %792 = ptrtoint i8* %789 to i64
  %793 = getelementptr inbounds %"struct.(anonymous namespace)::QRCoderBlockPair", %"struct.(anonymous namespace)::QRCoderBlockPair"* %786, i64 %452, i32 0, i32 0, i32 1
  %794 = bitcast i8** %793 to i64*
  store i64 %792, i64* %794, align 8
  call void @_Z7FX_FreePv(i8* nonnull %789) #8
  %795 = bitcast %"class.std::__1::vector"* %787 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %795, i8 0, i64 24, i1 false) #8
  br label %796

796:                                              ; preds = %779, %791
  %797 = bitcast %"class.std::__1::vector"* %787 to i64*
  store i64 %474, i64* %797, align 8
  %798 = getelementptr inbounds %"struct.(anonymous namespace)::QRCoderBlockPair", %"struct.(anonymous namespace)::QRCoderBlockPair"* %786, i64 %452, i32 0, i32 0, i32 1
  %799 = bitcast i8** %798 to i64*
  store i64 %473, i64* %799, align 8
  %800 = getelementptr inbounds %"struct.(anonymous namespace)::QRCoderBlockPair", %"struct.(anonymous namespace)::QRCoderBlockPair"* %786, i64 %452, i32 0, i32 0, i32 2, i32 0, i32 0
  %801 = bitcast i8** %800 to i64*
  store i64 %473, i64* %801, align 8
  %802 = load %"struct.(anonymous namespace)::QRCoderBlockPair"*, %"struct.(anonymous namespace)::QRCoderBlockPair"** %394, align 8
  %803 = getelementptr inbounds %"struct.(anonymous namespace)::QRCoderBlockPair", %"struct.(anonymous namespace)::QRCoderBlockPair"* %802, i64 %452, i32 1
  %804 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %803, i64 0, i32 0, i32 0
  %805 = load i8*, i8** %804, align 8
  %806 = icmp eq i8* %805, null
  br i1 %806, label %442, label %807

807:                                              ; preds = %796
  %808 = ptrtoint i8* %805 to i64
  %809 = getelementptr inbounds %"struct.(anonymous namespace)::QRCoderBlockPair", %"struct.(anonymous namespace)::QRCoderBlockPair"* %802, i64 %452, i32 1, i32 0, i32 1
  %810 = bitcast i8** %809 to i64*
  store i64 %808, i64* %810, align 8
  call void @_Z7FX_FreePv(i8* nonnull %805) #8
  %811 = bitcast %"class.std::__1::vector"* %803 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %811, i8 0, i64 24, i1 false) #8
  br label %442

812:                                              ; preds = %775
  %813 = icmp eq i64 %767, 0
  br i1 %813, label %816, label %814

814:                                              ; preds = %812
  %815 = inttoptr i64 %767 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %815) #8
  br label %816

816:                                              ; preds = %814, %812
  %817 = icmp eq i64 %474, 0
  br i1 %817, label %937, label %818

818:                                              ; preds = %816
  %819 = inttoptr i64 %474 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %819) #8
  br label %937

820:                                              ; preds = %442, %392
  %821 = phi i64 [ 0, %392 ], [ %785, %442 ]
  %822 = phi i64 [ 0, %392 ], [ %782, %442 ]
  %823 = phi i32 [ 0, %392 ], [ %448, %442 ]
  %824 = icmp eq i32 %823, %387
  br i1 %824, label %825, label %937

825:                                              ; preds = %820
  %826 = icmp eq i64 %822, 0
  br i1 %826, label %841, label %827

827:                                              ; preds = %825
  %828 = bitcast %"struct.(anonymous namespace)::QRCoderBlockPair"** %395 to i64*
  %829 = bitcast %"class.std::__1::vector.26"* %7 to i64*
  %830 = load i64, i64* %828, align 8
  %831 = load i64, i64* %829, align 8
  %832 = inttoptr i64 %831 to %"struct.(anonymous namespace)::QRCoderBlockPair"*
  br label %833

833:                                              ; preds = %851, %827
  %834 = phi i64 [ %831, %827 ], [ %852, %851 ]
  %835 = phi i64 [ %830, %827 ], [ %853, %851 ]
  %836 = phi %"struct.(anonymous namespace)::QRCoderBlockPair"* [ %832, %827 ], [ %854, %851 ]
  %837 = phi i64 [ %831, %827 ], [ %855, %851 ]
  %838 = phi i64 [ %830, %827 ], [ %856, %851 ]
  %839 = phi i64 [ 0, %827 ], [ %857, %851 ]
  %840 = icmp eq i64 %838, %837
  br i1 %840, label %851, label %859

841:                                              ; preds = %851, %825
  %842 = icmp eq i64 %821, 0
  br i1 %842, label %895, label %843

843:                                              ; preds = %841
  %844 = bitcast %"struct.(anonymous namespace)::QRCoderBlockPair"** %395 to i64*
  %845 = bitcast %"class.std::__1::vector.26"* %7 to i64*
  %846 = load i64, i64* %844, align 8
  %847 = load i64, i64* %845, align 8
  %848 = inttoptr i64 %847 to %"struct.(anonymous namespace)::QRCoderBlockPair"*
  br label %887

849:                                              ; preds = %879
  %850 = inttoptr i64 %880 to %"struct.(anonymous namespace)::QRCoderBlockPair"*
  br label %851

851:                                              ; preds = %849, %833
  %852 = phi i64 [ %834, %833 ], [ %880, %849 ]
  %853 = phi i64 [ %835, %833 ], [ %881, %849 ]
  %854 = phi %"struct.(anonymous namespace)::QRCoderBlockPair"* [ %836, %833 ], [ %850, %849 ]
  %855 = phi i64 [ %837, %833 ], [ %880, %849 ]
  %856 = phi i64 [ %837, %833 ], [ %881, %849 ]
  %857 = add nuw i64 %839, 1
  %858 = icmp eq i64 %857, %822
  br i1 %858, label %841, label %833

859:                                              ; preds = %833, %879
  %860 = phi i64 [ %880, %879 ], [ %834, %833 ]
  %861 = phi i64 [ %881, %879 ], [ %835, %833 ]
  %862 = phi %"struct.(anonymous namespace)::QRCoderBlockPair"* [ %886, %879 ], [ %836, %833 ]
  %863 = phi i64 [ %882, %879 ], [ 0, %833 ]
  %864 = getelementptr inbounds %"struct.(anonymous namespace)::QRCoderBlockPair", %"struct.(anonymous namespace)::QRCoderBlockPair"* %862, i64 %863, i32 0
  %865 = getelementptr inbounds %"struct.(anonymous namespace)::QRCoderBlockPair", %"struct.(anonymous namespace)::QRCoderBlockPair"* %862, i64 %863, i32 0, i32 0, i32 1
  %866 = bitcast i8** %865 to i64*
  %867 = load i64, i64* %866, align 8
  %868 = bitcast %"class.std::__1::vector"* %864 to i64*
  %869 = load i64, i64* %868, align 8
  %870 = sub i64 %867, %869
  %871 = icmp ult i64 %839, %870
  br i1 %871, label %872, label %879

872:                                              ; preds = %859
  %873 = inttoptr i64 %869 to i8*
  %874 = getelementptr inbounds i8, i8* %873, i64 %839
  %875 = load i8, i8* %874, align 1
  %876 = zext i8 %875 to i32
  call void @_ZN20CBC_QRCoderBitVector10AppendBitsEii(%class.CBC_QRCoderBitVector* nonnull %16, i32 %876, i32 8) #8
  %877 = load i64, i64* %828, align 8
  %878 = load i64, i64* %829, align 8
  br label %879

879:                                              ; preds = %872, %859
  %880 = phi i64 [ %878, %872 ], [ %860, %859 ]
  %881 = phi i64 [ %877, %872 ], [ %861, %859 ]
  %882 = add nuw i64 %863, 1
  %883 = sub i64 %881, %880
  %884 = sdiv exact i64 %883, 48
  %885 = icmp ult i64 %882, %884
  %886 = inttoptr i64 %880 to %"struct.(anonymous namespace)::QRCoderBlockPair"*
  br i1 %885, label %859, label %849

887:                                              ; preds = %901, %843
  %888 = phi i64 [ %847, %843 ], [ %902, %901 ]
  %889 = phi i64 [ %846, %843 ], [ %903, %901 ]
  %890 = phi %"struct.(anonymous namespace)::QRCoderBlockPair"* [ %848, %843 ], [ %904, %901 ]
  %891 = phi i64 [ %847, %843 ], [ %905, %901 ]
  %892 = phi i64 [ %846, %843 ], [ %906, %901 ]
  %893 = phi i64 [ 0, %843 ], [ %907, %901 ]
  %894 = icmp eq i64 %892, %891
  br i1 %894, label %901, label %909

895:                                              ; preds = %901, %841
  %896 = sext i32 %386 to i64
  %897 = call i64 @_ZNK20CBC_QRCoderBitVector11sizeInBytesEv(%class.CBC_QRCoderBitVector* nonnull %16) #8
  %898 = icmp eq i64 %897, %896
  br label %937

899:                                              ; preds = %929
  %900 = inttoptr i64 %930 to %"struct.(anonymous namespace)::QRCoderBlockPair"*
  br label %901

901:                                              ; preds = %899, %887
  %902 = phi i64 [ %888, %887 ], [ %930, %899 ]
  %903 = phi i64 [ %889, %887 ], [ %931, %899 ]
  %904 = phi %"struct.(anonymous namespace)::QRCoderBlockPair"* [ %890, %887 ], [ %900, %899 ]
  %905 = phi i64 [ %891, %887 ], [ %930, %899 ]
  %906 = phi i64 [ %891, %887 ], [ %931, %899 ]
  %907 = add nuw i64 %893, 1
  %908 = icmp eq i64 %907, %821
  br i1 %908, label %895, label %887

909:                                              ; preds = %887, %929
  %910 = phi i64 [ %930, %929 ], [ %888, %887 ]
  %911 = phi i64 [ %931, %929 ], [ %889, %887 ]
  %912 = phi %"struct.(anonymous namespace)::QRCoderBlockPair"* [ %936, %929 ], [ %890, %887 ]
  %913 = phi i64 [ %932, %929 ], [ 0, %887 ]
  %914 = getelementptr inbounds %"struct.(anonymous namespace)::QRCoderBlockPair", %"struct.(anonymous namespace)::QRCoderBlockPair"* %912, i64 %913, i32 1
  %915 = getelementptr inbounds %"struct.(anonymous namespace)::QRCoderBlockPair", %"struct.(anonymous namespace)::QRCoderBlockPair"* %912, i64 %913, i32 1, i32 0, i32 1
  %916 = bitcast i8** %915 to i64*
  %917 = load i64, i64* %916, align 8
  %918 = bitcast %"class.std::__1::vector"* %914 to i64*
  %919 = load i64, i64* %918, align 8
  %920 = sub i64 %917, %919
  %921 = icmp ult i64 %893, %920
  br i1 %921, label %922, label %929

922:                                              ; preds = %909
  %923 = inttoptr i64 %919 to i8*
  %924 = getelementptr inbounds i8, i8* %923, i64 %893
  %925 = load i8, i8* %924, align 1
  %926 = zext i8 %925 to i32
  call void @_ZN20CBC_QRCoderBitVector10AppendBitsEii(%class.CBC_QRCoderBitVector* nonnull %16, i32 %926, i32 8) #8
  %927 = load i64, i64* %844, align 8
  %928 = load i64, i64* %845, align 8
  br label %929

929:                                              ; preds = %922, %909
  %930 = phi i64 [ %928, %922 ], [ %910, %909 ]
  %931 = phi i64 [ %927, %922 ], [ %911, %909 ]
  %932 = add nuw i64 %913, 1
  %933 = sub i64 %931, %930
  %934 = sdiv exact i64 %933, 48
  %935 = icmp ult i64 %932, %934
  %936 = inttoptr i64 %930 to %"struct.(anonymous namespace)::QRCoderBlockPair"*
  br i1 %935, label %909, label %899

937:                                              ; preds = %451, %816, %818, %895, %820
  %938 = phi i1 [ %898, %895 ], [ false, %820 ], [ false, %818 ], [ false, %816 ], [ false, %451 ]
  %939 = load %"struct.(anonymous namespace)::QRCoderBlockPair"*, %"struct.(anonymous namespace)::QRCoderBlockPair"** %394, align 8
  %940 = icmp eq %"struct.(anonymous namespace)::QRCoderBlockPair"* %939, null
  br i1 %940, label %970, label %941

941:                                              ; preds = %937
  %942 = bitcast %"struct.(anonymous namespace)::QRCoderBlockPair"* %939 to i8*
  %943 = load %"struct.(anonymous namespace)::QRCoderBlockPair"*, %"struct.(anonymous namespace)::QRCoderBlockPair"** %395, align 8
  %944 = icmp eq %"struct.(anonymous namespace)::QRCoderBlockPair"* %943, %939
  br i1 %944, label %968, label %945

945:                                              ; preds = %941, %963
  %946 = phi %"struct.(anonymous namespace)::QRCoderBlockPair"* [ %947, %963 ], [ %943, %941 ]
  %947 = getelementptr inbounds %"struct.(anonymous namespace)::QRCoderBlockPair", %"struct.(anonymous namespace)::QRCoderBlockPair"* %946, i64 -1
  %948 = getelementptr inbounds %"struct.(anonymous namespace)::QRCoderBlockPair", %"struct.(anonymous namespace)::QRCoderBlockPair"* %946, i64 -1, i32 1, i32 0, i32 0
  %949 = load i8*, i8** %948, align 8
  %950 = icmp eq i8* %949, null
  br i1 %950, label %955, label %951

951:                                              ; preds = %945
  %952 = ptrtoint i8* %949 to i64
  %953 = getelementptr inbounds %"struct.(anonymous namespace)::QRCoderBlockPair", %"struct.(anonymous namespace)::QRCoderBlockPair"* %946, i64 -1, i32 1, i32 0, i32 1
  %954 = bitcast i8** %953 to i64*
  store i64 %952, i64* %954, align 8
  call void @_Z7FX_FreePv(i8* nonnull %949) #8
  br label %955

955:                                              ; preds = %951, %945
  %956 = getelementptr inbounds %"struct.(anonymous namespace)::QRCoderBlockPair", %"struct.(anonymous namespace)::QRCoderBlockPair"* %947, i64 0, i32 0, i32 0, i32 0
  %957 = load i8*, i8** %956, align 8
  %958 = icmp eq i8* %957, null
  br i1 %958, label %963, label %959

959:                                              ; preds = %955
  %960 = ptrtoint i8* %957 to i64
  %961 = getelementptr inbounds %"struct.(anonymous namespace)::QRCoderBlockPair", %"struct.(anonymous namespace)::QRCoderBlockPair"* %946, i64 -1, i32 0, i32 0, i32 1
  %962 = bitcast i8** %961 to i64*
  store i64 %960, i64* %962, align 8
  call void @_Z7FX_FreePv(i8* nonnull %957) #8
  br label %963

963:                                              ; preds = %959, %955
  %964 = icmp eq %"struct.(anonymous namespace)::QRCoderBlockPair"* %947, %939
  br i1 %964, label %965, label %945

965:                                              ; preds = %963
  %966 = bitcast %"class.std::__1::vector.26"* %7 to i8**
  %967 = load i8*, i8** %966, align 8
  br label %968

968:                                              ; preds = %965, %941
  %969 = phi i8* [ %967, %965 ], [ %942, %941 ]
  store %"struct.(anonymous namespace)::QRCoderBlockPair"* %939, %"struct.(anonymous namespace)::QRCoderBlockPair"** %395, align 8
  call void @_ZdlPv(i8* %969) #7
  br label %970

970:                                              ; preds = %937, %968
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %393) #8
  br i1 %938, label %971, label %1004

971:                                              ; preds = %970
  %972 = call i32 @_ZNK11CBC_QRCoder14GetMatrixWidthEv(%class.CBC_QRCoder* %2) #8
  %973 = call i32 @_ZNK11CBC_QRCoder14GetMatrixWidthEv(%class.CBC_QRCoder* %2) #8
  %974 = call i8* @_Znwm(i64 32) #7
  %975 = bitcast i8* %974 to %class.CBC_CommonByteMatrix*
  call void @_ZN20CBC_CommonByteMatrixC1Eii(%class.CBC_CommonByteMatrix* nonnull %975, i32 %972, i32 %973) #8
  %976 = call %class.CBC_QRCoderErrorCorrectionLevel* @_ZNK11CBC_QRCoder10GetECLevelEv(%class.CBC_QRCoder* %2) #8
  %977 = call i32 @_ZNK11CBC_QRCoder10GetVersionEv(%class.CBC_QRCoder* %2) #8
  br label %978

978:                                              ; preds = %983, %971
  %979 = phi i32 [ 0, %971 ], [ %994, %983 ]
  %980 = phi i32 [ 65535, %971 ], [ %993, %983 ]
  %981 = phi i32 [ -1, %971 ], [ %992, %983 ]
  %982 = call zeroext i1 @_ZN21CBC_QRCoderMatrixUtil11BuildMatrixEP20CBC_QRCoderBitVectorPK31CBC_QRCoderErrorCorrectionLeveliiP20CBC_CommonByteMatrix(%class.CBC_QRCoderBitVector* nonnull %16, %class.CBC_QRCoderErrorCorrectionLevel* %976, i32 %977, i32 %979, %class.CBC_CommonByteMatrix* nonnull %975) #8
  br i1 %982, label %983, label %1003

983:                                              ; preds = %978
  %984 = call i32 @_ZN19CBC_QRCoderMaskUtil21ApplyMaskPenaltyRule1EP20CBC_CommonByteMatrix(%class.CBC_CommonByteMatrix* nonnull %975) #8
  %985 = call i32 @_ZN19CBC_QRCoderMaskUtil21ApplyMaskPenaltyRule2EP20CBC_CommonByteMatrix(%class.CBC_CommonByteMatrix* nonnull %975) #8
  %986 = add nsw i32 %985, %984
  %987 = call i32 @_ZN19CBC_QRCoderMaskUtil21ApplyMaskPenaltyRule3EP20CBC_CommonByteMatrix(%class.CBC_CommonByteMatrix* nonnull %975) #8
  %988 = add nsw i32 %986, %987
  %989 = call i32 @_ZN19CBC_QRCoderMaskUtil21ApplyMaskPenaltyRule4EP20CBC_CommonByteMatrix(%class.CBC_CommonByteMatrix* nonnull %975) #8
  %990 = add nsw i32 %988, %989
  %991 = icmp slt i32 %990, %980
  %992 = select i1 %991, i32 %979, i32 %981
  %993 = select i1 %991, i32 %990, i32 %980
  %994 = add nuw nsw i32 %979, 1
  %995 = icmp eq i32 %994, 8
  br i1 %995, label %996, label %978

996:                                              ; preds = %983
  call void @_ZN11CBC_QRCoder14SetMaskPatternEi(%class.CBC_QRCoder* %2, i32 %992) #8
  %997 = call %class.CBC_QRCoderErrorCorrectionLevel* @_ZNK11CBC_QRCoder10GetECLevelEv(%class.CBC_QRCoder* %2) #8
  %998 = call i32 @_ZNK11CBC_QRCoder10GetVersionEv(%class.CBC_QRCoder* %2) #8
  %999 = call i32 @_ZNK11CBC_QRCoder14GetMaskPatternEv(%class.CBC_QRCoder* %2) #8
  %1000 = call zeroext i1 @_ZN21CBC_QRCoderMatrixUtil11BuildMatrixEP20CBC_QRCoderBitVectorPK31CBC_QRCoderErrorCorrectionLeveliiP20CBC_CommonByteMatrix(%class.CBC_QRCoderBitVector* nonnull %16, %class.CBC_QRCoderErrorCorrectionLevel* %997, i32 %998, i32 %999, %class.CBC_CommonByteMatrix* nonnull %975) #8
  br i1 %1000, label %1001, label %1003

1001:                                             ; preds = %996
  call void @_ZN11CBC_QRCoder9SetMatrixENSt3__110unique_ptrI20CBC_CommonByteMatrixNS0_14default_deleteIS2_EEEE(%class.CBC_QRCoder* %2, %class.CBC_CommonByteMatrix* nonnull %975) #8
  %1002 = call zeroext i1 @_ZNK11CBC_QRCoder7IsValidEv(%class.CBC_QRCoder* %2) #8
  br label %1004

1003:                                             ; preds = %978, %996
  call void @_ZN20CBC_CommonByteMatrixD1Ev(%class.CBC_CommonByteMatrix* nonnull %975) #8
  call void @_ZdlPv(i8* nonnull %974) #7
  br label %1004

1004:                                             ; preds = %384, %1003, %1001, %970
  %1005 = phi i1 [ false, %970 ], [ %1002, %1001 ], [ false, %1003 ], [ false, %384 ]
  call void @_ZN20CBC_QRCoderBitVectorD1Ev(%class.CBC_QRCoderBitVector* nonnull %16) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %385) #8
  br label %1006

1006:                                             ; preds = %358, %334, %320, %314, %381, %1004
  %1007 = phi i1 [ %1005, %1004 ], [ false, %381 ], [ false, %314 ], [ false, %320 ], [ false, %334 ], [ false, %358 ]
  call void @_ZN20CBC_QRCoderBitVectorD1Ev(%class.CBC_QRCoderBitVector* nonnull %15) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %301) #8
  br label %1008

1008:                                             ; preds = %296, %282, %1006
  %1009 = phi i1 [ false, %282 ], [ %1007, %1006 ], [ false, %296 ]
  call void @_ZN20CBC_QRCoderBitVectorD1Ev(%class.CBC_QRCoderBitVector* nonnull %13) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %72) #8
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %10) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #8
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %9) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  ret i1 %1009
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

declare void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"*, i8*) unnamed_addr #2

declare void @_Z13FX_UTF8EncodeN5fxcrt18StringViewTemplateIwEE(%"class.fxcrt::ByteString"* sret, %"class.fxcrt::StringViewTemplate"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

declare void @_ZN5fxcrt10ByteStringC1ERKS0_(%"class.fxcrt::ByteString"*, %"class.fxcrt::ByteString"* dereferenceable(8)) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"*) unnamed_addr #3

declare void @_ZN20CBC_QRCoderBitVectorC1Ev(%class.CBC_QRCoderBitVector*) unnamed_addr #2

declare i64 @_ZNK20CBC_QRCoderBitVector11sizeInBytesEv(%class.CBC_QRCoderBitVector*) local_unnamed_addr #2

declare i32 @_ZNK11CBC_QRCoder10GetVersionEv(%class.CBC_QRCoder*) local_unnamed_addr #2

declare void @_ZN20CBC_QRCoderBitVector15AppendBitVectorEPKS_(%class.CBC_QRCoderBitVector*, %class.CBC_QRCoderBitVector*) local_unnamed_addr #2

declare i32 @_ZNK11CBC_QRCoder15GetNumDataBytesEv(%class.CBC_QRCoder*) local_unnamed_addr #2

declare i32 @_ZNK11CBC_QRCoder16GetNumTotalBytesEv(%class.CBC_QRCoder*) local_unnamed_addr #2

declare i32 @_ZNK11CBC_QRCoder14GetNumRSBlocksEv(%class.CBC_QRCoder*) local_unnamed_addr #2

declare i32 @_ZNK11CBC_QRCoder14GetMatrixWidthEv(%class.CBC_QRCoder*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

declare %class.CBC_QRCoderErrorCorrectionLevel* @_ZNK11CBC_QRCoder10GetECLevelEv(%class.CBC_QRCoder*) local_unnamed_addr #2

declare void @_ZN11CBC_QRCoder14SetMaskPatternEi(%class.CBC_QRCoder*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZN21CBC_QRCoderMatrixUtil11BuildMatrixEP20CBC_QRCoderBitVectorPK31CBC_QRCoderErrorCorrectionLeveliiP20CBC_CommonByteMatrix(%class.CBC_QRCoderBitVector*, %class.CBC_QRCoderErrorCorrectionLevel*, i32, i32, %class.CBC_CommonByteMatrix*) local_unnamed_addr #2

declare i32 @_ZNK11CBC_QRCoder14GetMaskPatternEv(%class.CBC_QRCoder*) local_unnamed_addr #2

declare void @_ZN11CBC_QRCoder9SetMatrixENSt3__110unique_ptrI20CBC_CommonByteMatrixNS0_14default_deleteIS2_EEEE(%class.CBC_QRCoder*, %class.CBC_CommonByteMatrix*) local_unnamed_addr #2

declare zeroext i1 @_ZNK11CBC_QRCoder7IsValidEv(%class.CBC_QRCoder*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN20CBC_QRCoderBitVectorD1Ev(%class.CBC_QRCoderBitVector*) unnamed_addr #3

declare zeroext i1 @_ZNK5fxcrt10ByteStringeqEPKc(%"class.fxcrt::ByteString"*, i8*) local_unnamed_addr #2

declare void @_ZN20CBC_QRCoderBitVector10AppendBitsEii(%class.CBC_QRCoderBitVector*, i32, i32) local_unnamed_addr #2

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #2

declare void @_ZN11CBC_QRCoder10SetECLevelEPK31CBC_QRCoderErrorCorrectionLevel(%class.CBC_QRCoder*, %class.CBC_QRCoderErrorCorrectionLevel*) local_unnamed_addr #2

declare %class.CBC_QRCoderVersion* @_ZN18CBC_QRCoderVersion19GetVersionForNumberEi(i32) local_unnamed_addr #2

declare i32 @_ZNK18CBC_QRCoderVersion17GetTotalCodeWordsEv(%class.CBC_QRCoderVersion*) local_unnamed_addr #2

declare %class.CBC_QRCoderECBlocks* @_ZNK18CBC_QRCoderVersion19GetECBlocksForLevelERK31CBC_QRCoderErrorCorrectionLevel(%class.CBC_QRCoderVersion*, %class.CBC_QRCoderErrorCorrectionLevel*) local_unnamed_addr #2

declare i32 @_ZNK19CBC_QRCoderECBlocks19GetTotalECCodeWordsEv(%class.CBC_QRCoderECBlocks*) local_unnamed_addr #2

declare i32 @_ZNK19CBC_QRCoderECBlocks12GetNumBlocksEv(%class.CBC_QRCoderECBlocks*) local_unnamed_addr #2

declare void @_ZN11CBC_QRCoder10SetVersionEi(%class.CBC_QRCoder*, i32) local_unnamed_addr #2

declare void @_ZN11CBC_QRCoder16SetNumTotalBytesEi(%class.CBC_QRCoder*, i32) local_unnamed_addr #2

declare void @_ZN11CBC_QRCoder15SetNumDataBytesEi(%class.CBC_QRCoder*, i32) local_unnamed_addr #2

declare void @_ZN11CBC_QRCoder14SetNumRSBlocksEi(%class.CBC_QRCoder*, i32) local_unnamed_addr #2

declare void @_ZN11CBC_QRCoder13SetNumECBytesEi(%class.CBC_QRCoder*, i32) local_unnamed_addr #2

declare void @_ZN11CBC_QRCoder14SetMatrixWidthEi(%class.CBC_QRCoder*, i32) local_unnamed_addr #2

declare i32 @_ZNK18CBC_QRCoderVersion22GetDimensionForVersionEv(%class.CBC_QRCoderVersion*) local_unnamed_addr #2

declare i32 @_ZNK15CBC_QRCoderMode7GetBitsEv(%class.CBC_QRCoderMode*) local_unnamed_addr #2

declare i32 @_ZNK15CBC_QRCoderMode21GetCharacterCountBitsEi(%class.CBC_QRCoderMode*, i32) local_unnamed_addr #2

declare i32 @_ZNK18CBC_QRCoderVersion16GetVersionNumberEv(%class.CBC_QRCoderVersion*) local_unnamed_addr #2

declare i64 @_ZNK20CBC_QRCoderBitVector4SizeEv(%class.CBC_QRCoderBitVector*) local_unnamed_addr #2

declare void @_ZN20CBC_QRCoderBitVector9AppendBitEi(%class.CBC_QRCoderBitVector*, i32) local_unnamed_addr #2

declare i8* @_ZNK20CBC_QRCoderBitVector8GetArrayEv(%class.CBC_QRCoderBitVector*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

declare i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64, i64) local_unnamed_addr #2

declare void @_ZN22CBC_ReedSolomonEncoderC1EP20CBC_ReedSolomonGF256(%class.CBC_ReedSolomonEncoder*, %class.CBC_ReedSolomonGF256*) unnamed_addr #2

declare zeroext i1 @_ZN22CBC_ReedSolomonEncoder6EncodeEPNSt3__16vectorIiNS0_9allocatorIiEEEEm(%class.CBC_ReedSolomonEncoder*, %"class.std::__1::vector.15"*, i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN22CBC_ReedSolomonEncoderD1Ev(%class.CBC_ReedSolomonEncoder*) unnamed_addr #3

declare i32 @_ZN19CBC_QRCoderMaskUtil21ApplyMaskPenaltyRule1EP20CBC_CommonByteMatrix(%class.CBC_CommonByteMatrix*) local_unnamed_addr #2

declare i32 @_ZN19CBC_QRCoderMaskUtil21ApplyMaskPenaltyRule2EP20CBC_CommonByteMatrix(%class.CBC_CommonByteMatrix*) local_unnamed_addr #2

declare i32 @_ZN19CBC_QRCoderMaskUtil21ApplyMaskPenaltyRule3EP20CBC_CommonByteMatrix(%class.CBC_CommonByteMatrix*) local_unnamed_addr #2

declare i32 @_ZN19CBC_QRCoderMaskUtil21ApplyMaskPenaltyRule4EP20CBC_CommonByteMatrix(%class.CBC_CommonByteMatrix*) local_unnamed_addr #2

declare void @_ZN20CBC_CommonByteMatrixC1Eii(%class.CBC_CommonByteMatrix*, i32, i32) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN20CBC_CommonByteMatrixD1Ev(%class.CBC_CommonByteMatrix*) unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i32 -2143833110}
!4 = !{i32 -2143833089}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN12_GLOBAL__N_115GenerateECBytesEN6pdfium4spanIKhEEm: argument 0"}
!7 = distinct !{!7, !"_ZN12_GLOBAL__N_115GenerateECBytesEN6pdfium4spanIKhEEm"}
!8 = !{!9}
!9 = distinct !{!9, !10}
!10 = distinct !{!10, !"LVerDomain"}
!11 = !{!12}
!12 = distinct !{!12, !10}
!13 = !{!6, !9}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.isvectorized", i32 1}
!16 = distinct !{!16, !15}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = !{!23}
!23 = distinct !{!23, !21}
!24 = !{!6, !20}
!25 = distinct !{!25, !15}
!26 = distinct !{!26, !15}
