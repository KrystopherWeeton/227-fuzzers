; ModuleID = '../../third_party/boringssl/src/crypto/asn1/tasn_enc.c'
source_filename = "../../third_party/boringssl/src/crypto/asn1/tasn_enc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ASN1_VALUE_st = type opaque
%struct.ASN1_ITEM_st = type { i8, i64, %struct.ASN1_TEMPLATE_st*, i64, i8*, i64, i8* }
%struct.ASN1_TEMPLATE_st = type { i64, i64, i64, i8*, %struct.ASN1_ITEM_st* }
%struct.ASN1_AUX_st = type { i8*, i32, i32, i32 (i32, %struct.ASN1_VALUE_st**, %struct.ASN1_ITEM_st*, i8*)*, i32 }
%struct.stack_st_ASN1_VALUE = type opaque
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.DER_ENC = type { i8*, i32, %struct.ASN1_VALUE_st* }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }

@.str = private unnamed_addr constant [55 x i8] c"../../third_party/boringssl/src/crypto/asn1/tasn_enc.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ASN1_item_i2d(%struct.ASN1_VALUE_st*, i8**, %struct.ASN1_ITEM_st*) local_unnamed_addr #0 {
  %4 = alloca %struct.ASN1_VALUE_st*, align 8
  %5 = alloca i8*, align 8
  %6 = bitcast %struct.ASN1_VALUE_st** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6)
  store %struct.ASN1_VALUE_st* %0, %struct.ASN1_VALUE_st** %4, align 8
  %7 = icmp eq i8** %1, null
  br i1 %7, label %23, label %8

8:                                                ; preds = %3
  %9 = load i8*, i8** %1, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %11, label %23

11:                                               ; preds = %8
  %12 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #6
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  %13 = call i32 @ASN1_item_ex_i2d(%struct.ASN1_VALUE_st** nonnull %4, i8** null, %struct.ASN1_ITEM_st* %2, i32 -1, i32 0) #6
  %14 = icmp slt i32 %13, 1
  br i1 %14, label %21, label %15

15:                                               ; preds = %11
  %16 = sext i32 %13 to i64
  %17 = call i8* @OPENSSL_malloc(i64 %16) #6
  %18 = icmp eq i8* %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %15
  store i8* %17, i8** %5, align 8
  %20 = call i32 @ASN1_item_ex_i2d(%struct.ASN1_VALUE_st** nonnull %4, i8** nonnull %5, %struct.ASN1_ITEM_st* %2, i32 -1, i32 0) #6
  store i8* %17, i8** %1, align 8
  br label %21

21:                                               ; preds = %19, %15, %11
  %22 = phi i32 [ %13, %19 ], [ %13, %11 ], [ -1, %15 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #6
  br label %25

23:                                               ; preds = %8, %3
  %24 = call i32 @ASN1_item_ex_i2d(%struct.ASN1_VALUE_st** nonnull %4, i8** %1, %struct.ASN1_ITEM_st* %2, i32 -1, i32 0) #6
  br label %25

25:                                               ; preds = %21, %23
  %26 = phi i32 [ %24, %23 ], [ %22, %21 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6)
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ASN1_item_ex_i2d(%struct.ASN1_VALUE_st**, i8**, %struct.ASN1_ITEM_st*, i32, i32) local_unnamed_addr #0 {
  %6 = alloca i32, align 4
  %7 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #6
  store i32 -1431655766, i32* %6, align 4
  %8 = getelementptr inbounds %struct.ASN1_ITEM_st, %struct.ASN1_ITEM_st* %2, i64 0, i32 4
  %9 = bitcast i8** %8 to %struct.ASN1_AUX_st**
  %10 = load %struct.ASN1_AUX_st*, %struct.ASN1_AUX_st** %9, align 8
  %11 = getelementptr inbounds %struct.ASN1_ITEM_st, %struct.ASN1_ITEM_st* %2, i64 0, i32 0
  %12 = load i8, i8* %11, align 8
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %5
  %15 = load %struct.ASN1_VALUE_st*, %struct.ASN1_VALUE_st** %0, align 8
  %16 = icmp eq %struct.ASN1_VALUE_st* %15, null
  br i1 %16, label %141, label %17

17:                                               ; preds = %14, %5
  %18 = icmp eq %struct.ASN1_AUX_st* %10, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %17
  %20 = getelementptr inbounds %struct.ASN1_AUX_st, %struct.ASN1_AUX_st* %10, i64 0, i32 3
  %21 = load i32 (i32, %struct.ASN1_VALUE_st**, %struct.ASN1_ITEM_st*, i8*)*, i32 (i32, %struct.ASN1_VALUE_st**, %struct.ASN1_ITEM_st*, i8*)** %20, align 8
  br label %22

22:                                               ; preds = %19, %17
  %23 = phi i32 (i32, %struct.ASN1_VALUE_st**, %struct.ASN1_ITEM_st*, i8*)* [ null, %17 ], [ %21, %19 ]
  %24 = sext i8 %12 to i32
  switch i32 %24, label %141 [
    i32 0, label %25
    i32 5, label %33
    i32 2, label %38
    i32 4, label %63
    i32 1, label %68
  ]

25:                                               ; preds = %22
  %26 = getelementptr inbounds %struct.ASN1_ITEM_st, %struct.ASN1_ITEM_st* %2, i64 0, i32 2
  %27 = load %struct.ASN1_TEMPLATE_st*, %struct.ASN1_TEMPLATE_st** %26, align 8
  %28 = icmp eq %struct.ASN1_TEMPLATE_st* %27, null
  br i1 %28, label %31, label %29

29:                                               ; preds = %25
  %30 = tail call fastcc i32 @asn1_template_ex_i2d(%struct.ASN1_VALUE_st** %0, i8** %1, %struct.ASN1_TEMPLATE_st* nonnull %27, i32 %3, i32 %4)
  br label %141

31:                                               ; preds = %25
  %32 = tail call fastcc i32 @asn1_i2d_ex_primitive(%struct.ASN1_VALUE_st** %0, i8** %1, %struct.ASN1_ITEM_st* %2, i32 %3, i32 %4)
  br label %141

33:                                               ; preds = %22
  %34 = icmp eq i32 %3, -1
  br i1 %34, label %36, label %35

35:                                               ; preds = %33
  tail call void @ERR_put_error(i32 12, i32 0, i32 193, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 153) #6
  br label %141

36:                                               ; preds = %33
  %37 = tail call fastcc i32 @asn1_i2d_ex_primitive(%struct.ASN1_VALUE_st** %0, i8** %1, %struct.ASN1_ITEM_st* %2, i32 -1, i32 %4)
  br label %141

38:                                               ; preds = %22
  %39 = icmp eq i32 %3, -1
  br i1 %39, label %41, label %40

40:                                               ; preds = %38
  tail call void @ERR_put_error(i32 12, i32 0, i32 193, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 164) #6
  br label %141

41:                                               ; preds = %38
  %42 = icmp ne i32 (i32, %struct.ASN1_VALUE_st**, %struct.ASN1_ITEM_st*, i8*)* %23, null
  br i1 %42, label %43, label %46

43:                                               ; preds = %41
  %44 = tail call i32 %23(i32 6, %struct.ASN1_VALUE_st** %0, %struct.ASN1_ITEM_st* %2, i8* null) #6
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %141, label %46

46:                                               ; preds = %43, %41
  %47 = tail call i32 @asn1_get_choice_selector(%struct.ASN1_VALUE_st** %0, %struct.ASN1_ITEM_st* %2) #6
  %48 = icmp sgt i32 %47, -1
  br i1 %48, label %49, label %60

49:                                               ; preds = %46
  %50 = sext i32 %47 to i64
  %51 = getelementptr inbounds %struct.ASN1_ITEM_st, %struct.ASN1_ITEM_st* %2, i64 0, i32 3
  %52 = load i64, i64* %51, align 8
  %53 = icmp sgt i64 %52, %50
  br i1 %53, label %54, label %60

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.ASN1_ITEM_st, %struct.ASN1_ITEM_st* %2, i64 0, i32 2
  %56 = load %struct.ASN1_TEMPLATE_st*, %struct.ASN1_TEMPLATE_st** %55, align 8
  %57 = getelementptr inbounds %struct.ASN1_TEMPLATE_st, %struct.ASN1_TEMPLATE_st* %56, i64 %50
  %58 = tail call %struct.ASN1_VALUE_st** @asn1_get_field_ptr(%struct.ASN1_VALUE_st** %0, %struct.ASN1_TEMPLATE_st* %57) #6
  %59 = tail call fastcc i32 @asn1_template_ex_i2d(%struct.ASN1_VALUE_st** %58, i8** %1, %struct.ASN1_TEMPLATE_st* %57, i32 -1, i32 %4)
  br label %141

60:                                               ; preds = %49, %46
  br i1 %42, label %61, label %141

61:                                               ; preds = %60
  %62 = tail call i32 %23(i32 7, %struct.ASN1_VALUE_st** %0, %struct.ASN1_ITEM_st* %2, i8* null) #6
  br label %141

63:                                               ; preds = %22
  %64 = getelementptr inbounds %struct.ASN1_AUX_st, %struct.ASN1_AUX_st* %10, i64 1, i32 1
  %65 = bitcast i32* %64 to i32 (%struct.ASN1_VALUE_st**, i8**, %struct.ASN1_ITEM_st*, i32, i32)**
  %66 = load i32 (%struct.ASN1_VALUE_st**, i8**, %struct.ASN1_ITEM_st*, i32, i32)*, i32 (%struct.ASN1_VALUE_st**, i8**, %struct.ASN1_ITEM_st*, i32, i32)** %65, align 8
  %67 = tail call i32 %66(%struct.ASN1_VALUE_st** %0, i8** %1, %struct.ASN1_ITEM_st* %2, i32 %3, i32 %4) #6
  br label %141

68:                                               ; preds = %22
  %69 = call i32 @asn1_enc_restore(i32* nonnull %6, i8** %1, %struct.ASN1_VALUE_st** %0, %struct.ASN1_ITEM_st* %2) #6
  %70 = icmp slt i32 %69, 0
  br i1 %70, label %141, label %71

71:                                               ; preds = %68
  %72 = icmp eq i32 %69, 0
  br i1 %72, label %75, label %73

73:                                               ; preds = %71
  %74 = load i32, i32* %6, align 4
  br label %141

75:                                               ; preds = %71
  store i32 0, i32* %6, align 4
  %76 = icmp eq i32 %3, -1
  %77 = and i32 %4, -193
  %78 = select i1 %76, i32 %77, i32 %4
  %79 = select i1 %76, i32 16, i32 %3
  %80 = icmp ne i32 (i32, %struct.ASN1_VALUE_st**, %struct.ASN1_ITEM_st*, i8*)* %23, null
  br i1 %80, label %81, label %84

81:                                               ; preds = %75
  %82 = call i32 %23(i32 6, %struct.ASN1_VALUE_st** %0, %struct.ASN1_ITEM_st* %2, i8* null) #6
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %141, label %84

84:                                               ; preds = %81, %75
  %85 = getelementptr inbounds %struct.ASN1_ITEM_st, %struct.ASN1_ITEM_st* %2, i64 0, i32 2
  %86 = getelementptr inbounds %struct.ASN1_ITEM_st, %struct.ASN1_ITEM_st* %2, i64 0, i32 3
  %87 = load i64, i64* %86, align 8
  %88 = icmp sgt i64 %87, 0
  br i1 %88, label %91, label %89

89:                                               ; preds = %84
  %90 = load i32, i32* %6, align 4
  br label %112

91:                                               ; preds = %84
  %92 = load %struct.ASN1_TEMPLATE_st*, %struct.ASN1_TEMPLATE_st** %85, align 8
  br label %93

93:                                               ; preds = %91, %106
  %94 = phi i64 [ 0, %91 ], [ %109, %106 ]
  %95 = phi %struct.ASN1_TEMPLATE_st* [ %92, %91 ], [ %108, %106 ]
  %96 = call %struct.ASN1_TEMPLATE_st* @asn1_do_adb(%struct.ASN1_VALUE_st** %0, %struct.ASN1_TEMPLATE_st* %95, i32 1) #6
  %97 = icmp eq %struct.ASN1_TEMPLATE_st* %96, null
  br i1 %97, label %141, label %98

98:                                               ; preds = %93
  %99 = call %struct.ASN1_VALUE_st** @asn1_get_field_ptr(%struct.ASN1_VALUE_st** %0, %struct.ASN1_TEMPLATE_st* nonnull %96) #6
  %100 = call fastcc i32 @asn1_template_ex_i2d(%struct.ASN1_VALUE_st** %99, i8** null, %struct.ASN1_TEMPLATE_st* nonnull %96, i32 -1, i32 %78)
  %101 = icmp eq i32 %100, -1
  br i1 %101, label %141, label %102

102:                                              ; preds = %98
  %103 = load i32, i32* %6, align 4
  %104 = sub nsw i32 2147483647, %103
  %105 = icmp sgt i32 %100, %104
  br i1 %105, label %141, label %106

106:                                              ; preds = %102
  %107 = add nsw i32 %103, %100
  store i32 %107, i32* %6, align 4
  %108 = getelementptr inbounds %struct.ASN1_TEMPLATE_st, %struct.ASN1_TEMPLATE_st* %95, i64 1
  %109 = add nuw nsw i64 %94, 1
  %110 = load i64, i64* %86, align 8
  %111 = icmp sgt i64 %110, %109
  br i1 %111, label %93, label %112

112:                                              ; preds = %106, %89
  %113 = phi i32 [ %90, %89 ], [ %107, %106 ]
  %114 = call i32 @ASN1_object_size(i32 1, i32 %113, i32 %79) #6
  %115 = icmp eq i8** %1, null
  %116 = icmp eq i32 %114, -1
  %117 = or i1 %115, %116
  br i1 %117, label %141, label %118

118:                                              ; preds = %112
  %119 = load i32, i32* %6, align 4
  call void @ASN1_put_object(i8** nonnull %1, i32 1, i32 %119, i32 %79, i32 %78) #6
  %120 = load i64, i64* %86, align 8
  %121 = icmp sgt i64 %120, 0
  br i1 %121, label %122, label %136

122:                                              ; preds = %118
  %123 = load %struct.ASN1_TEMPLATE_st*, %struct.ASN1_TEMPLATE_st** %85, align 8
  br label %124

124:                                              ; preds = %122, %129
  %125 = phi i64 [ 0, %122 ], [ %133, %129 ]
  %126 = phi %struct.ASN1_TEMPLATE_st* [ %123, %122 ], [ %132, %129 ]
  %127 = call %struct.ASN1_TEMPLATE_st* @asn1_do_adb(%struct.ASN1_VALUE_st** %0, %struct.ASN1_TEMPLATE_st* %126, i32 1) #6
  %128 = icmp eq %struct.ASN1_TEMPLATE_st* %127, null
  br i1 %128, label %141, label %129

129:                                              ; preds = %124
  %130 = call %struct.ASN1_VALUE_st** @asn1_get_field_ptr(%struct.ASN1_VALUE_st** %0, %struct.ASN1_TEMPLATE_st* nonnull %127) #6
  %131 = call fastcc i32 @asn1_template_ex_i2d(%struct.ASN1_VALUE_st** %130, i8** %1, %struct.ASN1_TEMPLATE_st* nonnull %127, i32 -1, i32 %78)
  %132 = getelementptr inbounds %struct.ASN1_TEMPLATE_st, %struct.ASN1_TEMPLATE_st* %126, i64 1
  %133 = add nuw nsw i64 %125, 1
  %134 = load i64, i64* %86, align 8
  %135 = icmp sgt i64 %134, %133
  br i1 %135, label %124, label %136

136:                                              ; preds = %129, %118
  br i1 %80, label %137, label %140

137:                                              ; preds = %136
  %138 = call i32 %23(i32 7, %struct.ASN1_VALUE_st** %0, %struct.ASN1_ITEM_st* %2, i8* null) #6
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %141, label %140

140:                                              ; preds = %137, %136
  br label %141

141:                                              ; preds = %98, %102, %93, %124, %61, %60, %22, %137, %112, %81, %68, %43, %14, %140, %73, %63, %54, %40, %36, %35, %31, %29
  %142 = phi i32 [ %74, %73 ], [ %114, %140 ], [ %67, %63 ], [ -1, %40 ], [ %59, %54 ], [ -1, %35 ], [ %37, %36 ], [ %30, %29 ], [ %32, %31 ], [ 0, %14 ], [ 0, %43 ], [ 0, %68 ], [ 0, %81 ], [ %114, %112 ], [ 0, %137 ], [ 0, %22 ], [ 0, %61 ], [ 0, %60 ], [ 0, %124 ], [ 0, %93 ], [ -1, %102 ], [ -1, %98 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #6
  ret i32 %142
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @asn1_template_ex_i2d(%struct.ASN1_VALUE_st**, i8**, %struct.ASN1_TEMPLATE_st* nocapture readonly, i32, i32) unnamed_addr #0 {
  %6 = alloca %struct.ASN1_VALUE_st*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %struct.ASN1_VALUE_st*, align 8
  %9 = getelementptr inbounds %struct.ASN1_TEMPLATE_st, %struct.ASN1_TEMPLATE_st* %2, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = trunc i64 %10 to i32
  %12 = and i32 %11, 24
  %13 = icmp eq i32 %12, 0
  %14 = icmp ne i32 %3, -1
  br i1 %13, label %21, label %15

15:                                               ; preds = %5
  br i1 %14, label %214, label %16

16:                                               ; preds = %15
  %17 = getelementptr inbounds %struct.ASN1_TEMPLATE_st, %struct.ASN1_TEMPLATE_st* %2, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = trunc i64 %18 to i32
  %20 = and i32 %11, 192
  br label %24

21:                                               ; preds = %5
  %22 = and i32 %4, 192
  %23 = select i1 %14, i32 %22, i32 0
  br label %24

24:                                               ; preds = %21, %16
  %25 = phi i32 [ %19, %16 ], [ %3, %21 ]
  %26 = phi i32 [ %20, %16 ], [ %23, %21 ]
  %27 = and i32 %4, -193
  %28 = and i32 %11, 6
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %195, label %30

30:                                               ; preds = %24
  %31 = bitcast %struct.ASN1_VALUE_st** %0 to %struct.stack_st_ASN1_VALUE**
  %32 = load %struct.stack_st_ASN1_VALUE*, %struct.stack_st_ASN1_VALUE** %31, align 8
  %33 = bitcast %struct.ASN1_VALUE_st** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #6
  store %struct.ASN1_VALUE_st* inttoptr (i64 -6148914691236517206 to %struct.ASN1_VALUE_st*), %struct.ASN1_VALUE_st** %8, align 8
  %34 = icmp eq %struct.stack_st_ASN1_VALUE* %32, null
  br i1 %34, label %193, label %35

35:                                               ; preds = %30
  %36 = and i32 %11, 2
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %35
  %39 = and i32 %11, 4
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, i32 1, i32 2
  br label %42

42:                                               ; preds = %35, %38
  %43 = phi i32 [ %41, %38 ], [ 0, %35 ]
  %44 = icmp ne i32 %25, -1
  %45 = and i32 %11, 16
  %46 = icmp eq i32 %45, 0
  %47 = and i1 %46, %44
  %48 = icmp eq i32 %43, 0
  %49 = select i1 %48, i32 16, i32 17
  %50 = select i1 %47, i32 %25, i32 %49
  %51 = select i1 %47, i32 %26, i32 0
  %52 = bitcast %struct.stack_st_ASN1_VALUE* %32 to %struct.stack_st*
  %53 = call i64 @sk_num(%struct.stack_st* nonnull %52) #6
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %73, label %55

55:                                               ; preds = %42
  %56 = bitcast %struct.ASN1_VALUE_st** %8 to i8**
  %57 = getelementptr inbounds %struct.ASN1_TEMPLATE_st, %struct.ASN1_TEMPLATE_st* %2, i64 0, i32 4
  br label %58

58:                                               ; preds = %55, %68
  %59 = phi i32 [ 0, %55 ], [ %69, %68 ]
  %60 = phi i64 [ 0, %55 ], [ %70, %68 ]
  %61 = call i8* @sk_value(%struct.stack_st* nonnull %52, i64 %60) #6
  store i8* %61, i8** %56, align 8
  %62 = load %struct.ASN1_ITEM_st*, %struct.ASN1_ITEM_st** %57, align 8
  %63 = call i32 @ASN1_item_ex_i2d(%struct.ASN1_VALUE_st** nonnull %8, i8** null, %struct.ASN1_ITEM_st* %62, i32 -1, i32 %27)
  %64 = icmp eq i32 %63, -1
  %65 = sub nsw i32 2147483647, %63
  %66 = icmp sgt i32 %59, %65
  %67 = or i1 %64, %66
  br i1 %67, label %193, label %68

68:                                               ; preds = %58
  %69 = add nsw i32 %63, %59
  %70 = add nuw i64 %60, 1
  %71 = call i64 @sk_num(%struct.stack_st* nonnull %52) #6
  %72 = icmp ult i64 %70, %71
  br i1 %72, label %58, label %73

73:                                               ; preds = %68, %42
  %74 = phi i32 [ 0, %42 ], [ %69, %68 ]
  %75 = call i32 @ASN1_object_size(i32 1, i32 %74, i32 %50) #6
  %76 = icmp eq i32 %75, -1
  br i1 %76, label %193, label %77

77:                                               ; preds = %73
  %78 = icmp ne i32 %45, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %77
  %80 = call i32 @ASN1_object_size(i32 1, i32 %75, i32 %25) #6
  br label %81

81:                                               ; preds = %77, %79
  %82 = phi i32 [ %80, %79 ], [ %75, %77 ]
  %83 = icmp eq i8** %1, null
  %84 = icmp eq i32 %82, -1
  %85 = or i1 %83, %84
  br i1 %85, label %193, label %86

86:                                               ; preds = %81
  br i1 %78, label %87, label %88

87:                                               ; preds = %86
  call void @ASN1_put_object(i8** nonnull %1, i32 1, i32 %75, i32 %25, i32 %26) #6
  br label %88

88:                                               ; preds = %87, %86
  call void @ASN1_put_object(i8** nonnull %1, i32 1, i32 %74, i32 %50, i32 %51) #6
  %89 = getelementptr inbounds %struct.ASN1_TEMPLATE_st, %struct.ASN1_TEMPLATE_st* %2, i64 0, i32 4
  %90 = load %struct.ASN1_ITEM_st*, %struct.ASN1_ITEM_st** %89, align 8
  %91 = bitcast %struct.ASN1_VALUE_st** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %91) #6
  store %struct.ASN1_VALUE_st* inttoptr (i64 -6148914691236517206 to %struct.ASN1_VALUE_st*), %struct.ASN1_VALUE_st** %6, align 8
  %92 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %92) #6
  store i8* null, i8** %7, align 8
  br i1 %48, label %107, label %93

93:                                               ; preds = %88
  %94 = call i64 @sk_num(%struct.stack_st* nonnull %52) #6
  %95 = icmp ult i64 %94, 2
  br i1 %95, label %107, label %96

96:                                               ; preds = %93
  %97 = call i64 @sk_num(%struct.stack_st* nonnull %52) #6
  %98 = mul i64 %97, 24
  %99 = call i8* @OPENSSL_malloc(i64 %98) #6
  %100 = icmp eq i8* %99, null
  br i1 %100, label %192, label %101

101:                                              ; preds = %96
  %102 = bitcast i8* %99 to %struct.DER_ENC*
  %103 = sext i32 %74 to i64
  %104 = call i8* @OPENSSL_malloc(i64 %103) #6
  %105 = icmp eq i8* %104, null
  br i1 %105, label %106, label %119

106:                                              ; preds = %101
  call void @OPENSSL_free(i8* nonnull %99) #6
  br label %192

107:                                              ; preds = %93, %88
  %108 = call i64 @sk_num(%struct.stack_st* nonnull %52) #6
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %192, label %110

110:                                              ; preds = %107
  %111 = bitcast %struct.ASN1_VALUE_st** %6 to i8**
  br label %112

112:                                              ; preds = %110, %112
  %113 = phi i64 [ 0, %110 ], [ %116, %112 ]
  %114 = call i8* @sk_value(%struct.stack_st* nonnull %52, i64 %113) #6
  store i8* %114, i8** %111, align 8
  %115 = call i32 @ASN1_item_ex_i2d(%struct.ASN1_VALUE_st** nonnull %6, i8** %1, %struct.ASN1_ITEM_st* %90, i32 -1, i32 %27) #6
  %116 = add nuw i64 %113, 1
  %117 = call i64 @sk_num(%struct.stack_st* nonnull %52) #6
  %118 = icmp ult i64 %116, %117
  br i1 %118, label %112, label %192

119:                                              ; preds = %101
  store i8* %104, i8** %7, align 8
  %120 = call i64 @sk_num(%struct.stack_st* nonnull %52) #6
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %124

122:                                              ; preds = %119
  %123 = bitcast i8** %7 to i64*
  br label %143

124:                                              ; preds = %119
  %125 = bitcast %struct.ASN1_VALUE_st** %6 to i8**
  %126 = bitcast i8** %7 to i64*
  %127 = bitcast %struct.ASN1_VALUE_st** %6 to i64*
  br label %128

128:                                              ; preds = %124, %128
  %129 = phi %struct.DER_ENC* [ %102, %124 ], [ %140, %128 ]
  %130 = phi i64 [ 0, %124 ], [ %139, %128 ]
  %131 = call i8* @sk_value(%struct.stack_st* nonnull %52, i64 %130) #6
  store i8* %131, i8** %125, align 8
  %132 = load i64, i64* %126, align 8
  %133 = bitcast %struct.DER_ENC* %129 to i64*
  store i64 %132, i64* %133, align 8
  %134 = call i32 @ASN1_item_ex_i2d(%struct.ASN1_VALUE_st** nonnull %6, i8** nonnull %7, %struct.ASN1_ITEM_st* %90, i32 -1, i32 %27) #6
  %135 = getelementptr inbounds %struct.DER_ENC, %struct.DER_ENC* %129, i64 0, i32 1
  store i32 %134, i32* %135, align 8
  %136 = load i64, i64* %127, align 8
  %137 = getelementptr inbounds %struct.DER_ENC, %struct.DER_ENC* %129, i64 0, i32 2
  %138 = bitcast %struct.ASN1_VALUE_st** %137 to i64*
  store i64 %136, i64* %138, align 8
  %139 = add nuw i64 %130, 1
  %140 = getelementptr inbounds %struct.DER_ENC, %struct.DER_ENC* %129, i64 1
  %141 = call i64 @sk_num(%struct.stack_st* nonnull %52) #6
  %142 = icmp ult i64 %139, %141
  br i1 %142, label %128, label %143

143:                                              ; preds = %128, %122
  %144 = phi i64* [ %123, %122 ], [ %126, %128 ]
  %145 = call i64 @sk_num(%struct.stack_st* nonnull %52) #6
  call void @qsort(i8* nonnull %99, i64 %145, i64 24, i32 (i8*, i8*)* nonnull @der_cmp) #6
  %146 = bitcast i8** %1 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %144, align 8
  %148 = call i64 @sk_num(%struct.stack_st* nonnull %52) #6
  %149 = icmp eq i64 %148, 0
  %150 = load i8*, i8** %7, align 8
  br i1 %149, label %174, label %151

151:                                              ; preds = %143, %164
  %152 = phi i8* [ %173, %164 ], [ %150, %143 ]
  %153 = phi %struct.DER_ENC* [ %170, %164 ], [ %102, %143 ]
  %154 = phi i64 [ %169, %164 ], [ 0, %143 ]
  %155 = getelementptr inbounds %struct.DER_ENC, %struct.DER_ENC* %153, i64 0, i32 1
  %156 = load i32, i32* %155, align 8
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %164, label %158

158:                                              ; preds = %151
  %159 = sext i32 %156 to i64
  %160 = getelementptr inbounds %struct.DER_ENC, %struct.DER_ENC* %153, i64 0, i32 0
  %161 = load i8*, i8** %160, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %152, i8* align 1 %161, i64 %159, i1 false) #6
  %162 = load i32, i32* %155, align 8
  %163 = load i8*, i8** %7, align 8
  br label %164

164:                                              ; preds = %158, %151
  %165 = phi i8* [ %163, %158 ], [ %152, %151 ]
  %166 = phi i32 [ %162, %158 ], [ 0, %151 ]
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i8, i8* %165, i64 %167
  store i8* %168, i8** %7, align 8
  %169 = add nuw i64 %154, 1
  %170 = getelementptr inbounds %struct.DER_ENC, %struct.DER_ENC* %153, i64 1
  %171 = call i64 @sk_num(%struct.stack_st* nonnull %52) #6
  %172 = icmp ult i64 %169, %171
  %173 = load i8*, i8** %7, align 8
  br i1 %172, label %151, label %174

174:                                              ; preds = %164, %143
  %175 = phi i8* [ %150, %143 ], [ %173, %164 ]
  store i8* %175, i8** %1, align 8
  %176 = icmp eq i32 %43, 2
  br i1 %176, label %177, label %191

177:                                              ; preds = %174
  %178 = call i64 @sk_num(%struct.stack_st* nonnull %52) #6
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %191, label %180

180:                                              ; preds = %177, %180
  %181 = phi %struct.DER_ENC* [ %188, %180 ], [ %102, %177 ]
  %182 = phi i64 [ %187, %180 ], [ 0, %177 ]
  %183 = getelementptr inbounds %struct.DER_ENC, %struct.DER_ENC* %181, i64 0, i32 2
  %184 = bitcast %struct.ASN1_VALUE_st** %183 to i8**
  %185 = load i8*, i8** %184, align 8
  %186 = call i8* @sk_set(%struct.stack_st* nonnull %52, i64 %182, i8* %185) #6
  %187 = add nuw i64 %182, 1
  %188 = getelementptr inbounds %struct.DER_ENC, %struct.DER_ENC* %181, i64 1
  %189 = call i64 @sk_num(%struct.stack_st* nonnull %52) #6
  %190 = icmp ult i64 %187, %189
  br i1 %190, label %180, label %191

191:                                              ; preds = %180, %177, %174
  call void @OPENSSL_free(i8* nonnull %99) #6
  call void @OPENSSL_free(i8* nonnull %104) #6
  br label %192

192:                                              ; preds = %112, %107, %96, %106, %191
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %91) #6
  br label %193

193:                                              ; preds = %58, %81, %73, %30, %192
  %194 = phi i32 [ %82, %192 ], [ 0, %30 ], [ -1, %73 ], [ %82, %81 ], [ -1, %58 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #6
  br label %214

195:                                              ; preds = %24
  %196 = and i32 %11, 16
  %197 = icmp eq i32 %196, 0
  %198 = getelementptr inbounds %struct.ASN1_TEMPLATE_st, %struct.ASN1_TEMPLATE_st* %2, i64 0, i32 4
  %199 = load %struct.ASN1_ITEM_st*, %struct.ASN1_ITEM_st** %198, align 8
  br i1 %197, label %211, label %200

200:                                              ; preds = %195
  %201 = tail call i32 @ASN1_item_ex_i2d(%struct.ASN1_VALUE_st** %0, i8** null, %struct.ASN1_ITEM_st* %199, i32 -1, i32 %27)
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %214, label %203

203:                                              ; preds = %200
  %204 = tail call i32 @ASN1_object_size(i32 1, i32 %201, i32 %25) #6
  %205 = icmp ne i8** %1, null
  %206 = icmp ne i32 %204, -1
  %207 = and i1 %205, %206
  br i1 %207, label %208, label %214

208:                                              ; preds = %203
  tail call void @ASN1_put_object(i8** nonnull %1, i32 1, i32 %201, i32 %25, i32 %26) #6
  %209 = load %struct.ASN1_ITEM_st*, %struct.ASN1_ITEM_st** %198, align 8
  %210 = tail call i32 @ASN1_item_ex_i2d(%struct.ASN1_VALUE_st** %0, i8** nonnull %1, %struct.ASN1_ITEM_st* %209, i32 -1, i32 %27)
  br label %214

211:                                              ; preds = %195
  %212 = or i32 %26, %27
  %213 = tail call i32 @ASN1_item_ex_i2d(%struct.ASN1_VALUE_st** %0, i8** %1, %struct.ASN1_ITEM_st* %199, i32 %25, i32 %212)
  br label %214

214:                                              ; preds = %203, %208, %200, %15, %211, %193
  %215 = phi i32 [ %194, %193 ], [ %213, %211 ], [ -1, %15 ], [ 0, %200 ], [ %204, %208 ], [ %204, %203 ]
  ret i32 %215
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @asn1_i2d_ex_primitive(%struct.ASN1_VALUE_st** nocapture readonly, i8**, %struct.ASN1_ITEM_st* nocapture readonly, i32, i32) unnamed_addr #0 {
  %6 = alloca i32, align 4
  %7 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #6
  %8 = getelementptr inbounds %struct.ASN1_ITEM_st, %struct.ASN1_ITEM_st* %2, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = trunc i64 %9 to i32
  store i32 %10, i32* %6, align 4
  %11 = call fastcc i32 @asn1_ex_i2c(%struct.ASN1_VALUE_st** %0, i8* null, i32* nonnull %6, %struct.ASN1_ITEM_st* %2)
  %12 = load i32, i32* %6, align 4
  switch i32 %12, label %13 [
    i32 -3, label %14
    i32 17, label %14
    i32 16, label %14
  ]

13:                                               ; preds = %5
  br label %14

14:                                               ; preds = %5, %5, %5, %13
  %15 = phi i32 [ 1, %13 ], [ 0, %5 ], [ 0, %5 ], [ 0, %5 ]
  %16 = icmp eq i32 %11, -1
  br i1 %16, label %34, label %17

17:                                               ; preds = %14
  %18 = icmp eq i32 %3, -1
  %19 = select i1 %18, i32 %12, i32 %3
  %20 = icmp eq i8** %1, null
  br i1 %20, label %30, label %21

21:                                               ; preds = %17
  %22 = icmp eq i32 %15, 0
  br i1 %22, label %24, label %23

23:                                               ; preds = %21
  tail call void @ASN1_put_object(i8** nonnull %1, i32 0, i32 %11, i32 %19, i32 %4) #6
  br label %24

24:                                               ; preds = %21, %23
  %25 = load i8*, i8** %1, align 8
  %26 = call fastcc i32 @asn1_ex_i2c(%struct.ASN1_VALUE_st** %0, i8* %25, i32* nonnull %6, %struct.ASN1_ITEM_st* %2)
  %27 = load i8*, i8** %1, align 8
  %28 = sext i32 %11 to i64
  %29 = getelementptr inbounds i8, i8* %27, i64 %28
  store i8* %29, i8** %1, align 8
  br label %30

30:                                               ; preds = %17, %24
  %31 = icmp eq i32 %15, 0
  br i1 %31, label %34, label %32

32:                                               ; preds = %30
  %33 = tail call i32 @ASN1_object_size(i32 0, i32 %11, i32 %19) #6
  br label %34

34:                                               ; preds = %30, %14, %32
  %35 = phi i32 [ %33, %32 ], [ 0, %14 ], [ %11, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #6
  ret i32 %35
}

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #2

declare i32 @asn1_get_choice_selector(%struct.ASN1_VALUE_st**, %struct.ASN1_ITEM_st*) local_unnamed_addr #2

declare %struct.ASN1_VALUE_st** @asn1_get_field_ptr(%struct.ASN1_VALUE_st**, %struct.ASN1_TEMPLATE_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @asn1_enc_restore(i32*, i8**, %struct.ASN1_VALUE_st**, %struct.ASN1_ITEM_st*) local_unnamed_addr #2

declare %struct.ASN1_TEMPLATE_st* @asn1_do_adb(%struct.ASN1_VALUE_st**, %struct.ASN1_TEMPLATE_st*, i32) local_unnamed_addr #2

declare i32 @ASN1_object_size(i32, i32, i32) local_unnamed_addr #2

declare void @ASN1_put_object(i8**, i32, i32, i32, i32) local_unnamed_addr #2

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #2

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #2

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #2

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

; Function Attrs: nofree
declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @der_cmp(i8* nocapture readonly, i8* nocapture readonly) #4 {
  %3 = getelementptr inbounds i8, i8* %0, i64 8
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 8
  %7 = bitcast i8* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = icmp slt i32 %5, %8
  %10 = select i1 %9, i32 %5, i32 %8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %20, label %12

12:                                               ; preds = %2
  %13 = sext i32 %10 to i64
  %14 = bitcast i8* %1 to i8**
  %15 = load i8*, i8** %14, align 8
  %16 = bitcast i8* %0 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = tail call i32 @memcmp(i8* %17, i8* %15, i64 %13) #7
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %2, %12
  %21 = sub nsw i32 %5, %8
  br label %22

22:                                               ; preds = %12, %20
  %23 = phi i32 [ %21, %20 ], [ %18, %12 ]
  ret i32 %23
}

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i8* @sk_set(%struct.stack_st*, i64, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @asn1_ex_i2c(%struct.ASN1_VALUE_st** nocapture readonly, i8*, i32* nocapture, %struct.ASN1_ITEM_st* nocapture readonly) unnamed_addr #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  store i8* %1, i8** %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #6
  store i8 -86, i8* %6, align 1
  %7 = getelementptr inbounds %struct.ASN1_ITEM_st, %struct.ASN1_ITEM_st* %3, i64 0, i32 0
  %8 = load i8, i8* %7, align 8
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %14

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.ASN1_ITEM_st, %struct.ASN1_ITEM_st* %3, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 1
  br i1 %13, label %34, label %14

14:                                               ; preds = %10, %4
  %15 = load %struct.ASN1_VALUE_st*, %struct.ASN1_VALUE_st** %0, align 8
  %16 = icmp eq %struct.ASN1_VALUE_st* %15, null
  %17 = bitcast %struct.ASN1_VALUE_st* %15 to %struct.asn1_string_st*
  br i1 %16, label %95, label %18

18:                                               ; preds = %14
  %19 = icmp eq i8 %8, 5
  br i1 %19, label %20, label %23

20:                                               ; preds = %18
  %21 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %17, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  store i32 %22, i32* %2, align 4
  br label %36

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.ASN1_ITEM_st, %struct.ASN1_ITEM_st* %3, i64 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %25, -4
  br i1 %26, label %27, label %34

27:                                               ; preds = %23
  %28 = bitcast %struct.ASN1_VALUE_st** %0 to %struct.asn1_type_st**
  %29 = load %struct.asn1_type_st*, %struct.asn1_type_st** %28, align 8
  %30 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %29, i64 0, i32 0
  %31 = load i32, i32* %30, align 8
  store i32 %31, i32* %2, align 4
  %32 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %29, i64 0, i32 1
  %33 = bitcast %union.anon* %32 to %struct.ASN1_VALUE_st**
  br label %36

34:                                               ; preds = %10, %23
  %35 = load i32, i32* %2, align 4
  br label %36

36:                                               ; preds = %27, %34, %20
  %37 = phi %struct.ASN1_VALUE_st** [ %0, %20 ], [ %33, %27 ], [ %0, %34 ]
  %38 = phi i32 [ %22, %20 ], [ %31, %27 ], [ %35, %34 ]
  switch i32 %38, label %80 [
    i32 6, label %39
    i32 5, label %95
    i32 1, label %49
    i32 3, label %68
    i32 2, label %74
    i32 10, label %74
  ]

39:                                               ; preds = %36
  %40 = bitcast %struct.ASN1_VALUE_st** %37 to %struct.asn1_object_st**
  %41 = load %struct.asn1_object_st*, %struct.asn1_object_st** %40, align 8
  %42 = getelementptr inbounds %struct.asn1_object_st, %struct.asn1_object_st* %41, i64 0, i32 4
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %struct.asn1_object_st, %struct.asn1_object_st* %41, i64 0, i32 3
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i8* %43, null
  %47 = icmp eq i32 %45, 0
  %48 = or i1 %46, %47
  br i1 %48, label %95, label %87

49:                                               ; preds = %36
  %50 = bitcast %struct.ASN1_VALUE_st** %37 to i32*
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, -1
  br i1 %52, label %95, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.ASN1_ITEM_st, %struct.ASN1_ITEM_st* %3, i64 0, i32 1
  %55 = load i64, i64* %54, align 8
  %56 = icmp eq i64 %55, -4
  br i1 %56, label %65, label %57

57:                                               ; preds = %53
  %58 = icmp eq i32 %51, 0
  %59 = getelementptr inbounds %struct.ASN1_ITEM_st, %struct.ASN1_ITEM_st* %3, i64 0, i32 5
  %60 = load i64, i64* %59, align 8
  br i1 %58, label %63, label %61

61:                                               ; preds = %57
  %62 = icmp sgt i64 %60, 0
  br i1 %62, label %95, label %65

63:                                               ; preds = %57
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %95, label %65

65:                                               ; preds = %61, %63, %53
  %66 = icmp ne i32 %51, 0
  %67 = sext i1 %66 to i8
  store i8 %67, i8* %6, align 1
  br label %87

68:                                               ; preds = %36
  %69 = bitcast %struct.ASN1_VALUE_st** %37 to %struct.asn1_string_st**
  %70 = load %struct.asn1_string_st*, %struct.asn1_string_st** %69, align 8
  %71 = icmp eq i8* %1, null
  %72 = select i1 %71, i8** null, i8** %5
  %73 = call i32 @i2c_ASN1_BIT_STRING(%struct.asn1_string_st* %70, i8** %72) #6
  br label %95

74:                                               ; preds = %36, %36
  %75 = bitcast %struct.ASN1_VALUE_st** %37 to %struct.asn1_string_st**
  %76 = load %struct.asn1_string_st*, %struct.asn1_string_st** %75, align 8
  %77 = icmp eq i8* %1, null
  %78 = select i1 %77, i8** null, i8** %5
  %79 = call i32 @i2c_ASN1_INTEGER(%struct.asn1_string_st* %76, i8** %78) #6
  br label %95

80:                                               ; preds = %36
  %81 = bitcast %struct.ASN1_VALUE_st** %37 to %struct.asn1_string_st**
  %82 = load %struct.asn1_string_st*, %struct.asn1_string_st** %81, align 8
  %83 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %82, i64 0, i32 2
  %84 = load i8*, i8** %83, align 8
  %85 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %82, i64 0, i32 0
  %86 = load i32, i32* %85, align 8
  br label %87

87:                                               ; preds = %39, %80, %65
  %88 = phi i8* [ %84, %80 ], [ %6, %65 ], [ %43, %39 ]
  %89 = phi i32 [ %86, %80 ], [ 1, %65 ], [ %45, %39 ]
  %90 = icmp ne i8* %1, null
  %91 = icmp ne i32 %89, 0
  %92 = and i1 %90, %91
  br i1 %92, label %93, label %95

93:                                               ; preds = %87
  %94 = sext i32 %89 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %1, i8* align 1 %88, i64 %94, i1 false) #6
  br label %95

95:                                               ; preds = %36, %93, %87, %63, %61, %49, %39, %14, %74, %68
  %96 = phi i32 [ %79, %74 ], [ %73, %68 ], [ -1, %14 ], [ -1, %39 ], [ -1, %49 ], [ -1, %61 ], [ -1, %63 ], [ %89, %87 ], [ %89, %93 ], [ 0, %36 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #6
  ret i32 %96
}

declare i32 @i2c_ASN1_BIT_STRING(%struct.asn1_string_st*, i8**) local_unnamed_addr #2

declare i32 @i2c_ASN1_INTEGER(%struct.asn1_string_st*, i8**) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
