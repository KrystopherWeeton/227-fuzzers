; ModuleID = '../../third_party/skia/modules/sksg/src/SkSGGeometryNode.cpp'
source_filename = "../../third_party/skia/modules/sksg/src/SkSGGeometryNode.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sksg::GeometryNode" = type { %"class.sksg::Node.base", [6 x i8] }
%"class.sksg::Node.base" = type <{ %class.SkRefCnt.base, [4 x i8], %union.anon, %struct.SkRect, i16 }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%union.anon = type { %"class.sksg::Node"* }
%"class.sksg::Node" = type <{ %class.SkRefCnt.base, [4 x i8], %union.anon, %struct.SkRect, i16, [6 x i8] }>
%struct.SkRect = type { float, float, float, float }
%class.SkCanvas = type opaque
%class.SkPaint = type opaque
%struct.SkPoint = type { float, float }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>

$_ZN4sksg12GeometryNodeD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZTVN4sksg12GeometryNodeE = comdat any

@_ZTVN4sksg12GeometryNodeE = linkonce_odr hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sksg::Node"*)* @_ZN4sksg4NodeD2Ev to i8*), i8* bitcast (void (%"class.sksg::GeometryNode"*)* @_ZN4sksg12GeometryNodeD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg12GeometryNodeC2Ev(%"class.sksg::GeometryNode"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.sksg::GeometryNode"* %0 to %"class.sksg::Node"*
  tail call void @_ZN4sksg4NodeC2Ej(%"class.sksg::Node"* %2, i32 1) #5
  %3 = getelementptr inbounds %"class.sksg::GeometryNode", %"class.sksg::GeometryNode"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN4sksg12GeometryNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

declare void @_ZN4sksg4NodeC2Ej(%"class.sksg::Node"*, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4sksg12GeometryNode4clipEP8SkCanvasb(%"class.sksg::GeometryNode"*, %class.SkCanvas*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.sksg::GeometryNode"* %0 to void (%"class.sksg::GeometryNode"*, %class.SkCanvas*, i1)***
  %5 = load void (%"class.sksg::GeometryNode"*, %class.SkCanvas*, i1)**, void (%"class.sksg::GeometryNode"*, %class.SkCanvas*, i1)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.sksg::GeometryNode"*, %class.SkCanvas*, i1)*, void (%"class.sksg::GeometryNode"*, %class.SkCanvas*, i1)** %5, i64 4
  %7 = load void (%"class.sksg::GeometryNode"*, %class.SkCanvas*, i1)*, void (%"class.sksg::GeometryNode"*, %class.SkCanvas*, i1)** %6, align 8
  tail call void %7(%"class.sksg::GeometryNode"* %0, %class.SkCanvas* %1, i1 zeroext %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4sksg12GeometryNode4drawEP8SkCanvasRK7SkPaint(%"class.sksg::GeometryNode"*, %class.SkCanvas*, %class.SkPaint*) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.sksg::GeometryNode"* %0 to void (%"class.sksg::GeometryNode"*, %class.SkCanvas*, %class.SkPaint*)***
  %5 = load void (%"class.sksg::GeometryNode"*, %class.SkCanvas*, %class.SkPaint*)**, void (%"class.sksg::GeometryNode"*, %class.SkCanvas*, %class.SkPaint*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.sksg::GeometryNode"*, %class.SkCanvas*, %class.SkPaint*)*, void (%"class.sksg::GeometryNode"*, %class.SkCanvas*, %class.SkPaint*)** %5, i64 5
  %7 = load void (%"class.sksg::GeometryNode"*, %class.SkCanvas*, %class.SkPaint*)*, void (%"class.sksg::GeometryNode"*, %class.SkCanvas*, %class.SkPaint*)** %6, align 8
  tail call void %7(%"class.sksg::GeometryNode"* %0, %class.SkCanvas* %1, %class.SkPaint* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4sksg12GeometryNode8containsERK7SkPoint(%"class.sksg::GeometryNode"*, %struct.SkPoint* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %"class.sksg::GeometryNode", %"class.sksg::GeometryNode"* %0, i64 0, i32 0, i32 3, i32 0
  %8 = load float, float* %7, align 4
  %9 = fcmp ugt float %8, %4
  br i1 %9, label %28, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.sksg::GeometryNode", %"class.sksg::GeometryNode"* %0, i64 0, i32 0, i32 3, i32 2
  %12 = load float, float* %11, align 4
  %13 = fcmp ogt float %12, %4
  br i1 %13, label %14, label %28

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.sksg::GeometryNode", %"class.sksg::GeometryNode"* %0, i64 0, i32 0, i32 3, i32 1
  %16 = load float, float* %15, align 4
  %17 = fcmp ugt float %16, %6
  br i1 %17, label %28, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.sksg::GeometryNode", %"class.sksg::GeometryNode"* %0, i64 0, i32 0, i32 3, i32 3
  %20 = load float, float* %19, align 4
  %21 = fcmp ogt float %20, %6
  br i1 %21, label %22, label %28

22:                                               ; preds = %18
  %23 = bitcast %"class.sksg::GeometryNode"* %0 to i1 (%"class.sksg::GeometryNode"*, %struct.SkPoint*)***
  %24 = load i1 (%"class.sksg::GeometryNode"*, %struct.SkPoint*)**, i1 (%"class.sksg::GeometryNode"*, %struct.SkPoint*)*** %23, align 8
  %25 = getelementptr inbounds i1 (%"class.sksg::GeometryNode"*, %struct.SkPoint*)*, i1 (%"class.sksg::GeometryNode"*, %struct.SkPoint*)** %24, i64 6
  %26 = load i1 (%"class.sksg::GeometryNode"*, %struct.SkPoint*)*, i1 (%"class.sksg::GeometryNode"*, %struct.SkPoint*)** %25, align 8
  %27 = tail call zeroext i1 %26(%"class.sksg::GeometryNode"* %0, %struct.SkPoint* dereferenceable(8) %1) #5
  br label %28

28:                                               ; preds = %2, %10, %14, %18, %22
  %29 = phi i1 [ %27, %22 ], [ false, %18 ], [ false, %14 ], [ false, %10 ], [ false, %2 ]
  ret i1 %29
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4sksg12GeometryNode6asPathEv(%class.SkPath* noalias sret, %"class.sksg::GeometryNode"*) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.sksg::GeometryNode"* %1 to void (%class.SkPath*, %"class.sksg::GeometryNode"*)***
  %4 = load void (%class.SkPath*, %"class.sksg::GeometryNode"*)**, void (%class.SkPath*, %"class.sksg::GeometryNode"*)*** %3, align 8
  %5 = getelementptr inbounds void (%class.SkPath*, %"class.sksg::GeometryNode"*)*, void (%class.SkPath*, %"class.sksg::GeometryNode"*)** %4, i64 7
  %6 = load void (%class.SkPath*, %"class.sksg::GeometryNode"*)*, void (%class.SkPath*, %"class.sksg::GeometryNode"*)** %5, align 8
  tail call void %6(%class.SkPath* sret %0, %"class.sksg::GeometryNode"* %1) #5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sksg12GeometryNodeD0Ev(%"class.sksg::GeometryNode"*) unnamed_addr #3 comdat align 2 {
  tail call void @llvm.trap() #6
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #5
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
