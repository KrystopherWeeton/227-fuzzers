; ModuleID = '../../chrome/browser/ui/views/autofill/autofill_popup_view_utils.cc'
source_filename = "../../chrome/browser/ui/views/autofill/autofill_popup_view_utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_Z27NormalizeValueBasedOnBoundsiii(i32, i32, i32) local_unnamed_addr #0 {
  %4 = icmp slt i32 %2, %1
  %5 = select i1 %4, i32 %2, i32 %1
  %6 = icmp sgt i32 %5, %0
  %7 = select i1 %6, i32 %5, i32 %0
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z23CalculatePopupXAndWidthiRKN3gfx4RectES2_bPS0_(i32, %"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::Rect"* nocapture readonly dereferenceable(16), i1 zeroext, %"class.gfx::Rect"* nocapture) local_unnamed_addr #1 {
  %6 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, %7
  %11 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, %10
  %14 = select i1 %13, i32 %12, i32 %10
  %15 = icmp sgt i32 %14, %7
  %16 = select i1 %15, i32 %14, i32 %7
  %17 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, %12
  %20 = icmp slt i32 %19, %10
  %21 = select i1 %20, i32 %19, i32 %10
  %22 = icmp sgt i32 %21, %7
  %23 = select i1 %22, i32 %21, i32 %7
  %24 = sub nsw i32 %10, %16
  %25 = sub nsw i32 %23, %7
  %26 = icmp slt i32 %25, %24
  %27 = select i1 %26, i32 %24, i32 %25
  %28 = icmp slt i32 %27, %0
  %29 = select i1 %28, i32 %27, i32 %0
  br i1 %3, label %30, label %34

30:                                               ; preds = %5
  %31 = icmp sge i32 %25, %29
  %32 = icmp sge i32 %25, %24
  %33 = or i1 %32, %31
  br label %38

34:                                               ; preds = %5
  %35 = icmp slt i32 %24, %29
  %36 = icmp slt i32 %24, %25
  %37 = and i1 %36, %35
  br label %38

38:                                               ; preds = %34, %30
  %39 = phi i1 [ %33, %30 ], [ %37, %34 ]
  %40 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %4, i64 0, i32 0, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = icmp sgt i32 %41, 0
  %43 = icmp sgt i32 %29, 0
  %44 = and i1 %43, %42
  %45 = sub nuw nsw i32 2147483647, %41
  %46 = icmp ult i32 %45, %29
  %47 = and i1 %46, %44
  %48 = select i1 %47, i32 %45, i32 %29
  %49 = icmp sgt i32 %48, 0
  %50 = select i1 %49, i32 %48, i32 0
  %51 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %4, i64 0, i32 1, i32 0
  %52 = sub nsw i32 %23, %29
  %53 = select i1 %39, i32 %52, i32 %16
  store i32 %53, i32* %40, align 4
  %54 = icmp sgt i32 %53, 0
  %55 = and i1 %54, %49
  %56 = sub nuw nsw i32 2147483647, %53
  %57 = icmp ult i32 %56, %50
  %58 = and i1 %55, %57
  %59 = select i1 %58, i32 %56, i32 %50
  %60 = icmp sgt i32 %59, 0
  %61 = select i1 %60, i32 %59, i32 0
  store i32 %61, i32* %51, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z24CalculatePopupYAndHeightiRKN3gfx4RectES2_PS0_(i32, %"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::Rect"*) local_unnamed_addr #1 {
  %5 = alloca %"class.gfx::Rect", align 4
  %6 = alloca %"class.gfx::Rect", align 4
  %7 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = add nsw i32 %10, %8
  %12 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp slt i32 %13, %11
  %15 = select i1 %14, i32 %13, i32 %11
  %16 = icmp sgt i32 %15, %8
  %17 = select i1 %16, i32 %15, i32 %8
  %18 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = add nsw i32 %19, %13
  %21 = icmp slt i32 %20, %11
  %22 = select i1 %21, i32 %20, i32 %11
  %23 = icmp sgt i32 %22, %8
  %24 = select i1 %23, i32 %22, i32 %8
  %25 = sub nsw i32 %17, %8
  %26 = sub nsw i32 %11, %24
  %27 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = icmp sgt i32 %28, 0
  %30 = icmp sgt i32 %0, 0
  %31 = and i1 %30, %29
  %32 = sub nuw nsw i32 2147483647, %28
  %33 = icmp ult i32 %32, %0
  %34 = and i1 %33, %31
  %35 = select i1 %34, i32 %32, i32 %0
  %36 = icmp sgt i32 %35, 0
  %37 = select i1 %36, i32 %35, i32 0
  %38 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 1, i32 1
  store i32 %17, i32* %27, align 4
  %39 = icmp sgt i32 %17, 0
  %40 = and i1 %39, %36
  %41 = sub nuw nsw i32 2147483647, %17
  %42 = icmp ult i32 %41, %37
  %43 = and i1 %40, %42
  %44 = select i1 %43, i32 %41, i32 %37
  %45 = icmp sgt i32 %44, 0
  %46 = select i1 %45, i32 %44, i32 0
  store i32 %46, i32* %38, align 4
  %47 = icmp slt i32 %26, %0
  %48 = icmp slt i32 %26, %25
  %49 = and i1 %47, %48
  br i1 %49, label %75, label %50

50:                                               ; preds = %4
  %51 = bitcast %"class.gfx::Rect"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51) #5
  %52 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 0, i32 0
  %53 = load i32, i32* %52, align 4
  %54 = load i32, i32* %12, align 4
  %55 = load i32, i32* %18, align 4
  %56 = add nsw i32 %55, %54
  %57 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 1, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %5, i64 0, i32 0, i32 0
  store i32 %53, i32* %59, align 4
  %60 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %5, i64 0, i32 0, i32 1
  store i32 %56, i32* %60, align 4
  %61 = icmp sgt i32 %53, 0
  %62 = icmp sgt i32 %58, 0
  %63 = and i1 %61, %62
  %64 = sub nuw nsw i32 2147483647, %53
  %65 = icmp ult i32 %64, %58
  %66 = and i1 %65, %63
  %67 = select i1 %66, i32 %64, i32 %58
  %68 = icmp sgt i32 %56, 0
  %69 = icmp sgt i32 %26, 0
  %70 = and i1 %69, %68
  %71 = sub nuw nsw i32 2147483647, %56
  %72 = icmp ult i32 %71, %26
  %73 = and i1 %72, %70
  %74 = select i1 %73, i32 %71, i32 %26
  br label %98

75:                                               ; preds = %4
  %76 = bitcast %"class.gfx::Rect"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %76) #5
  %77 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 0, i32 0
  %78 = load i32, i32* %77, align 4
  %79 = load i32, i32* %7, align 4
  %80 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 1, i32 0
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %6, i64 0, i32 0, i32 0
  store i32 %78, i32* %82, align 4
  %83 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %6, i64 0, i32 0, i32 1
  store i32 %79, i32* %83, align 4
  %84 = icmp sgt i32 %78, 0
  %85 = icmp sgt i32 %81, 0
  %86 = and i1 %84, %85
  %87 = sub nuw nsw i32 2147483647, %78
  %88 = icmp ult i32 %87, %81
  %89 = and i1 %88, %86
  %90 = select i1 %89, i32 %87, i32 %81
  %91 = icmp sgt i32 %79, 0
  %92 = icmp sgt i32 %25, 0
  %93 = and i1 %92, %91
  %94 = sub nuw nsw i32 2147483647, %79
  %95 = icmp ult i32 %94, %25
  %96 = and i1 %95, %93
  %97 = select i1 %96, i32 %94, i32 %25
  br label %98

98:                                               ; preds = %75, %50
  %99 = phi %"class.gfx::Rect"* [ %6, %75 ], [ %5, %50 ]
  %100 = phi i32 [ %90, %75 ], [ %67, %50 ]
  %101 = phi i32 [ %97, %75 ], [ %74, %50 ]
  %102 = phi i8* [ %76, %75 ], [ %51, %50 ]
  %103 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %99, i64 0, i32 1, i32 0
  %104 = icmp sgt i32 %100, 0
  %105 = select i1 %104, i32 %100, i32 0
  store i32 %105, i32* %103, align 4
  %106 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %99, i64 0, i32 1, i32 1
  %107 = icmp sgt i32 %101, 0
  %108 = select i1 %107, i32 %101, i32 0
  store i32 %108, i32* %106, align 4
  call void @_ZN3gfx4Rect11AdjustToFitERKS0_(%"class.gfx::Rect"* %3, %"class.gfx::Rect"* nonnull dereferenceable(16) %99) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %102) #5
  ret void
}

declare void @_ZN3gfx4Rect11AdjustToFitERKS0_(%"class.gfx::Rect"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_Z20CalculatePopupBoundsRKN3gfx4SizeERKNS_4RectES5_b(%"class.gfx::Size"* nocapture readonly dereferenceable(8), %"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::Rect"* nocapture readonly dereferenceable(16), i1 zeroext) local_unnamed_addr #1 {
  %5 = alloca { i64, i64 }, align 8
  %6 = bitcast { i64, i64 }* %5 to %"class.gfx::Rect"*
  %7 = bitcast { i64, i64 }* %5 to i32*
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  %9 = bitcast i64* %8 to i32*
  %10 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 16, i1 false) #5
  %11 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %0, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = add nsw i32 %16, %14
  %18 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = icmp slt i32 %19, %17
  %21 = select i1 %20, i32 %19, i32 %17
  %22 = icmp sgt i32 %21, %14
  %23 = select i1 %22, i32 %21, i32 %14
  %24 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, %19
  %27 = icmp slt i32 %26, %17
  %28 = select i1 %27, i32 %26, i32 %17
  %29 = icmp sgt i32 %28, %14
  %30 = select i1 %29, i32 %28, i32 %14
  %31 = sub nsw i32 %17, %23
  %32 = sub nsw i32 %30, %14
  %33 = icmp slt i32 %32, %31
  %34 = select i1 %33, i32 %31, i32 %32
  %35 = icmp slt i32 %34, %12
  %36 = select i1 %35, i32 %34, i32 %12
  br i1 %3, label %37, label %41

37:                                               ; preds = %4
  %38 = icmp sge i32 %32, %36
  %39 = icmp sge i32 %32, %31
  %40 = or i1 %39, %38
  br label %45

41:                                               ; preds = %4
  %42 = icmp slt i32 %31, %36
  %43 = icmp slt i32 %31, %32
  %44 = and i1 %43, %42
  br label %45

45:                                               ; preds = %37, %41
  %46 = phi i1 [ %40, %37 ], [ %44, %41 ]
  %47 = icmp sgt i32 %36, 0
  %48 = select i1 %47, i32 %36, i32 0
  %49 = sub nsw i32 %30, %36
  %50 = select i1 %46, i32 %49, i32 %23
  store i32 %50, i32* %7, align 8
  %51 = icmp sgt i32 %50, 0
  %52 = and i1 %51, %47
  %53 = sub nuw nsw i32 2147483647, %50
  %54 = icmp ult i32 %53, %48
  %55 = and i1 %52, %54
  %56 = select i1 %55, i32 %53, i32 %48
  %57 = icmp sgt i32 %56, 0
  %58 = select i1 %57, i32 %56, i32 0
  store i32 %58, i32* %9, align 8
  %59 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %0, i64 0, i32 1
  %60 = load i32, i32* %59, align 4
  call void @_Z24CalculatePopupYAndHeightiRKN3gfx4RectES2_PS0_(i32 %60, %"class.gfx::Rect"* dereferenceable(16) %1, %"class.gfx::Rect"* dereferenceable(16) %2, %"class.gfx::Rect"* nonnull %6)
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  %62 = load i64, i64* %61, align 8
  %63 = insertvalue { i64, i64 } undef, i64 %62, 0
  %64 = load i64, i64* %8, align 8
  %65 = insertvalue { i64, i64 } %63, i64 %64, 1
  ret { i64, i64 } %65
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_Z19CanShowDropdownHereiRKN3gfx4RectES2_(i32, %"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::Rect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %5, %7
  %9 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = add nsw i32 %10, %7
  br i1 %8, label %12, label %17

12:                                               ; preds = %3
  %13 = sub nsw i32 %5, %7
  %14 = icmp slt i32 %13, %0
  %15 = icmp sge i32 %5, %11
  %16 = or i1 %14, %15
  br i1 %16, label %17, label %27

17:                                               ; preds = %3, %12
  %18 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = add nsw i32 %19, %5
  %21 = icmp sgt i32 %20, %7
  %22 = icmp sgt i32 %11, %20
  %23 = and i1 %21, %22
  %24 = sub nsw i32 %11, %20
  %25 = icmp sge i32 %24, %0
  %26 = and i1 %23, %25
  br label %27

27:                                               ; preds = %12, %17
  %28 = phi i1 [ %26, %17 ], [ true, %12 ]
  ret i1 %28
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
