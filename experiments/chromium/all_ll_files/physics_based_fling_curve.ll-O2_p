; ModuleID = '../../ui/events/gestures/physics_based_fling_curve.cc'
source_filename = "../../ui/events/gestures/physics_based_fling_curve.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.ui::PhysicsBasedFlingCurve" = type { %"class.ui::GestureCurve", %"class.base::TimeTicks", %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::Vector2dF", %"class.base::TimeDelta", %"class.gfx::CubicBezier", %"class.base::TimeDelta", %"class.gfx::Vector2dF", %"class.gfx::Vector2dF" }
%"class.ui::GestureCurve" = type { i32 (...)** }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::CubicBezier" = type { double, double, double, double, double, double, double, double, double, double, [11 x double] }
%"class.base::TimeDelta" = type { i64 }
%"class.gfx::Vector2dF" = type { float, float }
%"class.gfx::Size" = type { i32, i32 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZNK4base9TimeDeltadvES0_ = comdat any

$_ZNK4base9TimeDeltamiES0_ = comdat any

@_ZTVN2ui22PhysicsBasedFlingCurveE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.ui::PhysicsBasedFlingCurve"*)* @_ZN2ui22PhysicsBasedFlingCurveD2Ev to i8*), i8* bitcast (void (%"class.ui::PhysicsBasedFlingCurve"*)* @_ZN2ui22PhysicsBasedFlingCurveD0Ev to i8*), i8* bitcast (i1 (%"class.ui::PhysicsBasedFlingCurve"*, i64, %"class.gfx::Vector2dF"*, %"class.gfx::Vector2dF"*)* @_ZN2ui22PhysicsBasedFlingCurve19ComputeScrollOffsetEN4base9TimeTicksEPN3gfx9Vector2dFES5_ to i8*)] }, align 8
@.str = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"!is_zero() || !a.is_zero()\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"!is_inf() || !a.is_inf()\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"delta_ != other.delta_\00", align 1

@_ZN2ui22PhysicsBasedFlingCurveC1ERKN3gfx9Vector2dFEN4base9TimeTicksES4_fRKNS1_4SizeE = hidden unnamed_addr alias void (%"class.ui::PhysicsBasedFlingCurve"*, %"class.gfx::Vector2dF"*, i64, %"class.gfx::Vector2dF"*, float, %"class.gfx::Size"*), void (%"class.ui::PhysicsBasedFlingCurve"*, %"class.gfx::Vector2dF"*, i64, %"class.gfx::Vector2dF"*, float, %"class.gfx::Size"*)* @_ZN2ui22PhysicsBasedFlingCurveC2ERKN3gfx9Vector2dFEN4base9TimeTicksES4_fRKNS1_4SizeE
@_ZN2ui22PhysicsBasedFlingCurveD1Ev = hidden unnamed_addr alias void (%"class.ui::PhysicsBasedFlingCurve"*), void (%"class.ui::PhysicsBasedFlingCurve"*)* @_ZN2ui22PhysicsBasedFlingCurveD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui22PhysicsBasedFlingCurveC2ERKN3gfx9Vector2dFEN4base9TimeTicksES4_fRKNS1_4SizeE(%"class.ui::PhysicsBasedFlingCurve"*, %"class.gfx::Vector2dF"* dereferenceable(8), i64, %"class.gfx::Vector2dF"* dereferenceable(8), float, %"class.gfx::Size"* dereferenceable(8)) unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2ui22PhysicsBasedFlingCurveE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 2, i32 0
  %10 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 2, i32 1
  %11 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 3, i32 0
  %12 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 3, i32 1
  %13 = bitcast float* %9 to <4 x float>*
  store <4 x float> <float 0x3FC99999A0000000, float 1.000000e+00, float 0x3FE19999A0000000, float 1.000000e+00>, <4 x float>* %13, align 4
  %14 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 4
  %15 = tail call <2 x float> @_ZN3gfx13ScaleVector2dERKNS_9Vector2dFEff(%"class.gfx::Vector2dF"* dereferenceable(8) %1, float 0x3F50624DE0000000, float 0x3F50624DE0000000) #8
  %16 = fmul float %4, 3.000000e+00
  %17 = tail call i64 @_ZN3gfx18ScaleToFlooredSizeERKNS_4SizeEf(%"class.gfx::Size"* dereferenceable(8) %5, float %16) #8
  %18 = trunc i64 %17 to i32
  %19 = lshr i64 %17, 32
  %20 = trunc i64 %19 to i32
  %21 = tail call <2 x float> @_ZN3gfx13ScaleVector2dERKNS_9Vector2dFEff(%"class.gfx::Vector2dF"* dereferenceable(8) %3, float 0x3EFCE5D000000000, float 0x3EFCE5D000000000) #8
  %22 = fdiv <2 x float> %15, %21
  %23 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %22)
  %24 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %15)
  %25 = fpext <2 x float> %24 to <2 x double>
  %26 = fmul <2 x float> %21, %23
  %27 = fpext <2 x float> %26 to <2 x double>
  %28 = fmul <2 x double> %27, <double 5.000000e-01, double 5.000000e-01>
  %29 = fsub <2 x double> %25, %28
  %30 = fpext <2 x float> %23 to <2 x double>
  %31 = fmul <2 x double> %29, %30
  %32 = fptrunc <2 x double> %31 to <2 x float>
  %33 = call <2 x float> @llvm.copysign.v2f32(<2 x float> %32, <2 x float> %15)
  %34 = extractelement <2 x float> %33, i32 0
  %35 = tail call float @llvm.fabs.f32(float %34) #8
  %36 = sitofp i32 %18 to float
  %37 = fcmp ogt float %35, %36
  br i1 %37, label %38, label %43

38:                                               ; preds = %6
  %39 = fcmp ogt float %34, 0.000000e+00
  %40 = select i1 %39, float 1.000000e+00, float -1.000000e+00
  %41 = fmul float %40, %36
  %42 = insertelement <2 x float> %33, float %41, i32 0
  br label %43

43:                                               ; preds = %38, %6
  %44 = phi <2 x float> [ %42, %38 ], [ %33, %6 ]
  %45 = extractelement <2 x float> %44, i32 1
  %46 = tail call float @llvm.fabs.f32(float %45) #8
  %47 = sitofp i32 %20 to float
  %48 = fcmp ogt float %46, %47
  br i1 %48, label %49, label %54

49:                                               ; preds = %43
  %50 = fcmp ogt float %45, 0.000000e+00
  %51 = select i1 %50, float 1.000000e+00, float -1.000000e+00
  %52 = fmul float %51, %47
  %53 = insertelement <2 x float> %44, float %52, i32 1
  br label %54

54:                                               ; preds = %43, %49
  %55 = phi <2 x float> [ %53, %49 ], [ %44, %43 ]
  %56 = bitcast %"class.gfx::Vector2dF"* %14 to <2 x float>*
  store <2 x float> %55, <2 x float>* %56, align 8
  %57 = bitcast %"class.gfx::Vector2dF"* %1 to <2 x float>*
  %58 = load <2 x float>, <2 x float>* %57, align 4
  %59 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %58)
  %60 = extractelement <2 x float> %59, i32 0
  %61 = extractelement <2 x float> %59, i32 1
  %62 = fcmp olt float %60, %61
  %63 = select i1 %62, float %61, float %60
  %64 = fdiv float %63, 2.300000e+03
  %65 = fcmp olt float %64, 2.000000e+00
  %66 = select i1 %65, float %64, float 2.000000e+00
  %67 = fcmp oeq float %61, %63
  %68 = zext i1 %67 to i32
  %69 = extractelement <2 x float> %58, i32 0
  %70 = extractelement <2 x float> %58, i32 1
  %71 = select i1 %67, float %70, float %69
  %72 = extractelement <2 x float> %55, i32 %68
  %73 = fmul float %71, %66
  %74 = fdiv float %73, %72
  %75 = tail call float @llvm.fabs.f32(float %74) #8
  %76 = load float, float* %9, align 4
  %77 = fmul float %75, %76
  %78 = fcmp olt float %77, 1.000000e+00
  br i1 %78, label %79, label %80

79:                                               ; preds = %54
  store float %77, float* %10, align 4
  br label %83

80:                                               ; preds = %54
  %81 = load float, float* %10, align 4
  %82 = fdiv float %81, %75
  store float %82, float* %9, align 4
  br label %83

83:                                               ; preds = %79, %80
  %84 = phi float [ %77, %79 ], [ %81, %80 ]
  %85 = phi float [ %76, %79 ], [ %82, %80 ]
  %86 = fpext float %66 to double
  %87 = fmul double %86, 1.000000e+06
  %88 = fcmp ult double %87, 0xC3E0000000000000
  %89 = fcmp ugt double %87, 0x43DFFFFFFFFFFFFF
  %90 = fcmp ogt double %87, 0xC3E0000000000000
  %91 = select i1 %90, double %87, double 0xC3E0000000000000
  %92 = fptosi double %91 to i64
  %93 = select i1 %88, i64 0, i64 9223372036854775807
  %94 = select i1 %89, i64 %93, i64 %92
  %95 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 5, i32 0
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 6
  %97 = fpext float %85 to double
  %98 = fpext float %84 to double
  %99 = load float, float* %11, align 4
  %100 = fpext float %99 to double
  %101 = load float, float* %12, align 4
  %102 = fpext float %101 to double
  tail call void @_ZN3gfx11CubicBezierC1Edddd(%"class.gfx::CubicBezier"* %96, double %97, double %98, double %100, double %102) #8
  %103 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 7, i32 0
  %104 = bitcast i64* %103 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i64 @_ZN3gfx18ScaleToFlooredSizeERKNS_4SizeEf(%"class.gfx::Size"* dereferenceable(8), float) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2ui22PhysicsBasedFlingCurve42CalculateDurationAndConfigureControlPointsERKN3gfx9Vector2dFE(%"class.ui::PhysicsBasedFlingCurve"* nocapture, %"class.gfx::Vector2dF"* nocapture readonly dereferenceable(8)) local_unnamed_addr #3 align 2 {
  %3 = bitcast %"class.gfx::Vector2dF"* %1 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %4)
  %6 = extractelement <2 x float> %5, i32 0
  %7 = extractelement <2 x float> %5, i32 1
  %8 = fcmp olt float %6, %7
  %9 = select i1 %8, float %7, float %6
  %10 = fdiv float %9, 2.300000e+03
  %11 = fcmp olt float %10, 2.000000e+00
  %12 = select i1 %11, float %10, float 2.000000e+00
  %13 = fcmp oeq float %7, %9
  %14 = extractelement <2 x float> %4, i32 0
  %15 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 4, i32 0
  %16 = extractelement <2 x float> %4, i32 1
  %17 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 4, i32 1
  %18 = select i1 %13, float* %17, float* %15
  %19 = select i1 %13, float %16, float %14
  %20 = fmul float %19, %12
  %21 = load float, float* %18, align 4
  %22 = fdiv float %20, %21
  %23 = tail call float @llvm.fabs.f32(float %22) #8
  %24 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 2, i32 0
  %25 = load float, float* %24, align 4
  %26 = fmul float %23, %25
  %27 = fcmp olt float %26, 1.000000e+00
  %28 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 2, i32 1
  br i1 %27, label %29, label %30

29:                                               ; preds = %2
  store float %26, float* %28, align 4
  br label %33

30:                                               ; preds = %2
  %31 = load float, float* %28, align 4
  %32 = fdiv float %31, %23
  store float %32, float* %24, align 4
  br label %33

33:                                               ; preds = %30, %29
  %34 = fpext float %12 to double
  %35 = fmul double %34, 1.000000e+06
  %36 = fcmp ult double %35, 0xC3E0000000000000
  %37 = fcmp ugt double %35, 0x43DFFFFFFFFFFFFF
  %38 = fcmp ogt double %35, 0xC3E0000000000000
  %39 = select i1 %38, double %35, double 0xC3E0000000000000
  %40 = fptosi double %39 to i64
  %41 = select i1 %36, i64 0, i64 9223372036854775807
  %42 = select i1 %37, i64 %41, i64 %40
  ret i64 %42
}

declare void @_ZN3gfx11CubicBezierC1Edddd(%"class.gfx::CubicBezier"*, double, double, double, double) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2ui22PhysicsBasedFlingCurveD2Ev(%"class.ui::PhysicsBasedFlingCurve"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui22PhysicsBasedFlingCurveD0Ev(%"class.ui::PhysicsBasedFlingCurve"*) unnamed_addr #3 align 2 {
  %2 = bitcast %"class.ui::PhysicsBasedFlingCurve"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2ui22PhysicsBasedFlingCurve19ComputeScrollOffsetEN4base9TimeTicksEPN3gfx9Vector2dFES5_(%"class.ui::PhysicsBasedFlingCurve"*, i64, %"class.gfx::Vector2dF"* nocapture, %"class.gfx::Vector2dF"* nocapture) unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::TimeDelta", align 8
  %6 = alloca i64, align 8
  %7 = alloca <2 x float>, align 8
  %8 = alloca <2 x float>, align 8
  %9 = alloca %"class.base::TimeDelta", align 8
  %10 = bitcast %"class.base::TimeDelta"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #8
  %11 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %9, i64 0, i32 0
  %12 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 1, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = sub nsw i64 %1, %13
  store i64 %14, i64* %11, align 8
  %15 = icmp slt i64 %14, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %4
  %17 = bitcast %"class.gfx::Vector2dF"* %2 to i32*
  store i32 0, i32* %17, align 4
  %18 = getelementptr inbounds %"class.gfx::Vector2dF", %"class.gfx::Vector2dF"* %2, i64 0, i32 1
  %19 = bitcast float* %18 to i32*
  store i32 0, i32* %19, align 4
  %20 = bitcast %"class.gfx::Vector2dF"* %3 to i32*
  store i32 0, i32* %20, align 4
  %21 = getelementptr inbounds %"class.gfx::Vector2dF", %"class.gfx::Vector2dF"* %3, i64 0, i32 1
  %22 = bitcast float* %21 to i32*
  store i32 0, i32* %22, align 4
  br label %69

23:                                               ; preds = %4
  %24 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 5, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* nonnull %9, i64 %25)
  %27 = fcmp olt double %26, 1.000000e+00
  br i1 %27, label %28, label %61

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 6
  %30 = call double @_ZNK3gfx11CubicBezier5SolveEd(%"class.gfx::CubicBezier"* %29, double %26) #8
  %31 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 4
  %32 = fptrunc double %30 to float
  %33 = call <2 x float> @_ZN3gfx13ScaleVector2dERKNS_9Vector2dFEff(%"class.gfx::Vector2dF"* dereferenceable(8) %31, float %32, float %32) #8
  %34 = bitcast %"class.gfx::Vector2dF"* %2 to <2 x float>*
  store <2 x float> %33, <2 x float>* %34, align 4
  %35 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 9
  %36 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 7, i32 0
  %37 = load i64, i64* %36, align 8
  %38 = call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* nonnull %9, i64 %37)
  %39 = bitcast <2 x float>* %8 to %"class.gfx::Vector2dF"*
  %40 = bitcast <2 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #8
  %41 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #8
  %42 = bitcast i64* %6 to %"class.gfx::Vector2dF"*
  %43 = bitcast <2 x float>* %7 to %"class.gfx::Vector2dF"*
  %44 = bitcast %"class.gfx::Vector2dF"* %2 to i64*
  %45 = load i64, i64* %44, align 4
  store i64 %45, i64* %6, align 8
  %46 = bitcast <2 x float>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #8
  %47 = bitcast %"class.gfx::Vector2dF"* %35 to <2 x float>*
  %48 = load <2 x float>, <2 x float>* %47, align 4
  %49 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %48
  store <2 x float> %49, <2 x float>* %7, align 8
  call void @_ZN3gfx9Vector2dF3AddERKS0_(%"class.gfx::Vector2dF"* nonnull %42, %"class.gfx::Vector2dF"* nonnull dereferenceable(8) %43) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #8
  %50 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #8
  %51 = bitcast <2 x float>* %8 to i64*
  store i64 %50, i64* %51, align 8
  %52 = bitcast %"class.base::TimeDelta"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #8
  %53 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %5, i64 0, i32 0
  store i64 1000000, i64* %53, align 8
  %54 = call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* nonnull %5, i64 %38) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #8
  %55 = fptrunc double %54 to float
  %56 = call <2 x float> @_ZN3gfx13ScaleVector2dERKNS_9Vector2dFEff(%"class.gfx::Vector2dF"* nonnull dereferenceable(8) %39, float %55, float %55) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #8
  %57 = bitcast %"class.gfx::Vector2dF"* %3 to <2 x float>*
  store <2 x float> %56, <2 x float>* %57, align 4
  %58 = bitcast %"class.gfx::Vector2dF"* %35 to i64*
  %59 = load i64, i64* %44, align 4
  store i64 %59, i64* %58, align 8
  %60 = load i64, i64* %11, align 8
  store i64 %60, i64* %36, align 8
  br label %69

61:                                               ; preds = %23
  %62 = getelementptr inbounds %"class.ui::PhysicsBasedFlingCurve", %"class.ui::PhysicsBasedFlingCurve"* %0, i64 0, i32 4
  %63 = bitcast %"class.gfx::Vector2dF"* %62 to i64*
  %64 = bitcast %"class.gfx::Vector2dF"* %2 to i64*
  %65 = load i64, i64* %63, align 4
  store i64 %65, i64* %64, align 4
  %66 = bitcast %"class.gfx::Vector2dF"* %3 to i32*
  store i32 0, i32* %66, align 4
  %67 = getelementptr inbounds %"class.gfx::Vector2dF", %"class.gfx::Vector2dF"* %3, i64 0, i32 1
  %68 = bitcast float* %67 to i32*
  store i32 0, i32* %68, align 4
  br label %69

69:                                               ; preds = %28, %61, %16
  %70 = phi i1 [ true, %16 ], [ false, %61 ], [ true, %28 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #8
  ret i1 %70
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"*, i64) local_unnamed_addr #3 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = or i64 %6, %1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %2
  %10 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 302, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0)) #8
  %11 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #8
  %12 = load i64, i64* %5, align 8
  br label %13

13:                                               ; preds = %2, %9
  %14 = phi i64 [ %6, %2 ], [ %12, %9 ]
  %15 = add i64 %14, -9223372036854775807
  %16 = add i64 %1, -9223372036854775807
  %17 = or i64 %15, %16
  %18 = icmp ult i64 %17, 2
  br i1 %18, label %19, label %24

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 303, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)) #8
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  %22 = load i64, i64* %5, align 8
  %23 = add i64 %22, -9223372036854775807
  br label %24

24:                                               ; preds = %13, %19
  %25 = phi i64 [ %15, %13 ], [ %23, %19 ]
  %26 = phi i64 [ %14, %13 ], [ %22, %19 ]
  %27 = icmp ult i64 %25, 2
  %28 = icmp slt i64 %26, 0
  %29 = select i1 %28, double 0xFFF0000000000000, double 0x7FF0000000000000
  %30 = sitofp i64 %26 to double
  %31 = select i1 %27, double %29, double %30
  %32 = icmp ult i64 %16, 2
  %33 = icmp slt i64 %1, 0
  %34 = select i1 %33, double 0xFFF0000000000000, double 0x7FF0000000000000
  %35 = sitofp i64 %1 to double
  %36 = select i1 %32, double %34, double %35
  %37 = fdiv double %31, %36
  ret double %37
}

declare double @_ZNK3gfx11CubicBezier5SolveEd(%"class.gfx::CubicBezier"*, double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"*, i64) local_unnamed_addr #3 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = add i64 %1, -9223372036854775807
  %7 = icmp ult i64 %6, 2
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp sgt i64 %1, -1
  %12 = select i1 %11, i64 -9223372036854775808, i64 9223372036854775807
  %13 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %10, i64 %1) #8
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = extractvalue { i64, i1 } %13, 0
  %16 = select i1 %14, i64 %12, i64 %15, !prof !2
  ret i64 %16

17:                                               ; preds = %2
  %18 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #8
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp eq i64 %21, %1
  br i1 %23, label %25, label %24

24:                                               ; preds = %17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %19, align 8
  br label %34

25:                                               ; preds = %17
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #8
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* %26, i8* %27) #8
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %19, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 387, %"class.logging::CheckOpResult"* nonnull %4) #8
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #8
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #8
  %35 = icmp slt i64 %1, 0
  %36 = select i1 %35, i64 9223372036854775807, i64 -9223372036854775808
  ret i64 %36
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #6

declare <2 x float> @_ZN3gfx13ScaleVector2dERKNS_9Vector2dFEff(%"class.gfx::Vector2dF"* dereferenceable(8), float, float) local_unnamed_addr #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

declare void @_ZN3gfx9Vector2dF3AddERKS0_(%"class.gfx::Vector2dF"*, %"class.gfx::Vector2dF"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #6

declare i8* @_ZN7logging15CheckOpValueStrEl(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #6

; Function Attrs: nounwind readnone speculatable
declare <2 x float> @llvm.copysign.v2f32(<2 x float>, <2 x float>) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
