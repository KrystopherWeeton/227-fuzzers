; ModuleID = '../../v8/src/compiler/c-linkage.cc'
source_filename = "../../v8/src/compiler/c-linkage.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::Signature" = type { i64, i64, %"class.v8::internal::MachineType"* }
%"class.v8::internal::MachineType" = type { i8, i8 }
%"class.v8::internal::XMMRegister" = type { %"class.v8::internal::RegisterBase" }
%"class.v8::internal::RegisterBase" = type { i32 }
%"class.v8::internal::Register" = type { %"class.v8::internal::RegisterBase.0" }
%"class.v8::internal::RegisterBase.0" = type { i32 }
%"class.v8::internal::Signature<v8::internal::compiler::LinkageLocation>::Builder" = type { i64, i64, %"class.v8::internal::Zone"*, i64, i64, %"class.v8::internal::compiler::LinkageLocation"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.3" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set", %"class.std::__1::set.12" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { i64 }
%"class.std::__1::set.12" = type { %"class.std::__1::__tree.13" }
%"class.std::__1::__tree.13" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::compiler::LinkageLocation" = type <{ i32, %"class.v8::internal::MachineType", [2 x i8] }>
%"class.v8::internal::compiler::CallDescriptor" = type { i32, %"class.v8::internal::MachineType", [2 x i8], %"class.v8::internal::compiler::LinkageLocation", %"class.v8::internal::Signature.19"*, i64, i64, %"class.v8::base::Flags", i32, i32, i32, %"class.v8::base::Flags.20", i32, i8*, %"class.v8::CFunctionInfo"* }
%"class.v8::internal::Signature.19" = type { i64, i64, %"class.v8::internal::compiler::LinkageLocation"* }
%"class.v8::base::Flags" = type { i8 }
%"class.v8::base::Flags.20" = type { i32 }
%"class.v8::CFunctionInfo" = type opaque

@.str = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"2 >= locations.return_count_\00", align 1
@constinit = private unnamed_addr constant [6 x { i32 }] [{ i32 } { i32 7 }, { i32 } { i32 6 }, { i32 } { i32 2 }, { i32 } { i32 1 }, { i32 } { i32 8 }, { i32 } { i32 9 }], align 16
@constinit.2 = private unnamed_addr constant [8 x { i32 }] [{ i32 } zeroinitializer, { i32 } { i32 1 }, { i32 } { i32 2 }, { i32 } { i32 3 }, { i32 } { i32 4 }, { i32 } { i32 5 }, { i32 } { i32 6 }, { i32 } { i32 7 }], align 16
@.str.3 = private unnamed_addr constant [7 x i8] c"c-call\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler23BuildParameterLocationsEPKNS0_9SignatureINS0_11MachineTypeEEEmmPKNS0_11XMMRegisterEPKNS0_8RegisterEPNS2_INS1_15LinkageLocationEE7BuilderE(%"class.v8::internal::Signature"* nocapture readonly, i64, i64, %"class.v8::internal::XMMRegister"* nocapture readonly, %"class.v8::internal::Register"* nocapture readonly, %"class.v8::internal::Signature<v8::internal::compiler::LinkageLocation>::Builder"* nocapture) local_unnamed_addr #0 {
  %7 = getelementptr inbounds %"class.v8::internal::Signature", %"class.v8::internal::Signature"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %16, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.v8::internal::Signature", %"class.v8::internal::Signature"* %0, i64 0, i32 2
  %12 = getelementptr inbounds %"class.v8::internal::Signature", %"class.v8::internal::Signature"* %0, i64 0, i32 0
  %13 = getelementptr inbounds %"class.v8::internal::Signature<v8::internal::compiler::LinkageLocation>::Builder", %"class.v8::internal::Signature<v8::internal::compiler::LinkageLocation>::Builder"* %5, i64 0, i32 5
  %14 = getelementptr inbounds %"class.v8::internal::Signature<v8::internal::compiler::LinkageLocation>::Builder", %"class.v8::internal::Signature<v8::internal::compiler::LinkageLocation>::Builder"* %5, i64 0, i32 0
  %15 = getelementptr inbounds %"class.v8::internal::Signature<v8::internal::compiler::LinkageLocation>::Builder", %"class.v8::internal::Signature<v8::internal::compiler::LinkageLocation>::Builder"* %5, i64 0, i32 4
  br label %17

16:                                               ; preds = %84, %6
  ret void

17:                                               ; preds = %10, %84
  %18 = phi i32 [ 0, %10 ], [ %87, %84 ]
  %19 = phi i64 [ 0, %10 ], [ %86, %84 ]
  %20 = phi i64 [ 0, %10 ], [ %85, %84 ]
  %21 = phi i64 [ 0, %10 ], [ %88, %84 ]
  %22 = load %"class.v8::internal::MachineType"*, %"class.v8::internal::MachineType"** %11, align 8
  %23 = load i64, i64* %12, align 8
  %24 = add i64 %23, %21
  %25 = getelementptr inbounds %"class.v8::internal::MachineType", %"class.v8::internal::MachineType"* %22, i64 %24
  %26 = bitcast %"class.v8::internal::MachineType"* %25 to i16*
  %27 = load i16, i16* %26, align 1
  %28 = trunc i16 %27 to i8
  %29 = icmp ugt i8 %28, 11
  %30 = icmp uge i64 %20, %1
  %31 = icmp uge i64 %19, %2
  %32 = select i1 %29, i1 %30, i1 %31
  br i1 %32, label %33, label %49

33:                                               ; preds = %17
  %34 = shl i32 %18, 1
  %35 = xor i32 %34, -1
  %36 = zext i16 %27 to i64
  %37 = shl nuw nsw i64 %36, 32
  %38 = zext i32 %35 to i64
  %39 = or i64 %37, %38
  %40 = load %"class.v8::internal::compiler::LinkageLocation"*, %"class.v8::internal::compiler::LinkageLocation"** %13, align 8
  %41 = load i64, i64* %14, align 8
  %42 = load i64, i64* %15, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %15, align 8
  %44 = add i64 %42, %41
  %45 = getelementptr inbounds %"class.v8::internal::compiler::LinkageLocation", %"class.v8::internal::compiler::LinkageLocation"* %40, i64 %44
  %46 = bitcast %"class.v8::internal::compiler::LinkageLocation"* %45 to i48*
  %47 = trunc i64 %39 to i48
  store i48 %47, i48* %46, align 4
  %48 = add nsw i32 %18, 1
  br label %84

49:                                               ; preds = %17
  br i1 %29, label %50, label %67

50:                                               ; preds = %49
  %51 = getelementptr inbounds %"class.v8::internal::XMMRegister", %"class.v8::internal::XMMRegister"* %3, i64 %20, i32 0, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = shl i32 %52, 1
  %54 = zext i16 %27 to i64
  %55 = shl nuw nsw i64 %54, 32
  %56 = zext i32 %53 to i64
  %57 = or i64 %55, %56
  %58 = load %"class.v8::internal::compiler::LinkageLocation"*, %"class.v8::internal::compiler::LinkageLocation"** %13, align 8
  %59 = load i64, i64* %14, align 8
  %60 = load i64, i64* %15, align 8
  %61 = add i64 %60, 1
  store i64 %61, i64* %15, align 8
  %62 = add i64 %60, %59
  %63 = getelementptr inbounds %"class.v8::internal::compiler::LinkageLocation", %"class.v8::internal::compiler::LinkageLocation"* %58, i64 %62
  %64 = bitcast %"class.v8::internal::compiler::LinkageLocation"* %63 to i48*
  %65 = trunc i64 %57 to i48
  store i48 %65, i48* %64, align 4
  %66 = add i64 %20, 1
  br label %84

67:                                               ; preds = %49
  %68 = getelementptr inbounds %"class.v8::internal::Register", %"class.v8::internal::Register"* %4, i64 %19, i32 0, i32 0
  %69 = load i32, i32* %68, align 4
  %70 = shl i32 %69, 1
  %71 = zext i16 %27 to i64
  %72 = shl nuw nsw i64 %71, 32
  %73 = zext i32 %70 to i64
  %74 = or i64 %72, %73
  %75 = load %"class.v8::internal::compiler::LinkageLocation"*, %"class.v8::internal::compiler::LinkageLocation"** %13, align 8
  %76 = load i64, i64* %14, align 8
  %77 = load i64, i64* %15, align 8
  %78 = add i64 %77, 1
  store i64 %78, i64* %15, align 8
  %79 = add i64 %77, %76
  %80 = getelementptr inbounds %"class.v8::internal::compiler::LinkageLocation", %"class.v8::internal::compiler::LinkageLocation"* %75, i64 %79
  %81 = bitcast %"class.v8::internal::compiler::LinkageLocation"* %80 to i48*
  %82 = trunc i64 %74 to i48
  store i48 %82, i48* %81, align 4
  %83 = add i64 %19, 1
  br label %84

84:                                               ; preds = %50, %67, %33
  %85 = phi i64 [ %20, %33 ], [ %66, %50 ], [ %20, %67 ]
  %86 = phi i64 [ %19, %33 ], [ %19, %50 ], [ %83, %67 ]
  %87 = phi i32 [ %48, %33 ], [ %18, %50 ], [ %18, %67 ]
  %88 = add nuw i64 %21, 1
  %89 = load i64, i64* %7, align 8
  %90 = icmp ult i64 %88, %89
  br i1 %90, label %17, label %16
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::CallDescriptor"* @_ZN2v88internal8compiler7Linkage24GetSimplifiedCDescriptorEPNS0_4ZoneEPKNS0_9SignatureINS0_11MachineTypeEEENS_4base5FlagsINS1_14CallDescriptor4FlagEiEE(%"class.v8::internal::Zone"*, %"class.v8::internal::Signature"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Signature", %"class.v8::internal::Signature"* %1, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::Signature", %"class.v8::internal::Signature"* %1, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, %5
  %9 = shl i64 %8, 32
  %10 = ashr exact i64 %9, 29
  %11 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %14, %12
  %16 = icmp ugt i64 %10, %15
  br i1 %16, label %17, label %19, !prof !2

17:                                               ; preds = %3
  %18 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 %10) #4
  br label %21

19:                                               ; preds = %3
  %20 = add i64 %10, %12
  store i64 %20, i64* %11, align 8
  br label %21

21:                                               ; preds = %17, %19
  %22 = phi i64 [ %18, %17 ], [ %12, %19 ]
  %23 = inttoptr i64 %22 to %"class.v8::internal::compiler::LinkageLocation"*
  %24 = icmp ult i64 %5, 3
  br i1 %24, label %26, label %25, !prof !3

25:                                               ; preds = %21
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0)) #5
  unreachable

26:                                               ; preds = %21
  %27 = icmp eq i64 %5, 0
  br i1 %27, label %49, label %28

28:                                               ; preds = %26
  %29 = getelementptr inbounds %"class.v8::internal::Signature", %"class.v8::internal::Signature"* %1, i64 0, i32 2
  %30 = bitcast %"class.v8::internal::MachineType"** %29 to i16**
  %31 = load i16*, i16** %30, align 8
  %32 = load i16, i16* %31, align 1
  %33 = zext i16 %32 to i64
  %34 = shl nuw nsw i64 %33, 32
  %35 = inttoptr i64 %22 to i48*
  %36 = trunc i64 %34 to i48
  store i48 %36, i48* %35, align 4
  %37 = icmp eq i64 %5, 1
  br i1 %37, label %49, label %38

38:                                               ; preds = %28
  %39 = load %"class.v8::internal::MachineType"*, %"class.v8::internal::MachineType"** %29, align 8
  %40 = getelementptr inbounds %"class.v8::internal::MachineType", %"class.v8::internal::MachineType"* %39, i64 1
  %41 = bitcast %"class.v8::internal::MachineType"* %40 to i16*
  %42 = load i16, i16* %41, align 1
  %43 = zext i16 %42 to i64
  %44 = shl nuw nsw i64 %43, 32
  %45 = or i64 %44, 4
  %46 = getelementptr inbounds %"class.v8::internal::compiler::LinkageLocation", %"class.v8::internal::compiler::LinkageLocation"* %23, i64 1
  %47 = bitcast %"class.v8::internal::compiler::LinkageLocation"* %46 to i48*
  %48 = trunc i64 %45 to i48
  store i48 %48, i48* %47, align 4
  br label %49

49:                                               ; preds = %28, %26, %38
  %50 = load i64, i64* %6, align 8
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %116, label %52

52:                                               ; preds = %49
  %53 = getelementptr inbounds %"class.v8::internal::Signature", %"class.v8::internal::Signature"* %1, i64 0, i32 2
  br label %54

54:                                               ; preds = %109, %52
  %55 = phi i64 [ 0, %52 ], [ %113, %109 ]
  %56 = phi i32 [ 0, %52 ], [ %112, %109 ]
  %57 = phi i64 [ 0, %52 ], [ %111, %109 ]
  %58 = phi i64 [ 0, %52 ], [ %110, %109 ]
  %59 = load %"class.v8::internal::MachineType"*, %"class.v8::internal::MachineType"** %53, align 8
  %60 = load i64, i64* %4, align 8
  %61 = add i64 %60, %55
  %62 = getelementptr inbounds %"class.v8::internal::MachineType", %"class.v8::internal::MachineType"* %59, i64 %61
  %63 = bitcast %"class.v8::internal::MachineType"* %62 to i16*
  %64 = load i16, i16* %63, align 1
  %65 = trunc i16 %64 to i8
  %66 = icmp ugt i8 %65, 11
  %67 = icmp ugt i64 %58, 7
  %68 = icmp ugt i64 %57, 5
  %69 = select i1 %66, i1 %67, i1 %68
  br i1 %69, label %70, label %82

70:                                               ; preds = %54
  %71 = shl i32 %56, 1
  %72 = xor i32 %71, -1
  %73 = zext i16 %64 to i64
  %74 = shl nuw nsw i64 %73, 32
  %75 = zext i32 %72 to i64
  %76 = or i64 %74, %75
  %77 = add i64 %55, %5
  %78 = getelementptr inbounds %"class.v8::internal::compiler::LinkageLocation", %"class.v8::internal::compiler::LinkageLocation"* %23, i64 %77
  %79 = bitcast %"class.v8::internal::compiler::LinkageLocation"* %78 to i48*
  %80 = trunc i64 %76 to i48
  store i48 %80, i48* %79, align 4
  %81 = add nsw i32 %56, 1
  br label %109

82:                                               ; preds = %54
  br i1 %66, label %83, label %96

83:                                               ; preds = %82
  %84 = getelementptr inbounds %"class.v8::internal::XMMRegister", %"class.v8::internal::XMMRegister"* bitcast ([8 x { i32 }]* @constinit.2 to %"class.v8::internal::XMMRegister"*), i64 %58, i32 0, i32 0
  %85 = load i32, i32* %84, align 4
  %86 = shl i32 %85, 1
  %87 = zext i16 %64 to i64
  %88 = shl nuw nsw i64 %87, 32
  %89 = zext i32 %86 to i64
  %90 = or i64 %88, %89
  %91 = add i64 %55, %5
  %92 = getelementptr inbounds %"class.v8::internal::compiler::LinkageLocation", %"class.v8::internal::compiler::LinkageLocation"* %23, i64 %91
  %93 = bitcast %"class.v8::internal::compiler::LinkageLocation"* %92 to i48*
  %94 = trunc i64 %90 to i48
  store i48 %94, i48* %93, align 4
  %95 = add i64 %58, 1
  br label %109

96:                                               ; preds = %82
  %97 = getelementptr inbounds %"class.v8::internal::Register", %"class.v8::internal::Register"* bitcast ([6 x { i32 }]* @constinit to %"class.v8::internal::Register"*), i64 %57, i32 0, i32 0
  %98 = load i32, i32* %97, align 4
  %99 = shl i32 %98, 1
  %100 = zext i16 %64 to i64
  %101 = shl nuw nsw i64 %100, 32
  %102 = zext i32 %99 to i64
  %103 = or i64 %101, %102
  %104 = add i64 %55, %5
  %105 = getelementptr inbounds %"class.v8::internal::compiler::LinkageLocation", %"class.v8::internal::compiler::LinkageLocation"* %23, i64 %104
  %106 = bitcast %"class.v8::internal::compiler::LinkageLocation"* %105 to i48*
  %107 = trunc i64 %103 to i48
  store i48 %107, i48* %106, align 4
  %108 = add i64 %57, 1
  br label %109

109:                                              ; preds = %96, %83, %70
  %110 = phi i64 [ %58, %70 ], [ %95, %83 ], [ %58, %96 ]
  %111 = phi i64 [ %57, %70 ], [ %57, %83 ], [ %108, %96 ]
  %112 = phi i32 [ %81, %70 ], [ %56, %83 ], [ %56, %96 ]
  %113 = add nuw i64 %55, 1
  %114 = load i64, i64* %6, align 8
  %115 = icmp ult i64 %113, %114
  br i1 %115, label %54, label %116

116:                                              ; preds = %109, %49
  %117 = or i32 %2, 16
  %118 = load i64, i64* %11, align 8
  %119 = load i64, i64* %13, align 8
  %120 = sub i64 %119, %118
  %121 = icmp ult i64 %120, 24
  br i1 %121, label %122, label %124, !prof !2

122:                                              ; preds = %116
  %123 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 24) #4
  br label %126

124:                                              ; preds = %116
  %125 = add i64 %118, 24
  store i64 %125, i64* %11, align 8
  br label %126

126:                                              ; preds = %122, %124
  %127 = phi i64 [ %123, %122 ], [ %118, %124 ]
  %128 = inttoptr i64 %127 to %"class.v8::internal::Signature.19"*
  %129 = getelementptr inbounds %"class.v8::internal::Signature.19", %"class.v8::internal::Signature.19"* %128, i64 0, i32 0
  store i64 %5, i64* %129, align 8
  %130 = getelementptr inbounds %"class.v8::internal::Signature.19", %"class.v8::internal::Signature.19"* %128, i64 0, i32 1
  store i64 %7, i64* %130, align 8
  %131 = getelementptr inbounds %"class.v8::internal::Signature.19", %"class.v8::internal::Signature.19"* %128, i64 0, i32 2
  %132 = bitcast %"class.v8::internal::compiler::LinkageLocation"** %131 to i64*
  store i64 %22, i64* %132, align 8
  %133 = load i64, i64* %11, align 8
  %134 = load i64, i64* %13, align 8
  %135 = sub i64 %134, %133
  %136 = icmp ult i64 %135, 80
  br i1 %136, label %137, label %139, !prof !2

137:                                              ; preds = %126
  %138 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 80) #4
  br label %141

139:                                              ; preds = %126
  %140 = add i64 %133, 80
  store i64 %140, i64* %11, align 8
  br label %141

141:                                              ; preds = %137, %139
  %142 = phi i64 [ %138, %137 ], [ %133, %139 ]
  %143 = inttoptr i64 %142 to %"class.v8::internal::compiler::CallDescriptor"*
  %144 = getelementptr inbounds %"class.v8::internal::compiler::CallDescriptor", %"class.v8::internal::compiler::CallDescriptor"* %143, i64 0, i32 0
  store i32 2, i32* %144, align 8
  %145 = getelementptr inbounds %"class.v8::internal::compiler::CallDescriptor", %"class.v8::internal::compiler::CallDescriptor"* %143, i64 0, i32 1
  %146 = bitcast %"class.v8::internal::MachineType"* %145 to i16*
  store i16 5, i16* %146, align 4
  %147 = getelementptr inbounds %"class.v8::internal::compiler::CallDescriptor", %"class.v8::internal::compiler::CallDescriptor"* %143, i64 0, i32 3
  %148 = bitcast %"class.v8::internal::compiler::LinkageLocation"* %147 to i64*
  store i64 25769803774, i64* %148, align 8
  %149 = getelementptr inbounds %"class.v8::internal::compiler::CallDescriptor", %"class.v8::internal::compiler::CallDescriptor"* %143, i64 0, i32 4
  %150 = bitcast %"class.v8::internal::Signature.19"** %149 to i64*
  store i64 %127, i64* %150, align 8
  %151 = getelementptr inbounds %"class.v8::internal::compiler::CallDescriptor", %"class.v8::internal::compiler::CallDescriptor"* %143, i64 0, i32 5
  %152 = getelementptr inbounds %"class.v8::internal::compiler::CallDescriptor", %"class.v8::internal::compiler::CallDescriptor"* %143, i64 0, i32 7, i32 0
  %153 = bitcast i64* %151 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %153, i8 0, i64 16, i1 false)
  store i8 32, i8* %152, align 8
  %154 = getelementptr inbounds %"class.v8::internal::compiler::CallDescriptor", %"class.v8::internal::compiler::CallDescriptor"* %143, i64 0, i32 8
  store i32 61448, i32* %154, align 4
  %155 = getelementptr inbounds %"class.v8::internal::compiler::CallDescriptor", %"class.v8::internal::compiler::CallDescriptor"* %143, i64 0, i32 9
  store i32 0, i32* %155, align 8
  %156 = getelementptr inbounds %"class.v8::internal::compiler::CallDescriptor", %"class.v8::internal::compiler::CallDescriptor"* %143, i64 0, i32 10
  store i32 0, i32* %156, align 4
  %157 = getelementptr inbounds %"class.v8::internal::compiler::CallDescriptor", %"class.v8::internal::compiler::CallDescriptor"* %143, i64 0, i32 11, i32 0
  store i32 %117, i32* %157, align 8
  %158 = getelementptr inbounds %"class.v8::internal::compiler::CallDescriptor", %"class.v8::internal::compiler::CallDescriptor"* %143, i64 0, i32 12
  store i32 0, i32* %158, align 4
  %159 = getelementptr inbounds %"class.v8::internal::compiler::CallDescriptor", %"class.v8::internal::compiler::CallDescriptor"* %143, i64 0, i32 13
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i8** %159, align 8
  %160 = getelementptr inbounds %"class.v8::internal::compiler::CallDescriptor", %"class.v8::internal::compiler::CallDescriptor"* %143, i64 0, i32 14
  store %"class.v8::CFunctionInfo"* null, %"class.v8::CFunctionInfo"** %160, align 8
  ret %"class.v8::internal::compiler::CallDescriptor"* %143
}

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #1

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
