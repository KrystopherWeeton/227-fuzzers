; ModuleID = '../../native_client/src/trusted/service_runtime/nacl_error_code.c'
source_filename = "../../native_client/src/trusted/service_runtime/nacl_error_code.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"Ok\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"Load status unknown (load incomplete)\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"Operating system platform is not supported\00", align 1
@.str.3 = private unnamed_addr constant [59 x i8] c"Data Execution Prevention is required but is not supported\00", align 1
@.str.4 = private unnamed_addr constant [15 x i8] c"Internal error\00", align 1
@.str.5 = private unnamed_addr constant [25 x i8] c"Multiple LoadModule RPCs\00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"Multiple StartModule RPCs\00", align 1
@.str.7 = private unnamed_addr constant [29 x i8] c"Cannot open NaCl module file\00", align 1
@.str.8 = private unnamed_addr constant [17 x i8] c"Cannot read file\00", align 1
@.str.9 = private unnamed_addr constant [44 x i8] c"Too many program header entries in ELF file\00", align 1
@.str.10 = private unnamed_addr constant [30 x i8] c"ELF program header size wrong\00", align 1
@.str.11 = private unnamed_addr constant [28 x i8] c"Bad ELF header magic number\00", align 1
@.str.12 = private unnamed_addr constant [22 x i8] c"Not a 32-bit ELF file\00", align 1
@.str.13 = private unnamed_addr constant [22 x i8] c"Not a 64-bit ELF file\00", align 1
@.str.14 = private unnamed_addr constant [31 x i8] c"ELF file has unexpected OS ABI\00", align 1
@.str.15 = private unnamed_addr constant [29 x i8] c"ELF file type not executable\00", align 1
@.str.16 = private unnamed_addr constant [32 x i8] c"ELF file for wrong architecture\00", align 1
@.str.17 = private unnamed_addr constant [21 x i8] c"ELF version mismatch\00", align 1
@.str.18 = private unnamed_addr constant [25 x i8] c"Too many section headers\00", align 1
@.str.19 = private unnamed_addr constant [17 x i8] c"ELF bad sections\00", align 1
@.str.20 = private unnamed_addr constant [33 x i8] c"Insufficient memory to load file\00", align 1
@.str.21 = private unnamed_addr constant [43 x i8] c"ELF section header string table load error\00", align 1
@.str.22 = private unnamed_addr constant [24 x i8] c"Address space too small\00", align 1
@.str.23 = private unnamed_addr constant [22 x i8] c"Address space too big\00", align 1
@.str.24 = private unnamed_addr constant [72 x i8] c"Memory \22hole\22 between end of BSS and start of stack is negative in size\00", align 1
@.str.25 = private unnamed_addr constant [45 x i8] c"Read-only data segment overlaps data segment\00", align 1
@.str.26 = private unnamed_addr constant [45 x i8] c"Data segment exists, but is not last segment\00", align 1
@.str.27 = private unnamed_addr constant [72 x i8] c"No data segment, read-only data segment exists, but is not last segment\00", align 1
@.str.28 = private unnamed_addr constant [37 x i8] c"Text segment overlaps rodata segment\00", align 1
@.str.29 = private unnamed_addr constant [58 x i8] c"No rodata segment, and text segment overlaps data segment\00", align 1
@.str.30 = private unnamed_addr constant [43 x i8] c"The rodata segment is not properly aligned\00", align 1
@.str.31 = private unnamed_addr constant [41 x i8] c"The data segment is not properly aligned\00", align 1
@.str.32 = private unnamed_addr constant [21 x i8] c"Error during loading\00", align 1
@.str.33 = private unnamed_addr constant [34 x i8] c"ELF file contains no text segment\00", align 1
@.str.34 = private unnamed_addr constant [32 x i8] c"ELF file text segment too large\00", align 1
@.str.35 = private unnamed_addr constant [35 x i8] c"ELF file data segment(s) too large\00", align 1
@.str.36 = private unnamed_addr constant [21 x i8] c"Cannot protect pages\00", align 1
@.str.37 = private unnamed_addr constant [35 x i8] c"Cannot release unused data segment\00", align 1
@.str.38 = private unnamed_addr constant [43 x i8] c"Malformed ELF file: too many string tables\00", align 1
@.str.39 = private unnamed_addr constant [29 x i8] c"Symbol table entry too small\00", align 1
@.str.40 = private unnamed_addr constant [16 x i8] c"No symbol table\00", align 1
@.str.41 = private unnamed_addr constant [28 x i8] c"No string table for symbols\00", align 1
@.str.42 = private unnamed_addr constant [44 x i8] c"Error entering new symbol into symbol table\00", align 1
@.str.43 = private unnamed_addr constant [20 x i8] c"Unknown symbol type\00", align 1
@.str.44 = private unnamed_addr constant [32 x i8] c"Duplicate entry in symbol table\00", align 1
@.str.45 = private unnamed_addr constant [26 x i8] c"Bad relocation read error\00", align 1
@.str.46 = private unnamed_addr constant [30 x i8] c"Relocation type unimplemented\00", align 1
@.str.47 = private unnamed_addr constant [26 x i8] c"Undefined external symbol\00", align 1
@.str.48 = private unnamed_addr constant [22 x i8] c"Bad symbol table data\00", align 1
@.str.49 = private unnamed_addr constant [24 x i8] c"ELF file not accessible\00", align 1
@.str.50 = private unnamed_addr constant [32 x i8] c"Bad program entry point address\00", align 1
@.str.51 = private unnamed_addr constant [80 x i8] c"ELF executable contains a segment which lies outside the assigned address space\00", align 1
@.str.52 = private unnamed_addr constant [78 x i8] c"ELF executable contains a duplicate segment (please run objdump to see which)\00", align 1
@.str.53 = private unnamed_addr constant [62 x i8] c"ELF executable text/rodata segment has wrong starting address\00", align 1
@.str.54 = private unnamed_addr constant [62 x i8] c"ELF executable contains an unexpected/unallowed segment/flags\00", align 1
@.str.55 = private unnamed_addr constant [49 x i8] c"ELF executable missing a required segment (text)\00", align 1
@.str.56 = private unnamed_addr constant [46 x i8] c"ELF executable segment header parameter error\00", align 1
@.str.57 = private unnamed_addr constant [62 x i8] c"Validation failure. File violates Native Client safety rules.\00", align 1
@.str.58 = private unnamed_addr constant [39 x i8] c"Not implemented for this architecture.\00", align 1
@.str.59 = private unnamed_addr constant [50 x i8] c"Service Runtime: cannot allocate segment selector\00", align 1
@.str.60 = private unnamed_addr constant [48 x i8] c"ELFCLASS64 file header has wrong e_ehsize value\00", align 1
@.str.61 = private unnamed_addr constant [56 x i8] c"ELFCLASS64 file header has fields that overflow 32 bits\00", align 1
@.str.62 = private unnamed_addr constant [59 x i8] c"ELFCLASS64 program header has fields that overflow 32 bits\00", align 1
@.str.63 = private unnamed_addr constant [27 x i8] c"CPU model is not supported\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"Insufficient memory to allocate dynamic text region\00", align 1
@.str.65 = private unnamed_addr constant [56 x i8] c"Insufficient memory to allocate untrusted address space\00", align 1
@.str.66 = private unnamed_addr constant [107 x i8] c"ELF executable's code segment is larger than the arbitrary size limit imposed to mitigate spraying attacks\00", align 1
@.str.67 = private unnamed_addr constant [15 x i8] c"BAD ERROR CODE\00", align 1
@switch.table.NaClErrorString = private unnamed_addr constant [67 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.26, i64 0, i64 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.27, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.33, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.34, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.35, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.37, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.38, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.39, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.40, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.41, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.44, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.45, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.48, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.50, i64 0, i64 0), i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.52, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.53, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.54, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.55, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.56, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.57, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.58, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.59, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.60, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.61, i64 0, i64 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.62, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.63, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.66, i64 0, i64 0)], align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @NaClErrorString(i32) local_unnamed_addr #0 {
  %2 = icmp ult i32 %0, 67
  br i1 %2, label %3, label %7

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [67 x i8*], [67 x i8*]* @switch.table.NaClErrorString, i64 0, i64 %4
  %6 = load i8*, i8** %5, align 8
  ret i8* %6

7:                                                ; preds = %1
  ret i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.67, i64 0, i64 0)
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
