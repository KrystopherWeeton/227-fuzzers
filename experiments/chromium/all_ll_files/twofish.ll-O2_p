; ModuleID = '../../third_party/ffmpeg/libavutil/twofish.c'
source_filename = "../../third_party/ffmpeg/libavutil/twofish.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVTWOFISH = type { [40 x i32], [4 x i32], i32, [256 x i32], [256 x i32], [256 x i32], [256 x i32] }
%union.unaligned_32 = type { i32 }

@av_twofish_size = hidden local_unnamed_addr constant i32 4276, align 4
@MD1 = internal unnamed_addr constant [256 x i8] c"\00[\B6\ED\05^\B3\E8\0AQ\BC\E7\0FT\B9\E2\14O\A2\F9\11J\A7\FC\1EE\A8\F3\1B@\AD\F6(s\9E\C5-v\9B\C0\22y\94\CF'|\91\CA<g\8A\D19b\8F\D46m\80\DB3h\85\DEP\0B\E6\BDU\0E\E3\B8Z\01\EC\B7_\04\E9\B2D\1F\F2\A9A\1A\F7\ACN\15\F8\A3K\10\FD\A6x#\CE\95}&\CB\90r)\C4\9Fw,\C1\9Al7\DA\81i2\DF\84f=\D0\8Bc8\D5\8E\A0\FB\16M\A5\FE\13H\AA\F1\1CG\AF\F4\19B\B4\EF\02Y\B1\EA\07\5C\BE\E5\08S\BB\E0\0DV\88\D3>e\8D\D6;`\82\D94o\87\DC1j\9C\C7*q\99\C2/t\96\CD {\93\C8%~\F0\ABF\1D\F5\AEC\18\FA\A1L\17\FF\A4I\12\E4\BFR\09\E1\BAW\0C\EE\B5X\03\EB\B0]\06\D8\83n5\DD\86k0\D2\89d?\D7\8Ca:\CC\97z!\C9\92\7F$\C6\9Dp+\C3\98u.", align 16
@MD2 = internal unnamed_addr constant [256 x i8] c"\00\EF\B7X\07\E8\B0_\0E\E1\B9V\09\E6\BEQ\1C\F3\ABD\1B\F4\ACC\12\FD\A5J\15\FA\A2M8\D7\8F`?\D0\88g6\D9\81n1\DE\86i$\CB\93|#\CC\94{*\C5\9Dr-\C2\9Aup\9F\C7(w\98\C0/~\91\C9&y\96\CE!l\83\DB4k\84\DC3b\8D\D5:e\8A\D2=H\A7\FF\10O\A0\F8\17F\A9\F1\1EA\AE\F6\19T\BB\E3\0CS\BC\E4\0BZ\B5\ED\02]\B2\EA\05\E0\0FW\B8\E7\08P\BF\EE\01Y\B6\E9\06^\B1\FC\13K\A4\FB\14L\A3\F2\1DE\AA\F5\1AB\AD\D87o\80\DF0h\87\D69a\8E\D1>f\89\C4+s\9C\C3,t\9B\CA%}\92\CD\22z\95\90\7F'\C8\97x \CF\9Eq)\C6\99v.\C1\8Cc;\D4\8Bd<\D3\82m5\DA\85j2\DD\A8G\1F\F0\AF@\18\F7\A6I\11\FE\A1N\16\F9\B4[\03\EC\B3\5C\04\EB\BAU\0D\E2\BDR\0A\E5", align 16
@q1 = internal unnamed_addr constant [256 x i8] c"u\F3\C6\F4\DB{\FB\C8J\D3\E6kE}\E8K\D62\D8\FD7q\F1\E10\0F\F8\1B\87\FA\06?^\BA\AE[\8A\00\BC\9Dm\C1\B1\0E\80]\D2\D5\A0\84\07\14\B5\90,\A3\B2sLT\92t6Q8\B0\BDZ\FC`b\96lB\F7\10|('\8C\13\95\9C\C7$F;p\CA\E3\85\CB\11\D0\93\B8\A6\83 \FF\9Fw\C3\CC\03o\08\BF@\E7+\E2y\0C\AA\82A:\EA\B9\E4\9A\A4\97~\DAz\17f\94\A1\1D=\F0\DE\B3\0Br\A7\1C\EF\D1S>\8F3&_\ECv*I\81\88\EE!\C4\1A\EB\D9\C59\99\CD\AD1\8B\01\18#\DD\1FN-\F9HO\F2e\8Ex\5CX\19\8D\E5\98Wg\7F\05d\AFc\B6\FE\F5\B7<\A5\CE\E9hD\E0MCi).\AC\15Y\A8\0A\9EnG\DF45j\CF\DC\22\C9\C0\9B\89\D4\ED\AB\12\A2\0DR\BB\02/\A9\D7a\1E\B4P\04\F6\C2\16%\86VU\09\BE\91", align 16
@q0 = internal unnamed_addr constant [256 x i8] c"\A9g\B3\E8\04\FD\A3v\9A\92\80x\E4\DD\D18\0D\C65\98\18\F7\EClCu7&\FA\13\94H\F2\D0\8B0\84T\DF#\19[=Y\F3\AE\A2\82c\01\83.\D9Q\9B|\A6\EB\A5\BE\16\0C\E3a\C0\8C:\F5s,%\0B\BBN\89kSj\B4\F1\E1\E6\BDE\E2\F4\B6f\CC\95\03V\D4\1C\1E\D7\FB\C3\8E\B5\E9\CF\BF\BA\EAw9\AF3\C9bq\81y\09\AD$\CD\F9\D8\E5\C5\B9MD\08\86\E7\A1\1D\AA\ED\06p\B2\D2A{\A0\111\C2'\90 \F6`\FF\96\5C\B1\AB\9E\9CR\1B_\93\0A\EF\91\85I\EE-O\8F;G\87mF\D6>id*\CE\CB/\FC\97\05z\AC\7F\D5\1AK\0E\A7Z(\14?)\88<L\02\B8\DA\B0\17U\1F\8A}W\C7\8Dt\B7\C4\9Fr~\15\22\12X\07\994nP\DEhe\BC\DB\F8\C8\A8+@\DC\FE2\A4\CA\10!\F0\D3]\0F\00o\9D6BJ^\C1\E0", align 16

; Function Attrs: nounwind ssp uwtable
define hidden noalias %struct.AVTWOFISH* @av_twofish_alloc() local_unnamed_addr #0 {
  %1 = tail call noalias i8* @av_mallocz(i64 4276) #5
  %2 = bitcast i8* %1 to %struct.AVTWOFISH*
  ret %struct.AVTWOFISH* %2
}

declare noalias i8* @av_mallocz(i64) local_unnamed_addr #1

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden i32 @av_twofish_init(%struct.AVTWOFISH* nocapture, i8* nocapture readonly, i32) local_unnamed_addr #2 {
  %4 = alloca i32, align 4
  %5 = alloca [32 x i8], align 16
  %6 = alloca [8 x i32], align 16
  %7 = alloca [4 x i32], align 16
  %8 = alloca [4 x i32], align 16
  %9 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #5
  %10 = bitcast [8 x i32]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #5
  %11 = bitcast [4 x i32]* %7 to i8*
  %12 = bitcast [8 x i32]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #5
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 0
  %14 = bitcast [4 x i32]* %8 to i8*
  %15 = bitcast [4 x i32]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #5
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 0
  %17 = icmp slt i32 %2, 0
  %18 = bitcast [4 x i32]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -86, i64 16, i1 false)
  br i1 %17, label %786, label %19

19:                                               ; preds = %3
  %20 = icmp slt i32 %2, 129
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 2
  store i32 2, i32* %22, align 4
  br label %27

23:                                               ; preds = %19
  %24 = icmp slt i32 %2, 193
  %25 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 2
  br i1 %24, label %26, label %29

26:                                               ; preds = %23
  store i32 3, i32* %25, align 4
  br label %27

27:                                               ; preds = %26, %21
  %28 = phi i32 [ 3, %26 ], [ 2, %21 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 0, i64 32, i1 false)
  br label %31

29:                                               ; preds = %23
  store i32 4, i32* %25, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 0, i64 32, i1 false)
  %30 = icmp slt i32 %2, 257
  br i1 %30, label %31, label %35

31:                                               ; preds = %27, %29
  %32 = phi i32 [ %28, %27 ], [ 4, %29 ]
  %33 = lshr i32 %2, 3
  %34 = zext i32 %33 to i64
  br label %35

35:                                               ; preds = %29, %31
  %36 = phi i64 [ %34, %31 ], [ 32, %29 ]
  %37 = phi i32 [ %32, %31 ], [ 4, %29 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %9, i8* align 1 %1, i64 %36, i1 false)
  %38 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 2
  %39 = shl nsw i32 %37, 1
  %40 = sext i32 %39 to i64
  br label %41

41:                                               ; preds = %35, %41
  %42 = phi i64 [ 0, %35 ], [ %49, %41 ]
  %43 = shl i64 %42, 2
  %44 = and i64 %43, 4294967292
  %45 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 %44
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %42
  store i32 %47, i32* %48, align 4
  %49 = add nuw nsw i64 %42, 1
  %50 = icmp slt i64 %49, %40
  br i1 %50, label %41, label %51

51:                                               ; preds = %41, %652
  %52 = phi i64 [ %669, %652 ], [ 0, %41 ]
  %53 = phi i32 [ %671, %652 ], [ %37, %41 ]
  %54 = phi i32 [ %670, %652 ], [ 0, %41 ]
  %55 = shl nuw nsw i64 %52, 1
  %56 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %55
  %57 = load i32, i32* %56, align 8
  %58 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 %52
  store i32 %57, i32* %58, align 4
  %59 = or i64 %55, 1
  %60 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 %52
  store i32 %61, i32* %62, align 4
  %63 = trunc i32 %57 to i8
  %64 = lshr i32 %57, 8
  %65 = trunc i32 %64 to i8
  %66 = lshr i32 %57, 16
  %67 = trunc i32 %66 to i8
  %68 = lshr i32 %57, 24
  %69 = trunc i32 %68 to i8
  %70 = icmp ne i8 %63, 0
  %71 = icmp ne i8 %65, 0
  br i1 %71, label %72, label %88

72:                                               ; preds = %51, %72
  %73 = phi i8 [ %79, %72 ], [ 0, %51 ]
  %74 = phi i8 [ %83, %72 ], [ %65, %51 ]
  %75 = phi i8 [ %84, %72 ], [ -92, %51 ]
  %76 = and i8 %75, 1
  %77 = icmp eq i8 %76, 0
  %78 = select i1 %77, i8 0, i8 %74
  %79 = xor i8 %78, %73
  %80 = shl i8 %74, 1
  %81 = icmp slt i8 %74, 0
  %82 = xor i8 %80, 77
  %83 = select i1 %81, i8 %82, i8 %80
  %84 = lshr i8 %75, 1
  %85 = icmp ne i8 %84, 0
  %86 = icmp ne i8 %83, 0
  %87 = and i1 %85, %86
  br i1 %87, label %72, label %88

88:                                               ; preds = %72, %51
  %89 = phi i8 [ 0, %51 ], [ %79, %72 ]
  %90 = xor i8 %89, %63
  %91 = icmp ne i8 %67, 0
  br i1 %91, label %92, label %108

92:                                               ; preds = %88, %92
  %93 = phi i8 [ %99, %92 ], [ 0, %88 ]
  %94 = phi i8 [ %103, %92 ], [ %67, %88 ]
  %95 = phi i8 [ %104, %92 ], [ 85, %88 ]
  %96 = and i8 %95, 1
  %97 = icmp eq i8 %96, 0
  %98 = select i1 %97, i8 0, i8 %94
  %99 = xor i8 %98, %93
  %100 = shl i8 %94, 1
  %101 = icmp slt i8 %94, 0
  %102 = xor i8 %100, 77
  %103 = select i1 %101, i8 %102, i8 %100
  %104 = lshr i8 %95, 1
  %105 = icmp ne i8 %104, 0
  %106 = icmp ne i8 %103, 0
  %107 = and i1 %105, %106
  br i1 %107, label %92, label %108

108:                                              ; preds = %92, %88
  %109 = phi i8 [ 0, %88 ], [ %99, %92 ]
  %110 = xor i8 %90, %109
  %111 = icmp ne i8 %69, 0
  br i1 %111, label %112, label %128

112:                                              ; preds = %108, %112
  %113 = phi i8 [ %119, %112 ], [ 0, %108 ]
  %114 = phi i8 [ %123, %112 ], [ %69, %108 ]
  %115 = phi i8 [ %124, %112 ], [ -121, %108 ]
  %116 = and i8 %115, 1
  %117 = icmp eq i8 %116, 0
  %118 = select i1 %117, i8 0, i8 %114
  %119 = xor i8 %118, %113
  %120 = shl i8 %114, 1
  %121 = icmp slt i8 %114, 0
  %122 = xor i8 %120, 77
  %123 = select i1 %121, i8 %122, i8 %120
  %124 = lshr i8 %115, 1
  %125 = icmp ne i8 %124, 0
  %126 = icmp ne i8 %123, 0
  %127 = and i1 %125, %126
  br i1 %127, label %112, label %128

128:                                              ; preds = %112, %108
  %129 = phi i8 [ 0, %108 ], [ %119, %112 ]
  %130 = xor i8 %110, %129
  %131 = trunc i32 %61 to i8
  %132 = icmp ne i8 %131, 0
  br i1 %132, label %133, label %149

133:                                              ; preds = %128, %133
  %134 = phi i8 [ %140, %133 ], [ 0, %128 ]
  %135 = phi i8 [ %144, %133 ], [ %131, %128 ]
  %136 = phi i8 [ %145, %133 ], [ 90, %128 ]
  %137 = and i8 %136, 1
  %138 = icmp eq i8 %137, 0
  %139 = select i1 %138, i8 0, i8 %135
  %140 = xor i8 %139, %134
  %141 = shl i8 %135, 1
  %142 = icmp slt i8 %135, 0
  %143 = xor i8 %141, 77
  %144 = select i1 %142, i8 %143, i8 %141
  %145 = lshr i8 %136, 1
  %146 = icmp ne i8 %145, 0
  %147 = icmp ne i8 %144, 0
  %148 = and i1 %146, %147
  br i1 %148, label %133, label %149

149:                                              ; preds = %133, %128
  %150 = phi i8 [ 0, %128 ], [ %140, %133 ]
  %151 = xor i8 %130, %150
  %152 = lshr i32 %61, 8
  %153 = trunc i32 %152 to i8
  %154 = icmp ne i8 %153, 0
  br i1 %154, label %155, label %171

155:                                              ; preds = %149, %155
  %156 = phi i8 [ %162, %155 ], [ 0, %149 ]
  %157 = phi i8 [ %166, %155 ], [ %153, %149 ]
  %158 = phi i8 [ %167, %155 ], [ 88, %149 ]
  %159 = and i8 %158, 1
  %160 = icmp eq i8 %159, 0
  %161 = select i1 %160, i8 0, i8 %157
  %162 = xor i8 %161, %156
  %163 = shl i8 %157, 1
  %164 = icmp slt i8 %157, 0
  %165 = xor i8 %163, 77
  %166 = select i1 %164, i8 %165, i8 %163
  %167 = lshr i8 %158, 1
  %168 = icmp ne i8 %167, 0
  %169 = icmp ne i8 %166, 0
  %170 = and i1 %168, %169
  br i1 %170, label %155, label %171

171:                                              ; preds = %155, %149
  %172 = phi i8 [ 0, %149 ], [ %162, %155 ]
  %173 = xor i8 %151, %172
  %174 = lshr i32 %61, 16
  %175 = trunc i32 %174 to i8
  %176 = icmp ne i8 %175, 0
  br i1 %176, label %177, label %193

177:                                              ; preds = %171, %177
  %178 = phi i8 [ %184, %177 ], [ 0, %171 ]
  %179 = phi i8 [ %188, %177 ], [ %175, %171 ]
  %180 = phi i8 [ %189, %177 ], [ -37, %171 ]
  %181 = and i8 %180, 1
  %182 = icmp eq i8 %181, 0
  %183 = select i1 %182, i8 0, i8 %179
  %184 = xor i8 %183, %178
  %185 = shl i8 %179, 1
  %186 = icmp slt i8 %179, 0
  %187 = xor i8 %185, 77
  %188 = select i1 %186, i8 %187, i8 %185
  %189 = lshr i8 %180, 1
  %190 = icmp ne i8 %189, 0
  %191 = icmp ne i8 %188, 0
  %192 = and i1 %190, %191
  br i1 %192, label %177, label %193

193:                                              ; preds = %177, %171
  %194 = phi i8 [ 0, %171 ], [ %184, %177 ]
  %195 = xor i8 %173, %194
  %196 = lshr i32 %61, 24
  %197 = trunc i32 %196 to i8
  %198 = icmp ne i8 %197, 0
  br i1 %198, label %199, label %215

199:                                              ; preds = %193, %199
  %200 = phi i8 [ %206, %199 ], [ 0, %193 ]
  %201 = phi i8 [ %210, %199 ], [ %197, %193 ]
  %202 = phi i8 [ %211, %199 ], [ -98, %193 ]
  %203 = and i8 %202, 1
  %204 = icmp eq i8 %203, 0
  %205 = select i1 %204, i8 0, i8 %201
  %206 = xor i8 %205, %200
  %207 = shl i8 %201, 1
  %208 = icmp slt i8 %201, 0
  %209 = xor i8 %207, 77
  %210 = select i1 %208, i8 %209, i8 %207
  %211 = lshr i8 %202, 1
  %212 = icmp ne i8 %211, 0
  %213 = icmp ne i8 %210, 0
  %214 = and i1 %212, %213
  br i1 %214, label %199, label %215

215:                                              ; preds = %199, %193
  %216 = phi i8 [ 0, %193 ], [ %206, %199 ]
  %217 = xor i8 %195, %216
  br i1 %70, label %218, label %234

218:                                              ; preds = %215, %218
  %219 = phi i8 [ %225, %218 ], [ 0, %215 ]
  %220 = phi i8 [ %229, %218 ], [ %63, %215 ]
  %221 = phi i8 [ %230, %218 ], [ -92, %215 ]
  %222 = and i8 %221, 1
  %223 = icmp eq i8 %222, 0
  %224 = select i1 %223, i8 0, i8 %220
  %225 = xor i8 %224, %219
  %226 = shl i8 %220, 1
  %227 = icmp slt i8 %220, 0
  %228 = xor i8 %226, 77
  %229 = select i1 %227, i8 %228, i8 %226
  %230 = lshr i8 %221, 1
  %231 = icmp ne i8 %230, 0
  %232 = icmp ne i8 %229, 0
  %233 = and i1 %231, %232
  br i1 %233, label %218, label %234

234:                                              ; preds = %218, %215
  %235 = phi i8 [ 0, %215 ], [ %225, %218 ]
  br i1 %71, label %236, label %252

236:                                              ; preds = %234, %236
  %237 = phi i8 [ %243, %236 ], [ 0, %234 ]
  %238 = phi i8 [ %247, %236 ], [ %65, %234 ]
  %239 = phi i8 [ %248, %236 ], [ 86, %234 ]
  %240 = and i8 %239, 1
  %241 = icmp eq i8 %240, 0
  %242 = select i1 %241, i8 0, i8 %238
  %243 = xor i8 %242, %237
  %244 = shl i8 %238, 1
  %245 = icmp slt i8 %238, 0
  %246 = xor i8 %244, 77
  %247 = select i1 %245, i8 %246, i8 %244
  %248 = lshr i8 %239, 1
  %249 = icmp ne i8 %248, 0
  %250 = icmp ne i8 %247, 0
  %251 = and i1 %249, %250
  br i1 %251, label %236, label %252

252:                                              ; preds = %236, %234
  %253 = phi i8 [ 0, %234 ], [ %243, %236 ]
  %254 = xor i8 %253, %235
  br i1 %91, label %255, label %271

255:                                              ; preds = %252, %255
  %256 = phi i8 [ %262, %255 ], [ 0, %252 ]
  %257 = phi i8 [ %266, %255 ], [ %67, %252 ]
  %258 = phi i8 [ %267, %255 ], [ -126, %252 ]
  %259 = and i8 %258, 1
  %260 = icmp eq i8 %259, 0
  %261 = select i1 %260, i8 0, i8 %257
  %262 = xor i8 %261, %256
  %263 = shl i8 %257, 1
  %264 = icmp slt i8 %257, 0
  %265 = xor i8 %263, 77
  %266 = select i1 %264, i8 %265, i8 %263
  %267 = lshr i8 %258, 1
  %268 = icmp ne i8 %267, 0
  %269 = icmp ne i8 %266, 0
  %270 = and i1 %268, %269
  br i1 %270, label %255, label %271

271:                                              ; preds = %255, %252
  %272 = phi i8 [ 0, %252 ], [ %262, %255 ]
  %273 = xor i8 %254, %272
  br i1 %111, label %274, label %290

274:                                              ; preds = %271, %274
  %275 = phi i8 [ %281, %274 ], [ 0, %271 ]
  %276 = phi i8 [ %285, %274 ], [ %69, %271 ]
  %277 = phi i8 [ %286, %274 ], [ -13, %271 ]
  %278 = and i8 %277, 1
  %279 = icmp eq i8 %278, 0
  %280 = select i1 %279, i8 0, i8 %276
  %281 = xor i8 %280, %275
  %282 = shl i8 %276, 1
  %283 = icmp slt i8 %276, 0
  %284 = xor i8 %282, 77
  %285 = select i1 %283, i8 %284, i8 %282
  %286 = lshr i8 %277, 1
  %287 = icmp ne i8 %286, 0
  %288 = icmp ne i8 %285, 0
  %289 = and i1 %287, %288
  br i1 %289, label %274, label %290

290:                                              ; preds = %274, %271
  %291 = phi i8 [ 0, %271 ], [ %281, %274 ]
  %292 = xor i8 %273, %291
  br i1 %132, label %293, label %309

293:                                              ; preds = %290, %293
  %294 = phi i8 [ %300, %293 ], [ 0, %290 ]
  %295 = phi i8 [ %304, %293 ], [ %131, %290 ]
  %296 = phi i8 [ %305, %293 ], [ 30, %290 ]
  %297 = and i8 %296, 1
  %298 = icmp eq i8 %297, 0
  %299 = select i1 %298, i8 0, i8 %295
  %300 = xor i8 %299, %294
  %301 = shl i8 %295, 1
  %302 = icmp slt i8 %295, 0
  %303 = xor i8 %301, 77
  %304 = select i1 %302, i8 %303, i8 %301
  %305 = lshr i8 %296, 1
  %306 = icmp ne i8 %305, 0
  %307 = icmp ne i8 %304, 0
  %308 = and i1 %306, %307
  br i1 %308, label %293, label %309

309:                                              ; preds = %293, %290
  %310 = phi i8 [ 0, %290 ], [ %300, %293 ]
  %311 = xor i8 %292, %310
  br i1 %154, label %312, label %328

312:                                              ; preds = %309, %312
  %313 = phi i8 [ %319, %312 ], [ 0, %309 ]
  %314 = phi i8 [ %323, %312 ], [ %153, %309 ]
  %315 = phi i8 [ %324, %312 ], [ -58, %309 ]
  %316 = and i8 %315, 1
  %317 = icmp eq i8 %316, 0
  %318 = select i1 %317, i8 0, i8 %314
  %319 = xor i8 %318, %313
  %320 = shl i8 %314, 1
  %321 = icmp slt i8 %314, 0
  %322 = xor i8 %320, 77
  %323 = select i1 %321, i8 %322, i8 %320
  %324 = lshr i8 %315, 1
  %325 = icmp ne i8 %324, 0
  %326 = icmp ne i8 %323, 0
  %327 = and i1 %325, %326
  br i1 %327, label %312, label %328

328:                                              ; preds = %312, %309
  %329 = phi i8 [ 0, %309 ], [ %319, %312 ]
  %330 = xor i8 %311, %329
  br i1 %176, label %331, label %347

331:                                              ; preds = %328, %331
  %332 = phi i8 [ %338, %331 ], [ 0, %328 ]
  %333 = phi i8 [ %342, %331 ], [ %175, %328 ]
  %334 = phi i8 [ %343, %331 ], [ 104, %328 ]
  %335 = and i8 %334, 1
  %336 = icmp eq i8 %335, 0
  %337 = select i1 %336, i8 0, i8 %333
  %338 = xor i8 %337, %332
  %339 = shl i8 %333, 1
  %340 = icmp slt i8 %333, 0
  %341 = xor i8 %339, 77
  %342 = select i1 %340, i8 %341, i8 %339
  %343 = lshr i8 %334, 1
  %344 = icmp ne i8 %343, 0
  %345 = icmp ne i8 %342, 0
  %346 = and i1 %344, %345
  br i1 %346, label %331, label %347

347:                                              ; preds = %331, %328
  %348 = phi i8 [ 0, %328 ], [ %338, %331 ]
  %349 = xor i8 %330, %348
  br i1 %198, label %350, label %366

350:                                              ; preds = %347, %350
  %351 = phi i8 [ %357, %350 ], [ 0, %347 ]
  %352 = phi i8 [ %361, %350 ], [ %197, %347 ]
  %353 = phi i8 [ %362, %350 ], [ -27, %347 ]
  %354 = and i8 %353, 1
  %355 = icmp eq i8 %354, 0
  %356 = select i1 %355, i8 0, i8 %352
  %357 = xor i8 %356, %351
  %358 = shl i8 %352, 1
  %359 = icmp slt i8 %352, 0
  %360 = xor i8 %358, 77
  %361 = select i1 %359, i8 %360, i8 %358
  %362 = lshr i8 %353, 1
  %363 = icmp ne i8 %362, 0
  %364 = icmp ne i8 %361, 0
  %365 = and i1 %363, %364
  br i1 %365, label %350, label %366

366:                                              ; preds = %350, %347
  %367 = phi i8 [ 0, %347 ], [ %357, %350 ]
  %368 = xor i8 %349, %367
  br i1 %70, label %369, label %376

369:                                              ; preds = %366
  %370 = shl i8 %63, 1
  %371 = icmp slt i8 %63, 0
  %372 = xor i8 %370, 77
  %373 = select i1 %371, i8 %372, i8 %370
  %374 = icmp eq i8 %373, 0
  %375 = select i1 %374, i8 0, i8 %373
  br label %376

376:                                              ; preds = %369, %366
  %377 = phi i8 [ 0, %366 ], [ %375, %369 ]
  br i1 %71, label %378, label %394

378:                                              ; preds = %376, %378
  %379 = phi i8 [ %385, %378 ], [ 0, %376 ]
  %380 = phi i8 [ %389, %378 ], [ %65, %376 ]
  %381 = phi i8 [ %390, %378 ], [ -95, %376 ]
  %382 = and i8 %381, 1
  %383 = icmp eq i8 %382, 0
  %384 = select i1 %383, i8 0, i8 %380
  %385 = xor i8 %384, %379
  %386 = shl i8 %380, 1
  %387 = icmp slt i8 %380, 0
  %388 = xor i8 %386, 77
  %389 = select i1 %387, i8 %388, i8 %386
  %390 = lshr i8 %381, 1
  %391 = icmp ne i8 %390, 0
  %392 = icmp ne i8 %389, 0
  %393 = and i1 %391, %392
  br i1 %393, label %378, label %394

394:                                              ; preds = %378, %376
  %395 = phi i8 [ 0, %376 ], [ %385, %378 ]
  %396 = xor i8 %395, %377
  br i1 %91, label %397, label %413

397:                                              ; preds = %394, %397
  %398 = phi i8 [ %404, %397 ], [ 0, %394 ]
  %399 = phi i8 [ %408, %397 ], [ %67, %394 ]
  %400 = phi i8 [ %409, %397 ], [ -4, %394 ]
  %401 = and i8 %400, 1
  %402 = icmp eq i8 %401, 0
  %403 = select i1 %402, i8 0, i8 %399
  %404 = xor i8 %403, %398
  %405 = shl i8 %399, 1
  %406 = icmp slt i8 %399, 0
  %407 = xor i8 %405, 77
  %408 = select i1 %406, i8 %407, i8 %405
  %409 = lshr i8 %400, 1
  %410 = icmp ne i8 %409, 0
  %411 = icmp ne i8 %408, 0
  %412 = and i1 %410, %411
  br i1 %412, label %397, label %413

413:                                              ; preds = %397, %394
  %414 = phi i8 [ 0, %394 ], [ %404, %397 ]
  %415 = xor i8 %396, %414
  br i1 %111, label %416, label %432

416:                                              ; preds = %413, %416
  %417 = phi i8 [ %423, %416 ], [ 0, %413 ]
  %418 = phi i8 [ %427, %416 ], [ %69, %413 ]
  %419 = phi i8 [ %428, %416 ], [ -63, %413 ]
  %420 = and i8 %419, 1
  %421 = icmp eq i8 %420, 0
  %422 = select i1 %421, i8 0, i8 %418
  %423 = xor i8 %422, %417
  %424 = shl i8 %418, 1
  %425 = icmp slt i8 %418, 0
  %426 = xor i8 %424, 77
  %427 = select i1 %425, i8 %426, i8 %424
  %428 = lshr i8 %419, 1
  %429 = icmp ne i8 %428, 0
  %430 = icmp ne i8 %427, 0
  %431 = and i1 %429, %430
  br i1 %431, label %416, label %432

432:                                              ; preds = %416, %413
  %433 = phi i8 [ 0, %413 ], [ %423, %416 ]
  %434 = xor i8 %415, %433
  br i1 %132, label %435, label %451

435:                                              ; preds = %432, %435
  %436 = phi i8 [ %442, %435 ], [ 0, %432 ]
  %437 = phi i8 [ %446, %435 ], [ %131, %432 ]
  %438 = phi i8 [ %447, %435 ], [ 71, %432 ]
  %439 = and i8 %438, 1
  %440 = icmp eq i8 %439, 0
  %441 = select i1 %440, i8 0, i8 %437
  %442 = xor i8 %441, %436
  %443 = shl i8 %437, 1
  %444 = icmp slt i8 %437, 0
  %445 = xor i8 %443, 77
  %446 = select i1 %444, i8 %445, i8 %443
  %447 = lshr i8 %438, 1
  %448 = icmp ne i8 %447, 0
  %449 = icmp ne i8 %446, 0
  %450 = and i1 %448, %449
  br i1 %450, label %435, label %451

451:                                              ; preds = %435, %432
  %452 = phi i8 [ 0, %432 ], [ %442, %435 ]
  %453 = xor i8 %434, %452
  br i1 %154, label %454, label %470

454:                                              ; preds = %451, %454
  %455 = phi i8 [ %461, %454 ], [ 0, %451 ]
  %456 = phi i8 [ %465, %454 ], [ %153, %451 ]
  %457 = phi i8 [ %466, %454 ], [ -82, %451 ]
  %458 = and i8 %457, 1
  %459 = icmp eq i8 %458, 0
  %460 = select i1 %459, i8 0, i8 %456
  %461 = xor i8 %460, %455
  %462 = shl i8 %456, 1
  %463 = icmp slt i8 %456, 0
  %464 = xor i8 %462, 77
  %465 = select i1 %463, i8 %464, i8 %462
  %466 = lshr i8 %457, 1
  %467 = icmp ne i8 %466, 0
  %468 = icmp ne i8 %465, 0
  %469 = and i1 %467, %468
  br i1 %469, label %454, label %470

470:                                              ; preds = %454, %451
  %471 = phi i8 [ 0, %451 ], [ %461, %454 ]
  %472 = xor i8 %453, %471
  br i1 %176, label %473, label %489

473:                                              ; preds = %470, %473
  %474 = phi i8 [ %480, %473 ], [ 0, %470 ]
  %475 = phi i8 [ %484, %473 ], [ %175, %470 ]
  %476 = phi i8 [ %485, %473 ], [ 61, %470 ]
  %477 = and i8 %476, 1
  %478 = icmp eq i8 %477, 0
  %479 = select i1 %478, i8 0, i8 %475
  %480 = xor i8 %479, %474
  %481 = shl i8 %475, 1
  %482 = icmp slt i8 %475, 0
  %483 = xor i8 %481, 77
  %484 = select i1 %482, i8 %483, i8 %481
  %485 = lshr i8 %476, 1
  %486 = icmp ne i8 %485, 0
  %487 = icmp ne i8 %484, 0
  %488 = and i1 %486, %487
  br i1 %488, label %473, label %489

489:                                              ; preds = %473, %470
  %490 = phi i8 [ 0, %470 ], [ %480, %473 ]
  %491 = xor i8 %472, %490
  br i1 %198, label %492, label %508

492:                                              ; preds = %489, %492
  %493 = phi i8 [ %499, %492 ], [ 0, %489 ]
  %494 = phi i8 [ %503, %492 ], [ %197, %489 ]
  %495 = phi i8 [ %504, %492 ], [ 25, %489 ]
  %496 = and i8 %495, 1
  %497 = icmp eq i8 %496, 0
  %498 = select i1 %497, i8 0, i8 %494
  %499 = xor i8 %498, %493
  %500 = shl i8 %494, 1
  %501 = icmp slt i8 %494, 0
  %502 = xor i8 %500, 77
  %503 = select i1 %501, i8 %502, i8 %500
  %504 = lshr i8 %495, 1
  %505 = icmp ne i8 %504, 0
  %506 = icmp ne i8 %503, 0
  %507 = and i1 %505, %506
  br i1 %507, label %492, label %508

508:                                              ; preds = %492, %489
  %509 = phi i8 [ 0, %489 ], [ %499, %492 ]
  %510 = xor i8 %491, %509
  br i1 %70, label %511, label %527

511:                                              ; preds = %508, %511
  %512 = phi i8 [ %518, %511 ], [ 0, %508 ]
  %513 = phi i8 [ %522, %511 ], [ %63, %508 ]
  %514 = phi i8 [ %523, %511 ], [ -92, %508 ]
  %515 = and i8 %514, 1
  %516 = icmp eq i8 %515, 0
  %517 = select i1 %516, i8 0, i8 %513
  %518 = xor i8 %517, %512
  %519 = shl i8 %513, 1
  %520 = icmp slt i8 %513, 0
  %521 = xor i8 %519, 77
  %522 = select i1 %520, i8 %521, i8 %519
  %523 = lshr i8 %514, 1
  %524 = icmp ne i8 %523, 0
  %525 = icmp ne i8 %522, 0
  %526 = and i1 %524, %525
  br i1 %526, label %511, label %527

527:                                              ; preds = %511, %508
  %528 = phi i8 [ 0, %508 ], [ %518, %511 ]
  br i1 %71, label %529, label %545

529:                                              ; preds = %527, %529
  %530 = phi i8 [ %536, %529 ], [ 0, %527 ]
  %531 = phi i8 [ %540, %529 ], [ %65, %527 ]
  %532 = phi i8 [ %541, %529 ], [ 85, %527 ]
  %533 = and i8 %532, 1
  %534 = icmp eq i8 %533, 0
  %535 = select i1 %534, i8 0, i8 %531
  %536 = xor i8 %535, %530
  %537 = shl i8 %531, 1
  %538 = icmp slt i8 %531, 0
  %539 = xor i8 %537, 77
  %540 = select i1 %538, i8 %539, i8 %537
  %541 = lshr i8 %532, 1
  %542 = icmp ne i8 %541, 0
  %543 = icmp ne i8 %540, 0
  %544 = and i1 %542, %543
  br i1 %544, label %529, label %545

545:                                              ; preds = %529, %527
  %546 = phi i8 [ 0, %527 ], [ %536, %529 ]
  %547 = xor i8 %546, %528
  br i1 %91, label %548, label %564

548:                                              ; preds = %545, %548
  %549 = phi i8 [ %555, %548 ], [ 0, %545 ]
  %550 = phi i8 [ %559, %548 ], [ %67, %545 ]
  %551 = phi i8 [ %560, %548 ], [ -121, %545 ]
  %552 = and i8 %551, 1
  %553 = icmp eq i8 %552, 0
  %554 = select i1 %553, i8 0, i8 %550
  %555 = xor i8 %554, %549
  %556 = shl i8 %550, 1
  %557 = icmp slt i8 %550, 0
  %558 = xor i8 %556, 77
  %559 = select i1 %557, i8 %558, i8 %556
  %560 = lshr i8 %551, 1
  %561 = icmp ne i8 %560, 0
  %562 = icmp ne i8 %559, 0
  %563 = and i1 %561, %562
  br i1 %563, label %548, label %564

564:                                              ; preds = %548, %545
  %565 = phi i8 [ 0, %545 ], [ %555, %548 ]
  %566 = xor i8 %547, %565
  br i1 %111, label %567, label %583

567:                                              ; preds = %564, %567
  %568 = phi i8 [ %574, %567 ], [ 0, %564 ]
  %569 = phi i8 [ %578, %567 ], [ %69, %564 ]
  %570 = phi i8 [ %579, %567 ], [ 90, %564 ]
  %571 = and i8 %570, 1
  %572 = icmp eq i8 %571, 0
  %573 = select i1 %572, i8 0, i8 %569
  %574 = xor i8 %573, %568
  %575 = shl i8 %569, 1
  %576 = icmp slt i8 %569, 0
  %577 = xor i8 %575, 77
  %578 = select i1 %576, i8 %577, i8 %575
  %579 = lshr i8 %570, 1
  %580 = icmp ne i8 %579, 0
  %581 = icmp ne i8 %578, 0
  %582 = and i1 %580, %581
  br i1 %582, label %567, label %583

583:                                              ; preds = %567, %564
  %584 = phi i8 [ 0, %564 ], [ %574, %567 ]
  %585 = xor i8 %566, %584
  br i1 %132, label %586, label %602

586:                                              ; preds = %583, %586
  %587 = phi i8 [ %593, %586 ], [ 0, %583 ]
  %588 = phi i8 [ %597, %586 ], [ %131, %583 ]
  %589 = phi i8 [ %598, %586 ], [ 88, %583 ]
  %590 = and i8 %589, 1
  %591 = icmp eq i8 %590, 0
  %592 = select i1 %591, i8 0, i8 %588
  %593 = xor i8 %592, %587
  %594 = shl i8 %588, 1
  %595 = icmp slt i8 %588, 0
  %596 = xor i8 %594, 77
  %597 = select i1 %595, i8 %596, i8 %594
  %598 = lshr i8 %589, 1
  %599 = icmp ne i8 %598, 0
  %600 = icmp ne i8 %597, 0
  %601 = and i1 %599, %600
  br i1 %601, label %586, label %602

602:                                              ; preds = %586, %583
  %603 = phi i8 [ 0, %583 ], [ %593, %586 ]
  %604 = xor i8 %585, %603
  br i1 %154, label %605, label %621

605:                                              ; preds = %602, %605
  %606 = phi i8 [ %612, %605 ], [ 0, %602 ]
  %607 = phi i8 [ %616, %605 ], [ %153, %602 ]
  %608 = phi i8 [ %617, %605 ], [ -37, %602 ]
  %609 = and i8 %608, 1
  %610 = icmp eq i8 %609, 0
  %611 = select i1 %610, i8 0, i8 %607
  %612 = xor i8 %611, %606
  %613 = shl i8 %607, 1
  %614 = icmp slt i8 %607, 0
  %615 = xor i8 %613, 77
  %616 = select i1 %614, i8 %615, i8 %613
  %617 = lshr i8 %608, 1
  %618 = icmp ne i8 %617, 0
  %619 = icmp ne i8 %616, 0
  %620 = and i1 %618, %619
  br i1 %620, label %605, label %621

621:                                              ; preds = %605, %602
  %622 = phi i8 [ 0, %602 ], [ %612, %605 ]
  %623 = xor i8 %604, %622
  br i1 %176, label %624, label %640

624:                                              ; preds = %621, %624
  %625 = phi i8 [ %631, %624 ], [ 0, %621 ]
  %626 = phi i8 [ %635, %624 ], [ %175, %621 ]
  %627 = phi i8 [ %636, %624 ], [ -98, %621 ]
  %628 = and i8 %627, 1
  %629 = icmp eq i8 %628, 0
  %630 = select i1 %629, i8 0, i8 %626
  %631 = xor i8 %630, %625
  %632 = shl i8 %626, 1
  %633 = icmp slt i8 %626, 0
  %634 = xor i8 %632, 77
  %635 = select i1 %633, i8 %634, i8 %632
  %636 = lshr i8 %627, 1
  %637 = icmp ne i8 %636, 0
  %638 = icmp ne i8 %635, 0
  %639 = and i1 %637, %638
  br i1 %639, label %624, label %640

640:                                              ; preds = %624, %621
  %641 = phi i8 [ 0, %621 ], [ %631, %624 ]
  %642 = xor i8 %623, %641
  br i1 %198, label %643, label %652

643:                                              ; preds = %640
  %644 = shl nuw nsw i32 %196, 1
  %645 = trunc i32 %644 to i8
  %646 = icmp slt i8 %197, 0
  %647 = xor i8 %645, 77
  %648 = select i1 %646, i8 %647, i8 %645
  %649 = icmp eq i8 %648, 0
  %650 = xor i8 %648, %197
  %651 = select i1 %649, i8 %197, i8 %650
  br label %652

652:                                              ; preds = %643, %640
  %653 = phi i8 [ 0, %640 ], [ %651, %643 ]
  %654 = xor i8 %642, %653
  %655 = zext i8 %654 to i32
  %656 = shl nuw i32 %655, 24
  %657 = zext i8 %510 to i32
  %658 = shl nuw nsw i32 %657, 16
  %659 = zext i8 %368 to i32
  %660 = shl nuw nsw i32 %659, 8
  %661 = zext i8 %217 to i32
  %662 = or i32 %660, %661
  %663 = or i32 %662, %658
  %664 = or i32 %663, %656
  %665 = xor i32 %54, -1
  %666 = add i32 %53, %665
  %667 = sext i32 %666 to i64
  %668 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 1, i64 %667
  store i32 %664, i32* %668, align 4
  %669 = add nuw nsw i64 %52, 1
  %670 = add nuw nsw i32 %54, 1
  %671 = load i32, i32* %38, align 4
  %672 = sext i32 %671 to i64
  %673 = icmp slt i64 %669, %672
  br i1 %673, label %51, label %674

674:                                              ; preds = %652
  %675 = bitcast i32* %4 to [4 x i8]*
  %676 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %676) #5
  %677 = getelementptr inbounds [4 x i8], [4 x i8]* %675, i64 0, i64 1
  %678 = getelementptr inbounds [4 x i8], [4 x i8]* %675, i64 0, i64 2
  %679 = getelementptr inbounds [4 x i8], [4 x i8]* %675, i64 0, i64 3
  %680 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 1, i64 0
  store i32 -1431655766, i32* %4, align 4
  br label %681

681:                                              ; preds = %752, %674
  %682 = phi i32 [ %671, %674 ], [ %754, %752 ]
  %683 = phi i64 [ 0, %674 ], [ %750, %752 ]
  %684 = phi i32 [ 0, %674 ], [ %753, %752 ]
  %685 = trunc i32 %684 to i8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %676, i8 %685, i64 4, i1 false) #5
  call fastcc void @tf_h0(i8* nonnull %676, i32* %680, i32 %682) #5
  %686 = load i8, i8* %676, align 4
  %687 = zext i8 %686 to i32
  %688 = zext i8 %686 to i64
  %689 = getelementptr inbounds [256 x i8], [256 x i8]* @MD1, i64 0, i64 %688
  %690 = load i8, i8* %689, align 1
  %691 = zext i8 %690 to i32
  %692 = shl nuw nsw i32 %691, 8
  %693 = or i32 %692, %687
  %694 = getelementptr inbounds [256 x i8], [256 x i8]* @MD2, i64 0, i64 %688
  %695 = load i8, i8* %694, align 1
  %696 = zext i8 %695 to i32
  %697 = shl nuw nsw i32 %696, 16
  %698 = or i32 %693, %697
  %699 = shl nuw i32 %696, 24
  %700 = or i32 %698, %699
  %701 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 3, i64 %683
  store i32 %700, i32* %701, align 4
  %702 = load i8, i8* %677, align 1
  %703 = zext i8 %702 to i64
  %704 = getelementptr inbounds [256 x i8], [256 x i8]* @MD2, i64 0, i64 %703
  %705 = load i8, i8* %704, align 1
  %706 = zext i8 %705 to i32
  %707 = shl nuw nsw i32 %706, 8
  %708 = getelementptr inbounds [256 x i8], [256 x i8]* @MD1, i64 0, i64 %703
  %709 = load i8, i8* %708, align 1
  %710 = zext i8 %709 to i32
  %711 = shl nuw nsw i32 %710, 16
  %712 = zext i8 %702 to i32
  %713 = shl nuw i32 %712, 24
  %714 = or i32 %713, %706
  %715 = or i32 %714, %707
  %716 = or i32 %715, %711
  %717 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 4, i64 %683
  store i32 %716, i32* %717, align 4
  %718 = load i8, i8* %678, align 2
  %719 = zext i8 %718 to i64
  %720 = getelementptr inbounds [256 x i8], [256 x i8]* @MD1, i64 0, i64 %719
  %721 = load i8, i8* %720, align 1
  %722 = zext i8 %721 to i32
  %723 = getelementptr inbounds [256 x i8], [256 x i8]* @MD2, i64 0, i64 %719
  %724 = load i8, i8* %723, align 1
  %725 = zext i8 %724 to i32
  %726 = shl nuw nsw i32 %725, 8
  %727 = zext i8 %718 to i32
  %728 = shl nuw nsw i32 %727, 16
  %729 = shl nuw i32 %725, 24
  %730 = or i32 %728, %722
  %731 = or i32 %730, %726
  %732 = or i32 %731, %729
  %733 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 5, i64 %683
  store i32 %732, i32* %733, align 4
  %734 = load i8, i8* %679, align 1
  %735 = zext i8 %734 to i64
  %736 = getelementptr inbounds [256 x i8], [256 x i8]* @MD1, i64 0, i64 %735
  %737 = load i8, i8* %736, align 1
  %738 = zext i8 %737 to i32
  %739 = zext i8 %734 to i32
  %740 = shl nuw nsw i32 %739, 8
  %741 = or i32 %740, %738
  %742 = getelementptr inbounds [256 x i8], [256 x i8]* @MD2, i64 0, i64 %735
  %743 = load i8, i8* %742, align 1
  %744 = zext i8 %743 to i32
  %745 = shl nuw nsw i32 %744, 16
  %746 = shl nuw i32 %738, 24
  %747 = or i32 %741, %746
  %748 = or i32 %747, %745
  %749 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 6, i64 %683
  store i32 %748, i32* %749, align 4
  %750 = add nuw nsw i64 %683, 1
  %751 = icmp eq i64 %750, 256
  br i1 %751, label %755, label %752

752:                                              ; preds = %681
  %753 = add nuw nsw i32 %684, 1
  %754 = load i32, i32* %38, align 4
  br label %681

755:                                              ; preds = %681
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %676) #5
  br label %756

756:                                              ; preds = %756, %755
  %757 = phi i64 [ 0, %755 ], [ %779, %756 ]
  %758 = shl nuw nsw i64 %757, 1
  %759 = load i32, i32* %38, align 4
  %760 = trunc i64 %757 to i32
  %761 = mul i32 %760, 33686018
  %762 = call fastcc i32 @tf_h(i32 %761, i32* nonnull %13, i32 %759)
  %763 = or i64 %758, 1
  %764 = load i32, i32* %38, align 4
  %765 = trunc i64 %763 to i32
  %766 = mul i32 %765, 16843009
  %767 = call fastcc i32 @tf_h(i32 %766, i32* nonnull %16, i32 %764)
  %768 = shl i32 %767, 8
  %769 = lshr i32 %767, 24
  %770 = or i32 %768, %769
  %771 = add i32 %770, %762
  %772 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 0, i64 %758
  store i32 %771, i32* %772, align 4
  %773 = shl i32 %770, 1
  %774 = add i32 %773, %762
  %775 = shl i32 %774, 9
  %776 = lshr i32 %774, 23
  %777 = or i32 %775, %776
  %778 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 0, i64 %763
  store i32 %777, i32* %778, align 4
  %779 = add nuw nsw i64 %757, 1
  %780 = icmp eq i64 %779, 20
  br i1 %780, label %781, label %756

781:                                              ; preds = %756
  %782 = load i32, i32* %38, align 4
  %783 = shl i32 %782, 6
  %784 = icmp ne i32 %783, %2
  %785 = zext i1 %784 to i32
  br label %786

786:                                              ; preds = %781, %3
  %787 = phi i32 [ -22, %3 ], [ %785, %781 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #5
  ret i32 %787
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @tf_h(i32, i32* nocapture readonly, i32) unnamed_addr #0 {
  %4 = alloca %union.unaligned_32, align 4
  %5 = bitcast %union.unaligned_32* %4 to [4 x i8]*
  %6 = bitcast %union.unaligned_32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 0, i64 1
  %8 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 0, i64 2
  %9 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 0, i64 3
  %10 = getelementptr inbounds %union.unaligned_32, %union.unaligned_32* %4, i64 0, i32 0
  store i32 %0, i32* %10, align 4
  call fastcc void @tf_h0(i8* nonnull %6, i32* %1, i32 %2)
  %11 = load i8, i8* %6, align 4
  %12 = load i8, i8* %7, align 1
  %13 = zext i8 %12 to i64
  %14 = getelementptr inbounds [256 x i8], [256 x i8]* @MD2, i64 0, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = xor i8 %15, %11
  %17 = load i8, i8* %8, align 2
  %18 = zext i8 %17 to i64
  %19 = getelementptr inbounds [256 x i8], [256 x i8]* @MD1, i64 0, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = xor i8 %16, %20
  %22 = load i8, i8* %9, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* @MD1, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = xor i8 %21, %25
  %27 = zext i8 %11 to i64
  %28 = getelementptr inbounds [256 x i8], [256 x i8]* @MD1, i64 0, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = getelementptr inbounds [256 x i8], [256 x i8]* @MD2, i64 0, i64 %18
  %31 = load i8, i8* %30, align 1
  %32 = xor i8 %22, %15
  %33 = xor i8 %32, %29
  %34 = xor i8 %33, %31
  %35 = getelementptr inbounds [256 x i8], [256 x i8]* @MD2, i64 0, i64 %27
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [256 x i8], [256 x i8]* @MD1, i64 0, i64 %13
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds [256 x i8], [256 x i8]* @MD2, i64 0, i64 %23
  %40 = load i8, i8* %39, align 1
  %41 = xor i8 %36, %17
  %42 = xor i8 %41, %38
  %43 = xor i8 %42, %40
  %44 = xor i8 %25, %12
  %45 = xor i8 %44, %31
  %46 = xor i8 %45, %36
  %47 = zext i8 %46 to i32
  %48 = shl nuw i32 %47, 24
  %49 = zext i8 %43 to i32
  %50 = shl nuw nsw i32 %49, 16
  %51 = zext i8 %34 to i32
  %52 = shl nuw nsw i32 %51, 8
  %53 = zext i8 %26 to i32
  %54 = or i32 %52, %53
  %55 = or i32 %54, %48
  %56 = or i32 %55, %50
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 %56
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @av_twofish_crypt(%struct.AVTWOFISH* readonly, i8* nocapture, i8* nocapture readonly, i32, i8*, i32) local_unnamed_addr #0 {
  %7 = icmp eq i32 %3, 0
  br i1 %7, label %288, label %8

8:                                                ; preds = %6
  %9 = icmp eq i32 %5, 0
  %10 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 0, i64 4
  %11 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 0, i64 5
  %12 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 0, i64 6
  %13 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 0, i64 7
  %14 = icmp eq i8* %4, null
  %15 = getelementptr inbounds i8, i8* %4, i64 4
  %16 = getelementptr inbounds i8, i8* %4, i64 8
  %17 = getelementptr inbounds i8, i8* %4, i64 12
  %18 = getelementptr inbounds i8, i8* %4, i64 1
  %19 = getelementptr inbounds i8, i8* %4, i64 2
  %20 = getelementptr inbounds i8, i8* %4, i64 3
  %21 = getelementptr inbounds i8, i8* %4, i64 5
  %22 = getelementptr inbounds i8, i8* %4, i64 6
  %23 = getelementptr inbounds i8, i8* %4, i64 7
  %24 = getelementptr inbounds i8, i8* %4, i64 9
  %25 = getelementptr inbounds i8, i8* %4, i64 10
  %26 = getelementptr inbounds i8, i8* %4, i64 11
  %27 = getelementptr inbounds i8, i8* %4, i64 13
  %28 = getelementptr inbounds i8, i8* %4, i64 14
  %29 = getelementptr inbounds i8, i8* %4, i64 15
  %30 = bitcast %struct.AVTWOFISH* %0 to <4 x i32>*
  %31 = bitcast i8* %4 to <4 x i32>*
  br label %32

32:                                               ; preds = %8, %284
  %33 = phi i32 [ %3, %8 ], [ %36, %284 ]
  %34 = phi i8* [ %1, %8 ], [ %286, %284 ]
  %35 = phi i8* [ %2, %8 ], [ %285, %284 ]
  %36 = add nsw i32 %33, -1
  br i1 %9, label %203, label %37

37:                                               ; preds = %32
  %38 = bitcast i8* %35 to i32*
  %39 = load i32, i32* %38, align 1
  %40 = load i32, i32* %10, align 4
  %41 = xor i32 %40, %39
  %42 = getelementptr inbounds i8, i8* %35, i64 4
  %43 = bitcast i8* %42 to i32*
  %44 = load i32, i32* %43, align 1
  %45 = load i32, i32* %11, align 4
  %46 = xor i32 %45, %44
  %47 = getelementptr inbounds i8, i8* %35, i64 8
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = load i32, i32* %12, align 4
  %51 = xor i32 %50, %49
  %52 = getelementptr inbounds i8, i8* %35, i64 12
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %53, align 1
  %55 = load i32, i32* %13, align 4
  %56 = xor i32 %55, %54
  br label %57

57:                                               ; preds = %57, %37
  %58 = phi i64 [ 15, %37 ], [ %186, %57 ]
  %59 = phi i32 [ %51, %37 ], [ %114, %57 ]
  %60 = phi i32 [ %56, %37 ], [ %124, %57 ]
  %61 = phi i32 [ %41, %37 ], [ %175, %57 ]
  %62 = phi i32 [ %46, %37 ], [ %185, %57 ]
  %63 = and i32 %61, 255
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 3, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = lshr i32 %61, 8
  %68 = and i32 %67, 255
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 4, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = xor i32 %71, %66
  %73 = lshr i32 %61, 16
  %74 = and i32 %73, 255
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 5, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = xor i32 %72, %77
  %79 = lshr i32 %61, 24
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 6, i64 %80
  %82 = load i32, i32* %81, align 4
  %83 = xor i32 %78, %82
  %84 = lshr i32 %62, 24
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 3, i64 %85
  %87 = load i32, i32* %86, align 4
  %88 = and i32 %62, 255
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 4, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = xor i32 %91, %87
  %93 = lshr i32 %62, 8
  %94 = and i32 %93, 255
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 5, i64 %95
  %97 = load i32, i32* %96, align 4
  %98 = xor i32 %92, %97
  %99 = lshr i32 %62, 16
  %100 = and i32 %99, 255
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 6, i64 %101
  %103 = load i32, i32* %102, align 4
  %104 = xor i32 %98, %103
  %105 = shl i32 %59, 1
  %106 = lshr i32 %59, 31
  %107 = or i32 %105, %106
  %108 = add i32 %104, %83
  %109 = shl nsw i64 %58, 1
  %110 = add nuw nsw i64 %109, 8
  %111 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 0, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = add i32 %108, %112
  %114 = xor i32 %113, %107
  %115 = shl i32 %104, 1
  %116 = add i32 %115, %83
  %117 = add nuw nsw i64 %109, 9
  %118 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 0, i64 %117
  %119 = load i32, i32* %118, align 4
  %120 = add i32 %116, %119
  %121 = xor i32 %120, %60
  %122 = lshr i32 %121, 1
  %123 = shl i32 %121, 31
  %124 = or i32 %122, %123
  %125 = and i32 %114, 255
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 3, i64 %126
  %128 = load i32, i32* %127, align 4
  %129 = lshr i32 %114, 8
  %130 = and i32 %129, 255
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 4, i64 %131
  %133 = load i32, i32* %132, align 4
  %134 = xor i32 %133, %128
  %135 = lshr i32 %114, 16
  %136 = and i32 %135, 255
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 5, i64 %137
  %139 = load i32, i32* %138, align 4
  %140 = xor i32 %134, %139
  %141 = lshr i32 %114, 24
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 6, i64 %142
  %144 = load i32, i32* %143, align 4
  %145 = xor i32 %140, %144
  %146 = lshr i32 %124, 24
  %147 = zext i32 %146 to i64
  %148 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 3, i64 %147
  %149 = load i32, i32* %148, align 4
  %150 = and i32 %122, 255
  %151 = zext i32 %150 to i64
  %152 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 4, i64 %151
  %153 = load i32, i32* %152, align 4
  %154 = xor i32 %153, %149
  %155 = lshr i32 %121, 9
  %156 = and i32 %155, 255
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 5, i64 %157
  %159 = load i32, i32* %158, align 4
  %160 = xor i32 %154, %159
  %161 = lshr i32 %121, 17
  %162 = and i32 %161, 255
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 6, i64 %163
  %165 = load i32, i32* %164, align 4
  %166 = xor i32 %160, %165
  %167 = shl i32 %61, 1
  %168 = lshr i32 %61, 31
  %169 = or i32 %167, %168
  %170 = add i32 %166, %145
  %171 = add nuw nsw i64 %109, 6
  %172 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 0, i64 %171
  %173 = load i32, i32* %172, align 4
  %174 = add i32 %170, %173
  %175 = xor i32 %174, %169
  %176 = shl i32 %166, 1
  %177 = add i32 %176, %145
  %178 = add nuw nsw i64 %109, 7
  %179 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 0, i64 %178
  %180 = load i32, i32* %179, align 4
  %181 = add i32 %177, %180
  %182 = xor i32 %181, %62
  %183 = lshr i32 %182, 1
  %184 = shl i32 %182, 31
  %185 = or i32 %183, %184
  %186 = add nsw i64 %58, -2
  %187 = icmp sgt i64 %186, -1
  br i1 %187, label %57, label %188

188:                                              ; preds = %57
  %189 = load <4 x i32>, <4 x i32>* %30, align 4
  %190 = shufflevector <4 x i32> %189, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %191 = insertelement <4 x i32> undef, i32 %175, i32 0
  %192 = insertelement <4 x i32> %191, i32 %185, i32 1
  %193 = insertelement <4 x i32> %192, i32 %114, i32 2
  %194 = insertelement <4 x i32> %193, i32 %124, i32 3
  %195 = xor <4 x i32> %190, %194
  br i1 %14, label %200, label %196

196:                                              ; preds = %188
  %197 = load <4 x i32>, <4 x i32>* %31, align 1
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %199 = xor <4 x i32> %198, %195
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %4, i8* align 1 %35, i64 16, i1 false) #5
  br label %200

200:                                              ; preds = %188, %196
  %201 = phi <4 x i32> [ %199, %196 ], [ %195, %188 ]
  %202 = bitcast i8* %34 to <4 x i32>*
  store <4 x i32> %201, <4 x i32>* %202, align 1
  br label %284

203:                                              ; preds = %32
  br i1 %14, label %283, label %204

204:                                              ; preds = %203
  %205 = load i8, i8* %35, align 1
  %206 = load i8, i8* %4, align 1
  %207 = xor i8 %206, %205
  store i8 %207, i8* %34, align 1
  %208 = getelementptr inbounds i8, i8* %35, i64 1
  %209 = load i8, i8* %208, align 1
  %210 = load i8, i8* %18, align 1
  %211 = xor i8 %210, %209
  %212 = getelementptr inbounds i8, i8* %34, i64 1
  store i8 %211, i8* %212, align 1
  %213 = getelementptr inbounds i8, i8* %35, i64 2
  %214 = load i8, i8* %213, align 1
  %215 = load i8, i8* %19, align 1
  %216 = xor i8 %215, %214
  %217 = getelementptr inbounds i8, i8* %34, i64 2
  store i8 %216, i8* %217, align 1
  %218 = getelementptr inbounds i8, i8* %35, i64 3
  %219 = load i8, i8* %218, align 1
  %220 = load i8, i8* %20, align 1
  %221 = xor i8 %220, %219
  %222 = getelementptr inbounds i8, i8* %34, i64 3
  store i8 %221, i8* %222, align 1
  %223 = getelementptr inbounds i8, i8* %35, i64 4
  %224 = load i8, i8* %223, align 1
  %225 = load i8, i8* %15, align 1
  %226 = xor i8 %225, %224
  %227 = getelementptr inbounds i8, i8* %34, i64 4
  store i8 %226, i8* %227, align 1
  %228 = getelementptr inbounds i8, i8* %35, i64 5
  %229 = load i8, i8* %228, align 1
  %230 = load i8, i8* %21, align 1
  %231 = xor i8 %230, %229
  %232 = getelementptr inbounds i8, i8* %34, i64 5
  store i8 %231, i8* %232, align 1
  %233 = getelementptr inbounds i8, i8* %35, i64 6
  %234 = load i8, i8* %233, align 1
  %235 = load i8, i8* %22, align 1
  %236 = xor i8 %235, %234
  %237 = getelementptr inbounds i8, i8* %34, i64 6
  store i8 %236, i8* %237, align 1
  %238 = getelementptr inbounds i8, i8* %35, i64 7
  %239 = load i8, i8* %238, align 1
  %240 = load i8, i8* %23, align 1
  %241 = xor i8 %240, %239
  %242 = getelementptr inbounds i8, i8* %34, i64 7
  store i8 %241, i8* %242, align 1
  %243 = getelementptr inbounds i8, i8* %35, i64 8
  %244 = load i8, i8* %243, align 1
  %245 = load i8, i8* %16, align 1
  %246 = xor i8 %245, %244
  %247 = getelementptr inbounds i8, i8* %34, i64 8
  store i8 %246, i8* %247, align 1
  %248 = getelementptr inbounds i8, i8* %35, i64 9
  %249 = load i8, i8* %248, align 1
  %250 = load i8, i8* %24, align 1
  %251 = xor i8 %250, %249
  %252 = getelementptr inbounds i8, i8* %34, i64 9
  store i8 %251, i8* %252, align 1
  %253 = getelementptr inbounds i8, i8* %35, i64 10
  %254 = load i8, i8* %253, align 1
  %255 = load i8, i8* %25, align 1
  %256 = xor i8 %255, %254
  %257 = getelementptr inbounds i8, i8* %34, i64 10
  store i8 %256, i8* %257, align 1
  %258 = getelementptr inbounds i8, i8* %35, i64 11
  %259 = load i8, i8* %258, align 1
  %260 = load i8, i8* %26, align 1
  %261 = xor i8 %260, %259
  %262 = getelementptr inbounds i8, i8* %34, i64 11
  store i8 %261, i8* %262, align 1
  %263 = getelementptr inbounds i8, i8* %35, i64 12
  %264 = load i8, i8* %263, align 1
  %265 = load i8, i8* %17, align 1
  %266 = xor i8 %265, %264
  %267 = getelementptr inbounds i8, i8* %34, i64 12
  store i8 %266, i8* %267, align 1
  %268 = getelementptr inbounds i8, i8* %35, i64 13
  %269 = load i8, i8* %268, align 1
  %270 = load i8, i8* %27, align 1
  %271 = xor i8 %270, %269
  %272 = getelementptr inbounds i8, i8* %34, i64 13
  store i8 %271, i8* %272, align 1
  %273 = getelementptr inbounds i8, i8* %35, i64 14
  %274 = load i8, i8* %273, align 1
  %275 = load i8, i8* %28, align 1
  %276 = xor i8 %275, %274
  %277 = getelementptr inbounds i8, i8* %34, i64 14
  store i8 %276, i8* %277, align 1
  %278 = getelementptr inbounds i8, i8* %35, i64 15
  %279 = load i8, i8* %278, align 1
  %280 = load i8, i8* %29, align 1
  %281 = xor i8 %280, %279
  %282 = getelementptr inbounds i8, i8* %34, i64 15
  store i8 %281, i8* %282, align 1
  tail call fastcc void @twofish_encrypt(%struct.AVTWOFISH* %0, i8* %34, i8* %34)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %4, i8* align 1 %34, i64 16, i1 false)
  br label %284

283:                                              ; preds = %203
  tail call fastcc void @twofish_encrypt(%struct.AVTWOFISH* %0, i8* %34, i8* %35)
  br label %284

284:                                              ; preds = %204, %283, %200
  %285 = getelementptr inbounds i8, i8* %35, i64 16
  %286 = getelementptr inbounds i8, i8* %34, i64 16
  %287 = icmp eq i32 %36, 0
  br i1 %287, label %288, label %32

288:                                              ; preds = %284, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @twofish_encrypt(%struct.AVTWOFISH* readonly, i8* nocapture, i8* nocapture readonly) unnamed_addr #4 {
  %4 = bitcast i8* %2 to <4 x i32>*
  %5 = load <4 x i32>, <4 x i32>* %4, align 1
  %6 = bitcast %struct.AVTWOFISH* %0 to <4 x i32>*
  %7 = load <4 x i32>, <4 x i32>* %6, align 4
  %8 = xor <4 x i32> %7, %5
  br label %9

9:                                                ; preds = %3, %9
  %10 = phi i64 [ 0, %3 ], [ %139, %9 ]
  %11 = phi <4 x i32> [ %8, %3 ], [ %144, %9 ]
  %12 = extractelement <4 x i32> %11, i32 0
  %13 = and i32 %12, 255
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 3, i64 %14
  %16 = load i32, i32* %15, align 4
  %17 = lshr i32 %12, 8
  %18 = and i32 %17, 255
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 4, i64 %19
  %21 = load i32, i32* %20, align 4
  %22 = xor i32 %21, %16
  %23 = lshr i32 %12, 16
  %24 = and i32 %23, 255
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 5, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = xor i32 %22, %27
  %29 = lshr i32 %12, 24
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 6, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = xor i32 %28, %32
  %34 = extractelement <4 x i32> %11, i32 1
  %35 = lshr i32 %34, 24
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 3, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = and i32 %34, 255
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 4, i64 %40
  %42 = load i32, i32* %41, align 4
  %43 = xor i32 %42, %38
  %44 = lshr i32 %34, 8
  %45 = and i32 %44, 255
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 5, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = xor i32 %43, %48
  %50 = lshr i32 %34, 16
  %51 = and i32 %50, 255
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 6, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = xor i32 %49, %54
  %56 = add i32 %55, %33
  %57 = shl nuw nsw i64 %10, 1
  %58 = add nuw nsw i64 %57, 8
  %59 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 0, i64 %58
  %60 = load i32, i32* %59, align 4
  %61 = add i32 %56, %60
  %62 = extractelement <4 x i32> %11, i32 2
  %63 = xor i32 %61, %62
  %64 = lshr i32 %63, 1
  %65 = shl i32 %63, 31
  %66 = or i32 %64, %65
  %67 = extractelement <4 x i32> %11, i32 3
  %68 = shl i32 %67, 1
  %69 = lshr i32 %67, 31
  %70 = or i32 %68, %69
  %71 = shl i32 %55, 1
  %72 = add i32 %71, %33
  %73 = add nuw nsw i64 %57, 9
  %74 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 0, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = add i32 %72, %75
  %77 = xor i32 %76, %70
  %78 = and i32 %64, 255
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 3, i64 %79
  %81 = load i32, i32* %80, align 4
  %82 = lshr i32 %63, 9
  %83 = and i32 %82, 255
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 4, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = xor i32 %86, %81
  %88 = lshr i32 %63, 17
  %89 = and i32 %88, 255
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 5, i64 %90
  %92 = load i32, i32* %91, align 4
  %93 = xor i32 %87, %92
  %94 = lshr i32 %66, 24
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 6, i64 %95
  %97 = load i32, i32* %96, align 4
  %98 = xor i32 %93, %97
  %99 = lshr i32 %77, 24
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 3, i64 %100
  %102 = load i32, i32* %101, align 4
  %103 = and i32 %77, 255
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 4, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = xor i32 %106, %102
  %108 = lshr i32 %77, 8
  %109 = and i32 %108, 255
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 5, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = xor i32 %107, %112
  %114 = lshr i32 %77, 16
  %115 = and i32 %114, 255
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 6, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = xor i32 %113, %118
  %120 = add i32 %119, %98
  %121 = add nuw nsw i64 %57, 10
  %122 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 0, i64 %121
  %123 = load i32, i32* %122, align 4
  %124 = add i32 %120, %123
  %125 = xor i32 %124, %12
  %126 = lshr i32 %125, 1
  %127 = shl i32 %125, 31
  %128 = or i32 %126, %127
  %129 = shl i32 %34, 1
  %130 = lshr i32 %34, 31
  %131 = or i32 %129, %130
  %132 = shl i32 %119, 1
  %133 = add i32 %132, %98
  %134 = add nuw nsw i64 %57, 11
  %135 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 0, i64 %134
  %136 = load i32, i32* %135, align 4
  %137 = add i32 %133, %136
  %138 = xor i32 %137, %131
  %139 = add nuw nsw i64 %10, 2
  %140 = icmp ult i64 %139, 16
  %141 = insertelement <4 x i32> undef, i32 %128, i32 0
  %142 = insertelement <4 x i32> %141, i32 %138, i32 1
  %143 = insertelement <4 x i32> %142, i32 %66, i32 2
  %144 = insertelement <4 x i32> %143, i32 %77, i32 3
  br i1 %140, label %9, label %145

145:                                              ; preds = %9
  %146 = getelementptr inbounds %struct.AVTWOFISH, %struct.AVTWOFISH* %0, i64 0, i32 0, i64 4
  %147 = bitcast i32* %146 to <4 x i32>*
  %148 = load <4 x i32>, <4 x i32>* %147, align 4
  %149 = insertelement <4 x i32> undef, i32 %66, i32 0
  %150 = insertelement <4 x i32> %149, i32 %77, i32 1
  %151 = insertelement <4 x i32> %150, i32 %128, i32 2
  %152 = insertelement <4 x i32> %151, i32 %138, i32 3
  %153 = xor <4 x i32> %148, %152
  %154 = bitcast i8* %1 to <4 x i32>*
  store <4 x i32> %153, <4 x i32>* %154, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @tf_h0(i8* nocapture, i32* nocapture readonly, i32) unnamed_addr #4 {
  %4 = icmp eq i32 %2, 4
  br i1 %4, label %5, label %38

5:                                                ; preds = %3
  %6 = getelementptr inbounds i32, i32* %1, i64 3
  %7 = load i32, i32* %6, align 4
  %8 = lshr i32 %7, 8
  %9 = lshr i32 %7, 16
  %10 = lshr i32 %7, 24
  %11 = load i8, i8* %0, align 1
  %12 = zext i8 %11 to i64
  %13 = getelementptr inbounds [256 x i8], [256 x i8]* @q1, i64 0, i64 %12
  %14 = load i8, i8* %13, align 1
  %15 = trunc i32 %7 to i8
  %16 = xor i8 %14, %15
  store i8 %16, i8* %0, align 1
  %17 = getelementptr inbounds i8, i8* %0, i64 1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i64
  %20 = getelementptr inbounds [256 x i8], [256 x i8]* @q0, i64 0, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = trunc i32 %8 to i8
  %23 = xor i8 %21, %22
  store i8 %23, i8* %17, align 1
  %24 = getelementptr inbounds i8, i8* %0, i64 2
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i64
  %27 = getelementptr inbounds [256 x i8], [256 x i8]* @q0, i64 0, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = trunc i32 %9 to i8
  %30 = xor i8 %28, %29
  store i8 %30, i8* %24, align 1
  %31 = getelementptr inbounds i8, i8* %0, i64 3
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i64
  %34 = getelementptr inbounds [256 x i8], [256 x i8]* @q1, i64 0, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = trunc i32 %10 to i8
  %37 = xor i8 %35, %36
  store i8 %37, i8* %31, align 1
  br label %47

38:                                               ; preds = %3
  %39 = icmp sgt i32 %2, 2
  %40 = load i8, i8* %0, align 1
  %41 = getelementptr inbounds i8, i8* %0, i64 1
  %42 = load i8, i8* %41, align 1
  %43 = getelementptr inbounds i8, i8* %0, i64 2
  %44 = load i8, i8* %43, align 1
  %45 = getelementptr inbounds i8, i8* %0, i64 3
  %46 = load i8, i8* %45, align 1
  br i1 %39, label %47, label %80

47:                                               ; preds = %38, %5
  %48 = phi i8 [ %37, %5 ], [ %46, %38 ]
  %49 = phi i8 [ %30, %5 ], [ %44, %38 ]
  %50 = phi i8 [ %23, %5 ], [ %42, %38 ]
  %51 = phi i8 [ %16, %5 ], [ %40, %38 ]
  %52 = getelementptr inbounds i32, i32* %1, i64 2
  %53 = load i32, i32* %52, align 4
  %54 = lshr i32 %53, 8
  %55 = lshr i32 %53, 16
  %56 = lshr i32 %53, 24
  %57 = zext i8 %51 to i64
  %58 = getelementptr inbounds [256 x i8], [256 x i8]* @q1, i64 0, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = trunc i32 %53 to i8
  %61 = xor i8 %59, %60
  store i8 %61, i8* %0, align 1
  %62 = getelementptr inbounds i8, i8* %0, i64 1
  %63 = zext i8 %50 to i64
  %64 = getelementptr inbounds [256 x i8], [256 x i8]* @q1, i64 0, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = trunc i32 %54 to i8
  %67 = xor i8 %65, %66
  store i8 %67, i8* %62, align 1
  %68 = getelementptr inbounds i8, i8* %0, i64 2
  %69 = zext i8 %49 to i64
  %70 = getelementptr inbounds [256 x i8], [256 x i8]* @q0, i64 0, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = trunc i32 %55 to i8
  %73 = xor i8 %71, %72
  store i8 %73, i8* %68, align 1
  %74 = getelementptr inbounds i8, i8* %0, i64 3
  %75 = zext i8 %48 to i64
  %76 = getelementptr inbounds [256 x i8], [256 x i8]* @q0, i64 0, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = trunc i32 %56 to i8
  %79 = xor i8 %77, %78
  store i8 %79, i8* %74, align 1
  br label %80

80:                                               ; preds = %38, %47
  %81 = phi i8 [ %79, %47 ], [ %46, %38 ]
  %82 = phi i8 [ %73, %47 ], [ %44, %38 ]
  %83 = phi i8 [ %67, %47 ], [ %42, %38 ]
  %84 = phi i8 [ %61, %47 ], [ %40, %38 ]
  %85 = getelementptr inbounds i32, i32* %1, i64 1
  %86 = load i32, i32* %85, align 4
  %87 = lshr i32 %86, 8
  %88 = lshr i32 %86, 16
  %89 = lshr i32 %86, 24
  %90 = zext i8 %84 to i64
  %91 = getelementptr inbounds [256 x i8], [256 x i8]* @q0, i64 0, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = and i32 %86, 255
  %95 = xor i32 %94, %93
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds [256 x i8], [256 x i8]* @q0, i64 0, i64 %96
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = load i32, i32* %1, align 4
  %101 = and i32 %100, 255
  %102 = xor i32 %101, %99
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds [256 x i8], [256 x i8]* @q1, i64 0, i64 %103
  %105 = load i8, i8* %104, align 1
  store i8 %105, i8* %0, align 1
  %106 = getelementptr inbounds i8, i8* %0, i64 1
  %107 = zext i8 %83 to i64
  %108 = getelementptr inbounds [256 x i8], [256 x i8]* @q1, i64 0, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = and i32 %87, 255
  %112 = xor i32 %111, %110
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds [256 x i8], [256 x i8]* @q0, i64 0, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = load i32, i32* %1, align 4
  %118 = lshr i32 %117, 8
  %119 = and i32 %118, 255
  %120 = xor i32 %119, %116
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds [256 x i8], [256 x i8]* @q0, i64 0, i64 %121
  %123 = load i8, i8* %122, align 1
  store i8 %123, i8* %106, align 1
  %124 = getelementptr inbounds i8, i8* %0, i64 2
  %125 = zext i8 %82 to i64
  %126 = getelementptr inbounds [256 x i8], [256 x i8]* @q0, i64 0, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = and i32 %88, 255
  %130 = xor i32 %129, %128
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds [256 x i8], [256 x i8]* @q1, i64 0, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = load i32, i32* %1, align 4
  %136 = lshr i32 %135, 16
  %137 = and i32 %136, 255
  %138 = xor i32 %137, %134
  %139 = zext i32 %138 to i64
  %140 = getelementptr inbounds [256 x i8], [256 x i8]* @q1, i64 0, i64 %139
  %141 = load i8, i8* %140, align 1
  store i8 %141, i8* %124, align 1
  %142 = getelementptr inbounds i8, i8* %0, i64 3
  %143 = zext i8 %81 to i64
  %144 = getelementptr inbounds [256 x i8], [256 x i8]* @q1, i64 0, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = xor i32 %89, %146
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds [256 x i8], [256 x i8]* @q1, i64 0, i64 %148
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = load i32, i32* %1, align 4
  %153 = lshr i32 %152, 24
  %154 = xor i32 %153, %151
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds [256 x i8], [256 x i8]* @q0, i64 0, i64 %155
  %157 = load i8, i8* %156, align 1
  store i8 %157, i8* %142, align 1
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
