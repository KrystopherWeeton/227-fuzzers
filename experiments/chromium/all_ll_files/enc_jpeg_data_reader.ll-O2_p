; ModuleID = '../../third_party/libjxl/src/lib/jxl/jpeg/enc_jpeg_data_reader.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/jpeg/enc_jpeg_data_reader.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.8", %"class.std::__1::vector", %"class.std::__1::vector.15", %"class.std::__1::vector.22", %"class.std::__1::vector.31", %"class.std::__1::vector.45", %"class.std::__1::vector.0", %"class.std::__1::vector", %"class.std::__1::vector.0", i32, i8, %"class.std::__1::vector.0" }
%"class.jxl::Fields" = type { i32 (...)** }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { i32*, i32*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { i32* }
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.16" }
%"class.std::__1::__vector_base.16" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.17" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.26" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.24", %"struct.std::__1::array.25", i32, i8, [3 x i8] }>
%"struct.std::__1::array.24" = type { [17 x i32] }
%"struct.std::__1::array.25" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.31" = type { %"class.std::__1::__vector_base.32" }
%"class.std::__1::__vector_base.32" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.40" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.33" }
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { i16*, i16*, %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { i16* }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.45" = type { %"class.std::__1::__vector_base.46" }
%"class.std::__1::__vector_base.46" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.62" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.47", i32, %"class.std::__1::vector.48", %"class.std::__1::vector.55" }
%"struct.std::__1::array.47" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.48" = type { %"class.std::__1::__vector_base.49" }
%"class.std::__1::__vector_base.49" = type { i32*, i32*, %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { i32* }
%"class.std::__1::vector.55" = type { %"class.std::__1::__vector_base.56" }
%"class.std::__1::__vector_base.56" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.57" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::vector.0"* }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.jxl::jpeg::HuffmanTableEntry" = type { i8, i16 }
%"class.std::__1::allocator.65" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN3jxl4jpeg13JPEGComponentENS_9allocatorIS3_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIsNS_9allocatorIsEEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl4jpeg12JPEGScanInfoENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_ = comdat any

$_ZNSt3__19allocatorIN3jxl4jpeg12JPEGScanInfoEE9constructIS3_JRKS3_EEEvPT_DpOT0_ = comdat any

$_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE21__push_back_slow_pathIRKS3_EEvOT_ = comdat any

$_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE24__emplace_back_slow_pathIJPKhS8_EEEvDpOT_ = comdat any

@_ZN3jxl4jpegL17kJPEGNaturalOrderE = internal unnamed_addr constant [80 x i32] [i32 0, i32 1, i32 8, i32 16, i32 9, i32 2, i32 3, i32 10, i32 17, i32 24, i32 32, i32 25, i32 18, i32 11, i32 4, i32 5, i32 12, i32 19, i32 26, i32 33, i32 40, i32 48, i32 41, i32 34, i32 27, i32 20, i32 13, i32 6, i32 7, i32 14, i32 21, i32 28, i32 35, i32 42, i32 49, i32 56, i32 57, i32 50, i32 43, i32 36, i32 29, i32 22, i32 15, i32 23, i32 30, i32 37, i32 44, i32 51, i32 58, i32 59, i32 52, i32 45, i32 38, i32 31, i32 39, i32 46, i32 53, i32 60, i32 61, i32 54, i32 47, i32 55, i32 62, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63], align 16

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3jxl4jpeg8ReadJpegEPKhmNS0_12JpegReadModeEPNS0_8JPEGDataE(i8*, i64, i32, %"struct.jxl::jpeg::JPEGData"*) local_unnamed_addr #0 {
  %5 = alloca %"class.std::__1::vector.0", align 8
  %6 = alloca %"class.std::__1::vector.0", align 8
  %7 = alloca %"struct.jxl::jpeg::JPEGQuantTable", align 4
  %8 = alloca %"struct.jxl::jpeg::JPEGScanInfo", align 8
  %9 = alloca i64, align 8
  %10 = alloca %"struct.jxl::jpeg::JPEGHuffmanCode", align 4
  %11 = alloca [4 x [64 x i16]], align 16
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca %"class.std::__1::vector.0", align 8
  %15 = icmp ult i64 %1, 2
  br i1 %15, label %19, label %16

16:                                               ; preds = %4
  %17 = load i8, i8* %0, align 1
  %18 = icmp eq i8 %17, -1
  br i1 %18, label %21, label %19

19:                                               ; preds = %16, %4
  %20 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 14
  store i32 4, i32* %20, align 8
  br label %3325

21:                                               ; preds = %16
  %22 = getelementptr inbounds i8, i8* %0, i64 1
  %23 = load i8, i8* %22, align 1
  %24 = icmp eq i8 %23, -40
  br i1 %24, label %27, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 14
  store i32 1, i32* %26, align 8
  br label %3325

27:                                               ; preds = %21
  %28 = tail call i8* @_Znwm(i64 12128) #8
  %29 = bitcast i8* %28 to %"struct.jxl::jpeg::HuffmanTableEntry"*
  %30 = getelementptr inbounds i8, i8* %28, i64 12128
  %31 = bitcast i8* %30 to %"struct.jxl::jpeg::HuffmanTableEntry"*
  br label %32

32:                                               ; preds = %32, %27
  %33 = phi %"struct.jxl::jpeg::HuffmanTableEntry"* [ %29, %27 ], [ %50, %32 ]
  %34 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %33, i64 0, i32 0
  store i8 0, i8* %34, align 2
  %35 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %33, i64 0, i32 1
  store i16 -1, i16* %35, align 2
  %36 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %33, i64 1, i32 0
  store i8 0, i8* %36, align 2
  %37 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %33, i64 1, i32 1
  store i16 -1, i16* %37, align 2
  %38 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %33, i64 2, i32 0
  store i8 0, i8* %38, align 2
  %39 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %33, i64 2, i32 1
  store i16 -1, i16* %39, align 2
  %40 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %33, i64 3, i32 0
  store i8 0, i8* %40, align 2
  %41 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %33, i64 3, i32 1
  store i16 -1, i16* %41, align 2
  %42 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %33, i64 4, i32 0
  store i8 0, i8* %42, align 2
  %43 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %33, i64 4, i32 1
  store i16 -1, i16* %43, align 2
  %44 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %33, i64 5, i32 0
  store i8 0, i8* %44, align 2
  %45 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %33, i64 5, i32 1
  store i16 -1, i16* %45, align 2
  %46 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %33, i64 6, i32 0
  store i8 0, i8* %46, align 2
  %47 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %33, i64 6, i32 1
  store i16 -1, i16* %47, align 2
  %48 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %33, i64 7, i32 0
  store i8 0, i8* %48, align 2
  %49 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %33, i64 7, i32 1
  store i16 -1, i16* %49, align 2
  %50 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %33, i64 8
  %51 = icmp eq %"struct.jxl::jpeg::HuffmanTableEntry"* %50, %31
  br i1 %51, label %52, label %32

52:                                               ; preds = %32
  %53 = tail call i8* @_Znwm(i64 12128) #8
  %54 = bitcast i8* %53 to %"struct.jxl::jpeg::HuffmanTableEntry"*
  %55 = getelementptr inbounds i8, i8* %53, i64 12128
  %56 = bitcast i8* %55 to %"struct.jxl::jpeg::HuffmanTableEntry"*
  br label %57

57:                                               ; preds = %57, %52
  %58 = phi %"struct.jxl::jpeg::HuffmanTableEntry"* [ %54, %52 ], [ %75, %57 ]
  %59 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %58, i64 0, i32 0
  store i8 0, i8* %59, align 2
  %60 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %58, i64 0, i32 1
  store i16 -1, i16* %60, align 2
  %61 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %58, i64 1, i32 0
  store i8 0, i8* %61, align 2
  %62 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %58, i64 1, i32 1
  store i16 -1, i16* %62, align 2
  %63 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %58, i64 2, i32 0
  store i8 0, i8* %63, align 2
  %64 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %58, i64 2, i32 1
  store i16 -1, i16* %64, align 2
  %65 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %58, i64 3, i32 0
  store i8 0, i8* %65, align 2
  %66 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %58, i64 3, i32 1
  store i16 -1, i16* %66, align 2
  %67 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %58, i64 4, i32 0
  store i8 0, i8* %67, align 2
  %68 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %58, i64 4, i32 1
  store i16 -1, i16* %68, align 2
  %69 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %58, i64 5, i32 0
  store i8 0, i8* %69, align 2
  %70 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %58, i64 5, i32 1
  store i16 -1, i16* %70, align 2
  %71 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %58, i64 6, i32 0
  store i8 0, i8* %71, align 2
  %72 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %58, i64 6, i32 1
  store i16 -1, i16* %72, align 2
  %73 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %58, i64 7, i32 0
  store i8 0, i8* %73, align 2
  %74 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %58, i64 7, i32 1
  store i16 -1, i16* %74, align 2
  %75 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %58, i64 8
  %76 = icmp eq %"struct.jxl::jpeg::HuffmanTableEntry"* %75, %56
  br i1 %76, label %77, label %57

77:                                               ; preds = %57
  %78 = bitcast [4 x [64 x i16]]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %78) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %78, i8 0, i64 512, i1 false)
  %79 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 16
  %80 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 16, i32 0, i32 1
  %81 = bitcast i8** %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = bitcast %"class.std::__1::vector.0"* %79 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = icmp eq i64 %82, %84
  br i1 %85, label %88, label %86

86:                                               ; preds = %77
  %87 = inttoptr i64 %84 to i8*
  store i8* %87, i8** %80, align 8
  br label %88

88:                                               ; preds = %77, %86
  %89 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 11
  %90 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 11, i32 0, i32 1
  %91 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 11, i32 0, i32 2, i32 0, i32 0
  %92 = bitcast i8** %90 to i64*
  %93 = bitcast %"class.std::__1::vector.0"* %89 to i64*
  %94 = bitcast i8** %91 to i64*
  %95 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %89, i64 0, i32 0, i32 0
  %96 = bitcast i8** %12 to i8*
  %97 = bitcast i8** %13 to i8*
  %98 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 12, i32 0, i32 1
  %99 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %100 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 12
  %101 = bitcast %"class.std::__1::vector.0"** %98 to i64*
  %102 = icmp eq i32 %2, 1
  %103 = getelementptr inbounds i8, i8* %0, i64 -3
  %104 = bitcast %"class.std::__1::vector.0"* %5 to i8*
  %105 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %5, i64 0, i32 0, i32 0
  %106 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %5, i64 0, i32 0, i32 1
  %107 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  %108 = bitcast i8** %106 to i64*
  %109 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 6, i32 0, i32 1
  %110 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  %111 = bitcast %"class.std::__1::vector.0"** %109 to i64*
  %112 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 6
  %113 = bitcast %"class.std::__1::vector.0"* %6 to i8*
  %114 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %6, i64 0, i32 0, i32 0
  %115 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %6, i64 0, i32 0, i32 1
  %116 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %117 = bitcast i8** %115 to i64*
  %118 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 4, i32 0, i32 1
  %119 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %120 = bitcast %"class.std::__1::vector.0"** %118 to i64*
  %121 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 4
  %122 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 3
  %123 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 7
  %124 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 7, i32 0, i32 1
  %125 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"** %124 to i64*
  %126 = bitcast %"class.std::__1::vector.15"* %123 to i64*
  %127 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"* %7 to i8*
  %128 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %7, i64 0, i32 1
  %129 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %7, i64 0, i32 2
  %130 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %7, i64 0, i32 3
  %131 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 7, i32 0, i32 2, i32 0, i32 0
  %132 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"** %131 to i64*
  %133 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %123, i64 0, i32 0, i32 0
  %134 = icmp eq i32 %2, 2
  %135 = bitcast i64* %9 to [4 x i16]*
  %136 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 9
  %137 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 9, i32 0, i32 1
  %138 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %137 to i64*
  %139 = bitcast %"class.std::__1::vector.31"* %136 to i64*
  %140 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"* %8 to i8*
  %141 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %8, i64 0, i32 4
  %142 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %8, i64 0, i32 6
  %143 = bitcast i32* %142 to i8*
  %144 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 14
  %145 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %8, i64 0, i32 0
  %146 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %8, i64 0, i32 1
  %147 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %8, i64 0, i32 2
  %148 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %8, i64 0, i32 3
  %149 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 8
  %150 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 8, i32 0, i32 1
  %151 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"** %150 to i64*
  %152 = bitcast %"class.std::__1::vector.22"* %149 to i64*
  %153 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 10, i32 0, i32 1
  %154 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 10, i32 0, i32 2, i32 0, i32 0
  %155 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 10, i32 0, i32 2
  %156 = bitcast %"class.std::__1::__compressed_pair.62"* %155 to %"class.std::__1::allocator.65"*
  %157 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"** %153 to i64*
  %158 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 10
  %159 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %8, i64 0, i32 8, i32 0, i32 0
  %160 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %8, i64 0, i32 8, i32 0, i32 1
  %161 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %160 to i64*
  %162 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %8, i64 0, i32 7, i32 0, i32 0
  %163 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %8, i64 0, i32 7, i32 0, i32 1
  %164 = bitcast i32** %163 to i64*
  %165 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 2
  %166 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 1
  %167 = bitcast i64* %9 to i8*
  %168 = add i64 %1, -2
  %169 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 15
  %170 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 16, i32 0, i32 2, i32 0, i32 0
  %171 = bitcast i8** %170 to i64*
  %172 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %79, i64 0, i32 0, i32 0
  %173 = getelementptr inbounds %"class.std::__1::vector.31", %"class.std::__1::vector.31"* %136, i64 0, i32 0, i32 0
  %174 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"* %10 to i8*
  %175 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %10, i64 0, i32 3
  %176 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %10, i64 0, i32 2
  %177 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %10, i64 0, i32 0, i32 0, i64 0
  %178 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %10, i64 0, i32 1, i32 0, i64 0
  %179 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  %180 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"** %179 to i64*
  %181 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %149, i64 0, i32 0, i32 0
  %182 = icmp eq i32 %2, 0
  br label %183

183:                                              ; preds = %3219, %88
  %184 = phi i8 [ 0, %88 ], [ %3170, %3219 ]
  %185 = phi i64 [ 2, %88 ], [ %3169, %3219 ]
  %186 = phi i8 [ 0, %88 ], [ %3168, %3219 ]
  %187 = phi i8 [ 0, %88 ], [ %3167, %3219 ]
  %188 = add i64 %185, 1
  %189 = icmp ult i64 %188, %1
  br i1 %189, label %190, label %290

190:                                              ; preds = %183
  %191 = xor i64 %185, -1
  %192 = add i64 %191, %1
  br label %193

193:                                              ; preds = %210, %190
  %194 = phi i64 [ %212, %210 ], [ %188, %190 ]
  %195 = phi i64 [ %211, %210 ], [ 0, %190 ]
  %196 = phi i64 [ %194, %210 ], [ %185, %190 ]
  %197 = getelementptr inbounds i8, i8* %0, i64 %196
  %198 = load i8, i8* %197, align 1
  %199 = icmp eq i8 %198, -1
  br i1 %199, label %200, label %210

200:                                              ; preds = %193
  %201 = getelementptr inbounds i8, i8* %0, i64 %194
  %202 = load i8, i8* %201, align 1
  %203 = icmp ult i8 %202, -64
  br i1 %203, label %210, label %204

204:                                              ; preds = %200
  %205 = zext i8 %202 to i64
  %206 = add nsw i64 %205, -192
  %207 = lshr i64 4611967489897594903, %206
  %208 = and i64 %207, 1
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %210, label %214

210:                                              ; preds = %204, %200, %193
  %211 = add i64 %195, 1
  %212 = add i64 %194, 1
  %213 = icmp eq i64 %211, %192
  br i1 %213, label %214, label %193

214:                                              ; preds = %204, %210
  %215 = phi i64 [ %192, %210 ], [ %195, %204 ]
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %290, label %217

217:                                              ; preds = %214
  %218 = load i8*, i8** %90, align 8
  %219 = load i8*, i8** %91, align 8
  %220 = icmp ult i8* %218, %219
  %221 = ptrtoint i8* %219 to i64
  br i1 %220, label %222, label %225

222:                                              ; preds = %217
  store i8 -1, i8* %218, align 1
  %223 = getelementptr inbounds i8, i8* %218, i64 1
  %224 = ptrtoint i8* %223 to i64
  store i64 %224, i64* %92, align 8
  br label %266

225:                                              ; preds = %217
  %226 = ptrtoint i8* %218 to i64
  %227 = load i64, i64* %93, align 8
  %228 = sub i64 %226, %227
  %229 = add i64 %228, 1
  %230 = icmp slt i64 %229, 0
  br i1 %230, label %231, label %233

231:                                              ; preds = %225
  %232 = bitcast %"class.std::__1::vector.0"* %89 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %232) #10
  unreachable

233:                                              ; preds = %225
  %234 = sub i64 %221, %227
  %235 = icmp ult i64 %234, 4611686018427387903
  br i1 %235, label %236, label %241

236:                                              ; preds = %233
  %237 = shl i64 %234, 1
  %238 = icmp ult i64 %237, %229
  %239 = select i1 %238, i64 %229, i64 %237
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %244, label %241

241:                                              ; preds = %236, %233
  %242 = phi i64 [ %239, %236 ], [ 9223372036854775807, %233 ]
  %243 = call i8* @_Znwm(i64 %242) #8
  br label %244

244:                                              ; preds = %241, %236
  %245 = phi i64 [ %242, %241 ], [ 0, %236 ]
  %246 = phi i8* [ %243, %241 ], [ null, %236 ]
  %247 = getelementptr inbounds i8, i8* %246, i64 %228
  %248 = getelementptr inbounds i8, i8* %246, i64 %245
  %249 = ptrtoint i8* %248 to i64
  store i8 -1, i8* %247, align 1
  %250 = getelementptr inbounds i8, i8* %247, i64 1
  %251 = ptrtoint i8* %250 to i64
  %252 = load i8*, i8** %95, align 8
  %253 = load i64, i64* %92, align 8
  %254 = ptrtoint i8* %252 to i64
  %255 = sub i64 %253, %254
  %256 = sub i64 0, %255
  %257 = getelementptr inbounds i8, i8* %247, i64 %256
  %258 = ptrtoint i8* %257 to i64
  %259 = icmp sgt i64 %255, 0
  br i1 %259, label %260, label %262

260:                                              ; preds = %244
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %257, i8* align 1 %252, i64 %255, i1 false) #9
  %261 = load i8*, i8** %95, align 8
  br label %262

262:                                              ; preds = %260, %244
  %263 = phi i8* [ %252, %244 ], [ %261, %260 ]
  store i64 %258, i64* %93, align 8
  store i64 %251, i64* %92, align 8
  store i64 %249, i64* %94, align 8
  %264 = icmp eq i8* %263, null
  br i1 %264, label %266, label %265

265:                                              ; preds = %262
  call void @_ZdlPv(i8* nonnull %263) #8
  br label %266

266:                                              ; preds = %222, %262, %265
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %96) #9
  %267 = getelementptr inbounds i8, i8* %0, i64 %185
  store i8* %267, i8** %12, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %97) #9
  %268 = getelementptr inbounds i8, i8* %267, i64 %215
  store i8* %268, i8** %13, align 8
  %269 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %98, align 8
  %270 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %99, align 8
  %271 = icmp ult %"class.std::__1::vector.0"* %269, %270
  br i1 %271, label %272, label %287

272:                                              ; preds = %266
  %273 = bitcast %"class.std::__1::vector.0"* %269 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %273, i8 0, i64 24, i1 false) #9
  %274 = icmp slt i64 %215, 0
  br i1 %274, label %275, label %277

275:                                              ; preds = %272
  %276 = bitcast %"class.std::__1::vector.0"* %269 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %276) #10
  unreachable

277:                                              ; preds = %272
  %278 = call i8* @_Znwm(i64 %215) #8
  %279 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %269, i64 0, i32 0, i32 1
  store i8* %278, i8** %279, align 8
  %280 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %269, i64 0, i32 0, i32 0
  store i8* %278, i8** %280, align 8
  %281 = getelementptr inbounds i8, i8* %278, i64 %215
  %282 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %269, i64 0, i32 0, i32 2, i32 0, i32 0
  store i8* %281, i8** %282, align 8
  %283 = bitcast i8** %279 to i64*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %278, i8* align 1 %267, i64 %215, i1 false) #9
  %284 = ptrtoint i8* %281 to i64
  store i64 %284, i64* %283, align 8
  %285 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %269, i64 1
  %286 = ptrtoint %"class.std::__1::vector.0"* %285 to i64
  store i64 %286, i64* %101, align 8
  br label %288

287:                                              ; preds = %266
  call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE24__emplace_back_slow_pathIJPKhS8_EEEvDpOT_(%"class.std::__1::vector"* %100, i8** nonnull dereferenceable(8) %12, i8** nonnull dereferenceable(8) %13) #9
  br label %288

288:                                              ; preds = %277, %287
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %97) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %96) #9
  %289 = add i64 %215, %185
  br label %290

290:                                              ; preds = %183, %214, %288
  %291 = phi i64 [ %185, %214 ], [ %289, %288 ], [ %185, %183 ]
  %292 = add i64 %291, 2
  %293 = icmp ugt i64 %292, %1
  br i1 %293, label %298, label %294

294:                                              ; preds = %290
  %295 = getelementptr inbounds i8, i8* %0, i64 %291
  %296 = load i8, i8* %295, align 1
  %297 = icmp eq i8 %296, -1
  br i1 %297, label %299, label %298

298:                                              ; preds = %294, %290
  store i32 4, i32* %144, align 8
  br label %3323

299:                                              ; preds = %294
  %300 = add i64 %291, 1
  %301 = getelementptr inbounds i8, i8* %0, i64 %300
  %302 = load i8, i8* %301, align 1
  switch i8 %302, label %3162 [
    i8 -64, label %303
    i8 -63, label %303
    i8 -62, label %303
    i8 -60, label %530
    i8 -48, label %3166
    i8 -47, label %3166
    i8 -46, label %3166
    i8 -45, label %3166
    i8 -44, label %3166
    i8 -43, label %3166
    i8 -42, label %3166
    i8 -41, label %3166
    i8 -39, label %3166
    i8 -38, label %747
    i8 -37, label %2819
    i8 -35, label %2964
    i8 -32, label %2994
    i8 -31, label %2994
    i8 -30, label %2994
    i8 -29, label %2994
    i8 -28, label %2994
    i8 -27, label %2994
    i8 -26, label %2994
    i8 -25, label %2994
    i8 -24, label %2994
    i8 -23, label %2994
    i8 -22, label %2994
    i8 -21, label %2994
    i8 -20, label %2994
    i8 -19, label %2994
    i8 -18, label %2994
    i8 -17, label %2994
    i8 -2, label %3078
  ]

303:                                              ; preds = %299, %299, %299
  %304 = icmp eq i8 %302, -62
  %305 = zext i1 %304 to i8
  %306 = load i32, i32* %166, align 8
  %307 = icmp eq i32 %306, 0
  br i1 %307, label %309, label %308

308:                                              ; preds = %303
  store i32 30, i32* %144, align 8
  br label %3323

309:                                              ; preds = %303
  %310 = add i64 %291, 10
  %311 = icmp ugt i64 %310, %1
  br i1 %311, label %312, label %313

312:                                              ; preds = %309
  store i32 3, i32* %144, align 8
  br label %3323

313:                                              ; preds = %309
  %314 = getelementptr inbounds i8, i8* %0, i64 %292
  %315 = load i8, i8* %314, align 1
  %316 = zext i8 %315 to i64
  %317 = shl nuw nsw i64 %316, 8
  %318 = add i64 %291, 3
  %319 = getelementptr inbounds i8, i8* %0, i64 %318
  %320 = load i8, i8* %319, align 1
  %321 = zext i8 %320 to i64
  %322 = or i64 %317, %321
  %323 = add i64 %291, 4
  %324 = add i64 %291, 5
  %325 = getelementptr inbounds i8, i8* %0, i64 %323
  %326 = load i8, i8* %325, align 1
  %327 = getelementptr inbounds i8, i8* %0, i64 %324
  %328 = load i8, i8* %327, align 1
  %329 = zext i8 %328 to i32
  %330 = shl nuw nsw i32 %329, 8
  %331 = add i64 %291, 6
  %332 = getelementptr inbounds i8, i8* %0, i64 %331
  %333 = load i8, i8* %332, align 1
  %334 = zext i8 %333 to i32
  %335 = or i32 %330, %334
  %336 = add i64 %291, 7
  %337 = getelementptr inbounds i8, i8* %0, i64 %336
  %338 = load i8, i8* %337, align 1
  %339 = zext i8 %338 to i32
  %340 = shl nuw nsw i32 %339, 8
  %341 = add i64 %291, 8
  %342 = getelementptr inbounds i8, i8* %0, i64 %341
  %343 = load i8, i8* %342, align 1
  %344 = zext i8 %343 to i32
  %345 = or i32 %340, %344
  %346 = add i64 %291, 9
  %347 = getelementptr inbounds i8, i8* %0, i64 %346
  %348 = load i8, i8* %347, align 1
  %349 = zext i8 %348 to i32
  %350 = icmp eq i8 %326, 8
  br i1 %350, label %352, label %351

351:                                              ; preds = %313
  store i32 7, i32* %144, align 8
  br label %3323

352:                                              ; preds = %313
  %353 = add nsw i32 %335, -1
  %354 = icmp ugt i32 %353, 65534
  br i1 %354, label %355, label %356

355:                                              ; preds = %352
  store i32 9, i32* %144, align 8
  br label %3323

356:                                              ; preds = %352
  %357 = add nsw i32 %345, -1
  %358 = icmp ugt i32 %357, 65534
  br i1 %358, label %359, label %360

359:                                              ; preds = %356
  store i32 8, i32* %144, align 8
  br label %3323

360:                                              ; preds = %356
  %361 = add nsw i32 %349, -1
  %362 = icmp ugt i32 %361, 3
  br i1 %362, label %363, label %364

363:                                              ; preds = %360
  store i32 10, i32* %144, align 8
  br label %3323

364:                                              ; preds = %360
  %365 = mul nuw nsw i32 %349, 3
  %366 = zext i32 %365 to i64
  %367 = add i64 %310, %366
  %368 = icmp ugt i64 %367, %1
  br i1 %368, label %369, label %370

369:                                              ; preds = %364
  store i32 3, i32* %144, align 8
  br label %3323

370:                                              ; preds = %364
  store i32 %335, i32* %165, align 4
  store i32 %345, i32* %166, align 8
  %371 = zext i8 %348 to i64
  %372 = load i64, i64* %138, align 8
  %373 = load i64, i64* %139, align 8
  %374 = sub i64 %372, %373
  %375 = sdiv exact i64 %374, 48
  %376 = icmp ult i64 %375, %371
  %377 = inttoptr i64 %373 to %"struct.jxl::jpeg::JPEGComponent"*
  %378 = inttoptr i64 %372 to %"struct.jxl::jpeg::JPEGComponent"*
  br i1 %376, label %379, label %381

379:                                              ; preds = %370
  %380 = sub nsw i64 %371, %375
  call void @_ZNSt3__16vectorIN3jxl4jpeg13JPEGComponentENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.31"* %136, i64 %380) #9
  br label %400

381:                                              ; preds = %370
  %382 = icmp ugt i64 %375, %371
  br i1 %382, label %383, label %400

383:                                              ; preds = %381
  %384 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %377, i64 %371
  %385 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %384, %378
  br i1 %385, label %399, label %386

386:                                              ; preds = %383, %397
  %387 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %388, %397 ], [ %378, %383 ]
  %388 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %387, i64 -1
  %389 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %387, i64 -1, i32 6, i32 0, i32 0
  %390 = load i16*, i16** %389, align 8
  %391 = icmp eq i16* %390, null
  br i1 %391, label %397, label %392

392:                                              ; preds = %386
  %393 = ptrtoint i16* %390 to i64
  %394 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %387, i64 -1, i32 6, i32 0, i32 1
  %395 = bitcast i16** %394 to i64*
  store i64 %393, i64* %395, align 8
  %396 = bitcast i16* %390 to i8*
  call void @_ZdlPv(i8* %396) #8
  br label %397

397:                                              ; preds = %392, %386
  %398 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %388, %384
  br i1 %398, label %399, label %386

399:                                              ; preds = %397, %383
  store %"struct.jxl::jpeg::JPEGComponent"* %384, %"struct.jxl::jpeg::JPEGComponent"** %137, align 8
  br label %400

400:                                              ; preds = %399, %381, %379
  %401 = call i8* @_Znwm(i64 32) #8
  %402 = bitcast i8* %401 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %401, i8 0, i64 32, i1 false) #9
  %403 = load i64, i64* %138, align 8
  %404 = load i64, i64* %139, align 8
  %405 = icmp eq i64 %403, %404
  br i1 %405, label %459, label %406

406:                                              ; preds = %400, %437
  %407 = phi i64 [ %455, %437 ], [ %404, %400 ]
  %408 = phi i64 [ %443, %437 ], [ %310, %400 ]
  %409 = phi i64 [ %453, %437 ], [ 0, %400 ]
  %410 = phi i32 [ %450, %437 ], [ 1, %400 ]
  %411 = phi i32 [ %452, %437 ], [ 1, %400 ]
  %412 = getelementptr inbounds i8, i8* %0, i64 %408
  %413 = load i8, i8* %412, align 1
  %414 = zext i8 %413 to i64
  %415 = lshr i64 %414, 6
  %416 = getelementptr inbounds i64, i64* %402, i64 %415
  %417 = and i64 %414, 63
  %418 = shl i64 1, %417
  %419 = load i64, i64* %416, align 8
  %420 = and i64 %418, %419
  %421 = icmp eq i64 %420, 0
  br i1 %421, label %422, label %527

422:                                              ; preds = %406
  %423 = inttoptr i64 %407 to %"struct.jxl::jpeg::JPEGComponent"*
  %424 = add i64 %408, 1
  %425 = zext i8 %413 to i32
  %426 = or i64 %418, %419
  store i64 %426, i64* %416, align 8
  %427 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %423, i64 %409, i32 0
  store i32 %425, i32* %427, align 8
  %428 = getelementptr inbounds i8, i8* %0, i64 %424
  %429 = load i8, i8* %428, align 1
  %430 = zext i8 %429 to i32
  %431 = lshr i32 %430, 4
  %432 = and i32 %430, 15
  %433 = add nsw i32 %430, -16
  %434 = icmp ugt i32 %433, 239
  %435 = icmp eq i32 %432, 0
  %436 = or i1 %434, %435
  br i1 %436, label %527, label %437

437:                                              ; preds = %422
  %438 = add i64 %408, 2
  %439 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %173, align 8
  %440 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %439, i64 %409, i32 1
  store i32 %431, i32* %440, align 4
  %441 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %173, align 8
  %442 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %441, i64 %409, i32 2
  store i32 %432, i32* %442, align 8
  %443 = add i64 %408, 3
  %444 = getelementptr inbounds i8, i8* %0, i64 %438
  %445 = load i8, i8* %444, align 1
  %446 = zext i8 %445 to i32
  %447 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %173, align 8
  %448 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %447, i64 %409, i32 3
  store i32 %446, i32* %448, align 4
  %449 = icmp ult i32 %410, %431
  %450 = select i1 %449, i32 %431, i32 %410
  %451 = icmp ult i32 %411, %432
  %452 = select i1 %451, i32 %432, i32 %411
  %453 = add nuw i64 %409, 1
  %454 = load i64, i64* %138, align 8
  %455 = load i64, i64* %139, align 8
  %456 = sub i64 %454, %455
  %457 = sdiv exact i64 %456, 48
  %458 = icmp ult i64 %453, %457
  br i1 %458, label %406, label %459

459:                                              ; preds = %437, %400
  %460 = phi i64 [ %310, %400 ], [ %443, %437 ]
  %461 = phi i64 [ %403, %400 ], [ %455, %437 ]
  %462 = phi i64 [ %403, %400 ], [ %454, %437 ]
  %463 = phi i32 [ 1, %400 ], [ %452, %437 ]
  %464 = phi i32 [ 1, %400 ], [ %450, %437 ]
  %465 = load i32, i32* %165, align 4
  %466 = shl nsw i32 %463, 3
  %467 = add i32 %466, -1
  %468 = add i32 %467, %465
  %469 = sdiv i32 %468, %466
  %470 = load i32, i32* %166, align 8
  %471 = shl nsw i32 %464, 3
  %472 = add i32 %471, -1
  %473 = add i32 %472, %470
  %474 = sdiv i32 %473, %471
  %475 = icmp eq i64 %462, %461
  br i1 %475, label %524, label %476

476:                                              ; preds = %459, %517
  %477 = phi i64 [ %520, %517 ], [ %461, %459 ]
  %478 = phi i64 [ %518, %517 ], [ 0, %459 ]
  %479 = inttoptr i64 %477 to %"struct.jxl::jpeg::JPEGComponent"*
  %480 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %479, i64 %478, i32 1
  %481 = load i32, i32* %480, align 4
  %482 = srem i32 %464, %481
  %483 = icmp eq i32 %482, 0
  br i1 %483, label %484, label %527

484:                                              ; preds = %476
  %485 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %479, i64 %478, i32 2
  %486 = load i32, i32* %485, align 8
  %487 = srem i32 %463, %486
  %488 = icmp eq i32 %487, 0
  br i1 %488, label %489, label %527

489:                                              ; preds = %484
  %490 = mul nsw i32 %481, %474
  %491 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %479, i64 %478, i32 4
  store i32 %490, i32* %491, align 8
  %492 = mul nsw i32 %486, %469
  %493 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %479, i64 %478, i32 5
  store i32 %492, i32* %493, align 4
  %494 = zext i32 %490 to i64
  %495 = zext i32 %492 to i64
  %496 = mul nuw i64 %495, %494
  %497 = icmp ugt i64 %496, 16777216
  br i1 %497, label %527, label %498

498:                                              ; preds = %489
  br i1 %134, label %499, label %517

499:                                              ; preds = %498
  %500 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %479, i64 %478, i32 6
  %501 = shl i64 %496, 6
  %502 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %479, i64 %478, i32 6, i32 0, i32 1
  %503 = bitcast i16** %502 to i64*
  %504 = load i64, i64* %503, align 8
  %505 = bitcast %"class.std::__1::vector.33"* %500 to i64*
  %506 = load i64, i64* %505, align 8
  %507 = sub i64 %504, %506
  %508 = ashr exact i64 %507, 1
  %509 = icmp ugt i64 %501, %508
  %510 = inttoptr i64 %506 to i16*
  br i1 %509, label %511, label %513

511:                                              ; preds = %499
  %512 = sub nsw i64 %501, %508
  call void @_ZNSt3__16vectorIsNS_9allocatorIsEEE8__appendEm(%"class.std::__1::vector.33"* %500, i64 %512) #9
  br label %517

513:                                              ; preds = %499
  %514 = icmp ult i64 %501, %508
  br i1 %514, label %515, label %517

515:                                              ; preds = %513
  %516 = getelementptr inbounds i16, i16* %510, i64 %501
  store i16* %516, i16** %502, align 8
  br label %517

517:                                              ; preds = %515, %513, %511, %498
  %518 = add nuw i64 %478, 1
  %519 = load i64, i64* %138, align 8
  %520 = load i64, i64* %139, align 8
  %521 = sub i64 %519, %520
  %522 = sdiv exact i64 %521, 48
  %523 = icmp ult i64 %518, %522
  br i1 %523, label %476, label %524

524:                                              ; preds = %517, %459
  %525 = add i64 %322, %292
  %526 = icmp eq i64 %525, %460
  br i1 %526, label %529, label %527

527:                                              ; preds = %524, %422, %406, %489, %476, %484
  %528 = phi i32 [ 41, %489 ], [ 20, %476 ], [ 20, %484 ], [ 11, %422 ], [ 32, %406 ], [ 6, %524 ]
  store i32 %528, i32* %144, align 8
  call void @_ZdlPv(i8* nonnull %401) #8
  br label %3323

529:                                              ; preds = %524
  call void @_ZdlPv(i8* nonnull %401) #8
  br label %3166

530:                                              ; preds = %299
  %531 = add i64 %291, 4
  %532 = icmp ugt i64 %531, %1
  br i1 %532, label %533, label %534

533:                                              ; preds = %530
  store i32 3, i32* %144, align 8
  br label %3323

534:                                              ; preds = %530
  %535 = getelementptr inbounds i8, i8* %0, i64 %292
  %536 = load i8, i8* %535, align 1
  %537 = zext i8 %536 to i32
  %538 = shl nuw nsw i32 %537, 8
  %539 = add i64 %291, 3
  %540 = getelementptr inbounds i8, i8* %0, i64 %539
  %541 = load i8, i8* %540, align 1
  %542 = zext i8 %541 to i32
  %543 = or i32 %538, %542
  %544 = icmp eq i32 %543, 2
  br i1 %544, label %549, label %545

545:                                              ; preds = %534
  %546 = zext i32 %543 to i64
  %547 = add i64 %292, %546
  %548 = icmp ult i64 %531, %547
  br i1 %548, label %550, label %743

549:                                              ; preds = %534
  store i32 37, i32* %144, align 8
  br label %3323

550:                                              ; preds = %545, %741
  %551 = phi i64 [ %651, %741 ], [ %531, %545 ]
  %552 = add i64 %551, 17
  %553 = icmp ugt i64 %552, %1
  br i1 %553, label %554, label %555

554:                                              ; preds = %550
  store i32 3, i32* %144, align 8
  br label %3323

555:                                              ; preds = %550
  call void @llvm.lifetime.start.p0i8(i64 1104, i8* nonnull %174) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %174, i8 -86, i64 1104, i1 false) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %174, i8 0, i64 1096, i1 false) #9
  store i8 1, i8* %175, align 4
  %556 = add nuw i64 %551, 1
  %557 = getelementptr inbounds i8, i8* %0, i64 %551
  %558 = load i8, i8* %557, align 1
  %559 = zext i8 %558 to i32
  store i32 %559, i32* %176, align 4
  %560 = and i32 %559, 16
  %561 = icmp ne i32 %560, 0
  br i1 %561, label %562, label %569

562:                                              ; preds = %555
  %563 = add nsw i32 %559, -16
  %564 = icmp ugt i32 %563, 3
  br i1 %564, label %739, label %565

565:                                              ; preds = %562
  %566 = mul nsw i32 %563, 758
  %567 = sext i32 %566 to i64
  %568 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %54, i64 %567
  br label %575

569:                                              ; preds = %555
  %570 = icmp ugt i8 %558, 3
  br i1 %570, label %739, label %571

571:                                              ; preds = %569
  %572 = mul nuw nsw i32 %559, 758
  %573 = zext i32 %572 to i64
  %574 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %29, i64 %573
  br label %575

575:                                              ; preds = %571, %565
  %576 = phi %"struct.jxl::jpeg::HuffmanTableEntry"* [ %568, %565 ], [ %574, %571 ]
  store i32 0, i32* %177, align 4
  br label %578

577:                                              ; preds = %578
  br i1 %561, label %611, label %613

578:                                              ; preds = %578, %575
  %579 = phi i64 [ %556, %575 ], [ %597, %578 ]
  %580 = phi i64 [ 1, %575 ], [ %609, %578 ]
  %581 = phi i32 [ 1, %575 ], [ %603, %578 ]
  %582 = phi i32 [ 65536, %575 ], [ %608, %578 ]
  %583 = phi i32 [ 0, %575 ], [ %605, %578 ]
  %584 = add i64 %579, 1
  %585 = getelementptr inbounds i8, i8* %0, i64 %579
  %586 = load i8, i8* %585, align 1
  %587 = zext i8 %586 to i32
  %588 = icmp eq i8 %586, 0
  %589 = trunc i64 %580 to i32
  %590 = select i1 %588, i32 %581, i32 %589
  %591 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %10, i64 0, i32 0, i32 0, i64 %580
  store i32 %587, i32* %591, align 4
  %592 = add nuw nsw i32 %583, %587
  %593 = sub nuw nsw i32 16, %589
  %594 = shl i32 %587, %593
  %595 = sub nsw i32 %582, %594
  %596 = add nuw nsw i64 %580, 1
  %597 = add i64 %579, 2
  %598 = getelementptr inbounds i8, i8* %0, i64 %584
  %599 = load i8, i8* %598, align 1
  %600 = zext i8 %599 to i32
  %601 = icmp eq i8 %599, 0
  %602 = trunc i64 %596 to i32
  %603 = select i1 %601, i32 %590, i32 %602
  %604 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %10, i64 0, i32 0, i32 0, i64 %596
  store i32 %600, i32* %604, align 4
  %605 = add nuw nsw i32 %592, %600
  %606 = sub nuw nsw i32 16, %602
  %607 = shl i32 %600, %606
  %608 = sub nsw i32 %595, %607
  %609 = add nuw nsw i64 %580, 2
  %610 = icmp eq i64 %609, 17
  br i1 %610, label %577, label %578

611:                                              ; preds = %577
  %612 = icmp ugt i32 %605, 256
  br i1 %612, label %739, label %615

613:                                              ; preds = %577
  %614 = icmp ugt i32 %605, 12
  br i1 %614, label %739, label %615

615:                                              ; preds = %613, %611
  %616 = zext i32 %605 to i64
  %617 = add i64 %597, %616
  %618 = icmp ugt i64 %617, %1
  br i1 %618, label %739, label %619

619:                                              ; preds = %615
  %620 = call i8* @_Znwm(i64 32) #8
  %621 = bitcast i8* %620 to i64*
  %622 = icmp eq i32 %605, 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %620, i8 0, i64 32, i1 false) #9
  br i1 %622, label %650, label %623

623:                                              ; preds = %619
  %624 = xor i1 %561, true
  br label %625

625:                                              ; preds = %645, %623
  %626 = phi i64 [ %597, %623 ], [ %628, %645 ]
  %627 = phi i64 [ 0, %623 ], [ %648, %645 ]
  %628 = add i64 %626, 1
  %629 = getelementptr inbounds i8, i8* %0, i64 %626
  %630 = load i8, i8* %629, align 1
  %631 = zext i8 %630 to i32
  %632 = icmp ugt i8 %630, 11
  %633 = and i1 %632, %624
  br i1 %633, label %634, label %635

634:                                              ; preds = %625
  store i32 21, i32* %144, align 8
  call void @_ZdlPv(i8* nonnull %620) #8
  call void @llvm.lifetime.end.p0i8(i64 1104, i8* nonnull %174) #9
  br label %3323

635:                                              ; preds = %625
  %636 = zext i8 %630 to i64
  %637 = lshr i64 %636, 6
  %638 = getelementptr inbounds i64, i64* %621, i64 %637
  %639 = and i64 %636, 63
  %640 = shl i64 1, %639
  %641 = load i64, i64* %638, align 8
  %642 = and i64 %641, %640
  %643 = icmp eq i64 %642, 0
  br i1 %643, label %645, label %644

644:                                              ; preds = %635
  store i32 21, i32* %144, align 8
  call void @_ZdlPv(i8* nonnull %620) #8
  call void @llvm.lifetime.end.p0i8(i64 1104, i8* nonnull %174) #9
  br label %3323

645:                                              ; preds = %635
  %646 = or i64 %641, %640
  store i64 %646, i64* %638, align 8
  %647 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %10, i64 0, i32 1, i32 0, i64 %627
  store i32 %631, i32* %647, align 4
  %648 = add nuw nsw i64 %627, 1
  %649 = icmp eq i64 %648, %616
  br i1 %649, label %650, label %625

650:                                              ; preds = %645, %619
  %651 = phi i64 [ %597, %619 ], [ %628, %645 ]
  %652 = sext i32 %603 to i64
  %653 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %10, i64 0, i32 0, i32 0, i64 %652
  %654 = load i32, i32* %653, align 4
  %655 = add i32 %654, 1
  store i32 %655, i32* %653, align 4
  %656 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %10, i64 0, i32 1, i32 0, i64 %616
  store i32 256, i32* %656, align 4
  %657 = sub i32 16, %603
  %658 = shl i32 1, %657
  %659 = sub nsw i32 %608, %658
  %660 = icmp slt i32 %659, 0
  br i1 %660, label %661, label %662

661:                                              ; preds = %650
  store i32 21, i32* %144, align 8
  call void @_ZdlPv(i8* nonnull %620) #8
  call void @llvm.lifetime.end.p0i8(i64 1104, i8* nonnull %174) #9
  br label %3323

662:                                              ; preds = %650
  %663 = icmp eq i32 %659, 0
  br i1 %663, label %677, label %664

664:                                              ; preds = %662
  %665 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %576, i64 0, i32 1
  %666 = load i16, i16* %665, align 2
  %667 = icmp eq i16 %666, -1
  br i1 %667, label %677, label %668

668:                                              ; preds = %664, %668
  %669 = phi i64 [ %675, %668 ], [ 0, %664 ]
  %670 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %576, i64 %669, i32 0
  store i8 0, i8* %670, align 2
  %671 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %576, i64 %669, i32 1
  store i16 -1, i16* %671, align 2
  %672 = or i64 %669, 1
  %673 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %576, i64 %672, i32 0
  store i8 0, i8* %673, align 2
  %674 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %576, i64 %672, i32 1
  store i16 -1, i16* %674, align 2
  %675 = add nuw nsw i64 %669, 2
  %676 = icmp eq i64 %675, 758
  br i1 %676, label %677, label %668

677:                                              ; preds = %668, %664, %662
  %678 = icmp eq i64 %651, %547
  %679 = zext i1 %678 to i8
  store i8 %679, i8* %175, align 4
  br i1 %134, label %680, label %681

680:                                              ; preds = %677
  call void @_ZN3jxl4jpeg21BuildJpegHuffmanTableEPKjS2_PNS0_17HuffmanTableEntryE(i32* nonnull %177, i32* %178, %"struct.jxl::jpeg::HuffmanTableEntry"* %576) #9
  br label %681

681:                                              ; preds = %680, %677
  %682 = load %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"** %150, align 8
  %683 = load %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"** %179, align 8
  %684 = icmp eq %"struct.jxl::jpeg::JPEGHuffmanCode"* %682, %683
  %685 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %683 to i64
  br i1 %684, label %690, label %686

686:                                              ; preds = %681
  %687 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"* %682 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %687, i8* nonnull align 4 %174, i64 1104, i1 false) #9
  %688 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %682, i64 1
  %689 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %688 to i64
  store i64 %689, i64* %151, align 8
  br label %741

690:                                              ; preds = %681
  %691 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %682 to i64
  %692 = load i64, i64* %152, align 8
  %693 = sub i64 %691, %692
  %694 = sdiv exact i64 %693, 1104
  %695 = add nsw i64 %694, 1
  %696 = icmp ugt i64 %695, 16709007313142709
  br i1 %696, label %697, label %699

697:                                              ; preds = %690
  %698 = bitcast %"class.std::__1::vector.22"* %149 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %698) #10
  unreachable

699:                                              ; preds = %690
  %700 = sub i64 %685, %692
  %701 = sdiv exact i64 %700, 1104
  %702 = icmp ult i64 %701, 8354503656571354
  br i1 %702, label %703, label %708

703:                                              ; preds = %699
  %704 = shl nsw i64 %701, 1
  %705 = icmp ult i64 %704, %695
  %706 = select i1 %705, i64 %695, i64 %704
  %707 = icmp eq i64 %706, 0
  br i1 %707, label %713, label %708

708:                                              ; preds = %703, %699
  %709 = phi i64 [ %706, %703 ], [ 16709007313142709, %699 ]
  %710 = mul i64 %709, 1104
  %711 = call i8* @_Znwm(i64 %710) #8
  %712 = bitcast i8* %711 to %"struct.jxl::jpeg::JPEGHuffmanCode"*
  br label %713

713:                                              ; preds = %708, %703
  %714 = phi i64 [ %709, %708 ], [ 0, %703 ]
  %715 = phi %"struct.jxl::jpeg::JPEGHuffmanCode"* [ %712, %708 ], [ null, %703 ]
  %716 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %715, i64 %694
  %717 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %715, i64 %714
  %718 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %717 to i64
  %719 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"* %716 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %719, i8* nonnull align 4 %174, i64 1104, i1 false) #9
  %720 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %716, i64 1
  %721 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %720 to i64
  %722 = load %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"** %181, align 8
  %723 = load i64, i64* %151, align 8
  %724 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %722 to i64
  %725 = sub i64 %723, %724
  %726 = sdiv exact i64 %725, -1104
  %727 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %716, i64 %726
  %728 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %727 to i64
  %729 = icmp sgt i64 %725, 0
  br i1 %729, label %730, label %734

730:                                              ; preds = %713
  %731 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"* %727 to i8*
  %732 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"* %722 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %731, i8* align 4 %732, i64 %725, i1 false) #9
  %733 = load %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"** %181, align 8
  br label %734

734:                                              ; preds = %730, %713
  %735 = phi %"struct.jxl::jpeg::JPEGHuffmanCode"* [ %722, %713 ], [ %733, %730 ]
  store i64 %728, i64* %152, align 8
  store i64 %721, i64* %151, align 8
  store i64 %718, i64* %180, align 8
  %736 = icmp eq %"struct.jxl::jpeg::JPEGHuffmanCode"* %735, null
  br i1 %736, label %741, label %737

737:                                              ; preds = %734
  %738 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"* %735 to i8*
  call void @_ZdlPv(i8* %738) #8
  br label %741

739:                                              ; preds = %615, %613, %611, %569, %562
  %740 = phi i32 [ 16, %562 ], [ 16, %569 ], [ 21, %611 ], [ 21, %613 ], [ 3, %615 ]
  store i32 %740, i32* %144, align 8
  call void @llvm.lifetime.end.p0i8(i64 1104, i8* nonnull %174) #9
  br label %3323

741:                                              ; preds = %737, %734, %686
  call void @_ZdlPv(i8* nonnull %620) #8
  call void @llvm.lifetime.end.p0i8(i64 1104, i8* nonnull %174) #9
  %742 = icmp ult i64 %651, %547
  br i1 %742, label %550, label %743

743:                                              ; preds = %741, %545
  %744 = phi i64 [ %531, %545 ], [ %651, %741 ]
  %745 = icmp eq i64 %547, %744
  br i1 %745, label %3166, label %746

746:                                              ; preds = %743
  store i32 6, i32* %144, align 8
  br label %3323

747:                                              ; preds = %299
  br i1 %134, label %748, label %3166

748:                                              ; preds = %747
  %749 = and i8 %187, 1
  %750 = icmp ne i8 %749, 0
  %751 = add i64 %291, 5
  %752 = icmp ugt i64 %751, %1
  br i1 %752, label %753, label %754

753:                                              ; preds = %748
  store i32 3, i32* %144, align 8
  br label %3323

754:                                              ; preds = %748
  %755 = getelementptr inbounds i8, i8* %0, i64 %292
  %756 = load i8, i8* %755, align 1
  %757 = zext i8 %756 to i64
  %758 = shl nuw nsw i64 %757, 8
  %759 = add i64 %291, 3
  %760 = getelementptr inbounds i8, i8* %0, i64 %759
  %761 = load i8, i8* %760, align 1
  %762 = zext i8 %761 to i64
  %763 = or i64 %758, %762
  %764 = add i64 %291, 4
  %765 = getelementptr inbounds i8, i8* %0, i64 %764
  %766 = load i8, i8* %765, align 1
  %767 = zext i8 %766 to i32
  %768 = zext i8 %766 to i64
  %769 = icmp eq i8 %766, 0
  br i1 %769, label %776, label %770

770:                                              ; preds = %754
  %771 = load i64, i64* %138, align 8
  %772 = load i64, i64* %139, align 8
  %773 = sub i64 %771, %772
  %774 = sdiv exact i64 %773, 48
  %775 = icmp ult i64 %774, %768
  br i1 %775, label %776, label %777

776:                                              ; preds = %770, %754
  store i32 15, i32* %144, align 8
  br label %3323

777:                                              ; preds = %770
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %140) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %140, i8 -86, i64 120, i1 false) #9
  call void @llvm.memset.p0i8.i64(i8* align 4 %143, i8 0, i64 52, i1 false) #9
  store i32 %767, i32* %141, align 8
  %778 = shl nuw nsw i64 %768, 1
  %779 = add i64 %778, %751
  %780 = icmp ugt i64 %779, %1
  br i1 %780, label %781, label %782

781:                                              ; preds = %777
  store i32 3, i32* %144, align 8
  br label %924

782:                                              ; preds = %777
  %783 = call i8* @_Znwm(i64 32) #8
  %784 = bitcast i8* %783 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %783, i8 0, i64 32, i1 false) #9
  %785 = icmp eq i64 %771, %772
  %786 = inttoptr i64 %772 to %"struct.jxl::jpeg::JPEGComponent"*
  br label %787

787:                                              ; preds = %830, %782
  %788 = phi i64 [ %751, %782 ], [ %822, %830 ]
  %789 = phi i64 [ 0, %782 ], [ %834, %830 ]
  %790 = add i64 %788, 1
  %791 = getelementptr inbounds i8, i8* %0, i64 %788
  %792 = load i8, i8* %791, align 1
  %793 = zext i8 %792 to i32
  %794 = zext i8 %792 to i64
  %795 = lshr i64 %794, 6
  %796 = getelementptr inbounds i64, i64* %784, i64 %795
  %797 = and i64 %794, 63
  %798 = shl i64 1, %797
  %799 = load i64, i64* %796, align 8
  %800 = and i64 %798, %799
  %801 = icmp eq i64 %800, 0
  br i1 %801, label %802, label %913

802:                                              ; preds = %787
  %803 = or i64 %798, %799
  store i64 %803, i64* %796, align 8
  br i1 %785, label %913, label %804

804:                                              ; preds = %802
  %805 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %8, i64 0, i32 5, i32 0, i64 %789, i32 0
  br label %809

806:                                              ; preds = %817
  %807 = and i8 %818, 1
  %808 = icmp eq i8 %807, 0
  br i1 %808, label %913, label %821

809:                                              ; preds = %817, %804
  %810 = phi i64 [ 0, %804 ], [ %819, %817 ]
  %811 = phi i8 [ 0, %804 ], [ %818, %817 ]
  %812 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %786, i64 %810, i32 0
  %813 = load i32, i32* %812, align 8
  %814 = icmp eq i32 %813, %793
  br i1 %814, label %815, label %817

815:                                              ; preds = %809
  %816 = trunc i64 %810 to i32
  store i32 %816, i32* %805, align 4
  br label %817

817:                                              ; preds = %815, %809
  %818 = phi i8 [ 1, %815 ], [ %811, %809 ]
  %819 = add nuw i64 %810, 1
  %820 = icmp ult i64 %819, %774
  br i1 %820, label %809, label %806

821:                                              ; preds = %806
  %822 = add i64 %788, 2
  %823 = getelementptr inbounds i8, i8* %0, i64 %790
  %824 = load i8, i8* %823, align 1
  %825 = zext i8 %824 to i32
  %826 = and i32 %825, 15
  %827 = icmp ugt i8 %824, 63
  %828 = icmp ugt i32 %826, 3
  %829 = or i1 %827, %828
  br i1 %829, label %913, label %830

830:                                              ; preds = %821
  %831 = lshr i32 %825, 4
  %832 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %8, i64 0, i32 5, i32 0, i64 %789, i32 1
  store i32 %831, i32* %832, align 4
  %833 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %8, i64 0, i32 5, i32 0, i64 %789, i32 2
  store i32 %826, i32* %833, align 4
  %834 = add nuw nsw i64 %789, 1
  %835 = icmp eq i64 %834, %768
  br i1 %835, label %836, label %787

836:                                              ; preds = %830
  %837 = add i64 %788, 5
  %838 = icmp ugt i64 %837, %1
  br i1 %838, label %913, label %839

839:                                              ; preds = %836
  %840 = add i64 %788, 3
  %841 = getelementptr inbounds i8, i8* %0, i64 %822
  %842 = load i8, i8* %841, align 1
  %843 = zext i8 %842 to i32
  store i32 %843, i32* %145, align 8
  %844 = add i64 %788, 4
  %845 = getelementptr inbounds i8, i8* %0, i64 %840
  %846 = load i8, i8* %845, align 1
  %847 = zext i8 %846 to i32
  store i32 %847, i32* %146, align 4
  %848 = icmp ugt i8 %842, 63
  br i1 %848, label %913, label %849

849:                                              ; preds = %839
  %850 = icmp ult i8 %846, %842
  %851 = icmp ugt i8 %846, 63
  %852 = or i1 %850, %851
  br i1 %852, label %913, label %853

853:                                              ; preds = %849
  %854 = getelementptr inbounds i8, i8* %0, i64 %844
  %855 = load i8, i8* %854, align 1
  %856 = zext i8 %855 to i32
  %857 = lshr i32 %856, 4
  store i32 %857, i32* %147, align 8
  %858 = and i32 %856, 15
  store i32 %858, i32* %148, align 4
  %859 = load i64, i64* %151, align 8
  %860 = load i64, i64* %152, align 8
  %861 = icmp eq i64 %859, %860
  %862 = icmp ne i8 %846, 0
  %863 = inttoptr i64 %860 to %"struct.jxl::jpeg::JPEGHuffmanCode"*
  %864 = sub i64 %859, %860
  %865 = sdiv exact i64 %864, 1104
  br label %868

866:                                              ; preds = %897
  %867 = icmp eq i64 %901, %768
  br i1 %867, label %902, label %868

868:                                              ; preds = %866, %853
  %869 = phi i64 [ 0, %853 ], [ %901, %866 ]
  br i1 %861, label %874, label %870

870:                                              ; preds = %868
  %871 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %8, i64 0, i32 5, i32 0, i64 %869, i32 1
  %872 = load i32, i32* %871, align 4
  %873 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %8, i64 0, i32 5, i32 0, i64 %869, i32 2
  br label %880

874:                                              ; preds = %892, %868
  %875 = phi i8 [ 0, %868 ], [ %893, %892 ]
  %876 = phi i8 [ 0, %868 ], [ %894, %892 ]
  %877 = and i8 %875, 1
  %878 = or i8 %877, %842
  %879 = icmp eq i8 %878, 0
  br i1 %879, label %913, label %897

880:                                              ; preds = %892, %870
  %881 = phi i64 [ 0, %870 ], [ %895, %892 ]
  %882 = phi i8 [ 0, %870 ], [ %894, %892 ]
  %883 = phi i8 [ 0, %870 ], [ %893, %892 ]
  %884 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %863, i64 %881, i32 2
  %885 = load i32, i32* %884, align 4
  %886 = icmp eq i32 %885, %872
  br i1 %886, label %892, label %887

887:                                              ; preds = %880
  %888 = load i32, i32* %873, align 4
  %889 = add i32 %888, 16
  %890 = icmp eq i32 %885, %889
  %891 = select i1 %890, i8 1, i8 %882
  br label %892

892:                                              ; preds = %887, %880
  %893 = phi i8 [ 1, %880 ], [ %883, %887 ]
  %894 = phi i8 [ %882, %880 ], [ %891, %887 ]
  %895 = add nuw i64 %881, 1
  %896 = icmp ult i64 %895, %865
  br i1 %896, label %880, label %874

897:                                              ; preds = %874
  %898 = and i8 %876, 1
  %899 = icmp eq i8 %898, 0
  %900 = and i1 %862, %899
  %901 = add nuw nsw i64 %869, 1
  br i1 %900, label %913, label %866

902:                                              ; preds = %866
  %903 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %153, align 8
  %904 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %154, align 8
  %905 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %903, %904
  br i1 %905, label %909, label %906

906:                                              ; preds = %902
  call void @_ZNSt3__19allocatorIN3jxl4jpeg12JPEGScanInfoEE9constructIS3_JRKS3_EEEvPT_DpOT0_(%"class.std::__1::allocator.65"* %156, %"struct.jxl::jpeg::JPEGScanInfo"* %903, %"struct.jxl::jpeg::JPEGScanInfo"* nonnull dereferenceable(120) %8) #9
  %907 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %903, i64 1
  %908 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo"* %907 to i64
  store i64 %908, i64* %157, align 8
  br label %910

909:                                              ; preds = %902
  call void @_ZNSt3__16vectorIN3jxl4jpeg12JPEGScanInfoENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_(%"class.std::__1::vector.45"* %158, %"struct.jxl::jpeg::JPEGScanInfo"* nonnull dereferenceable(120) %8) #9
  br label %910

910:                                              ; preds = %909, %906
  %911 = add i64 %763, %292
  %912 = icmp eq i64 %911, %837
  br i1 %912, label %916, label %913

913:                                              ; preds = %821, %802, %806, %787, %897, %874, %910, %849, %839, %836
  %914 = phi i32 [ 3, %836 ], [ 12, %839 ], [ 13, %849 ], [ 6, %910 ], [ 34, %874 ], [ 34, %897 ], [ 16, %821 ], [ 33, %802 ], [ 33, %806 ], [ 32, %787 ]
  %915 = phi i64 [ %822, %836 ], [ %844, %839 ], [ %844, %849 ], [ %837, %910 ], [ %837, %874 ], [ %837, %897 ], [ %822, %821 ], [ %790, %802 ], [ %790, %806 ], [ %790, %787 ]
  store i32 %914, i32* %144, align 8
  br label %916

916:                                              ; preds = %913, %910
  %917 = phi i64 [ %837, %910 ], [ %915, %913 ]
  %918 = phi i1 [ true, %910 ], [ false, %913 ]
  call void @_ZdlPv(i8* nonnull %783) #8
  %919 = load %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %159, align 8
  %920 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %919, null
  br i1 %920, label %924, label %921

921:                                              ; preds = %916
  %922 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %919 to i8*
  %923 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %919 to i64
  store i64 %923, i64* %161, align 8
  call void @_ZdlPv(i8* %922) #8
  br label %924

924:                                              ; preds = %921, %916, %781
  %925 = phi i64 [ %751, %781 ], [ %917, %916 ], [ %917, %921 ]
  %926 = phi i1 [ false, %781 ], [ %918, %916 ], [ %918, %921 ]
  %927 = load i32*, i32** %162, align 8
  %928 = icmp eq i32* %927, null
  br i1 %928, label %932, label %929

929:                                              ; preds = %924
  %930 = ptrtoint i32* %927 to i64
  store i64 %930, i64* %164, align 8
  %931 = bitcast i32* %927 to i8*
  call void @_ZdlPv(i8* %931) #8
  br label %932

932:                                              ; preds = %929, %924
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %140) #9
  br i1 %926, label %933, label %3323

933:                                              ; preds = %932
  %934 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %153, align 8
  %935 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %934, i64 -1, i32 4
  %936 = load i32, i32* %935, align 8
  %937 = icmp ugt i32 %936, 1
  %938 = load i64, i64* %138, align 8
  %939 = load i64, i64* %139, align 8
  %940 = icmp eq i64 %938, %939
  %941 = inttoptr i64 %939 to %"struct.jxl::jpeg::JPEGComponent"*
  br i1 %940, label %945, label %942

942:                                              ; preds = %933
  %943 = sub i64 %938, %939
  %944 = sdiv exact i64 %943, 48
  br label %952

945:                                              ; preds = %952, %933
  %946 = phi i32 [ 1, %933 ], [ %959, %952 ]
  %947 = phi i32 [ 1, %933 ], [ %963, %952 ]
  %948 = load i32, i32* %165, align 4
  %949 = shl nsw i32 %947, 3
  %950 = load i32, i32* %166, align 8
  %951 = shl nsw i32 %946, 3
  br i1 %937, label %976, label %966

952:                                              ; preds = %952, %942
  %953 = phi i64 [ 0, %942 ], [ %964, %952 ]
  %954 = phi i32 [ 1, %942 ], [ %963, %952 ]
  %955 = phi i32 [ 1, %942 ], [ %959, %952 ]
  %956 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %941, i64 %953, i32 1
  %957 = load i32, i32* %956, align 4
  %958 = icmp slt i32 %955, %957
  %959 = select i1 %958, i32 %957, i32 %955
  %960 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %941, i64 %953, i32 2
  %961 = load i32, i32* %960, align 4
  %962 = icmp slt i32 %954, %961
  %963 = select i1 %962, i32 %961, i32 %954
  %964 = add nuw i64 %953, 1
  %965 = icmp ult i64 %964, %944
  br i1 %965, label %952, label %945

966:                                              ; preds = %945
  %967 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %934, i64 -1, i32 5, i32 0, i64 0, i32 0
  %968 = load i32, i32* %967, align 4
  %969 = zext i32 %968 to i64
  %970 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %941, i64 %969, i32 1
  %971 = load i32, i32* %970, align 4
  %972 = mul nsw i32 %971, %950
  %973 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %941, i64 %969, i32 2
  %974 = load i32, i32* %973, align 8
  %975 = mul nsw i32 %974, %948
  br label %976

976:                                              ; preds = %966, %945
  %977 = phi i32 [ %948, %945 ], [ %975, %966 ]
  %978 = phi i32 [ %950, %945 ], [ %972, %966 ]
  %979 = add i32 %951, -1
  %980 = add i32 %979, %978
  %981 = sdiv i32 %980, %951
  %982 = add i32 %949, -1
  %983 = add i32 %982, %977
  %984 = sdiv i32 %983, %949
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %167) #9
  store i64 0, i64* %9, align 8
  %985 = icmp ugt i64 %168, %925
  %986 = add i64 %925, 1
  br i1 %985, label %987, label %998

987:                                              ; preds = %976
  %988 = getelementptr inbounds i8, i8* %0, i64 %925
  %989 = load i8, i8* %988, align 1
  %990 = icmp eq i8 %989, -1
  br i1 %990, label %991, label %998

991:                                              ; preds = %987
  %992 = getelementptr inbounds i8, i8* %0, i64 %986
  %993 = load i8, i8* %992, align 1
  %994 = icmp eq i8 %993, 0
  %995 = add i64 %925, 2
  %996 = select i1 %994, i64 %168, i64 %925
  %997 = select i1 %994, i64 %995, i64 %986
  br label %998

998:                                              ; preds = %991, %987, %976
  %999 = phi i64 [ %168, %987 ], [ %168, %976 ], [ %996, %991 ]
  %1000 = phi i64 [ %986, %987 ], [ %986, %976 ], [ %997, %991 ]
  %1001 = phi i8 [ %989, %987 ], [ 0, %976 ], [ -1, %991 ]
  %1002 = zext i8 %1001 to i64
  %1003 = shl nuw nsw i64 %1002, 8
  %1004 = icmp ult i64 %1000, %999
  %1005 = add i64 %1000, 1
  br i1 %1004, label %1006, label %1017

1006:                                             ; preds = %998
  %1007 = getelementptr inbounds i8, i8* %0, i64 %1000
  %1008 = load i8, i8* %1007, align 1
  %1009 = icmp eq i8 %1008, -1
  br i1 %1009, label %1010, label %1017

1010:                                             ; preds = %1006
  %1011 = getelementptr inbounds i8, i8* %0, i64 %1005
  %1012 = load i8, i8* %1011, align 1
  %1013 = icmp eq i8 %1012, 0
  %1014 = add i64 %1000, 2
  %1015 = select i1 %1013, i64 %999, i64 %1000
  %1016 = select i1 %1013, i64 %1014, i64 %1005
  br label %1017

1017:                                             ; preds = %1010, %1006, %998
  %1018 = phi i64 [ %999, %1006 ], [ %999, %998 ], [ %1015, %1010 ]
  %1019 = phi i64 [ %1005, %1006 ], [ %1005, %998 ], [ %1016, %1010 ]
  %1020 = phi i8 [ %1008, %1006 ], [ 0, %998 ], [ -1, %1010 ]
  %1021 = zext i8 %1020 to i64
  %1022 = or i64 %1003, %1021
  %1023 = shl nuw nsw i64 %1022, 8
  %1024 = icmp ult i64 %1019, %1018
  %1025 = add i64 %1019, 1
  br i1 %1024, label %1026, label %1037

1026:                                             ; preds = %1017
  %1027 = getelementptr inbounds i8, i8* %0, i64 %1019
  %1028 = load i8, i8* %1027, align 1
  %1029 = icmp eq i8 %1028, -1
  br i1 %1029, label %1030, label %1037

1030:                                             ; preds = %1026
  %1031 = getelementptr inbounds i8, i8* %0, i64 %1025
  %1032 = load i8, i8* %1031, align 1
  %1033 = icmp eq i8 %1032, 0
  %1034 = add i64 %1019, 2
  %1035 = select i1 %1033, i64 %1018, i64 %1019
  %1036 = select i1 %1033, i64 %1034, i64 %1025
  br label %1037

1037:                                             ; preds = %1030, %1026, %1017
  %1038 = phi i64 [ %1018, %1026 ], [ %1018, %1017 ], [ %1035, %1030 ]
  %1039 = phi i64 [ %1025, %1026 ], [ %1025, %1017 ], [ %1036, %1030 ]
  %1040 = phi i8 [ %1028, %1026 ], [ 0, %1017 ], [ -1, %1030 ]
  %1041 = zext i8 %1040 to i64
  %1042 = or i64 %1023, %1041
  %1043 = shl nuw nsw i64 %1042, 8
  %1044 = icmp ult i64 %1039, %1038
  %1045 = add i64 %1039, 1
  br i1 %1044, label %1046, label %1058

1046:                                             ; preds = %1037
  %1047 = getelementptr inbounds i8, i8* %0, i64 %1039
  %1048 = load i8, i8* %1047, align 1
  %1049 = icmp eq i8 %1048, -1
  br i1 %1049, label %1050, label %1058

1050:                                             ; preds = %1046
  %1051 = getelementptr inbounds i8, i8* %0, i64 %1045
  %1052 = load i8, i8* %1051, align 1
  %1053 = icmp eq i8 %1052, 0
  %1054 = add i64 %1039, 2
  %1055 = select i1 %1053, i64 %1038, i64 %1039
  %1056 = select i1 %1053, i64 %1038, i64 %1039
  %1057 = select i1 %1053, i64 %1054, i64 %1045
  br label %1058

1058:                                             ; preds = %1050, %1046, %1037
  %1059 = phi i64 [ %1038, %1046 ], [ %1038, %1037 ], [ %1055, %1050 ]
  %1060 = phi i64 [ %1038, %1046 ], [ %1038, %1037 ], [ %1056, %1050 ]
  %1061 = phi i64 [ %1045, %1046 ], [ %1045, %1037 ], [ %1057, %1050 ]
  %1062 = phi i8 [ %1048, %1046 ], [ 0, %1037 ], [ -1, %1050 ]
  %1063 = zext i8 %1062 to i64
  %1064 = or i64 %1043, %1063
  %1065 = shl i64 %1064, 8
  %1066 = icmp ult i64 %1061, %1060
  %1067 = add i64 %1061, 1
  br i1 %1066, label %1068, label %1080

1068:                                             ; preds = %1058
  %1069 = getelementptr inbounds i8, i8* %0, i64 %1061
  %1070 = load i8, i8* %1069, align 1
  %1071 = icmp eq i8 %1070, -1
  br i1 %1071, label %1072, label %1080

1072:                                             ; preds = %1068
  %1073 = getelementptr inbounds i8, i8* %0, i64 %1067
  %1074 = load i8, i8* %1073, align 1
  %1075 = icmp eq i8 %1074, 0
  %1076 = add i64 %1061, 2
  %1077 = select i1 %1075, i64 %1059, i64 %1061
  %1078 = select i1 %1075, i64 %1060, i64 %1061
  %1079 = select i1 %1075, i64 %1076, i64 %1067
  br label %1080

1080:                                             ; preds = %1072, %1068, %1058
  %1081 = phi i64 [ %1059, %1068 ], [ %1059, %1058 ], [ %1077, %1072 ]
  %1082 = phi i64 [ %1060, %1068 ], [ %1060, %1058 ], [ %1078, %1072 ]
  %1083 = phi i64 [ %1067, %1068 ], [ %1067, %1058 ], [ %1079, %1072 ]
  %1084 = phi i8 [ %1070, %1068 ], [ 0, %1058 ], [ -1, %1072 ]
  %1085 = zext i8 %1084 to i64
  %1086 = or i64 %1065, %1085
  %1087 = shl i64 %1086, 8
  %1088 = icmp ult i64 %1083, %1082
  %1089 = add i64 %1083, 1
  br i1 %1088, label %1090, label %1102

1090:                                             ; preds = %1080
  %1091 = getelementptr inbounds i8, i8* %0, i64 %1083
  %1092 = load i8, i8* %1091, align 1
  %1093 = icmp eq i8 %1092, -1
  br i1 %1093, label %1094, label %1102

1094:                                             ; preds = %1090
  %1095 = getelementptr inbounds i8, i8* %0, i64 %1089
  %1096 = load i8, i8* %1095, align 1
  %1097 = icmp eq i8 %1096, 0
  %1098 = add i64 %1083, 2
  %1099 = select i1 %1097, i64 %1081, i64 %1083
  %1100 = select i1 %1097, i64 %1082, i64 %1083
  %1101 = select i1 %1097, i64 %1098, i64 %1089
  br label %1102

1102:                                             ; preds = %1094, %1090, %1080
  %1103 = phi i64 [ %1081, %1090 ], [ %1081, %1080 ], [ %1099, %1094 ]
  %1104 = phi i64 [ %1082, %1090 ], [ %1082, %1080 ], [ %1100, %1094 ]
  %1105 = phi i64 [ %1089, %1090 ], [ %1089, %1080 ], [ %1101, %1094 ]
  %1106 = phi i8 [ %1092, %1090 ], [ 0, %1080 ], [ -1, %1094 ]
  %1107 = zext i8 %1106 to i64
  %1108 = or i64 %1087, %1107
  %1109 = shl i64 %1108, 8
  %1110 = icmp ult i64 %1105, %1104
  %1111 = add i64 %1105, 1
  br i1 %1110, label %1112, label %1124

1112:                                             ; preds = %1102
  %1113 = getelementptr inbounds i8, i8* %0, i64 %1105
  %1114 = load i8, i8* %1113, align 1
  %1115 = icmp eq i8 %1114, -1
  br i1 %1115, label %1116, label %1124

1116:                                             ; preds = %1112
  %1117 = getelementptr inbounds i8, i8* %0, i64 %1111
  %1118 = load i8, i8* %1117, align 1
  %1119 = icmp eq i8 %1118, 0
  %1120 = add i64 %1105, 2
  %1121 = select i1 %1119, i64 %1103, i64 %1105
  %1122 = select i1 %1119, i64 %1104, i64 %1105
  %1123 = select i1 %1119, i64 %1120, i64 %1111
  br label %1124

1124:                                             ; preds = %1116, %1112, %1102
  %1125 = phi i64 [ %1103, %1112 ], [ %1103, %1102 ], [ %1121, %1116 ]
  %1126 = phi i64 [ %1104, %1112 ], [ %1104, %1102 ], [ %1122, %1116 ]
  %1127 = phi i64 [ %1111, %1112 ], [ %1111, %1102 ], [ %1123, %1116 ]
  %1128 = phi i8 [ %1114, %1112 ], [ 0, %1102 ], [ -1, %1116 ]
  %1129 = zext i8 %1128 to i64
  %1130 = or i64 %1109, %1129
  %1131 = shl i64 %1130, 8
  %1132 = icmp ult i64 %1127, %1126
  %1133 = add i64 %1127, 1
  br i1 %1132, label %1134, label %1145

1134:                                             ; preds = %1124
  %1135 = getelementptr inbounds i8, i8* %0, i64 %1127
  %1136 = load i8, i8* %1135, align 1
  %1137 = icmp eq i8 %1136, -1
  br i1 %1137, label %1138, label %1145

1138:                                             ; preds = %1134
  %1139 = getelementptr inbounds i8, i8* %0, i64 %1133
  %1140 = load i8, i8* %1139, align 1
  %1141 = icmp eq i8 %1140, 0
  %1142 = add i64 %1127, 2
  %1143 = select i1 %1141, i64 %1142, i64 %1133
  %1144 = select i1 %1141, i64 %1125, i64 %1127
  br label %1145

1145:                                             ; preds = %1138, %1134, %1124
  %1146 = phi i64 [ %1133, %1134 ], [ %1133, %1124 ], [ %1143, %1138 ]
  %1147 = phi i64 [ %1125, %1134 ], [ %1125, %1124 ], [ %1144, %1138 ]
  %1148 = phi i8 [ %1136, %1134 ], [ 0, %1124 ], [ -1, %1138 ]
  %1149 = zext i8 %1148 to i64
  %1150 = or i64 %1131, %1149
  %1151 = load i32, i32* %122, align 8
  %1152 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %934, i64 -1, i32 3
  %1153 = load i32, i32* %1152, align 4
  %1154 = select i1 %750, i32 %1153, i32 0
  %1155 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %934, i64 -1, i32 2
  %1156 = load i32, i32* %1155, align 8
  %1157 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %934, i64 -1, i32 0
  %1158 = load i32, i32* %1157, align 8
  %1159 = select i1 %750, i32 %1158, i32 0
  %1160 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %934, i64 -1, i32 1
  %1161 = load i32, i32* %1160, align 4
  %1162 = select i1 %750, i32 %1161, i32 63
  %1163 = icmp eq i32 %1156, 0
  %1164 = xor i1 %750, true
  %1165 = or i1 %1163, %1164
  %1166 = shl i32 65535, %1154
  %1167 = shl i32 1, %1154
  %1168 = select i1 %1165, i32 %1166, i32 %1167
  %1169 = add i32 %1167, 65535
  %1170 = icmp eq i32 %936, 0
  br i1 %1170, label %1200, label %1171

1171:                                             ; preds = %1145
  %1172 = icmp sgt i32 %1159, %1162
  %1173 = trunc i32 %1168 to i16
  %1174 = sext i32 %1159 to i64
  %1175 = sext i32 %1162 to i64
  %1176 = zext i32 %936 to i64
  br label %1177

1177:                                             ; preds = %1197, %1171
  %1178 = phi i64 [ 0, %1171 ], [ %1198, %1197 ]
  br i1 %1172, label %1197, label %1179

1179:                                             ; preds = %1177
  %1180 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %934, i64 -1, i32 5, i32 0, i64 %1178, i32 0
  %1181 = load i32, i32* %1180, align 4
  %1182 = sext i32 %1181 to i64
  br label %1183

1183:                                             ; preds = %1193, %1179
  %1184 = phi i64 [ %1195, %1193 ], [ %1174, %1179 ]
  %1185 = getelementptr inbounds [4 x [64 x i16]], [4 x [64 x i16]]* %11, i64 0, i64 %1182, i64 %1184
  %1186 = load i16, i16* %1185, align 2
  %1187 = zext i16 %1186 to i32
  %1188 = and i32 %1168, %1187
  %1189 = icmp eq i32 %1188, 0
  br i1 %1189, label %1190, label %3163

1190:                                             ; preds = %1183
  %1191 = and i32 %1169, %1187
  %1192 = icmp eq i32 %1191, 0
  br i1 %1192, label %1193, label %3163

1193:                                             ; preds = %1190
  %1194 = or i16 %1186, %1173
  store i16 %1194, i16* %1185, align 2
  %1195 = add nsw i64 %1184, 1
  %1196 = icmp slt i64 %1184, %1175
  br i1 %1196, label %1183, label %1197

1197:                                             ; preds = %1193, %1177
  %1198 = add nuw nsw i64 %1178, 1
  %1199 = icmp eq i64 %1198, %1176
  br i1 %1199, label %1200, label %1177

1200:                                             ; preds = %1197, %1145
  %1201 = icmp sgt i32 %1154, 10
  br i1 %1201, label %3163, label %1202

1202:                                             ; preds = %1200
  %1203 = icmp sgt i32 %984, 0
  br i1 %1203, label %1204, label %2640

1204:                                             ; preds = %1202
  %1205 = icmp sgt i32 %981, 0
  %1206 = icmp sgt i32 %1159, 0
  %1207 = icmp eq i32 %1159, 0
  %1208 = sub nsw i32 0, %1167
  %1209 = trunc i32 %1167 to i16
  %1210 = sext i32 %1162 to i64
  %1211 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %934, i64 -1, i32 7
  %1212 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %934, i64 -1, i32 7, i32 0, i32 1
  %1213 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %934, i64 -1, i32 7, i32 0, i32 2, i32 0, i32 0
  %1214 = bitcast i32** %1212 to i64*
  %1215 = bitcast %"class.std::__1::vector.48"* %1211 to i64*
  %1216 = bitcast i32** %1213 to i64*
  %1217 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %1211, i64 0, i32 0, i32 0
  %1218 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %934, i64 -1, i32 8
  %1219 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %934, i64 -1, i32 8, i32 0, i32 1
  %1220 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %934, i64 -1, i32 8, i32 0, i32 2, i32 0, i32 0
  %1221 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %1219 to i64*
  %1222 = bitcast %"class.std::__1::vector.55"* %1218 to i64*
  %1223 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %1220 to i64*
  %1224 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %1218, i64 0, i32 0, i32 0
  br label %1225

1225:                                             ; preds = %2553, %1204
  %1226 = phi i32 [ %936, %1204 ], [ %2554, %2553 ]
  %1227 = phi i32 [ %936, %1204 ], [ %2555, %2553 ]
  %1228 = phi i32 [ 0, %1204 ], [ %2564, %2553 ]
  %1229 = phi i32 [ %1151, %1204 ], [ %2563, %2553 ]
  %1230 = phi i32 [ 0, %1204 ], [ %2562, %2553 ]
  %1231 = phi i32 [ -1, %1204 ], [ %2561, %2553 ]
  %1232 = phi i32 [ 0, %1204 ], [ %2560, %2553 ]
  %1233 = phi i64 [ %1147, %1204 ], [ %2559, %2553 ]
  %1234 = phi i32 [ 64, %1204 ], [ %2558, %2553 ]
  %1235 = phi i64 [ %1150, %1204 ], [ %2557, %2553 ]
  %1236 = phi i64 [ %1146, %1204 ], [ %2556, %2553 ]
  br i1 %1205, label %1237, label %2553

1237:                                             ; preds = %1225, %2542
  %1238 = phi i32 [ %2543, %2542 ], [ %1226, %1225 ]
  %1239 = phi i32 [ %2544, %2542 ], [ %1227, %1225 ]
  %1240 = phi i32 [ %2551, %2542 ], [ 0, %1225 ]
  %1241 = phi i32 [ %1404, %2542 ], [ %1229, %1225 ]
  %1242 = phi i32 [ %2550, %2542 ], [ %1230, %1225 ]
  %1243 = phi i32 [ %2549, %2542 ], [ %1231, %1225 ]
  %1244 = phi i32 [ %1402, %2542 ], [ %1232, %1225 ]
  %1245 = phi i64 [ %2548, %2542 ], [ %1233, %1225 ]
  %1246 = phi i32 [ %2547, %2542 ], [ %1234, %1225 ]
  %1247 = phi i64 [ %2546, %2542 ], [ %1235, %1225 ]
  %1248 = phi i64 [ %2545, %2542 ], [ %1236, %1225 ]
  %1249 = load i32, i32* %122, align 8
  %1250 = icmp eq i32 %1249, 0
  br i1 %1250, label %1395, label %1251

1251:                                             ; preds = %1237
  %1252 = icmp eq i32 %1241, 0
  br i1 %1252, label %1253, label %1385

1253:                                             ; preds = %1251
  %1254 = and i32 %1246, 7
  %1255 = icmp eq i32 %1254, 0
  br i1 %1255, label %1323, label %1256

1256:                                             ; preds = %1253
  %1257 = zext i32 %1254 to i64
  %1258 = shl nsw i64 -1, %1257
  %1259 = xor i64 %1258, -1
  %1260 = sub nsw i32 %1246, %1254
  %1261 = zext i32 %1260 to i64
  %1262 = lshr i64 %1247, %1261
  %1263 = and i64 %1262, %1259
  %1264 = icmp eq i64 %1263, %1259
  br i1 %1264, label %1266, label %1265

1265:                                             ; preds = %1256
  store i8 1, i8* %169, align 4
  br label %1266

1266:                                             ; preds = %1265, %1256
  br label %1267

1267:                                             ; preds = %1266, %1321
  %1268 = phi i64 [ %1269, %1321 ], [ %1257, %1266 ]
  %1269 = add nsw i64 %1268, -1
  %1270 = lshr i64 %1263, %1269
  %1271 = trunc i64 %1270 to i8
  %1272 = and i8 %1271, 1
  %1273 = load i8*, i8** %80, align 8
  %1274 = load i8*, i8** %170, align 8
  %1275 = icmp ult i8* %1273, %1274
  %1276 = ptrtoint i8* %1274 to i64
  br i1 %1275, label %1277, label %1280

1277:                                             ; preds = %1267
  store i8 %1272, i8* %1273, align 1
  %1278 = getelementptr inbounds i8, i8* %1273, i64 1
  %1279 = ptrtoint i8* %1278 to i64
  store i64 %1279, i64* %81, align 8
  br label %1321

1280:                                             ; preds = %1267
  %1281 = ptrtoint i8* %1273 to i64
  %1282 = load i64, i64* %83, align 8
  %1283 = sub i64 %1281, %1282
  %1284 = add i64 %1283, 1
  %1285 = icmp slt i64 %1284, 0
  br i1 %1285, label %1286, label %1288

1286:                                             ; preds = %1280
  %1287 = bitcast %"class.std::__1::vector.0"* %79 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1287) #10
  unreachable

1288:                                             ; preds = %1280
  %1289 = sub i64 %1276, %1282
  %1290 = icmp ult i64 %1289, 4611686018427387903
  br i1 %1290, label %1291, label %1296

1291:                                             ; preds = %1288
  %1292 = shl i64 %1289, 1
  %1293 = icmp ult i64 %1292, %1284
  %1294 = select i1 %1293, i64 %1284, i64 %1292
  %1295 = icmp eq i64 %1294, 0
  br i1 %1295, label %1299, label %1296

1296:                                             ; preds = %1291, %1288
  %1297 = phi i64 [ %1294, %1291 ], [ 9223372036854775807, %1288 ]
  %1298 = call i8* @_Znwm(i64 %1297) #8
  br label %1299

1299:                                             ; preds = %1296, %1291
  %1300 = phi i64 [ %1297, %1296 ], [ 0, %1291 ]
  %1301 = phi i8* [ %1298, %1296 ], [ null, %1291 ]
  %1302 = getelementptr inbounds i8, i8* %1301, i64 %1283
  %1303 = getelementptr inbounds i8, i8* %1301, i64 %1300
  %1304 = ptrtoint i8* %1303 to i64
  store i8 %1272, i8* %1302, align 1
  %1305 = getelementptr inbounds i8, i8* %1302, i64 1
  %1306 = ptrtoint i8* %1305 to i64
  %1307 = load i8*, i8** %172, align 8
  %1308 = load i64, i64* %81, align 8
  %1309 = ptrtoint i8* %1307 to i64
  %1310 = sub i64 %1308, %1309
  %1311 = sub i64 0, %1310
  %1312 = getelementptr inbounds i8, i8* %1302, i64 %1311
  %1313 = ptrtoint i8* %1312 to i64
  %1314 = icmp sgt i64 %1310, 0
  br i1 %1314, label %1315, label %1317

1315:                                             ; preds = %1299
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1312, i8* align 1 %1307, i64 %1310, i1 false) #9
  %1316 = load i8*, i8** %172, align 8
  br label %1317

1317:                                             ; preds = %1315, %1299
  %1318 = phi i8* [ %1307, %1299 ], [ %1316, %1315 ]
  store i64 %1313, i64* %83, align 8
  store i64 %1306, i64* %81, align 8
  store i64 %1304, i64* %171, align 8
  %1319 = icmp eq i8* %1318, null
  br i1 %1319, label %1321, label %1320

1320:                                             ; preds = %1317
  call void @_ZdlPv(i8* nonnull %1318) #8
  br label %1321

1321:                                             ; preds = %1320, %1317, %1277
  %1322 = icmp sgt i64 %1269, 0
  br i1 %1322, label %1267, label %1323

1323:                                             ; preds = %1321, %1253
  %1324 = icmp sgt i32 %1246, 7
  br i1 %1324, label %1325, label %1346

1325:                                             ; preds = %1323
  %1326 = lshr i32 %1246, 3
  br label %1327

1327:                                             ; preds = %1343, %1325
  %1328 = phi i64 [ %1248, %1325 ], [ %1344, %1343 ]
  %1329 = phi i32 [ %1326, %1325 ], [ %1330, %1343 ]
  %1330 = add nsw i32 %1329, -1
  %1331 = add i64 %1328, -1
  %1332 = icmp ult i64 %1331, %1245
  br i1 %1332, label %1333, label %1343

1333:                                             ; preds = %1327
  %1334 = getelementptr inbounds i8, i8* %0, i64 %1331
  %1335 = load i8, i8* %1334, align 1
  %1336 = icmp eq i8 %1335, 0
  br i1 %1336, label %1337, label %1343

1337:                                             ; preds = %1333
  %1338 = add i64 %1328, -2
  %1339 = getelementptr inbounds i8, i8* %0, i64 %1338
  %1340 = load i8, i8* %1339, align 1
  %1341 = icmp eq i8 %1340, -1
  %1342 = select i1 %1341, i64 %1338, i64 %1331
  br label %1343

1343:                                             ; preds = %1337, %1333, %1327
  %1344 = phi i64 [ %1331, %1333 ], [ %1331, %1327 ], [ %1342, %1337 ]
  %1345 = icmp sgt i32 %1330, 0
  br i1 %1345, label %1327, label %1346

1346:                                             ; preds = %1343, %1323
  %1347 = phi i64 [ %1248, %1323 ], [ %1344, %1343 ]
  %1348 = icmp ugt i64 %1347, %1245
  br i1 %1348, label %3163, label %1349

1349:                                             ; preds = %1346
  %1350 = add nsw i32 %1244, 208
  %1351 = add i64 %1347, 2
  %1352 = icmp ugt i64 %1351, %1
  br i1 %1352, label %3163, label %1353

1353:                                             ; preds = %1349
  %1354 = getelementptr inbounds i8, i8* %0, i64 %1347
  %1355 = load i8, i8* %1354, align 1
  %1356 = icmp eq i8 %1355, -1
  br i1 %1356, label %1357, label %3163

1357:                                             ; preds = %1353
  %1358 = add i64 %1347, 1
  %1359 = getelementptr inbounds i8, i8* %0, i64 %1358
  %1360 = load i8, i8* %1359, align 1
  %1361 = zext i8 %1360 to i32
  %1362 = icmp eq i32 %1350, %1361
  br i1 %1362, label %1363, label %3163

1363:                                             ; preds = %1357
  %1364 = icmp ult i64 %1351, %168
  %1365 = add i64 %1347, 3
  br i1 %1364, label %1366, label %1377

1366:                                             ; preds = %1363
  %1367 = getelementptr inbounds i8, i8* %0, i64 %1351
  %1368 = load i8, i8* %1367, align 1
  %1369 = icmp eq i8 %1368, -1
  br i1 %1369, label %1370, label %1377

1370:                                             ; preds = %1366
  %1371 = getelementptr inbounds i8, i8* %0, i64 %1365
  %1372 = load i8, i8* %1371, align 1
  %1373 = icmp eq i8 %1372, 0
  %1374 = add i64 %1347, 4
  %1375 = select i1 %1373, i64 %1374, i64 %1365
  %1376 = select i1 %1373, i64 %168, i64 %1351
  br label %1377

1377:                                             ; preds = %1370, %1366, %1363
  %1378 = phi i64 [ %168, %1366 ], [ %168, %1363 ], [ %1376, %1370 ]
  %1379 = phi i64 [ %1365, %1366 ], [ %1365, %1363 ], [ %1375, %1370 ]
  %1380 = phi i8 [ %1368, %1366 ], [ 0, %1363 ], [ -1, %1370 ]
  %1381 = zext i8 %1380 to i64
  %1382 = shl nuw nsw i64 %1381, 8
  %1383 = icmp ult i64 %1379, %1378
  %1384 = add i64 %1379, 1
  br i1 %1383, label %2670, label %2681

1385:                                             ; preds = %2809, %1251
  %1386 = phi i64 [ %1248, %1251 ], [ %2810, %2809 ]
  %1387 = phi i64 [ %1247, %1251 ], [ %2814, %2809 ]
  %1388 = phi i32 [ %1246, %1251 ], [ 64, %2809 ]
  %1389 = phi i64 [ %1245, %1251 ], [ %2811, %2809 ]
  %1390 = phi i32 [ %1244, %1251 ], [ %2816, %2809 ]
  %1391 = phi i32 [ %1243, %1251 ], [ -1, %2809 ]
  %1392 = phi i32 [ %1241, %1251 ], [ %2817, %2809 ]
  %1393 = add nsw i32 %1392, -1
  %1394 = load i32, i32* %935, align 8
  br label %1395

1395:                                             ; preds = %1385, %1237
  %1396 = phi i32 [ %1238, %1237 ], [ %1394, %1385 ]
  %1397 = phi i32 [ %1239, %1237 ], [ %1394, %1385 ]
  %1398 = phi i64 [ %1248, %1237 ], [ %1386, %1385 ]
  %1399 = phi i64 [ %1247, %1237 ], [ %1387, %1385 ]
  %1400 = phi i32 [ %1246, %1237 ], [ %1388, %1385 ]
  %1401 = phi i64 [ %1245, %1237 ], [ %1389, %1385 ]
  %1402 = phi i32 [ %1244, %1237 ], [ %1390, %1385 ]
  %1403 = phi i32 [ %1243, %1237 ], [ %1391, %1385 ]
  %1404 = phi i32 [ %1241, %1237 ], [ %1393, %1385 ]
  %1405 = icmp eq i32 %1397, 0
  br i1 %1405, label %2542, label %1406

1406:                                             ; preds = %1395, %2531
  %1407 = phi i32 [ %2532, %2531 ], [ %1396, %1395 ]
  %1408 = phi i64 [ %2539, %2531 ], [ 0, %1395 ]
  %1409 = phi i32 [ %2538, %2531 ], [ %1242, %1395 ]
  %1410 = phi i32 [ %2537, %2531 ], [ %1403, %1395 ]
  %1411 = phi i64 [ %2536, %2531 ], [ %1401, %1395 ]
  %1412 = phi i32 [ %2535, %2531 ], [ %1400, %1395 ]
  %1413 = phi i64 [ %2534, %2531 ], [ %1399, %1395 ]
  %1414 = phi i64 [ %2533, %2531 ], [ %1398, %1395 ]
  %1415 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %934, i64 -1, i32 5, i32 0, i64 %1408, i32 0
  %1416 = load i32, i32* %1415, align 4
  %1417 = zext i32 %1416 to i64
  %1418 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %173, align 8
  %1419 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %934, i64 -1, i32 5, i32 0, i64 %1408, i32 1
  %1420 = load i32, i32* %1419, align 4
  %1421 = mul i32 %1420, 758
  %1422 = zext i32 %1421 to i64
  %1423 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %29, i64 %1422
  %1424 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %934, i64 -1, i32 5, i32 0, i64 %1408, i32 2
  %1425 = load i32, i32* %1424, align 4
  %1426 = mul i32 %1425, 758
  %1427 = zext i32 %1426 to i64
  %1428 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %54, i64 %1427
  %1429 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %1418, i64 %1417, i32 2
  %1430 = load i32, i32* %1429, align 8
  %1431 = select i1 %937, i32 %1430, i32 1
  %1432 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %1418, i64 %1417, i32 1
  %1433 = load i32, i32* %1432, align 4
  %1434 = select i1 %937, i32 %1433, i32 1
  %1435 = icmp sgt i32 %1431, 0
  br i1 %1435, label %1436, label %2531

1436:                                             ; preds = %1406
  %1437 = icmp sgt i32 %1434, 0
  %1438 = mul nsw i32 %1431, %1228
  %1439 = mul nsw i32 %1434, %1240
  %1440 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %1418, i64 %1417, i32 4
  %1441 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %1418, i64 %1417, i32 6, i32 0, i32 0
  br label %1442

1442:                                             ; preds = %2520, %1436
  %1443 = phi i32 [ 0, %1436 ], [ %2527, %2520 ]
  %1444 = phi i32 [ %1409, %1436 ], [ %2526, %2520 ]
  %1445 = phi i32 [ %1410, %1436 ], [ %2525, %2520 ]
  %1446 = phi i64 [ %1411, %1436 ], [ %2524, %2520 ]
  %1447 = phi i32 [ %1412, %1436 ], [ %2523, %2520 ]
  %1448 = phi i64 [ %1413, %1436 ], [ %2522, %2520 ]
  %1449 = phi i64 [ %1414, %1436 ], [ %2521, %2520 ]
  br i1 %1437, label %1450, label %2520

1450:                                             ; preds = %1442
  %1451 = add nsw i32 %1443, %1438
  br label %1452

1452:                                             ; preds = %2511, %1450
  %1453 = phi i32 [ 0, %1450 ], [ %2518, %2511 ]
  %1454 = phi i32 [ %1444, %1450 ], [ %2517, %2511 ]
  %1455 = phi i32 [ %1445, %1450 ], [ %2516, %2511 ]
  %1456 = phi i64 [ %1446, %1450 ], [ %2515, %2511 ]
  %1457 = phi i32 [ %1447, %1450 ], [ %2514, %2511 ]
  %1458 = phi i64 [ %1448, %1450 ], [ %2513, %2511 ]
  %1459 = phi i64 [ %1449, %1450 ], [ %2512, %2511 ]
  %1460 = add nsw i32 %1453, %1439
  %1461 = load i32, i32* %1440, align 8
  %1462 = mul i32 %1461, %1451
  %1463 = add i32 %1460, %1462
  %1464 = sext i32 %1463 to i64
  %1465 = shl nsw i64 %1464, 6
  %1466 = load i16*, i16** %1441, align 8
  %1467 = getelementptr inbounds i16, i16* %1466, i64 %1465
  br i1 %1165, label %1468, label %1880

1468:                                             ; preds = %1452
  %1469 = load i32, i32* %1415, align 4
  %1470 = zext i32 %1469 to i64
  %1471 = getelementptr inbounds [4 x i16], [4 x i16]* %135, i64 0, i64 %1470
  br i1 %1207, label %1472, label %1628

1472:                                             ; preds = %1468
  %1473 = icmp slt i32 %1457, 17
  br i1 %1473, label %1474, label %1510

1474:                                             ; preds = %1472
  %1475 = sub i32 56, %1457
  br label %1476

1476:                                             ; preds = %1497, %1474
  %1477 = phi i64 [ %1499, %1497 ], [ %1456, %1474 ]
  %1478 = phi i64 [ %1500, %1497 ], [ %1456, %1474 ]
  %1479 = phi i64 [ %1498, %1497 ], [ %1459, %1474 ]
  %1480 = phi i64 [ %1503, %1497 ], [ %1458, %1474 ]
  %1481 = phi i32 [ %1504, %1497 ], [ %1457, %1474 ]
  %1482 = shl i64 %1480, 8
  %1483 = icmp ult i64 %1479, %1478
  %1484 = add i64 %1479, 1
  br i1 %1483, label %1485, label %1497

1485:                                             ; preds = %1476
  %1486 = getelementptr inbounds i8, i8* %0, i64 %1479
  %1487 = load i8, i8* %1486, align 1
  %1488 = icmp eq i8 %1487, -1
  br i1 %1488, label %1489, label %1497

1489:                                             ; preds = %1485
  %1490 = getelementptr inbounds i8, i8* %0, i64 %1484
  %1491 = load i8, i8* %1490, align 1
  %1492 = icmp eq i8 %1491, 0
  %1493 = add i64 %1479, 2
  %1494 = select i1 %1492, i64 %1493, i64 %1484
  %1495 = select i1 %1492, i64 %1477, i64 %1479
  %1496 = select i1 %1492, i64 %1478, i64 %1479
  br label %1497

1497:                                             ; preds = %1489, %1485, %1476
  %1498 = phi i64 [ %1484, %1485 ], [ %1484, %1476 ], [ %1494, %1489 ]
  %1499 = phi i64 [ %1477, %1485 ], [ %1477, %1476 ], [ %1495, %1489 ]
  %1500 = phi i64 [ %1478, %1485 ], [ %1478, %1476 ], [ %1496, %1489 ]
  %1501 = phi i8 [ %1487, %1485 ], [ 0, %1476 ], [ -1, %1489 ]
  %1502 = zext i8 %1501 to i64
  %1503 = or i64 %1482, %1502
  %1504 = add nsw i32 %1481, 8
  %1505 = icmp slt i32 %1504, 57
  br i1 %1505, label %1476, label %1506

1506:                                             ; preds = %1497
  %1507 = and i32 %1475, -8
  %1508 = add nsw i32 %1457, 8
  %1509 = add i32 %1508, %1507
  br label %1510

1510:                                             ; preds = %1506, %1472
  %1511 = phi i64 [ %1459, %1472 ], [ %1498, %1506 ]
  %1512 = phi i64 [ %1458, %1472 ], [ %1503, %1506 ]
  %1513 = phi i64 [ %1456, %1472 ], [ %1499, %1506 ]
  %1514 = phi i32 [ %1457, %1472 ], [ %1509, %1506 ]
  %1515 = add nsw i32 %1514, -8
  %1516 = zext i32 %1515 to i64
  %1517 = lshr i64 %1512, %1516
  %1518 = and i64 %1517, 255
  %1519 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %1423, i64 %1518
  %1520 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %1519, i64 0, i32 0
  %1521 = load i8, i8* %1520, align 2
  %1522 = zext i8 %1521 to i32
  %1523 = add nsw i32 %1522, -8
  %1524 = icmp sgt i32 %1523, 0
  br i1 %1524, label %1525, label %1542

1525:                                             ; preds = %1510
  %1526 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %1423, i64 %1518, i32 1
  %1527 = load i16, i16* %1526, align 2
  %1528 = zext i16 %1527 to i64
  %1529 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %1519, i64 %1528
  %1530 = sub nsw i32 %1515, %1523
  %1531 = zext i32 %1530 to i64
  %1532 = lshr i64 %1512, %1531
  %1533 = shl nsw i32 -1, %1523
  %1534 = xor i32 %1533, -1
  %1535 = trunc i64 %1532 to i32
  %1536 = and i32 %1535, %1534
  %1537 = sext i32 %1536 to i64
  %1538 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %1529, i64 %1537
  %1539 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %1538, i64 0, i32 0
  %1540 = load i8, i8* %1539, align 2
  %1541 = zext i8 %1540 to i32
  br label %1542

1542:                                             ; preds = %1525, %1510
  %1543 = phi i32 [ %1541, %1525 ], [ %1522, %1510 ]
  %1544 = phi i32 [ %1515, %1525 ], [ %1514, %1510 ]
  %1545 = phi %"struct.jxl::jpeg::HuffmanTableEntry"* [ %1538, %1525 ], [ %1519, %1510 ]
  %1546 = sub nsw i32 %1544, %1543
  %1547 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %1545, i64 0, i32 1
  %1548 = load i16, i16* %1547, align 2
  %1549 = zext i16 %1548 to i32
  %1550 = icmp ugt i16 %1548, 11
  br i1 %1550, label %3163, label %1551

1551:                                             ; preds = %1542
  %1552 = icmp eq i16 %1548, 0
  br i1 %1552, label %1613, label %1553

1553:                                             ; preds = %1551
  %1554 = icmp slt i32 %1546, 17
  br i1 %1554, label %1555, label %1593

1555:                                             ; preds = %1553
  %1556 = add nuw nsw i32 %1543, 56
  %1557 = sub i32 %1556, %1544
  br label %1558

1558:                                             ; preds = %1579, %1555
  %1559 = phi i64 [ %1581, %1579 ], [ %1513, %1555 ]
  %1560 = phi i64 [ %1582, %1579 ], [ %1513, %1555 ]
  %1561 = phi i64 [ %1580, %1579 ], [ %1511, %1555 ]
  %1562 = phi i64 [ %1585, %1579 ], [ %1512, %1555 ]
  %1563 = phi i32 [ %1586, %1579 ], [ %1546, %1555 ]
  %1564 = shl i64 %1562, 8
  %1565 = icmp ult i64 %1561, %1560
  %1566 = add i64 %1561, 1
  br i1 %1565, label %1567, label %1579

1567:                                             ; preds = %1558
  %1568 = getelementptr inbounds i8, i8* %0, i64 %1561
  %1569 = load i8, i8* %1568, align 1
  %1570 = icmp eq i8 %1569, -1
  br i1 %1570, label %1571, label %1579

1571:                                             ; preds = %1567
  %1572 = getelementptr inbounds i8, i8* %0, i64 %1566
  %1573 = load i8, i8* %1572, align 1
  %1574 = icmp eq i8 %1573, 0
  %1575 = add i64 %1561, 2
  %1576 = select i1 %1574, i64 %1575, i64 %1566
  %1577 = select i1 %1574, i64 %1559, i64 %1561
  %1578 = select i1 %1574, i64 %1560, i64 %1561
  br label %1579

1579:                                             ; preds = %1571, %1567, %1558
  %1580 = phi i64 [ %1566, %1567 ], [ %1566, %1558 ], [ %1576, %1571 ]
  %1581 = phi i64 [ %1559, %1567 ], [ %1559, %1558 ], [ %1577, %1571 ]
  %1582 = phi i64 [ %1560, %1567 ], [ %1560, %1558 ], [ %1578, %1571 ]
  %1583 = phi i8 [ %1569, %1567 ], [ 0, %1558 ], [ -1, %1571 ]
  %1584 = zext i8 %1583 to i64
  %1585 = or i64 %1564, %1584
  %1586 = add nsw i32 %1563, 8
  %1587 = icmp slt i32 %1586, 57
  br i1 %1587, label %1558, label %1588

1588:                                             ; preds = %1579
  %1589 = and i32 %1557, -8
  %1590 = sub nsw i32 8, %1543
  %1591 = add i32 %1590, %1544
  %1592 = add i32 %1591, %1589
  br label %1593

1593:                                             ; preds = %1588, %1553
  %1594 = phi i64 [ %1511, %1553 ], [ %1580, %1588 ]
  %1595 = phi i64 [ %1512, %1553 ], [ %1585, %1588 ]
  %1596 = phi i64 [ %1513, %1553 ], [ %1581, %1588 ]
  %1597 = phi i32 [ %1546, %1553 ], [ %1592, %1588 ]
  %1598 = sub nsw i32 %1597, %1549
  %1599 = zext i32 %1598 to i64
  %1600 = lshr i64 %1595, %1599
  %1601 = zext i16 %1548 to i64
  %1602 = shl nsw i64 -1, %1601
  %1603 = xor i64 %1602, 4294967295
  %1604 = and i64 %1600, %1603
  %1605 = trunc i64 %1604 to i32
  %1606 = add nsw i32 %1549, -1
  %1607 = shl i32 1, %1606
  %1608 = icmp sgt i32 %1607, %1605
  br i1 %1608, label %1609, label %1613

1609:                                             ; preds = %1593
  %1610 = shl i32 -1, %1549
  %1611 = add i32 %1610, 1
  %1612 = add i32 %1611, %1605
  br label %1613

1613:                                             ; preds = %1609, %1593, %1551
  %1614 = phi i64 [ %1511, %1551 ], [ %1594, %1609 ], [ %1594, %1593 ]
  %1615 = phi i64 [ %1512, %1551 ], [ %1595, %1609 ], [ %1595, %1593 ]
  %1616 = phi i32 [ %1546, %1551 ], [ %1598, %1609 ], [ %1598, %1593 ]
  %1617 = phi i64 [ %1513, %1551 ], [ %1596, %1609 ], [ %1596, %1593 ]
  %1618 = phi i32 [ 0, %1551 ], [ %1612, %1609 ], [ %1605, %1593 ]
  %1619 = load i16, i16* %1471, align 2
  %1620 = sext i16 %1619 to i32
  %1621 = add nsw i32 %1618, %1620
  %1622 = shl i32 %1621, %1154
  %1623 = trunc i32 %1622 to i16
  store i16 %1623, i16* %1467, align 2
  %1624 = add i32 %1622, 32768
  %1625 = icmp ugt i32 %1624, 65535
  br i1 %1625, label %3163, label %1626

1626:                                             ; preds = %1613
  %1627 = trunc i32 %1621 to i16
  store i16 %1627, i16* %1471, align 2
  br label %1628

1628:                                             ; preds = %1626, %1468
  %1629 = phi i64 [ %1614, %1626 ], [ %1459, %1468 ]
  %1630 = phi i64 [ %1615, %1626 ], [ %1458, %1468 ]
  %1631 = phi i32 [ %1616, %1626 ], [ %1457, %1468 ]
  %1632 = phi i64 [ %1617, %1626 ], [ %1456, %1468 ]
  %1633 = phi i32 [ 1, %1626 ], [ %1158, %1468 ]
  %1634 = icmp sgt i32 %1633, %1162
  br i1 %1634, label %2511, label %1635

1635:                                             ; preds = %1628
  %1636 = icmp sgt i32 %1455, 0
  br i1 %1636, label %1637, label %1639

1637:                                             ; preds = %1635
  %1638 = add nsw i32 %1455, -1
  br label %2511

1639:                                             ; preds = %1635, %1869
  %1640 = phi i64 [ %1870, %1869 ], [ %1629, %1635 ]
  %1641 = phi i64 [ %1871, %1869 ], [ %1630, %1635 ]
  %1642 = phi i32 [ %1872, %1869 ], [ %1631, %1635 ]
  %1643 = phi i64 [ %1873, %1869 ], [ %1632, %1635 ]
  %1644 = phi i32 [ %1874, %1869 ], [ 0, %1635 ]
  %1645 = phi i32 [ %1876, %1869 ], [ %1633, %1635 ]
  %1646 = icmp slt i32 %1642, 17
  br i1 %1646, label %1647, label %1683

1647:                                             ; preds = %1639
  %1648 = sub i32 56, %1642
  br label %1649

1649:                                             ; preds = %1670, %1647
  %1650 = phi i64 [ %1672, %1670 ], [ %1643, %1647 ]
  %1651 = phi i64 [ %1673, %1670 ], [ %1643, %1647 ]
  %1652 = phi i64 [ %1671, %1670 ], [ %1640, %1647 ]
  %1653 = phi i64 [ %1676, %1670 ], [ %1641, %1647 ]
  %1654 = phi i32 [ %1677, %1670 ], [ %1642, %1647 ]
  %1655 = shl i64 %1653, 8
  %1656 = icmp ult i64 %1652, %1651
  %1657 = add i64 %1652, 1
  br i1 %1656, label %1658, label %1670

1658:                                             ; preds = %1649
  %1659 = getelementptr inbounds i8, i8* %0, i64 %1652
  %1660 = load i8, i8* %1659, align 1
  %1661 = icmp eq i8 %1660, -1
  br i1 %1661, label %1662, label %1670

1662:                                             ; preds = %1658
  %1663 = getelementptr inbounds i8, i8* %0, i64 %1657
  %1664 = load i8, i8* %1663, align 1
  %1665 = icmp eq i8 %1664, 0
  %1666 = add i64 %1652, 2
  %1667 = select i1 %1665, i64 %1666, i64 %1657
  %1668 = select i1 %1665, i64 %1650, i64 %1652
  %1669 = select i1 %1665, i64 %1651, i64 %1652
  br label %1670

1670:                                             ; preds = %1662, %1658, %1649
  %1671 = phi i64 [ %1657, %1658 ], [ %1657, %1649 ], [ %1667, %1662 ]
  %1672 = phi i64 [ %1650, %1658 ], [ %1650, %1649 ], [ %1668, %1662 ]
  %1673 = phi i64 [ %1651, %1658 ], [ %1651, %1649 ], [ %1669, %1662 ]
  %1674 = phi i8 [ %1660, %1658 ], [ 0, %1649 ], [ -1, %1662 ]
  %1675 = zext i8 %1674 to i64
  %1676 = or i64 %1655, %1675
  %1677 = add nsw i32 %1654, 8
  %1678 = icmp slt i32 %1677, 57
  br i1 %1678, label %1649, label %1679

1679:                                             ; preds = %1670
  %1680 = and i32 %1648, -8
  %1681 = add nsw i32 %1642, 8
  %1682 = add i32 %1681, %1680
  br label %1683

1683:                                             ; preds = %1679, %1639
  %1684 = phi i64 [ %1640, %1639 ], [ %1671, %1679 ]
  %1685 = phi i64 [ %1641, %1639 ], [ %1676, %1679 ]
  %1686 = phi i64 [ %1643, %1639 ], [ %1672, %1679 ]
  %1687 = phi i32 [ %1642, %1639 ], [ %1682, %1679 ]
  %1688 = add nsw i32 %1687, -8
  %1689 = zext i32 %1688 to i64
  %1690 = lshr i64 %1685, %1689
  %1691 = and i64 %1690, 255
  %1692 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %1428, i64 %1691
  %1693 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %1692, i64 0, i32 0
  %1694 = load i8, i8* %1693, align 2
  %1695 = zext i8 %1694 to i32
  %1696 = add nsw i32 %1695, -8
  %1697 = icmp sgt i32 %1696, 0
  br i1 %1697, label %1698, label %1715

1698:                                             ; preds = %1683
  %1699 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %1428, i64 %1691, i32 1
  %1700 = load i16, i16* %1699, align 2
  %1701 = zext i16 %1700 to i64
  %1702 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %1692, i64 %1701
  %1703 = sub nsw i32 %1688, %1696
  %1704 = zext i32 %1703 to i64
  %1705 = lshr i64 %1685, %1704
  %1706 = shl nsw i32 -1, %1696
  %1707 = xor i32 %1706, -1
  %1708 = trunc i64 %1705 to i32
  %1709 = and i32 %1708, %1707
  %1710 = sext i32 %1709 to i64
  %1711 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %1702, i64 %1710
  %1712 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %1711, i64 0, i32 0
  %1713 = load i8, i8* %1712, align 2
  %1714 = zext i8 %1713 to i32
  br label %1715

1715:                                             ; preds = %1698, %1683
  %1716 = phi i32 [ %1714, %1698 ], [ %1695, %1683 ]
  %1717 = phi i32 [ %1688, %1698 ], [ %1687, %1683 ]
  %1718 = phi %"struct.jxl::jpeg::HuffmanTableEntry"* [ %1711, %1698 ], [ %1692, %1683 ]
  %1719 = sub nsw i32 %1717, %1716
  %1720 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %1718, i64 0, i32 1
  %1721 = load i16, i16* %1720, align 2
  %1722 = zext i16 %1721 to i32
  %1723 = icmp ugt i16 %1721, 255
  br i1 %1723, label %3163, label %1724

1724:                                             ; preds = %1715
  %1725 = lshr i32 %1722, 4
  %1726 = and i32 %1722, 15
  %1727 = icmp eq i32 %1726, 0
  br i1 %1727, label %1803, label %1728

1728:                                             ; preds = %1724
  %1729 = add nsw i32 %1725, %1645
  %1730 = icmp sgt i32 %1729, %1162
  br i1 %1730, label %3163, label %1731

1731:                                             ; preds = %1728
  %1732 = add nsw i32 %1726, %1154
  %1733 = icmp sgt i32 %1732, 11
  br i1 %1733, label %3163, label %1734

1734:                                             ; preds = %1731
  %1735 = icmp slt i32 %1719, 17
  br i1 %1735, label %1736, label %1774

1736:                                             ; preds = %1734
  %1737 = add nuw nsw i32 %1716, 56
  %1738 = sub i32 %1737, %1717
  br label %1739

1739:                                             ; preds = %1760, %1736
  %1740 = phi i64 [ %1762, %1760 ], [ %1686, %1736 ]
  %1741 = phi i64 [ %1763, %1760 ], [ %1686, %1736 ]
  %1742 = phi i64 [ %1761, %1760 ], [ %1684, %1736 ]
  %1743 = phi i64 [ %1766, %1760 ], [ %1685, %1736 ]
  %1744 = phi i32 [ %1767, %1760 ], [ %1719, %1736 ]
  %1745 = shl i64 %1743, 8
  %1746 = icmp ult i64 %1742, %1741
  %1747 = add i64 %1742, 1
  br i1 %1746, label %1748, label %1760

1748:                                             ; preds = %1739
  %1749 = getelementptr inbounds i8, i8* %0, i64 %1742
  %1750 = load i8, i8* %1749, align 1
  %1751 = icmp eq i8 %1750, -1
  br i1 %1751, label %1752, label %1760

1752:                                             ; preds = %1748
  %1753 = getelementptr inbounds i8, i8* %0, i64 %1747
  %1754 = load i8, i8* %1753, align 1
  %1755 = icmp eq i8 %1754, 0
  %1756 = add i64 %1742, 2
  %1757 = select i1 %1755, i64 %1756, i64 %1747
  %1758 = select i1 %1755, i64 %1740, i64 %1742
  %1759 = select i1 %1755, i64 %1741, i64 %1742
  br label %1760

1760:                                             ; preds = %1752, %1748, %1739
  %1761 = phi i64 [ %1747, %1748 ], [ %1747, %1739 ], [ %1757, %1752 ]
  %1762 = phi i64 [ %1740, %1748 ], [ %1740, %1739 ], [ %1758, %1752 ]
  %1763 = phi i64 [ %1741, %1748 ], [ %1741, %1739 ], [ %1759, %1752 ]
  %1764 = phi i8 [ %1750, %1748 ], [ 0, %1739 ], [ -1, %1752 ]
  %1765 = zext i8 %1764 to i64
  %1766 = or i64 %1745, %1765
  %1767 = add nsw i32 %1744, 8
  %1768 = icmp slt i32 %1767, 57
  br i1 %1768, label %1739, label %1769

1769:                                             ; preds = %1760
  %1770 = and i32 %1738, -8
  %1771 = sub nsw i32 8, %1716
  %1772 = add i32 %1771, %1717
  %1773 = add i32 %1772, %1770
  br label %1774

1774:                                             ; preds = %1769, %1734
  %1775 = phi i64 [ %1684, %1734 ], [ %1761, %1769 ]
  %1776 = phi i64 [ %1685, %1734 ], [ %1766, %1769 ]
  %1777 = phi i64 [ %1686, %1734 ], [ %1762, %1769 ]
  %1778 = phi i32 [ %1719, %1734 ], [ %1773, %1769 ]
  %1779 = sub nsw i32 %1778, %1726
  %1780 = zext i32 %1779 to i64
  %1781 = lshr i64 %1776, %1780
  %1782 = zext i32 %1726 to i64
  %1783 = shl nsw i64 -1, %1782
  %1784 = xor i64 %1783, 4294967295
  %1785 = and i64 %1781, %1784
  %1786 = trunc i64 %1785 to i32
  %1787 = add nsw i32 %1726, -1
  %1788 = shl i32 1, %1787
  %1789 = icmp sgt i32 %1788, %1786
  br i1 %1789, label %1790, label %1794

1790:                                             ; preds = %1774
  %1791 = shl i32 -1, %1726
  %1792 = add nsw i32 %1791, 1
  %1793 = add nsw i32 %1792, %1786
  br label %1794

1794:                                             ; preds = %1790, %1774
  %1795 = phi i32 [ %1793, %1790 ], [ %1786, %1774 ]
  %1796 = shl i32 %1795, %1154
  %1797 = trunc i32 %1796 to i16
  %1798 = sext i32 %1729 to i64
  %1799 = getelementptr inbounds [80 x i32], [80 x i32]* @_ZN3jxl4jpegL17kJPEGNaturalOrderE, i64 0, i64 %1798
  %1800 = load i32, i32* %1799, align 4
  %1801 = zext i32 %1800 to i64
  %1802 = getelementptr inbounds i16, i16* %1467, i64 %1801
  store i16 %1797, i16* %1802, align 2
  br label %1869

1803:                                             ; preds = %1724
  %1804 = icmp eq i32 %1725, 15
  br i1 %1804, label %1805, label %1808

1805:                                             ; preds = %1803
  %1806 = add nsw i32 %1645, 15
  %1807 = add nsw i32 %1644, 1
  br label %1869

1808:                                             ; preds = %1803
  %1809 = icmp eq i32 %1645, %1633
  %1810 = and i1 %1206, %1809
  %1811 = icmp eq i32 %1455, 0
  %1812 = and i1 %1811, %1810
  %1813 = zext i1 %1812 to i8
  %1814 = shl i32 1, %1725
  %1815 = icmp ugt i16 %1721, 15
  br i1 %1815, label %1816, label %2363

1816:                                             ; preds = %1808
  br i1 %1206, label %1817, label %3163

1817:                                             ; preds = %1816
  %1818 = icmp slt i32 %1719, 17
  br i1 %1818, label %1819, label %1855

1819:                                             ; preds = %1817
  %1820 = sub i32 56, %1719
  br label %1821

1821:                                             ; preds = %1842, %1819
  %1822 = phi i64 [ %1844, %1842 ], [ %1686, %1819 ]
  %1823 = phi i64 [ %1845, %1842 ], [ %1686, %1819 ]
  %1824 = phi i64 [ %1843, %1842 ], [ %1684, %1819 ]
  %1825 = phi i64 [ %1848, %1842 ], [ %1685, %1819 ]
  %1826 = phi i32 [ %1849, %1842 ], [ %1719, %1819 ]
  %1827 = shl i64 %1825, 8
  %1828 = icmp ult i64 %1824, %1823
  %1829 = add i64 %1824, 1
  br i1 %1828, label %1830, label %1842

1830:                                             ; preds = %1821
  %1831 = getelementptr inbounds i8, i8* %0, i64 %1824
  %1832 = load i8, i8* %1831, align 1
  %1833 = icmp eq i8 %1832, -1
  br i1 %1833, label %1834, label %1842

1834:                                             ; preds = %1830
  %1835 = getelementptr inbounds i8, i8* %0, i64 %1829
  %1836 = load i8, i8* %1835, align 1
  %1837 = icmp eq i8 %1836, 0
  %1838 = add i64 %1824, 2
  %1839 = select i1 %1837, i64 %1838, i64 %1829
  %1840 = select i1 %1837, i64 %1822, i64 %1824
  %1841 = select i1 %1837, i64 %1823, i64 %1824
  br label %1842

1842:                                             ; preds = %1834, %1830, %1821
  %1843 = phi i64 [ %1829, %1830 ], [ %1829, %1821 ], [ %1839, %1834 ]
  %1844 = phi i64 [ %1822, %1830 ], [ %1822, %1821 ], [ %1840, %1834 ]
  %1845 = phi i64 [ %1823, %1830 ], [ %1823, %1821 ], [ %1841, %1834 ]
  %1846 = phi i8 [ %1832, %1830 ], [ 0, %1821 ], [ -1, %1834 ]
  %1847 = zext i8 %1846 to i64
  %1848 = or i64 %1827, %1847
  %1849 = add nsw i32 %1826, 8
  %1850 = icmp slt i32 %1849, 57
  br i1 %1850, label %1821, label %1851

1851:                                             ; preds = %1842
  %1852 = and i32 %1820, -8
  %1853 = add i32 %1719, 8
  %1854 = add i32 %1853, %1852
  br label %1855

1855:                                             ; preds = %1851, %1817
  %1856 = phi i64 [ %1684, %1817 ], [ %1843, %1851 ]
  %1857 = phi i64 [ %1685, %1817 ], [ %1848, %1851 ]
  %1858 = phi i64 [ %1686, %1817 ], [ %1844, %1851 ]
  %1859 = phi i32 [ %1719, %1817 ], [ %1854, %1851 ]
  %1860 = sub nsw i32 %1859, %1725
  %1861 = zext i32 %1860 to i64
  %1862 = lshr i64 %1857, %1861
  %1863 = zext i32 %1725 to i64
  %1864 = shl nsw i64 -1, %1863
  %1865 = xor i64 %1864, 4294967295
  %1866 = and i64 %1862, %1865
  %1867 = trunc i64 %1866 to i32
  %1868 = add nsw i32 %1814, %1867
  br label %2363

1869:                                             ; preds = %1805, %1794
  %1870 = phi i64 [ %1684, %1805 ], [ %1775, %1794 ]
  %1871 = phi i64 [ %1685, %1805 ], [ %1776, %1794 ]
  %1872 = phi i32 [ %1719, %1805 ], [ %1779, %1794 ]
  %1873 = phi i64 [ %1686, %1805 ], [ %1777, %1794 ]
  %1874 = phi i32 [ %1807, %1805 ], [ 0, %1794 ]
  %1875 = phi i32 [ %1806, %1805 ], [ %1729, %1794 ]
  %1876 = add nsw i32 %1875, 1
  %1877 = icmp slt i32 %1875, %1162
  br i1 %1877, label %1639, label %1878

1878:                                             ; preds = %1869
  %1879 = add nsw i32 %1455, -1
  br label %2433

1880:                                             ; preds = %1452
  br i1 %1207, label %1881, label %1933

1881:                                             ; preds = %1880
  %1882 = icmp slt i32 %1457, 17
  br i1 %1882, label %1883, label %1919

1883:                                             ; preds = %1881
  %1884 = sub i32 56, %1457
  br label %1885

1885:                                             ; preds = %1906, %1883
  %1886 = phi i64 [ %1908, %1906 ], [ %1456, %1883 ]
  %1887 = phi i64 [ %1909, %1906 ], [ %1456, %1883 ]
  %1888 = phi i64 [ %1907, %1906 ], [ %1459, %1883 ]
  %1889 = phi i64 [ %1912, %1906 ], [ %1458, %1883 ]
  %1890 = phi i32 [ %1913, %1906 ], [ %1457, %1883 ]
  %1891 = shl i64 %1889, 8
  %1892 = icmp ult i64 %1888, %1887
  %1893 = add i64 %1888, 1
  br i1 %1892, label %1894, label %1906

1894:                                             ; preds = %1885
  %1895 = getelementptr inbounds i8, i8* %0, i64 %1888
  %1896 = load i8, i8* %1895, align 1
  %1897 = icmp eq i8 %1896, -1
  br i1 %1897, label %1898, label %1906

1898:                                             ; preds = %1894
  %1899 = getelementptr inbounds i8, i8* %0, i64 %1893
  %1900 = load i8, i8* %1899, align 1
  %1901 = icmp eq i8 %1900, 0
  %1902 = add i64 %1888, 2
  %1903 = select i1 %1901, i64 %1902, i64 %1893
  %1904 = select i1 %1901, i64 %1886, i64 %1888
  %1905 = select i1 %1901, i64 %1887, i64 %1888
  br label %1906

1906:                                             ; preds = %1898, %1894, %1885
  %1907 = phi i64 [ %1893, %1894 ], [ %1893, %1885 ], [ %1903, %1898 ]
  %1908 = phi i64 [ %1886, %1894 ], [ %1886, %1885 ], [ %1904, %1898 ]
  %1909 = phi i64 [ %1887, %1894 ], [ %1887, %1885 ], [ %1905, %1898 ]
  %1910 = phi i8 [ %1896, %1894 ], [ 0, %1885 ], [ -1, %1898 ]
  %1911 = zext i8 %1910 to i64
  %1912 = or i64 %1891, %1911
  %1913 = add nsw i32 %1890, 8
  %1914 = icmp slt i32 %1913, 57
  br i1 %1914, label %1885, label %1915

1915:                                             ; preds = %1906
  %1916 = and i32 %1884, -8
  %1917 = add nsw i32 %1457, 8
  %1918 = add i32 %1917, %1916
  br label %1919

1919:                                             ; preds = %1915, %1881
  %1920 = phi i64 [ %1459, %1881 ], [ %1907, %1915 ]
  %1921 = phi i64 [ %1458, %1881 ], [ %1912, %1915 ]
  %1922 = phi i64 [ %1456, %1881 ], [ %1908, %1915 ]
  %1923 = phi i32 [ %1457, %1881 ], [ %1918, %1915 ]
  %1924 = add nsw i32 %1923, -1
  %1925 = zext i32 %1924 to i64
  %1926 = lshr i64 %1921, %1925
  %1927 = trunc i64 %1926 to i32
  %1928 = and i32 %1927, 1
  %1929 = load i16, i16* %1467, align 2
  %1930 = shl i32 %1928, %1154
  %1931 = trunc i32 %1930 to i16
  %1932 = or i16 %1929, %1931
  store i16 %1932, i16* %1467, align 2
  br label %1933

1933:                                             ; preds = %1919, %1880
  %1934 = phi i64 [ %1920, %1919 ], [ %1459, %1880 ]
  %1935 = phi i64 [ %1921, %1919 ], [ %1458, %1880 ]
  %1936 = phi i32 [ %1924, %1919 ], [ %1457, %1880 ]
  %1937 = phi i64 [ %1922, %1919 ], [ %1456, %1880 ]
  %1938 = phi i32 [ 1, %1919 ], [ %1158, %1880 ]
  %1939 = icmp sgt i32 %1938, %1162
  br i1 %1939, label %2511, label %1940

1940:                                             ; preds = %1933
  %1941 = icmp slt i32 %1455, 1
  br i1 %1941, label %1942, label %2271

1942:                                             ; preds = %1940, %2257
  %1943 = phi i64 [ %2242, %2257 ], [ %1934, %1940 ]
  %1944 = phi i64 [ %2243, %2257 ], [ %1935, %1940 ]
  %1945 = phi i32 [ %2244, %2257 ], [ %1936, %1940 ]
  %1946 = phi i64 [ %2245, %2257 ], [ %1937, %1940 ]
  %1947 = phi i8 [ %2150, %2257 ], [ 0, %1940 ]
  %1948 = phi i32 [ %2258, %2257 ], [ %1938, %1940 ]
  %1949 = icmp slt i32 %1945, 17
  br i1 %1949, label %1950, label %1986

1950:                                             ; preds = %1942
  %1951 = sub i32 56, %1945
  br label %1952

1952:                                             ; preds = %1973, %1950
  %1953 = phi i64 [ %1975, %1973 ], [ %1946, %1950 ]
  %1954 = phi i64 [ %1976, %1973 ], [ %1946, %1950 ]
  %1955 = phi i64 [ %1974, %1973 ], [ %1943, %1950 ]
  %1956 = phi i64 [ %1979, %1973 ], [ %1944, %1950 ]
  %1957 = phi i32 [ %1980, %1973 ], [ %1945, %1950 ]
  %1958 = shl i64 %1956, 8
  %1959 = icmp ult i64 %1955, %1954
  %1960 = add i64 %1955, 1
  br i1 %1959, label %1961, label %1973

1961:                                             ; preds = %1952
  %1962 = getelementptr inbounds i8, i8* %0, i64 %1955
  %1963 = load i8, i8* %1962, align 1
  %1964 = icmp eq i8 %1963, -1
  br i1 %1964, label %1965, label %1973

1965:                                             ; preds = %1961
  %1966 = getelementptr inbounds i8, i8* %0, i64 %1960
  %1967 = load i8, i8* %1966, align 1
  %1968 = icmp eq i8 %1967, 0
  %1969 = add i64 %1955, 2
  %1970 = select i1 %1968, i64 %1969, i64 %1960
  %1971 = select i1 %1968, i64 %1953, i64 %1955
  %1972 = select i1 %1968, i64 %1954, i64 %1955
  br label %1973

1973:                                             ; preds = %1965, %1961, %1952
  %1974 = phi i64 [ %1960, %1961 ], [ %1960, %1952 ], [ %1970, %1965 ]
  %1975 = phi i64 [ %1953, %1961 ], [ %1953, %1952 ], [ %1971, %1965 ]
  %1976 = phi i64 [ %1954, %1961 ], [ %1954, %1952 ], [ %1972, %1965 ]
  %1977 = phi i8 [ %1963, %1961 ], [ 0, %1952 ], [ -1, %1965 ]
  %1978 = zext i8 %1977 to i64
  %1979 = or i64 %1958, %1978
  %1980 = add nsw i32 %1957, 8
  %1981 = icmp slt i32 %1980, 57
  br i1 %1981, label %1952, label %1982

1982:                                             ; preds = %1973
  %1983 = and i32 %1951, -8
  %1984 = add nsw i32 %1945, 8
  %1985 = add i32 %1984, %1983
  br label %1986

1986:                                             ; preds = %1982, %1942
  %1987 = phi i64 [ %1943, %1942 ], [ %1974, %1982 ]
  %1988 = phi i64 [ %1944, %1942 ], [ %1979, %1982 ]
  %1989 = phi i64 [ %1946, %1942 ], [ %1975, %1982 ]
  %1990 = phi i32 [ %1945, %1942 ], [ %1985, %1982 ]
  %1991 = add nsw i32 %1990, -8
  %1992 = zext i32 %1991 to i64
  %1993 = lshr i64 %1988, %1992
  %1994 = and i64 %1993, 255
  %1995 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %1428, i64 %1994
  %1996 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %1995, i64 0, i32 0
  %1997 = load i8, i8* %1996, align 2
  %1998 = zext i8 %1997 to i32
  %1999 = add nsw i32 %1998, -8
  %2000 = icmp sgt i32 %1999, 0
  br i1 %2000, label %2001, label %2018

2001:                                             ; preds = %1986
  %2002 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %1428, i64 %1994, i32 1
  %2003 = load i16, i16* %2002, align 2
  %2004 = zext i16 %2003 to i64
  %2005 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %1995, i64 %2004
  %2006 = sub nsw i32 %1991, %1999
  %2007 = zext i32 %2006 to i64
  %2008 = lshr i64 %1988, %2007
  %2009 = shl nsw i32 -1, %1999
  %2010 = xor i32 %2009, -1
  %2011 = trunc i64 %2008 to i32
  %2012 = and i32 %2011, %2010
  %2013 = sext i32 %2012 to i64
  %2014 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2005, i64 %2013
  %2015 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2014, i64 0, i32 0
  %2016 = load i8, i8* %2015, align 2
  %2017 = zext i8 %2016 to i32
  br label %2018

2018:                                             ; preds = %2001, %1986
  %2019 = phi i32 [ %2017, %2001 ], [ %1998, %1986 ]
  %2020 = phi i32 [ %1991, %2001 ], [ %1990, %1986 ]
  %2021 = phi %"struct.jxl::jpeg::HuffmanTableEntry"* [ %2014, %2001 ], [ %1995, %1986 ]
  %2022 = sub nsw i32 %2020, %2019
  %2023 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2021, i64 0, i32 1
  %2024 = load i16, i16* %2023, align 2
  %2025 = zext i16 %2024 to i32
  %2026 = icmp ugt i16 %2024, 255
  br i1 %2026, label %3163, label %2027

2027:                                             ; preds = %2018
  %2028 = lshr i32 %2025, 4
  %2029 = and i32 %2025, 15
  switch i32 %2029, label %3163 [
    i32 0, label %2081
    i32 1, label %2030
  ]

2030:                                             ; preds = %2027
  %2031 = icmp slt i32 %2022, 17
  br i1 %2031, label %2032, label %2070

2032:                                             ; preds = %2030
  %2033 = add nuw nsw i32 %2019, 56
  %2034 = sub i32 %2033, %2020
  br label %2035

2035:                                             ; preds = %2056, %2032
  %2036 = phi i64 [ %2058, %2056 ], [ %1989, %2032 ]
  %2037 = phi i64 [ %2059, %2056 ], [ %1989, %2032 ]
  %2038 = phi i64 [ %2057, %2056 ], [ %1987, %2032 ]
  %2039 = phi i64 [ %2062, %2056 ], [ %1988, %2032 ]
  %2040 = phi i32 [ %2063, %2056 ], [ %2022, %2032 ]
  %2041 = shl i64 %2039, 8
  %2042 = icmp ult i64 %2038, %2037
  %2043 = add i64 %2038, 1
  br i1 %2042, label %2044, label %2056

2044:                                             ; preds = %2035
  %2045 = getelementptr inbounds i8, i8* %0, i64 %2038
  %2046 = load i8, i8* %2045, align 1
  %2047 = icmp eq i8 %2046, -1
  br i1 %2047, label %2048, label %2056

2048:                                             ; preds = %2044
  %2049 = getelementptr inbounds i8, i8* %0, i64 %2043
  %2050 = load i8, i8* %2049, align 1
  %2051 = icmp eq i8 %2050, 0
  %2052 = add i64 %2038, 2
  %2053 = select i1 %2051, i64 %2052, i64 %2043
  %2054 = select i1 %2051, i64 %2036, i64 %2038
  %2055 = select i1 %2051, i64 %2037, i64 %2038
  br label %2056

2056:                                             ; preds = %2048, %2044, %2035
  %2057 = phi i64 [ %2043, %2044 ], [ %2043, %2035 ], [ %2053, %2048 ]
  %2058 = phi i64 [ %2036, %2044 ], [ %2036, %2035 ], [ %2054, %2048 ]
  %2059 = phi i64 [ %2037, %2044 ], [ %2037, %2035 ], [ %2055, %2048 ]
  %2060 = phi i8 [ %2046, %2044 ], [ 0, %2035 ], [ -1, %2048 ]
  %2061 = zext i8 %2060 to i64
  %2062 = or i64 %2041, %2061
  %2063 = add nsw i32 %2040, 8
  %2064 = icmp slt i32 %2063, 57
  br i1 %2064, label %2035, label %2065

2065:                                             ; preds = %2056
  %2066 = and i32 %2034, -8
  %2067 = sub nsw i32 8, %2019
  %2068 = add i32 %2067, %2020
  %2069 = add i32 %2068, %2066
  br label %2070

2070:                                             ; preds = %2065, %2030
  %2071 = phi i64 [ %1987, %2030 ], [ %2057, %2065 ]
  %2072 = phi i64 [ %1988, %2030 ], [ %2062, %2065 ]
  %2073 = phi i64 [ %1989, %2030 ], [ %2058, %2065 ]
  %2074 = phi i32 [ %2022, %2030 ], [ %2069, %2065 ]
  %2075 = add nsw i32 %2074, -1
  %2076 = zext i32 %2075 to i64
  %2077 = shl i64 1, %2076
  %2078 = and i64 %2077, %2072
  %2079 = icmp eq i64 %2078, 0
  %2080 = select i1 %2079, i32 %1208, i32 %1167
  br label %2144

2081:                                             ; preds = %2027
  %2082 = icmp eq i32 %2028, 15
  br i1 %2082, label %2144, label %2083

2083:                                             ; preds = %2081
  %2084 = icmp eq i32 %1948, %1938
  %2085 = and i1 %1206, %2084
  %2086 = icmp eq i32 %1455, 0
  %2087 = and i1 %2086, %2085
  %2088 = zext i1 %2087 to i8
  %2089 = shl i32 1, %2028
  %2090 = icmp ugt i16 %2024, 15
  br i1 %2090, label %2091, label %2260

2091:                                             ; preds = %2083
  br i1 %1206, label %2092, label %3163

2092:                                             ; preds = %2091
  %2093 = icmp slt i32 %2022, 17
  br i1 %2093, label %2094, label %2130

2094:                                             ; preds = %2092
  %2095 = sub i32 56, %2022
  br label %2096

2096:                                             ; preds = %2117, %2094
  %2097 = phi i64 [ %2119, %2117 ], [ %1989, %2094 ]
  %2098 = phi i64 [ %2120, %2117 ], [ %1989, %2094 ]
  %2099 = phi i64 [ %2118, %2117 ], [ %1987, %2094 ]
  %2100 = phi i64 [ %2123, %2117 ], [ %1988, %2094 ]
  %2101 = phi i32 [ %2124, %2117 ], [ %2022, %2094 ]
  %2102 = shl i64 %2100, 8
  %2103 = icmp ult i64 %2099, %2098
  %2104 = add i64 %2099, 1
  br i1 %2103, label %2105, label %2117

2105:                                             ; preds = %2096
  %2106 = getelementptr inbounds i8, i8* %0, i64 %2099
  %2107 = load i8, i8* %2106, align 1
  %2108 = icmp eq i8 %2107, -1
  br i1 %2108, label %2109, label %2117

2109:                                             ; preds = %2105
  %2110 = getelementptr inbounds i8, i8* %0, i64 %2104
  %2111 = load i8, i8* %2110, align 1
  %2112 = icmp eq i8 %2111, 0
  %2113 = add i64 %2099, 2
  %2114 = select i1 %2112, i64 %2113, i64 %2104
  %2115 = select i1 %2112, i64 %2097, i64 %2099
  %2116 = select i1 %2112, i64 %2098, i64 %2099
  br label %2117

2117:                                             ; preds = %2109, %2105, %2096
  %2118 = phi i64 [ %2104, %2105 ], [ %2104, %2096 ], [ %2114, %2109 ]
  %2119 = phi i64 [ %2097, %2105 ], [ %2097, %2096 ], [ %2115, %2109 ]
  %2120 = phi i64 [ %2098, %2105 ], [ %2098, %2096 ], [ %2116, %2109 ]
  %2121 = phi i8 [ %2107, %2105 ], [ 0, %2096 ], [ -1, %2109 ]
  %2122 = zext i8 %2121 to i64
  %2123 = or i64 %2102, %2122
  %2124 = add nsw i32 %2101, 8
  %2125 = icmp slt i32 %2124, 57
  br i1 %2125, label %2096, label %2126

2126:                                             ; preds = %2117
  %2127 = and i32 %2095, -8
  %2128 = add i32 %2022, 8
  %2129 = add i32 %2128, %2127
  br label %2130

2130:                                             ; preds = %2126, %2092
  %2131 = phi i64 [ %1987, %2092 ], [ %2118, %2126 ]
  %2132 = phi i64 [ %1988, %2092 ], [ %2123, %2126 ]
  %2133 = phi i64 [ %1989, %2092 ], [ %2119, %2126 ]
  %2134 = phi i32 [ %2022, %2092 ], [ %2129, %2126 ]
  %2135 = sub nsw i32 %2134, %2028
  %2136 = zext i32 %2135 to i64
  %2137 = lshr i64 %2132, %2136
  %2138 = zext i32 %2028 to i64
  %2139 = shl nsw i64 -1, %2138
  %2140 = xor i64 %2139, 4294967295
  %2141 = and i64 %2137, %2140
  %2142 = trunc i64 %2141 to i32
  %2143 = add nsw i32 %2089, %2142
  br label %2260

2144:                                             ; preds = %2081, %2070
  %2145 = phi i64 [ %2071, %2070 ], [ %1987, %2081 ]
  %2146 = phi i64 [ %2072, %2070 ], [ %1988, %2081 ]
  %2147 = phi i32 [ %2075, %2070 ], [ %2022, %2081 ]
  %2148 = phi i64 [ %2073, %2070 ], [ %1989, %2081 ]
  %2149 = phi i32 [ %2080, %2070 ], [ 0, %2081 ]
  %2150 = phi i8 [ 0, %2070 ], [ 1, %2081 ]
  %2151 = sext i32 %1948 to i64
  br label %2152

2152:                                             ; preds = %2231, %2144
  %2153 = phi i64 [ %2145, %2144 ], [ %2232, %2231 ]
  %2154 = phi i64 [ %2146, %2144 ], [ %2233, %2231 ]
  %2155 = phi i32 [ %2147, %2144 ], [ %2234, %2231 ]
  %2156 = phi i64 [ %2148, %2144 ], [ %2235, %2231 ]
  %2157 = phi i64 [ %2151, %2144 ], [ %2237, %2231 ]
  %2158 = phi i32 [ %2028, %2144 ], [ %2236, %2231 ]
  %2159 = getelementptr inbounds [80 x i32], [80 x i32]* @_ZN3jxl4jpegL17kJPEGNaturalOrderE, i64 0, i64 %2157
  %2160 = load i32, i32* %2159, align 4
  %2161 = zext i32 %2160 to i64
  %2162 = getelementptr inbounds i16, i16* %1467, i64 %2161
  %2163 = load i16, i16* %2162, align 2
  %2164 = sext i16 %2163 to i32
  %2165 = icmp eq i16 %2163, 0
  br i1 %2165, label %2225, label %2166

2166:                                             ; preds = %2152
  %2167 = icmp slt i32 %2155, 17
  br i1 %2167, label %2168, label %2204

2168:                                             ; preds = %2166
  %2169 = sub i32 56, %2155
  br label %2170

2170:                                             ; preds = %2191, %2168
  %2171 = phi i64 [ %2193, %2191 ], [ %2156, %2168 ]
  %2172 = phi i64 [ %2194, %2191 ], [ %2156, %2168 ]
  %2173 = phi i64 [ %2192, %2191 ], [ %2153, %2168 ]
  %2174 = phi i64 [ %2197, %2191 ], [ %2154, %2168 ]
  %2175 = phi i32 [ %2198, %2191 ], [ %2155, %2168 ]
  %2176 = shl i64 %2174, 8
  %2177 = icmp ult i64 %2173, %2172
  %2178 = add i64 %2173, 1
  br i1 %2177, label %2179, label %2191

2179:                                             ; preds = %2170
  %2180 = getelementptr inbounds i8, i8* %0, i64 %2173
  %2181 = load i8, i8* %2180, align 1
  %2182 = icmp eq i8 %2181, -1
  br i1 %2182, label %2183, label %2191

2183:                                             ; preds = %2179
  %2184 = getelementptr inbounds i8, i8* %0, i64 %2178
  %2185 = load i8, i8* %2184, align 1
  %2186 = icmp eq i8 %2185, 0
  %2187 = add i64 %2173, 2
  %2188 = select i1 %2186, i64 %2187, i64 %2178
  %2189 = select i1 %2186, i64 %2171, i64 %2173
  %2190 = select i1 %2186, i64 %2172, i64 %2173
  br label %2191

2191:                                             ; preds = %2183, %2179, %2170
  %2192 = phi i64 [ %2178, %2179 ], [ %2178, %2170 ], [ %2188, %2183 ]
  %2193 = phi i64 [ %2171, %2179 ], [ %2171, %2170 ], [ %2189, %2183 ]
  %2194 = phi i64 [ %2172, %2179 ], [ %2172, %2170 ], [ %2190, %2183 ]
  %2195 = phi i8 [ %2181, %2179 ], [ 0, %2170 ], [ -1, %2183 ]
  %2196 = zext i8 %2195 to i64
  %2197 = or i64 %2176, %2196
  %2198 = add nsw i32 %2175, 8
  %2199 = icmp slt i32 %2198, 57
  br i1 %2199, label %2170, label %2200

2200:                                             ; preds = %2191
  %2201 = and i32 %2169, -8
  %2202 = add nsw i32 %2155, 8
  %2203 = add i32 %2202, %2201
  br label %2204

2204:                                             ; preds = %2200, %2166
  %2205 = phi i64 [ %2153, %2166 ], [ %2192, %2200 ]
  %2206 = phi i64 [ %2154, %2166 ], [ %2197, %2200 ]
  %2207 = phi i64 [ %2156, %2166 ], [ %2193, %2200 ]
  %2208 = phi i32 [ %2155, %2166 ], [ %2203, %2200 ]
  %2209 = add nsw i32 %2208, -1
  %2210 = zext i32 %2209 to i64
  %2211 = shl i64 1, %2210
  %2212 = and i64 %2211, %2206
  %2213 = icmp ne i64 %2212, 0
  %2214 = and i32 %1167, %2164
  %2215 = icmp eq i32 %2214, 0
  %2216 = and i1 %2215, %2213
  br i1 %2216, label %2217, label %2223

2217:                                             ; preds = %2204
  %2218 = icmp sgt i16 %2163, -1
  br i1 %2218, label %2219, label %2221

2219:                                             ; preds = %2217
  %2220 = add i16 %2163, %1209
  br label %2223

2221:                                             ; preds = %2217
  %2222 = sub i16 %2163, %1209
  br label %2223

2223:                                             ; preds = %2221, %2219, %2204
  %2224 = phi i16 [ %2220, %2219 ], [ %2222, %2221 ], [ %2163, %2204 ]
  store i16 %2224, i16* %2162, align 2
  br label %2231

2225:                                             ; preds = %2152
  %2226 = add nsw i32 %2158, -1
  %2227 = icmp slt i32 %2158, 1
  br i1 %2227, label %2228, label %2231

2228:                                             ; preds = %2225
  %2229 = trunc i64 %2157 to i32
  %2230 = icmp slt i32 %1162, %2229
  br label %2241

2231:                                             ; preds = %2225, %2223
  %2232 = phi i64 [ %2153, %2225 ], [ %2205, %2223 ]
  %2233 = phi i64 [ %2154, %2225 ], [ %2206, %2223 ]
  %2234 = phi i32 [ %2155, %2225 ], [ %2209, %2223 ]
  %2235 = phi i64 [ %2156, %2225 ], [ %2207, %2223 ]
  %2236 = phi i32 [ %2226, %2225 ], [ %2158, %2223 ]
  %2237 = add nsw i64 %2157, 1
  %2238 = icmp slt i64 %2157, %1210
  br i1 %2238, label %2152, label %2239

2239:                                             ; preds = %2231
  %2240 = trunc i64 %2237 to i32
  br label %2241

2241:                                             ; preds = %2239, %2228
  %2242 = phi i64 [ %2153, %2228 ], [ %2232, %2239 ]
  %2243 = phi i64 [ %2154, %2228 ], [ %2233, %2239 ]
  %2244 = phi i32 [ %2155, %2228 ], [ %2234, %2239 ]
  %2245 = phi i64 [ %2156, %2228 ], [ %2235, %2239 ]
  %2246 = phi i1 [ %2230, %2228 ], [ true, %2239 ]
  %2247 = phi i32 [ %2229, %2228 ], [ %2240, %2239 ]
  %2248 = icmp eq i32 %2149, 0
  br i1 %2248, label %2257, label %2249

2249:                                             ; preds = %2241
  br i1 %2246, label %3163, label %2250

2250:                                             ; preds = %2249
  %2251 = trunc i32 %2149 to i16
  %2252 = sext i32 %2247 to i64
  %2253 = getelementptr inbounds [80 x i32], [80 x i32]* @_ZN3jxl4jpegL17kJPEGNaturalOrderE, i64 0, i64 %2252
  %2254 = load i32, i32* %2253, align 4
  %2255 = zext i32 %2254 to i64
  %2256 = getelementptr inbounds i16, i16* %1467, i64 %2255
  store i16 %2251, i16* %2256, align 2
  br label %2257

2257:                                             ; preds = %2250, %2241
  %2258 = add nsw i32 %2247, 1
  %2259 = icmp slt i32 %2247, %1162
  br i1 %2259, label %1942, label %2260

2260:                                             ; preds = %2257, %2130, %2083
  %2261 = phi i64 [ %2131, %2130 ], [ %1987, %2083 ], [ %2242, %2257 ]
  %2262 = phi i64 [ %2132, %2130 ], [ %1988, %2083 ], [ %2243, %2257 ]
  %2263 = phi i32 [ %2135, %2130 ], [ %2022, %2083 ], [ %2244, %2257 ]
  %2264 = phi i64 [ %2133, %2130 ], [ %1989, %2083 ], [ %2245, %2257 ]
  %2265 = phi i32 [ %2143, %2130 ], [ %2089, %2083 ], [ %1455, %2257 ]
  %2266 = phi i8 [ %2088, %2130 ], [ %2088, %2083 ], [ 0, %2257 ]
  %2267 = phi i32 [ %1948, %2130 ], [ %1948, %2083 ], [ %2258, %2257 ]
  %2268 = phi i8 [ %1947, %2130 ], [ %1947, %2083 ], [ %2150, %2257 ]
  %2269 = and i8 %2268, 1
  %2270 = icmp eq i8 %2269, 0
  br i1 %2270, label %2271, label %3163

2271:                                             ; preds = %2260, %1940
  %2272 = phi i64 [ %1934, %1940 ], [ %2261, %2260 ]
  %2273 = phi i64 [ %1935, %1940 ], [ %2262, %2260 ]
  %2274 = phi i32 [ %1936, %1940 ], [ %2263, %2260 ]
  %2275 = phi i64 [ %1937, %1940 ], [ %2264, %2260 ]
  %2276 = phi i32 [ %1455, %1940 ], [ %2265, %2260 ]
  %2277 = phi i8 [ 0, %1940 ], [ %2266, %2260 ]
  %2278 = phi i32 [ %1938, %1940 ], [ %2267, %2260 ]
  %2279 = icmp slt i32 %2276, 1
  %2280 = icmp sgt i32 %2278, %1162
  %2281 = or i1 %2279, %2280
  br i1 %2281, label %2363, label %2282

2282:                                             ; preds = %2271
  %2283 = sext i32 %2278 to i64
  br label %2284

2284:                                             ; preds = %2356, %2282
  %2285 = phi i64 [ %2272, %2282 ], [ %2357, %2356 ]
  %2286 = phi i64 [ %2273, %2282 ], [ %2358, %2356 ]
  %2287 = phi i32 [ %2274, %2282 ], [ %2359, %2356 ]
  %2288 = phi i64 [ %2275, %2282 ], [ %2360, %2356 ]
  %2289 = phi i64 [ %2283, %2282 ], [ %2361, %2356 ]
  %2290 = getelementptr inbounds [80 x i32], [80 x i32]* @_ZN3jxl4jpegL17kJPEGNaturalOrderE, i64 0, i64 %2289
  %2291 = load i32, i32* %2290, align 4
  %2292 = zext i32 %2291 to i64
  %2293 = getelementptr inbounds i16, i16* %1467, i64 %2292
  %2294 = load i16, i16* %2293, align 2
  %2295 = sext i16 %2294 to i32
  %2296 = icmp eq i16 %2294, 0
  br i1 %2296, label %2356, label %2297

2297:                                             ; preds = %2284
  %2298 = icmp slt i32 %2287, 17
  br i1 %2298, label %2299, label %2335

2299:                                             ; preds = %2297
  %2300 = sub i32 56, %2287
  br label %2301

2301:                                             ; preds = %2322, %2299
  %2302 = phi i64 [ %2324, %2322 ], [ %2288, %2299 ]
  %2303 = phi i64 [ %2325, %2322 ], [ %2288, %2299 ]
  %2304 = phi i64 [ %2323, %2322 ], [ %2285, %2299 ]
  %2305 = phi i64 [ %2328, %2322 ], [ %2286, %2299 ]
  %2306 = phi i32 [ %2329, %2322 ], [ %2287, %2299 ]
  %2307 = shl i64 %2305, 8
  %2308 = icmp ult i64 %2304, %2303
  %2309 = add i64 %2304, 1
  br i1 %2308, label %2310, label %2322

2310:                                             ; preds = %2301
  %2311 = getelementptr inbounds i8, i8* %0, i64 %2304
  %2312 = load i8, i8* %2311, align 1
  %2313 = icmp eq i8 %2312, -1
  br i1 %2313, label %2314, label %2322

2314:                                             ; preds = %2310
  %2315 = getelementptr inbounds i8, i8* %0, i64 %2309
  %2316 = load i8, i8* %2315, align 1
  %2317 = icmp eq i8 %2316, 0
  %2318 = add i64 %2304, 2
  %2319 = select i1 %2317, i64 %2318, i64 %2309
  %2320 = select i1 %2317, i64 %2302, i64 %2304
  %2321 = select i1 %2317, i64 %2303, i64 %2304
  br label %2322

2322:                                             ; preds = %2314, %2310, %2301
  %2323 = phi i64 [ %2309, %2310 ], [ %2309, %2301 ], [ %2319, %2314 ]
  %2324 = phi i64 [ %2302, %2310 ], [ %2302, %2301 ], [ %2320, %2314 ]
  %2325 = phi i64 [ %2303, %2310 ], [ %2303, %2301 ], [ %2321, %2314 ]
  %2326 = phi i8 [ %2312, %2310 ], [ 0, %2301 ], [ -1, %2314 ]
  %2327 = zext i8 %2326 to i64
  %2328 = or i64 %2307, %2327
  %2329 = add nsw i32 %2306, 8
  %2330 = icmp slt i32 %2329, 57
  br i1 %2330, label %2301, label %2331

2331:                                             ; preds = %2322
  %2332 = and i32 %2300, -8
  %2333 = add nsw i32 %2287, 8
  %2334 = add i32 %2333, %2332
  br label %2335

2335:                                             ; preds = %2331, %2297
  %2336 = phi i64 [ %2285, %2297 ], [ %2323, %2331 ]
  %2337 = phi i64 [ %2286, %2297 ], [ %2328, %2331 ]
  %2338 = phi i64 [ %2288, %2297 ], [ %2324, %2331 ]
  %2339 = phi i32 [ %2287, %2297 ], [ %2334, %2331 ]
  %2340 = add nsw i32 %2339, -1
  %2341 = zext i32 %2340 to i64
  %2342 = shl i64 1, %2341
  %2343 = and i64 %2342, %2337
  %2344 = icmp ne i64 %2343, 0
  %2345 = and i32 %1167, %2295
  %2346 = icmp eq i32 %2345, 0
  %2347 = and i1 %2346, %2344
  br i1 %2347, label %2348, label %2354

2348:                                             ; preds = %2335
  %2349 = icmp sgt i16 %2294, -1
  br i1 %2349, label %2350, label %2352

2350:                                             ; preds = %2348
  %2351 = add i16 %2294, %1209
  br label %2354

2352:                                             ; preds = %2348
  %2353 = sub i16 %2294, %1209
  br label %2354

2354:                                             ; preds = %2352, %2350, %2335
  %2355 = phi i16 [ %2351, %2350 ], [ %2353, %2352 ], [ %2294, %2335 ]
  store i16 %2355, i16* %2293, align 2
  br label %2356

2356:                                             ; preds = %2354, %2284
  %2357 = phi i64 [ %2285, %2284 ], [ %2336, %2354 ]
  %2358 = phi i64 [ %2286, %2284 ], [ %2337, %2354 ]
  %2359 = phi i32 [ %2287, %2284 ], [ %2340, %2354 ]
  %2360 = phi i64 [ %2288, %2284 ], [ %2338, %2354 ]
  %2361 = add nsw i64 %2289, 1
  %2362 = icmp slt i64 %2289, %1210
  br i1 %2362, label %2284, label %2363

2363:                                             ; preds = %2356, %2271, %1855, %1808
  %2364 = phi i64 [ %1856, %1855 ], [ %1684, %1808 ], [ %2272, %2271 ], [ %2357, %2356 ]
  %2365 = phi i64 [ %1857, %1855 ], [ %1685, %1808 ], [ %2273, %2271 ], [ %2358, %2356 ]
  %2366 = phi i32 [ %1860, %1855 ], [ %1719, %1808 ], [ %2274, %2271 ], [ %2359, %2356 ]
  %2367 = phi i64 [ %1858, %1855 ], [ %1686, %1808 ], [ %2275, %2271 ], [ %2360, %2356 ]
  %2368 = phi i32 [ %1868, %1855 ], [ %1814, %1808 ], [ %2276, %2271 ], [ %2276, %2356 ]
  %2369 = phi i8 [ %1813, %1855 ], [ %1813, %1808 ], [ %2277, %2271 ], [ %2277, %2356 ]
  %2370 = phi i32 [ %1644, %1855 ], [ %1644, %1808 ], [ 0, %2271 ], [ 0, %2356 ]
  %2371 = add nsw i32 %2368, -1
  %2372 = icmp eq i8 %2369, 0
  br i1 %2372, label %2433, label %2373

2373:                                             ; preds = %2363
  %2374 = load i32*, i32** %1212, align 8
  %2375 = load i32*, i32** %1213, align 8
  %2376 = icmp ult i32* %2374, %2375
  %2377 = ptrtoint i32* %2375 to i64
  br i1 %2376, label %2378, label %2381

2378:                                             ; preds = %2373
  store i32 %1454, i32* %2374, align 4
  %2379 = getelementptr inbounds i32, i32* %2374, i64 1
  %2380 = ptrtoint i32* %2379 to i64
  store i64 %2380, i64* %1214, align 8
  br label %2433

2381:                                             ; preds = %2373
  %2382 = ptrtoint i32* %2374 to i64
  %2383 = load i64, i64* %1215, align 8
  %2384 = sub i64 %2382, %2383
  %2385 = ashr exact i64 %2384, 2
  %2386 = add nsw i64 %2385, 1
  %2387 = icmp ugt i64 %2386, 4611686018427387903
  br i1 %2387, label %2388, label %2390

2388:                                             ; preds = %2381
  %2389 = bitcast %"class.std::__1::vector.48"* %1211 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %2389) #10
  unreachable

2390:                                             ; preds = %2381
  %2391 = sub i64 %2377, %2383
  %2392 = ashr exact i64 %2391, 2
  %2393 = icmp ult i64 %2392, 2305843009213693951
  br i1 %2393, label %2394, label %2402

2394:                                             ; preds = %2390
  %2395 = ashr exact i64 %2391, 1
  %2396 = icmp ult i64 %2395, %2386
  %2397 = select i1 %2396, i64 %2386, i64 %2395
  %2398 = icmp eq i64 %2397, 0
  br i1 %2398, label %2407, label %2399

2399:                                             ; preds = %2394
  %2400 = icmp ugt i64 %2397, 4611686018427387903
  br i1 %2400, label %2401, label %2402

2401:                                             ; preds = %2399
  call void @abort() #10
  unreachable

2402:                                             ; preds = %2399, %2390
  %2403 = phi i64 [ %2397, %2399 ], [ 4611686018427387903, %2390 ]
  %2404 = shl i64 %2403, 2
  %2405 = call i8* @_Znwm(i64 %2404) #8
  %2406 = bitcast i8* %2405 to i32*
  br label %2407

2407:                                             ; preds = %2402, %2394
  %2408 = phi i64 [ %2403, %2402 ], [ 0, %2394 ]
  %2409 = phi i32* [ %2406, %2402 ], [ null, %2394 ]
  %2410 = getelementptr inbounds i32, i32* %2409, i64 %2385
  %2411 = getelementptr inbounds i32, i32* %2409, i64 %2408
  %2412 = ptrtoint i32* %2411 to i64
  store i32 %1454, i32* %2410, align 4
  %2413 = getelementptr inbounds i32, i32* %2410, i64 1
  %2414 = ptrtoint i32* %2413 to i64
  %2415 = load i32*, i32** %1217, align 8
  %2416 = load i64, i64* %1214, align 8
  %2417 = ptrtoint i32* %2415 to i64
  %2418 = sub i64 %2416, %2417
  %2419 = ashr exact i64 %2418, 2
  %2420 = sub nsw i64 0, %2419
  %2421 = getelementptr inbounds i32, i32* %2410, i64 %2420
  %2422 = ptrtoint i32* %2421 to i64
  %2423 = icmp sgt i64 %2418, 0
  br i1 %2423, label %2424, label %2428

2424:                                             ; preds = %2407
  %2425 = bitcast i32* %2421 to i8*
  %2426 = bitcast i32* %2415 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2425, i8* align 4 %2426, i64 %2418, i1 false) #9
  %2427 = load i32*, i32** %1217, align 8
  br label %2428

2428:                                             ; preds = %2424, %2407
  %2429 = phi i32* [ %2415, %2407 ], [ %2427, %2424 ]
  store i64 %2422, i64* %1215, align 8
  store i64 %2414, i64* %1214, align 8
  store i64 %2412, i64* %1216, align 8
  %2430 = icmp eq i32* %2429, null
  br i1 %2430, label %2433, label %2431

2431:                                             ; preds = %2428
  %2432 = bitcast i32* %2429 to i8*
  call void @_ZdlPv(i8* %2432) #8
  br label %2433

2433:                                             ; preds = %2431, %2428, %2378, %2363, %1878
  %2434 = phi i32 [ %1879, %1878 ], [ %2371, %2431 ], [ %2371, %2428 ], [ %2371, %2378 ], [ %2371, %2363 ]
  %2435 = phi i32 [ %1874, %1878 ], [ %2370, %2431 ], [ %2370, %2428 ], [ %2370, %2378 ], [ %2370, %2363 ]
  %2436 = phi i64 [ %1873, %1878 ], [ %2367, %2431 ], [ %2367, %2428 ], [ %2367, %2378 ], [ %2367, %2363 ]
  %2437 = phi i32 [ %1872, %1878 ], [ %2366, %2431 ], [ %2366, %2428 ], [ %2366, %2378 ], [ %2366, %2363 ]
  %2438 = phi i64 [ %1871, %1878 ], [ %2365, %2431 ], [ %2365, %2428 ], [ %2365, %2378 ], [ %2365, %2363 ]
  %2439 = phi i64 [ %1870, %1878 ], [ %2364, %2431 ], [ %2364, %2428 ], [ %2364, %2378 ], [ %2364, %2363 ]
  %2440 = icmp sgt i32 %2435, 0
  br i1 %2440, label %2441, label %2511

2441:                                             ; preds = %2433
  %2442 = load %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %1219, align 8
  %2443 = load %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %1220, align 8
  %2444 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %2442, %2443
  %2445 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %2443 to i64
  br i1 %2444, label %2454, label %2446

2446:                                             ; preds = %2441
  %2447 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %2442 to i64*
  %2448 = zext i32 %2435 to i64
  %2449 = shl nuw i64 %2448, 32
  %2450 = zext i32 %1454 to i64
  %2451 = or i64 %2449, %2450
  store i64 %2451, i64* %2447, align 4
  %2452 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %2442, i64 1
  %2453 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %2452 to i64
  store i64 %2453, i64* %1221, align 8
  br label %2511

2454:                                             ; preds = %2441
  %2455 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %2442 to i64
  %2456 = load i64, i64* %1222, align 8
  %2457 = sub i64 %2455, %2456
  %2458 = ashr exact i64 %2457, 3
  %2459 = add nsw i64 %2458, 1
  %2460 = icmp ugt i64 %2459, 2305843009213693951
  br i1 %2460, label %2461, label %2463

2461:                                             ; preds = %2454
  %2462 = bitcast %"class.std::__1::vector.55"* %1218 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %2462) #10
  unreachable

2463:                                             ; preds = %2454
  %2464 = sub i64 %2445, %2456
  %2465 = ashr exact i64 %2464, 3
  %2466 = icmp ult i64 %2465, 1152921504606846975
  br i1 %2466, label %2467, label %2475

2467:                                             ; preds = %2463
  %2468 = ashr exact i64 %2464, 2
  %2469 = icmp ult i64 %2468, %2459
  %2470 = select i1 %2469, i64 %2459, i64 %2468
  %2471 = icmp eq i64 %2470, 0
  br i1 %2471, label %2480, label %2472

2472:                                             ; preds = %2467
  %2473 = icmp ugt i64 %2470, 2305843009213693951
  br i1 %2473, label %2474, label %2475

2474:                                             ; preds = %2472
  call void @abort() #10
  unreachable

2475:                                             ; preds = %2472, %2463
  %2476 = phi i64 [ %2470, %2472 ], [ 2305843009213693951, %2463 ]
  %2477 = shl i64 %2476, 3
  %2478 = call i8* @_Znwm(i64 %2477) #8
  %2479 = bitcast i8* %2478 to %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*
  br label %2480

2480:                                             ; preds = %2475, %2467
  %2481 = phi i64 [ %2476, %2475 ], [ 0, %2467 ]
  %2482 = phi %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* [ %2479, %2475 ], [ null, %2467 ]
  %2483 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %2482, i64 %2458
  %2484 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %2482, i64 %2481
  %2485 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %2484 to i64
  %2486 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %2483 to i64*
  %2487 = zext i32 %2435 to i64
  %2488 = shl nuw i64 %2487, 32
  %2489 = zext i32 %1454 to i64
  %2490 = or i64 %2488, %2489
  store i64 %2490, i64* %2486, align 4
  %2491 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %2483, i64 1
  %2492 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %2491 to i64
  %2493 = load %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %1224, align 8
  %2494 = load i64, i64* %1221, align 8
  %2495 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %2493 to i64
  %2496 = sub i64 %2494, %2495
  %2497 = ashr exact i64 %2496, 3
  %2498 = sub nsw i64 0, %2497
  %2499 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %2483, i64 %2498
  %2500 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %2499 to i64
  %2501 = icmp sgt i64 %2496, 0
  br i1 %2501, label %2502, label %2506

2502:                                             ; preds = %2480
  %2503 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %2499 to i8*
  %2504 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %2493 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2503, i8* align 4 %2504, i64 %2496, i1 false) #9
  %2505 = load %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %1224, align 8
  br label %2506

2506:                                             ; preds = %2502, %2480
  %2507 = phi %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* [ %2493, %2480 ], [ %2505, %2502 ]
  store i64 %2500, i64* %1222, align 8
  store i64 %2492, i64* %1221, align 8
  store i64 %2485, i64* %1223, align 8
  %2508 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %2507, null
  br i1 %2508, label %2511, label %2509

2509:                                             ; preds = %2506
  %2510 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %2507 to i8*
  call void @_ZdlPv(i8* %2510) #8
  br label %2511

2511:                                             ; preds = %2509, %2506, %2446, %2433, %1933, %1637, %1628
  %2512 = phi i64 [ %2439, %2433 ], [ %2439, %2446 ], [ %2439, %2506 ], [ %2439, %2509 ], [ %1934, %1933 ], [ %1629, %1637 ], [ %1629, %1628 ]
  %2513 = phi i64 [ %2438, %2433 ], [ %2438, %2446 ], [ %2438, %2506 ], [ %2438, %2509 ], [ %1935, %1933 ], [ %1630, %1637 ], [ %1630, %1628 ]
  %2514 = phi i32 [ %2437, %2433 ], [ %2437, %2446 ], [ %2437, %2506 ], [ %2437, %2509 ], [ %1936, %1933 ], [ %1631, %1637 ], [ %1631, %1628 ]
  %2515 = phi i64 [ %2436, %2433 ], [ %2436, %2446 ], [ %2436, %2506 ], [ %2436, %2509 ], [ %1937, %1933 ], [ %1632, %1637 ], [ %1632, %1628 ]
  %2516 = phi i32 [ %2434, %2433 ], [ %2434, %2446 ], [ %2434, %2506 ], [ %2434, %2509 ], [ %1455, %1933 ], [ %1638, %1637 ], [ %1455, %1628 ]
  %2517 = add nsw i32 %1454, 1
  %2518 = add nuw nsw i32 %1453, 1
  %2519 = icmp eq i32 %2518, %1434
  br i1 %2519, label %2520, label %1452

2520:                                             ; preds = %2511, %1442
  %2521 = phi i64 [ %1449, %1442 ], [ %2512, %2511 ]
  %2522 = phi i64 [ %1448, %1442 ], [ %2513, %2511 ]
  %2523 = phi i32 [ %1447, %1442 ], [ %2514, %2511 ]
  %2524 = phi i64 [ %1446, %1442 ], [ %2515, %2511 ]
  %2525 = phi i32 [ %1445, %1442 ], [ %2516, %2511 ]
  %2526 = phi i32 [ %1444, %1442 ], [ %2517, %2511 ]
  %2527 = add nuw nsw i32 %1443, 1
  %2528 = icmp eq i32 %2527, %1431
  br i1 %2528, label %2529, label %1442

2529:                                             ; preds = %2520
  %2530 = load i32, i32* %935, align 8
  br label %2531

2531:                                             ; preds = %2529, %1406
  %2532 = phi i32 [ %1407, %1406 ], [ %2530, %2529 ]
  %2533 = phi i64 [ %1414, %1406 ], [ %2521, %2529 ]
  %2534 = phi i64 [ %1413, %1406 ], [ %2522, %2529 ]
  %2535 = phi i32 [ %1412, %1406 ], [ %2523, %2529 ]
  %2536 = phi i64 [ %1411, %1406 ], [ %2524, %2529 ]
  %2537 = phi i32 [ %1410, %1406 ], [ %2525, %2529 ]
  %2538 = phi i32 [ %1409, %1406 ], [ %2526, %2529 ]
  %2539 = add nuw nsw i64 %1408, 1
  %2540 = zext i32 %2532 to i64
  %2541 = icmp ult i64 %2539, %2540
  br i1 %2541, label %1406, label %2542

2542:                                             ; preds = %2531, %1395
  %2543 = phi i32 [ %1396, %1395 ], [ %2532, %2531 ]
  %2544 = phi i32 [ 0, %1395 ], [ %2532, %2531 ]
  %2545 = phi i64 [ %1398, %1395 ], [ %2533, %2531 ]
  %2546 = phi i64 [ %1399, %1395 ], [ %2534, %2531 ]
  %2547 = phi i32 [ %1400, %1395 ], [ %2535, %2531 ]
  %2548 = phi i64 [ %1401, %1395 ], [ %2536, %2531 ]
  %2549 = phi i32 [ %1403, %1395 ], [ %2537, %2531 ]
  %2550 = phi i32 [ %1242, %1395 ], [ %2538, %2531 ]
  %2551 = add nuw nsw i32 %1240, 1
  %2552 = icmp eq i32 %2551, %981
  br i1 %2552, label %2553, label %1237

2553:                                             ; preds = %2542, %1225
  %2554 = phi i32 [ %1226, %1225 ], [ %2543, %2542 ]
  %2555 = phi i32 [ %1227, %1225 ], [ %2544, %2542 ]
  %2556 = phi i64 [ %1236, %1225 ], [ %2545, %2542 ]
  %2557 = phi i64 [ %1235, %1225 ], [ %2546, %2542 ]
  %2558 = phi i32 [ %1234, %1225 ], [ %2547, %2542 ]
  %2559 = phi i64 [ %1233, %1225 ], [ %2548, %2542 ]
  %2560 = phi i32 [ %1232, %1225 ], [ %1402, %2542 ]
  %2561 = phi i32 [ %1231, %1225 ], [ %2549, %2542 ]
  %2562 = phi i32 [ %1230, %1225 ], [ %2550, %2542 ]
  %2563 = phi i32 [ %1229, %1225 ], [ %1404, %2542 ]
  %2564 = add nuw nsw i32 %1228, 1
  %2565 = icmp eq i32 %2564, %984
  br i1 %2565, label %2566, label %1225

2566:                                             ; preds = %2553
  %2567 = icmp sgt i32 %2561, 0
  br i1 %2567, label %3163, label %2568

2568:                                             ; preds = %2566
  %2569 = and i32 %2558, 7
  %2570 = icmp eq i32 %2569, 0
  br i1 %2570, label %2638, label %2571

2571:                                             ; preds = %2568
  %2572 = zext i32 %2569 to i64
  %2573 = shl nsw i64 -1, %2572
  %2574 = xor i64 %2573, -1
  %2575 = sub nsw i32 %2558, %2569
  %2576 = zext i32 %2575 to i64
  %2577 = lshr i64 %2557, %2576
  %2578 = and i64 %2577, %2574
  %2579 = icmp eq i64 %2578, %2574
  br i1 %2579, label %2581, label %2580

2580:                                             ; preds = %2571
  store i8 1, i8* %169, align 4
  br label %2581

2581:                                             ; preds = %2580, %2571
  br label %2582

2582:                                             ; preds = %2581, %2636
  %2583 = phi i64 [ %2584, %2636 ], [ %2572, %2581 ]
  %2584 = add nsw i64 %2583, -1
  %2585 = lshr i64 %2578, %2584
  %2586 = trunc i64 %2585 to i8
  %2587 = and i8 %2586, 1
  %2588 = load i8*, i8** %80, align 8
  %2589 = load i8*, i8** %170, align 8
  %2590 = icmp ult i8* %2588, %2589
  %2591 = ptrtoint i8* %2589 to i64
  br i1 %2590, label %2592, label %2595

2592:                                             ; preds = %2582
  store i8 %2587, i8* %2588, align 1
  %2593 = getelementptr inbounds i8, i8* %2588, i64 1
  %2594 = ptrtoint i8* %2593 to i64
  store i64 %2594, i64* %81, align 8
  br label %2636

2595:                                             ; preds = %2582
  %2596 = ptrtoint i8* %2588 to i64
  %2597 = load i64, i64* %83, align 8
  %2598 = sub i64 %2596, %2597
  %2599 = add i64 %2598, 1
  %2600 = icmp slt i64 %2599, 0
  br i1 %2600, label %2601, label %2603

2601:                                             ; preds = %2595
  %2602 = bitcast %"class.std::__1::vector.0"* %79 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %2602) #10
  unreachable

2603:                                             ; preds = %2595
  %2604 = sub i64 %2591, %2597
  %2605 = icmp ult i64 %2604, 4611686018427387903
  br i1 %2605, label %2606, label %2611

2606:                                             ; preds = %2603
  %2607 = shl i64 %2604, 1
  %2608 = icmp ult i64 %2607, %2599
  %2609 = select i1 %2608, i64 %2599, i64 %2607
  %2610 = icmp eq i64 %2609, 0
  br i1 %2610, label %2614, label %2611

2611:                                             ; preds = %2606, %2603
  %2612 = phi i64 [ %2609, %2606 ], [ 9223372036854775807, %2603 ]
  %2613 = call i8* @_Znwm(i64 %2612) #8
  br label %2614

2614:                                             ; preds = %2611, %2606
  %2615 = phi i64 [ %2612, %2611 ], [ 0, %2606 ]
  %2616 = phi i8* [ %2613, %2611 ], [ null, %2606 ]
  %2617 = getelementptr inbounds i8, i8* %2616, i64 %2598
  %2618 = getelementptr inbounds i8, i8* %2616, i64 %2615
  %2619 = ptrtoint i8* %2618 to i64
  store i8 %2587, i8* %2617, align 1
  %2620 = getelementptr inbounds i8, i8* %2617, i64 1
  %2621 = ptrtoint i8* %2620 to i64
  %2622 = load i8*, i8** %172, align 8
  %2623 = load i64, i64* %81, align 8
  %2624 = ptrtoint i8* %2622 to i64
  %2625 = sub i64 %2623, %2624
  %2626 = sub i64 0, %2625
  %2627 = getelementptr inbounds i8, i8* %2617, i64 %2626
  %2628 = ptrtoint i8* %2627 to i64
  %2629 = icmp sgt i64 %2625, 0
  br i1 %2629, label %2630, label %2632

2630:                                             ; preds = %2614
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2627, i8* align 1 %2622, i64 %2625, i1 false) #9
  %2631 = load i8*, i8** %172, align 8
  br label %2632

2632:                                             ; preds = %2630, %2614
  %2633 = phi i8* [ %2622, %2614 ], [ %2631, %2630 ]
  store i64 %2628, i64* %83, align 8
  store i64 %2621, i64* %81, align 8
  store i64 %2619, i64* %171, align 8
  %2634 = icmp eq i8* %2633, null
  br i1 %2634, label %2636, label %2635

2635:                                             ; preds = %2632
  call void @_ZdlPv(i8* nonnull %2633) #8
  br label %2636

2636:                                             ; preds = %2635, %2632, %2592
  %2637 = icmp sgt i64 %2584, 0
  br i1 %2637, label %2582, label %2638

2638:                                             ; preds = %2636, %2568
  %2639 = icmp sgt i32 %2558, 7
  br i1 %2639, label %2640, label %2664

2640:                                             ; preds = %2638, %1202
  %2641 = phi i64 [ %2559, %2638 ], [ %1147, %1202 ]
  %2642 = phi i32 [ %2558, %2638 ], [ 64, %1202 ]
  %2643 = phi i64 [ %2556, %2638 ], [ %1146, %1202 ]
  %2644 = lshr i32 %2642, 3
  br label %2645

2645:                                             ; preds = %2661, %2640
  %2646 = phi i64 [ %2643, %2640 ], [ %2662, %2661 ]
  %2647 = phi i32 [ %2644, %2640 ], [ %2648, %2661 ]
  %2648 = add nsw i32 %2647, -1
  %2649 = add i64 %2646, -1
  %2650 = icmp ult i64 %2649, %2641
  br i1 %2650, label %2651, label %2661

2651:                                             ; preds = %2645
  %2652 = getelementptr inbounds i8, i8* %0, i64 %2649
  %2653 = load i8, i8* %2652, align 1
  %2654 = icmp eq i8 %2653, 0
  br i1 %2654, label %2655, label %2661

2655:                                             ; preds = %2651
  %2656 = add i64 %2646, -2
  %2657 = getelementptr inbounds i8, i8* %0, i64 %2656
  %2658 = load i8, i8* %2657, align 1
  %2659 = icmp eq i8 %2658, -1
  %2660 = select i1 %2659, i64 %2656, i64 %2649
  br label %2661

2661:                                             ; preds = %2655, %2651, %2645
  %2662 = phi i64 [ %2649, %2651 ], [ %2649, %2645 ], [ %2660, %2655 ]
  %2663 = icmp sgt i32 %2648, 0
  br i1 %2663, label %2645, label %2664

2664:                                             ; preds = %2661, %2638
  %2665 = phi i64 [ %2559, %2638 ], [ %2641, %2661 ]
  %2666 = phi i64 [ %2556, %2638 ], [ %2662, %2661 ]
  %2667 = icmp ugt i64 %2666, %2665
  br i1 %2667, label %3163, label %2668

2668:                                             ; preds = %2664
  %2669 = icmp ugt i64 %2666, %1
  br i1 %2669, label %3163, label %3165

2670:                                             ; preds = %1377
  %2671 = getelementptr inbounds i8, i8* %0, i64 %1379
  %2672 = load i8, i8* %2671, align 1
  %2673 = icmp eq i8 %2672, -1
  br i1 %2673, label %2674, label %2681

2674:                                             ; preds = %2670
  %2675 = getelementptr inbounds i8, i8* %0, i64 %1384
  %2676 = load i8, i8* %2675, align 1
  %2677 = icmp eq i8 %2676, 0
  %2678 = add i64 %1379, 2
  %2679 = select i1 %2677, i64 %2678, i64 %1384
  %2680 = select i1 %2677, i64 %1378, i64 %1379
  br label %2681

2681:                                             ; preds = %2674, %2670, %1377
  %2682 = phi i64 [ %1378, %2670 ], [ %1378, %1377 ], [ %2680, %2674 ]
  %2683 = phi i64 [ %1384, %2670 ], [ %1384, %1377 ], [ %2679, %2674 ]
  %2684 = phi i8 [ %2672, %2670 ], [ 0, %1377 ], [ -1, %2674 ]
  %2685 = zext i8 %2684 to i64
  %2686 = or i64 %1382, %2685
  %2687 = shl nuw nsw i64 %2686, 8
  %2688 = icmp ult i64 %2683, %2682
  %2689 = add i64 %2683, 1
  br i1 %2688, label %2690, label %2701

2690:                                             ; preds = %2681
  %2691 = getelementptr inbounds i8, i8* %0, i64 %2683
  %2692 = load i8, i8* %2691, align 1
  %2693 = icmp eq i8 %2692, -1
  br i1 %2693, label %2694, label %2701

2694:                                             ; preds = %2690
  %2695 = getelementptr inbounds i8, i8* %0, i64 %2689
  %2696 = load i8, i8* %2695, align 1
  %2697 = icmp eq i8 %2696, 0
  %2698 = add i64 %2683, 2
  %2699 = select i1 %2697, i64 %2698, i64 %2689
  %2700 = select i1 %2697, i64 %2682, i64 %2683
  br label %2701

2701:                                             ; preds = %2694, %2690, %2681
  %2702 = phi i64 [ %2682, %2690 ], [ %2682, %2681 ], [ %2700, %2694 ]
  %2703 = phi i64 [ %2689, %2690 ], [ %2689, %2681 ], [ %2699, %2694 ]
  %2704 = phi i8 [ %2692, %2690 ], [ 0, %2681 ], [ -1, %2694 ]
  %2705 = zext i8 %2704 to i64
  %2706 = or i64 %2687, %2705
  %2707 = shl nuw nsw i64 %2706, 8
  %2708 = icmp ult i64 %2703, %2702
  %2709 = add i64 %2703, 1
  br i1 %2708, label %2710, label %2722

2710:                                             ; preds = %2701
  %2711 = getelementptr inbounds i8, i8* %0, i64 %2703
  %2712 = load i8, i8* %2711, align 1
  %2713 = icmp eq i8 %2712, -1
  br i1 %2713, label %2714, label %2722

2714:                                             ; preds = %2710
  %2715 = getelementptr inbounds i8, i8* %0, i64 %2709
  %2716 = load i8, i8* %2715, align 1
  %2717 = icmp eq i8 %2716, 0
  %2718 = add i64 %2703, 2
  %2719 = select i1 %2717, i64 %2718, i64 %2709
  %2720 = select i1 %2717, i64 %2702, i64 %2703
  %2721 = select i1 %2717, i64 %2702, i64 %2703
  br label %2722

2722:                                             ; preds = %2714, %2710, %2701
  %2723 = phi i64 [ %2702, %2710 ], [ %2702, %2701 ], [ %2720, %2714 ]
  %2724 = phi i64 [ %2702, %2710 ], [ %2702, %2701 ], [ %2721, %2714 ]
  %2725 = phi i64 [ %2709, %2710 ], [ %2709, %2701 ], [ %2719, %2714 ]
  %2726 = phi i8 [ %2712, %2710 ], [ 0, %2701 ], [ -1, %2714 ]
  %2727 = zext i8 %2726 to i64
  %2728 = or i64 %2707, %2727
  %2729 = shl i64 %2728, 8
  %2730 = icmp ult i64 %2725, %2724
  %2731 = add i64 %2725, 1
  br i1 %2730, label %2732, label %2744

2732:                                             ; preds = %2722
  %2733 = getelementptr inbounds i8, i8* %0, i64 %2725
  %2734 = load i8, i8* %2733, align 1
  %2735 = icmp eq i8 %2734, -1
  br i1 %2735, label %2736, label %2744

2736:                                             ; preds = %2732
  %2737 = getelementptr inbounds i8, i8* %0, i64 %2731
  %2738 = load i8, i8* %2737, align 1
  %2739 = icmp eq i8 %2738, 0
  %2740 = add i64 %2725, 2
  %2741 = select i1 %2739, i64 %2740, i64 %2731
  %2742 = select i1 %2739, i64 %2723, i64 %2725
  %2743 = select i1 %2739, i64 %2724, i64 %2725
  br label %2744

2744:                                             ; preds = %2736, %2732, %2722
  %2745 = phi i64 [ %2723, %2732 ], [ %2723, %2722 ], [ %2742, %2736 ]
  %2746 = phi i64 [ %2724, %2732 ], [ %2724, %2722 ], [ %2743, %2736 ]
  %2747 = phi i64 [ %2731, %2732 ], [ %2731, %2722 ], [ %2741, %2736 ]
  %2748 = phi i8 [ %2734, %2732 ], [ 0, %2722 ], [ -1, %2736 ]
  %2749 = zext i8 %2748 to i64
  %2750 = or i64 %2729, %2749
  %2751 = shl i64 %2750, 8
  %2752 = icmp ult i64 %2747, %2746
  %2753 = add i64 %2747, 1
  br i1 %2752, label %2754, label %2766

2754:                                             ; preds = %2744
  %2755 = getelementptr inbounds i8, i8* %0, i64 %2747
  %2756 = load i8, i8* %2755, align 1
  %2757 = icmp eq i8 %2756, -1
  br i1 %2757, label %2758, label %2766

2758:                                             ; preds = %2754
  %2759 = getelementptr inbounds i8, i8* %0, i64 %2753
  %2760 = load i8, i8* %2759, align 1
  %2761 = icmp eq i8 %2760, 0
  %2762 = add i64 %2747, 2
  %2763 = select i1 %2761, i64 %2762, i64 %2753
  %2764 = select i1 %2761, i64 %2745, i64 %2747
  %2765 = select i1 %2761, i64 %2746, i64 %2747
  br label %2766

2766:                                             ; preds = %2758, %2754, %2744
  %2767 = phi i64 [ %2745, %2754 ], [ %2745, %2744 ], [ %2764, %2758 ]
  %2768 = phi i64 [ %2746, %2754 ], [ %2746, %2744 ], [ %2765, %2758 ]
  %2769 = phi i64 [ %2753, %2754 ], [ %2753, %2744 ], [ %2763, %2758 ]
  %2770 = phi i8 [ %2756, %2754 ], [ 0, %2744 ], [ -1, %2758 ]
  %2771 = zext i8 %2770 to i64
  %2772 = or i64 %2751, %2771
  %2773 = shl i64 %2772, 8
  %2774 = icmp ult i64 %2769, %2768
  %2775 = add i64 %2769, 1
  br i1 %2774, label %2776, label %2788

2776:                                             ; preds = %2766
  %2777 = getelementptr inbounds i8, i8* %0, i64 %2769
  %2778 = load i8, i8* %2777, align 1
  %2779 = icmp eq i8 %2778, -1
  br i1 %2779, label %2780, label %2788

2780:                                             ; preds = %2776
  %2781 = getelementptr inbounds i8, i8* %0, i64 %2775
  %2782 = load i8, i8* %2781, align 1
  %2783 = icmp eq i8 %2782, 0
  %2784 = add i64 %2769, 2
  %2785 = select i1 %2783, i64 %2784, i64 %2775
  %2786 = select i1 %2783, i64 %2767, i64 %2769
  %2787 = select i1 %2783, i64 %2768, i64 %2769
  br label %2788

2788:                                             ; preds = %2780, %2776, %2766
  %2789 = phi i64 [ %2767, %2776 ], [ %2767, %2766 ], [ %2786, %2780 ]
  %2790 = phi i64 [ %2768, %2776 ], [ %2768, %2766 ], [ %2787, %2780 ]
  %2791 = phi i64 [ %2775, %2776 ], [ %2775, %2766 ], [ %2785, %2780 ]
  %2792 = phi i8 [ %2778, %2776 ], [ 0, %2766 ], [ -1, %2780 ]
  %2793 = zext i8 %2792 to i64
  %2794 = or i64 %2773, %2793
  %2795 = shl i64 %2794, 8
  %2796 = icmp ult i64 %2791, %2790
  %2797 = add i64 %2791, 1
  br i1 %2796, label %2798, label %2809

2798:                                             ; preds = %2788
  %2799 = getelementptr inbounds i8, i8* %0, i64 %2791
  %2800 = load i8, i8* %2799, align 1
  %2801 = icmp eq i8 %2800, -1
  br i1 %2801, label %2802, label %2809

2802:                                             ; preds = %2798
  %2803 = getelementptr inbounds i8, i8* %0, i64 %2797
  %2804 = load i8, i8* %2803, align 1
  %2805 = icmp eq i8 %2804, 0
  %2806 = add i64 %2791, 2
  %2807 = select i1 %2805, i64 %2806, i64 %2797
  %2808 = select i1 %2805, i64 %2789, i64 %2791
  br label %2809

2809:                                             ; preds = %2802, %2798, %2788
  %2810 = phi i64 [ %2797, %2798 ], [ %2797, %2788 ], [ %2807, %2802 ]
  %2811 = phi i64 [ %2789, %2798 ], [ %2789, %2788 ], [ %2808, %2802 ]
  %2812 = phi i8 [ %2800, %2798 ], [ 0, %2788 ], [ -1, %2802 ]
  %2813 = zext i8 %2812 to i64
  %2814 = or i64 %2795, %2813
  %2815 = add nsw i32 %1244, 1
  %2816 = and i32 %2815, 7
  %2817 = load i32, i32* %122, align 8
  store i64 0, i64* %9, align 8
  %2818 = icmp sgt i32 %1243, 0
  br i1 %2818, label %3163, label %1385

2819:                                             ; preds = %299
  %2820 = add i64 %291, 4
  %2821 = icmp ugt i64 %2820, %1
  br i1 %2821, label %2822, label %2823

2822:                                             ; preds = %2819
  store i32 3, i32* %144, align 8
  br label %3323

2823:                                             ; preds = %2819
  %2824 = getelementptr inbounds i8, i8* %0, i64 %292
  %2825 = load i8, i8* %2824, align 1
  %2826 = zext i8 %2825 to i32
  %2827 = shl nuw nsw i32 %2826, 8
  %2828 = add i64 %291, 3
  %2829 = getelementptr inbounds i8, i8* %0, i64 %2828
  %2830 = load i8, i8* %2829, align 1
  %2831 = zext i8 %2830 to i32
  %2832 = or i32 %2827, %2831
  %2833 = icmp eq i32 %2832, 2
  br i1 %2833, label %2838, label %2834

2834:                                             ; preds = %2823
  %2835 = zext i32 %2832 to i64
  %2836 = add i64 %292, %2835
  %2837 = icmp ult i64 %2820, %2836
  br i1 %2837, label %2839, label %2960

2838:                                             ; preds = %2823
  store i32 38, i32* %144, align 8
  br label %3323

2839:                                             ; preds = %2834, %2958
  %2840 = phi i64 [ %2891, %2958 ], [ %2820, %2834 ]
  %2841 = load i64, i64* %125, align 8
  %2842 = load i64, i64* %126, align 8
  %2843 = sub i64 %2841, %2842
  %2844 = sdiv exact i64 %2843, 268
  %2845 = icmp ult i64 %2844, 4
  %2846 = inttoptr i64 %2841 to %"struct.jxl::jpeg::JPEGQuantTable"*
  br i1 %2845, label %2847, label %2960

2847:                                             ; preds = %2839
  %2848 = add nuw i64 %2840, 1
  %2849 = icmp ult i64 %2840, %1
  br i1 %2849, label %2851, label %2850

2850:                                             ; preds = %2847
  store i32 3, i32* %144, align 8
  br label %3323

2851:                                             ; preds = %2847
  %2852 = getelementptr inbounds i8, i8* %0, i64 %2840
  %2853 = load i8, i8* %2852, align 1
  %2854 = zext i8 %2853 to i32
  %2855 = lshr i32 %2854, 4
  %2856 = icmp ugt i8 %2853, 31
  br i1 %2856, label %2857, label %2858

2857:                                             ; preds = %2851
  store i32 42, i32* %144, align 8
  br label %3323

2858:                                             ; preds = %2851
  %2859 = and i32 %2854, 15
  %2860 = icmp ugt i32 %2859, 3
  br i1 %2860, label %2861, label %2862

2861:                                             ; preds = %2858
  store i32 17, i32* %144, align 8
  br label %3323

2862:                                             ; preds = %2858
  %2863 = shl nuw nsw i32 %2855, 6
  %2864 = add nuw nsw i32 %2863, 64
  %2865 = zext i32 %2864 to i64
  %2866 = add i64 %2848, %2865
  %2867 = icmp ugt i64 %2866, %1
  br i1 %2867, label %2868, label %2869

2868:                                             ; preds = %2862
  store i32 3, i32* %144, align 8
  br label %3323

2869:                                             ; preds = %2862
  call void @llvm.lifetime.start.p0i8(i64 268, i8* nonnull %127) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %127, i8 -86, i64 268, i1 false) #9
  store i8 1, i8* %130, align 4
  store i32 %2859, i32* %129, align 4
  store i32 %2855, i32* %128, align 4
  %2870 = icmp eq i32 %2855, 0
  br label %2871

2871:                                             ; preds = %2895, %2869
  %2872 = phi i64 [ %2848, %2869 ], [ %2891, %2895 ]
  %2873 = phi i64 [ 0, %2869 ], [ %2900, %2895 ]
  br i1 %2870, label %2885, label %2874

2874:                                             ; preds = %2871
  %2875 = getelementptr inbounds i8, i8* %0, i64 %2872
  %2876 = load i8, i8* %2875, align 1
  %2877 = zext i8 %2876 to i32
  %2878 = shl nuw nsw i32 %2877, 8
  %2879 = add i64 %2872, 1
  %2880 = getelementptr inbounds i8, i8* %0, i64 %2879
  %2881 = load i8, i8* %2880, align 1
  %2882 = zext i8 %2881 to i32
  %2883 = or i32 %2878, %2882
  %2884 = add i64 %2872, 2
  br label %2890

2885:                                             ; preds = %2871
  %2886 = add i64 %2872, 1
  %2887 = getelementptr inbounds i8, i8* %0, i64 %2872
  %2888 = load i8, i8* %2887, align 1
  %2889 = zext i8 %2888 to i32
  br label %2890

2890:                                             ; preds = %2885, %2874
  %2891 = phi i64 [ %2886, %2885 ], [ %2884, %2874 ]
  %2892 = phi i32 [ %2889, %2885 ], [ %2883, %2874 ]
  %2893 = add nsw i32 %2892, -1
  %2894 = icmp ugt i32 %2893, 65534
  br i1 %2894, label %2902, label %2895

2895:                                             ; preds = %2890
  %2896 = getelementptr inbounds [80 x i32], [80 x i32]* @_ZN3jxl4jpegL17kJPEGNaturalOrderE, i64 0, i64 %2873
  %2897 = load i32, i32* %2896, align 4
  %2898 = zext i32 %2897 to i64
  %2899 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %7, i64 0, i32 0, i32 0, i64 %2898
  store i32 %2892, i32* %2899, align 4
  %2900 = add nuw nsw i64 %2873, 1
  %2901 = icmp eq i64 %2900, 64
  br i1 %2901, label %2903, label %2871

2902:                                             ; preds = %2890
  store i32 18, i32* %144, align 8
  call void @llvm.lifetime.end.p0i8(i64 268, i8* nonnull %127) #9
  br label %3323

2903:                                             ; preds = %2895
  %2904 = icmp eq i64 %2891, %2836
  %2905 = zext i1 %2904 to i8
  store i8 %2905, i8* %130, align 4
  %2906 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %131, align 8
  %2907 = icmp eq %"struct.jxl::jpeg::JPEGQuantTable"* %2906, %2846
  br i1 %2907, label %2912, label %2908

2908:                                             ; preds = %2903
  %2909 = inttoptr i64 %2841 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2909, i8* nonnull align 4 %127, i64 268, i1 false) #9
  %2910 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %2846, i64 1
  %2911 = ptrtoint %"struct.jxl::jpeg::JPEGQuantTable"* %2910 to i64
  store i64 %2911, i64* %125, align 8
  br label %2958

2912:                                             ; preds = %2903
  %2913 = ptrtoint %"struct.jxl::jpeg::JPEGQuantTable"* %2906 to i64
  %2914 = sub i64 %2913, %2842
  %2915 = sdiv exact i64 %2914, 268
  %2916 = add nsw i64 %2915, 1
  %2917 = icmp ugt i64 %2916, 68831134603393849
  br i1 %2917, label %2918, label %2920

2918:                                             ; preds = %2912
  %2919 = bitcast %"class.std::__1::vector.15"* %123 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %2919) #10
  unreachable

2920:                                             ; preds = %2912
  %2921 = icmp ult i64 %2915, 34415567301696924
  br i1 %2921, label %2922, label %2927

2922:                                             ; preds = %2920
  %2923 = shl nsw i64 %2915, 1
  %2924 = icmp ult i64 %2923, %2916
  %2925 = select i1 %2924, i64 %2916, i64 %2923
  %2926 = icmp eq i64 %2925, 0
  br i1 %2926, label %2932, label %2927

2927:                                             ; preds = %2922, %2920
  %2928 = phi i64 [ %2925, %2922 ], [ 68831134603393849, %2920 ]
  %2929 = mul i64 %2928, 268
  %2930 = call i8* @_Znwm(i64 %2929) #8
  %2931 = bitcast i8* %2930 to %"struct.jxl::jpeg::JPEGQuantTable"*
  br label %2932

2932:                                             ; preds = %2927, %2922
  %2933 = phi i64 [ %2928, %2927 ], [ 0, %2922 ]
  %2934 = phi %"struct.jxl::jpeg::JPEGQuantTable"* [ %2931, %2927 ], [ null, %2922 ]
  %2935 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %2934, i64 %2915
  %2936 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %2934, i64 %2933
  %2937 = ptrtoint %"struct.jxl::jpeg::JPEGQuantTable"* %2936 to i64
  %2938 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"* %2935 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2938, i8* nonnull align 4 %127, i64 268, i1 false) #9
  %2939 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %2935, i64 1
  %2940 = ptrtoint %"struct.jxl::jpeg::JPEGQuantTable"* %2939 to i64
  %2941 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %133, align 8
  %2942 = load i64, i64* %125, align 8
  %2943 = ptrtoint %"struct.jxl::jpeg::JPEGQuantTable"* %2941 to i64
  %2944 = sub i64 %2942, %2943
  %2945 = sdiv exact i64 %2944, -268
  %2946 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %2935, i64 %2945
  %2947 = ptrtoint %"struct.jxl::jpeg::JPEGQuantTable"* %2946 to i64
  %2948 = icmp sgt i64 %2944, 0
  br i1 %2948, label %2949, label %2953

2949:                                             ; preds = %2932
  %2950 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"* %2946 to i8*
  %2951 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"* %2941 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2950, i8* align 4 %2951, i64 %2944, i1 false) #9
  %2952 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %133, align 8
  br label %2953

2953:                                             ; preds = %2949, %2932
  %2954 = phi %"struct.jxl::jpeg::JPEGQuantTable"* [ %2941, %2932 ], [ %2952, %2949 ]
  store i64 %2947, i64* %126, align 8
  store i64 %2940, i64* %125, align 8
  store i64 %2937, i64* %132, align 8
  %2955 = icmp eq %"struct.jxl::jpeg::JPEGQuantTable"* %2954, null
  br i1 %2955, label %2958, label %2956

2956:                                             ; preds = %2953
  %2957 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"* %2954 to i8*
  call void @_ZdlPv(i8* %2957) #8
  br label %2958

2958:                                             ; preds = %2956, %2953, %2908
  call void @llvm.lifetime.end.p0i8(i64 268, i8* nonnull %127) #9
  %2959 = icmp ult i64 %2891, %2836
  br i1 %2959, label %2839, label %2960

2960:                                             ; preds = %2958, %2839, %2834
  %2961 = phi i64 [ %2820, %2834 ], [ %2840, %2839 ], [ %2891, %2958 ]
  %2962 = icmp eq i64 %2836, %2961
  br i1 %2962, label %3166, label %2963

2963:                                             ; preds = %2960
  store i32 6, i32* %144, align 8
  br label %3323

2964:                                             ; preds = %299
  %2965 = icmp eq i8 %184, 0
  br i1 %2965, label %2967, label %2966

2966:                                             ; preds = %2964
  store i32 29, i32* %144, align 8
  br label %3323

2967:                                             ; preds = %2964
  %2968 = add i64 %291, 6
  %2969 = icmp ugt i64 %2968, %1
  br i1 %2969, label %2970, label %2971

2970:                                             ; preds = %2967
  store i32 3, i32* %144, align 8
  br label %3323

2971:                                             ; preds = %2967
  %2972 = getelementptr inbounds i8, i8* %0, i64 %292
  %2973 = load i8, i8* %2972, align 1
  %2974 = zext i8 %2973 to i64
  %2975 = shl nuw nsw i64 %2974, 8
  %2976 = add i64 %291, 3
  %2977 = getelementptr inbounds i8, i8* %0, i64 %2976
  %2978 = load i8, i8* %2977, align 1
  %2979 = zext i8 %2978 to i64
  %2980 = or i64 %2975, %2979
  %2981 = add i64 %291, 4
  %2982 = getelementptr inbounds i8, i8* %0, i64 %2981
  %2983 = load i8, i8* %2982, align 1
  %2984 = zext i8 %2983 to i32
  %2985 = shl nuw nsw i32 %2984, 8
  %2986 = add i64 %291, 5
  %2987 = getelementptr inbounds i8, i8* %0, i64 %2986
  %2988 = load i8, i8* %2987, align 1
  %2989 = zext i8 %2988 to i32
  %2990 = or i32 %2985, %2989
  store i32 %2990, i32* %122, align 8
  %2991 = add i64 %2980, %292
  %2992 = icmp eq i64 %2991, %2968
  br i1 %2992, label %3166, label %2993

2993:                                             ; preds = %2971
  store i32 6, i32* %144, align 8
  br label %3323

2994:                                             ; preds = %299, %299, %299, %299, %299, %299, %299, %299, %299, %299, %299, %299, %299, %299, %299, %299
  br i1 %102, label %3166, label %2995

2995:                                             ; preds = %2994
  %2996 = add i64 %291, 4
  %2997 = icmp ugt i64 %2996, %1
  br i1 %2997, label %2998, label %2999

2998:                                             ; preds = %2995
  store i32 3, i32* %144, align 8
  br label %3323

2999:                                             ; preds = %2995
  %3000 = getelementptr inbounds i8, i8* %0, i64 %292
  %3001 = load i8, i8* %3000, align 1
  %3002 = zext i8 %3001 to i32
  %3003 = shl nuw nsw i32 %3002, 8
  %3004 = add i64 %291, 3
  %3005 = getelementptr inbounds i8, i8* %0, i64 %3004
  %3006 = load i8, i8* %3005, align 1
  %3007 = zext i8 %3006 to i32
  %3008 = or i32 %3003, %3007
  %3009 = zext i32 %3008 to i64
  %3010 = add nsw i32 %3008, -2
  %3011 = icmp ugt i32 %3010, 65533
  br i1 %3011, label %3012, label %3013

3012:                                             ; preds = %2999
  store i32 19, i32* %144, align 8
  br label %3323

3013:                                             ; preds = %2999
  %3014 = add i64 %292, %3009
  %3015 = icmp ugt i64 %3014, %1
  br i1 %3015, label %3016, label %3017

3016:                                             ; preds = %3013
  store i32 3, i32* %144, align 8
  br label %3323

3017:                                             ; preds = %3013
  %3018 = getelementptr inbounds i8, i8* %103, i64 %2996
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %113) #9
  %3019 = getelementptr inbounds i8, i8* %3018, i64 1
  %3020 = getelementptr inbounds i8, i8* %3019, i64 %3009
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %113, i8 0, i64 24, i1 false) #9
  %3021 = ptrtoint i8* %3020 to i64
  %3022 = ptrtoint i8* %3018 to i64
  %3023 = sub i64 %3021, %3022
  %3024 = icmp eq i64 %3023, 0
  br i1 %3024, label %3034, label %3025

3025:                                             ; preds = %3017
  %3026 = icmp slt i64 %3023, 0
  br i1 %3026, label %3027, label %3029

3027:                                             ; preds = %3025
  %3028 = bitcast %"class.std::__1::vector.0"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %3028) #10
  unreachable

3029:                                             ; preds = %3025
  %3030 = call i8* @_Znwm(i64 %3023) #8
  store i8* %3030, i8** %114, align 8
  %3031 = getelementptr inbounds i8, i8* %3030, i64 %3023
  store i8* %3031, i8** %116, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %3030, i8* align 1 %3018, i64 %3023, i1 false) #9
  %3032 = ptrtoint i8* %3031 to i64
  store i64 %3032, i64* %117, align 8
  %3033 = ptrtoint i8* %3030 to i64
  br label %3034

3034:                                             ; preds = %3029, %3017
  %3035 = phi i8* [ null, %3017 ], [ %3030, %3029 ]
  %3036 = phi i64 [ 0, %3017 ], [ %3033, %3029 ]
  %3037 = phi i64 [ 0, %3017 ], [ %3032, %3029 ]
  %3038 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %118, align 8
  %3039 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %119, align 8
  %3040 = icmp eq %"class.std::__1::vector.0"* %3038, %3039
  br i1 %3040, label %3070, label %3041

3041:                                             ; preds = %3034
  %3042 = bitcast %"class.std::__1::vector.0"* %3038 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3042, i8 0, i64 24, i1 false) #9
  %3043 = sub i64 %3037, %3036
  %3044 = icmp eq i64 %3043, 0
  br i1 %3044, label %3066, label %3045

3045:                                             ; preds = %3041
  %3046 = icmp slt i64 %3043, 0
  br i1 %3046, label %3047, label %3049

3047:                                             ; preds = %3045
  %3048 = bitcast %"class.std::__1::vector.0"* %3038 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %3048) #10
  unreachable

3049:                                             ; preds = %3045
  %3050 = call i8* @_Znwm(i64 %3043) #8
  %3051 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %3038, i64 0, i32 0, i32 1
  store i8* %3050, i8** %3051, align 8
  %3052 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %3038, i64 0, i32 0, i32 0
  store i8* %3050, i8** %3052, align 8
  %3053 = getelementptr inbounds i8, i8* %3050, i64 %3043
  %3054 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %3038, i64 0, i32 0, i32 2, i32 0, i32 0
  store i8* %3053, i8** %3054, align 8
  %3055 = load i8*, i8** %114, align 8
  %3056 = load i64, i64* %117, align 8
  %3057 = bitcast i8** %3051 to i64*
  %3058 = ptrtoint i8* %3055 to i64
  %3059 = sub i64 %3056, %3058
  %3060 = icmp sgt i64 %3059, 0
  br i1 %3060, label %3061, label %3063

3061:                                             ; preds = %3049
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %3050, i8* align 1 %3055, i64 %3059, i1 false) #9
  %3062 = getelementptr inbounds i8, i8* %3050, i64 %3059
  br label %3063

3063:                                             ; preds = %3061, %3049
  %3064 = phi i8* [ %3062, %3061 ], [ %3050, %3049 ]
  %3065 = ptrtoint i8* %3064 to i64
  store i64 %3065, i64* %3057, align 8
  br label %3066

3066:                                             ; preds = %3063, %3041
  %3067 = phi i8* [ %3055, %3063 ], [ %3035, %3041 ]
  %3068 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %3038, i64 1
  %3069 = ptrtoint %"class.std::__1::vector.0"* %3068 to i64
  store i64 %3069, i64* %120, align 8
  br label %3072

3070:                                             ; preds = %3034
  call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE21__push_back_slow_pathIRKS3_EEvOT_(%"class.std::__1::vector"* %121, %"class.std::__1::vector.0"* nonnull dereferenceable(24) %6) #9
  %3071 = load i8*, i8** %114, align 8
  br label %3072

3072:                                             ; preds = %3070, %3066
  %3073 = phi i8* [ %3067, %3066 ], [ %3071, %3070 ]
  %3074 = icmp eq i8* %3073, null
  br i1 %3074, label %3077, label %3075

3075:                                             ; preds = %3072
  %3076 = ptrtoint i8* %3073 to i64
  store i64 %3076, i64* %117, align 8
  call void @_ZdlPv(i8* nonnull %3073) #8
  br label %3077

3077:                                             ; preds = %3075, %3072
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %113) #9
  br label %3166

3078:                                             ; preds = %299
  br i1 %102, label %3166, label %3079

3079:                                             ; preds = %3078
  %3080 = add i64 %291, 4
  %3081 = icmp ugt i64 %3080, %1
  br i1 %3081, label %3082, label %3083

3082:                                             ; preds = %3079
  store i32 3, i32* %144, align 8
  br label %3323

3083:                                             ; preds = %3079
  %3084 = getelementptr inbounds i8, i8* %0, i64 %292
  %3085 = load i8, i8* %3084, align 1
  %3086 = zext i8 %3085 to i32
  %3087 = shl nuw nsw i32 %3086, 8
  %3088 = add i64 %291, 3
  %3089 = getelementptr inbounds i8, i8* %0, i64 %3088
  %3090 = load i8, i8* %3089, align 1
  %3091 = zext i8 %3090 to i32
  %3092 = or i32 %3087, %3091
  %3093 = zext i32 %3092 to i64
  %3094 = add nsw i32 %3092, -2
  %3095 = icmp ugt i32 %3094, 65533
  br i1 %3095, label %3096, label %3097

3096:                                             ; preds = %3083
  store i32 19, i32* %144, align 8
  br label %3323

3097:                                             ; preds = %3083
  %3098 = add i64 %292, %3093
  %3099 = icmp ugt i64 %3098, %1
  br i1 %3099, label %3100, label %3101

3100:                                             ; preds = %3097
  store i32 3, i32* %144, align 8
  br label %3323

3101:                                             ; preds = %3097
  %3102 = getelementptr inbounds i8, i8* %103, i64 %3080
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %104) #9
  %3103 = getelementptr inbounds i8, i8* %3102, i64 1
  %3104 = getelementptr inbounds i8, i8* %3103, i64 %3093
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %104, i8 0, i64 24, i1 false) #9
  %3105 = ptrtoint i8* %3104 to i64
  %3106 = ptrtoint i8* %3102 to i64
  %3107 = sub i64 %3105, %3106
  %3108 = icmp eq i64 %3107, 0
  br i1 %3108, label %3118, label %3109

3109:                                             ; preds = %3101
  %3110 = icmp slt i64 %3107, 0
  br i1 %3110, label %3111, label %3113

3111:                                             ; preds = %3109
  %3112 = bitcast %"class.std::__1::vector.0"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %3112) #10
  unreachable

3113:                                             ; preds = %3109
  %3114 = call i8* @_Znwm(i64 %3107) #8
  store i8* %3114, i8** %105, align 8
  %3115 = getelementptr inbounds i8, i8* %3114, i64 %3107
  store i8* %3115, i8** %107, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %3114, i8* align 1 %3102, i64 %3107, i1 false) #9
  %3116 = ptrtoint i8* %3115 to i64
  store i64 %3116, i64* %108, align 8
  %3117 = ptrtoint i8* %3114 to i64
  br label %3118

3118:                                             ; preds = %3113, %3101
  %3119 = phi i8* [ null, %3101 ], [ %3114, %3113 ]
  %3120 = phi i64 [ 0, %3101 ], [ %3117, %3113 ]
  %3121 = phi i64 [ 0, %3101 ], [ %3116, %3113 ]
  %3122 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %109, align 8
  %3123 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %110, align 8
  %3124 = icmp eq %"class.std::__1::vector.0"* %3122, %3123
  br i1 %3124, label %3154, label %3125

3125:                                             ; preds = %3118
  %3126 = bitcast %"class.std::__1::vector.0"* %3122 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3126, i8 0, i64 24, i1 false) #9
  %3127 = sub i64 %3121, %3120
  %3128 = icmp eq i64 %3127, 0
  br i1 %3128, label %3150, label %3129

3129:                                             ; preds = %3125
  %3130 = icmp slt i64 %3127, 0
  br i1 %3130, label %3131, label %3133

3131:                                             ; preds = %3129
  %3132 = bitcast %"class.std::__1::vector.0"* %3122 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %3132) #10
  unreachable

3133:                                             ; preds = %3129
  %3134 = call i8* @_Znwm(i64 %3127) #8
  %3135 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %3122, i64 0, i32 0, i32 1
  store i8* %3134, i8** %3135, align 8
  %3136 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %3122, i64 0, i32 0, i32 0
  store i8* %3134, i8** %3136, align 8
  %3137 = getelementptr inbounds i8, i8* %3134, i64 %3127
  %3138 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %3122, i64 0, i32 0, i32 2, i32 0, i32 0
  store i8* %3137, i8** %3138, align 8
  %3139 = load i8*, i8** %105, align 8
  %3140 = load i64, i64* %108, align 8
  %3141 = bitcast i8** %3135 to i64*
  %3142 = ptrtoint i8* %3139 to i64
  %3143 = sub i64 %3140, %3142
  %3144 = icmp sgt i64 %3143, 0
  br i1 %3144, label %3145, label %3147

3145:                                             ; preds = %3133
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %3134, i8* align 1 %3139, i64 %3143, i1 false) #9
  %3146 = getelementptr inbounds i8, i8* %3134, i64 %3143
  br label %3147

3147:                                             ; preds = %3145, %3133
  %3148 = phi i8* [ %3146, %3145 ], [ %3134, %3133 ]
  %3149 = ptrtoint i8* %3148 to i64
  store i64 %3149, i64* %3141, align 8
  br label %3150

3150:                                             ; preds = %3147, %3125
  %3151 = phi i8* [ %3139, %3147 ], [ %3119, %3125 ]
  %3152 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %3122, i64 1
  %3153 = ptrtoint %"class.std::__1::vector.0"* %3152 to i64
  store i64 %3153, i64* %111, align 8
  br label %3156

3154:                                             ; preds = %3118
  call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE21__push_back_slow_pathIRKS3_EEvOT_(%"class.std::__1::vector"* %112, %"class.std::__1::vector.0"* nonnull dereferenceable(24) %5) #9
  %3155 = load i8*, i8** %105, align 8
  br label %3156

3156:                                             ; preds = %3154, %3150
  %3157 = phi i8* [ %3151, %3150 ], [ %3155, %3154 ]
  %3158 = icmp eq i8* %3157, null
  br i1 %3158, label %3161, label %3159

3159:                                             ; preds = %3156
  %3160 = ptrtoint i8* %3157 to i64
  store i64 %3160, i64* %108, align 8
  call void @_ZdlPv(i8* nonnull %3157) #8
  br label %3161

3161:                                             ; preds = %3159, %3156
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %104) #9
  br label %3166

3162:                                             ; preds = %299
  store i32 5, i32* %144, align 8
  br label %3323

3163:                                             ; preds = %2668, %2664, %2566, %1200, %1190, %1183, %2809, %1357, %1349, %1353, %1346, %2260, %2091, %1816, %1613, %1542, %2249, %2027, %2018, %1731, %1728, %1715
  %3164 = phi i32 [ 24, %1731 ], [ 39, %1728 ], [ 22, %1715 ], [ 39, %2249 ], [ 22, %2027 ], [ 22, %2018 ], [ 28, %2260 ], [ 40, %2091 ], [ 40, %1816 ], [ 23, %1613 ], [ 22, %1542 ], [ 40, %2809 ], [ 31, %1357 ], [ 4, %1349 ], [ 4, %1353 ], [ 25, %1346 ], [ 27, %1190 ], [ 26, %1183 ], [ 3, %2668 ], [ 25, %2664 ], [ 40, %2566 ], [ 24, %1200 ]
  store i32 %3164, i32* %144, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %167) #9
  br label %3323

3165:                                             ; preds = %2668
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %167) #9
  br label %3166

3166:                                             ; preds = %3161, %3077, %2971, %2960, %743, %299, %299, %299, %299, %299, %299, %299, %299, %299, %747, %2994, %3078, %529, %3165
  %3167 = phi i8 [ %187, %3165 ], [ %305, %529 ], [ %187, %3078 ], [ %187, %2994 ], [ %187, %747 ], [ %187, %299 ], [ %187, %299 ], [ %187, %299 ], [ %187, %299 ], [ %187, %299 ], [ %187, %299 ], [ %187, %299 ], [ %187, %299 ], [ %187, %299 ], [ %187, %743 ], [ %187, %2960 ], [ %187, %2971 ], [ %187, %3077 ], [ %187, %3161 ]
  %3168 = phi i8 [ %186, %3165 ], [ 1, %529 ], [ %186, %3078 ], [ %186, %2994 ], [ %186, %747 ], [ %186, %299 ], [ %186, %299 ], [ %186, %299 ], [ %186, %299 ], [ %186, %299 ], [ %186, %299 ], [ %186, %299 ], [ %186, %299 ], [ %186, %299 ], [ %186, %743 ], [ %186, %2960 ], [ %186, %2971 ], [ %186, %3077 ], [ %186, %3161 ]
  %3169 = phi i64 [ %2666, %3165 ], [ %460, %529 ], [ %292, %3078 ], [ %292, %2994 ], [ %292, %747 ], [ %292, %299 ], [ %292, %299 ], [ %292, %299 ], [ %292, %299 ], [ %292, %299 ], [ %292, %299 ], [ %292, %299 ], [ %292, %299 ], [ %292, %299 ], [ %547, %743 ], [ %2836, %2960 ], [ %2968, %2971 ], [ %3014, %3077 ], [ %3098, %3161 ]
  %3170 = phi i8 [ %184, %3165 ], [ %184, %529 ], [ %184, %3078 ], [ %184, %2994 ], [ %184, %747 ], [ %184, %299 ], [ %184, %299 ], [ %184, %299 ], [ %184, %299 ], [ %184, %299 ], [ %184, %299 ], [ %184, %299 ], [ %184, %299 ], [ %184, %299 ], [ %184, %743 ], [ %184, %2960 ], [ 1, %2971 ], [ %184, %3077 ], [ %184, %3161 ]
  %3171 = load i8*, i8** %90, align 8
  %3172 = load i8*, i8** %91, align 8
  %3173 = icmp ult i8* %3171, %3172
  %3174 = ptrtoint i8* %3172 to i64
  br i1 %3173, label %3175, label %3178

3175:                                             ; preds = %3166
  store i8 %302, i8* %3171, align 1
  %3176 = getelementptr inbounds i8, i8* %3171, i64 1
  %3177 = ptrtoint i8* %3176 to i64
  store i64 %3177, i64* %92, align 8
  br label %3219

3178:                                             ; preds = %3166
  %3179 = ptrtoint i8* %3171 to i64
  %3180 = load i64, i64* %93, align 8
  %3181 = sub i64 %3179, %3180
  %3182 = add i64 %3181, 1
  %3183 = icmp slt i64 %3182, 0
  br i1 %3183, label %3184, label %3186

3184:                                             ; preds = %3178
  %3185 = bitcast %"class.std::__1::vector.0"* %89 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %3185) #10
  unreachable

3186:                                             ; preds = %3178
  %3187 = sub i64 %3174, %3180
  %3188 = icmp ult i64 %3187, 4611686018427387903
  br i1 %3188, label %3189, label %3194

3189:                                             ; preds = %3186
  %3190 = shl i64 %3187, 1
  %3191 = icmp ult i64 %3190, %3182
  %3192 = select i1 %3191, i64 %3182, i64 %3190
  %3193 = icmp eq i64 %3192, 0
  br i1 %3193, label %3197, label %3194

3194:                                             ; preds = %3189, %3186
  %3195 = phi i64 [ %3192, %3189 ], [ 9223372036854775807, %3186 ]
  %3196 = call i8* @_Znwm(i64 %3195) #8
  br label %3197

3197:                                             ; preds = %3194, %3189
  %3198 = phi i64 [ %3195, %3194 ], [ 0, %3189 ]
  %3199 = phi i8* [ %3196, %3194 ], [ null, %3189 ]
  %3200 = getelementptr inbounds i8, i8* %3199, i64 %3181
  %3201 = getelementptr inbounds i8, i8* %3199, i64 %3198
  %3202 = ptrtoint i8* %3201 to i64
  store i8 %302, i8* %3200, align 1
  %3203 = getelementptr inbounds i8, i8* %3200, i64 1
  %3204 = ptrtoint i8* %3203 to i64
  %3205 = load i8*, i8** %95, align 8
  %3206 = load i64, i64* %92, align 8
  %3207 = ptrtoint i8* %3205 to i64
  %3208 = sub i64 %3206, %3207
  %3209 = sub i64 0, %3208
  %3210 = getelementptr inbounds i8, i8* %3200, i64 %3209
  %3211 = ptrtoint i8* %3210 to i64
  %3212 = icmp sgt i64 %3208, 0
  br i1 %3212, label %3213, label %3215

3213:                                             ; preds = %3197
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3210, i8* align 1 %3205, i64 %3208, i1 false) #9
  %3214 = load i8*, i8** %95, align 8
  br label %3215

3215:                                             ; preds = %3213, %3197
  %3216 = phi i8* [ %3205, %3197 ], [ %3214, %3213 ]
  store i64 %3211, i64* %93, align 8
  store i64 %3204, i64* %92, align 8
  store i64 %3202, i64* %94, align 8
  %3217 = icmp eq i8* %3216, null
  br i1 %3217, label %3219, label %3218

3218:                                             ; preds = %3215
  call void @_ZdlPv(i8* nonnull %3216) #8
  br label %3219

3219:                                             ; preds = %3175, %3215, %3218
  %3220 = and i8 %3168, 1
  %3221 = icmp ne i8 %3220, 0
  %3222 = and i1 %182, %3221
  %3223 = icmp eq i8 %302, -39
  %3224 = or i1 %3223, %3222
  br i1 %3224, label %3225, label %183

3225:                                             ; preds = %3219
  %3226 = icmp eq i8 %3220, 0
  br i1 %3226, label %3227, label %3228

3227:                                             ; preds = %3225
  store i32 2, i32* %144, align 8
  br label %3323

3228:                                             ; preds = %3225
  br i1 %134, label %3229, label %3323

3229:                                             ; preds = %3228
  %3230 = icmp ult i64 %3169, %1
  br i1 %3230, label %3231, label %3277

3231:                                             ; preds = %3229
  %3232 = bitcast %"class.std::__1::vector.0"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3232) #9
  %3233 = getelementptr inbounds i8, i8* %0, i64 %3169
  %3234 = getelementptr inbounds i8, i8* %0, i64 %1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3232, i8 0, i64 24, i1 false) #9
  %3235 = ptrtoint i8* %3234 to i64
  %3236 = ptrtoint i8* %3233 to i64
  %3237 = sub i64 %3235, %3236
  %3238 = icmp eq i64 %3237, 0
  br i1 %3238, label %3252, label %3239

3239:                                             ; preds = %3231
  %3240 = icmp slt i64 %3237, 0
  br i1 %3240, label %3241, label %3243

3241:                                             ; preds = %3239
  %3242 = bitcast %"class.std::__1::vector.0"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %3242) #10
  unreachable

3243:                                             ; preds = %3239
  %3244 = call i8* @_Znwm(i64 %3237) #8
  %3245 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %14, i64 0, i32 0, i32 1
  %3246 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %14, i64 0, i32 0, i32 0
  store i8* %3244, i8** %3246, align 8
  %3247 = getelementptr inbounds i8, i8* %3244, i64 %3237
  %3248 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %14, i64 0, i32 0, i32 2, i32 0, i32 0
  store i8* %3247, i8** %3248, align 8
  %3249 = bitcast i8** %3245 to i64*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %3244, i8* align 1 %3233, i64 %3237, i1 false) #9
  %3250 = ptrtoint i8* %3247 to i64
  store i64 %3250, i64* %3249, align 8
  %3251 = ptrtoint i8* %3244 to i64
  br label %3252

3252:                                             ; preds = %3231, %3243
  %3253 = phi i64 [ 0, %3231 ], [ %3250, %3243 ]
  %3254 = phi i64 [ 0, %3231 ], [ %3251, %3243 ]
  %3255 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 13
  %3256 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %3255, i64 0, i32 0, i32 0
  %3257 = load i8*, i8** %3256, align 8
  %3258 = icmp eq i8* %3257, null
  %3259 = insertelement <2 x i64> undef, i64 %3253, i32 0
  %3260 = shufflevector <2 x i64> %3259, <2 x i64> undef, <2 x i32> zeroinitializer
  br i1 %3258, label %3271, label %3261

3261:                                             ; preds = %3252
  %3262 = ptrtoint i8* %3257 to i64
  %3263 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 13, i32 0, i32 1
  %3264 = bitcast i8** %3263 to i64*
  store i64 %3262, i64* %3264, align 8
  call void @_ZdlPv(i8* nonnull %3257) #8
  %3265 = bitcast %"class.std::__1::vector.0"* %3255 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3265, i8 0, i64 24, i1 false) #9
  %3266 = bitcast %"class.std::__1::vector.0"* %14 to i64*
  %3267 = load i64, i64* %3266, align 8
  %3268 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %14, i64 0, i32 0, i32 1
  %3269 = bitcast i8** %3268 to <2 x i64>*
  %3270 = load <2 x i64>, <2 x i64>* %3269, align 8
  br label %3271

3271:                                             ; preds = %3261, %3252
  %3272 = phi i64 [ %3267, %3261 ], [ %3254, %3252 ]
  %3273 = phi <2 x i64> [ %3270, %3261 ], [ %3260, %3252 ]
  %3274 = bitcast %"class.std::__1::vector.0"* %3255 to i64*
  store i64 %3272, i64* %3274, align 8
  %3275 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %3, i64 0, i32 13, i32 0, i32 1
  %3276 = bitcast i8** %3275 to <2 x i64>*
  store <2 x i64> %3273, <2 x i64>* %3276, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3232) #9
  br label %3277

3277:                                             ; preds = %3271, %3229
  %3278 = load i64, i64* %138, align 8
  %3279 = load i64, i64* %139, align 8
  %3280 = icmp eq i64 %3278, %3279
  br i1 %3280, label %3311, label %3281

3281:                                             ; preds = %3277, %3302
  %3282 = phi i64 [ %3306, %3302 ], [ %3279, %3277 ]
  %3283 = phi i64 [ %3304, %3302 ], [ 0, %3277 ]
  %3284 = load i64, i64* %125, align 8
  %3285 = load i64, i64* %126, align 8
  %3286 = icmp eq i64 %3284, %3285
  %3287 = inttoptr i64 %3285 to %"struct.jxl::jpeg::JPEGQuantTable"*
  br i1 %3286, label %3310, label %3288

3288:                                             ; preds = %3281
  %3289 = inttoptr i64 %3282 to %"struct.jxl::jpeg::JPEGComponent"*
  %3290 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %3289, i64 %3283, i32 3
  %3291 = load i32, i32* %3290, align 4
  %3292 = sub i64 %3284, %3285
  %3293 = sdiv exact i64 %3292, 268
  br label %3294

3294:                                             ; preds = %3299, %3288
  %3295 = phi i64 [ 0, %3288 ], [ %3300, %3299 ]
  %3296 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %3287, i64 %3295, i32 2
  %3297 = load i32, i32* %3296, align 4
  %3298 = icmp eq i32 %3297, %3291
  br i1 %3298, label %3302, label %3299

3299:                                             ; preds = %3294
  %3300 = add nuw i64 %3295, 1
  %3301 = icmp ult i64 %3300, %3293
  br i1 %3301, label %3294, label %3310

3302:                                             ; preds = %3294
  %3303 = trunc i64 %3295 to i32
  store i32 %3303, i32* %3290, align 4
  %3304 = add nuw i64 %3283, 1
  %3305 = load i64, i64* %138, align 8
  %3306 = load i64, i64* %139, align 8
  %3307 = sub i64 %3305, %3306
  %3308 = sdiv exact i64 %3307, 48
  %3309 = icmp ult i64 %3304, %3308
  br i1 %3309, label %3281, label %3311

3310:                                             ; preds = %3281, %3299
  store i32 36, i32* %144, align 8
  br label %3323

3311:                                             ; preds = %3302, %3277
  %3312 = load %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"** %181, align 8
  %3313 = load %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"** %150, align 8
  %3314 = icmp eq %"struct.jxl::jpeg::JPEGHuffmanCode"* %3312, %3313
  br i1 %3314, label %3315, label %3316

3315:                                             ; preds = %3311
  store i32 35, i32* %144, align 8
  br label %3323

3316:                                             ; preds = %3311
  %3317 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %3312 to i64
  %3318 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %3313 to i64
  %3319 = sub i64 %3318, %3317
  %3320 = sdiv exact i64 %3319, 1104
  %3321 = icmp ugt i64 %3320, 511
  br i1 %3321, label %3322, label %3323

3322:                                             ; preds = %3316
  store i32 35, i32* %144, align 8
  br label %3323

3323:                                             ; preds = %932, %3100, %3096, %3082, %3016, %3012, %2998, %2993, %2970, %2966, %2868, %2861, %2857, %2902, %2963, %2850, %2838, %2822, %776, %753, %634, %644, %661, %739, %746, %554, %549, %533, %369, %363, %359, %355, %351, %312, %308, %3162, %527, %3163, %298, %3310, %3228, %3316, %3322, %3315, %3227
  %3324 = phi i1 [ false, %3315 ], [ false, %3322 ], [ false, %3227 ], [ false, %3310 ], [ true, %3316 ], [ true, %3228 ], [ false, %298 ], [ false, %3163 ], [ false, %527 ], [ false, %3162 ], [ false, %308 ], [ false, %312 ], [ false, %351 ], [ false, %355 ], [ false, %359 ], [ false, %363 ], [ false, %369 ], [ false, %533 ], [ false, %549 ], [ false, %554 ], [ false, %746 ], [ false, %739 ], [ false, %661 ], [ false, %644 ], [ false, %634 ], [ false, %753 ], [ false, %776 ], [ false, %2822 ], [ false, %2838 ], [ false, %2850 ], [ false, %2963 ], [ false, %2902 ], [ false, %2857 ], [ false, %2861 ], [ false, %2868 ], [ false, %2966 ], [ false, %2970 ], [ false, %2993 ], [ false, %2998 ], [ false, %3012 ], [ false, %3016 ], [ false, %3082 ], [ false, %3096 ], [ false, %3100 ], [ false, %932 ]
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %78) #9
  call void @_ZdlPv(i8* nonnull %53) #8
  call void @_ZdlPv(i8* nonnull %28) #8
  br label %3325

3325:                                             ; preds = %25, %3323, %19
  %3326 = phi i1 [ false, %19 ], [ false, %25 ], [ %3324, %3323 ]
  ret i1 %3326
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl4jpeg13JPEGComponentENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.31"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.31", %"class.std::__1::vector.31"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.31", %"class.std::__1::vector.31"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 48
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::jpeg::JPEGComponent"*
  %14 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %27, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"struct.jxl::jpeg::JPEGComponent"* %14 to i64
  br label %27

18:                                               ; preds = %12, %18
  %19 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %25, %18 ], [ %13, %12 ]
  %20 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %19, i64 0, i32 0
  store i32 0, i32* %20, align 8
  %21 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %19, i64 0, i32 1
  store i32 1, i32* %21, align 4
  %22 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %19, i64 0, i32 2
  store i32 1, i32* %22, align 8
  %23 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %19, i64 0, i32 3
  %24 = bitcast i32* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %24, i8 0, i64 36, i1 false) #9
  %25 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %19, i64 1
  %26 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %25, %14
  br i1 %26, label %16, label %18

27:                                               ; preds = %12, %16
  %28 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %128

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.31"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = sdiv exact i64 %32, 48
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 384307168202282325
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.31"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #10
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = sdiv exact i64 %39, 48
  %41 = icmp ult i64 %40, 192153584101141162
  br i1 %41, label %42, label %47

42:                                               ; preds = %38
  %43 = shl nsw i64 %40, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %52, label %47

47:                                               ; preds = %38, %42
  %48 = phi i64 [ %45, %42 ], [ 384307168202282325, %38 ]
  %49 = mul i64 %48, 48
  %50 = tail call i8* @_Znwm(i64 %49) #8
  %51 = bitcast i8* %50 to %"struct.jxl::jpeg::JPEGComponent"*
  br label %52

52:                                               ; preds = %42, %47
  %53 = phi i64 [ %48, %47 ], [ 0, %42 ]
  %54 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %51, %47 ], [ null, %42 ]
  %55 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %54, i64 %33
  %56 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %54, i64 %53
  %57 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %55, i64 %1
  br label %58

58:                                               ; preds = %52, %58
  %59 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %65, %58 ], [ %55, %52 ]
  %60 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %59, i64 0, i32 0
  store i32 0, i32* %60, align 8
  %61 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %59, i64 0, i32 1
  store i32 1, i32* %61, align 4
  %62 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %59, i64 0, i32 2
  store i32 1, i32* %62, align 8
  %63 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %59, i64 0, i32 3
  %64 = bitcast i32* %63 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %64, i8 0, i64 36, i1 false) #9
  %65 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %59, i64 1
  %66 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %57, %65
  br i1 %66, label %67, label %58

67:                                               ; preds = %58
  %68 = ptrtoint %"struct.jxl::jpeg::JPEGComponent"* %56 to i64
  %69 = ptrtoint %"struct.jxl::jpeg::JPEGComponent"* %57 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.31", %"class.std::__1::vector.31"* %0, i64 0, i32 0, i32 0
  %71 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %70, align 8
  %72 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %6, align 8
  %73 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"struct.jxl::jpeg::JPEGComponent"* %71 to i64
  br label %104

76:                                               ; preds = %67, %76
  %77 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %79, %76 ], [ %55, %67 ]
  %78 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %77, i64 -1
  %80 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %78, i64 -1
  %81 = bitcast %"struct.jxl::jpeg::JPEGComponent"* %79 to i8*
  %82 = bitcast %"struct.jxl::jpeg::JPEGComponent"* %80 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %81, i8* align 8 %82, i64 24, i1 false) #9
  %83 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %77, i64 -1, i32 6
  %84 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %78, i64 -1, i32 6
  %85 = bitcast %"class.std::__1::vector.33"* %83 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %85, i8 0, i64 24, i1 false) #9
  %86 = bitcast %"class.std::__1::vector.33"* %84 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = bitcast %"class.std::__1::vector.33"* %83 to i64*
  store i64 %87, i64* %88, align 8
  %89 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %78, i64 -1, i32 6, i32 0, i32 1
  %90 = bitcast i16** %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %77, i64 -1, i32 6, i32 0, i32 1
  %93 = bitcast i16** %92 to i64*
  store i64 %91, i64* %93, align 8
  %94 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %78, i64 -1, i32 6, i32 0, i32 2, i32 0, i32 0
  %95 = bitcast i16** %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %77, i64 -1, i32 6, i32 0, i32 2, i32 0, i32 0
  %98 = bitcast i16** %97 to i64*
  store i64 %96, i64* %98, align 8
  %99 = bitcast %"class.std::__1::vector.33"* %84 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %99, i8 0, i64 24, i1 false) #9
  %100 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %80, %71
  br i1 %100, label %101, label %76

101:                                              ; preds = %76
  %102 = load i64, i64* %30, align 8
  %103 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %6, align 8
  br label %104

104:                                              ; preds = %74, %101
  %105 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %71, %74 ], [ %103, %101 ]
  %106 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %55, %74 ], [ %79, %101 ]
  %107 = phi i64 [ %75, %74 ], [ %102, %101 ]
  %108 = ptrtoint %"struct.jxl::jpeg::JPEGComponent"* %106 to i64
  store i64 %108, i64* %30, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %109 = inttoptr i64 %107 to %"struct.jxl::jpeg::JPEGComponent"*
  %110 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %105, %109
  br i1 %110, label %124, label %111

111:                                              ; preds = %104, %122
  %112 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %113, %122 ], [ %105, %104 ]
  %113 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %112, i64 -1
  %114 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %112, i64 -1, i32 6, i32 0, i32 0
  %115 = load i16*, i16** %114, align 8
  %116 = icmp eq i16* %115, null
  br i1 %116, label %122, label %117

117:                                              ; preds = %111
  %118 = ptrtoint i16* %115 to i64
  %119 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %112, i64 -1, i32 6, i32 0, i32 1
  %120 = bitcast i16** %119 to i64*
  store i64 %118, i64* %120, align 8
  %121 = bitcast i16* %115 to i8*
  tail call void @_ZdlPv(i8* %121) #8
  br label %122

122:                                              ; preds = %117, %111
  %123 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %113, %109
  br i1 %123, label %124, label %111

124:                                              ; preds = %122, %104
  %125 = icmp eq i64 %107, 0
  br i1 %125, label %128, label %126

126:                                              ; preds = %124
  %127 = inttoptr i64 %107 to i8*
  tail call void @_ZdlPv(i8* %127) #8
  br label %128

128:                                              ; preds = %126, %124, %27
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIsNS_9allocatorIsEEE8__appendEm(%"class.std::__1::vector.33"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.33", %"class.std::__1::vector.33"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i16** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.33", %"class.std::__1::vector.33"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i16** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 1
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i16*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i16, i16* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i16, i16* %13, i64 %18
  %20 = bitcast i16* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 2
  %25 = and i64 %24, -2
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %17, i8 0, i64 %25, i1 false) #9
  %26 = ptrtoint i16* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %81

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.33"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 1
  %34 = add i64 %33, %1
  %35 = icmp slt i64 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.33"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #10
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 1
  %41 = icmp ult i64 %40, 4611686018427387903
  %42 = icmp ult i64 %39, %34
  %43 = select i1 %42, i64 %34, i64 %39
  %44 = select i1 %41, i64 %43, i64 9223372036854775807
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %53, label %46

46:                                               ; preds = %38
  %47 = icmp slt i64 %44, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %46
  tail call void @abort() #10
  unreachable

49:                                               ; preds = %46
  %50 = shl i64 %44, 1
  %51 = tail call i8* @_Znwm(i64 %50) #8
  %52 = bitcast i8* %51 to i16*
  br label %53

53:                                               ; preds = %49, %38
  %54 = phi i16* [ %52, %49 ], [ null, %38 ]
  %55 = getelementptr inbounds i16, i16* %54, i64 %33
  %56 = getelementptr inbounds i16, i16* %54, i64 %44
  %57 = getelementptr inbounds i16, i16* %55, i64 %1
  %58 = bitcast i16* %55 to i8*
  %59 = shl i64 %1, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %58, i8 0, i64 %59, i1 false) #9
  %60 = ptrtoint i16* %56 to i64
  %61 = ptrtoint i16* %57 to i64
  %62 = getelementptr inbounds %"class.std::__1::vector.33", %"class.std::__1::vector.33"* %0, i64 0, i32 0, i32 0
  %63 = load i16*, i16** %62, align 8
  %64 = load i64, i64* %7, align 8
  %65 = ptrtoint i16* %63 to i64
  %66 = sub i64 %64, %65
  %67 = ashr exact i64 %66, 1
  %68 = sub nsw i64 0, %67
  %69 = getelementptr inbounds i16, i16* %55, i64 %68
  %70 = ptrtoint i16* %69 to i64
  %71 = icmp sgt i64 %66, 0
  br i1 %71, label %72, label %76

72:                                               ; preds = %53
  %73 = bitcast i16* %69 to i8*
  %74 = bitcast i16* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %73, i8* align 2 %74, i64 %66, i1 false) #9
  %75 = load i16*, i16** %62, align 8
  br label %76

76:                                               ; preds = %53, %72
  %77 = phi i16* [ %63, %53 ], [ %75, %72 ]
  store i64 %70, i64* %30, align 8
  store i64 %61, i64* %7, align 8
  store i64 %60, i64* %4, align 8
  %78 = icmp eq i16* %77, null
  br i1 %78, label %81, label %79

79:                                               ; preds = %76
  %80 = bitcast i16* %77 to i8*
  tail call void @_ZdlPv(i8* %80) #8
  br label %81

81:                                               ; preds = %79, %76, %27
  ret void
}

declare void @_ZN3jxl4jpeg21BuildJpegHuffmanTableEPKjS2_PNS0_17HuffmanTableEntryE(i32*, i32*, %"struct.jxl::jpeg::HuffmanTableEntry"*) local_unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl4jpeg12JPEGScanInfoENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_(%"class.std::__1::vector.45"*, %"struct.jxl::jpeg::JPEGScanInfo"* dereferenceable(120)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %0, i64 0, i32 0, i32 2
  %4 = bitcast %"class.std::__1::__compressed_pair.62"* %3 to %"class.std::__1::allocator.65"*
  %5 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.45"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = sdiv exact i64 %10, 120
  %12 = add nsw i64 %11, 1
  %13 = icmp ugt i64 %12, 153722867280912930
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = bitcast %"class.std::__1::vector.45"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #10
  unreachable

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %9
  %21 = sdiv exact i64 %20, 120
  %22 = icmp ult i64 %21, 76861433640456465
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = shl nsw i64 %21, 1
  %25 = icmp ult i64 %24, %12
  %26 = select i1 %25, i64 %12, i64 %24
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %16, %23
  %29 = phi i64 [ %26, %23 ], [ 153722867280912930, %16 ]
  %30 = mul i64 %29, 120
  %31 = tail call i8* @_Znwm(i64 %30) #8
  %32 = bitcast i8* %31 to %"struct.jxl::jpeg::JPEGScanInfo"*
  br label %33

33:                                               ; preds = %23, %28
  %34 = phi i64 [ %29, %28 ], [ 0, %23 ]
  %35 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %32, %28 ], [ null, %23 ]
  %36 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %35, i64 %11
  %37 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %35, i64 %34
  %38 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo"* %37 to i64
  tail call void @_ZNSt3__19allocatorIN3jxl4jpeg12JPEGScanInfoEE9constructIS3_JRKS3_EEEvPT_DpOT0_(%"class.std::__1::allocator.65"* %4, %"struct.jxl::jpeg::JPEGScanInfo"* %36, %"struct.jxl::jpeg::JPEGScanInfo"* dereferenceable(120) %1) #9
  %39 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %36, i64 1
  %40 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo"* %39 to i64
  %41 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %0, i64 0, i32 0, i32 0
  %42 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %41, align 8
  %43 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %5, align 8
  %44 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %43, %42
  br i1 %44, label %45, label %47

45:                                               ; preds = %33
  %46 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo"* %42 to i64
  br label %92

47:                                               ; preds = %33, %47
  %48 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %50, %47 ], [ %36, %33 ]
  %49 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %51, %47 ], [ %43, %33 ]
  %50 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %48, i64 -1
  %51 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %49, i64 -1
  %52 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"* %50 to i8*
  %53 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"* %51 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 72, i1 false) #9
  %54 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %48, i64 -1, i32 7
  %55 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %49, i64 -1, i32 7
  %56 = bitcast %"class.std::__1::vector.48"* %54 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 24, i1 false) #9
  %57 = bitcast %"class.std::__1::vector.48"* %55 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = bitcast %"class.std::__1::vector.48"* %54 to i64*
  store i64 %58, i64* %59, align 8
  %60 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %49, i64 -1, i32 7, i32 0, i32 1
  %61 = bitcast i32** %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %48, i64 -1, i32 7, i32 0, i32 1
  %64 = bitcast i32** %63 to i64*
  store i64 %62, i64* %64, align 8
  %65 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %49, i64 -1, i32 7, i32 0, i32 2, i32 0, i32 0
  %66 = bitcast i32** %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %48, i64 -1, i32 7, i32 0, i32 2, i32 0, i32 0
  %69 = bitcast i32** %68 to i64*
  store i64 %67, i64* %69, align 8
  %70 = bitcast %"class.std::__1::vector.48"* %55 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %70, i8 0, i64 24, i1 false) #9
  %71 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %48, i64 -1, i32 8
  %72 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %49, i64 -1, i32 8
  %73 = bitcast %"class.std::__1::vector.55"* %71 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %73, i8 0, i64 24, i1 false) #9
  %74 = bitcast %"class.std::__1::vector.55"* %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast %"class.std::__1::vector.55"* %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %49, i64 -1, i32 8, i32 0, i32 1
  %78 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %48, i64 -1, i32 8, i32 0, i32 1
  %81 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %80 to i64*
  store i64 %79, i64* %81, align 8
  %82 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %49, i64 -1, i32 8, i32 0, i32 2, i32 0, i32 0
  %83 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %48, i64 -1, i32 8, i32 0, i32 2, i32 0, i32 0
  %86 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %85 to i64*
  store i64 %84, i64* %86, align 8
  %87 = bitcast %"class.std::__1::vector.55"* %72 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %87, i8 0, i64 24, i1 false) #9
  %88 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %51, %42
  br i1 %88, label %89, label %47

89:                                               ; preds = %47
  %90 = load i64, i64* %8, align 8
  %91 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %5, align 8
  br label %92

92:                                               ; preds = %45, %89
  %93 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %42, %45 ], [ %91, %89 ]
  %94 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %36, %45 ], [ %50, %89 ]
  %95 = phi i64 [ %46, %45 ], [ %90, %89 ]
  %96 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo"* %94 to i64
  store i64 %96, i64* %8, align 8
  store i64 %40, i64* %6, align 8
  store i64 %38, i64* %18, align 8
  %97 = inttoptr i64 %95 to %"struct.jxl::jpeg::JPEGScanInfo"*
  %98 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %93, %97
  br i1 %98, label %121, label %99

99:                                               ; preds = %92, %119
  %100 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %101, %119 ], [ %93, %92 ]
  %101 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %100, i64 -1
  %102 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %100, i64 -1, i32 8, i32 0, i32 0
  %103 = load %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %102, align 8
  %104 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %103 to i64
  %107 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %100, i64 -1, i32 8, i32 0, i32 1
  %108 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %107 to i64*
  store i64 %106, i64* %108, align 8
  %109 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %103 to i8*
  tail call void @_ZdlPv(i8* %109) #8
  br label %110

110:                                              ; preds = %105, %99
  %111 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %100, i64 -1, i32 7, i32 0, i32 0
  %112 = load i32*, i32** %111, align 8
  %113 = icmp eq i32* %112, null
  br i1 %113, label %119, label %114

114:                                              ; preds = %110
  %115 = ptrtoint i32* %112 to i64
  %116 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %100, i64 -1, i32 7, i32 0, i32 1
  %117 = bitcast i32** %116 to i64*
  store i64 %115, i64* %117, align 8
  %118 = bitcast i32* %112 to i8*
  tail call void @_ZdlPv(i8* %118) #8
  br label %119

119:                                              ; preds = %114, %110
  %120 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %101, %97
  br i1 %120, label %121, label %99

121:                                              ; preds = %119, %92
  %122 = icmp eq i64 %95, 0
  br i1 %122, label %125, label %123

123:                                              ; preds = %121
  %124 = inttoptr i64 %95 to i8*
  tail call void @_ZdlPv(i8* %124) #8
  br label %125

125:                                              ; preds = %121, %123
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__19allocatorIN3jxl4jpeg12JPEGScanInfoEE9constructIS3_JRKS3_EEEvPT_DpOT0_(%"class.std::__1::allocator.65"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"* dereferenceable(120)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"* %1 to i8*
  %5 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 72, i1 false) #9
  %6 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 7
  %7 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %2, i64 0, i32 7
  %8 = bitcast %"class.std::__1::vector.48"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #9
  %9 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %2, i64 0, i32 7, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector.48"* %7 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = ashr exact i64 %14, 2
  %16 = icmp eq i64 %14, 0
  br i1 %16, label %44, label %17

17:                                               ; preds = %3
  %18 = icmp ugt i64 %15, 4611686018427387903
  br i1 %18, label %19, label %21

19:                                               ; preds = %17
  %20 = bitcast %"class.std::__1::vector.48"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %20) #10
  unreachable

21:                                               ; preds = %17
  %22 = tail call i8* @_Znwm(i64 %14) #8
  %23 = bitcast i8* %22 to i32*
  %24 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 7, i32 0, i32 1
  %25 = bitcast i32** %24 to i8**
  store i8* %22, i8** %25, align 8
  %26 = bitcast %"class.std::__1::vector.48"* %6 to i8**
  store i8* %22, i8** %26, align 8
  %27 = getelementptr inbounds i32, i32* %23, i64 %15
  %28 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 7, i32 0, i32 2, i32 0, i32 0
  store i32* %27, i32** %28, align 8
  %29 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %7, i64 0, i32 0, i32 0
  %30 = load i32*, i32** %29, align 8
  %31 = load i64, i64* %10, align 8
  %32 = bitcast i32** %24 to i64*
  %33 = ptrtoint i8* %22 to i64
  %34 = ptrtoint i32* %30 to i64
  %35 = sub i64 %31, %34
  %36 = icmp sgt i64 %35, 0
  br i1 %36, label %37, label %42

37:                                               ; preds = %21
  %38 = lshr exact i64 %35, 2
  %39 = bitcast i32* %30 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %22, i8* align 4 %39, i64 %35, i1 false) #9
  %40 = getelementptr inbounds i32, i32* %23, i64 %38
  %41 = ptrtoint i32* %40 to i64
  br label %42

42:                                               ; preds = %37, %21
  %43 = phi i64 [ %41, %37 ], [ %33, %21 ]
  store i64 %43, i64* %32, align 8
  br label %44

44:                                               ; preds = %42, %3
  %45 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 8
  %46 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %2, i64 0, i32 8
  %47 = bitcast %"class.std::__1::vector.55"* %45 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 24, i1 false) #9
  %48 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %2, i64 0, i32 8, i32 0, i32 1
  %49 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = bitcast %"class.std::__1::vector.55"* %46 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %50, %52
  %54 = ashr exact i64 %53, 3
  %55 = icmp eq i64 %53, 0
  br i1 %55, label %83, label %56

56:                                               ; preds = %44
  %57 = icmp ugt i64 %54, 2305843009213693951
  br i1 %57, label %58, label %60

58:                                               ; preds = %56
  %59 = bitcast %"class.std::__1::vector.55"* %45 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %59) #10
  unreachable

60:                                               ; preds = %56
  %61 = tail call i8* @_Znwm(i64 %53) #8
  %62 = bitcast i8* %61 to %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*
  %63 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 8, i32 0, i32 1
  %64 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %63 to i8**
  store i8* %61, i8** %64, align 8
  %65 = bitcast %"class.std::__1::vector.55"* %45 to i8**
  store i8* %61, i8** %65, align 8
  %66 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %62, i64 %54
  %67 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %66, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %67, align 8
  %68 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %46, i64 0, i32 0, i32 0
  %69 = load %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %68, align 8
  %70 = load i64, i64* %49, align 8
  %71 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %63 to i64*
  %72 = ptrtoint i8* %61 to i64
  %73 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %69 to i64
  %74 = sub i64 %70, %73
  %75 = icmp sgt i64 %74, 0
  br i1 %75, label %76, label %81

76:                                               ; preds = %60
  %77 = lshr exact i64 %74, 3
  %78 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %69 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %61, i8* align 4 %78, i64 %74, i1 false) #9
  %79 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %62, i64 %77
  %80 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %79 to i64
  br label %81

81:                                               ; preds = %76, %60
  %82 = phi i64 [ %80, %76 ], [ %72, %60 ]
  store i64 %82, i64* %71, align 8
  br label %83

83:                                               ; preds = %44, %81
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE21__push_back_slow_pathIRKS3_EEvOT_(%"class.std::__1::vector"*, %"class.std::__1::vector.0"* dereferenceable(24)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::vector.0"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 24
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 768614336404564650
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #10
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::vector.0"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 24
  %20 = icmp ult i64 %19, 384307168202282325
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 768614336404564650, %14 ]
  %28 = mul i64 %27, 24
  %29 = tail call i8* @_Znwm(i64 %28) #8
  %30 = bitcast i8* %29 to %"class.std::__1::vector.0"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.std::__1::vector.0"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %33, i64 %9
  %35 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %33, i64 %32
  %36 = ptrtoint %"class.std::__1::vector.0"* %35 to i64
  %37 = bitcast %"class.std::__1::vector.0"* %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 24, i1 false) #9
  %38 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1, i64 0, i32 0, i32 1
  %39 = bitcast i8** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = bitcast %"class.std::__1::vector.0"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %40, %42
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %67, label %45

45:                                               ; preds = %31
  %46 = icmp slt i64 %43, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast %"class.std::__1::vector.0"* %34 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %48) #10
  unreachable

49:                                               ; preds = %45
  %50 = tail call i8* @_Znwm(i64 %43) #8
  %51 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %33, i64 %9, i32 0, i32 1
  store i8* %50, i8** %51, align 8
  %52 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %34, i64 0, i32 0, i32 0
  store i8* %50, i8** %52, align 8
  %53 = getelementptr inbounds i8, i8* %50, i64 %43
  %54 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %33, i64 %9, i32 0, i32 2, i32 0, i32 0
  store i8* %53, i8** %54, align 8
  %55 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1, i64 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = load i64, i64* %39, align 8
  %58 = bitcast i8** %51 to i64*
  %59 = ptrtoint i8* %56 to i64
  %60 = sub i64 %57, %59
  %61 = icmp sgt i64 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %49
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %50, i8* align 1 %56, i64 %60, i1 false) #9
  %63 = getelementptr inbounds i8, i8* %50, i64 %60
  br label %64

64:                                               ; preds = %62, %49
  %65 = phi i8* [ %63, %62 ], [ %50, %49 ]
  %66 = ptrtoint i8* %65 to i64
  store i64 %66, i64* %58, align 8
  br label %67

67:                                               ; preds = %31, %64
  %68 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %34, i64 1
  %69 = ptrtoint %"class.std::__1::vector.0"* %68 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %71 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %70, align 8
  %72 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %3, align 8
  %73 = icmp eq %"class.std::__1::vector.0"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"class.std::__1::vector.0"* %71 to i64
  br label %100

76:                                               ; preds = %67, %76
  %77 = phi %"class.std::__1::vector.0"* [ %79, %76 ], [ %34, %67 ]
  %78 = phi %"class.std::__1::vector.0"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %78, i64 -1
  %81 = bitcast %"class.std::__1::vector.0"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #9
  %82 = bitcast %"class.std::__1::vector.0"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.std::__1::vector.0"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %78, i64 -1, i32 0, i32 1
  %86 = bitcast i8** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %77, i64 -1, i32 0, i32 1
  %89 = bitcast i8** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %78, i64 -1, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast i8** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %77, i64 -1, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast i8** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.std::__1::vector.0"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #9
  %96 = icmp eq %"class.std::__1::vector.0"* %80, %71
  br i1 %96, label %97, label %76

97:                                               ; preds = %76
  %98 = load i64, i64* %6, align 8
  %99 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %3, align 8
  br label %100

100:                                              ; preds = %74, %97
  %101 = phi %"class.std::__1::vector.0"* [ %71, %74 ], [ %99, %97 ]
  %102 = phi %"class.std::__1::vector.0"* [ %34, %74 ], [ %79, %97 ]
  %103 = phi i64 [ %75, %74 ], [ %98, %97 ]
  %104 = ptrtoint %"class.std::__1::vector.0"* %102 to i64
  store i64 %104, i64* %6, align 8
  store i64 %69, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %105 = inttoptr i64 %103 to %"class.std::__1::vector.0"*
  %106 = icmp eq %"class.std::__1::vector.0"* %101, %105
  br i1 %106, label %119, label %107

107:                                              ; preds = %100, %117
  %108 = phi %"class.std::__1::vector.0"* [ %109, %117 ], [ %101, %100 ]
  %109 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %108, i64 -1
  %110 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %109, i64 0, i32 0, i32 0
  %111 = load i8*, i8** %110, align 8
  %112 = icmp eq i8* %111, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = ptrtoint i8* %111 to i64
  %115 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %108, i64 -1, i32 0, i32 1
  %116 = bitcast i8** %115 to i64*
  store i64 %114, i64* %116, align 8
  tail call void @_ZdlPv(i8* nonnull %111) #8
  br label %117

117:                                              ; preds = %113, %107
  %118 = icmp eq %"class.std::__1::vector.0"* %109, %105
  br i1 %118, label %119, label %107

119:                                              ; preds = %117, %100
  %120 = icmp eq i64 %103, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %103 to i8*
  tail call void @_ZdlPv(i8* %122) #8
  br label %123

123:                                              ; preds = %119, %121
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE24__emplace_back_slow_pathIJPKhS8_EEEvDpOT_(%"class.std::__1::vector"*, i8** dereferenceable(8), i8** dereferenceable(8)) local_unnamed_addr #7 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %5 = bitcast %"class.std::__1::vector.0"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector"* %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 24
  %11 = add nsw i64 %10, 1
  %12 = icmp ugt i64 %11, 768614336404564650
  br i1 %12, label %13, label %15

13:                                               ; preds = %3
  %14 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %14) #10
  unreachable

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast %"class.std::__1::vector.0"** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %8
  %20 = sdiv exact i64 %19, 24
  %21 = icmp ult i64 %20, 384307168202282325
  br i1 %21, label %22, label %27

22:                                               ; preds = %15
  %23 = shl nsw i64 %20, 1
  %24 = icmp ult i64 %23, %11
  %25 = select i1 %24, i64 %11, i64 %23
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %15, %22
  %28 = phi i64 [ %25, %22 ], [ 768614336404564650, %15 ]
  %29 = mul i64 %28, 24
  %30 = tail call i8* @_Znwm(i64 %29) #8
  %31 = bitcast i8* %30 to %"class.std::__1::vector.0"*
  br label %32

32:                                               ; preds = %22, %27
  %33 = phi i64 [ %28, %27 ], [ 0, %22 ]
  %34 = phi %"class.std::__1::vector.0"* [ %31, %27 ], [ null, %22 ]
  %35 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %34, i64 %10
  %36 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %34, i64 %33
  %37 = ptrtoint %"class.std::__1::vector.0"* %36 to i64
  %38 = load i8*, i8** %1, align 8
  %39 = bitcast i8** %2 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = bitcast %"class.std::__1::vector.0"* %35 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 24, i1 false) #9
  %42 = ptrtoint i8* %38 to i64
  %43 = sub i64 %40, %42
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %57, label %45

45:                                               ; preds = %32
  %46 = icmp slt i64 %43, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast %"class.std::__1::vector.0"* %35 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %48) #10
  unreachable

49:                                               ; preds = %45
  %50 = tail call i8* @_Znwm(i64 %43) #8
  %51 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %34, i64 %10, i32 0, i32 1
  store i8* %50, i8** %51, align 8
  %52 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %35, i64 0, i32 0, i32 0
  store i8* %50, i8** %52, align 8
  %53 = getelementptr inbounds i8, i8* %50, i64 %43
  %54 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %34, i64 %10, i32 0, i32 2, i32 0, i32 0
  store i8* %53, i8** %54, align 8
  %55 = bitcast i8** %51 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %50, i8* align 1 %38, i64 %43, i1 false) #9
  %56 = ptrtoint i8* %53 to i64
  store i64 %56, i64* %55, align 8
  br label %57

57:                                               ; preds = %32, %49
  %58 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %35, i64 1
  %59 = ptrtoint %"class.std::__1::vector.0"* %58 to i64
  %60 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %61 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %60, align 8
  %62 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %4, align 8
  %63 = icmp eq %"class.std::__1::vector.0"* %62, %61
  br i1 %63, label %64, label %66

64:                                               ; preds = %57
  %65 = ptrtoint %"class.std::__1::vector.0"* %61 to i64
  br label %90

66:                                               ; preds = %57, %66
  %67 = phi %"class.std::__1::vector.0"* [ %69, %66 ], [ %35, %57 ]
  %68 = phi %"class.std::__1::vector.0"* [ %70, %66 ], [ %62, %57 ]
  %69 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %67, i64 -1
  %70 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %68, i64 -1
  %71 = bitcast %"class.std::__1::vector.0"* %69 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %71, i8 0, i64 24, i1 false) #9
  %72 = bitcast %"class.std::__1::vector.0"* %70 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = bitcast %"class.std::__1::vector.0"* %69 to i64*
  store i64 %73, i64* %74, align 8
  %75 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %68, i64 -1, i32 0, i32 1
  %76 = bitcast i8** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %67, i64 -1, i32 0, i32 1
  %79 = bitcast i8** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %68, i64 -1, i32 0, i32 2, i32 0, i32 0
  %81 = bitcast i8** %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %67, i64 -1, i32 0, i32 2, i32 0, i32 0
  %84 = bitcast i8** %83 to i64*
  store i64 %82, i64* %84, align 8
  %85 = bitcast %"class.std::__1::vector.0"* %70 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %85, i8 0, i64 24, i1 false) #9
  %86 = icmp eq %"class.std::__1::vector.0"* %70, %61
  br i1 %86, label %87, label %66

87:                                               ; preds = %66
  %88 = load i64, i64* %7, align 8
  %89 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %4, align 8
  br label %90

90:                                               ; preds = %64, %87
  %91 = phi %"class.std::__1::vector.0"* [ %61, %64 ], [ %89, %87 ]
  %92 = phi %"class.std::__1::vector.0"* [ %35, %64 ], [ %69, %87 ]
  %93 = phi i64 [ %65, %64 ], [ %88, %87 ]
  %94 = ptrtoint %"class.std::__1::vector.0"* %92 to i64
  store i64 %94, i64* %7, align 8
  store i64 %59, i64* %5, align 8
  store i64 %37, i64* %17, align 8
  %95 = inttoptr i64 %93 to %"class.std::__1::vector.0"*
  %96 = icmp eq %"class.std::__1::vector.0"* %91, %95
  br i1 %96, label %109, label %97

97:                                               ; preds = %90, %107
  %98 = phi %"class.std::__1::vector.0"* [ %99, %107 ], [ %91, %90 ]
  %99 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %98, i64 -1
  %100 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %99, i64 0, i32 0, i32 0
  %101 = load i8*, i8** %100, align 8
  %102 = icmp eq i8* %101, null
  br i1 %102, label %107, label %103

103:                                              ; preds = %97
  %104 = ptrtoint i8* %101 to i64
  %105 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %98, i64 -1, i32 0, i32 1
  %106 = bitcast i8** %105 to i64*
  store i64 %104, i64* %106, align 8
  tail call void @_ZdlPv(i8* nonnull %101) #8
  br label %107

107:                                              ; preds = %103, %97
  %108 = icmp eq %"class.std::__1::vector.0"* %99, %95
  br i1 %108, label %109, label %97

109:                                              ; preds = %107, %90
  %110 = icmp eq i64 %93, 0
  br i1 %110, label %113, label %111

111:                                              ; preds = %109
  %112 = inttoptr i64 %93 to i8*
  tail call void @_ZdlPv(i8* %112) #8
  br label %113

113:                                              ; preds = %109, %111
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { builtin nounwind }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
