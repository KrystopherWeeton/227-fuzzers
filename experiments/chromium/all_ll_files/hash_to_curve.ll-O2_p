; ModuleID = '../../third_party/boringssl/src/crypto/ec_extra/hash_to_curve.c'
source_filename = "../../third_party/boringssl/src/crypto/ec_extra/hash_to_curve.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ec_group_st = type { %struct.ec_method_st*, %struct.ec_point_st*, %struct.bignum_st, i32, %struct.bn_mont_ctx_st*, %struct.bignum_st, %union.EC_FELEM, %union.EC_FELEM, i32, i32, %union.EC_FELEM, i32, %struct.bn_mont_ctx_st*, %union.EC_FELEM }
%struct.ec_method_st = type { i32 (%struct.ec_group_st*)*, void (%struct.ec_group_st*)*, i32 (%struct.ec_group_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*)*, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_FELEM*, %union.EC_FELEM*)*, i32 (%struct.ec_group_st*, %struct.EC_AFFINE*, %struct.EC_RAW_POINT*, i64)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, i64)*, i32 (%struct.ec_group_st*, %union.EC_PRECOMP*, %struct.EC_RAW_POINT*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_PRECOMP*, %union.EC_SCALAR*, %union.EC_PRECOMP*, %union.EC_SCALAR*, %union.EC_PRECOMP*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*, %union.EC_FELEM*)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*)*, void (%struct.ec_group_st*, i8*, i64*, %union.EC_FELEM*)*, i32 (%struct.ec_group_st*, %union.EC_FELEM*, i8*, i64)*, void (%struct.ec_group_st*, %union.EC_FELEM*, i64*, i64)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*, i64*, i64)*, void (%struct.ec_group_st*, %union.EC_SCALAR*, %union.EC_SCALAR*)*, i32 (%struct.ec_group_st*, %union.EC_SCALAR*, %union.EC_SCALAR*)*, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)* }
%struct.bignum_ctx = type opaque
%struct.EC_AFFINE = type { %union.EC_FELEM, %union.EC_FELEM }
%union.EC_SCALAR = type { [9 x i64] }
%union.EC_PRECOMP = type { [31 x %struct.EC_AFFINE] }
%struct.ec_point_st = type { %struct.ec_group_st*, %struct.EC_RAW_POINT }
%struct.EC_RAW_POINT = type { %union.EC_FELEM, %union.EC_FELEM, %union.EC_FELEM }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%struct.bn_mont_ctx_st = type { %struct.bignum_st, %struct.bignum_st, [2 x i64] }
%union.EC_FELEM = type { [9 x i64] }
%struct.env_md_st = type opaque
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%struct.engine_st = type opaque

@.str = private unnamed_addr constant [64 x i8] c"../../third_party/boringssl/src/crypto/ec_extra/hash_to_curve.c\00", align 1
@ec_hash_to_curve_p384_xmd_sha512_sswu_draft07.kSqrt1728 = internal constant [48 x i8] c"\01\98w\CC\10A\B7UWC\C0\AE.:>a\FB*\AA.\0E\87\EAUzV=\8BY\8A\09@\D0\A6\97\A9\E0\B9\E9,\FA\A3\14\F5\83\C9\D0f", align 16
@expand_message_xmd.kPrefix = internal constant [18 x i8] c"H2C-OVERSIZE-DST-\00", align 16
@expand_message_xmd.kZeros = internal constant [128 x i8] zeroinitializer, align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ec_hash_to_curve_p384_xmd_sha512_sswu_draft07(%struct.ec_group_st*, %struct.EC_RAW_POINT*, i8*, i64, i8*, i64) local_unnamed_addr #0 {
  %7 = alloca [264 x i8], align 16
  %8 = alloca [18 x i64], align 16
  %9 = alloca %union.EC_FELEM, align 8
  %10 = alloca %union.EC_FELEM, align 8
  %11 = alloca [9 x i64], align 16
  %12 = alloca %struct.EC_RAW_POINT, align 8
  %13 = alloca %struct.EC_RAW_POINT, align 8
  %14 = alloca [66 x i8], align 16
  %15 = alloca %union.EC_FELEM, align 8
  %16 = alloca %union.EC_FELEM, align 8
  %17 = tail call i32 @EC_GROUP_get_curve_name(%struct.ec_group_st* %0) #3
  %18 = icmp eq i32 %17, 715
  br i1 %18, label %20, label %19

19:                                               ; preds = %6
  tail call void @ERR_put_error(i32 15, i32 0, i32 130, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0), i32 344) #3
  br label %268

20:                                               ; preds = %6
  %21 = bitcast %union.EC_FELEM* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %21) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 -86, i64 72, i1 false)
  %22 = bitcast %union.EC_FELEM* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %22) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 72, i1 false)
  %23 = getelementptr inbounds [66 x i8], [66 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 66, i8* nonnull %23) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 66, i1 false) #3
  %24 = getelementptr inbounds %struct.ec_group_st, %struct.ec_group_st* %0, i64 0, i32 5
  %25 = tail call i32 @BN_num_bytes(%struct.bignum_st* %24) #3
  %26 = zext i32 %25 to i64
  %27 = add nsw i64 %26, -1
  %28 = getelementptr inbounds [66 x i8], [66 x i8]* %14, i64 0, i64 %27
  store i8 12, i8* %28, align 1
  %29 = call i32 @ec_felem_from_bytes(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %15, i8* nonnull %23, i64 %26) #3
  call void @llvm.lifetime.end.p0i8(i64 66, i8* nonnull %23) #3
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %266, label %31

31:                                               ; preds = %20
  %32 = call i32 @ec_felem_from_bytes(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %16, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @ec_hash_to_curve_p384_xmd_sha512_sswu_draft07.kSqrt1728, i64 0, i64 0), i64 48) #3
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %266, label %34

34:                                               ; preds = %31
  call void @ec_felem_neg(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %15, %union.EC_FELEM* nonnull %15) #3
  %35 = call %struct.env_md_st* @EVP_sha512() #3
  %36 = bitcast %union.EC_FELEM* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %36) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 -86, i64 72, i1 false) #3
  %37 = bitcast %union.EC_FELEM* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %37) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %37, i8 -86, i64 72, i1 false) #3
  %38 = getelementptr inbounds [264 x i8], [264 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 264, i8* nonnull %38) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 -86, i64 264, i1 false) #3
  %39 = call i32 @BN_num_bits(%struct.bignum_st* %24) #3
  %40 = zext i32 %39 to i64
  %41 = add nuw nsw i64 %40, 199
  %42 = and i64 %41, 8589934584
  %43 = shl nuw nsw i64 %40, 1
  %44 = add nsw i64 %43, -2
  %45 = icmp uge i64 %42, %44
  %46 = icmp ugt i64 %41, 1063
  %47 = or i1 %46, %45
  br i1 %47, label %48, label %49

48:                                               ; preds = %34
  call void @ERR_put_error(i32 15, i32 0, i32 68, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0), i32 147) #3
  br label %237

49:                                               ; preds = %34
  %50 = lshr i64 %41, 3
  %51 = shl nuw nsw i64 %50, 1
  %52 = call fastcc i32 @expand_message_xmd(%struct.env_md_st* %35, i8* nonnull %38, i64 %51, i8* %4, i64 %5, i8* %2, i64 %3) #3
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %237, label %54

54:                                               ; preds = %49
  %55 = bitcast [18 x i64]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %55) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %55, i8 -86, i64 144, i1 false) #3
  %56 = getelementptr inbounds %struct.ec_group_st, %struct.ec_group_st* %0, i64 0, i32 5, i32 1
  %57 = load i32, i32* %56, align 8
  %58 = shl nsw i32 %57, 1
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [18 x i64], [18 x i64]* %8, i64 0, i64 0
  %61 = shl nsw i64 %59, 3
  %62 = icmp eq i32 %57, 0
  br i1 %62, label %64, label %63

63:                                               ; preds = %54
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %55, i8 0, i64 %61, i1 false) #3
  br label %64

64:                                               ; preds = %63, %54
  %65 = icmp ult i64 %41, 256
  br i1 %65, label %136, label %66

66:                                               ; preds = %64
  %67 = and i64 %50, 1073741792
  %68 = add nsw i64 %67, -32
  %69 = lshr exact i64 %68, 5
  %70 = add nuw nsw i64 %69, 1
  %71 = and i64 %70, 1
  %72 = icmp eq i64 %68, 0
  br i1 %72, label %114, label %73

73:                                               ; preds = %66
  %74 = sub nuw nsw i64 %70, %71
  br label %75

75:                                               ; preds = %75, %73
  %76 = phi i64 [ 0, %73 ], [ %111, %75 ]
  %77 = phi i64 [ %74, %73 ], [ %112, %75 ]
  %78 = getelementptr inbounds [264 x i8], [264 x i8]* %7, i64 0, i64 %76
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 16
  %81 = getelementptr inbounds i8, i8* %78, i64 16
  %82 = bitcast i8* %81 to <16 x i8>*
  %83 = load <16 x i8>, <16 x i8>* %82, align 16
  %84 = xor i64 %76, -1
  %85 = add nsw i64 %50, %84
  %86 = getelementptr inbounds i8, i8* %55, i64 %85
  %87 = shufflevector <16 x i8> %80, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %88 = getelementptr inbounds i8, i8* %86, i64 -15
  %89 = bitcast i8* %88 to <16 x i8>*
  store <16 x i8> %87, <16 x i8>* %89, align 1
  %90 = shufflevector <16 x i8> %83, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %91 = getelementptr inbounds i8, i8* %86, i64 -16
  %92 = getelementptr inbounds i8, i8* %91, i64 -15
  %93 = bitcast i8* %92 to <16 x i8>*
  store <16 x i8> %90, <16 x i8>* %93, align 1
  %94 = or i64 %76, 32
  %95 = getelementptr inbounds [264 x i8], [264 x i8]* %7, i64 0, i64 %94
  %96 = bitcast i8* %95 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 16
  %98 = getelementptr inbounds i8, i8* %95, i64 16
  %99 = bitcast i8* %98 to <16 x i8>*
  %100 = load <16 x i8>, <16 x i8>* %99, align 16
  %101 = sub nuw nsw i64 -33, %76
  %102 = add nsw i64 %50, %101
  %103 = getelementptr inbounds i8, i8* %55, i64 %102
  %104 = shufflevector <16 x i8> %97, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %105 = getelementptr inbounds i8, i8* %103, i64 -15
  %106 = bitcast i8* %105 to <16 x i8>*
  store <16 x i8> %104, <16 x i8>* %106, align 1
  %107 = shufflevector <16 x i8> %100, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %108 = getelementptr inbounds i8, i8* %103, i64 -16
  %109 = getelementptr inbounds i8, i8* %108, i64 -15
  %110 = bitcast i8* %109 to <16 x i8>*
  store <16 x i8> %107, <16 x i8>* %110, align 1
  %111 = add i64 %76, 64
  %112 = add i64 %77, -2
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %75, !llvm.loop !2

114:                                              ; preds = %75, %66
  %115 = phi i64 [ 0, %66 ], [ %111, %75 ]
  %116 = icmp eq i64 %71, 0
  br i1 %116, label %134, label %117

117:                                              ; preds = %114
  %118 = getelementptr inbounds [264 x i8], [264 x i8]* %7, i64 0, i64 %115
  %119 = bitcast i8* %118 to <16 x i8>*
  %120 = load <16 x i8>, <16 x i8>* %119, align 16
  %121 = getelementptr inbounds i8, i8* %118, i64 16
  %122 = bitcast i8* %121 to <16 x i8>*
  %123 = load <16 x i8>, <16 x i8>* %122, align 16
  %124 = xor i64 %115, -1
  %125 = add nsw i64 %50, %124
  %126 = getelementptr inbounds i8, i8* %55, i64 %125
  %127 = shufflevector <16 x i8> %120, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %128 = getelementptr inbounds i8, i8* %126, i64 -15
  %129 = bitcast i8* %128 to <16 x i8>*
  store <16 x i8> %127, <16 x i8>* %129, align 1
  %130 = shufflevector <16 x i8> %123, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %131 = getelementptr inbounds i8, i8* %126, i64 -16
  %132 = getelementptr inbounds i8, i8* %131, i64 -15
  %133 = bitcast i8* %132 to <16 x i8>*
  store <16 x i8> %130, <16 x i8>* %133, align 1
  br label %134

134:                                              ; preds = %114, %117
  %135 = icmp eq i64 %50, %67
  br i1 %135, label %147, label %136

136:                                              ; preds = %134, %64
  %137 = phi i64 [ 0, %64 ], [ %67, %134 ]
  br label %138

138:                                              ; preds = %136, %138
  %139 = phi i64 [ %145, %138 ], [ %137, %136 ]
  %140 = getelementptr inbounds [264 x i8], [264 x i8]* %7, i64 0, i64 %139
  %141 = load i8, i8* %140, align 1
  %142 = xor i64 %139, -1
  %143 = add nsw i64 %50, %142
  %144 = getelementptr inbounds i8, i8* %55, i64 %143
  store i8 %141, i8* %144, align 1
  %145 = add nuw nsw i64 %139, 1
  %146 = icmp eq i64 %145, %50
  br i1 %146, label %147, label %138, !llvm.loop !4

147:                                              ; preds = %138, %134
  %148 = getelementptr inbounds %struct.ec_group_st, %struct.ec_group_st* %0, i64 0, i32 0
  %149 = load %struct.ec_method_st*, %struct.ec_method_st** %148, align 8
  %150 = getelementptr inbounds %struct.ec_method_st, %struct.ec_method_st* %149, i64 0, i32 18
  %151 = load void (%struct.ec_group_st*, %union.EC_FELEM*, i64*, i64)*, void (%struct.ec_group_st*, %union.EC_FELEM*, i64*, i64)** %150, align 8
  call void %151(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %9, i64* nonnull %60, i64 %59) #3
  %152 = getelementptr inbounds [264 x i8], [264 x i8]* %7, i64 0, i64 %50
  br i1 %62, label %154, label %153

153:                                              ; preds = %147
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %55, i8 0, i64 %61, i1 false) #3
  br label %154

154:                                              ; preds = %153, %147
  %155 = icmp ult i64 %41, 256
  br i1 %155, label %226, label %156

156:                                              ; preds = %154
  %157 = and i64 %50, 1073741792
  %158 = add nsw i64 %157, -32
  %159 = lshr exact i64 %158, 5
  %160 = add nuw nsw i64 %159, 1
  %161 = and i64 %160, 1
  %162 = icmp eq i64 %158, 0
  br i1 %162, label %204, label %163

163:                                              ; preds = %156
  %164 = sub nuw nsw i64 %160, %161
  br label %165

165:                                              ; preds = %165, %163
  %166 = phi i64 [ 0, %163 ], [ %201, %165 ]
  %167 = phi i64 [ %164, %163 ], [ %202, %165 ]
  %168 = getelementptr inbounds i8, i8* %152, i64 %166
  %169 = bitcast i8* %168 to <16 x i8>*
  %170 = load <16 x i8>, <16 x i8>* %169, align 1
  %171 = getelementptr inbounds i8, i8* %168, i64 16
  %172 = bitcast i8* %171 to <16 x i8>*
  %173 = load <16 x i8>, <16 x i8>* %172, align 1
  %174 = xor i64 %166, -1
  %175 = add nsw i64 %50, %174
  %176 = getelementptr inbounds i8, i8* %55, i64 %175
  %177 = shufflevector <16 x i8> %170, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %178 = getelementptr inbounds i8, i8* %176, i64 -15
  %179 = bitcast i8* %178 to <16 x i8>*
  store <16 x i8> %177, <16 x i8>* %179, align 1
  %180 = shufflevector <16 x i8> %173, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %181 = getelementptr inbounds i8, i8* %176, i64 -16
  %182 = getelementptr inbounds i8, i8* %181, i64 -15
  %183 = bitcast i8* %182 to <16 x i8>*
  store <16 x i8> %180, <16 x i8>* %183, align 1
  %184 = or i64 %166, 32
  %185 = getelementptr inbounds i8, i8* %152, i64 %184
  %186 = bitcast i8* %185 to <16 x i8>*
  %187 = load <16 x i8>, <16 x i8>* %186, align 1
  %188 = getelementptr inbounds i8, i8* %185, i64 16
  %189 = bitcast i8* %188 to <16 x i8>*
  %190 = load <16 x i8>, <16 x i8>* %189, align 1
  %191 = sub nuw nsw i64 -33, %166
  %192 = add nsw i64 %50, %191
  %193 = getelementptr inbounds i8, i8* %55, i64 %192
  %194 = shufflevector <16 x i8> %187, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %195 = getelementptr inbounds i8, i8* %193, i64 -15
  %196 = bitcast i8* %195 to <16 x i8>*
  store <16 x i8> %194, <16 x i8>* %196, align 1
  %197 = shufflevector <16 x i8> %190, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %198 = getelementptr inbounds i8, i8* %193, i64 -16
  %199 = getelementptr inbounds i8, i8* %198, i64 -15
  %200 = bitcast i8* %199 to <16 x i8>*
  store <16 x i8> %197, <16 x i8>* %200, align 1
  %201 = add i64 %166, 64
  %202 = add i64 %167, -2
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %204, label %165, !llvm.loop !6

204:                                              ; preds = %165, %156
  %205 = phi i64 [ 0, %156 ], [ %201, %165 ]
  %206 = icmp eq i64 %161, 0
  br i1 %206, label %224, label %207

207:                                              ; preds = %204
  %208 = getelementptr inbounds i8, i8* %152, i64 %205
  %209 = bitcast i8* %208 to <16 x i8>*
  %210 = load <16 x i8>, <16 x i8>* %209, align 1
  %211 = getelementptr inbounds i8, i8* %208, i64 16
  %212 = bitcast i8* %211 to <16 x i8>*
  %213 = load <16 x i8>, <16 x i8>* %212, align 1
  %214 = xor i64 %205, -1
  %215 = add nsw i64 %50, %214
  %216 = getelementptr inbounds i8, i8* %55, i64 %215
  %217 = shufflevector <16 x i8> %210, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %218 = getelementptr inbounds i8, i8* %216, i64 -15
  %219 = bitcast i8* %218 to <16 x i8>*
  store <16 x i8> %217, <16 x i8>* %219, align 1
  %220 = shufflevector <16 x i8> %213, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %221 = getelementptr inbounds i8, i8* %216, i64 -16
  %222 = getelementptr inbounds i8, i8* %221, i64 -15
  %223 = bitcast i8* %222 to <16 x i8>*
  store <16 x i8> %220, <16 x i8>* %223, align 1
  br label %224

224:                                              ; preds = %204, %207
  %225 = icmp eq i64 %50, %157
  br i1 %225, label %238, label %226

226:                                              ; preds = %224, %154
  %227 = phi i64 [ 0, %154 ], [ %157, %224 ]
  br label %228

228:                                              ; preds = %226, %228
  %229 = phi i64 [ %235, %228 ], [ %227, %226 ]
  %230 = getelementptr inbounds i8, i8* %152, i64 %229
  %231 = load i8, i8* %230, align 1
  %232 = xor i64 %229, -1
  %233 = add nsw i64 %50, %232
  %234 = getelementptr inbounds i8, i8* %55, i64 %233
  store i8 %231, i8* %234, align 1
  %235 = add nuw nsw i64 %229, 1
  %236 = icmp eq i64 %235, %50
  br i1 %236, label %238, label %228, !llvm.loop !7

237:                                              ; preds = %49, %48
  call void @llvm.lifetime.end.p0i8(i64 264, i8* nonnull %38) #3
  br label %264

238:                                              ; preds = %228, %224
  %239 = load %struct.ec_method_st*, %struct.ec_method_st** %148, align 8
  %240 = getelementptr inbounds %struct.ec_method_st, %struct.ec_method_st* %239, i64 0, i32 18
  %241 = load void (%struct.ec_group_st*, %union.EC_FELEM*, i64*, i64)*, void (%struct.ec_group_st*, %union.EC_FELEM*, i64*, i64)** %240, align 8
  call void %241(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %10, i64* nonnull %60, i64 %59) #3
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %55) #3
  call void @llvm.lifetime.end.p0i8(i64 264, i8* nonnull %38) #3
  %242 = bitcast [9 x i64]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %242) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %242, i8 -86, i64 72, i1 false) #3
  %243 = load i32, i32* %56, align 8
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds [9 x i64], [9 x i64]* %11, i64 0, i64 0
  %246 = call i32 @bn_copy_words(i64* nonnull %245, i64 %244, %struct.bignum_st* %24) #3
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %262, label %248

248:                                              ; preds = %238
  call void @bn_rshift_words(i64* nonnull %245, i64* nonnull %245, i32 2, i64 %244) #3
  %249 = bitcast %struct.EC_RAW_POINT* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %249) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %249, i8 -86, i64 216, i1 false) #3
  %250 = bitcast %struct.EC_RAW_POINT* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %250) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %250, i8 -86, i64 216, i1 false) #3
  %251 = call fastcc i32 @map_to_curve_simple_swu(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %15, i64* nonnull %245, i64 %244, %union.EC_FELEM* nonnull %16, %struct.EC_RAW_POINT* nonnull %12, %union.EC_FELEM* nonnull %9) #3
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %260, label %253

253:                                              ; preds = %248
  %254 = call fastcc i32 @map_to_curve_simple_swu(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %15, i64* nonnull %245, i64 %244, %union.EC_FELEM* nonnull %16, %struct.EC_RAW_POINT* nonnull %13, %union.EC_FELEM* nonnull %10) #3
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %260, label %256

256:                                              ; preds = %253
  %257 = load %struct.ec_method_st*, %struct.ec_method_st** %148, align 8
  %258 = getelementptr inbounds %struct.ec_method_st, %struct.ec_method_st* %257, i64 0, i32 5
  %259 = load void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*)** %258, align 8
  call void %259(%struct.ec_group_st* %0, %struct.EC_RAW_POINT* %1, %struct.EC_RAW_POINT* nonnull %12, %struct.EC_RAW_POINT* nonnull %13) #3
  br label %260

260:                                              ; preds = %256, %253, %248
  %261 = phi i32 [ 1, %256 ], [ 0, %253 ], [ 0, %248 ]
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %250) #3
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %249) #3
  br label %262

262:                                              ; preds = %260, %238
  %263 = phi i32 [ %261, %260 ], [ 0, %238 ]
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %242) #3
  br label %264

264:                                              ; preds = %237, %262
  %265 = phi i32 [ %263, %262 ], [ 0, %237 ]
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %37) #3
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %36) #3
  br label %266

266:                                              ; preds = %20, %31, %264
  %267 = phi i32 [ %265, %264 ], [ 0, %31 ], [ 0, %20 ]
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %22) #3
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %21) #3
  br label %268

268:                                              ; preds = %266, %19
  %269 = phi i32 [ 0, %19 ], [ %267, %266 ]
  ret i32 %269
}

declare i32 @EC_GROUP_get_curve_name(%struct.ec_group_st*) local_unnamed_addr #1

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @ec_felem_from_bytes(%struct.ec_group_st*, %union.EC_FELEM*, i8*, i64) local_unnamed_addr #1

declare void @ec_felem_neg(%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*) local_unnamed_addr #1

declare %struct.env_md_st* @EVP_sha512() local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ec_hash_to_scalar_p384_xmd_sha512_draft07(%struct.ec_group_st*, %union.EC_SCALAR*, i8*, i64, i8*, i64) local_unnamed_addr #0 {
  %7 = alloca [132 x i8], align 16
  %8 = alloca [18 x i64], align 16
  %9 = tail call i32 @EC_GROUP_get_curve_name(%struct.ec_group_st* %0) #3
  %10 = icmp eq i32 %9, 715
  br i1 %10, label %12, label %11

11:                                               ; preds = %6
  tail call void @ERR_put_error(i32 15, i32 0, i32 130, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0), i32 379) #3
  br label %126

12:                                               ; preds = %6
  %13 = tail call %struct.env_md_st* @EVP_sha512() #3
  %14 = getelementptr inbounds [132 x i8], [132 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 132, i8* nonnull %14) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 132, i1 false) #3
  %15 = getelementptr inbounds %struct.ec_group_st, %struct.ec_group_st* %0, i64 0, i32 2
  %16 = tail call i32 @BN_num_bits(%struct.bignum_st* %15) #3
  %17 = zext i32 %16 to i64
  %18 = add nuw nsw i64 %17, 199
  %19 = and i64 %18, 8589934584
  %20 = shl nuw nsw i64 %17, 1
  %21 = add nsw i64 %20, -2
  %22 = icmp uge i64 %19, %21
  %23 = icmp ugt i64 %18, 1063
  %24 = or i1 %23, %22
  br i1 %24, label %25, label %26

25:                                               ; preds = %12
  tail call void @ERR_put_error(i32 15, i32 0, i32 68, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0), i32 147) #3
  br label %124

26:                                               ; preds = %12
  %27 = lshr i64 %18, 3
  %28 = call fastcc i32 @expand_message_xmd(%struct.env_md_st* %13, i8* nonnull %14, i64 %27, i8* %4, i64 %5, i8* %2, i64 %3) #3
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %124, label %30

30:                                               ; preds = %26
  %31 = bitcast [18 x i64]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %31) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %31, i8 -86, i64 144, i1 false) #3
  %32 = getelementptr inbounds %struct.ec_group_st, %struct.ec_group_st* %0, i64 0, i32 2, i32 1
  %33 = load i32, i32* %32, align 8
  %34 = shl nsw i32 %33, 1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [18 x i64], [18 x i64]* %8, i64 0, i64 0
  %37 = icmp eq i32 %33, 0
  br i1 %37, label %40, label %38

38:                                               ; preds = %30
  %39 = shl nsw i64 %35, 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %31, i8 0, i64 %39, i1 false) #3
  br label %40

40:                                               ; preds = %38, %30
  %41 = icmp ult i64 %18, 256
  br i1 %41, label %112, label %42

42:                                               ; preds = %40
  %43 = and i64 %27, 1073741792
  %44 = add nsw i64 %43, -32
  %45 = lshr exact i64 %44, 5
  %46 = add nuw nsw i64 %45, 1
  %47 = and i64 %46, 1
  %48 = icmp eq i64 %44, 0
  br i1 %48, label %90, label %49

49:                                               ; preds = %42
  %50 = sub nuw nsw i64 %46, %47
  br label %51

51:                                               ; preds = %51, %49
  %52 = phi i64 [ 0, %49 ], [ %87, %51 ]
  %53 = phi i64 [ %50, %49 ], [ %88, %51 ]
  %54 = getelementptr inbounds [132 x i8], [132 x i8]* %7, i64 0, i64 %52
  %55 = bitcast i8* %54 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 16
  %57 = getelementptr inbounds i8, i8* %54, i64 16
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 16
  %60 = xor i64 %52, -1
  %61 = add nsw i64 %27, %60
  %62 = getelementptr inbounds i8, i8* %31, i64 %61
  %63 = shufflevector <16 x i8> %56, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %64 = getelementptr inbounds i8, i8* %62, i64 -15
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %63, <16 x i8>* %65, align 1
  %66 = shufflevector <16 x i8> %59, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %67 = getelementptr inbounds i8, i8* %62, i64 -16
  %68 = getelementptr inbounds i8, i8* %67, i64 -15
  %69 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> %66, <16 x i8>* %69, align 1
  %70 = or i64 %52, 32
  %71 = getelementptr inbounds [132 x i8], [132 x i8]* %7, i64 0, i64 %70
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 16
  %74 = getelementptr inbounds i8, i8* %71, i64 16
  %75 = bitcast i8* %74 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 16
  %77 = sub nuw nsw i64 -33, %52
  %78 = add nsw i64 %27, %77
  %79 = getelementptr inbounds i8, i8* %31, i64 %78
  %80 = shufflevector <16 x i8> %73, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %81 = getelementptr inbounds i8, i8* %79, i64 -15
  %82 = bitcast i8* %81 to <16 x i8>*
  store <16 x i8> %80, <16 x i8>* %82, align 1
  %83 = shufflevector <16 x i8> %76, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %84 = getelementptr inbounds i8, i8* %79, i64 -16
  %85 = getelementptr inbounds i8, i8* %84, i64 -15
  %86 = bitcast i8* %85 to <16 x i8>*
  store <16 x i8> %83, <16 x i8>* %86, align 1
  %87 = add i64 %52, 64
  %88 = add i64 %53, -2
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %51, !llvm.loop !8

90:                                               ; preds = %51, %42
  %91 = phi i64 [ 0, %42 ], [ %87, %51 ]
  %92 = icmp eq i64 %47, 0
  br i1 %92, label %110, label %93

93:                                               ; preds = %90
  %94 = getelementptr inbounds [132 x i8], [132 x i8]* %7, i64 0, i64 %91
  %95 = bitcast i8* %94 to <16 x i8>*
  %96 = load <16 x i8>, <16 x i8>* %95, align 16
  %97 = getelementptr inbounds i8, i8* %94, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 16
  %100 = xor i64 %91, -1
  %101 = add nsw i64 %27, %100
  %102 = getelementptr inbounds i8, i8* %31, i64 %101
  %103 = shufflevector <16 x i8> %96, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %104 = getelementptr inbounds i8, i8* %102, i64 -15
  %105 = bitcast i8* %104 to <16 x i8>*
  store <16 x i8> %103, <16 x i8>* %105, align 1
  %106 = shufflevector <16 x i8> %99, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %107 = getelementptr inbounds i8, i8* %102, i64 -16
  %108 = getelementptr inbounds i8, i8* %107, i64 -15
  %109 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %106, <16 x i8>* %109, align 1
  br label %110

110:                                              ; preds = %90, %93
  %111 = icmp eq i64 %27, %43
  br i1 %111, label %123, label %112

112:                                              ; preds = %110, %40
  %113 = phi i64 [ 0, %40 ], [ %43, %110 ]
  br label %114

114:                                              ; preds = %112, %114
  %115 = phi i64 [ %121, %114 ], [ %113, %112 ]
  %116 = getelementptr inbounds [132 x i8], [132 x i8]* %7, i64 0, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = xor i64 %115, -1
  %119 = add nsw i64 %27, %118
  %120 = getelementptr inbounds i8, i8* %31, i64 %119
  store i8 %117, i8* %120, align 1
  %121 = add nuw nsw i64 %115, 1
  %122 = icmp eq i64 %121, %27
  br i1 %122, label %123, label %114, !llvm.loop !9

123:                                              ; preds = %114, %110
  call void @ec_scalar_reduce(%struct.ec_group_st* %0, %union.EC_SCALAR* %1, i64* nonnull %36, i64 %35) #3
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %31) #3
  br label %124

124:                                              ; preds = %25, %26, %123
  %125 = phi i32 [ 1, %123 ], [ 0, %26 ], [ 0, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 132, i8* nonnull %14) #3
  br label %126

126:                                              ; preds = %124, %11
  %127 = phi i32 [ 0, %11 ], [ %125, %124 ]
  ret i32 %127
}

declare i32 @BN_num_bytes(%struct.bignum_st*) local_unnamed_addr #1

declare i32 @bn_copy_words(i64*, i64, %struct.bignum_st*) local_unnamed_addr #1

declare void @bn_rshift_words(i64*, i64*, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @map_to_curve_simple_swu(%struct.ec_group_st*, %union.EC_FELEM*, i64*, i64, %union.EC_FELEM*, %struct.EC_RAW_POINT*, %union.EC_FELEM*) unnamed_addr #0 {
  %8 = alloca i64, align 8
  %9 = alloca [66 x i8], align 16
  %10 = alloca i64, align 8
  %11 = alloca %union.EC_FELEM, align 8
  %12 = alloca %union.EC_FELEM, align 8
  %13 = alloca %union.EC_FELEM, align 8
  %14 = alloca %union.EC_FELEM, align 8
  %15 = alloca %union.EC_FELEM, align 8
  %16 = alloca %union.EC_FELEM, align 8
  %17 = alloca %union.EC_FELEM, align 8
  %18 = alloca %union.EC_FELEM, align 8
  %19 = alloca %union.EC_FELEM, align 8
  %20 = alloca %union.EC_FELEM, align 8
  %21 = alloca %union.EC_FELEM, align 8
  %22 = alloca %union.EC_FELEM, align 8
  %23 = alloca %union.EC_FELEM, align 8
  %24 = alloca %union.EC_FELEM, align 8
  %25 = alloca %union.EC_FELEM, align 8
  %26 = getelementptr inbounds %struct.ec_group_st, %struct.ec_group_st* %0, i64 0, i32 0
  %27 = load %struct.ec_method_st*, %struct.ec_method_st** %26, align 8
  %28 = getelementptr inbounds %struct.ec_method_st, %struct.ec_method_st* %27, i64 0, i32 14
  %29 = load void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*, %union.EC_FELEM*)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*, %union.EC_FELEM*)** %28, align 8
  %30 = getelementptr inbounds %struct.ec_method_st, %struct.ec_method_st* %27, i64 0, i32 15
  %31 = load void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*)** %30, align 8
  %32 = getelementptr inbounds %struct.ec_group_st, %struct.ec_group_st* %0, i64 0, i32 5, i32 1
  %33 = load i32, i32* %32, align 8
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %45, label %35

35:                                               ; preds = %7
  %36 = getelementptr inbounds %struct.ec_group_st, %struct.ec_group_st* %0, i64 0, i32 5, i32 0
  %37 = load i64*, i64** %36, align 8
  %38 = load i64, i64* %37, align 8
  %39 = and i64 %38, 3
  %40 = icmp eq i64 %39, 3
  br i1 %40, label %41, label %45

41:                                               ; preds = %35
  %42 = getelementptr inbounds %struct.ec_group_st, %struct.ec_group_st* %0, i64 0, i32 8
  %43 = load i32, i32* %42, align 8
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %41, %35, %7
  tail call void @ERR_put_error(i32 15, i32 0, i32 68, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0), i32 250) #3
  br label %88

46:                                               ; preds = %41
  %47 = bitcast %union.EC_FELEM* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %47) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %47, i8 -86, i64 72, i1 false)
  %48 = bitcast %union.EC_FELEM* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %48) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %48, i8 -86, i64 72, i1 false)
  %49 = bitcast %union.EC_FELEM* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %49) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 -86, i64 72, i1 false)
  %50 = bitcast %union.EC_FELEM* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %50) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %50, i8 -86, i64 72, i1 false)
  %51 = bitcast %union.EC_FELEM* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %51) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 -86, i64 72, i1 false)
  %52 = bitcast %union.EC_FELEM* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %52) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %52, i8 -86, i64 72, i1 false)
  %53 = bitcast %union.EC_FELEM* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %53) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %53, i8 -86, i64 72, i1 false)
  %54 = bitcast %union.EC_FELEM* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %54) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %54, i8 -86, i64 72, i1 false)
  %55 = bitcast %union.EC_FELEM* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %55) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 -86, i64 72, i1 false)
  %56 = bitcast %union.EC_FELEM* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %56) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %56, i8 -86, i64 72, i1 false)
  %57 = bitcast %union.EC_FELEM* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %57) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 -86, i64 72, i1 false)
  %58 = bitcast %union.EC_FELEM* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %58) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %58, i8 -86, i64 72, i1 false)
  call void %31(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %14, %union.EC_FELEM* %6) #3
  call void %29(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %16, %union.EC_FELEM* %1, %union.EC_FELEM* nonnull %14) #3
  call void %31(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %15, %union.EC_FELEM* nonnull %16) #3
  call void @ec_felem_add(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %18, %union.EC_FELEM* nonnull %15, %union.EC_FELEM* nonnull %16) #3
  %59 = getelementptr inbounds %struct.ec_group_st, %struct.ec_group_st* %0, i64 0, i32 13
  call void @ec_felem_add(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %19, %union.EC_FELEM* nonnull %18, %union.EC_FELEM* %59) #3
  %60 = getelementptr inbounds %struct.ec_group_st, %struct.ec_group_st* %0, i64 0, i32 7
  call void %29(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %19, %union.EC_FELEM* nonnull %19, %union.EC_FELEM* %60) #3
  %61 = bitcast %union.EC_FELEM* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %61) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %61, i8 -86, i64 72, i1 false) #3
  call void @ec_felem_add(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %13, %union.EC_FELEM* nonnull %18, %union.EC_FELEM* nonnull %18) #3
  call void @ec_felem_add(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %18, %union.EC_FELEM* nonnull %13, %union.EC_FELEM* nonnull %18) #3
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %61) #3
  %62 = call i64 @ec_felem_non_zero_mask(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %18) #3
  %63 = bitcast %union.EC_FELEM* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %63) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %63, i8 -86, i64 72, i1 false) #3
  call void @ec_felem_add(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %12, %union.EC_FELEM* %1, %union.EC_FELEM* %1) #3
  call void @ec_felem_add(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %12, %union.EC_FELEM* nonnull %12, %union.EC_FELEM* nonnull %12) #3
  call void @ec_felem_sub(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %21, %union.EC_FELEM* %1, %union.EC_FELEM* nonnull %12) #3
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %63) #3
  call void @ec_felem_select(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %18, i64 %62, %union.EC_FELEM* nonnull %18, %union.EC_FELEM* nonnull %21) #3
  call void %31(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %15, %union.EC_FELEM* nonnull %18) #3
  call void %29(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %22, %union.EC_FELEM* nonnull %15, %union.EC_FELEM* nonnull %18) #3
  %64 = bitcast %union.EC_FELEM* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %64) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %64, i8 -86, i64 72, i1 false) #3
  call void @ec_felem_add(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %11, %union.EC_FELEM* nonnull %15, %union.EC_FELEM* nonnull %15) #3
  call void @ec_felem_add(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %11, %union.EC_FELEM* nonnull %11, %union.EC_FELEM* nonnull %11) #3
  call void @ec_felem_sub(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %15, %union.EC_FELEM* nonnull %15, %union.EC_FELEM* nonnull %11) #3
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %64) #3
  call void %31(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %23, %union.EC_FELEM* nonnull %19) #3
  call void @ec_felem_add(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %23, %union.EC_FELEM* nonnull %23, %union.EC_FELEM* nonnull %15) #3
  call void %29(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %23, %union.EC_FELEM* nonnull %23, %union.EC_FELEM* nonnull %19) #3
  call void %29(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %15, %union.EC_FELEM* %60, %union.EC_FELEM* nonnull %22) #3
  call void @ec_felem_add(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %23, %union.EC_FELEM* nonnull %23, %union.EC_FELEM* nonnull %15) #3
  call void %31(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %17, %union.EC_FELEM* nonnull %22) #3
  call void %29(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %15, %union.EC_FELEM* nonnull %23, %union.EC_FELEM* nonnull %22) #3
  call void %29(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %17, %union.EC_FELEM* nonnull %17, %union.EC_FELEM* nonnull %15) #3
  %65 = load %struct.ec_method_st*, %struct.ec_method_st** %26, align 8
  %66 = getelementptr inbounds %struct.ec_method_st, %struct.ec_method_st* %65, i64 0, i32 19
  %67 = load void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*, i64*, i64)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*, i64*, i64)** %66, align 8
  call void %67(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %24, %union.EC_FELEM* nonnull %17, i64* %2, i64 %3) #3
  call void %29(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %24, %union.EC_FELEM* nonnull %24, %union.EC_FELEM* nonnull %15) #3
  call void %29(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %20, %union.EC_FELEM* nonnull %16, %union.EC_FELEM* nonnull %19) #3
  call void %29(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %25, %union.EC_FELEM* nonnull %24, %union.EC_FELEM* %4) #3
  call void %29(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %25, %union.EC_FELEM* nonnull %25, %union.EC_FELEM* nonnull %14) #3
  call void %29(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %25, %union.EC_FELEM* nonnull %25, %union.EC_FELEM* %6) #3
  call void %31(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %15, %union.EC_FELEM* nonnull %24) #3
  call void %29(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %15, %union.EC_FELEM* nonnull %15, %union.EC_FELEM* nonnull %22) #3
  call void @ec_felem_sub(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %16, %union.EC_FELEM* nonnull %15, %union.EC_FELEM* nonnull %23) #3
  %68 = call i64 @ec_felem_non_zero_mask(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %16) #3
  call void @ec_felem_select(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %19, i64 %68, %union.EC_FELEM* nonnull %20, %union.EC_FELEM* nonnull %19) #3
  call void @ec_felem_select(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %24, i64 %68, %union.EC_FELEM* nonnull %25, %union.EC_FELEM* nonnull %24) #3
  %69 = getelementptr inbounds [66 x i8], [66 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 66, i8* nonnull %69) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %69, i8 -86, i64 66, i1 false) #3
  %70 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %70) #3
  store i64 -6148914691236517206, i64* %10, align 8
  call void @ec_felem_to_bytes(%struct.ec_group_st* %0, i8* nonnull %69, i64* nonnull %10, %union.EC_FELEM* %6) #3
  %71 = load i64, i64* %10, align 8
  %72 = add i64 %71, -1
  %73 = getelementptr inbounds [66 x i8], [66 x i8]* %9, i64 0, i64 %72
  %74 = load i8, i8* %73, align 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %70) #3
  call void @llvm.lifetime.end.p0i8(i64 66, i8* nonnull %69) #3
  call void @llvm.lifetime.start.p0i8(i64 66, i8* nonnull %69) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %69, i8 -86, i64 66, i1 false) #3
  %75 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %75) #3
  store i64 -6148914691236517206, i64* %8, align 8
  call void @ec_felem_to_bytes(%struct.ec_group_st* %0, i8* nonnull %69, i64* nonnull %8, %union.EC_FELEM* nonnull %24) #3
  %76 = load i64, i64* %8, align 8
  %77 = add i64 %76, -1
  %78 = getelementptr inbounds [66 x i8], [66 x i8]* %9, i64 0, i64 %77
  %79 = load i8, i8* %78, align 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %75) #3
  call void @llvm.lifetime.end.p0i8(i64 66, i8* nonnull %69) #3
  %80 = xor i8 %79, %74
  %81 = and i8 %80, 1
  %82 = zext i8 %81 to i64
  %83 = sub nsw i64 0, %82
  call void @ec_felem_neg(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %25, %union.EC_FELEM* nonnull %24) #3
  call void @ec_felem_select(%struct.ec_group_st* %0, %union.EC_FELEM* nonnull %24, i64 %83, %union.EC_FELEM* nonnull %25, %union.EC_FELEM* nonnull %24) #3
  %84 = getelementptr inbounds %struct.EC_RAW_POINT, %struct.EC_RAW_POINT* %5, i64 0, i32 0
  call void %29(%struct.ec_group_st* %0, %union.EC_FELEM* %84, %union.EC_FELEM* nonnull %19, %union.EC_FELEM* nonnull %18) #3
  %85 = getelementptr inbounds %struct.EC_RAW_POINT, %struct.EC_RAW_POINT* %5, i64 0, i32 1
  call void %29(%struct.ec_group_st* %0, %union.EC_FELEM* %85, %union.EC_FELEM* nonnull %24, %union.EC_FELEM* nonnull %22) #3
  %86 = getelementptr inbounds %struct.EC_RAW_POINT, %struct.EC_RAW_POINT* %5, i64 0, i32 2
  %87 = bitcast %union.EC_FELEM* %86 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* nonnull align 8 %51, i64 72, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %58) #3
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %57) #3
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %56) #3
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %55) #3
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %54) #3
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %53) #3
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %52) #3
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %51) #3
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %50) #3
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %49) #3
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %48) #3
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %47) #3
  br label %88

88:                                               ; preds = %46, %45
  %89 = phi i32 [ 0, %45 ], [ 1, %46 ]
  ret i32 %89
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @expand_message_xmd(%struct.env_md_st*, i8* nocapture, i64, i8*, i64, i8*, i64) unnamed_addr #0 {
  %8 = alloca %struct.env_md_ctx_st, align 8
  %9 = alloca [64 x i8], align 16
  %10 = alloca i8, align 1
  %11 = alloca [3 x i8], align 1
  %12 = alloca [64 x i8], align 16
  %13 = alloca [64 x i8], align 16
  %14 = alloca i8, align 1
  %15 = tail call i64 @EVP_MD_block_size(%struct.env_md_st* %0) #3
  %16 = tail call i64 @EVP_MD_size(%struct.env_md_st* %0) #3
  %17 = bitcast %struct.env_md_ctx_st* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #3
  %18 = bitcast %struct.env_md_ctx_st* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 32, i1 false)
  call void @EVP_MD_CTX_init(%struct.env_md_ctx_st* nonnull %8) #3
  %19 = getelementptr inbounds [64 x i8], [64 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %19) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -86, i64 64, i1 false)
  %20 = icmp ugt i64 %6, 255
  br i1 %20, label %21, label %33

21:                                               ; preds = %7
  %22 = call i32 @EVP_DigestInit_ex(%struct.env_md_ctx_st* nonnull %8, %struct.env_md_st* %0, %struct.engine_st* null) #3
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %188, label %24

24:                                               ; preds = %21
  %25 = call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* nonnull %8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @expand_message_xmd.kPrefix, i64 0, i64 0), i64 17) #3
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %188, label %27

27:                                               ; preds = %24
  %28 = call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* nonnull %8, i8* %5, i64 %6) #3
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %188, label %30

30:                                               ; preds = %27
  %31 = call i32 @EVP_DigestFinal_ex(%struct.env_md_ctx_st* nonnull %8, i8* nonnull %19, i32* null) #3
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %188, label %33

33:                                               ; preds = %30, %7
  %34 = phi i8* [ %5, %7 ], [ %19, %30 ]
  %35 = phi i64 [ %6, %7 ], [ %16, %30 ]
  %36 = trunc i64 %35 to i8
  store i8 %36, i8* %10, align 1
  %37 = getelementptr inbounds [3 x i8], [3 x i8]* %11, i64 0, i64 0
  %38 = getelementptr inbounds [3 x i8], [3 x i8]* %11, i64 0, i64 1
  %39 = getelementptr inbounds [3 x i8], [3 x i8]* %11, i64 0, i64 2
  %40 = lshr i64 %2, 8
  %41 = trunc i64 %40 to i8
  store i8 %41, i8* %37, align 1
  %42 = trunc i64 %2 to i8
  store i8 %42, i8* %38, align 1
  store i8 0, i8* %39, align 1
  %43 = getelementptr inbounds [64 x i8], [64 x i8]* %12, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %43, i8 -86, i64 64, i1 false)
  %44 = call i32 @EVP_DigestInit_ex(%struct.env_md_ctx_st* nonnull %8, %struct.env_md_st* %0, %struct.engine_st* null) #3
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %188, label %46

46:                                               ; preds = %33
  %47 = call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* nonnull %8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @expand_message_xmd.kZeros, i64 0, i64 0), i64 %15) #3
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %188, label %49

49:                                               ; preds = %46
  %50 = call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* nonnull %8, i8* %3, i64 %4) #3
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %188, label %52

52:                                               ; preds = %49
  %53 = call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* nonnull %8, i8* nonnull %37, i64 3) #3
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %188, label %55

55:                                               ; preds = %52
  %56 = call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* nonnull %8, i8* %34, i64 %35) #3
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %188, label %58

58:                                               ; preds = %55
  %59 = call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* nonnull %8, i8* nonnull %10, i64 1) #3
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %188, label %61

61:                                               ; preds = %58
  %62 = call i32 @EVP_DigestFinal_ex(%struct.env_md_ctx_st* nonnull %8, i8* nonnull %43, i32* null) #3
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %188, label %64

64:                                               ; preds = %61
  %65 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %65, i8 -86, i64 64, i1 false)
  store i8 1, i8* %14, align 1
  %66 = icmp eq i64 %2, 0
  br i1 %66, label %188, label %67

67:                                               ; preds = %64
  %68 = icmp eq i64 %16, 0
  %69 = add i64 %16, -32
  %70 = lshr i64 %69, 5
  %71 = add nuw nsw i64 %70, 1
  %72 = icmp ult i64 %16, 32
  %73 = and i64 %16, -32
  %74 = and i64 %71, 1
  %75 = icmp eq i64 %70, 0
  %76 = sub nuw nsw i64 %71, %74
  %77 = icmp eq i64 %74, 0
  %78 = icmp eq i64 %16, %73
  br label %79

79:                                               ; preds = %67, %182
  %80 = phi i8* [ %1, %67 ], [ %183, %182 ]
  %81 = phi i64 [ %2, %67 ], [ %184, %182 ]
  %82 = phi i8 [ 1, %67 ], [ %186, %182 ]
  switch i8 %82, label %83 [
    i8 0, label %147
    i8 1, label %157
  ]

83:                                               ; preds = %79
  br i1 %68, label %159, label %84

84:                                               ; preds = %83
  br i1 %72, label %85, label %87

85:                                               ; preds = %146, %84
  %86 = phi i64 [ 0, %84 ], [ %73, %146 ]
  br label %148

87:                                               ; preds = %84
  br i1 %75, label %127, label %88

88:                                               ; preds = %87, %88
  %89 = phi i64 [ %124, %88 ], [ 0, %87 ]
  %90 = phi i64 [ %125, %88 ], [ %76, %87 ]
  %91 = getelementptr inbounds [64 x i8], [64 x i8]* %12, i64 0, i64 %89
  %92 = bitcast i8* %91 to <16 x i8>*
  %93 = load <16 x i8>, <16 x i8>* %92, align 16
  %94 = getelementptr inbounds i8, i8* %91, i64 16
  %95 = bitcast i8* %94 to <16 x i8>*
  %96 = load <16 x i8>, <16 x i8>* %95, align 16
  %97 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %89
  %98 = bitcast i8* %97 to <16 x i8>*
  %99 = load <16 x i8>, <16 x i8>* %98, align 16
  %100 = getelementptr inbounds i8, i8* %97, i64 16
  %101 = bitcast i8* %100 to <16 x i8>*
  %102 = load <16 x i8>, <16 x i8>* %101, align 16
  %103 = xor <16 x i8> %99, %93
  %104 = xor <16 x i8> %102, %96
  %105 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %103, <16 x i8>* %105, align 16
  %106 = bitcast i8* %100 to <16 x i8>*
  store <16 x i8> %104, <16 x i8>* %106, align 16
  %107 = or i64 %89, 32
  %108 = getelementptr inbounds [64 x i8], [64 x i8]* %12, i64 0, i64 %107
  %109 = bitcast i8* %108 to <16 x i8>*
  %110 = load <16 x i8>, <16 x i8>* %109, align 16
  %111 = getelementptr inbounds i8, i8* %108, i64 16
  %112 = bitcast i8* %111 to <16 x i8>*
  %113 = load <16 x i8>, <16 x i8>* %112, align 16
  %114 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %107
  %115 = bitcast i8* %114 to <16 x i8>*
  %116 = load <16 x i8>, <16 x i8>* %115, align 16
  %117 = getelementptr inbounds i8, i8* %114, i64 16
  %118 = bitcast i8* %117 to <16 x i8>*
  %119 = load <16 x i8>, <16 x i8>* %118, align 16
  %120 = xor <16 x i8> %116, %110
  %121 = xor <16 x i8> %119, %113
  %122 = bitcast i8* %114 to <16 x i8>*
  store <16 x i8> %120, <16 x i8>* %122, align 16
  %123 = bitcast i8* %117 to <16 x i8>*
  store <16 x i8> %121, <16 x i8>* %123, align 16
  %124 = add i64 %89, 64
  %125 = add i64 %90, -2
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %127, label %88, !llvm.loop !10

127:                                              ; preds = %88, %87
  %128 = phi i64 [ 0, %87 ], [ %124, %88 ]
  br i1 %77, label %146, label %129

129:                                              ; preds = %127
  %130 = getelementptr inbounds [64 x i8], [64 x i8]* %12, i64 0, i64 %128
  %131 = bitcast i8* %130 to <16 x i8>*
  %132 = load <16 x i8>, <16 x i8>* %131, align 16
  %133 = getelementptr inbounds i8, i8* %130, i64 16
  %134 = bitcast i8* %133 to <16 x i8>*
  %135 = load <16 x i8>, <16 x i8>* %134, align 16
  %136 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %128
  %137 = bitcast i8* %136 to <16 x i8>*
  %138 = load <16 x i8>, <16 x i8>* %137, align 16
  %139 = getelementptr inbounds i8, i8* %136, i64 16
  %140 = bitcast i8* %139 to <16 x i8>*
  %141 = load <16 x i8>, <16 x i8>* %140, align 16
  %142 = xor <16 x i8> %138, %132
  %143 = xor <16 x i8> %141, %135
  %144 = bitcast i8* %136 to <16 x i8>*
  store <16 x i8> %142, <16 x i8>* %144, align 16
  %145 = bitcast i8* %139 to <16 x i8>*
  store <16 x i8> %143, <16 x i8>* %145, align 16
  br label %146

146:                                              ; preds = %127, %129
  br i1 %78, label %159, label %85

147:                                              ; preds = %79
  call void @ERR_put_error(i32 15, i32 0, i32 68, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str, i64 0, i64 0), i32 100) #3
  br label %188

148:                                              ; preds = %85, %148
  %149 = phi i64 [ %155, %148 ], [ %86, %85 ]
  %150 = getelementptr inbounds [64 x i8], [64 x i8]* %12, i64 0, i64 %149
  %151 = load i8, i8* %150, align 1
  %152 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %149
  %153 = load i8, i8* %152, align 1
  %154 = xor i8 %153, %151
  store i8 %154, i8* %152, align 1
  %155 = add nuw i64 %149, 1
  %156 = icmp eq i64 %155, %16
  br i1 %156, label %159, label %148, !llvm.loop !11

157:                                              ; preds = %79
  br i1 %68, label %159, label %158

158:                                              ; preds = %157
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %65, i8* nonnull align 16 %43, i64 %16, i1 false) #3
  br label %159

159:                                              ; preds = %148, %146, %83, %158, %157
  %160 = call i32 @EVP_DigestInit_ex(%struct.env_md_ctx_st* nonnull %8, %struct.env_md_st* %0, %struct.engine_st* null) #3
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %188, label %162

162:                                              ; preds = %159
  %163 = call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* nonnull %8, i8* nonnull %65, i64 %16) #3
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %188, label %165

165:                                              ; preds = %162
  %166 = call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* nonnull %8, i8* nonnull %14, i64 1) #3
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %188, label %168

168:                                              ; preds = %165
  %169 = call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* nonnull %8, i8* %34, i64 %35) #3
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %188, label %171

171:                                              ; preds = %168
  %172 = call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* nonnull %8, i8* nonnull %10, i64 1) #3
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %188, label %174

174:                                              ; preds = %171
  %175 = call i32 @EVP_DigestFinal_ex(%struct.env_md_ctx_st* nonnull %8, i8* nonnull %65, i32* null) #3
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %188, label %177

177:                                              ; preds = %174
  %178 = icmp ult i64 %81, %16
  %179 = select i1 %178, i64 %81, i64 %16
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %182, label %181

181:                                              ; preds = %177
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %80, i8* nonnull align 16 %65, i64 %179, i1 false) #3
  br label %182

182:                                              ; preds = %177, %181
  %183 = getelementptr inbounds i8, i8* %80, i64 %179
  %184 = sub i64 %81, %179
  %185 = load i8, i8* %14, align 1
  %186 = add i8 %185, 1
  store i8 %186, i8* %14, align 1
  %187 = icmp eq i64 %184, 0
  br i1 %187, label %188, label %79

188:                                              ; preds = %159, %162, %165, %168, %171, %174, %182, %64, %30, %27, %24, %21, %61, %58, %55, %52, %49, %46, %33, %147
  %189 = phi i32 [ 0, %147 ], [ 0, %61 ], [ 0, %58 ], [ 0, %55 ], [ 0, %52 ], [ 0, %49 ], [ 0, %46 ], [ 0, %33 ], [ 0, %30 ], [ 0, %27 ], [ 0, %24 ], [ 0, %21 ], [ 1, %64 ], [ 0, %159 ], [ 0, %162 ], [ 0, %165 ], [ 0, %168 ], [ 0, %171 ], [ 0, %174 ], [ 1, %182 ]
  %190 = call i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st* nonnull %8) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %19) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #3
  ret i32 %189
}

declare i32 @BN_num_bits(%struct.bignum_st*) local_unnamed_addr #1

declare i64 @EVP_MD_block_size(%struct.env_md_st*) local_unnamed_addr #1

declare i64 @EVP_MD_size(%struct.env_md_st*) local_unnamed_addr #1

declare void @EVP_MD_CTX_init(%struct.env_md_ctx_st*) local_unnamed_addr #1

declare i32 @EVP_DigestInit_ex(%struct.env_md_ctx_st*, %struct.env_md_st*, %struct.engine_st*) local_unnamed_addr #1

declare i32 @EVP_DigestUpdate(%struct.env_md_ctx_st*, i8*, i64) local_unnamed_addr #1

declare i32 @EVP_DigestFinal_ex(%struct.env_md_ctx_st*, i8*, i32*) local_unnamed_addr #1

declare i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @ec_felem_add(%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*, %union.EC_FELEM*) local_unnamed_addr #1

declare i64 @ec_felem_non_zero_mask(%struct.ec_group_st*, %union.EC_FELEM*) local_unnamed_addr #1

declare void @ec_felem_select(%struct.ec_group_st*, %union.EC_FELEM*, i64, %union.EC_FELEM*, %union.EC_FELEM*) local_unnamed_addr #1

declare void @ec_felem_sub(%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*, %union.EC_FELEM*) local_unnamed_addr #1

declare void @ec_felem_to_bytes(%struct.ec_group_st*, i8*, i64*, %union.EC_FELEM*) local_unnamed_addr #1

declare void @ec_scalar_reduce(%struct.ec_group_st*, %union.EC_SCALAR*, i64*, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !5, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !5, !3}
