; ModuleID = '../../third_party/boringssl/src/ssl/d1_lib.cc'
source_filename = "../../third_party/boringssl/src/ssl/d1_lib.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.bssl::DTLS1_STATE" = type <{ i8, [256 x i8], [7 x i8], i64, i16, i16, [4 x i8], %"struct.bssl::DTLS1_BITMAP", i16, i16, [8 x i8], [4 x i8], %"class.std::__1::unique_ptr", [7 x %"class.std::__1::unique_ptr.1"], [7 x %"struct.bssl::DTLS_OUTGOING_MESSAGE"], i8, i8, [2 x i8], i32, i32, i32, %"struct.bssl::OPENSSL_timeval", i32, [4 x i8] }>
%"struct.bssl::DTLS1_BITMAP" = type { i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.bssl::SSLAEADContext"* }
%"class.bssl::SSLAEADContext" = type <{ %struct.ssl_cipher_st*, %"class.bssl::internal::StackAllocated", [12 x i8], i8, i8, i16, i8, i8, [6 x i8] }>
%struct.ssl_cipher_st = type { i8*, i8*, i32, i32, i32, i32, i32, i32 }
%"class.bssl::internal::StackAllocated" = type { %struct.evp_aead_ctx_st }
%struct.evp_aead_ctx_st = type { %struct.evp_aead_st*, %union.evp_aead_ctx_st_state, i8 }
%struct.evp_aead_st = type opaque
%union.evp_aead_ctx_st_state = type { i64, [576 x i8] }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.bssl::hm_fragment"* }
%"struct.bssl::hm_fragment" = type { i8, i16, i32, i8*, i8* }
%"struct.bssl::DTLS_OUTGOING_MESSAGE" = type <{ i8*, i32, i16, i8, i8 }>
%"struct.bssl::OPENSSL_timeval" = type { i64, i32 }
%struct.ssl_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"class.std::__1::unique_ptr.7", i16, i16, [4 x i8], %"class.std::__1::unique_ptr.96", %"class.std::__1::unique_ptr.96", i32 (%"struct.bssl::SSL_HANDSHAKE"*)*, %"struct.bssl::SSL3_STATE"*, %"struct.bssl::DTLS1_STATE"*, void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], %"class.std::__1::unique_ptr.63", void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.106", %"class.std::__1::unique_ptr.106", %struct.crypto_ex_data_st, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.34", %struct.ssl_quic_method_st*, i32, i8, [3 x i8] }>
%"struct.bssl::SSL_PROTOCOL_METHOD" = type { i8, {}*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %"struct.bssl::SSLMessage"*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, %"class.bssl::Span"*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %struct.cbb_st*, i8)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*, %"class.bssl::Array"*)*, {}*, i32 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)* }
%"struct.bssl::SSLMessage" = type { i8, i8, %struct.cbs_st, %struct.cbs_st }
%struct.cbs_st = type { i8*, i64 }
%"class.bssl::Span" = type { i8*, i64 }
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%"class.bssl::Array" = type { i8*, i64 }
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.bssl::SSL_CONFIG"* }
%"struct.bssl::SSL_CONFIG" = type <{ %struct.ssl_st*, i16, i16, [4 x i8], %struct.X509_VERIFY_PARAM_st*, %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.20", i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.ssl_st*, i8*)*, %"class.std::__1::unique_ptr.34", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, %"class.std::__1::unique_ptr.28", %struct.stack_st_X509_NAME*, %"class.bssl::Array.61", %"class.std::__1::unique_ptr.23", %"class.bssl::Array", %"class.bssl::GrowableArray.87", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.61", %"class.std::__1::unique_ptr.89", i8, i16, [5 x i8] }>
%struct.X509_VERIFY_PARAM_st = type { i8*, i64, i64, i64, i32, i32, i32, %struct.stack_st_ASN1_OBJECT*, %struct.X509_VERIFY_PARAM_ID_st* }
%struct.stack_st_ASN1_OBJECT = type opaque
%struct.X509_VERIFY_PARAM_ID_st = type opaque
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.bssl::SSLCipherPreferenceList"* }
%"struct.bssl::SSLCipherPreferenceList" = type { %"class.std::__1::unique_ptr.13", i8* }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %struct.stack_st_SSL_CIPHER* }
%struct.stack_st_SSL_CIPHER = type opaque
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"struct.bssl::CERT"* }
%"struct.bssl::CERT" = type { %"class.std::__1::unique_ptr.23", %"class.std::__1::unique_ptr.28", %struct.stack_st_X509*, %struct.x509_st*, %struct.x509_st*, %struct.ssl_private_key_method_st*, %"struct.bssl::SSL_X509_METHOD"*, %"class.bssl::Array.61", i32 (%struct.ssl_st*, i8*)*, i8*, %struct.x509_store_st*, %"class.std::__1::unique_ptr.39", %"class.std::__1::unique_ptr.39", i8, [32 x i8], %"class.std::__1::unique_ptr.80", %"class.std::__1::unique_ptr.23", %struct.ssl_private_key_method_st* }
%struct.stack_st_X509 = type opaque
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon.33 }
%union.anon.33 = type { i8* }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type opaque
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%"struct.bssl::SSL_X509_METHOD" = type { i1 (%struct.stack_st_CRYPTO_BUFFER*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*, %"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, i1 (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %struct.ssl_session_st*)*, void (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %"struct.bssl::SSL_HANDSHAKE"*, i8*)*, void (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)* }
%struct.stack_st_CRYPTO_BUFFER = type opaque
%struct.ssl_session_st = type { i32, i16, i16, i16, i32, [48 x i8], i32, [32 x i8], i8, [32 x i8], %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.28", %"struct.bssl::SSL_X509_METHOD"*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509*, i64, i32, i32, i64, %struct.ssl_cipher_st*, %struct.crypto_ex_data_st, %struct.ssl_session_st*, %struct.ssl_session_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.39", %"class.std::__1::unique_ptr.39", [32 x i8], [64 x i8], i8, i32, i32, i32, %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, %"class.bssl::Array" }
%"struct.bssl::SSL_HANDSHAKE" = type <{ %struct.ssl_st*, %"struct.bssl::SSL_CONFIG"*, i32, i32, i32, i16, i16, i64, [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], %union.anon.44, i16, [2 x i8], %"class.std::__1::unique_ptr.45", [2 x %"class.std::__1::unique_ptr.50"], %"class.bssl::SSLTranscript", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.61", %"class.bssl::Array.61", %"class.bssl::Array.61", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::internal::StackAllocated.62", %"class.bssl::Array", %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.28", %struct.stack_st_X509_NAME*, %"class.bssl::Array", %"class.std::__1::unique_ptr.23", %"class.std::__1::unique_ptr.23", %"class.std::__1::unique_ptr.63", %"class.std::__1::unique_ptr.63", %"class.std::__1::unique_ptr.68", %struct.ssl_cipher_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.75", i32, i16, i16, i16, i8, [32 x i8], i8, [6 x i8], [6 x i8] }>
%union.anon.44 = type { i32 }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %struct.err_save_state_st* }
%struct.err_save_state_st = type opaque
%"class.std::__1::unique_ptr.50" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.bssl::SSLKeyShare"* }
%"class.bssl::SSLKeyShare" = type { i32 (...)** }
%"class.bssl::SSLTranscript" = type { %"class.std::__1::unique_ptr.55", %"class.bssl::internal::StackAllocated.60" }
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %struct.buf_mem_st* }
%"class.bssl::internal::StackAllocated.60" = type { %struct.env_md_ctx_st }
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.env_md_st = type opaque
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%"class.bssl::internal::StackAllocated.62" = type { %struct.evp_hpke_ctx_st }
%struct.evp_hpke_ctx_st = type { %struct.evp_hpke_aead_st*, %struct.evp_hpke_kdf_st*, %struct.evp_aead_ctx_st, [24 x i8], [64 x i8], i64, i32 }
%struct.evp_hpke_aead_st = type opaque
%struct.evp_hpke_kdf_st = type opaque
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %struct.ssl_ech_server_config_list_st* }
%struct.ssl_ech_server_config_list_st = type <{ %"class.bssl::GrowableArray", i32, [4 x i8] }>
%"class.bssl::GrowableArray" = type { i64, %"class.bssl::Array.71" }
%"class.bssl::Array.71" = type { %"class.std::__1::unique_ptr.72"*, i64 }
%"class.std::__1::unique_ptr.72" = type opaque
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"struct.bssl::SSL_HANDSHAKE_HINTS"* }
%"struct.bssl::SSL_HANDSHAKE_HINTS" = type <{ %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, [7 x i8] }>
%struct.ssl_ctx_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_X509_METHOD"*, %union.crypto_mutex_st, i16, i16, [4 x i8], %struct.ssl_quic_method_st*, %"class.std::__1::unique_ptr.10", %struct.x509_store_st*, %struct.lhash_st_SSL_SESSION*, i64, %struct.ssl_session_st*, %struct.ssl_session_st*, i32, i32, i32, i32, i32 (%struct.ssl_st*, %struct.ssl_session_st*)*, void (%struct.ssl_ctx_st*, %struct.ssl_session_st*)*, %struct.ssl_session_st* (%struct.ssl_st*, i8*, i32, i32*)*, i32, [4 x i8], i32 (%struct.x509_store_ctx_st*, i8*)*, i8*, i32 (%struct.ssl_st*, i8*)*, i32 (i8*, i32, i32, i8*)*, i8*, i32 (%struct.ssl_st*, %struct.x509_st**, %struct.evp_pkey_st**)*, void (%struct.ssl_st*, %struct.evp_pkey_st**)*, %struct.crypto_ex_data_st, void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.28", %struct.stack_st_X509_NAME*, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.20", void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], i32 (i32, %struct.x509_store_ctx_st*)*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.ssl_early_callback_ctx*)*, i32 (%struct.ssl_early_callback_ctx*)*, i8, i8, i16, [4 x i8], i32 (%struct.ssl_st*, i32*, i8*)*, i8*, %"class.std::__1::unique_ptr.109", %"class.std::__1::unique_ptr.109", i32 (%struct.ssl_st*, i8*, i8*, %struct.evp_cipher_ctx_st*, %struct.hmac_ctx_st*, i32)*, %"class.std::__1::unique_ptr.34", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*, i8**, i32*, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, %"class.bssl::Array", %"class.std::__1::unique_ptr.89", %"class.bssl::GrowableArray.114", %"class.bssl::Array.61", %"class.std::__1::unique_ptr.23", %"class.std::__1::unique_ptr.68", void (%struct.ssl_st*, i8*)*, void (%struct.ssl_st*, %struct.timeval*)*, %struct.crypto_buffer_pool_st*, %struct.ssl_ticket_aead_method_st*, i32 (%struct.ssl_st*, i8*)*, i8*, %"class.bssl::Array.61", i16, [6 x i8] }>
%struct.lhash_st_SSL_SESSION = type opaque
%struct.x509_store_ctx_st = type { %struct.x509_store_st*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509_CRL*, %struct.X509_VERIFY_PARAM_st*, i8*, {}*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, {}*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, {}*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, {}*, i32, i32, %struct.stack_st_X509*, %struct.X509_POLICY_TREE_st*, i32, i32, i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_crl_st*, i32, i32, %struct.x509_store_ctx_st*, %struct.crypto_ex_data_st }
%struct.stack_st_X509_CRL = type opaque
%struct.X509_POLICY_TREE_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type opaque
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.ssl_early_callback_ctx = type { %struct.ssl_st*, i8*, i64, i16, i8*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64 }
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"struct.bssl::TicketKey"* }
%"struct.bssl::TicketKey" = type { [16 x i8], [16 x i8], [16 x i8], i64 }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.hmac_ctx_st = type { %struct.env_md_st*, %struct.env_md_ctx_st, %struct.env_md_ctx_st, %struct.env_md_ctx_st }
%"class.bssl::GrowableArray.114" = type { i64, %"class.bssl::Array.115" }
%"class.bssl::Array.115" = type { %"struct.bssl::CertCompressionAlg"*, i64 }
%"struct.bssl::CertCompressionAlg" = type <{ i32 (%struct.ssl_st*, %struct.cbb_st*, i8*, i64)*, i32 (%struct.ssl_st*, %struct.crypto_buffer_st**, i64, i8*, i64)*, i16, [6 x i8] }>
%struct.timeval = type { i64, i64 }
%struct.crypto_buffer_pool_st = type opaque
%struct.ssl_ticket_aead_method_st = type { i64 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)* }
%struct.x509_store_st = type { i32, %struct.stack_st_X509_OBJECT*, %union.crypto_mutex_st, %struct.stack_st_X509*, %struct.stack_st_X509_LOOKUP*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 }
%struct.stack_st_X509_OBJECT = type opaque
%struct.stack_st_X509_LOOKUP = type opaque
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %struct.crypto_buffer_st* }
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"struct.bssl::DC"* }
%"struct.bssl::DC" = type { %"class.std::__1::unique_ptr.39", i16, %"class.std::__1::unique_ptr.23" }
%struct.ssl_private_key_method_st = type { i32 (%struct.ssl_st*, i8*, i64*, i64, i16, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64)* }
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %struct.stack_st_CRYPTO_BUFFER* }
%struct.stack_st_X509_NAME = type opaque
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %struct.evp_pkey_st* }
%"class.bssl::GrowableArray.87" = type { i64, %"class.bssl::Array.88" }
%"class.bssl::Array.88" = type { %"struct.bssl::ALPSConfig"*, i64 }
%"struct.bssl::ALPSConfig" = type { %"class.bssl::Array", %"class.bssl::Array" }
%"class.bssl::Array.61" = type { i16*, i64 }
%"class.std::__1::unique_ptr.89" = type { %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %struct.stack_st_SRTP_PROTECTION_PROFILE* }
%struct.stack_st_SRTP_PROTECTION_PROFILE = type opaque
%"class.std::__1::unique_ptr.96" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %struct.bio_st* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%"struct.bssl::SSL3_STATE" = type <{ [8 x i8], [8 x i8], [32 x i8], [32 x i8], %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer", %"class.bssl::Span", i32, i32, i32, i32, i8*, i32, i32, %"class.std::__1::unique_ptr.45", i32, i32, i32, i32, i16, i8, i8, i8, i16, i8, %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.101", [48 x i8], [48 x i8], [48 x i8], i8, i8, i8, [12 x i8], i8, i8, [12 x i8], [2 x i8], i8, %"class.std::__1::unique_ptr.63", %"class.bssl::Array", %"class.bssl::Array", %"class.std::__1::unique_ptr.34", [64 x i8], %"class.bssl::Array", %struct.srtp_protection_profile_st* }>
%"class.bssl::SSLBuffer" = type <{ i8*, i16, i16, i16, [5 x i8], i8, [4 x i8] }>
%"class.std::__1::unique_ptr.101" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"struct.bssl::SSL_HANDSHAKE"* }
%struct.srtp_protection_profile_st = type { i8*, i64 }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %struct.ssl_session_st* }
%"class.std::__1::unique_ptr.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %struct.ssl_ctx_st* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { i8* }
%struct.ssl_quic_method_st = type { i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, i8*, i64)*, i32 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i32, i8)* }

@.str = private unnamed_addr constant [46 x i8] c"../../third_party/boringssl/src/ssl/d1_lib.cc\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"../../third_party/boringssl/src/ssl/internal.h\00", align 1

@_ZN4bssl11DTLS1_STATEC1Ev = hidden unnamed_addr alias void (%"struct.bssl::DTLS1_STATE"*), void (%"struct.bssl::DTLS1_STATE"*)* @_ZN4bssl11DTLS1_STATEC2Ev
@_ZN4bssl11DTLS1_STATED1Ev = hidden unnamed_addr alias void (%"struct.bssl::DTLS1_STATE"*), void (%"struct.bssl::DTLS1_STATE"*)* @_ZN4bssl11DTLS1_STATED2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl11DTLS1_STATEC2Ev(%"struct.bssl::DTLS1_STATE"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 0
  %3 = load i8, i8* %2, align 8
  %4 = and i8 %3, -8
  store i8 %4, i8* %2, align 8
  %5 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 1, i64 0
  %6 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 3
  store i64 0, i64* %6, align 8
  %7 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 4
  store i16 0, i16* %7, align 8
  %8 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 5
  store i16 0, i16* %8, align 2
  %9 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 7
  %10 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 12
  %11 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 14, i64 1
  %12 = bitcast %"struct.bssl::DTLS_OUTGOING_MESSAGE"* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 0, i64 256, i1 false)
  %13 = bitcast %"struct.bssl::DTLS1_BITMAP"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 28, i1 false)
  %14 = bitcast %"class.std::__1::unique_ptr"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 79, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 15, i1 false) #5
  %15 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 14, i64 2
  %16 = bitcast %"struct.bssl::DTLS_OUTGOING_MESSAGE"* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 15, i1 false) #5
  %17 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 14, i64 3
  %18 = bitcast %"struct.bssl::DTLS_OUTGOING_MESSAGE"* %17 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 15, i1 false) #5
  %19 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 14, i64 4
  %20 = bitcast %"struct.bssl::DTLS_OUTGOING_MESSAGE"* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 15, i1 false) #5
  %21 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 14, i64 5
  %22 = bitcast %"struct.bssl::DTLS_OUTGOING_MESSAGE"* %21 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 15, i1 false) #5
  %23 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 14, i64 6
  %24 = bitcast %"struct.bssl::DTLS_OUTGOING_MESSAGE"* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 15, i1 false) #5
  %25 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 15
  store i8 0, i8* %25, align 8
  %26 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 16
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 18
  %28 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 22
  store i32 0, i32* %28, align 8
  %29 = bitcast i32* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %29, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl11DTLS1_STATED2Ev(%"struct.bssl::DTLS1_STATE"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 14, i64 6
  tail call void @_ZN4bssl21DTLS_OUTGOING_MESSAGE5ClearEv(%"struct.bssl::DTLS_OUTGOING_MESSAGE"* %2) #5
  %3 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 14, i64 5
  tail call void @_ZN4bssl21DTLS_OUTGOING_MESSAGE5ClearEv(%"struct.bssl::DTLS_OUTGOING_MESSAGE"* %3) #5
  %4 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 14, i64 4
  tail call void @_ZN4bssl21DTLS_OUTGOING_MESSAGE5ClearEv(%"struct.bssl::DTLS_OUTGOING_MESSAGE"* %4) #5
  %5 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 14, i64 3
  tail call void @_ZN4bssl21DTLS_OUTGOING_MESSAGE5ClearEv(%"struct.bssl::DTLS_OUTGOING_MESSAGE"* %5) #5
  %6 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 14, i64 2
  tail call void @_ZN4bssl21DTLS_OUTGOING_MESSAGE5ClearEv(%"struct.bssl::DTLS_OUTGOING_MESSAGE"* %6) #5
  %7 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 14, i64 1
  tail call void @_ZN4bssl21DTLS_OUTGOING_MESSAGE5ClearEv(%"struct.bssl::DTLS_OUTGOING_MESSAGE"* %7) #5
  %8 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 14, i64 0
  tail call void @_ZN4bssl21DTLS_OUTGOING_MESSAGE5ClearEv(%"struct.bssl::DTLS_OUTGOING_MESSAGE"* %8) #5
  %9 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 13, i64 6, i32 0, i32 0, i32 0
  %10 = load %"struct.bssl::hm_fragment"*, %"struct.bssl::hm_fragment"** %9, align 8
  store %"struct.bssl::hm_fragment"* null, %"struct.bssl::hm_fragment"** %9, align 8
  %11 = icmp eq %"struct.bssl::hm_fragment"* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %1
  tail call void @_ZN4bssl11hm_fragmentD1Ev(%"struct.bssl::hm_fragment"* nonnull %10) #5
  %13 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %10, i64 0, i32 0
  tail call void @OPENSSL_free(i8* %13) #5
  br label %14

14:                                               ; preds = %1, %12
  %15 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 13, i64 5, i32 0, i32 0, i32 0
  %16 = load %"struct.bssl::hm_fragment"*, %"struct.bssl::hm_fragment"** %15, align 8
  store %"struct.bssl::hm_fragment"* null, %"struct.bssl::hm_fragment"** %15, align 8
  %17 = icmp eq %"struct.bssl::hm_fragment"* %16, null
  br i1 %17, label %23, label %21

18:                                               ; preds = %53
  tail call void @_ZN4bssl14SSLAEADContextD1Ev(%"class.bssl::SSLAEADContext"* nonnull %55) #5
  %19 = bitcast %"class.bssl::SSLAEADContext"* %55 to i8*
  tail call void @OPENSSL_free(i8* nonnull %19) #5
  br label %20

20:                                               ; preds = %53, %18
  ret void

21:                                               ; preds = %14
  tail call void @_ZN4bssl11hm_fragmentD1Ev(%"struct.bssl::hm_fragment"* nonnull %16) #5
  %22 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %16, i64 0, i32 0
  tail call void @OPENSSL_free(i8* %22) #5
  br label %23

23:                                               ; preds = %21, %14
  %24 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 13, i64 4, i32 0, i32 0, i32 0
  %25 = load %"struct.bssl::hm_fragment"*, %"struct.bssl::hm_fragment"** %24, align 8
  store %"struct.bssl::hm_fragment"* null, %"struct.bssl::hm_fragment"** %24, align 8
  %26 = icmp eq %"struct.bssl::hm_fragment"* %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %23
  tail call void @_ZN4bssl11hm_fragmentD1Ev(%"struct.bssl::hm_fragment"* nonnull %25) #5
  %28 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %25, i64 0, i32 0
  tail call void @OPENSSL_free(i8* %28) #5
  br label %29

29:                                               ; preds = %27, %23
  %30 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 13, i64 3, i32 0, i32 0, i32 0
  %31 = load %"struct.bssl::hm_fragment"*, %"struct.bssl::hm_fragment"** %30, align 8
  store %"struct.bssl::hm_fragment"* null, %"struct.bssl::hm_fragment"** %30, align 8
  %32 = icmp eq %"struct.bssl::hm_fragment"* %31, null
  br i1 %32, label %35, label %33

33:                                               ; preds = %29
  tail call void @_ZN4bssl11hm_fragmentD1Ev(%"struct.bssl::hm_fragment"* nonnull %31) #5
  %34 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %31, i64 0, i32 0
  tail call void @OPENSSL_free(i8* %34) #5
  br label %35

35:                                               ; preds = %33, %29
  %36 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 13, i64 2, i32 0, i32 0, i32 0
  %37 = load %"struct.bssl::hm_fragment"*, %"struct.bssl::hm_fragment"** %36, align 8
  store %"struct.bssl::hm_fragment"* null, %"struct.bssl::hm_fragment"** %36, align 8
  %38 = icmp eq %"struct.bssl::hm_fragment"* %37, null
  br i1 %38, label %41, label %39

39:                                               ; preds = %35
  tail call void @_ZN4bssl11hm_fragmentD1Ev(%"struct.bssl::hm_fragment"* nonnull %37) #5
  %40 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %37, i64 0, i32 0
  tail call void @OPENSSL_free(i8* %40) #5
  br label %41

41:                                               ; preds = %39, %35
  %42 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 13, i64 1, i32 0, i32 0, i32 0
  %43 = load %"struct.bssl::hm_fragment"*, %"struct.bssl::hm_fragment"** %42, align 8
  store %"struct.bssl::hm_fragment"* null, %"struct.bssl::hm_fragment"** %42, align 8
  %44 = icmp eq %"struct.bssl::hm_fragment"* %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %41
  tail call void @_ZN4bssl11hm_fragmentD1Ev(%"struct.bssl::hm_fragment"* nonnull %43) #5
  %46 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %43, i64 0, i32 0
  tail call void @OPENSSL_free(i8* %46) #5
  br label %47

47:                                               ; preds = %45, %41
  %48 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 13, i64 0, i32 0, i32 0, i32 0
  %49 = load %"struct.bssl::hm_fragment"*, %"struct.bssl::hm_fragment"** %48, align 8
  store %"struct.bssl::hm_fragment"* null, %"struct.bssl::hm_fragment"** %48, align 8
  %50 = icmp eq %"struct.bssl::hm_fragment"* %49, null
  br i1 %50, label %53, label %51

51:                                               ; preds = %47
  tail call void @_ZN4bssl11hm_fragmentD1Ev(%"struct.bssl::hm_fragment"* nonnull %49) #5
  %52 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %49, i64 0, i32 0
  tail call void @OPENSSL_free(i8* %52) #5
  br label %53

53:                                               ; preds = %51, %47
  %54 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %0, i64 0, i32 12, i32 0, i32 0, i32 0
  %55 = load %"class.bssl::SSLAEADContext"*, %"class.bssl::SSLAEADContext"** %54, align 8
  store %"class.bssl::SSLAEADContext"* null, %"class.bssl::SSLAEADContext"** %54, align 8
  %56 = icmp eq %"class.bssl::SSLAEADContext"* %55, null
  br i1 %56, label %20, label %18
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl9dtls1_newEP6ssl_st(%struct.ssl_st*) local_unnamed_addr #0 {
  %2 = tail call zeroext i1 @_ZN4bssl7tls_newEP6ssl_st(%struct.ssl_st* %0) #5
  br i1 %2, label %3, label %33

3:                                                ; preds = %1
  %4 = tail call i8* @OPENSSL_malloc(i64 528) #5
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %7

6:                                                ; preds = %3
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 196) #5
  tail call void @_ZN4bssl8tls_freeEP6ssl_st(%struct.ssl_st* %0) #5
  br label %33

7:                                                ; preds = %3
  %8 = load i8, i8* %4, align 8
  %9 = and i8 %8, -8
  store i8 %9, i8* %4, align 8
  %10 = getelementptr inbounds i8, i8* %4, i64 1
  %11 = getelementptr inbounds i8, i8* %4, i64 264
  %12 = bitcast i8* %11 to i64*
  store i64 0, i64* %12, align 8
  %13 = getelementptr inbounds i8, i8* %4, i64 272
  %14 = bitcast i8* %13 to i16*
  store i16 0, i16* %14, align 8
  %15 = getelementptr inbounds i8, i8* %4, i64 274
  %16 = bitcast i8* %15 to i16*
  store i16 0, i16* %16, align 2
  %17 = getelementptr inbounds i8, i8* %4, i64 280
  %18 = getelementptr inbounds i8, i8* %4, i64 312
  %19 = getelementptr inbounds i8, i8* %4, i64 392
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 0, i64 256, i1 false) #5
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 28, i1 false) #5
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 79, i1 false) #5
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 15, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %4, i64 408
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 15, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %4, i64 424
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 15, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %4, i64 440
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 15, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %4, i64 456
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 15, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %4, i64 472
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 15, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %4, i64 488
  store i8 0, i8* %25, align 8
  %26 = getelementptr inbounds i8, i8* %4, i64 489
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds i8, i8* %4, i64 492
  %28 = getelementptr inbounds i8, i8* %4, i64 520
  %29 = bitcast i8* %28 to i32*
  store i32 0, i32* %29, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %27, i8 0, i64 24, i1 false) #5
  %30 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %31 = bitcast %"struct.bssl::DTLS1_STATE"** %30 to i8**
  store i8* %4, i8** %31, align 8
  %32 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 2
  store i16 -259, i16* %32, align 8
  br label %33

33:                                               ; preds = %7, %6, %1
  %34 = phi i1 [ false, %1 ], [ true, %7 ], [ false, %6 ]
  ret i1 %34
}

declare zeroext i1 @_ZN4bssl7tls_newEP6ssl_st(%struct.ssl_st*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN4bssl8tls_freeEP6ssl_st(%struct.ssl_st*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl10dtls1_freeEP6ssl_st(%struct.ssl_st*) local_unnamed_addr #0 {
  tail call void @_ZN4bssl8tls_freeEP6ssl_st(%struct.ssl_st* %0) #5
  %2 = icmp eq %struct.ssl_st* %0, null
  br i1 %2, label %10, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %5 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %4, align 8
  %6 = icmp eq %"struct.bssl::DTLS1_STATE"* %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  tail call void @_ZN4bssl11DTLS1_STATED2Ev(%"struct.bssl::DTLS1_STATE"* nonnull %5) #5
  %8 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %5, i64 0, i32 0
  tail call void @OPENSSL_free(i8* %8) #5
  br label %9

9:                                                ; preds = %3, %7
  store %"struct.bssl::DTLS1_STATE"* null, %"struct.bssl::DTLS1_STATE"** %4, align 8
  br label %10

10:                                               ; preds = %1, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl17dtls1_start_timerEP6ssl_st(%struct.ssl_st*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %3 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %4 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %3, i64 0, i32 21, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %16

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %3, i64 0, i32 21, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %16

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 12
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %3, i64 0, i32 22
  store i32 %13, i32* %14, align 8
  %15 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  br label %16

16:                                               ; preds = %11, %7, %1
  %17 = phi %"struct.bssl::DTLS1_STATE"* [ %15, %11 ], [ %3, %7 ], [ %3, %1 ]
  %18 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %17, i64 0, i32 21
  tail call void @_ZN4bssl20ssl_get_current_timeEPK6ssl_stPNS_15OPENSSL_timevalE(%struct.ssl_st* %0, %"struct.bssl::OPENSSL_timeval"* %18) #5
  %19 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %20 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %19, i64 0, i32 22
  %21 = load i32, i32* %20, align 8
  %22 = udiv i32 %21, 1000
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %19, i64 0, i32 21, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = add i64 %25, %23
  store i64 %26, i64* %24, align 8
  %27 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %28 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %27, i64 0, i32 22
  %29 = load i32, i32* %28, align 8
  %30 = urem i32 %29, 1000
  %31 = mul nuw nsw i32 %30, 1000
  %32 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %27, i64 0, i32 21, i32 1
  %33 = load i32, i32* %32, align 8
  %34 = add i32 %31, %33
  store i32 %34, i32* %32, align 8
  %35 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %36 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %35, i64 0, i32 21, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = icmp ugt i32 %37, 999999
  br i1 %38, label %39, label %47

39:                                               ; preds = %16
  %40 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %35, i64 0, i32 21, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = add i64 %41, 1
  store i64 %42, i64* %40, align 8
  %43 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %44 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %43, i64 0, i32 21, i32 1
  %45 = load i32, i32* %44, align 8
  %46 = add i32 %45, -1000000
  store i32 %46, i32* %44, align 8
  br label %47

47:                                               ; preds = %39, %16
  ret void
}

declare void @_ZN4bssl20ssl_get_current_timeEPK6ssl_stPNS_15OPENSSL_timevalE(%struct.ssl_st*, %"struct.bssl::OPENSSL_timeval"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl22dtls1_is_timer_expiredEP6ssl_st(%struct.ssl_st*) local_unnamed_addr #0 {
  %2 = alloca %struct.timeval, align 8
  %3 = bitcast %struct.timeval* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #5
  %4 = bitcast %struct.timeval* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 16, i1 false)
  %5 = call i32 @DTLSv1_get_timeout(%struct.ssl_st* %0, %struct.timeval* nonnull %2)
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i64 0, i32 0
  %9 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i64 0, i32 1
  %10 = load i64, i64* %8, align 8
  %11 = icmp slt i64 %10, 1
  %12 = load i64, i64* %9, align 8
  %13 = icmp slt i64 %12, 1
  %14 = and i1 %11, %13
  br label %15

15:                                               ; preds = %7, %1
  %16 = phi i1 [ false, %1 ], [ %14, %7 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #5
  ret i1 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @DTLSv1_get_timeout(%struct.ssl_st*, %struct.timeval* nocapture) local_unnamed_addr #0 {
  %3 = alloca %"struct.bssl::OPENSSL_timeval", align 8
  %4 = tail call i32 @SSL_is_dtls(%struct.ssl_st* %0) #5
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %65, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %8 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %7, align 8
  %9 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %8, i64 0, i32 21, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %16

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %8, i64 0, i32 21, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %65, label %16

16:                                               ; preds = %12, %6
  %17 = bitcast %"struct.bssl::OPENSSL_timeval"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 16, i1 false)
  call void @_ZN4bssl20ssl_get_current_timeEPK6ssl_stPNS_15OPENSSL_timevalE(%struct.ssl_st* %0, %"struct.bssl::OPENSSL_timeval"* nonnull %3) #5
  %18 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %7, align 8
  %19 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %18, i64 0, i32 21, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"struct.bssl::OPENSSL_timeval", %"struct.bssl::OPENSSL_timeval"* %3, i64 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = icmp ult i64 %20, %22
  br i1 %23, label %36, label %24

24:                                               ; preds = %16
  %25 = icmp eq i64 %20, %22
  %26 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %18, i64 0, i32 21, i32 1
  br i1 %25, label %31, label %27

27:                                               ; preds = %24
  %28 = load i32, i32* %26, align 1
  %29 = getelementptr inbounds %"struct.bssl::OPENSSL_timeval", %"struct.bssl::OPENSSL_timeval"* %3, i64 0, i32 1
  %30 = load i32, i32* %29, align 8
  br label %38

31:                                               ; preds = %24
  %32 = load i32, i32* %26, align 8
  %33 = getelementptr inbounds %"struct.bssl::OPENSSL_timeval", %"struct.bssl::OPENSSL_timeval"* %3, i64 0, i32 1
  %34 = load i32, i32* %33, align 8
  %35 = icmp ugt i32 %32, %34
  br i1 %35, label %38, label %36

36:                                               ; preds = %31, %16
  %37 = bitcast %struct.timeval* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 0, i64 16, i1 false) #5
  br label %64

38:                                               ; preds = %27, %31
  %39 = phi i32 [ %30, %27 ], [ %34, %31 ]
  %40 = phi i32 [ %28, %27 ], [ %32, %31 ]
  %41 = sub i64 %20, %22
  %42 = icmp ult i32 %40, %39
  %43 = add i32 %40, 1000000
  %44 = zext i1 %42 to i64
  %45 = sub i64 %41, %44
  %46 = select i1 %42, i32 %43, i32 %40
  %47 = sub i32 %46, %39
  %48 = icmp eq i64 %45, 0
  %49 = icmp ult i32 %47, 15000
  %50 = and i1 %48, %49
  br i1 %50, label %51, label %53

51:                                               ; preds = %38
  %52 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i64 0, i32 0
  br label %57

53:                                               ; preds = %38
  %54 = icmp ugt i64 %45, 2147483647
  %55 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i64 0, i32 0
  br i1 %54, label %56, label %57

56:                                               ; preds = %53
  store i64 2147483647, i64* %55, align 8
  br label %60

57:                                               ; preds = %51, %53
  %58 = phi i64* [ %52, %51 ], [ %55, %53 ]
  %59 = phi i32 [ 0, %51 ], [ %47, %53 ]
  store i64 %45, i64* %58, align 8
  br label %60

60:                                               ; preds = %57, %56
  %61 = phi i32 [ %59, %57 ], [ %47, %56 ]
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i64 0, i32 1
  store i64 %62, i64* %63, align 8
  br label %64

64:                                               ; preds = %60, %36
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #5
  br label %65

65:                                               ; preds = %12, %2, %64
  %66 = phi i32 [ 1, %64 ], [ 0, %2 ], [ 0, %12 ]
  ret i32 %66
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl16dtls1_stop_timerEP6ssl_st(%struct.ssl_st* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %3 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %4 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %3, i64 0, i32 20
  store i32 0, i32* %4, align 4
  %5 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %6 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %5, i64 0, i32 21
  %7 = bitcast %"struct.bssl::OPENSSL_timeval"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 0, i64 16, i1 false) #5
  %8 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 12
  %9 = load i32, i32* %8, align 8
  %10 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %11 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %10, i64 0, i32 22
  store i32 %9, i32* %11, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl23dtls1_check_timeout_numEP6ssl_st(%struct.ssl_st*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %3 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %4 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %3, i64 0, i32 20
  %5 = load i32, i32* %4, align 4
  %6 = add i32 %5, 1
  store i32 %6, i32* %4, align 4
  %7 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %8 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %7, i64 0, i32 20
  %9 = load i32, i32* %8, align 4
  %10 = icmp ugt i32 %9, 2
  br i1 %10, label %11, label %27

11:                                               ; preds = %1
  %12 = tail call i32 @SSL_get_options(%struct.ssl_st* %0) #5
  %13 = and i32 %12, 4096
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %27

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %17 = load %struct.bio_st*, %struct.bio_st** %16, align 8
  %18 = tail call i64 @BIO_ctrl(%struct.bio_st* %17, i32 47, i64 0, i8* null) #5
  %19 = icmp ult i64 %18, 1073741825
  br i1 %19, label %20, label %27

20:                                               ; preds = %15
  %21 = trunc i64 %18 to i32
  %22 = tail call i32 @_ZN4bssl13dtls1_min_mtuEv() #5
  %23 = icmp ugt i32 %22, %21
  br i1 %23, label %27, label %24

24:                                               ; preds = %20
  %25 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %26 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %25, i64 0, i32 19
  store i32 %21, i32* %26, align 8
  br label %27

27:                                               ; preds = %15, %24, %20, %11, %1
  %28 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %29 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %28, i64 0, i32 20
  %30 = load i32, i32* %29, align 4
  %31 = icmp ugt i32 %30, 12
  br i1 %31, label %32, label %33

32:                                               ; preds = %27
  tail call void @ERR_put_error(i32 16, i32 0, i32 198, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i32 183) #5
  br label %33

33:                                               ; preds = %27, %32
  %34 = phi i1 [ false, %32 ], [ true, %27 ]
  ret i1 %34
}

declare i32 @SSL_get_options(%struct.ssl_st*) local_unnamed_addr #1

declare i64 @BIO_ctrl(%struct.bio_st*, i32, i64, i8*) local_unnamed_addr #1

declare i32 @_ZN4bssl13dtls1_min_mtuEv() local_unnamed_addr #1

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @DTLSv1_set_initial_timeout_duration(%struct.ssl_st* nocapture, i32) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 12
  store i32 %1, i32* %3, align 8
  ret void
}

declare i32 @SSL_is_dtls(%struct.ssl_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @DTLSv1_handle_timeout(%struct.ssl_st*) local_unnamed_addr #0 {
  %2 = alloca %struct.timeval, align 8
  tail call void @_ZN4bssl21ssl_reset_error_stateEP6ssl_st(%struct.ssl_st* %0) #5
  %3 = tail call i32 @SSL_is_dtls(%struct.ssl_st* %0) #5
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  tail call void @ERR_put_error(i32 16, i32 0, i32 66, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i32 252) #5
  br label %80

6:                                                ; preds = %1
  %7 = bitcast %struct.timeval* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 16, i1 false) #5
  %8 = call i32 @DTLSv1_get_timeout(%struct.ssl_st* %0, %struct.timeval* nonnull %2) #5
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #5
  br label %80

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i64 0, i32 0
  %13 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i64 0, i32 1
  %14 = load i64, i64* %12, align 8
  %15 = icmp slt i64 %14, 1
  %16 = load i64, i64* %13, align 8
  %17 = icmp slt i64 %16, 1
  %18 = and i1 %15, %17
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #5
  br i1 %18, label %19, label %80

19:                                               ; preds = %11
  %20 = tail call zeroext i1 @_ZN4bssl23dtls1_check_timeout_numEP6ssl_st(%struct.ssl_st* %0)
  br i1 %20, label %21, label %80

21:                                               ; preds = %19
  %22 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %23 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %22, align 8
  %24 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %23, i64 0, i32 22
  %25 = load i32, i32* %24, align 8
  %26 = shl i32 %25, 1
  store i32 %26, i32* %24, align 8
  %27 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %22, align 8
  %28 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %27, i64 0, i32 22
  %29 = load i32, i32* %28, align 8
  %30 = icmp ugt i32 %29, 60000
  br i1 %30, label %31, label %33

31:                                               ; preds = %21
  store i32 60000, i32* %28, align 8
  %32 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %22, align 8
  br label %33

33:                                               ; preds = %21, %31
  %34 = phi %"struct.bssl::DTLS1_STATE"* [ %27, %21 ], [ %32, %31 ]
  %35 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %34, i64 0, i32 21, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %47

38:                                               ; preds = %33
  %39 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %34, i64 0, i32 21, i32 1
  %40 = load i32, i32* %39, align 8
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %47

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 12
  %44 = load i32, i32* %43, align 8
  %45 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %34, i64 0, i32 22
  store i32 %44, i32* %45, align 8
  %46 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %22, align 8
  br label %47

47:                                               ; preds = %42, %38, %33
  %48 = phi %"struct.bssl::DTLS1_STATE"* [ %46, %42 ], [ %34, %38 ], [ %34, %33 ]
  %49 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %48, i64 0, i32 21
  tail call void @_ZN4bssl20ssl_get_current_timeEPK6ssl_stPNS_15OPENSSL_timevalE(%struct.ssl_st* %0, %"struct.bssl::OPENSSL_timeval"* %49) #5
  %50 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %22, align 8
  %51 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %50, i64 0, i32 22
  %52 = load i32, i32* %51, align 8
  %53 = udiv i32 %52, 1000
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %50, i64 0, i32 21, i32 0
  %56 = load i64, i64* %55, align 8
  %57 = add i64 %56, %54
  store i64 %57, i64* %55, align 8
  %58 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %22, align 8
  %59 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %58, i64 0, i32 22
  %60 = load i32, i32* %59, align 8
  %61 = urem i32 %60, 1000
  %62 = mul nuw nsw i32 %61, 1000
  %63 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %58, i64 0, i32 21, i32 1
  %64 = load i32, i32* %63, align 8
  %65 = add i32 %62, %64
  store i32 %65, i32* %63, align 8
  %66 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %22, align 8
  %67 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %66, i64 0, i32 21, i32 1
  %68 = load i32, i32* %67, align 8
  %69 = icmp ugt i32 %68, 999999
  br i1 %69, label %70, label %78

70:                                               ; preds = %47
  %71 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %66, i64 0, i32 21, i32 0
  %72 = load i64, i64* %71, align 8
  %73 = add i64 %72, 1
  store i64 %73, i64* %71, align 8
  %74 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %22, align 8
  %75 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %74, i64 0, i32 21, i32 1
  %76 = load i32, i32* %75, align 8
  %77 = add i32 %76, -1000000
  store i32 %77, i32* %75, align 8
  br label %78

78:                                               ; preds = %47, %70
  %79 = tail call i32 @_ZN4bssl34dtls1_retransmit_outgoing_messagesEP6ssl_st(%struct.ssl_st* %0) #5
  br label %80

80:                                               ; preds = %10, %19, %11, %78, %5
  %81 = phi i32 [ %79, %78 ], [ -1, %5 ], [ 0, %11 ], [ -1, %19 ], [ 0, %10 ]
  ret i32 %81
}

declare void @_ZN4bssl21ssl_reset_error_stateEP6ssl_st(%struct.ssl_st*) local_unnamed_addr #1

declare i32 @_ZN4bssl34dtls1_retransmit_outgoing_messagesEP6ssl_st(%struct.ssl_st*) local_unnamed_addr #1

declare void @_ZN4bssl21DTLS_OUTGOING_MESSAGE5ClearEv(%"struct.bssl::DTLS_OUTGOING_MESSAGE"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind
declare void @_ZN4bssl11hm_fragmentD1Ev(%"struct.bssl::hm_fragment"*) unnamed_addr #4

declare void @OPENSSL_free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4bssl14SSLAEADContextD1Ev(%"class.bssl::SSLAEADContext"*) unnamed_addr #4

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
