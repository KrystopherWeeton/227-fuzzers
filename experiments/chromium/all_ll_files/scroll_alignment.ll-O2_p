; ModuleID = '../../third_party/blink/renderer/core/scroll/scroll_alignment.cc'
source_filename = "../../third_party/blink/renderer/core/scroll/scroll_alignment.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StaticSingleton" = type { %"class.WTF::StaticSingleton<const blink::mojom::blink::ScrollAlignment>::InstanceStorage" }
%"class.WTF::StaticSingleton<const blink::mojom::blink::ScrollAlignment>::InstanceStorage" = type { [12 x i8] }
%"struct.blink::PhysicalRect" = type { %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalSize" }
%"struct.blink::PhysicalOffset" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"struct.blink::PhysicalSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::mojom::blink::ScrollAlignment" = type { i32, i32, i32 }
%"class.blink::FloatSize" = type { float, float }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::mojom::blink::ScrollIntoViewParams"* }
%"class.blink::mojom::blink::ScrollIntoViewParams" = type <{ %"class.mojo::InlinedStructPtr", %"class.mojo::InlinedStructPtr", i32, i8, [3 x i8], i32, i8, i8, [2 x i8], %"class.gfx::RectF", %"class.gfx::RectF", i8, [3 x i8] }>
%"class.mojo::InlinedStructPtr" = type { %"class.blink::mojom::blink::ScrollAlignment", i32 }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }

@_ZZN5blink15ScrollAlignment14CenterIfNeededEvE33s_g_scroll_align_center_if_needed = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 4
@_ZGVZN5blink15ScrollAlignment14CenterIfNeededEvE33s_g_scroll_align_center_if_needed = internal global i64 0, align 8
@_ZZN5blink15ScrollAlignment14ToEdgeIfNeededEvE34s_g_scroll_align_to_edge_if_needed = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 4
@_ZGVZN5blink15ScrollAlignment14ToEdgeIfNeededEvE34s_g_scroll_align_to_edge_if_needed = internal global i64 0, align 8
@_ZZN5blink15ScrollAlignment12CenterAlwaysEvE30s_g_scroll_align_center_always = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 4
@_ZGVZN5blink15ScrollAlignment12CenterAlwaysEvE30s_g_scroll_align_center_always = internal global i64 0, align 8
@_ZZN5blink15ScrollAlignment9TopAlwaysEvE27s_g_scroll_align_top_always = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 4
@_ZGVZN5blink15ScrollAlignment9TopAlwaysEvE27s_g_scroll_align_top_always = internal global i64 0, align 8
@_ZZN5blink15ScrollAlignment12BottomAlwaysEvE30s_g_scroll_align_bottom_always = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 4
@_ZGVZN5blink15ScrollAlignment12BottomAlwaysEvE30s_g_scroll_align_bottom_always = internal global i64 0, align 8
@_ZZN5blink15ScrollAlignment10LeftAlwaysEvE28s_g_scroll_align_left_always = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 4
@_ZGVZN5blink15ScrollAlignment10LeftAlwaysEvE28s_g_scroll_align_left_always = internal global i64 0, align 8
@_ZZN5blink15ScrollAlignment11RightAlwaysEvE29s_g_scroll_align_right_always = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 4
@_ZGVZN5blink15ScrollAlignment11RightAlwaysEvE29s_g_scroll_align_right_always = internal global i64 0, align 8

; Function Attrs: nounwind ssp uwtable
define hidden <2 x float> @_ZN5blink15ScrollAlignment23GetScrollOffsetToExposeERKNS_12PhysicalRectES3_RKNS_5mojom5blink15ScrollAlignmentES8_RKNS_9FloatSizeE(%"struct.blink::PhysicalRect"* nocapture readonly dereferenceable(16), %"struct.blink::PhysicalRect"* readonly dereferenceable(16), %"class.blink::mojom::blink::ScrollAlignment"* nocapture readonly dereferenceable(12), %"class.blink::mojom::blink::ScrollAlignment"* nocapture readonly dereferenceable(12), %"class.blink::FloatSize"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %6 = alloca { i64, i64 }, align 8
  %7 = alloca { i64, i64 }, align 8
  %8 = alloca %"struct.blink::PhysicalRect", align 4
  %9 = alloca %"struct.blink::PhysicalRect", align 4
  %10 = bitcast %"struct.blink::PhysicalRect"* %0 to i64*
  %11 = load i64, i64* %10, align 4
  %12 = trunc i64 %11 to i32
  %13 = lshr i64 %11, 32
  %14 = trunc i64 %13 to i32
  %15 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 1, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %16, 0
  %20 = select i1 %19, i32 1, i32 %16
  %21 = icmp eq i32 %18, 0
  %22 = select i1 %21, i32 1, i32 %18
  %23 = bitcast %"struct.blink::PhysicalRect"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #9
  %24 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %8, i64 0, i32 0, i32 0, i32 0
  %25 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %8, i64 0, i32 0, i32 1, i32 0
  %26 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %8, i64 0, i32 1, i32 0, i32 0
  %27 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %8, i64 0, i32 1, i32 1, i32 0
  %28 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 0, i32 0
  %31 = load i32, i32* %30, align 4
  store i32 %29, i32* %24, align 4
  store i32 %14, i32* %25, align 4
  store i32 %31, i32* %26, align 4
  store i32 %22, i32* %27, align 4
  %32 = bitcast { i64, i64 }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32)
  %33 = bitcast { i64, i64 }* %6 to %"struct.blink::PhysicalRect"*
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 0
  store i64 %11, i64* %35, align 8
  %36 = bitcast i64* %34 to i32*
  store i32 %20, i32* %36, align 8
  %37 = getelementptr inbounds i8, i8* %32, i64 12
  %38 = bitcast i8* %37 to i32*
  store i32 %22, i32* %38, align 4
  call void @_ZN5blink12PhysicalRect9IntersectERKS0_(%"struct.blink::PhysicalRect"* nonnull %33, %"struct.blink::PhysicalRect"* nonnull dereferenceable(16) %8) #9
  %39 = load i64, i64* %34, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32)
  %40 = trunc i64 %39 to i32
  %41 = load i32, i32* %30, align 4
  %42 = icmp eq i32 %41, %40
  br i1 %42, label %43, label %46

43:                                               ; preds = %5
  %44 = getelementptr inbounds %"class.blink::mojom::blink::ScrollAlignment", %"class.blink::mojom::blink::ScrollAlignment"* %2, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  br label %60

46:                                               ; preds = %5
  %47 = icmp eq i32 %20, %40
  br i1 %47, label %48, label %52

48:                                               ; preds = %46
  %49 = getelementptr inbounds %"class.blink::mojom::blink::ScrollAlignment", %"class.blink::mojom::blink::ScrollAlignment"* %2, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %85, label %60

52:                                               ; preds = %46
  %53 = icmp sgt i32 %40, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %52
  %55 = getelementptr inbounds %"class.blink::mojom::blink::ScrollAlignment", %"class.blink::mojom::blink::ScrollAlignment"* %2, i64 0, i32 2
  %56 = load i32, i32* %55, align 4
  br label %60

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.blink::mojom::blink::ScrollAlignment", %"class.blink::mojom::blink::ScrollAlignment"* %2, i64 0, i32 1
  %59 = load i32, i32* %58, align 4
  br label %60

60:                                               ; preds = %48, %57, %54, %43
  %61 = phi i32 [ %45, %43 ], [ %50, %48 ], [ %56, %54 ], [ %59, %57 ]
  %62 = icmp eq i32 %61, 6
  br i1 %62, label %63, label %85

63:                                               ; preds = %60
  %64 = load i32, i32* %28, align 4
  %65 = icmp slt i32 %41, 0
  %66 = select i1 %65, i32 -2147483648, i32 2147483647
  %67 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %64, i32 %41) #9
  %68 = extractvalue { i32, i1 } %67, 1
  %69 = extractvalue { i32, i1 } %67, 0
  %70 = select i1 %68, i32 %66, i32 %69, !prof !2
  %71 = icmp slt i32 %20, 0
  %72 = select i1 %71, i32 -2147483648, i32 2147483647
  %73 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %12, i32 %20) #9
  %74 = extractvalue { i32, i1 } %73, 1
  %75 = extractvalue { i32, i1 } %73, 0
  %76 = select i1 %74, i32 %72, i32 %75, !prof !2
  %77 = icmp sgt i32 %70, %76
  %78 = icmp slt i32 %41, %20
  %79 = and i1 %78, %77
  br i1 %79, label %84, label %80

80:                                               ; preds = %63
  %81 = icmp slt i32 %70, %76
  %82 = icmp sgt i32 %41, %20
  %83 = and i1 %82, %81
  br i1 %83, label %84, label %85

84:                                               ; preds = %80, %63
  br label %85

85:                                               ; preds = %80, %48, %84, %60
  %86 = phi i32 [ %61, %60 ], [ 5, %84 ], [ 0, %48 ], [ 6, %80 ]
  %87 = bitcast %"struct.blink::PhysicalRect"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %87) #9
  %88 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %9, i64 0, i32 0, i32 0, i32 0
  %89 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %9, i64 0, i32 0, i32 1, i32 0
  %90 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %9, i64 0, i32 1, i32 0, i32 0
  %91 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %9, i64 0, i32 1, i32 1, i32 0
  %92 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 1, i32 0
  %93 = load i32, i32* %92, align 4
  %94 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 1, i32 0
  %95 = load i32, i32* %94, align 4
  store i32 %12, i32* %88, align 4
  store i32 %93, i32* %89, align 4
  store i32 %20, i32* %90, align 4
  store i32 %95, i32* %91, align 4
  %96 = bitcast { i64, i64 }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %96)
  %97 = bitcast { i64, i64 }* %7 to %"struct.blink::PhysicalRect"*
  %98 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %99 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 0
  store i64 %11, i64* %99, align 8
  %100 = bitcast i64* %98 to i32*
  store i32 %20, i32* %100, align 8
  %101 = getelementptr inbounds i8, i8* %96, i64 12
  %102 = bitcast i8* %101 to i32*
  store i32 %22, i32* %102, align 4
  call void @_ZN5blink12PhysicalRect9IntersectERKS0_(%"struct.blink::PhysicalRect"* nonnull %97, %"struct.blink::PhysicalRect"* nonnull dereferenceable(16) %9) #9
  %103 = load i64, i64* %98, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %96)
  %104 = lshr i64 %103, 32
  %105 = trunc i64 %104 to i32
  %106 = load i32, i32* %94, align 4
  %107 = icmp eq i32 %106, %105
  br i1 %107, label %108, label %111

108:                                              ; preds = %85
  %109 = getelementptr inbounds %"class.blink::mojom::blink::ScrollAlignment", %"class.blink::mojom::blink::ScrollAlignment"* %3, i64 0, i32 0
  %110 = load i32, i32* %109, align 4
  br label %125

111:                                              ; preds = %85
  %112 = icmp eq i32 %22, %105
  br i1 %112, label %113, label %117

113:                                              ; preds = %111
  %114 = getelementptr inbounds %"class.blink::mojom::blink::ScrollAlignment", %"class.blink::mojom::blink::ScrollAlignment"* %3, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  %116 = icmp eq i32 %115, 1
  br i1 %116, label %150, label %125

117:                                              ; preds = %111
  %118 = icmp sgt i32 %105, 0
  br i1 %118, label %119, label %122

119:                                              ; preds = %117
  %120 = getelementptr inbounds %"class.blink::mojom::blink::ScrollAlignment", %"class.blink::mojom::blink::ScrollAlignment"* %3, i64 0, i32 2
  %121 = load i32, i32* %120, align 4
  br label %125

122:                                              ; preds = %117
  %123 = getelementptr inbounds %"class.blink::mojom::blink::ScrollAlignment", %"class.blink::mojom::blink::ScrollAlignment"* %3, i64 0, i32 1
  %124 = load i32, i32* %123, align 4
  br label %125

125:                                              ; preds = %113, %122, %119, %108
  %126 = phi i32 [ %110, %108 ], [ %115, %113 ], [ %121, %119 ], [ %124, %122 ]
  %127 = icmp eq i32 %126, 6
  br i1 %127, label %128, label %150

128:                                              ; preds = %125
  %129 = load i32, i32* %92, align 4
  %130 = icmp slt i32 %106, 0
  %131 = select i1 %130, i32 -2147483648, i32 2147483647
  %132 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %129, i32 %106) #9
  %133 = extractvalue { i32, i1 } %132, 1
  %134 = extractvalue { i32, i1 } %132, 0
  %135 = select i1 %133, i32 %131, i32 %134, !prof !2
  %136 = icmp slt i32 %22, 0
  %137 = select i1 %136, i32 -2147483648, i32 2147483647
  %138 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %14, i32 %22) #9
  %139 = extractvalue { i32, i1 } %138, 1
  %140 = extractvalue { i32, i1 } %138, 0
  %141 = select i1 %139, i32 %137, i32 %140, !prof !2
  %142 = icmp sgt i32 %135, %141
  %143 = icmp slt i32 %106, %22
  %144 = and i1 %143, %142
  br i1 %144, label %149, label %145

145:                                              ; preds = %128
  %146 = icmp slt i32 %135, %141
  %147 = icmp sgt i32 %106, %22
  %148 = and i1 %147, %146
  br i1 %148, label %149, label %150

149:                                              ; preds = %145, %128
  br label %150

150:                                              ; preds = %145, %113, %149, %125
  %151 = phi i32 [ %126, %125 ], [ 3, %149 ], [ 0, %113 ], [ 6, %145 ]
  %152 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %4, i64 0, i32 0
  %153 = load float, float* %152, align 4
  %154 = fmul float %153, 6.400000e+01
  %155 = call float @llvm.round.f32(float %154) #9
  %156 = fcmp ult float %155, 0xC1E0000000000000
  %157 = fcmp ugt float %155, 0x41DFFFFFE0000000
  %158 = fcmp ogt float %155, 0xC1E0000000000000
  %159 = select i1 %158, float %155, float 0xC1E0000000000000
  %160 = fptosi float %159 to i32
  %161 = select i1 %156, i32 0, i32 2147483647
  %162 = select i1 %157, i32 %161, i32 %160
  %163 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %4, i64 0, i32 1
  %164 = load float, float* %163, align 4
  %165 = fmul float %164, 6.400000e+01
  %166 = call float @llvm.round.f32(float %165) #9
  %167 = fcmp ult float %166, 0xC1E0000000000000
  %168 = fcmp ugt float %166, 0x41DFFFFFE0000000
  %169 = fcmp ogt float %166, 0xC1E0000000000000
  %170 = select i1 %169, float %166, float 0xC1E0000000000000
  %171 = fptosi float %170 to i32
  %172 = select i1 %167, i32 0, i32 2147483647
  %173 = select i1 %168, i32 %172, i32 %171
  %174 = call i1 @llvm.is.constant.i32(i32 %162) #9
  br i1 %174, label %175, label %179

175:                                              ; preds = %150
  %176 = sub i32 0, %162
  %177 = icmp eq i32 %176, -2147483648
  %178 = select i1 %177, i32 2147483647, i32 %176
  br label %184

179:                                              ; preds = %150
  %180 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %162) #9
  %181 = extractvalue { i32, i1 } %180, 1
  %182 = extractvalue { i32, i1 } %180, 0
  %183 = select i1 %181, i32 2147483647, i32 %182
  br label %184

184:                                              ; preds = %179, %175
  %185 = phi i32 [ %178, %175 ], [ %183, %179 ]
  %186 = call i1 @llvm.is.constant.i32(i32 %173) #9
  br i1 %186, label %187, label %191

187:                                              ; preds = %184
  %188 = sub i32 0, %173
  %189 = icmp eq i32 %188, -2147483648
  %190 = select i1 %189, i32 2147483647, i32 %188
  br label %196

191:                                              ; preds = %184
  %192 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %173) #9
  %193 = extractvalue { i32, i1 } %192, 1
  %194 = extractvalue { i32, i1 } %192, 0
  %195 = select i1 %193, i32 2147483647, i32 %194
  br label %196

196:                                              ; preds = %187, %191
  %197 = phi i32 [ %190, %187 ], [ %195, %191 ]
  %198 = icmp slt i32 %185, 0
  %199 = select i1 %198, i32 -2147483648, i32 2147483647
  %200 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %12, i32 %185) #9
  %201 = extractvalue { i32, i1 } %200, 1
  %202 = extractvalue { i32, i1 } %200, 0
  %203 = select i1 %201, i32 %199, i32 %202, !prof !2
  %204 = icmp slt i32 %197, 0
  %205 = select i1 %204, i32 -2147483648, i32 2147483647
  %206 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %14, i32 %197) #9
  %207 = extractvalue { i32, i1 } %206, 1
  %208 = extractvalue { i32, i1 } %206, 0
  %209 = select i1 %207, i32 %205, i32 %208, !prof !2
  switch i32 %86, label %279 [
    i32 0, label %289
    i32 5, label %210
    i32 1, label %233
  ]

210:                                              ; preds = %196
  %211 = load i32, i32* %28, align 4
  %212 = load i32, i32* %30, align 4
  %213 = icmp slt i32 %212, 0
  %214 = select i1 %213, i32 -2147483648, i32 2147483647
  %215 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %211, i32 %212) #9
  %216 = extractvalue { i32, i1 } %215, 1
  %217 = extractvalue { i32, i1 } %215, 0
  %218 = select i1 %216, i32 %214, i32 %217, !prof !2
  %219 = icmp slt i32 %20, 0
  %220 = select i1 %219, i32 -2147483648, i32 2147483647
  %221 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %203, i32 %20) #9
  %222 = extractvalue { i32, i1 } %221, 1
  %223 = extractvalue { i32, i1 } %221, 0
  %224 = select i1 %222, i32 %220, i32 %223, !prof !2
  %225 = icmp sgt i32 %224, -1
  %226 = select i1 %225, i32 -2147483648, i32 2147483647
  %227 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %218, i32 %224) #9
  %228 = extractvalue { i32, i1 } %227, 1
  %229 = extractvalue { i32, i1 } %227, 0
  %230 = select i1 %228, i32 %226, i32 %229, !prof !2
  %231 = sitofp i32 %230 to float
  %232 = fmul float %231, 1.562500e-02
  br label %289

233:                                              ; preds = %196
  %234 = load i32, i32* %28, align 4
  %235 = load i32, i32* %30, align 4
  %236 = icmp slt i32 %235, 0
  %237 = select i1 %236, i32 -2147483648, i32 2147483647
  %238 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %234, i32 %235) #9
  %239 = extractvalue { i32, i1 } %238, 1
  %240 = extractvalue { i32, i1 } %238, 0
  %241 = select i1 %239, i32 %237, i32 %240, !prof !2
  %242 = icmp slt i32 %241, 0
  %243 = select i1 %242, i32 -2147483648, i32 2147483647
  %244 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %234, i32 %241) #9
  %245 = extractvalue { i32, i1 } %244, 1
  %246 = extractvalue { i32, i1 } %244, 0
  %247 = select i1 %245, i32 %243, i32 %246, !prof !2
  %248 = icmp slt i32 %20, 0
  %249 = select i1 %248, i32 -2147483648, i32 2147483647
  %250 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %203, i32 %20) #9
  %251 = extractvalue { i32, i1 } %250, 1
  %252 = extractvalue { i32, i1 } %250, 0
  %253 = select i1 %251, i32 %249, i32 %252, !prof !2
  %254 = icmp slt i32 %253, 0
  %255 = select i1 %254, i32 -2147483648, i32 2147483647
  %256 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %203, i32 %253) #9
  %257 = extractvalue { i32, i1 } %256, 1
  %258 = extractvalue { i32, i1 } %256, 0
  %259 = select i1 %257, i32 %255, i32 %258, !prof !2
  %260 = icmp sgt i32 %259, -1
  %261 = select i1 %260, i32 -2147483648, i32 2147483647
  %262 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %247, i32 %259) #9
  %263 = extractvalue { i32, i1 } %262, 1
  %264 = extractvalue { i32, i1 } %262, 0
  %265 = select i1 %263, i32 %261, i32 %264, !prof !2
  %266 = sdiv i32 %265, 2
  %267 = sext i32 %266 to i64
  %268 = call i1 @llvm.is.constant.i64(i64 %267) #9
  br i1 %268, label %275, label %269

269:                                              ; preds = %233
  %270 = icmp slt i32 %265, -1
  %271 = select i1 %270, i32 -2147483648, i32 2147483647
  %272 = add nsw i64 %267, 2147483648
  %273 = icmp ult i64 %272, 4294967296
  %274 = select i1 %273, i32 %266, i32 %271, !prof !3
  br label %275

275:                                              ; preds = %233, %269
  %276 = phi i32 [ %274, %269 ], [ %266, %233 ]
  %277 = sitofp i32 %276 to float
  %278 = fmul float %277, 1.562500e-02
  br label %289

279:                                              ; preds = %196
  %280 = load i32, i32* %28, align 4
  %281 = icmp sgt i32 %203, -1
  %282 = select i1 %281, i32 -2147483648, i32 2147483647
  %283 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %280, i32 %203) #9
  %284 = extractvalue { i32, i1 } %283, 1
  %285 = extractvalue { i32, i1 } %283, 0
  %286 = select i1 %284, i32 %282, i32 %285, !prof !2
  %287 = sitofp i32 %286 to float
  %288 = fmul float %287, 1.562500e-02
  br label %289

289:                                              ; preds = %196, %210, %279, %275
  %290 = phi float [ %232, %210 ], [ %278, %275 ], [ %288, %279 ], [ %153, %196 ]
  switch i32 %151, label %358 [
    i32 0, label %368
    i32 3, label %291
    i32 1, label %313
  ]

291:                                              ; preds = %289
  %292 = load i32, i32* %92, align 4
  %293 = icmp slt i32 %106, 0
  %294 = select i1 %293, i32 -2147483648, i32 2147483647
  %295 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %292, i32 %106) #9
  %296 = extractvalue { i32, i1 } %295, 1
  %297 = extractvalue { i32, i1 } %295, 0
  %298 = select i1 %296, i32 %294, i32 %297, !prof !2
  %299 = icmp slt i32 %22, 0
  %300 = select i1 %299, i32 -2147483648, i32 2147483647
  %301 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %209, i32 %22) #9
  %302 = extractvalue { i32, i1 } %301, 1
  %303 = extractvalue { i32, i1 } %301, 0
  %304 = select i1 %302, i32 %300, i32 %303, !prof !2
  %305 = icmp sgt i32 %304, -1
  %306 = select i1 %305, i32 -2147483648, i32 2147483647
  %307 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %298, i32 %304) #9
  %308 = extractvalue { i32, i1 } %307, 1
  %309 = extractvalue { i32, i1 } %307, 0
  %310 = select i1 %308, i32 %306, i32 %309, !prof !2
  %311 = sitofp i32 %310 to float
  %312 = fmul float %311, 1.562500e-02
  br label %368

313:                                              ; preds = %289
  %314 = load i32, i32* %92, align 4
  %315 = icmp slt i32 %106, 0
  %316 = select i1 %315, i32 -2147483648, i32 2147483647
  %317 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %314, i32 %106) #9
  %318 = extractvalue { i32, i1 } %317, 1
  %319 = extractvalue { i32, i1 } %317, 0
  %320 = select i1 %318, i32 %316, i32 %319, !prof !2
  %321 = icmp slt i32 %320, 0
  %322 = select i1 %321, i32 -2147483648, i32 2147483647
  %323 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %314, i32 %320) #9
  %324 = extractvalue { i32, i1 } %323, 1
  %325 = extractvalue { i32, i1 } %323, 0
  %326 = select i1 %324, i32 %322, i32 %325, !prof !2
  %327 = icmp slt i32 %22, 0
  %328 = select i1 %327, i32 -2147483648, i32 2147483647
  %329 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %209, i32 %22) #9
  %330 = extractvalue { i32, i1 } %329, 1
  %331 = extractvalue { i32, i1 } %329, 0
  %332 = select i1 %330, i32 %328, i32 %331, !prof !2
  %333 = icmp slt i32 %332, 0
  %334 = select i1 %333, i32 -2147483648, i32 2147483647
  %335 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %209, i32 %332) #9
  %336 = extractvalue { i32, i1 } %335, 1
  %337 = extractvalue { i32, i1 } %335, 0
  %338 = select i1 %336, i32 %334, i32 %337, !prof !2
  %339 = icmp sgt i32 %338, -1
  %340 = select i1 %339, i32 -2147483648, i32 2147483647
  %341 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %326, i32 %338) #9
  %342 = extractvalue { i32, i1 } %341, 1
  %343 = extractvalue { i32, i1 } %341, 0
  %344 = select i1 %342, i32 %340, i32 %343, !prof !2
  %345 = sdiv i32 %344, 2
  %346 = sext i32 %345 to i64
  %347 = call i1 @llvm.is.constant.i64(i64 %346) #9
  br i1 %347, label %354, label %348

348:                                              ; preds = %313
  %349 = icmp slt i32 %344, -1
  %350 = select i1 %349, i32 -2147483648, i32 2147483647
  %351 = add nsw i64 %346, 2147483648
  %352 = icmp ult i64 %351, 4294967296
  %353 = select i1 %352, i32 %345, i32 %350, !prof !3
  br label %354

354:                                              ; preds = %313, %348
  %355 = phi i32 [ %353, %348 ], [ %345, %313 ]
  %356 = sitofp i32 %355 to float
  %357 = fmul float %356, 1.562500e-02
  br label %368

358:                                              ; preds = %289
  %359 = load i32, i32* %92, align 4
  %360 = icmp sgt i32 %209, -1
  %361 = select i1 %360, i32 -2147483648, i32 2147483647
  %362 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %359, i32 %209) #9
  %363 = extractvalue { i32, i1 } %362, 1
  %364 = extractvalue { i32, i1 } %362, 0
  %365 = select i1 %363, i32 %361, i32 %364, !prof !2
  %366 = sitofp i32 %365 to float
  %367 = fmul float %366, 1.562500e-02
  br label %368

368:                                              ; preds = %289, %291, %358, %354
  %369 = phi float [ %312, %291 ], [ %357, %354 ], [ %367, %358 ], [ %164, %289 ]
  %370 = insertelement <2 x float> undef, float %290, i32 0
  %371 = insertelement <2 x float> %370, float %369, i32 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %87) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #9
  ret <2 x float> %371
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(12) %"class.blink::mojom::blink::ScrollAlignment"* @_ZN5blink15ScrollAlignment14CenterIfNeededEv() local_unnamed_addr #2 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink15ScrollAlignment14CenterIfNeededEvE33s_g_scroll_align_center_if_needed to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %7, !prof !4

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink15ScrollAlignment14CenterIfNeededEvE33s_g_scroll_align_center_if_needed) #9
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  tail call void @_ZN5blink5mojom5blink15ScrollAlignmentC1ENS0_24ScrollAlignment_BehaviorES3_S3_(%"class.blink::mojom::blink::ScrollAlignment"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink15ScrollAlignment14CenterIfNeededEvE33s_g_scroll_align_center_if_needed to %"class.blink::mojom::blink::ScrollAlignment"*), i32 0, i32 1, i32 6) #9
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink15ScrollAlignment14CenterIfNeededEvE33s_g_scroll_align_center_if_needed) #9
  br label %7

7:                                                ; preds = %3, %6, %0
  ret %"class.blink::mojom::blink::ScrollAlignment"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink15ScrollAlignment14CenterIfNeededEvE33s_g_scroll_align_center_if_needed to %"class.blink::mojom::blink::ScrollAlignment"*)
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(12) %"class.blink::mojom::blink::ScrollAlignment"* @_ZN5blink15ScrollAlignment14ToEdgeIfNeededEv() local_unnamed_addr #2 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink15ScrollAlignment14ToEdgeIfNeededEvE34s_g_scroll_align_to_edge_if_needed to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %7, !prof !4

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink15ScrollAlignment14ToEdgeIfNeededEvE34s_g_scroll_align_to_edge_if_needed) #9
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  tail call void @_ZN5blink5mojom5blink15ScrollAlignmentC1ENS0_24ScrollAlignment_BehaviorES3_S3_(%"class.blink::mojom::blink::ScrollAlignment"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink15ScrollAlignment14ToEdgeIfNeededEvE34s_g_scroll_align_to_edge_if_needed to %"class.blink::mojom::blink::ScrollAlignment"*), i32 0, i32 6, i32 6) #9
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink15ScrollAlignment14ToEdgeIfNeededEvE34s_g_scroll_align_to_edge_if_needed) #9
  br label %7

7:                                                ; preds = %3, %6, %0
  ret %"class.blink::mojom::blink::ScrollAlignment"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink15ScrollAlignment14ToEdgeIfNeededEvE34s_g_scroll_align_to_edge_if_needed to %"class.blink::mojom::blink::ScrollAlignment"*)
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(12) %"class.blink::mojom::blink::ScrollAlignment"* @_ZN5blink15ScrollAlignment12CenterAlwaysEv() local_unnamed_addr #2 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink15ScrollAlignment12CenterAlwaysEvE30s_g_scroll_align_center_always to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %7, !prof !4

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink15ScrollAlignment12CenterAlwaysEvE30s_g_scroll_align_center_always) #9
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  tail call void @_ZN5blink5mojom5blink15ScrollAlignmentC1ENS0_24ScrollAlignment_BehaviorES3_S3_(%"class.blink::mojom::blink::ScrollAlignment"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink15ScrollAlignment12CenterAlwaysEvE30s_g_scroll_align_center_always to %"class.blink::mojom::blink::ScrollAlignment"*), i32 1, i32 1, i32 1) #9
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink15ScrollAlignment12CenterAlwaysEvE30s_g_scroll_align_center_always) #9
  br label %7

7:                                                ; preds = %3, %6, %0
  ret %"class.blink::mojom::blink::ScrollAlignment"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink15ScrollAlignment12CenterAlwaysEvE30s_g_scroll_align_center_always to %"class.blink::mojom::blink::ScrollAlignment"*)
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(12) %"class.blink::mojom::blink::ScrollAlignment"* @_ZN5blink15ScrollAlignment9TopAlwaysEv() local_unnamed_addr #2 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink15ScrollAlignment9TopAlwaysEvE27s_g_scroll_align_top_always to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %7, !prof !4

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink15ScrollAlignment9TopAlwaysEvE27s_g_scroll_align_top_always) #9
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  tail call void @_ZN5blink5mojom5blink15ScrollAlignmentC1ENS0_24ScrollAlignment_BehaviorES3_S3_(%"class.blink::mojom::blink::ScrollAlignment"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink15ScrollAlignment9TopAlwaysEvE27s_g_scroll_align_top_always to %"class.blink::mojom::blink::ScrollAlignment"*), i32 2, i32 2, i32 2) #9
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink15ScrollAlignment9TopAlwaysEvE27s_g_scroll_align_top_always) #9
  br label %7

7:                                                ; preds = %3, %6, %0
  ret %"class.blink::mojom::blink::ScrollAlignment"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink15ScrollAlignment9TopAlwaysEvE27s_g_scroll_align_top_always to %"class.blink::mojom::blink::ScrollAlignment"*)
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(12) %"class.blink::mojom::blink::ScrollAlignment"* @_ZN5blink15ScrollAlignment12BottomAlwaysEv() local_unnamed_addr #2 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink15ScrollAlignment12BottomAlwaysEvE30s_g_scroll_align_bottom_always to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %7, !prof !4

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink15ScrollAlignment12BottomAlwaysEvE30s_g_scroll_align_bottom_always) #9
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  tail call void @_ZN5blink5mojom5blink15ScrollAlignmentC1ENS0_24ScrollAlignment_BehaviorES3_S3_(%"class.blink::mojom::blink::ScrollAlignment"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink15ScrollAlignment12BottomAlwaysEvE30s_g_scroll_align_bottom_always to %"class.blink::mojom::blink::ScrollAlignment"*), i32 3, i32 3, i32 3) #9
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink15ScrollAlignment12BottomAlwaysEvE30s_g_scroll_align_bottom_always) #9
  br label %7

7:                                                ; preds = %3, %6, %0
  ret %"class.blink::mojom::blink::ScrollAlignment"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink15ScrollAlignment12BottomAlwaysEvE30s_g_scroll_align_bottom_always to %"class.blink::mojom::blink::ScrollAlignment"*)
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(12) %"class.blink::mojom::blink::ScrollAlignment"* @_ZN5blink15ScrollAlignment10LeftAlwaysEv() local_unnamed_addr #2 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink15ScrollAlignment10LeftAlwaysEvE28s_g_scroll_align_left_always to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %7, !prof !4

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink15ScrollAlignment10LeftAlwaysEvE28s_g_scroll_align_left_always) #9
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  tail call void @_ZN5blink5mojom5blink15ScrollAlignmentC1ENS0_24ScrollAlignment_BehaviorES3_S3_(%"class.blink::mojom::blink::ScrollAlignment"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink15ScrollAlignment10LeftAlwaysEvE28s_g_scroll_align_left_always to %"class.blink::mojom::blink::ScrollAlignment"*), i32 4, i32 4, i32 4) #9
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink15ScrollAlignment10LeftAlwaysEvE28s_g_scroll_align_left_always) #9
  br label %7

7:                                                ; preds = %3, %6, %0
  ret %"class.blink::mojom::blink::ScrollAlignment"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink15ScrollAlignment10LeftAlwaysEvE28s_g_scroll_align_left_always to %"class.blink::mojom::blink::ScrollAlignment"*)
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(12) %"class.blink::mojom::blink::ScrollAlignment"* @_ZN5blink15ScrollAlignment11RightAlwaysEv() local_unnamed_addr #2 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink15ScrollAlignment11RightAlwaysEvE29s_g_scroll_align_right_always to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %7, !prof !4

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink15ScrollAlignment11RightAlwaysEvE29s_g_scroll_align_right_always) #9
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  tail call void @_ZN5blink5mojom5blink15ScrollAlignmentC1ENS0_24ScrollAlignment_BehaviorES3_S3_(%"class.blink::mojom::blink::ScrollAlignment"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink15ScrollAlignment11RightAlwaysEvE29s_g_scroll_align_right_always to %"class.blink::mojom::blink::ScrollAlignment"*), i32 5, i32 5, i32 5) #9
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink15ScrollAlignment11RightAlwaysEvE29s_g_scroll_align_right_always) #9
  br label %7

7:                                                ; preds = %3, %6, %0
  ret %"class.blink::mojom::blink::ScrollAlignment"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink15ScrollAlignment11RightAlwaysEvE29s_g_scroll_align_right_always to %"class.blink::mojom::blink::ScrollAlignment"*)
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15ScrollAlignment26CreateScrollIntoViewParamsERKNS_5mojom5blink15ScrollAlignmentES5_NS1_10ScrollTypeEbNS1_14ScrollBehaviorEbb(%"class.mojo::StructPtr"* noalias nocapture sret, %"class.blink::mojom::blink::ScrollAlignment"* nocapture readonly dereferenceable(12), %"class.blink::mojom::blink::ScrollAlignment"* nocapture readonly dereferenceable(12), i32, i1 zeroext, i32, i1 zeroext, i1 zeroext) local_unnamed_addr #2 align 2 {
  %9 = alloca %"class.blink::mojom::blink::ScrollAlignment", align 4
  %10 = alloca %"class.blink::mojom::blink::ScrollAlignment", align 4
  %11 = alloca %"class.mojo::InlinedStructPtr", align 4
  %12 = alloca %"class.mojo::InlinedStructPtr", align 4
  %13 = zext i1 %4 to i8
  %14 = zext i1 %6 to i8
  %15 = zext i1 %7 to i8
  %16 = tail call i8* @_Znwm(i64 84) #10, !noalias !5
  %17 = bitcast i8* %16 to %"class.blink::mojom::blink::ScrollIntoViewParams"*
  tail call void @_ZN5blink5mojom5blink20ScrollIntoViewParamsC1Ev(%"class.blink::mojom::blink::ScrollIntoViewParams"* nonnull %17) #9, !noalias !5
  %18 = ptrtoint i8* %16 to i64
  %19 = bitcast %"class.mojo::StructPtr"* %0 to i64*
  store i64 %18, i64* %19, align 8, !alias.scope !5
  %20 = bitcast %"class.mojo::InlinedStructPtr"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20) #9
  %21 = bitcast %"class.blink::mojom::blink::ScrollAlignment"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %20, i8* align 4 %21, i64 12, i1 false) #9
  %22 = getelementptr inbounds %"class.mojo::InlinedStructPtr", %"class.mojo::InlinedStructPtr"* %11, i64 0, i32 1
  store i32 1, i32* %22, align 4, !alias.scope !8
  %23 = getelementptr inbounds i8, i8* %16, i64 12
  %24 = bitcast i8* %23 to i32*
  store i32 0, i32* %24, align 4
  %25 = bitcast i8* %16 to %"class.blink::mojom::blink::ScrollAlignment"*
  tail call void @_ZN5blink5mojom5blink15ScrollAlignmentD1Ev(%"class.blink::mojom::blink::ScrollAlignment"* nonnull %25) #9
  tail call void @_ZN5blink5mojom5blink15ScrollAlignmentC1Ev(%"class.blink::mojom::blink::ScrollAlignment"* nonnull %25) #9
  %26 = bitcast %"class.blink::mojom::blink::ScrollAlignment"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %26) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %26, i8* nonnull align 4 %16, i64 12, i1 false) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %16, i8* nonnull align 4 %20, i64 12, i1 false) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %20, i8* nonnull align 4 %26, i64 12, i1 false) #9
  call void @_ZN5blink5mojom5blink15ScrollAlignmentD1Ev(%"class.blink::mojom::blink::ScrollAlignment"* nonnull %10) #9
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %26) #9
  %27 = load i32, i32* %24, align 4
  %28 = load i32, i32* %22, align 4
  store i32 %28, i32* %24, align 4
  store i32 %27, i32* %22, align 4
  %29 = getelementptr inbounds %"class.mojo::InlinedStructPtr", %"class.mojo::InlinedStructPtr"* %11, i64 0, i32 0
  call void @_ZN5blink5mojom5blink15ScrollAlignmentD1Ev(%"class.blink::mojom::blink::ScrollAlignment"* nonnull %29) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #9
  %30 = bitcast %"class.mojo::InlinedStructPtr"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %30) #9
  %31 = bitcast %"class.blink::mojom::blink::ScrollAlignment"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %30, i8* align 4 %31, i64 12, i1 false) #9
  %32 = getelementptr inbounds %"class.mojo::InlinedStructPtr", %"class.mojo::InlinedStructPtr"* %12, i64 0, i32 1
  %33 = getelementptr inbounds i8, i8* %16, i64 16
  %34 = getelementptr inbounds i8, i8* %16, i64 28
  %35 = bitcast i8* %34 to i32*
  store i32 0, i32* %35, align 4
  %36 = bitcast i8* %33 to %"class.blink::mojom::blink::ScrollAlignment"*
  call void @_ZN5blink5mojom5blink15ScrollAlignmentD1Ev(%"class.blink::mojom::blink::ScrollAlignment"* %36) #9
  call void @_ZN5blink5mojom5blink15ScrollAlignmentC1Ev(%"class.blink::mojom::blink::ScrollAlignment"* %36) #9
  %37 = bitcast %"class.blink::mojom::blink::ScrollAlignment"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %37) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %37, i8* align 4 %33, i64 12, i1 false) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %33, i8* nonnull align 4 %30, i64 12, i1 false) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %30, i8* nonnull align 4 %37, i64 12, i1 false) #9
  call void @_ZN5blink5mojom5blink15ScrollAlignmentD1Ev(%"class.blink::mojom::blink::ScrollAlignment"* nonnull %9) #9
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %37) #9
  %38 = load i32, i32* %35, align 4
  store i32 1, i32* %35, align 4
  store i32 %38, i32* %32, align 4
  %39 = getelementptr inbounds %"class.mojo::InlinedStructPtr", %"class.mojo::InlinedStructPtr"* %12, i64 0, i32 0
  call void @_ZN5blink5mojom5blink15ScrollAlignmentD1Ev(%"class.blink::mojom::blink::ScrollAlignment"* nonnull %39) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %30) #9
  %40 = getelementptr inbounds i8, i8* %16, i64 32
  %41 = bitcast i8* %40 to i32*
  store i32 %3, i32* %41, align 4
  %42 = getelementptr inbounds i8, i8* %16, i64 36
  store i8 %13, i8* %42, align 4
  %43 = getelementptr inbounds i8, i8* %16, i64 40
  %44 = bitcast i8* %43 to i32*
  store i32 %5, i32* %44, align 4
  %45 = getelementptr inbounds i8, i8* %16, i64 44
  store i8 %14, i8* %45, align 4
  %46 = getelementptr inbounds i8, i8* %16, i64 45
  store i8 %15, i8* %46, align 1
  ret void
}

declare void @_ZN5blink12PhysicalRect9IntersectERKS0_(%"struct.blink::PhysicalRect"*, %"struct.blink::PhysicalRect"* dereferenceable(16)) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #5

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i32(i32) #6

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #5

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #5

; Function Attrs: nounwind
declare void @_ZN5blink5mojom5blink15ScrollAlignmentD1Ev(%"class.blink::mojom::blink::ScrollAlignment"*) unnamed_addr #7

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i64(i64) #6

declare void @_ZN5blink5mojom5blink15ScrollAlignmentC1ENS0_24ScrollAlignment_BehaviorES3_S3_(%"class.blink::mojom::blink::ScrollAlignment"*, i32, i32, i32) unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

declare void @_ZN5blink5mojom5blink20ScrollIntoViewParamsC1Ev(%"class.blink::mojom::blink::ScrollIntoViewParams"*) unnamed_addr #4

declare void @_ZN5blink5mojom5blink15ScrollAlignmentC1Ev(%"class.blink::mojom::blink::ScrollAlignment"*) unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind readnone }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!"branch_weights", i32 1, i32 1048575}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN5blink5mojom5blink20ScrollIntoViewParams3NewIJEEEN4mojo9StructPtrIS2_EEDpOT_: argument 0"}
!7 = distinct !{!7, !"_ZN5blink5mojom5blink20ScrollIntoViewParams3NewIJEEEN4mojo9StructPtrIS2_EEDpOT_"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN5blink5mojom5blink15ScrollAlignment3NewIJRKS2_EEEN4mojo16InlinedStructPtrIS2_EEDpOT_: argument 0"}
!10 = distinct !{!10, !"_ZN5blink5mojom5blink15ScrollAlignment3NewIJRKS2_EEEN4mojo16InlinedStructPtrIS2_EEDpOT_"}
