; ModuleID = '../../components/autofill/core/browser/form_processing/name_processing_util.cc'
source_filename = "../../components/autofill/core/browser/form_processing/name_processing_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"struct.base::Feature" = type { i8*, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.std::__1::__compressed_pair" }
%"class.base::BasicStringPiece" = type { i16*, i64 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::BasicStringPiece"* }
%"class.std::__1::back_insert_iterator" = type { %"class.std::__1::vector"* }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.6 }
%union.anon.6 = type { %"class.std::__1::vector" }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.7" = type { %"class.std::__1::__vector_base.8" }
%"class.std::__1::__vector_base.8" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::__basic_string_common" = type { i8 }

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEED2Ev = comdat any

$_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE7reserveEm = comdat any

$_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_ = comdat any

$_ZNSt3__120back_insert_iteratorINS_6vectorIN4base16BasicStringPieceIDsNS_11char_traitsIDsEEEENS_9allocatorIS6_EEEEEaSERKS6_ = comdat any

@_ZZN8autofill20IsValidParseableNameEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEE31kParseableNameValidationPattern = internal global %"class.std::__1::basic_string" zeroinitializer, align 8
@_ZGVZN8autofill20IsValidParseableNameEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEE31kParseableNameValidationPattern = internal global i64 0, align 8
@__dso_handle = external hidden global i8
@_ZN8autofill8features26kAutofillLabelAffixRemovalE = external global %"struct.base::Feature", align 8

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN8autofill28FindLongestCommonAffixLengthERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEEb(%"class.std::__1::vector"* nocapture readonly dereferenceable(24), i1 zeroext) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %6 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %5, align 8
  %7 = icmp eq %"class.base::BasicStringPiece"* %4, %6
  %8 = ptrtoint %"class.base::BasicStringPiece"* %6 to i64
  br i1 %7, label %70, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %70, label %13

13:                                               ; preds = %9
  %14 = bitcast %"class.base::BasicStringPiece"** %5 to i64*
  %15 = bitcast %"class.std::__1::vector"* %0 to i64*
  br label %16

16:                                               ; preds = %13, %59
  %17 = phi %"class.base::BasicStringPiece"* [ %4, %13 ], [ %60, %59 ]
  %18 = phi %"class.base::BasicStringPiece"* [ %4, %13 ], [ %61, %59 ]
  %19 = phi i64 [ %8, %13 ], [ %62, %59 ]
  %20 = phi i64 [ %11, %13 ], [ %65, %59 ]
  %21 = phi i64 [ 0, %13 ], [ %63, %59 ]
  %22 = ptrtoint %"class.base::BasicStringPiece"* %18 to i64
  %23 = xor i64 %21, -1
  %24 = add i64 %20, %23
  %25 = select i1 %1, i64 %24, i64 %21
  %26 = sub i64 %19, %22
  %27 = ashr exact i64 %26, 4
  %28 = icmp ugt i64 %27, 1
  br i1 %28, label %36, label %59

29:                                               ; preds = %48
  %30 = load i64, i64* %14, align 8
  %31 = load i64, i64* %15, align 8
  %32 = sub i64 %30, %31
  %33 = ashr exact i64 %32, 4
  %34 = icmp ult i64 %56, %33
  %35 = inttoptr i64 %31 to %"class.base::BasicStringPiece"*
  br i1 %34, label %36, label %57

36:                                               ; preds = %16, %29
  %37 = phi %"class.base::BasicStringPiece"* [ %35, %29 ], [ %18, %16 ]
  %38 = phi i64 [ %56, %29 ], [ 1, %16 ]
  br i1 %1, label %39, label %43

39:                                               ; preds = %36
  %40 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %37, i64 %38, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = add i64 %41, %23
  br label %43

43:                                               ; preds = %36, %39
  %44 = phi i64 [ %42, %39 ], [ %21, %36 ]
  %45 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %37, i64 %38, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = icmp ult i64 %21, %46
  br i1 %47, label %48, label %70

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %37, i64 %38
  %50 = tail call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece"* %49, i64 %44) #9
  %51 = load i16, i16* %50, align 2
  %52 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %53 = tail call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece"* %52, i64 %25) #9
  %54 = load i16, i16* %53, align 2
  %55 = icmp eq i16 %51, %54
  %56 = add nuw i64 %38, 1
  br i1 %55, label %29, label %70

57:                                               ; preds = %29
  %58 = inttoptr i64 %31 to %"class.base::BasicStringPiece"*
  br label %59

59:                                               ; preds = %57, %16
  %60 = phi %"class.base::BasicStringPiece"* [ %17, %16 ], [ %58, %57 ]
  %61 = phi %"class.base::BasicStringPiece"* [ %18, %16 ], [ %58, %57 ]
  %62 = phi i64 [ %19, %16 ], [ %30, %57 ]
  %63 = add nuw i64 %21, 1
  %64 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %61, i64 0, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = icmp ult i64 %63, %65
  br i1 %66, label %16, label %67

67:                                               ; preds = %59
  %68 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %60, i64 0, i32 1
  %69 = load i64, i64* %68, align 8
  br label %70

70:                                               ; preds = %48, %43, %9, %67, %2
  %71 = phi i64 [ 0, %2 ], [ %69, %67 ], [ 0, %9 ], [ %21, %43 ], [ %21, %48 ]
  ret i64 %71
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN8autofill55FindLongestCommonPrefixLengthInStringsWithMinimalLengthERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEEm(%"class.std::__1::vector"* nocapture readonly dereferenceable(24), i64) local_unnamed_addr #0 {
  %3 = alloca %"class.std::__1::back_insert_iterator", align 8
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %6 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %8 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %7, align 8
  %9 = icmp eq %"class.base::BasicStringPiece"* %6, %8
  br i1 %9, label %103, label %10

10:                                               ; preds = %2
  %11 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #9
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 24, i1 false) #9
  %14 = bitcast %"class.std::__1::back_insert_iterator"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14)
  %15 = getelementptr inbounds %"class.std::__1::back_insert_iterator", %"class.std::__1::back_insert_iterator"* %3, i64 0, i32 0
  store %"class.std::__1::vector"* %4, %"class.std::__1::vector"** %15, align 8
  br label %16

16:                                               ; preds = %10, %23
  %17 = phi %"class.base::BasicStringPiece"* [ %24, %23 ], [ %6, %10 ]
  %18 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %17, i64 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp ult i64 %19, %1
  br i1 %20, label %23, label %21

21:                                               ; preds = %16
  %22 = call dereferenceable(8) %"class.std::__1::back_insert_iterator"* @_ZNSt3__120back_insert_iteratorINS_6vectorIN4base16BasicStringPieceIDsNS_11char_traitsIDsEEEENS_9allocatorIS6_EEEEEaSERKS6_(%"class.std::__1::back_insert_iterator"* nonnull %3, %"class.base::BasicStringPiece"* dereferenceable(16) %17) #9
  br label %23

23:                                               ; preds = %21, %16
  %24 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %17, i64 1
  %25 = icmp eq %"class.base::BasicStringPiece"* %24, %8
  br i1 %25, label %26, label %16

26:                                               ; preds = %23
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14)
  %27 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %12, align 8
  %28 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %13, align 8
  %29 = icmp eq %"class.base::BasicStringPiece"* %27, %28
  br i1 %29, label %94, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %27, i64 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %94, label %34

34:                                               ; preds = %30
  %35 = ptrtoint %"class.base::BasicStringPiece"* %28 to i64
  %36 = bitcast %"class.base::BasicStringPiece"** %13 to i64*
  %37 = bitcast %"class.std::__1::vector"* %4 to i64*
  br label %38

38:                                               ; preds = %79, %34
  %39 = phi %"class.base::BasicStringPiece"* [ %27, %34 ], [ %80, %79 ]
  %40 = phi %"class.base::BasicStringPiece"* [ %27, %34 ], [ %81, %79 ]
  %41 = phi %"class.base::BasicStringPiece"* [ %27, %34 ], [ %82, %79 ]
  %42 = phi %"class.base::BasicStringPiece"* [ %27, %34 ], [ %83, %79 ]
  %43 = phi i64 [ %35, %34 ], [ %84, %79 ]
  %44 = phi i64 [ 0, %34 ], [ %85, %79 ]
  %45 = ptrtoint %"class.base::BasicStringPiece"* %42 to i64
  %46 = sub i64 %43, %45
  %47 = ashr exact i64 %46, 4
  %48 = icmp ugt i64 %47, 1
  br i1 %48, label %49, label %79

49:                                               ; preds = %38
  %50 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %42, i64 1, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = icmp ult i64 %44, %51
  br i1 %52, label %64, label %94

53:                                               ; preds = %64
  %54 = load i64, i64* %36, align 8
  %55 = load i64, i64* %37, align 8
  %56 = sub i64 %54, %55
  %57 = ashr exact i64 %56, 4
  %58 = icmp ult i64 %74, %57
  %59 = inttoptr i64 %55 to %"class.base::BasicStringPiece"*
  br i1 %58, label %60, label %77

60:                                               ; preds = %53
  %61 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %59, i64 %74, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = icmp ult i64 %44, %62
  br i1 %63, label %64, label %92

64:                                               ; preds = %49, %60
  %65 = phi i64 [ %74, %60 ], [ 1, %49 ]
  %66 = phi %"class.base::BasicStringPiece"* [ %59, %60 ], [ %42, %49 ]
  %67 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %66, i64 %65
  %68 = call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece"* %67, i64 %44) #9
  %69 = load i16, i16* %68, align 2
  %70 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %12, align 8
  %71 = call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece"* %70, i64 %44) #9
  %72 = load i16, i16* %71, align 2
  %73 = icmp eq i16 %69, %72
  %74 = add nuw i64 %65, 1
  br i1 %73, label %53, label %75

75:                                               ; preds = %64
  %76 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %12, align 8
  br label %94

77:                                               ; preds = %53
  %78 = inttoptr i64 %55 to %"class.base::BasicStringPiece"*
  br label %79

79:                                               ; preds = %77, %38
  %80 = phi %"class.base::BasicStringPiece"* [ %39, %38 ], [ %78, %77 ]
  %81 = phi %"class.base::BasicStringPiece"* [ %40, %38 ], [ %78, %77 ]
  %82 = phi %"class.base::BasicStringPiece"* [ %41, %38 ], [ %78, %77 ]
  %83 = phi %"class.base::BasicStringPiece"* [ %42, %38 ], [ %78, %77 ]
  %84 = phi i64 [ %43, %38 ], [ %54, %77 ]
  %85 = add nuw i64 %44, 1
  %86 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %83, i64 0, i32 1
  %87 = load i64, i64* %86, align 8
  %88 = icmp ult i64 %85, %87
  br i1 %88, label %38, label %89

89:                                               ; preds = %79
  %90 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %82, i64 0, i32 1
  %91 = load i64, i64* %90, align 8
  br label %94

92:                                               ; preds = %60
  %93 = inttoptr i64 %55 to %"class.base::BasicStringPiece"*
  br label %94

94:                                               ; preds = %49, %92, %89, %30, %75, %26
  %95 = phi %"class.base::BasicStringPiece"* [ %27, %26 ], [ %27, %30 ], [ %81, %89 ], [ %76, %75 ], [ %93, %92 ], [ %39, %49 ]
  %96 = phi i64 [ 0, %26 ], [ 0, %30 ], [ %91, %89 ], [ %44, %75 ], [ %44, %92 ], [ %44, %49 ]
  %97 = icmp eq %"class.base::BasicStringPiece"* %95, null
  br i1 %97, label %102, label %98

98:                                               ; preds = %94
  %99 = ptrtoint %"class.base::BasicStringPiece"* %95 to i64
  %100 = bitcast %"class.base::BasicStringPiece"** %13 to i64*
  store i64 %99, i64* %100, align 8
  %101 = bitcast %"class.base::BasicStringPiece"* %95 to i8*
  call void @_ZdlPv(i8* %101) #10
  br label %102

102:                                              ; preds = %94, %98
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #9
  br label %103

103:                                              ; preds = %2, %102
  %104 = phi i64 [ %96, %102 ], [ 0, %2 ]
  ret i64 %104
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill20IsValidParseableNameEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(i16*, i64) local_unnamed_addr #0 {
  %3 = alloca %"class.base::BasicStringPiece", align 8
  %4 = alloca %"class.base::BasicStringPiece", align 8
  %5 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %3, i64 0, i32 0
  store i16* %0, i16** %5, align 8
  %6 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %3, i64 0, i32 1
  store i64 %1, i64* %6, align 8
  %7 = load atomic i8, i8* bitcast (i64* @_ZGVZN8autofill20IsValidParseableNameEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEE31kParseableNameValidationPattern to i8*) acquire, align 8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %14, !prof !2

9:                                                ; preds = %2
  %10 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN8autofill20IsValidParseableNameEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEE31kParseableNameValidationPattern) #9
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %9
  store i8 2, i8* getelementptr (%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* bitcast (%"class.std::__1::basic_string"* @_ZZN8autofill20IsValidParseableNameEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEE31kParseableNameValidationPattern to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*), i64 0, i32 1, i32 1), align 1
  store i16 92, i16* bitcast (%"class.std::__1::basic_string"* @_ZZN8autofill20IsValidParseableNameEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEE31kParseableNameValidationPattern to i16*), align 8
  store i16 68, i16* getelementptr (i16, i16* bitcast (%"class.std::__1::basic_string"* @_ZZN8autofill20IsValidParseableNameEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEE31kParseableNameValidationPattern to i16*), i64 1), align 2
  store i16 0, i16* getelementptr (i16, i16* bitcast (%"class.std::__1::basic_string"* @_ZZN8autofill20IsValidParseableNameEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEE31kParseableNameValidationPattern to i16*), i64 2), align 4
  %13 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__1::basic_string"*)* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__1::basic_string"* @_ZZN8autofill20IsValidParseableNameEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEE31kParseableNameValidationPattern to i8*), i8* nonnull @__dso_handle) #9
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN8autofill20IsValidParseableNameEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEE31kParseableNameValidationPattern) #9
  br label %14

14:                                               ; preds = %9, %12, %2
  %15 = bitcast %"class.base::BasicStringPiece"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #9
  %16 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 0, i32 0
  %17 = load i8, i8* getelementptr (%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* bitcast (%"class.std::__1::basic_string"* @_ZZN8autofill20IsValidParseableNameEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEE31kParseableNameValidationPattern to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*), i64 0, i32 1, i32 1), align 1
  %18 = icmp slt i8 %17, 0
  %19 = load i16*, i16** getelementptr inbounds (%"class.std::__1::basic_string", %"class.std::__1::basic_string"* @_ZZN8autofill20IsValidParseableNameEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEE31kParseableNameValidationPattern, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0), align 8
  %20 = select i1 %18, i16* %19, i16* bitcast (%"class.std::__1::basic_string"* @_ZZN8autofill20IsValidParseableNameEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEE31kParseableNameValidationPattern to i16*)
  store i16* %20, i16** %16, align 8
  %21 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %4, i64 0, i32 1
  %22 = load i64, i64* getelementptr inbounds (%"class.std::__1::basic_string", %"class.std::__1::basic_string"* @_ZZN8autofill20IsValidParseableNameEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEE31kParseableNameValidationPattern, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1), align 8
  %23 = zext i8 %17 to i64
  %24 = select i1 %18, i64 %22, i64 %23
  store i64 %24, i64* %21, align 8
  %25 = call zeroext i1 @_ZN8autofill14MatchesPatternERKN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES7_PNS2_12basic_stringIDsS4_NS2_9allocatorIDsEEEEi(%"class.base::BasicStringPiece"* nonnull dereferenceable(16) %3, %"class.base::BasicStringPiece"* nonnull dereferenceable(16) %4, %"class.std::__1::basic_string"* null, i32 0) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #9
  ret i1 %25
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEED2Ev(%"class.std::__1::basic_string"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %3 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %2, i64 0, i32 1, i32 1
  %4 = load i8, i8* %3, align 1
  %5 = icmp slt i8 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %1
  %7 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  %8 = load i8*, i8** %7, align 8
  tail call void @_ZdlPv(i8* %8) #10
  br label %9

9:                                                ; preds = %6, %1
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #2

declare zeroext i1 @_ZN8autofill14MatchesPatternERKN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES7_PNS2_12basic_stringIDsS4_NS2_9allocatorIDsEEEEi(%"class.base::BasicStringPiece"* dereferenceable(16), %"class.base::BasicStringPiece"* dereferenceable(16), %"class.std::__1::basic_string"*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill32GetStrippedParseableNamesIfValidERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEEmmm(%"class.absl::optional"* noalias sret, %"class.std::__1::vector"* nocapture readonly dereferenceable(24), i64, i64, i64) local_unnamed_addr #0 {
  %6 = alloca %"class.std::__1::vector", align 8
  %7 = bitcast %"class.std::__1::vector"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #9
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 24, i1 false) #9
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %11 = bitcast %"class.base::BasicStringPiece"** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector"* %1 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = ashr exact i64 %15, 4
  %17 = bitcast %"class.base::BasicStringPiece"** %9 to i64*
  %18 = bitcast %"class.std::__1::vector"* %6 to i64*
  %19 = icmp eq i64 %15, 0
  %20 = inttoptr i64 %14 to %"class.base::BasicStringPiece"*
  %21 = inttoptr i64 %12 to %"class.base::BasicStringPiece"*
  br i1 %19, label %34, label %22

22:                                               ; preds = %5
  %23 = icmp ugt i64 %16, 1152921504606846975
  br i1 %23, label %24, label %25

24:                                               ; preds = %22
  tail call void @abort() #11
  unreachable

25:                                               ; preds = %22
  %26 = bitcast %"class.base::BasicStringPiece"** %8 to i64*
  %27 = tail call i8* @_Znwm(i64 %15) #10
  %28 = bitcast i8* %27 to %"class.base::BasicStringPiece"*
  %29 = ptrtoint i8* %27 to i64
  %30 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %28, i64 %16
  %31 = ptrtoint %"class.base::BasicStringPiece"* %30 to i64
  %32 = ptrtoint i8* %27 to i64
  store i64 %32, i64* %18, align 8
  store i64 %29, i64* %26, align 8
  store i64 %31, i64* %17, align 8
  %33 = bitcast i8* %27 to %"class.base::BasicStringPiece"*
  br label %34

34:                                               ; preds = %25, %5
  %35 = phi %"class.base::BasicStringPiece"* [ null, %5 ], [ %33, %25 ]
  %36 = phi i64 [ 0, %5 ], [ %32, %25 ]
  %37 = phi i64 [ 0, %5 ], [ %29, %25 ]
  %38 = phi %"class.base::BasicStringPiece"* [ null, %5 ], [ %28, %25 ]
  %39 = icmp eq %"class.base::BasicStringPiece"* %20, %21
  br i1 %39, label %40, label %42

40:                                               ; preds = %34
  %41 = inttoptr i64 %36 to %"class.base::BasicStringPiece"*
  br label %139

42:                                               ; preds = %34
  %43 = add i64 %3, %2
  %44 = bitcast %"class.base::BasicStringPiece"** %8 to i64*
  br label %47

45:                                               ; preds = %122
  %46 = icmp eq %"class.base::BasicStringPiece"* %131, %21
  br i1 %46, label %136, label %47

47:                                               ; preds = %42, %45
  %48 = phi %"class.base::BasicStringPiece"* [ %35, %42 ], [ %124, %45 ]
  %49 = phi i64 [ %37, %42 ], [ %123, %45 ]
  %50 = phi %"class.base::BasicStringPiece"* [ %38, %42 ], [ %125, %45 ]
  %51 = phi %"class.base::BasicStringPiece"* [ %20, %42 ], [ %131, %45 ]
  %52 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %51, i64 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = icmp ule i64 %53, %43
  %55 = icmp ult i64 %53, %4
  %56 = or i1 %54, %55
  br i1 %56, label %62, label %57

57:                                               ; preds = %47
  %58 = sub i64 %53, %43
  %59 = tail call { i16*, i64 } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6substrEmm(%"class.base::BasicStringPiece"* %51, i64 %2, i64 %58)
  %60 = extractvalue { i16*, i64 } %59, 0
  %61 = extractvalue { i16*, i64 } %59, 1
  br label %65

62:                                               ; preds = %47
  %63 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %51, i64 0, i32 0
  %64 = load i16*, i16** %63, align 8
  br label %65

65:                                               ; preds = %62, %57
  %66 = phi i64 [ %53, %62 ], [ %61, %57 ]
  %67 = phi i16* [ %64, %62 ], [ %60, %57 ]
  %68 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %9, align 8
  %69 = icmp eq %"class.base::BasicStringPiece"* %50, %68
  br i1 %69, label %75, label %70

70:                                               ; preds = %65
  %71 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %50, i64 0, i32 0
  store i16* %67, i16** %71, align 8
  %72 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %50, i64 0, i32 1
  store i64 %66, i64* %72, align 8
  %73 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %50, i64 1
  %74 = ptrtoint %"class.base::BasicStringPiece"* %73 to i64
  store i64 %74, i64* %44, align 8
  br label %122

75:                                               ; preds = %65
  %76 = ptrtoint %"class.base::BasicStringPiece"* %68 to i64
  %77 = load i64, i64* %18, align 8
  %78 = sub i64 %76, %77
  %79 = ashr exact i64 %78, 4
  %80 = add nsw i64 %79, 1
  %81 = icmp ugt i64 %80, 1152921504606846975
  br i1 %81, label %82, label %84

82:                                               ; preds = %75
  %83 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %83) #11
  unreachable

84:                                               ; preds = %75
  %85 = icmp ult i64 %79, 576460752303423487
  br i1 %85, label %86, label %94

86:                                               ; preds = %84
  %87 = ashr exact i64 %78, 3
  %88 = icmp ult i64 %87, %80
  %89 = select i1 %88, i64 %80, i64 %87
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %99, label %91

91:                                               ; preds = %86
  %92 = icmp ugt i64 %89, 1152921504606846975
  br i1 %92, label %93, label %94

93:                                               ; preds = %91
  tail call void @abort() #11
  unreachable

94:                                               ; preds = %91, %84
  %95 = phi i64 [ %89, %91 ], [ 1152921504606846975, %84 ]
  %96 = shl i64 %95, 4
  %97 = tail call i8* @_Znwm(i64 %96) #10
  %98 = bitcast i8* %97 to %"class.base::BasicStringPiece"*
  br label %99

99:                                               ; preds = %94, %86
  %100 = phi i64 [ %95, %94 ], [ 0, %86 ]
  %101 = phi %"class.base::BasicStringPiece"* [ %98, %94 ], [ null, %86 ]
  %102 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %101, i64 %79
  %103 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %101, i64 %100
  %104 = ptrtoint %"class.base::BasicStringPiece"* %103 to i64
  %105 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %102, i64 0, i32 0
  store i16* %67, i16** %105, align 8
  %106 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %101, i64 %79, i32 1
  store i64 %66, i64* %106, align 8
  %107 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %102, i64 1
  %108 = ptrtoint %"class.base::BasicStringPiece"* %107 to i64
  %109 = sub i64 %49, %77
  %110 = ashr exact i64 %109, 4
  %111 = sub nsw i64 0, %110
  %112 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %102, i64 %111
  %113 = ptrtoint %"class.base::BasicStringPiece"* %112 to i64
  %114 = icmp sgt i64 %109, 0
  br i1 %114, label %115, label %118

115:                                              ; preds = %99
  %116 = bitcast %"class.base::BasicStringPiece"* %112 to i8*
  %117 = inttoptr i64 %77 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %116, i8* align 8 %117, i64 %109, i1 false) #9
  br label %118

118:                                              ; preds = %115, %99
  store i64 %113, i64* %18, align 8
  store i64 %108, i64* %44, align 8
  store i64 %104, i64* %17, align 8
  %119 = icmp eq i64 %77, 0
  br i1 %119, label %122, label %120

120:                                              ; preds = %118
  %121 = inttoptr i64 %77 to i8*
  tail call void @_ZdlPv(i8* %121) #10
  br label %122

122:                                              ; preds = %70, %118, %120
  %123 = phi i64 [ %74, %70 ], [ %108, %118 ], [ %108, %120 ]
  %124 = phi %"class.base::BasicStringPiece"* [ %48, %70 ], [ %112, %118 ], [ %112, %120 ]
  %125 = phi %"class.base::BasicStringPiece"* [ %73, %70 ], [ %107, %118 ], [ %107, %120 ]
  %126 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %125, i64 -1, i32 0
  %127 = load i16*, i16** %126, align 8
  %128 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %125, i64 -1, i32 1
  %129 = load i64, i64* %128, align 8
  %130 = tail call zeroext i1 @_ZN8autofill20IsValidParseableNameEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(i16* %127, i64 %129)
  %131 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %51, i64 1
  br i1 %130, label %45, label %132

132:                                              ; preds = %122
  %133 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %133, align 8
  %134 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %135 = bitcast %union.anon.6* %134 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %135, i8 0, i64 24, i1 false) #9
  br label %172

136:                                              ; preds = %45
  %137 = load i64, i64* %18, align 8
  %138 = inttoptr i64 %137 to %"class.base::BasicStringPiece"*
  br label %139

139:                                              ; preds = %40, %136
  %140 = phi %"class.base::BasicStringPiece"* [ %41, %40 ], [ %138, %136 ]
  %141 = phi %"class.base::BasicStringPiece"* [ %35, %40 ], [ %138, %136 ]
  %142 = phi i64 [ %36, %40 ], [ %137, %136 ]
  %143 = phi i64 [ %37, %40 ], [ %123, %136 ]
  %144 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %144, align 8, !alias.scope !3
  %145 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %146 = bitcast %"class.std::__1::vector"* %145 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %146, i8 0, i64 24, i1 false) #9, !alias.scope !3
  %147 = sub i64 %143, %142
  %148 = ashr exact i64 %147, 4
  %149 = icmp eq i64 %147, 0
  br i1 %149, label %172, label %150

150:                                              ; preds = %139
  %151 = icmp ugt i64 %148, 1152921504606846975
  br i1 %151, label %152, label %154

152:                                              ; preds = %150
  %153 = bitcast %"class.std::__1::vector"* %145 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %153) #11
  unreachable

154:                                              ; preds = %150
  %155 = tail call i8* @_Znwm(i64 %147) #10
  %156 = bitcast i8* %155 to %"class.base::BasicStringPiece"*
  %157 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %158 = bitcast %"class.base::BasicStringPiece"** %157 to i8**
  store i8* %155, i8** %158, align 8, !alias.scope !3
  %159 = bitcast %"class.std::__1::vector"* %145 to i8**
  store i8* %155, i8** %159, align 8, !alias.scope !3
  %160 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %156, i64 %148
  %161 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  store %"class.base::BasicStringPiece"* %160, %"class.base::BasicStringPiece"** %161, align 8, !alias.scope !3
  %162 = bitcast %"class.base::BasicStringPiece"** %157 to i64*
  %163 = ptrtoint i8* %155 to i64
  %164 = icmp sgt i64 %147, 0
  br i1 %164, label %165, label %170

165:                                              ; preds = %154
  %166 = lshr exact i64 %147, 4
  %167 = inttoptr i64 %142 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %155, i8* align 8 %167, i64 %147, i1 false) #9
  %168 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %156, i64 %166
  %169 = ptrtoint %"class.base::BasicStringPiece"* %168 to i64
  br label %170

170:                                              ; preds = %165, %154
  %171 = phi i64 [ %169, %165 ], [ %163, %154 ]
  store i64 %171, i64* %162, align 8, !alias.scope !3
  br label %172

172:                                              ; preds = %170, %132, %139
  %173 = phi %"class.base::BasicStringPiece"* [ %140, %139 ], [ %124, %132 ], [ %141, %170 ]
  %174 = icmp eq %"class.base::BasicStringPiece"* %173, null
  br i1 %174, label %179, label %175

175:                                              ; preds = %172
  %176 = ptrtoint %"class.base::BasicStringPiece"* %173 to i64
  %177 = bitcast %"class.base::BasicStringPiece"** %8 to i64*
  store i64 %176, i64* %177, align 8
  %178 = bitcast %"class.base::BasicStringPiece"* %173 to i8*
  tail call void @_ZdlPv(i8* %178) #10
  br label %179

179:                                              ; preds = %172, %175
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
declare { i16*, i64 } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6substrEmm(%"class.base::BasicStringPiece"*, i64, i64) local_unnamed_addr #0 align 2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill29RemoveCommonAffixesIfPossibleERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEE(%"class.absl::optional"* noalias sret, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %4 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %1 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 4
  %10 = icmp ult i64 %9, 3
  %11 = inttoptr i64 %7 to %"class.base::BasicStringPiece"*
  br i1 %10, label %12, label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %13, align 8
  %14 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %15 = bitcast %union.anon.6* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 24, i1 false) #9
  br label %88

16:                                               ; preds = %2
  %17 = inttoptr i64 %5 to %"class.base::BasicStringPiece"*
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %19 = icmp eq %"class.base::BasicStringPiece"* %11, %17
  br i1 %19, label %68, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %11, i64 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %68, label %24

24:                                               ; preds = %20, %57
  %25 = phi %"class.base::BasicStringPiece"* [ %58, %57 ], [ %11, %20 ]
  %26 = phi %"class.base::BasicStringPiece"* [ %59, %57 ], [ %11, %20 ]
  %27 = phi i64 [ %60, %57 ], [ %5, %20 ]
  %28 = phi i64 [ %61, %57 ], [ 0, %20 ]
  %29 = ptrtoint %"class.base::BasicStringPiece"* %26 to i64
  %30 = sub i64 %27, %29
  %31 = ashr exact i64 %30, 4
  %32 = icmp ugt i64 %31, 1
  br i1 %32, label %40, label %57

33:                                               ; preds = %46
  %34 = load i64, i64* %4, align 8
  %35 = load i64, i64* %6, align 8
  %36 = sub i64 %34, %35
  %37 = ashr exact i64 %36, 4
  %38 = icmp ult i64 %54, %37
  %39 = inttoptr i64 %35 to %"class.base::BasicStringPiece"*
  br i1 %38, label %40, label %55

40:                                               ; preds = %24, %33
  %41 = phi %"class.base::BasicStringPiece"* [ %39, %33 ], [ %26, %24 ]
  %42 = phi i64 [ %54, %33 ], [ 1, %24 ]
  %43 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %41, i64 %42, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = icmp ult i64 %28, %44
  br i1 %45, label %46, label %70

46:                                               ; preds = %40
  %47 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %41, i64 %42
  %48 = tail call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece"* %47, i64 %28) #9
  %49 = load i16, i16* %48, align 2
  %50 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %18, align 8
  %51 = tail call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece"* %50, i64 %28) #9
  %52 = load i16, i16* %51, align 2
  %53 = icmp eq i16 %49, %52
  %54 = add nuw i64 %42, 1
  br i1 %53, label %33, label %70

55:                                               ; preds = %33
  %56 = inttoptr i64 %35 to %"class.base::BasicStringPiece"*
  br label %57

57:                                               ; preds = %55, %24
  %58 = phi %"class.base::BasicStringPiece"* [ %25, %24 ], [ %56, %55 ]
  %59 = phi %"class.base::BasicStringPiece"* [ %26, %24 ], [ %56, %55 ]
  %60 = phi i64 [ %27, %24 ], [ %34, %55 ]
  %61 = add nuw i64 %28, 1
  %62 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %59, i64 0, i32 1
  %63 = load i64, i64* %62, align 8
  %64 = icmp ult i64 %61, %63
  br i1 %64, label %24, label %65

65:                                               ; preds = %57
  %66 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %58, i64 0, i32 1
  %67 = load i64, i64* %66, align 8
  br label %70

68:                                               ; preds = %16, %20
  %69 = tail call i64 @_ZN8autofill28FindLongestCommonAffixLengthERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEEb(%"class.std::__1::vector"* dereferenceable(24) %1, i1 zeroext true)
  br label %74

70:                                               ; preds = %40, %46, %65
  %71 = phi i64 [ %67, %65 ], [ %28, %46 ], [ %28, %40 ]
  %72 = tail call i64 @_ZN8autofill28FindLongestCommonAffixLengthERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEEb(%"class.std::__1::vector"* dereferenceable(24) %1, i1 zeroext true)
  %73 = icmp ult i64 %71, 3
  br i1 %73, label %74, label %76

74:                                               ; preds = %68, %70
  %75 = phi i64 [ %69, %68 ], [ %72, %70 ]
  br label %76

76:                                               ; preds = %70, %74
  %77 = phi i64 [ %75, %74 ], [ %72, %70 ]
  %78 = phi i64 [ 0, %74 ], [ %71, %70 ]
  %79 = icmp ult i64 %77, 3
  %80 = select i1 %79, i64 0, i64 %77
  %81 = or i64 %80, %78
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %87

83:                                               ; preds = %76
  %84 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %84, align 8
  %85 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %86 = bitcast %union.anon.6* %85 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 24, i1 false) #9
  br label %88

87:                                               ; preds = %76
  tail call void @_ZN8autofill32GetStrippedParseableNamesIfValidERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEEmmm(%"class.absl::optional"* sret %0, %"class.std::__1::vector"* dereferenceable(24) %1, i64 %78, i64 %80, i64 0)
  br label %88

88:                                               ; preds = %83, %87, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill28RemoveCommonPrefixIfPossibleERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEE(%"class.absl::optional"* noalias sret, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %4 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %1 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 4
  %10 = icmp ult i64 %9, 3
  %11 = inttoptr i64 %7 to %"class.base::BasicStringPiece"*
  br i1 %10, label %12, label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %13, align 8
  %14 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %15 = bitcast %union.anon.6* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 24, i1 false) #9
  br label %76

16:                                               ; preds = %2
  %17 = inttoptr i64 %5 to %"class.base::BasicStringPiece"*
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %19 = icmp eq %"class.base::BasicStringPiece"* %11, %17
  br i1 %19, label %71, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %11, i64 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %71, label %24

24:                                               ; preds = %20, %57
  %25 = phi %"class.base::BasicStringPiece"* [ %58, %57 ], [ %11, %20 ]
  %26 = phi %"class.base::BasicStringPiece"* [ %59, %57 ], [ %11, %20 ]
  %27 = phi i64 [ %60, %57 ], [ %5, %20 ]
  %28 = phi i64 [ %61, %57 ], [ 0, %20 ]
  %29 = ptrtoint %"class.base::BasicStringPiece"* %26 to i64
  %30 = sub i64 %27, %29
  %31 = ashr exact i64 %30, 4
  %32 = icmp ugt i64 %31, 1
  br i1 %32, label %40, label %57

33:                                               ; preds = %46
  %34 = load i64, i64* %4, align 8
  %35 = load i64, i64* %6, align 8
  %36 = sub i64 %34, %35
  %37 = ashr exact i64 %36, 4
  %38 = icmp ult i64 %54, %37
  %39 = inttoptr i64 %35 to %"class.base::BasicStringPiece"*
  br i1 %38, label %40, label %55

40:                                               ; preds = %24, %33
  %41 = phi %"class.base::BasicStringPiece"* [ %39, %33 ], [ %26, %24 ]
  %42 = phi i64 [ %54, %33 ], [ 1, %24 ]
  %43 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %41, i64 %42, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = icmp ult i64 %28, %44
  br i1 %45, label %46, label %68

46:                                               ; preds = %40
  %47 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %41, i64 %42
  %48 = tail call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece"* %47, i64 %28) #9
  %49 = load i16, i16* %48, align 2
  %50 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %18, align 8
  %51 = tail call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece"* %50, i64 %28) #9
  %52 = load i16, i16* %51, align 2
  %53 = icmp eq i16 %49, %52
  %54 = add nuw i64 %42, 1
  br i1 %53, label %33, label %68

55:                                               ; preds = %33
  %56 = inttoptr i64 %35 to %"class.base::BasicStringPiece"*
  br label %57

57:                                               ; preds = %55, %24
  %58 = phi %"class.base::BasicStringPiece"* [ %25, %24 ], [ %56, %55 ]
  %59 = phi %"class.base::BasicStringPiece"* [ %26, %24 ], [ %56, %55 ]
  %60 = phi i64 [ %27, %24 ], [ %34, %55 ]
  %61 = add nuw i64 %28, 1
  %62 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %59, i64 0, i32 1
  %63 = load i64, i64* %62, align 8
  %64 = icmp ult i64 %61, %63
  br i1 %64, label %24, label %65

65:                                               ; preds = %57
  %66 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %58, i64 0, i32 1
  %67 = load i64, i64* %66, align 8
  br label %68

68:                                               ; preds = %40, %46, %65
  %69 = phi i64 [ %67, %65 ], [ %28, %46 ], [ %28, %40 ]
  %70 = icmp ult i64 %69, 16
  br i1 %70, label %71, label %75

71:                                               ; preds = %20, %16, %68
  %72 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %72, align 8
  %73 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %74 = bitcast %union.anon.6* %73 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 24, i1 false) #9
  br label %76

75:                                               ; preds = %68
  tail call void @_ZN8autofill32GetStrippedParseableNamesIfValidERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEEmmm(%"class.absl::optional"* sret %0, %"class.std::__1::vector"* dereferenceable(24) %1, i64 %69, i64 0, i64 16)
  br label %76

76:                                               ; preds = %71, %75, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill53RemoveCommonPrefixForNamesWithMinimalLengthIfPossibleERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEE(%"class.absl::optional"* noalias sret, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %4 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %1 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 4
  %10 = icmp ult i64 %9, 3
  br i1 %10, label %11, label %15

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %12, align 8
  %13 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %14 = bitcast %union.anon.6* %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #9
  br label %23

15:                                               ; preds = %2
  %16 = tail call i64 @_ZN8autofill55FindLongestCommonPrefixLengthInStringsWithMinimalLengthERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEEm(%"class.std::__1::vector"* dereferenceable(24) %1, i64 16)
  %17 = icmp ult i64 %16, 16
  br i1 %17, label %18, label %22

18:                                               ; preds = %15
  %19 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %19, align 8
  %20 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %21 = bitcast %union.anon.6* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 24, i1 false) #9
  br label %23

22:                                               ; preds = %15
  tail call void @_ZN8autofill32GetStrippedParseableNamesIfValidERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEEmmm(%"class.absl::optional"* sret %0, %"class.std::__1::vector"* dereferenceable(24) %1, i64 %16, i64 0, i64 16)
  br label %23

23:                                               ; preds = %18, %22, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill17GetParseableNamesERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEE(%"class.std::__1::vector.7"* noalias sret, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.absl::optional", align 8
  %5 = alloca %"class.absl::optional", align 8
  %6 = alloca %"class.absl::optional", align 8
  %7 = alloca %"class.absl::optional", align 8
  %8 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #9
  %9 = bitcast %"class.absl::optional"* %4 to i64*
  store i64 -6148914691236517206, i64* %9, align 8
  store i8 0, i8* %8, align 8
  %10 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  %11 = bitcast %union.anon.6* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 24, i1 false) #9
  %12 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %0, i64 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %14 = bitcast %"class.std::__1::vector.7"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #9
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %16 = bitcast %"class.base::BasicStringPiece"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.std::__1::vector"* %1 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %17, %19
  %21 = ashr exact i64 %20, 4
  tail call void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE7reserveEm(%"class.std::__1::vector.7"* %0, i64 %21)
  %22 = tail call zeroext i1 @_ZN4base11FeatureList9IsEnabledERKNS_7FeatureE(%"struct.base::Feature"* nonnull dereferenceable(16) @_ZN8autofill8features26kAutofillLabelAffixRemovalE) #9
  br i1 %22, label %23, label %169

23:                                               ; preds = %2
  %24 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %24) #9
  call void @_ZN8autofill29RemoveCommonAffixesIfPossibleERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEE(%"class.absl::optional"* nonnull sret %5, %"class.std::__1::vector"* dereferenceable(24) %1)
  %25 = load i8, i8* %24, align 8, !range !6
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %62, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %29 = load i8, i8* %8, align 8, !range !6
  %30 = icmp eq i8 %29, 0
  %31 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  br i1 %30, label %52, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %31, i64 0, i32 0, i32 0
  %34 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %33, align 8
  %35 = icmp eq %"class.base::BasicStringPiece"* %34, null
  br i1 %35, label %42, label %36

36:                                               ; preds = %32
  %37 = ptrtoint %"class.base::BasicStringPiece"* %34 to i64
  %38 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %39 = bitcast %"class.base::BasicStringPiece"** %38 to i64*
  store i64 %37, i64* %39, align 8
  %40 = bitcast %"class.base::BasicStringPiece"* %34 to i8*
  call void @_ZdlPv(i8* %40) #10
  %41 = bitcast %"class.std::__1::vector"* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 24, i1 false) #9
  br label %42

42:                                               ; preds = %32, %36
  %43 = bitcast %"class.std::__1::vector"* %28 to <2 x i64>*
  %44 = load <2 x i64>, <2 x i64>* %43, align 8
  %45 = bitcast %"class.std::__1::vector"* %31 to <2 x i64>*
  store <2 x i64> %44, <2 x i64>* %45, align 8
  %46 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %47 = bitcast %"class.base::BasicStringPiece"** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %50 = bitcast %"class.base::BasicStringPiece"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = bitcast %"class.std::__1::vector"* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %51, i8 0, i64 24, i1 false) #9
  br label %76

52:                                               ; preds = %27
  %53 = bitcast %"class.std::__1::vector"* %28 to <2 x i64>*
  %54 = load <2 x i64>, <2 x i64>* %53, align 8
  %55 = bitcast %"class.std::__1::vector"* %31 to <2 x i64>*
  store <2 x i64> %54, <2 x i64>* %55, align 8
  %56 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %57 = bitcast %"class.base::BasicStringPiece"** %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %60 = bitcast %"class.base::BasicStringPiece"** %59 to i64*
  store i64 %58, i64* %60, align 8
  %61 = bitcast %"class.std::__1::vector"* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 24, i1 false) #9
  store i8 1, i8* %8, align 8
  br label %76

62:                                               ; preds = %23
  %63 = load i8, i8* %8, align 8, !range !6
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #9
  br label %92

66:                                               ; preds = %62
  %67 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %68 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %67, align 8
  %69 = icmp eq %"class.base::BasicStringPiece"* %68, null
  br i1 %69, label %75, label %70

70:                                               ; preds = %66
  %71 = ptrtoint %"class.base::BasicStringPiece"* %68 to i64
  %72 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %73 = bitcast %"class.base::BasicStringPiece"** %72 to i64*
  store i64 %71, i64* %73, align 8
  %74 = bitcast %"class.base::BasicStringPiece"* %68 to i8*
  call void @_ZdlPv(i8* %74) #10
  br label %75

75:                                               ; preds = %70, %66
  store i8 0, i8* %8, align 8
  br label %76

76:                                               ; preds = %42, %52, %75
  %77 = load i8, i8* %24, align 8
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %89, label %79

79:                                               ; preds = %76
  %80 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %81 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %80, align 8
  %82 = icmp eq %"class.base::BasicStringPiece"* %81, null
  br i1 %82, label %88, label %83

83:                                               ; preds = %79
  %84 = ptrtoint %"class.base::BasicStringPiece"* %81 to i64
  %85 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %86 = bitcast %"class.base::BasicStringPiece"** %85 to i64*
  store i64 %84, i64* %86, align 8
  %87 = bitcast %"class.base::BasicStringPiece"* %81 to i8*
  call void @_ZdlPv(i8* %87) #10
  br label %88

88:                                               ; preds = %83, %79
  store i8 0, i8* %24, align 8
  br label %89

89:                                               ; preds = %76, %88
  %90 = load i8, i8* %8, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #9
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %92, label %238

92:                                               ; preds = %65, %89
  %93 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %93) #9
  %94 = load i64, i64* %16, align 8, !noalias !7
  %95 = load i64, i64* %18, align 8, !noalias !7
  %96 = sub i64 %94, %95
  %97 = ashr exact i64 %96, 4
  %98 = icmp ult i64 %97, 3
  br i1 %98, label %140, label %99

99:                                               ; preds = %92
  %100 = call i64 @_ZN8autofill55FindLongestCommonPrefixLengthInStringsWithMinimalLengthERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEEm(%"class.std::__1::vector"* dereferenceable(24) %1, i64 16) #9, !noalias !7
  %101 = icmp ult i64 %100, 16
  br i1 %101, label %140, label %102

102:                                              ; preds = %99
  call void @_ZN8autofill32GetStrippedParseableNamesIfValidERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEEmmm(%"class.absl::optional"* nonnull sret %6, %"class.std::__1::vector"* dereferenceable(24) %1, i64 %100, i64 0, i64 16) #9
  %103 = load i8, i8* %93, align 8
  %104 = icmp eq i8 %103, 0
  br i1 %104, label %143, label %105

105:                                              ; preds = %102
  %106 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %107 = load i8, i8* %8, align 8, !range !6
  %108 = icmp eq i8 %107, 0
  %109 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  br i1 %108, label %130, label %110

110:                                              ; preds = %105
  %111 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %109, i64 0, i32 0, i32 0
  %112 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %111, align 8
  %113 = icmp eq %"class.base::BasicStringPiece"* %112, null
  br i1 %113, label %120, label %114

114:                                              ; preds = %110
  %115 = ptrtoint %"class.base::BasicStringPiece"* %112 to i64
  %116 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %117 = bitcast %"class.base::BasicStringPiece"** %116 to i64*
  store i64 %115, i64* %117, align 8
  %118 = bitcast %"class.base::BasicStringPiece"* %112 to i8*
  call void @_ZdlPv(i8* %118) #10
  %119 = bitcast %"class.std::__1::vector"* %109 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %119, i8 0, i64 24, i1 false) #9
  br label %120

120:                                              ; preds = %110, %114
  %121 = bitcast %"class.std::__1::vector"* %106 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8
  %123 = bitcast %"class.std::__1::vector"* %109 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %123, align 8
  %124 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %125 = bitcast %"class.base::BasicStringPiece"** %124 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %128 = bitcast %"class.base::BasicStringPiece"** %127 to i64*
  store i64 %126, i64* %128, align 8
  %129 = bitcast %"class.std::__1::vector"* %106 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %129, i8 0, i64 24, i1 false) #9
  br label %156

130:                                              ; preds = %105
  %131 = bitcast %"class.std::__1::vector"* %106 to <2 x i64>*
  %132 = load <2 x i64>, <2 x i64>* %131, align 8
  %133 = bitcast %"class.std::__1::vector"* %109 to <2 x i64>*
  store <2 x i64> %132, <2 x i64>* %133, align 8
  %134 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %135 = bitcast %"class.base::BasicStringPiece"** %134 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %138 = bitcast %"class.base::BasicStringPiece"** %137 to i64*
  store i64 %136, i64* %138, align 8
  %139 = bitcast %"class.std::__1::vector"* %106 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %139, i8 0, i64 24, i1 false) #9
  store i8 1, i8* %8, align 8
  br label %156

140:                                              ; preds = %99, %92
  store i8 0, i8* %93, align 8, !alias.scope !7
  %141 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %6, i64 0, i32 0, i32 0, i32 0, i32 1
  %142 = bitcast %union.anon.6* %141 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %142, i8 0, i64 24, i1 false) #9, !alias.scope !7
  br label %143

143:                                              ; preds = %140, %102
  %144 = load i8, i8* %8, align 8, !range !6
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %156, label %146

146:                                              ; preds = %143
  %147 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %148 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %147, align 8
  %149 = icmp eq %"class.base::BasicStringPiece"* %148, null
  br i1 %149, label %155, label %150

150:                                              ; preds = %146
  %151 = ptrtoint %"class.base::BasicStringPiece"* %148 to i64
  %152 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %153 = bitcast %"class.base::BasicStringPiece"** %152 to i64*
  store i64 %151, i64* %153, align 8
  %154 = bitcast %"class.base::BasicStringPiece"* %148 to i8*
  call void @_ZdlPv(i8* %154) #10
  br label %155

155:                                              ; preds = %150, %146
  store i8 0, i8* %8, align 8
  br label %156

156:                                              ; preds = %120, %130, %143, %155
  %157 = load i8, i8* %93, align 8, !range !6
  %158 = icmp eq i8 %157, 0
  br i1 %158, label %234, label %159

159:                                              ; preds = %156
  %160 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %161 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %160, align 8
  %162 = icmp eq %"class.base::BasicStringPiece"* %161, null
  br i1 %162, label %168, label %163

163:                                              ; preds = %159
  %164 = ptrtoint %"class.base::BasicStringPiece"* %161 to i64
  %165 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %166 = bitcast %"class.base::BasicStringPiece"** %165 to i64*
  store i64 %164, i64* %166, align 8
  %167 = bitcast %"class.base::BasicStringPiece"* %161 to i8*
  call void @_ZdlPv(i8* %167) #10
  br label %168

168:                                              ; preds = %163, %159
  store i8 0, i8* %93, align 8
  br label %234

169:                                              ; preds = %2
  %170 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %170) #9
  call void @_ZN8autofill28RemoveCommonPrefixIfPossibleERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEE(%"class.absl::optional"* nonnull sret %7, %"class.std::__1::vector"* dereferenceable(24) %1)
  %171 = load i8, i8* %170, align 8, !range !6
  %172 = icmp eq i8 %171, 0
  br i1 %172, label %208, label %173

173:                                              ; preds = %169
  %174 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %175 = load i8, i8* %8, align 8, !range !6
  %176 = icmp eq i8 %175, 0
  %177 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  br i1 %176, label %198, label %178

178:                                              ; preds = %173
  %179 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %177, i64 0, i32 0, i32 0
  %180 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %179, align 8
  %181 = icmp eq %"class.base::BasicStringPiece"* %180, null
  br i1 %181, label %188, label %182

182:                                              ; preds = %178
  %183 = ptrtoint %"class.base::BasicStringPiece"* %180 to i64
  %184 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %185 = bitcast %"class.base::BasicStringPiece"** %184 to i64*
  store i64 %183, i64* %185, align 8
  %186 = bitcast %"class.base::BasicStringPiece"* %180 to i8*
  call void @_ZdlPv(i8* %186) #10
  %187 = bitcast %"class.std::__1::vector"* %177 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %187, i8 0, i64 24, i1 false) #9
  br label %188

188:                                              ; preds = %178, %182
  %189 = bitcast %"class.std::__1::vector"* %174 to <2 x i64>*
  %190 = load <2 x i64>, <2 x i64>* %189, align 8
  %191 = bitcast %"class.std::__1::vector"* %177 to <2 x i64>*
  store <2 x i64> %190, <2 x i64>* %191, align 8
  %192 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %193 = bitcast %"class.base::BasicStringPiece"** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %196 = bitcast %"class.base::BasicStringPiece"** %195 to i64*
  store i64 %194, i64* %196, align 8
  %197 = bitcast %"class.std::__1::vector"* %174 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %197, i8 0, i64 24, i1 false) #9
  br label %221

198:                                              ; preds = %173
  %199 = bitcast %"class.std::__1::vector"* %174 to <2 x i64>*
  %200 = load <2 x i64>, <2 x i64>* %199, align 8
  %201 = bitcast %"class.std::__1::vector"* %177 to <2 x i64>*
  store <2 x i64> %200, <2 x i64>* %201, align 8
  %202 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %203 = bitcast %"class.base::BasicStringPiece"** %202 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %206 = bitcast %"class.base::BasicStringPiece"** %205 to i64*
  store i64 %204, i64* %206, align 8
  %207 = bitcast %"class.std::__1::vector"* %174 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %207, i8 0, i64 24, i1 false) #9
  store i8 1, i8* %8, align 8
  br label %221

208:                                              ; preds = %169
  %209 = load i8, i8* %8, align 8, !range !6
  %210 = icmp eq i8 %209, 0
  br i1 %210, label %234, label %211

211:                                              ; preds = %208
  %212 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %213 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %212, align 8
  %214 = icmp eq %"class.base::BasicStringPiece"* %213, null
  br i1 %214, label %220, label %215

215:                                              ; preds = %211
  %216 = ptrtoint %"class.base::BasicStringPiece"* %213 to i64
  %217 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %218 = bitcast %"class.base::BasicStringPiece"** %217 to i64*
  store i64 %216, i64* %218, align 8
  %219 = bitcast %"class.base::BasicStringPiece"* %213 to i8*
  call void @_ZdlPv(i8* %219) #10
  br label %220

220:                                              ; preds = %215, %211
  store i8 0, i8* %8, align 8
  br label %221

221:                                              ; preds = %188, %198, %220
  %222 = load i8, i8* %170, align 8
  %223 = icmp eq i8 %222, 0
  br i1 %223, label %234, label %224

224:                                              ; preds = %221
  %225 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %226 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %225, align 8
  %227 = icmp eq %"class.base::BasicStringPiece"* %226, null
  br i1 %227, label %233, label %228

228:                                              ; preds = %224
  %229 = ptrtoint %"class.base::BasicStringPiece"* %226 to i64
  %230 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %231 = bitcast %"class.base::BasicStringPiece"** %230 to i64*
  store i64 %229, i64* %231, align 8
  %232 = bitcast %"class.base::BasicStringPiece"* %226 to i8*
  call void @_ZdlPv(i8* %232) #10
  br label %233

233:                                              ; preds = %228, %224
  store i8 0, i8* %170, align 8
  br label %234

234:                                              ; preds = %233, %221, %208, %168, %156
  %235 = phi i8* [ %93, %156 ], [ %93, %168 ], [ %170, %208 ], [ %170, %221 ], [ %170, %233 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %235) #9
  %236 = load i8, i8* %8, align 8
  %237 = icmp eq i8 %236, 0
  br i1 %237, label %241, label %238

238:                                              ; preds = %89, %234
  %239 = phi i8 [ %90, %89 ], [ %236, %234 ]
  %240 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %241

241:                                              ; preds = %234, %238
  %242 = phi i8 [ %239, %238 ], [ 0, %234 ]
  %243 = phi %"class.std::__1::vector"* [ %240, %238 ], [ %1, %234 ]
  %244 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %243, i64 0, i32 0, i32 0
  %245 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %244, align 8
  %246 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %243, i64 0, i32 0, i32 1
  %247 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %246, align 8
  %248 = icmp eq %"class.base::BasicStringPiece"* %245, %247
  br i1 %248, label %446, label %249

249:                                              ; preds = %241
  %250 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %251 = bitcast %"class.std::__1::basic_string"* %3 to i8**
  %252 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %253 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %254 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %255 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %254, i64 0, i32 1, i32 1
  %256 = bitcast %"class.std::__1::basic_string"* %3 to i16*
  %257 = bitcast %"class.std::__1::basic_string"** %12 to i64*
  br label %258

258:                                              ; preds = %441, %249
  %259 = phi %"class.base::BasicStringPiece"* [ %245, %249 ], [ %442, %441 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %250) #9
  %260 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %259, i64 0, i32 0
  %261 = load i16*, i16** %260, align 8, !noalias !10
  %262 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %259, i64 0, i32 1
  %263 = load i64, i64* %262, align 8, !noalias !10
  %264 = icmp ugt i64 %263, 9223372036854775791
  br i1 %264, label %265, label %267

265:                                              ; preds = %258
  %266 = bitcast %"class.std::__1::basic_string"* %3 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %266) #11
  unreachable

267:                                              ; preds = %258
  %268 = icmp ult i64 %263, 11
  br i1 %268, label %279, label %269

269:                                              ; preds = %267
  %270 = add nuw nsw i64 %263, 8
  %271 = and i64 %270, -8
  %272 = icmp slt i64 %271, 0
  br i1 %272, label %273, label %274

273:                                              ; preds = %269
  call void @abort() #11
  unreachable

274:                                              ; preds = %269
  %275 = shl i64 %271, 1
  %276 = call i8* @_Znwm(i64 %275) #10
  %277 = bitcast i8* %276 to i16*
  store i8* %276, i8** %251, align 8, !alias.scope !10
  %278 = or i64 %271, -9223372036854775808
  store i64 %278, i64* %252, align 8, !alias.scope !10
  store i64 %263, i64* %253, align 8, !alias.scope !10
  br label %282

279:                                              ; preds = %267
  %280 = trunc i64 %263 to i8
  store i8 %280, i8* %255, align 1, !alias.scope !10
  %281 = icmp eq i64 %263, 0
  br i1 %281, label %426, label %282

282:                                              ; preds = %279, %274
  %283 = phi i16* [ %277, %274 ], [ %256, %279 ]
  %284 = icmp ult i64 %263, 16
  br i1 %284, label %373, label %285

285:                                              ; preds = %282
  %286 = getelementptr i16, i16* %283, i64 %263
  %287 = getelementptr i16, i16* %261, i64 %263
  %288 = icmp ult i16* %283, %287
  %289 = icmp ult i16* %261, %286
  %290 = and i1 %288, %289
  br i1 %290, label %373, label %291

291:                                              ; preds = %285
  %292 = and i64 %263, -16
  %293 = sub i64 %263, %292
  %294 = getelementptr i16, i16* %261, i64 %292
  %295 = getelementptr i16, i16* %283, i64 %292
  %296 = add i64 %292, -16
  %297 = lshr exact i64 %296, 4
  %298 = add nuw nsw i64 %297, 1
  %299 = and i64 %298, 3
  %300 = icmp ult i64 %296, 48
  br i1 %300, label %352, label %301

301:                                              ; preds = %291
  %302 = sub nsw i64 %298, %299
  br label %303

303:                                              ; preds = %303, %301
  %304 = phi i64 [ 0, %301 ], [ %349, %303 ]
  %305 = phi i64 [ %302, %301 ], [ %350, %303 ]
  %306 = getelementptr i16, i16* %261, i64 %304
  %307 = getelementptr i16, i16* %283, i64 %304
  %308 = bitcast i16* %306 to <8 x i16>*
  %309 = load <8 x i16>, <8 x i16>* %308, align 2, !alias.scope !21
  %310 = getelementptr i16, i16* %306, i64 8
  %311 = bitcast i16* %310 to <8 x i16>*
  %312 = load <8 x i16>, <8 x i16>* %311, align 2, !alias.scope !21
  %313 = bitcast i16* %307 to <8 x i16>*
  store <8 x i16> %309, <8 x i16>* %313, align 2, !alias.scope !24, !noalias !21
  %314 = getelementptr i16, i16* %307, i64 8
  %315 = bitcast i16* %314 to <8 x i16>*
  store <8 x i16> %312, <8 x i16>* %315, align 2, !alias.scope !24, !noalias !21
  %316 = or i64 %304, 16
  %317 = getelementptr i16, i16* %261, i64 %316
  %318 = getelementptr i16, i16* %283, i64 %316
  %319 = bitcast i16* %317 to <8 x i16>*
  %320 = load <8 x i16>, <8 x i16>* %319, align 2, !alias.scope !21
  %321 = getelementptr i16, i16* %317, i64 8
  %322 = bitcast i16* %321 to <8 x i16>*
  %323 = load <8 x i16>, <8 x i16>* %322, align 2, !alias.scope !21
  %324 = bitcast i16* %318 to <8 x i16>*
  store <8 x i16> %320, <8 x i16>* %324, align 2, !alias.scope !24, !noalias !21
  %325 = getelementptr i16, i16* %318, i64 8
  %326 = bitcast i16* %325 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %326, align 2, !alias.scope !24, !noalias !21
  %327 = or i64 %304, 32
  %328 = getelementptr i16, i16* %261, i64 %327
  %329 = getelementptr i16, i16* %283, i64 %327
  %330 = bitcast i16* %328 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !21
  %332 = getelementptr i16, i16* %328, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !21
  %335 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %335, align 2, !alias.scope !24, !noalias !21
  %336 = getelementptr i16, i16* %329, i64 8
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %337, align 2, !alias.scope !24, !noalias !21
  %338 = or i64 %304, 48
  %339 = getelementptr i16, i16* %261, i64 %338
  %340 = getelementptr i16, i16* %283, i64 %338
  %341 = bitcast i16* %339 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !21
  %343 = getelementptr i16, i16* %339, i64 8
  %344 = bitcast i16* %343 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 2, !alias.scope !21
  %346 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %346, align 2, !alias.scope !24, !noalias !21
  %347 = getelementptr i16, i16* %340, i64 8
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %348, align 2, !alias.scope !24, !noalias !21
  %349 = add i64 %304, 64
  %350 = add i64 %305, -4
  %351 = icmp eq i64 %350, 0
  br i1 %351, label %352, label %303, !llvm.loop !26

352:                                              ; preds = %303, %291
  %353 = phi i64 [ 0, %291 ], [ %349, %303 ]
  %354 = icmp eq i64 %299, 0
  br i1 %354, label %371, label %355

355:                                              ; preds = %352, %355
  %356 = phi i64 [ %368, %355 ], [ %353, %352 ]
  %357 = phi i64 [ %369, %355 ], [ %299, %352 ]
  %358 = getelementptr i16, i16* %261, i64 %356
  %359 = getelementptr i16, i16* %283, i64 %356
  %360 = bitcast i16* %358 to <8 x i16>*
  %361 = load <8 x i16>, <8 x i16>* %360, align 2, !alias.scope !21
  %362 = getelementptr i16, i16* %358, i64 8
  %363 = bitcast i16* %362 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 2, !alias.scope !21
  %365 = bitcast i16* %359 to <8 x i16>*
  store <8 x i16> %361, <8 x i16>* %365, align 2, !alias.scope !24, !noalias !21
  %366 = getelementptr i16, i16* %359, i64 8
  %367 = bitcast i16* %366 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %367, align 2, !alias.scope !24, !noalias !21
  %368 = add i64 %356, 16
  %369 = add i64 %357, -1
  %370 = icmp eq i64 %369, 0
  br i1 %370, label %371, label %355, !llvm.loop !28

371:                                              ; preds = %355, %352
  %372 = icmp eq i64 %263, %292
  br i1 %372, label %426, label %373

373:                                              ; preds = %371, %285, %282
  %374 = phi i64 [ %263, %285 ], [ %263, %282 ], [ %293, %371 ]
  %375 = phi i16* [ %261, %285 ], [ %261, %282 ], [ %294, %371 ]
  %376 = phi i16* [ %283, %285 ], [ %283, %282 ], [ %295, %371 ]
  %377 = add i64 %374, -1
  %378 = and i64 %374, 7
  %379 = icmp eq i64 %378, 0
  br i1 %379, label %391, label %380

380:                                              ; preds = %373, %380
  %381 = phi i64 [ %386, %380 ], [ %374, %373 ]
  %382 = phi i16* [ %388, %380 ], [ %375, %373 ]
  %383 = phi i16* [ %387, %380 ], [ %376, %373 ]
  %384 = phi i64 [ %389, %380 ], [ %378, %373 ]
  %385 = load i16, i16* %382, align 2
  store i16 %385, i16* %383, align 2
  %386 = add i64 %381, -1
  %387 = getelementptr inbounds i16, i16* %383, i64 1
  %388 = getelementptr inbounds i16, i16* %382, i64 1
  %389 = add i64 %384, -1
  %390 = icmp eq i64 %389, 0
  br i1 %390, label %391, label %380, !llvm.loop !30

391:                                              ; preds = %380, %373
  %392 = phi i64 [ %374, %373 ], [ %386, %380 ]
  %393 = phi i16* [ %375, %373 ], [ %388, %380 ]
  %394 = phi i16* [ %376, %373 ], [ %387, %380 ]
  %395 = icmp ult i64 %377, 7
  br i1 %395, label %426, label %396

396:                                              ; preds = %391, %396
  %397 = phi i64 [ %422, %396 ], [ %392, %391 ]
  %398 = phi i16* [ %424, %396 ], [ %393, %391 ]
  %399 = phi i16* [ %423, %396 ], [ %394, %391 ]
  %400 = load i16, i16* %398, align 2
  store i16 %400, i16* %399, align 2
  %401 = getelementptr inbounds i16, i16* %399, i64 1
  %402 = getelementptr inbounds i16, i16* %398, i64 1
  %403 = load i16, i16* %402, align 2
  store i16 %403, i16* %401, align 2
  %404 = getelementptr inbounds i16, i16* %399, i64 2
  %405 = getelementptr inbounds i16, i16* %398, i64 2
  %406 = load i16, i16* %405, align 2
  store i16 %406, i16* %404, align 2
  %407 = getelementptr inbounds i16, i16* %399, i64 3
  %408 = getelementptr inbounds i16, i16* %398, i64 3
  %409 = load i16, i16* %408, align 2
  store i16 %409, i16* %407, align 2
  %410 = getelementptr inbounds i16, i16* %399, i64 4
  %411 = getelementptr inbounds i16, i16* %398, i64 4
  %412 = load i16, i16* %411, align 2
  store i16 %412, i16* %410, align 2
  %413 = getelementptr inbounds i16, i16* %399, i64 5
  %414 = getelementptr inbounds i16, i16* %398, i64 5
  %415 = load i16, i16* %414, align 2
  store i16 %415, i16* %413, align 2
  %416 = getelementptr inbounds i16, i16* %399, i64 6
  %417 = getelementptr inbounds i16, i16* %398, i64 6
  %418 = load i16, i16* %417, align 2
  store i16 %418, i16* %416, align 2
  %419 = getelementptr inbounds i16, i16* %399, i64 7
  %420 = getelementptr inbounds i16, i16* %398, i64 7
  %421 = load i16, i16* %420, align 2
  store i16 %421, i16* %419, align 2
  %422 = add i64 %397, -8
  %423 = getelementptr inbounds i16, i16* %399, i64 8
  %424 = getelementptr inbounds i16, i16* %398, i64 8
  %425 = icmp eq i64 %422, 0
  br i1 %425, label %426, label %396, !llvm.loop !31

426:                                              ; preds = %391, %396, %371, %279
  %427 = phi i16* [ %256, %279 ], [ %283, %371 ], [ %283, %396 ], [ %283, %391 ]
  %428 = getelementptr inbounds i16, i16* %427, i64 %263
  store i16 0, i16* %428, align 2
  %429 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %12, align 8
  %430 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %13, align 8
  %431 = icmp ult %"class.std::__1::basic_string"* %429, %430
  br i1 %431, label %432, label %436

432:                                              ; preds = %426
  %433 = bitcast %"class.std::__1::basic_string"* %429 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %433, i8* nonnull align 8 %250, i64 24, i1 false) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %250, i8 0, i64 24, i1 false) #9
  %434 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %429, i64 1
  %435 = ptrtoint %"class.std::__1::basic_string"* %434 to i64
  store i64 %435, i64* %257, align 8
  br label %441

436:                                              ; preds = %426
  call void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector.7"* %0, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %3) #9
  %437 = load i8, i8* %255, align 1
  %438 = icmp slt i8 %437, 0
  br i1 %438, label %439, label %441

439:                                              ; preds = %436
  %440 = load i8*, i8** %251, align 8
  call void @_ZdlPv(i8* %440) #10
  br label %441

441:                                              ; preds = %439, %436, %432
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %250) #9
  %442 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %259, i64 1
  %443 = icmp eq %"class.base::BasicStringPiece"* %442, %247
  br i1 %443, label %444, label %258

444:                                              ; preds = %441
  %445 = load i8, i8* %8, align 8, !range !6
  br label %446

446:                                              ; preds = %444, %241
  %447 = phi i8 [ %445, %444 ], [ %242, %241 ]
  %448 = icmp eq i8 %447, 0
  br i1 %448, label %459, label %449

449:                                              ; preds = %446
  %450 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %451 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %450, align 8
  %452 = icmp eq %"class.base::BasicStringPiece"* %451, null
  br i1 %452, label %458, label %453

453:                                              ; preds = %449
  %454 = ptrtoint %"class.base::BasicStringPiece"* %451 to i64
  %455 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %456 = bitcast %"class.base::BasicStringPiece"** %455 to i64*
  store i64 %454, i64* %456, align 8
  %457 = bitcast %"class.base::BasicStringPiece"* %451 to i8*
  call void @_ZdlPv(i8* %457) #10
  br label %458

458:                                              ; preds = %453, %449
  store i8 0, i8* %8, align 8
  br label %459

459:                                              ; preds = %446, %458
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE7reserveEm(%"class.std::__1::vector.7"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::basic_string"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.7"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 24
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"class.std::__1::basic_string"*
  br i1 %10, label %12, label %62

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.std::__1::basic_string"** %13 to i64*
  %15 = icmp ugt i64 %1, 768614336404564650
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #11
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = sdiv exact i64 %19, 24
  %21 = mul i64 %1, 24
  %22 = tail call i8* @_Znwm(i64 %21) #10
  %23 = bitcast i8* %22 to %"class.std::__1::basic_string"*
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %23, i64 %20
  %25 = ptrtoint %"class.std::__1::basic_string"* %24 to i64
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %23, i64 %1
  %27 = ptrtoint %"class.std::__1::basic_string"* %26 to i64
  %28 = inttoptr i64 %18 to %"class.std::__1::basic_string"*
  %29 = icmp eq %"class.std::__1::basic_string"* %28, %11
  br i1 %29, label %30, label %31

30:                                               ; preds = %17
  store i64 %25, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  br label %57

31:                                               ; preds = %17, %31
  %32 = phi %"class.std::__1::basic_string"* [ %34, %31 ], [ %24, %17 ]
  %33 = phi %"class.std::__1::basic_string"* [ %35, %31 ], [ %28, %17 ]
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %32, i64 -1
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 -1
  %36 = bitcast %"class.std::__1::basic_string"* %34 to i8*
  %37 = bitcast %"class.std::__1::basic_string"* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 24, i1 false) #9
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 24, i1 false) #9
  %38 = icmp eq %"class.std::__1::basic_string"* %35, %11
  br i1 %38, label %39, label %31

39:                                               ; preds = %31
  %40 = ptrtoint %"class.std::__1::basic_string"* %34 to i64
  %41 = load i64, i64* %6, align 8
  %42 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %13, align 8
  %43 = inttoptr i64 %41 to %"class.std::__1::basic_string"*
  store i64 %40, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %44 = icmp eq %"class.std::__1::basic_string"* %42, %43
  br i1 %44, label %57, label %45

45:                                               ; preds = %39, %55
  %46 = phi %"class.std::__1::basic_string"* [ %47, %55 ], [ %42, %39 ]
  %47 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %46, i64 -1
  %48 = bitcast %"class.std::__1::basic_string"* %47 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %48, i64 0, i32 1, i32 1
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %45
  %53 = bitcast %"class.std::__1::basic_string"* %47 to i8**
  %54 = load i8*, i8** %53, align 8
  tail call void @_ZdlPv(i8* %54) #10
  br label %55

55:                                               ; preds = %52, %45
  %56 = icmp eq %"class.std::__1::basic_string"* %47, %43
  br i1 %56, label %57, label %45

57:                                               ; preds = %55, %30, %39
  %58 = phi i64 [ %7, %30 ], [ %41, %39 ], [ %41, %55 ]
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %62, label %60

60:                                               ; preds = %57
  %61 = inttoptr i64 %58 to i8*
  tail call void @_ZdlPv(i8* %61) #10
  br label %62

62:                                               ; preds = %60, %57, %2
  ret void
}

declare zeroext i1 @_ZN4base11FeatureList9IsEnabledERKNS_7FeatureE(%"struct.base::Feature"* dereferenceable(16)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
declare dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece"*, i64) local_unnamed_addr #0 align 2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector.7"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::basic_string"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.7"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 24
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 768614336404564650
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.7"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #11
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::basic_string"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 24
  %20 = icmp ult i64 %19, 384307168202282325
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 768614336404564650, %14 ]
  %28 = mul i64 %27, 24
  %29 = tail call i8* @_Znwm(i64 %28) #10
  %30 = bitcast i8* %29 to %"class.std::__1::basic_string"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.std::__1::basic_string"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 %9
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 %32
  %36 = ptrtoint %"class.std::__1::basic_string"* %35 to i64
  %37 = bitcast %"class.std::__1::basic_string"* %34 to i8*
  %38 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #9
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 24, i1 false) #9
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %34, i64 1
  %40 = ptrtoint %"class.std::__1::basic_string"* %39 to i64
  %41 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %0, i64 0, i32 0, i32 0
  %42 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %41, align 8
  %43 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %3, align 8
  %44 = icmp eq %"class.std::__1::basic_string"* %43, %42
  br i1 %44, label %45, label %47

45:                                               ; preds = %31
  %46 = ptrtoint %"class.std::__1::basic_string"* %42 to i64
  br label %58

47:                                               ; preds = %31, %47
  %48 = phi %"class.std::__1::basic_string"* [ %50, %47 ], [ %34, %31 ]
  %49 = phi %"class.std::__1::basic_string"* [ %51, %47 ], [ %43, %31 ]
  %50 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %48, i64 -1
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %49, i64 -1
  %52 = bitcast %"class.std::__1::basic_string"* %50 to i8*
  %53 = bitcast %"class.std::__1::basic_string"* %51 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 24, i1 false) #9
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 24, i1 false) #9
  %54 = icmp eq %"class.std::__1::basic_string"* %51, %42
  br i1 %54, label %55, label %47

55:                                               ; preds = %47
  %56 = load i64, i64* %6, align 8
  %57 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %3, align 8
  br label %58

58:                                               ; preds = %45, %55
  %59 = phi %"class.std::__1::basic_string"* [ %42, %45 ], [ %57, %55 ]
  %60 = phi %"class.std::__1::basic_string"* [ %34, %45 ], [ %50, %55 ]
  %61 = phi i64 [ %46, %45 ], [ %56, %55 ]
  %62 = ptrtoint %"class.std::__1::basic_string"* %60 to i64
  store i64 %62, i64* %6, align 8
  store i64 %40, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %63 = inttoptr i64 %61 to %"class.std::__1::basic_string"*
  %64 = icmp eq %"class.std::__1::basic_string"* %59, %63
  br i1 %64, label %77, label %65

65:                                               ; preds = %58, %75
  %66 = phi %"class.std::__1::basic_string"* [ %67, %75 ], [ %59, %58 ]
  %67 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %66, i64 -1
  %68 = bitcast %"class.std::__1::basic_string"* %67 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %69 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %68, i64 0, i32 1, i32 1
  %70 = load i8, i8* %69, align 1
  %71 = icmp slt i8 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %65
  %73 = bitcast %"class.std::__1::basic_string"* %67 to i8**
  %74 = load i8*, i8** %73, align 8
  tail call void @_ZdlPv(i8* %74) #10
  br label %75

75:                                               ; preds = %72, %65
  %76 = icmp eq %"class.std::__1::basic_string"* %67, %63
  br i1 %76, label %77, label %65

77:                                               ; preds = %75, %58
  %78 = icmp eq i64 %61, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %77
  %80 = inttoptr i64 %61 to i8*
  tail call void @_ZdlPv(i8* %80) #10
  br label %81

81:                                               ; preds = %77, %79
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.std::__1::back_insert_iterator"* @_ZNSt3__120back_insert_iteratorINS_6vectorIN4base16BasicStringPieceIDsNS_11char_traitsIDsEEEENS_9allocatorIS6_EEEEEaSERKS6_(%"class.std::__1::back_insert_iterator"*, %"class.base::BasicStringPiece"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::back_insert_iterator", %"class.std::__1::back_insert_iterator"* %0, i64 0, i32 0
  %4 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %6 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %8 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %7, align 8
  %9 = icmp eq %"class.base::BasicStringPiece"* %6, %8
  %10 = ptrtoint %"class.base::BasicStringPiece"* %8 to i64
  br i1 %9, label %17, label %11

11:                                               ; preds = %2
  %12 = bitcast %"class.base::BasicStringPiece"* %6 to i8*
  %13 = bitcast %"class.base::BasicStringPiece"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 16, i1 false) #9
  %14 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %6, i64 1
  %15 = ptrtoint %"class.base::BasicStringPiece"* %14 to i64
  %16 = bitcast %"class.base::BasicStringPiece"** %5 to i64*
  store i64 %15, i64* %16, align 8
  br label %75

17:                                               ; preds = %2
  %18 = ptrtoint %"class.base::BasicStringPiece"* %6 to i64
  %19 = bitcast %"class.base::BasicStringPiece"** %5 to i64*
  %20 = bitcast %"class.std::__1::vector"* %4 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %18, %21
  %23 = ashr exact i64 %22, 4
  %24 = add nsw i64 %23, 1
  %25 = icmp ugt i64 %24, 1152921504606846975
  br i1 %25, label %26, label %28

26:                                               ; preds = %17
  %27 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %27) #11
  unreachable

28:                                               ; preds = %17
  %29 = bitcast %"class.base::BasicStringPiece"** %7 to i64*
  %30 = sub i64 %10, %21
  %31 = ashr exact i64 %30, 4
  %32 = icmp ult i64 %31, 576460752303423487
  br i1 %32, label %33, label %41

33:                                               ; preds = %28
  %34 = ashr exact i64 %30, 3
  %35 = icmp ult i64 %34, %24
  %36 = select i1 %35, i64 %24, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %46, label %38

38:                                               ; preds = %33
  %39 = icmp ugt i64 %36, 1152921504606846975
  br i1 %39, label %40, label %41

40:                                               ; preds = %38
  tail call void @abort() #11
  unreachable

41:                                               ; preds = %38, %28
  %42 = phi i64 [ %36, %38 ], [ 1152921504606846975, %28 ]
  %43 = shl i64 %42, 4
  %44 = tail call i8* @_Znwm(i64 %43) #10
  %45 = bitcast i8* %44 to %"class.base::BasicStringPiece"*
  br label %46

46:                                               ; preds = %41, %33
  %47 = phi i64 [ %42, %41 ], [ 0, %33 ]
  %48 = phi %"class.base::BasicStringPiece"* [ %45, %41 ], [ null, %33 ]
  %49 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %48, i64 %23
  %50 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %48, i64 %47
  %51 = ptrtoint %"class.base::BasicStringPiece"* %50 to i64
  %52 = bitcast %"class.base::BasicStringPiece"* %49 to i8*
  %53 = bitcast %"class.base::BasicStringPiece"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 16, i1 false) #9
  %54 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %49, i64 1
  %55 = ptrtoint %"class.base::BasicStringPiece"* %54 to i64
  %56 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %57 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %56, align 8
  %58 = load i64, i64* %19, align 8
  %59 = ptrtoint %"class.base::BasicStringPiece"* %57 to i64
  %60 = sub i64 %58, %59
  %61 = ashr exact i64 %60, 4
  %62 = sub nsw i64 0, %61
  %63 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %49, i64 %62
  %64 = ptrtoint %"class.base::BasicStringPiece"* %63 to i64
  %65 = icmp sgt i64 %60, 0
  br i1 %65, label %66, label %70

66:                                               ; preds = %46
  %67 = bitcast %"class.base::BasicStringPiece"* %63 to i8*
  %68 = bitcast %"class.base::BasicStringPiece"* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 %60, i1 false) #9
  %69 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %56, align 8
  br label %70

70:                                               ; preds = %66, %46
  %71 = phi %"class.base::BasicStringPiece"* [ %57, %46 ], [ %69, %66 ]
  store i64 %64, i64* %20, align 8
  store i64 %55, i64* %19, align 8
  store i64 %51, i64* %29, align 8
  %72 = icmp eq %"class.base::BasicStringPiece"* %71, null
  br i1 %72, label %75, label %73

73:                                               ; preds = %70
  %74 = bitcast %"class.base::BasicStringPiece"* %71 to i8*
  tail call void @_ZdlPv(i8* %74) #10
  br label %75

75:                                               ; preds = %11, %70, %73
  ret %"class.std::__1::back_insert_iterator"* %0
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN4absl13make_optionalIRNSt3__16vectorIN4base16BasicStringPieceIDsNS1_11char_traitsIDsEEEENS1_9allocatorIS7_EEEEEENS_8optionalINS1_5decayIT_E4typeEEEOSE_: argument 0"}
!5 = distinct !{!5, !"_ZN4absl13make_optionalIRNSt3__16vectorIN4base16BasicStringPieceIDsNS1_11char_traitsIDsEEEENS1_9allocatorIS7_EEEEEENS_8optionalINS1_5decayIT_E4typeEEEOSE_"}
!6 = !{i8 0, i8 2}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN8autofill53RemoveCommonPrefixForNamesWithMinimalLengthIfPossibleERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEE: argument 0"}
!9 = distinct !{!9, !"_ZN8autofill53RemoveCommonPrefixForNamesWithMinimalLengthIfPossibleERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEE"}
!10 = !{!11, !13, !15, !17, !19}
!11 = distinct !{!11, !12, !"_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEcvNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEEEv: argument 0"}
!12 = distinct !{!12, !"_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEcvNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEEEv"}
!13 = distinct !{!13, !14, !"_ZZN8autofill17GetParseableNamesERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEEENK3$_0clIKS6_EEDaRT_: argument 0"}
!14 = distinct !{!14, !"_ZZN8autofill17GetParseableNamesERKNSt3__16vectorIN4base16BasicStringPieceIDsNS0_11char_traitsIDsEEEENS0_9allocatorIS6_EEEEENK3$_0clIKS6_EEDaRT_"}
!15 = distinct !{!15, !16, !"_ZN4base8internal10InvokeImplIRZN8autofill17GetParseableNamesERKNSt3__16vectorINS_16BasicStringPieceIDsNS3_11char_traitsIDsEEEENS3_9allocatorIS8_EEEEE3$_0JRKS8_EEEDcOT_DpOT0_: argument 0"}
!16 = distinct !{!16, !"_ZN4base8internal10InvokeImplIRZN8autofill17GetParseableNamesERKNSt3__16vectorINS_16BasicStringPieceIDsNS3_11char_traitsIDsEEEENS3_9allocatorIS8_EEEEE3$_0JRKS8_EEEDcOT_DpOT0_"}
!17 = distinct !{!17, !18, !"_ZN4base6invokeIRZN8autofill17GetParseableNamesERKNSt3__16vectorINS_16BasicStringPieceIDsNS2_11char_traitsIDsEEEENS2_9allocatorIS7_EEEEE3$_0JRKS7_EEEDcOT_DpOT0_: argument 0"}
!18 = distinct !{!18, !"_ZN4base6invokeIRZN8autofill17GetParseableNamesERKNSt3__16vectorINS_16BasicStringPieceIDsNS2_11char_traitsIDsEEEENS2_9allocatorIS7_EEEEE3$_0JRKS7_EEEDcOT_DpOT0_"}
!19 = distinct !{!19, !20, !"_ZZN4base6ranges9transformINSt3__111__wrap_iterIPKNS_16BasicStringPieceIDsNS2_11char_traitsIDsEEEEEENS2_20back_insert_iteratorINS2_6vectorINS2_12basic_stringIDsS6_NS2_9allocatorIDsEEEENSE_ISG_EEEEEEZN8autofill17GetParseableNamesERKNSC_IS7_NSE_IS7_EEEEE3$_0NS_8identityENS2_26random_access_iterator_tagENS2_19output_iterator_tagESG_EEDaT_ST_T0_T1_T2_ENKUlTyOST_E_clIRS8_EEDaSX_: argument 0"}
!20 = distinct !{!20, !"_ZZN4base6ranges9transformINSt3__111__wrap_iterIPKNS_16BasicStringPieceIDsNS2_11char_traitsIDsEEEEEENS2_20back_insert_iteratorINS2_6vectorINS2_12basic_stringIDsS6_NS2_9allocatorIDsEEEENSE_ISG_EEEEEEZN8autofill17GetParseableNamesERKNSC_IS7_NSE_IS7_EEEEE3$_0NS_8identityENS2_26random_access_iterator_tagENS2_19output_iterator_tagESG_EEDaT_ST_T0_T1_T2_ENKUlTyOST_E_clIRS8_EEDaSX_"}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !27}
!27 = !{!"llvm.loop.isvectorized", i32 1}
!28 = distinct !{!28, !29}
!29 = !{!"llvm.loop.unroll.disable"}
!30 = distinct !{!30, !29}
!31 = distinct !{!31, !27}
