; ModuleID = '../../third_party/ffmpeg/libavformat/autorename_libavformat_options.c'
source_filename = "../../third_party/ffmpeg/libavformat/autorename_libavformat_options.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type { i8*, i8*, i32, i32, %union.anon, double, double, i32, i8* }
%union.anon = type { i64 }
%struct.AVOptionRanges = type { %struct.AVOptionRange**, i32, i32 }
%struct.AVOptionRange = type { i8*, double, double, double, double, i32 }
%struct.AVFormatContext = type { %struct.AVClass*, %struct.AVInputFormat*, %struct.AVOutputFormat*, i8*, %struct.AVIOContext*, i32, i32, %struct.AVStream**, [1024 x i8], i8*, i64, i64, i64, i32, i32, i32, i64, i64, i8*, i32, i32, %struct.AVProgram**, i32, i32, i32, i32, i32, i32, %struct.AVChapter**, %struct.AVDictionary*, i64, i32, i32, %struct.AVIOInterruptCB, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i8*, i8*, %struct.AVFormatInternal*, i32, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, i32, i8*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i64, i8*, i32, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVIOInterruptCB*, %struct.AVDictionary**)*, i8*, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVDictionary**)*, void (%struct.AVFormatContext*, %struct.AVIOContext*)*, i8*, i32, i32, i32 }
%struct.AVInputFormat = type { i8*, i8*, i32, i8*, %struct.AVCodecTag**, %struct.AVClass*, i8*, %struct.AVInputFormat*, i32, i32, i32 (%struct.AVProbeData*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i32)*, i64 (%struct.AVFormatContext*, i32, i64*, i64)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i64, i64, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)* }
%struct.AVCodecTag = type { i32, i32 }
%struct.AVProbeData = type { i8*, i8*, i32, i8* }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVDeviceInfoList = type opaque
%struct.AVDeviceCapabilitiesQuery = type opaque
%struct.AVOutputFormat = type { i8*, i8*, i8*, i8*, i32, i32, i32, i32, %struct.AVCodecTag**, %struct.AVClass*, %struct.AVOutputFormat*, i32, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*, %struct.AVPacket*, i32)*, i32 (i32, i32)*, void (%struct.AVFormatContext*, i32, i64*, i64*)*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i32 (%struct.AVFormatContext*, i32, %struct.AVFrame**, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32, i32 (%struct.AVFormatContext*)*, void (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)* }
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVRational = type { i32, i32 }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVIOContext = type { %struct.AVClass*, i8*, i32, i8*, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i64, i32, i32, i32, i64, i8*, i64 (i64, i8*, i32)*, i32, i32 (i8*, i32)*, i64 (i8*, i32, i64, i32)*, i32, i64, i32, i64, i32, i32, i32, i32, i8*, i8*, i32 (i8*, i8*, i32, i32, i64)*, i32, i32, i64, i32 (i8*)*, i64, i8*, i32 }
%struct.AVStream = type { i32, i32, %struct.AVCodecContext*, i8*, %struct.AVRational, i64, i64, i64, i32, i32, %struct.AVRational, %struct.AVDictionary*, %struct.AVRational, %struct.AVPacket, %struct.AVPacketSideData*, i32, i32, %struct.AVRational, i8*, %struct.AVCodecParameters*, i8*, i32, i64, i64, i64, i32, i32, i32, i32, %struct.AVCodecParserContext*, i8*, %struct.AVProbeData, [17 x i64], i8*, i32, i32, i32, i32, i32, i32, %struct.AVStreamInternal* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVCodecInternal = type opaque
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParserContext = type { i8*, %struct.AVCodecParser*, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32, i32, [4 x i64], [4 x i64], [4 x i64], i32, i64, [4 x i64], i32, i64, i32, i32, i32, [4 x i64], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParser = type { [5 x i32], i32, i32 (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* }
%struct.AVStreamInternal = type { i32, %struct.AVBSFContext*, i32, %struct.AVCodecContext*, i32, i32, %struct.anon, i32, i32, %struct.FFFrac*, %struct.anon.0*, %struct.AVIndexEntry*, i32, i32, i64, i64, i32, i32, i32, i64, i64, i64, i32, i64, i64, i32, i32, [17 x i64], [17 x i8], [17 x i64], i64, i8, i8, i32, %struct.AVRational, %struct.AVProbeData, %struct.AVPacketList* }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFInternal = type opaque
%struct.anon = type { %struct.AVBSFContext*, %struct.AVPacket*, i32 }
%struct.FFFrac = type { i64, i64, i64 }
%struct.anon.0 = type { i64, i64, i32, i64, [2 x [399 x double]]*, i64, i64, i32, i32, i64, i64, i32, i64, i32 }
%struct.AVIndexEntry = type { i64, i64, i32, i32 }
%struct.AVPacketList = type { %struct.AVPacket, %struct.AVPacketList* }
%struct.AVProgram = type { i32, i32, i32, i32*, i32, %struct.AVDictionary*, i32, i32, i32, i32, i64, i64, i64, i32 }
%struct.AVChapter = type { i32, %struct.AVRational, i64, i64, %struct.AVDictionary* }
%struct.AVDictionary = type opaque
%struct.AVIOInterruptCB = type { i32 (i8*)*, i8* }
%struct.AVFormatInternal = type { i32, %struct.AVPacketList*, %struct.AVPacketList*, i64, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, i32, i64, %struct.AVRational, i32, i32, i32, i64, i32, i32, %struct.AVDictionary*, i32, i32 }
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVCodecDefault = type opaque
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque

@av_format_context_class = internal constant %struct.AVClass { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i32 0, i32 0), i8* (i8*)* @format_to_name, %struct.AVOption* getelementptr inbounds ([73 x %struct.AVOption], [73 x %struct.AVOption]* bitcast (<{ %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption }>* @avformat_options to [73 x %struct.AVOption]*), i32 0, i32 0), i32 3687524, i32 0, i32 0, i8* (i8*, i8*)* @format_child_next, %struct.AVClass* (%struct.AVClass*)* @format_child_class_next, i32 3, i32 (i8*)* @get_category, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* null, %struct.AVClass* (i8**)* @format_child_class_iterate }, align 8
@.str = private unnamed_addr constant [7 x i8] c"image2\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"Opening '%s' for %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"writing\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"reading\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"AVFormatContext\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"NULL\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"avioflags\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"direct\00", align 1
@.str.8 = private unnamed_addr constant [17 x i8] c"reduce buffering\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"probesize\00", align 1
@.str.10 = private unnamed_addr constant [17 x i8] c"set probing size\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"formatprobesize\00", align 1
@.str.12 = private unnamed_addr constant [37 x i8] c"number of bytes to probe file format\00", align 1
@.str.13 = private unnamed_addr constant [11 x i8] c"packetsize\00", align 1
@.str.14 = private unnamed_addr constant [16 x i8] c"set packet size\00", align 1
@.str.15 = private unnamed_addr constant [7 x i8] c"fflags\00", align 1
@.str.16 = private unnamed_addr constant [14 x i8] c"flush_packets\00", align 1
@.str.17 = private unnamed_addr constant [55 x i8] c"reduce the latency by flushing out packets immediately\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"ignidx\00", align 1
@.str.19 = private unnamed_addr constant [13 x i8] c"ignore index\00", align 1
@.str.20 = private unnamed_addr constant [7 x i8] c"genpts\00", align 1
@.str.21 = private unnamed_addr constant [13 x i8] c"generate pts\00", align 1
@.str.22 = private unnamed_addr constant [9 x i8] c"nofillin\00", align 1
@.str.23 = private unnamed_addr constant [61 x i8] c"do not fill in missing values that can be exactly calculated\00", align 1
@.str.24 = private unnamed_addr constant [8 x i8] c"noparse\00", align 1
@.str.25 = private unnamed_addr constant [43 x i8] c"disable AVParsers, this needs nofillin too\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"igndts\00", align 1
@.str.27 = private unnamed_addr constant [11 x i8] c"ignore dts\00", align 1
@.str.28 = private unnamed_addr constant [15 x i8] c"discardcorrupt\00", align 1
@.str.29 = private unnamed_addr constant [25 x i8] c"discard corrupted frames\00", align 1
@.str.30 = private unnamed_addr constant [8 x i8] c"sortdts\00", align 1
@.str.31 = private unnamed_addr constant [43 x i8] c"try to interleave outputted packets by dts\00", align 1
@.str.32 = private unnamed_addr constant [9 x i8] c"keepside\00", align 1
@.str.33 = private unnamed_addr constant [25 x i8] c"deprecated, does nothing\00", align 1
@.str.34 = private unnamed_addr constant [9 x i8] c"fastseek\00", align 1
@.str.35 = private unnamed_addr constant [26 x i8] c"fast but inaccurate seeks\00", align 1
@.str.36 = private unnamed_addr constant [5 x i8] c"latm\00", align 1
@.str.37 = private unnamed_addr constant [9 x i8] c"nobuffer\00", align 1
@.str.38 = private unnamed_addr constant [52 x i8] c"reduce the latency introduced by optional buffering\00", align 1
@.str.39 = private unnamed_addr constant [9 x i8] c"bitexact\00", align 1
@.str.40 = private unnamed_addr constant [34 x i8] c"do not write random/volatile data\00", align 1
@.str.41 = private unnamed_addr constant [9 x i8] c"shortest\00", align 1
@.str.42 = private unnamed_addr constant [37 x i8] c"stop muxing with the shortest stream\00", align 1
@.str.43 = private unnamed_addr constant [8 x i8] c"autobsf\00", align 1
@.str.44 = private unnamed_addr constant [30 x i8] c"add needed bsfs automatically\00", align 1
@.str.45 = private unnamed_addr constant [9 x i8] c"seek2any\00", align 1
@.str.46 = private unnamed_addr constant [63 x i8] c"allow seeking to non-keyframes on demuxer level when supported\00", align 1
@.str.47 = private unnamed_addr constant [16 x i8] c"analyzeduration\00", align 1
@.str.48 = private unnamed_addr constant [62 x i8] c"specify how many microseconds are analyzed to probe the input\00", align 1
@.str.49 = private unnamed_addr constant [10 x i8] c"cryptokey\00", align 1
@.str.50 = private unnamed_addr constant [15 x i8] c"decryption key\00", align 1
@.str.51 = private unnamed_addr constant [9 x i8] c"indexmem\00", align 1
@.str.52 = private unnamed_addr constant [49 x i8] c"max memory used for timestamp index (per stream)\00", align 1
@.str.53 = private unnamed_addr constant [10 x i8] c"rtbufsize\00", align 1
@.str.54 = private unnamed_addr constant [47 x i8] c"max memory used for buffering real-time frames\00", align 1
@.str.55 = private unnamed_addr constant [7 x i8] c"fdebug\00", align 1
@.str.56 = private unnamed_addr constant [26 x i8] c"print specific debug info\00", align 1
@.str.57 = private unnamed_addr constant [3 x i8] c"ts\00", align 1
@.str.58 = private unnamed_addr constant [10 x i8] c"max_delay\00", align 1
@.str.59 = private unnamed_addr constant [49 x i8] c"maximum muxing or demuxing delay in microseconds\00", align 1
@.str.60 = private unnamed_addr constant [20 x i8] c"start_time_realtime\00", align 1
@.str.61 = private unnamed_addr constant [44 x i8] c"wall-clock time when stream begins (PTS==0)\00", align 1
@.str.62 = private unnamed_addr constant [13 x i8] c"fpsprobesize\00", align 1
@.str.63 = private unnamed_addr constant [35 x i8] c"number of frames used to probe fps\00", align 1
@.str.64 = private unnamed_addr constant [14 x i8] c"audio_preload\00", align 1
@.str.65 = private unnamed_addr constant [66 x i8] c"microseconds by which audio packets should be interleaved earlier\00", align 1
@.str.66 = private unnamed_addr constant [15 x i8] c"chunk_duration\00", align 1
@.str.67 = private unnamed_addr constant [28 x i8] c"microseconds for each chunk\00", align 1
@.str.68 = private unnamed_addr constant [11 x i8] c"chunk_size\00", align 1
@.str.69 = private unnamed_addr constant [29 x i8] c"size in bytes for each chunk\00", align 1
@.str.70 = private unnamed_addr constant [13 x i8] c"f_err_detect\00", align 1
@.str.71 = private unnamed_addr constant [72 x i8] c"set error detection flags (deprecated; use err_detect, save via avconv)\00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c"err_detect\00", align 1
@.str.73 = private unnamed_addr constant [26 x i8] c"set error detection flags\00", align 1
@.str.74 = private unnamed_addr constant [9 x i8] c"crccheck\00", align 1
@.str.75 = private unnamed_addr constant [21 x i8] c"verify embedded CRCs\00", align 1
@.str.76 = private unnamed_addr constant [10 x i8] c"bitstream\00", align 1
@.str.77 = private unnamed_addr constant [42 x i8] c"detect bitstream specification deviations\00", align 1
@.str.78 = private unnamed_addr constant [7 x i8] c"buffer\00", align 1
@.str.79 = private unnamed_addr constant [33 x i8] c"detect improper bitstream length\00", align 1
@.str.80 = private unnamed_addr constant [8 x i8] c"explode\00", align 1
@.str.81 = private unnamed_addr constant [40 x i8] c"abort decoding on minor error detection\00", align 1
@.str.82 = private unnamed_addr constant [11 x i8] c"ignore_err\00", align 1
@.str.83 = private unnamed_addr constant [14 x i8] c"ignore errors\00", align 1
@.str.84 = private unnamed_addr constant [8 x i8] c"careful\00", align 1
@.str.85 = private unnamed_addr constant [102 x i8] c"consider things that violate the spec, are fast to check and have not been seen in the wild as errors\00", align 1
@.str.86 = private unnamed_addr constant [10 x i8] c"compliant\00", align 1
@.str.87 = private unnamed_addr constant [45 x i8] c"consider all spec non compliancies as errors\00", align 1
@.str.88 = private unnamed_addr constant [11 x i8] c"aggressive\00", align 1
@.str.89 = private unnamed_addr constant [61 x i8] c"consider things that a sane encoder shouldn't do as an error\00", align 1
@.str.90 = private unnamed_addr constant [28 x i8] c"use_wallclock_as_timestamps\00", align 1
@.str.91 = private unnamed_addr constant [28 x i8] c"use wallclock as timestamps\00", align 1
@.str.92 = private unnamed_addr constant [19 x i8] c"skip_initial_bytes\00", align 1
@.str.93 = private unnamed_addr constant [61 x i8] c"set number of bytes to skip before reading header and frames\00", align 1
@.str.94 = private unnamed_addr constant [20 x i8] c"correct_ts_overflow\00", align 1
@.str.95 = private unnamed_addr constant [35 x i8] c"correct single timestamp overflows\00", align 1
@.str.96 = private unnamed_addr constant [53 x i8] c"enable flushing of the I/O context after each packet\00", align 1
@.str.97 = private unnamed_addr constant [24 x i8] c"metadata_header_padding\00", align 1
@.str.98 = private unnamed_addr constant [66 x i8] c"set number of bytes to be written as padding in a metadata header\00", align 1
@.str.99 = private unnamed_addr constant [17 x i8] c"output_ts_offset\00", align 1
@.str.100 = private unnamed_addr constant [28 x i8] c"set output timestamp offset\00", align 1
@.str.101 = private unnamed_addr constant [21 x i8] c"max_interleave_delta\00", align 1
@.str.102 = private unnamed_addr constant [44 x i8] c"maximum buffering duration for interleaving\00", align 1
@.str.103 = private unnamed_addr constant [9 x i8] c"f_strict\00", align 1
@.str.104 = private unnamed_addr constant [79 x i8] c"how strictly to follow the standards (deprecated; use strict, save via avconv)\00", align 1
@.str.105 = private unnamed_addr constant [7 x i8] c"strict\00", align 1
@.str.106 = private unnamed_addr constant [37 x i8] c"how strictly to follow the standards\00", align 1
@.str.107 = private unnamed_addr constant [5 x i8] c"very\00", align 1
@.str.108 = private unnamed_addr constant [82 x i8] c"strictly conform to a older more strict version of the spec or reference software\00", align 1
@.str.109 = private unnamed_addr constant [79 x i8] c"strictly conform to all the things in the spec no matter what the consequences\00", align 1
@.str.110 = private unnamed_addr constant [7 x i8] c"normal\00", align 1
@.str.111 = private unnamed_addr constant [11 x i8] c"unofficial\00", align 1
@.str.112 = private unnamed_addr constant [28 x i8] c"allow unofficial extensions\00", align 1
@.str.113 = private unnamed_addr constant [13 x i8] c"experimental\00", align 1
@.str.114 = private unnamed_addr constant [45 x i8] c"allow non-standardized experimental variants\00", align 1
@.str.115 = private unnamed_addr constant [13 x i8] c"max_ts_probe\00", align 1
@.str.116 = private unnamed_addr constant [72 x i8] c"maximum number of packets to read while waiting for the first timestamp\00", align 1
@.str.117 = private unnamed_addr constant [18 x i8] c"avoid_negative_ts\00", align 1
@.str.118 = private unnamed_addr constant [36 x i8] c"shift timestamps so they start at 0\00", align 1
@.str.119 = private unnamed_addr constant [5 x i8] c"auto\00", align 1
@.str.120 = private unnamed_addr constant [39 x i8] c"enabled when required by target format\00", align 1
@.str.121 = private unnamed_addr constant [9 x i8] c"disabled\00", align 1
@.str.122 = private unnamed_addr constant [25 x i8] c"do not change timestamps\00", align 1
@.str.123 = private unnamed_addr constant [18 x i8] c"make_non_negative\00", align 1
@.str.124 = private unnamed_addr constant [42 x i8] c"shift timestamps so they are non negative\00", align 1
@.str.125 = private unnamed_addr constant [10 x i8] c"make_zero\00", align 1
@.str.126 = private unnamed_addr constant [15 x i8] c"dump_separator\00", align 1
@.str.127 = private unnamed_addr constant [37 x i8] c"set information dump field separator\00", align 1
@.str.128 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.129 = private unnamed_addr constant [16 x i8] c"codec_whitelist\00", align 1
@.str.130 = private unnamed_addr constant [45 x i8] c"List of decoders that are allowed to be used\00", align 1
@.str.131 = private unnamed_addr constant [17 x i8] c"format_whitelist\00", align 1
@.str.132 = private unnamed_addr constant [45 x i8] c"List of demuxers that are allowed to be used\00", align 1
@.str.133 = private unnamed_addr constant [19 x i8] c"protocol_whitelist\00", align 1
@.str.134 = private unnamed_addr constant [46 x i8] c"List of protocols that are allowed to be used\00", align 1
@.str.135 = private unnamed_addr constant [19 x i8] c"protocol_blacklist\00", align 1
@.str.136 = private unnamed_addr constant [50 x i8] c"List of protocols that are not allowed to be used\00", align 1
@.str.137 = private unnamed_addr constant [12 x i8] c"max_streams\00", align 1
@.str.138 = private unnamed_addr constant [26 x i8] c"maximum number of streams\00", align 1
@.str.139 = private unnamed_addr constant [32 x i8] c"skip_estimate_duration_from_pts\00", align 1
@.str.140 = private unnamed_addr constant [55 x i8] c"skip duration calculation in estimate_timings_from_pts\00", align 1
@.str.141 = private unnamed_addr constant [18 x i8] c"max_probe_packets\00", align 1
@.str.142 = private unnamed_addr constant [43 x i8] c"Maximum number of packets to probe a codec\00", align 1
@avformat_options = internal constant <{ %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* }, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption, %struct.AVOption, %struct.AVOption }> <{ %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), i8* null, i32 1292, i32 0, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 32768 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10, i32 0, i32 0), i32 1128, i32 2, %union.anon { i64 5000000 }, double 3.200000e+01, double 0x43E0000000000000, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i32 0, i32 0), i32 1328, i32 1, %union.anon { i64 1048576 }, double 0.000000e+00, double 0x41DFFFFFFF800000, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.14, i32 0, i32 0), i32 1112, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 1, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0), i8* null, i32 1120, i32 0, %union.anon { i64 2097152 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.17, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 512 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.19, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.21, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.23, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 16 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.25, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 32 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.29, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 256 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.31, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 65536 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.33, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 262144 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.35, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 524288 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.33, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 32768 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.38, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 64 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.40, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 1024 }, double 0.000000e+00, double 0.000000e+00, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.42, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 1048576 }, double 0.000000e+00, double 0.000000e+00, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.44, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 2097152 }, double 0.000000e+00, double 0.000000e+00, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.46, i32 0, i32 0), i32 1316, i32 18, %union.anon zeroinitializer, double 0.000000e+00, double 1.000000e+00, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.48, i32 0, i32 0), i32 1136, i32 2, %union.anon zeroinitializer, double 0.000000e+00, double 0x43E0000000000000, i32 2, i8* null }, { i8*, i8*, i32, i32, { double }, double, double, i32, i8* } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.50, i32 0, i32 0), i32 1144, i32 7, { double } zeroinitializer, double 0.000000e+00, double 0.000000e+00, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.52, i32 0, i32 0), i32 1180, i32 1, %union.anon { i64 1048576 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.54, i32 0, i32 0), i32 1184, i32 1, %union.anon { i64 3041280 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.56, i32 0, i32 0), i32 1240, i32 0, %union.anon zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.55, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i32 0, i32 0), i8* null, i32 0, i32 10, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.55, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.59, i32 0, i32 0), i32 1116, i32 1, %union.anon { i64 -1 }, double -1.000000e+00, double 0x41DFFFFFFFC00000, i32 3, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.61, i32 0, i32 0), i32 1208, i32 2, %union.anon { i64 -9223372036854775808 }, double 0xC3E0000000000000, double 0x43E0000000000000, i32 1, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.63, i32 0, i32 0), i32 1216, i32 1, %union.anon { i64 -1 }, double -1.000000e+00, double 0x41DFFFFFFF800000, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.65, i32 0, i32 0), i32 1276, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFF800000, i32 1, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.67, i32 0, i32 0), i32 1280, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFF800000, i32 1, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.69, i32 0, i32 0), i32 1284, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 0x41DFFFFFFF800000, i32 1, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.71, i32 0, i32 0), i32 1220, i32 0, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.73, i32 0, i32 0), i32 1220, i32 0, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.74, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.75, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.76, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.77, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.79, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 4 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.80, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.81, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 8 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.82, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.83, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 32768 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.84, i32 0, i32 0), i8* getelementptr inbounds ([102 x i8], [102 x i8]* @.str.85, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 65536 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.86, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.87, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 196608 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.89, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 458752 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.90, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.91, i32 0, i32 0), i32 1288, i32 18, %union.anon zeroinitializer, double 0.000000e+00, double 1.000000e+00, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.92, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.93, i32 0, i32 0), i32 1304, i32 2, %union.anon zeroinitializer, double 0.000000e+00, double 0x43E0000000000000, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.94, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.95, i32 0, i32 0), i32 1312, i32 18, %union.anon { i64 1 }, double 0.000000e+00, double 1.000000e+00, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.96, i32 0, i32 0), i32 1320, i32 1, %union.anon { i64 -1 }, double -1.000000e+00, double 1.000000e+00, i32 1, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.98, i32 0, i32 0), i32 1400, i32 1, %union.anon { i64 -1 }, double -1.000000e+00, double 0x41DFFFFFFFC00000, i32 1, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.99, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.100, i32 0, i32 0), i32 1424, i32 15, %union.anon zeroinitializer, double 0xC3E0000000000000, double 0x43E0000000000000, i32 1, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.101, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.102, i32 0, i32 0), i32 1248, i32 2, %union.anon { i64 10000000 }, double 0.000000e+00, double 0x43E0000000000000, i32 1, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.103, i32 0, i32 0), i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.104, i32 0, i32 0), i32 1256, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.105, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.105, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.106, i32 0, i32 0), i32 1256, i32 1, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.105, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.107, i32 0, i32 0), i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.108, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.105, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.105, i32 0, i32 0), i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.109, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.105, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.110, i32 0, i32 0), i8* null, i32 0, i32 10, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.105, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.111, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.112, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 -1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.105, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.114, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 -2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.105, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.115, i32 0, i32 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.116, i32 0, i32 0), i32 1264, i32 1, %union.anon { i64 50 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.117, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.118, i32 0, i32 0), i32 1268, i32 1, %union.anon { i64 -1 }, double -1.000000e+00, double 2.000000e+00, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.117, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.120, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 -1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.117, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.121, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.122, i32 0, i32 0), i32 0, i32 10, %union.anon zeroinitializer, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.117, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.123, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.124, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 1 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.117, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.125, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.118, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 2 }, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.117, i32 0, i32 0) }, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.126, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.127, i32 0, i32 0), i32 1432, i32 5, { i8* } { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.128, i32 0, i32 0) }, double 0.000000e+00, double 0.000000e+00, i32 3, i8* null }, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* } { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.129, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.130, i32 0, i32 0), i32 1336, i32 5, { i8* } zeroinitializer, double 0.000000e+00, double 0.000000e+00, i32 2, i8* null }, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.131, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.132, i32 0, i32 0), i32 1344, i32 5, { i8* } zeroinitializer, double 0.000000e+00, double 0.000000e+00, i32 2, i8* null }, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* } { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.133, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.134, i32 0, i32 0), i32 1456, i32 5, { i8* } zeroinitializer, double 0.000000e+00, double 0.000000e+00, i32 2, i8* null }, { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* } { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.135, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.136, i32 0, i32 0), i32 1480, i32 5, { i8* } zeroinitializer, double 0.000000e+00, double 0.000000e+00, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.137, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.138, i32 0, i32 0), i32 1488, i32 1, %union.anon { i64 1000 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.139, i32 0, i32 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.140, i32 0, i32 0), i32 1492, i32 18, %union.anon zeroinitializer, double 0.000000e+00, double 1.000000e+00, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.141, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.142, i32 0, i32 0), i32 1496, i32 1, %union.anon { i64 2500 }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 2, i8* null }, %struct.AVOption zeroinitializer }>, align 16
@ff_avio_class = external constant %struct.AVClass, align 8
@.str.144 = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.145 = private unnamed_addr constant [24 x i8] c"!((uintptr_t)val >> 16)\00", align 1
@.str.146 = private unnamed_addr constant [47 x i8] c"../../third_party/ffmpeg/libavformat/options.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.AVFormatContext* @avformat_alloc_context() local_unnamed_addr #0 {
  %1 = tail call noalias i8* @av_malloc(i64 1504) #7
  %2 = bitcast i8* %1 to %struct.AVFormatContext*
  %3 = icmp eq i8* %1, null
  br i1 %3, label %23, label %4

4:                                                ; preds = %0
  %5 = tail call noalias i8* @av_mallocz(i64 136) #7
  %6 = icmp eq i8* %5, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %4
  tail call void @av_free(i8* nonnull %1) #7
  br label %23

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %1, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 1496, i1 false) #7
  %10 = bitcast i8* %1 to %struct.AVClass**
  store %struct.AVClass* @av_format_context_class, %struct.AVClass** %10, align 8
  %11 = getelementptr inbounds i8, i8* %1, i64 1464
  %12 = bitcast i8* %11 to i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVDictionary**)**
  store i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVDictionary**)* @io_open_default, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVDictionary**)** %12, align 8
  %13 = getelementptr inbounds i8, i8* %1, i64 1472
  %14 = bitcast i8* %13 to void (%struct.AVFormatContext*, %struct.AVIOContext*)**
  store void (%struct.AVFormatContext*, %struct.AVIOContext*)* @io_close_default, void (%struct.AVFormatContext*, %struct.AVIOContext*)** %14, align 8
  tail call void @av_opt_set_defaults(i8* nonnull %1) #7
  %15 = getelementptr inbounds i8, i8* %1, i64 1352
  %16 = bitcast i8* %15 to i8**
  store i8* %5, i8** %16, align 8
  %17 = getelementptr inbounds i8, i8* %5, i64 72
  %18 = bitcast i8* %17 to i64*
  store i64 -9223372036854775808, i64* %18, align 8
  %19 = getelementptr inbounds i8, i8* %5, i64 64
  %20 = bitcast i8* %19 to i32*
  store i32 2500000, i32* %20, align 8
  %21 = getelementptr inbounds i8, i8* %5, i64 104
  %22 = bitcast i8* %21 to i64*
  store i64 -9223372036854775808, i64* %22, align 8
  br label %23

23:                                               ; preds = %0, %8, %7
  %24 = phi %struct.AVFormatContext* [ %2, %8 ], [ null, %7 ], [ null, %0 ]
  ret %struct.AVFormatContext* %24
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare noalias i8* @av_malloc(i64) local_unnamed_addr #2

declare noalias i8* @av_mallocz(i64) local_unnamed_addr #2

declare void @av_free(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @av_fmt_ctx_get_duration_estimation_method(%struct.AVFormatContext* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 46
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.AVClass* @avformat_get_class() local_unnamed_addr #4 {
  ret %struct.AVClass* @av_format_context_class
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @io_open_default(%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVDictionary**) #0 {
  %6 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 9
  %7 = load i8*, i8** %6, align 8
  %8 = tail call i32 @strcmp(i8* %2, i8* %7) #8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %29, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 1
  %12 = load %struct.AVInputFormat*, %struct.AVInputFormat** %11, align 8
  %13 = icmp eq %struct.AVInputFormat* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %12, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = tail call i32 @strcmp(i8* %16, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)) #8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %29, label %19

19:                                               ; preds = %14, %10
  %20 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 2
  %21 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %20, align 8
  %22 = icmp eq %struct.AVOutputFormat* %21, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %21, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = tail call i32 @strcmp(i8* %25, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)) #8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %29, label %28

28:                                               ; preds = %23, %19
  br label %29

29:                                               ; preds = %5, %23, %14, %28
  %30 = phi i32 [ 32, %28 ], [ 48, %14 ], [ 48, %23 ], [ 48, %5 ]
  %31 = bitcast %struct.AVFormatContext* %0 to i8*
  %32 = and i32 %3, 2
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0)
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %31, i32 %30, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i8* %2, i8* %34) #7
  %35 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 67
  %36 = load i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVIOInterruptCB*, %struct.AVDictionary**)*, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVIOInterruptCB*, %struct.AVDictionary**)** %35, align 8
  %37 = icmp eq i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVIOInterruptCB*, %struct.AVDictionary**)* %36, null
  %38 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 33
  br i1 %37, label %41, label %39

39:                                               ; preds = %29
  %40 = tail call i32 %36(%struct.AVFormatContext* %0, %struct.AVIOContext** %1, i8* %2, i32 %3, %struct.AVIOInterruptCB* %38, %struct.AVDictionary** %4) #7
  br label %47

41:                                               ; preds = %29
  %42 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 68
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 71
  %45 = load i8*, i8** %44, align 8
  %46 = tail call i32 @ffio_open_whitelist(%struct.AVIOContext** %1, i8* %2, i32 %3, %struct.AVIOInterruptCB* %38, %struct.AVDictionary** %4, i8* %43, i8* %45) #7
  br label %47

47:                                               ; preds = %41, %39
  %48 = phi i32 [ %40, %39 ], [ %46, %41 ]
  ret i32 %48
}

; Function Attrs: nounwind ssp uwtable
define internal void @io_close_default(%struct.AVFormatContext* nocapture readnone, %struct.AVIOContext*) #0 {
  %3 = tail call i32 @avio_close(%struct.AVIOContext* %1) #7
  ret void
}

declare void @av_opt_set_defaults(i8*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #5

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #2

declare i32 @ffio_open_whitelist(%struct.AVIOContext**, i8*, i32, %struct.AVIOInterruptCB*, %struct.AVDictionary**, i8*, i8*) local_unnamed_addr #2

declare i32 @avio_close(%struct.AVIOContext*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i8* @format_to_name(i8* nocapture readonly) #3 {
  %2 = getelementptr inbounds i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to %struct.AVInputFormat**
  %4 = load %struct.AVInputFormat*, %struct.AVInputFormat** %3, align 8
  %5 = icmp eq %struct.AVInputFormat* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %4, i64 0, i32 0
  br label %15

8:                                                ; preds = %1
  %9 = getelementptr inbounds i8, i8* %0, i64 16
  %10 = bitcast i8* %9 to %struct.AVOutputFormat**
  %11 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %10, align 8
  %12 = icmp eq %struct.AVOutputFormat* %11, null
  br i1 %12, label %18, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %11, i64 0, i32 0
  br label %15

15:                                               ; preds = %6, %13
  %16 = phi i8** [ %14, %13 ], [ %7, %6 ]
  %17 = load i8*, i8** %16, align 8
  br label %18

18:                                               ; preds = %15, %8
  %19 = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), %8 ], [ %17, %15 ]
  ret i8* %19
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i8* @format_child_next(i8* nocapture readonly, i8* readnone) #3 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %4, label %27

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %0, i64 24
  %6 = bitcast i8* %5 to i8**
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %27, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds i8, i8* %0, i64 8
  %11 = bitcast i8* %10 to %struct.AVInputFormat**
  %12 = load %struct.AVInputFormat*, %struct.AVInputFormat** %11, align 8
  %13 = icmp eq %struct.AVInputFormat* %12, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %12, i64 0, i32 5
  %16 = load %struct.AVClass*, %struct.AVClass** %15, align 8
  %17 = icmp eq %struct.AVClass* %16, null
  br i1 %17, label %18, label %40

18:                                               ; preds = %14, %9
  %19 = getelementptr inbounds i8, i8* %0, i64 16
  %20 = bitcast i8* %19 to %struct.AVOutputFormat**
  %21 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %20, align 8
  %22 = icmp eq %struct.AVOutputFormat* %21, null
  br i1 %22, label %27, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %21, i64 0, i32 9
  %25 = load %struct.AVClass*, %struct.AVClass** %24, align 8
  %26 = icmp eq %struct.AVClass* %25, null
  br i1 %26, label %27, label %40

27:                                               ; preds = %23, %18, %4, %2
  %28 = getelementptr inbounds i8, i8* %0, i64 32
  %29 = bitcast i8* %28 to %struct.AVIOContext**
  %30 = load %struct.AVIOContext*, %struct.AVIOContext** %29, align 8
  %31 = icmp eq %struct.AVIOContext* %30, null
  br i1 %31, label %39, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %struct.AVIOContext, %struct.AVIOContext* %30, i64 0, i32 0
  %34 = load %struct.AVClass*, %struct.AVClass** %33, align 8
  %35 = icmp eq %struct.AVClass* %34, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %32
  %37 = bitcast %struct.AVIOContext* %30 to i8*
  %38 = icmp eq i8* %37, %1
  br i1 %38, label %39, label %40

39:                                               ; preds = %36, %32, %27
  br label %40

40:                                               ; preds = %23, %14, %36, %39
  %41 = phi i8* [ null, %39 ], [ %37, %36 ], [ %7, %14 ], [ %7, %23 ]
  ret i8* %41
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.AVClass* @format_child_class_next(%struct.AVClass* readnone) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #7
  store i8* null, i8** %2, align 8
  %5 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  store i8* null, i8** %3, align 8
  %6 = icmp eq %struct.AVClass* %0, null
  br i1 %6, label %38, label %7

7:                                                ; preds = %1, %10
  %8 = call %struct.AVInputFormat* @av_demuxer_iterate(i8** nonnull %2) #7
  %9 = icmp eq %struct.AVInputFormat* %8, null
  br i1 %9, label %14, label %10

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %8, i64 0, i32 5
  %12 = load %struct.AVClass*, %struct.AVClass** %11, align 8
  %13 = icmp eq %struct.AVClass* %12, %0
  br i1 %13, label %22, label %7

14:                                               ; preds = %7
  store i8* null, i8** %2, align 8
  br label %15

15:                                               ; preds = %18, %14
  %16 = call %struct.AVOutputFormat* @av_muxer_iterate(i8** nonnull %3) #7
  %17 = icmp eq %struct.AVOutputFormat* %16, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %15
  %19 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %16, i64 0, i32 9
  %20 = load %struct.AVClass*, %struct.AVClass** %19, align 8
  %21 = icmp eq %struct.AVClass* %20, %0
  br i1 %21, label %26, label %15

22:                                               ; preds = %10, %15
  store i8* null, i8** %3, align 8
  br label %23

23:                                               ; preds = %27, %22
  %24 = call %struct.AVInputFormat* @av_demuxer_iterate(i8** nonnull %2) #7
  %25 = icmp eq %struct.AVInputFormat* %24, null
  br i1 %25, label %26, label %27

26:                                               ; preds = %18, %23
  br label %31

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %24, i64 0, i32 5
  %29 = load %struct.AVClass*, %struct.AVClass** %28, align 8
  %30 = icmp eq %struct.AVClass* %29, null
  br i1 %30, label %23, label %38

31:                                               ; preds = %26, %34
  %32 = call %struct.AVOutputFormat* @av_muxer_iterate(i8** nonnull %3) #7
  %33 = icmp eq %struct.AVOutputFormat* %32, null
  br i1 %33, label %38, label %34

34:                                               ; preds = %31
  %35 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %32, i64 0, i32 9
  %36 = load %struct.AVClass*, %struct.AVClass** %35, align 8
  %37 = icmp eq %struct.AVClass* %36, null
  br i1 %37, label %31, label %38

38:                                               ; preds = %27, %31, %34, %1
  %39 = phi %struct.AVClass* [ @ff_avio_class, %1 ], [ null, %31 ], [ %36, %34 ], [ %29, %27 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #7
  ret %struct.AVClass* %39
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @get_category(i8* nocapture readonly) #3 {
  %2 = getelementptr inbounds i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to %struct.AVInputFormat**
  %4 = load %struct.AVInputFormat*, %struct.AVInputFormat** %3, align 8
  %5 = icmp eq %struct.AVInputFormat* %4, null
  %6 = select i1 %5, i32 3, i32 4
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.AVClass* @format_child_class_iterate(i8** nocapture) #0 {
  %2 = alloca i8*, align 8
  %3 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #7
  %4 = bitcast i8** %0 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 65535
  %7 = inttoptr i64 %6 to i8*
  store i8* %7, i8** %2, align 8
  %8 = lshr i64 %5, 16
  %9 = trunc i64 %8 to i32
  switch i32 %9, label %27 [
    i32 0, label %29
    i32 1, label %10
    i32 2, label %18
  ]

10:                                               ; preds = %1, %13
  %11 = call %struct.AVOutputFormat* @av_muxer_iterate(i8** nonnull %2) #7
  %12 = icmp eq %struct.AVOutputFormat* %11, null
  br i1 %12, label %17, label %13

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %11, i64 0, i32 9
  %15 = load %struct.AVClass*, %struct.AVClass** %14, align 8
  %16 = icmp eq %struct.AVClass* %15, null
  br i1 %16, label %10, label %29

17:                                               ; preds = %10
  store i8* null, i8** %2, align 8
  br label %18

18:                                               ; preds = %1, %17
  br label %19

19:                                               ; preds = %18, %22
  %20 = call %struct.AVInputFormat* @av_demuxer_iterate(i8** nonnull %2) #7
  %21 = icmp eq %struct.AVInputFormat* %20, null
  br i1 %21, label %26, label %22

22:                                               ; preds = %19
  %23 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %20, i64 0, i32 5
  %24 = load %struct.AVClass*, %struct.AVClass** %23, align 8
  %25 = icmp eq %struct.AVClass* %24, null
  br i1 %25, label %19, label %29

26:                                               ; preds = %19
  store i8* null, i8** %2, align 8
  br label %29

27:                                               ; preds = %1
  %28 = and i64 %5, 4294901760
  br label %29

29:                                               ; preds = %13, %22, %1, %27, %26
  %30 = phi i64 [ 65536, %1 ], [ 196608, %26 ], [ %28, %27 ], [ 131072, %22 ], [ 65536, %13 ]
  %31 = phi %struct.AVClass* [ @ff_avio_class, %1 ], [ null, %26 ], [ null, %27 ], [ %24, %22 ], [ %15, %13 ]
  %32 = bitcast i8** %2 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = icmp ugt i64 %33, 65535
  br i1 %34, label %35, label %36

35:                                               ; preds = %29
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.144, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.145, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.146, i64 0, i64 0), i32 143) #7
  call void @abort() #9
  unreachable

36:                                               ; preds = %29
  %37 = or i64 %33, %30
  %38 = inttoptr i64 %37 to i8*
  store i8* %38, i8** %0, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #7
  ret %struct.AVClass* %31
}

declare %struct.AVInputFormat* @av_demuxer_iterate(i8**) local_unnamed_addr #2

declare %struct.AVOutputFormat* @av_muxer_iterate(i8**) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { nounwind readonly }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
