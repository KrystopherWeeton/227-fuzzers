; ModuleID = '../../third_party/pdfium/third_party/lcms/src/cmsmtrx.c'
source_filename = "../../third_party/pdfium/third_party/lcms/src/cmsmtrx.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.cmsVEC3 = type { [3 x double] }
%struct.cmsMAT3 = type { [3 x %struct.cmsVEC3] }

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_cmsVEC3init(%struct.cmsVEC3* nocapture, double, double, double) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 0
  store double %1, double* %5, align 8
  %6 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 1
  store double %2, double* %6, align 8
  %7 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 2
  store double %3, double* %7, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_cmsVEC3minus(%struct.cmsVEC3* nocapture, %struct.cmsVEC3* nocapture readonly, %struct.cmsVEC3* nocapture readonly) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %1, i64 0, i32 0, i64 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %2, i64 0, i32 0, i64 0
  %7 = load double, double* %6, align 8
  %8 = fsub double %5, %7
  %9 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 0
  store double %8, double* %9, align 8
  %10 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %1, i64 0, i32 0, i64 1
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %2, i64 0, i32 0, i64 1
  %13 = load double, double* %12, align 8
  %14 = fsub double %11, %13
  %15 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 1
  store double %14, double* %15, align 8
  %16 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %1, i64 0, i32 0, i64 2
  %17 = load double, double* %16, align 8
  %18 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %2, i64 0, i32 0, i64 2
  %19 = load double, double* %18, align 8
  %20 = fsub double %17, %19
  %21 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 2
  store double %20, double* %21, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_cmsVEC3cross(%struct.cmsVEC3* nocapture, %struct.cmsVEC3* nocapture readonly, %struct.cmsVEC3* nocapture readonly) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %1, i64 0, i32 0, i64 1
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %2, i64 0, i32 0, i64 2
  %7 = load double, double* %6, align 8
  %8 = fmul double %5, %7
  %9 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %2, i64 0, i32 0, i64 1
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %1, i64 0, i32 0, i64 2
  %12 = load double, double* %11, align 8
  %13 = fmul double %10, %12
  %14 = fsub double %8, %13
  %15 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 0
  store double %14, double* %15, align 8
  %16 = load double, double* %11, align 8
  %17 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %2, i64 0, i32 0, i64 0
  %18 = load double, double* %17, align 8
  %19 = fmul double %16, %18
  %20 = load double, double* %6, align 8
  %21 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %1, i64 0, i32 0, i64 0
  %22 = load double, double* %21, align 8
  %23 = fmul double %20, %22
  %24 = fsub double %19, %23
  %25 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 1
  store double %24, double* %25, align 8
  %26 = load double, double* %21, align 8
  %27 = load double, double* %9, align 8
  %28 = fmul double %26, %27
  %29 = load double, double* %17, align 8
  %30 = load double, double* %4, align 8
  %31 = fmul double %29, %30
  %32 = fsub double %28, %31
  %33 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 2
  store double %32, double* %33, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_cmsVEC3dot(%struct.cmsVEC3* nocapture readonly, %struct.cmsVEC3* nocapture readonly) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %1, i64 0, i32 0, i64 0
  %6 = load double, double* %5, align 8
  %7 = fmul double %4, %6
  %8 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 1
  %9 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %1, i64 0, i32 0, i64 1
  %10 = bitcast double* %8 to <2 x double>*
  %11 = load <2 x double>, <2 x double>* %10, align 8
  %12 = bitcast double* %9 to <2 x double>*
  %13 = load <2 x double>, <2 x double>* %12, align 8
  %14 = fmul <2 x double> %11, %13
  %15 = extractelement <2 x double> %14, i32 0
  %16 = fadd double %7, %15
  %17 = extractelement <2 x double> %14, i32 1
  %18 = fadd double %16, %17
  ret double %18
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @_cmsVEC3length(%struct.cmsVEC3* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 0
  %3 = load double, double* %2, align 8
  %4 = fmul double %3, %3
  %5 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 1
  %6 = bitcast double* %5 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  %8 = fmul <2 x double> %7, %7
  %9 = extractelement <2 x double> %8, i32 0
  %10 = fadd double %4, %9
  %11 = extractelement <2 x double> %8, i32 1
  %12 = fadd double %10, %11
  %13 = tail call double @sqrt(double %12) #9
  ret double %13
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #4

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @_cmsVEC3distance(%struct.cmsVEC3* nocapture readonly, %struct.cmsVEC3* nocapture readonly) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %1, i64 0, i32 0, i64 0
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 1
  %8 = load double, double* %7, align 8
  %9 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %1, i64 0, i32 0, i64 1
  %10 = load double, double* %9, align 8
  %11 = fsub double %8, %10
  %12 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 2
  %13 = load double, double* %12, align 8
  %14 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %1, i64 0, i32 0, i64 2
  %15 = load double, double* %14, align 8
  %16 = insertelement <2 x double> undef, double %4, i32 0
  %17 = insertelement <2 x double> %16, double %13, i32 1
  %18 = insertelement <2 x double> undef, double %6, i32 0
  %19 = insertelement <2 x double> %18, double %15, i32 1
  %20 = fsub <2 x double> %17, %19
  %21 = fmul double %11, %11
  %22 = fmul <2 x double> %20, %20
  %23 = extractelement <2 x double> %22, i32 0
  %24 = fadd double %23, %21
  %25 = extractelement <2 x double> %22, i32 1
  %26 = fadd double %24, %25
  %27 = tail call double @sqrt(double %26) #9
  ret double %27
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_cmsMAT3identity(%struct.cmsMAT3* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 0, i32 0, i64 0
  store double 1.000000e+00, double* %2, align 8
  %3 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 0, i32 0, i64 1
  %4 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 1, i32 0, i64 1
  %5 = bitcast double* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false)
  store double 1.000000e+00, double* %4, align 8
  %6 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 1, i32 0, i64 2
  %7 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 2, i32 0, i64 2
  %8 = bitcast double* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false)
  store double 1.000000e+00, double* %7, align 8
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_cmsMAT3isIdentity(%struct.cmsMAT3* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 0, i32 0, i64 0
  %3 = load double, double* %2, align 8
  %4 = fsub double 1.000000e+00, %3
  %5 = tail call double @llvm.fabs.f64(double %4) #9
  %6 = fcmp uge double %5, 0x3EF0001000100010
  br i1 %6, label %13, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 0, i32 0, i64 1
  %9 = load double, double* %8, align 8
  %10 = fsub double 0.000000e+00, %9
  %11 = tail call double @llvm.fabs.f64(double %10) #9
  %12 = fcmp uge double %11, 0x3EF0001000100010
  br i1 %12, label %13, label %15

13:                                               ; preds = %1, %7, %15, %21, %27, %33, %39, %45, %51, %57
  %14 = phi i32 [ 1, %57 ], [ 0, %51 ], [ 0, %45 ], [ 0, %39 ], [ 0, %33 ], [ 0, %27 ], [ 0, %21 ], [ 0, %15 ], [ 0, %7 ], [ 0, %1 ]
  ret i32 %14

15:                                               ; preds = %7
  %16 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 0, i32 0, i64 2
  %17 = load double, double* %16, align 8
  %18 = fsub double 0.000000e+00, %17
  %19 = tail call double @llvm.fabs.f64(double %18) #9
  %20 = fcmp uge double %19, 0x3EF0001000100010
  br i1 %20, label %13, label %21

21:                                               ; preds = %15
  %22 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 1, i32 0, i64 0
  %23 = load double, double* %22, align 8
  %24 = fsub double 0.000000e+00, %23
  %25 = tail call double @llvm.fabs.f64(double %24) #9
  %26 = fcmp uge double %25, 0x3EF0001000100010
  br i1 %26, label %13, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 1, i32 0, i64 1
  %29 = load double, double* %28, align 8
  %30 = fsub double 1.000000e+00, %29
  %31 = tail call double @llvm.fabs.f64(double %30) #9
  %32 = fcmp uge double %31, 0x3EF0001000100010
  br i1 %32, label %13, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 1, i32 0, i64 2
  %35 = load double, double* %34, align 8
  %36 = fsub double 0.000000e+00, %35
  %37 = tail call double @llvm.fabs.f64(double %36) #9
  %38 = fcmp uge double %37, 0x3EF0001000100010
  br i1 %38, label %13, label %39

39:                                               ; preds = %33
  %40 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 2, i32 0, i64 0
  %41 = load double, double* %40, align 8
  %42 = fsub double 0.000000e+00, %41
  %43 = tail call double @llvm.fabs.f64(double %42) #9
  %44 = fcmp uge double %43, 0x3EF0001000100010
  br i1 %44, label %13, label %45

45:                                               ; preds = %39
  %46 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 2, i32 0, i64 1
  %47 = load double, double* %46, align 8
  %48 = fsub double 0.000000e+00, %47
  %49 = tail call double @llvm.fabs.f64(double %48) #9
  %50 = fcmp uge double %49, 0x3EF0001000100010
  br i1 %50, label %13, label %51

51:                                               ; preds = %45
  %52 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 2, i32 0, i64 2
  %53 = load double, double* %52, align 8
  %54 = fsub double 1.000000e+00, %53
  %55 = tail call double @llvm.fabs.f64(double %54) #9
  %56 = fcmp uge double %55, 0x3EF0001000100010
  br i1 %56, label %13, label %57

57:                                               ; preds = %51
  br label %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_cmsMAT3per(%struct.cmsMAT3* nocapture, %struct.cmsMAT3* nocapture readonly, %struct.cmsMAT3* nocapture readonly) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 0, i32 0, i64 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 0, i32 0, i64 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %2, i64 0, i32 0, i64 1, i32 0, i64 0
  %9 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 0, i32 0, i64 2
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %2, i64 0, i32 0, i64 2, i32 0, i64 0
  %12 = bitcast %struct.cmsMAT3* %2 to <2 x double>*
  %13 = load <2 x double>, <2 x double>* %12, align 8
  %14 = insertelement <2 x double> undef, double %5, i32 0
  %15 = shufflevector <2 x double> %14, <2 x double> undef, <2 x i32> zeroinitializer
  %16 = fmul <2 x double> %15, %13
  %17 = bitcast double* %8 to <2 x double>*
  %18 = load <2 x double>, <2 x double>* %17, align 8
  %19 = insertelement <2 x double> undef, double %7, i32 0
  %20 = shufflevector <2 x double> %19, <2 x double> undef, <2 x i32> zeroinitializer
  %21 = fmul <2 x double> %20, %18
  %22 = fadd <2 x double> %16, %21
  %23 = bitcast double* %11 to <2 x double>*
  %24 = load <2 x double>, <2 x double>* %23, align 8
  %25 = insertelement <2 x double> undef, double %10, i32 0
  %26 = shufflevector <2 x double> %25, <2 x double> undef, <2 x i32> zeroinitializer
  %27 = fmul <2 x double> %26, %24
  %28 = fadd <2 x double> %22, %27
  %29 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %2, i64 0, i32 0, i64 0, i32 0, i64 2
  %30 = load double, double* %29, align 8
  %31 = fmul double %5, %30
  %32 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %2, i64 0, i32 0, i64 1, i32 0, i64 2
  %33 = load double, double* %32, align 8
  %34 = fmul double %7, %33
  %35 = fadd double %31, %34
  %36 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %2, i64 0, i32 0, i64 2, i32 0, i64 2
  %37 = load double, double* %36, align 8
  %38 = fmul double %10, %37
  %39 = fadd double %35, %38
  %40 = bitcast %struct.cmsMAT3* %0 to <2 x double>*
  store <2 x double> %28, <2 x double>* %40, align 8
  %41 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 0, i32 0, i64 2
  store double %39, double* %41, align 8
  %42 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 1, i32 0, i64 0
  %43 = load double, double* %42, align 8
  %44 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 1, i32 0, i64 1
  %45 = load double, double* %44, align 8
  %46 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 1, i32 0, i64 2
  %47 = load double, double* %46, align 8
  %48 = bitcast %struct.cmsMAT3* %2 to <2 x double>*
  %49 = load <2 x double>, <2 x double>* %48, align 8
  %50 = insertelement <2 x double> undef, double %43, i32 0
  %51 = shufflevector <2 x double> %50, <2 x double> undef, <2 x i32> zeroinitializer
  %52 = fmul <2 x double> %51, %49
  %53 = bitcast double* %8 to <2 x double>*
  %54 = load <2 x double>, <2 x double>* %53, align 8
  %55 = insertelement <2 x double> undef, double %45, i32 0
  %56 = shufflevector <2 x double> %55, <2 x double> undef, <2 x i32> zeroinitializer
  %57 = fmul <2 x double> %56, %54
  %58 = fadd <2 x double> %52, %57
  %59 = bitcast double* %11 to <2 x double>*
  %60 = load <2 x double>, <2 x double>* %59, align 8
  %61 = insertelement <2 x double> undef, double %47, i32 0
  %62 = shufflevector <2 x double> %61, <2 x double> undef, <2 x i32> zeroinitializer
  %63 = fmul <2 x double> %62, %60
  %64 = fadd <2 x double> %58, %63
  %65 = load double, double* %29, align 8
  %66 = fmul double %43, %65
  %67 = load double, double* %32, align 8
  %68 = fmul double %45, %67
  %69 = fadd double %66, %68
  %70 = load double, double* %36, align 8
  %71 = fmul double %47, %70
  %72 = fadd double %69, %71
  %73 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 1, i32 0, i64 0
  %74 = bitcast double* %73 to <2 x double>*
  store <2 x double> %64, <2 x double>* %74, align 8
  %75 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 1, i32 0, i64 2
  store double %72, double* %75, align 8
  %76 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 2, i32 0, i64 0
  %77 = load double, double* %76, align 8
  %78 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 2, i32 0, i64 1
  %79 = load double, double* %78, align 8
  %80 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 2, i32 0, i64 2
  %81 = load double, double* %80, align 8
  %82 = bitcast %struct.cmsMAT3* %2 to <2 x double>*
  %83 = load <2 x double>, <2 x double>* %82, align 8
  %84 = insertelement <2 x double> undef, double %77, i32 0
  %85 = shufflevector <2 x double> %84, <2 x double> undef, <2 x i32> zeroinitializer
  %86 = fmul <2 x double> %85, %83
  %87 = bitcast double* %8 to <2 x double>*
  %88 = load <2 x double>, <2 x double>* %87, align 8
  %89 = insertelement <2 x double> undef, double %79, i32 0
  %90 = shufflevector <2 x double> %89, <2 x double> undef, <2 x i32> zeroinitializer
  %91 = fmul <2 x double> %90, %88
  %92 = fadd <2 x double> %86, %91
  %93 = bitcast double* %11 to <2 x double>*
  %94 = load <2 x double>, <2 x double>* %93, align 8
  %95 = insertelement <2 x double> undef, double %81, i32 0
  %96 = shufflevector <2 x double> %95, <2 x double> undef, <2 x i32> zeroinitializer
  %97 = fmul <2 x double> %96, %94
  %98 = fadd <2 x double> %92, %97
  %99 = load double, double* %29, align 8
  %100 = fmul double %77, %99
  %101 = load double, double* %32, align 8
  %102 = fmul double %79, %101
  %103 = fadd double %100, %102
  %104 = load double, double* %36, align 8
  %105 = fmul double %81, %104
  %106 = fadd double %103, %105
  %107 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 2, i32 0, i64 0
  %108 = bitcast double* %107 to <2 x double>*
  store <2 x double> %98, <2 x double>* %108, align 8
  %109 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 2, i32 0, i64 2
  store double %106, double* %109, align 8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @_cmsMAT3inverse(%struct.cmsMAT3* nocapture readonly, %struct.cmsMAT3* nocapture) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 1, i32 0, i64 1
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 2, i32 0, i64 2
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 1, i32 0, i64 2
  %8 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 2, i32 0, i64 1
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 1, i32 0, i64 0
  %11 = load double, double* %10, align 8
  %12 = fmul double %6, %11
  %13 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 2, i32 0, i64 0
  %14 = bitcast double* %7 to <2 x double>*
  %15 = load <2 x double>, <2 x double>* %14, align 8
  %16 = extractelement <2 x double> %15, i32 0
  %17 = extractelement <2 x double> %15, i32 1
  %18 = fmul double %16, %17
  %19 = fsub double %18, %12
  %20 = insertelement <2 x double> undef, double %4, i32 0
  %21 = insertelement <2 x double> %20, double %9, i32 1
  %22 = insertelement <2 x double> undef, double %6, i32 0
  %23 = insertelement <2 x double> %22, double %11, i32 1
  %24 = fmul <2 x double> %21, %23
  %25 = insertelement <2 x double> undef, double %9, i32 0
  %26 = insertelement <2 x double> %25, double %4, i32 1
  %27 = fmul <2 x double> %15, %26
  %28 = fsub <2 x double> %24, %27
  %29 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 0, i32 0, i64 0
  %30 = load double, double* %29, align 8
  %31 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 0, i32 0, i64 1
  %32 = load double, double* %31, align 8
  %33 = fmul double %32, %19
  %34 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 0, i32 0, i64 2
  %35 = load double, double* %34, align 8
  %36 = insertelement <2 x double> undef, double %30, i32 0
  %37 = insertelement <2 x double> %36, double %35, i32 1
  %38 = fmul <2 x double> %28, %37
  %39 = extractelement <2 x double> %38, i32 0
  %40 = fadd double %39, %33
  %41 = extractelement <2 x double> %38, i32 1
  %42 = fadd double %40, %41
  %43 = tail call double @llvm.fabs.f64(double %42)
  %44 = fcmp olt double %43, 1.000000e-04
  br i1 %44, label %110, label %45

45:                                               ; preds = %2
  %46 = extractelement <2 x double> %28, i32 0
  %47 = fdiv double %46, %42
  %48 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 0, i32 0, i64 0
  store double %47, double* %48, align 8
  %49 = load double, double* %34, align 8
  %50 = load double, double* %8, align 8
  %51 = fmul double %49, %50
  %52 = load double, double* %31, align 8
  %53 = load double, double* %5, align 8
  %54 = fmul double %52, %53
  %55 = fsub double %51, %54
  %56 = fdiv double %55, %42
  %57 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 0, i32 0, i64 1
  store double %56, double* %57, align 8
  %58 = load double, double* %31, align 8
  %59 = load double, double* %7, align 8
  %60 = fmul double %58, %59
  %61 = load double, double* %34, align 8
  %62 = load double, double* %3, align 8
  %63 = fmul double %61, %62
  %64 = fsub double %60, %63
  %65 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 0, i32 0, i64 2
  %66 = insertelement <2 x double> undef, double %64, i32 0
  %67 = insertelement <2 x double> %66, double %19, i32 1
  %68 = insertelement <2 x double> undef, double %42, i32 0
  %69 = shufflevector <2 x double> %68, <2 x double> undef, <2 x i32> zeroinitializer
  %70 = fdiv <2 x double> %67, %69
  %71 = bitcast double* %65 to <2 x double>*
  store <2 x double> %70, <2 x double>* %71, align 8
  %72 = load double, double* %29, align 8
  %73 = load double, double* %5, align 8
  %74 = fmul double %72, %73
  %75 = load double, double* %34, align 8
  %76 = load double, double* %13, align 8
  %77 = fmul double %75, %76
  %78 = fsub double %74, %77
  %79 = fdiv double %78, %42
  %80 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 1, i32 0, i64 1
  store double %79, double* %80, align 8
  %81 = load double, double* %34, align 8
  %82 = load double, double* %10, align 8
  %83 = fmul double %81, %82
  %84 = load double, double* %29, align 8
  %85 = load double, double* %7, align 8
  %86 = fmul double %84, %85
  %87 = fsub double %83, %86
  %88 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 1, i32 0, i64 2
  %89 = insertelement <2 x double> %28, double %87, i32 0
  %90 = fdiv <2 x double> %89, %69
  %91 = bitcast double* %88 to <2 x double>*
  store <2 x double> %90, <2 x double>* %91, align 8
  %92 = load double, double* %31, align 8
  %93 = load double, double* %13, align 8
  %94 = fmul double %92, %93
  %95 = load double, double* %29, align 8
  %96 = load double, double* %8, align 8
  %97 = fmul double %95, %96
  %98 = fsub double %94, %97
  %99 = fdiv double %98, %42
  %100 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 2, i32 0, i64 1
  store double %99, double* %100, align 8
  %101 = load double, double* %29, align 8
  %102 = load double, double* %3, align 8
  %103 = fmul double %101, %102
  %104 = load double, double* %31, align 8
  %105 = load double, double* %10, align 8
  %106 = fmul double %104, %105
  %107 = fsub double %103, %106
  %108 = fdiv double %107, %42
  %109 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 2, i32 0, i64 2
  store double %108, double* %109, align 8
  br label %110

110:                                              ; preds = %2, %45
  %111 = phi i32 [ 1, %45 ], [ 0, %2 ]
  ret i32 %111
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #7

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_cmsMAT3solve(%struct.cmsVEC3* nocapture, %struct.cmsMAT3* nocapture readonly, %struct.cmsVEC3* nocapture readonly) local_unnamed_addr #8 {
  %4 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 0, i32 0, i64 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 0, i32 0, i64 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 0, i32 0, i64 2
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 1, i32 0, i64 0
  %11 = bitcast double* %10 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  %13 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 1, i32 0, i64 2
  %14 = load double, double* %13, align 8
  %15 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 2, i32 0, i64 0
  %16 = load double, double* %15, align 8
  %17 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 2, i32 0, i64 1
  %18 = bitcast double* %17 to <2 x double>*
  %19 = load <2 x double>, <2 x double>* %18, align 8
  %20 = extractelement <2 x double> %12, i32 0
  %21 = extractelement <2 x double> %19, i32 1
  %22 = fmul double %20, %21
  %23 = fmul double %14, %16
  %24 = fsub double %23, %22
  %25 = fmul <2 x double> %12, %19
  %26 = extractelement <2 x double> %12, i32 1
  %27 = insertelement <2 x double> undef, double %26, i32 0
  %28 = insertelement <2 x double> %27, double %14, i32 1
  %29 = insertelement <2 x double> undef, double %16, i32 0
  %30 = extractelement <2 x double> %19, i32 0
  %31 = shufflevector <2 x double> %29, <2 x double> %19, <2 x i32> <i32 0, i32 2>
  %32 = fmul <2 x double> %28, %31
  %33 = fsub <2 x double> %25, %32
  %34 = fmul double %7, %24
  %35 = insertelement <2 x double> undef, double %9, i32 0
  %36 = insertelement <2 x double> %35, double %5, i32 1
  %37 = fmul <2 x double> %36, %33
  %38 = extractelement <2 x double> %37, i32 1
  %39 = fadd double %38, %34
  %40 = extractelement <2 x double> %37, i32 0
  %41 = fadd double %40, %39
  %42 = tail call double @llvm.fabs.f64(double %41) #9
  %43 = fcmp olt double %42, 1.000000e-04
  br i1 %43, label %104, label %44

44:                                               ; preds = %3
  %45 = extractelement <2 x double> %33, i32 1
  %46 = fdiv double %45, %41
  %47 = fmul double %9, %30
  %48 = fmul double %7, %21
  %49 = fsub double %47, %48
  %50 = fdiv double %49, %41
  %51 = fmul double %7, %14
  %52 = fmul double %9, %26
  %53 = fsub double %51, %52
  %54 = fdiv double %53, %41
  %55 = fdiv double %24, %41
  %56 = fmul double %5, %21
  %57 = fmul double %9, %16
  %58 = fsub double %56, %57
  %59 = fdiv double %58, %41
  %60 = fmul double %9, %20
  %61 = fmul double %5, %14
  %62 = fsub double %60, %61
  %63 = fdiv double %62, %41
  %64 = extractelement <2 x double> %33, i32 0
  %65 = fdiv double %64, %41
  %66 = fmul double %7, %16
  %67 = fmul double %5, %30
  %68 = fsub double %66, %67
  %69 = fdiv double %68, %41
  %70 = fmul double %5, %26
  %71 = fmul double %7, %20
  %72 = fsub double %70, %71
  %73 = fdiv double %72, %41
  %74 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %2, i64 0, i32 0, i64 0
  %75 = load double, double* %74, align 8
  %76 = fmul double %46, %75
  %77 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %2, i64 0, i32 0, i64 1
  %78 = load double, double* %77, align 8
  %79 = fmul double %50, %78
  %80 = fadd double %76, %79
  %81 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %2, i64 0, i32 0, i64 2
  %82 = load double, double* %81, align 8
  %83 = fmul double %54, %82
  %84 = fadd double %80, %83
  %85 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 0
  store double %84, double* %85, align 8
  %86 = load double, double* %74, align 8
  %87 = fmul double %55, %86
  %88 = load double, double* %77, align 8
  %89 = fmul double %59, %88
  %90 = fadd double %87, %89
  %91 = load double, double* %81, align 8
  %92 = fmul double %63, %91
  %93 = fadd double %90, %92
  %94 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 1
  store double %93, double* %94, align 8
  %95 = load double, double* %74, align 8
  %96 = fmul double %65, %95
  %97 = load double, double* %77, align 8
  %98 = fmul double %69, %97
  %99 = fadd double %96, %98
  %100 = load double, double* %81, align 8
  %101 = fmul double %73, %100
  %102 = fadd double %99, %101
  %103 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 2
  store double %102, double* %103, align 8
  br label %104

104:                                              ; preds = %3, %44
  %105 = phi i32 [ 1, %44 ], [ 0, %3 ]
  ret i32 %105
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_cmsMAT3eval(%struct.cmsVEC3* nocapture, %struct.cmsMAT3* nocapture readonly, %struct.cmsVEC3* nocapture readonly) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 0, i32 0, i64 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %2, i64 0, i32 0, i64 0
  %7 = load double, double* %6, align 8
  %8 = fmul double %5, %7
  %9 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 0, i32 0, i64 1
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %2, i64 0, i32 0, i64 1
  %12 = load double, double* %11, align 8
  %13 = fmul double %10, %12
  %14 = fadd double %8, %13
  %15 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 0, i32 0, i64 2
  %16 = load double, double* %15, align 8
  %17 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %2, i64 0, i32 0, i64 2
  %18 = load double, double* %17, align 8
  %19 = fmul double %16, %18
  %20 = fadd double %14, %19
  %21 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 0
  store double %20, double* %21, align 8
  %22 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 1, i32 0, i64 0
  %23 = load double, double* %22, align 8
  %24 = load double, double* %6, align 8
  %25 = fmul double %23, %24
  %26 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 1, i32 0, i64 1
  %27 = load double, double* %26, align 8
  %28 = load double, double* %11, align 8
  %29 = fmul double %27, %28
  %30 = fadd double %25, %29
  %31 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 1, i32 0, i64 2
  %32 = load double, double* %31, align 8
  %33 = load double, double* %17, align 8
  %34 = fmul double %32, %33
  %35 = fadd double %30, %34
  %36 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 1
  store double %35, double* %36, align 8
  %37 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 2, i32 0, i64 0
  %38 = load double, double* %37, align 8
  %39 = load double, double* %6, align 8
  %40 = fmul double %38, %39
  %41 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 2, i32 0, i64 1
  %42 = load double, double* %41, align 8
  %43 = load double, double* %11, align 8
  %44 = fmul double %42, %43
  %45 = fadd double %40, %44
  %46 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %1, i64 0, i32 0, i64 2, i32 0, i64 2
  %47 = load double, double* %46, align 8
  %48 = load double, double* %17, align 8
  %49 = fmul double %47, %48
  %50 = fadd double %45, %49
  %51 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %0, i64 0, i32 0, i64 2
  store double %50, double* %51, align 8
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
