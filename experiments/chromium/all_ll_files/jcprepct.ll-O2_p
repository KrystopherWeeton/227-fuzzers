; ModuleID = '../../third_party/libjpeg_turbo/jcprepct.c'
source_filename = "../../third_party/libjpeg_turbo/jcprepct.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_compress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_destination_mgr*, i32, i32, i32, i32, double, i32, i32, i32, %struct.jpeg_component_info*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], [16 x i8], [16 x i8], [16 x i8], i32, %struct.jpeg_scan_info*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, %struct.jpeg_comp_master*, %struct.jpeg_c_main_controller*, %struct.jpeg_c_prep_controller*, %struct.jpeg_c_coef_controller*, %struct.jpeg_marker_writer*, %struct.jpeg_color_converter*, %struct.jpeg_downsampler*, %struct.jpeg_forward_dct*, %struct.jpeg_entropy_encoder*, %struct.jpeg_scan_info*, i32 }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_destination_mgr = type { i8*, i64, void (%struct.jpeg_compress_struct*)*, i32 (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_comp_master = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, i32, i32 }
%struct.jpeg_c_main_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32)* }
%struct.jpeg_c_prep_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)* }
%struct.jpeg_c_coef_controller = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, i8***)* }
%struct.jpeg_marker_writer = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, i32, i32)*, {}* }
%struct.jpeg_color_converter = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* }
%struct.jpeg_downsampler = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)*, i32 }
%struct.jpeg_forward_dct = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)* }
%struct.jpeg_entropy_encoder = type { {}*, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_scan_info = type { i32, [4 x i32], i32, i32, i32, i32 }
%struct.my_prep_controller = type { %struct.jpeg_c_prep_controller, [10 x i8**], i32, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @jinit_c_prep_controller(%struct.jpeg_compress_struct*, i32) local_unnamed_addr #0 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  br label %14

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %8 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %7, align 8
  %9 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %8, i64 0, i32 5
  store i32 4, i32* %9, align 8
  %10 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %7, align 8
  %11 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %10, i64 0, i32 0
  %12 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %11, align 8
  %13 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %12(%struct.jpeg_common_struct* %13) #3
  br label %14

14:                                               ; preds = %4, %6
  %15 = phi %struct.jpeg_common_struct* [ %5, %4 ], [ %13, %6 ]
  %16 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 1
  %17 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %16, align 8
  %18 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %17, i64 0, i32 0
  %19 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %18, align 8
  %20 = tail call i8* %19(%struct.jpeg_common_struct* %15, i32 1, i64 112) #3
  %21 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 56
  %22 = bitcast %struct.jpeg_c_prep_controller** %21 to i8**
  store i8* %20, i8** %22, align 8
  %23 = bitcast i8* %20 to void (%struct.jpeg_compress_struct*, i32)**
  store void (%struct.jpeg_compress_struct*, i32)* @start_pass_prep, void (%struct.jpeg_compress_struct*, i32)** %23, align 8
  %24 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 60
  %25 = load %struct.jpeg_downsampler*, %struct.jpeg_downsampler** %24, align 8
  %26 = getelementptr inbounds %struct.jpeg_downsampler, %struct.jpeg_downsampler* %25, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 0
  %29 = getelementptr inbounds i8, i8* %20, i64 8
  %30 = bitcast i8* %29 to void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)**
  br i1 %28, label %276, label %31

31:                                               ; preds = %14
  store void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)* @pre_process_context, void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)** %30, align 8
  %32 = bitcast %struct.jpeg_c_prep_controller** %21 to %struct.my_prep_controller**
  %33 = load %struct.my_prep_controller*, %struct.my_prep_controller** %32, align 8
  %34 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42
  %35 = load i32, i32* %34, align 4
  %36 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %16, align 8
  %37 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %36, i64 0, i32 0
  %38 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %37, align 8
  %39 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 13
  %40 = load i32, i32* %39, align 4
  %41 = mul i32 %35, 5
  %42 = mul i32 %40, %41
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 3
  %45 = tail call i8* %38(%struct.jpeg_common_struct* %15, i32 1, i64 %44) #3
  %46 = load i32, i32* %39, align 4
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %48, label %313

48:                                               ; preds = %31
  %49 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 15
  %50 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %49, align 8
  %51 = bitcast i8* %45 to i8**
  %52 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 41
  %53 = mul nsw i32 %35, 3
  %54 = sext i32 %35 to i64
  %55 = sext i32 %53 to i64
  %56 = shl nsw i64 %55, 3
  %57 = icmp sgt i32 %35, 0
  %58 = shl i32 %35, 1
  %59 = shl i32 %35, 2
  %60 = sext i32 %41 to i64
  %61 = sext i32 %59 to i64
  %62 = sext i32 %58 to i64
  %63 = zext i32 %35 to i64
  %64 = shl nsw i64 %60, 3
  %65 = shl nuw nsw i64 %63, 3
  %66 = shl nsw i64 %61, 3
  %67 = add nsw i64 %66, %65
  %68 = add nsw i64 %62, %63
  %69 = and i64 %63, 4294967292
  %70 = add nsw i64 %69, -4
  %71 = lshr exact i64 %70, 2
  %72 = add nuw nsw i64 %71, 1
  %73 = icmp ult i32 %35, 4
  %74 = and i64 %63, 4294967292
  %75 = and i64 %72, 1
  %76 = icmp eq i64 %70, 0
  %77 = sub nuw nsw i64 %72, %75
  %78 = icmp eq i64 %75, 0
  %79 = icmp eq i64 %74, %63
  %80 = and i64 %63, 1
  %81 = icmp eq i64 %80, 0
  %82 = sub nsw i64 0, %63
  br label %83

83:                                               ; preds = %268, %48
  %84 = phi i64 [ 0, %48 ], [ %271, %268 ]
  %85 = phi i8** [ %51, %48 ], [ %270, %268 ]
  %86 = phi %struct.jpeg_component_info* [ %50, %48 ], [ %272, %268 ]
  %87 = mul i64 %64, %84
  %88 = getelementptr i8, i8* %45, i64 %87
  %89 = add i64 %65, %87
  %90 = getelementptr i8, i8* %45, i64 %89
  %91 = add i64 %66, %87
  %92 = getelementptr i8, i8* %45, i64 %91
  %93 = add i64 %67, %87
  %94 = getelementptr i8, i8* %45, i64 %93
  %95 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %16, align 8
  %96 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %95, i64 0, i32 2
  %97 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %96, align 8
  %98 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %86, i64 0, i32 7
  %99 = load i32, i32* %98, align 4
  %100 = zext i32 %99 to i64
  %101 = shl nuw nsw i64 %100, 3
  %102 = load i32, i32* %52, align 8
  %103 = sext i32 %102 to i64
  %104 = mul nsw i64 %101, %103
  %105 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %86, i64 0, i32 2
  %106 = load i32, i32* %105, align 8
  %107 = sext i32 %106 to i64
  %108 = sdiv i64 %104, %107
  %109 = trunc i64 %108 to i32
  %110 = tail call i8** %97(%struct.jpeg_common_struct* %15, i32 1, i32 %109, i32 %53) #3
  %111 = bitcast i8** %110 to i8*
  %112 = getelementptr inbounds i8*, i8** %85, i64 %54
  %113 = bitcast i8** %112 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %113, i8* align 1 %111, i64 %56, i1 false) #3
  br i1 %57, label %114, label %268

114:                                              ; preds = %83
  br i1 %73, label %219, label %115

115:                                              ; preds = %114
  %116 = getelementptr i8*, i8** %110, i64 %62
  %117 = bitcast i8** %116 to i8*
  %118 = getelementptr i8*, i8** %110, i64 %68
  %119 = bitcast i8** %118 to i8*
  %120 = getelementptr i8*, i8** %110, i64 %63
  %121 = bitcast i8** %120 to i8*
  %122 = icmp ult i8* %88, %94
  %123 = icmp ult i8* %92, %90
  %124 = and i1 %122, %123
  %125 = icmp ult i8* %88, %119
  %126 = icmp ugt i8* %90, %117
  %127 = and i1 %125, %126
  %128 = or i1 %124, %127
  %129 = icmp ult i8* %88, %121
  %130 = icmp ugt i8* %90, %111
  %131 = and i1 %129, %130
  %132 = or i1 %128, %131
  %133 = icmp ult i8* %92, %119
  %134 = icmp ugt i8* %94, %117
  %135 = and i1 %133, %134
  %136 = or i1 %132, %135
  %137 = icmp ult i8* %92, %121
  %138 = icmp ugt i8* %94, %111
  %139 = and i1 %137, %138
  %140 = or i1 %136, %139
  br i1 %140, label %219, label %141

141:                                              ; preds = %115
  br i1 %76, label %193, label %142

142:                                              ; preds = %141, %142
  %143 = phi i64 [ %190, %142 ], [ 0, %141 ]
  %144 = phi i64 [ %191, %142 ], [ %77, %141 ]
  %145 = add nsw i64 %143, %62
  %146 = getelementptr inbounds i8*, i8** %110, i64 %145
  %147 = bitcast i8** %146 to <2 x i64>*
  %148 = load <2 x i64>, <2 x i64>* %147, align 8, !alias.scope !2
  %149 = getelementptr inbounds i8*, i8** %146, i64 2
  %150 = bitcast i8** %149 to <2 x i64>*
  %151 = load <2 x i64>, <2 x i64>* %150, align 8, !alias.scope !2
  %152 = getelementptr inbounds i8*, i8** %85, i64 %143
  %153 = bitcast i8** %152 to <2 x i64>*
  store <2 x i64> %148, <2 x i64>* %153, align 8, !alias.scope !5, !noalias !7
  %154 = getelementptr inbounds i8*, i8** %152, i64 2
  %155 = bitcast i8** %154 to <2 x i64>*
  store <2 x i64> %151, <2 x i64>* %155, align 8, !alias.scope !5, !noalias !7
  %156 = getelementptr inbounds i8*, i8** %110, i64 %143
  %157 = bitcast i8** %156 to <2 x i64>*
  %158 = load <2 x i64>, <2 x i64>* %157, align 8, !alias.scope !10
  %159 = getelementptr inbounds i8*, i8** %156, i64 2
  %160 = bitcast i8** %159 to <2 x i64>*
  %161 = load <2 x i64>, <2 x i64>* %160, align 8, !alias.scope !10
  %162 = add nsw i64 %143, %61
  %163 = getelementptr inbounds i8*, i8** %85, i64 %162
  %164 = bitcast i8** %163 to <2 x i64>*
  store <2 x i64> %158, <2 x i64>* %164, align 8, !alias.scope !11, !noalias !12
  %165 = getelementptr inbounds i8*, i8** %163, i64 2
  %166 = bitcast i8** %165 to <2 x i64>*
  store <2 x i64> %161, <2 x i64>* %166, align 8, !alias.scope !11, !noalias !12
  %167 = or i64 %143, 4
  %168 = add nsw i64 %167, %62
  %169 = getelementptr inbounds i8*, i8** %110, i64 %168
  %170 = bitcast i8** %169 to <2 x i64>*
  %171 = load <2 x i64>, <2 x i64>* %170, align 8, !alias.scope !2
  %172 = getelementptr inbounds i8*, i8** %169, i64 2
  %173 = bitcast i8** %172 to <2 x i64>*
  %174 = load <2 x i64>, <2 x i64>* %173, align 8, !alias.scope !2
  %175 = getelementptr inbounds i8*, i8** %85, i64 %167
  %176 = bitcast i8** %175 to <2 x i64>*
  store <2 x i64> %171, <2 x i64>* %176, align 8, !alias.scope !5, !noalias !7
  %177 = getelementptr inbounds i8*, i8** %175, i64 2
  %178 = bitcast i8** %177 to <2 x i64>*
  store <2 x i64> %174, <2 x i64>* %178, align 8, !alias.scope !5, !noalias !7
  %179 = getelementptr inbounds i8*, i8** %110, i64 %167
  %180 = bitcast i8** %179 to <2 x i64>*
  %181 = load <2 x i64>, <2 x i64>* %180, align 8, !alias.scope !10
  %182 = getelementptr inbounds i8*, i8** %179, i64 2
  %183 = bitcast i8** %182 to <2 x i64>*
  %184 = load <2 x i64>, <2 x i64>* %183, align 8, !alias.scope !10
  %185 = add nsw i64 %167, %61
  %186 = getelementptr inbounds i8*, i8** %85, i64 %185
  %187 = bitcast i8** %186 to <2 x i64>*
  store <2 x i64> %181, <2 x i64>* %187, align 8, !alias.scope !11, !noalias !12
  %188 = getelementptr inbounds i8*, i8** %186, i64 2
  %189 = bitcast i8** %188 to <2 x i64>*
  store <2 x i64> %184, <2 x i64>* %189, align 8, !alias.scope !11, !noalias !12
  %190 = add i64 %143, 8
  %191 = add i64 %144, -2
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %142, !llvm.loop !13

193:                                              ; preds = %142, %141
  %194 = phi i64 [ 0, %141 ], [ %190, %142 ]
  br i1 %78, label %218, label %195

195:                                              ; preds = %193
  %196 = add nsw i64 %194, %62
  %197 = getelementptr inbounds i8*, i8** %110, i64 %196
  %198 = bitcast i8** %197 to <2 x i64>*
  %199 = load <2 x i64>, <2 x i64>* %198, align 8, !alias.scope !2
  %200 = getelementptr inbounds i8*, i8** %197, i64 2
  %201 = bitcast i8** %200 to <2 x i64>*
  %202 = load <2 x i64>, <2 x i64>* %201, align 8, !alias.scope !2
  %203 = getelementptr inbounds i8*, i8** %85, i64 %194
  %204 = bitcast i8** %203 to <2 x i64>*
  store <2 x i64> %199, <2 x i64>* %204, align 8, !alias.scope !5, !noalias !7
  %205 = getelementptr inbounds i8*, i8** %203, i64 2
  %206 = bitcast i8** %205 to <2 x i64>*
  store <2 x i64> %202, <2 x i64>* %206, align 8, !alias.scope !5, !noalias !7
  %207 = getelementptr inbounds i8*, i8** %110, i64 %194
  %208 = bitcast i8** %207 to <2 x i64>*
  %209 = load <2 x i64>, <2 x i64>* %208, align 8, !alias.scope !10
  %210 = getelementptr inbounds i8*, i8** %207, i64 2
  %211 = bitcast i8** %210 to <2 x i64>*
  %212 = load <2 x i64>, <2 x i64>* %211, align 8, !alias.scope !10
  %213 = add nsw i64 %194, %61
  %214 = getelementptr inbounds i8*, i8** %85, i64 %213
  %215 = bitcast i8** %214 to <2 x i64>*
  store <2 x i64> %209, <2 x i64>* %215, align 8, !alias.scope !11, !noalias !12
  %216 = getelementptr inbounds i8*, i8** %214, i64 2
  %217 = bitcast i8** %216 to <2 x i64>*
  store <2 x i64> %212, <2 x i64>* %217, align 8, !alias.scope !11, !noalias !12
  br label %218

218:                                              ; preds = %193, %195
  br i1 %79, label %268, label %219

219:                                              ; preds = %218, %115, %114
  %220 = phi i64 [ 0, %115 ], [ 0, %114 ], [ %74, %218 ]
  %221 = xor i64 %220, -1
  br i1 %81, label %236, label %222

222:                                              ; preds = %219
  %223 = add nsw i64 %220, %62
  %224 = getelementptr inbounds i8*, i8** %110, i64 %223
  %225 = bitcast i8** %224 to i64*
  %226 = load i64, i64* %225, align 8
  %227 = getelementptr inbounds i8*, i8** %85, i64 %220
  %228 = bitcast i8** %227 to i64*
  store i64 %226, i64* %228, align 8
  %229 = getelementptr inbounds i8*, i8** %110, i64 %220
  %230 = bitcast i8** %229 to i64*
  %231 = load i64, i64* %230, align 8
  %232 = add nsw i64 %220, %61
  %233 = getelementptr inbounds i8*, i8** %85, i64 %232
  %234 = bitcast i8** %233 to i64*
  store i64 %231, i64* %234, align 8
  %235 = or i64 %220, 1
  br label %236

236:                                              ; preds = %222, %219
  %237 = phi i64 [ %235, %222 ], [ %220, %219 ]
  %238 = icmp eq i64 %221, %82
  br i1 %238, label %268, label %239

239:                                              ; preds = %236, %239
  %240 = phi i64 [ %266, %239 ], [ %237, %236 ]
  %241 = add nsw i64 %240, %62
  %242 = getelementptr inbounds i8*, i8** %110, i64 %241
  %243 = bitcast i8** %242 to i64*
  %244 = load i64, i64* %243, align 8
  %245 = getelementptr inbounds i8*, i8** %85, i64 %240
  %246 = bitcast i8** %245 to i64*
  store i64 %244, i64* %246, align 8
  %247 = getelementptr inbounds i8*, i8** %110, i64 %240
  %248 = bitcast i8** %247 to i64*
  %249 = load i64, i64* %248, align 8
  %250 = add nsw i64 %240, %61
  %251 = getelementptr inbounds i8*, i8** %85, i64 %250
  %252 = bitcast i8** %251 to i64*
  store i64 %249, i64* %252, align 8
  %253 = add nuw nsw i64 %240, 1
  %254 = add nsw i64 %253, %62
  %255 = getelementptr inbounds i8*, i8** %110, i64 %254
  %256 = bitcast i8** %255 to i64*
  %257 = load i64, i64* %256, align 8
  %258 = getelementptr inbounds i8*, i8** %85, i64 %253
  %259 = bitcast i8** %258 to i64*
  store i64 %257, i64* %259, align 8
  %260 = getelementptr inbounds i8*, i8** %110, i64 %253
  %261 = bitcast i8** %260 to i64*
  %262 = load i64, i64* %261, align 8
  %263 = add nsw i64 %253, %61
  %264 = getelementptr inbounds i8*, i8** %85, i64 %263
  %265 = bitcast i8** %264 to i64*
  store i64 %262, i64* %265, align 8
  %266 = add nuw nsw i64 %240, 2
  %267 = icmp eq i64 %266, %63
  br i1 %267, label %268, label %239, !llvm.loop !15

268:                                              ; preds = %236, %239, %218, %83
  %269 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %33, i64 0, i32 1, i64 %84
  store i8** %112, i8*** %269, align 8
  %270 = getelementptr inbounds i8*, i8** %85, i64 %60
  %271 = add nuw nsw i64 %84, 1
  %272 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %86, i64 1
  %273 = load i32, i32* %39, align 4
  %274 = sext i32 %273 to i64
  %275 = icmp slt i64 %271, %274
  br i1 %275, label %83, label %313

276:                                              ; preds = %14
  store void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)* @pre_process_data, void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)** %30, align 8
  %277 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 13
  %278 = load i32, i32* %277, align 4
  %279 = icmp sgt i32 %278, 0
  br i1 %279, label %280, label %313

280:                                              ; preds = %276
  %281 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 15
  %282 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %281, align 8
  %283 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 41
  %284 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42
  %285 = getelementptr inbounds i8, i8* %20, i64 16
  %286 = bitcast i8* %285 to [10 x i8**]*
  br label %287

287:                                              ; preds = %280, %287
  %288 = phi i64 [ 0, %280 ], [ %308, %287 ]
  %289 = phi %struct.jpeg_component_info* [ %282, %280 ], [ %309, %287 ]
  %290 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %16, align 8
  %291 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %290, i64 0, i32 2
  %292 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %291, align 8
  %293 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %289, i64 0, i32 7
  %294 = load i32, i32* %293, align 4
  %295 = zext i32 %294 to i64
  %296 = shl nuw nsw i64 %295, 3
  %297 = load i32, i32* %283, align 8
  %298 = sext i32 %297 to i64
  %299 = mul nsw i64 %296, %298
  %300 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %289, i64 0, i32 2
  %301 = load i32, i32* %300, align 8
  %302 = sext i32 %301 to i64
  %303 = sdiv i64 %299, %302
  %304 = trunc i64 %303 to i32
  %305 = load i32, i32* %284, align 4
  %306 = tail call i8** %292(%struct.jpeg_common_struct* %15, i32 1, i32 %304, i32 %305) #3
  %307 = getelementptr inbounds [10 x i8**], [10 x i8**]* %286, i64 0, i64 %288
  store i8** %306, i8*** %307, align 8
  %308 = add nuw nsw i64 %288, 1
  %309 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %289, i64 1
  %310 = load i32, i32* %277, align 4
  %311 = sext i32 %310 to i64
  %312 = icmp slt i64 %308, %311
  br i1 %312, label %287, label %313

313:                                              ; preds = %268, %287, %276, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @start_pass_prep(%struct.jpeg_compress_struct*, i32) #0 {
  %3 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 56
  %4 = bitcast %struct.jpeg_c_prep_controller** %3 to %struct.my_prep_controller**
  %5 = load %struct.my_prep_controller*, %struct.my_prep_controller** %4, align 8
  %6 = icmp eq i32 %1, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %9 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %8, align 8
  %10 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %9, i64 0, i32 5
  store i32 4, i32* %10, align 8
  %11 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %8, align 8
  %12 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %11, i64 0, i32 0
  %13 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %12, align 8
  %14 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %13(%struct.jpeg_common_struct* %14) #3
  br label %15

15:                                               ; preds = %2, %7
  %16 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 8
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %5, i64 0, i32 2
  store i32 %17, i32* %18, align 8
  %19 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %5, i64 0, i32 3
  store i32 0, i32* %19, align 4
  %20 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %5, i64 0, i32 4
  store i32 0, i32* %20, align 8
  %21 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42
  %22 = load i32, i32* %21, align 4
  %23 = shl nsw i32 %22, 1
  %24 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %5, i64 0, i32 5
  store i32 %23, i32* %24, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @pre_process_context(%struct.jpeg_compress_struct*, i8**, i32* nocapture, i32, i8***, i32* nocapture, i32) #0 {
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 56
  %9 = bitcast %struct.jpeg_c_prep_controller** %8 to %struct.my_prep_controller**
  %10 = load %struct.my_prep_controller*, %struct.my_prep_controller** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42
  %12 = load i32, i32* %11, align 4
  %13 = mul nsw i32 %12, 3
  %14 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 2
  %15 = load i32, i32* %5, align 4
  %16 = icmp ult i32 %15, %6
  br i1 %16, label %17, label %147

17:                                               ; preds = %7
  %18 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 3
  %19 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 5
  %20 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 13
  %21 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %22 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 59
  %23 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 0
  %24 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 8
  %25 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 60
  %26 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 4
  br label %27

27:                                               ; preds = %17, %144
  %28 = load i32, i32* %2, align 4
  %29 = icmp ult i32 %28, %3
  br i1 %29, label %30, label %81

30:                                               ; preds = %27
  %31 = sub i32 %3, %28
  %32 = load i32, i32* %19, align 4
  %33 = load i32, i32* %18, align 4
  %34 = sub nsw i32 %32, %33
  %35 = icmp ult i32 %34, %31
  %36 = select i1 %35, i32 %34, i32 %31
  %37 = load %struct.jpeg_color_converter*, %struct.jpeg_color_converter** %22, align 8
  %38 = getelementptr inbounds %struct.jpeg_color_converter, %struct.jpeg_color_converter* %37, i64 0, i32 1
  %39 = load void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)*, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)** %38, align 8
  %40 = zext i32 %28 to i64
  %41 = getelementptr inbounds i8*, i8** %1, i64 %40
  tail call void %39(%struct.jpeg_compress_struct* %0, i8** %41, i8*** %23, i32 %33, i32 %36) #3
  %42 = load i32, i32* %14, align 8
  %43 = load i32, i32* %24, align 4
  %44 = icmp eq i32 %42, %43
  br i1 %44, label %45, label %73

45:                                               ; preds = %30
  %46 = load i32, i32* %20, align 4
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %48, label %73

48:                                               ; preds = %45
  %49 = load i32, i32* %11, align 4
  br label %50

50:                                               ; preds = %48, %67
  %51 = phi i32 [ %46, %48 ], [ %68, %67 ]
  %52 = phi i32 [ %49, %48 ], [ %69, %67 ]
  %53 = phi i64 [ 0, %48 ], [ %70, %67 ]
  %54 = icmp slt i32 %52, 1
  br i1 %54, label %67, label %55

55:                                               ; preds = %50
  %56 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %53
  br label %57

57:                                               ; preds = %57, %55
  %58 = phi i32 [ 1, %55 ], [ %62, %57 ]
  %59 = load i8**, i8*** %56, align 8
  %60 = sub nsw i32 0, %58
  %61 = load i32, i32* %21, align 8
  tail call void @jcopy_sample_rows(i8** %59, i32 0, i8** %59, i32 %60, i32 1, i32 %61) #3
  %62 = add nuw nsw i32 %58, 1
  %63 = load i32, i32* %11, align 4
  %64 = icmp slt i32 %58, %63
  br i1 %64, label %57, label %65

65:                                               ; preds = %57
  %66 = load i32, i32* %20, align 4
  br label %67

67:                                               ; preds = %65, %50
  %68 = phi i32 [ %66, %65 ], [ %51, %50 ]
  %69 = phi i32 [ %63, %65 ], [ %52, %50 ]
  %70 = add nuw nsw i64 %53, 1
  %71 = sext i32 %68 to i64
  %72 = icmp slt i64 %70, %71
  br i1 %72, label %50, label %73

73:                                               ; preds = %67, %45, %30
  %74 = load i32, i32* %2, align 4
  %75 = add i32 %74, %36
  store i32 %75, i32* %2, align 4
  %76 = load i32, i32* %18, align 4
  %77 = add nsw i32 %76, %36
  store i32 %77, i32* %18, align 4
  %78 = load i32, i32* %14, align 8
  %79 = sub i32 %78, %36
  store i32 %79, i32* %14, align 8
  %80 = load i32, i32* %19, align 4
  br label %120

81:                                               ; preds = %27
  %82 = load i32, i32* %14, align 8
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %147

84:                                               ; preds = %81
  %85 = load i32, i32* %18, align 4
  %86 = load i32, i32* %19, align 4
  %87 = icmp slt i32 %85, %86
  br i1 %87, label %88, label %120

88:                                               ; preds = %84
  %89 = load i32, i32* %20, align 4
  %90 = icmp sgt i32 %89, 0
  br i1 %90, label %91, label %118

91:                                               ; preds = %88, %113
  %92 = phi i32 [ %109, %113 ], [ %89, %88 ]
  %93 = phi i32 [ %115, %113 ], [ %86, %88 ]
  %94 = phi i32 [ %114, %113 ], [ %85, %88 ]
  %95 = phi i64 [ %110, %113 ], [ 0, %88 ]
  %96 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %95
  %97 = load i8**, i8*** %96, align 8
  %98 = load i32, i32* %21, align 8
  %99 = icmp slt i32 %94, %93
  br i1 %99, label %100, label %108

100:                                              ; preds = %91
  %101 = add nsw i32 %94, -1
  br label %102

102:                                              ; preds = %102, %100
  %103 = phi i32 [ %94, %100 ], [ %104, %102 ]
  tail call void @jcopy_sample_rows(i8** %97, i32 %101, i8** %97, i32 %103, i32 1, i32 %98) #3
  %104 = add i32 %103, 1
  %105 = icmp eq i32 %104, %93
  br i1 %105, label %106, label %102

106:                                              ; preds = %102
  %107 = load i32, i32* %20, align 4
  br label %108

108:                                              ; preds = %106, %91
  %109 = phi i32 [ %107, %106 ], [ %92, %91 ]
  %110 = add nuw nsw i64 %95, 1
  %111 = sext i32 %109 to i64
  %112 = icmp slt i64 %110, %111
  br i1 %112, label %113, label %116

113:                                              ; preds = %108
  %114 = load i32, i32* %18, align 4
  %115 = load i32, i32* %19, align 4
  br label %91

116:                                              ; preds = %108
  %117 = load i32, i32* %19, align 4
  br label %118

118:                                              ; preds = %88, %116
  %119 = phi i32 [ %117, %116 ], [ %86, %88 ]
  store i32 %119, i32* %18, align 4
  br label %124

120:                                              ; preds = %84, %73
  %121 = phi i32 [ %86, %84 ], [ %80, %73 ]
  %122 = phi i32 [ %85, %84 ], [ %77, %73 ]
  %123 = icmp eq i32 %122, %121
  br i1 %123, label %124, label %144

124:                                              ; preds = %118, %120
  %125 = load %struct.jpeg_downsampler*, %struct.jpeg_downsampler** %25, align 8
  %126 = getelementptr inbounds %struct.jpeg_downsampler, %struct.jpeg_downsampler* %125, i64 0, i32 1
  %127 = load void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)*, void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)** %126, align 8
  %128 = load i32, i32* %26, align 8
  %129 = load i32, i32* %5, align 4
  tail call void %127(%struct.jpeg_compress_struct* %0, i8*** %23, i32 %128, i8*** %4, i32 %129) #3
  %130 = load i32, i32* %5, align 4
  %131 = add i32 %130, 1
  store i32 %131, i32* %5, align 4
  %132 = load i32, i32* %11, align 4
  %133 = load i32, i32* %26, align 8
  %134 = add nsw i32 %133, %132
  %135 = icmp slt i32 %134, %13
  %136 = select i1 %135, i32 %134, i32 0
  store i32 %136, i32* %26, align 8
  %137 = load i32, i32* %18, align 4
  %138 = icmp slt i32 %137, %13
  br i1 %138, label %140, label %139

139:                                              ; preds = %124
  store i32 0, i32* %18, align 4
  br label %140

140:                                              ; preds = %124, %139
  %141 = phi i32 [ %137, %124 ], [ 0, %139 ]
  %142 = load i32, i32* %11, align 4
  %143 = add nsw i32 %142, %141
  store i32 %143, i32* %19, align 4
  br label %144

144:                                              ; preds = %140, %120
  %145 = load i32, i32* %5, align 4
  %146 = icmp ult i32 %145, %6
  br i1 %146, label %27, label %147

147:                                              ; preds = %144, %81, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @pre_process_data(%struct.jpeg_compress_struct*, i8**, i32* nocapture, i32, i8***, i32* nocapture, i32) #0 {
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 56
  %9 = bitcast %struct.jpeg_c_prep_controller** %8 to %struct.my_prep_controller**
  %10 = load %struct.my_prep_controller*, %struct.my_prep_controller** %9, align 8
  %11 = load i32, i32* %2, align 4
  %12 = icmp ult i32 %11, %3
  br i1 %12, label %13, label %138

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 42
  %15 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 3
  %16 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 59
  %17 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 0
  %18 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 2
  %19 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 13
  %20 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 7
  %21 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 60
  br label %22

22:                                               ; preds = %13, %135
  %23 = phi i32 [ %11, %13 ], [ %136, %135 ]
  %24 = load i32, i32* %5, align 4
  %25 = icmp ult i32 %24, %6
  br i1 %25, label %26, label %138

26:                                               ; preds = %22
  %27 = sub i32 %3, %23
  %28 = load i32, i32* %14, align 4
  %29 = load i32, i32* %15, align 4
  %30 = sub nsw i32 %28, %29
  %31 = icmp ult i32 %30, %27
  %32 = select i1 %31, i32 %30, i32 %27
  %33 = load %struct.jpeg_color_converter*, %struct.jpeg_color_converter** %16, align 8
  %34 = getelementptr inbounds %struct.jpeg_color_converter, %struct.jpeg_color_converter* %33, i64 0, i32 1
  %35 = load void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)*, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)** %34, align 8
  %36 = zext i32 %23 to i64
  %37 = getelementptr inbounds i8*, i8** %1, i64 %36
  tail call void %35(%struct.jpeg_compress_struct* %0, i8** %37, i8*** %17, i32 %29, i32 %32) #3
  %38 = load i32, i32* %2, align 4
  %39 = add i32 %38, %32
  store i32 %39, i32* %2, align 4
  %40 = load i32, i32* %15, align 4
  %41 = add nsw i32 %40, %32
  store i32 %41, i32* %15, align 4
  %42 = load i32, i32* %18, align 8
  %43 = sub i32 %42, %32
  store i32 %43, i32* %18, align 8
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %80

45:                                               ; preds = %26
  %46 = load i32, i32* %14, align 4
  %47 = icmp slt i32 %41, %46
  br i1 %47, label %48, label %80

48:                                               ; preds = %45
  %49 = load i32, i32* %19, align 4
  %50 = icmp sgt i32 %49, 0
  br i1 %50, label %51, label %78

51:                                               ; preds = %48, %73
  %52 = phi i32 [ %69, %73 ], [ %49, %48 ]
  %53 = phi i32 [ %75, %73 ], [ %46, %48 ]
  %54 = phi i32 [ %74, %73 ], [ %41, %48 ]
  %55 = phi i64 [ %70, %73 ], [ 0, %48 ]
  %56 = getelementptr inbounds %struct.my_prep_controller, %struct.my_prep_controller* %10, i64 0, i32 1, i64 %55
  %57 = load i8**, i8*** %56, align 8
  %58 = load i32, i32* %20, align 8
  %59 = icmp slt i32 %54, %53
  br i1 %59, label %60, label %68

60:                                               ; preds = %51
  %61 = add nsw i32 %54, -1
  br label %62

62:                                               ; preds = %62, %60
  %63 = phi i32 [ %54, %60 ], [ %64, %62 ]
  tail call void @jcopy_sample_rows(i8** %57, i32 %61, i8** %57, i32 %63, i32 1, i32 %58) #3
  %64 = add i32 %63, 1
  %65 = icmp eq i32 %64, %53
  br i1 %65, label %66, label %62

66:                                               ; preds = %62
  %67 = load i32, i32* %19, align 4
  br label %68

68:                                               ; preds = %66, %51
  %69 = phi i32 [ %67, %66 ], [ %52, %51 ]
  %70 = add nuw nsw i64 %55, 1
  %71 = sext i32 %69 to i64
  %72 = icmp slt i64 %70, %71
  br i1 %72, label %73, label %76

73:                                               ; preds = %68
  %74 = load i32, i32* %15, align 4
  %75 = load i32, i32* %14, align 4
  br label %51

76:                                               ; preds = %68
  %77 = load i32, i32* %14, align 4
  br label %78

78:                                               ; preds = %76, %48
  %79 = phi i32 [ %77, %76 ], [ %46, %48 ]
  store i32 %79, i32* %15, align 4
  br label %80

80:                                               ; preds = %78, %45, %26
  %81 = phi i32 [ %79, %78 ], [ %41, %45 ], [ %41, %26 ]
  %82 = load i32, i32* %14, align 4
  %83 = icmp eq i32 %81, %82
  br i1 %83, label %84, label %91

84:                                               ; preds = %80
  %85 = load %struct.jpeg_downsampler*, %struct.jpeg_downsampler** %21, align 8
  %86 = getelementptr inbounds %struct.jpeg_downsampler, %struct.jpeg_downsampler* %85, i64 0, i32 1
  %87 = load void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)*, void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)** %86, align 8
  %88 = load i32, i32* %5, align 4
  tail call void %87(%struct.jpeg_compress_struct* %0, i8*** %17, i32 0, i8*** %4, i32 %88) #3
  store i32 0, i32* %15, align 4
  %89 = load i32, i32* %5, align 4
  %90 = add i32 %89, 1
  store i32 %90, i32* %5, align 4
  br label %91

91:                                               ; preds = %84, %80
  %92 = load i32, i32* %18, align 8
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %135

94:                                               ; preds = %91
  %95 = load i32, i32* %5, align 4
  %96 = icmp ult i32 %95, %6
  br i1 %96, label %97, label %135

97:                                               ; preds = %94
  %98 = load i32, i32* %19, align 4
  %99 = icmp sgt i32 %98, 0
  br i1 %99, label %100, label %134

100:                                              ; preds = %97
  %101 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 15
  %102 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %101, align 8
  br label %103

103:                                              ; preds = %131, %100
  %104 = phi i32 [ %98, %100 ], [ %127, %131 ]
  %105 = phi i32 [ %95, %100 ], [ %133, %131 ]
  %106 = phi i64 [ 0, %100 ], [ %128, %131 ]
  %107 = phi %struct.jpeg_component_info* [ %102, %100 ], [ %132, %131 ]
  %108 = getelementptr inbounds i8**, i8*** %4, i64 %106
  %109 = load i8**, i8*** %108, align 8
  %110 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %107, i64 0, i32 7
  %111 = load i32, i32* %110, align 4
  %112 = shl i32 %111, 3
  %113 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %107, i64 0, i32 3
  %114 = load i32, i32* %113, align 4
  %115 = mul i32 %114, %105
  %116 = mul i32 %114, %6
  %117 = icmp slt i32 %115, %116
  br i1 %117, label %118, label %126

118:                                              ; preds = %103
  %119 = add nsw i32 %115, -1
  br label %120

120:                                              ; preds = %120, %118
  %121 = phi i32 [ %115, %118 ], [ %122, %120 ]
  tail call void @jcopy_sample_rows(i8** %109, i32 %119, i8** %109, i32 %121, i32 1, i32 %112) #3
  %122 = add i32 %121, 1
  %123 = icmp eq i32 %122, %116
  br i1 %123, label %124, label %120

124:                                              ; preds = %120
  %125 = load i32, i32* %19, align 4
  br label %126

126:                                              ; preds = %124, %103
  %127 = phi i32 [ %125, %124 ], [ %104, %103 ]
  %128 = add nuw nsw i64 %106, 1
  %129 = sext i32 %127 to i64
  %130 = icmp slt i64 %128, %129
  br i1 %130, label %131, label %134

131:                                              ; preds = %126
  %132 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %107, i64 1
  %133 = load i32, i32* %5, align 4
  br label %103

134:                                              ; preds = %126, %97
  store i32 %6, i32* %5, align 4
  br label %138

135:                                              ; preds = %94, %91
  %136 = load i32, i32* %2, align 4
  %137 = icmp ult i32 %136, %3
  br i1 %137, label %22, label %138

138:                                              ; preds = %22, %135, %7, %134
  ret void
}

declare void @jcopy_sample_rows(i8**, i32, i8**, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8, !3, !9}
!8 = distinct !{!8, !4}
!9 = distinct !{!9, !4}
!10 = !{!9}
!11 = !{!8}
!12 = !{!3, !9}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.isvectorized", i32 1}
!15 = distinct !{!15, !14}
