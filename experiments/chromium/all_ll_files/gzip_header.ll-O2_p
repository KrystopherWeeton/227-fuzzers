; ModuleID = '../../net/filter/gzip_header.cc'
source_filename = "../../net/filter/gzip_header.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.net::GZipHeader" = type { i32, i8, i16 }

@_ZN3net10GZipHeader5magicE = hidden local_unnamed_addr constant [2 x i8] c"\1F\8B", align 1

@_ZN3net10GZipHeaderC1Ev = hidden unnamed_addr alias void (%"class.net::GZipHeader"*), void (%"class.net::GZipHeader"*)* @_ZN3net10GZipHeaderC2Ev
@_ZN3net10GZipHeaderD1Ev = hidden unnamed_addr alias void (%"class.net::GZipHeader"*), void (%"class.net::GZipHeader"*)* @_ZN3net10GZipHeaderD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net10GZipHeaderC2Ev(%"class.net::GZipHeader"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::GZipHeader", %"class.net::GZipHeader"* %0, i64 0, i32 0
  store i32 0, i32* %2, align 4
  %3 = getelementptr inbounds %"class.net::GZipHeader", %"class.net::GZipHeader"* %0, i64 0, i32 1
  store i8 0, i8* %3, align 4
  %4 = getelementptr inbounds %"class.net::GZipHeader", %"class.net::GZipHeader"* %0, i64 0, i32 2
  store i16 0, i16* %4, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net10GZipHeader5ResetEv(%"class.net::GZipHeader"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::GZipHeader", %"class.net::GZipHeader"* %0, i64 0, i32 0
  store i32 0, i32* %2, align 4
  %3 = getelementptr inbounds %"class.net::GZipHeader", %"class.net::GZipHeader"* %0, i64 0, i32 1
  store i8 0, i8* %3, align 4
  %4 = getelementptr inbounds %"class.net::GZipHeader", %"class.net::GZipHeader"* %0, i64 0, i32 2
  store i16 0, i16* %4, align 2
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3net10GZipHeaderD2Ev(%"class.net::GZipHeader"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3net10GZipHeader8ReadMoreEPKciPS2_(%"class.net::GZipHeader"*, i8*, i32, i8** nocapture) local_unnamed_addr #2 align 2 {
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds i8, i8* %1, i64 %5
  %7 = icmp sgt i32 %2, 0
  %8 = getelementptr inbounds %"class.net::GZipHeader", %"class.net::GZipHeader"* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  br i1 %7, label %10, label %125

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.net::GZipHeader", %"class.net::GZipHeader"* %0, i64 0, i32 1
  %12 = ptrtoint i8* %6 to i64
  %13 = getelementptr inbounds %"class.net::GZipHeader", %"class.net::GZipHeader"* %0, i64 0, i32 2
  br label %14

14:                                               ; preds = %10, %121
  %15 = phi i32 [ %9, %10 ], [ %122, %121 ]
  %16 = phi i8* [ %1, %10 ], [ %123, %121 ]
  switch i32 %15, label %121 [
    i32 0, label %19
    i32 1, label %24
    i32 2, label %29
    i32 3, label %34
    i32 4, label %38
    i32 5, label %40
    i32 6, label %42
    i32 7, label %44
    i32 8, label %46
    i32 9, label %48
    i32 10, label %50
    i32 11, label %59
    i32 12, label %17
    i32 13, label %83
    i32 14, label %96
    i32 15, label %109
    i32 16, label %116
    i32 17, label %120
  ]

17:                                               ; preds = %14
  %18 = load i16, i16* %13, align 2
  br label %66

19:                                               ; preds = %14
  %20 = load i8, i8* %16, align 1
  %21 = icmp eq i8 %20, 31
  br i1 %21, label %22, label %134

22:                                               ; preds = %19
  %23 = getelementptr inbounds i8, i8* %16, i64 1
  store i32 1, i32* %8, align 4
  br label %121

24:                                               ; preds = %14
  %25 = load i8, i8* %16, align 1
  %26 = icmp eq i8 %25, -117
  br i1 %26, label %27, label %134

27:                                               ; preds = %24
  %28 = getelementptr inbounds i8, i8* %16, i64 1
  store i32 2, i32* %8, align 4
  br label %121

29:                                               ; preds = %14
  %30 = load i8, i8* %16, align 1
  %31 = icmp eq i8 %30, 8
  br i1 %31, label %32, label %134

32:                                               ; preds = %29
  %33 = getelementptr inbounds i8, i8* %16, i64 1
  store i32 3, i32* %8, align 4
  br label %121

34:                                               ; preds = %14
  %35 = load i8, i8* %16, align 1
  %36 = and i8 %35, 30
  store i8 %36, i8* %11, align 4
  %37 = getelementptr inbounds i8, i8* %16, i64 1
  store i32 4, i32* %8, align 4
  br label %121

38:                                               ; preds = %14
  %39 = getelementptr inbounds i8, i8* %16, i64 1
  store i32 5, i32* %8, align 4
  br label %121

40:                                               ; preds = %14
  %41 = getelementptr inbounds i8, i8* %16, i64 1
  store i32 6, i32* %8, align 4
  br label %121

42:                                               ; preds = %14
  %43 = getelementptr inbounds i8, i8* %16, i64 1
  store i32 7, i32* %8, align 4
  br label %121

44:                                               ; preds = %14
  %45 = getelementptr inbounds i8, i8* %16, i64 1
  store i32 8, i32* %8, align 4
  br label %121

46:                                               ; preds = %14
  %47 = getelementptr inbounds i8, i8* %16, i64 1
  store i32 9, i32* %8, align 4
  br label %121

48:                                               ; preds = %14
  %49 = getelementptr inbounds i8, i8* %16, i64 1
  store i32 10, i32* %8, align 4
  br label %121

50:                                               ; preds = %14
  %51 = load i8, i8* %11, align 4
  %52 = and i8 %51, 4
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %50
  store i32 13, i32* %8, align 4
  br label %121

55:                                               ; preds = %50
  %56 = load i8, i8* %16, align 1
  %57 = zext i8 %56 to i16
  store i16 %57, i16* %13, align 2
  %58 = getelementptr inbounds i8, i8* %16, i64 1
  store i32 11, i32* %8, align 4
  br label %121

59:                                               ; preds = %14
  %60 = load i8, i8* %16, align 1
  %61 = zext i8 %60 to i16
  %62 = shl nuw i16 %61, 8
  %63 = load i16, i16* %13, align 2
  %64 = add i16 %62, %63
  store i16 %64, i16* %13, align 2
  %65 = getelementptr inbounds i8, i8* %16, i64 1
  store i32 12, i32* %8, align 4
  br label %66

66:                                               ; preds = %17, %59
  %67 = phi i32 [ %15, %17 ], [ 12, %59 ]
  %68 = phi i16 [ %18, %17 ], [ %64, %59 ]
  %69 = phi i8* [ %16, %17 ], [ %65, %59 ]
  %70 = zext i16 %68 to i64
  %71 = ptrtoint i8* %69 to i64
  %72 = sub i64 %12, %71
  %73 = icmp slt i64 %72, %70
  %74 = select i1 %73, i64 %72, i64 %70
  %75 = and i64 %74, 65535
  %76 = getelementptr inbounds i8, i8* %69, i64 %75
  %77 = trunc i64 %74 to i16
  %78 = sub i16 %68, %77
  store i16 %78, i16* %13, align 2
  %79 = icmp eq i16 %78, 0
  br i1 %79, label %80, label %121

80:                                               ; preds = %66
  store i32 13, i32* %8, align 4
  %81 = load i8, i8* %11, align 4
  %82 = and i8 %81, -5
  store i8 %82, i8* %11, align 4
  br label %121

83:                                               ; preds = %14
  %84 = load i8, i8* %11, align 4
  %85 = and i8 %84, 8
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %87, label %88

87:                                               ; preds = %83
  store i32 14, i32* %8, align 4
  br label %121

88:                                               ; preds = %83
  %89 = ptrtoint i8* %16 to i64
  %90 = sub i64 %12, %89
  %91 = tail call i8* @memchr(i8* %16, i32 0, i64 %90) #4
  %92 = icmp eq i8* %91, null
  br i1 %92, label %125, label %93

93:                                               ; preds = %88
  %94 = getelementptr inbounds i8, i8* %91, i64 1
  %95 = and i8 %84, -9
  store i8 %95, i8* %11, align 4
  store i32 14, i32* %8, align 4
  br label %121

96:                                               ; preds = %14
  %97 = load i8, i8* %11, align 4
  %98 = and i8 %97, 16
  %99 = icmp eq i8 %98, 0
  br i1 %99, label %100, label %101

100:                                              ; preds = %96
  store i32 15, i32* %8, align 4
  br label %121

101:                                              ; preds = %96
  %102 = ptrtoint i8* %16 to i64
  %103 = sub i64 %12, %102
  %104 = tail call i8* @memchr(i8* %16, i32 0, i64 %103) #4
  %105 = icmp eq i8* %104, null
  br i1 %105, label %125, label %106

106:                                              ; preds = %101
  %107 = getelementptr inbounds i8, i8* %104, i64 1
  %108 = and i8 %97, -17
  store i8 %108, i8* %11, align 4
  store i32 15, i32* %8, align 4
  br label %121

109:                                              ; preds = %14
  %110 = load i8, i8* %11, align 4
  %111 = and i8 %110, 2
  %112 = icmp eq i8 %111, 0
  br i1 %112, label %113, label %114

113:                                              ; preds = %109
  store i32 17, i32* %8, align 4
  br label %121

114:                                              ; preds = %109
  %115 = getelementptr inbounds i8, i8* %16, i64 1
  store i32 16, i32* %8, align 4
  br label %121

116:                                              ; preds = %14
  %117 = getelementptr inbounds i8, i8* %16, i64 1
  %118 = load i8, i8* %11, align 4
  %119 = and i8 %118, -3
  store i8 %119, i8* %11, align 4
  store i32 17, i32* %8, align 4
  br label %121

120:                                              ; preds = %14
  store i8* %16, i8** %3, align 8
  br label %134

121:                                              ; preds = %66, %80, %106, %93, %14, %116, %114, %113, %100, %87, %55, %54, %48, %46, %44, %42, %40, %38, %34, %32, %27, %22
  %122 = phi i32 [ %15, %14 ], [ 17, %116 ], [ 16, %114 ], [ 17, %113 ], [ 15, %106 ], [ 15, %100 ], [ 14, %93 ], [ 14, %87 ], [ 11, %55 ], [ 13, %54 ], [ 10, %48 ], [ 9, %46 ], [ 8, %44 ], [ 7, %42 ], [ 6, %40 ], [ 5, %38 ], [ 4, %34 ], [ 3, %32 ], [ 2, %27 ], [ 1, %22 ], [ 13, %80 ], [ %67, %66 ]
  %123 = phi i8* [ %16, %14 ], [ %117, %116 ], [ %115, %114 ], [ %16, %113 ], [ %107, %106 ], [ %16, %100 ], [ %94, %93 ], [ %16, %87 ], [ %58, %55 ], [ %16, %54 ], [ %49, %48 ], [ %47, %46 ], [ %45, %44 ], [ %43, %42 ], [ %41, %40 ], [ %39, %38 ], [ %37, %34 ], [ %33, %32 ], [ %28, %27 ], [ %23, %22 ], [ %76, %80 ], [ %76, %66 ]
  %124 = icmp ult i8* %123, %6
  br i1 %124, label %14, label %125

125:                                              ; preds = %101, %88, %121, %4
  %126 = phi i8* [ %1, %4 ], [ %6, %101 ], [ %6, %88 ], [ %123, %121 ]
  %127 = phi i32 [ %9, %4 ], [ %15, %101 ], [ %15, %88 ], [ %122, %121 ]
  %128 = icmp sgt i32 %127, 9
  br i1 %128, label %129, label %134

129:                                              ; preds = %125
  %130 = getelementptr inbounds %"class.net::GZipHeader", %"class.net::GZipHeader"* %0, i64 0, i32 1
  %131 = load i8, i8* %130, align 4
  %132 = icmp eq i8 %131, 0
  br i1 %132, label %133, label %134

133:                                              ; preds = %129
  store i8* %126, i8** %3, align 8
  br label %134

134:                                              ; preds = %29, %24, %19, %125, %129, %133, %120
  %135 = phi i32 [ 1, %120 ], [ 1, %133 ], [ 0, %129 ], [ 0, %125 ], [ 2, %19 ], [ 2, %24 ], [ 2, %29 ]
  ret i32 %135
}

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
