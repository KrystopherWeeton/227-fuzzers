; ModuleID = '../../third_party/boringssl/src/crypto/x509v3/v3_crld.c'
source_filename = "../../third_party/boringssl/src/crypto/x509v3/v3_crld.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ASN1_ITEM_st = type { i8, i64, %struct.ASN1_TEMPLATE_st*, i64, i8*, i64, i8* }
%struct.ASN1_TEMPLATE_st = type { i64, i64, i64, i8*, %struct.ASN1_ITEM_st* }
%struct.v3_ext_method = type { i32, i32, %struct.ASN1_ITEM_st*, i8* ()*, void (i8*)*, i8* (i8*, i8**, i64)*, i32 (i8*, i8**)*, {}*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, i8* }
%struct.stack_st_CONF_VALUE = type opaque
%struct.v3_ext_ctx = type { i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_req_st*, %struct.X509_crl_st*, %struct.X509V3_CONF_METHOD_st*, i8* }
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type { %struct.asn1_string_st*, %struct.stack_st_GENERAL_NAME*, %struct.asn1_string_st* }
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type { %struct.stack_st_GENERAL_SUBTREE*, %struct.stack_st_GENERAL_SUBTREE* }
%struct.stack_st_GENERAL_SUBTREE = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.X509_req_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type { %struct.DIST_POINT_NAME_st*, i32, i32, %struct.asn1_string_st*, i32, i32 }
%struct.DIST_POINT_NAME_st = type { i32, %union.anon.0, %struct.X509_name_st* }
%union.anon.0 = type { %struct.stack_st_GENERAL_NAME* }
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.X509V3_CONF_METHOD_st = type { i8* (i8*, i8*, i8*)*, %struct.stack_st_CONF_VALUE* (i8*, i8*)*, void (i8*, i8*)*, void (i8*, %struct.stack_st_CONF_VALUE*)* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%struct.ASN1_AUX_st = type { i8*, i32, i32, i32 (i32, %struct.ASN1_VALUE_st**, %struct.ASN1_ITEM_st*, i8*)*, i32 }
%struct.ASN1_VALUE_st = type opaque
%struct.BIT_STRING_BITNAME_st = type { i32, i8*, i8* }
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.DIST_POINT_st = type { %struct.DIST_POINT_NAME_st*, %struct.asn1_string_st*, %struct.stack_st_GENERAL_NAME*, i32 }
%struct.conf_value_st = type { i8*, i8*, i8* }
%struct.GENERAL_NAME_st = type { i32, %union.anon.1 }
%union.anon.1 = type { i8* }
%struct.X509_name_entry_st = type { %struct.asn1_object_st*, %struct.asn1_string_st*, i32, i32 }

@CRL_DIST_POINTS_it = hidden constant %struct.ASN1_ITEM_st { i8 0, i64 -1, %struct.ASN1_TEMPLATE_st* @CRL_DIST_POINTS_item_tt, i64 0, i8* null, i64 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i32 0, i32 0) }, align 8
@v3_crld = hidden local_unnamed_addr constant { i32, i32, %struct.ASN1_ITEM_st*, i8* ()*, void (i8*)*, i8* (i8*, i8**, i64)*, i32 (i8*, i8**)*, i8* (%struct.v3_ext_method*, i8*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, i8* } { i32 103, i32 0, %struct.ASN1_ITEM_st* @CRL_DIST_POINTS_it, i8* ()* null, void (i8*)* null, i8* (i8*, i8**, i64)* null, i32 (i8*, i8**)* null, i8* (%struct.v3_ext_method*, i8*)* null, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)* null, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)* null, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)* @v2i_crld, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)* @i2r_crldp, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)* null, i8* null }, align 8
@v3_freshest_crl = hidden local_unnamed_addr constant { i32, i32, %struct.ASN1_ITEM_st*, i8* ()*, void (i8*)*, i8* (i8*, i8**, i64)*, i32 (i8*, i8**)*, i8* (%struct.v3_ext_method*, i8*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, i8* } { i32 857, i32 0, %struct.ASN1_ITEM_st* @CRL_DIST_POINTS_it, i8* ()* null, void (i8*)* null, i8* (i8*, i8**, i64)* null, i32 (i8*, i8**)* null, i8* (%struct.v3_ext_method*, i8*)* null, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)* null, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)* null, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)* @v2i_crld, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)* @i2r_crldp, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)* null, i8* null }, align 8
@DIST_POINT_NAME_ch_tt = internal constant [2 x %struct.ASN1_TEMPLATE_st] [%struct.ASN1_TEMPLATE_st { i64 140, i64 0, i64 8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.27, i32 0, i32 0), %struct.ASN1_ITEM_st* @GENERAL_NAME_it }, %struct.ASN1_TEMPLATE_st { i64 138, i64 1, i64 8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.28, i32 0, i32 0), %struct.ASN1_ITEM_st* @X509_NAME_ENTRY_it }], align 16
@DIST_POINT_NAME_aux = internal constant %struct.ASN1_AUX_st { i8* null, i32 0, i32 0, i32 (i32, %struct.ASN1_VALUE_st**, %struct.ASN1_ITEM_st*, i8*)* @dpn_cb, i32 0 }, align 8
@.str = private unnamed_addr constant [16 x i8] c"DIST_POINT_NAME\00", align 1
@DIST_POINT_NAME_it = hidden constant %struct.ASN1_ITEM_st { i8 2, i64 0, %struct.ASN1_TEMPLATE_st* getelementptr inbounds ([2 x %struct.ASN1_TEMPLATE_st], [2 x %struct.ASN1_TEMPLATE_st]* @DIST_POINT_NAME_ch_tt, i32 0, i32 0), i64 2, i8* bitcast (%struct.ASN1_AUX_st* @DIST_POINT_NAME_aux to i8*), i64 24, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0) }, align 8
@DIST_POINT_seq_tt = internal constant [3 x %struct.ASN1_TEMPLATE_st] [%struct.ASN1_TEMPLATE_st { i64 145, i64 0, i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.29, i32 0, i32 0), %struct.ASN1_ITEM_st* @DIST_POINT_NAME_it }, %struct.ASN1_TEMPLATE_st { i64 137, i64 1, i64 8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), %struct.ASN1_ITEM_st* @ASN1_BIT_STRING_it }, %struct.ASN1_TEMPLATE_st { i64 141, i64 2, i64 16, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), %struct.ASN1_ITEM_st* @GENERAL_NAME_it }], align 16
@.str.1 = private unnamed_addr constant [11 x i8] c"DIST_POINT\00", align 1
@DIST_POINT_it = hidden constant %struct.ASN1_ITEM_st { i8 1, i64 16, %struct.ASN1_TEMPLATE_st* getelementptr inbounds ([3 x %struct.ASN1_TEMPLATE_st], [3 x %struct.ASN1_TEMPLATE_st]* @DIST_POINT_seq_tt, i32 0, i32 0), i64 3, i8* null, i64 32, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0) }, align 8
@CRL_DIST_POINTS_item_tt = internal constant %struct.ASN1_TEMPLATE_st { i64 4, i64 0, i64 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.30, i32 0, i32 0), %struct.ASN1_ITEM_st* @DIST_POINT_it }, align 8
@.str.2 = private unnamed_addr constant [16 x i8] c"CRL_DIST_POINTS\00", align 1
@ISSUING_DIST_POINT_seq_tt = internal constant [6 x %struct.ASN1_TEMPLATE_st] [%struct.ASN1_TEMPLATE_st { i64 145, i64 0, i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.29, i32 0, i32 0), %struct.ASN1_ITEM_st* @DIST_POINT_NAME_it }, %struct.ASN1_TEMPLATE_st { i64 137, i64 1, i64 8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.31, i32 0, i32 0), %struct.ASN1_ITEM_st* @ASN1_FBOOLEAN_it }, %struct.ASN1_TEMPLATE_st { i64 137, i64 2, i64 12, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.32, i32 0, i32 0), %struct.ASN1_ITEM_st* @ASN1_FBOOLEAN_it }, %struct.ASN1_TEMPLATE_st { i64 137, i64 3, i64 16, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.33, i32 0, i32 0), %struct.ASN1_ITEM_st* @ASN1_BIT_STRING_it }, %struct.ASN1_TEMPLATE_st { i64 137, i64 4, i64 24, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.34, i32 0, i32 0), %struct.ASN1_ITEM_st* @ASN1_FBOOLEAN_it }, %struct.ASN1_TEMPLATE_st { i64 137, i64 5, i64 28, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i32 0, i32 0), %struct.ASN1_ITEM_st* @ASN1_FBOOLEAN_it }], align 16
@.str.3 = private unnamed_addr constant [19 x i8] c"ISSUING_DIST_POINT\00", align 1
@ISSUING_DIST_POINT_it = hidden constant %struct.ASN1_ITEM_st { i8 1, i64 16, %struct.ASN1_TEMPLATE_st* getelementptr inbounds ([6 x %struct.ASN1_TEMPLATE_st], [6 x %struct.ASN1_TEMPLATE_st]* @ISSUING_DIST_POINT_seq_tt, i32 0, i32 0), i64 6, i8* null, i64 32, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0) }, align 8
@v3_idp = hidden local_unnamed_addr constant { i32, i32, %struct.ASN1_ITEM_st*, i8* ()*, void (i8*)*, i8* (i8*, i8**, i64)*, i32 (i8*, i8**)*, i8* (%struct.v3_ext_method*, i8*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, i8* } { i32 770, i32 4, %struct.ASN1_ITEM_st* @ISSUING_DIST_POINT_it, i8* ()* null, void (i8*)* null, i8* (i8*, i8**, i64)* null, i32 (i8*, i8**)* null, i8* (%struct.v3_ext_method*, i8*)* null, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)* null, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)* null, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)* @v2i_idp, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)* @i2r_idp, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)* null, i8* null }, align 8
@.str.4 = private unnamed_addr constant [56 x i8] c"../../third_party/boringssl/src/crypto/x509v3/v3_crld.c\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"reasons\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"CRLissuer\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"fullname\00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"relativename\00", align 1
@reason_flags = internal unnamed_addr constant [10 x %struct.BIT_STRING_BITNAME_st] [%struct.BIT_STRING_BITNAME_st { i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.14, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 3, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.18, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.20, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 6, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.22, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 7, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.24, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.26, i32 0, i32 0) }, %struct.BIT_STRING_BITNAME_st { i32 -1, i8* null, i8* null }], align 16
@.str.9 = private unnamed_addr constant [7 x i8] c"Unused\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"unused\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Key Compromise\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"keyCompromise\00", align 1
@.str.13 = private unnamed_addr constant [14 x i8] c"CA Compromise\00", align 1
@.str.14 = private unnamed_addr constant [13 x i8] c"CACompromise\00", align 1
@.str.15 = private unnamed_addr constant [20 x i8] c"Affiliation Changed\00", align 1
@.str.16 = private unnamed_addr constant [19 x i8] c"affiliationChanged\00", align 1
@.str.17 = private unnamed_addr constant [11 x i8] c"Superseded\00", align 1
@.str.18 = private unnamed_addr constant [11 x i8] c"superseded\00", align 1
@.str.19 = private unnamed_addr constant [23 x i8] c"Cessation Of Operation\00", align 1
@.str.20 = private unnamed_addr constant [21 x i8] c"cessationOfOperation\00", align 1
@.str.21 = private unnamed_addr constant [17 x i8] c"Certificate Hold\00", align 1
@.str.22 = private unnamed_addr constant [16 x i8] c"certificateHold\00", align 1
@.str.23 = private unnamed_addr constant [20 x i8] c"Privilege Withdrawn\00", align 1
@.str.24 = private unnamed_addr constant [19 x i8] c"privilegeWithdrawn\00", align 1
@.str.25 = private unnamed_addr constant [14 x i8] c"AA Compromise\00", align 1
@.str.26 = private unnamed_addr constant [13 x i8] c"AACompromise\00", align 1
@.str.27 = private unnamed_addr constant [14 x i8] c"name.fullname\00", align 1
@GENERAL_NAME_it = external constant %struct.ASN1_ITEM_st, align 8
@.str.28 = private unnamed_addr constant [18 x i8] c"name.relativename\00", align 1
@X509_NAME_ENTRY_it = external constant %struct.ASN1_ITEM_st, align 8
@.str.29 = private unnamed_addr constant [10 x i8] c"distpoint\00", align 1
@ASN1_BIT_STRING_it = external constant %struct.ASN1_ITEM_st, align 8
@.str.30 = private unnamed_addr constant [22 x i8] c"CRLDistributionPoints\00", align 1
@.str.31 = private unnamed_addr constant [9 x i8] c"onlyuser\00", align 1
@ASN1_FBOOLEAN_it = external constant %struct.ASN1_ITEM_st, align 8
@.str.32 = private unnamed_addr constant [7 x i8] c"onlyCA\00", align 1
@.str.33 = private unnamed_addr constant [16 x i8] c"onlysomereasons\00", align 1
@.str.34 = private unnamed_addr constant [12 x i8] c"indirectCRL\00", align 1
@.str.35 = private unnamed_addr constant [9 x i8] c"onlyattr\00", align 1
@.str.36 = private unnamed_addr constant [7 x i8] c"onlyAA\00", align 1
@.str.37 = private unnamed_addr constant [9 x i8] c"section:\00", align 1
@.str.38 = private unnamed_addr constant [7 x i8] c",name:\00", align 1
@.str.39 = private unnamed_addr constant [8 x i8] c",value:\00", align 1
@.str.40 = private unnamed_addr constant [27 x i8] c"%*sOnly User Certificates\0A\00", align 1
@.str.41 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.42 = private unnamed_addr constant [25 x i8] c"%*sOnly CA Certificates\0A\00", align 1
@.str.43 = private unnamed_addr constant [17 x i8] c"%*sIndirect CRL\0A\00", align 1
@.str.44 = private unnamed_addr constant [18 x i8] c"Only Some Reasons\00", align 1
@.str.45 = private unnamed_addr constant [32 x i8] c"%*sOnly Attribute Certificates\0A\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"%*s<EMPTY>\0A\00", align 1
@.str.47 = private unnamed_addr constant [15 x i8] c"%*sFull Name:\0A\00", align 1
@.str.48 = private unnamed_addr constant [22 x i8] c"%*sRelative Name:\0A%*s\00", align 1
@.str.49 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.50 = private unnamed_addr constant [4 x i8] c"%*s\00", align 1
@.str.51 = private unnamed_addr constant [11 x i8] c"%*s%s:\0A%*s\00", align 1
@.str.52 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.53 = private unnamed_addr constant [9 x i8] c"<EMPTY>\0A\00", align 1
@.str.54 = private unnamed_addr constant [8 x i8] c"Reasons\00", align 1
@.str.55 = private unnamed_addr constant [16 x i8] c"%*sCRL Issuer:\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define internal i8* @v2i_crld(%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*) #0 {
  %4 = tail call %struct.stack_st* @sk_new_null() #5
  %5 = bitcast %struct.stack_st* %4 to %struct.stack_st_DIST_POINT*
  %6 = icmp eq %struct.stack_st* %4, null
  br i1 %6, label %112, label %7

7:                                                ; preds = %3
  %8 = bitcast %struct.stack_st_CONF_VALUE* %2 to %struct.stack_st*
  %9 = tail call i64 @sk_num(%struct.stack_st* %8) #5
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %110, label %11

11:                                               ; preds = %7, %106
  %12 = phi i64 [ %107, %106 ], [ 0, %7 ]
  %13 = tail call i8* @sk_value(%struct.stack_st* %8, i64 %12) #5
  %14 = getelementptr inbounds i8, i8* %13, i64 16
  %15 = bitcast i8* %14 to i8**
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %18, label %75

18:                                               ; preds = %11
  %19 = getelementptr inbounds i8, i8* %13, i64 8
  %20 = bitcast i8* %19 to i8**
  %21 = load i8*, i8** %20, align 8
  %22 = tail call %struct.stack_st_CONF_VALUE* @X509V3_get_section(%struct.v3_ext_ctx* %1, i8* %21) #5
  %23 = icmp eq %struct.stack_st_CONF_VALUE* %22, null
  br i1 %23, label %115, label %24

24:                                               ; preds = %18
  %25 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @DIST_POINT_it) #5
  %26 = bitcast %struct.ASN1_VALUE_st* %25 to %struct.DIST_POINT_st*
  %27 = icmp eq %struct.ASN1_VALUE_st* %25, null
  br i1 %27, label %70, label %28

28:                                               ; preds = %24
  %29 = bitcast %struct.stack_st_CONF_VALUE* %22 to %struct.stack_st*
  %30 = tail call i64 @sk_num(%struct.stack_st* nonnull %29) #5
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %71, label %32

32:                                               ; preds = %28
  %33 = bitcast %struct.ASN1_VALUE_st* %25 to %struct.DIST_POINT_NAME_st**
  %34 = getelementptr inbounds %struct.DIST_POINT_st, %struct.DIST_POINT_st* %26, i64 0, i32 2
  %35 = getelementptr inbounds %struct.DIST_POINT_st, %struct.DIST_POINT_st* %26, i64 0, i32 1
  br label %36

36:                                               ; preds = %65, %32
  %37 = phi i64 [ 0, %32 ], [ %66, %65 ]
  %38 = tail call i8* @sk_value(%struct.stack_st* nonnull %29, i64 %37) #5
  %39 = bitcast i8* %38 to %struct.conf_value_st*
  %40 = tail call fastcc i32 @set_dist_point_name(%struct.DIST_POINT_NAME_st** nonnull %33, %struct.v3_ext_ctx* %1, %struct.conf_value_st* %39) #5
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %65, label %42

42:                                               ; preds = %36
  %43 = icmp slt i32 %40, 0
  br i1 %43, label %69, label %44

44:                                               ; preds = %42
  %45 = getelementptr inbounds i8, i8* %38, i64 8
  %46 = bitcast i8* %45 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = tail call i32 @strcmp(i8* %47, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0)) #6
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = getelementptr inbounds i8, i8* %38, i64 16
  %52 = bitcast i8* %51 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = tail call fastcc i32 @set_reasons(%struct.asn1_string_st** %35, i8* %53) #5
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %69, label %65

56:                                               ; preds = %44
  %57 = tail call i32 @strcmp(i8* %47, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0)) #6
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %65

59:                                               ; preds = %56
  %60 = getelementptr inbounds i8, i8* %38, i64 16
  %61 = bitcast i8* %60 to i8**
  %62 = load i8*, i8** %61, align 8
  %63 = tail call fastcc %struct.stack_st_GENERAL_NAME* @gnames_from_sectname(%struct.v3_ext_ctx* %1, i8* %62) #5
  store %struct.stack_st_GENERAL_NAME* %63, %struct.stack_st_GENERAL_NAME** %34, align 8
  %64 = icmp eq %struct.stack_st_GENERAL_NAME* %63, null
  br i1 %64, label %69, label %65

65:                                               ; preds = %59, %56, %50, %36
  %66 = add nuw i64 %37, 1
  %67 = tail call i64 @sk_num(%struct.stack_st* nonnull %29) #5
  %68 = icmp ult i64 %66, %67
  br i1 %68, label %36, label %71

69:                                               ; preds = %59, %50, %42
  tail call void @ASN1_item_free(%struct.ASN1_VALUE_st* nonnull %25, %struct.ASN1_ITEM_st* nonnull @DIST_POINT_it) #5
  br label %70

70:                                               ; preds = %24, %69
  tail call void @X509V3_section_free(%struct.v3_ext_ctx* %1, %struct.stack_st_CONF_VALUE* nonnull %22) #5
  br label %115

71:                                               ; preds = %65, %28
  tail call void @X509V3_section_free(%struct.v3_ext_ctx* %1, %struct.stack_st_CONF_VALUE* nonnull %22) #5
  %72 = bitcast %struct.ASN1_VALUE_st* %25 to i8*
  %73 = tail call i64 @sk_push(%struct.stack_st* nonnull %4, i8* nonnull %72) #5
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %105, label %106

75:                                               ; preds = %11
  %76 = bitcast i8* %13 to %struct.conf_value_st*
  %77 = tail call %struct.GENERAL_NAME_st* @v2i_GENERAL_NAME(%struct.v3_ext_method* %0, %struct.v3_ext_ctx* %1, %struct.conf_value_st* %76) #5
  %78 = icmp eq %struct.GENERAL_NAME_st* %77, null
  br i1 %78, label %115, label %79

79:                                               ; preds = %75
  %80 = tail call %struct.stack_st_GENERAL_NAME* @GENERAL_NAMES_new() #5
  %81 = icmp eq %struct.stack_st_GENERAL_NAME* %80, null
  br i1 %81, label %112, label %82

82:                                               ; preds = %79
  %83 = bitcast %struct.stack_st_GENERAL_NAME* %80 to %struct.stack_st*
  %84 = bitcast %struct.GENERAL_NAME_st* %77 to i8*
  %85 = tail call i64 @sk_push(%struct.stack_st* nonnull %83, i8* nonnull %84) #5
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %112, label %87

87:                                               ; preds = %82
  %88 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @DIST_POINT_it) #5
  %89 = icmp eq %struct.ASN1_VALUE_st* %88, null
  br i1 %89, label %112, label %90

90:                                               ; preds = %87
  %91 = bitcast %struct.ASN1_VALUE_st* %88 to i8*
  %92 = tail call i64 @sk_push(%struct.stack_st* nonnull %4, i8* nonnull %91) #5
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %95

94:                                               ; preds = %90
  tail call void @ASN1_item_free(%struct.ASN1_VALUE_st* nonnull %88, %struct.ASN1_ITEM_st* nonnull @DIST_POINT_it) #5
  br label %112

95:                                               ; preds = %90
  %96 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @DIST_POINT_NAME_it) #5
  %97 = bitcast %struct.ASN1_VALUE_st* %88 to %struct.ASN1_VALUE_st**
  store %struct.ASN1_VALUE_st* %96, %struct.ASN1_VALUE_st** %97, align 8
  %98 = icmp eq %struct.ASN1_VALUE_st* %96, null
  br i1 %98, label %112, label %99

99:                                               ; preds = %95
  %100 = bitcast %struct.ASN1_VALUE_st* %96 to %struct.DIST_POINT_NAME_st*
  %101 = bitcast %struct.ASN1_VALUE_st* %88 to %struct.DIST_POINT_NAME_st**
  %102 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %100, i64 0, i32 1, i32 0
  store %struct.stack_st_GENERAL_NAME* %80, %struct.stack_st_GENERAL_NAME** %102, align 8
  %103 = load %struct.DIST_POINT_NAME_st*, %struct.DIST_POINT_NAME_st** %101, align 8
  %104 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %103, i64 0, i32 0
  store i32 0, i32* %104, align 8
  br label %106

105:                                              ; preds = %71
  tail call void @ASN1_item_free(%struct.ASN1_VALUE_st* nonnull %25, %struct.ASN1_ITEM_st* nonnull @DIST_POINT_it) #5
  br label %112

106:                                              ; preds = %71, %99
  %107 = add nuw i64 %12, 1
  %108 = tail call i64 @sk_num(%struct.stack_st* %8) #5
  %109 = icmp ult i64 %107, %108
  br i1 %109, label %11, label %110

110:                                              ; preds = %106, %7
  %111 = bitcast %struct.stack_st_DIST_POINT* %5 to i8*
  br label %118

112:                                              ; preds = %95, %87, %82, %79, %94, %105, %3
  %113 = phi %struct.stack_st_GENERAL_NAME* [ null, %105 ], [ null, %3 ], [ %80, %94 ], [ null, %79 ], [ %80, %82 ], [ %80, %87 ], [ %80, %95 ]
  %114 = phi %struct.GENERAL_NAME_st* [ null, %105 ], [ null, %3 ], [ null, %94 ], [ %77, %79 ], [ %77, %82 ], [ null, %87 ], [ null, %95 ]
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.4, i64 0, i64 0), i32 336) #5
  br label %115

115:                                              ; preds = %18, %75, %70, %112
  %116 = phi %struct.stack_st_GENERAL_NAME* [ %113, %112 ], [ null, %70 ], [ null, %75 ], [ null, %18 ]
  %117 = phi %struct.GENERAL_NAME_st* [ %114, %112 ], [ null, %70 ], [ null, %75 ], [ null, %18 ]
  tail call void @GENERAL_NAME_free(%struct.GENERAL_NAME_st* %117) #5
  tail call void @GENERAL_NAMES_free(%struct.stack_st_GENERAL_NAME* %116) #5
  tail call void @sk_pop_free_ex(%struct.stack_st* %4, void (void (i8*)*, i8*)* nonnull @sk_DIST_POINT_call_free_func, void (i8*)* bitcast (void (%struct.DIST_POINT_st*)* @DIST_POINT_free to void (i8*)*)) #5
  br label %118

118:                                              ; preds = %115, %110
  %119 = phi i8* [ null, %115 ], [ %111, %110 ]
  ret i8* %119
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @i2r_crldp(%struct.v3_ext_method* nocapture readnone, i8*, %struct.bio_st*, i32) #0 {
  %5 = bitcast i8* %1 to %struct.stack_st_DIST_POINT*
  %6 = bitcast %struct.stack_st_DIST_POINT* %5 to %struct.stack_st*
  %7 = tail call i64 @sk_num(%struct.stack_st* %6) #5
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %35, label %9

9:                                                ; preds = %4, %31
  %10 = phi i64 [ %32, %31 ], [ 0, %4 ]
  %11 = tail call i32 @BIO_puts(%struct.bio_st* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.49, i64 0, i64 0)) #5
  %12 = tail call i8* @sk_value(%struct.stack_st* %6, i64 %10) #5
  %13 = bitcast i8* %12 to %struct.DIST_POINT_NAME_st**
  %14 = load %struct.DIST_POINT_NAME_st*, %struct.DIST_POINT_NAME_st** %13, align 8
  %15 = icmp eq %struct.DIST_POINT_NAME_st* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %9
  tail call fastcc void @print_distpoint(%struct.bio_st* %2, %struct.DIST_POINT_NAME_st* nonnull %14, i32 %3)
  br label %17

17:                                               ; preds = %9, %16
  %18 = getelementptr inbounds i8, i8* %12, i64 8
  %19 = bitcast i8* %18 to %struct.asn1_string_st**
  %20 = load %struct.asn1_string_st*, %struct.asn1_string_st** %19, align 8
  %21 = icmp eq %struct.asn1_string_st* %20, null
  br i1 %21, label %23, label %22

22:                                               ; preds = %17
  tail call fastcc void @print_reasons(%struct.bio_st* %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.54, i64 0, i64 0), %struct.asn1_string_st* nonnull %20, i32 %3)
  br label %23

23:                                               ; preds = %17, %22
  %24 = getelementptr inbounds i8, i8* %12, i64 16
  %25 = bitcast i8* %24 to %struct.stack_st_GENERAL_NAME**
  %26 = load %struct.stack_st_GENERAL_NAME*, %struct.stack_st_GENERAL_NAME** %25, align 8
  %27 = icmp eq %struct.stack_st_GENERAL_NAME* %26, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %23
  %29 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.55, i64 0, i64 0), i32 %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.41, i64 0, i64 0)) #5
  %30 = load %struct.stack_st_GENERAL_NAME*, %struct.stack_st_GENERAL_NAME** %25, align 8
  tail call fastcc void @print_gens(%struct.bio_st* %2, %struct.stack_st_GENERAL_NAME* %30, i32 %3)
  br label %31

31:                                               ; preds = %23, %28
  %32 = add nuw i64 %10, 1
  %33 = tail call i64 @sk_num(%struct.stack_st* %6) #5
  %34 = icmp ult i64 %32, %33
  br i1 %34, label %9, label %35

35:                                               ; preds = %31, %4
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.DIST_POINT_NAME_st* @d2i_DIST_POINT_NAME(%struct.DIST_POINT_NAME_st**, i8**, i64) local_unnamed_addr #0 {
  %4 = bitcast %struct.DIST_POINT_NAME_st** %0 to %struct.ASN1_VALUE_st**
  %5 = tail call %struct.ASN1_VALUE_st* @ASN1_item_d2i(%struct.ASN1_VALUE_st** %4, i8** %1, i64 %2, %struct.ASN1_ITEM_st* nonnull @DIST_POINT_NAME_it) #5
  %6 = bitcast %struct.ASN1_VALUE_st* %5 to %struct.DIST_POINT_NAME_st*
  ret %struct.DIST_POINT_NAME_st* %6
}

declare %struct.ASN1_VALUE_st* @ASN1_item_d2i(%struct.ASN1_VALUE_st**, i8**, i64, %struct.ASN1_ITEM_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @i2d_DIST_POINT_NAME(%struct.DIST_POINT_NAME_st*, i8**) local_unnamed_addr #0 {
  %3 = bitcast %struct.DIST_POINT_NAME_st* %0 to %struct.ASN1_VALUE_st*
  %4 = tail call i32 @ASN1_item_i2d(%struct.ASN1_VALUE_st* %3, i8** %1, %struct.ASN1_ITEM_st* nonnull @DIST_POINT_NAME_it) #5
  ret i32 %4
}

declare i32 @ASN1_item_i2d(%struct.ASN1_VALUE_st*, i8**, %struct.ASN1_ITEM_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.DIST_POINT_NAME_st* @DIST_POINT_NAME_new() local_unnamed_addr #0 {
  %1 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @DIST_POINT_NAME_it) #5
  %2 = bitcast %struct.ASN1_VALUE_st* %1 to %struct.DIST_POINT_NAME_st*
  ret %struct.DIST_POINT_NAME_st* %2
}

declare %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @DIST_POINT_NAME_free(%struct.DIST_POINT_NAME_st*) local_unnamed_addr #0 {
  %2 = bitcast %struct.DIST_POINT_NAME_st* %0 to %struct.ASN1_VALUE_st*
  tail call void @ASN1_item_free(%struct.ASN1_VALUE_st* %2, %struct.ASN1_ITEM_st* nonnull @DIST_POINT_NAME_it) #5
  ret void
}

declare void @ASN1_item_free(%struct.ASN1_VALUE_st*, %struct.ASN1_ITEM_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.DIST_POINT_st* @d2i_DIST_POINT(%struct.DIST_POINT_st**, i8**, i64) local_unnamed_addr #0 {
  %4 = bitcast %struct.DIST_POINT_st** %0 to %struct.ASN1_VALUE_st**
  %5 = tail call %struct.ASN1_VALUE_st* @ASN1_item_d2i(%struct.ASN1_VALUE_st** %4, i8** %1, i64 %2, %struct.ASN1_ITEM_st* nonnull @DIST_POINT_it) #5
  %6 = bitcast %struct.ASN1_VALUE_st* %5 to %struct.DIST_POINT_st*
  ret %struct.DIST_POINT_st* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @i2d_DIST_POINT(%struct.DIST_POINT_st*, i8**) local_unnamed_addr #0 {
  %3 = bitcast %struct.DIST_POINT_st* %0 to %struct.ASN1_VALUE_st*
  %4 = tail call i32 @ASN1_item_i2d(%struct.ASN1_VALUE_st* %3, i8** %1, %struct.ASN1_ITEM_st* nonnull @DIST_POINT_it) #5
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.DIST_POINT_st* @DIST_POINT_new() local_unnamed_addr #0 {
  %1 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @DIST_POINT_it) #5
  %2 = bitcast %struct.ASN1_VALUE_st* %1 to %struct.DIST_POINT_st*
  ret %struct.DIST_POINT_st* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @DIST_POINT_free(%struct.DIST_POINT_st*) #0 {
  %2 = bitcast %struct.DIST_POINT_st* %0 to %struct.ASN1_VALUE_st*
  tail call void @ASN1_item_free(%struct.ASN1_VALUE_st* %2, %struct.ASN1_ITEM_st* nonnull @DIST_POINT_it) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.stack_st_DIST_POINT* @d2i_CRL_DIST_POINTS(%struct.stack_st_DIST_POINT**, i8**, i64) local_unnamed_addr #0 {
  %4 = bitcast %struct.stack_st_DIST_POINT** %0 to %struct.ASN1_VALUE_st**
  %5 = tail call %struct.ASN1_VALUE_st* @ASN1_item_d2i(%struct.ASN1_VALUE_st** %4, i8** %1, i64 %2, %struct.ASN1_ITEM_st* nonnull @CRL_DIST_POINTS_it) #5
  %6 = bitcast %struct.ASN1_VALUE_st* %5 to %struct.stack_st_DIST_POINT*
  ret %struct.stack_st_DIST_POINT* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @i2d_CRL_DIST_POINTS(%struct.stack_st_DIST_POINT*, i8**) local_unnamed_addr #0 {
  %3 = bitcast %struct.stack_st_DIST_POINT* %0 to %struct.ASN1_VALUE_st*
  %4 = tail call i32 @ASN1_item_i2d(%struct.ASN1_VALUE_st* %3, i8** %1, %struct.ASN1_ITEM_st* nonnull @CRL_DIST_POINTS_it) #5
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.stack_st_DIST_POINT* @CRL_DIST_POINTS_new() local_unnamed_addr #0 {
  %1 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @CRL_DIST_POINTS_it) #5
  %2 = bitcast %struct.ASN1_VALUE_st* %1 to %struct.stack_st_DIST_POINT*
  ret %struct.stack_st_DIST_POINT* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @CRL_DIST_POINTS_free(%struct.stack_st_DIST_POINT*) local_unnamed_addr #0 {
  %2 = bitcast %struct.stack_st_DIST_POINT* %0 to %struct.ASN1_VALUE_st*
  tail call void @ASN1_item_free(%struct.ASN1_VALUE_st* %2, %struct.ASN1_ITEM_st* nonnull @CRL_DIST_POINTS_it) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.ISSUING_DIST_POINT_st* @d2i_ISSUING_DIST_POINT(%struct.ISSUING_DIST_POINT_st**, i8**, i64) local_unnamed_addr #0 {
  %4 = bitcast %struct.ISSUING_DIST_POINT_st** %0 to %struct.ASN1_VALUE_st**
  %5 = tail call %struct.ASN1_VALUE_st* @ASN1_item_d2i(%struct.ASN1_VALUE_st** %4, i8** %1, i64 %2, %struct.ASN1_ITEM_st* nonnull @ISSUING_DIST_POINT_it) #5
  %6 = bitcast %struct.ASN1_VALUE_st* %5 to %struct.ISSUING_DIST_POINT_st*
  ret %struct.ISSUING_DIST_POINT_st* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @i2d_ISSUING_DIST_POINT(%struct.ISSUING_DIST_POINT_st*, i8**) local_unnamed_addr #0 {
  %3 = bitcast %struct.ISSUING_DIST_POINT_st* %0 to %struct.ASN1_VALUE_st*
  %4 = tail call i32 @ASN1_item_i2d(%struct.ASN1_VALUE_st* %3, i8** %1, %struct.ASN1_ITEM_st* nonnull @ISSUING_DIST_POINT_it) #5
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.ISSUING_DIST_POINT_st* @ISSUING_DIST_POINT_new() local_unnamed_addr #0 {
  %1 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @ISSUING_DIST_POINT_it) #5
  %2 = bitcast %struct.ASN1_VALUE_st* %1 to %struct.ISSUING_DIST_POINT_st*
  ret %struct.ISSUING_DIST_POINT_st* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ISSUING_DIST_POINT_free(%struct.ISSUING_DIST_POINT_st*) local_unnamed_addr #0 {
  %2 = bitcast %struct.ISSUING_DIST_POINT_st* %0 to %struct.ASN1_VALUE_st*
  tail call void @ASN1_item_free(%struct.ASN1_VALUE_st* %2, %struct.ASN1_ITEM_st* nonnull @ISSUING_DIST_POINT_it) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i8* @v2i_idp(%struct.v3_ext_method* nocapture readnone, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*) #0 {
  %4 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @ISSUING_DIST_POINT_it) #5
  %5 = bitcast %struct.ASN1_VALUE_st* %4 to %struct.ISSUING_DIST_POINT_st*
  %6 = icmp eq %struct.ASN1_VALUE_st* %4, null
  br i1 %6, label %75, label %7

7:                                                ; preds = %3
  %8 = bitcast %struct.stack_st_CONF_VALUE* %2 to %struct.stack_st*
  %9 = tail call i64 @sk_num(%struct.stack_st* %8) #5
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %73, label %11

11:                                               ; preds = %7
  %12 = bitcast %struct.ASN1_VALUE_st* %4 to %struct.DIST_POINT_NAME_st**
  %13 = getelementptr inbounds %struct.ISSUING_DIST_POINT_st, %struct.ISSUING_DIST_POINT_st* %5, i64 0, i32 3
  %14 = getelementptr inbounds %struct.ISSUING_DIST_POINT_st, %struct.ISSUING_DIST_POINT_st* %5, i64 0, i32 4
  %15 = getelementptr inbounds %struct.ISSUING_DIST_POINT_st, %struct.ISSUING_DIST_POINT_st* %5, i64 0, i32 5
  %16 = getelementptr inbounds %struct.ISSUING_DIST_POINT_st, %struct.ISSUING_DIST_POINT_st* %5, i64 0, i32 2
  %17 = getelementptr inbounds %struct.ISSUING_DIST_POINT_st, %struct.ISSUING_DIST_POINT_st* %5, i64 0, i32 1
  br label %18

18:                                               ; preds = %11, %69
  %19 = phi i64 [ 0, %11 ], [ %70, %69 ]
  %20 = tail call i8* @sk_value(%struct.stack_st* %8, i64 %19) #5
  %21 = bitcast i8* %20 to %struct.conf_value_st*
  %22 = getelementptr inbounds i8, i8* %20, i64 8
  %23 = bitcast i8* %22 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds i8, i8* %20, i64 16
  %26 = bitcast i8* %25 to i8**
  %27 = load i8*, i8** %26, align 8
  %28 = tail call fastcc i32 @set_dist_point_name(%struct.DIST_POINT_NAME_st** nonnull %12, %struct.v3_ext_ctx* %1, %struct.conf_value_st* %21)
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %69, label %30

30:                                               ; preds = %18
  %31 = icmp slt i32 %28, 0
  br i1 %31, label %76, label %32

32:                                               ; preds = %30
  %33 = tail call i32 @strcmp(i8* %24, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.31, i64 0, i64 0)) #6
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %32
  %36 = tail call i32 @X509V3_get_value_bool(%struct.conf_value_st* %21, i32* %17) #5
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %76, label %69

38:                                               ; preds = %32
  %39 = tail call i32 @strcmp(i8* %24, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.32, i64 0, i64 0)) #6
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %38
  %42 = tail call i32 @X509V3_get_value_bool(%struct.conf_value_st* %21, i32* %16) #5
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %76, label %69

44:                                               ; preds = %38
  %45 = tail call i32 @strcmp(i8* %24, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.36, i64 0, i64 0)) #6
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %44
  %48 = tail call i32 @X509V3_get_value_bool(%struct.conf_value_st* %21, i32* %15) #5
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %76, label %69

50:                                               ; preds = %44
  %51 = tail call i32 @strcmp(i8* %24, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.34, i64 0, i64 0)) #6
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %56

53:                                               ; preds = %50
  %54 = tail call i32 @X509V3_get_value_bool(%struct.conf_value_st* %21, i32* %14) #5
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %76, label %69

56:                                               ; preds = %50
  %57 = tail call i32 @strcmp(i8* %24, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.33, i64 0, i64 0)) #6
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %56
  %60 = tail call fastcc i32 @set_reasons(%struct.asn1_string_st** %13, i8* %27)
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %76, label %69

62:                                               ; preds = %56
  %63 = bitcast i8* %22 to i8**
  %64 = bitcast i8* %25 to i8**
  tail call void @ERR_put_error(i32 20, i32 0, i32 123, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.4, i64 0, i64 0), i32 450) #5
  %65 = bitcast i8* %20 to i8**
  %66 = load i8*, i8** %65, align 8
  %67 = load i8*, i8** %63, align 8
  %68 = load i8*, i8** %64, align 8
  tail call void (i32, ...) @ERR_add_error_data(i32 6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.37, i64 0, i64 0), i8* %66, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.38, i64 0, i64 0), i8* %67, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.39, i64 0, i64 0), i8* %68) #5
  br label %76

69:                                               ; preds = %59, %53, %47, %41, %35, %18
  %70 = add nuw i64 %19, 1
  %71 = tail call i64 @sk_num(%struct.stack_st* %8) #5
  %72 = icmp ult i64 %70, %71
  br i1 %72, label %18, label %73

73:                                               ; preds = %69, %7
  %74 = bitcast %struct.ASN1_VALUE_st* %4 to i8*
  br label %77

75:                                               ; preds = %3
  tail call void @ERR_put_error(i32 20, i32 0, i32 65, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.4, i64 0, i64 0), i32 458) #5
  br label %76

76:                                               ; preds = %59, %53, %47, %41, %35, %30, %75, %62
  tail call void @ASN1_item_free(%struct.ASN1_VALUE_st* %4, %struct.ASN1_ITEM_st* nonnull @ISSUING_DIST_POINT_it) #5
  br label %77

77:                                               ; preds = %76, %73
  %78 = phi i8* [ null, %76 ], [ %74, %73 ]
  ret i8* %78
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @i2r_idp(%struct.v3_ext_method* nocapture readnone, i8* nocapture readonly, %struct.bio_st*, i32) #0 {
  %5 = bitcast i8* %1 to %struct.DIST_POINT_NAME_st**
  %6 = load %struct.DIST_POINT_NAME_st*, %struct.DIST_POINT_NAME_st** %5, align 8
  %7 = icmp eq %struct.DIST_POINT_NAME_st* %6, null
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  tail call fastcc void @print_distpoint(%struct.bio_st* %2, %struct.DIST_POINT_NAME_st* nonnull %6, i32 %3)
  br label %9

9:                                                ; preds = %4, %8
  %10 = getelementptr inbounds i8, i8* %1, i64 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 8
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %9
  %15 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.40, i64 0, i64 0), i32 %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.41, i64 0, i64 0)) #5
  br label %16

16:                                               ; preds = %14, %9
  %17 = getelementptr inbounds i8, i8* %1, i64 12
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %16
  %22 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.42, i64 0, i64 0), i32 %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.41, i64 0, i64 0)) #5
  br label %23

23:                                               ; preds = %21, %16
  %24 = getelementptr inbounds i8, i8* %1, i64 24
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 8
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %23
  %29 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.43, i64 0, i64 0), i32 %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.41, i64 0, i64 0)) #5
  br label %30

30:                                               ; preds = %28, %23
  %31 = getelementptr inbounds i8, i8* %1, i64 16
  %32 = bitcast i8* %31 to %struct.asn1_string_st**
  %33 = load %struct.asn1_string_st*, %struct.asn1_string_st** %32, align 8
  %34 = icmp eq %struct.asn1_string_st* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %30
  tail call fastcc void @print_reasons(%struct.bio_st* %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.44, i64 0, i64 0), %struct.asn1_string_st* nonnull %33, i32 %3)
  br label %36

36:                                               ; preds = %30, %35
  %37 = getelementptr inbounds i8, i8* %1, i64 28
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %36
  %42 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.45, i64 0, i64 0), i32 %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.41, i64 0, i64 0)) #5
  br label %43

43:                                               ; preds = %41, %36
  %44 = load %struct.DIST_POINT_NAME_st*, %struct.DIST_POINT_NAME_st** %5, align 8
  %45 = icmp eq %struct.DIST_POINT_NAME_st* %44, null
  br i1 %45, label %46, label %63

46:                                               ; preds = %43
  %47 = load i32, i32* %11, align 8
  %48 = icmp slt i32 %47, 1
  br i1 %48, label %49, label %63

49:                                               ; preds = %46
  %50 = load i32, i32* %18, align 4
  %51 = icmp slt i32 %50, 1
  br i1 %51, label %52, label %63

52:                                               ; preds = %49
  %53 = load i32, i32* %25, align 8
  %54 = icmp slt i32 %53, 1
  br i1 %54, label %55, label %63

55:                                               ; preds = %52
  %56 = load %struct.asn1_string_st*, %struct.asn1_string_st** %32, align 8
  %57 = icmp eq %struct.asn1_string_st* %56, null
  br i1 %57, label %58, label %63

58:                                               ; preds = %55
  %59 = load i32, i32* %38, align 4
  %60 = icmp slt i32 %59, 1
  br i1 %60, label %61, label %63

61:                                               ; preds = %58
  %62 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0), i32 %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.41, i64 0, i64 0)) #5
  br label %63

63:                                               ; preds = %55, %43, %61, %58, %52, %49, %46
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @DIST_POINT_set_dpname(%struct.DIST_POINT_NAME_st*, %struct.X509_name_st*) local_unnamed_addr #0 {
  %3 = icmp eq %struct.DIST_POINT_NAME_st* %0, null
  br i1 %3, label %39, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %8, label %39

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %0, i64 0, i32 1
  %10 = bitcast %union.anon.0* %9 to %struct.stack_st**
  %11 = load %struct.stack_st*, %struct.stack_st** %10, align 8
  %12 = tail call %struct.X509_name_st* @X509_NAME_dup(%struct.X509_name_st* %1) #5
  %13 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %0, i64 0, i32 2
  store %struct.X509_name_st* %12, %struct.X509_name_st** %13, align 8
  %14 = icmp eq %struct.X509_name_st* %12, null
  br i1 %14, label %39, label %15

15:                                               ; preds = %8
  %16 = tail call i64 @sk_num(%struct.stack_st* %11) #5
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %33, label %21

18:                                               ; preds = %21
  %19 = tail call i64 @sk_num(%struct.stack_st* %11) #5
  %20 = icmp ult i64 %30, %19
  br i1 %20, label %21, label %33

21:                                               ; preds = %15, %18
  %22 = phi i64 [ %30, %18 ], [ 0, %15 ]
  %23 = tail call i8* @sk_value(%struct.stack_st* %11, i64 %22) #5
  %24 = bitcast i8* %23 to %struct.X509_name_entry_st*
  %25 = load %struct.X509_name_st*, %struct.X509_name_st** %13, align 8
  %26 = icmp eq i64 %22, 0
  %27 = zext i1 %26 to i32
  %28 = tail call i32 @X509_NAME_add_entry(%struct.X509_name_st* %25, %struct.X509_name_entry_st* %24, i32 -1, i32 %27) #5
  %29 = icmp eq i32 %28, 0
  %30 = add nuw i64 %22, 1
  br i1 %29, label %31, label %18

31:                                               ; preds = %21
  %32 = load %struct.X509_name_st*, %struct.X509_name_st** %13, align 8
  tail call void @X509_NAME_free(%struct.X509_name_st* %32) #5
  store %struct.X509_name_st* null, %struct.X509_name_st** %13, align 8
  br label %39

33:                                               ; preds = %18, %15
  %34 = load %struct.X509_name_st*, %struct.X509_name_st** %13, align 8
  %35 = tail call i32 @i2d_X509_NAME(%struct.X509_name_st* %34, i8** null) #5
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %33
  %38 = load %struct.X509_name_st*, %struct.X509_name_st** %13, align 8
  tail call void @X509_NAME_free(%struct.X509_name_st* %38) #5
  store %struct.X509_name_st* null, %struct.X509_name_st** %13, align 8
  br label %39

39:                                               ; preds = %33, %8, %2, %4, %37, %31
  %40 = phi i32 [ 0, %31 ], [ 0, %37 ], [ 1, %4 ], [ 1, %2 ], [ 0, %8 ], [ 1, %33 ]
  ret i32 %40
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare %struct.X509_name_st* @X509_NAME_dup(%struct.X509_name_st*) local_unnamed_addr #1

declare i32 @X509_NAME_add_entry(%struct.X509_name_st*, %struct.X509_name_entry_st*, i32, i32) local_unnamed_addr #1

declare void @X509_NAME_free(%struct.X509_name_st*) local_unnamed_addr #1

declare i32 @i2d_X509_NAME(%struct.X509_name_st*, i8**) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare %struct.stack_st_CONF_VALUE* @X509V3_get_section(%struct.v3_ext_ctx*, i8*) local_unnamed_addr #1

declare void @X509V3_section_free(%struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*) local_unnamed_addr #1

declare %struct.GENERAL_NAME_st* @v2i_GENERAL_NAME(%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.conf_value_st*) local_unnamed_addr #1

declare %struct.stack_st_GENERAL_NAME* @GENERAL_NAMES_new() local_unnamed_addr #1

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

declare void @GENERAL_NAME_free(%struct.GENERAL_NAME_st*) #1

declare void @GENERAL_NAMES_free(%struct.stack_st_GENERAL_NAME*) local_unnamed_addr #1

declare %struct.stack_st* @sk_new_null() local_unnamed_addr #1

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #1

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @set_dist_point_name(%struct.DIST_POINT_NAME_st** nocapture, %struct.v3_ext_ctx*, %struct.conf_value_st* nocapture readonly) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %2, i64 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = tail call i32 @strncmp(i8* %5, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0), i64 9) #6
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %2, i64 0, i32 2
  %10 = load i8*, i8** %9, align 8
  %11 = tail call fastcc %struct.stack_st_GENERAL_NAME* @gnames_from_sectname(%struct.v3_ext_ctx* %1, i8* %10)
  %12 = icmp eq %struct.stack_st_GENERAL_NAME* %11, null
  br i1 %12, label %72, label %43

13:                                               ; preds = %3
  %14 = tail call i32 @strcmp(i8* %5, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i64 0, i64 0)) #6
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %72

16:                                               ; preds = %13
  %17 = tail call %struct.X509_name_st* @X509_NAME_new() #5
  %18 = icmp eq %struct.X509_name_st* %17, null
  br i1 %18, label %72, label %19

19:                                               ; preds = %16
  %20 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %2, i64 0, i32 2
  %21 = load i8*, i8** %20, align 8
  %22 = tail call %struct.stack_st_CONF_VALUE* @X509V3_get_section(%struct.v3_ext_ctx* %1, i8* %21) #5
  %23 = icmp eq %struct.stack_st_CONF_VALUE* %22, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %19
  tail call void @ERR_put_error(i32 20, i32 0, i32 153, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.4, i64 0, i64 0), i32 133) #5
  br label %72

25:                                               ; preds = %19
  %26 = tail call i32 @X509V3_NAME_from_section(%struct.X509_name_st* nonnull %17, %struct.stack_st_CONF_VALUE* nonnull %22, i64 4097) #5
  tail call void @X509V3_section_free(%struct.v3_ext_ctx* %1, %struct.stack_st_CONF_VALUE* nonnull %22) #5
  %27 = getelementptr inbounds %struct.X509_name_st, %struct.X509_name_st* %17, i64 0, i32 0
  %28 = load %struct.stack_st_X509_NAME_ENTRY*, %struct.stack_st_X509_NAME_ENTRY** %27, align 8
  store %struct.stack_st_X509_NAME_ENTRY* null, %struct.stack_st_X509_NAME_ENTRY** %27, align 8
  tail call void @X509_NAME_free(%struct.X509_name_st* nonnull %17) #5
  %29 = icmp eq i32 %26, 0
  br i1 %29, label %67, label %30

30:                                               ; preds = %25
  %31 = bitcast %struct.stack_st_X509_NAME_ENTRY* %28 to %struct.stack_st*
  %32 = tail call i64 @sk_num(%struct.stack_st* %31) #5
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %67, label %34

34:                                               ; preds = %30
  %35 = tail call i64 @sk_num(%struct.stack_st* %31) #5
  %36 = add i64 %35, -1
  %37 = tail call i8* @sk_value(%struct.stack_st* %31, i64 %36) #5
  %38 = getelementptr inbounds i8, i8* %37, i64 16
  %39 = bitcast i8* %38 to i32*
  %40 = load i32, i32* %39, align 8
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %43, label %42

42:                                               ; preds = %34
  tail call void @ERR_put_error(i32 20, i32 0, i32 122, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.4, i64 0, i64 0), i32 148) #5
  br label %67

43:                                               ; preds = %34, %8
  %44 = phi %struct.stack_st_GENERAL_NAME* [ %11, %8 ], [ null, %34 ]
  %45 = phi %struct.stack_st_X509_NAME_ENTRY* [ null, %8 ], [ %28, %34 ]
  %46 = load %struct.DIST_POINT_NAME_st*, %struct.DIST_POINT_NAME_st** %0, align 8
  %47 = icmp eq %struct.DIST_POINT_NAME_st* %46, null
  br i1 %47, label %49, label %48

48:                                               ; preds = %43
  tail call void @ERR_put_error(i32 20, i32 0, i32 106, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.4, i64 0, i64 0), i32 155) #5
  br label %63

49:                                               ; preds = %43
  %50 = tail call %struct.ASN1_VALUE_st* @ASN1_item_new(%struct.ASN1_ITEM_st* nonnull @DIST_POINT_NAME_it) #5
  %51 = bitcast %struct.DIST_POINT_NAME_st** %0 to %struct.ASN1_VALUE_st**
  store %struct.ASN1_VALUE_st* %50, %struct.ASN1_VALUE_st** %51, align 8
  %52 = icmp eq %struct.ASN1_VALUE_st* %50, null
  br i1 %52, label %63, label %53

53:                                               ; preds = %49
  %54 = icmp eq %struct.stack_st_GENERAL_NAME* %44, null
  %55 = bitcast %struct.ASN1_VALUE_st* %50 to i32*
  br i1 %54, label %59, label %56

56:                                               ; preds = %53
  store i32 0, i32* %55, align 8
  %57 = load %struct.DIST_POINT_NAME_st*, %struct.DIST_POINT_NAME_st** %0, align 8
  %58 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %57, i64 0, i32 1, i32 0
  store %struct.stack_st_GENERAL_NAME* %44, %struct.stack_st_GENERAL_NAME** %58, align 8
  br label %72

59:                                               ; preds = %53
  store i32 1, i32* %55, align 8
  %60 = load %struct.DIST_POINT_NAME_st*, %struct.DIST_POINT_NAME_st** %0, align 8
  %61 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %60, i64 0, i32 1
  %62 = bitcast %union.anon.0* %61 to %struct.stack_st_X509_NAME_ENTRY**
  store %struct.stack_st_X509_NAME_ENTRY* %45, %struct.stack_st_X509_NAME_ENTRY** %62, align 8
  br label %72

63:                                               ; preds = %49, %48
  %64 = icmp eq %struct.stack_st_GENERAL_NAME* %44, null
  br i1 %64, label %67, label %65

65:                                               ; preds = %63
  %66 = bitcast %struct.stack_st_GENERAL_NAME* %44 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %66, void (void (i8*)*, i8*)* nonnull @sk_GENERAL_NAME_call_free_func, void (i8*)* bitcast (void (%struct.GENERAL_NAME_st*)* @GENERAL_NAME_free to void (i8*)*)) #5
  br label %67

67:                                               ; preds = %30, %25, %42, %63, %65
  %68 = phi %struct.stack_st_X509_NAME_ENTRY* [ %45, %63 ], [ %45, %65 ], [ %28, %42 ], [ %28, %25 ], [ %28, %30 ]
  %69 = icmp eq %struct.stack_st_X509_NAME_ENTRY* %68, null
  br i1 %69, label %72, label %70

70:                                               ; preds = %67
  %71 = bitcast %struct.stack_st_X509_NAME_ENTRY* %68 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %71, void (void (i8*)*, i8*)* nonnull @sk_X509_NAME_ENTRY_call_free_func, void (i8*)* bitcast (void (%struct.X509_name_entry_st*)* @X509_NAME_ENTRY_free to void (i8*)*)) #5
  br label %72

72:                                               ; preds = %8, %16, %24, %70, %67, %56, %59, %13
  %73 = phi i32 [ 0, %13 ], [ 1, %59 ], [ 1, %56 ], [ -1, %67 ], [ -1, %70 ], [ -1, %24 ], [ -1, %16 ], [ -1, %8 ]
  ret i32 %73
}

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @set_reasons(%struct.asn1_string_st** nocapture, i8*) unnamed_addr #0 {
  %3 = tail call %struct.stack_st_CONF_VALUE* @X509V3_parse_list(i8* %1) #5
  %4 = icmp eq %struct.stack_st_CONF_VALUE* %3, null
  br i1 %4, label %46, label %5

5:                                                ; preds = %2
  %6 = load %struct.asn1_string_st*, %struct.asn1_string_st** %0, align 8
  %7 = icmp eq %struct.asn1_string_st* %6, null
  br i1 %7, label %8, label %46

8:                                                ; preds = %5
  %9 = bitcast %struct.stack_st_CONF_VALUE* %3 to %struct.stack_st*
  %10 = tail call i64 @sk_num(%struct.stack_st* nonnull %9) #5
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %44, label %15

12:                                               ; preds = %40
  %13 = tail call i64 @sk_num(%struct.stack_st* nonnull %9) #5
  %14 = icmp ult i64 %43, %13
  br i1 %14, label %15, label %44

15:                                               ; preds = %8, %12
  %16 = phi i64 [ %43, %12 ], [ 0, %8 ]
  %17 = tail call i8* @sk_value(%struct.stack_st* nonnull %9, i64 %16) #5
  %18 = getelementptr inbounds i8, i8* %17, i64 8
  %19 = bitcast i8* %18 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = load %struct.asn1_string_st*, %struct.asn1_string_st** %0, align 8
  %22 = icmp eq %struct.asn1_string_st* %21, null
  br i1 %22, label %23, label %26

23:                                               ; preds = %15
  %24 = tail call %struct.asn1_string_st* @ASN1_BIT_STRING_new() #5
  store %struct.asn1_string_st* %24, %struct.asn1_string_st** %0, align 8
  %25 = icmp eq %struct.asn1_string_st* %24, null
  br i1 %25, label %44, label %26

26:                                               ; preds = %23, %15
  %27 = phi %struct.asn1_string_st* [ %24, %23 ], [ %21, %15 ]
  %28 = tail call i32 @strcmp(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i64 0, i64 0), i8* %20) #6
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %37

30:                                               ; preds = %66, %63, %60, %57, %54, %51, %48, %37, %26
  %31 = phi i8** [ getelementptr inbounds ([10 x %struct.BIT_STRING_BITNAME_st], [10 x %struct.BIT_STRING_BITNAME_st]* @reason_flags, i64 0, i64 0, i32 1), %26 ], [ getelementptr inbounds ([10 x %struct.BIT_STRING_BITNAME_st], [10 x %struct.BIT_STRING_BITNAME_st]* @reason_flags, i64 0, i64 1, i32 1), %37 ], [ getelementptr inbounds ([10 x %struct.BIT_STRING_BITNAME_st], [10 x %struct.BIT_STRING_BITNAME_st]* @reason_flags, i64 0, i64 2, i32 1), %48 ], [ getelementptr inbounds ([10 x %struct.BIT_STRING_BITNAME_st], [10 x %struct.BIT_STRING_BITNAME_st]* @reason_flags, i64 0, i64 3, i32 1), %51 ], [ getelementptr inbounds ([10 x %struct.BIT_STRING_BITNAME_st], [10 x %struct.BIT_STRING_BITNAME_st]* @reason_flags, i64 0, i64 4, i32 1), %54 ], [ getelementptr inbounds ([10 x %struct.BIT_STRING_BITNAME_st], [10 x %struct.BIT_STRING_BITNAME_st]* @reason_flags, i64 0, i64 5, i32 1), %57 ], [ getelementptr inbounds ([10 x %struct.BIT_STRING_BITNAME_st], [10 x %struct.BIT_STRING_BITNAME_st]* @reason_flags, i64 0, i64 6, i32 1), %60 ], [ getelementptr inbounds ([10 x %struct.BIT_STRING_BITNAME_st], [10 x %struct.BIT_STRING_BITNAME_st]* @reason_flags, i64 0, i64 7, i32 1), %63 ], [ getelementptr inbounds ([10 x %struct.BIT_STRING_BITNAME_st], [10 x %struct.BIT_STRING_BITNAME_st]* @reason_flags, i64 0, i64 8, i32 1), %66 ]
  %32 = phi %struct.BIT_STRING_BITNAME_st* [ getelementptr inbounds ([10 x %struct.BIT_STRING_BITNAME_st], [10 x %struct.BIT_STRING_BITNAME_st]* @reason_flags, i64 0, i64 0), %26 ], [ getelementptr inbounds ([10 x %struct.BIT_STRING_BITNAME_st], [10 x %struct.BIT_STRING_BITNAME_st]* @reason_flags, i64 0, i64 1), %37 ], [ getelementptr inbounds ([10 x %struct.BIT_STRING_BITNAME_st], [10 x %struct.BIT_STRING_BITNAME_st]* @reason_flags, i64 0, i64 2), %48 ], [ getelementptr inbounds ([10 x %struct.BIT_STRING_BITNAME_st], [10 x %struct.BIT_STRING_BITNAME_st]* @reason_flags, i64 0, i64 3), %51 ], [ getelementptr inbounds ([10 x %struct.BIT_STRING_BITNAME_st], [10 x %struct.BIT_STRING_BITNAME_st]* @reason_flags, i64 0, i64 4), %54 ], [ getelementptr inbounds ([10 x %struct.BIT_STRING_BITNAME_st], [10 x %struct.BIT_STRING_BITNAME_st]* @reason_flags, i64 0, i64 5), %57 ], [ getelementptr inbounds ([10 x %struct.BIT_STRING_BITNAME_st], [10 x %struct.BIT_STRING_BITNAME_st]* @reason_flags, i64 0, i64 6), %60 ], [ getelementptr inbounds ([10 x %struct.BIT_STRING_BITNAME_st], [10 x %struct.BIT_STRING_BITNAME_st]* @reason_flags, i64 0, i64 7), %63 ], [ getelementptr inbounds ([10 x %struct.BIT_STRING_BITNAME_st], [10 x %struct.BIT_STRING_BITNAME_st]* @reason_flags, i64 0, i64 8), %66 ]
  %33 = getelementptr inbounds %struct.BIT_STRING_BITNAME_st, %struct.BIT_STRING_BITNAME_st* %32, i64 0, i32 0
  %34 = load i32, i32* %33, align 8
  %35 = tail call i32 @ASN1_BIT_STRING_set_bit(%struct.asn1_string_st* nonnull %27, i32 %34, i32 1) #5
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %44, label %40

37:                                               ; preds = %26
  %38 = tail call i32 @strcmp(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i64 0, i64 0), i8* %20) #6
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %30, label %48

40:                                               ; preds = %30
  %41 = load i8*, i8** %31, align 8
  %42 = icmp eq i8* %41, null
  %43 = add nuw i64 %16, 1
  br i1 %42, label %44, label %12

44:                                               ; preds = %66, %23, %40, %30, %12, %8
  %45 = phi i32 [ 1, %8 ], [ 0, %66 ], [ 0, %23 ], [ 0, %40 ], [ 0, %30 ], [ 1, %12 ]
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %9, void (void (i8*)*, i8*)* nonnull @sk_CONF_VALUE_call_free_func, void (i8*)* bitcast (void (%struct.conf_value_st*)* @X509V3_conf_free to void (i8*)*)) #5
  br label %46

46:                                               ; preds = %5, %2, %44
  %47 = phi i32 [ %45, %44 ], [ 0, %2 ], [ 0, %5 ]
  ret i32 %47

48:                                               ; preds = %37
  %49 = tail call i32 @strcmp(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.14, i64 0, i64 0), i8* %20) #6
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %30, label %51

51:                                               ; preds = %48
  %52 = tail call i32 @strcmp(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i64 0, i64 0), i8* %20) #6
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %30, label %54

54:                                               ; preds = %51
  %55 = tail call i32 @strcmp(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.18, i64 0, i64 0), i8* %20) #6
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %30, label %57

57:                                               ; preds = %54
  %58 = tail call i32 @strcmp(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.20, i64 0, i64 0), i8* %20) #6
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %30, label %60

60:                                               ; preds = %57
  %61 = tail call i32 @strcmp(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.22, i64 0, i64 0), i8* %20) #6
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %30, label %63

63:                                               ; preds = %60
  %64 = tail call i32 @strcmp(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.24, i64 0, i64 0), i8* %20) #6
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %30, label %66

66:                                               ; preds = %63
  %67 = tail call i32 @strcmp(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.26, i64 0, i64 0), i8* %20) #6
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %30, label %44
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %struct.stack_st_GENERAL_NAME* @gnames_from_sectname(%struct.v3_ext_ctx*, i8*) unnamed_addr #0 {
  %3 = load i8, i8* %1, align 1
  %4 = icmp eq i8 %3, 64
  br i1 %4, label %5, label %8

5:                                                ; preds = %2
  %6 = getelementptr inbounds i8, i8* %1, i64 1
  %7 = tail call %struct.stack_st_CONF_VALUE* @X509V3_get_section(%struct.v3_ext_ctx* %0, i8* %6) #5
  br label %10

8:                                                ; preds = %2
  %9 = tail call %struct.stack_st_CONF_VALUE* @X509V3_parse_list(i8* %1) #5
  br label %10

10:                                               ; preds = %8, %5
  %11 = phi %struct.stack_st_CONF_VALUE* [ %7, %5 ], [ %9, %8 ]
  %12 = icmp eq %struct.stack_st_CONF_VALUE* %11, null
  br i1 %12, label %13, label %14

13:                                               ; preds = %10
  tail call void @ERR_put_error(i32 20, i32 0, i32 153, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.4, i64 0, i64 0), i32 104) #5
  br label %21

14:                                               ; preds = %10
  %15 = tail call %struct.stack_st_GENERAL_NAME* @v2i_GENERAL_NAMES(%struct.v3_ext_method* null, %struct.v3_ext_ctx* %0, %struct.stack_st_CONF_VALUE* nonnull %11) #5
  %16 = load i8, i8* %1, align 1
  %17 = icmp eq i8 %16, 64
  br i1 %17, label %18, label %19

18:                                               ; preds = %14
  tail call void @X509V3_section_free(%struct.v3_ext_ctx* %0, %struct.stack_st_CONF_VALUE* nonnull %11) #5
  br label %21

19:                                               ; preds = %14
  %20 = bitcast %struct.stack_st_CONF_VALUE* %11 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %20, void (void (i8*)*, i8*)* nonnull @sk_CONF_VALUE_call_free_func, void (i8*)* bitcast (void (%struct.conf_value_st*)* @X509V3_conf_free to void (i8*)*)) #5
  br label %21

21:                                               ; preds = %18, %19, %13
  %22 = phi %struct.stack_st_GENERAL_NAME* [ null, %13 ], [ %15, %19 ], [ %15, %18 ]
  ret %struct.stack_st_GENERAL_NAME* %22
}

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #3

declare %struct.X509_name_st* @X509_NAME_new() local_unnamed_addr #1

declare i32 @X509V3_NAME_from_section(%struct.X509_name_st*, %struct.stack_st_CONF_VALUE*, i64) local_unnamed_addr #1

declare void @X509_NAME_ENTRY_free(%struct.X509_name_entry_st*) #1

declare void @sk_pop_free_ex(%struct.stack_st*, void (void (i8*)*, i8*)*, void (i8*)*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_GENERAL_NAME_call_free_func(void (i8*)* nocapture, i8*) #4 {
  %3 = bitcast void (i8*)* %0 to void (%struct.GENERAL_NAME_st*)*
  %4 = bitcast i8* %1 to %struct.GENERAL_NAME_st*
  tail call void %3(%struct.GENERAL_NAME_st* %4) #5
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_X509_NAME_ENTRY_call_free_func(void (i8*)* nocapture, i8*) #4 {
  %3 = bitcast void (i8*)* %0 to void (%struct.X509_name_entry_st*)*
  %4 = bitcast i8* %1 to %struct.X509_name_entry_st*
  tail call void %3(%struct.X509_name_entry_st* %4) #5
  ret void
}

declare %struct.stack_st_CONF_VALUE* @X509V3_parse_list(i8*) local_unnamed_addr #1

declare %struct.asn1_string_st* @ASN1_BIT_STRING_new() local_unnamed_addr #1

declare i32 @ASN1_BIT_STRING_set_bit(%struct.asn1_string_st*, i32, i32) local_unnamed_addr #1

declare void @X509V3_conf_free(%struct.conf_value_st*) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_CONF_VALUE_call_free_func(void (i8*)* nocapture, i8*) #4 {
  %3 = bitcast void (i8*)* %0 to void (%struct.conf_value_st*)*
  %4 = bitcast i8* %1 to %struct.conf_value_st*
  tail call void %3(%struct.conf_value_st* %4) #5
  ret void
}

declare %struct.stack_st_GENERAL_NAME* @v2i_GENERAL_NAMES(%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*) local_unnamed_addr #1

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_DIST_POINT_call_free_func(void (i8*)* nocapture, i8*) #4 {
  %3 = bitcast void (i8*)* %0 to void (%struct.DIST_POINT_st*)*
  %4 = bitcast i8* %1 to %struct.DIST_POINT_st*
  tail call void %3(%struct.DIST_POINT_st* %4) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @dpn_cb(i32, %struct.ASN1_VALUE_st** nocapture readonly, %struct.ASN1_ITEM_st* nocapture readnone, i8* nocapture readnone) #0 {
  %5 = bitcast %struct.ASN1_VALUE_st** %1 to %struct.DIST_POINT_NAME_st**
  %6 = load %struct.DIST_POINT_NAME_st*, %struct.DIST_POINT_NAME_st** %5, align 8
  switch i32 %0, label %14 [
    i32 1, label %7
    i32 3, label %9
  ]

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %6, i64 0, i32 2
  store %struct.X509_name_st* null, %struct.X509_name_st** %8, align 8
  br label %14

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %6, i64 0, i32 2
  %11 = load %struct.X509_name_st*, %struct.X509_name_st** %10, align 8
  %12 = icmp eq %struct.X509_name_st* %11, null
  br i1 %12, label %14, label %13

13:                                               ; preds = %9
  tail call void @X509_NAME_free(%struct.X509_name_st* nonnull %11) #5
  br label %14

14:                                               ; preds = %9, %13, %4, %7
  ret i32 1
}

declare i32 @X509V3_get_value_bool(%struct.conf_value_st*, i32*) local_unnamed_addr #1

declare void @ERR_add_error_data(i32, ...) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @print_distpoint(%struct.bio_st*, %struct.DIST_POINT_NAME_st* nocapture readonly, i32) unnamed_addr #0 {
  %4 = alloca %struct.X509_name_st, align 8
  %5 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %3
  %9 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.47, i64 0, i64 0), i32 %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.41, i64 0, i64 0)) #5
  %10 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %1, i64 0, i32 1, i32 0
  %11 = load %struct.stack_st_GENERAL_NAME*, %struct.stack_st_GENERAL_NAME** %10, align 8
  tail call fastcc void @print_gens(%struct.bio_st* %0, %struct.stack_st_GENERAL_NAME* %11, i32 %2)
  br label %24

12:                                               ; preds = %3
  %13 = bitcast %struct.X509_name_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %13) #5
  %14 = getelementptr inbounds %struct.X509_name_st, %struct.X509_name_st* %4, i64 0, i32 1
  %15 = bitcast i32* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 32, i1 false)
  %16 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %1, i64 0, i32 1
  %17 = bitcast %union.anon.0* %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %struct.X509_name_st* %4 to i64*
  store i64 %18, i64* %19, align 8
  %20 = add nsw i32 %2, 2
  %21 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.48, i64 0, i64 0), i32 %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.41, i64 0, i64 0), i32 %20, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.41, i64 0, i64 0)) #5
  %22 = call i32 @X509_NAME_print_ex(%struct.bio_st* %0, %struct.X509_name_st* nonnull %4, i32 0, i64 8520479) #5
  %23 = call i32 @BIO_puts(%struct.bio_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.49, i64 0, i64 0)) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %13) #5
  br label %24

24:                                               ; preds = %12, %8
  ret void
}

declare i32 @BIO_printf(%struct.bio_st*, i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @print_reasons(%struct.bio_st*, i8*, %struct.asn1_string_st*, i32) unnamed_addr #0 {
  %5 = add nsw i32 %3, 2
  %6 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.51, i64 0, i64 0), i32 %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.41, i64 0, i64 0), i8* %1, i32 %5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.41, i64 0, i64 0)) #5
  br label %7

7:                                                ; preds = %4, %22
  %8 = phi i8** [ getelementptr inbounds ([10 x %struct.BIT_STRING_BITNAME_st], [10 x %struct.BIT_STRING_BITNAME_st]* @reason_flags, i64 0, i64 0, i32 1), %4 ], [ %25, %22 ]
  %9 = phi %struct.BIT_STRING_BITNAME_st* [ getelementptr inbounds ([10 x %struct.BIT_STRING_BITNAME_st], [10 x %struct.BIT_STRING_BITNAME_st]* @reason_flags, i64 0, i64 0), %4 ], [ %24, %22 ]
  %10 = phi i32 [ 1, %4 ], [ %23, %22 ]
  %11 = getelementptr inbounds %struct.BIT_STRING_BITNAME_st, %struct.BIT_STRING_BITNAME_st* %9, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = tail call i32 @ASN1_BIT_STRING_get_bit(%struct.asn1_string_st* %2, i32 %12) #5
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %7
  %16 = icmp eq i32 %10, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %15
  %18 = tail call i32 @BIO_puts(%struct.bio_st* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.52, i64 0, i64 0)) #5
  br label %19

19:                                               ; preds = %15, %17
  %20 = load i8*, i8** %8, align 8
  %21 = tail call i32 @BIO_puts(%struct.bio_st* %0, i8* %20) #5
  br label %22

22:                                               ; preds = %7, %19
  %23 = phi i32 [ 0, %19 ], [ %10, %7 ]
  %24 = getelementptr inbounds %struct.BIT_STRING_BITNAME_st, %struct.BIT_STRING_BITNAME_st* %9, i64 1
  %25 = getelementptr inbounds %struct.BIT_STRING_BITNAME_st, %struct.BIT_STRING_BITNAME_st* %9, i64 1, i32 1
  %26 = load i8*, i8** %25, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %28, label %7

28:                                               ; preds = %22
  %29 = icmp eq i32 %23, 0
  %30 = select i1 %29, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0)
  %31 = tail call i32 @BIO_puts(%struct.bio_st* %0, i8* %30) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @print_gens(%struct.bio_st*, %struct.stack_st_GENERAL_NAME*, i32) unnamed_addr #0 {
  %4 = bitcast %struct.stack_st_GENERAL_NAME* %1 to %struct.stack_st*
  %5 = tail call i64 @sk_num(%struct.stack_st* %4) #5
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %19, label %7

7:                                                ; preds = %3
  %8 = add nsw i32 %2, 2
  br label %9

9:                                                ; preds = %7, %9
  %10 = phi i64 [ 0, %7 ], [ %16, %9 ]
  %11 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.50, i64 0, i64 0), i32 %8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.41, i64 0, i64 0)) #5
  %12 = tail call i8* @sk_value(%struct.stack_st* %4, i64 %10) #5
  %13 = bitcast i8* %12 to %struct.GENERAL_NAME_st*
  %14 = tail call i32 @GENERAL_NAME_print(%struct.bio_st* %0, %struct.GENERAL_NAME_st* %13) #5
  %15 = tail call i32 @BIO_puts(%struct.bio_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.49, i64 0, i64 0)) #5
  %16 = add nuw i64 %10, 1
  %17 = tail call i64 @sk_num(%struct.stack_st* %4) #5
  %18 = icmp ult i64 %16, %17
  br i1 %18, label %9, label %19

19:                                               ; preds = %9, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @X509_NAME_print_ex(%struct.bio_st*, %struct.X509_name_st*, i32, i64) local_unnamed_addr #1

declare i32 @BIO_puts(%struct.bio_st*, i8*) local_unnamed_addr #1

declare i32 @GENERAL_NAME_print(%struct.bio_st*, %struct.GENERAL_NAME_st*) local_unnamed_addr #1

declare i32 @ASN1_BIT_STRING_get_bit(%struct.asn1_string_st*, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
