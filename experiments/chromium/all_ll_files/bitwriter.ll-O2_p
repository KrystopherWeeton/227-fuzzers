; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/bitwriter.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/bitwriter.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.vpx_writer = type { i32, i32, i32, i32, i8* }

@vpx_norm = external local_unnamed_addr constant [256 x i8], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_start_encode(%struct.vpx_writer* nocapture, i8*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 0
  %4 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 1
  %5 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 2
  %6 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 4
  store i8* %1, i8** %6, align 8
  %7 = bitcast %struct.vpx_writer* %0 to <4 x i32>*
  store <4 x i32> <i32 0, i32 255, i32 -24, i32 0>, <4 x i32>* %7, align 8
  %8 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 128), align 16
  %9 = zext i8 %8 to i32
  %10 = shl i32 128, %9
  %11 = add nsw i32 %9, -24
  %12 = icmp sgt i32 %11, -1
  br i1 %12, label %13, label %16

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 3
  store i32 1, i32* %14, align 4
  store i8 0, i8* %1, align 1
  %15 = add nsw i32 %9, -32
  br label %16

16:                                               ; preds = %2, %13
  %17 = phi i32 [ %15, %13 ], [ %11, %2 ]
  store i32 %17, i32* %5, align 8
  store i32 0, i32* %3, align 8
  store i32 %10, i32* %4, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_stop_encode(%struct.vpx_writer* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 2
  %3 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 0
  %5 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 3
  %6 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 8
  %9 = load i32, i32* %2, align 8
  br label %10

10:                                               ; preds = %69, %1
  %11 = phi i32 [ %9, %1 ], [ %70, %69 ]
  %12 = phi i32 [ %8, %1 ], [ %73, %69 ]
  %13 = phi i32 [ %7, %1 ], [ %23, %69 ]
  %14 = phi i32 [ 0, %1 ], [ %74, %69 ]
  %15 = shl i32 %13, 7
  %16 = add i32 %15, -128
  %17 = lshr i32 %16, 8
  %18 = add nuw nsw i32 %17, 1
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = shl i32 %18, %22
  %24 = add nsw i32 %11, %22
  %25 = icmp sgt i32 %24, -1
  br i1 %25, label %26, label %69

26:                                               ; preds = %10
  %27 = sub i32 0, %11
  %28 = xor i32 %11, -1
  %29 = shl i32 %12, %28
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %31, label %57

31:                                               ; preds = %26
  %32 = load i32, i32* %5, align 4
  %33 = add i32 %32, -1
  %34 = icmp sgt i32 %33, -1
  %35 = load i8*, i8** %6, align 8
  %36 = sext i32 %33 to i64
  %37 = getelementptr inbounds i8, i8* %35, i64 %36
  br i1 %34, label %38, label %53

38:                                               ; preds = %31, %45
  %39 = phi i8* [ %49, %45 ], [ %35, %31 ]
  %40 = phi i64 [ %52, %45 ], [ %36, %31 ]
  %41 = phi i8* [ %51, %45 ], [ %37, %31 ]
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, -1
  %44 = getelementptr inbounds i8, i8* %39, i64 %40
  br i1 %43, label %45, label %53

45:                                               ; preds = %38
  store i8 0, i8* %44, align 1
  %46 = trunc i64 %40 to i32
  %47 = add i32 %46, -1
  %48 = icmp sgt i32 %47, -1
  %49 = load i8*, i8** %6, align 8
  %50 = sext i32 %47 to i64
  %51 = getelementptr inbounds i8, i8* %49, i64 %50
  %52 = add nsw i64 %40, -1
  br i1 %48, label %38, label %53

53:                                               ; preds = %45, %38, %31
  %54 = phi i8* [ %37, %31 ], [ %51, %45 ], [ %44, %38 ]
  %55 = load i8, i8* %54, align 1
  %56 = add i8 %55, 1
  store i8 %56, i8* %54, align 1
  br label %57

57:                                               ; preds = %53, %26
  %58 = add i32 %11, 24
  %59 = lshr i32 %12, %58
  %60 = trunc i32 %59 to i8
  %61 = load i8*, i8** %6, align 8
  %62 = load i32, i32* %5, align 4
  %63 = add i32 %62, 1
  store i32 %63, i32* %5, align 4
  %64 = zext i32 %62 to i64
  %65 = getelementptr inbounds i8, i8* %61, i64 %64
  store i8 %60, i8* %65, align 1
  %66 = shl i32 %12, %27
  %67 = and i32 %66, 16777215
  %68 = add nsw i32 %24, -8
  br label %69

69:                                               ; preds = %10, %57
  %70 = phi i32 [ %68, %57 ], [ %24, %10 ]
  %71 = phi i32 [ %67, %57 ], [ %12, %10 ]
  %72 = phi i32 [ %24, %57 ], [ %22, %10 ]
  %73 = shl i32 %71, %72
  store i32 %70, i32* %2, align 8
  store i32 %73, i32* %4, align 8
  store i32 %23, i32* %3, align 4
  %74 = add nuw nsw i32 %14, 1
  %75 = icmp eq i32 %74, 32
  br i1 %75, label %76, label %10

76:                                               ; preds = %69
  %77 = load i8*, i8** %6, align 8
  %78 = load i32, i32* %5, align 4
  %79 = add i32 %78, -1
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds i8, i8* %77, i64 %80
  %82 = load i8, i8* %81, align 1
  %83 = and i8 %82, -32
  %84 = icmp eq i8 %83, -64
  br i1 %84, label %85, label %89

85:                                               ; preds = %76
  %86 = add i32 %78, 1
  store i32 %86, i32* %5, align 4
  %87 = zext i32 %78 to i64
  %88 = getelementptr inbounds i8, i8* %77, i64 %87
  store i8 0, i8* %88, align 1
  br label %89

89:                                               ; preds = %85, %76
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
