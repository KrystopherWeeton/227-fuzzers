; ModuleID = '../../third_party/skia/src/utils/SkFloatToDecimal.cpp'
source_filename = "../../third_party/skia/src/utils/SkFloatToDecimal.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@switch.table._Z16SkFloatToDecimalfPc = private unnamed_addr constant [16 x double] [double 1.000000e+00, double 1.000000e+01, double 1.000000e+02, double 1.000000e+03, double 1.000000e+04, double 1.000000e+05, double 1.000000e+06, double 1.000000e+07, double 1.000000e+08, double 1.000000e+09, double 1.000000e+10, double 1.000000e+11, double 1.000000e+12, double 1.000000e+13, double 1.000000e+14, double 1.000000e+15], align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_Z16SkFloatToDecimalfPc(float, i8*) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = alloca [9 x i8], align 1
  %5 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 0, i64 0
  %6 = fcmp oeq float %0, 0x7FF0000000000000
  %7 = select i1 %6, float 0x47EFFFFFE0000000, float %0
  %8 = fcmp oeq float %7, 0xFFF0000000000000
  %9 = select i1 %8, float 0xC7EFFFFFE0000000, float %7
  %10 = tail call float @llvm.fabs.f32(float %9) #4
  %11 = fcmp ueq float %10, 0x7FF0000000000000
  %12 = fcmp oeq float %9, 0.000000e+00
  %13 = or i1 %12, %11
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 48, i8* %1, align 1
  store i8 0, i8* %15, align 1
  br label %474

16:                                               ; preds = %2
  %17 = fcmp olt float %9, 0.000000e+00
  br i1 %17, label %18, label %20

18:                                               ; preds = %16
  store i8 45, i8* %1, align 1
  %19 = fsub float -0.000000e+00, %9
  br label %20

20:                                               ; preds = %18, %16
  %21 = phi float [ %19, %18 ], [ %9, %16 ]
  %22 = phi i64 [ 1, %18 ], [ 0, %16 ]
  %23 = getelementptr inbounds i8, i8* %1, i64 %22
  %24 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #5
  store i32 -1431655766, i32* %3, align 4
  %25 = call float @frexpf(float %21, i32* nonnull %3) #5
  %26 = load i32, i32* %3, align 4
  %27 = sitofp i32 %26 to double
  %28 = fmul double %27, 0x3FD34413509F79FF
  %29 = tail call double @llvm.floor.f64(double %28)
  %30 = fptosi double %29 to i32
  %31 = add i32 %30, -8
  %32 = sub i32 8, %30
  %33 = icmp ult i32 %32, 16
  br i1 %33, label %71, label %34

34:                                               ; preds = %20
  %35 = icmp sgt i32 %32, 15
  br i1 %35, label %36, label %54

36:                                               ; preds = %34
  %37 = sub i32 -7, %30
  %38 = and i32 %37, 1
  %39 = icmp eq i32 %38, 0
  %40 = select i1 %39, double 1.000000e+15, double 1.000000e+16
  %41 = ashr i32 %37, 1
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %75, label %43

43:                                               ; preds = %36, %43
  %44 = phi i32 [ %52, %43 ], [ %41, %36 ]
  %45 = phi double [ %51, %43 ], [ %40, %36 ]
  %46 = phi double [ %47, %43 ], [ 1.000000e+01, %36 ]
  %47 = fmul double %46, %46
  %48 = and i32 %44, 1
  %49 = icmp eq i32 %48, 0
  %50 = fmul double %45, %47
  %51 = select i1 %49, double %45, double %50
  %52 = ashr i32 %44, 1
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %75, label %43

54:                                               ; preds = %34
  %55 = and i32 %31, 1
  %56 = icmp eq i32 %55, 0
  %57 = select i1 %56, double 1.000000e+00, double 1.000000e-01
  %58 = ashr i32 %31, 1
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %75, label %60

60:                                               ; preds = %54, %60
  %61 = phi i32 [ %69, %60 ], [ %58, %54 ]
  %62 = phi double [ %68, %60 ], [ %57, %54 ]
  %63 = phi double [ %64, %60 ], [ 1.000000e-01, %54 ]
  %64 = fmul double %63, %63
  %65 = and i32 %61, 1
  %66 = icmp eq i32 %65, 0
  %67 = fmul double %62, %64
  %68 = select i1 %66, double %62, double %67
  %69 = ashr i32 %61, 1
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %75, label %60

71:                                               ; preds = %20
  %72 = sext i32 %32 to i64
  %73 = getelementptr inbounds [16 x double], [16 x double]* @switch.table._Z16SkFloatToDecimalfPc, i64 0, i64 %72
  %74 = load double, double* %73, align 8
  br label %75

75:                                               ; preds = %60, %43, %71, %36, %54
  %76 = phi double [ %40, %36 ], [ %57, %54 ], [ %74, %71 ], [ %51, %43 ], [ %68, %60 ]
  %77 = fpext float %21 to double
  %78 = fmul double %76, %77
  %79 = fadd double %78, 5.000000e-01
  %80 = fptosi double %79 to i32
  %81 = icmp sgt i32 %80, 167772159
  br i1 %81, label %82, label %88

82:                                               ; preds = %75
  %83 = add nsw i32 %30, -7
  %84 = fmul double %76, 1.000000e-01
  %85 = fmul double %84, %77
  %86 = fadd double %85, 5.000000e-01
  %87 = fptosi double %86 to i32
  br label %88

88:                                               ; preds = %82, %75
  %89 = phi i32 [ %83, %82 ], [ %31, %75 ]
  %90 = phi i32 [ %87, %82 ], [ %80, %75 ]
  %91 = srem i32 %90, 10
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %100

93:                                               ; preds = %88, %93
  %94 = phi i32 [ %96, %93 ], [ %90, %88 ]
  %95 = phi i32 [ %97, %93 ], [ %89, %88 ]
  %96 = sdiv i32 %94, 10
  %97 = add nsw i32 %95, 1
  %98 = srem i32 %96, 10
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %93, label %100

100:                                              ; preds = %93, %88
  %101 = phi i32 [ %89, %88 ], [ %97, %93 ]
  %102 = phi i32 [ %90, %88 ], [ %96, %93 ]
  %103 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 9, i8* nonnull %103) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %103, i8 -86, i64 9, i1 false)
  br label %104

104:                                              ; preds = %104, %100
  %105 = phi i64 [ %109, %104 ], [ 0, %100 ]
  %106 = phi i32 [ %111, %104 ], [ %102, %100 ]
  %107 = srem i32 %106, 10
  %108 = trunc i32 %107 to i8
  %109 = add nuw i64 %105, 1
  %110 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 0, i64 %105
  store i8 %108, i8* %110, align 1
  %111 = sdiv i32 %106, 10
  %112 = add i32 %106, 9
  %113 = icmp ugt i32 %112, 18
  br i1 %113, label %104, label %114

114:                                              ; preds = %104
  %115 = icmp sgt i32 %101, -1
  br i1 %115, label %116, label %268

116:                                              ; preds = %114
  %117 = shl i64 %109, 32
  %118 = ashr exact i64 %117, 32
  %119 = shl i64 %109, 32
  %120 = ashr exact i64 %119, 32
  %121 = icmp ult i64 %120, 32
  br i1 %121, label %206, label %122

122:                                              ; preds = %116
  %123 = shl i64 %109, 32
  %124 = ashr exact i64 %123, 32
  %125 = add nsw i64 %22, %124
  %126 = getelementptr i8, i8* %1, i64 %125
  %127 = getelementptr [9 x i8], [9 x i8]* %4, i64 0, i64 %124
  %128 = icmp ult i8* %23, %127
  %129 = icmp ult i8* %5, %126
  %130 = and i1 %128, %129
  br i1 %130, label %206, label %131

131:                                              ; preds = %122
  %132 = and i64 %120, -32
  %133 = sub nsw i64 %118, %132
  %134 = getelementptr i8, i8* %23, i64 %132
  %135 = add nsw i64 %132, -32
  %136 = lshr exact i64 %135, 5
  %137 = add nuw nsw i64 %136, 1
  %138 = and i64 %137, 1
  %139 = icmp eq i64 %135, 0
  br i1 %139, label %183, label %140

140:                                              ; preds = %131
  %141 = sub nuw nsw i64 %137, %138
  br label %142

142:                                              ; preds = %142, %140
  %143 = phi i64 [ 0, %140 ], [ %180, %142 ]
  %144 = phi i64 [ %141, %140 ], [ %181, %142 ]
  %145 = getelementptr i8, i8* %23, i64 %143
  %146 = xor i64 %143, -1
  %147 = add i64 %118, %146
  %148 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 0, i64 %147
  %149 = getelementptr inbounds i8, i8* %148, i64 -15
  %150 = bitcast i8* %149 to <16 x i8>*
  %151 = load <16 x i8>, <16 x i8>* %150, align 1, !alias.scope !2
  %152 = getelementptr inbounds i8, i8* %148, i64 -31
  %153 = bitcast i8* %152 to <16 x i8>*
  %154 = load <16 x i8>, <16 x i8>* %153, align 1, !alias.scope !2
  %155 = add <16 x i8> %151, <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>
  %156 = shufflevector <16 x i8> %155, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %157 = add <16 x i8> %154, <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>
  %158 = shufflevector <16 x i8> %157, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %159 = bitcast i8* %145 to <16 x i8>*
  store <16 x i8> %156, <16 x i8>* %159, align 1, !alias.scope !5, !noalias !2
  %160 = getelementptr i8, i8* %145, i64 16
  %161 = bitcast i8* %160 to <16 x i8>*
  store <16 x i8> %158, <16 x i8>* %161, align 1, !alias.scope !5, !noalias !2
  %162 = or i64 %143, 32
  %163 = getelementptr i8, i8* %23, i64 %162
  %164 = sub nuw nsw i64 -33, %143
  %165 = add i64 %118, %164
  %166 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 0, i64 %165
  %167 = getelementptr inbounds i8, i8* %166, i64 -15
  %168 = bitcast i8* %167 to <16 x i8>*
  %169 = load <16 x i8>, <16 x i8>* %168, align 1, !alias.scope !2
  %170 = getelementptr inbounds i8, i8* %166, i64 -31
  %171 = bitcast i8* %170 to <16 x i8>*
  %172 = load <16 x i8>, <16 x i8>* %171, align 1, !alias.scope !2
  %173 = add <16 x i8> %169, <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>
  %174 = shufflevector <16 x i8> %173, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %175 = add <16 x i8> %172, <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>
  %176 = shufflevector <16 x i8> %175, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %177 = bitcast i8* %163 to <16 x i8>*
  store <16 x i8> %174, <16 x i8>* %177, align 1, !alias.scope !5, !noalias !2
  %178 = getelementptr i8, i8* %163, i64 16
  %179 = bitcast i8* %178 to <16 x i8>*
  store <16 x i8> %176, <16 x i8>* %179, align 1, !alias.scope !5, !noalias !2
  %180 = add i64 %143, 64
  %181 = add i64 %144, -2
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %183, label %142, !llvm.loop !7

183:                                              ; preds = %142, %131
  %184 = phi i64 [ 0, %131 ], [ %180, %142 ]
  %185 = icmp eq i64 %138, 0
  br i1 %185, label %204, label %186

186:                                              ; preds = %183
  %187 = getelementptr i8, i8* %23, i64 %184
  %188 = xor i64 %184, -1
  %189 = add i64 %118, %188
  %190 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 0, i64 %189
  %191 = getelementptr inbounds i8, i8* %190, i64 -15
  %192 = bitcast i8* %191 to <16 x i8>*
  %193 = load <16 x i8>, <16 x i8>* %192, align 1, !alias.scope !2
  %194 = getelementptr inbounds i8, i8* %190, i64 -31
  %195 = bitcast i8* %194 to <16 x i8>*
  %196 = load <16 x i8>, <16 x i8>* %195, align 1, !alias.scope !2
  %197 = add <16 x i8> %193, <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>
  %198 = shufflevector <16 x i8> %197, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %199 = add <16 x i8> %196, <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>
  %200 = shufflevector <16 x i8> %199, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %201 = bitcast i8* %187 to <16 x i8>*
  store <16 x i8> %198, <16 x i8>* %201, align 1, !alias.scope !5, !noalias !2
  %202 = getelementptr i8, i8* %187, i64 16
  %203 = bitcast i8* %202 to <16 x i8>*
  store <16 x i8> %200, <16 x i8>* %203, align 1, !alias.scope !5, !noalias !2
  br label %204

204:                                              ; preds = %183, %186
  %205 = icmp eq i64 %120, %132
  br i1 %205, label %252, label %206

206:                                              ; preds = %204, %122, %116
  %207 = phi i64 [ %118, %122 ], [ %118, %116 ], [ %133, %204 ]
  %208 = phi i8* [ %23, %122 ], [ %23, %116 ], [ %134, %204 ]
  %209 = add nsw i64 %207, -1
  %210 = and i64 %207, 3
  %211 = icmp eq i64 %210, 0
  br i1 %211, label %223, label %212

212:                                              ; preds = %206, %212
  %213 = phi i64 [ %216, %212 ], [ %207, %206 ]
  %214 = phi i8* [ %220, %212 ], [ %208, %206 ]
  %215 = phi i64 [ %221, %212 ], [ %210, %206 ]
  %216 = add nsw i64 %213, -1
  %217 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 0, i64 %216
  %218 = load i8, i8* %217, align 1
  %219 = add i8 %218, 48
  %220 = getelementptr inbounds i8, i8* %214, i64 1
  store i8 %219, i8* %214, align 1
  %221 = add i64 %215, -1
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %223, label %212, !llvm.loop !9

223:                                              ; preds = %212, %206
  %224 = phi i8* [ undef, %206 ], [ %220, %212 ]
  %225 = phi i64 [ %207, %206 ], [ %216, %212 ]
  %226 = phi i8* [ %208, %206 ], [ %220, %212 ]
  %227 = icmp ult i64 %209, 3
  br i1 %227, label %252, label %228

228:                                              ; preds = %223, %228
  %229 = phi i64 [ %246, %228 ], [ %225, %223 ]
  %230 = phi i8* [ %250, %228 ], [ %226, %223 ]
  %231 = add nsw i64 %229, -1
  %232 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 0, i64 %231
  %233 = load i8, i8* %232, align 1
  %234 = add i8 %233, 48
  %235 = getelementptr inbounds i8, i8* %230, i64 1
  store i8 %234, i8* %230, align 1
  %236 = add nsw i64 %229, -2
  %237 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 0, i64 %236
  %238 = load i8, i8* %237, align 1
  %239 = add i8 %238, 48
  %240 = getelementptr inbounds i8, i8* %230, i64 2
  store i8 %239, i8* %235, align 1
  %241 = add nsw i64 %229, -3
  %242 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 0, i64 %241
  %243 = load i8, i8* %242, align 1
  %244 = add i8 %243, 48
  %245 = getelementptr inbounds i8, i8* %230, i64 3
  store i8 %244, i8* %240, align 1
  %246 = add nsw i64 %229, -4
  %247 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 0, i64 %246
  %248 = load i8, i8* %247, align 1
  %249 = add i8 %248, 48
  %250 = getelementptr inbounds i8, i8* %230, i64 4
  store i8 %249, i8* %245, align 1
  %251 = icmp eq i64 %246, 0
  br i1 %251, label %252, label %228, !llvm.loop !11

252:                                              ; preds = %223, %228, %204
  %253 = phi i8* [ %134, %204 ], [ %224, %223 ], [ %250, %228 ]
  %254 = icmp sgt i32 %101, 0
  br i1 %254, label %255, label %468

255:                                              ; preds = %252
  %256 = zext i32 %101 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %253, i8 48, i64 %256, i1 false)
  %257 = add i32 %101, -1
  %258 = and i32 %101, 7
  %259 = icmp ult i32 %257, 7
  br i1 %259, label %458, label %260

260:                                              ; preds = %255
  %261 = sub i32 %101, %258
  br label %262

262:                                              ; preds = %262, %260
  %263 = phi i8* [ %253, %260 ], [ %265, %262 ]
  %264 = phi i32 [ %261, %260 ], [ %266, %262 ]
  %265 = getelementptr inbounds i8, i8* %263, i64 8
  %266 = add i32 %264, -8
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %458, label %262

268:                                              ; preds = %114
  %269 = trunc i64 %109 to i32
  %270 = add i32 %101, %269
  %271 = icmp sgt i32 %270, 0
  br i1 %271, label %272, label %378

272:                                              ; preds = %268
  %273 = shl i64 %109, 32
  %274 = ashr exact i64 %273, 32
  %275 = trunc i64 %22 to i32
  %276 = add i32 %270, %275
  %277 = zext i32 %276 to i64
  %278 = sub nsw i64 %277, %22
  %279 = icmp ult i64 %278, 32
  br i1 %279, label %358, label %280

280:                                              ; preds = %272
  %281 = and i64 %278, -32
  %282 = sub nsw i64 %274, %281
  %283 = getelementptr i8, i8* %23, i64 %281
  %284 = or i64 %22, %281
  %285 = add nsw i64 %281, -32
  %286 = lshr exact i64 %285, 5
  %287 = add nuw nsw i64 %286, 1
  %288 = and i64 %287, 1
  %289 = icmp eq i64 %285, 0
  br i1 %289, label %333, label %290

290:                                              ; preds = %280
  %291 = sub nuw nsw i64 %287, %288
  br label %292

292:                                              ; preds = %292, %290
  %293 = phi i64 [ 0, %290 ], [ %330, %292 ]
  %294 = phi i64 [ %291, %290 ], [ %331, %292 ]
  %295 = getelementptr i8, i8* %23, i64 %293
  %296 = xor i64 %293, -1
  %297 = add i64 %274, %296
  %298 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 0, i64 %297
  %299 = getelementptr inbounds i8, i8* %298, i64 -15
  %300 = bitcast i8* %299 to <16 x i8>*
  %301 = load <16 x i8>, <16 x i8>* %300, align 1
  %302 = getelementptr inbounds i8, i8* %298, i64 -31
  %303 = bitcast i8* %302 to <16 x i8>*
  %304 = load <16 x i8>, <16 x i8>* %303, align 1
  %305 = add <16 x i8> %301, <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>
  %306 = shufflevector <16 x i8> %305, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %307 = add <16 x i8> %304, <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>
  %308 = shufflevector <16 x i8> %307, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %309 = bitcast i8* %295 to <16 x i8>*
  store <16 x i8> %306, <16 x i8>* %309, align 1
  %310 = getelementptr i8, i8* %295, i64 16
  %311 = bitcast i8* %310 to <16 x i8>*
  store <16 x i8> %308, <16 x i8>* %311, align 1
  %312 = or i64 %293, 32
  %313 = getelementptr i8, i8* %23, i64 %312
  %314 = sub nuw nsw i64 -33, %293
  %315 = add i64 %274, %314
  %316 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 0, i64 %315
  %317 = getelementptr inbounds i8, i8* %316, i64 -15
  %318 = bitcast i8* %317 to <16 x i8>*
  %319 = load <16 x i8>, <16 x i8>* %318, align 1
  %320 = getelementptr inbounds i8, i8* %316, i64 -31
  %321 = bitcast i8* %320 to <16 x i8>*
  %322 = load <16 x i8>, <16 x i8>* %321, align 1
  %323 = add <16 x i8> %319, <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>
  %324 = shufflevector <16 x i8> %323, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %325 = add <16 x i8> %322, <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>
  %326 = shufflevector <16 x i8> %325, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %327 = bitcast i8* %313 to <16 x i8>*
  store <16 x i8> %324, <16 x i8>* %327, align 1
  %328 = getelementptr i8, i8* %313, i64 16
  %329 = bitcast i8* %328 to <16 x i8>*
  store <16 x i8> %326, <16 x i8>* %329, align 1
  %330 = add i64 %293, 64
  %331 = add i64 %294, -2
  %332 = icmp eq i64 %331, 0
  br i1 %332, label %333, label %292, !llvm.loop !12

333:                                              ; preds = %292, %280
  %334 = phi i64 [ 0, %280 ], [ %330, %292 ]
  %335 = icmp eq i64 %288, 0
  br i1 %335, label %354, label %336

336:                                              ; preds = %333
  %337 = getelementptr i8, i8* %23, i64 %334
  %338 = xor i64 %334, -1
  %339 = add i64 %274, %338
  %340 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 0, i64 %339
  %341 = getelementptr inbounds i8, i8* %340, i64 -15
  %342 = bitcast i8* %341 to <16 x i8>*
  %343 = load <16 x i8>, <16 x i8>* %342, align 1
  %344 = getelementptr inbounds i8, i8* %340, i64 -31
  %345 = bitcast i8* %344 to <16 x i8>*
  %346 = load <16 x i8>, <16 x i8>* %345, align 1
  %347 = add <16 x i8> %343, <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>
  %348 = shufflevector <16 x i8> %347, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %349 = add <16 x i8> %346, <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>
  %350 = shufflevector <16 x i8> %349, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %351 = bitcast i8* %337 to <16 x i8>*
  store <16 x i8> %348, <16 x i8>* %351, align 1
  %352 = getelementptr i8, i8* %337, i64 16
  %353 = bitcast i8* %352 to <16 x i8>*
  store <16 x i8> %350, <16 x i8>* %353, align 1
  br label %354

354:                                              ; preds = %333, %336
  %355 = icmp eq i64 %278, %281
  %356 = add nsw i64 %281, -1
  %357 = add nsw i64 %22, %356
  br i1 %355, label %373, label %358

358:                                              ; preds = %354, %272
  %359 = phi i64 [ %274, %272 ], [ %282, %354 ]
  %360 = phi i8* [ %23, %272 ], [ %283, %354 ]
  %361 = phi i64 [ %22, %272 ], [ %284, %354 ]
  br label %362

362:                                              ; preds = %358, %362
  %363 = phi i64 [ %366, %362 ], [ %359, %358 ]
  %364 = phi i8* [ %371, %362 ], [ %360, %358 ]
  %365 = phi i64 [ %370, %362 ], [ %361, %358 ]
  %366 = add nsw i64 %363, -1
  %367 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 0, i64 %366
  %368 = load i8, i8* %367, align 1
  %369 = add i8 %368, 48
  %370 = add nuw nsw i64 %365, 1
  store i8 %369, i8* %364, align 1
  %371 = getelementptr inbounds i8, i8* %1, i64 %370
  %372 = icmp eq i64 %370, %277
  br i1 %372, label %373, label %362, !llvm.loop !13

373:                                              ; preds = %362, %354
  %374 = phi i64 [ %357, %354 ], [ %365, %362 ]
  %375 = phi i64 [ %282, %354 ], [ %366, %362 ]
  %376 = phi i8* [ %283, %354 ], [ %371, %362 ]
  %377 = add nuw nsw i64 %374, 2
  store i8 46, i8* %376, align 1
  br label %439

378:                                              ; preds = %268
  store i8 46, i8* %23, align 1
  %379 = add nuw nsw i64 %22, 1
  %380 = icmp slt i32 %270, 0
  br i1 %380, label %381, label %439

381:                                              ; preds = %378
  %382 = sub nsw i32 0, %270
  %383 = getelementptr i8, i8* %1, i64 %379
  %384 = xor i32 %270, -1
  %385 = zext i32 %384 to i64
  %386 = add nuw nsw i64 %385, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %383, i8 48, i64 %386, i1 false)
  %387 = sub i32 0, %270
  %388 = icmp ult i32 %387, 4
  br i1 %388, label %430, label %389

389:                                              ; preds = %381
  %390 = and i32 %387, -4
  %391 = sub i32 %382, %390
  %392 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %379, i32 0
  %393 = add i32 %390, -4
  %394 = lshr exact i32 %393, 2
  %395 = add nuw nsw i32 %394, 1
  %396 = and i32 %395, 7
  %397 = icmp ult i32 %393, 28
  br i1 %397, label %408, label %398

398:                                              ; preds = %389
  %399 = sub nsw i32 %395, %396
  br label %400

400:                                              ; preds = %400, %398
  %401 = phi <2 x i64> [ %392, %398 ], [ %404, %400 ]
  %402 = phi <2 x i64> [ zeroinitializer, %398 ], [ %405, %400 ]
  %403 = phi i32 [ %399, %398 ], [ %406, %400 ]
  %404 = add nuw nsw <2 x i64> %401, <i64 8, i64 8>
  %405 = add nuw nsw <2 x i64> %402, <i64 8, i64 8>
  %406 = add i32 %403, -8
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %408, label %400, !llvm.loop !15

408:                                              ; preds = %400, %389
  %409 = phi <2 x i64> [ undef, %389 ], [ %404, %400 ]
  %410 = phi <2 x i64> [ undef, %389 ], [ %405, %400 ]
  %411 = phi <2 x i64> [ %392, %389 ], [ %404, %400 ]
  %412 = phi <2 x i64> [ zeroinitializer, %389 ], [ %405, %400 ]
  %413 = icmp eq i32 %396, 0
  br i1 %413, label %422, label %414

414:                                              ; preds = %408, %414
  %415 = phi <2 x i64> [ %418, %414 ], [ %411, %408 ]
  %416 = phi <2 x i64> [ %419, %414 ], [ %412, %408 ]
  %417 = phi i32 [ %420, %414 ], [ %396, %408 ]
  %418 = add nuw nsw <2 x i64> %415, <i64 1, i64 1>
  %419 = add nuw nsw <2 x i64> %416, <i64 1, i64 1>
  %420 = add i32 %417, -1
  %421 = icmp eq i32 %420, 0
  br i1 %421, label %422, label %414, !llvm.loop !16

422:                                              ; preds = %414, %408
  %423 = phi <2 x i64> [ %409, %408 ], [ %418, %414 ]
  %424 = phi <2 x i64> [ %410, %408 ], [ %419, %414 ]
  %425 = add <2 x i64> %424, %423
  %426 = shufflevector <2 x i64> %425, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %427 = add <2 x i64> %425, %426
  %428 = extractelement <2 x i64> %427, i32 0
  %429 = icmp eq i32 %390, %387
  br i1 %429, label %439, label %430

430:                                              ; preds = %422, %381
  %431 = phi i64 [ %379, %381 ], [ %428, %422 ]
  %432 = phi i32 [ %382, %381 ], [ %391, %422 ]
  br label %433

433:                                              ; preds = %430, %433
  %434 = phi i64 [ %437, %433 ], [ %431, %430 ]
  %435 = phi i32 [ %436, %433 ], [ %432, %430 ]
  %436 = add nsw i32 %435, -1
  %437 = add nuw nsw i64 %434, 1
  %438 = icmp sgt i32 %436, 0
  br i1 %438, label %433, label %439, !llvm.loop !17

439:                                              ; preds = %433, %422, %378, %373
  %440 = phi i64 [ %377, %373 ], [ %379, %378 ], [ %428, %422 ], [ %437, %433 ]
  %441 = phi i64 [ %375, %373 ], [ %109, %378 ], [ %109, %422 ], [ %109, %433 ]
  %442 = shl i64 %441, 32
  %443 = ashr exact i64 %442, 32
  br label %444

444:                                              ; preds = %449, %439
  %445 = phi i64 [ %450, %449 ], [ %443, %439 ]
  %446 = phi i64 [ %454, %449 ], [ %440, %439 ]
  %447 = getelementptr inbounds i8, i8* %1, i64 %446
  %448 = icmp sgt i64 %445, 0
  br i1 %448, label %449, label %468

449:                                              ; preds = %444
  %450 = add nsw i64 %445, -1
  %451 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 0, i64 %450
  %452 = load i8, i8* %451, align 1
  %453 = add i8 %452, 48
  %454 = add nuw nsw i64 %446, 1
  store i8 %453, i8* %447, align 1
  %455 = icmp eq i64 %454, 48
  br i1 %455, label %456, label %444

456:                                              ; preds = %449
  %457 = getelementptr inbounds i8, i8* %1, i64 48
  br label %468

458:                                              ; preds = %262, %255
  %459 = phi i8* [ undef, %255 ], [ %265, %262 ]
  %460 = phi i8* [ %253, %255 ], [ %265, %262 ]
  %461 = icmp eq i32 %258, 0
  br i1 %461, label %468, label %462

462:                                              ; preds = %458, %462
  %463 = phi i8* [ %465, %462 ], [ %460, %458 ]
  %464 = phi i32 [ %466, %462 ], [ %258, %458 ]
  %465 = getelementptr inbounds i8, i8* %463, i64 1
  %466 = add i32 %464, -1
  %467 = icmp eq i32 %466, 0
  br i1 %467, label %468, label %462, !llvm.loop !18

468:                                              ; preds = %444, %458, %462, %456, %252
  %469 = phi i8* [ %253, %252 ], [ %457, %456 ], [ %459, %458 ], [ %465, %462 ], [ %447, %444 ]
  store i8 0, i8* %469, align 1
  %470 = ptrtoint i8* %469 to i64
  %471 = ptrtoint i8* %1 to i64
  %472 = sub i64 %470, %471
  %473 = trunc i64 %472 to i32
  call void @llvm.lifetime.end.p0i8(i64 9, i8* nonnull %103) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #5
  br label %474

474:                                              ; preds = %468, %14
  %475 = phi i32 [ 1, %14 ], [ %473, %468 ]
  ret i32 %475
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare float @frexpf(float, i32* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = distinct !{!12, !8}
!13 = distinct !{!13, !14, !8}
!14 = !{!"llvm.loop.unroll.runtime.disable"}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !10}
!17 = distinct !{!17, !14, !8}
!18 = distinct !{!18, !10}
