; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_extend.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_extend.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_copy_and_extend_frame(%struct.yv12_buffer_config* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = add nsw i32 %4, 16
  %6 = add nsw i32 %4, 63
  %7 = and i32 %6, -64
  %8 = icmp sgt i32 %5, %7
  %9 = select i1 %8, i32 %5, i32 %7
  %10 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = sub nsw i32 %9, %11
  %13 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = add nsw i32 %14, 16
  %16 = add nsw i32 %14, 63
  %17 = and i32 %16, -64
  %18 = icmp sgt i32 %15, %17
  %19 = select i1 %18, i32 %15, i32 %17
  %20 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = sub nsw i32 %19, %21
  %23 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5
  %24 = load i32, i32* %23, align 4
  %25 = icmp ne i32 %24, %4
  %26 = zext i1 %25 to i32
  %27 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 6
  %28 = load i32, i32* %27, align 8
  %29 = icmp ne i32 %28, %14
  %30 = zext i1 %29 to i32
  %31 = lshr i32 16, %30
  %32 = lshr i32 16, %26
  %33 = ashr i32 %22, %30
  %34 = ashr i32 %12, %26
  %35 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 15
  %36 = bitcast i8** %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 14
  %39 = bitcast i8** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %37, %40
  %42 = icmp eq i64 %41, 1
  %43 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 29
  %44 = load i32, i32* %43, align 8
  %45 = and i32 %44, 8
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 13
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %50 = load i32, i32* %49, align 8
  %51 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %54 = load i32, i32* %53, align 8
  br i1 %46, label %826, label %55

55:                                               ; preds = %2
  %56 = ptrtoint i8* %48 to i64
  %57 = shl i64 %56, 1
  %58 = inttoptr i64 %57 to i16*
  %59 = ptrtoint i8* %52 to i64
  %60 = shl i64 %59, 1
  %61 = inttoptr i64 %60 to i16*
  %62 = sext i32 %11 to i64
  %63 = getelementptr inbounds i16, i16* %61, i64 -16
  %64 = icmp sgt i32 %21, 0
  br i1 %64, label %67, label %65

65:                                               ; preds = %55
  %66 = sext i32 %54 to i64
  br label %183

67:                                               ; preds = %55
  %68 = getelementptr inbounds i16, i16* %61, i64 %62
  %69 = getelementptr inbounds i16, i16* %58, i64 %62
  %70 = getelementptr inbounds i16, i16* %69, i64 -1
  %71 = shl nsw i64 %62, 1
  %72 = sext i32 %12 to i64
  %73 = icmp eq i32 %12, 0
  %74 = sext i32 %50 to i64
  %75 = sext i32 %54 to i64
  %76 = add nsw i64 %72, -16
  %77 = lshr i64 %76, 4
  %78 = add nuw nsw i64 %77, 1
  %79 = icmp ult i32 %12, 16
  %80 = and i64 %72, -16
  %81 = and i64 %78, 7
  %82 = icmp ult i64 %76, 112
  %83 = sub nsw i64 %78, %81
  %84 = icmp eq i64 %81, 0
  %85 = icmp eq i64 %80, %72
  br label %86

86:                                               ; preds = %176, %67
  %87 = phi i16* [ %68, %67 ], [ %180, %176 ]
  %88 = phi i16* [ %63, %67 ], [ %179, %176 ]
  %89 = phi i16* [ %70, %67 ], [ %178, %176 ]
  %90 = phi i16* [ %58, %67 ], [ %177, %176 ]
  %91 = phi i32 [ 0, %67 ], [ %181, %176 ]
  %92 = load i16, i16* %90, align 2
  %93 = getelementptr inbounds i16, i16* %88, i64 8
  %94 = insertelement <8 x i16> undef, i16 %92, i32 0
  %95 = shufflevector <8 x i16> %94, <8 x i16> undef, <8 x i32> zeroinitializer
  %96 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %96, align 2
  %97 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %97, align 2
  %98 = getelementptr inbounds i16, i16* %88, i64 16
  %99 = bitcast i16* %98 to i8*
  %100 = bitcast i16* %90 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %99, i8* align 2 %100, i64 %71, i1 false) #2
  %101 = load i16, i16* %89, align 2
  br i1 %73, label %176, label %102

102:                                              ; preds = %86
  br i1 %79, label %167, label %103

103:                                              ; preds = %102
  %104 = getelementptr i16, i16* %87, i64 %80
  %105 = insertelement <8 x i16> undef, i16 %101, i32 0
  %106 = shufflevector <8 x i16> %105, <8 x i16> undef, <8 x i32> zeroinitializer
  %107 = insertelement <8 x i16> undef, i16 %101, i32 0
  %108 = shufflevector <8 x i16> %107, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %82, label %154, label %109

109:                                              ; preds = %103, %109
  %110 = phi i64 [ %151, %109 ], [ 0, %103 ]
  %111 = phi i64 [ %152, %109 ], [ %83, %103 ]
  %112 = getelementptr i16, i16* %87, i64 %110
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %113, align 2
  %114 = getelementptr i16, i16* %112, i64 8
  %115 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %115, align 2
  %116 = or i64 %110, 16
  %117 = getelementptr i16, i16* %87, i64 %116
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %118, align 2
  %119 = getelementptr i16, i16* %117, i64 8
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %120, align 2
  %121 = or i64 %110, 32
  %122 = getelementptr i16, i16* %87, i64 %121
  %123 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %123, align 2
  %124 = getelementptr i16, i16* %122, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %125, align 2
  %126 = or i64 %110, 48
  %127 = getelementptr i16, i16* %87, i64 %126
  %128 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %128, align 2
  %129 = getelementptr i16, i16* %127, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %130, align 2
  %131 = or i64 %110, 64
  %132 = getelementptr i16, i16* %87, i64 %131
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %133, align 2
  %134 = getelementptr i16, i16* %132, i64 8
  %135 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %135, align 2
  %136 = or i64 %110, 80
  %137 = getelementptr i16, i16* %87, i64 %136
  %138 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %138, align 2
  %139 = getelementptr i16, i16* %137, i64 8
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %140, align 2
  %141 = or i64 %110, 96
  %142 = getelementptr i16, i16* %87, i64 %141
  %143 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %143, align 2
  %144 = getelementptr i16, i16* %142, i64 8
  %145 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %145, align 2
  %146 = or i64 %110, 112
  %147 = getelementptr i16, i16* %87, i64 %146
  %148 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %148, align 2
  %149 = getelementptr i16, i16* %147, i64 8
  %150 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %150, align 2
  %151 = add i64 %110, 128
  %152 = add i64 %111, -8
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %109, !llvm.loop !2

154:                                              ; preds = %109, %103
  %155 = phi i64 [ 0, %103 ], [ %151, %109 ]
  br i1 %84, label %166, label %156

156:                                              ; preds = %154, %156
  %157 = phi i64 [ %163, %156 ], [ %155, %154 ]
  %158 = phi i64 [ %164, %156 ], [ %81, %154 ]
  %159 = getelementptr i16, i16* %87, i64 %157
  %160 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %160, align 2
  %161 = getelementptr i16, i16* %159, i64 8
  %162 = bitcast i16* %161 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %162, align 2
  %163 = add i64 %157, 16
  %164 = add i64 %158, -1
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %166, label %156, !llvm.loop !4

166:                                              ; preds = %156, %154
  br i1 %85, label %176, label %167

167:                                              ; preds = %166, %102
  %168 = phi i16* [ %87, %102 ], [ %104, %166 ]
  %169 = phi i64 [ 0, %102 ], [ %80, %166 ]
  br label %170

170:                                              ; preds = %167, %170
  %171 = phi i16* [ %173, %170 ], [ %168, %167 ]
  %172 = phi i64 [ %174, %170 ], [ %169, %167 ]
  %173 = getelementptr inbounds i16, i16* %171, i64 1
  store i16 %101, i16* %171, align 2
  %174 = add nuw i64 %172, 1
  %175 = icmp eq i64 %174, %72
  br i1 %175, label %176, label %170, !llvm.loop !6

176:                                              ; preds = %170, %166, %86
  %177 = getelementptr inbounds i16, i16* %90, i64 %74
  %178 = getelementptr inbounds i16, i16* %89, i64 %74
  %179 = getelementptr inbounds i16, i16* %88, i64 %75
  %180 = getelementptr inbounds i16, i16* %87, i64 %75
  %181 = add nuw nsw i32 %91, 1
  %182 = icmp eq i32 %181, %21
  br i1 %182, label %183, label %86

183:                                              ; preds = %176, %65
  %184 = phi i64 [ %66, %65 ], [ %75, %176 ]
  %185 = add i32 %9, 16
  %186 = shl i32 %54, 4
  %187 = sub i32 0, %186
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i16, i16* %61, i64 %188
  %190 = getelementptr inbounds i16, i16* %189, i64 -16
  %191 = bitcast i16* %63 to i8*
  %192 = sext i32 %185 to i64
  %193 = shl nsw i64 %192, 1
  %194 = bitcast i16* %190 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %194, i8* align 2 %191, i64 %193, i1 false) #2
  %195 = getelementptr inbounds i16, i16* %190, i64 %184
  %196 = bitcast i16* %195 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %196, i8* align 2 %191, i64 %193, i1 false) #2
  %197 = getelementptr inbounds i16, i16* %195, i64 %184
  %198 = bitcast i16* %197 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %198, i8* align 2 %191, i64 %193, i1 false) #2
  %199 = getelementptr inbounds i16, i16* %197, i64 %184
  %200 = bitcast i16* %199 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %200, i8* align 2 %191, i64 %193, i1 false) #2
  %201 = getelementptr inbounds i16, i16* %199, i64 %184
  %202 = bitcast i16* %201 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %202, i8* align 2 %191, i64 %193, i1 false) #2
  %203 = getelementptr inbounds i16, i16* %201, i64 %184
  %204 = bitcast i16* %203 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %204, i8* align 2 %191, i64 %193, i1 false) #2
  %205 = getelementptr inbounds i16, i16* %203, i64 %184
  %206 = bitcast i16* %205 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %206, i8* align 2 %191, i64 %193, i1 false) #2
  %207 = getelementptr inbounds i16, i16* %205, i64 %184
  %208 = bitcast i16* %207 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %208, i8* align 2 %191, i64 %193, i1 false) #2
  %209 = getelementptr inbounds i16, i16* %207, i64 %184
  %210 = bitcast i16* %209 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %210, i8* align 2 %191, i64 %193, i1 false) #2
  %211 = getelementptr inbounds i16, i16* %209, i64 %184
  %212 = bitcast i16* %211 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %212, i8* align 2 %191, i64 %193, i1 false) #2
  %213 = getelementptr inbounds i16, i16* %211, i64 %184
  %214 = bitcast i16* %213 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %214, i8* align 2 %191, i64 %193, i1 false) #2
  %215 = getelementptr inbounds i16, i16* %213, i64 %184
  %216 = bitcast i16* %215 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %216, i8* align 2 %191, i64 %193, i1 false) #2
  %217 = getelementptr inbounds i16, i16* %215, i64 %184
  %218 = bitcast i16* %217 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %218, i8* align 2 %191, i64 %193, i1 false) #2
  %219 = getelementptr inbounds i16, i16* %217, i64 %184
  %220 = bitcast i16* %219 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %220, i8* align 2 %191, i64 %193, i1 false) #2
  %221 = getelementptr inbounds i16, i16* %219, i64 %184
  %222 = bitcast i16* %221 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %222, i8* align 2 %191, i64 %193, i1 false) #2
  %223 = getelementptr inbounds i16, i16* %221, i64 %184
  %224 = bitcast i16* %223 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %224, i8* align 2 %191, i64 %193, i1 false) #2
  %225 = icmp sgt i32 %22, 0
  br i1 %225, label %226, label %267

226:                                              ; preds = %183
  %227 = mul nsw i32 %54, %21
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds i16, i16* %61, i64 %228
  %230 = getelementptr inbounds i16, i16* %229, i64 -16
  %231 = add nsw i32 %21, -1
  %232 = mul nsw i32 %54, %231
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds i16, i16* %61, i64 %233
  %235 = getelementptr inbounds i16, i16* %234, i64 -16
  %236 = bitcast i16* %235 to i8*
  %237 = sub i32 %19, %21
  %238 = xor i32 %21, -1
  %239 = add i32 %19, %238
  %240 = and i32 %237, 3
  %241 = icmp ult i32 %239, 3
  br i1 %241, label %257, label %242

242:                                              ; preds = %226
  %243 = sub i32 %237, %240
  br label %244

244:                                              ; preds = %244, %242
  %245 = phi i16* [ %230, %242 ], [ %254, %244 ]
  %246 = phi i32 [ %243, %242 ], [ %255, %244 ]
  %247 = bitcast i16* %245 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %247, i8* align 2 %236, i64 %193, i1 false) #2
  %248 = getelementptr inbounds i16, i16* %245, i64 %184
  %249 = bitcast i16* %248 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %249, i8* align 2 %236, i64 %193, i1 false) #2
  %250 = getelementptr inbounds i16, i16* %248, i64 %184
  %251 = bitcast i16* %250 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %251, i8* align 2 %236, i64 %193, i1 false) #2
  %252 = getelementptr inbounds i16, i16* %250, i64 %184
  %253 = bitcast i16* %252 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %253, i8* align 2 %236, i64 %193, i1 false) #2
  %254 = getelementptr inbounds i16, i16* %252, i64 %184
  %255 = add i32 %246, -4
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %257, label %244

257:                                              ; preds = %244, %226
  %258 = phi i16* [ %230, %226 ], [ %254, %244 ]
  %259 = icmp eq i32 %240, 0
  br i1 %259, label %267, label %260

260:                                              ; preds = %257, %260
  %261 = phi i16* [ %264, %260 ], [ %258, %257 ]
  %262 = phi i32 [ %265, %260 ], [ %240, %257 ]
  %263 = bitcast i16* %261 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %263, i8* align 2 %236, i64 %193, i1 false) #2
  %264 = getelementptr inbounds i16, i16* %261, i64 %184
  %265 = add i32 %262, -1
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %267, label %260, !llvm.loop !8

267:                                              ; preds = %257, %260, %183
  %268 = load i64, i64* %39, align 8
  %269 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  %270 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %271 = bitcast i8** %270 to i64*
  %272 = load i64, i64* %271, align 8
  %273 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  %274 = load i32, i32* %273, align 4
  %275 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 7
  %276 = load i32, i32* %275, align 4
  %277 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 8
  %278 = load i32, i32* %277, align 8
  %279 = shl i64 %268, 1
  %280 = inttoptr i64 %279 to i16*
  %281 = shl i64 %272, 1
  %282 = inttoptr i64 %281 to i16*
  %283 = sext i32 %276 to i64
  %284 = zext i32 %32 to i64
  %285 = sub nsw i64 0, %284
  %286 = getelementptr inbounds i16, i16* %282, i64 %285
  %287 = icmp sgt i32 %278, 0
  br i1 %287, label %288, label %485

288:                                              ; preds = %267
  %289 = load i32, i32* %269, align 4
  %290 = getelementptr inbounds i16, i16* %282, i64 %283
  %291 = getelementptr inbounds i16, i16* %280, i64 %283
  %292 = getelementptr inbounds i16, i16* %291, i64 -1
  %293 = shl nsw i64 %283, 1
  %294 = sext i32 %34 to i64
  %295 = icmp eq i32 %34, 0
  %296 = sext i32 %289 to i64
  %297 = sext i32 %274 to i64
  %298 = and i64 %284, 16
  %299 = add nsw i64 %298, -16
  %300 = lshr exact i64 %299, 4
  %301 = add nuw nsw i64 %300, 1
  %302 = add nsw i64 %294, -16
  %303 = lshr i64 %302, 4
  %304 = add nuw nsw i64 %303, 1
  %305 = icmp ult i32 %32, 16
  %306 = and i64 %284, 16
  %307 = and i64 %301, 7
  %308 = icmp ult i64 %299, 112
  %309 = sub nsw i64 %301, %307
  %310 = icmp eq i64 %307, 0
  %311 = icmp eq i64 %306, %284
  %312 = icmp ult i32 %34, 16
  %313 = and i64 %294, -16
  %314 = and i64 %304, 7
  %315 = icmp ult i64 %302, 112
  %316 = sub nsw i64 %304, %314
  %317 = icmp eq i64 %314, 0
  %318 = icmp eq i64 %313, %294
  br label %319

319:                                              ; preds = %478, %288
  %320 = phi i16* [ %290, %288 ], [ %482, %478 ]
  %321 = phi i16* [ %286, %288 ], [ %481, %478 ]
  %322 = phi i16* [ %292, %288 ], [ %480, %478 ]
  %323 = phi i16* [ %280, %288 ], [ %479, %478 ]
  %324 = phi i32 [ 0, %288 ], [ %483, %478 ]
  %325 = load i16, i16* %323, align 2
  br i1 %305, label %390, label %326

326:                                              ; preds = %319
  %327 = getelementptr i16, i16* %321, i64 %306
  %328 = insertelement <8 x i16> undef, i16 %325, i32 0
  %329 = shufflevector <8 x i16> %328, <8 x i16> undef, <8 x i32> zeroinitializer
  %330 = insertelement <8 x i16> undef, i16 %325, i32 0
  %331 = shufflevector <8 x i16> %330, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %308, label %377, label %332

332:                                              ; preds = %326, %332
  %333 = phi i64 [ %374, %332 ], [ 0, %326 ]
  %334 = phi i64 [ %375, %332 ], [ %309, %326 ]
  %335 = getelementptr i16, i16* %321, i64 %333
  %336 = bitcast i16* %335 to <8 x i16>*
  store <8 x i16> %329, <8 x i16>* %336, align 2
  %337 = getelementptr i16, i16* %335, i64 8
  %338 = bitcast i16* %337 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %338, align 2
  %339 = or i64 %333, 16
  %340 = getelementptr i16, i16* %321, i64 %339
  %341 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %329, <8 x i16>* %341, align 2
  %342 = getelementptr i16, i16* %340, i64 8
  %343 = bitcast i16* %342 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %343, align 2
  %344 = or i64 %333, 32
  %345 = getelementptr i16, i16* %321, i64 %344
  %346 = bitcast i16* %345 to <8 x i16>*
  store <8 x i16> %329, <8 x i16>* %346, align 2
  %347 = getelementptr i16, i16* %345, i64 8
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %348, align 2
  %349 = or i64 %333, 48
  %350 = getelementptr i16, i16* %321, i64 %349
  %351 = bitcast i16* %350 to <8 x i16>*
  store <8 x i16> %329, <8 x i16>* %351, align 2
  %352 = getelementptr i16, i16* %350, i64 8
  %353 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %353, align 2
  %354 = or i64 %333, 64
  %355 = getelementptr i16, i16* %321, i64 %354
  %356 = bitcast i16* %355 to <8 x i16>*
  store <8 x i16> %329, <8 x i16>* %356, align 2
  %357 = getelementptr i16, i16* %355, i64 8
  %358 = bitcast i16* %357 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %358, align 2
  %359 = or i64 %333, 80
  %360 = getelementptr i16, i16* %321, i64 %359
  %361 = bitcast i16* %360 to <8 x i16>*
  store <8 x i16> %329, <8 x i16>* %361, align 2
  %362 = getelementptr i16, i16* %360, i64 8
  %363 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %363, align 2
  %364 = or i64 %333, 96
  %365 = getelementptr i16, i16* %321, i64 %364
  %366 = bitcast i16* %365 to <8 x i16>*
  store <8 x i16> %329, <8 x i16>* %366, align 2
  %367 = getelementptr i16, i16* %365, i64 8
  %368 = bitcast i16* %367 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %368, align 2
  %369 = or i64 %333, 112
  %370 = getelementptr i16, i16* %321, i64 %369
  %371 = bitcast i16* %370 to <8 x i16>*
  store <8 x i16> %329, <8 x i16>* %371, align 2
  %372 = getelementptr i16, i16* %370, i64 8
  %373 = bitcast i16* %372 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %373, align 2
  %374 = add i64 %333, 128
  %375 = add i64 %334, -8
  %376 = icmp eq i64 %375, 0
  br i1 %376, label %377, label %332, !llvm.loop !9

377:                                              ; preds = %332, %326
  %378 = phi i64 [ 0, %326 ], [ %374, %332 ]
  br i1 %310, label %389, label %379

379:                                              ; preds = %377, %379
  %380 = phi i64 [ %386, %379 ], [ %378, %377 ]
  %381 = phi i64 [ %387, %379 ], [ %307, %377 ]
  %382 = getelementptr i16, i16* %321, i64 %380
  %383 = bitcast i16* %382 to <8 x i16>*
  store <8 x i16> %329, <8 x i16>* %383, align 2
  %384 = getelementptr i16, i16* %382, i64 8
  %385 = bitcast i16* %384 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %385, align 2
  %386 = add i64 %380, 16
  %387 = add i64 %381, -1
  %388 = icmp eq i64 %387, 0
  br i1 %388, label %389, label %379, !llvm.loop !10

389:                                              ; preds = %379, %377
  br i1 %311, label %399, label %390

390:                                              ; preds = %389, %319
  %391 = phi i16* [ %321, %319 ], [ %327, %389 ]
  %392 = phi i64 [ 0, %319 ], [ %306, %389 ]
  br label %393

393:                                              ; preds = %390, %393
  %394 = phi i16* [ %396, %393 ], [ %391, %390 ]
  %395 = phi i64 [ %397, %393 ], [ %392, %390 ]
  %396 = getelementptr inbounds i16, i16* %394, i64 1
  store i16 %325, i16* %394, align 2
  %397 = add nuw i64 %395, 1
  %398 = icmp eq i64 %397, %284
  br i1 %398, label %399, label %393, !llvm.loop !11

399:                                              ; preds = %393, %389
  %400 = getelementptr inbounds i16, i16* %321, i64 %284
  %401 = bitcast i16* %400 to i8*
  %402 = bitcast i16* %323 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %401, i8* align 2 %402, i64 %293, i1 false) #2
  %403 = load i16, i16* %322, align 2
  br i1 %295, label %478, label %404

404:                                              ; preds = %399
  br i1 %312, label %469, label %405

405:                                              ; preds = %404
  %406 = getelementptr i16, i16* %320, i64 %313
  %407 = insertelement <8 x i16> undef, i16 %403, i32 0
  %408 = shufflevector <8 x i16> %407, <8 x i16> undef, <8 x i32> zeroinitializer
  %409 = insertelement <8 x i16> undef, i16 %403, i32 0
  %410 = shufflevector <8 x i16> %409, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %315, label %456, label %411

411:                                              ; preds = %405, %411
  %412 = phi i64 [ %453, %411 ], [ 0, %405 ]
  %413 = phi i64 [ %454, %411 ], [ %316, %405 ]
  %414 = getelementptr i16, i16* %320, i64 %412
  %415 = bitcast i16* %414 to <8 x i16>*
  store <8 x i16> %408, <8 x i16>* %415, align 2
  %416 = getelementptr i16, i16* %414, i64 8
  %417 = bitcast i16* %416 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %417, align 2
  %418 = or i64 %412, 16
  %419 = getelementptr i16, i16* %320, i64 %418
  %420 = bitcast i16* %419 to <8 x i16>*
  store <8 x i16> %408, <8 x i16>* %420, align 2
  %421 = getelementptr i16, i16* %419, i64 8
  %422 = bitcast i16* %421 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %422, align 2
  %423 = or i64 %412, 32
  %424 = getelementptr i16, i16* %320, i64 %423
  %425 = bitcast i16* %424 to <8 x i16>*
  store <8 x i16> %408, <8 x i16>* %425, align 2
  %426 = getelementptr i16, i16* %424, i64 8
  %427 = bitcast i16* %426 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %427, align 2
  %428 = or i64 %412, 48
  %429 = getelementptr i16, i16* %320, i64 %428
  %430 = bitcast i16* %429 to <8 x i16>*
  store <8 x i16> %408, <8 x i16>* %430, align 2
  %431 = getelementptr i16, i16* %429, i64 8
  %432 = bitcast i16* %431 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %432, align 2
  %433 = or i64 %412, 64
  %434 = getelementptr i16, i16* %320, i64 %433
  %435 = bitcast i16* %434 to <8 x i16>*
  store <8 x i16> %408, <8 x i16>* %435, align 2
  %436 = getelementptr i16, i16* %434, i64 8
  %437 = bitcast i16* %436 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %437, align 2
  %438 = or i64 %412, 80
  %439 = getelementptr i16, i16* %320, i64 %438
  %440 = bitcast i16* %439 to <8 x i16>*
  store <8 x i16> %408, <8 x i16>* %440, align 2
  %441 = getelementptr i16, i16* %439, i64 8
  %442 = bitcast i16* %441 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %442, align 2
  %443 = or i64 %412, 96
  %444 = getelementptr i16, i16* %320, i64 %443
  %445 = bitcast i16* %444 to <8 x i16>*
  store <8 x i16> %408, <8 x i16>* %445, align 2
  %446 = getelementptr i16, i16* %444, i64 8
  %447 = bitcast i16* %446 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %447, align 2
  %448 = or i64 %412, 112
  %449 = getelementptr i16, i16* %320, i64 %448
  %450 = bitcast i16* %449 to <8 x i16>*
  store <8 x i16> %408, <8 x i16>* %450, align 2
  %451 = getelementptr i16, i16* %449, i64 8
  %452 = bitcast i16* %451 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %452, align 2
  %453 = add i64 %412, 128
  %454 = add i64 %413, -8
  %455 = icmp eq i64 %454, 0
  br i1 %455, label %456, label %411, !llvm.loop !12

456:                                              ; preds = %411, %405
  %457 = phi i64 [ 0, %405 ], [ %453, %411 ]
  br i1 %317, label %468, label %458

458:                                              ; preds = %456, %458
  %459 = phi i64 [ %465, %458 ], [ %457, %456 ]
  %460 = phi i64 [ %466, %458 ], [ %314, %456 ]
  %461 = getelementptr i16, i16* %320, i64 %459
  %462 = bitcast i16* %461 to <8 x i16>*
  store <8 x i16> %408, <8 x i16>* %462, align 2
  %463 = getelementptr i16, i16* %461, i64 8
  %464 = bitcast i16* %463 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %464, align 2
  %465 = add i64 %459, 16
  %466 = add i64 %460, -1
  %467 = icmp eq i64 %466, 0
  br i1 %467, label %468, label %458, !llvm.loop !13

468:                                              ; preds = %458, %456
  br i1 %318, label %478, label %469

469:                                              ; preds = %468, %404
  %470 = phi i16* [ %320, %404 ], [ %406, %468 ]
  %471 = phi i64 [ 0, %404 ], [ %313, %468 ]
  br label %472

472:                                              ; preds = %469, %472
  %473 = phi i16* [ %475, %472 ], [ %470, %469 ]
  %474 = phi i64 [ %476, %472 ], [ %471, %469 ]
  %475 = getelementptr inbounds i16, i16* %473, i64 1
  store i16 %403, i16* %473, align 2
  %476 = add nuw i64 %474, 1
  %477 = icmp eq i64 %476, %294
  br i1 %477, label %478, label %472, !llvm.loop !14

478:                                              ; preds = %472, %468, %399
  %479 = getelementptr inbounds i16, i16* %323, i64 %296
  %480 = getelementptr inbounds i16, i16* %322, i64 %296
  %481 = getelementptr inbounds i16, i16* %321, i64 %297
  %482 = getelementptr inbounds i16, i16* %320, i64 %297
  %483 = add nuw nsw i32 %324, 1
  %484 = icmp eq i32 %483, %278
  br i1 %484, label %485, label %319

485:                                              ; preds = %478, %267
  %486 = add nsw i32 %278, -1
  %487 = mul nsw i32 %486, %274
  %488 = sext i32 %487 to i64
  %489 = getelementptr inbounds i16, i16* %282, i64 %488
  %490 = getelementptr inbounds i16, i16* %489, i64 %285
  %491 = mul nsw i32 %278, %274
  %492 = sext i32 %491 to i64
  %493 = getelementptr inbounds i16, i16* %282, i64 %492
  %494 = getelementptr inbounds i16, i16* %493, i64 %285
  %495 = add i32 %34, %32
  %496 = add i32 %495, %276
  %497 = icmp sgt i32 %31, 0
  br i1 %497, label %498, label %508

498:                                              ; preds = %485
  %499 = mul i32 %31, %274
  %500 = sub i32 0, %499
  %501 = sext i32 %500 to i64
  %502 = getelementptr inbounds i16, i16* %282, i64 %501
  %503 = getelementptr inbounds i16, i16* %502, i64 %285
  %504 = bitcast i16* %286 to i8*
  %505 = sext i32 %496 to i64
  %506 = shl nsw i64 %505, 1
  %507 = sext i32 %274 to i64
  br label %520

508:                                              ; preds = %520, %485
  %509 = icmp sgt i32 %33, 0
  br i1 %509, label %510, label %556

510:                                              ; preds = %508
  %511 = bitcast i16* %490 to i8*
  %512 = sext i32 %496 to i64
  %513 = shl nsw i64 %512, 1
  %514 = sext i32 %274 to i64
  %515 = add i32 %33, -1
  %516 = and i32 %33, 3
  %517 = icmp ult i32 %515, 3
  br i1 %517, label %546, label %518

518:                                              ; preds = %510
  %519 = sub i32 %33, %516
  br label %533

520:                                              ; preds = %520, %498
  %521 = phi i16* [ %503, %498 ], [ %530, %520 ]
  %522 = phi i32 [ 0, %498 ], [ %531, %520 ]
  %523 = bitcast i16* %521 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %523, i8* align 2 %504, i64 %506, i1 false) #2
  %524 = getelementptr inbounds i16, i16* %521, i64 %507
  %525 = bitcast i16* %524 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %525, i8* align 2 %504, i64 %506, i1 false) #2
  %526 = getelementptr inbounds i16, i16* %524, i64 %507
  %527 = bitcast i16* %526 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %527, i8* align 2 %504, i64 %506, i1 false) #2
  %528 = getelementptr inbounds i16, i16* %526, i64 %507
  %529 = bitcast i16* %528 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %529, i8* align 2 %504, i64 %506, i1 false) #2
  %530 = getelementptr inbounds i16, i16* %528, i64 %507
  %531 = add nuw nsw i32 %522, 4
  %532 = icmp eq i32 %531, %31
  br i1 %532, label %508, label %520

533:                                              ; preds = %533, %518
  %534 = phi i16* [ %494, %518 ], [ %543, %533 ]
  %535 = phi i32 [ %519, %518 ], [ %544, %533 ]
  %536 = bitcast i16* %534 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %536, i8* align 2 %511, i64 %513, i1 false) #2
  %537 = getelementptr inbounds i16, i16* %534, i64 %514
  %538 = bitcast i16* %537 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %538, i8* align 2 %511, i64 %513, i1 false) #2
  %539 = getelementptr inbounds i16, i16* %537, i64 %514
  %540 = bitcast i16* %539 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %540, i8* align 2 %511, i64 %513, i1 false) #2
  %541 = getelementptr inbounds i16, i16* %539, i64 %514
  %542 = bitcast i16* %541 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %542, i8* align 2 %511, i64 %513, i1 false) #2
  %543 = getelementptr inbounds i16, i16* %541, i64 %514
  %544 = add i32 %535, -4
  %545 = icmp eq i32 %544, 0
  br i1 %545, label %546, label %533

546:                                              ; preds = %533, %510
  %547 = phi i16* [ %494, %510 ], [ %543, %533 ]
  %548 = icmp eq i32 %516, 0
  br i1 %548, label %556, label %549

549:                                              ; preds = %546, %549
  %550 = phi i16* [ %553, %549 ], [ %547, %546 ]
  %551 = phi i32 [ %554, %549 ], [ %516, %546 ]
  %552 = bitcast i16* %550 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %552, i8* align 2 %511, i64 %513, i1 false) #2
  %553 = getelementptr inbounds i16, i16* %550, i64 %514
  %554 = add i32 %551, -1
  %555 = icmp eq i32 %554, 0
  br i1 %555, label %556, label %549, !llvm.loop !15

556:                                              ; preds = %546, %549, %508
  %557 = load i64, i64* %36, align 8
  %558 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %559 = bitcast i8** %558 to i64*
  %560 = load i64, i64* %559, align 8
  %561 = load i32, i32* %273, align 4
  %562 = load i32, i32* %275, align 4
  %563 = load i32, i32* %277, align 8
  %564 = shl i64 %557, 1
  %565 = inttoptr i64 %564 to i16*
  %566 = shl i64 %560, 1
  %567 = inttoptr i64 %566 to i16*
  %568 = sext i32 %562 to i64
  %569 = getelementptr inbounds i16, i16* %567, i64 %285
  %570 = icmp sgt i32 %563, 0
  br i1 %570, label %571, label %768

571:                                              ; preds = %556
  %572 = load i32, i32* %269, align 4
  %573 = getelementptr inbounds i16, i16* %567, i64 %568
  %574 = getelementptr inbounds i16, i16* %565, i64 %568
  %575 = getelementptr inbounds i16, i16* %574, i64 -1
  %576 = shl nsw i64 %568, 1
  %577 = sext i32 %34 to i64
  %578 = icmp eq i32 %34, 0
  %579 = sext i32 %572 to i64
  %580 = sext i32 %561 to i64
  %581 = and i64 %284, 16
  %582 = add nsw i64 %581, -16
  %583 = lshr exact i64 %582, 4
  %584 = add nuw nsw i64 %583, 1
  %585 = add nsw i64 %577, -16
  %586 = lshr i64 %585, 4
  %587 = add nuw nsw i64 %586, 1
  %588 = icmp ult i32 %32, 16
  %589 = and i64 %284, 16
  %590 = and i64 %584, 7
  %591 = icmp ult i64 %582, 112
  %592 = sub nsw i64 %584, %590
  %593 = icmp eq i64 %590, 0
  %594 = icmp eq i64 %589, %284
  %595 = icmp ult i32 %34, 16
  %596 = and i64 %577, -16
  %597 = and i64 %587, 7
  %598 = icmp ult i64 %585, 112
  %599 = sub nsw i64 %587, %597
  %600 = icmp eq i64 %597, 0
  %601 = icmp eq i64 %596, %577
  br label %602

602:                                              ; preds = %761, %571
  %603 = phi i16* [ %573, %571 ], [ %765, %761 ]
  %604 = phi i16* [ %569, %571 ], [ %764, %761 ]
  %605 = phi i16* [ %575, %571 ], [ %763, %761 ]
  %606 = phi i16* [ %565, %571 ], [ %762, %761 ]
  %607 = phi i32 [ 0, %571 ], [ %766, %761 ]
  %608 = load i16, i16* %606, align 2
  br i1 %588, label %673, label %609

609:                                              ; preds = %602
  %610 = getelementptr i16, i16* %604, i64 %589
  %611 = insertelement <8 x i16> undef, i16 %608, i32 0
  %612 = shufflevector <8 x i16> %611, <8 x i16> undef, <8 x i32> zeroinitializer
  %613 = insertelement <8 x i16> undef, i16 %608, i32 0
  %614 = shufflevector <8 x i16> %613, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %591, label %660, label %615

615:                                              ; preds = %609, %615
  %616 = phi i64 [ %657, %615 ], [ 0, %609 ]
  %617 = phi i64 [ %658, %615 ], [ %592, %609 ]
  %618 = getelementptr i16, i16* %604, i64 %616
  %619 = bitcast i16* %618 to <8 x i16>*
  store <8 x i16> %612, <8 x i16>* %619, align 2
  %620 = getelementptr i16, i16* %618, i64 8
  %621 = bitcast i16* %620 to <8 x i16>*
  store <8 x i16> %614, <8 x i16>* %621, align 2
  %622 = or i64 %616, 16
  %623 = getelementptr i16, i16* %604, i64 %622
  %624 = bitcast i16* %623 to <8 x i16>*
  store <8 x i16> %612, <8 x i16>* %624, align 2
  %625 = getelementptr i16, i16* %623, i64 8
  %626 = bitcast i16* %625 to <8 x i16>*
  store <8 x i16> %614, <8 x i16>* %626, align 2
  %627 = or i64 %616, 32
  %628 = getelementptr i16, i16* %604, i64 %627
  %629 = bitcast i16* %628 to <8 x i16>*
  store <8 x i16> %612, <8 x i16>* %629, align 2
  %630 = getelementptr i16, i16* %628, i64 8
  %631 = bitcast i16* %630 to <8 x i16>*
  store <8 x i16> %614, <8 x i16>* %631, align 2
  %632 = or i64 %616, 48
  %633 = getelementptr i16, i16* %604, i64 %632
  %634 = bitcast i16* %633 to <8 x i16>*
  store <8 x i16> %612, <8 x i16>* %634, align 2
  %635 = getelementptr i16, i16* %633, i64 8
  %636 = bitcast i16* %635 to <8 x i16>*
  store <8 x i16> %614, <8 x i16>* %636, align 2
  %637 = or i64 %616, 64
  %638 = getelementptr i16, i16* %604, i64 %637
  %639 = bitcast i16* %638 to <8 x i16>*
  store <8 x i16> %612, <8 x i16>* %639, align 2
  %640 = getelementptr i16, i16* %638, i64 8
  %641 = bitcast i16* %640 to <8 x i16>*
  store <8 x i16> %614, <8 x i16>* %641, align 2
  %642 = or i64 %616, 80
  %643 = getelementptr i16, i16* %604, i64 %642
  %644 = bitcast i16* %643 to <8 x i16>*
  store <8 x i16> %612, <8 x i16>* %644, align 2
  %645 = getelementptr i16, i16* %643, i64 8
  %646 = bitcast i16* %645 to <8 x i16>*
  store <8 x i16> %614, <8 x i16>* %646, align 2
  %647 = or i64 %616, 96
  %648 = getelementptr i16, i16* %604, i64 %647
  %649 = bitcast i16* %648 to <8 x i16>*
  store <8 x i16> %612, <8 x i16>* %649, align 2
  %650 = getelementptr i16, i16* %648, i64 8
  %651 = bitcast i16* %650 to <8 x i16>*
  store <8 x i16> %614, <8 x i16>* %651, align 2
  %652 = or i64 %616, 112
  %653 = getelementptr i16, i16* %604, i64 %652
  %654 = bitcast i16* %653 to <8 x i16>*
  store <8 x i16> %612, <8 x i16>* %654, align 2
  %655 = getelementptr i16, i16* %653, i64 8
  %656 = bitcast i16* %655 to <8 x i16>*
  store <8 x i16> %614, <8 x i16>* %656, align 2
  %657 = add i64 %616, 128
  %658 = add i64 %617, -8
  %659 = icmp eq i64 %658, 0
  br i1 %659, label %660, label %615, !llvm.loop !16

660:                                              ; preds = %615, %609
  %661 = phi i64 [ 0, %609 ], [ %657, %615 ]
  br i1 %593, label %672, label %662

662:                                              ; preds = %660, %662
  %663 = phi i64 [ %669, %662 ], [ %661, %660 ]
  %664 = phi i64 [ %670, %662 ], [ %590, %660 ]
  %665 = getelementptr i16, i16* %604, i64 %663
  %666 = bitcast i16* %665 to <8 x i16>*
  store <8 x i16> %612, <8 x i16>* %666, align 2
  %667 = getelementptr i16, i16* %665, i64 8
  %668 = bitcast i16* %667 to <8 x i16>*
  store <8 x i16> %614, <8 x i16>* %668, align 2
  %669 = add i64 %663, 16
  %670 = add i64 %664, -1
  %671 = icmp eq i64 %670, 0
  br i1 %671, label %672, label %662, !llvm.loop !17

672:                                              ; preds = %662, %660
  br i1 %594, label %682, label %673

673:                                              ; preds = %672, %602
  %674 = phi i16* [ %604, %602 ], [ %610, %672 ]
  %675 = phi i64 [ 0, %602 ], [ %589, %672 ]
  br label %676

676:                                              ; preds = %673, %676
  %677 = phi i16* [ %679, %676 ], [ %674, %673 ]
  %678 = phi i64 [ %680, %676 ], [ %675, %673 ]
  %679 = getelementptr inbounds i16, i16* %677, i64 1
  store i16 %608, i16* %677, align 2
  %680 = add nuw i64 %678, 1
  %681 = icmp eq i64 %680, %284
  br i1 %681, label %682, label %676, !llvm.loop !18

682:                                              ; preds = %676, %672
  %683 = getelementptr inbounds i16, i16* %604, i64 %284
  %684 = bitcast i16* %683 to i8*
  %685 = bitcast i16* %606 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %684, i8* align 2 %685, i64 %576, i1 false) #2
  %686 = load i16, i16* %605, align 2
  br i1 %578, label %761, label %687

687:                                              ; preds = %682
  br i1 %595, label %752, label %688

688:                                              ; preds = %687
  %689 = getelementptr i16, i16* %603, i64 %596
  %690 = insertelement <8 x i16> undef, i16 %686, i32 0
  %691 = shufflevector <8 x i16> %690, <8 x i16> undef, <8 x i32> zeroinitializer
  %692 = insertelement <8 x i16> undef, i16 %686, i32 0
  %693 = shufflevector <8 x i16> %692, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %598, label %739, label %694

694:                                              ; preds = %688, %694
  %695 = phi i64 [ %736, %694 ], [ 0, %688 ]
  %696 = phi i64 [ %737, %694 ], [ %599, %688 ]
  %697 = getelementptr i16, i16* %603, i64 %695
  %698 = bitcast i16* %697 to <8 x i16>*
  store <8 x i16> %691, <8 x i16>* %698, align 2
  %699 = getelementptr i16, i16* %697, i64 8
  %700 = bitcast i16* %699 to <8 x i16>*
  store <8 x i16> %693, <8 x i16>* %700, align 2
  %701 = or i64 %695, 16
  %702 = getelementptr i16, i16* %603, i64 %701
  %703 = bitcast i16* %702 to <8 x i16>*
  store <8 x i16> %691, <8 x i16>* %703, align 2
  %704 = getelementptr i16, i16* %702, i64 8
  %705 = bitcast i16* %704 to <8 x i16>*
  store <8 x i16> %693, <8 x i16>* %705, align 2
  %706 = or i64 %695, 32
  %707 = getelementptr i16, i16* %603, i64 %706
  %708 = bitcast i16* %707 to <8 x i16>*
  store <8 x i16> %691, <8 x i16>* %708, align 2
  %709 = getelementptr i16, i16* %707, i64 8
  %710 = bitcast i16* %709 to <8 x i16>*
  store <8 x i16> %693, <8 x i16>* %710, align 2
  %711 = or i64 %695, 48
  %712 = getelementptr i16, i16* %603, i64 %711
  %713 = bitcast i16* %712 to <8 x i16>*
  store <8 x i16> %691, <8 x i16>* %713, align 2
  %714 = getelementptr i16, i16* %712, i64 8
  %715 = bitcast i16* %714 to <8 x i16>*
  store <8 x i16> %693, <8 x i16>* %715, align 2
  %716 = or i64 %695, 64
  %717 = getelementptr i16, i16* %603, i64 %716
  %718 = bitcast i16* %717 to <8 x i16>*
  store <8 x i16> %691, <8 x i16>* %718, align 2
  %719 = getelementptr i16, i16* %717, i64 8
  %720 = bitcast i16* %719 to <8 x i16>*
  store <8 x i16> %693, <8 x i16>* %720, align 2
  %721 = or i64 %695, 80
  %722 = getelementptr i16, i16* %603, i64 %721
  %723 = bitcast i16* %722 to <8 x i16>*
  store <8 x i16> %691, <8 x i16>* %723, align 2
  %724 = getelementptr i16, i16* %722, i64 8
  %725 = bitcast i16* %724 to <8 x i16>*
  store <8 x i16> %693, <8 x i16>* %725, align 2
  %726 = or i64 %695, 96
  %727 = getelementptr i16, i16* %603, i64 %726
  %728 = bitcast i16* %727 to <8 x i16>*
  store <8 x i16> %691, <8 x i16>* %728, align 2
  %729 = getelementptr i16, i16* %727, i64 8
  %730 = bitcast i16* %729 to <8 x i16>*
  store <8 x i16> %693, <8 x i16>* %730, align 2
  %731 = or i64 %695, 112
  %732 = getelementptr i16, i16* %603, i64 %731
  %733 = bitcast i16* %732 to <8 x i16>*
  store <8 x i16> %691, <8 x i16>* %733, align 2
  %734 = getelementptr i16, i16* %732, i64 8
  %735 = bitcast i16* %734 to <8 x i16>*
  store <8 x i16> %693, <8 x i16>* %735, align 2
  %736 = add i64 %695, 128
  %737 = add i64 %696, -8
  %738 = icmp eq i64 %737, 0
  br i1 %738, label %739, label %694, !llvm.loop !19

739:                                              ; preds = %694, %688
  %740 = phi i64 [ 0, %688 ], [ %736, %694 ]
  br i1 %600, label %751, label %741

741:                                              ; preds = %739, %741
  %742 = phi i64 [ %748, %741 ], [ %740, %739 ]
  %743 = phi i64 [ %749, %741 ], [ %597, %739 ]
  %744 = getelementptr i16, i16* %603, i64 %742
  %745 = bitcast i16* %744 to <8 x i16>*
  store <8 x i16> %691, <8 x i16>* %745, align 2
  %746 = getelementptr i16, i16* %744, i64 8
  %747 = bitcast i16* %746 to <8 x i16>*
  store <8 x i16> %693, <8 x i16>* %747, align 2
  %748 = add i64 %742, 16
  %749 = add i64 %743, -1
  %750 = icmp eq i64 %749, 0
  br i1 %750, label %751, label %741, !llvm.loop !20

751:                                              ; preds = %741, %739
  br i1 %601, label %761, label %752

752:                                              ; preds = %751, %687
  %753 = phi i16* [ %603, %687 ], [ %689, %751 ]
  %754 = phi i64 [ 0, %687 ], [ %596, %751 ]
  br label %755

755:                                              ; preds = %752, %755
  %756 = phi i16* [ %758, %755 ], [ %753, %752 ]
  %757 = phi i64 [ %759, %755 ], [ %754, %752 ]
  %758 = getelementptr inbounds i16, i16* %756, i64 1
  store i16 %686, i16* %756, align 2
  %759 = add nuw i64 %757, 1
  %760 = icmp eq i64 %759, %577
  br i1 %760, label %761, label %755, !llvm.loop !21

761:                                              ; preds = %755, %751, %682
  %762 = getelementptr inbounds i16, i16* %606, i64 %579
  %763 = getelementptr inbounds i16, i16* %605, i64 %579
  %764 = getelementptr inbounds i16, i16* %604, i64 %580
  %765 = getelementptr inbounds i16, i16* %603, i64 %580
  %766 = add nuw nsw i32 %607, 1
  %767 = icmp eq i32 %766, %563
  br i1 %767, label %768, label %602

768:                                              ; preds = %761, %556
  %769 = add nsw i32 %563, -1
  %770 = mul nsw i32 %769, %561
  %771 = sext i32 %770 to i64
  %772 = getelementptr inbounds i16, i16* %567, i64 %771
  %773 = getelementptr inbounds i16, i16* %772, i64 %285
  %774 = mul nsw i32 %563, %561
  %775 = sext i32 %774 to i64
  %776 = getelementptr inbounds i16, i16* %567, i64 %775
  %777 = getelementptr inbounds i16, i16* %776, i64 %285
  %778 = add i32 %495, %562
  br i1 %497, label %779, label %789

779:                                              ; preds = %768
  %780 = mul i32 %31, %561
  %781 = sub i32 0, %780
  %782 = sext i32 %781 to i64
  %783 = getelementptr inbounds i16, i16* %567, i64 %782
  %784 = getelementptr inbounds i16, i16* %783, i64 %285
  %785 = bitcast i16* %569 to i8*
  %786 = sext i32 %778 to i64
  %787 = shl nsw i64 %786, 1
  %788 = sext i32 %561 to i64
  br label %800

789:                                              ; preds = %800, %768
  br i1 %509, label %790, label %1428

790:                                              ; preds = %789
  %791 = bitcast i16* %773 to i8*
  %792 = sext i32 %778 to i64
  %793 = shl nsw i64 %792, 1
  %794 = sext i32 %561 to i64
  %795 = add i32 %33, -1
  %796 = and i32 %33, 3
  %797 = icmp ult i32 %795, 3
  br i1 %797, label %1418, label %798

798:                                              ; preds = %790
  %799 = sub i32 %33, %796
  br label %813

800:                                              ; preds = %800, %779
  %801 = phi i16* [ %784, %779 ], [ %810, %800 ]
  %802 = phi i32 [ 0, %779 ], [ %811, %800 ]
  %803 = bitcast i16* %801 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %803, i8* align 2 %785, i64 %787, i1 false) #2
  %804 = getelementptr inbounds i16, i16* %801, i64 %788
  %805 = bitcast i16* %804 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %805, i8* align 2 %785, i64 %787, i1 false) #2
  %806 = getelementptr inbounds i16, i16* %804, i64 %788
  %807 = bitcast i16* %806 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %807, i8* align 2 %785, i64 %787, i1 false) #2
  %808 = getelementptr inbounds i16, i16* %806, i64 %788
  %809 = bitcast i16* %808 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %809, i8* align 2 %785, i64 %787, i1 false) #2
  %810 = getelementptr inbounds i16, i16* %808, i64 %788
  %811 = add nuw nsw i32 %802, 4
  %812 = icmp eq i32 %811, %31
  br i1 %812, label %789, label %800

813:                                              ; preds = %813, %798
  %814 = phi i16* [ %777, %798 ], [ %823, %813 ]
  %815 = phi i32 [ %799, %798 ], [ %824, %813 ]
  %816 = bitcast i16* %814 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %816, i8* align 2 %791, i64 %793, i1 false) #2
  %817 = getelementptr inbounds i16, i16* %814, i64 %794
  %818 = bitcast i16* %817 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %818, i8* align 2 %791, i64 %793, i1 false) #2
  %819 = getelementptr inbounds i16, i16* %817, i64 %794
  %820 = bitcast i16* %819 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %820, i8* align 2 %791, i64 %793, i1 false) #2
  %821 = getelementptr inbounds i16, i16* %819, i64 %794
  %822 = bitcast i16* %821 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %822, i8* align 2 %791, i64 %793, i1 false) #2
  %823 = getelementptr inbounds i16, i16* %821, i64 %794
  %824 = add i32 %815, -4
  %825 = icmp eq i32 %824, 0
  br i1 %825, label %1418, label %813

826:                                              ; preds = %2
  %827 = getelementptr inbounds i8, i8* %52, i64 -16
  %828 = sext i32 %11 to i64
  %829 = icmp sgt i32 %21, 0
  br i1 %829, label %832, label %830

830:                                              ; preds = %826
  %831 = sext i32 %54 to i64
  br label %876

832:                                              ; preds = %826
  %833 = getelementptr inbounds i8, i8* %52, i64 %828
  %834 = add nsw i32 %11, -1
  %835 = sext i32 %834 to i64
  %836 = getelementptr inbounds i8, i8* %48, i64 %835
  %837 = sext i32 %12 to i64
  %838 = sext i32 %50 to i64
  %839 = sext i32 %54 to i64
  %840 = and i32 %21, 1
  %841 = icmp eq i32 %21, 1
  br i1 %841, label %866, label %842

842:                                              ; preds = %832
  %843 = sub i32 %21, %840
  br label %844

844:                                              ; preds = %844, %842
  %845 = phi i8* [ %833, %842 ], [ %863, %844 ]
  %846 = phi i8* [ %827, %842 ], [ %862, %844 ]
  %847 = phi i8* [ %836, %842 ], [ %861, %844 ]
  %848 = phi i8* [ %48, %842 ], [ %860, %844 ]
  %849 = phi i32 [ %843, %842 ], [ %864, %844 ]
  %850 = load i8, i8* %848, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %846, i8 %850, i64 16, i1 false) #2
  %851 = getelementptr inbounds i8, i8* %846, i64 16
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %851, i8* align 1 %848, i64 %828, i1 false) #2
  %852 = load i8, i8* %847, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %845, i8 %852, i64 %837, i1 false) #2
  %853 = getelementptr inbounds i8, i8* %848, i64 %838
  %854 = getelementptr inbounds i8, i8* %847, i64 %838
  %855 = getelementptr inbounds i8, i8* %846, i64 %839
  %856 = getelementptr inbounds i8, i8* %845, i64 %839
  %857 = load i8, i8* %853, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %855, i8 %857, i64 16, i1 false) #2
  %858 = getelementptr inbounds i8, i8* %855, i64 16
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %858, i8* align 1 %853, i64 %828, i1 false) #2
  %859 = load i8, i8* %854, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %856, i8 %859, i64 %837, i1 false) #2
  %860 = getelementptr inbounds i8, i8* %853, i64 %838
  %861 = getelementptr inbounds i8, i8* %854, i64 %838
  %862 = getelementptr inbounds i8, i8* %855, i64 %839
  %863 = getelementptr inbounds i8, i8* %856, i64 %839
  %864 = add i32 %849, -2
  %865 = icmp eq i32 %864, 0
  br i1 %865, label %866, label %844

866:                                              ; preds = %844, %832
  %867 = phi i8* [ %833, %832 ], [ %863, %844 ]
  %868 = phi i8* [ %827, %832 ], [ %862, %844 ]
  %869 = phi i8* [ %836, %832 ], [ %861, %844 ]
  %870 = phi i8* [ %48, %832 ], [ %860, %844 ]
  %871 = icmp eq i32 %840, 0
  br i1 %871, label %876, label %872

872:                                              ; preds = %866
  %873 = load i8, i8* %870, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %868, i8 %873, i64 16, i1 false) #2
  %874 = getelementptr inbounds i8, i8* %868, i64 16
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %874, i8* align 1 %870, i64 %828, i1 false) #2
  %875 = load i8, i8* %869, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %867, i8 %875, i64 %837, i1 false) #2
  br label %876

876:                                              ; preds = %872, %866, %830
  %877 = phi i64 [ %831, %830 ], [ %839, %866 ], [ %839, %872 ]
  %878 = add nsw i32 %21, -1
  %879 = mul nsw i32 %54, %878
  %880 = sext i32 %879 to i64
  %881 = getelementptr inbounds i8, i8* %52, i64 %880
  %882 = add i32 %9, 16
  %883 = shl i32 %54, 4
  %884 = sub i32 0, %883
  %885 = sext i32 %884 to i64
  %886 = getelementptr inbounds i8, i8* %52, i64 %885
  %887 = getelementptr inbounds i8, i8* %886, i64 -16
  %888 = sext i32 %882 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %887, i8* align 1 %827, i64 %888, i1 false) #2
  %889 = getelementptr inbounds i8, i8* %887, i64 %877
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %889, i8* align 1 %827, i64 %888, i1 false) #2
  %890 = getelementptr inbounds i8, i8* %889, i64 %877
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %890, i8* align 1 %827, i64 %888, i1 false) #2
  %891 = getelementptr inbounds i8, i8* %890, i64 %877
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %891, i8* align 1 %827, i64 %888, i1 false) #2
  %892 = getelementptr inbounds i8, i8* %891, i64 %877
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %892, i8* align 1 %827, i64 %888, i1 false) #2
  %893 = getelementptr inbounds i8, i8* %892, i64 %877
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %893, i8* align 1 %827, i64 %888, i1 false) #2
  %894 = getelementptr inbounds i8, i8* %893, i64 %877
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %894, i8* align 1 %827, i64 %888, i1 false) #2
  %895 = getelementptr inbounds i8, i8* %894, i64 %877
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %895, i8* align 1 %827, i64 %888, i1 false) #2
  %896 = getelementptr inbounds i8, i8* %895, i64 %877
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %896, i8* align 1 %827, i64 %888, i1 false) #2
  %897 = getelementptr inbounds i8, i8* %896, i64 %877
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %897, i8* align 1 %827, i64 %888, i1 false) #2
  %898 = getelementptr inbounds i8, i8* %897, i64 %877
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %898, i8* align 1 %827, i64 %888, i1 false) #2
  %899 = getelementptr inbounds i8, i8* %898, i64 %877
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %899, i8* align 1 %827, i64 %888, i1 false) #2
  %900 = getelementptr inbounds i8, i8* %899, i64 %877
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %900, i8* align 1 %827, i64 %888, i1 false) #2
  %901 = getelementptr inbounds i8, i8* %900, i64 %877
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %901, i8* align 1 %827, i64 %888, i1 false) #2
  %902 = getelementptr inbounds i8, i8* %901, i64 %877
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %902, i8* align 1 %827, i64 %888, i1 false) #2
  %903 = getelementptr inbounds i8, i8* %902, i64 %877
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %903, i8* align 1 %827, i64 %888, i1 false) #2
  %904 = getelementptr inbounds i8, i8* %881, i64 -16
  %905 = icmp sgt i32 %22, 0
  br i1 %905, label %906, label %936

906:                                              ; preds = %876
  %907 = mul nsw i32 %54, %21
  %908 = sext i32 %907 to i64
  %909 = getelementptr inbounds i8, i8* %52, i64 %908
  %910 = getelementptr inbounds i8, i8* %909, i64 -16
  %911 = sub i32 %19, %21
  %912 = xor i32 %21, -1
  %913 = add i32 %19, %912
  %914 = and i32 %911, 3
  %915 = icmp ult i32 %913, 3
  br i1 %915, label %927, label %916

916:                                              ; preds = %906
  %917 = sub i32 %911, %914
  br label %918

918:                                              ; preds = %918, %916
  %919 = phi i8* [ %910, %916 ], [ %924, %918 ]
  %920 = phi i32 [ %917, %916 ], [ %925, %918 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %919, i8* align 1 %904, i64 %888, i1 false) #2
  %921 = getelementptr inbounds i8, i8* %919, i64 %877
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %921, i8* align 1 %904, i64 %888, i1 false) #2
  %922 = getelementptr inbounds i8, i8* %921, i64 %877
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %922, i8* align 1 %904, i64 %888, i1 false) #2
  %923 = getelementptr inbounds i8, i8* %922, i64 %877
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %923, i8* align 1 %904, i64 %888, i1 false) #2
  %924 = getelementptr inbounds i8, i8* %923, i64 %877
  %925 = add i32 %920, -4
  %926 = icmp eq i32 %925, 0
  br i1 %926, label %927, label %918

927:                                              ; preds = %918, %906
  %928 = phi i8* [ %910, %906 ], [ %924, %918 ]
  %929 = icmp eq i32 %914, 0
  br i1 %929, label %936, label %930

930:                                              ; preds = %927, %930
  %931 = phi i8* [ %933, %930 ], [ %928, %927 ]
  %932 = phi i32 [ %934, %930 ], [ %914, %927 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %931, i8* align 1 %904, i64 %888, i1 false) #2
  %933 = getelementptr inbounds i8, i8* %931, i64 %877
  %934 = add i32 %932, -1
  %935 = icmp eq i32 %934, 0
  br i1 %935, label %936, label %930, !llvm.loop !22

936:                                              ; preds = %927, %930, %876
  %937 = load i8*, i8** %38, align 8
  %938 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  %939 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %940 = load i8*, i8** %939, align 8
  %941 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  %942 = load i32, i32* %941, align 4
  %943 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 7
  %944 = load i32, i32* %943, align 4
  %945 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 8
  %946 = load i32, i32* %945, align 8
  %947 = select i1 %42, i32 2, i32 1
  %948 = zext i32 %32 to i64
  %949 = sub nsw i64 0, %948
  %950 = getelementptr inbounds i8, i8* %940, i64 %949
  %951 = sext i32 %944 to i64
  %952 = icmp sgt i32 %946, 0
  br i1 %952, label %953, label %1124

953:                                              ; preds = %936
  %954 = load i32, i32* %938, align 4
  %955 = getelementptr inbounds i8, i8* %940, i64 %951
  %956 = add nsw i32 %944, -1
  %957 = mul nsw i32 %956, %947
  %958 = sext i32 %957 to i64
  %959 = getelementptr inbounds i8, i8* %937, i64 %958
  %960 = icmp sgt i32 %944, 0
  %961 = sext i32 %34 to i64
  %962 = sext i32 %954 to i64
  %963 = sext i32 %942 to i64
  %964 = zext i32 %944 to i64
  %965 = add nsw i64 %964, -1
  %966 = and i64 %964, 4294967264
  %967 = add nsw i64 %966, -32
  %968 = lshr exact i64 %967, 5
  %969 = add nuw nsw i64 %968, 1
  %970 = icmp ult i32 %944, 32
  %971 = icmp ugt i64 %965, 4294967295
  %972 = or i1 %42, %971
  %973 = or i1 %970, %972
  %974 = and i64 %964, 4294967264
  %975 = and i64 %969, 1
  %976 = icmp eq i64 %967, 0
  %977 = sub nuw nsw i64 %969, %975
  %978 = icmp eq i64 %975, 0
  %979 = icmp eq i64 %974, %964
  %980 = and i64 %964, 3
  %981 = icmp eq i64 %980, 0
  br label %982

982:                                              ; preds = %1115, %953
  %983 = phi i64 [ %1123, %1115 ], [ 0, %953 ]
  %984 = phi i8* [ %1120, %1115 ], [ %955, %953 ]
  %985 = phi i8* [ %1119, %1115 ], [ %950, %953 ]
  %986 = phi i8* [ %1118, %1115 ], [ %959, %953 ]
  %987 = phi i8* [ %1117, %1115 ], [ %937, %953 ]
  %988 = phi i32 [ %1121, %1115 ], [ 0, %953 ]
  %989 = mul i64 %983, %963
  %990 = getelementptr i8, i8* %940, i64 %989
  %991 = add i64 %989, %964
  %992 = getelementptr i8, i8* %940, i64 %991
  %993 = mul i64 %983, %962
  %994 = getelementptr i8, i8* %937, i64 %993
  %995 = add i64 %993, %964
  %996 = getelementptr i8, i8* %937, i64 %995
  %997 = load i8, i8* %987, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %985, i8 %997, i64 %948, i1 false) #2
  br i1 %42, label %998, label %1078

998:                                              ; preds = %982
  br i1 %960, label %999, label %1115

999:                                              ; preds = %998
  br i1 %973, label %1000, label %1020

1000:                                             ; preds = %1077, %1020, %999
  %1001 = phi i64 [ 0, %1020 ], [ 0, %999 ], [ %974, %1077 ]
  %1002 = xor i64 %1001, -1
  %1003 = add nsw i64 %1002, %964
  br i1 %981, label %1017, label %1004

1004:                                             ; preds = %1000, %1004
  %1005 = phi i64 [ %1014, %1004 ], [ %1001, %1000 ]
  %1006 = phi i64 [ %1015, %1004 ], [ %980, %1000 ]
  %1007 = trunc i64 %1005 to i32
  %1008 = mul i32 %947, %1007
  %1009 = zext i32 %1008 to i64
  %1010 = getelementptr inbounds i8, i8* %987, i64 %1009
  %1011 = load i8, i8* %1010, align 1
  %1012 = add nuw nsw i64 %1005, %948
  %1013 = getelementptr inbounds i8, i8* %985, i64 %1012
  store i8 %1011, i8* %1013, align 1
  %1014 = add nuw nsw i64 %1005, 1
  %1015 = add i64 %1006, -1
  %1016 = icmp eq i64 %1015, 0
  br i1 %1016, label %1017, label %1004, !llvm.loop !23

1017:                                             ; preds = %1004, %1000
  %1018 = phi i64 [ %1001, %1000 ], [ %1014, %1004 ]
  %1019 = icmp ult i64 %1003, 3
  br i1 %1019, label %1115, label %1080

1020:                                             ; preds = %999
  %1021 = icmp ult i8* %990, %996
  %1022 = icmp ult i8* %994, %992
  %1023 = and i1 %1021, %1022
  br i1 %1023, label %1000, label %1024

1024:                                             ; preds = %1020
  br i1 %976, label %1060, label %1025

1025:                                             ; preds = %1024, %1025
  %1026 = phi i64 [ %1057, %1025 ], [ 0, %1024 ]
  %1027 = phi i64 [ %1058, %1025 ], [ %977, %1024 ]
  %1028 = trunc i64 %1026 to i32
  %1029 = mul i32 %947, %1028
  %1030 = zext i32 %1029 to i64
  %1031 = getelementptr inbounds i8, i8* %987, i64 %1030
  %1032 = bitcast i8* %1031 to <16 x i8>*
  %1033 = load <16 x i8>, <16 x i8>* %1032, align 1, !alias.scope !24
  %1034 = getelementptr inbounds i8, i8* %1031, i64 16
  %1035 = bitcast i8* %1034 to <16 x i8>*
  %1036 = load <16 x i8>, <16 x i8>* %1035, align 1, !alias.scope !24
  %1037 = or i64 %1026, %948
  %1038 = getelementptr inbounds i8, i8* %985, i64 %1037
  %1039 = bitcast i8* %1038 to <16 x i8>*
  store <16 x i8> %1033, <16 x i8>* %1039, align 1, !alias.scope !27, !noalias !24
  %1040 = getelementptr inbounds i8, i8* %1038, i64 16
  %1041 = bitcast i8* %1040 to <16 x i8>*
  store <16 x i8> %1036, <16 x i8>* %1041, align 1, !alias.scope !27, !noalias !24
  %1042 = or i64 %1026, 32
  %1043 = trunc i64 %1042 to i32
  %1044 = mul i32 %947, %1043
  %1045 = zext i32 %1044 to i64
  %1046 = getelementptr inbounds i8, i8* %987, i64 %1045
  %1047 = bitcast i8* %1046 to <16 x i8>*
  %1048 = load <16 x i8>, <16 x i8>* %1047, align 1, !alias.scope !24
  %1049 = getelementptr inbounds i8, i8* %1046, i64 16
  %1050 = bitcast i8* %1049 to <16 x i8>*
  %1051 = load <16 x i8>, <16 x i8>* %1050, align 1, !alias.scope !24
  %1052 = or i64 %1042, %948
  %1053 = getelementptr inbounds i8, i8* %985, i64 %1052
  %1054 = bitcast i8* %1053 to <16 x i8>*
  store <16 x i8> %1048, <16 x i8>* %1054, align 1, !alias.scope !27, !noalias !24
  %1055 = getelementptr inbounds i8, i8* %1053, i64 16
  %1056 = bitcast i8* %1055 to <16 x i8>*
  store <16 x i8> %1051, <16 x i8>* %1056, align 1, !alias.scope !27, !noalias !24
  %1057 = add i64 %1026, 64
  %1058 = add i64 %1027, -2
  %1059 = icmp eq i64 %1058, 0
  br i1 %1059, label %1060, label %1025, !llvm.loop !29

1060:                                             ; preds = %1025, %1024
  %1061 = phi i64 [ 0, %1024 ], [ %1057, %1025 ]
  br i1 %978, label %1077, label %1062

1062:                                             ; preds = %1060
  %1063 = trunc i64 %1061 to i32
  %1064 = mul i32 %947, %1063
  %1065 = zext i32 %1064 to i64
  %1066 = getelementptr inbounds i8, i8* %987, i64 %1065
  %1067 = bitcast i8* %1066 to <16 x i8>*
  %1068 = load <16 x i8>, <16 x i8>* %1067, align 1, !alias.scope !24
  %1069 = getelementptr inbounds i8, i8* %1066, i64 16
  %1070 = bitcast i8* %1069 to <16 x i8>*
  %1071 = load <16 x i8>, <16 x i8>* %1070, align 1, !alias.scope !24
  %1072 = or i64 %1061, %948
  %1073 = getelementptr inbounds i8, i8* %985, i64 %1072
  %1074 = bitcast i8* %1073 to <16 x i8>*
  store <16 x i8> %1068, <16 x i8>* %1074, align 1, !alias.scope !27, !noalias !24
  %1075 = getelementptr inbounds i8, i8* %1073, i64 16
  %1076 = bitcast i8* %1075 to <16 x i8>*
  store <16 x i8> %1071, <16 x i8>* %1076, align 1, !alias.scope !27, !noalias !24
  br label %1077

1077:                                             ; preds = %1060, %1062
  br i1 %979, label %1115, label %1000

1078:                                             ; preds = %982
  %1079 = getelementptr inbounds i8, i8* %985, i64 %948
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1079, i8* align 1 %987, i64 %951, i1 false) #2
  br label %1115

1080:                                             ; preds = %1017, %1080
  %1081 = phi i64 [ %1113, %1080 ], [ %1018, %1017 ]
  %1082 = trunc i64 %1081 to i32
  %1083 = mul i32 %947, %1082
  %1084 = zext i32 %1083 to i64
  %1085 = getelementptr inbounds i8, i8* %987, i64 %1084
  %1086 = load i8, i8* %1085, align 1
  %1087 = add nuw nsw i64 %1081, %948
  %1088 = getelementptr inbounds i8, i8* %985, i64 %1087
  store i8 %1086, i8* %1088, align 1
  %1089 = add nuw nsw i64 %1081, 1
  %1090 = trunc i64 %1089 to i32
  %1091 = mul i32 %947, %1090
  %1092 = zext i32 %1091 to i64
  %1093 = getelementptr inbounds i8, i8* %987, i64 %1092
  %1094 = load i8, i8* %1093, align 1
  %1095 = add nuw nsw i64 %1089, %948
  %1096 = getelementptr inbounds i8, i8* %985, i64 %1095
  store i8 %1094, i8* %1096, align 1
  %1097 = add nuw nsw i64 %1081, 2
  %1098 = trunc i64 %1097 to i32
  %1099 = mul i32 %947, %1098
  %1100 = zext i32 %1099 to i64
  %1101 = getelementptr inbounds i8, i8* %987, i64 %1100
  %1102 = load i8, i8* %1101, align 1
  %1103 = add nuw nsw i64 %1097, %948
  %1104 = getelementptr inbounds i8, i8* %985, i64 %1103
  store i8 %1102, i8* %1104, align 1
  %1105 = add nuw nsw i64 %1081, 3
  %1106 = trunc i64 %1105 to i32
  %1107 = mul i32 %947, %1106
  %1108 = zext i32 %1107 to i64
  %1109 = getelementptr inbounds i8, i8* %987, i64 %1108
  %1110 = load i8, i8* %1109, align 1
  %1111 = add nuw nsw i64 %1105, %948
  %1112 = getelementptr inbounds i8, i8* %985, i64 %1111
  store i8 %1110, i8* %1112, align 1
  %1113 = add nuw nsw i64 %1081, 4
  %1114 = icmp eq i64 %1113, %964
  br i1 %1114, label %1115, label %1080, !llvm.loop !30

1115:                                             ; preds = %1017, %1080, %1077, %1078, %998
  %1116 = load i8, i8* %986, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %984, i8 %1116, i64 %961, i1 false) #2
  %1117 = getelementptr inbounds i8, i8* %987, i64 %962
  %1118 = getelementptr inbounds i8, i8* %986, i64 %962
  %1119 = getelementptr inbounds i8, i8* %985, i64 %963
  %1120 = getelementptr inbounds i8, i8* %984, i64 %963
  %1121 = add nuw nsw i32 %988, 1
  %1122 = icmp eq i32 %1121, %946
  %1123 = add i64 %983, 1
  br i1 %1122, label %1124, label %982

1124:                                             ; preds = %1115, %936
  %1125 = add nsw i32 %946, -1
  %1126 = mul nsw i32 %1125, %942
  %1127 = sext i32 %1126 to i64
  %1128 = getelementptr inbounds i8, i8* %940, i64 %1127
  %1129 = getelementptr inbounds i8, i8* %1128, i64 %949
  %1130 = mul nsw i32 %946, %942
  %1131 = sext i32 %1130 to i64
  %1132 = getelementptr inbounds i8, i8* %940, i64 %1131
  %1133 = getelementptr inbounds i8, i8* %1132, i64 %949
  %1134 = add i32 %34, %32
  %1135 = add i32 %1134, %944
  %1136 = icmp sgt i32 %31, 0
  br i1 %1136, label %1137, label %1145

1137:                                             ; preds = %1124
  %1138 = mul i32 %31, %942
  %1139 = sub i32 0, %1138
  %1140 = sext i32 %1139 to i64
  %1141 = getelementptr inbounds i8, i8* %940, i64 %1140
  %1142 = getelementptr inbounds i8, i8* %1141, i64 %949
  %1143 = sext i32 %1135 to i64
  %1144 = sext i32 %942 to i64
  br label %1155

1145:                                             ; preds = %1155, %1124
  %1146 = icmp sgt i32 %33, 0
  br i1 %1146, label %1147, label %1182

1147:                                             ; preds = %1145
  %1148 = sext i32 %1135 to i64
  %1149 = sext i32 %942 to i64
  %1150 = add i32 %33, -1
  %1151 = and i32 %33, 3
  %1152 = icmp ult i32 %1150, 3
  br i1 %1152, label %1173, label %1153

1153:                                             ; preds = %1147
  %1154 = sub i32 %33, %1151
  br label %1164

1155:                                             ; preds = %1155, %1137
  %1156 = phi i8* [ %1142, %1137 ], [ %1161, %1155 ]
  %1157 = phi i32 [ 0, %1137 ], [ %1162, %1155 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1156, i8* align 1 %950, i64 %1143, i1 false) #2
  %1158 = getelementptr inbounds i8, i8* %1156, i64 %1144
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1158, i8* align 1 %950, i64 %1143, i1 false) #2
  %1159 = getelementptr inbounds i8, i8* %1158, i64 %1144
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1159, i8* align 1 %950, i64 %1143, i1 false) #2
  %1160 = getelementptr inbounds i8, i8* %1159, i64 %1144
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1160, i8* align 1 %950, i64 %1143, i1 false) #2
  %1161 = getelementptr inbounds i8, i8* %1160, i64 %1144
  %1162 = add nuw nsw i32 %1157, 4
  %1163 = icmp eq i32 %1162, %31
  br i1 %1163, label %1145, label %1155

1164:                                             ; preds = %1164, %1153
  %1165 = phi i8* [ %1133, %1153 ], [ %1170, %1164 ]
  %1166 = phi i32 [ %1154, %1153 ], [ %1171, %1164 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1165, i8* align 1 %1129, i64 %1148, i1 false) #2
  %1167 = getelementptr inbounds i8, i8* %1165, i64 %1149
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1167, i8* align 1 %1129, i64 %1148, i1 false) #2
  %1168 = getelementptr inbounds i8, i8* %1167, i64 %1149
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1168, i8* align 1 %1129, i64 %1148, i1 false) #2
  %1169 = getelementptr inbounds i8, i8* %1168, i64 %1149
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1169, i8* align 1 %1129, i64 %1148, i1 false) #2
  %1170 = getelementptr inbounds i8, i8* %1169, i64 %1149
  %1171 = add i32 %1166, -4
  %1172 = icmp eq i32 %1171, 0
  br i1 %1172, label %1173, label %1164

1173:                                             ; preds = %1164, %1147
  %1174 = phi i8* [ %1133, %1147 ], [ %1170, %1164 ]
  %1175 = icmp eq i32 %1151, 0
  br i1 %1175, label %1182, label %1176

1176:                                             ; preds = %1173, %1176
  %1177 = phi i8* [ %1179, %1176 ], [ %1174, %1173 ]
  %1178 = phi i32 [ %1180, %1176 ], [ %1151, %1173 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1177, i8* align 1 %1129, i64 %1148, i1 false) #2
  %1179 = getelementptr inbounds i8, i8* %1177, i64 %1149
  %1180 = add i32 %1178, -1
  %1181 = icmp eq i32 %1180, 0
  br i1 %1181, label %1182, label %1176, !llvm.loop !31

1182:                                             ; preds = %1173, %1176, %1145
  %1183 = load i8*, i8** %35, align 8
  %1184 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %1185 = load i8*, i8** %1184, align 8
  %1186 = load i32, i32* %941, align 4
  %1187 = load i32, i32* %943, align 4
  %1188 = load i32, i32* %945, align 8
  %1189 = getelementptr inbounds i8, i8* %1185, i64 %949
  %1190 = sext i32 %1187 to i64
  %1191 = icmp sgt i32 %1188, 0
  br i1 %1191, label %1192, label %1363

1192:                                             ; preds = %1182
  %1193 = load i32, i32* %938, align 4
  %1194 = getelementptr inbounds i8, i8* %1185, i64 %1190
  %1195 = add nsw i32 %1187, -1
  %1196 = mul nsw i32 %1195, %947
  %1197 = sext i32 %1196 to i64
  %1198 = getelementptr inbounds i8, i8* %1183, i64 %1197
  %1199 = icmp sgt i32 %1187, 0
  %1200 = sext i32 %34 to i64
  %1201 = sext i32 %1193 to i64
  %1202 = sext i32 %1186 to i64
  %1203 = zext i32 %1187 to i64
  %1204 = add nsw i64 %1203, -1
  %1205 = and i64 %1203, 4294967264
  %1206 = add nsw i64 %1205, -32
  %1207 = lshr exact i64 %1206, 5
  %1208 = add nuw nsw i64 %1207, 1
  %1209 = icmp ult i32 %1187, 32
  %1210 = icmp ugt i64 %1204, 4294967295
  %1211 = or i1 %42, %1210
  %1212 = or i1 %1209, %1211
  %1213 = and i64 %1203, 4294967264
  %1214 = and i64 %1208, 1
  %1215 = icmp eq i64 %1206, 0
  %1216 = sub nuw nsw i64 %1208, %1214
  %1217 = icmp eq i64 %1214, 0
  %1218 = icmp eq i64 %1213, %1203
  %1219 = and i64 %1203, 3
  %1220 = icmp eq i64 %1219, 0
  br label %1221

1221:                                             ; preds = %1354, %1192
  %1222 = phi i64 [ %1362, %1354 ], [ 0, %1192 ]
  %1223 = phi i8* [ %1359, %1354 ], [ %1194, %1192 ]
  %1224 = phi i8* [ %1358, %1354 ], [ %1189, %1192 ]
  %1225 = phi i8* [ %1357, %1354 ], [ %1198, %1192 ]
  %1226 = phi i8* [ %1356, %1354 ], [ %1183, %1192 ]
  %1227 = phi i32 [ %1360, %1354 ], [ 0, %1192 ]
  %1228 = mul i64 %1222, %1202
  %1229 = getelementptr i8, i8* %1185, i64 %1228
  %1230 = add i64 %1228, %1203
  %1231 = getelementptr i8, i8* %1185, i64 %1230
  %1232 = mul i64 %1222, %1201
  %1233 = getelementptr i8, i8* %1183, i64 %1232
  %1234 = add i64 %1232, %1203
  %1235 = getelementptr i8, i8* %1183, i64 %1234
  %1236 = load i8, i8* %1226, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1224, i8 %1236, i64 %948, i1 false) #2
  br i1 %42, label %1237, label %1317

1237:                                             ; preds = %1221
  br i1 %1199, label %1238, label %1354

1238:                                             ; preds = %1237
  br i1 %1212, label %1239, label %1259

1239:                                             ; preds = %1316, %1259, %1238
  %1240 = phi i64 [ 0, %1259 ], [ 0, %1238 ], [ %1213, %1316 ]
  %1241 = xor i64 %1240, -1
  %1242 = add nsw i64 %1241, %1203
  br i1 %1220, label %1256, label %1243

1243:                                             ; preds = %1239, %1243
  %1244 = phi i64 [ %1253, %1243 ], [ %1240, %1239 ]
  %1245 = phi i64 [ %1254, %1243 ], [ %1219, %1239 ]
  %1246 = trunc i64 %1244 to i32
  %1247 = mul i32 %947, %1246
  %1248 = zext i32 %1247 to i64
  %1249 = getelementptr inbounds i8, i8* %1226, i64 %1248
  %1250 = load i8, i8* %1249, align 1
  %1251 = add nuw nsw i64 %1244, %948
  %1252 = getelementptr inbounds i8, i8* %1224, i64 %1251
  store i8 %1250, i8* %1252, align 1
  %1253 = add nuw nsw i64 %1244, 1
  %1254 = add i64 %1245, -1
  %1255 = icmp eq i64 %1254, 0
  br i1 %1255, label %1256, label %1243, !llvm.loop !32

1256:                                             ; preds = %1243, %1239
  %1257 = phi i64 [ %1240, %1239 ], [ %1253, %1243 ]
  %1258 = icmp ult i64 %1242, 3
  br i1 %1258, label %1354, label %1319

1259:                                             ; preds = %1238
  %1260 = icmp ult i8* %1229, %1235
  %1261 = icmp ult i8* %1233, %1231
  %1262 = and i1 %1260, %1261
  br i1 %1262, label %1239, label %1263

1263:                                             ; preds = %1259
  br i1 %1215, label %1299, label %1264

1264:                                             ; preds = %1263, %1264
  %1265 = phi i64 [ %1296, %1264 ], [ 0, %1263 ]
  %1266 = phi i64 [ %1297, %1264 ], [ %1216, %1263 ]
  %1267 = trunc i64 %1265 to i32
  %1268 = mul i32 %947, %1267
  %1269 = zext i32 %1268 to i64
  %1270 = getelementptr inbounds i8, i8* %1226, i64 %1269
  %1271 = bitcast i8* %1270 to <16 x i8>*
  %1272 = load <16 x i8>, <16 x i8>* %1271, align 1, !alias.scope !33
  %1273 = getelementptr inbounds i8, i8* %1270, i64 16
  %1274 = bitcast i8* %1273 to <16 x i8>*
  %1275 = load <16 x i8>, <16 x i8>* %1274, align 1, !alias.scope !33
  %1276 = or i64 %1265, %948
  %1277 = getelementptr inbounds i8, i8* %1224, i64 %1276
  %1278 = bitcast i8* %1277 to <16 x i8>*
  store <16 x i8> %1272, <16 x i8>* %1278, align 1, !alias.scope !36, !noalias !33
  %1279 = getelementptr inbounds i8, i8* %1277, i64 16
  %1280 = bitcast i8* %1279 to <16 x i8>*
  store <16 x i8> %1275, <16 x i8>* %1280, align 1, !alias.scope !36, !noalias !33
  %1281 = or i64 %1265, 32
  %1282 = trunc i64 %1281 to i32
  %1283 = mul i32 %947, %1282
  %1284 = zext i32 %1283 to i64
  %1285 = getelementptr inbounds i8, i8* %1226, i64 %1284
  %1286 = bitcast i8* %1285 to <16 x i8>*
  %1287 = load <16 x i8>, <16 x i8>* %1286, align 1, !alias.scope !33
  %1288 = getelementptr inbounds i8, i8* %1285, i64 16
  %1289 = bitcast i8* %1288 to <16 x i8>*
  %1290 = load <16 x i8>, <16 x i8>* %1289, align 1, !alias.scope !33
  %1291 = or i64 %1281, %948
  %1292 = getelementptr inbounds i8, i8* %1224, i64 %1291
  %1293 = bitcast i8* %1292 to <16 x i8>*
  store <16 x i8> %1287, <16 x i8>* %1293, align 1, !alias.scope !36, !noalias !33
  %1294 = getelementptr inbounds i8, i8* %1292, i64 16
  %1295 = bitcast i8* %1294 to <16 x i8>*
  store <16 x i8> %1290, <16 x i8>* %1295, align 1, !alias.scope !36, !noalias !33
  %1296 = add i64 %1265, 64
  %1297 = add i64 %1266, -2
  %1298 = icmp eq i64 %1297, 0
  br i1 %1298, label %1299, label %1264, !llvm.loop !38

1299:                                             ; preds = %1264, %1263
  %1300 = phi i64 [ 0, %1263 ], [ %1296, %1264 ]
  br i1 %1217, label %1316, label %1301

1301:                                             ; preds = %1299
  %1302 = trunc i64 %1300 to i32
  %1303 = mul i32 %947, %1302
  %1304 = zext i32 %1303 to i64
  %1305 = getelementptr inbounds i8, i8* %1226, i64 %1304
  %1306 = bitcast i8* %1305 to <16 x i8>*
  %1307 = load <16 x i8>, <16 x i8>* %1306, align 1, !alias.scope !33
  %1308 = getelementptr inbounds i8, i8* %1305, i64 16
  %1309 = bitcast i8* %1308 to <16 x i8>*
  %1310 = load <16 x i8>, <16 x i8>* %1309, align 1, !alias.scope !33
  %1311 = or i64 %1300, %948
  %1312 = getelementptr inbounds i8, i8* %1224, i64 %1311
  %1313 = bitcast i8* %1312 to <16 x i8>*
  store <16 x i8> %1307, <16 x i8>* %1313, align 1, !alias.scope !36, !noalias !33
  %1314 = getelementptr inbounds i8, i8* %1312, i64 16
  %1315 = bitcast i8* %1314 to <16 x i8>*
  store <16 x i8> %1310, <16 x i8>* %1315, align 1, !alias.scope !36, !noalias !33
  br label %1316

1316:                                             ; preds = %1299, %1301
  br i1 %1218, label %1354, label %1239

1317:                                             ; preds = %1221
  %1318 = getelementptr inbounds i8, i8* %1224, i64 %948
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1318, i8* align 1 %1226, i64 %1190, i1 false) #2
  br label %1354

1319:                                             ; preds = %1256, %1319
  %1320 = phi i64 [ %1352, %1319 ], [ %1257, %1256 ]
  %1321 = trunc i64 %1320 to i32
  %1322 = mul i32 %947, %1321
  %1323 = zext i32 %1322 to i64
  %1324 = getelementptr inbounds i8, i8* %1226, i64 %1323
  %1325 = load i8, i8* %1324, align 1
  %1326 = add nuw nsw i64 %1320, %948
  %1327 = getelementptr inbounds i8, i8* %1224, i64 %1326
  store i8 %1325, i8* %1327, align 1
  %1328 = add nuw nsw i64 %1320, 1
  %1329 = trunc i64 %1328 to i32
  %1330 = mul i32 %947, %1329
  %1331 = zext i32 %1330 to i64
  %1332 = getelementptr inbounds i8, i8* %1226, i64 %1331
  %1333 = load i8, i8* %1332, align 1
  %1334 = add nuw nsw i64 %1328, %948
  %1335 = getelementptr inbounds i8, i8* %1224, i64 %1334
  store i8 %1333, i8* %1335, align 1
  %1336 = add nuw nsw i64 %1320, 2
  %1337 = trunc i64 %1336 to i32
  %1338 = mul i32 %947, %1337
  %1339 = zext i32 %1338 to i64
  %1340 = getelementptr inbounds i8, i8* %1226, i64 %1339
  %1341 = load i8, i8* %1340, align 1
  %1342 = add nuw nsw i64 %1336, %948
  %1343 = getelementptr inbounds i8, i8* %1224, i64 %1342
  store i8 %1341, i8* %1343, align 1
  %1344 = add nuw nsw i64 %1320, 3
  %1345 = trunc i64 %1344 to i32
  %1346 = mul i32 %947, %1345
  %1347 = zext i32 %1346 to i64
  %1348 = getelementptr inbounds i8, i8* %1226, i64 %1347
  %1349 = load i8, i8* %1348, align 1
  %1350 = add nuw nsw i64 %1344, %948
  %1351 = getelementptr inbounds i8, i8* %1224, i64 %1350
  store i8 %1349, i8* %1351, align 1
  %1352 = add nuw nsw i64 %1320, 4
  %1353 = icmp eq i64 %1352, %1203
  br i1 %1353, label %1354, label %1319, !llvm.loop !39

1354:                                             ; preds = %1256, %1319, %1316, %1317, %1237
  %1355 = load i8, i8* %1225, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1223, i8 %1355, i64 %1200, i1 false) #2
  %1356 = getelementptr inbounds i8, i8* %1226, i64 %1201
  %1357 = getelementptr inbounds i8, i8* %1225, i64 %1201
  %1358 = getelementptr inbounds i8, i8* %1224, i64 %1202
  %1359 = getelementptr inbounds i8, i8* %1223, i64 %1202
  %1360 = add nuw nsw i32 %1227, 1
  %1361 = icmp eq i32 %1360, %1188
  %1362 = add i64 %1222, 1
  br i1 %1361, label %1363, label %1221

1363:                                             ; preds = %1354, %1182
  %1364 = add nsw i32 %1188, -1
  %1365 = mul nsw i32 %1364, %1186
  %1366 = sext i32 %1365 to i64
  %1367 = getelementptr inbounds i8, i8* %1185, i64 %1366
  %1368 = getelementptr inbounds i8, i8* %1367, i64 %949
  %1369 = mul nsw i32 %1188, %1186
  %1370 = sext i32 %1369 to i64
  %1371 = getelementptr inbounds i8, i8* %1185, i64 %1370
  %1372 = getelementptr inbounds i8, i8* %1371, i64 %949
  %1373 = add i32 %1134, %1187
  br i1 %1136, label %1374, label %1382

1374:                                             ; preds = %1363
  %1375 = mul i32 %31, %1186
  %1376 = sub i32 0, %1375
  %1377 = sext i32 %1376 to i64
  %1378 = getelementptr inbounds i8, i8* %1185, i64 %1377
  %1379 = getelementptr inbounds i8, i8* %1378, i64 %949
  %1380 = sext i32 %1373 to i64
  %1381 = sext i32 %1186 to i64
  br label %1391

1382:                                             ; preds = %1391, %1363
  br i1 %1146, label %1383, label %1428

1383:                                             ; preds = %1382
  %1384 = sext i32 %1373 to i64
  %1385 = sext i32 %1186 to i64
  %1386 = add i32 %33, -1
  %1387 = and i32 %33, 3
  %1388 = icmp ult i32 %1386, 3
  br i1 %1388, label %1409, label %1389

1389:                                             ; preds = %1383
  %1390 = sub i32 %33, %1387
  br label %1400

1391:                                             ; preds = %1391, %1374
  %1392 = phi i8* [ %1379, %1374 ], [ %1397, %1391 ]
  %1393 = phi i32 [ 0, %1374 ], [ %1398, %1391 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1392, i8* align 1 %1189, i64 %1380, i1 false) #2
  %1394 = getelementptr inbounds i8, i8* %1392, i64 %1381
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1394, i8* align 1 %1189, i64 %1380, i1 false) #2
  %1395 = getelementptr inbounds i8, i8* %1394, i64 %1381
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1395, i8* align 1 %1189, i64 %1380, i1 false) #2
  %1396 = getelementptr inbounds i8, i8* %1395, i64 %1381
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1396, i8* align 1 %1189, i64 %1380, i1 false) #2
  %1397 = getelementptr inbounds i8, i8* %1396, i64 %1381
  %1398 = add nuw nsw i32 %1393, 4
  %1399 = icmp eq i32 %1398, %31
  br i1 %1399, label %1382, label %1391

1400:                                             ; preds = %1400, %1389
  %1401 = phi i8* [ %1372, %1389 ], [ %1406, %1400 ]
  %1402 = phi i32 [ %1390, %1389 ], [ %1407, %1400 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1401, i8* align 1 %1368, i64 %1384, i1 false) #2
  %1403 = getelementptr inbounds i8, i8* %1401, i64 %1385
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1403, i8* align 1 %1368, i64 %1384, i1 false) #2
  %1404 = getelementptr inbounds i8, i8* %1403, i64 %1385
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1404, i8* align 1 %1368, i64 %1384, i1 false) #2
  %1405 = getelementptr inbounds i8, i8* %1404, i64 %1385
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1405, i8* align 1 %1368, i64 %1384, i1 false) #2
  %1406 = getelementptr inbounds i8, i8* %1405, i64 %1385
  %1407 = add i32 %1402, -4
  %1408 = icmp eq i32 %1407, 0
  br i1 %1408, label %1409, label %1400

1409:                                             ; preds = %1400, %1383
  %1410 = phi i8* [ %1372, %1383 ], [ %1406, %1400 ]
  %1411 = icmp eq i32 %1387, 0
  br i1 %1411, label %1428, label %1412

1412:                                             ; preds = %1409, %1412
  %1413 = phi i8* [ %1415, %1412 ], [ %1410, %1409 ]
  %1414 = phi i32 [ %1416, %1412 ], [ %1387, %1409 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1413, i8* align 1 %1368, i64 %1384, i1 false) #2
  %1415 = getelementptr inbounds i8, i8* %1413, i64 %1385
  %1416 = add i32 %1414, -1
  %1417 = icmp eq i32 %1416, 0
  br i1 %1417, label %1428, label %1412, !llvm.loop !40

1418:                                             ; preds = %813, %790
  %1419 = phi i16* [ %777, %790 ], [ %823, %813 ]
  %1420 = icmp eq i32 %796, 0
  br i1 %1420, label %1428, label %1421

1421:                                             ; preds = %1418, %1421
  %1422 = phi i16* [ %1425, %1421 ], [ %1419, %1418 ]
  %1423 = phi i32 [ %1426, %1421 ], [ %796, %1418 ]
  %1424 = bitcast i16* %1422 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1424, i8* align 2 %791, i64 %793, i1 false) #2
  %1425 = getelementptr inbounds i16, i16* %1422, i64 %794
  %1426 = add i32 %1423, -1
  %1427 = icmp eq i32 %1426, 0
  br i1 %1427, label %1428, label %1421, !llvm.loop !41

1428:                                             ; preds = %1418, %1421, %1409, %1412, %1382, %789
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_copy_and_extend_frame_with_rect(%struct.yv12_buffer_config* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly, i32, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i32 %2, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %6
  %9 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 19
  %10 = load i32, i32* %9, align 8
  br label %11

11:                                               ; preds = %6, %8
  %12 = phi i32 [ %10, %8 ], [ 0, %6 ]
  %13 = icmp eq i32 %3, 0
  br i1 %13, label %14, label %17

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 19
  %16 = load i32, i32* %15, align 8
  br label %17

17:                                               ; preds = %11, %14
  %18 = phi i32 [ %16, %14 ], [ 0, %11 ]
  %19 = add nsw i32 %4, %2
  %20 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %19, %21
  br i1 %22, label %23, label %30

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 19
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = sub i32 %25, %19
  %29 = add i32 %28, %27
  br label %30

30:                                               ; preds = %17, %23
  %31 = phi i32 [ %29, %23 ], [ 0, %17 ]
  %32 = add nsw i32 %5, %3
  %33 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0
  %34 = load i32, i32* %33, align 8
  %35 = icmp eq i32 %32, %34
  br i1 %35, label %36, label %43

36:                                               ; preds = %30
  %37 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 19
  %38 = load i32, i32* %37, align 8
  %39 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0
  %40 = load i32, i32* %39, align 8
  %41 = sub i32 %38, %32
  %42 = add i32 %41, %40
  br label %43

43:                                               ; preds = %30, %36
  %44 = phi i32 [ %42, %36 ], [ 0, %30 ]
  %45 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %46 = load i32, i32* %45, align 8
  %47 = mul nsw i32 %46, %2
  %48 = add nsw i32 %47, %3
  %49 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %50 = load i32, i32* %49, align 8
  %51 = mul nsw i32 %50, %2
  %52 = add nsw i32 %51, %3
  %53 = add nsw i32 %12, 1
  %54 = ashr i32 %53, 1
  %55 = add nsw i32 %18, 1
  %56 = ashr i32 %55, 1
  %57 = add nsw i32 %31, 1
  %58 = ashr i32 %57, 1
  %59 = add nsw i32 %44, 1
  %60 = ashr i32 %59, 1
  %61 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  %62 = load i32, i32* %61, align 4
  %63 = mul nsw i32 %62, %2
  %64 = ashr i32 %63, 1
  %65 = ashr i32 %3, 1
  %66 = add nsw i32 %64, %65
  %67 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  %68 = load i32, i32* %67, align 4
  %69 = mul nsw i32 %68, %2
  %70 = ashr i32 %69, 1
  %71 = add nsw i32 %70, %65
  %72 = add nsw i32 %4, 1
  %73 = ashr i32 %72, 1
  %74 = add nsw i32 %5, 1
  %75 = ashr i32 %74, 1
  %76 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 15
  %77 = bitcast i8** %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 14
  %80 = bitcast i8** %79 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = sub i64 %78, %81
  %83 = icmp eq i64 %82, 1
  %84 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 13
  %85 = load i8*, i8** %84, align 8
  %86 = sext i32 %48 to i64
  %87 = getelementptr inbounds i8, i8* %85, i64 %86
  %88 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %89 = load i8*, i8** %88, align 8
  %90 = sext i32 %52 to i64
  %91 = getelementptr inbounds i8, i8* %89, i64 %90
  %92 = sext i32 %18 to i64
  %93 = sub nsw i64 0, %92
  %94 = getelementptr inbounds i8, i8* %91, i64 %93
  %95 = sext i32 %5 to i64
  %96 = icmp sgt i32 %4, 0
  br i1 %96, label %97, label %141

97:                                               ; preds = %43
  %98 = getelementptr inbounds i8, i8* %91, i64 %95
  %99 = add nsw i32 %5, -1
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i8, i8* %87, i64 %100
  %102 = sext i32 %44 to i64
  %103 = sext i32 %46 to i64
  %104 = sext i32 %50 to i64
  %105 = and i32 %4, 1
  %106 = icmp eq i32 %4, 1
  br i1 %106, label %131, label %107

107:                                              ; preds = %97
  %108 = sub i32 %4, %105
  br label %109

109:                                              ; preds = %109, %107
  %110 = phi i8* [ %98, %107 ], [ %128, %109 ]
  %111 = phi i8* [ %94, %107 ], [ %127, %109 ]
  %112 = phi i8* [ %101, %107 ], [ %126, %109 ]
  %113 = phi i8* [ %87, %107 ], [ %125, %109 ]
  %114 = phi i32 [ %108, %107 ], [ %129, %109 ]
  %115 = load i8, i8* %113, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %111, i8 %115, i64 %92, i1 false) #2
  %116 = getelementptr inbounds i8, i8* %111, i64 %92
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %116, i8* align 1 %113, i64 %95, i1 false) #2
  %117 = load i8, i8* %112, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %110, i8 %117, i64 %102, i1 false) #2
  %118 = getelementptr inbounds i8, i8* %113, i64 %103
  %119 = getelementptr inbounds i8, i8* %112, i64 %103
  %120 = getelementptr inbounds i8, i8* %111, i64 %104
  %121 = getelementptr inbounds i8, i8* %110, i64 %104
  %122 = load i8, i8* %118, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %120, i8 %122, i64 %92, i1 false) #2
  %123 = getelementptr inbounds i8, i8* %120, i64 %92
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %123, i8* align 1 %118, i64 %95, i1 false) #2
  %124 = load i8, i8* %119, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %121, i8 %124, i64 %102, i1 false) #2
  %125 = getelementptr inbounds i8, i8* %118, i64 %103
  %126 = getelementptr inbounds i8, i8* %119, i64 %103
  %127 = getelementptr inbounds i8, i8* %120, i64 %104
  %128 = getelementptr inbounds i8, i8* %121, i64 %104
  %129 = add i32 %114, -2
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %109

131:                                              ; preds = %109, %97
  %132 = phi i8* [ %98, %97 ], [ %128, %109 ]
  %133 = phi i8* [ %94, %97 ], [ %127, %109 ]
  %134 = phi i8* [ %101, %97 ], [ %126, %109 ]
  %135 = phi i8* [ %87, %97 ], [ %125, %109 ]
  %136 = icmp eq i32 %105, 0
  br i1 %136, label %141, label %137

137:                                              ; preds = %131
  %138 = load i8, i8* %135, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %133, i8 %138, i64 %92, i1 false) #2
  %139 = getelementptr inbounds i8, i8* %133, i64 %92
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %139, i8* align 1 %135, i64 %95, i1 false) #2
  %140 = load i8, i8* %134, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %132, i8 %140, i64 %102, i1 false) #2
  br label %141

141:                                              ; preds = %137, %131, %43
  %142 = add nsw i32 %4, -1
  %143 = mul nsw i32 %50, %142
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i8, i8* %91, i64 %144
  %146 = getelementptr inbounds i8, i8* %145, i64 %93
  %147 = mul nsw i32 %50, %4
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds i8, i8* %91, i64 %148
  %150 = getelementptr inbounds i8, i8* %149, i64 %93
  %151 = add i32 %18, %5
  %152 = add i32 %151, %44
  %153 = icmp sgt i32 %12, 0
  br i1 %153, label %154, label %176

154:                                              ; preds = %141
  %155 = mul i32 %12, %50
  %156 = sub i32 0, %155
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds i8, i8* %91, i64 %157
  %159 = getelementptr inbounds i8, i8* %158, i64 %93
  %160 = sext i32 %152 to i64
  %161 = sext i32 %50 to i64
  %162 = add i32 %12, -1
  %163 = and i32 %12, 3
  %164 = icmp ult i32 %162, 3
  br i1 %164, label %167, label %165

165:                                              ; preds = %154
  %166 = sub i32 %12, %163
  br label %186

167:                                              ; preds = %186, %154
  %168 = phi i8* [ %159, %154 ], [ %192, %186 ]
  %169 = icmp eq i32 %163, 0
  br i1 %169, label %176, label %170

170:                                              ; preds = %167, %170
  %171 = phi i8* [ %173, %170 ], [ %168, %167 ]
  %172 = phi i32 [ %174, %170 ], [ %163, %167 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %171, i8* align 1 %94, i64 %160, i1 false) #2
  %173 = getelementptr inbounds i8, i8* %171, i64 %161
  %174 = add i32 %172, -1
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %176, label %170, !llvm.loop !42

176:                                              ; preds = %167, %170, %141
  %177 = icmp sgt i32 %31, 0
  br i1 %177, label %178, label %213

178:                                              ; preds = %176
  %179 = sext i32 %152 to i64
  %180 = sext i32 %50 to i64
  %181 = add i32 %31, -1
  %182 = and i32 %31, 3
  %183 = icmp ult i32 %181, 3
  br i1 %183, label %204, label %184

184:                                              ; preds = %178
  %185 = sub i32 %31, %182
  br label %195

186:                                              ; preds = %186, %165
  %187 = phi i8* [ %159, %165 ], [ %192, %186 ]
  %188 = phi i32 [ %166, %165 ], [ %193, %186 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %187, i8* align 1 %94, i64 %160, i1 false) #2
  %189 = getelementptr inbounds i8, i8* %187, i64 %161
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %189, i8* align 1 %94, i64 %160, i1 false) #2
  %190 = getelementptr inbounds i8, i8* %189, i64 %161
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %190, i8* align 1 %94, i64 %160, i1 false) #2
  %191 = getelementptr inbounds i8, i8* %190, i64 %161
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %191, i8* align 1 %94, i64 %160, i1 false) #2
  %192 = getelementptr inbounds i8, i8* %191, i64 %161
  %193 = add i32 %188, -4
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %167, label %186

195:                                              ; preds = %195, %184
  %196 = phi i8* [ %150, %184 ], [ %201, %195 ]
  %197 = phi i32 [ %185, %184 ], [ %202, %195 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %196, i8* align 1 %146, i64 %179, i1 false) #2
  %198 = getelementptr inbounds i8, i8* %196, i64 %180
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %198, i8* align 1 %146, i64 %179, i1 false) #2
  %199 = getelementptr inbounds i8, i8* %198, i64 %180
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %199, i8* align 1 %146, i64 %179, i1 false) #2
  %200 = getelementptr inbounds i8, i8* %199, i64 %180
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %200, i8* align 1 %146, i64 %179, i1 false) #2
  %201 = getelementptr inbounds i8, i8* %200, i64 %180
  %202 = add i32 %197, -4
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %204, label %195

204:                                              ; preds = %195, %178
  %205 = phi i8* [ %150, %178 ], [ %201, %195 ]
  %206 = icmp eq i32 %182, 0
  br i1 %206, label %213, label %207

207:                                              ; preds = %204, %207
  %208 = phi i8* [ %210, %207 ], [ %205, %204 ]
  %209 = phi i32 [ %211, %207 ], [ %182, %204 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %208, i8* align 1 %146, i64 %179, i1 false) #2
  %210 = getelementptr inbounds i8, i8* %208, i64 %180
  %211 = add i32 %209, -1
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %213, label %207, !llvm.loop !43

213:                                              ; preds = %204, %207, %176
  %214 = load i8*, i8** %79, align 8
  %215 = sext i32 %66 to i64
  %216 = getelementptr inbounds i8, i8* %214, i64 %215
  %217 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %218 = load i8*, i8** %217, align 8
  %219 = sext i32 %71 to i64
  %220 = getelementptr inbounds i8, i8* %218, i64 %219
  %221 = load i32, i32* %67, align 4
  %222 = select i1 %83, i32 2, i32 1
  %223 = sext i32 %56 to i64
  %224 = sub nsw i64 0, %223
  %225 = getelementptr inbounds i8, i8* %220, i64 %224
  %226 = sext i32 %75 to i64
  br i1 %96, label %227, label %402

227:                                              ; preds = %213
  %228 = load i32, i32* %61, align 4
  %229 = getelementptr inbounds i8, i8* %220, i64 %226
  %230 = add nsw i32 %75, -1
  %231 = mul nsw i32 %222, %230
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds i8, i8* %216, i64 %232
  %234 = icmp sgt i32 %5, 0
  %235 = sext i32 %60 to i64
  %236 = sext i32 %228 to i64
  %237 = sext i32 %221 to i64
  %238 = zext i32 %75 to i64
  %239 = add nsw i64 %238, -1
  %240 = add nsw i64 %219, %238
  %241 = add nsw i64 %215, %238
  %242 = and i64 %238, 4294967264
  %243 = add nsw i64 %242, -32
  %244 = lshr exact i64 %243, 5
  %245 = add nuw nsw i64 %244, 1
  %246 = icmp ult i32 %75, 32
  %247 = icmp ugt i64 %239, 4294967295
  %248 = or i1 %83, %247
  %249 = or i1 %246, %248
  %250 = and i64 %238, 4294967264
  %251 = and i64 %245, 1
  %252 = icmp eq i64 %243, 0
  %253 = sub nuw nsw i64 %245, %251
  %254 = icmp eq i64 %251, 0
  %255 = icmp eq i64 %250, %238
  %256 = and i64 %238, 3
  %257 = icmp eq i64 %256, 0
  br label %258

258:                                              ; preds = %393, %227
  %259 = phi i64 [ %401, %393 ], [ 0, %227 ]
  %260 = phi i8* [ %398, %393 ], [ %229, %227 ]
  %261 = phi i8* [ %397, %393 ], [ %225, %227 ]
  %262 = phi i8* [ %396, %393 ], [ %233, %227 ]
  %263 = phi i8* [ %395, %393 ], [ %216, %227 ]
  %264 = phi i32 [ %399, %393 ], [ 0, %227 ]
  %265 = mul i64 %259, %237
  %266 = add i64 %265, %219
  %267 = getelementptr i8, i8* %218, i64 %266
  %268 = add i64 %240, %265
  %269 = getelementptr i8, i8* %218, i64 %268
  %270 = mul i64 %259, %236
  %271 = add i64 %270, %215
  %272 = getelementptr i8, i8* %214, i64 %271
  %273 = add i64 %241, %270
  %274 = getelementptr i8, i8* %214, i64 %273
  %275 = load i8, i8* %263, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %261, i8 %275, i64 %223, i1 false) #2
  br i1 %83, label %276, label %356

276:                                              ; preds = %258
  br i1 %234, label %277, label %393

277:                                              ; preds = %276
  br i1 %249, label %278, label %298

278:                                              ; preds = %355, %298, %277
  %279 = phi i64 [ 0, %298 ], [ 0, %277 ], [ %250, %355 ]
  %280 = xor i64 %279, -1
  %281 = add nsw i64 %280, %238
  br i1 %257, label %295, label %282

282:                                              ; preds = %278, %282
  %283 = phi i64 [ %292, %282 ], [ %279, %278 ]
  %284 = phi i64 [ %293, %282 ], [ %256, %278 ]
  %285 = trunc i64 %283 to i32
  %286 = mul i32 %222, %285
  %287 = zext i32 %286 to i64
  %288 = getelementptr inbounds i8, i8* %263, i64 %287
  %289 = load i8, i8* %288, align 1
  %290 = add nsw i64 %283, %223
  %291 = getelementptr inbounds i8, i8* %261, i64 %290
  store i8 %289, i8* %291, align 1
  %292 = add nuw nsw i64 %283, 1
  %293 = add i64 %284, -1
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %295, label %282, !llvm.loop !44

295:                                              ; preds = %282, %278
  %296 = phi i64 [ %279, %278 ], [ %292, %282 ]
  %297 = icmp ult i64 %281, 3
  br i1 %297, label %393, label %358

298:                                              ; preds = %277
  %299 = icmp ult i8* %267, %274
  %300 = icmp ult i8* %272, %269
  %301 = and i1 %299, %300
  br i1 %301, label %278, label %302

302:                                              ; preds = %298
  br i1 %252, label %338, label %303

303:                                              ; preds = %302, %303
  %304 = phi i64 [ %335, %303 ], [ 0, %302 ]
  %305 = phi i64 [ %336, %303 ], [ %253, %302 ]
  %306 = trunc i64 %304 to i32
  %307 = mul i32 %222, %306
  %308 = zext i32 %307 to i64
  %309 = getelementptr inbounds i8, i8* %263, i64 %308
  %310 = bitcast i8* %309 to <16 x i8>*
  %311 = load <16 x i8>, <16 x i8>* %310, align 1, !alias.scope !45
  %312 = getelementptr inbounds i8, i8* %309, i64 16
  %313 = bitcast i8* %312 to <16 x i8>*
  %314 = load <16 x i8>, <16 x i8>* %313, align 1, !alias.scope !45
  %315 = add nsw i64 %304, %223
  %316 = getelementptr inbounds i8, i8* %261, i64 %315
  %317 = bitcast i8* %316 to <16 x i8>*
  store <16 x i8> %311, <16 x i8>* %317, align 1, !alias.scope !48, !noalias !45
  %318 = getelementptr inbounds i8, i8* %316, i64 16
  %319 = bitcast i8* %318 to <16 x i8>*
  store <16 x i8> %314, <16 x i8>* %319, align 1, !alias.scope !48, !noalias !45
  %320 = or i64 %304, 32
  %321 = trunc i64 %320 to i32
  %322 = mul i32 %222, %321
  %323 = zext i32 %322 to i64
  %324 = getelementptr inbounds i8, i8* %263, i64 %323
  %325 = bitcast i8* %324 to <16 x i8>*
  %326 = load <16 x i8>, <16 x i8>* %325, align 1, !alias.scope !45
  %327 = getelementptr inbounds i8, i8* %324, i64 16
  %328 = bitcast i8* %327 to <16 x i8>*
  %329 = load <16 x i8>, <16 x i8>* %328, align 1, !alias.scope !45
  %330 = add nsw i64 %320, %223
  %331 = getelementptr inbounds i8, i8* %261, i64 %330
  %332 = bitcast i8* %331 to <16 x i8>*
  store <16 x i8> %326, <16 x i8>* %332, align 1, !alias.scope !48, !noalias !45
  %333 = getelementptr inbounds i8, i8* %331, i64 16
  %334 = bitcast i8* %333 to <16 x i8>*
  store <16 x i8> %329, <16 x i8>* %334, align 1, !alias.scope !48, !noalias !45
  %335 = add i64 %304, 64
  %336 = add i64 %305, -2
  %337 = icmp eq i64 %336, 0
  br i1 %337, label %338, label %303, !llvm.loop !50

338:                                              ; preds = %303, %302
  %339 = phi i64 [ 0, %302 ], [ %335, %303 ]
  br i1 %254, label %355, label %340

340:                                              ; preds = %338
  %341 = trunc i64 %339 to i32
  %342 = mul i32 %222, %341
  %343 = zext i32 %342 to i64
  %344 = getelementptr inbounds i8, i8* %263, i64 %343
  %345 = bitcast i8* %344 to <16 x i8>*
  %346 = load <16 x i8>, <16 x i8>* %345, align 1, !alias.scope !45
  %347 = getelementptr inbounds i8, i8* %344, i64 16
  %348 = bitcast i8* %347 to <16 x i8>*
  %349 = load <16 x i8>, <16 x i8>* %348, align 1, !alias.scope !45
  %350 = add nsw i64 %339, %223
  %351 = getelementptr inbounds i8, i8* %261, i64 %350
  %352 = bitcast i8* %351 to <16 x i8>*
  store <16 x i8> %346, <16 x i8>* %352, align 1, !alias.scope !48, !noalias !45
  %353 = getelementptr inbounds i8, i8* %351, i64 16
  %354 = bitcast i8* %353 to <16 x i8>*
  store <16 x i8> %349, <16 x i8>* %354, align 1, !alias.scope !48, !noalias !45
  br label %355

355:                                              ; preds = %338, %340
  br i1 %255, label %393, label %278

356:                                              ; preds = %258
  %357 = getelementptr inbounds i8, i8* %261, i64 %223
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %357, i8* align 1 %263, i64 %226, i1 false) #2
  br label %393

358:                                              ; preds = %295, %358
  %359 = phi i64 [ %391, %358 ], [ %296, %295 ]
  %360 = trunc i64 %359 to i32
  %361 = mul i32 %222, %360
  %362 = zext i32 %361 to i64
  %363 = getelementptr inbounds i8, i8* %263, i64 %362
  %364 = load i8, i8* %363, align 1
  %365 = add nsw i64 %359, %223
  %366 = getelementptr inbounds i8, i8* %261, i64 %365
  store i8 %364, i8* %366, align 1
  %367 = add nuw nsw i64 %359, 1
  %368 = trunc i64 %367 to i32
  %369 = mul i32 %222, %368
  %370 = zext i32 %369 to i64
  %371 = getelementptr inbounds i8, i8* %263, i64 %370
  %372 = load i8, i8* %371, align 1
  %373 = add nsw i64 %367, %223
  %374 = getelementptr inbounds i8, i8* %261, i64 %373
  store i8 %372, i8* %374, align 1
  %375 = add nuw nsw i64 %359, 2
  %376 = trunc i64 %375 to i32
  %377 = mul i32 %222, %376
  %378 = zext i32 %377 to i64
  %379 = getelementptr inbounds i8, i8* %263, i64 %378
  %380 = load i8, i8* %379, align 1
  %381 = add nsw i64 %375, %223
  %382 = getelementptr inbounds i8, i8* %261, i64 %381
  store i8 %380, i8* %382, align 1
  %383 = add nuw nsw i64 %359, 3
  %384 = trunc i64 %383 to i32
  %385 = mul i32 %222, %384
  %386 = zext i32 %385 to i64
  %387 = getelementptr inbounds i8, i8* %263, i64 %386
  %388 = load i8, i8* %387, align 1
  %389 = add nsw i64 %383, %223
  %390 = getelementptr inbounds i8, i8* %261, i64 %389
  store i8 %388, i8* %390, align 1
  %391 = add nuw nsw i64 %359, 4
  %392 = icmp eq i64 %391, %238
  br i1 %392, label %393, label %358, !llvm.loop !51

393:                                              ; preds = %295, %358, %355, %356, %276
  %394 = load i8, i8* %262, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %260, i8 %394, i64 %235, i1 false) #2
  %395 = getelementptr inbounds i8, i8* %263, i64 %236
  %396 = getelementptr inbounds i8, i8* %262, i64 %236
  %397 = getelementptr inbounds i8, i8* %261, i64 %237
  %398 = getelementptr inbounds i8, i8* %260, i64 %237
  %399 = add nuw nsw i32 %264, 1
  %400 = icmp eq i32 %399, %73
  %401 = add i64 %259, 1
  br i1 %400, label %402, label %258

402:                                              ; preds = %393, %213
  %403 = add nsw i32 %73, -1
  %404 = mul nsw i32 %221, %403
  %405 = sext i32 %404 to i64
  %406 = getelementptr inbounds i8, i8* %220, i64 %405
  %407 = getelementptr inbounds i8, i8* %406, i64 %224
  %408 = mul nsw i32 %221, %73
  %409 = sext i32 %408 to i64
  %410 = getelementptr inbounds i8, i8* %220, i64 %409
  %411 = getelementptr inbounds i8, i8* %410, i64 %224
  %412 = add nsw i32 %56, %75
  %413 = add i32 %412, %60
  br i1 %153, label %414, label %436

414:                                              ; preds = %402
  %415 = mul i32 %54, %221
  %416 = sub i32 0, %415
  %417 = sext i32 %416 to i64
  %418 = getelementptr inbounds i8, i8* %220, i64 %417
  %419 = getelementptr inbounds i8, i8* %418, i64 %224
  %420 = sext i32 %413 to i64
  %421 = sext i32 %221 to i64
  %422 = add nsw i32 %54, -1
  %423 = and i32 %54, 3
  %424 = icmp ult i32 %422, 3
  br i1 %424, label %427, label %425

425:                                              ; preds = %414
  %426 = sub nsw i32 %54, %423
  br label %445

427:                                              ; preds = %445, %414
  %428 = phi i8* [ %419, %414 ], [ %451, %445 ]
  %429 = icmp eq i32 %423, 0
  br i1 %429, label %436, label %430

430:                                              ; preds = %427, %430
  %431 = phi i8* [ %433, %430 ], [ %428, %427 ]
  %432 = phi i32 [ %434, %430 ], [ %423, %427 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %431, i8* align 1 %225, i64 %420, i1 false) #2
  %433 = getelementptr inbounds i8, i8* %431, i64 %421
  %434 = add i32 %432, -1
  %435 = icmp eq i32 %434, 0
  br i1 %435, label %436, label %430, !llvm.loop !52

436:                                              ; preds = %427, %430, %402
  br i1 %177, label %437, label %472

437:                                              ; preds = %436
  %438 = sext i32 %413 to i64
  %439 = sext i32 %221 to i64
  %440 = add nsw i32 %58, -1
  %441 = and i32 %58, 3
  %442 = icmp ult i32 %440, 3
  br i1 %442, label %463, label %443

443:                                              ; preds = %437
  %444 = sub nsw i32 %58, %441
  br label %454

445:                                              ; preds = %445, %425
  %446 = phi i8* [ %419, %425 ], [ %451, %445 ]
  %447 = phi i32 [ %426, %425 ], [ %452, %445 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %446, i8* align 1 %225, i64 %420, i1 false) #2
  %448 = getelementptr inbounds i8, i8* %446, i64 %421
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %448, i8* align 1 %225, i64 %420, i1 false) #2
  %449 = getelementptr inbounds i8, i8* %448, i64 %421
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %449, i8* align 1 %225, i64 %420, i1 false) #2
  %450 = getelementptr inbounds i8, i8* %449, i64 %421
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %450, i8* align 1 %225, i64 %420, i1 false) #2
  %451 = getelementptr inbounds i8, i8* %450, i64 %421
  %452 = add i32 %447, -4
  %453 = icmp eq i32 %452, 0
  br i1 %453, label %427, label %445

454:                                              ; preds = %454, %443
  %455 = phi i8* [ %411, %443 ], [ %460, %454 ]
  %456 = phi i32 [ %444, %443 ], [ %461, %454 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %455, i8* align 1 %407, i64 %438, i1 false) #2
  %457 = getelementptr inbounds i8, i8* %455, i64 %439
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %457, i8* align 1 %407, i64 %438, i1 false) #2
  %458 = getelementptr inbounds i8, i8* %457, i64 %439
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %458, i8* align 1 %407, i64 %438, i1 false) #2
  %459 = getelementptr inbounds i8, i8* %458, i64 %439
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %459, i8* align 1 %407, i64 %438, i1 false) #2
  %460 = getelementptr inbounds i8, i8* %459, i64 %439
  %461 = add i32 %456, -4
  %462 = icmp eq i32 %461, 0
  br i1 %462, label %463, label %454

463:                                              ; preds = %454, %437
  %464 = phi i8* [ %411, %437 ], [ %460, %454 ]
  %465 = icmp eq i32 %441, 0
  br i1 %465, label %472, label %466

466:                                              ; preds = %463, %466
  %467 = phi i8* [ %469, %466 ], [ %464, %463 ]
  %468 = phi i32 [ %470, %466 ], [ %441, %463 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %467, i8* align 1 %407, i64 %438, i1 false) #2
  %469 = getelementptr inbounds i8, i8* %467, i64 %439
  %470 = add i32 %468, -1
  %471 = icmp eq i32 %470, 0
  br i1 %471, label %472, label %466, !llvm.loop !53

472:                                              ; preds = %463, %466, %436
  %473 = load i8*, i8** %76, align 8
  %474 = getelementptr inbounds i8, i8* %473, i64 %215
  %475 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %476 = load i8*, i8** %475, align 8
  %477 = getelementptr inbounds i8, i8* %476, i64 %219
  %478 = load i32, i32* %67, align 4
  %479 = getelementptr inbounds i8, i8* %477, i64 %224
  br i1 %96, label %480, label %655

480:                                              ; preds = %472
  %481 = load i32, i32* %61, align 4
  %482 = getelementptr inbounds i8, i8* %477, i64 %226
  %483 = add nsw i32 %75, -1
  %484 = mul nsw i32 %222, %483
  %485 = sext i32 %484 to i64
  %486 = getelementptr inbounds i8, i8* %474, i64 %485
  %487 = icmp sgt i32 %5, 0
  %488 = sext i32 %60 to i64
  %489 = sext i32 %481 to i64
  %490 = sext i32 %478 to i64
  %491 = zext i32 %75 to i64
  %492 = add nsw i64 %491, -1
  %493 = add nsw i64 %219, %491
  %494 = add nsw i64 %215, %491
  %495 = and i64 %491, 4294967264
  %496 = add nsw i64 %495, -32
  %497 = lshr exact i64 %496, 5
  %498 = add nuw nsw i64 %497, 1
  %499 = icmp ult i32 %75, 32
  %500 = icmp ugt i64 %492, 4294967295
  %501 = or i1 %83, %500
  %502 = or i1 %499, %501
  %503 = and i64 %491, 4294967264
  %504 = and i64 %498, 1
  %505 = icmp eq i64 %496, 0
  %506 = sub nuw nsw i64 %498, %504
  %507 = icmp eq i64 %504, 0
  %508 = icmp eq i64 %503, %491
  %509 = and i64 %491, 3
  %510 = icmp eq i64 %509, 0
  br label %511

511:                                              ; preds = %646, %480
  %512 = phi i64 [ %654, %646 ], [ 0, %480 ]
  %513 = phi i8* [ %651, %646 ], [ %482, %480 ]
  %514 = phi i8* [ %650, %646 ], [ %479, %480 ]
  %515 = phi i8* [ %649, %646 ], [ %486, %480 ]
  %516 = phi i8* [ %648, %646 ], [ %474, %480 ]
  %517 = phi i32 [ %652, %646 ], [ 0, %480 ]
  %518 = mul i64 %512, %490
  %519 = add i64 %518, %219
  %520 = getelementptr i8, i8* %476, i64 %519
  %521 = add i64 %493, %518
  %522 = getelementptr i8, i8* %476, i64 %521
  %523 = mul i64 %512, %489
  %524 = add i64 %523, %215
  %525 = getelementptr i8, i8* %473, i64 %524
  %526 = add i64 %494, %523
  %527 = getelementptr i8, i8* %473, i64 %526
  %528 = load i8, i8* %516, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %514, i8 %528, i64 %223, i1 false) #2
  br i1 %83, label %529, label %609

529:                                              ; preds = %511
  br i1 %487, label %530, label %646

530:                                              ; preds = %529
  br i1 %502, label %531, label %551

531:                                              ; preds = %608, %551, %530
  %532 = phi i64 [ 0, %551 ], [ 0, %530 ], [ %503, %608 ]
  %533 = xor i64 %532, -1
  %534 = add nsw i64 %533, %491
  br i1 %510, label %548, label %535

535:                                              ; preds = %531, %535
  %536 = phi i64 [ %545, %535 ], [ %532, %531 ]
  %537 = phi i64 [ %546, %535 ], [ %509, %531 ]
  %538 = trunc i64 %536 to i32
  %539 = mul i32 %222, %538
  %540 = zext i32 %539 to i64
  %541 = getelementptr inbounds i8, i8* %516, i64 %540
  %542 = load i8, i8* %541, align 1
  %543 = add nsw i64 %536, %223
  %544 = getelementptr inbounds i8, i8* %514, i64 %543
  store i8 %542, i8* %544, align 1
  %545 = add nuw nsw i64 %536, 1
  %546 = add i64 %537, -1
  %547 = icmp eq i64 %546, 0
  br i1 %547, label %548, label %535, !llvm.loop !54

548:                                              ; preds = %535, %531
  %549 = phi i64 [ %532, %531 ], [ %545, %535 ]
  %550 = icmp ult i64 %534, 3
  br i1 %550, label %646, label %611

551:                                              ; preds = %530
  %552 = icmp ult i8* %520, %527
  %553 = icmp ult i8* %525, %522
  %554 = and i1 %552, %553
  br i1 %554, label %531, label %555

555:                                              ; preds = %551
  br i1 %505, label %591, label %556

556:                                              ; preds = %555, %556
  %557 = phi i64 [ %588, %556 ], [ 0, %555 ]
  %558 = phi i64 [ %589, %556 ], [ %506, %555 ]
  %559 = trunc i64 %557 to i32
  %560 = mul i32 %222, %559
  %561 = zext i32 %560 to i64
  %562 = getelementptr inbounds i8, i8* %516, i64 %561
  %563 = bitcast i8* %562 to <16 x i8>*
  %564 = load <16 x i8>, <16 x i8>* %563, align 1, !alias.scope !55
  %565 = getelementptr inbounds i8, i8* %562, i64 16
  %566 = bitcast i8* %565 to <16 x i8>*
  %567 = load <16 x i8>, <16 x i8>* %566, align 1, !alias.scope !55
  %568 = add nsw i64 %557, %223
  %569 = getelementptr inbounds i8, i8* %514, i64 %568
  %570 = bitcast i8* %569 to <16 x i8>*
  store <16 x i8> %564, <16 x i8>* %570, align 1, !alias.scope !58, !noalias !55
  %571 = getelementptr inbounds i8, i8* %569, i64 16
  %572 = bitcast i8* %571 to <16 x i8>*
  store <16 x i8> %567, <16 x i8>* %572, align 1, !alias.scope !58, !noalias !55
  %573 = or i64 %557, 32
  %574 = trunc i64 %573 to i32
  %575 = mul i32 %222, %574
  %576 = zext i32 %575 to i64
  %577 = getelementptr inbounds i8, i8* %516, i64 %576
  %578 = bitcast i8* %577 to <16 x i8>*
  %579 = load <16 x i8>, <16 x i8>* %578, align 1, !alias.scope !55
  %580 = getelementptr inbounds i8, i8* %577, i64 16
  %581 = bitcast i8* %580 to <16 x i8>*
  %582 = load <16 x i8>, <16 x i8>* %581, align 1, !alias.scope !55
  %583 = add nsw i64 %573, %223
  %584 = getelementptr inbounds i8, i8* %514, i64 %583
  %585 = bitcast i8* %584 to <16 x i8>*
  store <16 x i8> %579, <16 x i8>* %585, align 1, !alias.scope !58, !noalias !55
  %586 = getelementptr inbounds i8, i8* %584, i64 16
  %587 = bitcast i8* %586 to <16 x i8>*
  store <16 x i8> %582, <16 x i8>* %587, align 1, !alias.scope !58, !noalias !55
  %588 = add i64 %557, 64
  %589 = add i64 %558, -2
  %590 = icmp eq i64 %589, 0
  br i1 %590, label %591, label %556, !llvm.loop !60

591:                                              ; preds = %556, %555
  %592 = phi i64 [ 0, %555 ], [ %588, %556 ]
  br i1 %507, label %608, label %593

593:                                              ; preds = %591
  %594 = trunc i64 %592 to i32
  %595 = mul i32 %222, %594
  %596 = zext i32 %595 to i64
  %597 = getelementptr inbounds i8, i8* %516, i64 %596
  %598 = bitcast i8* %597 to <16 x i8>*
  %599 = load <16 x i8>, <16 x i8>* %598, align 1, !alias.scope !55
  %600 = getelementptr inbounds i8, i8* %597, i64 16
  %601 = bitcast i8* %600 to <16 x i8>*
  %602 = load <16 x i8>, <16 x i8>* %601, align 1, !alias.scope !55
  %603 = add nsw i64 %592, %223
  %604 = getelementptr inbounds i8, i8* %514, i64 %603
  %605 = bitcast i8* %604 to <16 x i8>*
  store <16 x i8> %599, <16 x i8>* %605, align 1, !alias.scope !58, !noalias !55
  %606 = getelementptr inbounds i8, i8* %604, i64 16
  %607 = bitcast i8* %606 to <16 x i8>*
  store <16 x i8> %602, <16 x i8>* %607, align 1, !alias.scope !58, !noalias !55
  br label %608

608:                                              ; preds = %591, %593
  br i1 %508, label %646, label %531

609:                                              ; preds = %511
  %610 = getelementptr inbounds i8, i8* %514, i64 %223
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %610, i8* align 1 %516, i64 %226, i1 false) #2
  br label %646

611:                                              ; preds = %548, %611
  %612 = phi i64 [ %644, %611 ], [ %549, %548 ]
  %613 = trunc i64 %612 to i32
  %614 = mul i32 %222, %613
  %615 = zext i32 %614 to i64
  %616 = getelementptr inbounds i8, i8* %516, i64 %615
  %617 = load i8, i8* %616, align 1
  %618 = add nsw i64 %612, %223
  %619 = getelementptr inbounds i8, i8* %514, i64 %618
  store i8 %617, i8* %619, align 1
  %620 = add nuw nsw i64 %612, 1
  %621 = trunc i64 %620 to i32
  %622 = mul i32 %222, %621
  %623 = zext i32 %622 to i64
  %624 = getelementptr inbounds i8, i8* %516, i64 %623
  %625 = load i8, i8* %624, align 1
  %626 = add nsw i64 %620, %223
  %627 = getelementptr inbounds i8, i8* %514, i64 %626
  store i8 %625, i8* %627, align 1
  %628 = add nuw nsw i64 %612, 2
  %629 = trunc i64 %628 to i32
  %630 = mul i32 %222, %629
  %631 = zext i32 %630 to i64
  %632 = getelementptr inbounds i8, i8* %516, i64 %631
  %633 = load i8, i8* %632, align 1
  %634 = add nsw i64 %628, %223
  %635 = getelementptr inbounds i8, i8* %514, i64 %634
  store i8 %633, i8* %635, align 1
  %636 = add nuw nsw i64 %612, 3
  %637 = trunc i64 %636 to i32
  %638 = mul i32 %222, %637
  %639 = zext i32 %638 to i64
  %640 = getelementptr inbounds i8, i8* %516, i64 %639
  %641 = load i8, i8* %640, align 1
  %642 = add nsw i64 %636, %223
  %643 = getelementptr inbounds i8, i8* %514, i64 %642
  store i8 %641, i8* %643, align 1
  %644 = add nuw nsw i64 %612, 4
  %645 = icmp eq i64 %644, %491
  br i1 %645, label %646, label %611, !llvm.loop !61

646:                                              ; preds = %548, %611, %608, %609, %529
  %647 = load i8, i8* %515, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %513, i8 %647, i64 %488, i1 false) #2
  %648 = getelementptr inbounds i8, i8* %516, i64 %489
  %649 = getelementptr inbounds i8, i8* %515, i64 %489
  %650 = getelementptr inbounds i8, i8* %514, i64 %490
  %651 = getelementptr inbounds i8, i8* %513, i64 %490
  %652 = add nuw nsw i32 %517, 1
  %653 = icmp eq i32 %652, %73
  %654 = add i64 %512, 1
  br i1 %653, label %655, label %511

655:                                              ; preds = %646, %472
  %656 = mul nsw i32 %478, %403
  %657 = sext i32 %656 to i64
  %658 = getelementptr inbounds i8, i8* %477, i64 %657
  %659 = getelementptr inbounds i8, i8* %658, i64 %224
  %660 = mul nsw i32 %478, %73
  %661 = sext i32 %660 to i64
  %662 = getelementptr inbounds i8, i8* %477, i64 %661
  %663 = getelementptr inbounds i8, i8* %662, i64 %224
  br i1 %153, label %664, label %686

664:                                              ; preds = %655
  %665 = mul i32 %54, %478
  %666 = sub i32 0, %665
  %667 = sext i32 %666 to i64
  %668 = getelementptr inbounds i8, i8* %477, i64 %667
  %669 = getelementptr inbounds i8, i8* %668, i64 %224
  %670 = sext i32 %413 to i64
  %671 = sext i32 %478 to i64
  %672 = add nsw i32 %54, -1
  %673 = and i32 %54, 3
  %674 = icmp ult i32 %672, 3
  br i1 %674, label %677, label %675

675:                                              ; preds = %664
  %676 = sub nsw i32 %54, %673
  br label %695

677:                                              ; preds = %695, %664
  %678 = phi i8* [ %669, %664 ], [ %701, %695 ]
  %679 = icmp eq i32 %673, 0
  br i1 %679, label %686, label %680

680:                                              ; preds = %677, %680
  %681 = phi i8* [ %683, %680 ], [ %678, %677 ]
  %682 = phi i32 [ %684, %680 ], [ %673, %677 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %681, i8* align 1 %479, i64 %670, i1 false) #2
  %683 = getelementptr inbounds i8, i8* %681, i64 %671
  %684 = add i32 %682, -1
  %685 = icmp eq i32 %684, 0
  br i1 %685, label %686, label %680, !llvm.loop !62

686:                                              ; preds = %677, %680, %655
  br i1 %177, label %687, label %722

687:                                              ; preds = %686
  %688 = sext i32 %413 to i64
  %689 = sext i32 %478 to i64
  %690 = add nsw i32 %58, -1
  %691 = and i32 %58, 3
  %692 = icmp ult i32 %690, 3
  br i1 %692, label %713, label %693

693:                                              ; preds = %687
  %694 = sub nsw i32 %58, %691
  br label %704

695:                                              ; preds = %695, %675
  %696 = phi i8* [ %669, %675 ], [ %701, %695 ]
  %697 = phi i32 [ %676, %675 ], [ %702, %695 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %696, i8* align 1 %479, i64 %670, i1 false) #2
  %698 = getelementptr inbounds i8, i8* %696, i64 %671
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %698, i8* align 1 %479, i64 %670, i1 false) #2
  %699 = getelementptr inbounds i8, i8* %698, i64 %671
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %699, i8* align 1 %479, i64 %670, i1 false) #2
  %700 = getelementptr inbounds i8, i8* %699, i64 %671
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %700, i8* align 1 %479, i64 %670, i1 false) #2
  %701 = getelementptr inbounds i8, i8* %700, i64 %671
  %702 = add i32 %697, -4
  %703 = icmp eq i32 %702, 0
  br i1 %703, label %677, label %695

704:                                              ; preds = %704, %693
  %705 = phi i8* [ %663, %693 ], [ %710, %704 ]
  %706 = phi i32 [ %694, %693 ], [ %711, %704 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %705, i8* align 1 %659, i64 %688, i1 false) #2
  %707 = getelementptr inbounds i8, i8* %705, i64 %689
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %707, i8* align 1 %659, i64 %688, i1 false) #2
  %708 = getelementptr inbounds i8, i8* %707, i64 %689
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %708, i8* align 1 %659, i64 %688, i1 false) #2
  %709 = getelementptr inbounds i8, i8* %708, i64 %689
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %709, i8* align 1 %659, i64 %688, i1 false) #2
  %710 = getelementptr inbounds i8, i8* %709, i64 %689
  %711 = add i32 %706, -4
  %712 = icmp eq i32 %711, 0
  br i1 %712, label %713, label %704

713:                                              ; preds = %704, %687
  %714 = phi i8* [ %663, %687 ], [ %710, %704 ]
  %715 = icmp eq i32 %691, 0
  br i1 %715, label %722, label %716

716:                                              ; preds = %713, %716
  %717 = phi i8* [ %719, %716 ], [ %714, %713 ]
  %718 = phi i32 [ %720, %716 ], [ %691, %713 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %717, i8* align 1 %659, i64 %688, i1 false) #2
  %719 = getelementptr inbounds i8, i8* %717, i64 %689
  %720 = add i32 %718, -1
  %721 = icmp eq i32 %720, 0
  br i1 %721, label %722, label %716, !llvm.loop !63

722:                                              ; preds = %713, %716, %686
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !5}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !5}
!11 = distinct !{!11, !7, !3}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !5}
!14 = distinct !{!14, !7, !3}
!15 = distinct !{!15, !5}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !5}
!18 = distinct !{!18, !7, !3}
!19 = distinct !{!19, !3}
!20 = distinct !{!20, !5}
!21 = distinct !{!21, !7, !3}
!22 = distinct !{!22, !5}
!23 = distinct !{!23, !5}
!24 = !{!25}
!25 = distinct !{!25, !26}
!26 = distinct !{!26, !"LVerDomain"}
!27 = !{!28}
!28 = distinct !{!28, !26}
!29 = distinct !{!29, !3}
!30 = distinct !{!30, !3}
!31 = distinct !{!31, !5}
!32 = distinct !{!32, !5}
!33 = !{!34}
!34 = distinct !{!34, !35}
!35 = distinct !{!35, !"LVerDomain"}
!36 = !{!37}
!37 = distinct !{!37, !35}
!38 = distinct !{!38, !3}
!39 = distinct !{!39, !3}
!40 = distinct !{!40, !5}
!41 = distinct !{!41, !5}
!42 = distinct !{!42, !5}
!43 = distinct !{!43, !5}
!44 = distinct !{!44, !5}
!45 = !{!46}
!46 = distinct !{!46, !47}
!47 = distinct !{!47, !"LVerDomain"}
!48 = !{!49}
!49 = distinct !{!49, !47}
!50 = distinct !{!50, !3}
!51 = distinct !{!51, !3}
!52 = distinct !{!52, !5}
!53 = distinct !{!53, !5}
!54 = distinct !{!54, !5}
!55 = !{!56}
!56 = distinct !{!56, !57}
!57 = distinct !{!57, !"LVerDomain"}
!58 = !{!59}
!59 = distinct !{!59, !57}
!60 = distinct !{!60, !3}
!61 = distinct !{!61, !3}
!62 = distinct !{!62, !5}
!63 = distinct !{!63, !5}
