; ModuleID = '../../components/viz/service/surfaces/surface_allocation_group.cc'
source_filename = "../../components/viz/service/surfaces/surface_allocation_group.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.viz::SurfaceAllocationGroup" = type { %"class.viz::FrameSinkId", %"class.base::UnguessableToken", %"class.std::__1::vector", %"class.base::flat_map.339", %"class.base::internal::flat_tree.349", %"class.viz::SurfaceManager"*, %"class.viz::SurfaceId", %"class.viz::SurfaceId" }
%"class.viz::FrameSinkId" = type { i32, i32 }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.viz::Surface"**, %"class.viz::Surface"**, %"class.std::__1::__compressed_pair.334" }
%"class.viz::Surface" = type { %"class.viz::SurfaceInfo", %"class.viz::SurfaceId", %"class.viz::SurfaceManager"*, %"class.base::WeakPtr", %"class.std::__1::unique_ptr.127", %"class.absl::optional.136", %"class.absl::optional.136", %"class.absl::optional.293", i8, i8, %"class.base::internal::flat_tree.30", %"class.std::__1::vector.31", %"class.base::internal::flat_tree.298", %"class.base::internal::flat_tree.30", %"class.base::internal::flat_tree.298", i8, i8, %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceSavedFrameStorage", i8, %"class.base::WeakPtrFactory.333" }
%"class.viz::SurfaceInfo" = type <{ %"class.viz::SurfaceId", float, %"class.gfx::Size", [4 x i8] }>
%"class.gfx::Size" = type { i32, i32 }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.126 }
%class.scoped_refptr.126 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.113", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.113" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.111" }
%"struct.std::__1::__atomic_base.111" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.114" }
%"struct.std::__1::atomic.114" = type { %"struct.std::__1::__atomic_base.115" }
%"struct.std::__1::__atomic_base.115" = type { %"struct.std::__1::__atomic_base.116" }
%"struct.std::__1::__atomic_base.116" = type { %"struct.std::__1::__cxx_atomic_impl.117" }
%"struct.std::__1::__cxx_atomic_impl.117" = type { %"struct.std::__1::__cxx_atomic_base_impl.118" }
%"struct.std::__1::__cxx_atomic_base_impl.118" = type { i8 }
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"class.viz::SurfaceDependencyDeadline"* }
%"class.viz::SurfaceDependencyDeadline" = type { %"class.base::TickClock"*, %"class.base::TimeTicks", %"class.absl::optional.130" }
%"class.base::TickClock" = type opaque
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.absl::optional.130" = type { %"class.absl::optional_internal::optional_data.131" }
%"class.absl::optional_internal::optional_data.131" = type { %"class.absl::optional_internal::optional_data_base.132" }
%"class.absl::optional_internal::optional_data_base.132" = type { %"class.absl::optional_internal::optional_data_dtor_base.133" }
%"class.absl::optional_internal::optional_data_dtor_base.133" = type { i8, %union.anon.134 }
%union.anon.134 = type { %"class.base::TimeTicks" }
%"class.absl::optional.136" = type { %"class.absl::optional_internal::optional_data.137" }
%"class.absl::optional_internal::optional_data.137" = type { %"class.absl::optional_internal::optional_data_base.138" }
%"class.absl::optional_internal::optional_data_base.138" = type { %"class.absl::optional_internal::optional_data_dtor_base.139" }
%"class.absl::optional_internal::optional_data_dtor_base.139" = type { i8, [7 x i8], %union.anon.140 }
%union.anon.140 = type { %"struct.viz::Surface::FrameData" }
%"struct.viz::Surface::FrameData" = type <{ %"class.viz::CompositorFrame", i64, i8, i8, i8, [5 x i8] }>
%"class.viz::CompositorFrame" = type { %"class.viz::CompositorFrameMetadata", %"class.std::__1::vector.200", %"class.std::__1::vector.221" }
%"class.viz::CompositorFrameMetadata" = type { float, %"class.gfx::Vector2dF", float, %"class.gfx::SizeF", i8, i8, i8, i32, %"class.std::__1::vector.141", %"class.std::__1::vector.158", %"class.std::__1::vector.31", %"class.viz::FrameDeadline", %"struct.viz::BeginFrameAck", i32, i8, float, %"class.absl::optional.170", %"class.absl::optional.175", i32, %"class.std::__1::unique_ptr.180", %"class.std::__1::vector.186" }
%"class.gfx::Vector2dF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::vector.141" = type { %"class.std::__1::__vector_base.142" }
%"class.std::__1::__vector_base.142" = type { %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"*, %"class.std::__1::__compressed_pair.153" }
%"class.ui::LatencyInfo" = type { %"class.base::flat_map.143", i64, i64, i8, i8, i8, i32, float, float, i64 }
%"class.base::flat_map.143" = type { %"class.base::internal::flat_tree.144" }
%"class.base::internal::flat_tree.144" = type { %"class.std::__1::vector.145" }
%"class.std::__1::vector.145" = type { %"class.std::__1::__vector_base.146" }
%"class.std::__1::__vector_base.146" = type { %"struct.std::__1::pair.147"*, %"struct.std::__1::pair.147"*, %"class.std::__1::__compressed_pair.148" }
%"struct.std::__1::pair.147" = type opaque
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"struct.std::__1::pair.147"* }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"class.ui::LatencyInfo"* }
%"class.std::__1::vector.158" = type { %"class.std::__1::__vector_base.159" }
%"class.std::__1::__vector_base.159" = type { %"class.viz::SurfaceRange"*, %"class.viz::SurfaceRange"*, %"class.std::__1::__compressed_pair.165" }
%"class.viz::SurfaceRange" = type { %"class.absl::optional.160", %"class.viz::SurfaceId" }
%"class.absl::optional.160" = type { %"class.absl::optional_internal::optional_data.161" }
%"class.absl::optional_internal::optional_data.161" = type { %"class.absl::optional_internal::optional_data_base.162" }
%"class.absl::optional_internal::optional_data_base.162" = type { %"class.absl::optional_internal::optional_data_dtor_base.163" }
%"class.absl::optional_internal::optional_data_dtor_base.163" = type { i8, %union.anon.164 }
%union.anon.164 = type { %"class.viz::SurfaceId" }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.166" }
%"struct.std::__1::__compressed_pair_elem.166" = type { %"class.viz::SurfaceRange"* }
%"class.viz::FrameDeadline" = type <{ %"class.base::TimeTicks", i32, [4 x i8], %"class.base::TimeDelta", i8, [7 x i8] }>
%"class.base::TimeDelta" = type { i64 }
%"struct.viz::BeginFrameAck" = type <{ %"struct.viz::BeginFrameId", i64, i8, [7 x i8] }>
%"struct.viz::BeginFrameId" = type { i64, i64 }
%"class.absl::optional.170" = type { %"class.absl::optional_internal::optional_data.171" }
%"class.absl::optional_internal::optional_data.171" = type { %"class.absl::optional_internal::optional_data_base.172" }
%"class.absl::optional_internal::optional_data_base.172" = type { %"class.absl::optional_internal::optional_data_dtor_base.173" }
%"class.absl::optional_internal::optional_data_dtor_base.173" = type { i8, %union.anon.174 }
%union.anon.174 = type { float }
%"class.absl::optional.175" = type { %"class.absl::optional_internal::optional_data.176" }
%"class.absl::optional_internal::optional_data.176" = type { %"class.absl::optional_internal::optional_data_base.177" }
%"class.absl::optional_internal::optional_data_base.177" = type { %"class.absl::optional_internal::optional_data_dtor_base.178" }
%"class.absl::optional_internal::optional_data_dtor_base.178" = type { i8, %union.anon.179 }
%union.anon.179 = type { %"class.base::TimeDelta" }
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"class.gfx::DelegatedInkMetadata"* }
%"class.gfx::DelegatedInkMetadata" = type <{ %"class.gfx::PointF", double, i32, [4 x i8], %"class.base::TimeTicks", %"class.gfx::RectF", %"class.base::TimeTicks", i8, [7 x i8] }>
%"class.gfx::PointF" = type { float, float }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.std::__1::vector.186" = type { %"class.std::__1::__vector_base.187" }
%"class.std::__1::__vector_base.187" = type { %"class.viz::CompositorFrameTransitionDirective"*, %"class.viz::CompositorFrameTransitionDirective"*, %"class.std::__1::__compressed_pair.195" }
%"class.viz::CompositorFrameTransitionDirective" = type { i32, i32, i32, %"class.std::__1::vector.188" }
%"class.std::__1::vector.188" = type { %"class.std::__1::__vector_base.189" }
%"class.std::__1::__vector_base.189" = type { %"class.util::IdType"*, %"class.util::IdType"*, %"class.std::__1::__compressed_pair.190" }
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i64 }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.191" }
%"struct.std::__1::__compressed_pair_elem.191" = type { %"class.util::IdType"* }
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.196" }
%"struct.std::__1::__compressed_pair_elem.196" = type { %"class.viz::CompositorFrameTransitionDirective"* }
%"class.std::__1::vector.200" = type { %"class.std::__1::__vector_base.201" }
%"class.std::__1::__vector_base.201" = type { %"struct.viz::TransferableResource"*, %"struct.viz::TransferableResource"*, %"class.std::__1::__compressed_pair.216" }
%"struct.viz::TransferableResource" = type { %"class.util::IdType.202", i8, %"class.gfx::Size", i32, [4 x i8], %"struct.gpu::MailboxHolder", %"class.gfx::ColorSpace", %"class.absl::optional.206", i8, i32, i8, [7 x i8], %"class.absl::optional.211" }
%"class.util::IdType.202" = type { %"class.base::StrongAlias.203" }
%"class.base::StrongAlias.203" = type { i32 }
%"struct.gpu::MailboxHolder" = type <{ %"struct.gpu::Mailbox", %"struct.gpu::SyncToken", i32, [4 x i8] }>
%"struct.gpu::Mailbox" = type { [16 x i8] }
%"struct.gpu::SyncToken" = type { i8, i8, %"class.util::IdType.204", i64 }
%"class.util::IdType.204" = type { %"class.base::StrongAlias.205" }
%"class.base::StrongAlias.205" = type { i64 }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.absl::optional.206" = type { %"class.absl::optional_internal::optional_data.207" }
%"class.absl::optional_internal::optional_data.207" = type { %"class.absl::optional_internal::optional_data_base.208" }
%"class.absl::optional_internal::optional_data_base.208" = type { %"class.absl::optional_internal::optional_data_dtor_base.209" }
%"class.absl::optional_internal::optional_data_dtor_base.209" = type { i8, %union.anon.210 }
%union.anon.210 = type { %"struct.gfx::HDRMetadata" }
%"struct.gfx::HDRMetadata" = type { %"struct.gfx::MasteringMetadata", i32, i32 }
%"struct.gfx::MasteringMetadata" = type { %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", float, float }
%"class.absl::optional.211" = type { %"class.absl::optional_internal::optional_data.212" }
%"class.absl::optional_internal::optional_data.212" = type { %"class.absl::optional_internal::optional_data_base.213" }
%"class.absl::optional_internal::optional_data_base.213" = type { %"class.absl::optional_internal::optional_data_dtor_base.214" }
%"class.absl::optional_internal::optional_data_dtor_base.214" = type { i8, [7 x i8], %union.anon.215 }
%union.anon.215 = type { %"struct.gpu::VulkanYCbCrInfo" }
%"struct.gpu::VulkanYCbCrInfo" = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.216" = type { %"struct.std::__1::__compressed_pair_elem.217" }
%"struct.std::__1::__compressed_pair_elem.217" = type { %"struct.viz::TransferableResource"* }
%"class.std::__1::vector.221" = type { %"class.std::__1::__vector_base.222" }
%"class.std::__1::__vector_base.222" = type { %"class.std::__1::unique_ptr.223"*, %"class.std::__1::unique_ptr.223"*, %"class.std::__1::__compressed_pair.284" }
%"class.std::__1::unique_ptr.223" = type { %"class.std::__1::__compressed_pair.224" }
%"class.std::__1::__compressed_pair.224" = type { %"struct.std::__1::__compressed_pair_elem.225" }
%"struct.std::__1::__compressed_pair_elem.225" = type { %"class.viz::CompositorRenderPass"* }
%"class.viz::CompositorRenderPass" = type <{ %"class.viz::RenderPassInternal", %"class.util::IdType", %"class.viz::SubtreeCaptureId", %"class.gfx::Size", [4 x i8] }>
%"class.viz::RenderPassInternal" = type { %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::Transform", %"class.cc::FilterOperations", %"class.cc::FilterOperations", %"class.absl::optional.246", i8, i8, i8, i8, %"class.std::__1::vector.251", %"class.viz::QuadList", %"class.cc::ListContainer.280" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.cc::FilterOperations" = type { %"class.std::__1::vector.226" }
%"class.std::__1::vector.226" = type { %"class.std::__1::__vector_base.227" }
%"class.std::__1::__vector_base.227" = type { %"class.cc::FilterOperation"*, %"class.cc::FilterOperation"*, %"class.std::__1::__compressed_pair.241" }
%"class.cc::FilterOperation" = type <{ i32, float, float, %"class.gfx::Point", i32, %class.sk_sp, [20 x float], i32, [4 x i8], %"class.std::__1::vector.234", i32, [4 x i8] }>
%class.sk_sp = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.228, i32, %"class.absl::optional.229", i8, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.sk_sp.228 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional.229" = type { %"class.absl::optional_internal::optional_data.230" }
%"class.absl::optional_internal::optional_data.230" = type { %"class.absl::optional_internal::optional_data_base.231" }
%"class.absl::optional_internal::optional_data_base.231" = type { %"class.absl::optional_internal::optional_data_dtor_base.232" }
%"class.absl::optional_internal::optional_data_dtor_base.232" = type { i8, %union.anon.233 }
%union.anon.233 = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::vector.234" = type { %"class.std::__1::__vector_base.235" }
%"class.std::__1::__vector_base.235" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.236" }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"class.gfx::Rect"* }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"class.cc::FilterOperation"* }
%"class.absl::optional.246" = type { %"class.absl::optional_internal::optional_data.247" }
%"class.absl::optional_internal::optional_data.247" = type { %"class.absl::optional_internal::optional_data_base.248" }
%"class.absl::optional_internal::optional_data_base.248" = type { %"class.absl::optional_internal::optional_data_dtor_base.249" }
%"class.absl::optional_internal::optional_data_dtor_base.249" = type { i8, %union.anon.250 }
%union.anon.250 = type { %"class.gfx::RRectF" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkPoint = type { float, float }
%"class.std::__1::vector.251" = type { %"class.std::__1::__vector_base.252" }
%"class.std::__1::__vector_base.252" = type { %"class.std::__1::unique_ptr.253"*, %"class.std::__1::unique_ptr.253"*, %"class.std::__1::__compressed_pair.269" }
%"class.std::__1::unique_ptr.253" = type { %"class.std::__1::__compressed_pair.254" }
%"class.std::__1::__compressed_pair.254" = type { %"struct.std::__1::__compressed_pair_elem.255" }
%"struct.std::__1::__compressed_pair_elem.255" = type { %"class.viz::CopyOutputRequest"* }
%"class.viz::CopyOutputRequest" = type { i8, %"class.base::OnceCallback", %class.scoped_refptr, %"class.gfx::Vector2d", %"class.gfx::Vector2d", %"class.absl::optional.256", %"class.absl::optional.261", %"class.absl::optional.261" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.119 }
%class.scoped_refptr.119 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.120", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.120" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.scoped_refptr = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.gfx::Vector2d" = type { i32, i32 }
%"class.absl::optional.256" = type { %"class.absl::optional_internal::optional_data.257" }
%"class.absl::optional_internal::optional_data.257" = type { %"class.absl::optional_internal::optional_data_base.258" }
%"class.absl::optional_internal::optional_data_base.258" = type { %"class.absl::optional_internal::optional_data_dtor_base.259" }
%"class.absl::optional_internal::optional_data_dtor_base.259" = type { i8, %union.anon.260 }
%union.anon.260 = type { %"class.base::UnguessableToken" }
%"class.absl::optional.261" = type { %"class.absl::optional_internal::optional_data.262" }
%"class.absl::optional_internal::optional_data.262" = type { %"class.absl::optional_internal::optional_data_base.263" }
%"class.absl::optional_internal::optional_data_base.263" = type { %"class.absl::optional_internal::optional_data_dtor_base.264" }
%"class.absl::optional_internal::optional_data_dtor_base.264" = type { i8, %union.anon.265 }
%union.anon.265 = type { %"class.gfx::Rect" }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.270" }
%"struct.std::__1::__compressed_pair_elem.270" = type { %"class.std::__1::unique_ptr.253"* }
%"class.viz::QuadList" = type { %"class.cc::ListContainer" }
%"class.cc::ListContainer" = type { %"class.cc::ListContainerHelper" }
%"class.cc::ListContainerHelper" = type { %"class.std::__1::unique_ptr.274" }
%"class.std::__1::unique_ptr.274" = type { %"class.std::__1::__compressed_pair.275" }
%"class.std::__1::__compressed_pair.275" = type { %"struct.std::__1::__compressed_pair_elem.276" }
%"struct.std::__1::__compressed_pair_elem.276" = type { %"class.cc::ListContainerHelper::CharAllocator"* }
%"class.cc::ListContainerHelper::CharAllocator" = type opaque
%"class.cc::ListContainer.280" = type { %"class.cc::ListContainerHelper" }
%"class.viz::SubtreeCaptureId" = type { i32 }
%"class.std::__1::__compressed_pair.284" = type { %"struct.std::__1::__compressed_pair_elem.285" }
%"struct.std::__1::__compressed_pair_elem.285" = type { %"class.std::__1::unique_ptr.223"* }
%"class.absl::optional.293" = type { %"class.absl::optional_internal::optional_data.294" }
%"class.absl::optional_internal::optional_data.294" = type { %"class.absl::optional_internal::optional_data_base.295" }
%"class.absl::optional_internal::optional_data_base.295" = type { %"class.absl::optional_internal::optional_data_dtor_base.296" }
%"class.absl::optional_internal::optional_data_dtor_base.296" = type { i8, %union.anon.297 }
%union.anon.297 = type { %"class.viz::CompositorFrame" }
%"class.std::__1::vector.31" = type { %"class.std::__1::__vector_base.32" }
%"class.std::__1::__vector_base.32" = type { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"class.viz::SurfaceId"* }
%"class.base::internal::flat_tree.30" = type { %"class.std::__1::vector.31" }
%"class.base::internal::flat_tree.298" = type { %"class.std::__1::vector.299" }
%"class.std::__1::vector.299" = type { %"class.std::__1::__vector_base.300" }
%"class.std::__1::__vector_base.300" = type { %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"**, %"class.std::__1::__compressed_pair.301" }
%"class.std::__1::__compressed_pair.301" = type { %"struct.std::__1::__compressed_pair_elem.302" }
%"struct.std::__1::__compressed_pair_elem.302" = type { %"class.viz::SurfaceAllocationGroup"** }
%"class.viz::SurfaceSavedFrameStorage" = type { %"class.viz::Surface"*, %"class.base::internal::CancelableCallbackImpl", %"class.std::__1::unique_ptr.308" }
%"class.base::internal::CancelableCallbackImpl" = type { %"class.base::OnceCallback.306", %"class.base::WeakPtrFactory.307" }
%"class.base::OnceCallback.306" = type { %"class.base::internal::CallbackBase" }
%"class.base::WeakPtrFactory.307" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.112 }
%class.scoped_refptr.112 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.std::__1::unique_ptr.308" = type { %"class.std::__1::__compressed_pair.309" }
%"class.std::__1::__compressed_pair.309" = type { %"struct.std::__1::__compressed_pair_elem.310" }
%"struct.std::__1::__compressed_pair_elem.310" = type { %"class.viz::SurfaceSavedFrame"* }
%"class.viz::SurfaceSavedFrame" = type { %"class.viz::CompositorFrameTransitionDirective", %"class.base::OnceCallback.311", %"class.absl::optional.312", i64, i64, %"class.base::WeakPtrFactory.329" }
%"class.base::OnceCallback.311" = type { %"class.base::internal::CallbackBase" }
%"class.absl::optional.312" = type { %"class.absl::optional_internal::optional_data.313" }
%"class.absl::optional_internal::optional_data.313" = type { %"class.absl::optional_internal::optional_data_base.314" }
%"class.absl::optional_internal::optional_data_base.314" = type { %"class.absl::optional_internal::optional_data_dtor_base.315" }
%"class.absl::optional_internal::optional_data_dtor_base.315" = type { i8, %union.anon.316 }
%union.anon.316 = type { %"struct.viz::SurfaceSavedFrame::FrameResult" }
%"struct.viz::SurfaceSavedFrame::FrameResult" = type { %"struct.viz::SurfaceSavedFrame::OutputCopyResult", %"class.std::__1::vector.321" }
%"struct.viz::SurfaceSavedFrame::OutputCopyResult" = type { %"struct.gpu::Mailbox", %"struct.gpu::SyncToken", %class.SkBitmap, %"struct.viz::SurfaceSavedFrame::RenderPassDrawData", i8, %"class.base::OnceCallback.320" }
%class.SkBitmap = type { %class.sk_sp.317, %class.SkPixmap, %class.sk_sp.319 }
%class.sk_sp.317 = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.318, i32, i32 }
%class.sk_sp.318 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.114" }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.319 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"struct.viz::SurfaceSavedFrame::RenderPassDrawData" = type { %"class.gfx::Rect", %"class.gfx::Transform", float }
%"class.base::OnceCallback.320" = type { %"class.base::internal::CallbackBase" }
%"class.std::__1::vector.321" = type { %"class.std::__1::__vector_base.322" }
%"class.std::__1::__vector_base.322" = type { %"class.absl::optional.323"*, %"class.absl::optional.323"*, %"class.std::__1::__compressed_pair.324" }
%"class.absl::optional.323" = type opaque
%"class.std::__1::__compressed_pair.324" = type { %"struct.std::__1::__compressed_pair_elem.325" }
%"struct.std::__1::__compressed_pair_elem.325" = type { %"class.absl::optional.323"* }
%"class.base::WeakPtrFactory.329" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::WeakPtrFactory.333" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::__compressed_pair.334" = type { %"struct.std::__1::__compressed_pair_elem.335" }
%"struct.std::__1::__compressed_pair_elem.335" = type { %"class.viz::Surface"** }
%"class.base::flat_map.339" = type { %"class.base::internal::flat_tree.340" }
%"class.base::internal::flat_tree.340" = type { %"class.std::__1::vector.341" }
%"class.std::__1::vector.341" = type { %"class.std::__1::__vector_base.342" }
%"class.std::__1::__vector_base.342" = type { %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"*, %"class.std::__1::__compressed_pair.344" }
%"struct.std::__1::pair.343" = type { %"class.viz::Surface"*, %"class.viz::SurfaceId" }
%"class.std::__1::__compressed_pair.344" = type { %"struct.std::__1::__compressed_pair_elem.345" }
%"struct.std::__1::__compressed_pair_elem.345" = type { %"struct.std::__1::pair.343"* }
%"class.base::internal::flat_tree.349" = type { %"class.std::__1::vector" }
%"class.viz::SurfaceId" = type { %"class.viz::FrameSinkId", %"class.viz::LocalSurfaceId" }
%"class.viz::LocalSurfaceId" = type { i32, i32, %"class.base::UnguessableToken" }
%"class.viz::SurfaceManager" = type { %"class.viz::SurfaceManagerDelegate"*, %"class.absl::optional", %"class.base::flat_map", %"class.base::flat_map.3", %"class.base::flat_map.13", %"class.base::ObserverList", %"class.base::ThreadChecker", %"class.base::internal::flat_tree.30", %"class.viz::SurfaceId", %"class.base::internal::flat_tree.30", %"class.base::TickClock"*, %"class.std::__1::unordered_map", %"class.std::__1::unordered_map.56", %"class.std::__1::unordered_map.80", %"class.absl::optional.106", i8, %"class.base::WeakPtrFactory.125" }
%"class.viz::SurfaceManagerDelegate" = type opaque
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.0" }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::pair"* }
%"class.base::flat_map.3" = type { %"class.base::internal::flat_tree.4" }
%"class.base::internal::flat_tree.4" = type { %"class.std::__1::vector.5" }
%"class.std::__1::vector.5" = type { %"class.std::__1::__vector_base.6" }
%"class.std::__1::__vector_base.6" = type { %"struct.std::__1::pair.7"*, %"struct.std::__1::pair.7"*, %"class.std::__1::__compressed_pair.8" }
%"struct.std::__1::pair.7" = type opaque
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.std::__1::pair.7"* }
%"class.base::flat_map.13" = type { %"class.base::internal::flat_tree.14" }
%"class.base::internal::flat_tree.14" = type { %"class.std::__1::vector.15" }
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.16" }
%"class.std::__1::__vector_base.16" = type { %"struct.std::__1::pair.17"*, %"struct.std::__1::pair.17"*, %"class.std::__1::__compressed_pair.18" }
%"struct.std::__1::pair.17" = type opaque
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.std::__1::pair.17"* }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector.23", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector.23" = type { %"class.std::__1::__vector_base.24" }
%"class.std::__1::__vector_base.24" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.25" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.base::ThreadChecker" = type { i8 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.46", %"class.std::__1::__compressed_pair.51", %"class.std::__1::__compressed_pair.53", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39", %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { i64 }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { float }
%"class.std::__1::unordered_map.56" = type { %"class.std::__1::__hash_table.57" }
%"class.std::__1::__hash_table.57" = type <{ %"class.std::__1::unique_ptr.58", %"class.std::__1::__compressed_pair.68", %"class.std::__1::__compressed_pair.73", %"class.std::__1::__compressed_pair.76", [4 x i8] }>
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60", %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"struct.std::__1::__hash_node_base.61"** }
%"struct.std::__1::__hash_node_base.61" = type { %"struct.std::__1::__hash_node_base.61"* }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"class.std::__1::__bucket_list_deallocator.63" }
%"class.std::__1::__bucket_list_deallocator.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"struct.std::__1::__hash_node_base.61" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"class.std::__1::unordered_map.80" = type { %"class.std::__1::__hash_table.81" }
%"class.std::__1::__hash_table.81" = type <{ %"class.std::__1::unique_ptr.82", %"class.std::__1::__compressed_pair.92", %"class.std::__1::__compressed_pair.97", %"class.std::__1::__compressed_pair.100", [4 x i8] }>
%"class.std::__1::unique_ptr.82" = type { %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84", %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"struct.std::__1::__hash_node_base.85"** }
%"struct.std::__1::__hash_node_base.85" = type { %"struct.std::__1::__hash_node_base.85"* }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"class.std::__1::__bucket_list_deallocator.87" }
%"class.std::__1::__bucket_list_deallocator.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"struct.std::__1::__hash_node_base.85" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"class.absl::optional.106" = type { %"class.absl::optional_internal::optional_data.107" }
%"class.absl::optional_internal::optional_data.107" = type { %"class.absl::optional_internal::optional_data_base.108" }
%"class.absl::optional_internal::optional_data_base.108" = type { %"class.absl::optional_internal::optional_data_dtor_base.109" }
%"class.absl::optional_internal::optional_data_dtor_base.109" = type { i8, %union.anon.110 }
%union.anon.110 = type { %"class.base::RepeatingTimer" }
%"class.base::RepeatingTimer" = type { %"class.base::internal::TimerBase", %"class.base::RepeatingCallback" }
%"class.base::internal::TimerBase" = type { i32 (...)**, %class.scoped_refptr, %"class.base::SequenceCheckerDoNothing", %"class.base::internal::TaskDestructionDetector"*, %"class.base::Location", %"class.base::TimeDelta", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TickClock"*, i8, %"class.base::WeakPtrFactory" }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::internal::TaskDestructionDetector" = type opaque
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::WeakPtrFactory.125" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::__split_buffer.360" = type { %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"*, %"class.std::__1::__compressed_pair.361" }
%"class.std::__1::__compressed_pair.361" = type { %"struct.std::__1::__compressed_pair_elem.345", %"struct.std::__1::__compressed_pair_elem.362" }
%"struct.std::__1::__compressed_pair_elem.362" = type { %"class.std::__1::allocator.347"* }
%"class.std::__1::allocator.347" = type { i8 }
%"struct.std::__1::__split_buffer" = type { %"class.viz::Surface"**, %"class.viz::Surface"**, %"class.viz::Surface"**, %"class.std::__1::__compressed_pair.353" }
%"class.std::__1::__compressed_pair.353" = type { %"struct.std::__1::__compressed_pair_elem.335", %"struct.std::__1::__compressed_pair_elem.354" }
%"struct.std::__1::__compressed_pair_elem.354" = type { %"class.std::__1::allocator.337"* }
%"class.std::__1::allocator.337" = type { i8 }

$_ZNSt3__16vectorINS_4pairIPN3viz7SurfaceENS2_9SurfaceIdEEENS_9allocatorIS6_EEE7emplaceIJRKS4_S5_EEENS_11__wrap_iterIPS6_EENSD_IPKS6_EEDpOT_ = comdat any

$_ZNSt3__114__split_bufferINS_4pairIPN3viz7SurfaceENS2_9SurfaceIdEEERNS_9allocatorIS6_EEE12emplace_backIJRKS4_S5_EEEvDpOT_ = comdat any

$_ZNSt3__16vectorIPN3viz7SurfaceENS_9allocatorIS3_EEE7emplaceIJRKS3_EEENS_11__wrap_iterIPS3_EENSA_IPS8_EEDpOT_ = comdat any

$_ZNSt3__114__split_bufferIPN3viz7SurfaceERNS_9allocatorIS3_EEE12emplace_backIJRKS3_EEEvDpOT_ = comdat any

@_ZN3viz22SurfaceAllocationGroupC1EPNS_14SurfaceManagerERKNS_11FrameSinkIdERKN4base16UnguessableTokenE = hidden unnamed_addr alias void (%"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceManager"*, %"class.viz::FrameSinkId"*, %"class.base::UnguessableToken"*), void (%"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceManager"*, %"class.viz::FrameSinkId"*, %"class.base::UnguessableToken"*)* @_ZN3viz22SurfaceAllocationGroupC2EPNS_14SurfaceManagerERKNS_11FrameSinkIdERKN4base16UnguessableTokenE
@_ZN3viz22SurfaceAllocationGroupD1Ev = hidden unnamed_addr alias void (%"class.viz::SurfaceAllocationGroup"*), void (%"class.viz::SurfaceAllocationGroup"*)* @_ZN3viz22SurfaceAllocationGroupD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz22SurfaceAllocationGroupC2EPNS_14SurfaceManagerERKNS_11FrameSinkIdERKN4base16UnguessableTokenE(%"class.viz::SurfaceAllocationGroup"* nocapture, %"class.viz::SurfaceManager"*, %"class.viz::FrameSinkId"* nocapture readonly dereferenceable(8), %"class.base::UnguessableToken"* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.viz::FrameSinkId", %"class.viz::FrameSinkId"* %2, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  store i32 %7, i32* %5, align 4
  %8 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.viz::FrameSinkId", %"class.viz::FrameSinkId"* %2, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  store i32 %10, i32* %8, align 4
  %11 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 1
  %12 = bitcast %"class.base::UnguessableToken"* %11 to i8*
  %13 = bitcast %"class.base::UnguessableToken"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 16, i1 false)
  %14 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2
  %15 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 5
  %16 = bitcast %"class.std::__1::vector"* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 72, i1 false)
  store %"class.viz::SurfaceManager"* %1, %"class.viz::SurfaceManager"** %15, align 8
  %17 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 6
  %18 = bitcast %"class.viz::SurfaceId"* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %18, i8 0, i64 64, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz22SurfaceAllocationGroupD2Ev(%"class.viz::SurfaceAllocationGroup"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %3 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %2, align 8
  %4 = icmp eq %"class.viz::Surface"** %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"class.viz::Surface"** %3 to i64
  %7 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %8 = bitcast %"class.viz::Surface"*** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %"class.viz::Surface"** %3 to i8*
  tail call void @_ZdlPv(i8* %9) #10
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %12 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %11, align 8
  %13 = icmp eq %"struct.std::__1::pair.343"* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = ptrtoint %"struct.std::__1::pair.343"* %12 to i64
  %16 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %17 = bitcast %"struct.std::__1::pair.343"** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = bitcast %"struct.std::__1::pair.343"* %12 to i8*
  tail call void @_ZdlPv(i8* %18) #10
  br label %19

19:                                               ; preds = %10, %14
  %20 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 0
  %21 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %20, align 8
  %22 = icmp eq %"class.viz::Surface"** %21, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %19
  %24 = ptrtoint %"class.viz::Surface"** %21 to i64
  %25 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 1
  %26 = bitcast %"class.viz::Surface"*** %25 to i64*
  store i64 %24, i64* %26, align 8
  %27 = bitcast %"class.viz::Surface"** %21 to i8*
  tail call void @_ZdlPv(i8* %27) #10
  br label %28

28:                                               ; preds = %19, %23
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3viz22SurfaceAllocationGroup16IsReadyToDestroyEv(%"class.viz::SurfaceAllocationGroup"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 0
  %3 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %2, align 8
  %4 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 1
  %5 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %4, align 8
  %6 = icmp eq %"class.viz::Surface"** %3, %5
  br i1 %6, label %7, label %19

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %9 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %8, align 8
  %10 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %11 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %10, align 8
  %12 = icmp eq %"class.viz::Surface"** %9, %11
  br i1 %12, label %13, label %19

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %15 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %14, align 8
  %16 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %17 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %16, align 8
  %18 = icmp eq %"struct.std::__1::pair.343"* %15, %17
  br label %19

19:                                               ; preds = %13, %7, %1
  %20 = phi i1 [ false, %7 ], [ false, %1 ], [ %18, %13 ]
  ret i1 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz22SurfaceAllocationGroup15RegisterSurfaceEPNS_7SurfaceE(%"class.viz::SurfaceAllocationGroup"*, %"class.viz::Surface"*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.viz::Surface"* %1 to i64
  %4 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2
  %5 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 1
  %6 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %5, align 8
  %7 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %8 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %7, align 8
  %9 = icmp eq %"class.viz::Surface"** %6, %8
  %10 = ptrtoint %"class.viz::Surface"** %8 to i64
  br i1 %9, label %16, label %11

11:                                               ; preds = %2
  %12 = bitcast %"class.viz::Surface"** %6 to i64*
  store i64 %3, i64* %12, align 8
  %13 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %6, i64 1
  %14 = ptrtoint %"class.viz::Surface"** %13 to i64
  %15 = bitcast %"class.viz::Surface"*** %5 to i64*
  store i64 %14, i64* %15, align 8
  br label %73

16:                                               ; preds = %2
  %17 = ptrtoint %"class.viz::Surface"** %6 to i64
  %18 = bitcast %"class.viz::Surface"*** %5 to i64*
  %19 = bitcast %"class.std::__1::vector"* %4 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 3
  %23 = add nsw i64 %22, 1
  %24 = icmp ugt i64 %23, 2305843009213693951
  br i1 %24, label %25, label %27

25:                                               ; preds = %16
  %26 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %26) #11
  unreachable

27:                                               ; preds = %16
  %28 = bitcast %"class.viz::Surface"*** %7 to i64*
  %29 = sub i64 %10, %20
  %30 = ashr exact i64 %29, 3
  %31 = icmp ult i64 %30, 1152921504606846975
  br i1 %31, label %32, label %40

32:                                               ; preds = %27
  %33 = ashr exact i64 %29, 2
  %34 = icmp ult i64 %33, %23
  %35 = select i1 %34, i64 %23, i64 %33
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %45, label %37

37:                                               ; preds = %32
  %38 = icmp ugt i64 %35, 2305843009213693951
  br i1 %38, label %39, label %40

39:                                               ; preds = %37
  tail call void @abort() #11
  unreachable

40:                                               ; preds = %37, %27
  %41 = phi i64 [ %35, %37 ], [ 2305843009213693951, %27 ]
  %42 = shl i64 %41, 3
  %43 = tail call i8* @_Znwm(i64 %42) #10
  %44 = bitcast i8* %43 to %"class.viz::Surface"**
  br label %45

45:                                               ; preds = %40, %32
  %46 = phi i64 [ %41, %40 ], [ 0, %32 ]
  %47 = phi %"class.viz::Surface"** [ %44, %40 ], [ null, %32 ]
  %48 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %47, i64 %22
  %49 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %47, i64 %46
  %50 = ptrtoint %"class.viz::Surface"** %49 to i64
  %51 = bitcast %"class.viz::Surface"** %48 to i64*
  store i64 %3, i64* %51, align 8
  %52 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %48, i64 1
  %53 = ptrtoint %"class.viz::Surface"** %52 to i64
  %54 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %55 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %54, align 8
  %56 = load i64, i64* %18, align 8
  %57 = ptrtoint %"class.viz::Surface"** %55 to i64
  %58 = sub i64 %56, %57
  %59 = ashr exact i64 %58, 3
  %60 = sub nsw i64 0, %59
  %61 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %48, i64 %60
  %62 = ptrtoint %"class.viz::Surface"** %61 to i64
  %63 = icmp sgt i64 %58, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %45
  %65 = bitcast %"class.viz::Surface"** %61 to i8*
  %66 = bitcast %"class.viz::Surface"** %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 %58, i1 false) #12
  %67 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %54, align 8
  br label %68

68:                                               ; preds = %64, %45
  %69 = phi %"class.viz::Surface"** [ %55, %45 ], [ %67, %64 ]
  store i64 %62, i64* %19, align 8
  store i64 %53, i64* %18, align 8
  store i64 %50, i64* %28, align 8
  %70 = icmp eq %"class.viz::Surface"** %69, null
  br i1 %70, label %73, label %71

71:                                               ; preds = %68
  %72 = bitcast %"class.viz::Surface"** %69 to i8*
  tail call void @_ZdlPv(i8* %72) #10
  br label %73

73:                                               ; preds = %11, %68, %71
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz22SurfaceAllocationGroup17UnregisterSurfaceEPNS_7SurfaceE(%"class.viz::SurfaceAllocationGroup"* nocapture, %"class.viz::Surface"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %3, align 8
  %5 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 1
  %6 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %5, align 8
  %7 = icmp eq %"class.viz::Surface"** %4, %6
  %8 = ptrtoint %"class.viz::Surface"** %6 to i64
  br i1 %7, label %16, label %9

9:                                                ; preds = %2, %13
  %10 = phi %"class.viz::Surface"** [ %14, %13 ], [ %4, %2 ]
  %11 = load %"class.viz::Surface"*, %"class.viz::Surface"** %10, align 8
  %12 = icmp eq %"class.viz::Surface"* %11, %1
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %10, i64 1
  %15 = icmp eq %"class.viz::Surface"** %14, %6
  br i1 %15, label %16, label %9

16:                                               ; preds = %9, %13, %2
  %17 = phi %"class.viz::Surface"** [ %4, %2 ], [ %10, %9 ], [ %6, %13 ]
  %18 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %17, i64 1
  %19 = ptrtoint %"class.viz::Surface"** %18 to i64
  %20 = sub i64 %8, %19
  %21 = ashr exact i64 %20, 3
  %22 = icmp eq i64 %20, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %16
  %24 = bitcast %"class.viz::Surface"** %17 to i8*
  %25 = bitcast %"class.viz::Surface"** %18 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 %20, i1 false) #12
  %26 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %3, align 8
  br label %27

27:                                               ; preds = %16, %23
  %28 = phi %"class.viz::Surface"** [ %4, %16 ], [ %26, %23 ]
  %29 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %17, i64 %21
  store %"class.viz::Surface"** %29, %"class.viz::Surface"*** %5, align 8
  %30 = icmp eq %"class.viz::Surface"** %28, %29
  br i1 %30, label %31, label %46

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %33 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %32, align 8
  %34 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %35 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %34, align 8
  %36 = icmp eq %"class.viz::Surface"** %33, %35
  br i1 %36, label %37, label %46

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %39 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %38, align 8
  %40 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %41 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %40, align 8
  %42 = icmp eq %"struct.std::__1::pair.343"* %39, %41
  br i1 %42, label %43, label %46

43:                                               ; preds = %37
  %44 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 5
  %45 = load %"class.viz::SurfaceManager"*, %"class.viz::SurfaceManager"** %44, align 8
  tail call void @_ZN3viz14SurfaceManager40SetAllocationGroupsNeedGarbageCollectionEv(%"class.viz::SurfaceManager"* %45) #12
  br label %46

46:                                               ; preds = %27, %31, %37, %43
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz22SurfaceAllocationGroup23MaybeMarkForDestructionEv(%"class.viz::SurfaceAllocationGroup"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 0
  %3 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %2, align 8
  %4 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 1
  %5 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %4, align 8
  %6 = icmp eq %"class.viz::Surface"** %3, %5
  br i1 %6, label %7, label %22

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %9 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %8, align 8
  %10 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %11 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %10, align 8
  %12 = icmp eq %"class.viz::Surface"** %9, %11
  br i1 %12, label %13, label %22

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %15 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %14, align 8
  %16 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %17 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %16, align 8
  %18 = icmp eq %"struct.std::__1::pair.343"* %15, %17
  br i1 %18, label %19, label %22

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 5
  %21 = load %"class.viz::SurfaceManager"*, %"class.viz::SurfaceManager"** %20, align 8
  tail call void @_ZN3viz14SurfaceManager40SetAllocationGroupsNeedGarbageCollectionEv(%"class.viz::SurfaceManager"* %21) #12
  br label %22

22:                                               ; preds = %1, %7, %19, %13
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz22SurfaceAllocationGroup23RegisterBlockedEmbedderEPNS_7SurfaceERKNS_9SurfaceIdE(%"class.viz::SurfaceAllocationGroup"*, %"class.viz::Surface"*, %"class.viz::SurfaceId"* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.viz::SurfaceId", align 8
  %5 = alloca %"class.viz::Surface"*, align 8
  store %"class.viz::Surface"* %1, %"class.viz::Surface"** %5, align 8
  %6 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 3
  %7 = getelementptr inbounds %"class.base::flat_map.339", %"class.base::flat_map.339"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %7, align 8
  %9 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %10 = bitcast %"struct.std::__1::pair.343"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = ptrtoint %"struct.std::__1::pair.343"* %8 to i64
  %13 = sub i64 %11, %12
  %14 = icmp eq i64 %13, 0
  %15 = inttoptr i64 %11 to %"struct.std::__1::pair.343"*
  br i1 %14, label %32, label %16

16:                                               ; preds = %3
  %17 = sdiv exact i64 %13, 40
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi %"struct.std::__1::pair.343"* [ %8, %16 ], [ %30, %18 ]
  %20 = phi i64 [ %17, %16 ], [ %29, %18 ]
  %21 = lshr i64 %20, 1
  %22 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %19, i64 %21
  %23 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %22, i64 0, i32 0
  %24 = load %"class.viz::Surface"*, %"class.viz::Surface"** %23, align 8
  %25 = icmp ult %"class.viz::Surface"* %24, %1
  %26 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %22, i64 1
  %27 = xor i64 %21, -1
  %28 = add i64 %20, %27
  %29 = select i1 %25, i64 %28, i64 %21
  %30 = select i1 %25, %"struct.std::__1::pair.343"* %26, %"struct.std::__1::pair.343"* %19
  %31 = icmp eq i64 %29, 0
  br i1 %31, label %32, label %18

32:                                               ; preds = %18, %3
  %33 = phi %"struct.std::__1::pair.343"* [ %8, %3 ], [ %30, %18 ]
  %34 = icmp eq %"struct.std::__1::pair.343"* %33, %15
  br i1 %34, label %39, label %35

35:                                               ; preds = %32
  %36 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %33, i64 0, i32 0
  %37 = load %"class.viz::Surface"*, %"class.viz::Surface"** %36, align 8
  %38 = icmp ugt %"class.viz::Surface"* %37, %1
  br i1 %38, label %39, label %43

39:                                               ; preds = %35, %32
  %40 = bitcast %"class.viz::SurfaceId"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %40) #12
  %41 = getelementptr inbounds %"class.base::flat_map.339", %"class.base::flat_map.339"* %6, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 0, i64 32, i1 false) #12
  %42 = call %"struct.std::__1::pair.343"* @_ZNSt3__16vectorINS_4pairIPN3viz7SurfaceENS2_9SurfaceIdEEENS_9allocatorIS6_EEE7emplaceIJRKS4_S5_EEENS_11__wrap_iterIPS6_EENSD_IPKS6_EEDpOT_(%"class.std::__1::vector.341"* %41, %"struct.std::__1::pair.343"* %33, %"class.viz::Surface"** nonnull dereferenceable(8) %5, %"class.viz::SurfaceId"* nonnull dereferenceable(32) %4) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %40) #12
  br label %43

43:                                               ; preds = %35, %39
  %44 = phi %"struct.std::__1::pair.343"* [ %42, %39 ], [ %33, %35 ]
  %45 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %44, i64 0, i32 1
  %46 = bitcast %"class.viz::SurfaceId"* %45 to i8*
  %47 = bitcast %"class.viz::SurfaceId"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz22SurfaceAllocationGroup25UnregisterBlockedEmbedderEPNS_7SurfaceEb(%"class.viz::SurfaceAllocationGroup"* nocapture, %"class.viz::Surface"*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %5 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %4, align 8
  %6 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %7 = bitcast %"struct.std::__1::pair.343"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = ptrtoint %"struct.std::__1::pair.343"* %5 to i64
  %10 = sub i64 %8, %9
  %11 = icmp eq i64 %10, 0
  %12 = inttoptr i64 %8 to %"struct.std::__1::pair.343"*
  br i1 %11, label %31, label %13

13:                                               ; preds = %3
  %14 = sdiv exact i64 %10, 40
  br label %15

15:                                               ; preds = %15, %13
  %16 = phi %"struct.std::__1::pair.343"* [ %5, %13 ], [ %27, %15 ]
  %17 = phi i64 [ %14, %13 ], [ %26, %15 ]
  %18 = lshr i64 %17, 1
  %19 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %16, i64 %18
  %20 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %19, i64 0, i32 0
  %21 = load %"class.viz::Surface"*, %"class.viz::Surface"** %20, align 8
  %22 = icmp ult %"class.viz::Surface"* %21, %1
  %23 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %19, i64 1
  %24 = xor i64 %18, -1
  %25 = add i64 %17, %24
  %26 = select i1 %22, i64 %25, i64 %18
  %27 = select i1 %22, %"struct.std::__1::pair.343"* %23, %"struct.std::__1::pair.343"* %16
  %28 = icmp eq i64 %26, 0
  br i1 %28, label %29, label %15

29:                                               ; preds = %15
  %30 = ptrtoint %"struct.std::__1::pair.343"* %27 to i64
  br label %31

31:                                               ; preds = %29, %3
  %32 = phi i64 [ %30, %29 ], [ %9, %3 ]
  %33 = phi %"struct.std::__1::pair.343"* [ %27, %29 ], [ %5, %3 ]
  %34 = icmp eq %"struct.std::__1::pair.343"* %33, %12
  br i1 %34, label %42, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %33, i64 0, i32 0
  %37 = load %"class.viz::Surface"*, %"class.viz::Surface"** %36, align 8
  %38 = icmp ugt %"class.viz::Surface"* %37, %1
  br i1 %38, label %42, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %33, i64 1
  %41 = ptrtoint %"struct.std::__1::pair.343"* %40 to i64
  br label %42

42:                                               ; preds = %39, %35, %31
  %43 = phi i64 [ %41, %39 ], [ %32, %31 ], [ %32, %35 ]
  %44 = inttoptr i64 %43 to %"struct.std::__1::pair.343"*
  %45 = icmp eq %"struct.std::__1::pair.343"* %33, %44
  br i1 %45, label %63, label %46

46:                                               ; preds = %42
  %47 = icmp eq %"struct.std::__1::pair.343"* %12, %44
  br i1 %47, label %61, label %48

48:                                               ; preds = %46, %48
  %49 = phi %"struct.std::__1::pair.343"* [ %59, %48 ], [ %33, %46 ]
  %50 = phi %"struct.std::__1::pair.343"* [ %58, %48 ], [ %44, %46 ]
  %51 = bitcast %"struct.std::__1::pair.343"* %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = bitcast %"struct.std::__1::pair.343"* %49 to i64*
  store i64 %52, i64* %53, align 8
  %54 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %50, i64 0, i32 1
  %55 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %49, i64 0, i32 1
  %56 = bitcast %"class.viz::SurfaceId"* %55 to i8*
  %57 = bitcast %"class.viz::SurfaceId"* %54 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 32, i1 false) #12
  %58 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %50, i64 1
  %59 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %49, i64 1
  %60 = icmp eq %"struct.std::__1::pair.343"* %58, %12
  br i1 %60, label %61, label %48

61:                                               ; preds = %48, %46
  %62 = phi %"struct.std::__1::pair.343"* [ %33, %46 ], [ %59, %48 ]
  store %"struct.std::__1::pair.343"* %62, %"struct.std::__1::pair.343"** %6, align 8
  br label %63

63:                                               ; preds = %42, %61
  %64 = phi %"struct.std::__1::pair.343"* [ %12, %42 ], [ %62, %61 ]
  br i1 %2, label %83, label %65

65:                                               ; preds = %63
  %66 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 0
  %67 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %66, align 8
  %68 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 1
  %69 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %68, align 8
  %70 = icmp eq %"class.viz::Surface"** %67, %69
  br i1 %70, label %71, label %83

71:                                               ; preds = %65
  %72 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %73 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %72, align 8
  %74 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %75 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %74, align 8
  %76 = icmp eq %"class.viz::Surface"** %73, %75
  br i1 %76, label %77, label %83

77:                                               ; preds = %71
  %78 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %4, align 8
  %79 = icmp eq %"struct.std::__1::pair.343"* %78, %64
  br i1 %79, label %80, label %83

80:                                               ; preds = %77
  %81 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 5
  %82 = load %"class.viz::SurfaceManager"*, %"class.viz::SurfaceManager"** %81, align 8
  tail call void @_ZN3viz14SurfaceManager40SetAllocationGroupsNeedGarbageCollectionEv(%"class.viz::SurfaceManager"* %82) #12
  br label %83

83:                                               ; preds = %80, %77, %71, %65, %63
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3viz22SurfaceAllocationGroup18HasBlockedEmbedderEv(%"class.viz::SurfaceAllocationGroup"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %3 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %2, align 8
  %4 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %5 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %4, align 8
  %6 = icmp ne %"struct.std::__1::pair.343"* %3, %5
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz22SurfaceAllocationGroup22RegisterActiveEmbedderEPNS_7SurfaceE(%"class.viz::SurfaceAllocationGroup"*, %"class.viz::Surface"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.viz::Surface"*, align 8
  store %"class.viz::Surface"* %1, %"class.viz::Surface"** %3, align 8
  %4 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 4
  %5 = getelementptr inbounds %"class.base::internal::flat_tree.349", %"class.base::internal::flat_tree.349"* %4, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %5, align 8
  %7 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %8 = bitcast %"class.viz::Surface"*** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = ptrtoint %"class.viz::Surface"** %6 to i64
  %11 = sub i64 %9, %10
  %12 = icmp eq i64 %11, 0
  %13 = inttoptr i64 %9 to %"class.viz::Surface"**
  br i1 %12, label %29, label %14

14:                                               ; preds = %2
  %15 = ashr exact i64 %11, 3
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi %"class.viz::Surface"** [ %6, %14 ], [ %27, %16 ]
  %18 = phi i64 [ %15, %14 ], [ %26, %16 ]
  %19 = lshr i64 %18, 1
  %20 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %17, i64 %19
  %21 = load %"class.viz::Surface"*, %"class.viz::Surface"** %20, align 8
  %22 = icmp ult %"class.viz::Surface"* %21, %1
  %23 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %20, i64 1
  %24 = xor i64 %19, -1
  %25 = add i64 %18, %24
  %26 = select i1 %22, i64 %25, i64 %19
  %27 = select i1 %22, %"class.viz::Surface"** %23, %"class.viz::Surface"** %17
  %28 = icmp eq i64 %26, 0
  br i1 %28, label %29, label %16

29:                                               ; preds = %16, %2
  %30 = phi %"class.viz::Surface"** [ %6, %2 ], [ %27, %16 ]
  %31 = icmp eq %"class.viz::Surface"** %30, %13
  br i1 %31, label %35, label %32

32:                                               ; preds = %29
  %33 = load %"class.viz::Surface"*, %"class.viz::Surface"** %30, align 8
  %34 = icmp ugt %"class.viz::Surface"* %33, %1
  br i1 %34, label %35, label %38

35:                                               ; preds = %32, %29
  %36 = getelementptr inbounds %"class.base::internal::flat_tree.349", %"class.base::internal::flat_tree.349"* %4, i64 0, i32 0
  %37 = call %"class.viz::Surface"** @_ZNSt3__16vectorIPN3viz7SurfaceENS_9allocatorIS3_EEE7emplaceIJRKS3_EEENS_11__wrap_iterIPS3_EENSA_IPS8_EEDpOT_(%"class.std::__1::vector"* %36, %"class.viz::Surface"** %30, %"class.viz::Surface"** nonnull dereferenceable(8) %3) #12
  br label %38

38:                                               ; preds = %32, %35
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz22SurfaceAllocationGroup24UnregisterActiveEmbedderEPNS_7SurfaceE(%"class.viz::SurfaceAllocationGroup"* nocapture, %"class.viz::Surface"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %4 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %3, align 8
  %5 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %6 = bitcast %"class.viz::Surface"*** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = ptrtoint %"class.viz::Surface"** %4 to i64
  %9 = sub i64 %7, %8
  %10 = icmp eq i64 %9, 0
  %11 = inttoptr i64 %7 to %"class.viz::Surface"**
  br i1 %10, label %29, label %12

12:                                               ; preds = %2
  %13 = ashr exact i64 %9, 3
  br label %14

14:                                               ; preds = %14, %12
  %15 = phi %"class.viz::Surface"** [ %4, %12 ], [ %25, %14 ]
  %16 = phi i64 [ %13, %12 ], [ %24, %14 ]
  %17 = lshr i64 %16, 1
  %18 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %15, i64 %17
  %19 = load %"class.viz::Surface"*, %"class.viz::Surface"** %18, align 8
  %20 = icmp ult %"class.viz::Surface"* %19, %1
  %21 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %18, i64 1
  %22 = xor i64 %17, -1
  %23 = add i64 %16, %22
  %24 = select i1 %20, i64 %23, i64 %17
  %25 = select i1 %20, %"class.viz::Surface"** %21, %"class.viz::Surface"** %15
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %27, label %14

27:                                               ; preds = %14
  %28 = ptrtoint %"class.viz::Surface"** %25 to i64
  br label %29

29:                                               ; preds = %27, %2
  %30 = phi i64 [ %28, %27 ], [ %8, %2 ]
  %31 = phi %"class.viz::Surface"** [ %25, %27 ], [ %4, %2 ]
  %32 = icmp eq %"class.viz::Surface"** %31, %11
  br i1 %32, label %39, label %33

33:                                               ; preds = %29
  %34 = load %"class.viz::Surface"*, %"class.viz::Surface"** %31, align 8
  %35 = icmp ugt %"class.viz::Surface"* %34, %1
  br i1 %35, label %39, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %31, i64 1
  %38 = ptrtoint %"class.viz::Surface"** %37 to i64
  br label %39

39:                                               ; preds = %36, %33, %29
  %40 = phi i64 [ %38, %36 ], [ %30, %29 ], [ %30, %33 ]
  %41 = inttoptr i64 %40 to %"class.viz::Surface"**
  %42 = icmp eq %"class.viz::Surface"** %31, %41
  br i1 %42, label %52, label %43

43:                                               ; preds = %39
  %44 = sub i64 %7, %40
  %45 = ashr exact i64 %44, 3
  %46 = icmp eq i64 %44, 0
  br i1 %46, label %50, label %47

47:                                               ; preds = %43
  %48 = bitcast %"class.viz::Surface"** %31 to i8*
  %49 = inttoptr i64 %40 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 %44, i1 false) #12
  br label %50

50:                                               ; preds = %47, %43
  %51 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %31, i64 %45
  store %"class.viz::Surface"** %51, %"class.viz::Surface"*** %5, align 8
  br label %52

52:                                               ; preds = %39, %50
  %53 = phi %"class.viz::Surface"** [ %11, %39 ], [ %51, %50 ]
  %54 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 0
  %55 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %54, align 8
  %56 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 1
  %57 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %56, align 8
  %58 = icmp eq %"class.viz::Surface"** %55, %57
  br i1 %58, label %59, label %71

59:                                               ; preds = %52
  %60 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %3, align 8
  %61 = icmp eq %"class.viz::Surface"** %60, %53
  br i1 %61, label %62, label %71

62:                                               ; preds = %59
  %63 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %64 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %63, align 8
  %65 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %66 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %65, align 8
  %67 = icmp eq %"struct.std::__1::pair.343"* %64, %66
  br i1 %67, label %68, label %71

68:                                               ; preds = %62
  %69 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 5
  %70 = load %"class.viz::SurfaceManager"*, %"class.viz::SurfaceManager"** %69, align 8
  tail call void @_ZN3viz14SurfaceManager40SetAllocationGroupsNeedGarbageCollectionEv(%"class.viz::SurfaceManager"* %70) #12
  br label %71

71:                                               ; preds = %52, %59, %62, %68
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz22SurfaceAllocationGroup41UpdateLastActiveReferenceAndMaybeActivateERKNS_9SurfaceIdE(%"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 6
  %4 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %3, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %11

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 6, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %29, label %11

11:                                               ; preds = %7, %2
  %12 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 6, i32 1, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %29, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 6, i32 1, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %29, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 6, i32 1, i32 2, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %27

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 6, i32 1, i32 2, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %23, %19
  %28 = tail call zeroext i1 @_ZNK3viz9SurfaceId17IsSameOrNewerThanERKS0_(%"class.viz::SurfaceId"* %3, %"class.viz::SurfaceId"* dereferenceable(32) %1) #12
  br i1 %28, label %85, label %29

29:                                               ; preds = %23, %11, %15, %7, %27
  %30 = bitcast %"class.viz::SurfaceId"* %3 to i8*
  %31 = bitcast %"class.viz::SurfaceId"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 32, i1 false)
  %32 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2
  %33 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %32, i64 0, i32 0, i32 0
  %34 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %33, align 8
  %35 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 1
  %36 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %35, align 8
  %37 = icmp eq %"class.viz::Surface"** %34, %36
  br i1 %37, label %84, label %38

38:                                               ; preds = %29
  %39 = load %"class.viz::Surface"*, %"class.viz::Surface"** %34, align 8
  %40 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %39, i64 0, i32 0, i32 0
  %41 = tail call zeroext i1 @_ZNK3viz9SurfaceId17IsSameOrNewerThanERKS0_(%"class.viz::SurfaceId"* %1, %"class.viz::SurfaceId"* dereferenceable(32) %40) #12
  br i1 %41, label %42, label %84

42:                                               ; preds = %38
  %43 = bitcast %"class.viz::Surface"*** %35 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = bitcast %"class.std::__1::vector"* %32 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = sub i64 %44, %46
  %48 = lshr exact i64 %47, 3
  %49 = trunc i64 %48 to i32
  %50 = icmp sgt i32 %49, 1
  %51 = inttoptr i64 %46 to %"class.viz::Surface"**
  %52 = inttoptr i64 %44 to %"class.viz::Surface"**
  br i1 %50, label %53, label %72

53:                                               ; preds = %42, %53
  %54 = phi %"class.viz::Surface"** [ %68, %53 ], [ %51, %42 ]
  %55 = phi i32 [ %65, %53 ], [ %49, %42 ]
  %56 = phi i32 [ %64, %53 ], [ 0, %42 ]
  %57 = add nsw i32 %56, %55
  %58 = sdiv i32 %57, 2
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %54, i64 %59
  %61 = load %"class.viz::Surface"*, %"class.viz::Surface"** %60, align 8
  %62 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %61, i64 0, i32 0, i32 0
  %63 = tail call zeroext i1 @_ZNK3viz9SurfaceId17IsSameOrNewerThanERKS0_(%"class.viz::SurfaceId"* %1, %"class.viz::SurfaceId"* dereferenceable(32) %62) #12
  %64 = select i1 %63, i32 %58, i32 %56
  %65 = select i1 %63, i32 %55, i32 %58
  %66 = sub nsw i32 %65, %64
  %67 = icmp sgt i32 %66, 1
  %68 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %33, align 8
  br i1 %67, label %53, label %69

69:                                               ; preds = %53
  %70 = sext i32 %64 to i64
  %71 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %35, align 8
  br label %72

72:                                               ; preds = %42, %69
  %73 = phi %"class.viz::Surface"** [ %52, %42 ], [ %71, %69 ]
  %74 = phi %"class.viz::Surface"** [ %51, %42 ], [ %68, %69 ]
  %75 = phi i64 [ 0, %42 ], [ %70, %69 ]
  %76 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %74, i64 %75
  %77 = icmp eq %"class.viz::Surface"** %76, %73
  br i1 %77, label %84, label %78

78:                                               ; preds = %72
  %79 = load %"class.viz::Surface"*, %"class.viz::Surface"** %76, align 8
  %80 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %79, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %81 = load i8, i8* %80, align 8, !range !2
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %78
  tail call void @_ZN3viz7Surface40ActivatePendingFrameForInheritedDeadlineEv(%"class.viz::Surface"* %79) #12
  br label %84

84:                                               ; preds = %38, %29, %78, %72, %83
  tail call void @_ZN3viz22SurfaceAllocationGroup35UpdateLastReferenceAndMaybeActivateERKNS_9SurfaceIdE(%"class.viz::SurfaceAllocationGroup"* %0, %"class.viz::SurfaceId"* dereferenceable(32) %1)
  br label %85

85:                                               ; preds = %27, %84
  ret void
}

declare zeroext i1 @_ZNK3viz9SurfaceId17IsSameOrNewerThanERKS0_(%"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.viz::Surface"** @_ZNK3viz22SurfaceAllocationGroup21FindLatestSurfaceUpToERKNS_9SurfaceIdE(%"class.viz::SurfaceAllocationGroup"* nocapture readonly, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %4, align 8
  %6 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 1
  %7 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %6, align 8
  %8 = icmp eq %"class.viz::Surface"** %5, %7
  br i1 %8, label %59, label %9

9:                                                ; preds = %2
  %10 = load %"class.viz::Surface"*, %"class.viz::Surface"** %5, align 8
  %11 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %10, i64 0, i32 0, i32 0
  %12 = tail call zeroext i1 @_ZNK3viz9SurfaceId17IsSameOrNewerThanERKS0_(%"class.viz::SurfaceId"* %1, %"class.viz::SurfaceId"* dereferenceable(32) %11) #12
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %6, align 8
  br label %59

15:                                               ; preds = %9
  %16 = bitcast %"class.viz::Surface"*** %6 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.std::__1::vector"* %3 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %17, %19
  %21 = lshr exact i64 %20, 3
  %22 = trunc i64 %21 to i32
  %23 = icmp sgt i32 %22, 1
  %24 = inttoptr i64 %19 to %"class.viz::Surface"**
  br i1 %23, label %25, label %55

25:                                               ; preds = %15
  %26 = sdiv i32 %22, 2
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %24, i64 %27
  %29 = load %"class.viz::Surface"*, %"class.viz::Surface"** %28, align 8
  %30 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %29, i64 0, i32 0, i32 0
  %31 = tail call zeroext i1 @_ZNK3viz9SurfaceId17IsSameOrNewerThanERKS0_(%"class.viz::SurfaceId"* %1, %"class.viz::SurfaceId"* dereferenceable(32) %30) #12
  %32 = select i1 %31, i32 %26, i32 0
  %33 = select i1 %31, i32 %22, i32 %26
  %34 = sub nsw i32 %33, %32
  %35 = icmp sgt i32 %34, 1
  br i1 %35, label %36, label %51

36:                                               ; preds = %25, %36
  %37 = phi i32 [ %48, %36 ], [ %33, %25 ]
  %38 = phi i32 [ %47, %36 ], [ %32, %25 ]
  %39 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %4, align 8
  %40 = add nsw i32 %37, %38
  %41 = sdiv i32 %40, 2
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %39, i64 %42
  %44 = load %"class.viz::Surface"*, %"class.viz::Surface"** %43, align 8
  %45 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %44, i64 0, i32 0, i32 0
  %46 = tail call zeroext i1 @_ZNK3viz9SurfaceId17IsSameOrNewerThanERKS0_(%"class.viz::SurfaceId"* %1, %"class.viz::SurfaceId"* dereferenceable(32) %45) #12
  %47 = select i1 %46, i32 %41, i32 %38
  %48 = select i1 %46, i32 %37, i32 %41
  %49 = sub nsw i32 %48, %47
  %50 = icmp sgt i32 %49, 1
  br i1 %50, label %36, label %51

51:                                               ; preds = %36, %25
  %52 = phi i32 [ %32, %25 ], [ %47, %36 ]
  %53 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %4, align 8
  %54 = sext i32 %52 to i64
  br label %55

55:                                               ; preds = %51, %15
  %56 = phi %"class.viz::Surface"** [ %24, %15 ], [ %53, %51 ]
  %57 = phi i64 [ 0, %15 ], [ %54, %51 ]
  %58 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %56, i64 %57
  br label %59

59:                                               ; preds = %2, %55, %13
  %60 = phi %"class.viz::Surface"** [ %58, %55 ], [ %14, %13 ], [ %5, %2 ]
  ret %"class.viz::Surface"** %60
}

declare void @_ZN3viz7Surface40ActivatePendingFrameForInheritedDeadlineEv(%"class.viz::Surface"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz22SurfaceAllocationGroup35UpdateLastReferenceAndMaybeActivateERKNS_9SurfaceIdE(%"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 7
  %4 = tail call zeroext i1 @_ZNK3viz9SurfaceId17IsSameOrNewerThanERKS0_(%"class.viz::SurfaceId"* %3, %"class.viz::SurfaceId"* dereferenceable(32) %1) #12
  br i1 %4, label %92, label %5

5:                                                ; preds = %2
  %6 = bitcast %"class.viz::SurfaceId"* %3 to i8*
  %7 = bitcast %"class.viz::SurfaceId"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 32, i1 false)
  %8 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 0
  %10 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %9, align 8
  %11 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 1
  %12 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %11, align 8
  %13 = icmp eq %"class.viz::Surface"** %10, %12
  br i1 %13, label %92, label %14

14:                                               ; preds = %5
  %15 = load %"class.viz::Surface"*, %"class.viz::Surface"** %10, align 8
  %16 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %15, i64 0, i32 0, i32 0
  %17 = tail call zeroext i1 @_ZNK3viz9SurfaceId17IsSameOrNewerThanERKS0_(%"class.viz::SurfaceId"* %1, %"class.viz::SurfaceId"* dereferenceable(32) %16) #12
  br i1 %17, label %18, label %92

18:                                               ; preds = %14
  %19 = bitcast %"class.viz::Surface"*** %11 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"class.std::__1::vector"* %8 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %20, %22
  %24 = lshr exact i64 %23, 3
  %25 = trunc i64 %24 to i32
  %26 = icmp sgt i32 %25, 1
  %27 = inttoptr i64 %22 to %"class.viz::Surface"**
  %28 = inttoptr i64 %20 to %"class.viz::Surface"**
  br i1 %26, label %29, label %48

29:                                               ; preds = %18, %29
  %30 = phi %"class.viz::Surface"** [ %44, %29 ], [ %27, %18 ]
  %31 = phi i32 [ %41, %29 ], [ %25, %18 ]
  %32 = phi i32 [ %40, %29 ], [ 0, %18 ]
  %33 = add nsw i32 %32, %31
  %34 = sdiv i32 %33, 2
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %30, i64 %35
  %37 = load %"class.viz::Surface"*, %"class.viz::Surface"** %36, align 8
  %38 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %37, i64 0, i32 0, i32 0
  %39 = tail call zeroext i1 @_ZNK3viz9SurfaceId17IsSameOrNewerThanERKS0_(%"class.viz::SurfaceId"* %1, %"class.viz::SurfaceId"* dereferenceable(32) %38) #12
  %40 = select i1 %39, i32 %34, i32 %32
  %41 = select i1 %39, i32 %31, i32 %34
  %42 = sub nsw i32 %41, %40
  %43 = icmp sgt i32 %42, 1
  %44 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %9, align 8
  br i1 %43, label %29, label %45

45:                                               ; preds = %29
  %46 = sext i32 %40 to i64
  %47 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %11, align 8
  br label %48

48:                                               ; preds = %18, %45
  %49 = phi %"class.viz::Surface"** [ %28, %18 ], [ %47, %45 ]
  %50 = phi %"class.viz::Surface"** [ %27, %18 ], [ %44, %45 ]
  %51 = phi i64 [ 0, %18 ], [ %46, %45 ]
  %52 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %50, i64 %51
  %53 = icmp eq %"class.viz::Surface"** %52, %49
  br i1 %53, label %92, label %54

54:                                               ; preds = %48
  %55 = load %"class.viz::Surface"*, %"class.viz::Surface"** %52, align 8
  %56 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %55, i64 0, i32 0, i32 0, i32 0, i32 0
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 0
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %57, %59
  br i1 %60, label %61, label %91

61:                                               ; preds = %54
  %62 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %55, i64 0, i32 0, i32 0, i32 0, i32 1
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 1
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %63, %65
  br i1 %66, label %67, label %91

67:                                               ; preds = %61
  %68 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %55, i64 0, i32 0, i32 0, i32 1, i32 0
  %69 = load i32, i32* %68, align 8
  %70 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 0
  %71 = load i32, i32* %70, align 8
  %72 = icmp eq i32 %69, %71
  br i1 %72, label %73, label %91

73:                                               ; preds = %67
  %74 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %55, i64 0, i32 0, i32 0, i32 1, i32 1
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 1
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %75, %77
  br i1 %78, label %79, label %91

79:                                               ; preds = %73
  %80 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %55, i64 0, i32 0, i32 0, i32 1, i32 2, i32 0, i32 0
  %81 = load i64, i64* %80, align 8
  %82 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 0
  %83 = load i64, i64* %82, align 8
  %84 = icmp eq i64 %81, %83
  br i1 %84, label %85, label %91

85:                                               ; preds = %79
  %86 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %55, i64 0, i32 0, i32 0, i32 1, i32 2, i32 0, i32 1
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 1
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %87, %89
  br i1 %90, label %92, label %91

91:                                               ; preds = %85, %54, %79, %67, %73, %61
  tail call void @_ZN3viz7Surface29SetIsFallbackAndMaybeActivateEv(%"class.viz::Surface"* %55) #12
  br label %92

92:                                               ; preds = %14, %85, %48, %91, %5, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz22SurfaceAllocationGroup42UpdateLastPendingReferenceAndMaybeActivateERKNS_9SurfaceIdE(%"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  tail call void @_ZN3viz22SurfaceAllocationGroup35UpdateLastReferenceAndMaybeActivateERKNS_9SurfaceIdE(%"class.viz::SurfaceAllocationGroup"* %0, %"class.viz::SurfaceId"* dereferenceable(32) %1)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(32) %"class.viz::SurfaceId"* @_ZN3viz22SurfaceAllocationGroup22GetLastActiveReferenceEv(%"class.viz::SurfaceAllocationGroup"* readnone) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 6
  ret %"class.viz::SurfaceId"* %2
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(32) %"class.viz::SurfaceId"* @_ZN3viz22SurfaceAllocationGroup16GetLastReferenceEv(%"class.viz::SurfaceAllocationGroup"* readnone) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 7
  ret %"class.viz::SurfaceId"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.viz::Surface"* @_ZNK3viz22SurfaceAllocationGroup30FindLatestActiveSurfaceInRangeERKNS_12SurfaceRangeE(%"class.viz::SurfaceAllocationGroup"* nocapture readonly, %"class.viz::SurfaceRange"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 1
  %4 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 1, i32 1, i32 2, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 1, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %5, %7
  br i1 %8, label %9, label %87

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 1, i32 1, i32 2, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 1, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %11, %13
  br i1 %14, label %15, label %87

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %16, i64 0, i32 0, i32 0
  %18 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %17, align 8
  %19 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 1
  %20 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %19, align 8
  %21 = icmp eq %"class.viz::Surface"** %18, %20
  br i1 %21, label %122, label %22

22:                                               ; preds = %15
  %23 = load %"class.viz::Surface"*, %"class.viz::Surface"** %18, align 8
  %24 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %23, i64 0, i32 0, i32 0
  %25 = tail call zeroext i1 @_ZNK3viz9SurfaceId17IsSameOrNewerThanERKS0_(%"class.viz::SurfaceId"* %3, %"class.viz::SurfaceId"* dereferenceable(32) %24) #12
  br i1 %25, label %26, label %122

26:                                               ; preds = %22
  %27 = bitcast %"class.viz::Surface"*** %19 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %"class.std::__1::vector"* %16 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %28, %30
  %32 = lshr exact i64 %31, 3
  %33 = trunc i64 %32 to i32
  %34 = icmp sgt i32 %33, 1
  %35 = inttoptr i64 %30 to %"class.viz::Surface"**
  %36 = inttoptr i64 %28 to %"class.viz::Surface"**
  br i1 %34, label %37, label %56

37:                                               ; preds = %26, %37
  %38 = phi %"class.viz::Surface"** [ %52, %37 ], [ %35, %26 ]
  %39 = phi i32 [ %49, %37 ], [ %33, %26 ]
  %40 = phi i32 [ %48, %37 ], [ 0, %26 ]
  %41 = add nsw i32 %40, %39
  %42 = sdiv i32 %41, 2
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %38, i64 %43
  %45 = load %"class.viz::Surface"*, %"class.viz::Surface"** %44, align 8
  %46 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %45, i64 0, i32 0, i32 0
  %47 = tail call zeroext i1 @_ZNK3viz9SurfaceId17IsSameOrNewerThanERKS0_(%"class.viz::SurfaceId"* %3, %"class.viz::SurfaceId"* dereferenceable(32) %46) #12
  %48 = select i1 %47, i32 %42, i32 %40
  %49 = select i1 %47, i32 %39, i32 %42
  %50 = sub nsw i32 %49, %48
  %51 = icmp sgt i32 %50, 1
  %52 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %17, align 8
  br i1 %51, label %37, label %53

53:                                               ; preds = %37
  %54 = sext i32 %48 to i64
  %55 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %19, align 8
  br label %56

56:                                               ; preds = %53, %26
  %57 = phi %"class.viz::Surface"** [ %36, %26 ], [ %55, %53 ]
  %58 = phi %"class.viz::Surface"** [ %35, %26 ], [ %52, %53 ]
  %59 = phi i64 [ 0, %26 ], [ %54, %53 ]
  %60 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %58, i64 %59
  %61 = icmp eq %"class.viz::Surface"** %60, %57
  %62 = icmp slt i64 %59, 0
  %63 = or i1 %61, %62
  br i1 %63, label %73, label %64

64:                                               ; preds = %56, %70
  %65 = phi %"class.viz::Surface"** [ %71, %70 ], [ %60, %56 ]
  %66 = load %"class.viz::Surface"*, %"class.viz::Surface"** %65, align 8
  %67 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %66, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %68 = load i8, i8* %67, align 8, !range !2
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %70, label %73

70:                                               ; preds = %64
  %71 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %65, i64 -1
  %72 = icmp ult %"class.viz::Surface"** %71, %58
  br i1 %72, label %73, label %64

73:                                               ; preds = %64, %70, %56
  %74 = phi %"class.viz::Surface"** [ %57, %56 ], [ %65, %64 ], [ %57, %70 ]
  %75 = icmp eq %"class.viz::Surface"** %74, %57
  br i1 %75, label %122, label %76

76:                                               ; preds = %73
  %77 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = load i8, i8* %77, align 8, !range !2
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %85, label %80

80:                                               ; preds = %76
  %81 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %82 = load %"class.viz::Surface"*, %"class.viz::Surface"** %74, align 8
  %83 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %82, i64 0, i32 0, i32 0
  %84 = tail call zeroext i1 @_ZNK3viz9SurfaceId11IsNewerThanERKS0_(%"class.viz::SurfaceId"* %81, %"class.viz::SurfaceId"* dereferenceable(32) %83) #12
  br i1 %84, label %122, label %85

85:                                               ; preds = %76, %80
  %86 = load %"class.viz::Surface"*, %"class.viz::Surface"** %74, align 8
  br label %122

87:                                               ; preds = %2, %9
  %88 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2
  %89 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 1
  %90 = bitcast %"class.viz::Surface"*** %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = bitcast %"class.std::__1::vector"* %88 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %91, %93
  %95 = lshr exact i64 %94, 3
  %96 = trunc i64 %95 to i32
  %97 = inttoptr i64 %93 to %"class.viz::Surface"**
  br label %98

98:                                               ; preds = %102, %87
  %99 = phi i32 [ %96, %87 ], [ %100, %102 ]
  %100 = add i32 %99, -1
  %101 = icmp sgt i32 %100, -1
  br i1 %101, label %102, label %120

102:                                              ; preds = %98
  %103 = sext i32 %100 to i64
  %104 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %97, i64 %103
  %105 = load %"class.viz::Surface"*, %"class.viz::Surface"** %104, align 8
  %106 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %105, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %107 = load i8, i8* %106, align 8, !range !2
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %98, label %109

109:                                              ; preds = %102
  %110 = icmp eq %"class.viz::Surface"* %105, null
  br i1 %110, label %120, label %111

111:                                              ; preds = %109
  %112 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %113 = load i8, i8* %112, align 8, !range !2
  %114 = icmp eq i8 %113, 0
  br i1 %114, label %115, label %116, !prof !3

115:                                              ; preds = %111
  tail call void @llvm.trap() #12
  unreachable

116:                                              ; preds = %111
  %117 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %118 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %105, i64 0, i32 0, i32 0
  %119 = tail call zeroext i1 @_ZNK3viz9SurfaceId11IsNewerThanERKS0_(%"class.viz::SurfaceId"* %117, %"class.viz::SurfaceId"* dereferenceable(32) %118) #12
  br i1 %119, label %122, label %120

120:                                              ; preds = %98, %109, %116
  %121 = phi %"class.viz::Surface"* [ null, %109 ], [ %105, %116 ], [ null, %98 ]
  br label %122

122:                                              ; preds = %22, %15, %73, %85, %80, %120, %116
  %123 = phi %"class.viz::Surface"* [ %121, %120 ], [ null, %116 ], [ %86, %85 ], [ null, %80 ], [ null, %73 ], [ null, %15 ], [ null, %22 ]
  ret %"class.viz::Surface"* %123
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.viz::Surface"** @_ZNK3viz22SurfaceAllocationGroup27FindLatestActiveSurfaceUpToERKNS_9SurfaceIdE(%"class.viz::SurfaceAllocationGroup"* nocapture readonly, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %4, align 8
  %6 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 1
  %7 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %6, align 8
  %8 = icmp eq %"class.viz::Surface"** %5, %7
  br i1 %8, label %63, label %9

9:                                                ; preds = %2
  %10 = load %"class.viz::Surface"*, %"class.viz::Surface"** %5, align 8
  %11 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %10, i64 0, i32 0, i32 0
  %12 = tail call zeroext i1 @_ZNK3viz9SurfaceId17IsSameOrNewerThanERKS0_(%"class.viz::SurfaceId"* %1, %"class.viz::SurfaceId"* dereferenceable(32) %11) #12
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %6, align 8
  br label %63

15:                                               ; preds = %9
  %16 = bitcast %"class.viz::Surface"*** %6 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.std::__1::vector"* %3 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %17, %19
  %21 = lshr exact i64 %20, 3
  %22 = trunc i64 %21 to i32
  %23 = icmp sgt i32 %22, 1
  %24 = inttoptr i64 %19 to %"class.viz::Surface"**
  %25 = inttoptr i64 %17 to %"class.viz::Surface"**
  br i1 %23, label %26, label %45

26:                                               ; preds = %15, %26
  %27 = phi %"class.viz::Surface"** [ %41, %26 ], [ %24, %15 ]
  %28 = phi i32 [ %38, %26 ], [ %22, %15 ]
  %29 = phi i32 [ %37, %26 ], [ 0, %15 ]
  %30 = add nsw i32 %29, %28
  %31 = sdiv i32 %30, 2
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %27, i64 %32
  %34 = load %"class.viz::Surface"*, %"class.viz::Surface"** %33, align 8
  %35 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %34, i64 0, i32 0, i32 0
  %36 = tail call zeroext i1 @_ZNK3viz9SurfaceId17IsSameOrNewerThanERKS0_(%"class.viz::SurfaceId"* %1, %"class.viz::SurfaceId"* dereferenceable(32) %35) #12
  %37 = select i1 %36, i32 %31, i32 %29
  %38 = select i1 %36, i32 %28, i32 %31
  %39 = sub nsw i32 %38, %37
  %40 = icmp sgt i32 %39, 1
  %41 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %4, align 8
  br i1 %40, label %26, label %42

42:                                               ; preds = %26
  %43 = sext i32 %37 to i64
  %44 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %6, align 8
  br label %45

45:                                               ; preds = %15, %42
  %46 = phi %"class.viz::Surface"** [ %25, %15 ], [ %44, %42 ]
  %47 = phi %"class.viz::Surface"** [ %24, %15 ], [ %41, %42 ]
  %48 = phi i64 [ 0, %15 ], [ %43, %42 ]
  %49 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %47, i64 %48
  %50 = icmp eq %"class.viz::Surface"** %49, %46
  br i1 %50, label %63, label %51

51:                                               ; preds = %45
  %52 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %4, align 8
  %53 = icmp ult %"class.viz::Surface"** %49, %52
  br i1 %53, label %63, label %54

54:                                               ; preds = %51, %60
  %55 = phi %"class.viz::Surface"** [ %61, %60 ], [ %49, %51 ]
  %56 = load %"class.viz::Surface"*, %"class.viz::Surface"** %55, align 8
  %57 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %56, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %58 = load i8, i8* %57, align 8, !range !2
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %63

60:                                               ; preds = %54
  %61 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %55, i64 -1
  %62 = icmp ult %"class.viz::Surface"** %61, %52
  br i1 %62, label %63, label %54

63:                                               ; preds = %60, %54, %2, %13, %51, %45
  %64 = phi %"class.viz::Surface"** [ %46, %45 ], [ %46, %51 ], [ %5, %2 ], [ %14, %13 ], [ %46, %60 ], [ %55, %54 ]
  ret %"class.viz::Surface"** %64
}

declare zeroext i1 @_ZNK3viz9SurfaceId11IsNewerThanERKS0_(%"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz22SurfaceAllocationGroup29TakeAggregatedLatencyInfoUpToEPNS_7SurfaceEPNSt3__16vectorIN2ui11LatencyInfoENS3_9allocatorIS6_EEEE(%"class.viz::SurfaceAllocationGroup"* nocapture readonly, %"class.viz::Surface"*, %"class.std::__1::vector.141"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN3viz7Surface21TakeActiveLatencyInfoEPNSt3__16vectorIN2ui11LatencyInfoENS1_9allocatorIS4_EEEE(%"class.viz::Surface"* %1, %"class.std::__1::vector.141"* %2) #12
  %4 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %1, i64 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %7 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %6, align 8
  %8 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 2, i32 0, i32 1
  %9 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %8, align 8
  %10 = icmp eq %"class.viz::Surface"** %7, %9
  br i1 %10, label %64, label %11

11:                                               ; preds = %3
  %12 = load %"class.viz::Surface"*, %"class.viz::Surface"** %7, align 8
  %13 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %12, i64 0, i32 0, i32 0
  %14 = tail call zeroext i1 @_ZNK3viz9SurfaceId17IsSameOrNewerThanERKS0_(%"class.viz::SurfaceId"* %4, %"class.viz::SurfaceId"* dereferenceable(32) %13) #12
  br i1 %14, label %18, label %15

15:                                               ; preds = %11
  %16 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %8, align 8
  %17 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %6, align 8
  br label %50

18:                                               ; preds = %11
  %19 = bitcast %"class.viz::Surface"*** %8 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"class.std::__1::vector"* %5 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %20, %22
  %24 = lshr exact i64 %23, 3
  %25 = trunc i64 %24 to i32
  %26 = icmp sgt i32 %25, 1
  %27 = inttoptr i64 %22 to %"class.viz::Surface"**
  br i1 %26, label %28, label %46

28:                                               ; preds = %18, %28
  %29 = phi %"class.viz::Surface"** [ %43, %28 ], [ %27, %18 ]
  %30 = phi i32 [ %40, %28 ], [ %25, %18 ]
  %31 = phi i32 [ %39, %28 ], [ 0, %18 ]
  %32 = add nsw i32 %31, %30
  %33 = sdiv i32 %32, 2
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %29, i64 %34
  %36 = load %"class.viz::Surface"*, %"class.viz::Surface"** %35, align 8
  %37 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %36, i64 0, i32 0, i32 0
  %38 = tail call zeroext i1 @_ZNK3viz9SurfaceId17IsSameOrNewerThanERKS0_(%"class.viz::SurfaceId"* %4, %"class.viz::SurfaceId"* dereferenceable(32) %37) #12
  %39 = select i1 %38, i32 %33, i32 %31
  %40 = select i1 %38, i32 %30, i32 %33
  %41 = sub nsw i32 %40, %39
  %42 = icmp sgt i32 %41, 1
  %43 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %6, align 8
  br i1 %42, label %28, label %44

44:                                               ; preds = %28
  %45 = sext i32 %39 to i64
  br label %46

46:                                               ; preds = %44, %18
  %47 = phi %"class.viz::Surface"** [ %27, %18 ], [ %43, %44 ]
  %48 = phi i64 [ 0, %18 ], [ %45, %44 ]
  %49 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %47, i64 %48
  br label %50

50:                                               ; preds = %15, %46
  %51 = phi %"class.viz::Surface"** [ %47, %46 ], [ %17, %15 ]
  %52 = phi %"class.viz::Surface"** [ %49, %46 ], [ %16, %15 ]
  %53 = icmp ult %"class.viz::Surface"** %51, %52
  br i1 %53, label %54, label %64

54:                                               ; preds = %50, %61
  %55 = phi %"class.viz::Surface"** [ %56, %61 ], [ %52, %50 ]
  %56 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %55, i64 -1
  %57 = load %"class.viz::Surface"*, %"class.viz::Surface"** %56, align 8
  %58 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %57, i64 0, i32 16
  %59 = load i8, i8* %58, align 1, !range !2
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %61, label %64

61:                                               ; preds = %54
  tail call void @_ZN3viz7Surface31TakeActiveAndPendingLatencyInfoEPNSt3__16vectorIN2ui11LatencyInfoENS1_9allocatorIS4_EEEE(%"class.viz::Surface"* %57, %"class.std::__1::vector.141"* %2) #12
  %62 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %6, align 8
  %63 = icmp ult %"class.viz::Surface"** %62, %56
  br i1 %63, label %54, label %64

64:                                               ; preds = %61, %54, %3, %50
  ret void
}

declare void @_ZN3viz7Surface21TakeActiveLatencyInfoEPNSt3__16vectorIN2ui11LatencyInfoENS1_9allocatorIS4_EEEE(%"class.viz::Surface"*, %"class.std::__1::vector.141"*) local_unnamed_addr #3

declare void @_ZN3viz7Surface31TakeActiveAndPendingLatencyInfoEPNSt3__16vectorIN2ui11LatencyInfoENS1_9allocatorIS4_EEEE(%"class.viz::Surface"*, %"class.std::__1::vector.141"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz22SurfaceAllocationGroup24OnFirstSurfaceActivationEPNS_7SurfaceE(%"class.viz::SurfaceAllocationGroup"*, %"class.viz::Surface"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.viz::SurfaceId", align 8
  %4 = alloca %"class.base::flat_map.339", align 8
  %5 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %6 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %5, align 8
  %7 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %8 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %7, align 8
  %9 = icmp eq %"class.viz::Surface"** %6, %8
  br i1 %9, label %12, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %1, i64 0, i32 0, i32 0
  br label %26

12:                                               ; preds = %26, %2
  %13 = bitcast %"class.base::flat_map.339"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #12
  %14 = getelementptr inbounds %"class.base::flat_map.339", %"class.base::flat_map.339"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.base::flat_map.339", %"class.base::flat_map.339"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 24, i1 false) #12
  %16 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %17 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %16, align 8
  %18 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %19 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %18, align 8
  %20 = icmp eq %"struct.std::__1::pair.343"* %17, %19
  br i1 %20, label %164, label %21

21:                                               ; preds = %12
  %22 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %1, i64 0, i32 0, i32 0
  %23 = bitcast %"struct.std::__1::pair.343"** %15 to i64*
  %24 = bitcast %"class.viz::SurfaceId"* %3 to i8*
  %25 = getelementptr inbounds %"class.base::flat_map.339", %"class.base::flat_map.339"* %4, i64 0, i32 0, i32 0
  br label %38

26:                                               ; preds = %10, %26
  %27 = phi %"class.viz::Surface"** [ %6, %10 ], [ %29, %26 ]
  %28 = load %"class.viz::Surface"*, %"class.viz::Surface"** %27, align 8
  tail call void @_ZN3viz7Surface30OnChildActivatedForActiveFrameERKNS_9SurfaceIdE(%"class.viz::Surface"* %28, %"class.viz::SurfaceId"* dereferenceable(32) %11) #12
  %29 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %27, i64 1
  %30 = icmp eq %"class.viz::Surface"** %29, %8
  br i1 %30, label %12, label %26

31:                                               ; preds = %82
  %32 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %14, align 8
  %33 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %15, align 8
  %34 = icmp eq %"struct.std::__1::pair.343"* %32, %33
  br i1 %34, label %157, label %35

35:                                               ; preds = %31
  %36 = bitcast %"struct.std::__1::pair.343"** %18 to i64*
  %37 = load i64, i64* %36, align 8
  br label %89

38:                                               ; preds = %21, %82
  %39 = phi %"struct.std::__1::pair.343"* [ %17, %21 ], [ %83, %82 ]
  %40 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %39, i64 0, i32 1
  %41 = call zeroext i1 @_ZNK3viz9SurfaceId11IsNewerThanERKS0_(%"class.viz::SurfaceId"* %40, %"class.viz::SurfaceId"* dereferenceable(32) %22) #12
  br i1 %41, label %82, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %39, i64 0, i32 0
  %44 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %14, align 8
  %45 = load i64, i64* %23, align 8
  %46 = ptrtoint %"struct.std::__1::pair.343"* %44 to i64
  %47 = sub i64 %45, %46
  %48 = icmp eq i64 %47, 0
  %49 = inttoptr i64 %45 to %"struct.std::__1::pair.343"*
  br i1 %48, label %67, label %50

50:                                               ; preds = %42
  %51 = sdiv exact i64 %47, 40
  %52 = load %"class.viz::Surface"*, %"class.viz::Surface"** %43, align 8
  br label %53

53:                                               ; preds = %53, %50
  %54 = phi %"struct.std::__1::pair.343"* [ %44, %50 ], [ %65, %53 ]
  %55 = phi i64 [ %51, %50 ], [ %64, %53 ]
  %56 = lshr i64 %55, 1
  %57 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %54, i64 %56
  %58 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %57, i64 0, i32 0
  %59 = load %"class.viz::Surface"*, %"class.viz::Surface"** %58, align 8
  %60 = icmp ult %"class.viz::Surface"* %59, %52
  %61 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %57, i64 1
  %62 = xor i64 %56, -1
  %63 = add i64 %55, %62
  %64 = select i1 %60, i64 %63, i64 %56
  %65 = select i1 %60, %"struct.std::__1::pair.343"* %61, %"struct.std::__1::pair.343"* %54
  %66 = icmp eq i64 %64, 0
  br i1 %66, label %67, label %53

67:                                               ; preds = %53, %42
  %68 = phi %"struct.std::__1::pair.343"* [ %44, %42 ], [ %65, %53 ]
  %69 = icmp eq %"struct.std::__1::pair.343"* %68, %49
  br i1 %69, label %75, label %70

70:                                               ; preds = %67
  %71 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %68, i64 0, i32 0
  %72 = load %"class.viz::Surface"*, %"class.viz::Surface"** %43, align 8
  %73 = load %"class.viz::Surface"*, %"class.viz::Surface"** %71, align 8
  %74 = icmp ult %"class.viz::Surface"* %72, %73
  br i1 %74, label %75, label %77

75:                                               ; preds = %70, %67
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %24) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 0, i64 32, i1 false) #12
  %76 = call %"struct.std::__1::pair.343"* @_ZNSt3__16vectorINS_4pairIPN3viz7SurfaceENS2_9SurfaceIdEEENS_9allocatorIS6_EEE7emplaceIJRKS4_S5_EEENS_11__wrap_iterIPS6_EENSD_IPKS6_EEDpOT_(%"class.std::__1::vector.341"* nonnull %25, %"struct.std::__1::pair.343"* %68, %"class.viz::Surface"** dereferenceable(8) %43, %"class.viz::SurfaceId"* nonnull dereferenceable(32) %3) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #12
  br label %77

77:                                               ; preds = %70, %75
  %78 = phi %"struct.std::__1::pair.343"* [ %76, %75 ], [ %68, %70 ]
  %79 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %78, i64 0, i32 1
  %80 = bitcast %"class.viz::SurfaceId"* %79 to i8*
  %81 = bitcast %"class.viz::SurfaceId"* %40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 32, i1 false)
  br label %82

82:                                               ; preds = %77, %38
  %83 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %39, i64 1
  %84 = icmp eq %"struct.std::__1::pair.343"* %83, %19
  br i1 %84, label %31, label %38

85:                                               ; preds = %151
  %86 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %14, align 8
  %87 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %15, align 8
  %88 = icmp eq %"struct.std::__1::pair.343"* %86, %87
  br i1 %88, label %157, label %165

89:                                               ; preds = %35, %151
  %90 = phi i64 [ %37, %35 ], [ %152, %151 ]
  %91 = phi %"struct.std::__1::pair.343"* [ %32, %35 ], [ %153, %151 ]
  %92 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %91, i64 0, i32 0
  %93 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %16, align 8
  %94 = ptrtoint %"struct.std::__1::pair.343"* %93 to i64
  %95 = sub i64 %90, %94
  %96 = icmp eq i64 %95, 0
  %97 = inttoptr i64 %90 to %"struct.std::__1::pair.343"*
  br i1 %96, label %117, label %98

98:                                               ; preds = %89
  %99 = sdiv exact i64 %95, 40
  %100 = load %"class.viz::Surface"*, %"class.viz::Surface"** %92, align 8
  br label %101

101:                                              ; preds = %101, %98
  %102 = phi %"struct.std::__1::pair.343"* [ %93, %98 ], [ %113, %101 ]
  %103 = phi i64 [ %99, %98 ], [ %112, %101 ]
  %104 = lshr i64 %103, 1
  %105 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %102, i64 %104
  %106 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %105, i64 0, i32 0
  %107 = load %"class.viz::Surface"*, %"class.viz::Surface"** %106, align 8
  %108 = icmp ult %"class.viz::Surface"* %107, %100
  %109 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %105, i64 1
  %110 = xor i64 %104, -1
  %111 = add i64 %103, %110
  %112 = select i1 %108, i64 %111, i64 %104
  %113 = select i1 %108, %"struct.std::__1::pair.343"* %109, %"struct.std::__1::pair.343"* %102
  %114 = icmp eq i64 %112, 0
  br i1 %114, label %115, label %101

115:                                              ; preds = %101
  %116 = ptrtoint %"struct.std::__1::pair.343"* %113 to i64
  br label %117

117:                                              ; preds = %115, %89
  %118 = phi i64 [ %116, %115 ], [ %94, %89 ]
  %119 = phi %"struct.std::__1::pair.343"* [ %113, %115 ], [ %93, %89 ]
  %120 = icmp eq %"struct.std::__1::pair.343"* %119, %97
  br i1 %120, label %129, label %121

121:                                              ; preds = %117
  %122 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %119, i64 0, i32 0
  %123 = load %"class.viz::Surface"*, %"class.viz::Surface"** %92, align 8
  %124 = load %"class.viz::Surface"*, %"class.viz::Surface"** %122, align 8
  %125 = icmp ult %"class.viz::Surface"* %123, %124
  br i1 %125, label %129, label %126

126:                                              ; preds = %121
  %127 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %119, i64 1
  %128 = ptrtoint %"struct.std::__1::pair.343"* %127 to i64
  br label %129

129:                                              ; preds = %126, %121, %117
  %130 = phi i64 [ %128, %126 ], [ %118, %117 ], [ %118, %121 ]
  %131 = inttoptr i64 %130 to %"struct.std::__1::pair.343"*
  %132 = icmp eq %"struct.std::__1::pair.343"* %119, %131
  br i1 %132, label %151, label %133

133:                                              ; preds = %129
  %134 = icmp eq %"struct.std::__1::pair.343"* %97, %131
  br i1 %134, label %148, label %135

135:                                              ; preds = %133, %135
  %136 = phi %"struct.std::__1::pair.343"* [ %146, %135 ], [ %119, %133 ]
  %137 = phi %"struct.std::__1::pair.343"* [ %145, %135 ], [ %131, %133 ]
  %138 = bitcast %"struct.std::__1::pair.343"* %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = bitcast %"struct.std::__1::pair.343"* %136 to i64*
  store i64 %139, i64* %140, align 8
  %141 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %137, i64 0, i32 1
  %142 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %136, i64 0, i32 1
  %143 = bitcast %"class.viz::SurfaceId"* %142 to i8*
  %144 = bitcast %"class.viz::SurfaceId"* %141 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %143, i8* align 8 %144, i64 32, i1 false) #12
  %145 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %137, i64 1
  %146 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %136, i64 1
  %147 = icmp eq %"struct.std::__1::pair.343"* %145, %97
  br i1 %147, label %148, label %135

148:                                              ; preds = %135, %133
  %149 = phi %"struct.std::__1::pair.343"* [ %119, %133 ], [ %146, %135 ]
  store %"struct.std::__1::pair.343"* %149, %"struct.std::__1::pair.343"** %18, align 8
  %150 = ptrtoint %"struct.std::__1::pair.343"* %149 to i64
  br label %151

151:                                              ; preds = %129, %148
  %152 = phi i64 [ %90, %129 ], [ %150, %148 ]
  %153 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %91, i64 1
  %154 = icmp eq %"struct.std::__1::pair.343"* %153, %33
  br i1 %154, label %85, label %89

155:                                              ; preds = %165
  %156 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %14, align 8
  br label %157

157:                                              ; preds = %31, %155, %85
  %158 = phi %"struct.std::__1::pair.343"* [ %156, %155 ], [ %87, %85 ], [ %33, %31 ]
  %159 = icmp eq %"struct.std::__1::pair.343"* %158, null
  br i1 %159, label %164, label %160

160:                                              ; preds = %157
  %161 = bitcast %"struct.std::__1::pair.343"* %158 to i8*
  %162 = ptrtoint %"struct.std::__1::pair.343"* %158 to i64
  %163 = bitcast %"struct.std::__1::pair.343"** %15 to i64*
  store i64 %162, i64* %163, align 8
  call void @_ZdlPv(i8* %161) #10
  br label %164

164:                                              ; preds = %12, %157, %160
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #12
  ret void

165:                                              ; preds = %85, %165
  %166 = phi %"struct.std::__1::pair.343"* [ %170, %165 ], [ %86, %85 ]
  %167 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %166, i64 0, i32 0
  %168 = load %"class.viz::Surface"*, %"class.viz::Surface"** %167, align 8
  %169 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %166, i64 0, i32 1
  call void @_ZN3viz7Surface30OnActivationDependencyResolvedERKNS_9SurfaceIdEPNS_22SurfaceAllocationGroupE(%"class.viz::Surface"* %168, %"class.viz::SurfaceId"* dereferenceable(32) %169, %"class.viz::SurfaceAllocationGroup"* %0) #12
  %170 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %166, i64 1
  %171 = icmp eq %"struct.std::__1::pair.343"* %170, %87
  br i1 %171, label %155, label %165
}

declare void @_ZN3viz7Surface30OnChildActivatedForActiveFrameERKNS_9SurfaceIdE(%"class.viz::Surface"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #3

declare void @_ZN3viz7Surface30OnActivationDependencyResolvedERKNS_9SurfaceIdEPNS_22SurfaceAllocationGroupE(%"class.viz::Surface"*, %"class.viz::SurfaceId"* dereferenceable(32), %"class.viz::SurfaceAllocationGroup"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz22SurfaceAllocationGroup26WillNotRegisterNewSurfacesEv(%"class.viz::SurfaceAllocationGroup"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 3
  %3 = getelementptr inbounds %"class.base::flat_map.339", %"class.base::flat_map.339"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %3, align 8
  %5 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %6 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %5, align 8
  %7 = icmp eq %"struct.std::__1::pair.343"* %4, %6
  %8 = bitcast %"class.base::flat_map.339"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false)
  br i1 %7, label %9, label %14

9:                                                ; preds = %14, %1
  %10 = icmp eq %"struct.std::__1::pair.343"* %4, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %9
  %12 = bitcast %"struct.std::__1::pair.343"* %4 to i8*
  tail call void @_ZdlPv(i8* %12) #10
  br label %13

13:                                               ; preds = %9, %11
  ret void

14:                                               ; preds = %1, %14
  %15 = phi %"struct.std::__1::pair.343"* [ %19, %14 ], [ %4, %1 ]
  %16 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %15, i64 0, i32 0
  %17 = load %"class.viz::Surface"*, %"class.viz::Surface"** %16, align 8
  %18 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %15, i64 0, i32 1
  tail call void @_ZN3viz7Surface30OnActivationDependencyResolvedERKNS_9SurfaceIdEPNS_22SurfaceAllocationGroupE(%"class.viz::Surface"* %17, %"class.viz::SurfaceId"* dereferenceable(32) %18, %"class.viz::SurfaceAllocationGroup"* %0) #12
  %19 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %15, i64 1
  %20 = icmp eq %"struct.std::__1::pair.343"* %19, %6
  br i1 %20, label %9, label %14
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz22SurfaceAllocationGroup28AckLastestActiveUnAckedFrameEv(%"class.viz::SurfaceAllocationGroup"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.viz::SurfaceRange", align 8
  %3 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 6
  %4 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %3, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %11

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 6, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %41, label %11

11:                                               ; preds = %7, %1
  %12 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 6, i32 1, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %41, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 6, i32 1, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %41, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 6, i32 1, i32 2, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %27

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup", %"class.viz::SurfaceAllocationGroup"* %0, i64 0, i32 6, i32 1, i32 2, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %41, label %27

27:                                               ; preds = %23, %19
  %28 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %28) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -86, i64 72, i1 false)
  call void @_ZN3viz12SurfaceRangeC1ERKNS_9SurfaceIdE(%"class.viz::SurfaceRange"* nonnull %2, %"class.viz::SurfaceId"* dereferenceable(32) %3) #12
  %29 = call %"class.viz::Surface"* @_ZNK3viz22SurfaceAllocationGroup30FindLatestActiveSurfaceInRangeERKNS_12SurfaceRangeE(%"class.viz::SurfaceAllocationGroup"* %0, %"class.viz::SurfaceRange"* nonnull dereferenceable(72) %2)
  %30 = icmp eq %"class.viz::Surface"* %29, null
  br i1 %30, label %40, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %29, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %33 = load i8, i8* %32, align 8, !range !2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %40, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %29, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 3
  %37 = load i8, i8* %36, align 1, !range !2
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %35
  call void @_ZN3viz7Surface15SendAckToClientEv(%"class.viz::Surface"* nonnull %29) #12
  br label %40

40:                                               ; preds = %31, %27, %39, %35
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %28) #12
  br label %41

41:                                               ; preds = %23, %11, %15, %7, %40
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN3viz12SurfaceRangeC1ERKNS_9SurfaceIdE(%"class.viz::SurfaceRange"*, %"class.viz::SurfaceId"* dereferenceable(32)) unnamed_addr #3

declare void @_ZN3viz7Surface15SendAckToClientEv(%"class.viz::Surface"*) local_unnamed_addr #3

declare void @_ZN3viz14SurfaceManager40SetAllocationGroupsNeedGarbageCollectionEv(%"class.viz::SurfaceManager"*) local_unnamed_addr #3

declare void @_ZN3viz7Surface29SetIsFallbackAndMaybeActivateEv(%"class.viz::Surface"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.std::__1::pair.343"* @_ZNSt3__16vectorINS_4pairIPN3viz7SurfaceENS2_9SurfaceIdEEENS_9allocatorIS6_EEE7emplaceIJRKS4_S5_EEENS_11__wrap_iterIPS6_EENSD_IPKS6_EEDpOT_(%"class.std::__1::vector.341"*, %"struct.std::__1::pair.343"*, %"class.viz::Surface"** dereferenceable(8), %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca [16 x i8], align 8
  %6 = alloca %"struct.std::__1::__split_buffer.360", align 8
  %7 = ptrtoint %"struct.std::__1::pair.343"* %1 to i64
  %8 = getelementptr inbounds %"class.std::__1::vector.341", %"class.std::__1::vector.341"* %0, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::__1::vector.341", %"class.std::__1::vector.341"* %0, i64 0, i32 0, i32 1
  %10 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.341", %"class.std::__1::vector.341"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %12 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %11, align 8
  %13 = icmp ult %"struct.std::__1::pair.343"* %10, %12
  %14 = ptrtoint %"struct.std::__1::pair.343"* %10 to i64
  %15 = ptrtoint %"struct.std::__1::pair.343"* %12 to i64
  br i1 %13, label %16, label %105

16:                                               ; preds = %4
  %17 = icmp eq %"struct.std::__1::pair.343"* %10, %1
  br i1 %17, label %18, label %41

18:                                               ; preds = %16
  %19 = bitcast %"class.viz::Surface"** %2 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"struct.std::__1::pair.343"* %1 to i64*
  store i64 %20, i64* %21, align 8
  %22 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %1, i64 0, i32 1, i32 0, i32 0
  %23 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %3, i64 0, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  store i32 %24, i32* %22, align 4
  %25 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %1, i64 0, i32 1, i32 0, i32 1
  %26 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %3, i64 0, i32 0, i32 1
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %25, align 4
  %28 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %1, i64 0, i32 1, i32 1, i32 0
  %29 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %3, i64 0, i32 1, i32 0
  %30 = load i32, i32* %29, align 8
  store i32 %30, i32* %28, align 8
  %31 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %1, i64 0, i32 1, i32 1, i32 1
  %32 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %3, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  store i32 %33, i32* %31, align 4
  %34 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %1, i64 0, i32 1, i32 1, i32 2
  %35 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %3, i64 0, i32 1, i32 2
  %36 = bitcast %"class.base::UnguessableToken"* %34 to i8*
  %37 = bitcast %"class.base::UnguessableToken"* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 16, i1 false) #12
  %38 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %1, i64 1
  %39 = ptrtoint %"struct.std::__1::pair.343"* %38 to i64
  %40 = bitcast %"struct.std::__1::pair.343"** %9 to i64*
  store i64 %39, i64* %40, align 8
  br label %252

41:                                               ; preds = %16
  %42 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %42)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 -86, i64 16, i1 false)
  %43 = bitcast %"class.viz::Surface"** %2 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = bitcast %"class.viz::SurfaceId"* %3 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 4
  %47 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %3, i64 0, i32 1, i32 2
  %48 = bitcast %"class.base::UnguessableToken"* %47 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %42, i8* align 8 %48, i64 16, i1 false)
  %49 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %1, i64 1
  %50 = ptrtoint %"struct.std::__1::pair.343"* %49 to i64
  %51 = sub i64 %14, %50
  %52 = sdiv exact i64 %51, 40
  %53 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %1, i64 %52
  %54 = bitcast %"struct.std::__1::pair.343"** %9 to i64*
  %55 = icmp ult %"struct.std::__1::pair.343"* %53, %10
  br i1 %55, label %74, label %58

56:                                               ; preds = %74
  %57 = ptrtoint %"struct.std::__1::pair.343"* %97 to i64
  br label %58

58:                                               ; preds = %56, %41
  %59 = phi i64 [ %57, %56 ], [ %14, %41 ]
  store i64 %59, i64* %54, align 8
  %60 = icmp eq i64 %51, 0
  br i1 %60, label %99, label %61

61:                                               ; preds = %58, %61
  %62 = phi %"struct.std::__1::pair.343"* [ %65, %61 ], [ %10, %58 ]
  %63 = phi %"struct.std::__1::pair.343"* [ %64, %61 ], [ %53, %58 ]
  %64 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %63, i64 -1
  %65 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %62, i64 -1
  %66 = bitcast %"struct.std::__1::pair.343"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %"struct.std::__1::pair.343"* %65 to i64*
  store i64 %67, i64* %68, align 8
  %69 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %63, i64 -1, i32 1
  %70 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %62, i64 -1, i32 1
  %71 = bitcast %"class.viz::SurfaceId"* %70 to i8*
  %72 = bitcast %"class.viz::SurfaceId"* %69 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* align 8 %72, i64 32, i1 false) #12
  %73 = icmp eq %"struct.std::__1::pair.343"* %64, %1
  br i1 %73, label %99, label %61

74:                                               ; preds = %41, %74
  %75 = phi %"struct.std::__1::pair.343"* [ %97, %74 ], [ %10, %41 ]
  %76 = phi %"struct.std::__1::pair.343"* [ %96, %74 ], [ %53, %41 ]
  %77 = bitcast %"struct.std::__1::pair.343"* %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = bitcast %"struct.std::__1::pair.343"* %75 to i64*
  store i64 %78, i64* %79, align 8
  %80 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %75, i64 0, i32 1, i32 0, i32 0
  %81 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %76, i64 0, i32 1, i32 0, i32 0
  %82 = load i32, i32* %81, align 4
  store i32 %82, i32* %80, align 4
  %83 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %75, i64 0, i32 1, i32 0, i32 1
  %84 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %76, i64 0, i32 1, i32 0, i32 1
  %85 = load i32, i32* %84, align 4
  store i32 %85, i32* %83, align 4
  %86 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %75, i64 0, i32 1, i32 1, i32 0
  %87 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %76, i64 0, i32 1, i32 1, i32 0
  %88 = load i32, i32* %87, align 8
  store i32 %88, i32* %86, align 8
  %89 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %75, i64 0, i32 1, i32 1, i32 1
  %90 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %76, i64 0, i32 1, i32 1, i32 1
  %91 = load i32, i32* %90, align 4
  store i32 %91, i32* %89, align 4
  %92 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %75, i64 0, i32 1, i32 1, i32 2
  %93 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %76, i64 0, i32 1, i32 1, i32 2
  %94 = bitcast %"class.base::UnguessableToken"* %92 to i8*
  %95 = bitcast %"class.base::UnguessableToken"* %93 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 16, i1 false) #12
  %96 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %76, i64 1
  %97 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %75, i64 1
  %98 = icmp ult %"struct.std::__1::pair.343"* %96, %10
  br i1 %98, label %74, label %56

99:                                               ; preds = %61, %58
  %100 = bitcast %"struct.std::__1::pair.343"* %1 to i64*
  store i64 %44, i64* %100, align 8
  %101 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %1, i64 0, i32 1, i32 0, i32 0
  %102 = bitcast i32* %101 to <4 x i32>*
  store <4 x i32> %46, <4 x i32>* %102, align 8
  %103 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %1, i64 0, i32 1, i32 1, i32 2
  %104 = bitcast %"class.base::UnguessableToken"* %103 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* nonnull align 8 %42, i64 16, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %42)
  br label %252

105:                                              ; preds = %4
  %106 = getelementptr inbounds %"class.std::__1::vector.341", %"class.std::__1::vector.341"* %0, i64 0, i32 0, i32 2
  %107 = bitcast %"struct.std::__1::__split_buffer.360"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %107) #12
  %108 = getelementptr inbounds %"struct.std::__1::__split_buffer.360", %"struct.std::__1::__split_buffer.360"* %6, i64 0, i32 0
  %109 = getelementptr inbounds %"struct.std::__1::__split_buffer.360", %"struct.std::__1::__split_buffer.360"* %6, i64 0, i32 1
  %110 = getelementptr inbounds %"struct.std::__1::__split_buffer.360", %"struct.std::__1::__split_buffer.360"* %6, i64 0, i32 2
  %111 = getelementptr inbounds %"struct.std::__1::__split_buffer.360", %"struct.std::__1::__split_buffer.360"* %6, i64 0, i32 3, i32 0, i32 0
  %112 = getelementptr inbounds %"struct.std::__1::__split_buffer.360", %"struct.std::__1::__split_buffer.360"* %6, i64 0, i32 3, i32 1, i32 0
  %113 = bitcast %"struct.std::__1::pair.343"** %9 to i64*
  %114 = bitcast %"class.std::__1::vector.341"* %0 to i64*
  %115 = bitcast %"struct.std::__1::__split_buffer.360"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %115, i8 -86, i64 40, i1 false)
  %116 = load i64, i64* %114, align 8
  %117 = sub i64 %14, %116
  %118 = sdiv exact i64 %117, 40
  %119 = add nsw i64 %118, 1
  %120 = icmp ugt i64 %119, 461168601842738790
  br i1 %120, label %121, label %123

121:                                              ; preds = %105
  %122 = bitcast %"class.std::__1::vector.341"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %122) #11
  unreachable

123:                                              ; preds = %105
  %124 = bitcast %"struct.std::__1::pair.343"** %11 to i64*
  %125 = sub i64 %15, %116
  %126 = sdiv exact i64 %125, 40
  %127 = icmp ult i64 %126, 230584300921369395
  br i1 %127, label %132, label %128

128:                                              ; preds = %123
  %129 = sub i64 %7, %116
  %130 = sdiv exact i64 %129, 40
  store %"struct.std::__1::pair.343"* null, %"struct.std::__1::pair.343"** %111, align 8
  %131 = bitcast %"class.std::__1::allocator.347"** %112 to %"class.std::__1::__compressed_pair.344"**
  store %"class.std::__1::__compressed_pair.344"* %106, %"class.std::__1::__compressed_pair.344"** %131, align 8
  br label %140

132:                                              ; preds = %123
  %133 = shl nsw i64 %126, 1
  %134 = icmp ult i64 %133, %119
  %135 = select i1 %134, i64 %119, i64 %133
  %136 = sub i64 %7, %116
  %137 = sdiv exact i64 %136, 40
  store %"struct.std::__1::pair.343"* null, %"struct.std::__1::pair.343"** %111, align 8
  %138 = bitcast %"class.std::__1::allocator.347"** %112 to %"class.std::__1::__compressed_pair.344"**
  store %"class.std::__1::__compressed_pair.344"* %106, %"class.std::__1::__compressed_pair.344"** %138, align 8
  %139 = icmp eq i64 %135, 0
  br i1 %139, label %146, label %140

140:                                              ; preds = %132, %128
  %141 = phi i64 [ %130, %128 ], [ %137, %132 ]
  %142 = phi i64 [ 461168601842738790, %128 ], [ %135, %132 ]
  %143 = mul i64 %142, 40
  %144 = tail call i8* @_Znwm(i64 %143) #10
  %145 = bitcast i8* %144 to %"struct.std::__1::pair.343"*
  br label %146

146:                                              ; preds = %132, %140
  %147 = phi i64 [ %141, %140 ], [ %137, %132 ]
  %148 = phi i64 [ %142, %140 ], [ 0, %132 ]
  %149 = phi %"struct.std::__1::pair.343"* [ %145, %140 ], [ null, %132 ]
  store %"struct.std::__1::pair.343"* %149, %"struct.std::__1::pair.343"** %108, align 8
  %150 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %149, i64 %147
  store %"struct.std::__1::pair.343"* %150, %"struct.std::__1::pair.343"** %110, align 8
  store %"struct.std::__1::pair.343"* %150, %"struct.std::__1::pair.343"** %109, align 8
  %151 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %149, i64 %148
  store %"struct.std::__1::pair.343"* %151, %"struct.std::__1::pair.343"** %111, align 8
  call void @_ZNSt3__114__split_bufferINS_4pairIPN3viz7SurfaceENS2_9SurfaceIdEEERNS_9allocatorIS6_EEE12emplace_backIJRKS4_S5_EEEvDpOT_(%"struct.std::__1::__split_buffer.360"* nonnull %6, %"class.viz::Surface"** dereferenceable(8) %2, %"class.viz::SurfaceId"* dereferenceable(32) %3)
  %152 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %109, align 8
  %153 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %8, align 8
  %154 = icmp eq %"struct.std::__1::pair.343"* %153, %1
  br i1 %154, label %182, label %155

155:                                              ; preds = %146, %155
  %156 = phi %"struct.std::__1::pair.343"* [ %180, %155 ], [ %152, %146 ]
  %157 = phi %"struct.std::__1::pair.343"* [ %159, %155 ], [ %1, %146 ]
  %158 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %156, i64 -1
  %159 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %157, i64 -1
  %160 = bitcast %"struct.std::__1::pair.343"* %159 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = bitcast %"struct.std::__1::pair.343"* %158 to i64*
  store i64 %161, i64* %162, align 8
  %163 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %156, i64 -1, i32 1, i32 0, i32 0
  %164 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %157, i64 -1, i32 1, i32 0, i32 0
  %165 = load i32, i32* %164, align 4
  store i32 %165, i32* %163, align 4
  %166 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %156, i64 -1, i32 1, i32 0, i32 1
  %167 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %157, i64 -1, i32 1, i32 0, i32 1
  %168 = load i32, i32* %167, align 4
  store i32 %168, i32* %166, align 4
  %169 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %156, i64 -1, i32 1, i32 1, i32 0
  %170 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %157, i64 -1, i32 1, i32 1, i32 0
  %171 = load i32, i32* %170, align 8
  store i32 %171, i32* %169, align 8
  %172 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %156, i64 -1, i32 1, i32 1, i32 1
  %173 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %157, i64 -1, i32 1, i32 1, i32 1
  %174 = load i32, i32* %173, align 4
  store i32 %174, i32* %172, align 4
  %175 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %156, i64 -1, i32 1, i32 1, i32 2
  %176 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %157, i64 -1, i32 1, i32 1, i32 2
  %177 = bitcast %"class.base::UnguessableToken"* %175 to i8*
  %178 = bitcast %"class.base::UnguessableToken"* %176 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %177, i8* align 8 %178, i64 16, i1 false) #12
  %179 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %109, align 8
  %180 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %179, i64 -1
  store %"struct.std::__1::pair.343"* %180, %"struct.std::__1::pair.343"** %109, align 8
  %181 = icmp eq %"struct.std::__1::pair.343"* %159, %153
  br i1 %181, label %182, label %155

182:                                              ; preds = %155, %146
  %183 = phi %"struct.std::__1::pair.343"* [ %152, %146 ], [ %180, %155 ]
  %184 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %9, align 8
  %185 = icmp eq %"struct.std::__1::pair.343"* %184, %1
  br i1 %185, label %186, label %192

186:                                              ; preds = %182
  %187 = ptrtoint %"struct.std::__1::pair.343"* %184 to i64
  %188 = ptrtoint %"struct.std::__1::pair.343"* %183 to i64
  %189 = bitcast %"struct.std::__1::pair.343"** %109 to i64*
  %190 = bitcast %"struct.std::__1::pair.343"** %110 to i64*
  %191 = load i64, i64* %190, align 8
  br label %226

192:                                              ; preds = %182
  %193 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %110, align 8
  br label %194

194:                                              ; preds = %194, %192
  %195 = phi %"struct.std::__1::pair.343"* [ %218, %194 ], [ %193, %192 ]
  %196 = phi %"struct.std::__1::pair.343"* [ %216, %194 ], [ %1, %192 ]
  %197 = bitcast %"struct.std::__1::pair.343"* %196 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = bitcast %"struct.std::__1::pair.343"* %195 to i64*
  store i64 %198, i64* %199, align 8
  %200 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %195, i64 0, i32 1, i32 0, i32 0
  %201 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %196, i64 0, i32 1, i32 0, i32 0
  %202 = load i32, i32* %201, align 4
  store i32 %202, i32* %200, align 4
  %203 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %195, i64 0, i32 1, i32 0, i32 1
  %204 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %196, i64 0, i32 1, i32 0, i32 1
  %205 = load i32, i32* %204, align 4
  store i32 %205, i32* %203, align 4
  %206 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %195, i64 0, i32 1, i32 1, i32 0
  %207 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %196, i64 0, i32 1, i32 1, i32 0
  %208 = load i32, i32* %207, align 8
  store i32 %208, i32* %206, align 8
  %209 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %195, i64 0, i32 1, i32 1, i32 1
  %210 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %196, i64 0, i32 1, i32 1, i32 1
  %211 = load i32, i32* %210, align 4
  store i32 %211, i32* %209, align 4
  %212 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %195, i64 0, i32 1, i32 1, i32 2
  %213 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %196, i64 0, i32 1, i32 1, i32 2
  %214 = bitcast %"class.base::UnguessableToken"* %212 to i8*
  %215 = bitcast %"class.base::UnguessableToken"* %213 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %214, i8* align 8 %215, i64 16, i1 false) #12
  %216 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %196, i64 1
  %217 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %110, align 8
  %218 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %217, i64 1
  store %"struct.std::__1::pair.343"* %218, %"struct.std::__1::pair.343"** %110, align 8
  %219 = icmp eq %"struct.std::__1::pair.343"* %216, %184
  br i1 %219, label %220, label %194

220:                                              ; preds = %194
  %221 = ptrtoint %"struct.std::__1::pair.343"* %218 to i64
  %222 = bitcast %"struct.std::__1::pair.343"** %109 to i64*
  %223 = load i64, i64* %222, align 8
  %224 = load i64, i64* %113, align 8
  %225 = bitcast %"struct.std::__1::pair.343"** %110 to i64*
  br label %226

226:                                              ; preds = %186, %220
  %227 = phi i64* [ %190, %186 ], [ %225, %220 ]
  %228 = phi i64 [ %191, %186 ], [ %221, %220 ]
  %229 = phi i64 [ %187, %186 ], [ %224, %220 ]
  %230 = phi i64* [ %189, %186 ], [ %222, %220 ]
  %231 = phi i64 [ %188, %186 ], [ %223, %220 ]
  %232 = load i64, i64* %114, align 8
  store i64 %231, i64* %114, align 8
  store i64 %232, i64* %230, align 8
  store i64 %228, i64* %113, align 8
  store i64 %229, i64* %227, align 8
  %233 = load i64, i64* %124, align 8
  %234 = bitcast %"struct.std::__1::pair.343"** %111 to i64*
  %235 = load i64, i64* %234, align 8
  store i64 %235, i64* %124, align 8
  store i64 %233, i64* %234, align 8
  %236 = bitcast %"struct.std::__1::__split_buffer.360"* %6 to i64*
  store i64 %232, i64* %236, align 8
  %237 = inttoptr i64 %232 to %"struct.std::__1::pair.343"*
  %238 = inttoptr i64 %229 to %"struct.std::__1::pair.343"*
  %239 = icmp eq %"struct.std::__1::pair.343"* %238, %237
  br i1 %239, label %247, label %240

240:                                              ; preds = %226
  %241 = getelementptr %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %238, i64 -1, i32 0
  %242 = ptrtoint %"class.viz::Surface"** %241 to i64
  %243 = sub i64 %242, %232
  %244 = udiv i64 %243, 40
  %245 = xor i64 %244, -1
  %246 = getelementptr %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %238, i64 %245
  store %"struct.std::__1::pair.343"* %246, %"struct.std::__1::pair.343"** %110, align 8
  br label %247

247:                                              ; preds = %240, %226
  %248 = icmp eq i64 %232, 0
  br i1 %248, label %251, label %249

249:                                              ; preds = %247
  %250 = inttoptr i64 %232 to i8*
  call void @_ZdlPv(i8* %250) #10
  br label %251

251:                                              ; preds = %247, %249
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %107) #12
  br label %252

252:                                              ; preds = %18, %99, %251
  %253 = phi %"struct.std::__1::pair.343"* [ %1, %18 ], [ %1, %99 ], [ %152, %251 ]
  ret %"struct.std::__1::pair.343"* %253
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferINS_4pairIPN3viz7SurfaceENS2_9SurfaceIdEEERNS_9allocatorIS6_EEE12emplace_backIJRKS4_S5_EEEvDpOT_(%"struct.std::__1::__split_buffer.360"*, %"class.viz::Surface"** dereferenceable(8), %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.std::__1::__split_buffer.360", %"struct.std::__1::__split_buffer.360"* %0, i64 0, i32 2
  %5 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %4, align 8
  %6 = getelementptr inbounds %"struct.std::__1::__split_buffer.360", %"struct.std::__1::__split_buffer.360"* %0, i64 0, i32 3, i32 0, i32 0
  %7 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %6, align 8
  %8 = icmp eq %"struct.std::__1::pair.343"* %5, %7
  %9 = ptrtoint %"struct.std::__1::pair.343"* %7 to i64
  br i1 %8, label %10, label %110

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer.360", %"struct.std::__1::__split_buffer.360"* %0, i64 0, i32 1
  %12 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer.360", %"struct.std::__1::__split_buffer.360"* %0, i64 0, i32 0
  %14 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %13, align 8
  %15 = icmp ugt %"struct.std::__1::pair.343"* %12, %14
  %16 = ptrtoint %"struct.std::__1::pair.343"* %14 to i64
  br i1 %15, label %17, label %44

17:                                               ; preds = %10
  %18 = ptrtoint %"struct.std::__1::pair.343"* %12 to i64
  %19 = sub i64 %18, %16
  %20 = sdiv exact i64 %19, 40
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %12, i64 %22
  %24 = icmp eq %"struct.std::__1::pair.343"* %12, %5
  br i1 %24, label %40, label %25

25:                                               ; preds = %17, %25
  %26 = phi %"struct.std::__1::pair.343"* [ %36, %25 ], [ %23, %17 ]
  %27 = phi %"struct.std::__1::pair.343"* [ %35, %25 ], [ %12, %17 ]
  %28 = bitcast %"struct.std::__1::pair.343"* %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %"struct.std::__1::pair.343"* %26 to i64*
  store i64 %29, i64* %30, align 8
  %31 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %27, i64 0, i32 1
  %32 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %26, i64 0, i32 1
  %33 = bitcast %"class.viz::SurfaceId"* %32 to i8*
  %34 = bitcast %"class.viz::SurfaceId"* %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 32, i1 false) #12
  %35 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %27, i64 1
  %36 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %26, i64 1
  %37 = icmp eq %"struct.std::__1::pair.343"* %35, %5
  br i1 %37, label %38, label %25

38:                                               ; preds = %25
  %39 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %11, align 8
  br label %40

40:                                               ; preds = %38, %17
  %41 = phi %"struct.std::__1::pair.343"* [ %5, %17 ], [ %39, %38 ]
  %42 = phi %"struct.std::__1::pair.343"* [ %23, %17 ], [ %36, %38 ]
  store %"struct.std::__1::pair.343"* %42, %"struct.std::__1::pair.343"** %4, align 8
  %43 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %41, i64 %22
  store %"struct.std::__1::pair.343"* %43, %"struct.std::__1::pair.343"** %11, align 8
  br label %110

44:                                               ; preds = %10
  %45 = bitcast %"struct.std::__1::pair.343"** %6 to i64*
  %46 = bitcast %"struct.std::__1::__split_buffer.360"* %0 to i64*
  %47 = sub i64 %9, %16
  %48 = sdiv exact i64 %47, 40
  %49 = shl nsw i64 %48, 1
  %50 = icmp eq i64 %47, 0
  %51 = select i1 %50, i64 1, i64 %49
  %52 = icmp ugt i64 %51, 461168601842738790
  br i1 %52, label %53, label %54

53:                                               ; preds = %44
  tail call void @abort() #11
  unreachable

54:                                               ; preds = %44
  %55 = lshr i64 %51, 2
  %56 = mul i64 %51, 40
  %57 = tail call i8* @_Znwm(i64 %56) #10
  %58 = bitcast i8* %57 to %"struct.std::__1::pair.343"*
  %59 = ptrtoint i8* %57 to i64
  %60 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %58, i64 %55
  %61 = ptrtoint %"struct.std::__1::pair.343"* %60 to i64
  %62 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %58, i64 %51
  %63 = ptrtoint %"struct.std::__1::pair.343"* %62 to i64
  %64 = ptrtoint %"struct.std::__1::pair.343"* %12 to i64
  %65 = ptrtoint %"struct.std::__1::pair.343"* %5 to i64
  %66 = sub i64 %65, %64
  %67 = sdiv exact i64 %66, 40
  %68 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %60, i64 %67
  %69 = icmp eq i64 %66, 0
  br i1 %69, label %100, label %70

70:                                               ; preds = %54, %70
  %71 = phi %"struct.std::__1::pair.343"* [ %93, %70 ], [ %60, %54 ]
  %72 = phi i64 [ %94, %70 ], [ %61, %54 ]
  %73 = phi %"struct.std::__1::pair.343"* [ %95, %70 ], [ %12, %54 ]
  %74 = bitcast %"struct.std::__1::pair.343"* %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %72 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %71, i64 0, i32 1, i32 0, i32 0
  %78 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %73, i64 0, i32 1, i32 0, i32 0
  %79 = load i32, i32* %78, align 4
  store i32 %79, i32* %77, align 4
  %80 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %71, i64 0, i32 1, i32 0, i32 1
  %81 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %73, i64 0, i32 1, i32 0, i32 1
  %82 = load i32, i32* %81, align 4
  store i32 %82, i32* %80, align 4
  %83 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %71, i64 0, i32 1, i32 1, i32 0
  %84 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %73, i64 0, i32 1, i32 1, i32 0
  %85 = load i32, i32* %84, align 8
  store i32 %85, i32* %83, align 8
  %86 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %71, i64 0, i32 1, i32 1, i32 1
  %87 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %73, i64 0, i32 1, i32 1, i32 1
  %88 = load i32, i32* %87, align 4
  store i32 %88, i32* %86, align 4
  %89 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %71, i64 0, i32 1, i32 1, i32 2
  %90 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %73, i64 0, i32 1, i32 1, i32 2
  %91 = bitcast %"class.base::UnguessableToken"* %89 to i8*
  %92 = bitcast %"class.base::UnguessableToken"* %90 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %92, i64 16, i1 false) #12
  %93 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %71, i64 1
  %94 = ptrtoint %"struct.std::__1::pair.343"* %93 to i64
  %95 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %73, i64 1
  %96 = icmp eq %"struct.std::__1::pair.343"* %68, %93
  br i1 %96, label %97, label %70

97:                                               ; preds = %70
  %98 = ptrtoint %"struct.std::__1::pair.343"* %68 to i64
  %99 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %13, align 8
  br label %100

100:                                              ; preds = %54, %97
  %101 = phi %"struct.std::__1::pair.343"* [ %99, %97 ], [ %14, %54 ]
  %102 = phi i64 [ %98, %97 ], [ %61, %54 ]
  store i64 %59, i64* %46, align 8
  %103 = bitcast %"struct.std::__1::pair.343"** %11 to i64*
  store i64 %61, i64* %103, align 8
  %104 = bitcast %"struct.std::__1::pair.343"** %4 to i64*
  store i64 %102, i64* %104, align 8
  store i64 %63, i64* %45, align 8
  %105 = icmp eq %"struct.std::__1::pair.343"* %101, null
  %106 = inttoptr i64 %102 to %"struct.std::__1::pair.343"*
  br i1 %105, label %110, label %107

107:                                              ; preds = %100
  %108 = bitcast %"struct.std::__1::pair.343"* %101 to i8*
  tail call void @_ZdlPv(i8* %108) #10
  %109 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %4, align 8
  br label %110

110:                                              ; preds = %107, %100, %40, %3
  %111 = phi %"struct.std::__1::pair.343"* [ %109, %107 ], [ %106, %100 ], [ %42, %40 ], [ %5, %3 ]
  %112 = bitcast %"class.viz::Surface"** %1 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"struct.std::__1::pair.343"* %111 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %111, i64 0, i32 1, i32 0, i32 0
  %116 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 0, i32 0
  %117 = load i32, i32* %116, align 4
  store i32 %117, i32* %115, align 4
  %118 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %111, i64 0, i32 1, i32 0, i32 1
  %119 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 0, i32 1
  %120 = load i32, i32* %119, align 4
  store i32 %120, i32* %118, align 4
  %121 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %111, i64 0, i32 1, i32 1, i32 0
  %122 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 1, i32 0
  %123 = load i32, i32* %122, align 8
  store i32 %123, i32* %121, align 8
  %124 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %111, i64 0, i32 1, i32 1, i32 1
  %125 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 1, i32 1
  %126 = load i32, i32* %125, align 4
  store i32 %126, i32* %124, align 4
  %127 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %111, i64 0, i32 1, i32 1, i32 2
  %128 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 1, i32 2
  %129 = bitcast %"class.base::UnguessableToken"* %127 to i8*
  %130 = bitcast %"class.base::UnguessableToken"* %128 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %129, i8* align 8 %130, i64 16, i1 false) #12
  %131 = load %"struct.std::__1::pair.343"*, %"struct.std::__1::pair.343"** %4, align 8
  %132 = getelementptr inbounds %"struct.std::__1::pair.343", %"struct.std::__1::pair.343"* %131, i64 1
  store %"struct.std::__1::pair.343"* %132, %"struct.std::__1::pair.343"** %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.viz::Surface"** @_ZNSt3__16vectorIPN3viz7SurfaceENS_9allocatorIS3_EEE7emplaceIJRKS3_EEENS_11__wrap_iterIPS3_EENSA_IPS8_EEDpOT_(%"class.std::__1::vector"*, %"class.viz::Surface"**, %"class.viz::Surface"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"class.viz::Surface"** %1 to i64
  %5 = alloca %"struct.std::__1::__split_buffer", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %8 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %9, align 8
  %11 = icmp ult %"class.viz::Surface"** %8, %10
  %12 = ptrtoint %"class.viz::Surface"** %8 to i64
  %13 = ptrtoint %"class.viz::Surface"** %10 to i64
  br i1 %11, label %14, label %163

14:                                               ; preds = %3
  %15 = icmp eq %"class.viz::Surface"** %8, %1
  %16 = bitcast %"class.viz::Surface"** %2 to i64*
  %17 = load i64, i64* %16, align 8
  br i1 %15, label %18, label %23

18:                                               ; preds = %14
  %19 = bitcast %"class.viz::Surface"** %1 to i64*
  store i64 %17, i64* %19, align 8
  %20 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %1, i64 1
  %21 = ptrtoint %"class.viz::Surface"** %20 to i64
  %22 = bitcast %"class.viz::Surface"*** %7 to i64*
  store i64 %21, i64* %22, align 8
  br label %319

23:                                               ; preds = %14
  %24 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %1, i64 1
  %25 = ptrtoint %"class.viz::Surface"** %24 to i64
  %26 = sub i64 %12, %25
  %27 = ashr exact i64 %26, 3
  %28 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %1, i64 %27
  %29 = bitcast %"class.viz::Surface"*** %7 to i64*
  %30 = icmp ult %"class.viz::Surface"** %28, %8
  br i1 %30, label %31, label %144

31:                                               ; preds = %23
  %32 = sub nsw i64 0, %27
  %33 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %8, i64 %32
  %34 = bitcast %"class.viz::Surface"** %33 to i8*
  %35 = xor i64 %4, -1
  %36 = getelementptr i8, i8* %34, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = lshr i64 %37, 3
  %39 = add nuw nsw i64 %38, 1
  %40 = icmp ult i64 %39, 4
  br i1 %40, label %41, label %44

41:                                               ; preds = %139, %44, %31
  %42 = phi %"class.viz::Surface"** [ %8, %44 ], [ %8, %31 ], [ %62, %139 ]
  %43 = phi %"class.viz::Surface"** [ %28, %44 ], [ %28, %31 ], [ %63, %139 ]
  br label %152

44:                                               ; preds = %31
  %45 = sub nsw i64 0, %27
  %46 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %8, i64 %45
  %47 = bitcast %"class.viz::Surface"** %46 to i8*
  %48 = xor i64 %4, -1
  %49 = getelementptr i8, i8* %47, i64 %48
  %50 = ptrtoint i8* %49 to i64
  %51 = lshr i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %8, i64 %52
  %54 = add nsw i64 %27, %51
  %55 = add nsw i64 %54, 1
  %56 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %1, i64 %55
  %57 = icmp ult %"class.viz::Surface"** %8, %56
  %58 = icmp ult %"class.viz::Surface"** %28, %53
  %59 = and i1 %57, %58
  br i1 %59, label %41, label %60

60:                                               ; preds = %44
  %61 = and i64 %39, 4611686018427387900
  %62 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %8, i64 %61
  %63 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %28, i64 %61
  %64 = add nsw i64 %61, -4
  %65 = lshr exact i64 %64, 2
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 3
  %68 = icmp ult i64 %64, 12
  br i1 %68, label %120, label %69

69:                                               ; preds = %60
  %70 = sub nsw i64 %66, %67
  br label %71

71:                                               ; preds = %71, %69
  %72 = phi i64 [ 0, %69 ], [ %117, %71 ]
  %73 = phi i64 [ %70, %69 ], [ %118, %71 ]
  %74 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %8, i64 %72
  %75 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %28, i64 %72
  %76 = bitcast %"class.viz::Surface"** %75 to <2 x i64>*
  %77 = load <2 x i64>, <2 x i64>* %76, align 8, !alias.scope !4
  %78 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %75, i64 2
  %79 = bitcast %"class.viz::Surface"** %78 to <2 x i64>*
  %80 = load <2 x i64>, <2 x i64>* %79, align 8, !alias.scope !4
  %81 = bitcast %"class.viz::Surface"** %74 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %81, align 8, !alias.scope !7, !noalias !4
  %82 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %74, i64 2
  %83 = bitcast %"class.viz::Surface"** %82 to <2 x i64>*
  store <2 x i64> %80, <2 x i64>* %83, align 8, !alias.scope !7, !noalias !4
  %84 = or i64 %72, 4
  %85 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %8, i64 %84
  %86 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %28, i64 %84
  %87 = bitcast %"class.viz::Surface"** %86 to <2 x i64>*
  %88 = load <2 x i64>, <2 x i64>* %87, align 8, !alias.scope !4
  %89 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %86, i64 2
  %90 = bitcast %"class.viz::Surface"** %89 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 8, !alias.scope !4
  %92 = bitcast %"class.viz::Surface"** %85 to <2 x i64>*
  store <2 x i64> %88, <2 x i64>* %92, align 8, !alias.scope !7, !noalias !4
  %93 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %85, i64 2
  %94 = bitcast %"class.viz::Surface"** %93 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %94, align 8, !alias.scope !7, !noalias !4
  %95 = or i64 %72, 8
  %96 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %8, i64 %95
  %97 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %28, i64 %95
  %98 = bitcast %"class.viz::Surface"** %97 to <2 x i64>*
  %99 = load <2 x i64>, <2 x i64>* %98, align 8, !alias.scope !4
  %100 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %97, i64 2
  %101 = bitcast %"class.viz::Surface"** %100 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8, !alias.scope !4
  %103 = bitcast %"class.viz::Surface"** %96 to <2 x i64>*
  store <2 x i64> %99, <2 x i64>* %103, align 8, !alias.scope !7, !noalias !4
  %104 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %96, i64 2
  %105 = bitcast %"class.viz::Surface"** %104 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %105, align 8, !alias.scope !7, !noalias !4
  %106 = or i64 %72, 12
  %107 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %8, i64 %106
  %108 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %28, i64 %106
  %109 = bitcast %"class.viz::Surface"** %108 to <2 x i64>*
  %110 = load <2 x i64>, <2 x i64>* %109, align 8, !alias.scope !4
  %111 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %108, i64 2
  %112 = bitcast %"class.viz::Surface"** %111 to <2 x i64>*
  %113 = load <2 x i64>, <2 x i64>* %112, align 8, !alias.scope !4
  %114 = bitcast %"class.viz::Surface"** %107 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %114, align 8, !alias.scope !7, !noalias !4
  %115 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %107, i64 2
  %116 = bitcast %"class.viz::Surface"** %115 to <2 x i64>*
  store <2 x i64> %113, <2 x i64>* %116, align 8, !alias.scope !7, !noalias !4
  %117 = add i64 %72, 16
  %118 = add i64 %73, -4
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %71, !llvm.loop !9

120:                                              ; preds = %71, %60
  %121 = phi i64 [ 0, %60 ], [ %117, %71 ]
  %122 = icmp eq i64 %67, 0
  br i1 %122, label %139, label %123

123:                                              ; preds = %120, %123
  %124 = phi i64 [ %136, %123 ], [ %121, %120 ]
  %125 = phi i64 [ %137, %123 ], [ %67, %120 ]
  %126 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %8, i64 %124
  %127 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %28, i64 %124
  %128 = bitcast %"class.viz::Surface"** %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 8, !alias.scope !4
  %130 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %127, i64 2
  %131 = bitcast %"class.viz::Surface"** %130 to <2 x i64>*
  %132 = load <2 x i64>, <2 x i64>* %131, align 8, !alias.scope !4
  %133 = bitcast %"class.viz::Surface"** %126 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %133, align 8, !alias.scope !7, !noalias !4
  %134 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %126, i64 2
  %135 = bitcast %"class.viz::Surface"** %134 to <2 x i64>*
  store <2 x i64> %132, <2 x i64>* %135, align 8, !alias.scope !7, !noalias !4
  %136 = add i64 %124, 4
  %137 = add i64 %125, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %123, !llvm.loop !11

139:                                              ; preds = %123, %120
  %140 = icmp eq i64 %39, %61
  br i1 %140, label %141, label %41

141:                                              ; preds = %152, %139
  %142 = phi %"class.viz::Surface"** [ %62, %139 ], [ %159, %152 ]
  %143 = ptrtoint %"class.viz::Surface"** %142 to i64
  br label %144

144:                                              ; preds = %141, %23
  %145 = phi i64 [ %143, %141 ], [ %12, %23 ]
  store i64 %145, i64* %29, align 8
  %146 = icmp eq i64 %26, 0
  br i1 %146, label %161, label %147

147:                                              ; preds = %144
  %148 = sub nsw i64 0, %27
  %149 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %8, i64 %148
  %150 = bitcast %"class.viz::Surface"** %149 to i8*
  %151 = bitcast %"class.viz::Surface"** %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %151, i64 %26, i1 false) #12
  br label %161

152:                                              ; preds = %41, %152
  %153 = phi %"class.viz::Surface"** [ %159, %152 ], [ %42, %41 ]
  %154 = phi %"class.viz::Surface"** [ %158, %152 ], [ %43, %41 ]
  %155 = bitcast %"class.viz::Surface"** %154 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = bitcast %"class.viz::Surface"** %153 to i64*
  store i64 %156, i64* %157, align 8
  %158 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %154, i64 1
  %159 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %153, i64 1
  %160 = icmp ult %"class.viz::Surface"** %158, %8
  br i1 %160, label %152, label %141, !llvm.loop !13

161:                                              ; preds = %144, %147
  %162 = bitcast %"class.viz::Surface"** %1 to i64*
  store i64 %17, i64* %162, align 8
  br label %319

163:                                              ; preds = %3
  %164 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2
  %165 = bitcast %"struct.std::__1::__split_buffer"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %165) #12
  %166 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 0
  %167 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 1
  %168 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 2
  %169 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 3, i32 0, i32 0
  %170 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 3, i32 1, i32 0
  %171 = bitcast %"class.viz::Surface"*** %7 to i64*
  %172 = bitcast %"class.std::__1::vector"* %0 to i64*
  %173 = bitcast %"struct.std::__1::__split_buffer"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %173, i8 -86, i64 40, i1 false)
  %174 = load i64, i64* %172, align 8
  %175 = sub i64 %12, %174
  %176 = ashr exact i64 %175, 3
  %177 = add nsw i64 %176, 1
  %178 = icmp ugt i64 %177, 2305843009213693951
  br i1 %178, label %179, label %181

179:                                              ; preds = %163
  %180 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %180) #11
  unreachable

181:                                              ; preds = %163
  %182 = bitcast %"class.viz::Surface"*** %9 to i64*
  %183 = sub i64 %13, %174
  %184 = ashr exact i64 %183, 3
  %185 = icmp ult i64 %184, 1152921504606846975
  br i1 %185, label %190, label %186

186:                                              ; preds = %181
  %187 = sub i64 %4, %174
  %188 = ashr exact i64 %187, 3
  store %"class.viz::Surface"** null, %"class.viz::Surface"*** %169, align 8
  %189 = bitcast %"class.std::__1::allocator.337"** %170 to %"class.std::__1::__compressed_pair.334"**
  store %"class.std::__1::__compressed_pair.334"* %164, %"class.std::__1::__compressed_pair.334"** %189, align 8
  br label %201

190:                                              ; preds = %181
  %191 = ashr exact i64 %183, 2
  %192 = icmp ult i64 %191, %177
  %193 = select i1 %192, i64 %177, i64 %191
  %194 = sub i64 %4, %174
  %195 = ashr exact i64 %194, 3
  store %"class.viz::Surface"** null, %"class.viz::Surface"*** %169, align 8
  %196 = bitcast %"class.std::__1::allocator.337"** %170 to %"class.std::__1::__compressed_pair.334"**
  store %"class.std::__1::__compressed_pair.334"* %164, %"class.std::__1::__compressed_pair.334"** %196, align 8
  %197 = icmp eq i64 %193, 0
  br i1 %197, label %207, label %198

198:                                              ; preds = %190
  %199 = icmp ugt i64 %193, 2305843009213693951
  br i1 %199, label %200, label %201

200:                                              ; preds = %198
  tail call void @abort() #11
  unreachable

201:                                              ; preds = %186, %198
  %202 = phi i64 [ 2305843009213693951, %186 ], [ %193, %198 ]
  %203 = phi i64 [ %188, %186 ], [ %195, %198 ]
  %204 = shl i64 %202, 3
  %205 = tail call i8* @_Znwm(i64 %204) #10
  %206 = bitcast i8* %205 to %"class.viz::Surface"**
  br label %207

207:                                              ; preds = %190, %201
  %208 = phi i64 [ %203, %201 ], [ %195, %190 ]
  %209 = phi i64 [ %202, %201 ], [ 0, %190 ]
  %210 = phi %"class.viz::Surface"** [ %206, %201 ], [ null, %190 ]
  store %"class.viz::Surface"** %210, %"class.viz::Surface"*** %166, align 8
  %211 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %210, i64 %208
  store %"class.viz::Surface"** %211, %"class.viz::Surface"*** %168, align 8
  store %"class.viz::Surface"** %211, %"class.viz::Surface"*** %167, align 8
  %212 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %210, i64 %209
  store %"class.viz::Surface"** %212, %"class.viz::Surface"*** %169, align 8
  call void @_ZNSt3__114__split_bufferIPN3viz7SurfaceERNS_9allocatorIS3_EEE12emplace_backIJRKS3_EEEvDpOT_(%"struct.std::__1::__split_buffer"* nonnull %5, %"class.viz::Surface"** dereferenceable(8) %2)
  %213 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %167, align 8
  %214 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %6, align 8
  %215 = ptrtoint %"class.viz::Surface"** %214 to i64
  %216 = sub i64 %4, %215
  %217 = ashr exact i64 %216, 3
  %218 = sub nsw i64 0, %217
  %219 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %213, i64 %218
  store %"class.viz::Surface"** %219, %"class.viz::Surface"*** %167, align 8
  %220 = icmp sgt i64 %216, 0
  br i1 %220, label %221, label %224

221:                                              ; preds = %207
  %222 = bitcast %"class.viz::Surface"** %219 to i8*
  %223 = bitcast %"class.viz::Surface"** %214 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %222, i8* align 8 %223, i64 %216, i1 false) #12
  br label %224

224:                                              ; preds = %221, %207
  %225 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %7, align 8
  %226 = icmp eq %"class.viz::Surface"** %225, %1
  br i1 %226, label %227, label %231

227:                                              ; preds = %224
  %228 = ptrtoint %"class.viz::Surface"** %225 to i64
  %229 = bitcast %"class.viz::Surface"*** %168 to i64*
  %230 = load i64, i64* %229, align 8
  br label %293

231:                                              ; preds = %224
  %232 = bitcast %"class.viz::Surface"*** %168 to i64**
  %233 = load i64*, i64** %232, align 8
  %234 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %225, i64 -1
  %235 = ptrtoint %"class.viz::Surface"** %234 to i64
  %236 = sub i64 %235, %4
  %237 = lshr i64 %236, 3
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 3
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %255, label %241

241:                                              ; preds = %231, %241
  %242 = phi i64* [ %250, %241 ], [ %233, %231 ]
  %243 = phi %"class.viz::Surface"** [ %247, %241 ], [ %1, %231 ]
  %244 = phi i64 [ %251, %241 ], [ %239, %231 ]
  %245 = bitcast %"class.viz::Surface"** %243 to i64*
  %246 = load i64, i64* %245, align 8
  store i64 %246, i64* %242, align 8
  %247 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %243, i64 1
  %248 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %168, align 8
  %249 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %248, i64 1
  store %"class.viz::Surface"** %249, %"class.viz::Surface"*** %168, align 8
  %250 = bitcast %"class.viz::Surface"** %249 to i64*
  %251 = add i64 %244, -1
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %253, label %241, !llvm.loop !14

253:                                              ; preds = %241
  %254 = bitcast %"class.viz::Surface"** %249 to i64*
  br label %255

255:                                              ; preds = %231, %253
  %256 = phi %"class.viz::Surface"** [ undef, %231 ], [ %249, %253 ]
  %257 = phi i64* [ %233, %231 ], [ %254, %253 ]
  %258 = phi %"class.viz::Surface"** [ %1, %231 ], [ %247, %253 ]
  %259 = icmp ult i64 %236, 24
  br i1 %259, label %288, label %260

260:                                              ; preds = %255, %260
  %261 = phi i64* [ %287, %260 ], [ %257, %255 ]
  %262 = phi %"class.viz::Surface"** [ %283, %260 ], [ %258, %255 ]
  %263 = bitcast %"class.viz::Surface"** %262 to i64*
  %264 = load i64, i64* %263, align 8
  store i64 %264, i64* %261, align 8
  %265 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %262, i64 1
  %266 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %168, align 8
  %267 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %266, i64 1
  store %"class.viz::Surface"** %267, %"class.viz::Surface"*** %168, align 8
  %268 = bitcast %"class.viz::Surface"** %267 to i64*
  %269 = bitcast %"class.viz::Surface"** %265 to i64*
  %270 = load i64, i64* %269, align 8
  store i64 %270, i64* %268, align 8
  %271 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %262, i64 2
  %272 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %168, align 8
  %273 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %272, i64 1
  store %"class.viz::Surface"** %273, %"class.viz::Surface"*** %168, align 8
  %274 = bitcast %"class.viz::Surface"** %273 to i64*
  %275 = bitcast %"class.viz::Surface"** %271 to i64*
  %276 = load i64, i64* %275, align 8
  store i64 %276, i64* %274, align 8
  %277 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %262, i64 3
  %278 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %168, align 8
  %279 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %278, i64 1
  store %"class.viz::Surface"** %279, %"class.viz::Surface"*** %168, align 8
  %280 = bitcast %"class.viz::Surface"** %279 to i64*
  %281 = bitcast %"class.viz::Surface"** %277 to i64*
  %282 = load i64, i64* %281, align 8
  store i64 %282, i64* %280, align 8
  %283 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %262, i64 4
  %284 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %168, align 8
  %285 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %284, i64 1
  store %"class.viz::Surface"** %285, %"class.viz::Surface"*** %168, align 8
  %286 = icmp eq %"class.viz::Surface"** %283, %225
  %287 = bitcast %"class.viz::Surface"** %285 to i64*
  br i1 %286, label %288, label %260

288:                                              ; preds = %260, %255
  %289 = phi %"class.viz::Surface"** [ %256, %255 ], [ %285, %260 ]
  %290 = ptrtoint %"class.viz::Surface"** %289 to i64
  %291 = load i64, i64* %171, align 8
  %292 = bitcast %"class.viz::Surface"*** %168 to i64*
  br label %293

293:                                              ; preds = %227, %288
  %294 = phi i64* [ %229, %227 ], [ %292, %288 ]
  %295 = phi i64 [ %230, %227 ], [ %290, %288 ]
  %296 = phi i64 [ %228, %227 ], [ %291, %288 ]
  %297 = load i64, i64* %172, align 8
  %298 = bitcast %"class.viz::Surface"*** %167 to i64*
  %299 = load i64, i64* %298, align 8
  store i64 %299, i64* %172, align 8
  store i64 %297, i64* %298, align 8
  store i64 %295, i64* %171, align 8
  store i64 %296, i64* %294, align 8
  %300 = load i64, i64* %182, align 8
  %301 = bitcast %"class.viz::Surface"*** %169 to i64*
  %302 = load i64, i64* %301, align 8
  store i64 %302, i64* %182, align 8
  store i64 %300, i64* %301, align 8
  %303 = bitcast %"struct.std::__1::__split_buffer"* %5 to i64*
  store i64 %297, i64* %303, align 8
  %304 = inttoptr i64 %297 to %"class.viz::Surface"**
  %305 = inttoptr i64 %296 to %"class.viz::Surface"**
  %306 = icmp eq %"class.viz::Surface"** %305, %304
  br i1 %306, label %314, label %307

307:                                              ; preds = %293
  %308 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %305, i64 -1
  %309 = ptrtoint %"class.viz::Surface"** %308 to i64
  %310 = sub i64 %309, %297
  %311 = lshr i64 %310, 3
  %312 = xor i64 %311, -1
  %313 = getelementptr %"class.viz::Surface"*, %"class.viz::Surface"** %305, i64 %312
  store %"class.viz::Surface"** %313, %"class.viz::Surface"*** %168, align 8
  br label %314

314:                                              ; preds = %307, %293
  %315 = icmp eq i64 %297, 0
  br i1 %315, label %318, label %316

316:                                              ; preds = %314
  %317 = inttoptr i64 %297 to i8*
  call void @_ZdlPv(i8* %317) #10
  br label %318

318:                                              ; preds = %314, %316
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %165) #12
  br label %319

319:                                              ; preds = %18, %161, %318
  %320 = phi %"class.viz::Surface"** [ %1, %18 ], [ %1, %161 ], [ %213, %318 ]
  ret %"class.viz::Surface"** %320
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN3viz7SurfaceERNS_9allocatorIS3_EEE12emplace_backIJRKS3_EEEvDpOT_(%"struct.std::__1::__split_buffer"*, %"class.viz::Surface"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %5, align 8
  %7 = icmp eq %"class.viz::Surface"** %4, %6
  %8 = ptrtoint %"class.viz::Surface"** %6 to i64
  %9 = bitcast %"class.viz::Surface"** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %13, align 8
  %15 = icmp ugt %"class.viz::Surface"** %12, %14
  %16 = ptrtoint %"class.viz::Surface"** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %"class.viz::Surface"** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %12, i64 %22
  %24 = ptrtoint %"class.viz::Surface"** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %"class.viz::Surface"** %23 to i8*
  %30 = bitcast %"class.viz::Surface"** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #12
  %31 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %"class.viz::Surface"** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %23, i64 %26
  store %"class.viz::Surface"** %34, %"class.viz::Surface"*** %3, align 8
  %35 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %33, i64 %22
  store %"class.viz::Surface"** %35, %"class.viz::Surface"*** %11, align 8
  %36 = bitcast %"class.viz::Surface"** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast %"class.viz::Surface"*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #11
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #10
  %50 = bitcast i8* %49 to %"class.viz::Surface"**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %50, i64 %47
  %53 = ptrtoint %"class.viz::Surface"** %52 to i64
  %54 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %50, i64 %43
  %55 = ptrtoint %"class.viz::Surface"** %54 to i64
  %56 = ptrtoint %"class.viz::Surface"** %12 to i64
  %57 = ptrtoint %"class.viz::Surface"** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi %"class.viz::Surface"** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi %"class.viz::Surface"** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast %"class.viz::Surface"** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %69, i64 1
  %77 = ptrtoint %"class.viz::Surface"** %76 to i64
  %78 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !15

81:                                               ; preds = %68
  %82 = ptrtoint %"class.viz::Surface"** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi %"class.viz::Surface"** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi %"class.viz::Surface"** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi %"class.viz::Surface"** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi %"class.viz::Surface"** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast %"class.viz::Surface"** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %89, i64 1
  %96 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %91, i64 1
  %97 = bitcast %"class.viz::Surface"** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast %"class.viz::Surface"** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %89, i64 2
  %101 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %91, i64 2
  %102 = bitcast %"class.viz::Surface"** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast %"class.viz::Surface"** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %89, i64 3
  %106 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %91, i64 3
  %107 = bitcast %"class.viz::Surface"** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"class.viz::Surface"** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %89, i64 4
  %111 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %91, i64 4
  %112 = bitcast %"class.viz::Surface"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"class.viz::Surface"** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %89, i64 5
  %116 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %91, i64 5
  %117 = bitcast %"class.viz::Surface"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.viz::Surface"** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %89, i64 6
  %121 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %91, i64 6
  %122 = bitcast %"class.viz::Surface"** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"class.viz::Surface"** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %89, i64 7
  %126 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %91, i64 7
  %127 = bitcast %"class.viz::Surface"** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"class.viz::Surface"** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %89, i64 8
  %131 = ptrtoint %"class.viz::Surface"** %130 to i64
  %132 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %91, i64 8
  %133 = icmp eq %"class.viz::Surface"** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint %"class.viz::Surface"** %60 to i64
  %136 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi %"class.viz::Surface"** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast %"class.viz::Surface"*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast %"class.viz::Surface"*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq %"class.viz::Surface"** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast %"class.viz::Surface"** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #10
  %146 = bitcast %"class.viz::Surface"*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast %"class.viz::Surface"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load %"class.viz::Surface"**, %"class.viz::Surface"*** %3, align 8
  %153 = getelementptr inbounds %"class.viz::Surface"*, %"class.viz::Surface"** %152, i64 1
  store %"class.viz::Surface"** %153, %"class.viz::Surface"*** %3, align 8
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = distinct !{!13, !10}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !12}
