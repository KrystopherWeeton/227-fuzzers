; ModuleID = '../../third_party/blink/renderer/platform/exported/web_text_run.cc'
source_filename = "../../third_party/blink/renderer/platform/exported/web_text_run.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::TextRun" = type <{ %union.anon, i32, i32, float, float, i16, [2 x i8], %"struct.blink::TabSize", [4 x i8] }>
%union.anon = type { i8* }
%"struct.blink::TabSize" = type <{ float, i8, [3 x i8] }>
%"struct.blink::WebTextRun" = type <{ %"class.blink::WebString", i8, i8, [6 x i8] }>
%"class.blink::WebString" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink10WebTextRuncvNS_7TextRunEEv(%"class.blink::TextRun"* noalias nocapture sret, %"struct.blink::WebTextRun"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = bitcast %"class.WTF::StringView"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #3
  %5 = getelementptr inbounds %"struct.blink::WebTextRun", %"struct.blink::WebTextRun"* %1, i64 0, i32 0
  call void @_ZNK5blink9WebStringcvN3WTF10StringViewEEv(%"class.WTF::StringView"* nonnull sret %3, %"class.blink::WebString"* %5) #3
  %6 = getelementptr inbounds %"struct.blink::WebTextRun", %"struct.blink::WebTextRun"* %1, i64 0, i32 1
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = getelementptr inbounds %"struct.blink::WebTextRun", %"struct.blink::WebTextRun"* %1, i64 0, i32 2
  %9 = load i8, i8* %8, align 1, !range !2
  %10 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 1
  %11 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  store i32 %12, i32* %10, align 8
  %13 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 2
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 3
  store float 0.000000e+00, float* %14, align 8
  %15 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 4
  store float 0.000000e+00, float* %15, align 4
  %16 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 5
  %17 = load i16, i16* %16, align 8
  %18 = and i16 %17, -1020
  %19 = shl nuw nsw i8 %7, 4
  %20 = shl nuw nsw i8 %9, 5
  %21 = or i8 %19, %20
  %22 = or i8 %21, 1
  %23 = zext i8 %22 to i16
  %24 = or i16 %18, %23
  store i16 %24, i16* %16, align 8
  %25 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 7, i32 0
  store float 0.000000e+00, float* %25, align 4
  %26 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 7, i32 1
  %27 = load i8, i8* %26, align 4
  %28 = or i8 %27, 1
  store i8 %28, i8* %26, align 4
  %29 = icmp eq i32 %12, 0
  br i1 %29, label %30, label %33

30:                                               ; preds = %2
  %31 = or i16 %24, 4
  store i16 %31, i16* %16, align 8
  %32 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %0, i64 0, i32 0, i32 0
  store i8* null, i8** %32, align 8
  br label %48

33:                                               ; preds = %2
  %34 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, 1
  %39 = icmp eq i32 %38, 0
  %40 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  %41 = bitcast i8** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.blink::TextRun"* %0 to i64*
  store i64 %42, i64* %43, align 8
  br i1 %39, label %46, label %44

44:                                               ; preds = %33
  %45 = or i16 %24, 4
  store i16 %45, i16* %16, align 8
  br label %48

46:                                               ; preds = %33
  %47 = and i16 %24, -975
  store i16 %47, i16* %16, align 8
  br label %48

48:                                               ; preds = %30, %44, %46
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZNK5blink9WebStringcvN3WTF10StringViewEEv(%"class.WTF::StringView"* sret, %"class.blink::WebString"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
