; ModuleID = '../../third_party/angle/src/libANGLE/renderer/gl/egl/RendererEGL.cpp'
source_filename = "../../third_party/angle/src/libANGLE/renderer/gl/egl/RendererEGL.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.rx::RendererEGL" = type <{ %"class.rx::RendererGL.base", [7 x i8], %"class.rx::DisplayEGL"*, i8*, %"class.std::__1::vector.62", i8, [7 x i8] }>
%"class.rx::RendererGL.base" = type <{ i32 (...)**, %"struct.gl::Version", %"class.std::__1::unique_ptr", %"class.rx::StateManagerGL"*, %"class.rx::BlitGL"*, %"class.rx::ClearMultiviewGL"*, i8, i8, [6 x i8], %"struct.gl::Caps", %"class.gl::TextureCapsMap", %"struct.gl::Extensions", %"struct.gl::Limitations", i32, [4 x i8], %"class.absl::flat_hash_map", %"class.std::__1::list", %"class.std::__1::mutex", i8, [7 x i8], %"struct.angle::FeaturesGL", i8 }>
%"struct.gl::Version" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.rx::FunctionsGL"* }
%"class.rx::StateManagerGL" = type opaque
%"class.rx::BlitGL" = type opaque
%"class.rx::ClearMultiviewGL" = type opaque
%"struct.gl::Caps" = type <{ float, float, i32, [4 x i8], i64, i32, i32, i32, i32, float, i32, i32, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, [4 x i8], %"class.std::__1::vector.17", %"class.std::__1::vector.17", %"class.std::__1::vector.17", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap.25", i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array.27", %"struct.std::__1::array.27", i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, i32, i32, [4 x i8] }>
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { i32*, i32*, %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { i32* }
%"struct.gl::TypePrecision" = type { %"struct.std::__1::array", i32 }
%"struct.std::__1::array" = type { [2 x i32] }
%"class.angle::PackedEnumMap" = type { %"struct.std::__1::array.24" }
%"struct.std::__1::array.24" = type { [6 x i32] }
%"class.angle::PackedEnumMap.25" = type { %"struct.std::__1::array.26" }
%"struct.std::__1::array.26" = type { [6 x i64] }
%"struct.std::__1::array.27" = type { [3 x i32] }
%"class.gl::TextureCapsMap" = type { %"class.angle::PackedEnumMap.28" }
%"class.angle::PackedEnumMap.28" = type { %"struct.std::__1::array.29" }
%"struct.std::__1::array.29" = type { [227 x %"struct.gl::TextureCaps"] }
%"struct.gl::TextureCaps" = type { i8, i8, i8, i8, i8, %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree.30" }
%"class.std::__1::__tree.30" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.31", %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"struct.gl::Extensions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, float, i8, i8, i8, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"struct.gl::Limitations" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type opaque
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.46" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.angle::FeaturesGL" = type { %"struct.angle::FeatureSetBase", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature" }
%"struct.angle::FeatureSetBase" = type { %"class.std::__1::map.50" }
%"class.std::__1::map.50" = type { %"class.std::__1::__tree.51" }
%"class.std::__1::__tree.51" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.52", %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.angle::Feature" = type { i8*, i32, i8*, i8*, i8, i8* }
%"class.std::__1::vector.62" = type { %"class.std::__1::__vector_base.63" }
%"class.std::__1::__vector_base.63" = type { i32*, i32*, %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { i32* }
%"class.rx::FunctionsGL" = type { %"class.rx::DispatchTableGL", %"struct.gl::Version", i32, i32, %"class.std::__1::vector" }
%"class.rx::DispatchTableGL" = type { i32 (...)**, void (i32, i32)*, void (i32)*, void (float, float, float, float)*, void (double)*, void (i32)*, void (i8, i8, i8, i8)*, void (i32)*, void (i32)*, void (i8)*, void (double, double)*, void (i32)*, void (i32)*, void (i32)*, void ()*, void ()*, void (i32)*, void (i32, i8*)*, void (i32, double*)*, i32 ()*, void (i32, float*)*, void (i32, i32*)*, i8* (i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32)*, i8 (i32)*, void (float)*, void (i32)*, void (i32, float)*, void (i32, i32)*, void (float)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i8*)*, void (i32, i32*)*, i8 (i32)*, void (float, float)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (float, float, float, float)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32, i32*)*, i8 (i32)*, void (i32, i32)*, i8 (i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i8*)*, void (float, i8)*, void (i32, i32, i32, i32)*, void (i32, i32*, i32*, i32)*, void (i32, i32*, i32, i8**, i32)*, void (i32, float)*, void (i32, float*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i64, i64, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8 (i32)*, i8 (i32)*, i8* (i32, i32)*, i8 (i32)*, void (i32, i32)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32)*, i32 ()*, i32 (i32)*, void (i32)*, void (i32)*, void (i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*, i32*)*, i32 (i32, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i32, double*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, i8 (i32)*, i8 (i32)*, void (i32)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, float)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32)*, void (i32)*, void (i32, double)*, void (i32, double*)*, void (i32, float)*, void (i32, float*)*, void (i32, i16)*, void (i32, i16*)*, void (i32, double, double)*, void (i32, double*)*, void (i32, float, float)*, void (i32, float*)*, void (i32, i16, i16)*, void (i32, i16*)*, void (i32, double, double, double)*, void (i32, double*)*, void (i32, float, float, float)*, void (i32, float*)*, void (i32, i16, i16, i16)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8, i8, i8, i8)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, double, double, double, double)*, void (i32, double*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32*)*, void (i32, i16, i16, i16, i16)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i32, i32, i8, i32, i8*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i32)*, void (i32, i32)*, void (i32, i32, float, i32)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i8, i8, i8, i8)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void ()*, void ()*, void (i32, i64, i64)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i32, i32, i8*)*, i32 (i32, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8* (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8 (i32, i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8* (i32, i64, i64, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i8**, i32)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i8*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32, i32*, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, i8**, i32*)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32)*, i32 (%struct.__GLsync*, i32, i64)*, void (%struct.__GLsync*)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i32, i32, i8*, i32)*, %struct.__GLsync* (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i64*)*, void (i32, i32, i64*)*, void (i32, i64*)*, void (i32, i32, float*)*, void (%struct.__GLsync*, i32, i32, i32*, i32*)*, i8 (%struct.__GLsync*)*, void (i32, i32*, i32, i8**, i32, i32*)*, void (i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (%struct.__GLsync*, i32, i64)*, void (i32, i32, i32, i8*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, i64*)*, void (i32, i32, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, i8 (i32)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32*)*, void (i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, double*)*, i8 (i32)*, void (float)*, void (i32, float*)*, void (i32, i32)*, void ()*, void ()*, void (i32, double)*, void (i32, i32, double*)*, void (i32, double, double)*, void (i32, i32, double*)*, void (i32, double, double, double)*, void (i32, i32, double*)*, void (i32, double, double, double, double)*, void (i32, i32, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32)*, void (float)*, i32 (i32, i32, i8**)*, void (i32, i32*)*, void (i32, i32, double*)*, void (i32, double, double)*, void (float, float)*, void (i32, i32*)*, void (i32, i32, double*)*, void (i32, i32, float*)*, void (i32, i32, i32*, i32*, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32*)*, void (i32, i32, double*)*, i8 (i32)*, void (i32, i32, i8*, i32)*, void (i32, i32, i32)*, void (i32, i32, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double, double, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float, float, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void ()*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*, i32, i8*, i32)*, void (i32, i32, i32)*, void (i32)*, void (i32, double)*, void (i32, double*)*, void (i32, double, double)*, void (i32, double*)*, void (i32, double, double, double)*, void (i32, double*)*, void (i32, double, double, double, double)*, void (i32, double*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, float*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32, i32, i8, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i8*, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*)*, void (i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i64, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32)*, void (void (i32, i32, i32, i32, i32, i8*, i8*)*, i8*)*, void (i32, i32, i32, i32, i32*, i8)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32)*, void (i64)*, void (i32, i32, i32)*, i32 (i32, i32, i32*, i32*, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i64*)*, void (i32, i32, i32, i32*, i8*)*, void (i8*, i32, i32*, i8*)*, void (i32, i8**)*, void (i32, i32, i32, i32*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*, i32, i32*, i32*)*, void (i32)*, void (i32, i64, i64)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i8*, i32, i32)*, void (i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i8*)*, void (i8*, i32, i8*)*, void ()*, void (i32, i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*, i64*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i64*, i32*)*, void (i32, i64, i8*, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i32, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i32, i32, i8*)*, void (i32, i32, i32, float, i32)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i64, i64)*, void (i32)*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, i32 ()*, void (i32, i32, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i64, i64, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i64*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i64*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, double*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, i8* (i32, i32)*, i8* (i32, i64, i64, i32)*, void (i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void ()*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, i8 (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i64, i32)*, void (i32, i32, i32, i32*, i64*, i32*)*, void ()*, void (float, float, float, float, float, float, float, float)*, void (i32)*, void (i32, i8*)*, void ()*, void (i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i64, i32, i64)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i8*)*, void (i32, i8*)*, i8 (i32)*, void (i32, i32, i32*)*, void (i32, i64, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i64, i32, i32)*, void (i32, i64, i32, i8*)*, void (i32, i64, i32, i8*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i64*)*, i8 (i32)*, void (i32, i32, i64*)*, void (i32, i32, i32*, i32, i32*, i32*)*, void (i32, i32, i32*, i32, i32*, i32*)*, void (i32, i32, i32)*, void (i32, i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i32)* }
%struct.__GLsync = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.std::__1::basic_string"* }
%"class.egl::AttributeMap" = type { %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.rx::DisplayEGL" = type <{ %"class.rx::DisplayGL", %"class.std::__1::shared_ptr", %"class.rx::FunctionsEGLDL"*, i8*, %"class.egl::AttributeMap", %"class.std::__1::vector.62", %"class.absl::flat_hash_map.69", %"class.std::__1::map.78", i8, i8, [6 x i8] }>
%"class.rx::DisplayGL" = type { %"class.rx::DisplayImpl" }
%"class.rx::DisplayImpl" = type { %"class.rx::EGLImplFactory", %"class.angle::Subject", %"struct.egl::DisplayState"*, i8, %"struct.egl::DisplayExtensions", i8, %"struct.egl::Caps", %"class.egl::BlobCache"* }
%"class.rx::EGLImplFactory" = type { i32 (...)** }
%"class.angle::Subject" = type { i32 (...)**, %"class.angle::FastVector" }
%"class.angle::FastVector" = type { %"struct.std::__1::array.61", %"class.angle::ObserverBindingBase"**, i64, i64 }
%"struct.std::__1::array.61" = type { [8 x %"class.angle::ObserverBindingBase"*] }
%"class.angle::ObserverBindingBase" = type { i32 (...)**, %"class.angle::ObserverInterface"*, i64 }
%"class.angle::ObserverInterface" = type { i32 (...)** }
%"struct.egl::DisplayState" = type opaque
%"struct.egl::DisplayExtensions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"struct.egl::Caps" = type { i8, i8 }
%"class.egl::BlobCache" = type opaque
%"class.std::__1::shared_ptr" = type { %"class.rx::RendererEGL"*, %"class.std::__1::__shared_weak_count"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.rx::FunctionsEGLDL" = type opaque
%"class.absl::flat_hash_map.69" = type { %"class.absl::container_internal::raw_hash_map.70" }
%"class.absl::container_internal::raw_hash_map.70" = type { %"class.absl::container_internal::raw_hash_set.71" }
%"class.absl::container_internal::raw_hash_set.71" = type { i8*, %"union.absl::container_internal::map_slot_type.72"*, i64, i64, %"class.absl::container_internal::CompressedTuple.73" }
%"union.absl::container_internal::map_slot_type.72" = type opaque
%"class.absl::container_internal::CompressedTuple.73" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.74" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.74" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.std::__1::map.78" = type { %"class.std::__1::__tree.79" }
%"class.std::__1::__tree.79" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.80", %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.rx::RendererGL" = type <{ i32 (...)**, %"struct.gl::Version", %"class.std::__1::unique_ptr", %"class.rx::StateManagerGL"*, %"class.rx::BlitGL"*, %"class.rx::ClearMultiviewGL"*, i8, i8, [6 x i8], %"struct.gl::Caps", %"class.gl::TextureCapsMap", %"struct.gl::Extensions", %"struct.gl::Limitations", i32, [4 x i8], %"class.absl::flat_hash_map", %"class.std::__1::list", %"class.std::__1::mutex", i8, [7 x i8], %"struct.angle::FeaturesGL", i8, [7 x i8] }>
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.rx::WorkerContext" = type { i32 (...)** }

@_ZTVN2rx11RendererEGLE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.rx::RendererEGL"*)* @_ZN2rx11RendererEGLD2Ev to i8*), i8* bitcast (void (%"class.rx::RendererEGL"*)* @_ZN2rx11RendererEGLD0Ev to i8*), i8* bitcast (%"class.rx::WorkerContext"* (%"class.rx::RendererEGL"*, %"class.std::__1::basic_string"*)* @_ZN2rx11RendererEGL19createWorkerContextEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE to i8*)] }, align 8

@_ZN2rx11RendererEGLC1ENSt3__110unique_ptrINS_11FunctionsGLENS1_14default_deleteIS3_EEEERKN3egl12AttributeMapEPNS_10DisplayEGLEPvNS1_6vectorIiNS1_9allocatorIiEEEEb = hidden unnamed_addr alias void (%"class.rx::RendererEGL"*, %"class.rx::FunctionsGL"*, %"class.egl::AttributeMap"*, %"class.rx::DisplayEGL"*, i8*, %"class.std::__1::vector.62"*, i1), void (%"class.rx::RendererEGL"*, %"class.rx::FunctionsGL"*, %"class.egl::AttributeMap"*, %"class.rx::DisplayEGL"*, i8*, %"class.std::__1::vector.62"*, i1)* @_ZN2rx11RendererEGLC2ENSt3__110unique_ptrINS_11FunctionsGLENS1_14default_deleteIS3_EEEERKN3egl12AttributeMapEPNS_10DisplayEGLEPvNS1_6vectorIiNS1_9allocatorIiEEEEb
@_ZN2rx11RendererEGLD1Ev = hidden unnamed_addr alias void (%"class.rx::RendererEGL"*), void (%"class.rx::RendererEGL"*)* @_ZN2rx11RendererEGLD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx11RendererEGLC2ENSt3__110unique_ptrINS_11FunctionsGLENS1_14default_deleteIS3_EEEERKN3egl12AttributeMapEPNS_10DisplayEGLEPvNS1_6vectorIiNS1_9allocatorIiEEEEb(%"class.rx::RendererEGL"*, %"class.rx::FunctionsGL"*, %"class.egl::AttributeMap"* dereferenceable(24), %"class.rx::DisplayEGL"*, i8*, %"class.std::__1::vector.62"* nocapture readonly, i1 zeroext) unnamed_addr #0 align 2 {
  %8 = zext i1 %6 to i8
  %9 = bitcast %"class.rx::RendererEGL"* %0 to %"class.rx::RendererGL"*
  %10 = getelementptr inbounds %"class.rx::DisplayEGL", %"class.rx::DisplayEGL"* %3, i64 0, i32 0
  tail call void @_ZN2rx10RendererGLC2ENSt3__110unique_ptrINS_11FunctionsGLENS1_14default_deleteIS3_EEEERKN3egl12AttributeMapEPNS_9DisplayGLE(%"class.rx::RendererGL"* %9, %"class.rx::FunctionsGL"* %1, %"class.egl::AttributeMap"* dereferenceable(24) %2, %"class.rx::DisplayGL"* %10) #8
  %11 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2rx11RendererEGLE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %12 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 2
  store %"class.rx::DisplayEGL"* %3, %"class.rx::DisplayEGL"** %12, align 8
  %13 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 3
  store i8* %4, i8** %13, align 8
  %14 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 4
  %15 = bitcast %"class.std::__1::vector.62"* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 24, i1 false) #8
  %16 = getelementptr inbounds %"class.std::__1::vector.62", %"class.std::__1::vector.62"* %5, i64 0, i32 0, i32 1
  %17 = bitcast i32** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.std::__1::vector.62"* %5 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %18, %20
  %22 = ashr exact i64 %21, 2
  %23 = icmp eq i64 %21, 0
  br i1 %23, label %51, label %24

24:                                               ; preds = %7
  %25 = icmp ugt i64 %22, 4611686018427387903
  br i1 %25, label %26, label %28

26:                                               ; preds = %24
  %27 = bitcast %"class.std::__1::vector.62"* %14 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %27) #9
  unreachable

28:                                               ; preds = %24
  %29 = tail call i8* @_Znwm(i64 %21) #10
  %30 = bitcast i8* %29 to i32*
  %31 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 4, i32 0, i32 1
  %32 = bitcast i32** %31 to i8**
  store i8* %29, i8** %32, align 8
  %33 = bitcast %"class.std::__1::vector.62"* %14 to i8**
  store i8* %29, i8** %33, align 8
  %34 = getelementptr inbounds i32, i32* %30, i64 %22
  %35 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  store i32* %34, i32** %35, align 8
  %36 = getelementptr inbounds %"class.std::__1::vector.62", %"class.std::__1::vector.62"* %5, i64 0, i32 0, i32 0
  %37 = load i32*, i32** %36, align 8
  %38 = load i64, i64* %17, align 8
  %39 = bitcast i32** %31 to i64*
  %40 = ptrtoint i8* %29 to i64
  %41 = ptrtoint i32* %37 to i64
  %42 = sub i64 %38, %41
  %43 = icmp sgt i64 %42, 0
  br i1 %43, label %44, label %49

44:                                               ; preds = %28
  %45 = lshr exact i64 %42, 2
  %46 = bitcast i32* %37 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %29, i8* align 4 %46, i64 %42, i1 false) #8
  %47 = getelementptr inbounds i32, i32* %30, i64 %45
  %48 = ptrtoint i32* %47 to i64
  br label %49

49:                                               ; preds = %44, %28
  %50 = phi i64 [ %48, %44 ], [ %40, %28 ]
  store i64 %50, i64* %39, align 8
  br label %51

51:                                               ; preds = %49, %7
  %52 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 5
  store i8 %8, i8* %52, align 8
  ret void
}

declare void @_ZN2rx10RendererGLC2ENSt3__110unique_ptrINS_11FunctionsGLENS1_14default_deleteIS3_EEEERKN3egl12AttributeMapEPNS_9DisplayGLE(%"class.rx::RendererGL"*, %"class.rx::FunctionsGL"*, %"class.egl::AttributeMap"* dereferenceable(24), %"class.rx::DisplayGL"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx11RendererEGLD2Ev(%"class.rx::RendererEGL"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2rx11RendererEGLE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 5
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %15

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 2
  %8 = load %"class.rx::DisplayEGL"*, %"class.rx::DisplayEGL"** %7, align 8
  %9 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 3
  %10 = load i8*, i8** %9, align 8
  %11 = bitcast %"class.rx::DisplayEGL"* %8 to void (%"class.rx::DisplayEGL"*, i8*)***
  %12 = load void (%"class.rx::DisplayEGL"*, i8*)**, void (%"class.rx::DisplayEGL"*, i8*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.rx::DisplayEGL"*, i8*)*, void (%"class.rx::DisplayEGL"*, i8*)** %12, i64 40
  %14 = load void (%"class.rx::DisplayEGL"*, i8*)*, void (%"class.rx::DisplayEGL"*, i8*)** %13, align 8
  tail call void %14(%"class.rx::DisplayEGL"* %8, i8* %10) #8
  store i8* null, i8** %9, align 8
  br label %15

15:                                               ; preds = %1, %6
  %16 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 4, i32 0, i32 0
  %17 = load i32*, i32** %16, align 8
  %18 = icmp eq i32* %17, null
  br i1 %18, label %24, label %19

19:                                               ; preds = %15
  %20 = ptrtoint i32* %17 to i64
  %21 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 4, i32 0, i32 1
  %22 = bitcast i32** %21 to i64*
  store i64 %20, i64* %22, align 8
  %23 = bitcast i32* %17 to i8*
  tail call void @_ZdlPv(i8* %23) #10
  br label %24

24:                                               ; preds = %15, %19
  %25 = bitcast %"class.rx::RendererEGL"* %0 to %"class.rx::RendererGL"*
  tail call void @_ZN2rx10RendererGLD2Ev(%"class.rx::RendererGL"* %25) #8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN2rx10RendererGLD2Ev(%"class.rx::RendererGL"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx11RendererEGLD0Ev(%"class.rx::RendererEGL"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2rx11RendererEGLE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 5
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %15

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 2
  %8 = load %"class.rx::DisplayEGL"*, %"class.rx::DisplayEGL"** %7, align 8
  %9 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 3
  %10 = load i8*, i8** %9, align 8
  %11 = bitcast %"class.rx::DisplayEGL"* %8 to void (%"class.rx::DisplayEGL"*, i8*)***
  %12 = load void (%"class.rx::DisplayEGL"*, i8*)**, void (%"class.rx::DisplayEGL"*, i8*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.rx::DisplayEGL"*, i8*)*, void (%"class.rx::DisplayEGL"*, i8*)** %12, i64 40
  %14 = load void (%"class.rx::DisplayEGL"*, i8*)*, void (%"class.rx::DisplayEGL"*, i8*)** %13, align 8
  tail call void %14(%"class.rx::DisplayEGL"* %8, i8* %10) #8
  store i8* null, i8** %9, align 8
  br label %15

15:                                               ; preds = %6, %1
  %16 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 4, i32 0, i32 0
  %17 = load i32*, i32** %16, align 8
  %18 = icmp eq i32* %17, null
  br i1 %18, label %24, label %19

19:                                               ; preds = %15
  %20 = ptrtoint i32* %17 to i64
  %21 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 4, i32 0, i32 1
  %22 = bitcast i32** %21 to i64*
  store i64 %20, i64* %22, align 8
  %23 = bitcast i32* %17 to i8*
  tail call void @_ZdlPv(i8* %23) #10
  br label %24

24:                                               ; preds = %15, %19
  %25 = bitcast %"class.rx::RendererEGL"* %0 to %"class.rx::RendererGL"*
  tail call void @_ZN2rx10RendererGLD2Ev(%"class.rx::RendererGL"* %25) #8
  %26 = bitcast %"class.rx::RendererEGL"* %0 to i8*
  tail call void @_ZdlPv(i8* %26) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @_ZNK2rx11RendererEGL10getContextEv(%"class.rx::RendererEGL"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.rx::WorkerContext"* @_ZN2rx11RendererEGL19createWorkerContextEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.rx::RendererEGL"* nocapture readonly, %"class.std::__1::basic_string"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::vector.62", align 8
  %4 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 2
  %5 = load %"class.rx::DisplayEGL"*, %"class.rx::DisplayEGL"** %4, align 8
  %6 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 4
  %9 = bitcast %"class.std::__1::vector.62"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 24, i1 false) #8
  %10 = getelementptr inbounds %"class.rx::RendererEGL", %"class.rx::RendererEGL"* %0, i64 0, i32 4, i32 0, i32 1
  %11 = bitcast i32** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector.62"* %8 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = ashr exact i64 %15, 2
  %17 = icmp eq i64 %15, 0
  br i1 %17, label %40, label %18

18:                                               ; preds = %2
  %19 = icmp ugt i64 %16, 4611686018427387903
  br i1 %19, label %20, label %22

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::vector.62"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %21) #9
  unreachable

22:                                               ; preds = %18
  %23 = tail call i8* @_Znwm(i64 %15) #10
  %24 = bitcast i8* %23 to i32*
  %25 = getelementptr inbounds %"class.std::__1::vector.62", %"class.std::__1::vector.62"* %3, i64 0, i32 0, i32 1
  %26 = bitcast i32** %25 to i8**
  store i8* %23, i8** %26, align 8
  %27 = bitcast %"class.std::__1::vector.62"* %3 to i8**
  store i8* %23, i8** %27, align 8
  %28 = getelementptr inbounds i32, i32* %24, i64 %16
  %29 = getelementptr inbounds %"class.std::__1::vector.62", %"class.std::__1::vector.62"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  store i32* %28, i32** %29, align 8
  %30 = bitcast i32** %25 to i64*
  %31 = ptrtoint i8* %23 to i64
  %32 = icmp sgt i64 %15, 0
  br i1 %32, label %33, label %38

33:                                               ; preds = %22
  %34 = lshr exact i64 %15, 2
  %35 = inttoptr i64 %14 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %23, i8* align 4 %35, i64 %15, i1 false) #8
  %36 = getelementptr inbounds i32, i32* %24, i64 %34
  %37 = ptrtoint i32* %36 to i64
  br label %38

38:                                               ; preds = %33, %22
  %39 = phi i64 [ %37, %33 ], [ %31, %22 ]
  store i64 %39, i64* %30, align 8
  br label %40

40:                                               ; preds = %2, %38
  %41 = bitcast %"class.rx::DisplayEGL"* %5 to %"class.rx::WorkerContext"* (%"class.rx::DisplayEGL"*, %"class.std::__1::basic_string"*, i8*, %"class.std::__1::vector.62"*)***
  %42 = load %"class.rx::WorkerContext"* (%"class.rx::DisplayEGL"*, %"class.std::__1::basic_string"*, i8*, %"class.std::__1::vector.62"*)**, %"class.rx::WorkerContext"* (%"class.rx::DisplayEGL"*, %"class.std::__1::basic_string"*, i8*, %"class.std::__1::vector.62"*)*** %41, align 8
  %43 = getelementptr inbounds %"class.rx::WorkerContext"* (%"class.rx::DisplayEGL"*, %"class.std::__1::basic_string"*, i8*, %"class.std::__1::vector.62"*)*, %"class.rx::WorkerContext"* (%"class.rx::DisplayEGL"*, %"class.std::__1::basic_string"*, i8*, %"class.std::__1::vector.62"*)** %42, i64 41
  %44 = load %"class.rx::WorkerContext"* (%"class.rx::DisplayEGL"*, %"class.std::__1::basic_string"*, i8*, %"class.std::__1::vector.62"*)*, %"class.rx::WorkerContext"* (%"class.rx::DisplayEGL"*, %"class.std::__1::basic_string"*, i8*, %"class.std::__1::vector.62"*)** %43, align 8
  %45 = call %"class.rx::WorkerContext"* %44(%"class.rx::DisplayEGL"* %5, %"class.std::__1::basic_string"* %1, i8* %7, %"class.std::__1::vector.62"* nonnull %3) #8
  %46 = getelementptr inbounds %"class.std::__1::vector.62", %"class.std::__1::vector.62"* %3, i64 0, i32 0, i32 0
  %47 = load i32*, i32** %46, align 8
  %48 = icmp eq i32* %47, null
  br i1 %48, label %54, label %49

49:                                               ; preds = %40
  %50 = ptrtoint i32* %47 to i64
  %51 = getelementptr inbounds %"class.std::__1::vector.62", %"class.std::__1::vector.62"* %3, i64 0, i32 0, i32 1
  %52 = bitcast i32** %51 to i64*
  store i64 %50, i64* %52, align 8
  %53 = bitcast i32* %47 to i8*
  call void @_ZdlPv(i8* %53) #10
  br label %54

54:                                               ; preds = %40, %49
  ret %"class.rx::WorkerContext"* %45
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
