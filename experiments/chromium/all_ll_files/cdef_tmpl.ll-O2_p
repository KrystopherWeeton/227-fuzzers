; ModuleID = '../../third_party/dav1d/libdav1d/src/cdef_tmpl.c'
source_filename = "../../third_party/dav1d/libdav1d/src/cdef_tmpl.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Dav1dCdefDSPContext = type { i32 (i8*, i64, i32*)*, [3 x void (i8*, i64, [2 x i8]*, i8*, i32, i32, i32, i32, i32)*] }

@dav1d_cdef_directions = external local_unnamed_addr constant [12 x [2 x i8]], align 16

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @dav1d_cdef_dsp_init_8bpc(%struct.Dav1dCdefDSPContext*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.Dav1dCdefDSPContext, %struct.Dav1dCdefDSPContext* %0, i64 0, i32 0
  store i32 (i8*, i64, i32*)* @cdef_find_dir_c, i32 (i8*, i64, i32*)** %2, align 8
  %3 = getelementptr inbounds %struct.Dav1dCdefDSPContext, %struct.Dav1dCdefDSPContext* %0, i64 0, i32 1, i64 0
  %4 = bitcast void (i8*, i64, [2 x i8]*, i8*, i32, i32, i32, i32, i32)** %3 to <2 x void (i8*, i64, [2 x i8]*, i8*, i32, i32, i32, i32, i32)*>*
  store <2 x void (i8*, i64, [2 x i8]*, i8*, i32, i32, i32, i32, i32)*> <void (i8*, i64, [2 x i8]*, i8*, i32, i32, i32, i32, i32)* @cdef_filter_block_8x8_c, void (i8*, i64, [2 x i8]*, i8*, i32, i32, i32, i32, i32)* @cdef_filter_block_4x8_c>, <2 x void (i8*, i64, [2 x i8]*, i8*, i32, i32, i32, i32, i32)*>* %4, align 8
  %5 = getelementptr inbounds %struct.Dav1dCdefDSPContext, %struct.Dav1dCdefDSPContext* %0, i64 0, i32 1, i64 2
  store void (i8*, i64, [2 x i8]*, i8*, i32, i32, i32, i32, i32)* @cdef_filter_block_4x4_c, void (i8*, i64, [2 x i8]*, i8*, i32, i32, i32, i32, i32)** %5, align 8
  tail call void @dav1d_cdef_dsp_init_x86_8bpc(%struct.Dav1dCdefDSPContext* %0) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @cdef_find_dir_c(i8* nocapture readonly, i64, i32* nocapture) #1 {
  %4 = alloca [2 x [8 x i32]], align 16
  %5 = alloca [2 x [15 x i32]], align 16
  %6 = alloca [4 x [11 x i32]], align 16
  %7 = alloca [8 x i32], align 16
  %8 = bitcast [2 x [8 x i32]]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 64, i1 false)
  %9 = bitcast [2 x [15 x i32]]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %9) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 0, i64 120, i1 false)
  %10 = bitcast [4 x [11 x i32]]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 176, i8* nonnull %10) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 0, i64 176, i1 false)
  br label %11

11:                                               ; preds = %227, %3
  %12 = phi i64 [ 0, %3 ], [ %229, %227 ]
  %13 = phi i8* [ %0, %3 ], [ %228, %227 ]
  %14 = getelementptr inbounds [2 x [8 x i32]], [2 x [8 x i32]]* %4, i64 0, i64 0, i64 %12
  %15 = add nuw nsw i64 %12, 7
  %16 = trunc i64 %12 to i32
  %17 = lshr i32 %16, 1
  %18 = sub nsw i32 3, %17
  %19 = zext i32 %17 to i64
  %20 = zext i32 %18 to i64
  %21 = trunc i64 %12 to i32
  %22 = add i32 %21, 3
  br label %231

23:                                               ; preds = %227
  %24 = bitcast [8 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %24) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 0, i64 32, i1 false)
  %25 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 2
  %26 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 6
  %27 = getelementptr inbounds [2 x [8 x i32]], [2 x [8 x i32]]* %4, i64 0, i64 0, i64 0
  %28 = load i32, i32* %27, align 16
  %29 = mul nsw i32 %28, %28
  %30 = getelementptr inbounds [2 x [8 x i32]], [2 x [8 x i32]]* %4, i64 0, i64 1, i64 0
  %31 = load i32, i32* %30, align 16
  %32 = mul nsw i32 %31, %31
  %33 = getelementptr inbounds [2 x [8 x i32]], [2 x [8 x i32]]* %4, i64 0, i64 0, i64 1
  %34 = load i32, i32* %33, align 4
  %35 = mul nsw i32 %34, %34
  %36 = add nuw i32 %29, %35
  %37 = getelementptr inbounds [2 x [8 x i32]], [2 x [8 x i32]]* %4, i64 0, i64 1, i64 1
  %38 = load i32, i32* %37, align 4
  %39 = mul nsw i32 %38, %38
  %40 = add nuw i32 %32, %39
  %41 = getelementptr inbounds [2 x [8 x i32]], [2 x [8 x i32]]* %4, i64 0, i64 0, i64 2
  %42 = load i32, i32* %41, align 8
  %43 = mul nsw i32 %42, %42
  %44 = add i32 %36, %43
  %45 = getelementptr inbounds [2 x [8 x i32]], [2 x [8 x i32]]* %4, i64 0, i64 1, i64 2
  %46 = load i32, i32* %45, align 8
  %47 = mul nsw i32 %46, %46
  %48 = add i32 %40, %47
  %49 = getelementptr inbounds [2 x [8 x i32]], [2 x [8 x i32]]* %4, i64 0, i64 0, i64 3
  %50 = load i32, i32* %49, align 4
  %51 = mul nsw i32 %50, %50
  %52 = add i32 %44, %51
  %53 = getelementptr inbounds [2 x [8 x i32]], [2 x [8 x i32]]* %4, i64 0, i64 1, i64 3
  %54 = load i32, i32* %53, align 4
  %55 = mul nsw i32 %54, %54
  %56 = add i32 %48, %55
  %57 = getelementptr inbounds [2 x [8 x i32]], [2 x [8 x i32]]* %4, i64 0, i64 0, i64 4
  %58 = load i32, i32* %57, align 16
  %59 = mul nsw i32 %58, %58
  %60 = add i32 %52, %59
  %61 = getelementptr inbounds [2 x [8 x i32]], [2 x [8 x i32]]* %4, i64 0, i64 1, i64 4
  %62 = load i32, i32* %61, align 16
  %63 = mul nsw i32 %62, %62
  %64 = add i32 %56, %63
  %65 = getelementptr inbounds [2 x [8 x i32]], [2 x [8 x i32]]* %4, i64 0, i64 0, i64 5
  %66 = load i32, i32* %65, align 4
  %67 = mul nsw i32 %66, %66
  %68 = add i32 %60, %67
  %69 = getelementptr inbounds [2 x [8 x i32]], [2 x [8 x i32]]* %4, i64 0, i64 1, i64 5
  %70 = load i32, i32* %69, align 4
  %71 = mul nsw i32 %70, %70
  %72 = add i32 %64, %71
  %73 = getelementptr inbounds [2 x [8 x i32]], [2 x [8 x i32]]* %4, i64 0, i64 0, i64 6
  %74 = load i32, i32* %73, align 8
  %75 = mul nsw i32 %74, %74
  %76 = add i32 %68, %75
  %77 = getelementptr inbounds [2 x [8 x i32]], [2 x [8 x i32]]* %4, i64 0, i64 1, i64 6
  %78 = load i32, i32* %77, align 8
  %79 = mul nsw i32 %78, %78
  %80 = add i32 %72, %79
  %81 = getelementptr inbounds [2 x [8 x i32]], [2 x [8 x i32]]* %4, i64 0, i64 0, i64 7
  %82 = load i32, i32* %81, align 4
  %83 = mul nsw i32 %82, %82
  %84 = add i32 %76, %83
  %85 = getelementptr inbounds [2 x [8 x i32]], [2 x [8 x i32]]* %4, i64 0, i64 1, i64 7
  %86 = load i32, i32* %85, align 4
  %87 = mul nsw i32 %86, %86
  %88 = add i32 %80, %87
  %89 = mul i32 %84, 105
  store i32 %89, i32* %25, align 8
  %90 = mul i32 %88, 105
  store i32 %90, i32* %26, align 8
  %91 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 0
  %92 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 4
  %93 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 0, i64 0
  %94 = load i32, i32* %93, align 16
  %95 = mul nsw i32 %94, %94
  %96 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 0, i64 14
  %97 = load i32, i32* %96, align 8
  %98 = mul nsw i32 %97, %97
  %99 = add nuw nsw i32 %98, %95
  %100 = mul nsw i32 %99, 840
  %101 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 1, i64 0
  %102 = load i32, i32* %101, align 4
  %103 = mul nsw i32 %102, %102
  %104 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 1, i64 14
  %105 = load i32, i32* %104, align 4
  %106 = mul nsw i32 %105, %105
  %107 = add nuw nsw i32 %106, %103
  %108 = mul nsw i32 %107, 840
  %109 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 0, i64 1
  %110 = load i32, i32* %109, align 4
  %111 = mul nsw i32 %110, %110
  %112 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 0, i64 13
  %113 = load i32, i32* %112, align 4
  %114 = mul nsw i32 %113, %113
  %115 = add nuw nsw i32 %114, %111
  %116 = mul nsw i32 %115, 420
  %117 = add nuw i32 %116, %100
  %118 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 1, i64 1
  %119 = load i32, i32* %118, align 4
  %120 = mul nsw i32 %119, %119
  %121 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 1, i64 13
  %122 = load i32, i32* %121, align 4
  %123 = mul nsw i32 %122, %122
  %124 = add nuw nsw i32 %123, %120
  %125 = mul nsw i32 %124, 420
  %126 = add nuw i32 %125, %108
  %127 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 0, i64 2
  %128 = load i32, i32* %127, align 8
  %129 = mul nsw i32 %128, %128
  %130 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 0, i64 12
  %131 = load i32, i32* %130, align 16
  %132 = mul nsw i32 %131, %131
  %133 = add nuw nsw i32 %132, %129
  %134 = mul nsw i32 %133, 280
  %135 = add i32 %134, %117
  %136 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 1, i64 2
  %137 = load i32, i32* %136, align 4
  %138 = mul nsw i32 %137, %137
  %139 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 1, i64 12
  %140 = load i32, i32* %139, align 4
  %141 = mul nsw i32 %140, %140
  %142 = add nuw nsw i32 %141, %138
  %143 = mul nsw i32 %142, 280
  %144 = add i32 %143, %126
  %145 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 0, i64 3
  %146 = load i32, i32* %145, align 4
  %147 = mul nsw i32 %146, %146
  %148 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 0, i64 11
  %149 = load i32, i32* %148, align 4
  %150 = mul nsw i32 %149, %149
  %151 = add nuw nsw i32 %150, %147
  %152 = mul nsw i32 %151, 210
  %153 = add i32 %152, %135
  %154 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 1, i64 3
  %155 = load i32, i32* %154, align 4
  %156 = mul nsw i32 %155, %155
  %157 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 1, i64 11
  %158 = load i32, i32* %157, align 4
  %159 = mul nsw i32 %158, %158
  %160 = add nuw nsw i32 %159, %156
  %161 = mul nsw i32 %160, 210
  %162 = add i32 %161, %144
  %163 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 0, i64 4
  %164 = load i32, i32* %163, align 16
  %165 = mul nsw i32 %164, %164
  %166 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 0, i64 10
  %167 = load i32, i32* %166, align 8
  %168 = mul nsw i32 %167, %167
  %169 = add nuw nsw i32 %168, %165
  %170 = mul nsw i32 %169, 168
  %171 = add i32 %170, %153
  %172 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 1, i64 4
  %173 = load i32, i32* %172, align 4
  %174 = mul nsw i32 %173, %173
  %175 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 1, i64 10
  %176 = load i32, i32* %175, align 4
  %177 = mul nsw i32 %176, %176
  %178 = add nuw nsw i32 %177, %174
  %179 = mul nsw i32 %178, 168
  %180 = add i32 %179, %162
  %181 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 0, i64 5
  %182 = load i32, i32* %181, align 4
  %183 = mul nsw i32 %182, %182
  %184 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 0, i64 9
  %185 = load i32, i32* %184, align 4
  %186 = mul nsw i32 %185, %185
  %187 = add nuw nsw i32 %186, %183
  %188 = mul nsw i32 %187, 140
  %189 = add i32 %188, %171
  %190 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 1, i64 5
  %191 = load i32, i32* %190, align 4
  %192 = mul nsw i32 %191, %191
  %193 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 1, i64 9
  %194 = load i32, i32* %193, align 4
  %195 = mul nsw i32 %194, %194
  %196 = add nuw nsw i32 %195, %192
  %197 = mul nsw i32 %196, 140
  %198 = add i32 %197, %180
  %199 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 0, i64 6
  %200 = load i32, i32* %199, align 8
  %201 = mul nsw i32 %200, %200
  %202 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 0, i64 8
  %203 = load i32, i32* %202, align 16
  %204 = mul nsw i32 %203, %203
  %205 = add nuw nsw i32 %204, %201
  %206 = mul nsw i32 %205, 120
  %207 = add i32 %206, %189
  %208 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 1, i64 6
  %209 = load i32, i32* %208, align 4
  %210 = mul nsw i32 %209, %209
  %211 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 1, i64 8
  %212 = load i32, i32* %211, align 4
  %213 = mul nsw i32 %212, %212
  %214 = add nuw nsw i32 %213, %210
  %215 = mul nsw i32 %214, 120
  %216 = add i32 %215, %198
  %217 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 0, i64 7
  %218 = load i32, i32* %217, align 4
  %219 = mul i32 %218, 105
  %220 = mul i32 %219, %218
  %221 = add i32 %220, %207
  store i32 %221, i32* %91, align 16
  %222 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 1, i64 7
  %223 = load i32, i32* %222, align 4
  %224 = mul i32 %223, 105
  %225 = mul i32 %224, %223
  %226 = add i32 %225, %216
  store i32 %226, i32* %92, align 16
  br label %310

227:                                              ; preds = %231
  %228 = getelementptr inbounds i8, i8* %13, i64 %1
  %229 = add nuw nsw i64 %12, 1
  %230 = icmp eq i64 %229, 8
  br i1 %230, label %23, label %11

231:                                              ; preds = %231, %11
  %232 = phi i64 [ 0, %11 ], [ %270, %231 ]
  %233 = getelementptr inbounds i8, i8* %13, i64 %232
  %234 = load i8, i8* %233, align 1
  %235 = zext i8 %234 to i32
  %236 = add nsw i32 %235, -128
  %237 = add nuw nsw i64 %232, %12
  %238 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 0, i64 %237
  %239 = load i32, i32* %238, align 4
  %240 = add nsw i32 %236, %239
  store i32 %240, i32* %238, align 4
  %241 = trunc i64 %232 to i32
  %242 = lshr i32 %241, 1
  %243 = add nuw nsw i32 %242, %16
  %244 = zext i32 %243 to i64
  %245 = getelementptr inbounds [4 x [11 x i32]], [4 x [11 x i32]]* %6, i64 0, i64 0, i64 %244
  %246 = load i32, i32* %245, align 4
  %247 = add nsw i32 %246, %236
  store i32 %247, i32* %245, align 4
  %248 = load i32, i32* %14, align 4
  %249 = add nsw i32 %248, %236
  store i32 %249, i32* %14, align 4
  %250 = sub nsw i32 %22, %242
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds [4 x [11 x i32]], [4 x [11 x i32]]* %6, i64 0, i64 1, i64 %251
  %253 = load i32, i32* %252, align 4
  %254 = add nsw i32 %253, %236
  store i32 %254, i32* %252, align 4
  %255 = sub nuw nsw i64 %15, %232
  %256 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* %5, i64 0, i64 1, i64 %255
  %257 = load i32, i32* %256, align 4
  %258 = add nsw i32 %257, %236
  store i32 %258, i32* %256, align 4
  %259 = add nuw nsw i64 %232, %20
  %260 = getelementptr inbounds [4 x [11 x i32]], [4 x [11 x i32]]* %6, i64 0, i64 2, i64 %259
  %261 = load i32, i32* %260, align 4
  %262 = add nsw i32 %261, %236
  store i32 %262, i32* %260, align 4
  %263 = getelementptr inbounds [2 x [8 x i32]], [2 x [8 x i32]]* %4, i64 0, i64 1, i64 %232
  %264 = load i32, i32* %263, align 4
  %265 = add nsw i32 %264, %236
  store i32 %265, i32* %263, align 4
  %266 = add nuw nsw i64 %232, %19
  %267 = getelementptr inbounds [4 x [11 x i32]], [4 x [11 x i32]]* %6, i64 0, i64 3, i64 %266
  %268 = load i32, i32* %267, align 4
  %269 = add nsw i32 %268, %236
  store i32 %269, i32* %267, align 4
  %270 = add nuw nsw i64 %232, 1
  %271 = icmp eq i64 %270, 8
  br i1 %271, label %227, label %231

272:                                              ; preds = %310
  %273 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 1
  %274 = load i32, i32* %273, align 4
  %275 = icmp ugt i32 %274, %221
  %276 = zext i1 %275 to i32
  %277 = select i1 %275, i32 %274, i32 %221
  %278 = load i32, i32* %25, align 8
  %279 = icmp ugt i32 %278, %277
  %280 = select i1 %279, i32 2, i32 %276
  %281 = select i1 %279, i32 %278, i32 %277
  %282 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 3
  %283 = load i32, i32* %282, align 4
  %284 = icmp ugt i32 %283, %281
  %285 = select i1 %284, i32 3, i32 %280
  %286 = select i1 %284, i32 %283, i32 %281
  %287 = icmp ugt i32 %226, %286
  %288 = select i1 %287, i32 4, i32 %285
  %289 = select i1 %287, i32 %226, i32 %286
  %290 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 5
  %291 = load i32, i32* %290, align 4
  %292 = icmp ugt i32 %291, %289
  %293 = select i1 %292, i32 5, i32 %288
  %294 = select i1 %292, i32 %291, i32 %289
  %295 = load i32, i32* %26, align 8
  %296 = icmp ugt i32 %295, %294
  %297 = select i1 %296, i32 6, i32 %293
  %298 = select i1 %296, i32 %295, i32 %294
  %299 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 7
  %300 = load i32, i32* %299, align 4
  %301 = icmp ugt i32 %300, %298
  %302 = select i1 %301, i32 7, i32 %297
  %303 = select i1 %301, i32 %300, i32 %298
  %304 = xor i32 %302, 4
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 %305
  %307 = load i32, i32* %306, align 4
  %308 = sub i32 %303, %307
  %309 = lshr i32 %308, 10
  store i32 %309, i32* %2, align 4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #6
  call void @llvm.lifetime.end.p0i8(i64 176, i8* nonnull %10) #6
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #6
  ret i32 %302

310:                                              ; preds = %310, %23
  %311 = phi i64 [ 0, %23 ], [ %364, %310 ]
  %312 = shl nuw nsw i64 %311, 1
  %313 = or i64 %312, 1
  %314 = getelementptr inbounds [8 x i32], [8 x i32]* %7, i64 0, i64 %313
  %315 = load i32, i32* %314, align 4
  %316 = getelementptr inbounds [4 x [11 x i32]], [4 x [11 x i32]]* %6, i64 0, i64 %311, i64 3
  %317 = load i32, i32* %316, align 4
  %318 = mul nsw i32 %317, %317
  %319 = add i32 %315, %318
  %320 = getelementptr inbounds [4 x [11 x i32]], [4 x [11 x i32]]* %6, i64 0, i64 %311, i64 4
  %321 = load i32, i32* %320, align 4
  %322 = mul nsw i32 %321, %321
  %323 = add i32 %319, %322
  %324 = getelementptr inbounds [4 x [11 x i32]], [4 x [11 x i32]]* %6, i64 0, i64 %311, i64 5
  %325 = load i32, i32* %324, align 4
  %326 = mul nsw i32 %325, %325
  %327 = add i32 %323, %326
  %328 = getelementptr inbounds [4 x [11 x i32]], [4 x [11 x i32]]* %6, i64 0, i64 %311, i64 6
  %329 = load i32, i32* %328, align 4
  %330 = mul nsw i32 %329, %329
  %331 = add i32 %327, %330
  %332 = getelementptr inbounds [4 x [11 x i32]], [4 x [11 x i32]]* %6, i64 0, i64 %311, i64 7
  %333 = load i32, i32* %332, align 4
  %334 = mul nsw i32 %333, %333
  %335 = add i32 %331, %334
  %336 = mul i32 %335, 105
  %337 = getelementptr inbounds [4 x [11 x i32]], [4 x [11 x i32]]* %6, i64 0, i64 %311, i64 0
  %338 = load i32, i32* %337, align 4
  %339 = mul nsw i32 %338, %338
  %340 = getelementptr inbounds [4 x [11 x i32]], [4 x [11 x i32]]* %6, i64 0, i64 %311, i64 10
  %341 = load i32, i32* %340, align 4
  %342 = mul nsw i32 %341, %341
  %343 = add nuw nsw i32 %342, %339
  %344 = mul nsw i32 %343, 420
  %345 = add i32 %344, %336
  %346 = getelementptr inbounds [4 x [11 x i32]], [4 x [11 x i32]]* %6, i64 0, i64 %311, i64 1
  %347 = load i32, i32* %346, align 4
  %348 = mul nsw i32 %347, %347
  %349 = getelementptr inbounds [4 x [11 x i32]], [4 x [11 x i32]]* %6, i64 0, i64 %311, i64 9
  %350 = load i32, i32* %349, align 4
  %351 = mul nsw i32 %350, %350
  %352 = add nuw nsw i32 %351, %348
  %353 = mul nsw i32 %352, 210
  %354 = add i32 %353, %345
  %355 = getelementptr inbounds [4 x [11 x i32]], [4 x [11 x i32]]* %6, i64 0, i64 %311, i64 2
  %356 = load i32, i32* %355, align 4
  %357 = mul nsw i32 %356, %356
  %358 = getelementptr inbounds [4 x [11 x i32]], [4 x [11 x i32]]* %6, i64 0, i64 %311, i64 8
  %359 = load i32, i32* %358, align 4
  %360 = mul nsw i32 %359, %359
  %361 = add nuw nsw i32 %360, %357
  %362 = mul nsw i32 %361, 140
  %363 = add i32 %362, %354
  store i32 %363, i32* %314, align 4
  %364 = add nuw nsw i64 %311, 1
  %365 = icmp eq i64 %364, 4
  br i1 %365, label %272, label %310
}

; Function Attrs: nounwind ssp uwtable
define internal void @cdef_filter_block_8x8_c(i8* nocapture, i64, [2 x i8]* nocapture readonly, i8* nocapture readonly, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @cdef_filter_block_c(i8* %0, i64 %1, [2 x i8]* %2, i8* %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 8, i32 8, i32 %8)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @cdef_filter_block_4x8_c(i8* nocapture, i64, [2 x i8]* nocapture readonly, i8* nocapture readonly, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @cdef_filter_block_c(i8* %0, i64 %1, [2 x i8]* %2, i8* %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 4, i32 8, i32 %8)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @cdef_filter_block_4x4_c(i8* nocapture, i64, [2 x i8]* nocapture readonly, i8* nocapture readonly, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @cdef_filter_block_c(i8* %0, i64 %1, [2 x i8]* %2, i8* %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 4, i32 4, i32 %8)
  ret void
}

declare void @dav1d_cdef_dsp_init_x86_8bpc(%struct.Dav1dCdefDSPContext*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @cdef_filter_block_c(i8* nocapture, i64, [2 x i8]* nocapture readonly, i8* nocapture readonly, i32, i32, i32, i32, i32, i32, i32) unnamed_addr #4 {
  %12 = alloca [144 x i16], align 16
  %13 = icmp eq i32 %8, 4
  %14 = icmp eq i32 %8, 8
  %15 = or i1 %13, %14
  tail call void @llvm.assume(i1 %15)
  %16 = icmp eq i32 %9, 4
  %17 = icmp eq i32 %9, 8
  %18 = or i1 %16, %17
  tail call void @llvm.assume(i1 %18)
  %19 = bitcast [144 x i16]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %19) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -86, i64 288, i1 false)
  %20 = getelementptr inbounds [144 x i16], [144 x i16]* %12, i64 0, i64 26
  %21 = add nsw i32 %8, 2
  %22 = add nsw i32 %9, 2
  %23 = and i32 %10, 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %181

25:                                               ; preds = %11
  %26 = add nsw i32 %8, 4
  %27 = icmp sgt i32 %26, 0
  %28 = zext i32 %26 to i64
  br i1 %27, label %29, label %181

29:                                               ; preds = %25
  %30 = icmp ult i32 %26, 16
  br i1 %30, label %31, label %33

31:                                               ; preds = %100, %29
  %32 = phi i64 [ 0, %29 ], [ %34, %100 ]
  br label %176

33:                                               ; preds = %29
  %34 = and i64 %28, 4294967280
  %35 = add nsw i64 %34, -16
  %36 = lshr exact i64 %35, 4
  %37 = add nuw nsw i64 %36, 1
  %38 = and i64 %37, 7
  %39 = icmp ult i64 %35, 112
  br i1 %39, label %87, label %40

40:                                               ; preds = %33
  %41 = sub nsw i64 %37, %38
  br label %42

42:                                               ; preds = %42, %40
  %43 = phi i64 [ 0, %40 ], [ %84, %42 ]
  %44 = phi i64 [ %41, %40 ], [ %85, %42 ]
  %45 = getelementptr inbounds [144 x i16], [144 x i16]* %12, i64 0, i64 %43
  %46 = bitcast i16* %45 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %46, align 16
  %47 = getelementptr inbounds i16, i16* %45, i64 8
  %48 = bitcast i16* %47 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %48, align 16
  %49 = or i64 %43, 16
  %50 = getelementptr inbounds [144 x i16], [144 x i16]* %12, i64 0, i64 %49
  %51 = bitcast i16* %50 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %51, align 16
  %52 = getelementptr inbounds i16, i16* %50, i64 8
  %53 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %53, align 16
  %54 = or i64 %43, 32
  %55 = getelementptr inbounds [144 x i16], [144 x i16]* %12, i64 0, i64 %54
  %56 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %56, align 16
  %57 = getelementptr inbounds i16, i16* %55, i64 8
  %58 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %58, align 16
  %59 = or i64 %43, 48
  %60 = getelementptr inbounds [144 x i16], [144 x i16]* %12, i64 0, i64 %59
  %61 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %61, align 16
  %62 = getelementptr inbounds i16, i16* %60, i64 8
  %63 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %63, align 16
  %64 = or i64 %43, 64
  %65 = getelementptr inbounds [144 x i16], [144 x i16]* %12, i64 0, i64 %64
  %66 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %66, align 16
  %67 = getelementptr inbounds i16, i16* %65, i64 8
  %68 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %68, align 16
  %69 = or i64 %43, 80
  %70 = getelementptr inbounds [144 x i16], [144 x i16]* %12, i64 0, i64 %69
  %71 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %71, align 16
  %72 = getelementptr inbounds i16, i16* %70, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %73, align 16
  %74 = or i64 %43, 96
  %75 = getelementptr inbounds [144 x i16], [144 x i16]* %12, i64 0, i64 %74
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %76, align 16
  %77 = getelementptr inbounds i16, i16* %75, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %78, align 16
  %79 = or i64 %43, 112
  %80 = getelementptr inbounds [144 x i16], [144 x i16]* %12, i64 0, i64 %79
  %81 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %81, align 16
  %82 = getelementptr inbounds i16, i16* %80, i64 8
  %83 = bitcast i16* %82 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %83, align 16
  %84 = add i64 %43, 128
  %85 = add i64 %44, -8
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %42, !llvm.loop !2

87:                                               ; preds = %42, %33
  %88 = phi i64 [ 0, %33 ], [ %84, %42 ]
  %89 = icmp eq i64 %38, 0
  br i1 %89, label %100, label %90

90:                                               ; preds = %87, %90
  %91 = phi i64 [ %97, %90 ], [ %88, %87 ]
  %92 = phi i64 [ %98, %90 ], [ %38, %87 ]
  %93 = getelementptr inbounds [144 x i16], [144 x i16]* %12, i64 0, i64 %91
  %94 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %94, align 16
  %95 = getelementptr inbounds i16, i16* %93, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %96, align 16
  %97 = add i64 %91, 16
  %98 = add i64 %92, -1
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %90, !llvm.loop !4

100:                                              ; preds = %90, %87
  %101 = icmp eq i64 %34, %28
  br i1 %101, label %102, label %31

102:                                              ; preds = %176, %100
  %103 = getelementptr inbounds [144 x i16], [144 x i16]* %12, i64 0, i64 12
  %104 = icmp ult i32 %26, 16
  br i1 %104, label %105, label %107

105:                                              ; preds = %174, %102
  %106 = phi i64 [ 0, %102 ], [ %108, %174 ]
  br label %790

107:                                              ; preds = %102
  %108 = and i64 %28, 4294967280
  %109 = add nsw i64 %108, -16
  %110 = lshr exact i64 %109, 4
  %111 = add nuw nsw i64 %110, 1
  %112 = and i64 %111, 7
  %113 = icmp ult i64 %109, 112
  br i1 %113, label %161, label %114

114:                                              ; preds = %107
  %115 = sub nsw i64 %111, %112
  br label %116

116:                                              ; preds = %116, %114
  %117 = phi i64 [ 0, %114 ], [ %158, %116 ]
  %118 = phi i64 [ %115, %114 ], [ %159, %116 ]
  %119 = getelementptr inbounds i16, i16* %103, i64 %117
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %120, align 8
  %121 = getelementptr inbounds i16, i16* %119, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %122, align 8
  %123 = or i64 %117, 16
  %124 = getelementptr inbounds i16, i16* %103, i64 %123
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %125, align 8
  %126 = getelementptr inbounds i16, i16* %124, i64 8
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %127, align 8
  %128 = or i64 %117, 32
  %129 = getelementptr inbounds i16, i16* %103, i64 %128
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %130, align 8
  %131 = getelementptr inbounds i16, i16* %129, i64 8
  %132 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %132, align 8
  %133 = or i64 %117, 48
  %134 = getelementptr inbounds i16, i16* %103, i64 %133
  %135 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %135, align 8
  %136 = getelementptr inbounds i16, i16* %134, i64 8
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %137, align 8
  %138 = or i64 %117, 64
  %139 = getelementptr inbounds i16, i16* %103, i64 %138
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %140, align 8
  %141 = getelementptr inbounds i16, i16* %139, i64 8
  %142 = bitcast i16* %141 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %142, align 8
  %143 = or i64 %117, 80
  %144 = getelementptr inbounds i16, i16* %103, i64 %143
  %145 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %145, align 8
  %146 = getelementptr inbounds i16, i16* %144, i64 8
  %147 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %147, align 8
  %148 = or i64 %117, 96
  %149 = getelementptr inbounds i16, i16* %103, i64 %148
  %150 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %150, align 8
  %151 = getelementptr inbounds i16, i16* %149, i64 8
  %152 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %152, align 8
  %153 = or i64 %117, 112
  %154 = getelementptr inbounds i16, i16* %103, i64 %153
  %155 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %155, align 8
  %156 = getelementptr inbounds i16, i16* %154, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %157, align 8
  %158 = add i64 %117, 128
  %159 = add i64 %118, -8
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %161, label %116, !llvm.loop !6

161:                                              ; preds = %116, %107
  %162 = phi i64 [ 0, %107 ], [ %158, %116 ]
  %163 = icmp eq i64 %112, 0
  br i1 %163, label %174, label %164

164:                                              ; preds = %161, %164
  %165 = phi i64 [ %171, %164 ], [ %162, %161 ]
  %166 = phi i64 [ %172, %164 ], [ %112, %161 ]
  %167 = getelementptr inbounds i16, i16* %103, i64 %165
  %168 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %168, align 8
  %169 = getelementptr inbounds i16, i16* %167, i64 8
  %170 = bitcast i16* %169 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %170, align 8
  %171 = add i64 %165, 16
  %172 = add i64 %166, -1
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %164, !llvm.loop !7

174:                                              ; preds = %164, %161
  %175 = icmp eq i64 %108, %28
  br i1 %175, label %181, label %105

176:                                              ; preds = %31, %176
  %177 = phi i64 [ %179, %176 ], [ %32, %31 ]
  %178 = getelementptr inbounds [144 x i16], [144 x i16]* %12, i64 0, i64 %177
  store i16 -32768, i16* %178, align 2
  %179 = add nuw nsw i64 %177, 1
  %180 = icmp eq i64 %179, %28
  br i1 %180, label %102, label %176, !llvm.loop !8

181:                                              ; preds = %790, %174, %25, %11
  %182 = phi i32 [ -2, %11 ], [ 0, %25 ], [ 0, %174 ], [ 0, %790 ]
  %183 = and i32 %10, 8
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %345

185:                                              ; preds = %181
  %186 = sext i32 %9 to i64
  %187 = mul nsw i64 %186, 12
  %188 = getelementptr inbounds i16, i16* %20, i64 %187
  %189 = getelementptr inbounds i16, i16* %188, i64 -2
  %190 = add nsw i32 %8, 4
  %191 = icmp sgt i32 %190, 0
  %192 = zext i32 %190 to i64
  br i1 %191, label %193, label %345

193:                                              ; preds = %185
  %194 = icmp ult i32 %190, 16
  br i1 %194, label %195, label %197

195:                                              ; preds = %264, %193
  %196 = phi i64 [ 0, %193 ], [ %198, %264 ]
  br label %340

197:                                              ; preds = %193
  %198 = and i64 %192, 4294967280
  %199 = add nsw i64 %198, -16
  %200 = lshr exact i64 %199, 4
  %201 = add nuw nsw i64 %200, 1
  %202 = and i64 %201, 7
  %203 = icmp ult i64 %199, 112
  br i1 %203, label %251, label %204

204:                                              ; preds = %197
  %205 = sub nsw i64 %201, %202
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %248, %206 ]
  %208 = phi i64 [ %205, %204 ], [ %249, %206 ]
  %209 = getelementptr inbounds i16, i16* %189, i64 %207
  %210 = bitcast i16* %209 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %210, align 4
  %211 = getelementptr inbounds i16, i16* %209, i64 8
  %212 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %212, align 2
  %213 = or i64 %207, 16
  %214 = getelementptr inbounds i16, i16* %189, i64 %213
  %215 = bitcast i16* %214 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %215, align 4
  %216 = getelementptr inbounds i16, i16* %214, i64 8
  %217 = bitcast i16* %216 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %217, align 2
  %218 = or i64 %207, 32
  %219 = getelementptr inbounds i16, i16* %189, i64 %218
  %220 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %220, align 4
  %221 = getelementptr inbounds i16, i16* %219, i64 8
  %222 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %222, align 2
  %223 = or i64 %207, 48
  %224 = getelementptr inbounds i16, i16* %189, i64 %223
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %225, align 4
  %226 = getelementptr inbounds i16, i16* %224, i64 8
  %227 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %227, align 2
  %228 = or i64 %207, 64
  %229 = getelementptr inbounds i16, i16* %189, i64 %228
  %230 = bitcast i16* %229 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %230, align 4
  %231 = getelementptr inbounds i16, i16* %229, i64 8
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %232, align 2
  %233 = or i64 %207, 80
  %234 = getelementptr inbounds i16, i16* %189, i64 %233
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %235, align 4
  %236 = getelementptr inbounds i16, i16* %234, i64 8
  %237 = bitcast i16* %236 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %237, align 2
  %238 = or i64 %207, 96
  %239 = getelementptr inbounds i16, i16* %189, i64 %238
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %240, align 4
  %241 = getelementptr inbounds i16, i16* %239, i64 8
  %242 = bitcast i16* %241 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %242, align 2
  %243 = or i64 %207, 112
  %244 = getelementptr inbounds i16, i16* %189, i64 %243
  %245 = bitcast i16* %244 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %245, align 4
  %246 = getelementptr inbounds i16, i16* %244, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %247, align 2
  %248 = add i64 %207, 128
  %249 = add i64 %208, -8
  %250 = icmp eq i64 %249, 0
  br i1 %250, label %251, label %206, !llvm.loop !10

251:                                              ; preds = %206, %197
  %252 = phi i64 [ 0, %197 ], [ %248, %206 ]
  %253 = icmp eq i64 %202, 0
  br i1 %253, label %264, label %254

254:                                              ; preds = %251, %254
  %255 = phi i64 [ %261, %254 ], [ %252, %251 ]
  %256 = phi i64 [ %262, %254 ], [ %202, %251 ]
  %257 = getelementptr inbounds i16, i16* %189, i64 %255
  %258 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %258, align 4
  %259 = getelementptr inbounds i16, i16* %257, i64 8
  %260 = bitcast i16* %259 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %260, align 2
  %261 = add i64 %255, 16
  %262 = add i64 %256, -1
  %263 = icmp eq i64 %262, 0
  br i1 %263, label %264, label %254, !llvm.loop !11

264:                                              ; preds = %254, %251
  %265 = icmp eq i64 %198, %192
  br i1 %265, label %266, label %195

266:                                              ; preds = %340, %264
  %267 = getelementptr inbounds i16, i16* %189, i64 12
  %268 = icmp ult i32 %190, 16
  br i1 %268, label %269, label %271

269:                                              ; preds = %338, %266
  %270 = phi i64 [ 0, %266 ], [ %272, %338 ]
  br label %785

271:                                              ; preds = %266
  %272 = and i64 %192, 4294967280
  %273 = add nsw i64 %272, -16
  %274 = lshr exact i64 %273, 4
  %275 = add nuw nsw i64 %274, 1
  %276 = and i64 %275, 7
  %277 = icmp ult i64 %273, 112
  br i1 %277, label %325, label %278

278:                                              ; preds = %271
  %279 = sub nsw i64 %275, %276
  br label %280

280:                                              ; preds = %280, %278
  %281 = phi i64 [ 0, %278 ], [ %322, %280 ]
  %282 = phi i64 [ %279, %278 ], [ %323, %280 ]
  %283 = getelementptr inbounds i16, i16* %267, i64 %281
  %284 = bitcast i16* %283 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %284, align 2
  %285 = getelementptr inbounds i16, i16* %283, i64 8
  %286 = bitcast i16* %285 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %286, align 2
  %287 = or i64 %281, 16
  %288 = getelementptr inbounds i16, i16* %267, i64 %287
  %289 = bitcast i16* %288 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %289, align 2
  %290 = getelementptr inbounds i16, i16* %288, i64 8
  %291 = bitcast i16* %290 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %291, align 2
  %292 = or i64 %281, 32
  %293 = getelementptr inbounds i16, i16* %267, i64 %292
  %294 = bitcast i16* %293 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %294, align 2
  %295 = getelementptr inbounds i16, i16* %293, i64 8
  %296 = bitcast i16* %295 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %296, align 2
  %297 = or i64 %281, 48
  %298 = getelementptr inbounds i16, i16* %267, i64 %297
  %299 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %299, align 2
  %300 = getelementptr inbounds i16, i16* %298, i64 8
  %301 = bitcast i16* %300 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %301, align 2
  %302 = or i64 %281, 64
  %303 = getelementptr inbounds i16, i16* %267, i64 %302
  %304 = bitcast i16* %303 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %304, align 2
  %305 = getelementptr inbounds i16, i16* %303, i64 8
  %306 = bitcast i16* %305 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %306, align 2
  %307 = or i64 %281, 80
  %308 = getelementptr inbounds i16, i16* %267, i64 %307
  %309 = bitcast i16* %308 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %309, align 2
  %310 = getelementptr inbounds i16, i16* %308, i64 8
  %311 = bitcast i16* %310 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %311, align 2
  %312 = or i64 %281, 96
  %313 = getelementptr inbounds i16, i16* %267, i64 %312
  %314 = bitcast i16* %313 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %314, align 2
  %315 = getelementptr inbounds i16, i16* %313, i64 8
  %316 = bitcast i16* %315 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %316, align 2
  %317 = or i64 %281, 112
  %318 = getelementptr inbounds i16, i16* %267, i64 %317
  %319 = bitcast i16* %318 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %319, align 2
  %320 = getelementptr inbounds i16, i16* %318, i64 8
  %321 = bitcast i16* %320 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %321, align 2
  %322 = add i64 %281, 128
  %323 = add i64 %282, -8
  %324 = icmp eq i64 %323, 0
  br i1 %324, label %325, label %280, !llvm.loop !12

325:                                              ; preds = %280, %271
  %326 = phi i64 [ 0, %271 ], [ %322, %280 ]
  %327 = icmp eq i64 %276, 0
  br i1 %327, label %338, label %328

328:                                              ; preds = %325, %328
  %329 = phi i64 [ %335, %328 ], [ %326, %325 ]
  %330 = phi i64 [ %336, %328 ], [ %276, %325 ]
  %331 = getelementptr inbounds i16, i16* %267, i64 %329
  %332 = bitcast i16* %331 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %332, align 2
  %333 = getelementptr inbounds i16, i16* %331, i64 8
  %334 = bitcast i16* %333 to <8 x i16>*
  store <8 x i16> <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, <8 x i16>* %334, align 2
  %335 = add i64 %329, 16
  %336 = add i64 %330, -1
  %337 = icmp eq i64 %336, 0
  br i1 %337, label %338, label %328, !llvm.loop !13

338:                                              ; preds = %328, %325
  %339 = icmp eq i64 %272, %192
  br i1 %339, label %345, label %269

340:                                              ; preds = %195, %340
  %341 = phi i64 [ %343, %340 ], [ %196, %195 ]
  %342 = getelementptr inbounds i16, i16* %189, i64 %341
  store i16 -32768, i16* %342, align 2
  %343 = add nuw nsw i64 %341, 1
  %344 = icmp eq i64 %343, %192
  br i1 %344, label %266, label %340, !llvm.loop !14

345:                                              ; preds = %785, %338, %185, %181
  %346 = phi i32 [ %22, %181 ], [ %9, %185 ], [ %9, %338 ], [ %9, %785 ]
  %347 = and i32 %10, 1
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %349, label %394

349:                                              ; preds = %345
  %350 = icmp sgt i32 %346, %182
  br i1 %350, label %351, label %394

351:                                              ; preds = %349
  %352 = mul nsw i32 %182, 12
  %353 = sext i32 %352 to i64
  %354 = getelementptr inbounds i16, i16* %20, i64 %353
  %355 = getelementptr inbounds i16, i16* %354, i64 -2
  %356 = sub i32 %346, %182
  %357 = xor i32 %182, -1
  %358 = add i32 %346, %357
  %359 = and i32 %356, 7
  %360 = icmp ult i32 %358, 7
  br i1 %360, label %384, label %361

361:                                              ; preds = %351
  %362 = sub i32 %356, %359
  br label %363

363:                                              ; preds = %363, %361
  %364 = phi i16* [ %355, %361 ], [ %381, %363 ]
  %365 = phi i32 [ %362, %361 ], [ %382, %363 ]
  store i16 -32768, i16* %364, align 2
  %366 = getelementptr inbounds i16, i16* %364, i64 1
  store i16 -32768, i16* %366, align 2
  %367 = getelementptr inbounds i16, i16* %364, i64 12
  store i16 -32768, i16* %367, align 2
  %368 = getelementptr inbounds i16, i16* %364, i64 13
  store i16 -32768, i16* %368, align 2
  %369 = getelementptr inbounds i16, i16* %364, i64 24
  store i16 -32768, i16* %369, align 2
  %370 = getelementptr inbounds i16, i16* %364, i64 25
  store i16 -32768, i16* %370, align 2
  %371 = getelementptr inbounds i16, i16* %364, i64 36
  store i16 -32768, i16* %371, align 2
  %372 = getelementptr inbounds i16, i16* %364, i64 37
  store i16 -32768, i16* %372, align 2
  %373 = getelementptr inbounds i16, i16* %364, i64 48
  store i16 -32768, i16* %373, align 2
  %374 = getelementptr inbounds i16, i16* %364, i64 49
  store i16 -32768, i16* %374, align 2
  %375 = getelementptr inbounds i16, i16* %364, i64 60
  store i16 -32768, i16* %375, align 2
  %376 = getelementptr inbounds i16, i16* %364, i64 61
  store i16 -32768, i16* %376, align 2
  %377 = getelementptr inbounds i16, i16* %364, i64 72
  store i16 -32768, i16* %377, align 2
  %378 = getelementptr inbounds i16, i16* %364, i64 73
  store i16 -32768, i16* %378, align 2
  %379 = getelementptr inbounds i16, i16* %364, i64 84
  store i16 -32768, i16* %379, align 2
  %380 = getelementptr inbounds i16, i16* %364, i64 85
  store i16 -32768, i16* %380, align 2
  %381 = getelementptr inbounds i16, i16* %364, i64 96
  %382 = add i32 %365, -8
  %383 = icmp eq i32 %382, 0
  br i1 %383, label %384, label %363

384:                                              ; preds = %363, %351
  %385 = phi i16* [ %355, %351 ], [ %381, %363 ]
  %386 = icmp eq i32 %359, 0
  br i1 %386, label %394, label %387

387:                                              ; preds = %384, %387
  %388 = phi i16* [ %391, %387 ], [ %385, %384 ]
  %389 = phi i32 [ %392, %387 ], [ %359, %384 ]
  store i16 -32768, i16* %388, align 2
  %390 = getelementptr inbounds i16, i16* %388, i64 1
  store i16 -32768, i16* %390, align 2
  %391 = getelementptr inbounds i16, i16* %388, i64 12
  %392 = add i32 %389, -1
  %393 = icmp eq i32 %392, 0
  br i1 %393, label %394, label %387, !llvm.loop !15

394:                                              ; preds = %384, %387, %349, %345
  %395 = phi i32 [ -2, %345 ], [ 0, %349 ], [ 0, %387 ], [ 0, %384 ]
  %396 = and i32 %10, 2
  %397 = icmp eq i32 %396, 0
  br i1 %397, label %398, label %444

398:                                              ; preds = %394
  %399 = icmp sgt i32 %346, %182
  br i1 %399, label %400, label %444

400:                                              ; preds = %398
  %401 = mul nsw i32 %182, 12
  %402 = sext i32 %401 to i64
  %403 = getelementptr inbounds i16, i16* %20, i64 %402
  %404 = sext i32 %8 to i64
  %405 = getelementptr inbounds i16, i16* %403, i64 %404
  %406 = sub i32 %346, %182
  %407 = xor i32 %182, -1
  %408 = add i32 %346, %407
  %409 = and i32 %406, 7
  %410 = icmp ult i32 %408, 7
  br i1 %410, label %434, label %411

411:                                              ; preds = %400
  %412 = sub i32 %406, %409
  br label %413

413:                                              ; preds = %413, %411
  %414 = phi i16* [ %405, %411 ], [ %431, %413 ]
  %415 = phi i32 [ %412, %411 ], [ %432, %413 ]
  store i16 -32768, i16* %414, align 2
  %416 = getelementptr inbounds i16, i16* %414, i64 1
  store i16 -32768, i16* %416, align 2
  %417 = getelementptr inbounds i16, i16* %414, i64 12
  store i16 -32768, i16* %417, align 2
  %418 = getelementptr inbounds i16, i16* %414, i64 13
  store i16 -32768, i16* %418, align 2
  %419 = getelementptr inbounds i16, i16* %414, i64 24
  store i16 -32768, i16* %419, align 2
  %420 = getelementptr inbounds i16, i16* %414, i64 25
  store i16 -32768, i16* %420, align 2
  %421 = getelementptr inbounds i16, i16* %414, i64 36
  store i16 -32768, i16* %421, align 2
  %422 = getelementptr inbounds i16, i16* %414, i64 37
  store i16 -32768, i16* %422, align 2
  %423 = getelementptr inbounds i16, i16* %414, i64 48
  store i16 -32768, i16* %423, align 2
  %424 = getelementptr inbounds i16, i16* %414, i64 49
  store i16 -32768, i16* %424, align 2
  %425 = getelementptr inbounds i16, i16* %414, i64 60
  store i16 -32768, i16* %425, align 2
  %426 = getelementptr inbounds i16, i16* %414, i64 61
  store i16 -32768, i16* %426, align 2
  %427 = getelementptr inbounds i16, i16* %414, i64 72
  store i16 -32768, i16* %427, align 2
  %428 = getelementptr inbounds i16, i16* %414, i64 73
  store i16 -32768, i16* %428, align 2
  %429 = getelementptr inbounds i16, i16* %414, i64 84
  store i16 -32768, i16* %429, align 2
  %430 = getelementptr inbounds i16, i16* %414, i64 85
  store i16 -32768, i16* %430, align 2
  %431 = getelementptr inbounds i16, i16* %414, i64 96
  %432 = add i32 %415, -8
  %433 = icmp eq i32 %432, 0
  br i1 %433, label %434, label %413

434:                                              ; preds = %413, %400
  %435 = phi i16* [ %405, %400 ], [ %431, %413 ]
  %436 = icmp eq i32 %409, 0
  br i1 %436, label %444, label %437

437:                                              ; preds = %434, %437
  %438 = phi i16* [ %441, %437 ], [ %435, %434 ]
  %439 = phi i32 [ %442, %437 ], [ %409, %434 ]
  store i16 -32768, i16* %438, align 2
  %440 = getelementptr inbounds i16, i16* %438, i64 1
  store i16 -32768, i16* %440, align 2
  %441 = getelementptr inbounds i16, i16* %438, i64 12
  %442 = add i32 %439, -1
  %443 = icmp eq i32 %442, 0
  br i1 %443, label %444, label %437, !llvm.loop !16

444:                                              ; preds = %434, %437, %398, %394
  %445 = phi i32 [ %21, %394 ], [ %8, %398 ], [ %8, %437 ], [ %8, %434 ]
  %446 = icmp slt i32 %182, 0
  br i1 %446, label %447, label %567

447:                                              ; preds = %444
  %448 = icmp slt i32 %395, %445
  %449 = sext i32 %395 to i64
  %450 = sext i32 %182 to i64
  %451 = sext i32 %445 to i64
  %452 = sub nsw i64 %451, %449
  %453 = mul nsw i64 %450, 12
  %454 = add nsw i64 %453, %449
  %455 = add nsw i64 %454, 26
  %456 = add nsw i64 %453, %451
  %457 = add nsw i64 %456, 26
  %458 = sub nsw i64 %451, %449
  %459 = add nsw i64 %458, -16
  %460 = lshr i64 %459, 4
  %461 = add nuw nsw i64 %460, 1
  %462 = icmp ult i64 %452, 16
  %463 = and i64 %452, -16
  %464 = add nsw i64 %463, %449
  %465 = and i64 %461, 1
  %466 = icmp eq i64 %460, 0
  %467 = sub nuw nsw i64 %461, %465
  %468 = icmp eq i64 %465, 0
  %469 = icmp eq i64 %452, %463
  br label %470

470:                                              ; preds = %585, %447
  %471 = phi i64 [ %589, %585 ], [ 0, %447 ]
  %472 = phi i64 [ %587, %585 ], [ %450, %447 ]
  %473 = phi i8* [ %586, %585 ], [ %3, %447 ]
  %474 = mul i64 %471, 12
  %475 = add i64 %455, %474
  %476 = getelementptr [144 x i16], [144 x i16]* %12, i64 0, i64 %475
  %477 = bitcast i16* %476 to i8*
  %478 = add i64 %457, %474
  %479 = getelementptr [144 x i16], [144 x i16]* %12, i64 0, i64 %478
  %480 = bitcast i16* %479 to i8*
  %481 = mul i64 %471, %1
  %482 = add i64 %481, %449
  %483 = getelementptr i8, i8* %3, i64 %482
  %484 = add i64 %481, %451
  %485 = getelementptr i8, i8* %3, i64 %484
  br i1 %448, label %486, label %585

486:                                              ; preds = %470
  %487 = mul nsw i64 %472, 12
  br i1 %462, label %488, label %509

488:                                              ; preds = %566, %509, %486
  %489 = phi i64 [ %449, %509 ], [ %449, %486 ], [ %464, %566 ]
  %490 = sub nsw i64 %451, %489
  %491 = xor i64 %489, -1
  %492 = add nsw i64 %491, %451
  %493 = and i64 %490, 3
  %494 = icmp eq i64 %493, 0
  br i1 %494, label %506, label %495

495:                                              ; preds = %488, %495
  %496 = phi i64 [ %503, %495 ], [ %489, %488 ]
  %497 = phi i64 [ %504, %495 ], [ %493, %488 ]
  %498 = getelementptr inbounds i8, i8* %473, i64 %496
  %499 = load i8, i8* %498, align 1
  %500 = zext i8 %499 to i16
  %501 = add nsw i64 %496, %487
  %502 = getelementptr inbounds i16, i16* %20, i64 %501
  store i16 %500, i16* %502, align 2
  %503 = add nsw i64 %496, 1
  %504 = add i64 %497, -1
  %505 = icmp eq i64 %504, 0
  br i1 %505, label %506, label %495, !llvm.loop !17

506:                                              ; preds = %495, %488
  %507 = phi i64 [ %489, %488 ], [ %503, %495 ]
  %508 = icmp ult i64 %492, 3
  br i1 %508, label %585, label %590

509:                                              ; preds = %486
  %510 = icmp ugt i8* %485, %477
  %511 = icmp ult i8* %483, %480
  %512 = and i1 %510, %511
  br i1 %512, label %488, label %513

513:                                              ; preds = %509
  br i1 %466, label %549, label %514

514:                                              ; preds = %513, %514
  %515 = phi i64 [ %546, %514 ], [ 0, %513 ]
  %516 = phi i64 [ %547, %514 ], [ %467, %513 ]
  %517 = add i64 %515, %449
  %518 = getelementptr inbounds i8, i8* %473, i64 %517
  %519 = bitcast i8* %518 to <8 x i8>*
  %520 = load <8 x i8>, <8 x i8>* %519, align 1, !alias.scope !18
  %521 = getelementptr inbounds i8, i8* %518, i64 8
  %522 = bitcast i8* %521 to <8 x i8>*
  %523 = load <8 x i8>, <8 x i8>* %522, align 1, !alias.scope !18
  %524 = zext <8 x i8> %520 to <8 x i16>
  %525 = zext <8 x i8> %523 to <8 x i16>
  %526 = add nsw i64 %517, %487
  %527 = getelementptr inbounds i16, i16* %20, i64 %526
  %528 = bitcast i16* %527 to <8 x i16>*
  store <8 x i16> %524, <8 x i16>* %528, align 2, !alias.scope !21, !noalias !18
  %529 = getelementptr inbounds i16, i16* %527, i64 8
  %530 = bitcast i16* %529 to <8 x i16>*
  store <8 x i16> %525, <8 x i16>* %530, align 2, !alias.scope !21, !noalias !18
  %531 = or i64 %515, 16
  %532 = add i64 %531, %449
  %533 = getelementptr inbounds i8, i8* %473, i64 %532
  %534 = bitcast i8* %533 to <8 x i8>*
  %535 = load <8 x i8>, <8 x i8>* %534, align 1, !alias.scope !18
  %536 = getelementptr inbounds i8, i8* %533, i64 8
  %537 = bitcast i8* %536 to <8 x i8>*
  %538 = load <8 x i8>, <8 x i8>* %537, align 1, !alias.scope !18
  %539 = zext <8 x i8> %535 to <8 x i16>
  %540 = zext <8 x i8> %538 to <8 x i16>
  %541 = add nsw i64 %532, %487
  %542 = getelementptr inbounds i16, i16* %20, i64 %541
  %543 = bitcast i16* %542 to <8 x i16>*
  store <8 x i16> %539, <8 x i16>* %543, align 2, !alias.scope !21, !noalias !18
  %544 = getelementptr inbounds i16, i16* %542, i64 8
  %545 = bitcast i16* %544 to <8 x i16>*
  store <8 x i16> %540, <8 x i16>* %545, align 2, !alias.scope !21, !noalias !18
  %546 = add i64 %515, 32
  %547 = add i64 %516, -2
  %548 = icmp eq i64 %547, 0
  br i1 %548, label %549, label %514, !llvm.loop !23

549:                                              ; preds = %514, %513
  %550 = phi i64 [ 0, %513 ], [ %546, %514 ]
  br i1 %468, label %566, label %551

551:                                              ; preds = %549
  %552 = add i64 %550, %449
  %553 = getelementptr inbounds i8, i8* %473, i64 %552
  %554 = bitcast i8* %553 to <8 x i8>*
  %555 = load <8 x i8>, <8 x i8>* %554, align 1, !alias.scope !18
  %556 = getelementptr inbounds i8, i8* %553, i64 8
  %557 = bitcast i8* %556 to <8 x i8>*
  %558 = load <8 x i8>, <8 x i8>* %557, align 1, !alias.scope !18
  %559 = zext <8 x i8> %555 to <8 x i16>
  %560 = zext <8 x i8> %558 to <8 x i16>
  %561 = add nsw i64 %552, %487
  %562 = getelementptr inbounds i16, i16* %20, i64 %561
  %563 = bitcast i16* %562 to <8 x i16>*
  store <8 x i16> %559, <8 x i16>* %563, align 2, !alias.scope !21, !noalias !18
  %564 = getelementptr inbounds i16, i16* %562, i64 8
  %565 = bitcast i16* %564 to <8 x i16>*
  store <8 x i16> %560, <8 x i16>* %565, align 2, !alias.scope !21, !noalias !18
  br label %566

566:                                              ; preds = %549, %551
  br i1 %469, label %585, label %488

567:                                              ; preds = %585, %444
  %568 = icmp sgt i32 %9, 0
  br i1 %568, label %569, label %680

569:                                              ; preds = %567
  %570 = icmp slt i32 %395, 0
  %571 = sext i32 %395 to i64
  %572 = zext i32 %9 to i64
  %573 = sub nsw i64 0, %571
  %574 = sub nsw i64 -16, %571
  %575 = lshr i64 %574, 4
  %576 = add nuw nsw i64 %575, 1
  %577 = icmp ult i64 %573, 16
  %578 = and i64 %573, -16
  %579 = add nsw i64 %578, %571
  %580 = and i64 %576, 1
  %581 = icmp eq i64 %575, 0
  %582 = sub nuw nsw i64 %576, %580
  %583 = icmp eq i64 %580, 0
  %584 = icmp eq i64 %578, %573
  br label %617

585:                                              ; preds = %506, %590, %566, %470
  %586 = getelementptr inbounds i8, i8* %473, i64 %1
  %587 = add nsw i64 %472, 1
  %588 = icmp eq i64 %587, 0
  %589 = add i64 %471, 1
  br i1 %588, label %567, label %470

590:                                              ; preds = %506, %590
  %591 = phi i64 [ %615, %590 ], [ %507, %506 ]
  %592 = getelementptr inbounds i8, i8* %473, i64 %591
  %593 = load i8, i8* %592, align 1
  %594 = zext i8 %593 to i16
  %595 = add nsw i64 %591, %487
  %596 = getelementptr inbounds i16, i16* %20, i64 %595
  store i16 %594, i16* %596, align 2
  %597 = add nsw i64 %591, 1
  %598 = getelementptr inbounds i8, i8* %473, i64 %597
  %599 = load i8, i8* %598, align 1
  %600 = zext i8 %599 to i16
  %601 = add nsw i64 %597, %487
  %602 = getelementptr inbounds i16, i16* %20, i64 %601
  store i16 %600, i16* %602, align 2
  %603 = add nsw i64 %591, 2
  %604 = getelementptr inbounds i8, i8* %473, i64 %603
  %605 = load i8, i8* %604, align 1
  %606 = zext i8 %605 to i16
  %607 = add nsw i64 %603, %487
  %608 = getelementptr inbounds i16, i16* %20, i64 %607
  store i16 %606, i16* %608, align 2
  %609 = add nsw i64 %591, 3
  %610 = getelementptr inbounds i8, i8* %473, i64 %609
  %611 = load i8, i8* %610, align 1
  %612 = zext i8 %611 to i16
  %613 = add nsw i64 %609, %487
  %614 = getelementptr inbounds i16, i16* %20, i64 %613
  store i16 %612, i16* %614, align 2
  %615 = add nsw i64 %591, 4
  %616 = icmp eq i64 %615, %451
  br i1 %616, label %585, label %590, !llvm.loop !24

617:                                              ; preds = %684, %569
  %618 = phi i64 [ 0, %569 ], [ %685, %684 ]
  br i1 %570, label %619, label %684

619:                                              ; preds = %617
  %620 = mul nuw nsw i64 %618, 12
  br i1 %577, label %621, label %623

621:                                              ; preds = %679, %619
  %622 = phi i64 [ %571, %619 ], [ %579, %679 ]
  br label %687

623:                                              ; preds = %619
  br i1 %581, label %661, label %624

624:                                              ; preds = %623, %624
  %625 = phi i64 [ %658, %624 ], [ 0, %623 ]
  %626 = phi i64 [ %659, %624 ], [ %582, %623 ]
  %627 = add i64 %625, %571
  %628 = add nsw i64 %627, 2
  %629 = getelementptr inbounds [2 x i8], [2 x i8]* %2, i64 %618, i64 %628
  %630 = bitcast i8* %629 to <8 x i8>*
  %631 = load <8 x i8>, <8 x i8>* %630, align 1
  %632 = getelementptr inbounds i8, i8* %629, i64 8
  %633 = bitcast i8* %632 to <8 x i8>*
  %634 = load <8 x i8>, <8 x i8>* %633, align 1
  %635 = zext <8 x i8> %631 to <8 x i16>
  %636 = zext <8 x i8> %634 to <8 x i16>
  %637 = add nsw i64 %627, %620
  %638 = getelementptr inbounds i16, i16* %20, i64 %637
  %639 = bitcast i16* %638 to <8 x i16>*
  store <8 x i16> %635, <8 x i16>* %639, align 2
  %640 = getelementptr inbounds i16, i16* %638, i64 8
  %641 = bitcast i16* %640 to <8 x i16>*
  store <8 x i16> %636, <8 x i16>* %641, align 2
  %642 = or i64 %625, 16
  %643 = add i64 %642, %571
  %644 = add nsw i64 %643, 2
  %645 = getelementptr inbounds [2 x i8], [2 x i8]* %2, i64 %618, i64 %644
  %646 = bitcast i8* %645 to <8 x i8>*
  %647 = load <8 x i8>, <8 x i8>* %646, align 1
  %648 = getelementptr inbounds i8, i8* %645, i64 8
  %649 = bitcast i8* %648 to <8 x i8>*
  %650 = load <8 x i8>, <8 x i8>* %649, align 1
  %651 = zext <8 x i8> %647 to <8 x i16>
  %652 = zext <8 x i8> %650 to <8 x i16>
  %653 = add nsw i64 %643, %620
  %654 = getelementptr inbounds i16, i16* %20, i64 %653
  %655 = bitcast i16* %654 to <8 x i16>*
  store <8 x i16> %651, <8 x i16>* %655, align 2
  %656 = getelementptr inbounds i16, i16* %654, i64 8
  %657 = bitcast i16* %656 to <8 x i16>*
  store <8 x i16> %652, <8 x i16>* %657, align 2
  %658 = add i64 %625, 32
  %659 = add i64 %626, -2
  %660 = icmp eq i64 %659, 0
  br i1 %660, label %661, label %624, !llvm.loop !25

661:                                              ; preds = %624, %623
  %662 = phi i64 [ 0, %623 ], [ %658, %624 ]
  br i1 %583, label %679, label %663

663:                                              ; preds = %661
  %664 = add i64 %662, %571
  %665 = add nsw i64 %664, 2
  %666 = getelementptr inbounds [2 x i8], [2 x i8]* %2, i64 %618, i64 %665
  %667 = bitcast i8* %666 to <8 x i8>*
  %668 = load <8 x i8>, <8 x i8>* %667, align 1
  %669 = getelementptr inbounds i8, i8* %666, i64 8
  %670 = bitcast i8* %669 to <8 x i8>*
  %671 = load <8 x i8>, <8 x i8>* %670, align 1
  %672 = zext <8 x i8> %668 to <8 x i16>
  %673 = zext <8 x i8> %671 to <8 x i16>
  %674 = add nsw i64 %664, %620
  %675 = getelementptr inbounds i16, i16* %20, i64 %674
  %676 = bitcast i16* %675 to <8 x i16>*
  store <8 x i16> %672, <8 x i16>* %676, align 2
  %677 = getelementptr inbounds i16, i16* %675, i64 8
  %678 = bitcast i16* %677 to <8 x i16>*
  store <8 x i16> %673, <8 x i16>* %678, align 2
  br label %679

679:                                              ; preds = %661, %663
  br i1 %584, label %684, label %621

680:                                              ; preds = %684, %567
  %681 = icmp sgt i32 %346, 0
  br i1 %681, label %682, label %795

682:                                              ; preds = %680
  %683 = sext i32 %445 to i64
  br label %697

684:                                              ; preds = %687, %679, %617
  %685 = add nuw nsw i64 %618, 1
  %686 = icmp eq i64 %685, %572
  br i1 %686, label %680, label %617

687:                                              ; preds = %621, %687
  %688 = phi i64 [ %695, %687 ], [ %622, %621 ]
  %689 = add nsw i64 %688, 2
  %690 = getelementptr inbounds [2 x i8], [2 x i8]* %2, i64 %618, i64 %689
  %691 = load i8, i8* %690, align 1
  %692 = zext i8 %691 to i16
  %693 = add nsw i64 %688, %620
  %694 = getelementptr inbounds i16, i16* %20, i64 %693
  store i16 %692, i16* %694, align 2
  %695 = add nsw i64 %688, 1
  %696 = icmp eq i64 %695, 0
  br i1 %696, label %684, label %687, !llvm.loop !26

697:                                              ; preds = %772, %682
  %698 = phi i32 [ %775, %772 ], [ 0, %682 ]
  %699 = phi i16* [ %774, %772 ], [ %20, %682 ]
  %700 = phi i8* [ %773, %772 ], [ %0, %682 ]
  %701 = icmp slt i32 %698, %9
  %702 = select i1 %701, i32 0, i32 %395
  %703 = icmp slt i32 %702, %445
  br i1 %703, label %704, label %772

704:                                              ; preds = %697
  %705 = sext i32 %702 to i64
  %706 = sub nsw i64 %683, %705
  %707 = icmp ult i64 %706, 16
  br i1 %707, label %708, label %710

708:                                              ; preds = %770, %704
  %709 = phi i64 [ %705, %704 ], [ %712, %770 ]
  br label %777

710:                                              ; preds = %704
  %711 = and i64 %706, -16
  %712 = add nsw i64 %711, %705
  %713 = add nsw i64 %711, -16
  %714 = lshr exact i64 %713, 4
  %715 = add nuw nsw i64 %714, 1
  %716 = and i64 %715, 1
  %717 = icmp eq i64 %713, 0
  br i1 %717, label %753, label %718

718:                                              ; preds = %710
  %719 = sub nuw nsw i64 %715, %716
  br label %720

720:                                              ; preds = %720, %718
  %721 = phi i64 [ 0, %718 ], [ %750, %720 ]
  %722 = phi i64 [ %719, %718 ], [ %751, %720 ]
  %723 = add i64 %721, %705
  %724 = getelementptr inbounds i8, i8* %700, i64 %723
  %725 = bitcast i8* %724 to <8 x i8>*
  %726 = load <8 x i8>, <8 x i8>* %725, align 1
  %727 = getelementptr inbounds i8, i8* %724, i64 8
  %728 = bitcast i8* %727 to <8 x i8>*
  %729 = load <8 x i8>, <8 x i8>* %728, align 1
  %730 = zext <8 x i8> %726 to <8 x i16>
  %731 = zext <8 x i8> %729 to <8 x i16>
  %732 = getelementptr inbounds i16, i16* %699, i64 %723
  %733 = bitcast i16* %732 to <8 x i16>*
  store <8 x i16> %730, <8 x i16>* %733, align 2
  %734 = getelementptr inbounds i16, i16* %732, i64 8
  %735 = bitcast i16* %734 to <8 x i16>*
  store <8 x i16> %731, <8 x i16>* %735, align 2
  %736 = or i64 %721, 16
  %737 = add i64 %736, %705
  %738 = getelementptr inbounds i8, i8* %700, i64 %737
  %739 = bitcast i8* %738 to <8 x i8>*
  %740 = load <8 x i8>, <8 x i8>* %739, align 1
  %741 = getelementptr inbounds i8, i8* %738, i64 8
  %742 = bitcast i8* %741 to <8 x i8>*
  %743 = load <8 x i8>, <8 x i8>* %742, align 1
  %744 = zext <8 x i8> %740 to <8 x i16>
  %745 = zext <8 x i8> %743 to <8 x i16>
  %746 = getelementptr inbounds i16, i16* %699, i64 %737
  %747 = bitcast i16* %746 to <8 x i16>*
  store <8 x i16> %744, <8 x i16>* %747, align 2
  %748 = getelementptr inbounds i16, i16* %746, i64 8
  %749 = bitcast i16* %748 to <8 x i16>*
  store <8 x i16> %745, <8 x i16>* %749, align 2
  %750 = add i64 %721, 32
  %751 = add i64 %722, -2
  %752 = icmp eq i64 %751, 0
  br i1 %752, label %753, label %720, !llvm.loop !27

753:                                              ; preds = %720, %710
  %754 = phi i64 [ 0, %710 ], [ %750, %720 ]
  %755 = icmp eq i64 %716, 0
  br i1 %755, label %770, label %756

756:                                              ; preds = %753
  %757 = add i64 %754, %705
  %758 = getelementptr inbounds i8, i8* %700, i64 %757
  %759 = bitcast i8* %758 to <8 x i8>*
  %760 = load <8 x i8>, <8 x i8>* %759, align 1
  %761 = getelementptr inbounds i8, i8* %758, i64 8
  %762 = bitcast i8* %761 to <8 x i8>*
  %763 = load <8 x i8>, <8 x i8>* %762, align 1
  %764 = zext <8 x i8> %760 to <8 x i16>
  %765 = zext <8 x i8> %763 to <8 x i16>
  %766 = getelementptr inbounds i16, i16* %699, i64 %757
  %767 = bitcast i16* %766 to <8 x i16>*
  store <8 x i16> %764, <8 x i16>* %767, align 2
  %768 = getelementptr inbounds i16, i16* %766, i64 8
  %769 = bitcast i16* %768 to <8 x i16>*
  store <8 x i16> %765, <8 x i16>* %769, align 2
  br label %770

770:                                              ; preds = %753, %756
  %771 = icmp eq i64 %706, %711
  br i1 %771, label %772, label %708

772:                                              ; preds = %777, %770, %697
  %773 = getelementptr inbounds i8, i8* %700, i64 %1
  %774 = getelementptr inbounds i16, i16* %699, i64 12
  %775 = add nuw nsw i32 %698, 1
  %776 = icmp eq i32 %775, %346
  br i1 %776, label %795, label %697

777:                                              ; preds = %708, %777
  %778 = phi i64 [ %783, %777 ], [ %709, %708 ]
  %779 = getelementptr inbounds i8, i8* %700, i64 %778
  %780 = load i8, i8* %779, align 1
  %781 = zext i8 %780 to i16
  %782 = getelementptr inbounds i16, i16* %699, i64 %778
  store i16 %781, i16* %782, align 2
  %783 = add nsw i64 %778, 1
  %784 = icmp eq i64 %783, %683
  br i1 %784, label %772, label %777, !llvm.loop !28

785:                                              ; preds = %269, %785
  %786 = phi i64 [ %788, %785 ], [ %270, %269 ]
  %787 = getelementptr inbounds i16, i16* %267, i64 %786
  store i16 -32768, i16* %787, align 2
  %788 = add nuw nsw i64 %786, 1
  %789 = icmp eq i64 %788, %192
  br i1 %789, label %345, label %785, !llvm.loop !29

790:                                              ; preds = %105, %790
  %791 = phi i64 [ %793, %790 ], [ %106, %105 ]
  %792 = getelementptr inbounds i16, i16* %103, i64 %791
  store i16 -32768, i16* %792, align 2
  %793 = add nuw nsw i64 %791, 1
  %794 = icmp eq i64 %793, %28
  br i1 %794, label %181, label %790, !llvm.loop !30

795:                                              ; preds = %772, %680
  %796 = icmp eq i32 %4, 0
  br i1 %796, label %1230, label %797

797:                                              ; preds = %795
  %798 = and i32 %4, 1
  %799 = sub nuw nsw i32 4, %798
  %800 = tail call i32 @llvm.ctlz.i32(i32 %4, i1 true) #6, !range !31
  %801 = xor i32 %800, 31
  %802 = sub nsw i32 %7, %801
  %803 = icmp sgt i32 %802, 0
  %804 = select i1 %803, i32 %802, i32 0
  %805 = icmp eq i32 %5, 0
  br i1 %805, label %806, label %830

806:                                              ; preds = %797
  %807 = icmp sgt i32 %8, 0
  %808 = add nsw i32 %6, 2
  %809 = sext i32 %808 to i64
  %810 = getelementptr inbounds [12 x [2 x i8]], [12 x [2 x i8]]* @dav1d_cdef_directions, i64 0, i64 %809, i64 0
  %811 = zext i32 %8 to i64
  %812 = and i32 %799, 1
  %813 = or i32 %812, 2
  %814 = getelementptr inbounds [12 x [2 x i8]], [12 x [2 x i8]]* @dav1d_cdef_directions, i64 0, i64 %809, i64 1
  %815 = add nsw i64 %811, -1
  %816 = icmp ult i32 %8, 8
  %817 = trunc i64 %815 to i32
  %818 = icmp ugt i64 %815, 2147483647
  %819 = trunc i64 %815 to i32
  %820 = and i64 %811, 4294967288
  %821 = insertelement <8 x i32> undef, i32 %804, i32 0
  %822 = shufflevector <8 x i32> %821, <8 x i32> undef, <8 x i32> zeroinitializer
  %823 = insertelement <8 x i32> undef, i32 %4, i32 0
  %824 = shufflevector <8 x i32> %823, <8 x i32> undef, <8 x i32> zeroinitializer
  %825 = insertelement <8 x i32> undef, i32 %799, i32 0
  %826 = shufflevector <8 x i32> %825, <8 x i32> undef, <8 x i32> zeroinitializer
  %827 = insertelement <8 x i32> undef, i32 %813, i32 0
  %828 = shufflevector <8 x i32> %827, <8 x i32> undef, <8 x i32> zeroinitializer
  %829 = icmp eq i64 %820, %811
  br label %1026

830:                                              ; preds = %797
  %831 = tail call i32 @llvm.ctlz.i32(i32 %5, i1 true) #6, !range !31
  %832 = xor i32 %831, 31
  %833 = sub nsw i32 %7, %832
  %834 = icmp sgt i32 %833, 0
  %835 = select i1 %834, i32 %833, i32 0
  %836 = icmp sgt i32 %8, 0
  %837 = add nsw i32 %6, 2
  %838 = sext i32 %837 to i64
  %839 = add nsw i32 %6, 4
  %840 = sext i32 %839 to i64
  %841 = sext i32 %6 to i64
  %842 = zext i32 %8 to i64
  br label %843

843:                                              ; preds = %847, %830
  %844 = phi i16* [ %20, %830 ], [ %849, %847 ]
  %845 = phi i32 [ %9, %830 ], [ %850, %847 ]
  %846 = phi i8* [ %0, %830 ], [ %848, %847 ]
  br i1 %836, label %852, label %847

847:                                              ; preds = %858, %843
  %848 = getelementptr inbounds i8, i8* %846, i64 %1
  %849 = getelementptr inbounds i16, i16* %844, i64 12
  %850 = add nsw i32 %845, -1
  %851 = icmp eq i32 %850, 0
  br i1 %851, label %1619, label %843

852:                                              ; preds = %843, %858
  %853 = phi i64 [ %869, %858 ], [ 0, %843 ]
  %854 = getelementptr inbounds i8, i8* %846, i64 %853
  %855 = load i8, i8* %854, align 1
  %856 = zext i8 %855 to i32
  %857 = trunc i64 %853 to i32
  br label %871

858:                                              ; preds = %871
  %859 = ashr i32 %1007, 31
  %860 = add i32 %1007, 8
  %861 = add i32 %860, %859
  %862 = ashr i32 %861, 4
  %863 = add nsw i32 %862, %856
  %864 = icmp slt i32 %863, %1021
  %865 = icmp sgt i32 %863, %1023
  %866 = select i1 %865, i32 %1023, i32 %863
  %867 = select i1 %864, i32 %1021, i32 %866
  %868 = trunc i32 %867 to i8
  store i8 %868, i8* %854, align 1
  %869 = add nuw nsw i64 %853, 1
  %870 = icmp eq i64 %869, %842
  br i1 %870, label %847, label %852

871:                                              ; preds = %871, %852
  %872 = phi i64 [ 0, %852 ], [ %1024, %871 ]
  %873 = phi i32 [ 0, %852 ], [ %1007, %871 ]
  %874 = phi i32 [ %856, %852 ], [ %1023, %871 ]
  %875 = phi i32 [ %856, %852 ], [ %1021, %871 ]
  %876 = phi i32 [ %799, %852 ], [ %915, %871 ]
  %877 = getelementptr inbounds [12 x [2 x i8]], [12 x [2 x i8]]* @dav1d_cdef_directions, i64 0, i64 %838, i64 %872
  %878 = load i8, i8* %877, align 1
  %879 = sext i8 %878 to i32
  %880 = add nsw i32 %857, %879
  %881 = sext i32 %880 to i64
  %882 = getelementptr inbounds i16, i16* %844, i64 %881
  %883 = load i16, i16* %882, align 2
  %884 = sext i16 %883 to i32
  %885 = sub nsw i32 %857, %879
  %886 = sext i32 %885 to i64
  %887 = getelementptr inbounds i16, i16* %844, i64 %886
  %888 = load i16, i16* %887, align 2
  %889 = sext i16 %888 to i32
  %890 = sub nsw i32 %884, %856
  %891 = icmp slt i32 %890, 0
  %892 = sub nsw i32 0, %890
  %893 = select i1 %891, i32 %892, i32 %890
  %894 = lshr i32 %893, %804
  %895 = sub nsw i32 %4, %894
  %896 = icmp sgt i32 %895, 0
  %897 = select i1 %896, i32 %895, i32 0
  %898 = icmp slt i32 %893, %897
  %899 = select i1 %898, i32 %893, i32 %897
  %900 = sub nsw i32 0, %899
  %901 = select i1 %891, i32 %900, i32 %899
  %902 = sub nsw i32 %889, %856
  %903 = icmp slt i32 %902, 0
  %904 = sub nsw i32 0, %902
  %905 = select i1 %903, i32 %904, i32 %902
  %906 = lshr i32 %905, %804
  %907 = sub nsw i32 %4, %906
  %908 = icmp sgt i32 %907, 0
  %909 = select i1 %908, i32 %907, i32 0
  %910 = icmp slt i32 %905, %909
  %911 = select i1 %910, i32 %905, i32 %909
  %912 = sub nsw i32 0, %911
  %913 = select i1 %903, i32 %912, i32 %911
  %914 = and i32 %876, 1
  %915 = or i32 %914, 2
  %916 = icmp ugt i32 %875, %884
  %917 = select i1 %916, i32 %884, i32 %875
  %918 = icmp slt i32 %874, %884
  %919 = select i1 %918, i32 %884, i32 %874
  %920 = icmp ugt i32 %917, %889
  %921 = select i1 %920, i32 %889, i32 %917
  %922 = icmp slt i32 %919, %889
  %923 = select i1 %922, i32 %889, i32 %919
  %924 = getelementptr inbounds [12 x [2 x i8]], [12 x [2 x i8]]* @dav1d_cdef_directions, i64 0, i64 %840, i64 %872
  %925 = load i8, i8* %924, align 1
  %926 = sext i8 %925 to i32
  %927 = getelementptr inbounds [12 x [2 x i8]], [12 x [2 x i8]]* @dav1d_cdef_directions, i64 0, i64 %841, i64 %872
  %928 = load i8, i8* %927, align 1
  %929 = sext i8 %928 to i32
  %930 = add nsw i32 %857, %926
  %931 = sext i32 %930 to i64
  %932 = getelementptr inbounds i16, i16* %844, i64 %931
  %933 = load i16, i16* %932, align 2
  %934 = sext i16 %933 to i32
  %935 = sub nsw i32 %857, %926
  %936 = sext i32 %935 to i64
  %937 = getelementptr inbounds i16, i16* %844, i64 %936
  %938 = load i16, i16* %937, align 2
  %939 = sext i16 %938 to i32
  %940 = add nsw i32 %857, %929
  %941 = sext i32 %940 to i64
  %942 = getelementptr inbounds i16, i16* %844, i64 %941
  %943 = load i16, i16* %942, align 2
  %944 = sext i16 %943 to i32
  %945 = sub nsw i32 %857, %929
  %946 = sext i32 %945 to i64
  %947 = getelementptr inbounds i16, i16* %844, i64 %946
  %948 = load i16, i16* %947, align 2
  %949 = sext i16 %948 to i32
  %950 = sub nsw i32 %934, %856
  %951 = icmp slt i32 %950, 0
  %952 = sub nsw i32 0, %950
  %953 = select i1 %951, i32 %952, i32 %950
  %954 = lshr i32 %953, %835
  %955 = sub nsw i32 %5, %954
  %956 = icmp sgt i32 %955, 0
  %957 = select i1 %956, i32 %955, i32 0
  %958 = icmp slt i32 %953, %957
  %959 = select i1 %958, i32 %953, i32 %957
  %960 = sub nsw i32 0, %959
  %961 = select i1 %951, i32 %960, i32 %959
  %962 = sub nsw i32 %939, %856
  %963 = icmp slt i32 %962, 0
  %964 = sub nsw i32 0, %962
  %965 = select i1 %963, i32 %964, i32 %962
  %966 = lshr i32 %965, %835
  %967 = sub nsw i32 %5, %966
  %968 = icmp sgt i32 %967, 0
  %969 = select i1 %968, i32 %967, i32 0
  %970 = icmp slt i32 %965, %969
  %971 = select i1 %970, i32 %965, i32 %969
  %972 = sub nsw i32 0, %971
  %973 = select i1 %963, i32 %972, i32 %971
  %974 = sub nsw i32 %944, %856
  %975 = icmp slt i32 %974, 0
  %976 = sub nsw i32 0, %974
  %977 = select i1 %975, i32 %976, i32 %974
  %978 = lshr i32 %977, %835
  %979 = sub nsw i32 %5, %978
  %980 = icmp sgt i32 %979, 0
  %981 = select i1 %980, i32 %979, i32 0
  %982 = icmp slt i32 %977, %981
  %983 = select i1 %982, i32 %977, i32 %981
  %984 = sub nsw i32 0, %983
  %985 = select i1 %975, i32 %984, i32 %983
  %986 = sub nsw i32 %949, %856
  %987 = icmp slt i32 %986, 0
  %988 = sub nsw i32 0, %986
  %989 = select i1 %987, i32 %988, i32 %986
  %990 = lshr i32 %989, %835
  %991 = sub nsw i32 %5, %990
  %992 = icmp sgt i32 %991, 0
  %993 = select i1 %992, i32 %991, i32 0
  %994 = icmp slt i32 %989, %993
  %995 = select i1 %994, i32 %989, i32 %993
  %996 = sub nsw i32 0, %995
  %997 = select i1 %987, i32 %996, i32 %995
  %998 = add i32 %973, %961
  %999 = add i32 %998, %985
  %1000 = add i32 %999, %997
  %1001 = trunc i64 %872 to i32
  %1002 = sub i32 2, %1001
  %1003 = mul i32 %1000, %1002
  %1004 = add i32 %913, %901
  %1005 = mul i32 %1004, %876
  %1006 = add i32 %1005, %873
  %1007 = add i32 %1006, %1003
  %1008 = icmp ugt i32 %921, %934
  %1009 = select i1 %1008, i32 %934, i32 %921
  %1010 = icmp slt i32 %923, %934
  %1011 = select i1 %1010, i32 %934, i32 %923
  %1012 = icmp ugt i32 %1009, %939
  %1013 = select i1 %1012, i32 %939, i32 %1009
  %1014 = icmp slt i32 %1011, %939
  %1015 = select i1 %1014, i32 %939, i32 %1011
  %1016 = icmp ugt i32 %1013, %944
  %1017 = select i1 %1016, i32 %944, i32 %1013
  %1018 = icmp slt i32 %1015, %944
  %1019 = select i1 %1018, i32 %944, i32 %1015
  %1020 = icmp ugt i32 %1017, %949
  %1021 = select i1 %1020, i32 %949, i32 %1017
  %1022 = icmp slt i32 %1019, %949
  %1023 = select i1 %1022, i32 %949, i32 %1019
  %1024 = add nuw nsw i64 %872, 1
  %1025 = icmp eq i64 %1024, 2
  br i1 %1025, label %858, label %871

1026:                                             ; preds = %806, %1138
  %1027 = phi i16* [ %1140, %1138 ], [ %20, %806 ]
  %1028 = phi i32 [ %1141, %1138 ], [ %9, %806 ]
  %1029 = phi i8* [ %1139, %1138 ], [ %0, %806 ]
  br i1 %807, label %1030, label %1138

1030:                                             ; preds = %1026
  %1031 = load i8, i8* %810, align 2
  %1032 = sext i8 %1031 to i32
  %1033 = load i8, i8* %814, align 1
  %1034 = sext i8 %1033 to i32
  br i1 %816, label %1035, label %1037

1035:                                             ; preds = %1137, %1037, %1030
  %1036 = phi i64 [ 0, %1037 ], [ 0, %1030 ], [ %820, %1137 ]
  br label %1143

1037:                                             ; preds = %1030
  %1038 = add i32 %1032, %817
  %1039 = icmp slt i32 %1038, %1032
  %1040 = or i1 %1039, %818
  %1041 = add i32 %1034, %819
  %1042 = icmp slt i32 %1041, %1034
  %1043 = or i1 %1042, %1040
  br i1 %1043, label %1035, label %1044

1044:                                             ; preds = %1037, %1044
  %1045 = phi i64 [ %1135, %1044 ], [ 0, %1037 ]
  %1046 = getelementptr inbounds i8, i8* %1029, i64 %1045
  %1047 = bitcast i8* %1046 to <8 x i8>*
  %1048 = load <8 x i8>, <8 x i8>* %1047, align 1
  %1049 = zext <8 x i8> %1048 to <8 x i32>
  %1050 = trunc i64 %1045 to i32
  %1051 = add nsw i32 %1050, %1032
  %1052 = sext i32 %1051 to i64
  %1053 = getelementptr inbounds i16, i16* %1027, i64 %1052
  %1054 = bitcast i16* %1053 to <8 x i16>*
  %1055 = load <8 x i16>, <8 x i16>* %1054, align 2
  %1056 = sext <8 x i16> %1055 to <8 x i32>
  %1057 = sub nsw i32 %1050, %1032
  %1058 = sext i32 %1057 to i64
  %1059 = getelementptr inbounds i16, i16* %1027, i64 %1058
  %1060 = bitcast i16* %1059 to <8 x i16>*
  %1061 = load <8 x i16>, <8 x i16>* %1060, align 2
  %1062 = sext <8 x i16> %1061 to <8 x i32>
  %1063 = sub nsw <8 x i32> %1056, %1049
  %1064 = icmp slt <8 x i32> %1063, zeroinitializer
  %1065 = sub nsw <8 x i32> zeroinitializer, %1063
  %1066 = select <8 x i1> %1064, <8 x i32> %1065, <8 x i32> %1063
  %1067 = lshr <8 x i32> %1066, %822
  %1068 = sub nsw <8 x i32> %824, %1067
  %1069 = icmp sgt <8 x i32> %1068, zeroinitializer
  %1070 = select <8 x i1> %1069, <8 x i32> %1068, <8 x i32> zeroinitializer
  %1071 = icmp slt <8 x i32> %1066, %1070
  %1072 = select <8 x i1> %1071, <8 x i32> %1066, <8 x i32> %1070
  %1073 = sub nsw <8 x i32> zeroinitializer, %1072
  %1074 = select <8 x i1> %1064, <8 x i32> %1073, <8 x i32> %1072
  %1075 = sub nsw <8 x i32> %1062, %1049
  %1076 = icmp slt <8 x i32> %1075, zeroinitializer
  %1077 = sub nsw <8 x i32> zeroinitializer, %1075
  %1078 = select <8 x i1> %1076, <8 x i32> %1077, <8 x i32> %1075
  %1079 = lshr <8 x i32> %1078, %822
  %1080 = sub nsw <8 x i32> %824, %1079
  %1081 = icmp sgt <8 x i32> %1080, zeroinitializer
  %1082 = select <8 x i1> %1081, <8 x i32> %1080, <8 x i32> zeroinitializer
  %1083 = icmp slt <8 x i32> %1078, %1082
  %1084 = select <8 x i1> %1083, <8 x i32> %1078, <8 x i32> %1082
  %1085 = sub nsw <8 x i32> zeroinitializer, %1084
  %1086 = select <8 x i1> %1076, <8 x i32> %1085, <8 x i32> %1084
  %1087 = add nsw <8 x i32> %1086, %1074
  %1088 = mul <8 x i32> %1087, %826
  %1089 = add nsw i32 %1050, %1034
  %1090 = sext i32 %1089 to i64
  %1091 = getelementptr inbounds i16, i16* %1027, i64 %1090
  %1092 = bitcast i16* %1091 to <8 x i16>*
  %1093 = load <8 x i16>, <8 x i16>* %1092, align 2
  %1094 = sext <8 x i16> %1093 to <8 x i32>
  %1095 = sub nsw i32 %1050, %1034
  %1096 = sext i32 %1095 to i64
  %1097 = getelementptr inbounds i16, i16* %1027, i64 %1096
  %1098 = bitcast i16* %1097 to <8 x i16>*
  %1099 = load <8 x i16>, <8 x i16>* %1098, align 2
  %1100 = sext <8 x i16> %1099 to <8 x i32>
  %1101 = sub nsw <8 x i32> %1094, %1049
  %1102 = icmp slt <8 x i32> %1101, zeroinitializer
  %1103 = sub nsw <8 x i32> zeroinitializer, %1101
  %1104 = select <8 x i1> %1102, <8 x i32> %1103, <8 x i32> %1101
  %1105 = lshr <8 x i32> %1104, %822
  %1106 = sub nsw <8 x i32> %824, %1105
  %1107 = icmp sgt <8 x i32> %1106, zeroinitializer
  %1108 = select <8 x i1> %1107, <8 x i32> %1106, <8 x i32> zeroinitializer
  %1109 = icmp slt <8 x i32> %1104, %1108
  %1110 = select <8 x i1> %1109, <8 x i32> %1104, <8 x i32> %1108
  %1111 = sub nsw <8 x i32> zeroinitializer, %1110
  %1112 = select <8 x i1> %1102, <8 x i32> %1111, <8 x i32> %1110
  %1113 = sub nsw <8 x i32> %1100, %1049
  %1114 = icmp slt <8 x i32> %1113, zeroinitializer
  %1115 = sub nsw <8 x i32> zeroinitializer, %1113
  %1116 = select <8 x i1> %1114, <8 x i32> %1115, <8 x i32> %1113
  %1117 = lshr <8 x i32> %1116, %822
  %1118 = sub nsw <8 x i32> %824, %1117
  %1119 = icmp sgt <8 x i32> %1118, zeroinitializer
  %1120 = select <8 x i1> %1119, <8 x i32> %1118, <8 x i32> zeroinitializer
  %1121 = icmp slt <8 x i32> %1116, %1120
  %1122 = select <8 x i1> %1121, <8 x i32> %1116, <8 x i32> %1120
  %1123 = sub nsw <8 x i32> zeroinitializer, %1122
  %1124 = select <8 x i1> %1114, <8 x i32> %1123, <8 x i32> %1122
  %1125 = add nsw <8 x i32> %1124, %1112
  %1126 = mul <8 x i32> %1125, %828
  %1127 = add <8 x i32> %1126, %1088
  %1128 = ashr <8 x i32> %1127, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %1129 = add <8 x i32> %1127, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %1130 = add <8 x i32> %1129, %1128
  %1131 = lshr <8 x i32> %1130, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %1132 = trunc <8 x i32> %1131 to <8 x i8>
  %1133 = add <8 x i8> %1048, %1132
  %1134 = bitcast i8* %1046 to <8 x i8>*
  store <8 x i8> %1133, <8 x i8>* %1134, align 1
  %1135 = add i64 %1045, 8
  %1136 = icmp eq i64 %1135, %820
  br i1 %1136, label %1137, label %1044, !llvm.loop !32

1137:                                             ; preds = %1044
  br i1 %829, label %1138, label %1035

1138:                                             ; preds = %1143, %1137, %1026
  %1139 = getelementptr inbounds i8, i8* %1029, i64 %1
  %1140 = getelementptr inbounds i16, i16* %1027, i64 12
  %1141 = add nsw i32 %1028, -1
  %1142 = icmp eq i32 %1141, 0
  br i1 %1142, label %1619, label %1026

1143:                                             ; preds = %1035, %1143
  %1144 = phi i64 [ %1228, %1143 ], [ %1036, %1035 ]
  %1145 = getelementptr inbounds i8, i8* %1029, i64 %1144
  %1146 = load i8, i8* %1145, align 1
  %1147 = zext i8 %1146 to i32
  %1148 = trunc i64 %1144 to i32
  %1149 = add nsw i32 %1148, %1032
  %1150 = sext i32 %1149 to i64
  %1151 = getelementptr inbounds i16, i16* %1027, i64 %1150
  %1152 = load i16, i16* %1151, align 2
  %1153 = sext i16 %1152 to i32
  %1154 = sub nsw i32 %1148, %1032
  %1155 = sext i32 %1154 to i64
  %1156 = getelementptr inbounds i16, i16* %1027, i64 %1155
  %1157 = load i16, i16* %1156, align 2
  %1158 = sext i16 %1157 to i32
  %1159 = sub nsw i32 %1153, %1147
  %1160 = icmp slt i32 %1159, 0
  %1161 = sub nsw i32 0, %1159
  %1162 = select i1 %1160, i32 %1161, i32 %1159
  %1163 = lshr i32 %1162, %804
  %1164 = sub nsw i32 %4, %1163
  %1165 = icmp sgt i32 %1164, 0
  %1166 = select i1 %1165, i32 %1164, i32 0
  %1167 = icmp slt i32 %1162, %1166
  %1168 = select i1 %1167, i32 %1162, i32 %1166
  %1169 = sub nsw i32 0, %1168
  %1170 = select i1 %1160, i32 %1169, i32 %1168
  %1171 = sub nsw i32 %1158, %1147
  %1172 = icmp slt i32 %1171, 0
  %1173 = sub nsw i32 0, %1171
  %1174 = select i1 %1172, i32 %1173, i32 %1171
  %1175 = lshr i32 %1174, %804
  %1176 = sub nsw i32 %4, %1175
  %1177 = icmp sgt i32 %1176, 0
  %1178 = select i1 %1177, i32 %1176, i32 0
  %1179 = icmp slt i32 %1174, %1178
  %1180 = select i1 %1179, i32 %1174, i32 %1178
  %1181 = sub nsw i32 0, %1180
  %1182 = select i1 %1172, i32 %1181, i32 %1180
  %1183 = add nsw i32 %1182, %1170
  %1184 = mul i32 %1183, %799
  %1185 = add nsw i32 %1148, %1034
  %1186 = sext i32 %1185 to i64
  %1187 = getelementptr inbounds i16, i16* %1027, i64 %1186
  %1188 = load i16, i16* %1187, align 2
  %1189 = sext i16 %1188 to i32
  %1190 = sub nsw i32 %1148, %1034
  %1191 = sext i32 %1190 to i64
  %1192 = getelementptr inbounds i16, i16* %1027, i64 %1191
  %1193 = load i16, i16* %1192, align 2
  %1194 = sext i16 %1193 to i32
  %1195 = sub nsw i32 %1189, %1147
  %1196 = icmp slt i32 %1195, 0
  %1197 = sub nsw i32 0, %1195
  %1198 = select i1 %1196, i32 %1197, i32 %1195
  %1199 = lshr i32 %1198, %804
  %1200 = sub nsw i32 %4, %1199
  %1201 = icmp sgt i32 %1200, 0
  %1202 = select i1 %1201, i32 %1200, i32 0
  %1203 = icmp slt i32 %1198, %1202
  %1204 = select i1 %1203, i32 %1198, i32 %1202
  %1205 = sub nsw i32 0, %1204
  %1206 = select i1 %1196, i32 %1205, i32 %1204
  %1207 = sub nsw i32 %1194, %1147
  %1208 = icmp slt i32 %1207, 0
  %1209 = sub nsw i32 0, %1207
  %1210 = select i1 %1208, i32 %1209, i32 %1207
  %1211 = lshr i32 %1210, %804
  %1212 = sub nsw i32 %4, %1211
  %1213 = icmp sgt i32 %1212, 0
  %1214 = select i1 %1213, i32 %1212, i32 0
  %1215 = icmp slt i32 %1210, %1214
  %1216 = select i1 %1215, i32 %1210, i32 %1214
  %1217 = sub nsw i32 0, %1216
  %1218 = select i1 %1208, i32 %1217, i32 %1216
  %1219 = add nsw i32 %1218, %1206
  %1220 = mul i32 %1219, %813
  %1221 = add i32 %1220, %1184
  %1222 = ashr i32 %1221, 31
  %1223 = add i32 %1221, 8
  %1224 = add i32 %1223, %1222
  %1225 = lshr i32 %1224, 4
  %1226 = trunc i32 %1225 to i8
  %1227 = add i8 %1146, %1226
  store i8 %1227, i8* %1145, align 1
  %1228 = add nuw nsw i64 %1144, 1
  %1229 = icmp eq i64 %1228, %811
  br i1 %1229, label %1138, label %1143, !llvm.loop !33

1230:                                             ; preds = %795
  %1231 = icmp ne i32 %5, 0
  tail call void @llvm.assume(i1 %1231)
  %1232 = tail call i32 @llvm.ctlz.i32(i32 %5, i1 true) #6, !range !31
  %1233 = xor i32 %1232, 31
  %1234 = sub nsw i32 %7, %1233
  %1235 = icmp sgt i32 %1234, 0
  %1236 = select i1 %1235, i32 %1234, i32 0
  %1237 = icmp sgt i32 %8, 0
  %1238 = add nsw i32 %6, 4
  %1239 = sext i32 %1238 to i64
  %1240 = sext i32 %6 to i64
  %1241 = getelementptr inbounds [12 x [2 x i8]], [12 x [2 x i8]]* @dav1d_cdef_directions, i64 0, i64 %1239, i64 0
  %1242 = zext i32 %8 to i64
  %1243 = getelementptr inbounds [12 x [2 x i8]], [12 x [2 x i8]]* @dav1d_cdef_directions, i64 0, i64 %1240, i64 0
  %1244 = getelementptr inbounds [12 x [2 x i8]], [12 x [2 x i8]]* @dav1d_cdef_directions, i64 0, i64 %1239, i64 1
  %1245 = getelementptr inbounds [12 x [2 x i8]], [12 x [2 x i8]]* @dav1d_cdef_directions, i64 0, i64 %1240, i64 1
  %1246 = add nsw i64 %1242, -1
  %1247 = icmp ult i32 %8, 8
  %1248 = trunc i64 %1246 to i32
  %1249 = icmp ugt i64 %1246, 2147483647
  %1250 = trunc i64 %1246 to i32
  %1251 = trunc i64 %1246 to i32
  %1252 = trunc i64 %1246 to i32
  %1253 = and i64 %1242, 4294967288
  %1254 = insertelement <8 x i32> undef, i32 %1236, i32 0
  %1255 = shufflevector <8 x i32> %1254, <8 x i32> undef, <8 x i32> zeroinitializer
  %1256 = insertelement <8 x i32> undef, i32 %5, i32 0
  %1257 = shufflevector <8 x i32> %1256, <8 x i32> undef, <8 x i32> zeroinitializer
  %1258 = icmp eq i64 %1253, %1242
  br label %1259

1259:                                             ; preds = %1456, %1230
  %1260 = phi i16* [ %20, %1230 ], [ %1458, %1456 ]
  %1261 = phi i32 [ %9, %1230 ], [ %1459, %1456 ]
  %1262 = phi i8* [ %0, %1230 ], [ %1457, %1456 ]
  br i1 %1237, label %1263, label %1456

1263:                                             ; preds = %1259
  %1264 = load i8, i8* %1241, align 2
  %1265 = sext i8 %1264 to i32
  %1266 = load i8, i8* %1243, align 2
  %1267 = sext i8 %1266 to i32
  %1268 = load i8, i8* %1244, align 1
  %1269 = sext i8 %1268 to i32
  %1270 = load i8, i8* %1245, align 1
  %1271 = sext i8 %1270 to i32
  br i1 %1247, label %1272, label %1274

1272:                                             ; preds = %1455, %1274, %1263
  %1273 = phi i64 [ 0, %1274 ], [ 0, %1263 ], [ %1253, %1455 ]
  br label %1461

1274:                                             ; preds = %1263
  %1275 = add i32 %1265, %1248
  %1276 = icmp slt i32 %1275, %1265
  %1277 = or i1 %1276, %1249
  %1278 = add i32 %1267, %1250
  %1279 = icmp slt i32 %1278, %1267
  %1280 = or i1 %1279, %1277
  %1281 = add i32 %1269, %1251
  %1282 = icmp slt i32 %1281, %1269
  %1283 = or i1 %1282, %1280
  %1284 = add i32 %1271, %1252
  %1285 = icmp slt i32 %1284, %1271
  %1286 = or i1 %1285, %1283
  br i1 %1286, label %1272, label %1287

1287:                                             ; preds = %1274, %1287
  %1288 = phi i64 [ %1453, %1287 ], [ 0, %1274 ]
  %1289 = getelementptr inbounds i8, i8* %1262, i64 %1288
  %1290 = bitcast i8* %1289 to <8 x i8>*
  %1291 = load <8 x i8>, <8 x i8>* %1290, align 1
  %1292 = zext <8 x i8> %1291 to <8 x i32>
  %1293 = trunc i64 %1288 to i32
  %1294 = add nsw i32 %1293, %1265
  %1295 = sext i32 %1294 to i64
  %1296 = getelementptr inbounds i16, i16* %1260, i64 %1295
  %1297 = bitcast i16* %1296 to <8 x i16>*
  %1298 = load <8 x i16>, <8 x i16>* %1297, align 2
  %1299 = sext <8 x i16> %1298 to <8 x i32>
  %1300 = sub nsw i32 %1293, %1265
  %1301 = sext i32 %1300 to i64
  %1302 = getelementptr inbounds i16, i16* %1260, i64 %1301
  %1303 = bitcast i16* %1302 to <8 x i16>*
  %1304 = load <8 x i16>, <8 x i16>* %1303, align 2
  %1305 = sext <8 x i16> %1304 to <8 x i32>
  %1306 = add nsw i32 %1293, %1267
  %1307 = sext i32 %1306 to i64
  %1308 = getelementptr inbounds i16, i16* %1260, i64 %1307
  %1309 = bitcast i16* %1308 to <8 x i16>*
  %1310 = load <8 x i16>, <8 x i16>* %1309, align 2
  %1311 = sext <8 x i16> %1310 to <8 x i32>
  %1312 = sub nsw i32 %1293, %1267
  %1313 = sext i32 %1312 to i64
  %1314 = getelementptr inbounds i16, i16* %1260, i64 %1313
  %1315 = bitcast i16* %1314 to <8 x i16>*
  %1316 = load <8 x i16>, <8 x i16>* %1315, align 2
  %1317 = sext <8 x i16> %1316 to <8 x i32>
  %1318 = sub nsw <8 x i32> %1299, %1292
  %1319 = icmp slt <8 x i32> %1318, zeroinitializer
  %1320 = sub nsw <8 x i32> zeroinitializer, %1318
  %1321 = select <8 x i1> %1319, <8 x i32> %1320, <8 x i32> %1318
  %1322 = lshr <8 x i32> %1321, %1255
  %1323 = sub nsw <8 x i32> %1257, %1322
  %1324 = icmp sgt <8 x i32> %1323, zeroinitializer
  %1325 = select <8 x i1> %1324, <8 x i32> %1323, <8 x i32> zeroinitializer
  %1326 = icmp slt <8 x i32> %1321, %1325
  %1327 = select <8 x i1> %1326, <8 x i32> %1321, <8 x i32> %1325
  %1328 = sub nsw <8 x i32> zeroinitializer, %1327
  %1329 = select <8 x i1> %1319, <8 x i32> %1328, <8 x i32> %1327
  %1330 = sub nsw <8 x i32> %1305, %1292
  %1331 = icmp slt <8 x i32> %1330, zeroinitializer
  %1332 = sub nsw <8 x i32> zeroinitializer, %1330
  %1333 = select <8 x i1> %1331, <8 x i32> %1332, <8 x i32> %1330
  %1334 = lshr <8 x i32> %1333, %1255
  %1335 = sub nsw <8 x i32> %1257, %1334
  %1336 = icmp sgt <8 x i32> %1335, zeroinitializer
  %1337 = select <8 x i1> %1336, <8 x i32> %1335, <8 x i32> zeroinitializer
  %1338 = icmp slt <8 x i32> %1333, %1337
  %1339 = select <8 x i1> %1338, <8 x i32> %1333, <8 x i32> %1337
  %1340 = sub nsw <8 x i32> zeroinitializer, %1339
  %1341 = select <8 x i1> %1331, <8 x i32> %1340, <8 x i32> %1339
  %1342 = sub nsw <8 x i32> %1311, %1292
  %1343 = icmp slt <8 x i32> %1342, zeroinitializer
  %1344 = sub nsw <8 x i32> zeroinitializer, %1342
  %1345 = select <8 x i1> %1343, <8 x i32> %1344, <8 x i32> %1342
  %1346 = lshr <8 x i32> %1345, %1255
  %1347 = sub nsw <8 x i32> %1257, %1346
  %1348 = icmp sgt <8 x i32> %1347, zeroinitializer
  %1349 = select <8 x i1> %1348, <8 x i32> %1347, <8 x i32> zeroinitializer
  %1350 = icmp slt <8 x i32> %1345, %1349
  %1351 = select <8 x i1> %1350, <8 x i32> %1345, <8 x i32> %1349
  %1352 = sub nsw <8 x i32> zeroinitializer, %1351
  %1353 = select <8 x i1> %1343, <8 x i32> %1352, <8 x i32> %1351
  %1354 = sub nsw <8 x i32> %1317, %1292
  %1355 = icmp slt <8 x i32> %1354, zeroinitializer
  %1356 = sub nsw <8 x i32> zeroinitializer, %1354
  %1357 = select <8 x i1> %1355, <8 x i32> %1356, <8 x i32> %1354
  %1358 = lshr <8 x i32> %1357, %1255
  %1359 = sub nsw <8 x i32> %1257, %1358
  %1360 = icmp sgt <8 x i32> %1359, zeroinitializer
  %1361 = select <8 x i1> %1360, <8 x i32> %1359, <8 x i32> zeroinitializer
  %1362 = icmp slt <8 x i32> %1357, %1361
  %1363 = select <8 x i1> %1362, <8 x i32> %1357, <8 x i32> %1361
  %1364 = sub nsw <8 x i32> zeroinitializer, %1363
  %1365 = select <8 x i1> %1355, <8 x i32> %1364, <8 x i32> %1363
  %1366 = add nsw <8 x i32> %1341, %1329
  %1367 = add nsw <8 x i32> %1366, %1353
  %1368 = add nsw <8 x i32> %1367, %1365
  %1369 = shl <8 x i32> %1368, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %1370 = add nsw i32 %1293, %1269
  %1371 = sext i32 %1370 to i64
  %1372 = getelementptr inbounds i16, i16* %1260, i64 %1371
  %1373 = bitcast i16* %1372 to <8 x i16>*
  %1374 = load <8 x i16>, <8 x i16>* %1373, align 2
  %1375 = sext <8 x i16> %1374 to <8 x i32>
  %1376 = sub nsw i32 %1293, %1269
  %1377 = sext i32 %1376 to i64
  %1378 = getelementptr inbounds i16, i16* %1260, i64 %1377
  %1379 = bitcast i16* %1378 to <8 x i16>*
  %1380 = load <8 x i16>, <8 x i16>* %1379, align 2
  %1381 = sext <8 x i16> %1380 to <8 x i32>
  %1382 = add nsw i32 %1293, %1271
  %1383 = sext i32 %1382 to i64
  %1384 = getelementptr inbounds i16, i16* %1260, i64 %1383
  %1385 = bitcast i16* %1384 to <8 x i16>*
  %1386 = load <8 x i16>, <8 x i16>* %1385, align 2
  %1387 = sext <8 x i16> %1386 to <8 x i32>
  %1388 = sub nsw i32 %1293, %1271
  %1389 = sext i32 %1388 to i64
  %1390 = getelementptr inbounds i16, i16* %1260, i64 %1389
  %1391 = bitcast i16* %1390 to <8 x i16>*
  %1392 = load <8 x i16>, <8 x i16>* %1391, align 2
  %1393 = sext <8 x i16> %1392 to <8 x i32>
  %1394 = sub nsw <8 x i32> %1375, %1292
  %1395 = icmp slt <8 x i32> %1394, zeroinitializer
  %1396 = sub nsw <8 x i32> zeroinitializer, %1394
  %1397 = select <8 x i1> %1395, <8 x i32> %1396, <8 x i32> %1394
  %1398 = lshr <8 x i32> %1397, %1255
  %1399 = sub nsw <8 x i32> %1257, %1398
  %1400 = icmp sgt <8 x i32> %1399, zeroinitializer
  %1401 = select <8 x i1> %1400, <8 x i32> %1399, <8 x i32> zeroinitializer
  %1402 = icmp slt <8 x i32> %1397, %1401
  %1403 = select <8 x i1> %1402, <8 x i32> %1397, <8 x i32> %1401
  %1404 = sub nsw <8 x i32> zeroinitializer, %1403
  %1405 = select <8 x i1> %1395, <8 x i32> %1404, <8 x i32> %1403
  %1406 = sub nsw <8 x i32> %1381, %1292
  %1407 = icmp slt <8 x i32> %1406, zeroinitializer
  %1408 = sub nsw <8 x i32> zeroinitializer, %1406
  %1409 = select <8 x i1> %1407, <8 x i32> %1408, <8 x i32> %1406
  %1410 = lshr <8 x i32> %1409, %1255
  %1411 = sub nsw <8 x i32> %1257, %1410
  %1412 = icmp sgt <8 x i32> %1411, zeroinitializer
  %1413 = select <8 x i1> %1412, <8 x i32> %1411, <8 x i32> zeroinitializer
  %1414 = icmp slt <8 x i32> %1409, %1413
  %1415 = select <8 x i1> %1414, <8 x i32> %1409, <8 x i32> %1413
  %1416 = sub nsw <8 x i32> zeroinitializer, %1415
  %1417 = select <8 x i1> %1407, <8 x i32> %1416, <8 x i32> %1415
  %1418 = sub nsw <8 x i32> %1387, %1292
  %1419 = icmp slt <8 x i32> %1418, zeroinitializer
  %1420 = sub nsw <8 x i32> zeroinitializer, %1418
  %1421 = select <8 x i1> %1419, <8 x i32> %1420, <8 x i32> %1418
  %1422 = lshr <8 x i32> %1421, %1255
  %1423 = sub nsw <8 x i32> %1257, %1422
  %1424 = icmp sgt <8 x i32> %1423, zeroinitializer
  %1425 = select <8 x i1> %1424, <8 x i32> %1423, <8 x i32> zeroinitializer
  %1426 = icmp slt <8 x i32> %1421, %1425
  %1427 = select <8 x i1> %1426, <8 x i32> %1421, <8 x i32> %1425
  %1428 = sub nsw <8 x i32> zeroinitializer, %1427
  %1429 = select <8 x i1> %1419, <8 x i32> %1428, <8 x i32> %1427
  %1430 = sub nsw <8 x i32> %1393, %1292
  %1431 = icmp slt <8 x i32> %1430, zeroinitializer
  %1432 = sub nsw <8 x i32> zeroinitializer, %1430
  %1433 = select <8 x i1> %1431, <8 x i32> %1432, <8 x i32> %1430
  %1434 = lshr <8 x i32> %1433, %1255
  %1435 = sub nsw <8 x i32> %1257, %1434
  %1436 = icmp sgt <8 x i32> %1435, zeroinitializer
  %1437 = select <8 x i1> %1436, <8 x i32> %1435, <8 x i32> zeroinitializer
  %1438 = icmp slt <8 x i32> %1433, %1437
  %1439 = select <8 x i1> %1438, <8 x i32> %1433, <8 x i32> %1437
  %1440 = sub nsw <8 x i32> zeroinitializer, %1439
  %1441 = select <8 x i1> %1431, <8 x i32> %1440, <8 x i32> %1439
  %1442 = add nsw <8 x i32> %1417, %1405
  %1443 = add nsw <8 x i32> %1442, %1429
  %1444 = add nsw <8 x i32> %1443, %1441
  %1445 = add <8 x i32> %1444, %1369
  %1446 = ashr <8 x i32> %1445, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %1447 = add <8 x i32> %1445, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %1448 = add <8 x i32> %1447, %1446
  %1449 = lshr <8 x i32> %1448, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %1450 = trunc <8 x i32> %1449 to <8 x i8>
  %1451 = add <8 x i8> %1291, %1450
  %1452 = bitcast i8* %1289 to <8 x i8>*
  store <8 x i8> %1451, <8 x i8>* %1452, align 1
  %1453 = add i64 %1288, 8
  %1454 = icmp eq i64 %1453, %1253
  br i1 %1454, label %1455, label %1287, !llvm.loop !34

1455:                                             ; preds = %1287
  br i1 %1258, label %1456, label %1272

1456:                                             ; preds = %1461, %1455, %1259
  %1457 = getelementptr inbounds i8, i8* %1262, i64 %1
  %1458 = getelementptr inbounds i16, i16* %1260, i64 12
  %1459 = add nsw i32 %1261, -1
  %1460 = icmp eq i32 %1459, 0
  br i1 %1460, label %1619, label %1259

1461:                                             ; preds = %1272, %1461
  %1462 = phi i64 [ %1617, %1461 ], [ %1273, %1272 ]
  %1463 = getelementptr inbounds i8, i8* %1262, i64 %1462
  %1464 = load i8, i8* %1463, align 1
  %1465 = zext i8 %1464 to i32
  %1466 = trunc i64 %1462 to i32
  %1467 = add nsw i32 %1466, %1265
  %1468 = sext i32 %1467 to i64
  %1469 = getelementptr inbounds i16, i16* %1260, i64 %1468
  %1470 = load i16, i16* %1469, align 2
  %1471 = sext i16 %1470 to i32
  %1472 = sub nsw i32 %1466, %1265
  %1473 = sext i32 %1472 to i64
  %1474 = getelementptr inbounds i16, i16* %1260, i64 %1473
  %1475 = load i16, i16* %1474, align 2
  %1476 = sext i16 %1475 to i32
  %1477 = add nsw i32 %1466, %1267
  %1478 = sext i32 %1477 to i64
  %1479 = getelementptr inbounds i16, i16* %1260, i64 %1478
  %1480 = load i16, i16* %1479, align 2
  %1481 = sext i16 %1480 to i32
  %1482 = sub nsw i32 %1466, %1267
  %1483 = sext i32 %1482 to i64
  %1484 = getelementptr inbounds i16, i16* %1260, i64 %1483
  %1485 = load i16, i16* %1484, align 2
  %1486 = sext i16 %1485 to i32
  %1487 = sub nsw i32 %1471, %1465
  %1488 = icmp slt i32 %1487, 0
  %1489 = sub nsw i32 0, %1487
  %1490 = select i1 %1488, i32 %1489, i32 %1487
  %1491 = lshr i32 %1490, %1236
  %1492 = sub nsw i32 %5, %1491
  %1493 = icmp sgt i32 %1492, 0
  %1494 = select i1 %1493, i32 %1492, i32 0
  %1495 = icmp slt i32 %1490, %1494
  %1496 = select i1 %1495, i32 %1490, i32 %1494
  %1497 = sub nsw i32 0, %1496
  %1498 = select i1 %1488, i32 %1497, i32 %1496
  %1499 = sub nsw i32 %1476, %1465
  %1500 = icmp slt i32 %1499, 0
  %1501 = sub nsw i32 0, %1499
  %1502 = select i1 %1500, i32 %1501, i32 %1499
  %1503 = lshr i32 %1502, %1236
  %1504 = sub nsw i32 %5, %1503
  %1505 = icmp sgt i32 %1504, 0
  %1506 = select i1 %1505, i32 %1504, i32 0
  %1507 = icmp slt i32 %1502, %1506
  %1508 = select i1 %1507, i32 %1502, i32 %1506
  %1509 = sub nsw i32 0, %1508
  %1510 = select i1 %1500, i32 %1509, i32 %1508
  %1511 = sub nsw i32 %1481, %1465
  %1512 = icmp slt i32 %1511, 0
  %1513 = sub nsw i32 0, %1511
  %1514 = select i1 %1512, i32 %1513, i32 %1511
  %1515 = lshr i32 %1514, %1236
  %1516 = sub nsw i32 %5, %1515
  %1517 = icmp sgt i32 %1516, 0
  %1518 = select i1 %1517, i32 %1516, i32 0
  %1519 = icmp slt i32 %1514, %1518
  %1520 = select i1 %1519, i32 %1514, i32 %1518
  %1521 = sub nsw i32 0, %1520
  %1522 = select i1 %1512, i32 %1521, i32 %1520
  %1523 = sub nsw i32 %1486, %1465
  %1524 = icmp slt i32 %1523, 0
  %1525 = sub nsw i32 0, %1523
  %1526 = select i1 %1524, i32 %1525, i32 %1523
  %1527 = lshr i32 %1526, %1236
  %1528 = sub nsw i32 %5, %1527
  %1529 = icmp sgt i32 %1528, 0
  %1530 = select i1 %1529, i32 %1528, i32 0
  %1531 = icmp slt i32 %1526, %1530
  %1532 = select i1 %1531, i32 %1526, i32 %1530
  %1533 = sub nsw i32 0, %1532
  %1534 = select i1 %1524, i32 %1533, i32 %1532
  %1535 = add nsw i32 %1510, %1498
  %1536 = add nsw i32 %1535, %1522
  %1537 = add nsw i32 %1536, %1534
  %1538 = shl i32 %1537, 1
  %1539 = add nsw i32 %1466, %1269
  %1540 = sext i32 %1539 to i64
  %1541 = getelementptr inbounds i16, i16* %1260, i64 %1540
  %1542 = load i16, i16* %1541, align 2
  %1543 = sext i16 %1542 to i32
  %1544 = sub nsw i32 %1466, %1269
  %1545 = sext i32 %1544 to i64
  %1546 = getelementptr inbounds i16, i16* %1260, i64 %1545
  %1547 = load i16, i16* %1546, align 2
  %1548 = sext i16 %1547 to i32
  %1549 = add nsw i32 %1466, %1271
  %1550 = sext i32 %1549 to i64
  %1551 = getelementptr inbounds i16, i16* %1260, i64 %1550
  %1552 = load i16, i16* %1551, align 2
  %1553 = sext i16 %1552 to i32
  %1554 = sub nsw i32 %1466, %1271
  %1555 = sext i32 %1554 to i64
  %1556 = getelementptr inbounds i16, i16* %1260, i64 %1555
  %1557 = load i16, i16* %1556, align 2
  %1558 = sext i16 %1557 to i32
  %1559 = sub nsw i32 %1543, %1465
  %1560 = icmp slt i32 %1559, 0
  %1561 = sub nsw i32 0, %1559
  %1562 = select i1 %1560, i32 %1561, i32 %1559
  %1563 = lshr i32 %1562, %1236
  %1564 = sub nsw i32 %5, %1563
  %1565 = icmp sgt i32 %1564, 0
  %1566 = select i1 %1565, i32 %1564, i32 0
  %1567 = icmp slt i32 %1562, %1566
  %1568 = select i1 %1567, i32 %1562, i32 %1566
  %1569 = sub nsw i32 0, %1568
  %1570 = select i1 %1560, i32 %1569, i32 %1568
  %1571 = sub nsw i32 %1548, %1465
  %1572 = icmp slt i32 %1571, 0
  %1573 = sub nsw i32 0, %1571
  %1574 = select i1 %1572, i32 %1573, i32 %1571
  %1575 = lshr i32 %1574, %1236
  %1576 = sub nsw i32 %5, %1575
  %1577 = icmp sgt i32 %1576, 0
  %1578 = select i1 %1577, i32 %1576, i32 0
  %1579 = icmp slt i32 %1574, %1578
  %1580 = select i1 %1579, i32 %1574, i32 %1578
  %1581 = sub nsw i32 0, %1580
  %1582 = select i1 %1572, i32 %1581, i32 %1580
  %1583 = sub nsw i32 %1553, %1465
  %1584 = icmp slt i32 %1583, 0
  %1585 = sub nsw i32 0, %1583
  %1586 = select i1 %1584, i32 %1585, i32 %1583
  %1587 = lshr i32 %1586, %1236
  %1588 = sub nsw i32 %5, %1587
  %1589 = icmp sgt i32 %1588, 0
  %1590 = select i1 %1589, i32 %1588, i32 0
  %1591 = icmp slt i32 %1586, %1590
  %1592 = select i1 %1591, i32 %1586, i32 %1590
  %1593 = sub nsw i32 0, %1592
  %1594 = select i1 %1584, i32 %1593, i32 %1592
  %1595 = sub nsw i32 %1558, %1465
  %1596 = icmp slt i32 %1595, 0
  %1597 = sub nsw i32 0, %1595
  %1598 = select i1 %1596, i32 %1597, i32 %1595
  %1599 = lshr i32 %1598, %1236
  %1600 = sub nsw i32 %5, %1599
  %1601 = icmp sgt i32 %1600, 0
  %1602 = select i1 %1601, i32 %1600, i32 0
  %1603 = icmp slt i32 %1598, %1602
  %1604 = select i1 %1603, i32 %1598, i32 %1602
  %1605 = sub nsw i32 0, %1604
  %1606 = select i1 %1596, i32 %1605, i32 %1604
  %1607 = add nsw i32 %1582, %1570
  %1608 = add nsw i32 %1607, %1594
  %1609 = add nsw i32 %1608, %1606
  %1610 = add i32 %1609, %1538
  %1611 = ashr i32 %1610, 31
  %1612 = add i32 %1610, 8
  %1613 = add i32 %1612, %1611
  %1614 = lshr i32 %1613, 4
  %1615 = trunc i32 %1614 to i8
  %1616 = add i8 %1464, %1615
  store i8 %1616, i8* %1463, align 1
  %1617 = add nuw nsw i64 %1462, 1
  %1618 = icmp eq i64 %1617, %1242
  br i1 %1618, label %1456, label %1461, !llvm.loop !35

1619:                                             ; preds = %847, %1138, %1456
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %19) #6
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #5

; Function Attrs: nounwind
declare void @llvm.assume(i1) #6

attributes #0 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9, !3}
!9 = !{!"llvm.loop.unroll.runtime.disable"}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !5}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !5}
!14 = distinct !{!14, !9, !3}
!15 = distinct !{!15, !5}
!16 = distinct !{!16, !5}
!17 = distinct !{!17, !5}
!18 = !{!19}
!19 = distinct !{!19, !20}
!20 = distinct !{!20, !"LVerDomain"}
!21 = !{!22}
!22 = distinct !{!22, !20}
!23 = distinct !{!23, !3}
!24 = distinct !{!24, !3}
!25 = distinct !{!25, !3}
!26 = distinct !{!26, !9, !3}
!27 = distinct !{!27, !3}
!28 = distinct !{!28, !9, !3}
!29 = distinct !{!29, !9, !3}
!30 = distinct !{!30, !9, !3}
!31 = !{i32 0, i32 33}
!32 = distinct !{!32, !3}
!33 = distinct !{!33, !3}
!34 = distinct !{!34, !3}
!35 = distinct !{!35, !3}
