; ModuleID = '../../native_client/src/trusted/service_runtime/posix/sel_memory.c'
source_filename = "../../native_client/src/trusted/service_runtime/posix/sel_memory.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

@.str = private unnamed_addr constant [30 x i8] c"NaClPageFree: munmap() failed\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"NaClPageAllocRandomized: 0x%lx\0A\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"NaClPageAllocRandomized: hint 0x%lx\0A\00", align 1
@.str.3 = private unnamed_addr constant [54 x i8] c"NaClPageAllocRandomized: failed (%d), dropping hints\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClPageFree(i8*, i64) local_unnamed_addr #0 {
  %3 = icmp eq i8* %0, null
  %4 = icmp eq i64 %1, 0
  %5 = or i1 %3, %4
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = tail call i32 @munmap(i8* nonnull %0, i64 %1) #4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %6
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0)) #4
  br label %10

10:                                               ; preds = %6, %2, %9
  ret void
}

; Function Attrs: nounwind
declare i32 @munmap(i8*, i64) local_unnamed_addr #1

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClPageAllocRandomized(i8** nocapture, i64) local_unnamed_addr #0 {
  %3 = tail call i32 @NaClGlobalSecureRngUint32() #4
  %4 = zext i32 %3 to i64
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i64 %4) #4
  %5 = shl nuw nsw i64 %4, 16
  %6 = and i64 %5, 140737488289792
  %7 = inttoptr i64 %6 to i8*
  store i8* %7, i8** %0, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0), i64 %6) #4
  %8 = load i8*, i8** %0, align 8
  %9 = tail call i8* @mmap64(i8* %8, i64 %1, i32 0, i32 34, i32 -1, i64 0) #4
  %10 = ptrtoint i8* %9 to i64
  switch i64 %10, label %11 [
    i64 -1, label %12
    i64 0, label %12
  ]

11:                                               ; preds = %2
  store i8* %9, i8** %0, align 8
  br label %24

12:                                               ; preds = %2, %2
  %13 = tail call i32 @NaClGlobalSecureRngUint32() #4
  %14 = zext i32 %13 to i64
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i64 %14) #4
  %15 = shl nuw nsw i64 %14, 16
  %16 = and i64 %15, 140737488289792
  %17 = inttoptr i64 %16 to i8*
  store i8* %17, i8** %0, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0), i64 %16) #4
  %18 = load i8*, i8** %0, align 8
  %19 = tail call i8* @mmap64(i8* %18, i64 %1, i32 0, i32 34, i32 -1, i64 0) #4
  %20 = ptrtoint i8* %19 to i64
  switch i64 %20, label %26 [
    i64 -1, label %27
    i64 0, label %27
  ]

21:                                               ; preds = %47
  store i8* %48, i8** %0, align 8
  br label %22

22:                                               ; preds = %47, %47, %21
  %23 = select i1 %51, i32 -12, i32 0
  br label %24

24:                                               ; preds = %46, %36, %26, %11, %22
  %25 = phi i32 [ %23, %22 ], [ 0, %46 ], [ 0, %36 ], [ 0, %26 ], [ 0, %11 ]
  ret i32 %25

26:                                               ; preds = %12
  store i8* %19, i8** %0, align 8
  br label %24

27:                                               ; preds = %12, %12
  %28 = tail call i32 @NaClGlobalSecureRngUint32() #4
  %29 = zext i32 %28 to i64
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i64 %29) #4
  %30 = shl nuw nsw i64 %29, 16
  %31 = and i64 %30, 140737488289792
  %32 = inttoptr i64 %31 to i8*
  store i8* %32, i8** %0, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0), i64 %31) #4
  %33 = load i8*, i8** %0, align 8
  %34 = tail call i8* @mmap64(i8* %33, i64 %1, i32 0, i32 34, i32 -1, i64 0) #4
  %35 = ptrtoint i8* %34 to i64
  switch i64 %35, label %36 [
    i64 -1, label %37
    i64 0, label %37
  ]

36:                                               ; preds = %27
  store i8* %34, i8** %0, align 8
  br label %24

37:                                               ; preds = %27, %27
  %38 = tail call i32 @NaClGlobalSecureRngUint32() #4
  %39 = zext i32 %38 to i64
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i64 %39) #4
  %40 = shl nuw nsw i64 %39, 16
  %41 = and i64 %40, 140737488289792
  %42 = inttoptr i64 %41 to i8*
  store i8* %42, i8** %0, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0), i64 %41) #4
  %43 = load i8*, i8** %0, align 8
  %44 = tail call i8* @mmap64(i8* %43, i64 %1, i32 0, i32 34, i32 -1, i64 0) #4
  %45 = ptrtoint i8* %44 to i64
  switch i64 %45, label %46 [
    i64 -1, label %47
    i64 0, label %47
  ]

46:                                               ; preds = %37
  store i8* %44, i8** %0, align 8
  br label %24

47:                                               ; preds = %37, %37
  tail call void (i32, i8*, ...) @NaClLog(i32 -1, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.3, i64 0, i64 0), i32 12) #4
  store i8* null, i8** %0, align 8
  %48 = tail call i8* @mmap64(i8* null, i64 %1, i32 0, i32 34, i32 -1, i64 0) #4
  %49 = icmp eq i8* %48, inttoptr (i64 -1 to i8*)
  %50 = icmp eq i8* %48, null
  %51 = or i1 %49, %50
  %52 = ptrtoint i8* %48 to i64
  switch i64 %52, label %21 [
    i64 -1, label %22
    i64 0, label %22
  ]
}

declare i32 @NaClGlobalSecureRngUint32() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClPageAlloc(i8** nocapture, i64) local_unnamed_addr #0 {
  %3 = tail call i8* @mmap64(i8* null, i64 %1, i32 0, i32 16418, i32 -1, i64 0) #4
  %4 = icmp eq i8* %3, inttoptr (i64 -1 to i8*)
  %5 = icmp eq i8* %3, null
  %6 = or i1 %4, %5
  %7 = ptrtoint i8* %3 to i64
  switch i64 %7, label %8 [
    i64 -1, label %9
    i64 0, label %9
  ]

8:                                                ; preds = %2
  br label %9

9:                                                ; preds = %2, %2, %8
  %10 = phi i64 [ %7, %8 ], [ 0, %2 ], [ 0, %2 ]
  %11 = select i1 %6, i32 -12, i32 0
  switch i64 %7, label %12 [
    i64 -1, label %14
    i64 0, label %14
  ]

12:                                               ; preds = %9
  %13 = bitcast i8** %0 to i64*
  store i64 %10, i64* %13, align 8
  br label %14

14:                                               ; preds = %9, %9, %12
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClPageAllocAtAddr(i8** nocapture, i64) local_unnamed_addr #0 {
  %3 = load i8*, i8** %0, align 8
  %4 = icmp eq i8* %3, null
  %5 = select i1 %4, i32 16418, i32 16434
  %6 = tail call i8* @mmap64(i8* %3, i64 %1, i32 0, i32 %5, i32 -1, i64 0) #4
  %7 = icmp eq i8* %6, inttoptr (i64 -1 to i8*)
  %8 = icmp eq i8* %6, null
  %9 = or i1 %7, %8
  %10 = ptrtoint i8* %6 to i64
  switch i64 %10, label %11 [
    i64 -1, label %12
    i64 0, label %12
  ]

11:                                               ; preds = %2
  store i8* %6, i8** %0, align 8
  br label %12

12:                                               ; preds = %2, %2, %11
  %13 = select i1 %9, i32 -12, i32 0
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClMprotect(i8*, i64, i32) local_unnamed_addr #0 {
  %4 = tail call i32 @mprotect(i8* %0, i64 %1, i32 %2) #4
  %5 = icmp eq i32 %4, -1
  br i1 %5, label %6, label %10

6:                                                ; preds = %3
  %7 = tail call i32* @__errno_location() #5
  %8 = load i32, i32* %7, align 4
  %9 = sub nsw i32 0, %8
  br label %10

10:                                               ; preds = %3, %6
  %11 = phi i32 [ %9, %6 ], [ %4, %3 ]
  ret i32 %11
}

; Function Attrs: nounwind
declare i32 @mprotect(i8*, i64, i32) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClMadvise(i8*, i64, i32) local_unnamed_addr #0 {
  %4 = tail call i32 @madvise(i8* %0, i64 %1, i32 %2) #4
  %5 = icmp eq i32 %4, -1
  br i1 %5, label %6, label %10

6:                                                ; preds = %3
  %7 = tail call i32* @__errno_location() #5
  %8 = load i32, i32* %7, align 4
  %9 = sub nsw i32 0, %8
  br label %10

10:                                               ; preds = %3, %6
  %11 = phi i32 [ %9, %6 ], [ %4, %3 ]
  ret i32 %11
}

; Function Attrs: nounwind
declare i32 @madvise(i8*, i64, i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare i8* @mmap64(i8*, i64, i32, i32, i32, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
