; ModuleID = '../../services/network/public/cpp/trust_token_http_headers.cc'
source_filename = "../../services/network/public/cpp/trust_token_http_headers.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.base::NoDestructor" = type { [24 x i8] }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::BasicStringPiece"* }

@_ZZN7network25TrustTokensRequestHeadersEvE7headers = internal global %"class.base::NoDestructor" zeroinitializer, align 8
@_ZGVZN7network25TrustTokensRequestHeadersEvE7headers = internal global i64 0, align 8
@_ZN7networkL37kTrustTokensRequestHeaderSecSignatureE = internal constant [14 x i8] c"Sec-Signature\00", align 1
@_ZN7networkL44kTrustTokensRequestHeaderSecRedemptionRecordE = internal constant [22 x i8] c"Sec-Redemption-Record\00", align 16
@_ZN7networkL32kTrustTokensRequestHeaderSecTimeE = internal constant [9 x i8] c"Sec-Time\00", align 1
@_ZN7networkL31kTrustTokensSecTrustTokenHeaderE = internal constant [16 x i8] c"Sec-Trust-Token\00", align 16
@_ZN7networkL38kTrustTokensSecTrustTokenVersionHeaderE = internal constant [24 x i8] c"Sec-Trust-Token-Version\00", align 16
@_ZN7networkL60kTrustTokensRequestHeaderSecTrustTokensAdditionalSigningDataE = internal constant [41 x i8] c"Sec-Trust-Tokens-Additional-Signing-Data\00", align 16
@.ref.tmp = private unnamed_addr constant [6 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @_ZN7networkL37kTrustTokensRequestHeaderSecSignatureE, i32 0, i32 0), i64 13 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @_ZN7networkL44kTrustTokensRequestHeaderSecRedemptionRecordE, i32 0, i32 0), i64 21 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @_ZN7networkL32kTrustTokensRequestHeaderSecTimeE, i32 0, i32 0), i64 8 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZN7networkL31kTrustTokensSecTrustTokenHeaderE, i32 0, i32 0), i64 15 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @_ZN7networkL38kTrustTokensSecTrustTokenVersionHeaderE, i32 0, i32 0), i64 23 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([41 x i8], [41 x i8]* @_ZN7networkL60kTrustTokensRequestHeaderSecTrustTokensAdditionalSigningDataE, i32 0, i32 0), i64 40 }], align 8

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.std::__1::vector"* @_ZN7network25TrustTokensRequestHeadersEv() local_unnamed_addr #0 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN7network25TrustTokensRequestHeadersEvE7headers to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %11, !prof !2

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN7network25TrustTokensRequestHeadersEvE7headers) #4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %11, label %6

6:                                                ; preds = %3
  %7 = tail call i8* @_Znwm(i64 96) #5
  %8 = ptrtoint i8* %7 to i64
  %9 = getelementptr inbounds i8, i8* %7, i64 96
  %10 = ptrtoint i8* %9 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* align 8 bitcast ([6 x %"class.base::BasicStringPiece"]* @.ref.tmp to i8*), i64 96, i1 false) #4
  store i64 %8, i64* bitcast (%"class.base::NoDestructor"* @_ZZN7network25TrustTokensRequestHeadersEvE7headers to i64*), align 8
  store i64 %10, i64* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN7network25TrustTokensRequestHeadersEvE7headers, i64 0, i32 0, i64 8) to i64*), align 8
  store i64 %10, i64* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN7network25TrustTokensRequestHeadersEvE7headers, i64 0, i32 0, i64 16) to i64*), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN7network25TrustTokensRequestHeadersEvE7headers) #4
  br label %11

11:                                               ; preds = %3, %6, %0
  ret %"class.std::__1::vector"* bitcast (%"class.base::NoDestructor"* @_ZZN7network25TrustTokensRequestHeadersEvE7headers to %"class.std::__1::vector"*)
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
