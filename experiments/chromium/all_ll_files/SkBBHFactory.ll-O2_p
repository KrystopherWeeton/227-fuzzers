; ModuleID = '../../third_party/skia/src/core/SkBBHFactory.cpp'
source_filename = "../../third_party/skia/src/core/SkBBHFactory.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.sk_sp = type { %class.SkBBoxHierarchy* }
%class.SkBBoxHierarchy = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkRTreeFactory = type { %class.SkBBHFactory }
%class.SkBBHFactory = type { i32 (...)** }
%class.SkRTree = type { %class.SkBBoxHierarchy.base, i32, %"struct.SkRTree::Branch", %"class.std::__1::vector" }
%class.SkBBoxHierarchy.base = type { %class.SkRefCnt.base }
%"struct.SkRTree::Branch" = type { %union.anon, %struct.SkRect }
%union.anon = type { %"struct.SkRTree::Node"* }
%"struct.SkRTree::Node" = type { i16, i16, [11 x %"struct.SkRTree::Branch"] }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.SkRTree::Node"*, %"struct.SkRTree::Node"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkRTree::Node"* }
%"struct.SkBBoxHierarchy::Metadata" = type { i8 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>

$_ZN12SkBBHFactoryD2Ev = comdat any

$_ZN14SkRTreeFactoryD0Ev = comdat any

$_ZN12SkRefCntBaseD2Ev = comdat any

$_ZN15SkBBoxHierarchyD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

@_ZTV14SkRTreeFactory = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.sk_sp*, %class.SkRTreeFactory*)* @_ZNK14SkRTreeFactoryclEv to i8*), i8* bitcast (void (%class.SkBBHFactory*)* @_ZN12SkBBHFactoryD2Ev to i8*), i8* bitcast (void (%class.SkRTreeFactory*)* @_ZN14SkRTreeFactoryD0Ev to i8*)] }, align 8
@_ZTV15SkBBoxHierarchy = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%class.SkBBoxHierarchy*)* @_ZN15SkBBoxHierarchyD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%class.SkBBoxHierarchy*, %struct.SkRect*, %"struct.SkBBoxHierarchy::Metadata"*, i32)* @_ZN15SkBBoxHierarchy6insertEPK6SkRectPKNS_8MetadataEi to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK14SkRTreeFactoryclEv(%class.sk_sp* noalias nocapture sret, %class.SkRTreeFactory* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = tail call i8* @_Znwm(i64 64) #6, !noalias !2
  %4 = bitcast i8* %3 to %class.SkRTree*
  tail call void @_ZN7SkRTreeC1Ev(%class.SkRTree* nonnull %4) #7, !noalias !2
  %5 = ptrtoint i8* %3 to i64
  %6 = bitcast %class.sk_sp* %0 to i64*
  store i64 %5, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkBBoxHierarchy6insertEPK6SkRectPKNS_8MetadataEi(%class.SkBBoxHierarchy*, %struct.SkRect*, %"struct.SkBBoxHierarchy::Metadata"* nocapture readnone, i32) unnamed_addr #0 align 2 {
  %5 = bitcast %class.SkBBoxHierarchy* %0 to void (%class.SkBBoxHierarchy*, %struct.SkRect*, i32)***
  %6 = load void (%class.SkBBoxHierarchy*, %struct.SkRect*, i32)**, void (%class.SkBBoxHierarchy*, %struct.SkRect*, i32)*** %5, align 8
  %7 = getelementptr inbounds void (%class.SkBBoxHierarchy*, %struct.SkRect*, i32)*, void (%class.SkBBoxHierarchy*, %struct.SkRect*, i32)** %6, i64 3
  %8 = load void (%class.SkBBoxHierarchy*, %struct.SkRect*, i32)*, void (%class.SkBBoxHierarchy*, %struct.SkRect*, i32)** %7, align 8
  tail call void %8(%class.SkBBoxHierarchy* %0, %struct.SkRect* %1, i32 %3) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SkBBHFactoryD2Ev(%class.SkBBHFactory*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN14SkRTreeFactoryD0Ev(%class.SkRTreeFactory*) unnamed_addr #1 comdat align 2 {
  %2 = bitcast %class.SkRTreeFactory* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SkRefCntBaseD2Ev(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN15SkBBoxHierarchyD0Ev(%class.SkBBoxHierarchy*) unnamed_addr #1 comdat align 2 {
  tail call void @llvm.trap() #8
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #7
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

declare void @_ZN7SkRTreeC1Ev(%class.SkRTree*) unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_Z10sk_make_spI7SkRTreeJEE5sk_spIT_EDpOT0_: argument 0"}
!4 = distinct !{!4, !"_Z10sk_make_spI7SkRTreeJEE5sk_spIT_EDpOT0_"}
