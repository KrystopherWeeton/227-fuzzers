; ModuleID = '../../third_party/boringssl/src/ssl/ssl_file.cc'
source_filename = "../../third_party/boringssl/src/ssl/ssl_file.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stack_st_X509_NAME = type opaque
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type opaque
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.ssl_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"class.std::__1::unique_ptr.2", i16, i16, [4 x i8], %"class.std::__1::unique_ptr.91", %"class.std::__1::unique_ptr.91", i32 (%"struct.bssl::SSL_HANDSHAKE"*)*, %"struct.bssl::SSL3_STATE"*, %"struct.bssl::DTLS1_STATE"*, void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], %"class.std::__1::unique_ptr.58", void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.106", %"class.std::__1::unique_ptr.106", %struct.crypto_ex_data_st, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.29", %struct.ssl_quic_method_st*, i32, i8, [3 x i8] }>
%"struct.bssl::SSL_PROTOCOL_METHOD" = type { i8, i1 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %"struct.bssl::SSLMessage"*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, %"class.bssl::Span"*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %struct.cbb_st*, i8)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)* }
%"struct.bssl::SSLMessage" = type { i8, i8, %struct.cbs_st, %struct.cbs_st }
%struct.cbs_st = type { i8*, i64 }
%"class.bssl::Span" = type { i8*, i64 }
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%"class.bssl::Array" = type { i8*, i64 }
%"class.bssl::SSLAEADContext" = type <{ %struct.ssl_cipher_st*, %"class.bssl::internal::StackAllocated", [12 x i8], i8, i8, i16, i8, i8, [6 x i8] }>
%struct.ssl_cipher_st = type { i8*, i8*, i32, i32, i32, i32, i32, i32 }
%"class.bssl::internal::StackAllocated" = type { %struct.evp_aead_ctx_st }
%struct.evp_aead_ctx_st = type { %struct.evp_aead_st*, %union.evp_aead_ctx_st_state, i8 }
%struct.evp_aead_st = type opaque
%union.evp_aead_ctx_st_state = type { i64, [576 x i8] }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.bssl::SSL_CONFIG"* }
%"struct.bssl::SSL_CONFIG" = type <{ %struct.ssl_st*, i16, i16, [4 x i8], %struct.X509_VERIFY_PARAM_st*, %"class.std::__1::unique_ptr.5", %"class.std::__1::unique_ptr.15", i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.ssl_st*, i8*)*, %"class.std::__1::unique_ptr.29", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, %"class.std::__1::unique_ptr.24", %struct.stack_st_X509_NAME*, %"class.bssl::Array.56", %"class.std::__1::unique_ptr.18", %"class.bssl::Array", %"class.bssl::GrowableArray.82", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.56", %"class.std::__1::unique_ptr.84", i8, i16, [5 x i8] }>
%struct.X509_VERIFY_PARAM_st = type { i8*, i64, i64, i64, i32, i32, i32, %struct.stack_st_ASN1_OBJECT*, %struct.X509_VERIFY_PARAM_ID_st* }
%struct.stack_st_ASN1_OBJECT = type opaque
%struct.X509_VERIFY_PARAM_ID_st = type opaque
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.bssl::SSLCipherPreferenceList"* }
%"struct.bssl::SSLCipherPreferenceList" = type { %"class.std::__1::unique_ptr.8", i8* }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %struct.stack_st_SSL_CIPHER* }
%struct.stack_st_SSL_CIPHER = type opaque
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.bssl::CERT"* }
%"struct.bssl::CERT" = type { %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.24", %struct.stack_st_X509*, %struct.x509_st*, %struct.x509_st*, %struct.ssl_private_key_method_st*, %"struct.bssl::SSL_X509_METHOD"*, %"class.bssl::Array.56", i32 (%struct.ssl_st*, i8*)*, i8*, %struct.x509_store_st*, %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.34", i8, [32 x i8], %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.18", %struct.ssl_private_key_method_st* }
%struct.stack_st_X509 = type opaque
%"struct.bssl::SSL_X509_METHOD" = type { i1 (%struct.stack_st_CRYPTO_BUFFER*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*, %"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, i1 (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %struct.ssl_session_st*)*, void (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %"struct.bssl::SSL_HANDSHAKE"*, i8*)*, void (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)* }
%struct.stack_st_CRYPTO_BUFFER = type opaque
%struct.ssl_session_st = type { i32, i16, i16, i16, i32, [48 x i8], i32, [32 x i8], i8, [32 x i8], %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.24", %"struct.bssl::SSL_X509_METHOD"*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509*, i64, i32, i32, i64, %struct.ssl_cipher_st*, %struct.crypto_ex_data_st, %struct.ssl_session_st*, %struct.ssl_session_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.34", [32 x i8], [64 x i8], i8, i32, i32, i32, %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, %"class.bssl::Array" }
%"struct.bssl::SSL_HANDSHAKE" = type <{ %struct.ssl_st*, %"struct.bssl::SSL_CONFIG"*, i32, i32, i32, i16, i16, i64, [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], %union.anon.39, i16, [2 x i8], %"class.std::__1::unique_ptr.40", [2 x %"class.std::__1::unique_ptr.45"], %"class.bssl::SSLTranscript", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.56", %"class.bssl::Array.56", %"class.bssl::Array.56", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::internal::StackAllocated.57", %"class.bssl::Array", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.24", %struct.stack_st_X509_NAME*, %"class.bssl::Array", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.63", %struct.ssl_cipher_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.70", i32, i16, i16, i16, i8, [32 x i8], i8, [6 x i8], [6 x i8] }>
%union.anon.39 = type { i32 }
%"class.std::__1::unique_ptr.40" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %struct.err_save_state_st* }
%struct.err_save_state_st = type opaque
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.bssl::SSLKeyShare"* }
%"class.bssl::SSLKeyShare" = type { i32 (...)** }
%"class.bssl::SSLTranscript" = type { %"class.std::__1::unique_ptr.50", %"class.bssl::internal::StackAllocated.55" }
%"class.std::__1::unique_ptr.50" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %struct.buf_mem_st* }
%"class.bssl::internal::StackAllocated.55" = type { %struct.env_md_ctx_st }
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.env_md_st = type opaque
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%"class.bssl::internal::StackAllocated.57" = type { %struct.evp_hpke_ctx_st }
%struct.evp_hpke_ctx_st = type { %struct.evp_hpke_aead_st*, %struct.evp_hpke_kdf_st*, %struct.evp_aead_ctx_st, [24 x i8], [64 x i8], i64, i32 }
%struct.evp_hpke_aead_st = type opaque
%struct.evp_hpke_kdf_st = type opaque
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %struct.ssl_ech_server_config_list_st* }
%struct.ssl_ech_server_config_list_st = type <{ %"class.bssl::GrowableArray", i32, [4 x i8] }>
%"class.bssl::GrowableArray" = type { i64, %"class.bssl::Array.66" }
%"class.bssl::Array.66" = type { %"class.std::__1::unique_ptr.67"*, i64 }
%"class.std::__1::unique_ptr.67" = type opaque
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"struct.bssl::SSL_HANDSHAKE_HINTS"* }
%"struct.bssl::SSL_HANDSHAKE_HINTS" = type <{ %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, [7 x i8] }>
%struct.ssl_ctx_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_X509_METHOD"*, %union.crypto_mutex_st, i16, i16, [4 x i8], %struct.ssl_quic_method_st*, %"class.std::__1::unique_ptr.5", %struct.x509_store_st*, %struct.lhash_st_SSL_SESSION*, i64, %struct.ssl_session_st*, %struct.ssl_session_st*, i32, i32, i32, i32, i32 (%struct.ssl_st*, %struct.ssl_session_st*)*, void (%struct.ssl_ctx_st*, %struct.ssl_session_st*)*, %struct.ssl_session_st* (%struct.ssl_st*, i8*, i32, i32*)*, i32, [4 x i8], i32 (%struct.x509_store_ctx_st*, i8*)*, i8*, i32 (%struct.ssl_st*, i8*)*, i32 (i8*, i32, i32, i8*)*, i8*, i32 (%struct.ssl_st*, %struct.x509_st**, %struct.evp_pkey_st**)*, void (%struct.ssl_st*, %struct.evp_pkey_st**)*, %struct.crypto_ex_data_st, void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.24", %struct.stack_st_X509_NAME*, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.15", void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], i32 (i32, %struct.x509_store_ctx_st*)*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.ssl_early_callback_ctx*)*, i32 (%struct.ssl_early_callback_ctx*)*, i8, i8, i16, [4 x i8], i32 (%struct.ssl_st*, i32*, i8*)*, i8*, %"class.std::__1::unique_ptr.109", %"class.std::__1::unique_ptr.109", i32 (%struct.ssl_st*, i8*, i8*, %struct.evp_cipher_ctx_st*, %struct.hmac_ctx_st*, i32)*, %"class.std::__1::unique_ptr.29", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*, i8**, i32*, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, %"class.bssl::Array", %"class.std::__1::unique_ptr.84", %"class.bssl::GrowableArray.114", %"class.bssl::Array.56", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.63", void (%struct.ssl_st*, i8*)*, void (%struct.ssl_st*, %struct.timeval*)*, %struct.crypto_buffer_pool_st*, %struct.ssl_ticket_aead_method_st*, i32 (%struct.ssl_st*, i8*)*, i8*, %"class.bssl::Array.56", i16, [6 x i8] }>
%struct.lhash_st_SSL_SESSION = type opaque
%struct.x509_store_ctx_st = type { %struct.x509_store_st*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509_CRL*, %struct.X509_VERIFY_PARAM_st*, i8*, {}*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, {}*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, {}*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, {}*, i32, i32, %struct.stack_st_X509*, %struct.X509_POLICY_TREE_st*, i32, i32, i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_crl_st*, i32, i32, %struct.x509_store_ctx_st*, %struct.crypto_ex_data_st }
%struct.stack_st_X509_CRL = type opaque
%struct.X509_POLICY_TREE_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type opaque
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.evp_pkey_st = type { i32, i32, %union.anon.21, %struct.evp_pkey_asn1_method_st* }
%union.anon.21 = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.ssl_early_callback_ctx = type { %struct.ssl_st*, i8*, i64, i16, i8*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64 }
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"struct.bssl::TicketKey"* }
%"struct.bssl::TicketKey" = type { [16 x i8], [16 x i8], [16 x i8], i64 }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.hmac_ctx_st = type { %struct.env_md_st*, %struct.env_md_ctx_st, %struct.env_md_ctx_st, %struct.env_md_ctx_st }
%"class.bssl::GrowableArray.114" = type { i64, %"class.bssl::Array.115" }
%"class.bssl::Array.115" = type { %"struct.bssl::CertCompressionAlg"*, i64 }
%"struct.bssl::CertCompressionAlg" = type <{ i32 (%struct.ssl_st*, %struct.cbb_st*, i8*, i64)*, i32 (%struct.ssl_st*, %struct.crypto_buffer_st**, i64, i8*, i64)*, i16, [6 x i8] }>
%struct.timeval = type { i64, i64 }
%struct.crypto_buffer_pool_st = type opaque
%struct.ssl_ticket_aead_method_st = type { i64 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)* }
%struct.x509_store_st = type { i32, %struct.stack_st_X509_OBJECT*, %union.crypto_mutex_st, %struct.stack_st_X509*, %struct.stack_st_X509_LOOKUP*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 }
%struct.stack_st_X509_OBJECT = type opaque
%struct.stack_st_X509_LOOKUP = type opaque
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %struct.crypto_buffer_st* }
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"struct.bssl::DC"* }
%"struct.bssl::DC" = type { %"class.std::__1::unique_ptr.34", i16, %"class.std::__1::unique_ptr.18" }
%struct.ssl_private_key_method_st = type { i32 (%struct.ssl_st*, i8*, i64*, i64, i16, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64)* }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %struct.stack_st_CRYPTO_BUFFER* }
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %struct.evp_pkey_st* }
%"class.bssl::GrowableArray.82" = type { i64, %"class.bssl::Array.83" }
%"class.bssl::Array.83" = type { %"struct.bssl::ALPSConfig"*, i64 }
%"struct.bssl::ALPSConfig" = type { %"class.bssl::Array", %"class.bssl::Array" }
%"class.bssl::Array.56" = type { i16*, i64 }
%"class.std::__1::unique_ptr.84" = type { %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %struct.stack_st_SRTP_PROTECTION_PROFILE* }
%struct.stack_st_SRTP_PROTECTION_PROFILE = type opaque
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %struct.bio_st* }
%"struct.bssl::SSL3_STATE" = type <{ [8 x i8], [8 x i8], [32 x i8], [32 x i8], %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer", %"class.bssl::Span", i32, i32, i32, i32, i8*, i32, i32, %"class.std::__1::unique_ptr.40", i32, i32, i32, i32, i16, i8, i8, i8, i16, i8, %"class.std::__1::unique_ptr.50", %"class.std::__1::unique_ptr.50", %"class.std::__1::unique_ptr.50", i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.96", [48 x i8], [48 x i8], [48 x i8], i8, i8, i8, [12 x i8], i8, i8, [12 x i8], [2 x i8], i8, %"class.std::__1::unique_ptr.58", %"class.bssl::Array", %"class.bssl::Array", %"class.std::__1::unique_ptr.29", [64 x i8], %"class.bssl::Array", %struct.srtp_protection_profile_st* }>
%"class.bssl::SSLBuffer" = type <{ i8*, i16, i16, i16, [5 x i8], i8, [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.bssl::SSLAEADContext"* }
%"class.std::__1::unique_ptr.96" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"struct.bssl::SSL_HANDSHAKE"* }
%struct.srtp_protection_profile_st = type { i8*, i64 }
%"struct.bssl::DTLS1_STATE" = type <{ i8, [256 x i8], [7 x i8], i64, i16, i16, [4 x i8], %"struct.bssl::DTLS1_BITMAP", i16, i16, [8 x i8], [4 x i8], %"class.std::__1::unique_ptr", [7 x %"class.std::__1::unique_ptr.101"], [7 x %"struct.bssl::DTLS_OUTGOING_MESSAGE"], i8, i8, [2 x i8], i32, i32, i32, %"struct.bssl::OPENSSL_timeval", i32, [4 x i8] }>
%"struct.bssl::DTLS1_BITMAP" = type { i64, i64 }
%"class.std::__1::unique_ptr.101" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"struct.bssl::hm_fragment"* }
%"struct.bssl::hm_fragment" = type { i8, i16, i32, i8*, i8* }
%"struct.bssl::DTLS_OUTGOING_MESSAGE" = type <{ i8*, i32, i16, i8, i8 }>
%"struct.bssl::OPENSSL_timeval" = type { i64, i32 }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %struct.ssl_session_st* }
%"class.std::__1::unique_ptr.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %struct.ssl_ctx_st* }
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { i8* }
%struct.ssl_quic_method_st = type { i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, i8*, i64)*, i32 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i32, i8)* }
%struct.rsa_st = type { %struct.rsa_meth_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.crypto_ex_data_st, i32, i32, %union.crypto_mutex_st, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, i32, %struct.bn_blinding_st**, i8*, i64, i8 }
%struct.rsa_meth_st = type { %struct.openssl_method_common_st, i8*, i32 (%struct.rsa_st*)*, i32 (%struct.rsa_st*)*, i64 (%struct.rsa_st*)*, i32 (i32, i8*, i32, i8*, i32*, %struct.rsa_st*)*, i32 (%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32)*, i32 (%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32)*, i32 (%struct.rsa_st*, i8*, i8*, i64)*, i32 }
%struct.openssl_method_common_st = type { i32, i8 }
%struct.bn_mont_ctx_st = type { %struct.bignum_st, %struct.bignum_st, [2 x i64] }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%struct.bn_blinding_st = type opaque

$sk_X509_NAME_call_cmp_func = comdat any

$sk_X509_NAME_call_free_func = comdat any

@.str = private unnamed_addr constant [48 x i8] c"../../third_party/boringssl/src/ssl/ssl_file.cc\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.stack_st_X509_NAME* @SSL_load_client_CA_file(i8*) local_unnamed_addr #0 {
  %2 = alloca %struct.x509_st*, align 8
  %3 = bitcast %struct.x509_st** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #6
  store %struct.x509_st* null, %struct.x509_st** %2, align 8
  %4 = tail call %struct.stack_st* @sk_new(i32 (i8**, i8**)* bitcast (i32 (%struct.X509_name_st**, %struct.X509_name_st**)* @_ZL9xname_cmpPPK12X509_name_stS2_ to i32 (i8**, i8**)*)) #6
  %5 = tail call %struct.bio_method_st* @BIO_s_file() #6
  %6 = tail call %struct.bio_st* @BIO_new(%struct.bio_method_st* %5) #6
  %7 = icmp eq %struct.stack_st* %4, null
  %8 = icmp eq %struct.bio_st* %6, null
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %1
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 143) #6
  br label %49

11:                                               ; preds = %1
  %12 = tail call i32 @BIO_read_filename(%struct.bio_st* nonnull %6, i8* %0) #6
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %49, label %14

14:                                               ; preds = %11
  %15 = call %struct.x509_st* @PEM_read_bio_X509(%struct.bio_st* nonnull %6, %struct.x509_st** nonnull %2, i32 (i8*, i32, i32, i8*)* null, i8* null) #6
  %16 = icmp eq %struct.x509_st* %15, null
  br i1 %16, label %52, label %17

17:                                               ; preds = %14, %34
  %18 = phi %struct.stack_st_X509_NAME* [ %26, %34 ], [ null, %14 ]
  %19 = icmp eq %struct.stack_st_X509_NAME* %18, null
  br i1 %19, label %20, label %25

20:                                               ; preds = %17
  %21 = call %struct.stack_st* @sk_new_null() #6
  %22 = bitcast %struct.stack_st* %21 to %struct.stack_st_X509_NAME*
  %23 = icmp eq %struct.stack_st* %21, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %20
  call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 158) #6
  br label %49

25:                                               ; preds = %20, %17
  %26 = phi %struct.stack_st_X509_NAME* [ %22, %20 ], [ %18, %17 ]
  %27 = load %struct.x509_st*, %struct.x509_st** %2, align 8
  %28 = call %struct.X509_name_st* @X509_get_subject_name(%struct.x509_st* %27) #6
  %29 = icmp eq %struct.X509_name_st* %28, null
  br i1 %29, label %49, label %30

30:                                               ; preds = %25
  call void @sk_sort(%struct.stack_st* %4) #6
  %31 = bitcast %struct.X509_name_st* %28 to i8*
  %32 = call i32 @sk_find(%struct.stack_st* %4, i64* null, i8* nonnull %31, i32 (i32 (i8**, i8**)*, i8**, i8**)* nonnull @sk_X509_NAME_call_cmp_func) #6
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %37, label %34

34:                                               ; preds = %30, %44
  %35 = call %struct.x509_st* @PEM_read_bio_X509(%struct.bio_st* %6, %struct.x509_st** nonnull %2, i32 (i8*, i32, i32, i8*)* null, i8* null) #6
  %36 = icmp eq %struct.x509_st* %35, null
  br i1 %36, label %52, label %17

37:                                               ; preds = %30
  %38 = call %struct.X509_name_st* @X509_NAME_dup(%struct.X509_name_st* nonnull %28) #6
  %39 = icmp eq %struct.X509_name_st* %38, null
  br i1 %39, label %48, label %40

40:                                               ; preds = %37
  %41 = bitcast %struct.X509_name_st* %38 to i8*
  %42 = call i64 @sk_push(%struct.stack_st* %4, i8* nonnull %41) #6
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %40
  %45 = bitcast %struct.stack_st_X509_NAME* %26 to %struct.stack_st*
  %46 = call i64 @sk_push(%struct.stack_st* %45, i8* nonnull %41) #6
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %34

48:                                               ; preds = %44, %40, %37
  call void @X509_NAME_free(%struct.X509_name_st* %38) #6
  br label %49

49:                                               ; preds = %25, %11, %48, %24, %10
  %50 = phi %struct.stack_st_X509_NAME* [ null, %10 ], [ null, %24 ], [ %26, %48 ], [ null, %11 ], [ %26, %25 ]
  %51 = bitcast %struct.stack_st_X509_NAME* %50 to %struct.stack_st*
  call void @sk_pop_free_ex(%struct.stack_st* %51, void (void (i8*)*, i8*)* nonnull @sk_X509_NAME_call_free_func, void (i8*)* bitcast (void (%struct.X509_name_st*)* @X509_NAME_free to void (i8*)*)) #6
  br label %52

52:                                               ; preds = %34, %14, %49
  %53 = phi %struct.stack_st_X509_NAME* [ null, %49 ], [ null, %14 ], [ %26, %34 ]
  call void @sk_free(%struct.stack_st* %4) #6
  %54 = call i32 @BIO_free(%struct.bio_st* %6) #6
  %55 = load %struct.x509_st*, %struct.x509_st** %2, align 8
  call void @X509_free(%struct.x509_st* %55) #6
  %56 = icmp eq %struct.stack_st_X509_NAME* %53, null
  br i1 %56, label %58, label %57

57:                                               ; preds = %52
  call void @ERR_clear_error() #6
  br label %58

58:                                               ; preds = %52, %57
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #6
  ret %struct.stack_st_X509_NAME* %53
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL9xname_cmpPPK12X509_name_stS2_(%struct.X509_name_st** nocapture readonly, %struct.X509_name_st** nocapture readonly) #0 {
  %3 = load %struct.X509_name_st*, %struct.X509_name_st** %0, align 8
  %4 = load %struct.X509_name_st*, %struct.X509_name_st** %1, align 8
  %5 = tail call i32 @X509_NAME_cmp(%struct.X509_name_st* %3, %struct.X509_name_st* %4) #6
  ret i32 %5
}

declare %struct.bio_st* @BIO_new(%struct.bio_method_st*) local_unnamed_addr #2

declare %struct.bio_method_st* @BIO_s_file() local_unnamed_addr #2

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #2

declare i32 @BIO_read_filename(%struct.bio_st*, i8*) local_unnamed_addr #2

declare %struct.x509_st* @PEM_read_bio_X509(%struct.bio_st*, %struct.x509_st**, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #2

declare %struct.X509_name_st* @X509_get_subject_name(%struct.x509_st*) local_unnamed_addr #2

declare %struct.X509_name_st* @X509_NAME_dup(%struct.X509_name_st*) local_unnamed_addr #2

declare void @X509_NAME_free(%struct.X509_name_st*) #2

declare i32 @BIO_free(%struct.bio_st*) local_unnamed_addr #2

declare void @X509_free(%struct.x509_st*) local_unnamed_addr #2

declare void @ERR_clear_error() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_add_file_cert_subjects_to_stack(%struct.stack_st_X509_NAME*, i8*) local_unnamed_addr #0 {
  %3 = alloca %struct.x509_st*, align 8
  %4 = bitcast %struct.x509_st** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #6
  store %struct.x509_st* null, %struct.x509_st** %3, align 8
  %5 = bitcast %struct.stack_st_X509_NAME* %0 to %struct.stack_st*
  %6 = tail call i32 (i8**, i8**)* @sk_set_cmp_func(%struct.stack_st* %5, i32 (i8**, i8**)* bitcast (i32 (%struct.X509_name_st**, %struct.X509_name_st**)* @_ZL9xname_cmpPPK12X509_name_stS2_ to i32 (i8**, i8**)*)) #6
  %7 = tail call %struct.bio_method_st* @BIO_s_file() #6
  %8 = tail call %struct.bio_st* @BIO_new(%struct.bio_method_st* %7) #6
  %9 = icmp eq %struct.bio_st* %8, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %2
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 209) #6
  br label %37

11:                                               ; preds = %2
  %12 = tail call i32 @BIO_read_filename(%struct.bio_st* nonnull %8, i8* %1) #6
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %37, label %14

14:                                               ; preds = %11
  %15 = call %struct.x509_st* @PEM_read_bio_X509(%struct.bio_st* nonnull %8, %struct.x509_st** nonnull %3, i32 (i8*, i32, i32, i8*)* null, i8* null) #6
  %16 = icmp eq %struct.x509_st* %15, null
  br i1 %16, label %36, label %17

17:                                               ; preds = %14, %25
  %18 = load %struct.x509_st*, %struct.x509_st** %3, align 8
  %19 = call %struct.X509_name_st* @X509_get_subject_name(%struct.x509_st* %18) #6
  %20 = icmp eq %struct.X509_name_st* %19, null
  br i1 %20, label %37, label %21

21:                                               ; preds = %17
  call void @sk_sort(%struct.stack_st* %5) #6
  %22 = bitcast %struct.X509_name_st* %19 to i8*
  %23 = call i32 @sk_find(%struct.stack_st* %5, i64* null, i8* nonnull %22, i32 (i32 (i8**, i8**)*, i8**, i8**)* nonnull @sk_X509_NAME_call_cmp_func) #6
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %21, %31
  %26 = call %struct.x509_st* @PEM_read_bio_X509(%struct.bio_st* nonnull %8, %struct.x509_st** nonnull %3, i32 (i8*, i32, i32, i8*)* null, i8* null) #6
  %27 = icmp eq %struct.x509_st* %26, null
  br i1 %27, label %36, label %17

28:                                               ; preds = %21
  %29 = call %struct.X509_name_st* @X509_NAME_dup(%struct.X509_name_st* nonnull %19) #6
  %30 = icmp eq %struct.X509_name_st* %29, null
  br i1 %30, label %35, label %31

31:                                               ; preds = %28
  %32 = bitcast %struct.X509_name_st* %29 to i8*
  %33 = call i64 @sk_push(%struct.stack_st* %5, i8* nonnull %32) #6
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %25

35:                                               ; preds = %31, %28
  call void @X509_NAME_free(%struct.X509_name_st* %29) #6
  br label %37

36:                                               ; preds = %25, %14
  call void @ERR_clear_error() #6
  br label %37

37:                                               ; preds = %17, %11, %36, %35, %10
  %38 = phi i32 [ 0, %10 ], [ 1, %36 ], [ 0, %35 ], [ 0, %11 ], [ 0, %17 ]
  %39 = call i32 @BIO_free(%struct.bio_st* %8) #6
  %40 = load %struct.x509_st*, %struct.x509_st** %3, align 8
  call void @X509_free(%struct.x509_st* %40) #6
  %41 = call i32 (i8**, i8**)* @sk_set_cmp_func(%struct.stack_st* %5, i32 (i8**, i8**)* %6) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #6
  ret i32 %38
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_use_certificate_file(%struct.ssl_st*, i8*, i32) local_unnamed_addr #0 {
  %4 = tail call %struct.bio_method_st* @BIO_s_file() #6
  %5 = tail call %struct.bio_st* @BIO_new(%struct.bio_method_st* %4) #6
  %6 = icmp eq %struct.bio_st* %5, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  tail call void @ERR_put_error(i32 16, i32 0, i32 7, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 260) #6
  br label %31

8:                                                ; preds = %3
  %9 = tail call i32 @BIO_read_filename(%struct.bio_st* nonnull %5, i8* %1) #6
  %10 = icmp slt i32 %9, 1
  br i1 %10, label %11, label %12

11:                                               ; preds = %8
  tail call void @ERR_put_error(i32 16, i32 0, i32 2, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 265) #6
  br label %31

12:                                               ; preds = %8
  switch i32 %2, label %23 [
    i32 2, label %13
    i32 1, label %15
  ]

13:                                               ; preds = %12
  %14 = tail call %struct.x509_st* @d2i_X509_bio(%struct.bio_st* nonnull %5, %struct.x509_st** null) #6
  br label %24

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %17 = load %struct.ssl_ctx_st*, %struct.ssl_ctx_st** %16, align 8
  %18 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %17, i64 0, i32 25
  %19 = load i32 (i8*, i32, i32, i8*)*, i32 (i8*, i32, i32, i8*)** %18, align 8
  %20 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %17, i64 0, i32 26
  %21 = load i8*, i8** %20, align 8
  %22 = tail call %struct.x509_st* @PEM_read_bio_X509(%struct.bio_st* nonnull %5, %struct.x509_st** null, i32 (i8*, i32, i32, i8*)* %19, i8* %21) #6
  br label %24

23:                                               ; preds = %12
  tail call void @ERR_put_error(i32 16, i32 0, i32 117, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 277) #6
  br label %31

24:                                               ; preds = %15, %13
  %25 = phi i32 [ 12, %13 ], [ 9, %15 ]
  %26 = phi %struct.x509_st* [ %14, %13 ], [ %22, %15 ]
  %27 = icmp eq %struct.x509_st* %26, null
  br i1 %27, label %28, label %29

28:                                               ; preds = %24
  tail call void @ERR_put_error(i32 16, i32 0, i32 %25, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 282) #6
  br label %31

29:                                               ; preds = %24
  %30 = tail call i32 @SSL_use_certificate(%struct.ssl_st* %0, %struct.x509_st* nonnull %26) #6
  br label %31

31:                                               ; preds = %29, %28, %23, %11, %7
  %32 = phi i32 [ 0, %7 ], [ 0, %11 ], [ 0, %28 ], [ %30, %29 ], [ 0, %23 ]
  %33 = phi %struct.x509_st* [ null, %7 ], [ null, %11 ], [ null, %28 ], [ %26, %29 ], [ null, %23 ]
  tail call void @X509_free(%struct.x509_st* %33) #6
  %34 = tail call i32 @BIO_free(%struct.bio_st* %5) #6
  ret i32 %32
}

declare %struct.x509_st* @d2i_X509_bio(%struct.bio_st*, %struct.x509_st**) local_unnamed_addr #2

declare i32 @SSL_use_certificate(%struct.ssl_st*, %struct.x509_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_use_RSAPrivateKey_file(%struct.ssl_st*, i8*, i32) local_unnamed_addr #0 {
  %4 = tail call %struct.bio_method_st* @BIO_s_file() #6
  %5 = tail call %struct.bio_st* @BIO_new(%struct.bio_method_st* %4) #6
  %6 = icmp eq %struct.bio_st* %5, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  tail call void @ERR_put_error(i32 16, i32 0, i32 7, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 302) #6
  br label %31

8:                                                ; preds = %3
  %9 = tail call i32 @BIO_read_filename(%struct.bio_st* nonnull %5, i8* %1) #6
  %10 = icmp slt i32 %9, 1
  br i1 %10, label %11, label %12

11:                                               ; preds = %8
  tail call void @ERR_put_error(i32 16, i32 0, i32 2, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 307) #6
  br label %31

12:                                               ; preds = %8
  switch i32 %2, label %23 [
    i32 2, label %13
    i32 1, label %15
  ]

13:                                               ; preds = %12
  %14 = tail call %struct.rsa_st* @d2i_RSAPrivateKey_bio(%struct.bio_st* nonnull %5, %struct.rsa_st** null) #6
  br label %24

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %17 = load %struct.ssl_ctx_st*, %struct.ssl_ctx_st** %16, align 8
  %18 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %17, i64 0, i32 25
  %19 = load i32 (i8*, i32, i32, i8*)*, i32 (i8*, i32, i32, i8*)** %18, align 8
  %20 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %17, i64 0, i32 26
  %21 = load i8*, i8** %20, align 8
  %22 = tail call %struct.rsa_st* @PEM_read_bio_RSAPrivateKey(%struct.bio_st* nonnull %5, %struct.rsa_st** null, i32 (i8*, i32, i32, i8*)* %19, i8* %21) #6
  br label %24

23:                                               ; preds = %12
  tail call void @ERR_put_error(i32 16, i32 0, i32 117, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 320) #6
  br label %31

24:                                               ; preds = %15, %13
  %25 = phi i32 [ 12, %13 ], [ 9, %15 ]
  %26 = phi %struct.rsa_st* [ %14, %13 ], [ %22, %15 ]
  %27 = icmp eq %struct.rsa_st* %26, null
  br i1 %27, label %28, label %29

28:                                               ; preds = %24
  tail call void @ERR_put_error(i32 16, i32 0, i32 %25, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 325) #6
  br label %31

29:                                               ; preds = %24
  %30 = tail call i32 @SSL_use_RSAPrivateKey(%struct.ssl_st* %0, %struct.rsa_st* nonnull %26) #6
  tail call void @RSA_free(%struct.rsa_st* nonnull %26) #6
  br label %31

31:                                               ; preds = %29, %28, %23, %11, %7
  %32 = phi i32 [ 0, %7 ], [ 0, %11 ], [ 0, %28 ], [ %30, %29 ], [ 0, %23 ]
  %33 = tail call i32 @BIO_free(%struct.bio_st* %5) #6
  ret i32 %32
}

declare %struct.rsa_st* @d2i_RSAPrivateKey_bio(%struct.bio_st*, %struct.rsa_st**) local_unnamed_addr #2

declare %struct.rsa_st* @PEM_read_bio_RSAPrivateKey(%struct.bio_st*, %struct.rsa_st**, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #2

declare i32 @SSL_use_RSAPrivateKey(%struct.ssl_st*, %struct.rsa_st*) local_unnamed_addr #2

declare void @RSA_free(%struct.rsa_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_use_PrivateKey_file(%struct.ssl_st*, i8*, i32) local_unnamed_addr #0 {
  %4 = tail call %struct.bio_method_st* @BIO_s_file() #6
  %5 = tail call %struct.bio_st* @BIO_new(%struct.bio_method_st* %4) #6
  %6 = icmp eq %struct.bio_st* %5, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  tail call void @ERR_put_error(i32 16, i32 0, i32 7, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 343) #6
  br label %31

8:                                                ; preds = %3
  %9 = tail call i32 @BIO_read_filename(%struct.bio_st* nonnull %5, i8* %1) #6
  %10 = icmp slt i32 %9, 1
  br i1 %10, label %11, label %12

11:                                               ; preds = %8
  tail call void @ERR_put_error(i32 16, i32 0, i32 2, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 348) #6
  br label %31

12:                                               ; preds = %8
  switch i32 %2, label %23 [
    i32 1, label %13
    i32 2, label %21
  ]

13:                                               ; preds = %12
  %14 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %15 = load %struct.ssl_ctx_st*, %struct.ssl_ctx_st** %14, align 8
  %16 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %15, i64 0, i32 25
  %17 = load i32 (i8*, i32, i32, i8*)*, i32 (i8*, i32, i32, i8*)** %16, align 8
  %18 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %15, i64 0, i32 26
  %19 = load i8*, i8** %18, align 8
  %20 = tail call %struct.evp_pkey_st* @PEM_read_bio_PrivateKey(%struct.bio_st* nonnull %5, %struct.evp_pkey_st** null, i32 (i8*, i32, i32, i8*)* %17, i8* %19) #6
  br label %24

21:                                               ; preds = %12
  %22 = tail call %struct.evp_pkey_st* @d2i_PrivateKey_bio(%struct.bio_st* nonnull %5, %struct.evp_pkey_st** null) #6
  br label %24

23:                                               ; preds = %12
  tail call void @ERR_put_error(i32 16, i32 0, i32 117, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 360) #6
  br label %31

24:                                               ; preds = %21, %13
  %25 = phi i32 [ 9, %13 ], [ 12, %21 ]
  %26 = phi %struct.evp_pkey_st* [ %20, %13 ], [ %22, %21 ]
  %27 = icmp eq %struct.evp_pkey_st* %26, null
  br i1 %27, label %28, label %29

28:                                               ; preds = %24
  tail call void @ERR_put_error(i32 16, i32 0, i32 %25, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 365) #6
  br label %31

29:                                               ; preds = %24
  %30 = tail call i32 @SSL_use_PrivateKey(%struct.ssl_st* %0, %struct.evp_pkey_st* nonnull %26) #6
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %26) #6
  br label %31

31:                                               ; preds = %29, %28, %23, %11, %7
  %32 = phi i32 [ 0, %7 ], [ 0, %11 ], [ 0, %28 ], [ %30, %29 ], [ 0, %23 ]
  %33 = tail call i32 @BIO_free(%struct.bio_st* %5) #6
  ret i32 %32
}

declare %struct.evp_pkey_st* @PEM_read_bio_PrivateKey(%struct.bio_st*, %struct.evp_pkey_st**, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #2

declare %struct.evp_pkey_st* @d2i_PrivateKey_bio(%struct.bio_st*, %struct.evp_pkey_st**) local_unnamed_addr #2

declare i32 @SSL_use_PrivateKey(%struct.ssl_st*, %struct.evp_pkey_st*) local_unnamed_addr #2

declare void @EVP_PKEY_free(%struct.evp_pkey_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_CTX_use_certificate_file(%struct.ssl_ctx_st*, i8*, i32) local_unnamed_addr #0 {
  %4 = tail call %struct.bio_method_st* @BIO_s_file() #6
  %5 = tail call %struct.bio_st* @BIO_new(%struct.bio_method_st* %4) #6
  %6 = icmp eq %struct.bio_st* %5, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  tail call void @ERR_put_error(i32 16, i32 0, i32 7, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 384) #6
  br label %29

8:                                                ; preds = %3
  %9 = tail call i32 @BIO_read_filename(%struct.bio_st* nonnull %5, i8* %1) #6
  %10 = icmp slt i32 %9, 1
  br i1 %10, label %11, label %12

11:                                               ; preds = %8
  tail call void @ERR_put_error(i32 16, i32 0, i32 2, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 389) #6
  br label %29

12:                                               ; preds = %8
  switch i32 %2, label %21 [
    i32 2, label %13
    i32 1, label %15
  ]

13:                                               ; preds = %12
  %14 = tail call %struct.x509_st* @d2i_X509_bio(%struct.bio_st* nonnull %5, %struct.x509_st** null) #6
  br label %22

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 25
  %17 = load i32 (i8*, i32, i32, i8*)*, i32 (i8*, i32, i32, i8*)** %16, align 8
  %18 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 26
  %19 = load i8*, i8** %18, align 8
  %20 = tail call %struct.x509_st* @PEM_read_bio_X509(%struct.bio_st* nonnull %5, %struct.x509_st** null, i32 (i8*, i32, i32, i8*)* %17, i8* %19) #6
  br label %22

21:                                               ; preds = %12
  tail call void @ERR_put_error(i32 16, i32 0, i32 117, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 401) #6
  br label %29

22:                                               ; preds = %15, %13
  %23 = phi i32 [ 12, %13 ], [ 9, %15 ]
  %24 = phi %struct.x509_st* [ %14, %13 ], [ %20, %15 ]
  %25 = icmp eq %struct.x509_st* %24, null
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  tail call void @ERR_put_error(i32 16, i32 0, i32 %23, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 406) #6
  br label %29

27:                                               ; preds = %22
  %28 = tail call i32 @SSL_CTX_use_certificate(%struct.ssl_ctx_st* %0, %struct.x509_st* nonnull %24) #6
  br label %29

29:                                               ; preds = %27, %26, %21, %11, %7
  %30 = phi i32 [ 0, %7 ], [ 0, %11 ], [ 0, %26 ], [ %28, %27 ], [ 0, %21 ]
  %31 = phi %struct.x509_st* [ null, %7 ], [ null, %11 ], [ null, %26 ], [ %24, %27 ], [ null, %21 ]
  tail call void @X509_free(%struct.x509_st* %31) #6
  %32 = tail call i32 @BIO_free(%struct.bio_st* %5) #6
  ret i32 %30
}

declare i32 @SSL_CTX_use_certificate(%struct.ssl_ctx_st*, %struct.x509_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_CTX_use_RSAPrivateKey_file(%struct.ssl_ctx_st*, i8*, i32) local_unnamed_addr #0 {
  %4 = tail call %struct.bio_method_st* @BIO_s_file() #6
  %5 = tail call %struct.bio_st* @BIO_new(%struct.bio_method_st* %4) #6
  %6 = icmp eq %struct.bio_st* %5, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  tail call void @ERR_put_error(i32 16, i32 0, i32 7, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 425) #6
  br label %29

8:                                                ; preds = %3
  %9 = tail call i32 @BIO_read_filename(%struct.bio_st* nonnull %5, i8* %1) #6
  %10 = icmp slt i32 %9, 1
  br i1 %10, label %11, label %12

11:                                               ; preds = %8
  tail call void @ERR_put_error(i32 16, i32 0, i32 2, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 430) #6
  br label %29

12:                                               ; preds = %8
  switch i32 %2, label %21 [
    i32 2, label %13
    i32 1, label %15
  ]

13:                                               ; preds = %12
  %14 = tail call %struct.rsa_st* @d2i_RSAPrivateKey_bio(%struct.bio_st* nonnull %5, %struct.rsa_st** null) #6
  br label %22

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 25
  %17 = load i32 (i8*, i32, i32, i8*)*, i32 (i8*, i32, i32, i8*)** %16, align 8
  %18 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 26
  %19 = load i8*, i8** %18, align 8
  %20 = tail call %struct.rsa_st* @PEM_read_bio_RSAPrivateKey(%struct.bio_st* nonnull %5, %struct.rsa_st** null, i32 (i8*, i32, i32, i8*)* %17, i8* %19) #6
  br label %22

21:                                               ; preds = %12
  tail call void @ERR_put_error(i32 16, i32 0, i32 117, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 442) #6
  br label %29

22:                                               ; preds = %15, %13
  %23 = phi i32 [ 12, %13 ], [ 9, %15 ]
  %24 = phi %struct.rsa_st* [ %14, %13 ], [ %20, %15 ]
  %25 = icmp eq %struct.rsa_st* %24, null
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  tail call void @ERR_put_error(i32 16, i32 0, i32 %23, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 447) #6
  br label %29

27:                                               ; preds = %22
  %28 = tail call i32 @SSL_CTX_use_RSAPrivateKey(%struct.ssl_ctx_st* %0, %struct.rsa_st* nonnull %24) #6
  tail call void @RSA_free(%struct.rsa_st* nonnull %24) #6
  br label %29

29:                                               ; preds = %27, %26, %21, %11, %7
  %30 = phi i32 [ 0, %7 ], [ 0, %11 ], [ 0, %26 ], [ %28, %27 ], [ 0, %21 ]
  %31 = tail call i32 @BIO_free(%struct.bio_st* %5) #6
  ret i32 %30
}

declare i32 @SSL_CTX_use_RSAPrivateKey(%struct.ssl_ctx_st*, %struct.rsa_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_CTX_use_PrivateKey_file(%struct.ssl_ctx_st*, i8*, i32) local_unnamed_addr #0 {
  %4 = tail call %struct.bio_method_st* @BIO_s_file() #6
  %5 = tail call %struct.bio_st* @BIO_new(%struct.bio_method_st* %4) #6
  %6 = icmp eq %struct.bio_st* %5, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  tail call void @ERR_put_error(i32 16, i32 0, i32 7, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 465) #6
  br label %29

8:                                                ; preds = %3
  %9 = tail call i32 @BIO_read_filename(%struct.bio_st* nonnull %5, i8* %1) #6
  %10 = icmp slt i32 %9, 1
  br i1 %10, label %11, label %12

11:                                               ; preds = %8
  tail call void @ERR_put_error(i32 16, i32 0, i32 2, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 470) #6
  br label %29

12:                                               ; preds = %8
  switch i32 %2, label %21 [
    i32 1, label %13
    i32 2, label %19
  ]

13:                                               ; preds = %12
  %14 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 25
  %15 = load i32 (i8*, i32, i32, i8*)*, i32 (i8*, i32, i32, i8*)** %14, align 8
  %16 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 26
  %17 = load i8*, i8** %16, align 8
  %18 = tail call %struct.evp_pkey_st* @PEM_read_bio_PrivateKey(%struct.bio_st* nonnull %5, %struct.evp_pkey_st** null, i32 (i8*, i32, i32, i8*)* %15, i8* %17) #6
  br label %22

19:                                               ; preds = %12
  %20 = tail call %struct.evp_pkey_st* @d2i_PrivateKey_bio(%struct.bio_st* nonnull %5, %struct.evp_pkey_st** null) #6
  br label %22

21:                                               ; preds = %12
  tail call void @ERR_put_error(i32 16, i32 0, i32 117, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 482) #6
  br label %29

22:                                               ; preds = %19, %13
  %23 = phi i32 [ 9, %13 ], [ 12, %19 ]
  %24 = phi %struct.evp_pkey_st* [ %18, %13 ], [ %20, %19 ]
  %25 = icmp eq %struct.evp_pkey_st* %24, null
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  tail call void @ERR_put_error(i32 16, i32 0, i32 %23, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 487) #6
  br label %29

27:                                               ; preds = %22
  %28 = tail call i32 @SSL_CTX_use_PrivateKey(%struct.ssl_ctx_st* %0, %struct.evp_pkey_st* nonnull %24) #6
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %24) #6
  br label %29

29:                                               ; preds = %27, %26, %21, %11, %7
  %30 = phi i32 [ 0, %7 ], [ 0, %11 ], [ 0, %26 ], [ %28, %27 ], [ 0, %21 ]
  %31 = tail call i32 @BIO_free(%struct.bio_st* %5) #6
  ret i32 %30
}

declare i32 @SSL_CTX_use_PrivateKey(%struct.ssl_ctx_st*, %struct.evp_pkey_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_CTX_use_certificate_chain_file(%struct.ssl_ctx_st*, i8*) local_unnamed_addr #0 {
  tail call void @ERR_clear_error() #6
  %3 = tail call %struct.bio_method_st* @BIO_s_file() #6
  %4 = tail call %struct.bio_st* @BIO_new(%struct.bio_method_st* %3) #6
  %5 = icmp eq %struct.bio_st* %4, null
  br i1 %5, label %6, label %7

6:                                                ; preds = %2
  tail call void @ERR_put_error(i32 16, i32 0, i32 7, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 510) #6
  br label %41

7:                                                ; preds = %2
  %8 = tail call i32 @BIO_read_filename(%struct.bio_st* nonnull %4, i8* %1) #6
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  tail call void @ERR_put_error(i32 16, i32 0, i32 2, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 515) #6
  br label %41

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 25
  %13 = load i32 (i8*, i32, i32, i8*)*, i32 (i8*, i32, i32, i8*)** %12, align 8
  %14 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 26
  %15 = load i8*, i8** %14, align 8
  %16 = tail call %struct.x509_st* @PEM_read_bio_X509_AUX(%struct.bio_st* nonnull %4, %struct.x509_st** null, i32 (i8*, i32, i32, i8*)* %13, i8* %15) #6
  %17 = icmp eq %struct.x509_st* %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %11
  tail call void @ERR_put_error(i32 16, i32 0, i32 9, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 522) #6
  br label %41

19:                                               ; preds = %11
  %20 = tail call i32 @SSL_CTX_use_certificate(%struct.ssl_ctx_st* %0, %struct.x509_st* nonnull %16) #6
  %21 = tail call i32 @ERR_peek_error() #6
  %22 = icmp eq i32 %21, 0
  %23 = select i1 %22, i32 %20, i32 0
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %41, label %25

25:                                               ; preds = %19
  %26 = tail call i32 @SSL_CTX_clear_chain_certs(%struct.ssl_ctx_st* %0) #6
  br label %27

27:                                               ; preds = %32, %25
  %28 = load i32 (i8*, i32, i32, i8*)*, i32 (i8*, i32, i32, i8*)** %12, align 8
  %29 = load i8*, i8** %14, align 8
  %30 = tail call %struct.x509_st* @PEM_read_bio_X509(%struct.bio_st* nonnull %4, %struct.x509_st** null, i32 (i8*, i32, i32, i8*)* %28, i8* %29) #6
  %31 = icmp eq %struct.x509_st* %30, null
  br i1 %31, label %36, label %32

32:                                               ; preds = %27
  %33 = tail call i32 @SSL_CTX_add0_chain_cert(%struct.ssl_ctx_st* %0, %struct.x509_st* nonnull %30) #6
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %27

35:                                               ; preds = %32
  tail call void @X509_free(%struct.x509_st* nonnull %30) #6
  br label %41

36:                                               ; preds = %27
  %37 = tail call i32 @ERR_peek_last_error() #6
  %38 = and i32 %37, -16773121
  %39 = icmp eq i32 %38, 150995054
  br i1 %39, label %40, label %41

40:                                               ; preds = %36
  tail call void @ERR_clear_error() #6
  br label %41

41:                                               ; preds = %35, %36, %40, %19, %18, %10, %6
  %42 = phi i32 [ 0, %6 ], [ 0, %10 ], [ 0, %18 ], [ 0, %19 ], [ 0, %35 ], [ %23, %40 ], [ 0, %36 ]
  %43 = phi %struct.x509_st* [ null, %6 ], [ null, %10 ], [ null, %18 ], [ %16, %19 ], [ %16, %35 ], [ %16, %40 ], [ %16, %36 ]
  tail call void @X509_free(%struct.x509_st* %43) #6
  %44 = tail call i32 @BIO_free(%struct.bio_st* %4) #6
  ret i32 %42
}

declare %struct.x509_st* @PEM_read_bio_X509_AUX(%struct.bio_st*, %struct.x509_st**, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #2

declare i32 @ERR_peek_error() local_unnamed_addr #2

declare i32 @SSL_CTX_clear_chain_certs(%struct.ssl_ctx_st*) local_unnamed_addr #2

declare i32 @SSL_CTX_add0_chain_cert(%struct.ssl_ctx_st*, %struct.x509_st*) local_unnamed_addr #2

declare i32 @ERR_peek_last_error() local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @SSL_CTX_set_default_passwd_cb(%struct.ssl_ctx_st* nocapture, i32 (i8*, i32, i32, i8*)*) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 25
  store i32 (i8*, i32, i32, i8*)* %1, i32 (i8*, i32, i32, i8*)** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 (i8*, i32, i32, i8*)* @SSL_CTX_get_default_passwd_cb(%struct.ssl_ctx_st* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 25
  %3 = load i32 (i8*, i32, i32, i8*)*, i32 (i8*, i32, i32, i8*)** %2, align 8
  ret i32 (i8*, i32, i32, i8*)* %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @SSL_CTX_set_default_passwd_cb_userdata(%struct.ssl_ctx_st* nocapture, i8*) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 26
  store i8* %1, i8** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @SSL_CTX_get_default_passwd_cb_userdata(%struct.ssl_ctx_st* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 26
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

declare %struct.stack_st* @sk_new(i32 (i8**, i8**)*) local_unnamed_addr #2

declare i32 @X509_NAME_cmp(%struct.X509_name_st*, %struct.X509_name_st*) local_unnamed_addr #2

declare %struct.stack_st* @sk_new_null() local_unnamed_addr #2

declare void @sk_sort(%struct.stack_st*) local_unnamed_addr #2

declare i32 @sk_find(%struct.stack_st*, i64*, i8*, i32 (i32 (i8**, i8**)*, i8**, i8**)*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i32 @sk_X509_NAME_call_cmp_func(i32 (i8**, i8**)*, i8**, i8**) #5 comdat {
  %4 = alloca %struct.X509_name_st*, align 8
  %5 = alloca %struct.X509_name_st*, align 8
  %6 = bitcast %struct.X509_name_st** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #6
  %7 = bitcast i8** %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %struct.X509_name_st** %4 to i64*
  store i64 %8, i64* %9, align 8
  %10 = bitcast %struct.X509_name_st** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #6
  %11 = bitcast i8** %2 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %struct.X509_name_st** %5 to i64*
  store i64 %12, i64* %13, align 8
  %14 = bitcast i32 (i8**, i8**)* %0 to i32 (%struct.X509_name_st**, %struct.X509_name_st**)*
  %15 = call i32 %14(%struct.X509_name_st** nonnull %4, %struct.X509_name_st** nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  ret i32 %15
}

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #2

declare void @sk_pop_free_ex(%struct.stack_st*, void (void (i8*)*, i8*)*, void (i8*)*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @sk_X509_NAME_call_free_func(void (i8*)*, i8*) #5 comdat {
  %3 = bitcast void (i8*)* %0 to void (%struct.X509_name_st*)*
  %4 = bitcast i8* %1 to %struct.X509_name_st*
  tail call void %3(%struct.X509_name_st* %4) #6
  ret void
}

declare void @sk_free(%struct.stack_st*) local_unnamed_addr #2

declare i32 (i8**, i8**)* @sk_set_cmp_func(%struct.stack_st*, i32 (i8**, i8**)*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
