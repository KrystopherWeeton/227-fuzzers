; ModuleID = '../../third_party/pdfium/core/fxge/dib/cfx_imagerenderer.cpp'
source_filename = "../../third_party/pdfium/core/fxge/dib/cfx_imagerenderer.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_ImageRenderer = type <{ %"class.fxcrt::RetainPtr", %"class.fxcrt::UnownedPtr", %class.CFX_Matrix, %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.13", %class.CFX_BitmapComposer, %struct.FX_RECT, i32, i32, i32, i8, [3 x i8] }>
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFX_DIBitmap* }
%class.CFX_DIBitmap = type { %class.CFX_DIBBase, %"class.fxcrt::MaybeOwned" }
%class.CFX_DIBBase = type { %"class.fxcrt::Retainable", i16, i32, i32, i32, %"class.fxcrt::RetainPtr", %"class.std::__1::vector" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i32* }
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.37", %"class.fxcrt::UnownedPtr.39" }
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { i8* }
%"class.fxcrt::UnownedPtr.39" = type { i8* }
%"class.fxcrt::UnownedPtr" = type { %class.CFX_ClipRgn* }
%class.CFX_Matrix = type { float, float, float, float, float, float }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.CFX_ImageTransformer* }
%class.CFX_ImageTransformer = type { %"class.fxcrt::RetainPtr.4", %class.CFX_Matrix, %struct.FX_RECT, %struct.FX_RECT, %class.CFX_Matrix, %"class.std::__1::unique_ptr.13", %class.CFX_BitmapStorer, %struct.FXDIB_ResampleOptions, i32 }
%"class.fxcrt::RetainPtr.4" = type { %"class.std::__1::unique_ptr.5" }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %class.CFX_DIBBase* }
%class.CFX_BitmapStorer = type { %class.ScanlineComposerIface, %"class.fxcrt::RetainPtr" }
%class.ScanlineComposerIface = type { i32 (...)** }
%struct.FXDIB_ResampleOptions = type { i8, i8, i8, i8 }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %class.CFX_ImageStretcher* }
%class.CFX_ImageStretcher = type <{ %"class.fxcrt::UnownedPtr.16", %"class.fxcrt::RetainPtr.4", %"class.std::__1::unique_ptr.17", %struct.FXDIB_ResampleOptions, i32, i32, %struct.FX_RECT, i16, [2 x i8] }>
%"class.fxcrt::UnownedPtr.16" = type { %class.ScanlineComposerIface* }
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %class.CStretchEngine* }
%class.CStretchEngine = type opaque
%class.CFX_BitmapComposer = type { %class.ScanlineComposerIface, %"class.fxcrt::RetainPtr", %"class.fxcrt::UnownedPtr", i16, i32, i32, i32, i32, i32, i32, %"class.fxcrt::RetainPtr", %class.CFX_ScanlineCompositor, i8, i8, i8, i8, i32, %"class.std::__1::vector.30", %"class.std::__1::vector.30", %"class.std::__1::vector.30", %"class.std::__1::vector.30" }
%class.CFX_ScanlineCompositor = type <{ i32, i16, i16, %"class.CFX_ScanlineCompositor::Palette", i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"class.CFX_ScanlineCompositor::Palette" = type { i64, i64, %"class.std::__1::unique_ptr.27" }
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { i8*, i8*, %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%struct.FX_RECT = type { i32, i32, i32, i32 }
%class.CFX_ClipRgn = type { i8, %struct.FX_RECT, %"class.fxcrt::RetainPtr" }
%class.CFX_FloatRect = type { float, float, float, float }
%class.PauseIndicatorIface = type opaque

@_ZN17CFX_ImageRendererC1ERKN5fxcrt9RetainPtrI12CFX_DIBitmapEEPK11CFX_ClipRgnRKNS1_I11CFX_DIBBaseEEijRK10CFX_MatrixRK21FXDIB_ResampleOptionsb = hidden unnamed_addr alias void (%class.CFX_ImageRenderer*, %"class.fxcrt::RetainPtr"*, %class.CFX_ClipRgn*, %"class.fxcrt::RetainPtr.4"*, i32, i32, %class.CFX_Matrix*, %struct.FXDIB_ResampleOptions*, i1), void (%class.CFX_ImageRenderer*, %"class.fxcrt::RetainPtr"*, %class.CFX_ClipRgn*, %"class.fxcrt::RetainPtr.4"*, i32, i32, %class.CFX_Matrix*, %struct.FXDIB_ResampleOptions*, i1)* @_ZN17CFX_ImageRendererC2ERKN5fxcrt9RetainPtrI12CFX_DIBitmapEEPK11CFX_ClipRgnRKNS1_I11CFX_DIBBaseEEijRK10CFX_MatrixRK21FXDIB_ResampleOptionsb
@_ZN17CFX_ImageRendererD1Ev = hidden unnamed_addr alias void (%class.CFX_ImageRenderer*), void (%class.CFX_ImageRenderer*)* @_ZN17CFX_ImageRendererD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17CFX_ImageRendererC2ERKN5fxcrt9RetainPtrI12CFX_DIBitmapEEPK11CFX_ClipRgnRKNS1_I11CFX_DIBBaseEEijRK10CFX_MatrixRK21FXDIB_ResampleOptionsb(%class.CFX_ImageRenderer*, %"class.fxcrt::RetainPtr"* dereferenceable(8), %class.CFX_ClipRgn*, %"class.fxcrt::RetainPtr.4"* dereferenceable(8), i32, i32, %class.CFX_Matrix* nocapture readonly dereferenceable(24), %struct.FXDIB_ResampleOptions* dereferenceable(4), i1 zeroext) unnamed_addr #0 align 2 {
  %10 = alloca { i64, i64 }, align 8
  %11 = bitcast { i64, i64 }* %10 to %struct.FX_RECT*
  %12 = alloca { <2 x float>, <2 x float> }, align 8
  %13 = bitcast { <2 x float>, <2 x float> }* %12 to %class.CFX_FloatRect*
  %14 = alloca <4 x i32>, align 16
  %15 = bitcast <4 x i32>* %14 to %struct.FX_RECT*
  %16 = alloca <4 x i32>, align 16
  %17 = bitcast <4 x i32>* %16 to %struct.FX_RECT*
  %18 = zext i1 %8 to i8
  %19 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %19, align 8
  %21 = ptrtoint %class.CFX_DIBitmap* %20 to i64
  %22 = bitcast %class.CFX_ImageRenderer* %0 to i64*
  store i64 %21, i64* %22, align 8
  %23 = icmp eq %class.CFX_DIBitmap* %20, null
  br i1 %23, label %28, label %24

24:                                               ; preds = %9
  %25 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %20, i64 0, i32 0, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = add nsw i64 %26, 1
  store i64 %27, i64* %25, align 8
  br label %28

28:                                               ; preds = %9, %24
  %29 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 1, i32 0
  store %class.CFX_ClipRgn* %2, %class.CFX_ClipRgn** %29, align 8
  %30 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 2
  %31 = bitcast %class.CFX_Matrix* %30 to i8*
  %32 = bitcast %class.CFX_Matrix* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 4 %32, i64 24, i1 false)
  %33 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 3
  %34 = bitcast %"class.std::__1::unique_ptr.1"* %33 to i64*
  %35 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 4
  %36 = bitcast %"class.std::__1::unique_ptr.13"* %35 to i64*
  %37 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 5
  %38 = bitcast %"class.std::__1::unique_ptr.1"* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 16, i1 false)
  tail call void @_ZN18CFX_BitmapComposerC1Ev(%class.CFX_BitmapComposer* %37) #7
  %39 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 6
  %40 = bitcast %struct.FX_RECT* %39 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %40, i8 0, i64 16, i1 false) #7
  %41 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 7
  store i32 %4, i32* %41, align 8
  %42 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 8
  store i32 0, i32* %42, align 4
  %43 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 9
  store i32 %5, i32* %43, align 8
  %44 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 10
  store i8 %18, i8* %44, align 4
  %45 = bitcast { i64, i64 }* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %45) #7
  %46 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %47 = bitcast i64* %46 to i32*
  %48 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %11, i64 0, i32 3
  %49 = bitcast { <2 x float>, <2 x float> }* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %49) #7
  %50 = tail call { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix11GetUnitRectEv(%class.CFX_Matrix* %30) #7
  %51 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %12, i64 0, i32 0
  %52 = extractvalue { <2 x float>, <2 x float> } %50, 0
  store <2 x float> %52, <2 x float>* %51, align 8
  %53 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %12, i64 0, i32 1
  %54 = extractvalue { <2 x float>, <2 x float> } %50, 1
  store <2 x float> %54, <2 x float>* %53, align 8
  %55 = call { i64, i64 } @_ZNK13CFX_FloatRect12GetOuterRectEv(%class.CFX_FloatRect* nonnull %13) #7
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 0
  %57 = extractvalue { i64, i64 } %55, 0
  store i64 %57, i64* %56, align 8
  %58 = extractvalue { i64, i64 } %55, 1
  store i64 %58, i64* %46, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %49) #7
  %59 = icmp eq %class.CFX_ClipRgn* %2, null
  br i1 %59, label %67, label %60

60:                                               ; preds = %28
  %61 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %2, i64 0, i32 1, i32 0
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %2, i64 0, i32 1, i32 1
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %2, i64 0, i32 1, i32 2
  %66 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %2, i64 0, i32 1, i32 3
  br label %71

67:                                               ; preds = %28
  %68 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %19, align 8
  %69 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %68, i64 0, i32 0, i32 2
  %70 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %68, i64 0, i32 0, i32 3
  br label %71

71:                                               ; preds = %67, %60
  %72 = phi i32 [ 0, %67 ], [ %62, %60 ]
  %73 = phi i32 [ 0, %67 ], [ %64, %60 ]
  %74 = phi i32* [ %69, %67 ], [ %65, %60 ]
  %75 = phi i32* [ %70, %67 ], [ %66, %60 ]
  %76 = load i32, i32* %75, align 4
  %77 = load i32, i32* %74, align 4
  %78 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 6, i32 0
  store i32 %72, i32* %78, align 8
  %79 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 6, i32 1
  store i32 %73, i32* %79, align 4
  %80 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 6, i32 2
  store i32 %77, i32* %80, align 8
  %81 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 6, i32 3
  store i32 %76, i32* %81, align 4
  call void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT* %39, %struct.FX_RECT* nonnull dereferenceable(16) %11) #7
  %82 = load i32, i32* %80, align 4
  %83 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %39, i64 0, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = icmp sgt i32 %82, %84
  br i1 %85, label %86, label %216

86:                                               ; preds = %71
  %87 = load i32, i32* %81, align 4
  %88 = load i32, i32* %79, align 4
  %89 = icmp sgt i32 %87, %88
  br i1 %89, label %90, label %216

90:                                               ; preds = %86
  %91 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 2, i32 1
  %92 = load float, float* %91, align 4
  %93 = call float @llvm.fabs.f32(float %92) #7
  %94 = fcmp oge float %93, 5.000000e-01
  %95 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %30, i64 0, i32 0
  %96 = load float, float* %95, align 8
  %97 = fcmp oeq float %96, 0.000000e+00
  %98 = or i1 %94, %97
  br i1 %98, label %108, label %99

99:                                               ; preds = %90
  %100 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 2, i32 2
  %101 = load float, float* %100, align 8
  %102 = call float @llvm.fabs.f32(float %101) #7
  %103 = fcmp ult float %102, 5.000000e-01
  br i1 %103, label %104, label %108

104:                                              ; preds = %99
  %105 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 2, i32 3
  %106 = load float, float* %105, align 4
  %107 = fcmp oeq float %106, 0.000000e+00
  br i1 %107, label %108, label %177

108:                                              ; preds = %90, %99, %104
  %109 = call float @llvm.fabs.f32(float %96) #7
  %110 = fdiv float %93, 2.000000e+01
  %111 = fcmp olt float %109, %110
  br i1 %111, label %112, label %168

112:                                              ; preds = %108
  %113 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 2, i32 3
  %114 = load float, float* %113, align 4
  %115 = call float @llvm.fabs.f32(float %114) #7
  %116 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 2, i32 2
  %117 = load float, float* %116, align 8
  %118 = call float @llvm.fabs.f32(float %117) #7
  %119 = fdiv float %118, 2.000000e+01
  %120 = fcmp olt float %115, %119
  %121 = fcmp olt float %109, 5.000000e-01
  %122 = and i1 %121, %120
  %123 = fcmp olt float %115, 5.000000e-01
  %124 = and i1 %123, %122
  br i1 %124, label %125, label %168

125:                                              ; preds = %112
  %126 = load i32, i32* %47, align 8
  %127 = bitcast { i64, i64 }* %10 to <2 x i32>*
  %128 = load <2 x i32>, <2 x i32>* %127, align 8
  %129 = shufflevector <2 x i32> %128, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %130 = extractelement <2 x i32> %128, i32 0
  %131 = sub nsw i32 %126, %130
  %132 = load i32, i32* %48, align 4
  %133 = extractelement <2 x i32> %128, i32 1
  %134 = sub nsw i32 %132, %133
  %135 = bitcast <4 x i32>* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %135) #7
  %136 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %15, i64 0, i32 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %135, i8* align 8 %40, i64 16, i1 false)
  %137 = load <4 x i32>, <4 x i32>* %14, align 16
  %138 = sub <4 x i32> %137, %129
  store <4 x i32> %138, <4 x i32>* %14, align 16
  %139 = fcmp ogt float %117, 0.000000e+00
  %140 = fcmp olt float %92, 0.000000e+00
  %141 = call { i64, i64 } @_Z17FXDIB_SwapClipBoxRK7FX_RECTiibb(%struct.FX_RECT* nonnull dereferenceable(16) %15, i32 %131, i32 %134, i1 zeroext %139, i1 zeroext %140) #7
  %142 = extractvalue { i64, i64 } %141, 0
  %143 = extractvalue { i64, i64 } %141, 1
  %144 = bitcast <4 x i32>* %14 to i64*
  store i64 %142, i64* %144, align 16
  %145 = bitcast i32* %136 to i64*
  store i64 %143, i64* %145, align 8
  %146 = load float, float* %116, align 8
  %147 = fcmp ogt float %146, 0.000000e+00
  %148 = load float, float* %91, align 4
  %149 = fcmp olt float %148, 0.000000e+00
  %150 = load i8, i8* %44, align 4, !range !2
  %151 = icmp ne i8 %150, 0
  call void @_ZN18CFX_BitmapComposer7ComposeERKN5fxcrt9RetainPtrI12CFX_DIBitmapEEPK11CFX_ClipRgnijRK7FX_RECTbbbb9BlendMode(%class.CFX_BitmapComposer* %37, %"class.fxcrt::RetainPtr"* dereferenceable(8) %1, %class.CFX_ClipRgn* %2, i32 %4, i32 %5, %struct.FX_RECT* dereferenceable(16) %39, i1 zeroext true, i1 zeroext %147, i1 zeroext %149, i1 zeroext %151, i32 0) #7
  %152 = call i8* @_Znwm(i64 56) #8
  %153 = bitcast i8* %152 to %class.CFX_ImageStretcher*
  %154 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %37, i64 0, i32 0
  call void @_ZN18CFX_ImageStretcherC1EP21ScanlineComposerIfaceRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEiiRK7FX_RECTRK21FXDIB_ResampleOptions(%class.CFX_ImageStretcher* nonnull %153, %class.ScanlineComposerIface* %154, %"class.fxcrt::RetainPtr.4"* dereferenceable(8) %3, i32 %134, i32 %131, %struct.FX_RECT* nonnull dereferenceable(16) %15, %struct.FXDIB_ResampleOptions* dereferenceable(4) %7) #7
  %155 = ptrtoint i8* %152 to i64
  %156 = getelementptr inbounds %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13"* %35, i64 0, i32 0, i32 0, i32 0
  %157 = load %class.CFX_ImageStretcher*, %class.CFX_ImageStretcher** %156, align 8
  store i64 %155, i64* %36, align 8
  %158 = icmp eq %class.CFX_ImageStretcher* %157, null
  %159 = bitcast i8* %152 to %class.CFX_ImageStretcher*
  br i1 %158, label %163, label %160

160:                                              ; preds = %125
  call void @_ZN18CFX_ImageStretcherD1Ev(%class.CFX_ImageStretcher* nonnull %157) #7
  %161 = bitcast %class.CFX_ImageStretcher* %157 to i8*
  call void @_ZdlPv(i8* %161) #8
  %162 = load %class.CFX_ImageStretcher*, %class.CFX_ImageStretcher** %156, align 8
  br label %163

163:                                              ; preds = %160, %125
  %164 = phi %class.CFX_ImageStretcher* [ %162, %160 ], [ %159, %125 ]
  %165 = call zeroext i1 @_ZN18CFX_ImageStretcher5StartEv(%class.CFX_ImageStretcher* %164) #7
  br i1 %165, label %166, label %167

166:                                              ; preds = %163
  store i32 1, i32* %42, align 4
  br label %167

167:                                              ; preds = %166, %163
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %135) #7
  br label %216

168:                                              ; preds = %112, %108
  store i32 2, i32* %42, align 4
  %169 = call i8* @_Znwm(i64 120) #8
  %170 = bitcast i8* %169 to %class.CFX_ImageTransformer*
  call void @_ZN20CFX_ImageTransformerC1ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEERK10CFX_MatrixRK21FXDIB_ResampleOptionsPK7FX_RECT(%class.CFX_ImageTransformer* nonnull %170, %"class.fxcrt::RetainPtr.4"* dereferenceable(8) %3, %class.CFX_Matrix* dereferenceable(24) %30, %struct.FXDIB_ResampleOptions* dereferenceable(4) %7, %struct.FX_RECT* %39) #7
  %171 = ptrtoint i8* %169 to i64
  %172 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %33, i64 0, i32 0, i32 0, i32 0
  %173 = load %class.CFX_ImageTransformer*, %class.CFX_ImageTransformer** %172, align 8
  store i64 %171, i64* %34, align 8
  %174 = icmp eq %class.CFX_ImageTransformer* %173, null
  br i1 %174, label %216, label %175

175:                                              ; preds = %168
  call void @_ZN20CFX_ImageTransformerD1Ev(%class.CFX_ImageTransformer* nonnull %173) #7
  %176 = bitcast %class.CFX_ImageTransformer* %173 to i8*
  call void @_ZdlPv(i8* %176) #8
  br label %216

177:                                              ; preds = %104
  %178 = load i32, i32* %47, align 8
  %179 = bitcast { i64, i64 }* %10 to <2 x i32>*
  %180 = load <2 x i32>, <2 x i32>* %179, align 8
  %181 = extractelement <2 x i32> %180, i32 0
  %182 = sub nsw i32 %178, %181
  %183 = fcmp olt float %96, 0.000000e+00
  %184 = sub nsw i32 0, %182
  %185 = select i1 %183, i32 %184, i32 %182
  %186 = load i32, i32* %48, align 4
  %187 = extractelement <2 x i32> %180, i32 1
  %188 = sub nsw i32 %186, %187
  %189 = fcmp ogt float %106, 0.000000e+00
  %190 = sub nsw i32 0, %188
  %191 = select i1 %189, i32 %190, i32 %188
  %192 = icmp eq i32 %185, 0
  %193 = icmp eq i32 %191, 0
  %194 = or i1 %192, %193
  br i1 %194, label %216, label %195

195:                                              ; preds = %177
  %196 = shufflevector <2 x i32> %180, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %197 = bitcast <4 x i32>* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %197) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %197, i8* align 8 %40, i64 16, i1 false)
  %198 = load <4 x i32>, <4 x i32>* %16, align 16
  %199 = sub <4 x i32> %198, %196
  store <4 x i32> %199, <4 x i32>* %16, align 16
  %200 = load i8, i8* %44, align 4, !range !2
  %201 = icmp ne i8 %200, 0
  call void @_ZN18CFX_BitmapComposer7ComposeERKN5fxcrt9RetainPtrI12CFX_DIBitmapEEPK11CFX_ClipRgnijRK7FX_RECTbbbb9BlendMode(%class.CFX_BitmapComposer* %37, %"class.fxcrt::RetainPtr"* dereferenceable(8) %1, %class.CFX_ClipRgn* %2, i32 %4, i32 %5, %struct.FX_RECT* dereferenceable(16) %39, i1 zeroext false, i1 zeroext false, i1 zeroext false, i1 zeroext %201, i32 0) #7
  store i32 1, i32* %42, align 4
  %202 = call i8* @_Znwm(i64 56) #8
  %203 = bitcast i8* %202 to %class.CFX_ImageStretcher*
  %204 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %37, i64 0, i32 0
  call void @_ZN18CFX_ImageStretcherC1EP21ScanlineComposerIfaceRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEiiRK7FX_RECTRK21FXDIB_ResampleOptions(%class.CFX_ImageStretcher* nonnull %203, %class.ScanlineComposerIface* %204, %"class.fxcrt::RetainPtr.4"* dereferenceable(8) %3, i32 %185, i32 %191, %struct.FX_RECT* nonnull dereferenceable(16) %17, %struct.FXDIB_ResampleOptions* dereferenceable(4) %7) #7
  %205 = ptrtoint i8* %202 to i64
  %206 = getelementptr inbounds %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13"* %35, i64 0, i32 0, i32 0, i32 0
  %207 = load %class.CFX_ImageStretcher*, %class.CFX_ImageStretcher** %206, align 8
  store i64 %205, i64* %36, align 8
  %208 = icmp eq %class.CFX_ImageStretcher* %207, null
  %209 = bitcast i8* %202 to %class.CFX_ImageStretcher*
  br i1 %208, label %213, label %210

210:                                              ; preds = %195
  call void @_ZN18CFX_ImageStretcherD1Ev(%class.CFX_ImageStretcher* nonnull %207) #7
  %211 = bitcast %class.CFX_ImageStretcher* %207 to i8*
  call void @_ZdlPv(i8* %211) #8
  %212 = load %class.CFX_ImageStretcher*, %class.CFX_ImageStretcher** %206, align 8
  br label %213

213:                                              ; preds = %210, %195
  %214 = phi %class.CFX_ImageStretcher* [ %212, %210 ], [ %209, %195 ]
  %215 = call zeroext i1 @_ZN18CFX_ImageStretcher5StartEv(%class.CFX_ImageStretcher* %214) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %197) #7
  br label %216

216:                                              ; preds = %86, %71, %213, %177, %168, %175, %167
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %45) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN18CFX_BitmapComposerC1Ev(%class.CFX_BitmapComposer*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix11GetUnitRectEv(%class.CFX_Matrix*) local_unnamed_addr #2

declare { i64, i64 } @_ZNK13CFX_FloatRect12GetOuterRectEv(%class.CFX_FloatRect*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT*, %struct.FX_RECT* dereferenceable(16)) local_unnamed_addr #2

declare { i64, i64 } @_Z17FXDIB_SwapClipBoxRK7FX_RECTiibb(%struct.FX_RECT* dereferenceable(16), i32, i32, i1 zeroext, i1 zeroext) local_unnamed_addr #2

declare void @_ZN18CFX_BitmapComposer7ComposeERKN5fxcrt9RetainPtrI12CFX_DIBitmapEEPK11CFX_ClipRgnijRK7FX_RECTbbbb9BlendMode(%class.CFX_BitmapComposer*, %"class.fxcrt::RetainPtr"* dereferenceable(8), %class.CFX_ClipRgn*, i32, i32, %struct.FX_RECT* dereferenceable(16), i1 zeroext, i1 zeroext, i1 zeroext, i1 zeroext, i32) local_unnamed_addr #2

declare zeroext i1 @_ZN18CFX_ImageStretcher5StartEv(%class.CFX_ImageStretcher*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17CFX_ImageRendererD2Ev(%class.CFX_ImageRenderer*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 5
  tail call void @_ZN18CFX_BitmapComposerD1Ev(%class.CFX_BitmapComposer* %2) #7
  %3 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %4 = load %class.CFX_ImageStretcher*, %class.CFX_ImageStretcher** %3, align 8
  store %class.CFX_ImageStretcher* null, %class.CFX_ImageStretcher** %3, align 8
  %5 = icmp eq %class.CFX_ImageStretcher* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  tail call void @_ZN18CFX_ImageStretcherD1Ev(%class.CFX_ImageStretcher* nonnull %4) #7
  %7 = bitcast %class.CFX_ImageStretcher* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #8
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %10 = load %class.CFX_ImageTransformer*, %class.CFX_ImageTransformer** %9, align 8
  store %class.CFX_ImageTransformer* null, %class.CFX_ImageTransformer** %9, align 8
  %11 = icmp eq %class.CFX_ImageTransformer* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %8
  tail call void @_ZN20CFX_ImageTransformerD1Ev(%class.CFX_ImageTransformer* nonnull %10) #7
  %13 = bitcast %class.CFX_ImageTransformer* %10 to i8*
  tail call void @_ZdlPv(i8* %13) #8
  br label %14

14:                                               ; preds = %8, %12
  %15 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %15, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %15, align 8
  %17 = icmp eq %class.CFX_DIBitmap* %16, null
  br i1 %17, label %29, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %16, i64 0, i32 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = add nsw i64 %20, -1
  store i64 %21, i64* %19, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %29

23:                                               ; preds = %18
  %24 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %16, i64 0, i32 0, i32 0
  %25 = bitcast %class.CFX_DIBitmap* %16 to void (%"class.fxcrt::Retainable"*)***
  %26 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %26, i64 1
  %28 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %27, align 8
  tail call void %28(%"class.fxcrt::Retainable"* nonnull %24) #7
  br label %29

29:                                               ; preds = %14, %18, %23
  ret void
}

; Function Attrs: nounwind
declare void @_ZN18CFX_BitmapComposerD1Ev(%class.CFX_BitmapComposer*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN17CFX_ImageRenderer8ContinueEP19PauseIndicatorIface(%class.CFX_ImageRenderer* nocapture, %class.PauseIndicatorIface*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.fxcrt::RetainPtr", align 8
  %4 = alloca %"class.fxcrt::RetainPtr.4", align 8
  %5 = alloca %"class.fxcrt::RetainPtr.4", align 8
  %6 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 8
  %7 = load i32, i32* %6, align 4
  switch i32 %7, label %155 [
    i32 1, label %8
    i32 2, label %12
  ]

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %10 = load %class.CFX_ImageStretcher*, %class.CFX_ImageStretcher** %9, align 8
  %11 = tail call zeroext i1 @_ZN18CFX_ImageStretcher8ContinueEP19PauseIndicatorIface(%class.CFX_ImageStretcher* %10, %class.PauseIndicatorIface* %1) #7
  br label %155

12:                                               ; preds = %2
  %13 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %14 = load %class.CFX_ImageTransformer*, %class.CFX_ImageTransformer** %13, align 8
  %15 = tail call zeroext i1 @_ZN20CFX_ImageTransformer8ContinueEP19PauseIndicatorIface(%class.CFX_ImageTransformer* %14, %class.PauseIndicatorIface* %1) #7
  br i1 %15, label %155, label %16

16:                                               ; preds = %12
  %17 = bitcast %"class.fxcrt::RetainPtr"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  %18 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  store %class.CFX_DIBitmap* inttoptr (i64 -6148914691236517206 to %class.CFX_DIBitmap*), %class.CFX_DIBitmap** %18, align 8
  %19 = load %class.CFX_ImageTransformer*, %class.CFX_ImageTransformer** %13, align 8
  call void @_ZN20CFX_ImageTransformer12DetachBitmapEv(%"class.fxcrt::RetainPtr"* nonnull sret %3, %class.CFX_ImageTransformer* %19) #7
  %20 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %18, align 8
  %21 = icmp eq %class.CFX_DIBitmap* %20, null
  br i1 %21, label %22, label %23

22:                                               ; preds = %16
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %18, align 8
  br label %154

23:                                               ; preds = %16
  %24 = bitcast %class.CFX_DIBitmap* %20 to i8* (%class.CFX_DIBitmap*)***
  %25 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %24, align 8
  %26 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %25, i64 2
  %27 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %26, align 8
  %28 = call i8* %27(%class.CFX_DIBitmap* nonnull %20) #7
  %29 = icmp eq i8* %28, null
  br i1 %29, label %140, label %30

30:                                               ; preds = %23
  %31 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %18, align 8
  %32 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %31, i64 0, i32 0, i32 1
  %33 = load i16, i16* %32, align 8
  %34 = and i16 %33, 256
  %35 = icmp eq i16 %34, 0
  %36 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 7
  %37 = load i32, i32* %36, align 8
  %38 = icmp ne i32 %37, 255
  br i1 %35, label %92, label %39

39:                                               ; preds = %30
  br i1 %38, label %40, label %49

40:                                               ; preds = %39
  %41 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 9
  %42 = load i32, i32* %41, align 8
  %43 = lshr i32 %42, 24
  %44 = mul i32 %43, %37
  %45 = udiv i32 %44, 255
  %46 = shl i32 %45, 24
  %47 = and i32 %42, 16777215
  %48 = or i32 %46, %47
  store i32 %48, i32* %41, align 8
  br label %49

49:                                               ; preds = %40, %39
  %50 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %50, align 8
  %52 = load %class.CFX_ImageTransformer*, %class.CFX_ImageTransformer** %13, align 8
  %53 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %52, i64 0, i32 3, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %52, i64 0, i32 3, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %31, i64 0, i32 0, i32 2
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %31, i64 0, i32 0, i32 3
  %60 = load i32, i32* %59, align 8
  %61 = bitcast %"class.fxcrt::RetainPtr.4"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %61) #7
  %62 = ptrtoint %class.CFX_DIBitmap* %31 to i64
  %63 = bitcast %"class.fxcrt::RetainPtr.4"* %4 to i64*
  store i64 %62, i64* %63, align 8
  %64 = icmp eq %class.CFX_DIBitmap* %31, null
  br i1 %64, label %69, label %65

65:                                               ; preds = %49
  %66 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %31, i64 0, i32 0, i32 0, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = add nsw i64 %67, 1
  store i64 %68, i64* %66, align 8
  br label %69

69:                                               ; preds = %49, %65
  %70 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 9
  %71 = load i32, i32* %70, align 8
  %72 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 1, i32 0
  %73 = load %class.CFX_ClipRgn*, %class.CFX_ClipRgn** %72, align 8
  %74 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 10
  %75 = load i8, i8* %74, align 4, !range !2
  %76 = icmp ne i8 %75, 0
  %77 = call zeroext i1 @_ZN12CFX_DIBitmap13CompositeMaskEiiiiRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEjii9BlendModePK11CFX_ClipRgnb(%class.CFX_DIBitmap* %51, i32 %54, i32 %56, i32 %58, i32 %60, %"class.fxcrt::RetainPtr.4"* nonnull dereferenceable(8) %4, i32 %71, i32 0, i32 0, i32 0, %class.CFX_ClipRgn* %73, i1 zeroext %76) #7
  %78 = getelementptr inbounds %"class.fxcrt::RetainPtr.4", %"class.fxcrt::RetainPtr.4"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %79 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %78, align 8
  store %class.CFX_DIBBase* null, %class.CFX_DIBBase** %78, align 8
  %80 = icmp eq %class.CFX_DIBBase* %79, null
  br i1 %80, label %138, label %81

81:                                               ; preds = %69
  %82 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %79, i64 0, i32 0, i32 1
  %83 = load i64, i64* %82, align 8
  %84 = add nsw i64 %83, -1
  store i64 %84, i64* %82, align 8
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %86, label %138

86:                                               ; preds = %81
  %87 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %79, i64 0, i32 0
  %88 = bitcast %class.CFX_DIBBase* %79 to void (%"class.fxcrt::Retainable"*)***
  %89 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %88, align 8
  %90 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %89, i64 1
  %91 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %90, align 8
  call void %91(%"class.fxcrt::Retainable"* nonnull %87) #7
  br label %138

92:                                               ; preds = %30
  br i1 %38, label %93, label %96

93:                                               ; preds = %92
  %94 = call zeroext i1 @_ZN12CFX_DIBitmap13MultiplyAlphaEi(%class.CFX_DIBitmap* %31, i32 %37) #7
  %95 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %18, align 8
  br label %96

96:                                               ; preds = %93, %92
  %97 = phi %class.CFX_DIBitmap* [ %95, %93 ], [ %31, %92 ]
  %98 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %99 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %98, align 8
  %100 = load %class.CFX_ImageTransformer*, %class.CFX_ImageTransformer** %13, align 8
  %101 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %100, i64 0, i32 3, i32 0
  %102 = load i32, i32* %101, align 4
  %103 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %100, i64 0, i32 3, i32 1
  %104 = load i32, i32* %103, align 4
  %105 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %97, i64 0, i32 0, i32 2
  %106 = load i32, i32* %105, align 4
  %107 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %97, i64 0, i32 0, i32 3
  %108 = load i32, i32* %107, align 8
  %109 = bitcast %"class.fxcrt::RetainPtr.4"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %109) #7
  %110 = ptrtoint %class.CFX_DIBitmap* %97 to i64
  %111 = bitcast %"class.fxcrt::RetainPtr.4"* %5 to i64*
  store i64 %110, i64* %111, align 8
  %112 = icmp eq %class.CFX_DIBitmap* %97, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %96
  %114 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %97, i64 0, i32 0, i32 0, i32 1
  %115 = load i64, i64* %114, align 8
  %116 = add nsw i64 %115, 1
  store i64 %116, i64* %114, align 8
  br label %117

117:                                              ; preds = %96, %113
  %118 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 1, i32 0
  %119 = load %class.CFX_ClipRgn*, %class.CFX_ClipRgn** %118, align 8
  %120 = getelementptr inbounds %class.CFX_ImageRenderer, %class.CFX_ImageRenderer* %0, i64 0, i32 10
  %121 = load i8, i8* %120, align 4, !range !2
  %122 = icmp ne i8 %121, 0
  %123 = call zeroext i1 @_ZN12CFX_DIBitmap15CompositeBitmapEiiiiRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEii9BlendModePK11CFX_ClipRgnb(%class.CFX_DIBitmap* %99, i32 %102, i32 %104, i32 %106, i32 %108, %"class.fxcrt::RetainPtr.4"* nonnull dereferenceable(8) %5, i32 0, i32 0, i32 0, %class.CFX_ClipRgn* %119, i1 zeroext %122) #7
  %124 = getelementptr inbounds %"class.fxcrt::RetainPtr.4", %"class.fxcrt::RetainPtr.4"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %125 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %124, align 8
  store %class.CFX_DIBBase* null, %class.CFX_DIBBase** %124, align 8
  %126 = icmp eq %class.CFX_DIBBase* %125, null
  br i1 %126, label %138, label %127

127:                                              ; preds = %117
  %128 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %125, i64 0, i32 0, i32 1
  %129 = load i64, i64* %128, align 8
  %130 = add nsw i64 %129, -1
  store i64 %130, i64* %128, align 8
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %138

132:                                              ; preds = %127
  %133 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %125, i64 0, i32 0
  %134 = bitcast %class.CFX_DIBBase* %125 to void (%"class.fxcrt::Retainable"*)***
  %135 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %134, align 8
  %136 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %135, i64 1
  %137 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %136, align 8
  call void %137(%"class.fxcrt::Retainable"* nonnull %133) #7
  br label %138

138:                                              ; preds = %132, %127, %117, %86, %81, %69
  %139 = phi i8* [ %61, %69 ], [ %61, %81 ], [ %61, %86 ], [ %109, %117 ], [ %109, %127 ], [ %109, %132 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %139) #7
  br label %140

140:                                              ; preds = %138, %23
  %141 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %18, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %18, align 8
  %142 = icmp eq %class.CFX_DIBitmap* %141, null
  br i1 %142, label %154, label %143

143:                                              ; preds = %140
  %144 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %141, i64 0, i32 0, i32 0, i32 1
  %145 = load i64, i64* %144, align 8
  %146 = add nsw i64 %145, -1
  store i64 %146, i64* %144, align 8
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %154

148:                                              ; preds = %143
  %149 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %141, i64 0, i32 0, i32 0
  %150 = bitcast %class.CFX_DIBitmap* %141 to void (%"class.fxcrt::Retainable"*)***
  %151 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %150, align 8
  %152 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %151, i64 1
  %153 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %152, align 8
  call void %153(%"class.fxcrt::Retainable"* nonnull %149) #7
  br label %154

154:                                              ; preds = %22, %140, %143, %148
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %155

155:                                              ; preds = %12, %2, %154, %8
  %156 = phi i1 [ %11, %8 ], [ false, %154 ], [ false, %2 ], [ true, %12 ]
  ret i1 %156
}

declare zeroext i1 @_ZN18CFX_ImageStretcher8ContinueEP19PauseIndicatorIface(%class.CFX_ImageStretcher*, %class.PauseIndicatorIface*) local_unnamed_addr #2

declare zeroext i1 @_ZN20CFX_ImageTransformer8ContinueEP19PauseIndicatorIface(%class.CFX_ImageTransformer*, %class.PauseIndicatorIface*) local_unnamed_addr #2

declare void @_ZN20CFX_ImageTransformer12DetachBitmapEv(%"class.fxcrt::RetainPtr"* sret, %class.CFX_ImageTransformer*) local_unnamed_addr #2

declare zeroext i1 @_ZN12CFX_DIBitmap13CompositeMaskEiiiiRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEjii9BlendModePK11CFX_ClipRgnb(%class.CFX_DIBitmap*, i32, i32, i32, i32, %"class.fxcrt::RetainPtr.4"* dereferenceable(8), i32, i32, i32, i32, %class.CFX_ClipRgn*, i1 zeroext) local_unnamed_addr #2

declare zeroext i1 @_ZN12CFX_DIBitmap13MultiplyAlphaEi(%class.CFX_DIBitmap*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZN12CFX_DIBitmap15CompositeBitmapEiiiiRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEii9BlendModePK11CFX_ClipRgnb(%class.CFX_DIBitmap*, i32, i32, i32, i32, %"class.fxcrt::RetainPtr.4"* dereferenceable(8), i32, i32, i32, %class.CFX_ClipRgn*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #4

; Function Attrs: nounwind
declare void @_ZN20CFX_ImageTransformerD1Ev(%class.CFX_ImageTransformer*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN18CFX_ImageStretcherD1Ev(%class.CFX_ImageStretcher*) unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare void @_ZN18CFX_ImageStretcherC1EP21ScanlineComposerIfaceRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEiiRK7FX_RECTRK21FXDIB_ResampleOptions(%class.CFX_ImageStretcher*, %class.ScanlineComposerIface*, %"class.fxcrt::RetainPtr.4"* dereferenceable(8), i32, i32, %struct.FX_RECT* dereferenceable(16), %struct.FXDIB_ResampleOptions* dereferenceable(4)) unnamed_addr #2

declare void @_ZN20CFX_ImageTransformerC1ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEERK10CFX_MatrixRK21FXDIB_ResampleOptionsPK7FX_RECT(%class.CFX_ImageTransformer*, %"class.fxcrt::RetainPtr.4"* dereferenceable(8), %class.CFX_Matrix* dereferenceable(24), %struct.FXDIB_ResampleOptions* dereferenceable(4), %struct.FX_RECT*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
