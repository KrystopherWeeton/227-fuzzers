; ModuleID = '../../net/dns/dns_server_iterator.cc'
source_filename = "../../net/dns/dns_server_iterator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::DnsServerIterator" = type { i32 (...)**, %"class.std::__1::vector", i32, i32, %"class.net::ResolveContext"*, i64, %"class.net::DnsSession"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.net::ResolveContext" = type { %"class.base::CheckedObserver", %"class.net::URLRequestContext"*, %"class.std::__1::unique_ptr", %"class.base::TimeDelta", %"class.base::ObserverList", %"class.base::WeakPtr.18", i32, %"class.base::TimeDelta", %"class.std::__1::vector.19", %"class.std::__1::vector.19", %"class.net::IsolationInfo" }
%"class.base::CheckedObserver" = type { i32 (...)**, %"class.base::WeakPtrFactory" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%"class.net::URLRequestContext" = type opaque
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.net::HostCache"* }
%"class.net::HostCache" = type opaque
%"class.base::ObserverList" = type <{ %"class.std::__1::vector.10", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { %"class.base::internal::CheckedObserverAdapter"*, %"class.base::internal::CheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.13" }
%"class.base::internal::CheckedObserverAdapter" = type { %"class.base::WeakPtr" }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.12 }
%class.scoped_refptr.12 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.base::internal::CheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.base::WeakPtr.18" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { %"struct.net::ResolveContext::ServerStats"*, %"struct.net::ResolveContext::ServerStats"*, %"class.std::__1::__compressed_pair.31" }
%"struct.net::ResolveContext::ServerStats" = type { i32, i8, %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.std::__1::unique_ptr.21" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.base::SampleVector"* }
%"class.base::SampleVector" = type { %"class.base::SampleVectorBase", %"class.std::__1::vector" }
%"class.base::SampleVectorBase" = type { %"class.base::HistogramSamples", %"struct.std::__1::atomic.24", %"class.base::BucketRanges"* }
%"class.base::HistogramSamples" = type { i32 (...)**, %"struct.base::HistogramSamples::Metadata"* }
%"struct.base::HistogramSamples::Metadata" = type { i64, i64, i32, %"union.base::HistogramSamples::AtomicSingleSample" }
%"union.base::HistogramSamples::AtomicSingleSample" = type { i32 }
%"struct.std::__1::atomic.24" = type { %"struct.std::__1::__atomic_base.25" }
%"struct.std::__1::__atomic_base.25" = type { %"struct.std::__1::__cxx_atomic_impl.26" }
%"struct.std::__1::__cxx_atomic_impl.26" = type { %"struct.std::__1::__cxx_atomic_base_impl.27" }
%"struct.std::__1::__cxx_atomic_base_impl.27" = type { i32* }
%"class.base::BucketRanges" = type { %"class.std::__1::vector", i32, %"struct.std::__1::atomic" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.net::ResolveContext::ServerStats"* }
%"class.net::IsolationInfo" = type { i32, %"class.absl::optional", %"class.absl::optional", %"class.net::NetworkIsolationKey", %"class.net::SiteForCookies", i8, %"class.absl::optional.52" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.url::Origin" }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional.42" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.38 }
%union.anon.38 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::optional.42" = type { %"class.absl::optional_internal::optional_data.43" }
%"class.absl::optional_internal::optional_data.43" = type { %"class.absl::optional_internal::optional_data_base.44" }
%"class.absl::optional_internal::optional_data_base.44" = type { %"class.absl::optional_internal::optional_data_dtor_base.45" }
%"class.absl::optional_internal::optional_data_dtor_base.45" = type { i8, %union.anon.46 }
%union.anon.46 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.net::NetworkIsolationKey" = type { i8, %"class.absl::optional.47", %"class.absl::optional.47" }
%"class.absl::optional.47" = type { %"class.absl::optional_internal::optional_data.48" }
%"class.absl::optional_internal::optional_data.48" = type { %"class.absl::optional_internal::optional_data_base.49" }
%"class.absl::optional_internal::optional_data_base.49" = type { %"class.absl::optional_internal::optional_data_dtor_base.50" }
%"class.absl::optional_internal::optional_data_dtor_base.50" = type { i8, %union.anon.51 }
%union.anon.51 = type { %"class.net::SchemefulSite" }
%"class.net::SchemefulSite" = type { %"class.url::Origin" }
%"class.net::SiteForCookies" = type <{ %"class.net::SchemefulSite", i8, [7 x i8] }>
%"class.absl::optional.52" = type { %"class.absl::optional_internal::optional_data.53" }
%"class.absl::optional_internal::optional_data.53" = type { %"class.absl::optional_internal::optional_data_base.54" }
%"class.absl::optional_internal::optional_data_base.54" = type { %"class.absl::optional_internal::optional_data_dtor_base.55" }
%"class.absl::optional_internal::optional_data_dtor_base.55" = type { i8, %union.anon.56 }
%union.anon.56 = type { %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.57", %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { i64 }
%"class.net::DnsSession" = type { %"class.base::RefCounted", %"struct.net::DnsConfig", %"class.std::__1::unique_ptr.105", %"class.net::DnsUdpTracker", %"class.base::RepeatingCallback", %"class.net::NetLog"*, %"class.base::WeakPtrFactory.115" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"struct.net::DnsConfig" = type { %"class.std::__1::vector.65", i8, %"class.std::__1::basic_string", %"class.std::__1::vector.72", %"class.std::__1::unordered_map", i8, i8, i32, %"class.base::TimeDelta", i32, i32, i8, i8, %"class.std::__1::vector.98", i32, i8, %"class.std::__1::vector.72" }
%"class.std::__1::vector.65" = type { %"class.std::__1::__vector_base.66" }
%"class.std::__1::__vector_base.66" = type { %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"*, %"class.std::__1::__compressed_pair.67" }
%"class.net::IPEndPoint" = type { %"class.net::IPAddress", i16 }
%"class.net::IPAddress" = type { %"class.net::IPAddressBytes" }
%"class.net::IPAddressBytes" = type { %"struct.std::__1::array", i8 }
%"struct.std::__1::array" = type { [16 x i8] }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"class.net::IPEndPoint"* }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.79", %"class.std::__1::__compressed_pair.87", %"class.std::__1::__compressed_pair.92", %"class.std::__1::__compressed_pair.94", [4 x i8] }>
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81", %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { float }
%"class.std::__1::vector.98" = type { %"class.std::__1::__vector_base.99" }
%"class.std::__1::__vector_base.99" = type { %"struct.net::DnsOverHttpsServerConfig"*, %"struct.net::DnsOverHttpsServerConfig"*, %"class.std::__1::__compressed_pair.100" }
%"struct.net::DnsOverHttpsServerConfig" = type <{ %"class.std::__1::basic_string", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"struct.net::DnsOverHttpsServerConfig"* }
%"class.std::__1::vector.72" = type { %"class.std::__1::__vector_base.73" }
%"class.std::__1::__vector_base.73" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"class.net::DnsSocketAllocator"* }
%"class.net::DnsSocketAllocator" = type opaque
%"class.net::DnsUdpTracker" = type { i8, %"class.base::circular_deque", %"class.base::circular_deque.111", %"class.base::circular_deque.111", %"class.base::TickClock"* }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"struct.net::DnsUdpTracker::QueryData"*, i64 }
%"struct.net::DnsUdpTracker::QueryData" = type opaque
%"class.base::circular_deque.111" = type { %"class.base::internal::VectorBuffer.112", i64, i64 }
%"class.base::internal::VectorBuffer.112" = type { %"class.base::TimeTicks"*, i64 }
%"class.base::TickClock" = type { i32 (...)** }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.113 }
%class.scoped_refptr.113 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.114", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.114" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.net::NetLog" = type opaque
%"class.base::WeakPtrFactory.115" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.net::DohDnsServerIterator" = type <{ %"class.net::DnsServerIterator", i32, [4 x i8] }>
%"class.net::ClassicDnsServerIterator" = type { %"class.net::DnsServerIterator" }

$_ZN3net20DohDnsServerIteratorD0Ev = comdat any

$_ZN3net24ClassicDnsServerIteratorD0Ev = comdat any

@_ZTVN3net17DnsServerIteratorE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::DnsServerIterator"*)* @_ZN3net17DnsServerIteratorD2Ev to i8*), i8* bitcast (void (%"class.net::DnsServerIterator"*)* @_ZN3net17DnsServerIteratorD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZTVN3net20DohDnsServerIteratorE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::DnsServerIterator"*)* @_ZN3net17DnsServerIteratorD2Ev to i8*), i8* bitcast (void (%"class.net::DohDnsServerIterator"*)* @_ZN3net20DohDnsServerIteratorD0Ev to i8*), i8* bitcast (i64 (%"class.net::DohDnsServerIterator"*)* @_ZN3net20DohDnsServerIterator19GetNextAttemptIndexEv to i8*), i8* bitcast (i1 (%"class.net::DohDnsServerIterator"*)* @_ZN3net20DohDnsServerIterator16AttemptAvailableEv to i8*)] }, align 8
@_ZTVN3net24ClassicDnsServerIteratorE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::DnsServerIterator"*)* @_ZN3net17DnsServerIteratorD2Ev to i8*), i8* bitcast (void (%"class.net::ClassicDnsServerIterator"*)* @_ZN3net24ClassicDnsServerIteratorD0Ev to i8*), i8* bitcast (i64 (%"class.net::ClassicDnsServerIterator"*)* @_ZN3net24ClassicDnsServerIterator19GetNextAttemptIndexEv to i8*), i8* bitcast (i1 (%"class.net::ClassicDnsServerIterator"*)* @_ZN3net24ClassicDnsServerIterator16AttemptAvailableEv to i8*)] }, align 8

@_ZN3net17DnsServerIteratorD1Ev = hidden unnamed_addr alias void (%"class.net::DnsServerIterator"*), void (%"class.net::DnsServerIterator"*)* @_ZN3net17DnsServerIteratorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net17DnsServerIteratorC2EmmiiPKNS_14ResolveContextEPKNS_10DnsSessionE(%"class.net::DnsServerIterator"*, i64, i64, i32, i32, %"class.net::ResolveContext"*, %"class.net::DnsSession"*) unnamed_addr #0 align 2 {
  %8 = getelementptr inbounds %"class.net::DnsServerIterator", %"class.net::DnsServerIterator"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3net17DnsServerIteratorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds %"class.net::DnsServerIterator", %"class.net::DnsServerIterator"* %0, i64 0, i32 1
  %10 = bitcast %"class.std::__1::vector"* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #8
  %11 = icmp eq i64 %1, 0
  br i1 %11, label %26, label %12

12:                                               ; preds = %7
  %13 = icmp ugt i64 %1, 4611686018427387903
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.std::__1::vector"* %9 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #9
  unreachable

16:                                               ; preds = %12
  %17 = shl i64 %1, 2
  %18 = tail call i8* @_Znwm(i64 %17) #10
  %19 = bitcast i8* %18 to i32*
  %20 = getelementptr inbounds %"class.net::DnsServerIterator", %"class.net::DnsServerIterator"* %0, i64 0, i32 1, i32 0, i32 1
  %21 = bitcast %"class.std::__1::vector"* %9 to i8**
  store i8* %18, i8** %21, align 8
  %22 = getelementptr inbounds i32, i32* %19, i64 %1
  %23 = getelementptr inbounds %"class.net::DnsServerIterator", %"class.net::DnsServerIterator"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  store i32* %22, i32** %23, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %18, i8 0, i64 %17, i1 false)
  %24 = bitcast i32** %20 to i64*
  %25 = ptrtoint i32* %22 to i64
  store i64 %25, i64* %24, align 8
  br label %26

26:                                               ; preds = %7, %16
  %27 = getelementptr inbounds %"class.net::DnsServerIterator", %"class.net::DnsServerIterator"* %0, i64 0, i32 2
  store i32 %3, i32* %27, align 8
  %28 = getelementptr inbounds %"class.net::DnsServerIterator", %"class.net::DnsServerIterator"* %0, i64 0, i32 3
  store i32 %4, i32* %28, align 4
  %29 = getelementptr inbounds %"class.net::DnsServerIterator", %"class.net::DnsServerIterator"* %0, i64 0, i32 4
  store %"class.net::ResolveContext"* %5, %"class.net::ResolveContext"** %29, align 8
  %30 = getelementptr inbounds %"class.net::DnsServerIterator", %"class.net::DnsServerIterator"* %0, i64 0, i32 5
  store i64 %2, i64* %30, align 8
  %31 = getelementptr inbounds %"class.net::DnsServerIterator", %"class.net::DnsServerIterator"* %0, i64 0, i32 6
  store %"class.net::DnsSession"* %6, %"class.net::DnsSession"** %31, align 8
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN3net17DnsServerIteratorD0Ev(%"class.net::DnsServerIterator"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @llvm.trap() #9
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3net20DohDnsServerIterator19GetNextAttemptIndexEv(%"class.net::DohDnsServerIterator"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::DohDnsServerIterator", %"class.net::DohDnsServerIterator"* %0, i64 0, i32 0, i32 5
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.net::DohDnsServerIterator", %"class.net::DohDnsServerIterator"* %0, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.net::DohDnsServerIterator", %"class.net::DohDnsServerIterator"* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  %6 = bitcast i32** %5 to i64*
  %7 = bitcast %"class.std::__1::vector"* %4 to i64*
  %8 = getelementptr inbounds %"class.net::DohDnsServerIterator", %"class.net::DohDnsServerIterator"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"class.net::DohDnsServerIterator", %"class.net::DohDnsServerIterator"* %0, i64 0, i32 0, i32 4
  %10 = getelementptr inbounds %"class.net::DohDnsServerIterator", %"class.net::DohDnsServerIterator"* %0, i64 0, i32 0, i32 6
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.net::DohDnsServerIterator", %"class.net::DohDnsServerIterator"* %0, i64 0, i32 0, i32 2
  %13 = getelementptr inbounds %"class.net::DohDnsServerIterator", %"class.net::DohDnsServerIterator"* %0, i64 0, i32 0, i32 3
  %14 = load i64, i64* %7, align 8
  %15 = inttoptr i64 %14 to i32*
  br label %16

16:                                               ; preds = %66, %1
  %17 = phi i32* [ %15, %1 ], [ %37, %66 ]
  %18 = phi i32* [ %15, %1 ], [ %38, %66 ]
  %19 = phi i64 [ %14, %1 ], [ %46, %66 ]
  %20 = phi i64 [ %3, %1 ], [ %70, %66 ]
  %21 = phi i64 [ 0, %1 ], [ %67, %66 ]
  %22 = phi i8 [ 0, %1 ], [ %68, %66 ]
  %23 = phi i64 [ -6148914691236517206, %1 ], [ %69, %66 ]
  %24 = add i64 %20, 1
  %25 = load i64, i64* %6, align 8
  %26 = sub i64 %25, %19
  %27 = ashr exact i64 %26, 2
  %28 = urem i64 %24, %27
  store i64 %28, i64* %2, align 8
  %29 = load i32, i32* %8, align 8
  %30 = icmp eq i32 %29, 2
  br i1 %30, label %36, label %31

31:                                               ; preds = %16
  %32 = load %"class.net::ResolveContext"*, %"class.net::ResolveContext"** %9, align 8
  %33 = load %"class.net::DnsSession"*, %"class.net::DnsSession"** %10, align 8
  %34 = tail call zeroext i1 @_ZNK3net14ResolveContext24GetDohServerAvailabilityEmPKNS_10DnsSessionE(%"class.net::ResolveContext"* %32, i64 %20, %"class.net::DnsSession"* %33) #8
  %35 = load i32*, i32** %11, align 8
  br label %36

36:                                               ; preds = %31, %16
  %37 = phi i32* [ %17, %16 ], [ %35, %31 ]
  %38 = phi i32* [ %18, %16 ], [ %35, %31 ]
  %39 = phi i1 [ true, %16 ], [ %34, %31 ]
  %40 = getelementptr inbounds i32, i32* %38, i64 %20
  %41 = load i32, i32* %40, align 4
  %42 = load i32, i32* %12, align 8
  %43 = icmp sge i32 %41, %42
  %44 = xor i1 %39, true
  %45 = or i1 %43, %44
  %46 = ptrtoint i32* %38 to i64
  br i1 %45, label %66, label %47

47:                                               ; preds = %36
  %48 = load %"class.net::ResolveContext"*, %"class.net::ResolveContext"** %9, align 8
  %49 = getelementptr inbounds %"class.net::ResolveContext", %"class.net::ResolveContext"* %48, i64 0, i32 9, i32 0, i32 0
  %50 = load %"struct.net::ResolveContext::ServerStats"*, %"struct.net::ResolveContext::ServerStats"** %49, align 8
  %51 = getelementptr inbounds %"struct.net::ResolveContext::ServerStats", %"struct.net::ResolveContext::ServerStats"* %50, i64 %20, i32 0
  %52 = load i32, i32* %51, align 8
  %53 = load i32, i32* %13, align 4
  %54 = icmp slt i32 %52, %53
  br i1 %54, label %64, label %55

55:                                               ; preds = %47
  %56 = getelementptr inbounds %"struct.net::ResolveContext::ServerStats", %"struct.net::ResolveContext::ServerStats"* %50, i64 %20, i32 2, i32 0, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = icmp eq i8 %22, 0
  %59 = icmp slt i64 %57, %21
  %60 = or i1 %58, %59
  %61 = select i1 %60, i64 %57, i64 %21
  %62 = select i1 %60, i8 1, i8 %22
  %63 = select i1 %60, i64 %20, i64 %23
  br label %66

64:                                               ; preds = %47
  %65 = getelementptr inbounds i32, i32* %38, i64 %20
  br label %78

66:                                               ; preds = %55, %36
  %67 = phi i64 [ %21, %36 ], [ %61, %55 ]
  %68 = phi i8 [ %22, %36 ], [ %62, %55 ]
  %69 = phi i64 [ %23, %36 ], [ %63, %55 ]
  %70 = load i64, i64* %2, align 8
  %71 = icmp eq i64 %70, %3
  br i1 %71, label %72, label %16

72:                                               ; preds = %66
  %73 = icmp eq i8 %68, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %72
  tail call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #9
  unreachable

75:                                               ; preds = %72
  %76 = getelementptr inbounds i32, i32* %37, i64 %69
  %77 = load i32, i32* %76, align 4
  br label %78

78:                                               ; preds = %64, %75
  %79 = phi i32 [ %41, %64 ], [ %77, %75 ]
  %80 = phi i32* [ %65, %64 ], [ %76, %75 ]
  %81 = phi i64 [ %20, %64 ], [ %69, %75 ]
  %82 = add nsw i32 %79, 1
  store i32 %82, i32* %80, align 4
  ret i64 %81
}

declare zeroext i1 @_ZNK3net14ResolveContext24GetDohServerAvailabilityEmPKNS_10DnsSessionE(%"class.net::ResolveContext"*, i64, %"class.net::DnsSession"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net20DohDnsServerIterator16AttemptAvailableEv(%"class.net::DohDnsServerIterator"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::DohDnsServerIterator", %"class.net::DohDnsServerIterator"* %0, i64 0, i32 0, i32 4
  %3 = load %"class.net::ResolveContext"*, %"class.net::ResolveContext"** %2, align 8
  %4 = getelementptr inbounds %"class.net::DohDnsServerIterator", %"class.net::DohDnsServerIterator"* %0, i64 0, i32 0, i32 6
  %5 = load %"class.net::DnsSession"*, %"class.net::DnsSession"** %4, align 8
  %6 = tail call zeroext i1 @_ZNK3net14ResolveContext16IsCurrentSessionEPKNS_10DnsSessionE(%"class.net::ResolveContext"* %3, %"class.net::DnsSession"* %5) #8
  br i1 %6, label %7, label %47

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.net::DohDnsServerIterator", %"class.net::DohDnsServerIterator"* %0, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.net::DohDnsServerIterator", %"class.net::DohDnsServerIterator"* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector"* %8 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %11, %13
  br i1 %14, label %47, label %15

15:                                               ; preds = %7
  %16 = getelementptr inbounds %"class.net::DohDnsServerIterator", %"class.net::DohDnsServerIterator"* %0, i64 0, i32 1
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.net::DohDnsServerIterator", %"class.net::DohDnsServerIterator"* %0, i64 0, i32 0, i32 2
  br label %24

19:                                               ; preds = %36
  %20 = load i64, i64* %10, align 8
  %21 = sub i64 %20, %37
  %22 = ashr exact i64 %21, 2
  %23 = icmp ult i64 %46, %22
  br i1 %23, label %24, label %47

24:                                               ; preds = %15, %19
  %25 = phi i64 [ %13, %15 ], [ %37, %19 ]
  %26 = phi i64 [ 0, %15 ], [ %46, %19 ]
  %27 = inttoptr i64 %25 to i32*
  %28 = load i32, i32* %16, align 8
  %29 = icmp eq i32 %28, 2
  br i1 %29, label %36, label %30

30:                                               ; preds = %24
  %31 = load %"class.net::ResolveContext"*, %"class.net::ResolveContext"** %2, align 8
  %32 = load %"class.net::DnsSession"*, %"class.net::DnsSession"** %4, align 8
  %33 = tail call zeroext i1 @_ZNK3net14ResolveContext24GetDohServerAvailabilityEmPKNS_10DnsSessionE(%"class.net::ResolveContext"* %31, i64 %26, %"class.net::DnsSession"* %32) #8
  %34 = load i32*, i32** %17, align 8
  %35 = ptrtoint i32* %34 to i64
  br label %36

36:                                               ; preds = %30, %24
  %37 = phi i64 [ %25, %24 ], [ %35, %30 ]
  %38 = phi i32* [ %27, %24 ], [ %34, %30 ]
  %39 = phi i1 [ true, %24 ], [ %33, %30 ]
  %40 = getelementptr inbounds i32, i32* %38, i64 %26
  %41 = load i32, i32* %40, align 4
  %42 = load i32, i32* %18, align 8
  %43 = icmp sge i32 %41, %42
  %44 = xor i1 %39, true
  %45 = or i1 %43, %44
  %46 = add nuw i64 %26, 1
  br i1 %45, label %19, label %47

47:                                               ; preds = %36, %19, %7, %1
  %48 = phi i1 [ false, %1 ], [ false, %7 ], [ true, %36 ], [ false, %19 ]
  ret i1 %48
}

declare zeroext i1 @_ZNK3net14ResolveContext16IsCurrentSessionEPKNS_10DnsSessionE(%"class.net::ResolveContext"*, %"class.net::DnsSession"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3net24ClassicDnsServerIterator19GetNextAttemptIndexEv(%"class.net::ClassicDnsServerIterator"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::ClassicDnsServerIterator", %"class.net::ClassicDnsServerIterator"* %0, i64 0, i32 0, i32 5
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.net::ClassicDnsServerIterator", %"class.net::ClassicDnsServerIterator"* %0, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.net::ClassicDnsServerIterator", %"class.net::ClassicDnsServerIterator"* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  %6 = bitcast i32** %5 to i64*
  %7 = bitcast %"class.std::__1::vector"* %4 to i64*
  %8 = getelementptr inbounds %"class.net::ClassicDnsServerIterator", %"class.net::ClassicDnsServerIterator"* %0, i64 0, i32 0, i32 2
  %9 = getelementptr inbounds %"class.net::ClassicDnsServerIterator", %"class.net::ClassicDnsServerIterator"* %0, i64 0, i32 0, i32 4
  %10 = getelementptr inbounds %"class.net::ClassicDnsServerIterator", %"class.net::ClassicDnsServerIterator"* %0, i64 0, i32 0, i32 3
  %11 = load i64, i64* %6, align 8
  %12 = load i64, i64* %7, align 8
  %13 = load i32, i32* %8, align 8
  %14 = sub i64 %11, %12
  %15 = ashr exact i64 %14, 2
  %16 = inttoptr i64 %12 to i32*
  br label %17

17:                                               ; preds = %47, %1
  %18 = phi i64 [ %3, %1 ], [ %23, %47 ]
  %19 = phi i64 [ 0, %1 ], [ %48, %47 ]
  %20 = phi i8 [ 0, %1 ], [ %49, %47 ]
  %21 = phi i64 [ -6148914691236517206, %1 ], [ %50, %47 ]
  %22 = add i64 %18, 1
  %23 = urem i64 %22, %15
  store i64 %23, i64* %2, align 8
  %24 = getelementptr inbounds i32, i32* %16, i64 %18
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, %13
  br i1 %26, label %27, label %47

27:                                               ; preds = %17
  %28 = load %"class.net::ResolveContext"*, %"class.net::ResolveContext"** %9, align 8
  %29 = getelementptr inbounds %"class.net::ResolveContext", %"class.net::ResolveContext"* %28, i64 0, i32 8, i32 0, i32 0
  %30 = load %"struct.net::ResolveContext::ServerStats"*, %"struct.net::ResolveContext::ServerStats"** %29, align 8
  %31 = getelementptr inbounds %"struct.net::ResolveContext::ServerStats", %"struct.net::ResolveContext::ServerStats"* %30, i64 %18, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = load i32, i32* %10, align 4
  %34 = icmp slt i32 %32, %33
  br i1 %34, label %35, label %38

35:                                               ; preds = %27
  %36 = inttoptr i64 %12 to i32*
  %37 = getelementptr inbounds i32, i32* %36, i64 %18
  br label %59

38:                                               ; preds = %27
  %39 = getelementptr inbounds %"struct.net::ResolveContext::ServerStats", %"struct.net::ResolveContext::ServerStats"* %30, i64 %18, i32 2, i32 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = icmp eq i8 %20, 0
  %42 = icmp slt i64 %40, %19
  %43 = or i1 %41, %42
  %44 = select i1 %43, i64 %40, i64 %19
  %45 = select i1 %43, i8 1, i8 %20
  %46 = select i1 %43, i64 %18, i64 %21
  br label %47

47:                                               ; preds = %38, %17
  %48 = phi i64 [ %19, %17 ], [ %44, %38 ]
  %49 = phi i8 [ %20, %17 ], [ %45, %38 ]
  %50 = phi i64 [ %21, %17 ], [ %46, %38 ]
  %51 = icmp eq i64 %23, %3
  br i1 %51, label %52, label %17

52:                                               ; preds = %47
  %53 = icmp eq i8 %49, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %52
  tail call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #9
  unreachable

55:                                               ; preds = %52
  %56 = inttoptr i64 %12 to i32*
  %57 = getelementptr inbounds i32, i32* %56, i64 %50
  %58 = load i32, i32* %57, align 4
  br label %59

59:                                               ; preds = %55, %35
  %60 = phi i32 [ %58, %55 ], [ %25, %35 ]
  %61 = phi i32* [ %57, %55 ], [ %37, %35 ]
  %62 = phi i64 [ %50, %55 ], [ %18, %35 ]
  %63 = add nsw i32 %60, 1
  store i32 %63, i32* %61, align 4
  ret i64 %62
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net24ClassicDnsServerIterator16AttemptAvailableEv(%"class.net::ClassicDnsServerIterator"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::ClassicDnsServerIterator", %"class.net::ClassicDnsServerIterator"* %0, i64 0, i32 0, i32 4
  %3 = load %"class.net::ResolveContext"*, %"class.net::ResolveContext"** %2, align 8
  %4 = getelementptr inbounds %"class.net::ClassicDnsServerIterator", %"class.net::ClassicDnsServerIterator"* %0, i64 0, i32 0, i32 6
  %5 = load %"class.net::DnsSession"*, %"class.net::DnsSession"** %4, align 8
  %6 = tail call zeroext i1 @_ZNK3net14ResolveContext16IsCurrentSessionEPKNS_10DnsSessionE(%"class.net::ResolveContext"* %3, %"class.net::DnsSession"* %5) #8
  br i1 %6, label %7, label %23

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.net::ClassicDnsServerIterator", %"class.net::ClassicDnsServerIterator"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds %"class.net::ClassicDnsServerIterator", %"class.net::ClassicDnsServerIterator"* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  %11 = load i32*, i32** %10, align 8
  %12 = icmp eq i32* %9, %11
  br i1 %12, label %23, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.net::ClassicDnsServerIterator", %"class.net::ClassicDnsServerIterator"* %0, i64 0, i32 0, i32 2
  %15 = load i32, i32* %14, align 8
  br label %18

16:                                               ; preds = %18
  %17 = icmp eq i32* %22, %11
  br i1 %17, label %23, label %18

18:                                               ; preds = %13, %16
  %19 = phi i32* [ %9, %13 ], [ %22, %16 ]
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %20, %15
  %22 = getelementptr inbounds i32, i32* %19, i64 1
  br i1 %21, label %23, label %16

23:                                               ; preds = %16, %18, %7, %1
  %24 = phi i1 [ false, %1 ], [ false, %7 ], [ false, %16 ], [ true, %18 ]
  ret i1 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net17DnsServerIteratorD2Ev(%"class.net::DnsServerIterator"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::DnsServerIterator", %"class.net::DnsServerIterator"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3net17DnsServerIteratorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::DnsServerIterator", %"class.net::DnsServerIterator"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.net::DnsServerIterator", %"class.net::DnsServerIterator"* %0, i64 0, i32 1, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3net20DohDnsServerIteratorD0Ev(%"class.net::DohDnsServerIterator"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.net::DohDnsServerIterator", %"class.net::DohDnsServerIterator"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3net17DnsServerIteratorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::DohDnsServerIterator", %"class.net::DohDnsServerIterator"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.net::DohDnsServerIterator", %"class.net::DohDnsServerIterator"* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.net::DohDnsServerIterator"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3net24ClassicDnsServerIteratorD0Ev(%"class.net::ClassicDnsServerIterator"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.net::ClassicDnsServerIterator", %"class.net::ClassicDnsServerIterator"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3net17DnsServerIteratorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::ClassicDnsServerIterator", %"class.net::ClassicDnsServerIterator"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.net::ClassicDnsServerIterator", %"class.net::ClassicDnsServerIterator"* %0, i64 0, i32 0, i32 1, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.net::ClassicDnsServerIterator"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #10
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
