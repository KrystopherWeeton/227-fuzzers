; ModuleID = '../../third_party/boringssl/src/crypto/cipher_extra/e_aesctrhmac.c'
source_filename = "../../third_party/boringssl/src/crypto/cipher_extra/e_aesctrhmac.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.evp_aead_st = type { i8, i8, i8, i8, i32, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64)*, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64, i32)*, void (%struct.evp_aead_ctx_st*)*, i32 (%struct.evp_aead_ctx_st*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64)*, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64)*, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64, i8*, i64, i8*, i64, i8*, i64)*, i32 (%struct.evp_aead_ctx_st*, i8**, i64*)*, i64 (%struct.evp_aead_ctx_st*, i64, i64)* }
%struct.evp_aead_ctx_st = type { %struct.evp_aead_st*, %union.evp_aead_ctx_st_state, i8 }
%union.evp_aead_ctx_st_state = type { i64, [576 x i8] }
%struct.aes_key_st = type { [60 x i32], i32 }
%struct.gcm128_key_st = type { %struct.u128, [16 x %struct.u128], void (i64*, %struct.u128*)*, void (i64*, %struct.u128*, i8*, i64)*, void (i8*, i8*, %struct.aes_key_st*)*, i8 }
%struct.u128 = type { i64, i64 }
%struct.sha256_state_st = type { [8 x i32], i32, i32, [64 x i8], i32, i32 }

@aead_aes_128_ctr_hmac_sha256 = internal constant %struct.evp_aead_st { i8 48, i8 12, i8 32, i8 32, i32 0, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64)* @aead_aes_ctr_hmac_sha256_init, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64, i32)* null, void (%struct.evp_aead_ctx_st*)* @aead_aes_ctr_hmac_sha256_cleanup, i32 (%struct.evp_aead_ctx_st*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64)* null, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_aes_ctr_hmac_sha256_seal_scatter, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_aes_ctr_hmac_sha256_open_gather, i32 (%struct.evp_aead_ctx_st*, i8**, i64*)* null, i64 (%struct.evp_aead_ctx_st*, i64, i64)* null }, align 8
@aead_aes_256_ctr_hmac_sha256 = internal constant %struct.evp_aead_st { i8 64, i8 12, i8 32, i8 32, i32 0, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64)* @aead_aes_ctr_hmac_sha256_init, i32 (%struct.evp_aead_ctx_st*, i8*, i64, i64, i32)* null, void (%struct.evp_aead_ctx_st*)* @aead_aes_ctr_hmac_sha256_cleanup, i32 (%struct.evp_aead_ctx_st*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64)* null, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_aes_ctr_hmac_sha256_seal_scatter, i32 (%struct.evp_aead_ctx_st*, i8*, i8*, i64, i8*, i64, i8*, i64, i8*, i64)* @aead_aes_ctr_hmac_sha256_open_gather, i32 (%struct.evp_aead_ctx_st*, i8**, i64*)* null, i64 (%struct.evp_aead_ctx_st*, i64, i64)* null }, align 8
@.str = private unnamed_addr constant [67 x i8] c"../../third_party/boringssl/src/crypto/cipher_extra/e_aesctrhmac.c\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.evp_aead_st* @EVP_aead_aes_128_ctr_hmac_sha256() local_unnamed_addr #0 {
  ret %struct.evp_aead_st* @aead_aes_128_ctr_hmac_sha256
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.evp_aead_st* @EVP_aead_aes_256_ctr_hmac_sha256() local_unnamed_addr #0 {
  ret %struct.evp_aead_st* @aead_aes_256_ctr_hmac_sha256
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @aead_aes_ctr_hmac_sha256_init(%struct.evp_aead_ctx_st*, i8*, i64, i64) #1 {
  %5 = alloca [64 x i8], align 16
  %6 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1
  %7 = icmp ult i64 %2, 32
  br i1 %7, label %8, label %9

8:                                                ; preds = %4
  tail call void @ERR_put_error(i32 30, i32 0, i32 102, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0), i32 78) #4
  br label %55

9:                                                ; preds = %4
  %10 = add i64 %2, -32
  switch i64 %2, label %11 [
    i64 64, label %12
    i64 48, label %12
  ]

11:                                               ; preds = %9
  tail call void @ERR_put_error(i32 30, i32 0, i32 102, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0), i32 84) #4
  br label %55

12:                                               ; preds = %9, %9
  %13 = icmp eq i64 %3, 0
  %14 = select i1 %13, i64 32, i64 %3
  %15 = icmp ugt i64 %14, 32
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @ERR_put_error(i32 30, i32 0, i32 116, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0), i32 93) #4
  br label %55

17:                                               ; preds = %12
  %18 = bitcast %union.evp_aead_ctx_st_state* %6 to %struct.aes_key_st*
  %19 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 248
  %20 = bitcast i8* %19 to void (i8*, i8*, %struct.aes_key_st*)**
  %21 = tail call void (i8*, i8*, i64, %struct.aes_key_st*, i8*)* @aes_ctr_set_key(%struct.aes_key_st* %18, %struct.gcm128_key_st* null, void (i8*, i8*, %struct.aes_key_st*)** %20, i8* %1, i64 %10) #4
  %22 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 240
  %23 = bitcast i8* %22 to void (i8*, i8*, i64, %struct.aes_key_st*, i8*)**
  store void (i8*, i8*, i64, %struct.aes_key_st*, i8*)* %21, void (i8*, i8*, i64, %struct.aes_key_st*, i8*)** %23, align 8
  %24 = trunc i64 %14 to i8
  %25 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 2
  store i8 %24, i8* %25, align 8
  %26 = getelementptr inbounds i8, i8* %1, i64 %10
  %27 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %27) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %27, i8* align 1 %26, i64 32, i1 false) #4
  %28 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 32
  call void @llvm.memset.p0i8.i64(i8* align 16 %28, i8 54, i64 32, i1 false) #4
  %29 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 368
  %30 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 256
  %31 = bitcast [64 x i8]* %5 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 16
  %33 = xor <16 x i8> %32, <i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54>
  %34 = bitcast [64 x i8]* %5 to <16 x i8>*
  store <16 x i8> %33, <16 x i8>* %34, align 16
  %35 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 16
  %36 = bitcast i8* %35 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 16
  %38 = xor <16 x i8> %37, <i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54>
  %39 = bitcast i8* %35 to <16 x i8>*
  store <16 x i8> %38, <16 x i8>* %39, align 16
  %40 = bitcast i8* %30 to %struct.sha256_state_st*
  %41 = bitcast i8* %29 to %struct.sha256_state_st*
  %42 = tail call i32 @SHA256_Init(%struct.sha256_state_st* %40) #4
  %43 = call i32 @SHA256_Update(%struct.sha256_state_st* %40, i8* nonnull %27, i64 64) #4
  call void @llvm.memset.p0i8.i64(i8* align 16 %28, i8 92, i64 32, i1 false) #4
  %44 = bitcast [64 x i8]* %5 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 16
  %46 = xor <16 x i8> %45, <i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106>
  %47 = bitcast [64 x i8]* %5 to <16 x i8>*
  store <16 x i8> %46, <16 x i8>* %47, align 16
  %48 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 16
  %49 = bitcast i8* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 16
  %51 = xor <16 x i8> %50, <i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106>
  %52 = bitcast i8* %48 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %52, align 16
  %53 = call i32 @SHA256_Init(%struct.sha256_state_st* %41) #4
  %54 = call i32 @SHA256_Update(%struct.sha256_state_st* %41, i8* nonnull %27, i64 64) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %27) #4
  br label %55

55:                                               ; preds = %11, %16, %17, %8
  %56 = phi i32 [ 0, %8 ], [ 0, %11 ], [ 0, %16 ], [ 1, %17 ]
  ret i32 %56
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @aead_aes_ctr_hmac_sha256_cleanup(%struct.evp_aead_ctx_st* nocapture) #0 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @aead_aes_ctr_hmac_sha256_seal_scatter(%struct.evp_aead_ctx_st*, i8*, i8* nocapture, i64* nocapture, i64, i8*, i64, i8*, i64, i8* nocapture readnone, i64, i8*, i64) #1 {
  %14 = alloca [16 x i8], align 16
  %15 = alloca i32, align 4
  %16 = alloca [16 x i8], align 16
  %17 = alloca [32 x i8], align 16
  %18 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1
  %19 = icmp ugt i64 %8, 68719476735
  br i1 %19, label %20, label %21

20:                                               ; preds = %13
  tail call void @ERR_put_error(i32 30, i32 0, i32 117, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0), i32 187) #4
  br label %60

21:                                               ; preds = %13
  %22 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 2
  %23 = load i8, i8* %22, align 8
  %24 = zext i8 %23 to i64
  %25 = icmp ugt i64 %24, %4
  br i1 %25, label %26, label %27

26:                                               ; preds = %21
  tail call void @ERR_put_error(i32 30, i32 0, i32 103, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0), i32 192) #4
  br label %60

27:                                               ; preds = %21
  %28 = icmp eq i64 %6, 12
  br i1 %28, label %30, label %29

29:                                               ; preds = %27
  tail call void @ERR_put_error(i32 30, i32 0, i32 121, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0), i32 197) #4
  br label %60

30:                                               ; preds = %27
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #4
  %32 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #4
  store i32 0, i32* %15, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %31, i8 0, i64 16, i1 false) #4
  %33 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %33) #4
  %34 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %33, i8* align 1 %5, i64 12, i1 false) #4
  %35 = bitcast i8* %34 to i32*
  store i32 0, i32* %35, align 4
  %36 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 240
  %37 = bitcast i8* %36 to void (i8*, i8*, i64, %struct.aes_key_st*, i8*)**
  %38 = load void (i8*, i8*, i64, %struct.aes_key_st*, i8*)*, void (i8*, i8*, i64, %struct.aes_key_st*, i8*)** %37, align 8
  %39 = icmp eq void (i8*, i8*, i64, %struct.aes_key_st*, i8*)* %38, null
  %40 = bitcast %union.evp_aead_ctx_st_state* %18 to %struct.aes_key_st*
  br i1 %39, label %42, label %41

41:                                               ; preds = %30
  call void @CRYPTO_ctr128_encrypt_ctr32(i8* %7, i8* %1, i64 %8, %struct.aes_key_st* %40, i8* nonnull %33, i8* nonnull %31, i32* nonnull %15, void (i8*, i8*, i64, %struct.aes_key_st*, i8*)* nonnull %38) #4
  br label %46

42:                                               ; preds = %30
  %43 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 248
  %44 = bitcast i8* %43 to void (i8*, i8*, %struct.aes_key_st*)**
  %45 = load void (i8*, i8*, %struct.aes_key_st*)*, void (i8*, i8*, %struct.aes_key_st*)** %44, align 8
  call void @CRYPTO_ctr128_encrypt(i8* %7, i8* %1, i64 %8, %struct.aes_key_st* %40, i8* nonnull %33, i8* nonnull %31, i32* nonnull %15, void (i8*, i8*, %struct.aes_key_st*)* %45) #4
  br label %46

46:                                               ; preds = %41, %42
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %33) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #4
  %47 = getelementptr inbounds [32 x i8], [32 x i8]* %17, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %47) #4
  %48 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 256
  %49 = bitcast i8* %48 to %struct.sha256_state_st*
  %50 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 368
  %51 = bitcast i8* %50 to %struct.sha256_state_st*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %47, i8 -86, i64 32, i1 false)
  call fastcc void @hmac_calculate(i8* nonnull %47, %struct.sha256_state_st* %49, %struct.sha256_state_st* %51, i8* %11, i64 %12, i8* %5, i8* %1, i64 %8)
  %52 = load i8, i8* %22, align 8
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %58, label %54

54:                                               ; preds = %46
  %55 = zext i8 %52 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* nonnull align 16 %47, i64 %55, i1 false) #4
  %56 = load i8, i8* %22, align 8
  %57 = zext i8 %56 to i64
  br label %58

58:                                               ; preds = %46, %54
  %59 = phi i64 [ 0, %46 ], [ %57, %54 ]
  store i64 %59, i64* %3, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %47) #4
  br label %60

60:                                               ; preds = %58, %29, %26, %20
  %61 = phi i32 [ 0, %20 ], [ 0, %26 ], [ 0, %29 ], [ 1, %58 ]
  ret i32 %61
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @aead_aes_ctr_hmac_sha256_open_gather(%struct.evp_aead_ctx_st*, i8*, i8*, i64, i8*, i64, i8*, i64, i8*, i64) #1 {
  %11 = alloca [16 x i8], align 16
  %12 = alloca i32, align 4
  %13 = alloca [16 x i8], align 16
  %14 = alloca [32 x i8], align 16
  %15 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1
  %16 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 2
  %17 = load i8, i8* %16, align 8
  %18 = zext i8 %17 to i64
  %19 = icmp eq i64 %18, %7
  br i1 %19, label %21, label %20

20:                                               ; preds = %10
  tail call void @ERR_put_error(i32 30, i32 0, i32 101, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0), i32 220) #4
  br label %54

21:                                               ; preds = %10
  %22 = icmp eq i64 %3, 12
  br i1 %22, label %24, label %23

23:                                               ; preds = %21
  tail call void @ERR_put_error(i32 30, i32 0, i32 121, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0), i32 225) #4
  br label %54

24:                                               ; preds = %21
  %25 = getelementptr inbounds [32 x i8], [32 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #4
  %26 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 256
  %27 = bitcast i8* %26 to %struct.sha256_state_st*
  %28 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 368
  %29 = bitcast i8* %28 to %struct.sha256_state_st*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 32, i1 false)
  call fastcc void @hmac_calculate(i8* nonnull %25, %struct.sha256_state_st* %27, %struct.sha256_state_st* %29, i8* %8, i64 %9, i8* %2, i8* %4, i64 %5)
  %30 = load i8, i8* %16, align 8
  %31 = zext i8 %30 to i64
  %32 = call i32 @CRYPTO_memcmp(i8* nonnull %25, i8* %6, i64 %31) #4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %35, label %34

34:                                               ; preds = %24
  call void @ERR_put_error(i32 30, i32 0, i32 101, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0), i32 234) #4
  br label %52

35:                                               ; preds = %24
  %36 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %36) #4
  %37 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %37) #4
  store i32 0, i32* %12, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 0, i64 16, i1 false) #4
  %38 = getelementptr inbounds [16 x i8], [16 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #4
  %39 = getelementptr inbounds [16 x i8], [16 x i8]* %13, i64 0, i64 12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %38, i8* align 1 %2, i64 12, i1 false) #4
  %40 = bitcast i8* %39 to i32*
  store i32 0, i32* %40, align 4
  %41 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 240
  %42 = bitcast i8* %41 to void (i8*, i8*, i64, %struct.aes_key_st*, i8*)**
  %43 = load void (i8*, i8*, i64, %struct.aes_key_st*, i8*)*, void (i8*, i8*, i64, %struct.aes_key_st*, i8*)** %42, align 8
  %44 = icmp eq void (i8*, i8*, i64, %struct.aes_key_st*, i8*)* %43, null
  %45 = bitcast %union.evp_aead_ctx_st_state* %15 to %struct.aes_key_st*
  br i1 %44, label %47, label %46

46:                                               ; preds = %35
  call void @CRYPTO_ctr128_encrypt_ctr32(i8* %4, i8* %1, i64 %5, %struct.aes_key_st* %45, i8* nonnull %38, i8* nonnull %36, i32* nonnull %12, void (i8*, i8*, i64, %struct.aes_key_st*, i8*)* nonnull %43) #4
  br label %51

47:                                               ; preds = %35
  %48 = getelementptr inbounds %struct.evp_aead_ctx_st, %struct.evp_aead_ctx_st* %0, i64 0, i32 1, i32 1, i64 248
  %49 = bitcast i8* %48 to void (i8*, i8*, %struct.aes_key_st*)**
  %50 = load void (i8*, i8*, %struct.aes_key_st*)*, void (i8*, i8*, %struct.aes_key_st*)** %49, align 8
  call void @CRYPTO_ctr128_encrypt(i8* %4, i8* %1, i64 %5, %struct.aes_key_st* %45, i8* nonnull %38, i8* nonnull %36, i32* nonnull %12, void (i8*, i8*, %struct.aes_key_st*)* %50) #4
  br label %51

51:                                               ; preds = %46, %47
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %37) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %36) #4
  br label %52

52:                                               ; preds = %51, %34
  %53 = phi i32 [ 0, %34 ], [ 1, %51 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #4
  br label %54

54:                                               ; preds = %52, %23, %20
  %55 = phi i32 [ 0, %20 ], [ 0, %23 ], [ %53, %52 ]
  ret i32 %55
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #3

declare void (i8*, i8*, i64, %struct.aes_key_st*, i8*)* @aes_ctr_set_key(%struct.aes_key_st*, %struct.gcm128_key_st*, void (i8*, i8*, %struct.aes_key_st*)**, i8*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @SHA256_Init(%struct.sha256_state_st*) local_unnamed_addr #3

declare i32 @SHA256_Update(%struct.sha256_state_st*, i8*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @hmac_calculate(i8*, %struct.sha256_state_st* nocapture readonly, %struct.sha256_state_st* nocapture readonly, i8*, i64, i8*, i8*, i64) unnamed_addr #1 {
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca %struct.sha256_state_st, align 4
  %12 = alloca [64 x i8], align 16
  %13 = alloca [32 x i8], align 16
  %14 = bitcast %struct.sha256_state_st* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %14) #4
  %15 = bitcast %struct.sha256_state_st* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %14, i8* align 1 %15, i64 112, i1 false) #4
  %16 = bitcast i64* %9 to [8 x i8]*
  %17 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #4
  %18 = getelementptr inbounds [8 x i8], [8 x i8]* %16, i64 0, i64 1
  %19 = getelementptr inbounds [8 x i8], [8 x i8]* %16, i64 0, i64 2
  %20 = getelementptr inbounds [8 x i8], [8 x i8]* %16, i64 0, i64 3
  %21 = getelementptr inbounds [8 x i8], [8 x i8]* %16, i64 0, i64 4
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %16, i64 0, i64 5
  %23 = getelementptr inbounds [8 x i8], [8 x i8]* %16, i64 0, i64 6
  %24 = getelementptr inbounds [8 x i8], [8 x i8]* %16, i64 0, i64 7
  %25 = trunc i64 %4 to i8
  store i8 %25, i8* %17, align 8
  %26 = lshr i64 %4, 8
  %27 = trunc i64 %26 to i8
  store i8 %27, i8* %18, align 1
  %28 = lshr i64 %4, 16
  %29 = trunc i64 %28 to i8
  store i8 %29, i8* %19, align 2
  %30 = lshr i64 %4, 24
  %31 = trunc i64 %30 to i8
  store i8 %31, i8* %20, align 1
  %32 = lshr i64 %4, 32
  %33 = trunc i64 %32 to i8
  store i8 %33, i8* %21, align 4
  %34 = lshr i64 %4, 40
  %35 = trunc i64 %34 to i8
  store i8 %35, i8* %22, align 1
  %36 = lshr i64 %4, 48
  %37 = trunc i64 %36 to i8
  store i8 %37, i8* %23, align 2
  %38 = lshr i64 %4, 56
  %39 = trunc i64 %38 to i8
  store i8 %39, i8* %24, align 1
  %40 = call i32 @SHA256_Update(%struct.sha256_state_st* nonnull %11, i8* nonnull %17, i64 8) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #4
  %41 = bitcast i64* %10 to [8 x i8]*
  %42 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #4
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %41, i64 0, i64 1
  %44 = getelementptr inbounds [8 x i8], [8 x i8]* %41, i64 0, i64 2
  %45 = getelementptr inbounds [8 x i8], [8 x i8]* %41, i64 0, i64 3
  %46 = getelementptr inbounds [8 x i8], [8 x i8]* %41, i64 0, i64 4
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %41, i64 0, i64 5
  %48 = getelementptr inbounds [8 x i8], [8 x i8]* %41, i64 0, i64 6
  %49 = getelementptr inbounds [8 x i8], [8 x i8]* %41, i64 0, i64 7
  %50 = trunc i64 %7 to i8
  store i8 %50, i8* %42, align 8
  %51 = lshr i64 %7, 8
  %52 = trunc i64 %51 to i8
  store i8 %52, i8* %43, align 1
  %53 = lshr i64 %7, 16
  %54 = trunc i64 %53 to i8
  store i8 %54, i8* %44, align 2
  %55 = lshr i64 %7, 24
  %56 = trunc i64 %55 to i8
  store i8 %56, i8* %45, align 1
  %57 = lshr i64 %7, 32
  %58 = trunc i64 %57 to i8
  store i8 %58, i8* %46, align 4
  %59 = lshr i64 %7, 40
  %60 = trunc i64 %59 to i8
  store i8 %60, i8* %47, align 1
  %61 = lshr i64 %7, 48
  %62 = trunc i64 %61 to i8
  store i8 %62, i8* %48, align 2
  %63 = lshr i64 %7, 56
  %64 = trunc i64 %63 to i8
  store i8 %64, i8* %49, align 1
  %65 = call i32 @SHA256_Update(%struct.sha256_state_st* nonnull %11, i8* nonnull %42, i64 8) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #4
  %66 = call i32 @SHA256_Update(%struct.sha256_state_st* nonnull %11, i8* %5, i64 12) #4
  %67 = call i32 @SHA256_Update(%struct.sha256_state_st* nonnull %11, i8* %3, i64 %4) #4
  %68 = sub i64 36, %4
  %69 = and i64 %68, 63
  %70 = getelementptr inbounds [64 x i8], [64 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %70) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %70, i8 -86, i64 64, i1 false)
  %71 = icmp eq i64 %69, 0
  br i1 %71, label %73, label %72

72:                                               ; preds = %8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %70, i8 0, i64 %69, i1 false) #4
  br label %73

73:                                               ; preds = %8, %72
  %74 = call i32 @SHA256_Update(%struct.sha256_state_st* nonnull %11, i8* nonnull %70, i64 %69) #4
  %75 = call i32 @SHA256_Update(%struct.sha256_state_st* nonnull %11, i8* %6, i64 %7) #4
  %76 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %76) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %76, i8 -86, i64 32, i1 false)
  %77 = call i32 @SHA256_Final(i8* nonnull %76, %struct.sha256_state_st* nonnull %11) #4
  %78 = bitcast %struct.sha256_state_st* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %14, i8* align 1 %78, i64 112, i1 false) #4
  %79 = call i32 @SHA256_Update(%struct.sha256_state_st* nonnull %11, i8* nonnull %76, i64 32) #4
  %80 = call i32 @SHA256_Final(i8* %0, %struct.sha256_state_st* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %76) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %70) #4
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %14) #4
  ret void
}

declare void @CRYPTO_ctr128_encrypt_ctr32(i8*, i8*, i64, %struct.aes_key_st*, i8*, i8*, i32*, void (i8*, i8*, i64, %struct.aes_key_st*, i8*)*) local_unnamed_addr #3

declare void @CRYPTO_ctr128_encrypt(i8*, i8*, i64, %struct.aes_key_st*, i8*, i8*, i32*, void (i8*, i8*, %struct.aes_key_st*)*) local_unnamed_addr #3

declare i32 @SHA256_Final(i8*, %struct.sha256_state_st*) local_unnamed_addr #3

declare i32 @CRYPTO_memcmp(i8*, i8*, i64) local_unnamed_addr #3

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
