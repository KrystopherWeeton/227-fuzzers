; ModuleID = '../../third_party/harfbuzz-ng/src/src/hb-number.cc'
source_filename = "../../third_party/harfbuzz-ng/src/src/hb-number.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@_ZL25_double_parser_trans_keys = internal unnamed_addr constant [19 x i8] c"\00\00+9.909+9090e09.e\00", align 16
@_ZL23_double_parser_indicies = internal unnamed_addr constant [191 x i8] calign 16
@_ZL28_double_parser_index_offsets = internal unnamed_addr constant [9 x i8] c"\00\00\10\1D(8Cz\85", align 1
@_ZL24_double_parser_key_spans = internal unnamed_addr constant [9 x i8] c"\00\0F\0C\0A\0F\0A6\0A8", align 1
@_ZL26_double_parser_trans_targs = internal unnamed_addr constant [10 x i8] c"\02\00\02\03\08\06\05\05\07\04", align 1
@_ZL28_double_parser_trans_actions = internal unnamed_addr constant [10 x i8] c"\00\00\01\00\02\03\00\04\05\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_Z12hb_parse_intPPKcS0_Pib(i8** nocapture, i8*, i32* nocapture, i1 zeroext) local_unnamed_addr #0 {
  %5 = alloca [32 x i8], align 16
  %6 = alloca i8*, align 8
  %7 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #4
  %8 = bitcast i8** %0 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 32, i1 false) #4
  %9 = load i64, i64* %8, align 8
  %10 = ptrtoint i8* %1 to i64
  %11 = sub i64 %10, %9
  %12 = trunc i64 %11 to i32
  %13 = icmp ult i32 %12, 31
  %14 = inttoptr i64 %9 to i8*
  %15 = and i64 %11, 4294967295
  %16 = select i1 %13, i64 %15, i64 31
  %17 = call i8* @strncpy(i8* nonnull %7, i8* %14, i64 %16) #4
  %18 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 %16
  store i8 0, i8* %18, align 1
  %19 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #4
  store i8* %7, i8** %6, align 8
  %20 = tail call i32* @__errno_location() #5
  store i32 0, i32* %20, align 4
  %21 = call i64 @strtol(i8* nonnull %7, i8** nonnull %6, i32 10) #4
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %2, align 4
  %23 = load i32, i32* %20, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %47, !prof !2

25:                                               ; preds = %4
  %26 = load i8*, i8** %6, align 8
  %27 = icmp eq i8* %7, %26
  %28 = xor i1 %3, true
  %29 = or i1 %27, %28
  %30 = ptrtoint i8* %26 to i64
  br i1 %29, label %38, label %31, !prof !3

31:                                               ; preds = %25
  %32 = ptrtoint [32 x i8]* %5 to i64
  %33 = sub i64 %30, %32
  %34 = load i64, i64* %8, align 8
  %35 = sub i64 %10, %34
  %36 = icmp eq i64 %33, %35
  %37 = inttoptr i64 %34 to i8*
  br i1 %36, label %43, label %47, !prof !2

38:                                               ; preds = %25
  br i1 %27, label %47, label %39, !prof !4

39:                                               ; preds = %38
  %40 = load i8*, i8** %0, align 8
  %41 = ptrtoint [32 x i8]* %5 to i64
  %42 = sub i64 %30, %41
  br label %43

43:                                               ; preds = %39, %31
  %44 = phi i64 [ %42, %39 ], [ %33, %31 ]
  %45 = phi i8* [ %40, %39 ], [ %37, %31 ]
  %46 = getelementptr inbounds i8, i8* %45, i64 %44
  store i8* %46, i8** %0, align 8
  br label %47

47:                                               ; preds = %4, %31, %38, %43
  %48 = phi i1 [ true, %43 ], [ false, %38 ], [ false, %4 ], [ false, %31 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #4
  ret i1 %48
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_Z13hb_parse_uintPPKcS0_Pjbi(i8** nocapture, i8*, i32* nocapture, i1 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [32 x i8], align 16
  %7 = alloca i8*, align 8
  %8 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #4
  %9 = bitcast i8** %0 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 32, i1 false) #4
  %10 = load i64, i64* %9, align 8
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %11, %10
  %13 = trunc i64 %12 to i32
  %14 = icmp ult i32 %13, 31
  %15 = inttoptr i64 %10 to i8*
  %16 = and i64 %12, 4294967295
  %17 = select i1 %14, i64 %16, i64 31
  %18 = call i8* @strncpy(i8* nonnull %8, i8* %15, i64 %17) #4
  %19 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 %17
  store i8 0, i8* %19, align 1
  %20 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #4
  store i8* %8, i8** %7, align 8
  %21 = tail call i32* @__errno_location() #5
  store i32 0, i32* %21, align 4
  %22 = call i64 @strtoul(i8* nonnull %8, i8** nonnull %7, i32 %4) #4
  %23 = trunc i64 %22 to i32
  store i32 %23, i32* %2, align 4
  %24 = load i32, i32* %21, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %48, !prof !2

26:                                               ; preds = %5
  %27 = load i8*, i8** %7, align 8
  %28 = icmp eq i8* %8, %27
  %29 = xor i1 %3, true
  %30 = or i1 %28, %29
  %31 = ptrtoint i8* %27 to i64
  br i1 %30, label %39, label %32, !prof !3

32:                                               ; preds = %26
  %33 = ptrtoint [32 x i8]* %6 to i64
  %34 = sub i64 %31, %33
  %35 = load i64, i64* %9, align 8
  %36 = sub i64 %11, %35
  %37 = icmp eq i64 %34, %36
  %38 = inttoptr i64 %35 to i8*
  br i1 %37, label %44, label %48, !prof !2

39:                                               ; preds = %26
  br i1 %28, label %48, label %40, !prof !4

40:                                               ; preds = %39
  %41 = load i8*, i8** %0, align 8
  %42 = ptrtoint [32 x i8]* %6 to i64
  %43 = sub i64 %31, %42
  br label %44

44:                                               ; preds = %40, %32
  %45 = phi i64 [ %43, %40 ], [ %34, %32 ]
  %46 = phi i8* [ %41, %40 ], [ %38, %32 ]
  %47 = getelementptr inbounds i8, i8* %46, i64 %45
  store i8* %47, i8** %0, align 8
  br label %48

48:                                               ; preds = %5, %32, %39, %44
  %49 = phi i1 [ true, %44 ], [ false, %39 ], [ false, %5 ], [ false, %32 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #4
  ret i1 %49
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_Z15hb_parse_doublePPKcS0_Pdb(i8** nocapture, i8*, double* nocapture, i1 zeroext) local_unnamed_addr #0 {
  %5 = load i8*, i8** %0, align 8
  %6 = icmp ult i8* %5, %1
  br i1 %6, label %7, label %13

7:                                                ; preds = %4, %10
  %8 = phi i8* [ %11, %10 ], [ %5, %4 ]
  %9 = load i8, i8* %8, align 1
  switch i8 %9, label %13 [
    i8 32, label %10
    i8 12, label %10
    i8 10, label %10
    i8 13, label %10
    i8 9, label %10
    i8 11, label %10
  ]

10:                                               ; preds = %7, %7, %7, %7, %7, %7
  %11 = getelementptr inbounds i8, i8* %8, i64 1
  %12 = icmp eq i8* %11, %1
  br i1 %12, label %210, label %7

13:                                               ; preds = %7, %4
  %14 = phi i8* [ %5, %4 ], [ %8, %7 ]
  %15 = icmp eq i8* %14, %1
  br i1 %15, label %210, label %16

16:                                               ; preds = %13, %104
  %17 = phi double [ %96, %104 ], [ 0.000000e+00, %13 ]
  %18 = phi double [ %97, %104 ], [ 0.000000e+00, %13 ]
  %19 = phi double [ %98, %104 ], [ 0.000000e+00, %13 ]
  %20 = phi i32 [ %99, %104 ], [ 0, %13 ]
  %21 = phi i8 [ %100, %104 ], [ 0, %13 ]
  %22 = phi i8 [ %101, %104 ], [ 0, %13 ]
  %23 = phi i8 [ %102, %104 ], [ 0, %13 ]
  %24 = phi i8* [ %105, %104 ], [ %14, %13 ]
  %25 = phi i32 [ %59, %104 ], [ 1, %13 ]
  %26 = shl nsw i32 %25, 1
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZL25_double_parser_trans_keys, i64 0, i64 %27
  %29 = sext i32 %25 to i64
  %30 = getelementptr inbounds [9 x i8], [9 x i8]* @_ZL28_double_parser_index_offsets, i64 0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i64
  %33 = getelementptr inbounds [191 x i8], [191 x i8]* @_ZL23_double_parser_indicies, i64 0, i64 %32
  %34 = getelementptr inbounds [9 x i8], [9 x i8]* @_ZL24_double_parser_key_spans, i64 0, i64 %29
  %35 = load i8, i8* %34, align 1
  %36 = sext i8 %35 to i32
  %37 = icmp eq i32 %25, 0
  br i1 %37, label %51, label %38

38:                                               ; preds = %16
  %39 = load i8, i8* %28, align 2
  %40 = zext i8 %39 to i32
  %41 = load i8, i8* %24, align 1
  %42 = sext i8 %41 to i32
  %43 = icmp slt i32 %42, %40
  br i1 %43, label %51, label %44

44:                                               ; preds = %38
  %45 = getelementptr inbounds i8, i8* %28, i64 1
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = icmp sgt i32 %42, %47
  %49 = sub nsw i32 %42, %40
  %50 = select i1 %48, i32 %36, i32 %49
  br label %51

51:                                               ; preds = %44, %38, %16
  %52 = phi i32 [ %36, %38 ], [ %36, %16 ], [ %50, %44 ]
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %33, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = sext i8 %55 to i64
  %57 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZL26_double_parser_trans_targs, i64 0, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = sext i8 %58 to i32
  %60 = lshr i64 587, %56
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %95

63:                                               ; preds = %51
  %64 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZL28_double_parser_trans_actions, i64 0, i64 %56
  %65 = load i8, i8* %64, align 1
  %66 = sext i8 %65 to i32
  switch i32 %66, label %95 [
    i32 1, label %67
    i32 4, label %68
    i32 2, label %69
    i32 3, label %76
    i32 5, label %86
  ]

67:                                               ; preds = %63
  br label %95

68:                                               ; preds = %63
  br label %95

69:                                               ; preds = %63
  %70 = fmul double %17, 1.000000e+01
  %71 = load i8, i8* %24, align 1
  %72 = sext i8 %71 to i32
  %73 = add nsw i32 %72, -48
  %74 = sitofp i32 %73 to double
  %75 = fadd double %70, %74
  br label %95

76:                                               ; preds = %63
  %77 = fcmp ugt double %18, 0x42F9999999999990
  br i1 %77, label %95, label %78, !prof !4

78:                                               ; preds = %76
  %79 = fmul double %18, 1.000000e+01
  %80 = load i8, i8* %24, align 1
  %81 = sext i8 %80 to i32
  %82 = add nsw i32 %81, -48
  %83 = sitofp i32 %82 to double
  %84 = fadd double %79, %83
  %85 = fadd double %19, 1.000000e+00
  br label %95

86:                                               ; preds = %63
  %87 = mul i32 %20, 10
  %88 = load i8, i8* %24, align 1
  %89 = sext i8 %88 to i32
  %90 = add i32 %87, -48
  %91 = add i32 %90, %89
  %92 = icmp ult i32 %91, 2048
  %93 = select i1 %92, i32 %91, i32 %20, !prof !2
  %94 = select i1 %92, i8 %23, i8 1, !prof !2
  br label %95

95:                                               ; preds = %86, %78, %76, %69, %68, %67, %63, %51
  %96 = phi double [ %17, %51 ], [ %17, %63 ], [ %17, %78 ], [ %17, %76 ], [ %75, %69 ], [ %17, %68 ], [ %17, %67 ], [ %17, %86 ]
  %97 = phi double [ %18, %51 ], [ %18, %63 ], [ %84, %78 ], [ %18, %76 ], [ %18, %69 ], [ %18, %68 ], [ %18, %67 ], [ %18, %86 ]
  %98 = phi double [ %19, %51 ], [ %19, %63 ], [ %85, %78 ], [ %19, %76 ], [ %19, %69 ], [ %19, %68 ], [ %19, %67 ], [ %19, %86 ]
  %99 = phi i32 [ %20, %51 ], [ %20, %63 ], [ %20, %78 ], [ %20, %76 ], [ %20, %69 ], [ %20, %68 ], [ %20, %67 ], [ %93, %86 ]
  %100 = phi i8 [ %21, %51 ], [ %21, %63 ], [ %21, %78 ], [ %21, %76 ], [ %21, %69 ], [ %21, %68 ], [ 1, %67 ], [ %21, %86 ]
  %101 = phi i8 [ %22, %51 ], [ %22, %63 ], [ %22, %78 ], [ %22, %76 ], [ %22, %69 ], [ 1, %68 ], [ %22, %67 ], [ %22, %86 ]
  %102 = phi i8 [ %23, %51 ], [ %23, %63 ], [ %23, %78 ], [ %23, %76 ], [ %23, %69 ], [ %23, %68 ], [ %23, %67 ], [ %94, %86 ]
  %103 = icmp eq i8 %55, 1
  br i1 %103, label %107, label %104

104:                                              ; preds = %95
  %105 = getelementptr inbounds i8, i8* %24, i64 1
  %106 = icmp eq i8* %105, %1
  br i1 %106, label %107, label %16

107:                                              ; preds = %104, %95
  %108 = phi i8* [ %24, %95 ], [ %1, %104 ]
  %109 = fcmp une double %98, 0.000000e+00
  br i1 %109, label %110, label %149

110:                                              ; preds = %107
  %111 = fptoui double %98 to i32
  %112 = and i32 %111, 256
  %113 = icmp eq i32 %112, 0
  %114 = select i1 %113, double 1.000000e+00, double 1.000000e+256
  %115 = trunc i32 %111 to i8
  %116 = icmp sgt i8 %115, -1
  %117 = fmul double %114, 1.000000e+128
  %118 = select i1 %116, double %114, double %117
  %119 = and i32 %111, 64
  %120 = icmp eq i32 %119, 0
  %121 = fmul double %118, 1.000000e+64
  %122 = select i1 %120, double %118, double %121
  %123 = and i32 %111, 32
  %124 = icmp eq i32 %123, 0
  %125 = fmul double %122, 1.000000e+32
  %126 = select i1 %124, double %122, double %125
  %127 = and i32 %111, 16
  %128 = icmp eq i32 %127, 0
  %129 = fmul double %126, 1.000000e+16
  %130 = select i1 %128, double %126, double %129
  %131 = and i32 %111, 8
  %132 = icmp eq i32 %131, 0
  %133 = fmul double %130, 1.000000e+08
  %134 = select i1 %132, double %130, double %133
  %135 = and i32 %111, 4
  %136 = icmp eq i32 %135, 0
  %137 = fmul double %134, 1.000000e+04
  %138 = select i1 %136, double %134, double %137
  %139 = and i32 %111, 2
  %140 = icmp eq i32 %139, 0
  %141 = fmul double %138, 1.000000e+02
  %142 = select i1 %140, double %138, double %141
  %143 = and i32 %111, 1
  %144 = icmp eq i32 %143, 0
  %145 = fmul double %142, 1.000000e+01
  %146 = select i1 %144, double %142, double %145
  %147 = fdiv double %97, %146
  %148 = fadd double %96, %147
  br label %149

149:                                              ; preds = %110, %107
  %150 = phi double [ %148, %110 ], [ %96, %107 ]
  %151 = and i8 %100, 1
  %152 = icmp ne i8 %151, 0
  %153 = fsub double -0.000000e+00, %150
  %154 = select i1 %152, double %153, double %150
  %155 = and i8 %102, 1
  %156 = icmp eq i8 %155, 0
  br i1 %156, label %166, label %157, !prof !2

157:                                              ; preds = %149
  %158 = fcmp oeq double %154, 0.000000e+00
  br i1 %158, label %210, label %159

159:                                              ; preds = %157
  %160 = and i8 %101, 1
  %161 = icmp eq i8 %160, 0
  br i1 %161, label %164, label %162

162:                                              ; preds = %159
  %163 = select i1 %152, double 0x8010000000000000, double 0x10000000000000
  br label %210

164:                                              ; preds = %159
  %165 = select i1 %152, double 0xFFEFFFFFFFFFFFFF, double 0x7FEFFFFFFFFFFFFF
  br label %210

166:                                              ; preds = %149
  %167 = icmp eq i32 %99, 0
  br i1 %167, label %210, label %168

168:                                              ; preds = %166
  %169 = and i8 %101, 1
  %170 = icmp eq i8 %169, 0
  %171 = and i32 %99, 256
  %172 = icmp eq i32 %171, 0
  %173 = select i1 %172, double 1.000000e+00, double 1.000000e+256
  %174 = trunc i32 %99 to i8
  %175 = icmp sgt i8 %174, -1
  %176 = fmul double %173, 1.000000e+128
  %177 = select i1 %175, double %173, double %176
  %178 = and i32 %99, 64
  %179 = icmp eq i32 %178, 0
  %180 = fmul double %177, 1.000000e+64
  %181 = select i1 %179, double %177, double %180
  %182 = and i32 %99, 32
  %183 = icmp eq i32 %182, 0
  %184 = fmul double %181, 1.000000e+32
  %185 = select i1 %183, double %181, double %184
  %186 = and i32 %99, 16
  %187 = icmp eq i32 %186, 0
  %188 = fmul double %185, 1.000000e+16
  %189 = select i1 %187, double %185, double %188
  %190 = and i32 %99, 8
  %191 = icmp eq i32 %190, 0
  %192 = fmul double %189, 1.000000e+08
  %193 = select i1 %191, double %189, double %192
  %194 = and i32 %99, 4
  %195 = icmp eq i32 %194, 0
  %196 = fmul double %193, 1.000000e+04
  %197 = select i1 %195, double %193, double %196
  %198 = and i32 %99, 2
  %199 = icmp eq i32 %198, 0
  %200 = fmul double %197, 1.000000e+02
  %201 = select i1 %199, double %197, double %200
  %202 = and i32 %99, 1
  %203 = icmp eq i32 %202, 0
  %204 = fmul double %201, 1.000000e+01
  %205 = select i1 %203, double %201, double %204
  br i1 %170, label %208, label %206

206:                                              ; preds = %168
  %207 = fdiv double %154, %205
  br label %210

208:                                              ; preds = %168
  %209 = fmul double %205, %154
  br label %210

210:                                              ; preds = %10, %13, %157, %162, %164, %166, %206, %208
  %211 = phi i8* [ %1, %13 ], [ %108, %166 ], [ %108, %208 ], [ %108, %206 ], [ %108, %157 ], [ %108, %164 ], [ %108, %162 ], [ %1, %10 ]
  %212 = phi double [ 0.000000e+00, %13 ], [ %154, %166 ], [ %209, %208 ], [ %207, %206 ], [ %154, %157 ], [ %165, %164 ], [ %163, %162 ], [ 0.000000e+00, %10 ]
  store double %212, double* %2, align 8
  %213 = load i8*, i8** %0, align 8
  %214 = icmp eq i8* %213, %211
  br i1 %214, label %219, label %215, !prof !4

215:                                              ; preds = %210
  store i8* %211, i8** %0, align 8
  %216 = icmp eq i8* %211, %1
  %217 = xor i1 %3, true
  %218 = or i1 %216, %217
  br label %219

219:                                              ; preds = %215, %210
  %220 = phi i1 [ false, %210 ], [ %218, %215 ]
  ret i1 %220
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare i8* @strncpy(i8* returned, i8* nocapture readonly, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i64 @strtoul(i8* readonly, i8** nocapture, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 2002, i32 2000}
!4 = !{!"branch_weights", i32 1, i32 2000}
