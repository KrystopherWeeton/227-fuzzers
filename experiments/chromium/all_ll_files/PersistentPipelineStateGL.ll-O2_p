; ModuleID = '../../third_party/dawn/src/dawn_native/opengl/PersistentPipelineStateGL.cpp'
source_filename = "../../third_party/dawn/src/dawn_native/opengl/PersistentPipelineStateGL.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.dawn_native::opengl::PersistentPipelineState" = type { i32, i32, i32, i32 }
%"struct.dawn_native::opengl::OpenGLFunctions" = type { %"struct.dawn_native::opengl::OpenGLFunctionsBase", %"struct.dawn_native::opengl::OpenGLVersion", [4 x i8], %"class.std::__1::unordered_set" }
%"struct.dawn_native::opengl::OpenGLFunctionsBase" = type { void (i32)*, void (i32, i32)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (float, float, float, float)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, i32 (i32)*, void (i32)*, void (float, float, float, float)*, void (float)*, void (i32)*, void (i8, i8, i8, i8)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, i32 ()*, i32 (i32)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i8)*, void (float, float)*, void (i32, i32)*, void (i32)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i8*)*, void (i32)*, void (i32)*, void ()*, void ()*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*, i32*)*, i32 (i32, i8*)*, void (i32, i8*)*, void (i32, i32, i32*)*, i32 ()*, void (i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*, i32*)*, void (i32, i32, i32*, i8*)*, i8* (i32)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, void (float)*, void (i32)*, void (i32, i32)*, void (float, float)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void ()*, void (i32, i32, i32, i32)*, void (float, i8)*, void (i32, i32, i32, i32)*, void (i32, i32*, i32, i8*, i32)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, float)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32)*, void (i32)*, void (i32, float)*, void (i32, float*)*, void (i32, float, float)*, void (i32, float*)*, void (i32, float, float, float)*, void (i32, float*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32, i32, i8, i32, i8*)*, void (i32, i32, i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32*)*, void (i32, i32*)*, i8 (i32)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8 (i32)*, void (i32, i32, i8**)*, void (i32, i32*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, i8* (i32, i64, i64, i32)*, void (i32, i64, i64)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, i8 (i32)*, void (i32, i32, i32*)*, void (i32)*, void ()*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32)*, void (i32, i32, i8**, i32)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, float, i32)*, i8* (i32, i32)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32*, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32)*, %struct.__GLsync* (i32, i32)*, i8 (%struct.__GLsync*)*, void (%struct.__GLsync*)*, i32 (%struct.__GLsync*, i32, i64)*, void (%struct.__GLsync*, i32, i64)*, void (i32, i64*)*, void (%struct.__GLsync*, i32, i32, i32*, i32*)*, void (i32, i32, i64*)*, void (i32, i32, i64*)*, void (i32, i32*)*, void (i32, i32*)*, i8 (i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, i8 (i32)*, void ()*, void ()*, void (i32, i32, i32*, i32*, i8*)*, void (i32, i32, i8*, i32)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32*)*, void (i32, i32, i32)*, void (i64)*, void (i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*, i32, i32*, i32*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32)*, i32 (i32, i32, i8**)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, i8 (i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, float)*, void (i32, i32, float, float)*, void (i32, i32, float, float, float)*, void (i32, i32, float, float, float, float)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32, i8, i32, i32, i32)*, void (i32, i32, i8*)*, void (i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, float*)*, void (i32, i32, i64, i32)*, void (i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32)*, void ()*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32*, i8)*, void (i32, i32, i32, i32, i32, i8*)*, void (void (i32, i32, i32, i32, i32, i8*, i8*)*, i8*)*, i32 (i32, i32, i32*, i32*, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i8*)*, void ()*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, i32*, i8*)*, void (i8*, i32, i8*)*, void (i8*, i32, i32*, i8*)*, void (i32, i8**)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i8, i8, i8, i8)*, i8 (i32, i32)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i32)*, void (float, float, float, float, float, float, float, float)*, i32 ()*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (float)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (float)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32)*, void (double)*, void (i32)*, void (i32, float)*, void (i32, double*)*, void (i32, i32, i32, i32, i8*)*, void (double, double)*, void (i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32*, i32*, i32)*, void (i32, i32*, i32, i8**, i32)*, void (i32, float)*, void (i32, float*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i64, i64, i8*)*, i8* (i32, i32)*, void (i32, i32, double*)*, void (i32, double)*, void (i32, double*)*, void (i32, i16)*, void (i32, i16*)*, void (i32, double, double)*, void (i32, double*)*, void (i32, i16, i16)*, void (i32, i16*)*, void (i32, double, double, double)*, void (i32, double*)*, void (i32, i16, i16, i16)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8, i8, i8, i8)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, double, double, double, double)*, void (i32, double*)*, void (i32, i32*)*, void (i32, i16, i16, i16, i16)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i32)*, void (i32, i32)*, void ()*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i8*)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i16*)*, void (i32, i32, i8*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32*, i32, i8**, i32, i32*)*, void (i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i8*)*, i32 (i32, i8*)*, void (i32, i32)*, void (i32, i32, i64*)*, void (i32, i32, i64*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, double)*, void (i32, double, double)*, void (i32, double, double, double)*, void (i32, double, double, double, double)*, void (i32, i32, double*)*, void (i32, i32, double*)*, void (i32, i32, double*)*, void (i32, i32, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, double*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, float*)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double)*, void (i32, i32, i32, double*)*, void (i32, i32, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, double, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, double, double, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, double*)*, void (i32, double)*, void (i32, double, double)*, void (i32, double, double, double)*, void (i32, double, double, double, double)*, void (i32, double*)*, void (i32, double*)*, void (i32, double*)*, void (i32, double*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, double*)*, void (i32, i32, float*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, double*)*, void (i32, double, double)*, void (i32, i32, float*)*, void (i32, i32, double*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i8*, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i32, i32, i8*)*, void (i32, i32, i32, i32, i64*)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i64, i64)*, void (i32)*, void (i32, i8*, i32, i32)*, void (i32, i32, i8*, i32, i32)*, i32 (i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i64, i8*, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*, i64*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i64*, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i64*)*, void (i32, i32*)*, void (i32, i64, i8*, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i32, i32, i8*)*, i8* (i32, i32)*, i8* (i32, i64, i64, i32)*, i8 (i32)*, void (i32, i64, i64)*, void (i32, i32, i32*)*, void (i32, i32, i64*)*, void (i32, i32, i8**)*, void (i32, i64, i64, i8*)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, float, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i64, i32)*, void (i32, i32, i32, i32*, i64*, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i64*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, double*)*, void (i32, i32, i32, double*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i16*)*, void (i32, i8*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i8*, i32, i8*, i8*)*, void (i32, i8, i32, i32, i32, i8*)*, void (i32, i8, i32, i32, i32, i8*)*, void ()*, void (i32, i8*, i32, i32*, i32*)*, void (i32, i8*, i64, i32, i32)*, void (i32, i32, i8*, i64, i32, i32)*, void (float, float, float)* }
%struct.__GLsync = type opaque
%"struct.dawn_native::opengl::OpenGLVersion" = type { i32, i32, i32 }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.4", %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.11", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.0" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { float }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11dawn_native6opengl23PersistentPipelineState15SetDefaultStateERKNS0_15OpenGLFunctionsE(%"class.dawn_native::opengl::PersistentPipelineState"* nocapture readonly, %"struct.dawn_native::opengl::OpenGLFunctions"* nocapture readonly dereferenceable(5664)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.dawn_native::opengl::OpenGLFunctions", %"struct.dawn_native::opengl::OpenGLFunctions"* %1, i64 0, i32 0, i32 100
  %4 = load void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)** %3, align 8
  %5 = getelementptr inbounds %"class.dawn_native::opengl::PersistentPipelineState", %"class.dawn_native::opengl::PersistentPipelineState"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.dawn_native::opengl::PersistentPipelineState", %"class.dawn_native::opengl::PersistentPipelineState"* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.dawn_native::opengl::PersistentPipelineState", %"class.dawn_native::opengl::PersistentPipelineState"* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 4
  tail call void %4(i32 1029, i32 %6, i32 %8, i32 %10) #1
  %11 = load void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)** %3, align 8
  %12 = getelementptr inbounds %"class.dawn_native::opengl::PersistentPipelineState", %"class.dawn_native::opengl::PersistentPipelineState"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = load i32, i32* %7, align 4
  %15 = load i32, i32* %9, align 4
  tail call void %11(i32 1028, i32 %13, i32 %14, i32 %15) #1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11dawn_native6opengl23PersistentPipelineState17CallGLStencilFuncERKNS0_15OpenGLFunctionsE(%"class.dawn_native::opengl::PersistentPipelineState"* nocapture readonly, %"struct.dawn_native::opengl::OpenGLFunctions"* nocapture readonly dereferenceable(5664)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.dawn_native::opengl::OpenGLFunctions", %"struct.dawn_native::opengl::OpenGLFunctions"* %1, i64 0, i32 0, i32 100
  %4 = load void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)** %3, align 8
  %5 = getelementptr inbounds %"class.dawn_native::opengl::PersistentPipelineState", %"class.dawn_native::opengl::PersistentPipelineState"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.dawn_native::opengl::PersistentPipelineState", %"class.dawn_native::opengl::PersistentPipelineState"* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.dawn_native::opengl::PersistentPipelineState", %"class.dawn_native::opengl::PersistentPipelineState"* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 4
  tail call void %4(i32 1029, i32 %6, i32 %8, i32 %10) #1
  %11 = load void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)** %3, align 8
  %12 = getelementptr inbounds %"class.dawn_native::opengl::PersistentPipelineState", %"class.dawn_native::opengl::PersistentPipelineState"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = load i32, i32* %7, align 4
  %15 = load i32, i32* %9, align 4
  tail call void %11(i32 1028, i32 %13, i32 %14, i32 %15) #1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11dawn_native6opengl23PersistentPipelineState22SetStencilFuncsAndMaskERKNS0_15OpenGLFunctionsEjjj(%"class.dawn_native::opengl::PersistentPipelineState"* nocapture, %"struct.dawn_native::opengl::OpenGLFunctions"* nocapture readonly dereferenceable(5664), i32, i32, i32) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.dawn_native::opengl::PersistentPipelineState", %"class.dawn_native::opengl::PersistentPipelineState"* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, %2
  br i1 %8, label %9, label %17

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.dawn_native::opengl::PersistentPipelineState", %"class.dawn_native::opengl::PersistentPipelineState"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, %3
  br i1 %12, label %13, label %17

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.dawn_native::opengl::PersistentPipelineState", %"class.dawn_native::opengl::PersistentPipelineState"* %0, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, %4
  br i1 %16, label %28, label %17

17:                                               ; preds = %13, %9, %5
  store i32 %2, i32* %6, align 4
  %18 = getelementptr inbounds %"class.dawn_native::opengl::PersistentPipelineState", %"class.dawn_native::opengl::PersistentPipelineState"* %0, i64 0, i32 1
  store i32 %3, i32* %18, align 4
  %19 = getelementptr inbounds %"class.dawn_native::opengl::PersistentPipelineState", %"class.dawn_native::opengl::PersistentPipelineState"* %0, i64 0, i32 2
  store i32 %4, i32* %19, align 4
  %20 = getelementptr inbounds %"struct.dawn_native::opengl::OpenGLFunctions", %"struct.dawn_native::opengl::OpenGLFunctions"* %1, i64 0, i32 0, i32 100
  %21 = load void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)** %20, align 8
  %22 = getelementptr inbounds %"class.dawn_native::opengl::PersistentPipelineState", %"class.dawn_native::opengl::PersistentPipelineState"* %0, i64 0, i32 3
  %23 = load i32, i32* %22, align 4
  tail call void %21(i32 1029, i32 %2, i32 %23, i32 %4) #1
  %24 = load void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)** %20, align 8
  %25 = load i32, i32* %18, align 4
  %26 = load i32, i32* %22, align 4
  %27 = load i32, i32* %19, align 4
  tail call void %24(i32 1028, i32 %25, i32 %26, i32 %27) #1
  br label %28

28:                                               ; preds = %13, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11dawn_native6opengl23PersistentPipelineState19SetStencilReferenceERKNS0_15OpenGLFunctionsEj(%"class.dawn_native::opengl::PersistentPipelineState"* nocapture, %"struct.dawn_native::opengl::OpenGLFunctions"* nocapture readonly dereferenceable(5664), i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.dawn_native::opengl::PersistentPipelineState", %"class.dawn_native::opengl::PersistentPipelineState"* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, %2
  br i1 %6, label %19, label %7

7:                                                ; preds = %3
  store i32 %2, i32* %4, align 4
  %8 = getelementptr inbounds %"struct.dawn_native::opengl::OpenGLFunctions", %"struct.dawn_native::opengl::OpenGLFunctions"* %1, i64 0, i32 0, i32 100
  %9 = load void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)** %8, align 8
  %10 = getelementptr inbounds %"class.dawn_native::opengl::PersistentPipelineState", %"class.dawn_native::opengl::PersistentPipelineState"* %0, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.dawn_native::opengl::PersistentPipelineState", %"class.dawn_native::opengl::PersistentPipelineState"* %0, i64 0, i32 2
  %13 = load i32, i32* %12, align 4
  tail call void %9(i32 1029, i32 %11, i32 %2, i32 %13) #1
  %14 = load void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)** %8, align 8
  %15 = getelementptr inbounds %"class.dawn_native::opengl::PersistentPipelineState", %"class.dawn_native::opengl::PersistentPipelineState"* %0, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %12, align 4
  tail call void %14(i32 1028, i32 %16, i32 %17, i32 %18) #1
  br label %19

19:                                               ; preds = %3, %7
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
