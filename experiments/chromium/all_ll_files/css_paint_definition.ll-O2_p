; ModuleID = '../../third_party/blink/renderer/modules/csspaint/css_paint_definition.cc'
source_filename = "../../third_party/blink/renderer/modules/csspaint/css_paint_definition.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.132", %"class.std::__1::unique_ptr.132", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.142", %"class.std::__1::unique_ptr.148", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.160", %"class.std::__1::unique_ptr.166", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.173", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.9", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.19", %"class.std::__1::unique_ptr.25", %"class.std::__1::unique_ptr.31", %"class.std::__1::unique_ptr.37", %"class.std::__1::unique_ptr.44", %"class.std::__1::unique_ptr.51", %"class.std::__1::unique_ptr.51", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.72", %"class.std::__1::unique_ptr.72", %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.93", %"class.std::__1::unique_ptr.116", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.25" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.40" }
%"struct.std::__1::__atomic_base.40" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"class.blink::Worklist.47"* }
%"class.blink::Worklist.47" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"class.blink::Worklist.54"* }
%"class.blink::Worklist.54" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"class.blink::Worklist.61"* }
%"class.blink::Worklist.61" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.65" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"class.blink::Worklist.68"* }
%"class.blink::Worklist.68" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.72" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"class.blink::Worklist.75"* }
%"class.blink::Worklist.75" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.blink::Worklist.82"* }
%"class.blink::Worklist.82" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.blink::Worklist.89"* }
%"class.blink::Worklist.89" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.93" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.96", %"class.std::__1::__compressed_pair.103", %"class.std::__1::__compressed_pair.108", %"class.std::__1::__compressed_pair.110", [4 x i8] }>
%"class.std::__1::unique_ptr.96" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98", %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { i64 }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { float }
%"class.std::__1::unique_ptr.116" = type { %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.119", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.119" = type { %"class.std::__1::__compressed_pair.120" }
%"class.std::__1::__compressed_pair.120" = type { %"struct.std::__1::__compressed_pair_elem.121" }
%"struct.std::__1::__compressed_pair_elem.121" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.132" = type { %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.134" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.140" }
%"class.WTF::VectorBuffer.140" = type { %"class.WTF::VectorBufferBase.141" }
%"class.WTF::VectorBufferBase.141" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.142" = type { %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.154" }
%"class.std::__1::unique_ptr.154" = type { %"class.std::__1::__compressed_pair.155" }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.47"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.54"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.61"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.68"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.75"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.220" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.220" = type { %"struct.std::__1::__compressed_pair_elem.221" }
%"struct.std::__1::__compressed_pair_elem.221" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.160" = type { %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.166" = type { %"class.std::__1::__compressed_pair.167" }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.172 }
%class.scoped_refptr.172 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.173" = type { %"struct.std::__1::__atomic_base.174" }
%"struct.std::__1::__atomic_base.174" = type { %"struct.std::__1::__cxx_atomic_impl.175" }
%"struct.std::__1::__cxx_atomic_impl.175" = type { %"struct.std::__1::__cxx_atomic_base_impl.176" }
%"struct.std::__1::__cxx_atomic_base_impl.176" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"struct.blink::WrapperTypeInfo" = type { i16, void (%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Template"*)*, void (%"class.v8::Context"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Template"*, i64)*, i8*, %"struct.blink::WrapperTypeInfo"*, i8 }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.6" }
%"class.blink::MemberBase.6" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.v8::Template" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::Object" = type { i8 }
%"class.blink::CSSPaintDefinition" = type { %"class.blink::NameClient", %"class.blink::Member", %"class.blink::Member.181", %"class.blink::Member.185", %"class.blink::TraceWrapperV8Reference.187", i8, %"class.WTF::Vector.190", %"class.WTF::Vector.195", %"class.WTF::Vector.206", %"class.blink::Member.216" }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ScriptState"* }
%"class.blink::Member.181" = type { %"class.blink::MemberBase.182" }
%"class.blink::MemberBase.182" = type { %"class.blink::V8NoArgumentConstructor"* }
%"class.blink::Member.185" = type { %"class.blink::MemberBase.186" }
%"class.blink::MemberBase.186" = type { %"class.blink::V8PaintCallback"* }
%"class.blink::TraceWrapperV8Reference.187" = type { %"class.v8::TracedReference.188" }
%"class.v8::TracedReference.188" = type { %"class.v8::BasicTracedReference.189" }
%"class.v8::BasicTracedReference.189" = type { %"class.v8::TracedReferenceBase" }
%"class.WTF::Vector.190" = type { %"class.WTF::VectorBuffer.191" }
%"class.WTF::VectorBuffer.191" = type { %"class.WTF::VectorBufferBase.192" }
%"class.WTF::VectorBufferBase.192" = type { i32*, i32, i32 }
%"class.WTF::Vector.195" = type { %"class.WTF::VectorBuffer.196" }
%"class.WTF::VectorBuffer.196" = type { %"class.WTF::VectorBufferBase.197" }
%"class.WTF::VectorBufferBase.197" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.198 }
%class.scoped_refptr.198 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.199" }
%"struct.std::__1::atomic.199" = type { %"struct.std::__1::__atomic_base.200" }
%"struct.std::__1::__atomic_base.200" = type { %"struct.std::__1::__atomic_base.201" }
%"struct.std::__1::__atomic_base.201" = type { %"struct.std::__1::__cxx_atomic_impl.202" }
%"struct.std::__1::__cxx_atomic_impl.202" = type { %"struct.std::__1::__cxx_atomic_base_impl.203" }
%"struct.std::__1::__cxx_atomic_base_impl.203" = type { i32 }
%"class.WTF::Vector.206" = type { %"class.WTF::VectorBuffer.207" }
%"class.WTF::VectorBuffer.207" = type { %"class.WTF::VectorBufferBase.208" }
%"class.WTF::VectorBufferBase.208" = type { %"class.blink::CSSSyntaxDefinition"*, i32, i32 }
%"class.blink::CSSSyntaxDefinition" = type { %"class.WTF::Vector.209" }
%"class.WTF::Vector.209" = type { %"class.WTF::VectorBuffer.210" }
%"class.WTF::VectorBuffer.210" = type { %"class.WTF::VectorBufferBase.211" }
%"class.WTF::VectorBufferBase.211" = type { %"class.blink::CSSSyntaxComponent"*, i32, i32 }
%"class.blink::CSSSyntaxComponent" = type <{ i32, [4 x i8], %"class.WTF::String", i32, [4 x i8] }>
%"class.blink::Member.216" = type { %"class.blink::MemberBase.217" }
%"class.blink::MemberBase.217" = type { %"class.blink::PaintRenderingContext2DSettings"* }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr, %"class.blink::Member.177", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%class.scoped_refptr = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::Member.177" = type { %"class.blink::MemberBase.178" }
%"class.blink::MemberBase.178" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent.179" }
%"class.blink::Persistent.179" = type { %"class.blink::PersistentBase.180" }
%"class.blink::PersistentBase.180" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::V8NoArgumentConstructor" = type { %"class.blink::CallbackFunctionBase" }
%"class.blink::CallbackFunctionBase" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference", %"class.blink::Member", %"class.blink::Member" }
%"class.blink::V8PaintCallback" = type { %"class.blink::CallbackFunctionBase" }
%"class.blink::PaintRenderingContext2DSettings" = type <{ %"class.blink::IDLDictionaryBase", i8, i8, [6 x i8] }>
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%class.sk_sp = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr.238", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic.233" }>
%"struct.std::__1::atomic.233" = type { %"struct.std::__1::__atomic_base.234" }
%"struct.std::__1::__atomic_base.234" = type { %"struct.std::__1::__atomic_base.235" }
%"struct.std::__1::__atomic_base.235" = type { %"struct.std::__1::__cxx_atomic_impl.236" }
%"struct.std::__1::__cxx_atomic_impl.236" = type { %"struct.std::__1::__cxx_atomic_base_impl.237" }
%"struct.std::__1::__cxx_atomic_base_impl.237" = type { i32 }
%"class.std::__1::unique_ptr.238" = type { %"class.std::__1::__compressed_pair.239" }
%"class.std::__1::__compressed_pair.239" = type { %"struct.std::__1::__compressed_pair_elem.240" }
%"struct.std::__1::__compressed_pair_elem.240" = type { i8* }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::StylePropertyMapReadOnly" = type { %"class.blink::ScriptWrappable", %"class.blink::PairIterable" }
%"class.blink::PairIterable" = type { %"class.blink::Iterable" }
%"class.blink::Iterable" = type { i32 (...)** }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.227" }
%"class.WTF::Vector.227" = type { %"class.WTF::VectorBuffer.228" }
%"class.WTF::VectorBuffer.228" = type { %"class.WTF::VectorBufferBase.229" }
%"class.WTF::VectorBufferBase.229" = type { %"class.blink::Member.230"*, i32, i32 }
%"class.blink::Member.230" = type { %"class.blink::MemberBase.231" }
%"class.blink::MemberBase.231" = type { %"class.blink::CSSStyleValue"* }
%"class.blink::CSSStyleValue" = type { %"class.blink::ScriptWrappable", %"class.WTF::String" }
%"class.blink::ScriptState::Scope" = type { %"class.v8::HandleScope", %"class.v8::Local" }
%"class.v8::HandleScope" = type { %"class.v8::internal::Isolate"*, i64*, i64* }
%"class.v8::internal::Isolate" = type opaque
%"class.v8::Local" = type { %"class.v8::Context"* }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"class.blink::IntSize" = type { i32, i32 }
%"class.blink::PaintRenderingContext2D" = type { %"class.blink::ScriptWrappable", %"class.blink::BaseRenderingContext2D.base", %"class.std::__1::unique_ptr.412", %class.sk_sp, %"class.blink::IntSize", %"class.blink::Member.216", i8, float }
%"class.blink::BaseRenderingContext2D.base" = type <{ %"class.blink::GarbageCollectedMixin", %"class.blink::CanvasPath", %"class.blink::HeapVector.257", i32, [4 x i8], %"class.blink::IdentifiabilityStudyHelper", i8 }>
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::CanvasPath" = type { i32 (...)**, %"class.blink::NoAllocDirectCallHost", %"class.blink::Path" }
%"class.blink::NoAllocDirectCallHost" = type { %"class.WTF::Vector.242", %"struct.v8::FastApiCallbackOptions"* }
%"class.WTF::Vector.242" = type { %"class.WTF::VectorBuffer.243" }
%"class.WTF::VectorBuffer.243" = type { %"class.WTF::VectorBufferBase.244" }
%"class.WTF::VectorBufferBase.244" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.245 }
%class.scoped_refptr.245 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.233" }
%"struct.v8::FastApiCallbackOptions" = type { i8, %union.anon }
%union.anon = type { i64 }
%"class.blink::Path" = type { %class.SkPath }
%class.SkPath = type <{ %class.sk_sp.248, i32, %"struct.std::__1::atomic.251", %"struct.std::__1::atomic.251", i8, i8 }>
%class.sk_sp.248 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.249, %class.SkTDArray.250, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic.233" }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.249 = type { i8*, i32, i32 }
%class.SkTDArray.250 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.256 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic.233", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.251" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.256 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.173", [3 x i8] }
%"struct.std::__1::atomic.251" = type { %"struct.std::__1::__atomic_base.252" }
%"struct.std::__1::__atomic_base.252" = type { %"struct.std::__1::__atomic_base.253" }
%"struct.std::__1::__atomic_base.253" = type { %"struct.std::__1::__cxx_atomic_impl.254" }
%"struct.std::__1::__cxx_atomic_impl.254" = type { %"struct.std::__1::__cxx_atomic_base_impl.255" }
%"struct.std::__1::__cxx_atomic_base_impl.255" = type { i8 }
%"class.blink::HeapVector.257" = type { %"class.WTF::Vector.260" }
%"class.WTF::Vector.260" = type { %"class.WTF::VectorBuffer.261" }
%"class.WTF::VectorBuffer.261" = type { %"class.WTF::VectorBufferBase.262" }
%"class.WTF::VectorBufferBase.262" = type { %"class.blink::Member.263"*, i32, i32 }
%"class.blink::Member.263" = type { %"class.blink::MemberBase.264" }
%"class.blink::MemberBase.264" = type { %"class.blink::CanvasRenderingContext2DState"* }
%"class.blink::CanvasRenderingContext2DState" = type { %"class.blink::FontSelectorClient", %"class.WTF::String", %"class.WTF::String", %"class.blink::Member.267", %"class.blink::Member.267", %"class.cc::PaintFlags", %"class.cc::PaintFlags", %"class.cc::PaintFlags", %"class.blink::FloatSize", double, i32, %class.sk_sp.322, %class.sk_sp.322, %class.sk_sp.322, %class.sk_sp.323, %class.sk_sp.323, double, %"class.blink::TransformationMatrix", %"class.WTF::Vector.331", double, %"class.WTF::String", %"class.blink::Font", %"class.blink::Font", i32, %"class.blink::Member.400", %"class.WTF::String", %"class.blink::Member.402", %class.sk_sp.323, i32, i32, i32, float, float, i32, i32, %"class.blink::FontSelectionValue", i32, i8, i8, i32, %"class.blink::ClipList" }
%"class.blink::FontSelectorClient" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Member.267" = type { %"class.blink::MemberBase.268" }
%"class.blink::MemberBase.268" = type { %"class.blink::CanvasStyle"* }
%"class.blink::CanvasStyle" = type { i32, i32, %"class.blink::Member.271", %"class.blink::Member.318" }
%"class.blink::Member.271" = type { %"class.blink::MemberBase.272" }
%"class.blink::MemberBase.272" = type { %"class.blink::CanvasGradient"* }
%"class.blink::CanvasGradient" = type { %"class.blink::ScriptWrappable", %class.scoped_refptr.273, %"class.blink::IdentifiabilityStudyHelper" }
%class.scoped_refptr.273 = type { %"class.blink::Gradient"* }
%"class.blink::Gradient" = type { i32 (...)**, %"class.WTF::RefCounted.274", i32, i32, i32, i32, %"class.WTF::Vector.276", i8, %class.sk_sp.281, %class.sk_sp.317 }
%"class.WTF::RefCounted.274" = type { %"class.base::RefCounted.275" }
%"class.base::RefCounted.275" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.276" = type { %"class.WTF::VectorBuffer.277" }
%"class.WTF::VectorBuffer.277" = type { %"class.WTF::VectorBufferBase.278", [32 x i8] }
%"class.WTF::VectorBufferBase.278" = type { %"struct.blink::Gradient::ColorStop"*, i32, i32 }
%"struct.blink::Gradient::ColorStop" = type <{ double, %"class.blink::Color", [4 x i8] }>
%"class.blink::Color" = type { i32 }
%class.sk_sp.281 = type { %"class.cc::PaintShader"* }
%"class.cc::PaintShader" = type <{ %class.SkRefCnt.base, i8, [3 x i8], i32, float, float, i32, i32, i32, i8, [3 x i8], %"class.absl::optional", %struct.SkPoint, %struct.SkRect, %struct.SkPoint, %struct.SkPoint, float, float, %"class.cc::PaintImage", %class.sk_sp, i32, %"class.absl::optional.297", %"class.std::__1::vector.302", %"class.std::__1::vector.309", %class.sk_sp.316, %class.sk_sp.283, i32, [4 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.282 }
%union.anon.282 = type { %class.SkMatrix }
%class.SkMatrix = type { [9 x float], i32 }
%"class.cc::PaintImage" = type { %class.sk_sp.283, %class.sk_sp, %"class.gfx::Rect", i32, %class.sk_sp.286, %class.sk_sp.294, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp.283, %class.scoped_refptr.295 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%class.sk_sp.286 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type { %class.SkRefCnt.base, %struct.SkImageInfo, i32, %"class.std::__1::vector.287" }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.284, i32, i32 }
%class.sk_sp.284 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.285, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.285 = type { %"struct.std::__1::atomic.233" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.SkISize = type { i32, i32 }
%"class.std::__1::vector.287" = type { %"class.std::__1::__vector_base.288" }
%"class.std::__1::__vector_base.288" = type { %"struct.cc::FrameMetadata"*, %"struct.cc::FrameMetadata"*, %"class.std::__1::__compressed_pair.289" }
%"struct.cc::FrameMetadata" = type { i8, %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::__compressed_pair.289" = type { %"struct.std::__1::__compressed_pair_elem.290" }
%"struct.std::__1::__compressed_pair_elem.290" = type { %"struct.cc::FrameMetadata"* }
%class.sk_sp.294 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type { %class.SkRefCnt.base, [4 x i8] }
%class.scoped_refptr.295 = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.296", [4 x i8] }>
%"class.base::RefCountedThreadSafe.296" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.absl::optional.297" = type { %"class.absl::optional_internal::optional_data.298" }
%"class.absl::optional_internal::optional_data.298" = type { %"class.absl::optional_internal::optional_data_base.299" }
%"class.absl::optional_internal::optional_data_base.299" = type { %"class.absl::optional_internal::optional_data_dtor_base.300" }
%"class.absl::optional_internal::optional_data_dtor_base.300" = type { i8, %union.anon.301 }
%union.anon.301 = type { %"class.gfx::SizeF" }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::vector.302" = type { %"class.std::__1::__vector_base.303" }
%"class.std::__1::__vector_base.303" = type { i32*, i32*, %"class.std::__1::__compressed_pair.304" }
%"class.std::__1::__compressed_pair.304" = type { %"struct.std::__1::__compressed_pair_elem.305" }
%"struct.std::__1::__compressed_pair_elem.305" = type { i32* }
%"class.std::__1::vector.309" = type { %"class.std::__1::__vector_base.310" }
%"class.std::__1::__vector_base.310" = type { float*, float*, %"class.std::__1::__compressed_pair.311" }
%"class.std::__1::__compressed_pair.311" = type { %"struct.std::__1::__compressed_pair_elem.312" }
%"struct.std::__1::__compressed_pair_elem.312" = type { float* }
%class.sk_sp.316 = type { %class.SkPicture* }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.173", [7 x i8] }>
%class.sk_sp.283 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.sk_sp.317 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.blink::Member.318" = type { %"class.blink::MemberBase.319" }
%"class.blink::MemberBase.319" = type { %"class.blink::CanvasPattern"* }
%"class.blink::CanvasPattern" = type opaque
%"class.cc::PaintFlags" = type <{ %class.sk_sp.320, %class.sk_sp.281, %class.sk_sp.321, %class.sk_sp.317, %class.sk_sp.322, %class.sk_sp.323, i32, float, float, i32, %union.anon.330, [4 x i8] }>
%class.sk_sp.320 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.321 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%union.anon.330 = type { i32 }
%class.sk_sp.322 = type { %class.SkDrawLooper* }
%class.SkDrawLooper = type { %class.SkFlattenable.base, [4 x i8] }
%"class.blink::TransformationMatrix" = type { %"struct.blink::TransformationMatrix::Matrix4" }
%"struct.blink::TransformationMatrix::Matrix4" = type { [4 x [4 x double]] }
%"class.WTF::Vector.331" = type { %"class.WTF::VectorBuffer.332" }
%"class.WTF::VectorBuffer.332" = type { %"class.WTF::VectorBufferBase.333" }
%"class.WTF::VectorBufferBase.333" = type { double*, i32, i32 }
%"class.blink::Font" = type { %"class.blink::FontDescription", %class.scoped_refptr.368 }
%"class.blink::FontDescription" = type { %"class.blink::FontFamily", %class.scoped_refptr.337, %class.scoped_refptr.345, %class.scoped_refptr.355, float, float, float, float, float, float, %"struct.blink::FontSelectionRequest", %"class.blink::FontSelectionValue", %union.anon.367 }
%"class.blink::FontFamily" = type { %"class.WTF::AtomicString", %class.scoped_refptr.336 }
%class.scoped_refptr.336 = type { %"class.blink::SharedFontFamily"* }
%"class.blink::SharedFontFamily" = type <{ %"class.blink::FontFamily", %"class.WTF::RefCounted.448", [4 x i8] }>
%"class.WTF::RefCounted.448" = type { %"class.base::RefCounted.449" }
%"class.base::RefCounted.449" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.337 = type { %"class.blink::FontFeatureSettings"* }
%"class.blink::FontFeatureSettings" = type <{ %"class.blink::FontSettings", %"class.WTF::RefCounted.343", [4 x i8] }>
%"class.blink::FontSettings" = type { %"class.WTF::Vector.338" }
%"class.WTF::Vector.338" = type { %"class.WTF::VectorBuffer.339" }
%"class.WTF::VectorBuffer.339" = type { %"class.WTF::VectorBufferBase.340" }
%"class.WTF::VectorBufferBase.340" = type { %"class.blink::FontTagValuePair"*, i32, i32 }
%"class.blink::FontTagValuePair" = type { i32, i32 }
%"class.WTF::RefCounted.343" = type { %"class.base::RefCounted.344" }
%"class.base::RefCounted.344" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.345 = type { %"class.blink::FontVariationSettings"* }
%"class.blink::FontVariationSettings" = type <{ %"class.blink::FontSettings.346", %"class.WTF::RefCounted.353", [4 x i8] }>
%"class.blink::FontSettings.346" = type { %"class.WTF::Vector.347" }
%"class.WTF::Vector.347" = type { %"class.WTF::VectorBuffer.348" }
%"class.WTF::VectorBuffer.348" = type { %"class.WTF::VectorBufferBase.349" }
%"class.WTF::VectorBufferBase.349" = type { %"class.blink::FontTagValuePair.350"*, i32, i32 }
%"class.blink::FontTagValuePair.350" = type { i32, float }
%"class.WTF::RefCounted.353" = type { %"class.base::RefCounted.354" }
%"class.base::RefCounted.354" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.355 = type { %"class.blink::LayoutLocale"* }
%"class.blink::LayoutLocale" = type <{ %"class.WTF::RefCounted.356", [4 x i8], %"class.WTF::AtomicString", %"class.std::__1::basic_string", %"class.WTF::CaseMap::Locale", %class.scoped_refptr.364, %struct.hb_language_impl_t*, i32, i32, i8, [7 x i8] }>
%"class.WTF::RefCounted.356" = type { %"class.base::RefCounted.357" }
%"class.base::RefCounted.357" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.358" }
%"class.std::__1::__compressed_pair.358" = type { %"struct.std::__1::__compressed_pair_elem.359" }
%"struct.std::__1::__compressed_pair_elem.359" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.360 }
%union.anon.360 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.WTF::CaseMap::Locale" = type { i8* }
%class.scoped_refptr.364 = type { %"class.blink::Hyphenation"* }
%"class.blink::Hyphenation" = type <{ i32 (...)**, %"class.WTF::RefCounted.365", [4 x i8] }>
%"class.WTF::RefCounted.365" = type { %"class.base::RefCounted.366" }
%"class.base::RefCounted.366" = type { %"class.base::subtle::RefCountedBase" }
%struct.hb_language_impl_t = type opaque
%"struct.blink::FontSelectionRequest" = type { %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue" }
%union.anon.367 = type { %"struct.blink::FontDescription::BitFields" }
%"struct.blink::FontDescription::BitFields" = type { i56 }
%class.scoped_refptr.368 = type { %"class.blink::FontFallbackList"* }
%"class.blink::FontFallbackList" = type { %"class.WTF::RefCounted.369", %"class.WTF::Vector.371", %"class.blink::SimpleFontData"*, %"class.blink::WeakPersistent", i32, i16, i8, %"class.base::WeakPtr" }
%"class.WTF::RefCounted.369" = type { %"class.base::RefCounted.370" }
%"class.base::RefCounted.370" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.371" = type { %"class.WTF::VectorBuffer.372" }
%"class.WTF::VectorBuffer.372" = type { %"class.WTF::VectorBufferBase.373", [8 x i8] }
%"class.WTF::VectorBufferBase.373" = type { %class.scoped_refptr.374*, i32, i32 }
%class.scoped_refptr.374 = type { %"class.blink::FontData"* }
%"class.blink::FontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.375", [4 x i8] }>
%"class.WTF::RefCounted.375" = type { %"class.base::RefCounted.376" }
%"class.base::RefCounted.376" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::SimpleFontData" = type { %"class.blink::FontData.base", %"class.blink::FontMetrics", float, float, [4 x i8], %"class.blink::FontPlatformData", %class.SkFont, i16, float, i16, %"class.std::__1::unique_ptr.386", %class.scoped_refptr.393, i32, i32, %"struct.blink::FontHeight" }
%"class.blink::FontData.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.375" }>
%"class.blink::FontMetrics" = type <{ i32, float, float, float, float, float, float, %"class.absl::optional.379", %"class.absl::optional.379", i32, i32, i8, i8, [2 x i8] }>
%"class.absl::optional.379" = type { %"class.absl::optional_internal::optional_data.380" }
%"class.absl::optional_internal::optional_data.380" = type { %"class.absl::optional_internal::optional_data_base.381" }
%"class.absl::optional_internal::optional_data_base.381" = type { %"class.absl::optional_internal::optional_data_dtor_base.382" }
%"class.absl::optional_internal::optional_data_dtor_base.382" = type { i8, %union.anon.383 }
%union.anon.383 = type { float }
%"class.blink::FontPlatformData" = type <{ %class.sk_sp.384, %"class.std::__1::basic_string", float, i8, i8, i8, i8, i32, %"struct.blink::WebFontRenderStyle", [5 x i8], %class.scoped_refptr.385, i8, [7 x i8] }>
%class.sk_sp.384 = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.233" }
%class.SkFontStyle = type { i32 }
%"struct.blink::WebFontRenderStyle" = type { i8, i8, i8, i8, i8, i8, i8 }
%class.scoped_refptr.385 = type { %"class.blink::HarfBuzzFace"* }
%"class.blink::HarfBuzzFace" = type opaque
%class.SkFont = type <{ %class.sk_sp.384, float, float, float, i8, i8, i8, i8 }>
%"class.std::__1::unique_ptr.386" = type { %"class.std::__1::__compressed_pair.387" }
%"class.std::__1::__compressed_pair.387" = type { %"struct.std::__1::__compressed_pair_elem.388" }
%"struct.std::__1::__compressed_pair_elem.388" = type { %"struct.blink::SimpleFontData::DerivedFontData"* }
%"struct.blink::SimpleFontData::DerivedFontData" = type { %class.scoped_refptr.389, %class.scoped_refptr.389 }
%class.scoped_refptr.389 = type { %"class.blink::SimpleFontData"* }
%class.scoped_refptr.393 = type { %"class.blink::CustomFontData"* }
%"class.blink::CustomFontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.394", [4 x i8] }>
%"class.WTF::RefCounted.394" = type { %"class.base::RefCounted.395" }
%"class.base::RefCounted.395" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::FontHeight" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"class.blink::WeakPersistent" = type { %"class.blink::PersistentBase.396" }
%"class.blink::PersistentBase.396" = type { %"class.blink::FontFallbackMap"*, %"class.blink::PersistentNodePtr.397" }
%"class.blink::FontFallbackMap" = type opaque
%"class.blink::PersistentNodePtr.397" = type { %"class.blink::PersistentNode"* }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.398 }
%class.scoped_refptr.398 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.399", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.399" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.251" }
%"class.blink::Member.400" = type { %"class.blink::MemberBase.401" }
%"class.blink::MemberBase.401" = type { %"class.blink::CanvasFilter"* }
%"class.blink::CanvasFilter" = type opaque
%"class.blink::Member.402" = type { %"class.blink::MemberBase.403" }
%"class.blink::MemberBase.403" = type { %"class.blink::CSSValue"* }
%"class.blink::CSSValue" = type { i8, i8, i8 }
%class.sk_sp.323 = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.324, i32, %"class.absl::optional.325", i8, i32 }
%class.sk_sp.324 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%"class.absl::optional.325" = type { %"class.absl::optional_internal::optional_data.326" }
%"class.absl::optional_internal::optional_data.326" = type { %"class.absl::optional_internal::optional_data_base.327" }
%"class.absl::optional_internal::optional_data_base.327" = type { %"class.absl::optional_internal::optional_data_dtor_base.328" }
%"class.absl::optional_internal::optional_data_dtor_base.328" = type { i8, %union.anon.329 }
%union.anon.329 = type { %struct.SkRect }
%"class.blink::FontSelectionValue" = type { i16 }
%"class.blink::ClipList" = type { %"class.WTF::Vector.406" }
%"class.WTF::Vector.406" = type { %"class.WTF::VectorBuffer.407" }
%"class.WTF::VectorBuffer.407" = type { %"class.WTF::VectorBufferBase.408", [96 x i8] }
%"class.WTF::VectorBufferBase.408" = type { %"struct.blink::ClipList::ClipOp"*, i32, i32 }
%"struct.blink::ClipList::ClipOp" = type { %class.SkPath, i32, [4 x i8] }
%"class.blink::IdentifiabilityStudyHelper" = type <{ %"class.blink::IdentifiableTokenBuilder", i32, i8, i8, [2 x i8] }>
%"class.blink::IdentifiableTokenBuilder" = type { %"struct.std::__1::array", i8*, i64 }
%"struct.std::__1::array" = type { [64 x i8] }
%"class.std::__1::unique_ptr.412" = type { %"class.std::__1::__compressed_pair.413" }
%"class.std::__1::__compressed_pair.413" = type { %"struct.std::__1::__compressed_pair_elem.414" }
%"struct.std::__1::__compressed_pair_elem.414" = type { %"class.cc::PaintRecorder"* }
%"class.cc::PaintRecorder" = type { i32 (...)**, %class.scoped_refptr.415, %"class.std::__1::unique_ptr.416" }
%class.scoped_refptr.415 = type { %"class.cc::DisplayItemList"* }
%"class.cc::DisplayItemList" = type opaque
%"class.std::__1::unique_ptr.416" = type { %"class.std::__1::__compressed_pair.417" }
%"class.std::__1::__compressed_pair.417" = type { %"struct.std::__1::__compressed_pair_elem.418" }
%"struct.std::__1::__compressed_pair_elem.418" = type { %"class.cc::RecordPaintCanvas"* }
%"class.cc::RecordPaintCanvas" = type { %"class.cc::PaintCanvas", %"class.cc::DisplayItemList"*, %"class.absl::optional.419", %struct.SkRect }
%"class.cc::PaintCanvas" = type { i32 (...)**, %"class.printing::MetafileSkia"*, %"class.paint_preview::PaintPreviewTracker"* }
%"class.printing::MetafileSkia" = type opaque
%"class.paint_preview::PaintPreviewTracker" = type opaque
%"class.absl::optional.419" = type { %"class.absl::optional_internal::optional_data.420" }
%"class.absl::optional_internal::optional_data.420" = type { %"class.absl::optional_internal::optional_data_base.421" }
%"class.absl::optional_internal::optional_data_base.421" = type { %"class.absl::optional_internal::optional_data_dtor_base.422" }
%"class.absl::optional_internal::optional_data_dtor_base.422" = type { i8, %union.anon.423 }
%union.anon.423 = type { %class.SkNoDrawCanvas }
%class.SkNoDrawCanvas = type { %class.SkCanvasVirtualEnforcer }
%class.SkCanvasVirtualEnforcer = type { %class.SkCanvas }
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.424, [384 x i64], %class.sk_sp.425, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr.426", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.432" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.424 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.425 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr.426" = type { %"class.std::__1::__compressed_pair.427" }
%"class.std::__1::__compressed_pair.427" = type { %"struct.std::__1::__compressed_pair_elem.428" }
%"struct.std::__1::__compressed_pair_elem.428" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.432" = type { %"class.std::__1::__compressed_pair.433" }
%"class.std::__1::__compressed_pair.433" = type { %"struct.std::__1::__compressed_pair_elem.434" }
%"struct.std::__1::__compressed_pair_elem.434" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%"class.blink::PaintSize" = type { %"class.blink::ScriptWrappable", %"class.blink::FloatSize" }
%"class.v8::Value" = type { i8 }
%"class.blink::ScriptValue" = type { %"class.v8::Isolate"*, %"class.blink::WorldSafeV8Reference" }
%"class.blink::WorldSafeV8Reference" = type { %"class.blink::TraceWrapperV8Reference.187", %class.scoped_refptr.451 }
%class.scoped_refptr.451 = type { %"class.blink::DOMWrapperWorld"* }
%"class.v8::Maybe.452" = type { i8, %"class.blink::ScriptValue" }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }

$_ZN3WTF6VectorIN5blink13CSSPropertyIDELj0ENS_18PartitionAllocatorEEaSERKS4_ = comdat any

$_ZN3WTF6VectorINS_12AtomicStringELj0ENS_18PartitionAllocatorEEaSERKS3_ = comdat any

$_ZN3WTF6VectorIN5blink19CSSSyntaxDefinitionELj0ENS_18PartitionAllocatorEEaSERKS4_ = comdat any

$_ZNK5blink18CSSPaintDefinition18NameInHeapSnapshotEv = comdat any

$_ZN5blink10TraceTraitINS_11ScriptStateEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_12AtomicStringEEEmm = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13CSSPropertyIDEEEmm = comdat any

$_ZN5blink10TraceTraitINS_31PaintRenderingContext2DSettingsEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN3WTF6VectorIN5blink19CSSSyntaxDefinitionELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink19CSSSyntaxDefinitionEEEmm = comdat any

$_ZN3WTF6VectorIN5blink18CSSSyntaxComponentELj0ENS_18PartitionAllocatorEEaSERKS4_ = comdat any

$_ZN3WTF6VectorIN5blink18CSSSyntaxComponentELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18CSSSyntaxComponentEEEmm = comdat any

$_ZN3WTF6VectorIN5blink18CSSSyntaxComponentELj0ENS_18PartitionAllocatorEEC2ERKS4_ = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv = comdat any

$_ZN5blink15ScriptWrappableD2Ev = comdat any

$_ZN5blink9PaintSizeD0Ev = comdat any

$_ZNK5blink15ScriptWrappable18HasPendingActivityEv = comdat any

$_ZNK5blink15ScriptWrappable17HasEventListenersEv = comdat any

$_ZNK5blink9PaintSize18GetWrapperTypeInfoEv = comdat any

$_ZN5blink20WorldSafeV8ReferenceIN2v85ValueEEaSERKS3_ = comdat any

$_ZN5blink10TraceTraitINS_23V8NoArgumentConstructorEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink10TraceTraitINS_15V8PaintCallbackEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index = comdat any

$_ZTVN5blink9PaintSizeE = comdat any

@_ZTVN5blink18CSSPaintDefinitionE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.blink::CSSPaintDefinition"*)* @_ZNK5blink18CSSPaintDefinition18NameInHeapSnapshotEv to i8*), i8* bitcast (void (%"class.blink::CSSPaintDefinition"*)* @_ZN5blink18CSSPaintDefinitionD2Ev to i8*), i8* bitcast (void (%"class.blink::CSSPaintDefinition"*)* @_ZN5blink18CSSPaintDefinitionD0Ev to i8*), i8* bitcast (void (%"class.blink::CSSPaintDefinition"*, %"class.blink::Visitor"*)* @_ZNK5blink18CSSPaintDefinition5TraceEPNS_7VisitorE to i8*)] }, align 8
@.str = private unnamed_addr constant [19 x i8] c"CSSPaintDefinition\00", align 1
@.str.1 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.2 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv = private unnamed_addr constant [65 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::AtomicString]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink13CSSPropertyIDEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::CSSPropertyID]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink19CSSSyntaxDefinitionEEEPKcv = private unnamed_addr constant [74 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::CSSSyntaxDefinition]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink18CSSSyntaxComponentEEEPKcv = private unnamed_addr constant [73 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::CSSSyntaxComponent]\00", align 1
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.6 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@_ZTVN5blink9PaintSizeE = linkonce_odr hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv to i8*), i8* bitcast (void (%"class.blink::ScriptWrappable"*)* @_ZN5blink15ScriptWrappableD2Ev to i8*), i8* bitcast (void (%"class.blink::PaintSize"*)* @_ZN5blink9PaintSizeD0Ev to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18HasPendingActivityEv to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable17HasEventListenersEv to i8*), i8* bitcast (void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)* @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE to i8*), i8* bitcast (%"struct.blink::WrapperTypeInfo"* (%"class.blink::PaintSize"*)* @_ZNK5blink9PaintSize18GetWrapperTypeInfoEv to i8*), i8* bitcast (%"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE to i8*), i8* bitcast (%"class.v8::Object"* (%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*)* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE to i8*)] }, comdat, align 8
@_ZN5blink9PaintSize18wrapper_type_info_E = external local_unnamed_addr constant %"struct.blink::WrapperTypeInfo"*, align 8

@_ZN5blink18CSSPaintDefinitionC1EPNS_11ScriptStateEPNS_23V8NoArgumentConstructorEPNS_15V8PaintCallbackERKN3WTF6VectorINS_13CSSPropertyIDELj0ENS7_18PartitionAllocatorEEERKNS8_INS7_12AtomicStringELj0ESA_EERKNS8_INS_19CSSSyntaxDefinitionELj0ESA_EEPKNS_31PaintRenderingContext2DSettingsE = hidden unnamed_addr alias void (%"class.blink::CSSPaintDefinition"*, %"class.blink::ScriptState"*, %"class.blink::V8NoArgumentConstructor"*, %"class.blink::V8PaintCallback"*, %"class.WTF::Vector.190"*, %"class.WTF::Vector.195"*, %"class.WTF::Vector.206"*, %"class.blink::PaintRenderingContext2DSettings"*), void (%"class.blink::CSSPaintDefinition"*, %"class.blink::ScriptState"*, %"class.blink::V8NoArgumentConstructor"*, %"class.blink::V8PaintCallback"*, %"class.WTF::Vector.190"*, %"class.WTF::Vector.195"*, %"class.WTF::Vector.206"*, %"class.blink::PaintRenderingContext2DSettings"*)* @_ZN5blink18CSSPaintDefinitionC2EPNS_11ScriptStateEPNS_23V8NoArgumentConstructorEPNS_15V8PaintCallbackERKN3WTF6VectorINS_13CSSPropertyIDELj0ENS7_18PartitionAllocatorEEERKNS8_INS7_12AtomicStringELj0ESA_EERKNS8_INS_19CSSSyntaxDefinitionELj0ESA_EEPKNS_31PaintRenderingContext2DSettingsE
@_ZN5blink18CSSPaintDefinitionD1Ev = hidden unnamed_addr alias void (%"class.blink::CSSPaintDefinition"*), void (%"class.blink::CSSPaintDefinition"*)* @_ZN5blink18CSSPaintDefinitionD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink18CSSPaintDefinitionC2EPNS_11ScriptStateEPNS_23V8NoArgumentConstructorEPNS_15V8PaintCallbackERKN3WTF6VectorINS_13CSSPropertyIDELj0ENS7_18PartitionAllocatorEEERKNS8_INS7_12AtomicStringELj0ESA_EERKNS8_INS_19CSSSyntaxDefinitionELj0ESA_EEPKNS_31PaintRenderingContext2DSettingsE(%"class.blink::CSSPaintDefinition"*, %"class.blink::ScriptState"*, %"class.blink::V8NoArgumentConstructor"*, %"class.blink::V8PaintCallback"*, %"class.WTF::Vector.190"* dereferenceable(16), %"class.WTF::Vector.195"* dereferenceable(16), %"class.WTF::Vector.206"* dereferenceable(16), %"class.blink::PaintRenderingContext2DSettings"*) unnamed_addr #0 align 2 {
  %9 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink18CSSPaintDefinitionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::ScriptState"* %1, %"class.blink::ScriptState"** %10, align 8
  %11 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 2, i32 0, i32 0
  store %"class.blink::V8NoArgumentConstructor"* %2, %"class.blink::V8NoArgumentConstructor"** %11, align 8
  %12 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 3, i32 0, i32 0
  store %"class.blink::V8PaintCallback"* %3, %"class.blink::V8PaintCallback"** %12, align 8
  %13 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  store i64* null, i64** %13, align 8
  %14 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 5
  store i8 0, i8* %14, align 8
  %15 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 6
  %16 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 7
  %17 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 8
  %18 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 9, i32 0, i32 0
  %19 = bitcast %"class.WTF::Vector.190"* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 48, i1 false)
  store %"class.blink::PaintRenderingContext2DSettings"* %7, %"class.blink::PaintRenderingContext2DSettings"** %18, align 8
  %20 = tail call dereferenceable(16) %"class.WTF::Vector.190"* @_ZN3WTF6VectorIN5blink13CSSPropertyIDELj0ENS_18PartitionAllocatorEEaSERKS4_(%"class.WTF::Vector.190"* %15, %"class.WTF::Vector.190"* dereferenceable(16) %4)
  %21 = tail call dereferenceable(16) %"class.WTF::Vector.195"* @_ZN3WTF6VectorINS_12AtomicStringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector.195"* %16, %"class.WTF::Vector.195"* dereferenceable(16) %5)
  %22 = tail call dereferenceable(16) %"class.WTF::Vector.206"* @_ZN3WTF6VectorIN5blink19CSSSyntaxDefinitionELj0ENS_18PartitionAllocatorEEaSERKS4_(%"class.WTF::Vector.206"* %17, %"class.WTF::Vector.206"* dereferenceable(16) %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector.190"* @_ZN3WTF6VectorIN5blink13CSSPropertyIDELj0ENS_18PartitionAllocatorEEaSERKS4_(%"class.WTF::Vector.190"*, %"class.WTF::Vector.190"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector.190"* %1, %0
  br i1 %3, label %90, label %4, !prof !2

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.190", %"class.WTF::Vector.190"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector.190", %"class.WTF::Vector.190"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %4
  store i32 %8, i32* %5, align 4
  br label %60

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.WTF::Vector.190", %"class.WTF::Vector.190"* %0, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp ugt i32 %8, %13
  br i1 %14, label %15, label %60

15:                                               ; preds = %11
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %15
  %18 = icmp eq i32 %6, 0
  br i1 %18, label %20, label %19

19:                                               ; preds = %17
  store i32 0, i32* %5, align 4
  br label %20

20:                                               ; preds = %19, %17
  %21 = bitcast %"class.WTF::Vector.190"* %0 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = bitcast %"class.WTF::Vector.190"* %0 to i64*
  store atomic i64 0, i64* %23 monotonic, align 8
  store i32 0, i32* %12, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %22) #7
  %24 = load i32, i32* %7, align 4
  %25 = load i32, i32* %12, align 8
  br label %26

26:                                               ; preds = %15, %20
  %27 = phi i32 [ 0, %15 ], [ %25, %20 ]
  %28 = phi i32 [ %8, %15 ], [ %24, %20 ]
  %29 = icmp ult i32 %27, %28
  br i1 %29, label %30, label %60, !prof !3

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.WTF::Vector.190", %"class.WTF::Vector.190"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i32*, i32** %31, align 8
  %33 = icmp eq i32* %32, null
  %34 = zext i32 %28 to i64
  %35 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13CSSPropertyIDEEEmm(i64 %34) #7
  %36 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %35, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink13CSSPropertyIDEEEPKcv, i64 0, i64 0)) #7
  br i1 %33, label %37, label %42

37:                                               ; preds = %30
  %38 = ptrtoint i8* %36 to i64
  %39 = bitcast %"class.WTF::Vector.190"* %0 to i64*
  store atomic i64 %38, i64* %39 monotonic, align 8
  %40 = lshr i64 %35, 2
  %41 = trunc i64 %40 to i32
  store i32 %41, i32* %12, align 8
  br label %60

42:                                               ; preds = %30
  %43 = lshr i64 %35, 2
  %44 = ptrtoint i8* %36 to i64
  %45 = load i32*, i32** %31, align 8
  %46 = icmp ne i8* %36, null
  %47 = icmp ne i32* %45, null
  %48 = and i1 %46, %47
  %49 = bitcast i32* %45 to i8*
  br i1 %48, label %50, label %56, !prof !3

50:                                               ; preds = %42
  %51 = load i32, i32* %5, align 4
  %52 = zext i32 %51 to i64
  %53 = shl nuw nsw i64 %52, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %36, i8* nonnull align 4 %49, i64 %53, i1 false) #7
  %54 = bitcast %"class.WTF::Vector.190"* %0 to i8**
  %55 = load i8*, i8** %54, align 8
  br label %56

56:                                               ; preds = %50, %42
  %57 = phi i8* [ %55, %50 ], [ %49, %42 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %57) #7
  %58 = bitcast %"class.WTF::Vector.190"* %0 to i64*
  store atomic i64 %44, i64* %58 monotonic, align 8
  %59 = trunc i64 %43 to i32
  store i32 %59, i32* %12, align 8
  br label %60

60:                                               ; preds = %56, %37, %26, %11, %10
  %61 = getelementptr inbounds %"class.WTF::Vector.190", %"class.WTF::Vector.190"* %1, i64 0, i32 0, i32 0, i32 0
  %62 = bitcast %"class.WTF::Vector.190"* %1 to i8**
  %63 = load i8*, i8** %62, align 8
  %64 = load i32, i32* %5, align 4
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds %"class.WTF::Vector.190", %"class.WTF::Vector.190"* %0, i64 0, i32 0, i32 0, i32 0
  %67 = bitcast %"class.WTF::Vector.190"* %0 to i8**
  %68 = load i8*, i8** %67, align 8
  %69 = shl nuw nsw i64 %65, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %68, i8* align 4 %63, i64 %69, i1 false) #7
  %70 = load i32*, i32** %61, align 8
  %71 = load i32, i32* %5, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i32, i32* %70, i64 %72
  %74 = load i32*, i32** %66, align 8
  %75 = getelementptr inbounds i32, i32* %74, i64 %72
  %76 = icmp ne i32* %75, null
  %77 = icmp ne i32* %73, null
  %78 = and i1 %77, %76
  br i1 %78, label %79, label %88, !prof !3

79:                                               ; preds = %60
  %80 = load i32, i32* %7, align 4
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds i32, i32* %70, i64 %81
  %83 = bitcast i32* %75 to i8*
  %84 = bitcast i32* %73 to i8*
  %85 = ptrtoint i32* %82 to i64
  %86 = ptrtoint i32* %73 to i64
  %87 = sub i64 %85, %86
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %83, i8* nonnull align 4 %84, i64 %87, i1 false) #7
  br label %88

88:                                               ; preds = %60, %79
  %89 = load i32, i32* %7, align 4
  store i32 %89, i32* %5, align 4
  br label %90

90:                                               ; preds = %2, %88
  ret %"class.WTF::Vector.190"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector.195"* @_ZN3WTF6VectorINS_12AtomicStringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector.195"*, %"class.WTF::Vector.195"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector.195"* %1, %0
  br i1 %3, label %219, label %4, !prof !2

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.195", %"class.WTF::Vector.195"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector.195", %"class.WTF::Vector.195"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %39

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.WTF::Vector.195", %"class.WTF::Vector.195"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %11, align 8
  %13 = zext i32 %6 to i64
  %14 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %12, i64 %13
  %15 = zext i32 %8 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %12, i64 %15
  br label %17

17:                                               ; preds = %35, %10
  %18 = phi %"class.WTF::AtomicString"* [ %36, %35 ], [ %16, %10 ]
  %19 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %18, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = and i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  br i1 %26, label %29, label %31

29:                                               ; preds = %22
  %30 = add i32 %28, -1
  store i32 %30, i32* %27, align 4
  br label %31

31:                                               ; preds = %29, %22
  %32 = phi i32 [ %30, %29 ], [ %28, %22 ]
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %20) #7
  br label %35

35:                                               ; preds = %34, %31, %17
  %36 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %18, i64 1
  %37 = icmp eq %"class.WTF::AtomicString"* %36, %14
  br i1 %37, label %38, label %17

38:                                               ; preds = %35
  store i32 %8, i32* %5, align 4
  br label %116

39:                                               ; preds = %4
  %40 = getelementptr inbounds %"class.WTF::Vector.195", %"class.WTF::Vector.195"* %0, i64 0, i32 0, i32 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = icmp ugt i32 %8, %41
  br i1 %42, label %43, label %114

43:                                               ; preds = %39
  %44 = icmp eq i32 %41, 0
  br i1 %44, label %80, label %45

45:                                               ; preds = %43
  %46 = icmp eq i32 %6, 0
  br i1 %46, label %74, label %47

47:                                               ; preds = %45
  %48 = getelementptr inbounds %"class.WTF::Vector.195", %"class.WTF::Vector.195"* %0, i64 0, i32 0, i32 0, i32 0
  %49 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %48, align 8
  %50 = zext i32 %6 to i64
  %51 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %49, i64 %50
  br label %52

52:                                               ; preds = %70, %47
  %53 = phi %"class.WTF::AtomicString"* [ %71, %70 ], [ %49, %47 ]
  %54 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %53, i64 0, i32 0, i32 0, i32 0
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %70, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  br i1 %61, label %64, label %66

64:                                               ; preds = %57
  %65 = add i32 %63, -1
  store i32 %65, i32* %62, align 4
  br label %66

66:                                               ; preds = %64, %57
  %67 = phi i32 [ %65, %64 ], [ %63, %57 ]
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %55) #7
  br label %70

70:                                               ; preds = %69, %66, %52
  %71 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %53, i64 1
  %72 = icmp eq %"class.WTF::AtomicString"* %71, %51
  br i1 %72, label %73, label %52

73:                                               ; preds = %70
  store i32 0, i32* %5, align 4
  br label %74

74:                                               ; preds = %73, %45
  %75 = bitcast %"class.WTF::Vector.195"* %0 to i8**
  %76 = load i8*, i8** %75, align 8
  %77 = bitcast %"class.WTF::Vector.195"* %0 to i64*
  store atomic i64 0, i64* %77 monotonic, align 8
  store i32 0, i32* %40, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %76) #7
  %78 = load i32, i32* %7, align 4
  %79 = load i32, i32* %40, align 8
  br label %80

80:                                               ; preds = %43, %74
  %81 = phi i32 [ 0, %43 ], [ %79, %74 ]
  %82 = phi i32 [ %8, %43 ], [ %78, %74 ]
  %83 = icmp ult i32 %81, %82
  br i1 %83, label %84, label %114, !prof !3

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.WTF::Vector.195", %"class.WTF::Vector.195"* %0, i64 0, i32 0, i32 0, i32 0
  %86 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %85, align 8
  %87 = icmp eq %"class.WTF::AtomicString"* %86, null
  %88 = zext i32 %82 to i64
  %89 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_12AtomicStringEEEmm(i64 %88) #7
  %90 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %89, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv, i64 0, i64 0)) #7
  br i1 %87, label %91, label %96

91:                                               ; preds = %84
  %92 = ptrtoint i8* %90 to i64
  %93 = bitcast %"class.WTF::Vector.195"* %0 to i64*
  store atomic i64 %92, i64* %93 monotonic, align 8
  %94 = lshr i64 %89, 3
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %40, align 8
  br label %114

96:                                               ; preds = %84
  %97 = lshr i64 %89, 3
  %98 = ptrtoint i8* %90 to i64
  %99 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %85, align 8
  %100 = icmp ne i8* %90, null
  %101 = icmp ne %"class.WTF::AtomicString"* %99, null
  %102 = and i1 %100, %101
  %103 = bitcast %"class.WTF::AtomicString"* %99 to i8*
  br i1 %102, label %104, label %110, !prof !3

104:                                              ; preds = %96
  %105 = load i32, i32* %5, align 4
  %106 = zext i32 %105 to i64
  %107 = shl nuw nsw i64 %106, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %90, i8* nonnull align 8 %103, i64 %107, i1 false) #7
  %108 = bitcast %"class.WTF::Vector.195"* %0 to i8**
  %109 = load i8*, i8** %108, align 8
  br label %110

110:                                              ; preds = %104, %96
  %111 = phi i8* [ %109, %104 ], [ %103, %96 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %111) #7
  %112 = bitcast %"class.WTF::Vector.195"* %0 to i64*
  store atomic i64 %98, i64* %112 monotonic, align 8
  %113 = trunc i64 %97 to i32
  store i32 %113, i32* %40, align 8
  br label %114

114:                                              ; preds = %39, %80, %91, %110
  %115 = load i32, i32* %5, align 4
  br label %116

116:                                              ; preds = %114, %38
  %117 = phi i32 [ %115, %114 ], [ %8, %38 ]
  %118 = getelementptr inbounds %"class.WTF::Vector.195", %"class.WTF::Vector.195"* %1, i64 0, i32 0, i32 0, i32 0
  %119 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %118, align 8
  %120 = zext i32 %117 to i64
  %121 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %119, i64 %120
  %122 = getelementptr inbounds %"class.WTF::Vector.195", %"class.WTF::Vector.195"* %0, i64 0, i32 0, i32 0, i32 0
  %123 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %122, align 8
  %124 = icmp eq i32 %117, 0
  br i1 %124, label %175, label %125

125:                                              ; preds = %116, %167
  %126 = phi %"class.WTF::AtomicString"* [ %169, %167 ], [ %123, %116 ]
  %127 = phi %"class.WTF::AtomicString"* [ %168, %167 ], [ %119, %116 ]
  %128 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %127, i64 0, i32 0, i32 0, i32 0
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %128, align 8
  %130 = icmp eq %"class.WTF::StringImpl"* %129, null
  br i1 %130, label %148, label %131

131:                                              ; preds = %125
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %133 = load atomic i32, i32* %132 monotonic, align 4
  %134 = and i32 %133, 2
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %148

136:                                              ; preds = %131
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 0
  %138 = load i32, i32* %137, align 4
  %139 = zext i32 %138 to i33
  %140 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %139, i33 1) #7
  %141 = extractvalue { i33, i1 } %140, 1
  %142 = extractvalue { i33, i1 } %140, 0
  %143 = icmp slt i33 %142, 0
  %144 = or i1 %141, %143
  br i1 %144, label %145, label %146, !prof !2

145:                                              ; preds = %136
  tail call void @llvm.trap() #7
  unreachable

146:                                              ; preds = %136
  %147 = trunc i33 %142 to i32
  store i32 %147, i32* %137, align 4
  br label %148

148:                                              ; preds = %146, %131, %125
  %149 = ptrtoint %"class.WTF::StringImpl"* %129 to i64
  %150 = bitcast %"class.WTF::AtomicString"* %126 to i64*
  %151 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %126, i64 0, i32 0, i32 0, i32 0
  %152 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %151, align 8
  store i64 %149, i64* %150, align 8
  %153 = icmp eq %"class.WTF::StringImpl"* %152, null
  br i1 %153, label %167, label %154

154:                                              ; preds = %148
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = load atomic i32, i32* %155 monotonic, align 4
  %157 = and i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 0
  %160 = load i32, i32* %159, align 4
  br i1 %158, label %161, label %163

161:                                              ; preds = %154
  %162 = add i32 %160, -1
  store i32 %162, i32* %159, align 4
  br label %163

163:                                              ; preds = %161, %154
  %164 = phi i32 [ %162, %161 ], [ %160, %154 ]
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %163
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %152) #7
  br label %167

167:                                              ; preds = %166, %163, %148
  %168 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %127, i64 1
  %169 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %126, i64 1
  %170 = icmp eq %"class.WTF::AtomicString"* %168, %121
  br i1 %170, label %171, label %125

171:                                              ; preds = %167
  %172 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %118, align 8
  %173 = load i32, i32* %5, align 4
  %174 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %122, align 8
  br label %175

175:                                              ; preds = %171, %116
  %176 = phi %"class.WTF::AtomicString"* [ %174, %171 ], [ %123, %116 ]
  %177 = phi i32 [ %173, %171 ], [ 0, %116 ]
  %178 = phi %"class.WTF::AtomicString"* [ %172, %171 ], [ %119, %116 ]
  %179 = zext i32 %177 to i64
  %180 = load i32, i32* %7, align 4
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %178, i64 %181
  %183 = icmp eq i32 %177, %180
  br i1 %183, label %217, label %184

184:                                              ; preds = %175
  %185 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %176, i64 %179
  %186 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %178, i64 %179
  br label %187

187:                                              ; preds = %184, %211
  %188 = phi %"class.WTF::AtomicString"* [ %212, %211 ], [ %185, %184 ]
  %189 = phi %"class.WTF::AtomicString"* [ %213, %211 ], [ %186, %184 ]
  %190 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %189, i64 0, i32 0, i32 0, i32 0
  %191 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %190, align 8
  %192 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %188, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %191, %"class.WTF::StringImpl"** %192, align 8
  %193 = icmp eq %"class.WTF::StringImpl"* %191, null
  br i1 %193, label %211, label %194

194:                                              ; preds = %187
  %195 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %196 = load atomic i32, i32* %195 monotonic, align 4
  %197 = and i32 %196, 2
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %211

199:                                              ; preds = %194
  %200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = zext i32 %201 to i33
  %203 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %202, i33 1) #7
  %204 = extractvalue { i33, i1 } %203, 1
  %205 = extractvalue { i33, i1 } %203, 0
  %206 = icmp slt i33 %205, 0
  %207 = or i1 %204, %206
  br i1 %207, label %208, label %209, !prof !2

208:                                              ; preds = %199
  tail call void @llvm.trap() #7
  unreachable

209:                                              ; preds = %199
  %210 = trunc i33 %205 to i32
  store i32 %210, i32* %200, align 4
  br label %211

211:                                              ; preds = %209, %194, %187
  %212 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %188, i64 1
  %213 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %189, i64 1
  %214 = icmp eq %"class.WTF::AtomicString"* %213, %182
  br i1 %214, label %215, label %187

215:                                              ; preds = %211
  %216 = load i32, i32* %7, align 4
  br label %217

217:                                              ; preds = %215, %175
  %218 = phi i32 [ %216, %215 ], [ %177, %175 ]
  store i32 %218, i32* %5, align 4
  br label %219

219:                                              ; preds = %2, %217
  ret %"class.WTF::Vector.195"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector.206"* @_ZN3WTF6VectorIN5blink19CSSSyntaxDefinitionELj0ENS_18PartitionAllocatorEEaSERKS4_(%"class.WTF::Vector.206"*, %"class.WTF::Vector.206"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector.206"* %1, %0
  br i1 %3, label %187, label %4, !prof !2

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.206", %"class.WTF::Vector.206"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector.206", %"class.WTF::Vector.206"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %60

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.WTF::Vector.206", %"class.WTF::Vector.206"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.blink::CSSSyntaxDefinition"*, %"class.blink::CSSSyntaxDefinition"** %11, align 8
  %13 = zext i32 %6 to i64
  %14 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %12, i64 %13
  %15 = zext i32 %8 to i64
  %16 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %12, i64 %15
  br label %17

17:                                               ; preds = %56, %10
  %18 = phi %"class.blink::CSSSyntaxDefinition"* [ %57, %56 ], [ %16, %10 ]
  %19 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %18, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %19, align 8
  %21 = icmp eq %"class.blink::CSSSyntaxComponent"* %20, null
  br i1 %21, label %56, label %22, !prof !3

22:                                               ; preds = %17
  %23 = bitcast %"class.blink::CSSSyntaxComponent"* %20 to i8*
  %24 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %18, i64 0, i32 0, i32 0, i32 0, i32 2
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %54, label %27, !prof !2

27:                                               ; preds = %22
  %28 = zext i32 %25 to i64
  %29 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %20, i64 %28
  br label %30

30:                                               ; preds = %48, %27
  %31 = phi %"class.blink::CSSSyntaxComponent"* [ %49, %48 ], [ %20, %27 ]
  %32 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %31, i64 0, i32 2, i32 0, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, null
  br i1 %34, label %48, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 0
  %41 = load i32, i32* %40, align 4
  br i1 %39, label %42, label %44

42:                                               ; preds = %35
  %43 = add i32 %41, -1
  store i32 %43, i32* %40, align 4
  br label %44

44:                                               ; preds = %42, %35
  %45 = phi i32 [ %43, %42 ], [ %41, %35 ]
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %44
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %33) #7
  br label %48

48:                                               ; preds = %47, %44, %30
  %49 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %31, i64 1
  %50 = icmp eq %"class.blink::CSSSyntaxComponent"* %49, %29
  br i1 %50, label %51, label %30

51:                                               ; preds = %48
  store i32 0, i32* %24, align 4
  %52 = bitcast %"class.blink::CSSSyntaxDefinition"* %18 to i8**
  %53 = load i8*, i8** %52, align 8
  br label %54

54:                                               ; preds = %51, %22
  %55 = phi i8* [ %53, %51 ], [ %23, %22 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %55) #7
  store %"class.blink::CSSSyntaxComponent"* null, %"class.blink::CSSSyntaxComponent"** %19, align 8
  br label %56

56:                                               ; preds = %54, %17
  %57 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %18, i64 1
  %58 = icmp eq %"class.blink::CSSSyntaxDefinition"* %57, %14
  br i1 %58, label %59, label %17

59:                                               ; preds = %56
  store i32 %8, i32* %5, align 4
  br label %141

60:                                               ; preds = %4
  %61 = getelementptr inbounds %"class.WTF::Vector.206", %"class.WTF::Vector.206"* %0, i64 0, i32 0, i32 0, i32 1
  %62 = load i32, i32* %61, align 8
  %63 = icmp ugt i32 %8, %62
  br i1 %63, label %64, label %139

64:                                               ; preds = %60
  %65 = icmp eq i32 %62, 0
  br i1 %65, label %122, label %66

66:                                               ; preds = %64
  %67 = icmp eq i32 %6, 0
  br i1 %67, label %116, label %68

68:                                               ; preds = %66
  %69 = getelementptr inbounds %"class.WTF::Vector.206", %"class.WTF::Vector.206"* %0, i64 0, i32 0, i32 0, i32 0
  %70 = load %"class.blink::CSSSyntaxDefinition"*, %"class.blink::CSSSyntaxDefinition"** %69, align 8
  %71 = zext i32 %6 to i64
  %72 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %70, i64 %71
  br label %73

73:                                               ; preds = %112, %68
  %74 = phi %"class.blink::CSSSyntaxDefinition"* [ %113, %112 ], [ %70, %68 ]
  %75 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %74, i64 0, i32 0, i32 0, i32 0, i32 0
  %76 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %75, align 8
  %77 = icmp eq %"class.blink::CSSSyntaxComponent"* %76, null
  br i1 %77, label %112, label %78, !prof !3

78:                                               ; preds = %73
  %79 = bitcast %"class.blink::CSSSyntaxComponent"* %76 to i8*
  %80 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %74, i64 0, i32 0, i32 0, i32 0, i32 2
  %81 = load i32, i32* %80, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %110, label %83, !prof !2

83:                                               ; preds = %78
  %84 = zext i32 %81 to i64
  %85 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %76, i64 %84
  br label %86

86:                                               ; preds = %104, %83
  %87 = phi %"class.blink::CSSSyntaxComponent"* [ %105, %104 ], [ %76, %83 ]
  %88 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %87, i64 0, i32 2, i32 0, i32 0
  %89 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %88, align 8
  %90 = icmp eq %"class.WTF::StringImpl"* %89, null
  br i1 %90, label %104, label %91

91:                                               ; preds = %86
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %93 = load atomic i32, i32* %92 monotonic, align 4
  %94 = and i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 0
  %97 = load i32, i32* %96, align 4
  br i1 %95, label %98, label %100

98:                                               ; preds = %91
  %99 = add i32 %97, -1
  store i32 %99, i32* %96, align 4
  br label %100

100:                                              ; preds = %98, %91
  %101 = phi i32 [ %99, %98 ], [ %97, %91 ]
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %104

103:                                              ; preds = %100
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %89) #7
  br label %104

104:                                              ; preds = %103, %100, %86
  %105 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %87, i64 1
  %106 = icmp eq %"class.blink::CSSSyntaxComponent"* %105, %85
  br i1 %106, label %107, label %86

107:                                              ; preds = %104
  store i32 0, i32* %80, align 4
  %108 = bitcast %"class.blink::CSSSyntaxDefinition"* %74 to i8**
  %109 = load i8*, i8** %108, align 8
  br label %110

110:                                              ; preds = %107, %78
  %111 = phi i8* [ %109, %107 ], [ %79, %78 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %111) #7
  store %"class.blink::CSSSyntaxComponent"* null, %"class.blink::CSSSyntaxComponent"** %75, align 8
  br label %112

112:                                              ; preds = %110, %73
  %113 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %74, i64 1
  %114 = icmp eq %"class.blink::CSSSyntaxDefinition"* %113, %72
  br i1 %114, label %115, label %73

115:                                              ; preds = %112
  store i32 0, i32* %5, align 4
  br label %116

116:                                              ; preds = %115, %66
  %117 = bitcast %"class.WTF::Vector.206"* %0 to i8**
  %118 = load i8*, i8** %117, align 8
  %119 = bitcast %"class.WTF::Vector.206"* %0 to i64*
  store atomic i64 0, i64* %119 monotonic, align 8
  store i32 0, i32* %61, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %118) #7
  %120 = load i32, i32* %7, align 4
  %121 = load i32, i32* %61, align 8
  br label %122

122:                                              ; preds = %64, %116
  %123 = phi i32 [ 0, %64 ], [ %121, %116 ]
  %124 = phi i32 [ %8, %64 ], [ %120, %116 ]
  %125 = icmp ult i32 %123, %124
  br i1 %125, label %126, label %139, !prof !3

126:                                              ; preds = %122
  %127 = getelementptr inbounds %"class.WTF::Vector.206", %"class.WTF::Vector.206"* %0, i64 0, i32 0, i32 0, i32 0
  %128 = load %"class.blink::CSSSyntaxDefinition"*, %"class.blink::CSSSyntaxDefinition"** %127, align 8
  %129 = icmp eq %"class.blink::CSSSyntaxDefinition"* %128, null
  br i1 %129, label %130, label %138

130:                                              ; preds = %126
  %131 = zext i32 %124 to i64
  %132 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink19CSSSyntaxDefinitionEEEmm(i64 %131) #7
  %133 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %132, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink19CSSSyntaxDefinitionEEEPKcv, i64 0, i64 0)) #7
  %134 = ptrtoint i8* %133 to i64
  %135 = bitcast %"class.WTF::Vector.206"* %0 to i64*
  store atomic i64 %134, i64* %135 monotonic, align 8
  %136 = lshr i64 %132, 4
  %137 = trunc i64 %136 to i32
  store i32 %137, i32* %61, align 8
  br label %139

138:                                              ; preds = %126
  tail call void @_ZN3WTF6VectorIN5blink19CSSSyntaxDefinitionELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.206"* %0, i32 %124) #7
  br label %139

139:                                              ; preds = %60, %122, %130, %138
  %140 = load i32, i32* %5, align 4
  br label %141

141:                                              ; preds = %139, %59
  %142 = phi i32 [ %140, %139 ], [ %8, %59 ]
  %143 = getelementptr inbounds %"class.WTF::Vector.206", %"class.WTF::Vector.206"* %1, i64 0, i32 0, i32 0, i32 0
  %144 = load %"class.blink::CSSSyntaxDefinition"*, %"class.blink::CSSSyntaxDefinition"** %143, align 8
  %145 = zext i32 %142 to i64
  %146 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %144, i64 %145
  %147 = getelementptr inbounds %"class.WTF::Vector.206", %"class.WTF::Vector.206"* %0, i64 0, i32 0, i32 0, i32 0
  %148 = load %"class.blink::CSSSyntaxDefinition"*, %"class.blink::CSSSyntaxDefinition"** %147, align 8
  %149 = icmp eq i32 %142, 0
  br i1 %149, label %163, label %150

150:                                              ; preds = %141, %150
  %151 = phi %"class.blink::CSSSyntaxDefinition"* [ %157, %150 ], [ %148, %141 ]
  %152 = phi %"class.blink::CSSSyntaxDefinition"* [ %156, %150 ], [ %144, %141 ]
  %153 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %151, i64 0, i32 0
  %154 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %152, i64 0, i32 0
  %155 = tail call dereferenceable(16) %"class.WTF::Vector.209"* @_ZN3WTF6VectorIN5blink18CSSSyntaxComponentELj0ENS_18PartitionAllocatorEEaSERKS4_(%"class.WTF::Vector.209"* %153, %"class.WTF::Vector.209"* dereferenceable(16) %154) #7
  %156 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %152, i64 1
  %157 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %151, i64 1
  %158 = icmp eq %"class.blink::CSSSyntaxDefinition"* %156, %146
  br i1 %158, label %159, label %150

159:                                              ; preds = %150
  %160 = load %"class.blink::CSSSyntaxDefinition"*, %"class.blink::CSSSyntaxDefinition"** %143, align 8
  %161 = load i32, i32* %5, align 4
  %162 = load %"class.blink::CSSSyntaxDefinition"*, %"class.blink::CSSSyntaxDefinition"** %147, align 8
  br label %163

163:                                              ; preds = %159, %141
  %164 = phi %"class.blink::CSSSyntaxDefinition"* [ %162, %159 ], [ %148, %141 ]
  %165 = phi i32 [ %161, %159 ], [ 0, %141 ]
  %166 = phi %"class.blink::CSSSyntaxDefinition"* [ %160, %159 ], [ %144, %141 ]
  %167 = zext i32 %165 to i64
  %168 = load i32, i32* %7, align 4
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %166, i64 %169
  %171 = icmp eq i32 %165, %168
  br i1 %171, label %185, label %172

172:                                              ; preds = %163
  %173 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %164, i64 %167
  %174 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %166, i64 %167
  br label %175

175:                                              ; preds = %172, %175
  %176 = phi %"class.blink::CSSSyntaxDefinition"* [ %180, %175 ], [ %173, %172 ]
  %177 = phi %"class.blink::CSSSyntaxDefinition"* [ %181, %175 ], [ %174, %172 ]
  %178 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %176, i64 0, i32 0
  %179 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %177, i64 0, i32 0
  tail call void @_ZN3WTF6VectorIN5blink18CSSSyntaxComponentELj0ENS_18PartitionAllocatorEEC2ERKS4_(%"class.WTF::Vector.209"* %178, %"class.WTF::Vector.209"* dereferenceable(16) %179) #7
  %180 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %176, i64 1
  %181 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %177, i64 1
  %182 = icmp eq %"class.blink::CSSSyntaxDefinition"* %181, %170
  br i1 %182, label %183, label %175

183:                                              ; preds = %175
  %184 = load i32, i32* %7, align 4
  br label %185

185:                                              ; preds = %183, %163
  %186 = phi i32 [ %184, %183 ], [ %165, %163 ]
  store i32 %186, i32* %5, align 4
  br label %187

187:                                              ; preds = %2, %185
  ret %"class.WTF::Vector.206"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink18CSSPaintDefinitionD2Ev(%"class.blink::CSSPaintDefinition"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink18CSSPaintDefinitionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 8
  %4 = getelementptr inbounds %"class.WTF::Vector.206", %"class.WTF::Vector.206"* %3, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.blink::CSSSyntaxDefinition"*, %"class.blink::CSSSyntaxDefinition"** %4, align 8
  %6 = icmp eq %"class.blink::CSSSyntaxDefinition"* %5, null
  br i1 %6, label %62, label %7, !prof !3

7:                                                ; preds = %1
  %8 = bitcast %"class.blink::CSSSyntaxDefinition"* %5 to i8*
  %9 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 8, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %60, label %12, !prof !2

12:                                               ; preds = %7
  %13 = zext i32 %10 to i64
  %14 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %5, i64 %13
  br label %15

15:                                               ; preds = %12, %54
  %16 = phi %"class.blink::CSSSyntaxDefinition"* [ %55, %54 ], [ %5, %12 ]
  %17 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %16, i64 0, i32 0, i32 0, i32 0, i32 0
  %18 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %17, align 8
  %19 = icmp eq %"class.blink::CSSSyntaxComponent"* %18, null
  br i1 %19, label %54, label %20, !prof !3

20:                                               ; preds = %15
  %21 = bitcast %"class.blink::CSSSyntaxComponent"* %18 to i8*
  %22 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %16, i64 0, i32 0, i32 0, i32 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %52, label %25, !prof !2

25:                                               ; preds = %20
  %26 = zext i32 %23 to i64
  %27 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %18, i64 %26
  br label %28

28:                                               ; preds = %46, %25
  %29 = phi %"class.blink::CSSSyntaxComponent"* [ %47, %46 ], [ %18, %25 ]
  %30 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %29, i64 0, i32 2, i32 0, i32 0
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  %32 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %32, label %46, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = and i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  br i1 %37, label %40, label %42

40:                                               ; preds = %33
  %41 = add i32 %39, -1
  store i32 %41, i32* %38, align 4
  br label %42

42:                                               ; preds = %40, %33
  %43 = phi i32 [ %41, %40 ], [ %39, %33 ]
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %42
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %31) #7
  br label %46

46:                                               ; preds = %45, %42, %28
  %47 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %29, i64 1
  %48 = icmp eq %"class.blink::CSSSyntaxComponent"* %47, %27
  br i1 %48, label %49, label %28

49:                                               ; preds = %46
  store i32 0, i32* %22, align 4
  %50 = bitcast %"class.blink::CSSSyntaxDefinition"* %16 to i8**
  %51 = load i8*, i8** %50, align 8
  br label %52

52:                                               ; preds = %49, %20
  %53 = phi i8* [ %51, %49 ], [ %21, %20 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %53) #7
  store %"class.blink::CSSSyntaxComponent"* null, %"class.blink::CSSSyntaxComponent"** %17, align 8
  br label %54

54:                                               ; preds = %52, %15
  %55 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %16, i64 1
  %56 = icmp eq %"class.blink::CSSSyntaxDefinition"* %55, %14
  br i1 %56, label %57, label %15

57:                                               ; preds = %54
  store i32 0, i32* %9, align 4
  %58 = bitcast %"class.WTF::Vector.206"* %3 to i8**
  %59 = load i8*, i8** %58, align 8
  br label %60

60:                                               ; preds = %57, %7
  %61 = phi i8* [ %59, %57 ], [ %8, %7 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %61) #7
  store %"class.blink::CSSSyntaxDefinition"* null, %"class.blink::CSSSyntaxDefinition"** %4, align 8
  br label %62

62:                                               ; preds = %1, %60
  %63 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 7
  %64 = getelementptr inbounds %"class.WTF::Vector.195", %"class.WTF::Vector.195"* %63, i64 0, i32 0, i32 0, i32 0
  %65 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %64, align 8
  %66 = icmp eq %"class.WTF::AtomicString"* %65, null
  br i1 %66, label %101, label %67, !prof !3

67:                                               ; preds = %62
  %68 = bitcast %"class.WTF::AtomicString"* %65 to i8*
  %69 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 7, i32 0, i32 0, i32 2
  %70 = load i32, i32* %69, align 4
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %99, label %72, !prof !2

72:                                               ; preds = %67
  %73 = zext i32 %70 to i64
  %74 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %65, i64 %73
  br label %75

75:                                               ; preds = %93, %72
  %76 = phi %"class.WTF::AtomicString"* [ %94, %93 ], [ %65, %72 ]
  %77 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %76, i64 0, i32 0, i32 0, i32 0
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %77, align 8
  %79 = icmp eq %"class.WTF::StringImpl"* %78, null
  br i1 %79, label %93, label %80

80:                                               ; preds = %75
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = and i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %86 = load i32, i32* %85, align 4
  br i1 %84, label %87, label %89

87:                                               ; preds = %80
  %88 = add i32 %86, -1
  store i32 %88, i32* %85, align 4
  br label %89

89:                                               ; preds = %87, %80
  %90 = phi i32 [ %88, %87 ], [ %86, %80 ]
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %78) #7
  br label %93

93:                                               ; preds = %92, %89, %75
  %94 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %76, i64 1
  %95 = icmp eq %"class.WTF::AtomicString"* %94, %74
  br i1 %95, label %96, label %75

96:                                               ; preds = %93
  store i32 0, i32* %69, align 4
  %97 = bitcast %"class.WTF::Vector.195"* %63 to i8**
  %98 = load i8*, i8** %97, align 8
  br label %99

99:                                               ; preds = %96, %67
  %100 = phi i8* [ %98, %96 ], [ %68, %67 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %100) #7
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %64, align 8
  br label %101

101:                                              ; preds = %62, %99
  %102 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %103 = load i32*, i32** %102, align 8
  %104 = icmp eq i32* %103, null
  %105 = bitcast i32* %103 to i8*
  br i1 %104, label %112, label %106, !prof !3

106:                                              ; preds = %101
  %107 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 6, i32 0, i32 0, i32 2
  %108 = load i32, i32* %107, align 4
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %111, label %110, !prof !2

110:                                              ; preds = %106
  store i32 0, i32* %107, align 4
  br label %111

111:                                              ; preds = %110, %106
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %105) #7
  store i32* null, i32** %102, align 8
  br label %112

112:                                              ; preds = %101, %111
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink18CSSPaintDefinitionD0Ev(%"class.blink::CSSPaintDefinition"* nocapture) unnamed_addr #0 align 2 {
  tail call void @_ZN5blink18CSSPaintDefinitionD2Ev(%"class.blink::CSSPaintDefinition"* %0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink18CSSPaintDefinition5PaintERKNS_9FloatSizeEfPNS_24StylePropertyMapReadOnlyEPKNS_10HeapVectorINS_6MemberINS_13CSSStyleValueEEELj0EEEf(%class.sk_sp* noalias sret, %"class.blink::CSSPaintDefinition"*, %"class.blink::FloatSize"* nocapture readonly dereferenceable(8), float, %"class.blink::StylePropertyMapReadOnly"*, %"class.blink::HeapVector"*, float) local_unnamed_addr #1 align 2 {
  %8 = alloca %"class.blink::ScriptState::Scope", align 8
  %9 = alloca i64, align 8
  %10 = alloca %"class.blink::HeapVector", align 8
  %11 = alloca %"class.v8::TryCatch", align 8
  %12 = fdiv float 1.000000e+00, %3
  %13 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %2, i64 0, i32 0
  %14 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %2, i64 0, i32 1
  %15 = bitcast %"class.blink::FloatSize"* %2 to <2 x float>*
  %16 = load <2 x float>, <2 x float>* %15, align 4
  %17 = insertelement <2 x float> undef, float %12, i32 0
  %18 = shufflevector <2 x float> %17, <2 x float> undef, <2 x i32> zeroinitializer
  %19 = fmul <2 x float> %18, %16
  %20 = bitcast %"class.blink::ScriptState::Scope"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #7
  %21 = getelementptr inbounds %"class.blink::ScriptState::Scope", %"class.blink::ScriptState::Scope"* %8, i64 0, i32 1, i32 0
  %22 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %1, i64 0, i32 1, i32 0, i32 0
  %23 = bitcast %"class.blink::ScriptState::Scope"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 32, i1 false)
  %24 = load %"class.blink::ScriptState"*, %"class.blink::ScriptState"** %22, align 8
  %25 = getelementptr inbounds %"class.blink::ScriptState::Scope", %"class.blink::ScriptState::Scope"* %8, i64 0, i32 0
  %26 = getelementptr inbounds %"class.blink::ScriptState", %"class.blink::ScriptState"* %24, i64 0, i32 0
  %27 = load %"class.v8::Isolate"*, %"class.v8::Isolate"** %26, align 8
  call void @_ZN2v811HandleScopeC1EPNS_7IsolateE(%"class.v8::HandleScope"* nonnull %25, %"class.v8::Isolate"* %27) #7
  %28 = getelementptr inbounds %"class.blink::ScriptState", %"class.blink::ScriptState"* %24, i64 0, i32 1, i32 0, i32 0, i32 0
  %29 = load %"class.v8::Context"*, %"class.v8::Context"** %28, align 8
  %30 = icmp eq %"class.v8::Context"* %29, null
  br i1 %30, label %38, label %31

31:                                               ; preds = %7
  %32 = bitcast %"class.blink::ScriptState"* %24 to %"class.v8::internal::Isolate"**
  %33 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %32, align 8
  %34 = bitcast %"class.v8::Context"* %29 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %33, i64 %35) #7
  %37 = bitcast i64* %36 to %"class.v8::Context"*
  br label %38

38:                                               ; preds = %7, %31
  %39 = phi %"class.v8::Context"* [ %37, %31 ], [ null, %7 ]
  store %"class.v8::Context"* %39, %"class.v8::Context"** %21, align 8
  call void @_ZN2v87Context5EnterEv(%"class.v8::Context"* %39) #7
  call void @_ZN5blink18CSSPaintDefinition24MaybeCreatePaintInstanceEv(%"class.blink::CSSPaintDefinition"* %1)
  %40 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %1, i64 0, i32 4
  %41 = getelementptr inbounds %"class.blink::TraceWrapperV8Reference.187", %"class.blink::TraceWrapperV8Reference.187"* %40, i64 0, i32 0, i32 0, i32 0, i32 0
  %42 = load i64*, i64** %41, align 8
  %43 = icmp eq i64* %42, null
  br i1 %43, label %44, label %46

44:                                               ; preds = %38
  %45 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  store %"class.cc::PaintOpBuffer"* null, %"class.cc::PaintOpBuffer"** %45, align 8
  br label %118

46:                                               ; preds = %38
  %47 = bitcast i64* %9 to %"class.blink::IntSize"*
  %48 = load %"class.blink::ScriptState"*, %"class.blink::ScriptState"** %22, align 8
  %49 = getelementptr inbounds %"class.blink::ScriptState", %"class.blink::ScriptState"* %48, i64 0, i32 0
  %50 = load %"class.v8::Isolate"*, %"class.v8::Isolate"** %49, align 8
  %51 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #7
  %52 = load float, float* %13, align 4
  %53 = call float @llvm.round.f32(float %52) #7
  %54 = fpext float %53 to double
  %55 = fcmp ult double %54, 0x41DFFFFFFFC00000
  br i1 %55, label %56, label %61

56:                                               ; preds = %46
  %57 = fcmp ugt float %53, 0xC1E0000000000000
  br i1 %57, label %58, label %61

58:                                               ; preds = %56
  %59 = fptosi float %53 to i32
  %60 = zext i32 %59 to i64
  br label %61

61:                                               ; preds = %58, %56, %46
  %62 = phi i64 [ %60, %58 ], [ 2147483647, %46 ], [ 2147483648, %56 ]
  %63 = load float, float* %14, align 4
  %64 = call float @llvm.round.f32(float %63) #7
  %65 = fpext float %64 to double
  %66 = fcmp ult double %65, 0x41DFFFFFFFC00000
  br i1 %66, label %67, label %73

67:                                               ; preds = %61
  %68 = fcmp ugt float %64, 0xC1E0000000000000
  br i1 %68, label %69, label %73

69:                                               ; preds = %67
  %70 = fptosi float %64 to i32
  %71 = zext i32 %70 to i64
  %72 = shl nuw i64 %71, 32
  br label %73

73:                                               ; preds = %61, %67, %69
  %74 = phi i64 [ %72, %69 ], [ 9223372032559808512, %61 ], [ -9223372036854775808, %67 ]
  %75 = or i64 %74, %62
  store i64 %75, i64* %9, align 8
  %76 = call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 232) #7
  %77 = bitcast i8* %76 to %"class.blink::PaintRenderingContext2D"*
  %78 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %1, i64 0, i32 9, i32 0, i32 0
  %79 = load %"class.blink::PaintRenderingContext2DSettings"*, %"class.blink::PaintRenderingContext2DSettings"** %78, align 8
  call void @_ZN5blink23PaintRenderingContext2DC1ERKNS_7IntSizeEPKNS_31PaintRenderingContext2DSettingsEff(%"class.blink::PaintRenderingContext2D"* %77, %"class.blink::IntSize"* nonnull dereferenceable(8) %47, %"class.blink::PaintRenderingContext2DSettings"* %79, float %3, float %6) #7
  %80 = getelementptr inbounds i8, i8* %76, i64 -4
  %81 = bitcast i8* %80 to i16*
  %82 = load atomic i16, i16* %81 monotonic, align 2
  %83 = or i16 %82, 1
  store atomic i16 %83, i16* %81 release, align 2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #7
  %84 = call i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64 24) #7
  %85 = bitcast i8* %84 to %"class.blink::PaintSize"*
  %86 = bitcast i8* %84 to i32 (...)***
  %87 = getelementptr inbounds i8, i8* %84, i64 8
  %88 = bitcast i8* %87 to i64**
  store i64* null, i64** %88, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink9PaintSizeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %86, align 8
  %89 = getelementptr inbounds i8, i8* %84, i64 16
  %90 = bitcast i8* %89 to <2 x float>*
  store <2 x float> %19, <2 x float>* %90, align 8
  %91 = getelementptr inbounds i8, i8* %84, i64 -4
  %92 = bitcast i8* %91 to i16*
  %93 = load atomic i16, i16* %92 monotonic, align 2
  %94 = or i16 %93, 1
  store atomic i16 %94, i16* %92 release, align 2
  %95 = bitcast %"class.blink::HeapVector"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %95) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %95, i8 0, i64 16, i1 false) #7
  %96 = icmp eq %"class.blink::HeapVector"* %5, null
  %97 = select i1 %96, %"class.blink::HeapVector"* %10, %"class.blink::HeapVector"* %5
  %98 = bitcast %"class.v8::TryCatch"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %98) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %98, i8 -86, i64 48, i1 false)
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %11, %"class.v8::Isolate"* %50) #7
  call void @_ZN2v88TryCatch10SetVerboseEb(%"class.v8::TryCatch"* nonnull %11, i1 zeroext true) #7
  %99 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %1, i64 0, i32 3, i32 0, i32 0
  %100 = load %"class.blink::V8PaintCallback"*, %"class.blink::V8PaintCallback"** %99, align 8
  %101 = bitcast %"class.blink::TraceWrapperV8Reference.187"* %40 to %"class.v8::Value"**
  %102 = load %"class.v8::Value"*, %"class.v8::Value"** %101, align 8
  %103 = icmp eq %"class.v8::Value"* %102, null
  br i1 %103, label %110, label %104

104:                                              ; preds = %73
  %105 = bitcast %"class.v8::Value"* %102 to i64*
  %106 = bitcast %"class.v8::Isolate"* %50 to %"class.v8::internal::Isolate"*
  %107 = load i64, i64* %105, align 8
  %108 = call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %106, i64 %107) #7
  %109 = bitcast i64* %108 to %"class.v8::Value"*
  br label %110

110:                                              ; preds = %73, %104
  %111 = phi %"class.v8::Value"* [ %109, %104 ], [ null, %73 ]
  %112 = call i8 @_ZN5blink15V8PaintCallback6InvokeENS_8bindings31V8ValueOrScriptWrappableAdapterEPNS_23PaintRenderingContext2DEPNS_9PaintSizeEPNS_24StylePropertyMapReadOnlyERKNS_10HeapVectorINS_6MemberINS_13CSSStyleValueEEELj0EEE(%"class.blink::V8PaintCallback"* %100, %"class.v8::Value"* %111, %"class.blink::ScriptWrappable"* null, %"class.blink::PaintRenderingContext2D"* %77, %"class.blink::PaintSize"* %85, %"class.blink::StylePropertyMapReadOnly"* %4, %"class.blink::HeapVector"* dereferenceable(16) %97) #7
  %113 = icmp eq i8 %112, 0
  br i1 %113, label %114, label %116

114:                                              ; preds = %110
  %115 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  store %"class.cc::PaintOpBuffer"* null, %"class.cc::PaintOpBuffer"** %115, align 8
  br label %117

116:                                              ; preds = %110
  call void @_ZN5blink23PaintRenderingContext2D9GetRecordEv(%class.sk_sp* sret %0, %"class.blink::PaintRenderingContext2D"* %77) #7
  br label %117

117:                                              ; preds = %116, %114
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %98) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %95) #7
  br label %118

118:                                              ; preds = %117, %44
  %119 = load %"class.v8::Context"*, %"class.v8::Context"** %21, align 8
  call void @_ZN2v87Context4ExitEv(%"class.v8::Context"* %119) #7
  call void @_ZN2v811HandleScopeD1Ev(%"class.v8::HandleScope"* nonnull %25) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink18CSSPaintDefinition24MaybeCreatePaintInstanceEv(%"class.blink::CSSPaintDefinition"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.blink::ScriptValue", align 8
  %3 = alloca %"class.v8::Maybe.452", align 8
  %4 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 5
  %5 = load i8, i8* %4, align 8, !range !4
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %70

7:                                                ; preds = %1
  store i8 1, i8* %4, align 8
  %8 = bitcast %"class.blink::ScriptValue"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #7
  %9 = getelementptr inbounds %"class.blink::ScriptValue", %"class.blink::ScriptValue"* %2, i64 0, i32 1, i32 1, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #7
  %10 = getelementptr inbounds %"class.v8::Maybe.452", %"class.v8::Maybe.452"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #7
  %11 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 2, i32 0, i32 0
  %12 = load %"class.blink::V8NoArgumentConstructor"*, %"class.blink::V8NoArgumentConstructor"** %11, align 8
  call void @_ZN5blink23V8NoArgumentConstructor9ConstructEv(%"class.v8::Maybe.452"* nonnull sret %3, %"class.blink::V8NoArgumentConstructor"* %12) #7
  %13 = load i8, i8* %10, align 8, !range !4
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %25, label %15, !prof !2

15:                                               ; preds = %7
  %16 = getelementptr inbounds %"class.v8::Maybe.452", %"class.v8::Maybe.452"* %3, i64 0, i32 1
  %17 = bitcast %"class.blink::ScriptValue"* %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.blink::ScriptValue"* %2 to i64*
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %"class.blink::ScriptValue", %"class.blink::ScriptValue"* %2, i64 0, i32 1
  %21 = getelementptr inbounds %"class.v8::Maybe.452", %"class.v8::Maybe.452"* %3, i64 0, i32 1, i32 1
  %22 = call dereferenceable(16) %"class.blink::WorldSafeV8Reference"* @_ZN5blink20WorldSafeV8ReferenceIN2v85ValueEEaSERKS3_(%"class.blink::WorldSafeV8Reference"* %20, %"class.blink::WorldSafeV8Reference"* dereferenceable(16) %21) #7
  %23 = load i8, i8* %10, align 8, !range !4
  %24 = icmp ne i8 %23, 0
  br label %25

25:                                               ; preds = %7, %15
  %26 = phi i1 [ false, %7 ], [ %24, %15 ]
  %27 = getelementptr inbounds %"class.v8::Maybe.452", %"class.v8::Maybe.452"* %3, i64 0, i32 1, i32 1, i32 1, i32 0
  %28 = load %"class.blink::DOMWrapperWorld"*, %"class.blink::DOMWrapperWorld"** %27, align 8
  %29 = icmp eq %"class.blink::DOMWrapperWorld"* %28, null
  br i1 %29, label %37, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.blink::DOMWrapperWorld", %"class.blink::DOMWrapperWorld"* %28, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %31) #7
  %32 = getelementptr inbounds %"class.blink::DOMWrapperWorld", %"class.blink::DOMWrapperWorld"* %28, i64 0, i32 0, i32 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  call void @_ZN5blink15DOMWrapperWorldD1Ev(%"class.blink::DOMWrapperWorld"* nonnull %28) #7
  %36 = bitcast %"class.blink::DOMWrapperWorld"* %28 to i8*
  call void @free(i8* %36) #7
  br label %37

37:                                               ; preds = %25, %30, %35
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #7
  br i1 %26, label %38, label %59

38:                                               ; preds = %37
  %39 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 4
  %40 = load %"class.blink::V8NoArgumentConstructor"*, %"class.blink::V8NoArgumentConstructor"** %11, align 8
  %41 = getelementptr inbounds %"class.blink::V8NoArgumentConstructor", %"class.blink::V8NoArgumentConstructor"* %40, i64 0, i32 0, i32 3, i32 0, i32 0
  %42 = bitcast %"class.blink::ScriptState"** %41 to %"class.v8::internal::Isolate"***
  %43 = load %"class.v8::internal::Isolate"**, %"class.v8::internal::Isolate"*** %42, align 8
  %44 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %43, align 8
  %45 = call %"class.v8::Value"* @_ZNK5blink11ScriptValue7V8ValueEv(%"class.blink::ScriptValue"* nonnull %2) #7
  %46 = getelementptr inbounds %"class.blink::TraceWrapperV8Reference.187", %"class.blink::TraceWrapperV8Reference.187"* %39, i64 0, i32 0, i32 0, i32 0, i32 0
  %47 = load i64*, i64** %46, align 8
  %48 = icmp eq i64* %47, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %38
  call void @_ZN2v82V819DisposeTracedGlobalEPm(i64* nonnull %47) #7
  %50 = bitcast %"class.blink::TraceWrapperV8Reference.187"* %39 to i64*
  store atomic i64 0, i64* %50 monotonic, align 8
  br label %51

51:                                               ; preds = %49, %38
  %52 = icmp eq %"class.v8::Value"* %45, null
  br i1 %52, label %58, label %53

53:                                               ; preds = %51
  %54 = bitcast %"class.v8::Value"* %45 to i64*
  %55 = bitcast %"class.blink::TraceWrapperV8Reference.187"* %39 to i64*
  %56 = call i64* @_ZN2v82V824GlobalizeTracedReferenceEPNS_8internal7IsolateEPmS4_b(%"class.v8::internal::Isolate"* %44, i64* nonnull %54, i64* %55, i1 zeroext false) #7
  %57 = ptrtoint i64* %56 to i64
  store atomic i64 %57, i64* %55 monotonic, align 8
  br label %58

58:                                               ; preds = %51, %53
  call void @_ZN5blink25UnifiedHeapMarkingVisitor12WriteBarrierERKNS_23TraceWrapperV8ReferenceIN2v85ValueEEE(%"class.blink::TraceWrapperV8Reference.187"* dereferenceable(8) %39) #7
  br label %59

59:                                               ; preds = %37, %58
  %60 = load %"class.blink::DOMWrapperWorld"*, %"class.blink::DOMWrapperWorld"** %9, align 8
  %61 = icmp eq %"class.blink::DOMWrapperWorld"* %60, null
  br i1 %61, label %69, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds %"class.blink::DOMWrapperWorld", %"class.blink::DOMWrapperWorld"* %60, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %63) #7
  %64 = getelementptr inbounds %"class.blink::DOMWrapperWorld", %"class.blink::DOMWrapperWorld"* %60, i64 0, i32 0, i32 0, i32 0, i32 0
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %69

67:                                               ; preds = %62
  call void @_ZN5blink15DOMWrapperWorldD1Ev(%"class.blink::DOMWrapperWorld"* nonnull %60) #7
  %68 = bitcast %"class.blink::DOMWrapperWorld"* %60 to i8*
  call void @free(i8* %68) #7
  br label %69

69:                                               ; preds = %59, %62, %67
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #7
  br label %70

70:                                               ; preds = %1, %69
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"*, %"class.v8::Isolate"*) unnamed_addr #3

declare void @_ZN2v88TryCatch10SetVerboseEb(%"class.v8::TryCatch"*, i1 zeroext) local_unnamed_addr #3

declare i8 @_ZN5blink15V8PaintCallback6InvokeENS_8bindings31V8ValueOrScriptWrappableAdapterEPNS_23PaintRenderingContext2DEPNS_9PaintSizeEPNS_24StylePropertyMapReadOnlyERKNS_10HeapVectorINS_6MemberINS_13CSSStyleValueEEELj0EEE(%"class.blink::V8PaintCallback"*, %"class.v8::Value"*, %"class.blink::ScriptWrappable"*, %"class.blink::PaintRenderingContext2D"*, %"class.blink::PaintSize"*, %"class.blink::StylePropertyMapReadOnly"*, %"class.blink::HeapVector"* dereferenceable(16)) local_unnamed_addr #3

declare void @_ZN5blink23PaintRenderingContext2D9GetRecordEv(%class.sk_sp* sret, %"class.blink::PaintRenderingContext2D"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"*) unnamed_addr #4

declare void @_ZN5blink23V8NoArgumentConstructor9ConstructEv(%"class.v8::Maybe.452"* sret, %"class.blink::V8NoArgumentConstructor"*) local_unnamed_addr #3

declare %"class.v8::Value"* @_ZNK5blink11ScriptValue7V8ValueEv(%"class.blink::ScriptValue"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink18CSSPaintDefinition5TraceEPNS_7VisitorE(%"class.blink::CSSPaintDefinition"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 2
  %4 = bitcast %"class.blink::Member.181"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_23V8NoArgumentConstructorEE5TraceEPNS_7VisitorEPKv) #7
  br label %13

13:                                               ; preds = %2, %7
  %14 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 3
  %15 = bitcast %"class.blink::Member.185"* %14 to i64*
  %16 = load atomic i64, i64* %15 monotonic, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %13
  %19 = inttoptr i64 %16 to i8*
  %20 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %21 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %21, i64 5
  %23 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %22, align 8
  tail call void %23(%"class.blink::Visitor"* %1, i8* nonnull %19, i8* nonnull %19, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_15V8PaintCallbackEE5TraceEPNS_7VisitorEPKv) #7
  br label %24

24:                                               ; preds = %13, %18
  %25 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 4
  %26 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, %"class.blink::TraceWrapperV8Reference.187"*)***
  %27 = load void (%"class.blink::Visitor"*, %"class.blink::TraceWrapperV8Reference.187"*)**, void (%"class.blink::Visitor"*, %"class.blink::TraceWrapperV8Reference.187"*)*** %26, align 8
  %28 = getelementptr inbounds void (%"class.blink::Visitor"*, %"class.blink::TraceWrapperV8Reference.187"*)*, void (%"class.blink::Visitor"*, %"class.blink::TraceWrapperV8Reference.187"*)** %27, i64 7
  %29 = load void (%"class.blink::Visitor"*, %"class.blink::TraceWrapperV8Reference.187"*)*, void (%"class.blink::Visitor"*, %"class.blink::TraceWrapperV8Reference.187"*)** %28, align 8
  tail call void %29(%"class.blink::Visitor"* %1, %"class.blink::TraceWrapperV8Reference.187"* dereferenceable(8) %25) #7
  %30 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 9
  %31 = bitcast %"class.blink::Member.216"* %30 to i64*
  %32 = load atomic i64, i64* %31 monotonic, align 8
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %40, label %34

34:                                               ; preds = %24
  %35 = inttoptr i64 %32 to i8*
  %36 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %37 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %36, align 8
  %38 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %37, i64 5
  %39 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %38, align 8
  tail call void %39(%"class.blink::Visitor"* %1, i8* nonnull %35, i8* nonnull %35, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_31PaintRenderingContext2DSettingsEE5TraceEPNS_7VisitorEPKv) #7
  br label %40

40:                                               ; preds = %24, %34
  %41 = getelementptr inbounds %"class.blink::CSSPaintDefinition", %"class.blink::CSSPaintDefinition"* %0, i64 0, i32 1
  %42 = bitcast %"class.blink::Member"* %41 to i64*
  %43 = load atomic i64, i64* %42 monotonic, align 8
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %51, label %45

45:                                               ; preds = %40
  %46 = inttoptr i64 %43 to i8*
  %47 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %48 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %47, align 8
  %49 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %48, i64 5
  %50 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %49, align 8
  tail call void %50(%"class.blink::Visitor"* %1, i8* nonnull %46, i8* nonnull %46, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_11ScriptStateEE5TraceEPNS_7VisitorEPKv) #7
  br label %51

51:                                               ; preds = %40, %45
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK5blink18CSSPaintDefinition18NameInHeapSnapshotEv(%"class.blink::CSSPaintDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0)
}

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #3

declare void @_ZN2v811HandleScopeC1EPNS_7IsolateE(%"class.v8::HandleScope"*, %"class.v8::Isolate"*) unnamed_addr #3

declare void @_ZN2v87Context5EnterEv(%"class.v8::Context"*) local_unnamed_addr #3

declare i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN2v87Context4ExitEv(%"class.v8::Context"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN2v811HandleScopeD1Ev(%"class.v8::HandleScope"*) unnamed_addr #4

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN5blink15DOMWrapperWorldD1Ev(%"class.blink::DOMWrapperWorld"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_11ScriptStateEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::ScriptState"*
  tail call void @_ZNK5blink11ScriptState5TraceEPNS_7VisitorE(%"class.blink::ScriptState"* %3, %"class.blink::Visitor"* %0) #7
  ret void
}

declare void @_ZNK5blink11ScriptState5TraceEPNS_7VisitorE(%"class.blink::ScriptState"*, %"class.blink::Visitor"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_12AtomicStringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i8* %11, i8* %12) #7
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.2, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #7
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #7
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink13CSSPropertyIDEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 536346624
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 536346624) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i8* %11, i8* %12) #7
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.2, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #7
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %20 = shl i64 %0, 2
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #7
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_31PaintRenderingContext2DSettingsEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::PaintRenderingContext2DSettings"*
  %4 = bitcast i8* %1 to void (%"class.blink::PaintRenderingContext2DSettings"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::PaintRenderingContext2DSettings"*, %"class.blink::Visitor"*)**, void (%"class.blink::PaintRenderingContext2DSettings"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::PaintRenderingContext2DSettings"*, %"class.blink::Visitor"*)*, void (%"class.blink::PaintRenderingContext2DSettings"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::PaintRenderingContext2DSettings"*, %"class.blink::Visitor"*)*, void (%"class.blink::PaintRenderingContext2DSettings"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::PaintRenderingContext2DSettings"* %3, %"class.blink::Visitor"* %0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink19CSSSyntaxDefinitionELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.206"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %70

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.206", %"class.WTF::Vector.206"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.blink::CSSSyntaxDefinition"*, %"class.blink::CSSSyntaxDefinition"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.206", %"class.WTF::Vector.206"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %6, i64 %9
  %11 = bitcast %"class.WTF::Vector.206"* %0 to i64*
  store atomic i64 0, i64* %11 monotonic, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector.206", %"class.WTF::Vector.206"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %8, 0
  br i1 %13, label %68, label %14

14:                                               ; preds = %4, %64
  %15 = phi %"class.blink::CSSSyntaxDefinition"* [ %66, %64 ], [ %6, %4 ]
  %16 = phi %"class.blink::CSSSyntaxDefinition"* [ %65, %64 ], [ null, %4 ]
  %17 = bitcast %"class.blink::CSSSyntaxDefinition"* %16 to i8*
  %18 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %16, i64 0, i32 0, i32 0, i32 0, i32 1
  %19 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %16, i64 0, i32 0, i32 0, i32 0, i32 2
  %20 = bitcast %"class.blink::CSSSyntaxDefinition"* %15 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 16, i1 false) #7
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.blink::CSSSyntaxDefinition"* %16 to i64*
  store atomic i64 0, i64* %20 monotonic, align 8
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %15, i64 0, i32 0, i32 0, i32 0, i32 1
  %24 = load i32, i32* %18, align 4
  %25 = load i32, i32* %23, align 4
  store i32 %25, i32* %18, align 4
  store i32 %24, i32* %23, align 4
  %26 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %15, i64 0, i32 0, i32 0, i32 0, i32 2
  %27 = load i32, i32* %19, align 4
  %28 = load i32, i32* %26, align 4
  store i32 %28, i32* %19, align 4
  store i32 %27, i32* %26, align 4
  %29 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %15, i64 0, i32 0, i32 0, i32 0, i32 0
  %30 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %29, align 8
  %31 = icmp eq %"class.blink::CSSSyntaxComponent"* %30, null
  br i1 %31, label %64, label %32, !prof !3

32:                                               ; preds = %14
  %33 = bitcast %"class.blink::CSSSyntaxComponent"* %30 to i8*
  %34 = icmp eq i32 %27, 0
  br i1 %34, label %62, label %35, !prof !2

35:                                               ; preds = %32
  %36 = zext i32 %27 to i64
  %37 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %30, i64 %36
  br label %38

38:                                               ; preds = %56, %35
  %39 = phi %"class.blink::CSSSyntaxComponent"* [ %57, %56 ], [ %30, %35 ]
  %40 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %39, i64 0, i32 2, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %42, label %56, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load atomic i32, i32* %44 monotonic, align 4
  %46 = and i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %49 = load i32, i32* %48, align 4
  br i1 %47, label %50, label %52

50:                                               ; preds = %43
  %51 = add i32 %49, -1
  store i32 %51, i32* %48, align 4
  br label %52

52:                                               ; preds = %50, %43
  %53 = phi i32 [ %51, %50 ], [ %49, %43 ]
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %56

55:                                               ; preds = %52
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %41) #7
  br label %56

56:                                               ; preds = %55, %52, %38
  %57 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %39, i64 1
  %58 = icmp eq %"class.blink::CSSSyntaxComponent"* %57, %37
  br i1 %58, label %59, label %38

59:                                               ; preds = %56
  store i32 0, i32* %26, align 4
  %60 = bitcast %"class.blink::CSSSyntaxDefinition"* %15 to i8**
  %61 = load i8*, i8** %60, align 8
  br label %62

62:                                               ; preds = %59, %32
  %63 = phi i8* [ %61, %59 ], [ %33, %32 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %63) #7
  store %"class.blink::CSSSyntaxComponent"* null, %"class.blink::CSSSyntaxComponent"** %29, align 8
  br label %64

64:                                               ; preds = %62, %14
  %65 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %16, i64 1
  %66 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %15, i64 1
  %67 = icmp eq %"class.blink::CSSSyntaxDefinition"* %66, %10
  br i1 %67, label %68, label %14

68:                                               ; preds = %64, %4
  %69 = bitcast %"class.blink::CSSSyntaxDefinition"* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %69) #7
  br label %149

70:                                               ; preds = %2
  %71 = zext i32 %1 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink19CSSSyntaxDefinitionEEEmm(i64 %71) #7
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink19CSSSyntaxDefinitionEEEPKcv, i64 0, i64 0)) #7
  %74 = lshr i64 %72, 4
  %75 = ptrtoint i8* %73 to i64
  %76 = getelementptr inbounds %"class.WTF::Vector.206", %"class.WTF::Vector.206"* %0, i64 0, i32 0, i32 0, i32 0
  %77 = load %"class.blink::CSSSyntaxDefinition"*, %"class.blink::CSSSyntaxDefinition"** %76, align 8
  %78 = getelementptr inbounds %"class.WTF::Vector.206", %"class.WTF::Vector.206"* %0, i64 0, i32 0, i32 0, i32 2
  %79 = load i32, i32* %78, align 4
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %77, i64 %80
  %82 = icmp eq i32 %79, 0
  br i1 %82, label %83, label %85

83:                                               ; preds = %70
  %84 = bitcast %"class.blink::CSSSyntaxDefinition"* %77 to i8*
  br label %144

85:                                               ; preds = %70
  %86 = bitcast i8* %73 to %"class.blink::CSSSyntaxDefinition"*
  br label %87

87:                                               ; preds = %85, %137
  %88 = phi %"class.blink::CSSSyntaxDefinition"* [ %139, %137 ], [ %77, %85 ]
  %89 = phi %"class.blink::CSSSyntaxDefinition"* [ %138, %137 ], [ %86, %85 ]
  %90 = bitcast %"class.blink::CSSSyntaxDefinition"* %89 to i8*
  %91 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %89, i64 0, i32 0, i32 0, i32 0, i32 1
  %92 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %89, i64 0, i32 0, i32 0, i32 0, i32 2
  %93 = bitcast %"class.blink::CSSSyntaxDefinition"* %88 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %90, i8 0, i64 16, i1 false) #7
  %94 = load i64, i64* %93, align 8
  %95 = bitcast %"class.blink::CSSSyntaxDefinition"* %89 to i64*
  store atomic i64 0, i64* %93 monotonic, align 8
  store atomic i64 %94, i64* %95 monotonic, align 8
  %96 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %88, i64 0, i32 0, i32 0, i32 0, i32 1
  %97 = load i32, i32* %91, align 4
  %98 = load i32, i32* %96, align 4
  store i32 %98, i32* %91, align 4
  store i32 %97, i32* %96, align 4
  %99 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %88, i64 0, i32 0, i32 0, i32 0, i32 2
  %100 = load i32, i32* %92, align 4
  %101 = load i32, i32* %99, align 4
  store i32 %101, i32* %92, align 4
  store i32 %100, i32* %99, align 4
  %102 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %88, i64 0, i32 0, i32 0, i32 0, i32 0
  %103 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %102, align 8
  %104 = icmp eq %"class.blink::CSSSyntaxComponent"* %103, null
  br i1 %104, label %137, label %105, !prof !3

105:                                              ; preds = %87
  %106 = bitcast %"class.blink::CSSSyntaxComponent"* %103 to i8*
  %107 = icmp eq i32 %100, 0
  br i1 %107, label %135, label %108, !prof !2

108:                                              ; preds = %105
  %109 = zext i32 %100 to i64
  %110 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %103, i64 %109
  br label %111

111:                                              ; preds = %129, %108
  %112 = phi %"class.blink::CSSSyntaxComponent"* [ %130, %129 ], [ %103, %108 ]
  %113 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %112, i64 0, i32 2, i32 0, i32 0
  %114 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %113, align 8
  %115 = icmp eq %"class.WTF::StringImpl"* %114, null
  br i1 %115, label %129, label %116

116:                                              ; preds = %111
  %117 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %114, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %118 = load atomic i32, i32* %117 monotonic, align 4
  %119 = and i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %114, i64 0, i32 0
  %122 = load i32, i32* %121, align 4
  br i1 %120, label %123, label %125

123:                                              ; preds = %116
  %124 = add i32 %122, -1
  store i32 %124, i32* %121, align 4
  br label %125

125:                                              ; preds = %123, %116
  %126 = phi i32 [ %124, %123 ], [ %122, %116 ]
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %129

128:                                              ; preds = %125
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %114) #7
  br label %129

129:                                              ; preds = %128, %125, %111
  %130 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %112, i64 1
  %131 = icmp eq %"class.blink::CSSSyntaxComponent"* %130, %110
  br i1 %131, label %132, label %111

132:                                              ; preds = %129
  store i32 0, i32* %99, align 4
  %133 = bitcast %"class.blink::CSSSyntaxDefinition"* %88 to i8**
  %134 = load i8*, i8** %133, align 8
  br label %135

135:                                              ; preds = %132, %105
  %136 = phi i8* [ %134, %132 ], [ %106, %105 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %136) #7
  store %"class.blink::CSSSyntaxComponent"* null, %"class.blink::CSSSyntaxComponent"** %102, align 8
  br label %137

137:                                              ; preds = %135, %87
  %138 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %89, i64 1
  %139 = getelementptr inbounds %"class.blink::CSSSyntaxDefinition", %"class.blink::CSSSyntaxDefinition"* %88, i64 1
  %140 = icmp eq %"class.blink::CSSSyntaxDefinition"* %139, %81
  br i1 %140, label %141, label %87

141:                                              ; preds = %137
  %142 = bitcast %"class.WTF::Vector.206"* %0 to i8**
  %143 = load i8*, i8** %142, align 8
  br label %144

144:                                              ; preds = %83, %141
  %145 = phi i8* [ %143, %141 ], [ %84, %83 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %145) #7
  %146 = bitcast %"class.WTF::Vector.206"* %0 to i64*
  store atomic i64 %75, i64* %146 monotonic, align 8
  %147 = trunc i64 %74 to i32
  %148 = getelementptr inbounds %"class.WTF::Vector.206", %"class.WTF::Vector.206"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %147, i32* %148, align 8
  br label %149

149:                                              ; preds = %144, %68
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink19CSSSyntaxDefinitionEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 134086656
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 134086656) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i8* %11, i8* %12) #7
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.2, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #7
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %20 = shl i64 %0, 4
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #7
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector.209"* @_ZN3WTF6VectorIN5blink18CSSSyntaxComponentELj0ENS_18PartitionAllocatorEEaSERKS4_(%"class.WTF::Vector.209"*, %"class.WTF::Vector.209"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector.209"* %1, %0
  br i1 %3, label %215, label %4, !prof !2

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.209", %"class.WTF::Vector.209"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector.209", %"class.WTF::Vector.209"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %39

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.WTF::Vector.209", %"class.WTF::Vector.209"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %11, align 8
  %13 = zext i32 %6 to i64
  %14 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %12, i64 %13
  %15 = zext i32 %8 to i64
  %16 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %12, i64 %15
  br label %17

17:                                               ; preds = %35, %10
  %18 = phi %"class.blink::CSSSyntaxComponent"* [ %36, %35 ], [ %16, %10 ]
  %19 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %18, i64 0, i32 2, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = and i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  br i1 %26, label %29, label %31

29:                                               ; preds = %22
  %30 = add i32 %28, -1
  store i32 %30, i32* %27, align 4
  br label %31

31:                                               ; preds = %29, %22
  %32 = phi i32 [ %30, %29 ], [ %28, %22 ]
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %20) #7
  br label %35

35:                                               ; preds = %34, %31, %17
  %36 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %18, i64 1
  %37 = icmp eq %"class.blink::CSSSyntaxComponent"* %36, %14
  br i1 %37, label %38, label %17

38:                                               ; preds = %35
  store i32 %8, i32* %5, align 4
  br label %99

39:                                               ; preds = %4
  %40 = getelementptr inbounds %"class.WTF::Vector.209", %"class.WTF::Vector.209"* %0, i64 0, i32 0, i32 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = icmp ugt i32 %8, %41
  br i1 %42, label %43, label %97

43:                                               ; preds = %39
  %44 = icmp eq i32 %41, 0
  br i1 %44, label %80, label %45

45:                                               ; preds = %43
  %46 = icmp eq i32 %6, 0
  br i1 %46, label %74, label %47

47:                                               ; preds = %45
  %48 = getelementptr inbounds %"class.WTF::Vector.209", %"class.WTF::Vector.209"* %0, i64 0, i32 0, i32 0, i32 0
  %49 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %48, align 8
  %50 = zext i32 %6 to i64
  %51 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %49, i64 %50
  br label %52

52:                                               ; preds = %70, %47
  %53 = phi %"class.blink::CSSSyntaxComponent"* [ %71, %70 ], [ %49, %47 ]
  %54 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %53, i64 0, i32 2, i32 0, i32 0
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %70, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  br i1 %61, label %64, label %66

64:                                               ; preds = %57
  %65 = add i32 %63, -1
  store i32 %65, i32* %62, align 4
  br label %66

66:                                               ; preds = %64, %57
  %67 = phi i32 [ %65, %64 ], [ %63, %57 ]
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %55) #7
  br label %70

70:                                               ; preds = %69, %66, %52
  %71 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %53, i64 1
  %72 = icmp eq %"class.blink::CSSSyntaxComponent"* %71, %51
  br i1 %72, label %73, label %52

73:                                               ; preds = %70
  store i32 0, i32* %5, align 4
  br label %74

74:                                               ; preds = %73, %45
  %75 = bitcast %"class.WTF::Vector.209"* %0 to i8**
  %76 = load i8*, i8** %75, align 8
  %77 = bitcast %"class.WTF::Vector.209"* %0 to i64*
  store atomic i64 0, i64* %77 monotonic, align 8
  store i32 0, i32* %40, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %76) #7
  %78 = load i32, i32* %7, align 4
  %79 = load i32, i32* %40, align 8
  br label %80

80:                                               ; preds = %43, %74
  %81 = phi i32 [ 0, %43 ], [ %79, %74 ]
  %82 = phi i32 [ %8, %43 ], [ %78, %74 ]
  %83 = icmp ult i32 %81, %82
  br i1 %83, label %84, label %97, !prof !3

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.WTF::Vector.209", %"class.WTF::Vector.209"* %0, i64 0, i32 0, i32 0, i32 0
  %86 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %85, align 8
  %87 = icmp eq %"class.blink::CSSSyntaxComponent"* %86, null
  br i1 %87, label %88, label %96

88:                                               ; preds = %84
  %89 = zext i32 %82 to i64
  %90 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18CSSSyntaxComponentEEEmm(i64 %89) #7
  %91 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %90, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink18CSSSyntaxComponentEEEPKcv, i64 0, i64 0)) #7
  %92 = ptrtoint i8* %91 to i64
  %93 = bitcast %"class.WTF::Vector.209"* %0 to i64*
  store atomic i64 %92, i64* %93 monotonic, align 8
  %94 = udiv i64 %90, 24
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %40, align 8
  br label %97

96:                                               ; preds = %84
  tail call void @_ZN3WTF6VectorIN5blink18CSSSyntaxComponentELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.209"* %0, i32 %82) #7
  br label %97

97:                                               ; preds = %39, %80, %88, %96
  %98 = load i32, i32* %5, align 4
  br label %99

99:                                               ; preds = %97, %38
  %100 = phi i32 [ %98, %97 ], [ %8, %38 ]
  %101 = getelementptr inbounds %"class.WTF::Vector.209", %"class.WTF::Vector.209"* %1, i64 0, i32 0, i32 0, i32 0
  %102 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %101, align 8
  %103 = zext i32 %100 to i64
  %104 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %102, i64 %103
  %105 = getelementptr inbounds %"class.WTF::Vector.209", %"class.WTF::Vector.209"* %0, i64 0, i32 0, i32 0, i32 0
  %106 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %105, align 8
  %107 = icmp eq i32 %100, 0
  br i1 %107, label %165, label %108

108:                                              ; preds = %99, %154
  %109 = phi %"class.blink::CSSSyntaxComponent"* [ %159, %154 ], [ %106, %99 ]
  %110 = phi %"class.blink::CSSSyntaxComponent"* [ %158, %154 ], [ %102, %99 ]
  %111 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %110, i64 0, i32 0
  %112 = load i32, i32* %111, align 8
  %113 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %109, i64 0, i32 0
  store i32 %112, i32* %113, align 8
  %114 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %109, i64 0, i32 2
  %115 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %110, i64 0, i32 2, i32 0, i32 0
  %116 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %115, align 8
  %117 = icmp eq %"class.WTF::StringImpl"* %116, null
  br i1 %117, label %135, label %118

118:                                              ; preds = %108
  %119 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %116, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %120 = load atomic i32, i32* %119 monotonic, align 4
  %121 = and i32 %120, 2
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %135

123:                                              ; preds = %118
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %116, i64 0, i32 0
  %125 = load i32, i32* %124, align 4
  %126 = zext i32 %125 to i33
  %127 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %126, i33 1) #7
  %128 = extractvalue { i33, i1 } %127, 1
  %129 = extractvalue { i33, i1 } %127, 0
  %130 = icmp slt i33 %129, 0
  %131 = or i1 %128, %130
  br i1 %131, label %132, label %133, !prof !2

132:                                              ; preds = %123
  tail call void @llvm.trap() #7
  unreachable

133:                                              ; preds = %123
  %134 = trunc i33 %129 to i32
  store i32 %134, i32* %124, align 4
  br label %135

135:                                              ; preds = %133, %118, %108
  %136 = ptrtoint %"class.WTF::StringImpl"* %116 to i64
  %137 = bitcast %"class.WTF::String"* %114 to i64*
  %138 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %114, i64 0, i32 0, i32 0
  %139 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %138, align 8
  store i64 %136, i64* %137, align 8
  %140 = icmp eq %"class.WTF::StringImpl"* %139, null
  br i1 %140, label %154, label %141

141:                                              ; preds = %135
  %142 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %139, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %143 = load atomic i32, i32* %142 monotonic, align 4
  %144 = and i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %139, i64 0, i32 0
  %147 = load i32, i32* %146, align 4
  br i1 %145, label %148, label %150

148:                                              ; preds = %141
  %149 = add i32 %147, -1
  store i32 %149, i32* %146, align 4
  br label %150

150:                                              ; preds = %148, %141
  %151 = phi i32 [ %149, %148 ], [ %147, %141 ]
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %154

153:                                              ; preds = %150
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %139) #7
  br label %154

154:                                              ; preds = %153, %150, %135
  %155 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %110, i64 0, i32 3
  %156 = load i32, i32* %155, align 8
  %157 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %109, i64 0, i32 3
  store i32 %156, i32* %157, align 8
  %158 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %110, i64 1
  %159 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %109, i64 1
  %160 = icmp eq %"class.blink::CSSSyntaxComponent"* %158, %104
  br i1 %160, label %161, label %108

161:                                              ; preds = %154
  %162 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %101, align 8
  %163 = load i32, i32* %5, align 4
  %164 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %105, align 8
  br label %165

165:                                              ; preds = %161, %99
  %166 = phi %"class.blink::CSSSyntaxComponent"* [ %164, %161 ], [ %106, %99 ]
  %167 = phi i32 [ %163, %161 ], [ 0, %99 ]
  %168 = phi %"class.blink::CSSSyntaxComponent"* [ %162, %161 ], [ %102, %99 ]
  %169 = zext i32 %167 to i64
  %170 = load i32, i32* %7, align 4
  %171 = zext i32 %170 to i64
  %172 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %168, i64 %171
  %173 = icmp eq i32 %167, %170
  br i1 %173, label %213, label %174

174:                                              ; preds = %165
  %175 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %166, i64 %169
  %176 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %168, i64 %169
  br label %177

177:                                              ; preds = %174, %204
  %178 = phi %"class.blink::CSSSyntaxComponent"* [ %208, %204 ], [ %175, %174 ]
  %179 = phi %"class.blink::CSSSyntaxComponent"* [ %209, %204 ], [ %176, %174 ]
  %180 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %178, i64 0, i32 0
  %181 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %179, i64 0, i32 0
  %182 = load i32, i32* %181, align 8
  store i32 %182, i32* %180, align 8
  %183 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %179, i64 0, i32 2, i32 0, i32 0
  %184 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %183, align 8
  %185 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %178, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* %184, %"class.WTF::StringImpl"** %185, align 8
  %186 = icmp eq %"class.WTF::StringImpl"* %184, null
  br i1 %186, label %204, label %187

187:                                              ; preds = %177
  %188 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %184, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %189 = load atomic i32, i32* %188 monotonic, align 4
  %190 = and i32 %189, 2
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %192, label %204

192:                                              ; preds = %187
  %193 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %184, i64 0, i32 0
  %194 = load i32, i32* %193, align 4
  %195 = zext i32 %194 to i33
  %196 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %195, i33 1) #7
  %197 = extractvalue { i33, i1 } %196, 1
  %198 = extractvalue { i33, i1 } %196, 0
  %199 = icmp slt i33 %198, 0
  %200 = or i1 %197, %199
  br i1 %200, label %201, label %202, !prof !2

201:                                              ; preds = %192
  tail call void @llvm.trap() #7
  unreachable

202:                                              ; preds = %192
  %203 = trunc i33 %198 to i32
  store i32 %203, i32* %193, align 4
  br label %204

204:                                              ; preds = %202, %187, %177
  %205 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %178, i64 0, i32 3
  %206 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %179, i64 0, i32 3
  %207 = load i32, i32* %206, align 8
  store i32 %207, i32* %205, align 8
  %208 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %178, i64 1
  %209 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %179, i64 1
  %210 = icmp eq %"class.blink::CSSSyntaxComponent"* %209, %172
  br i1 %210, label %211, label %177

211:                                              ; preds = %204
  %212 = load i32, i32* %7, align 4
  br label %213

213:                                              ; preds = %211, %165
  %214 = phi i32 [ %212, %211 ], [ %167, %165 ]
  store i32 %214, i32* %5, align 4
  br label %215

215:                                              ; preds = %2, %213
  ret %"class.WTF::Vector.209"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink18CSSSyntaxComponentELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.209"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %51

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.209", %"class.WTF::Vector.209"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.209", %"class.WTF::Vector.209"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %6, i64 %9
  %11 = bitcast %"class.WTF::Vector.209"* %0 to i64*
  store atomic i64 0, i64* %11 monotonic, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector.209", %"class.WTF::Vector.209"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %8, 0
  br i1 %13, label %49, label %14

14:                                               ; preds = %4, %45
  %15 = phi %"class.blink::CSSSyntaxComponent"* [ %47, %45 ], [ %6, %4 ]
  %16 = phi %"class.blink::CSSSyntaxComponent"* [ %46, %45 ], [ null, %4 ]
  %17 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %16, i64 0, i32 0
  %18 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %15, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  store i32 %19, i32* %17, align 8
  %20 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %16, i64 0, i32 2
  %21 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %15, i64 0, i32 2
  %22 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %21, i64 0, i32 0, i32 0
  %23 = bitcast %"class.WTF::String"* %21 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast %"class.WTF::String"* %20 to i64*
  store i64 %24, i64* %25, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %22, align 8
  %26 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %16, i64 0, i32 3
  %27 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %15, i64 0, i32 3
  %28 = load i32, i32* %27, align 8
  store i32 %28, i32* %26, align 8
  %29 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %15, i64 0, i32 2, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %31, label %45, label %32

32:                                               ; preds = %14
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  br i1 %36, label %39, label %41

39:                                               ; preds = %32
  %40 = add i32 %38, -1
  store i32 %40, i32* %37, align 4
  br label %41

41:                                               ; preds = %39, %32
  %42 = phi i32 [ %40, %39 ], [ %38, %32 ]
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %41
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %30) #7
  br label %45

45:                                               ; preds = %44, %41, %14
  %46 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %16, i64 1
  %47 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %15, i64 1
  %48 = icmp eq %"class.blink::CSSSyntaxComponent"* %47, %10
  br i1 %48, label %49, label %14

49:                                               ; preds = %45, %4
  %50 = bitcast %"class.blink::CSSSyntaxComponent"* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #7
  br label %111

51:                                               ; preds = %2
  %52 = zext i32 %1 to i64
  %53 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18CSSSyntaxComponentEEEmm(i64 %52) #7
  %54 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %53, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink18CSSSyntaxComponentEEEPKcv, i64 0, i64 0)) #7
  %55 = udiv i64 %53, 24
  %56 = ptrtoint i8* %54 to i64
  %57 = getelementptr inbounds %"class.WTF::Vector.209", %"class.WTF::Vector.209"* %0, i64 0, i32 0, i32 0, i32 0
  %58 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %57, align 8
  %59 = getelementptr inbounds %"class.WTF::Vector.209", %"class.WTF::Vector.209"* %0, i64 0, i32 0, i32 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %58, i64 %61
  %63 = icmp eq i32 %60, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %51
  %65 = bitcast %"class.blink::CSSSyntaxComponent"* %58 to i8*
  br label %106

66:                                               ; preds = %51
  %67 = bitcast i8* %54 to %"class.blink::CSSSyntaxComponent"*
  br label %68

68:                                               ; preds = %66, %99
  %69 = phi %"class.blink::CSSSyntaxComponent"* [ %101, %99 ], [ %58, %66 ]
  %70 = phi %"class.blink::CSSSyntaxComponent"* [ %100, %99 ], [ %67, %66 ]
  %71 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %70, i64 0, i32 0
  %72 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %69, i64 0, i32 0
  %73 = load i32, i32* %72, align 8
  store i32 %73, i32* %71, align 8
  %74 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %70, i64 0, i32 2
  %75 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %69, i64 0, i32 2
  %76 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %75, i64 0, i32 0, i32 0
  %77 = bitcast %"class.WTF::String"* %75 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = bitcast %"class.WTF::String"* %74 to i64*
  store i64 %78, i64* %79, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %76, align 8
  %80 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %70, i64 0, i32 3
  %81 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %69, i64 0, i32 3
  %82 = load i32, i32* %81, align 8
  store i32 %82, i32* %80, align 8
  %83 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %69, i64 0, i32 2, i32 0, i32 0
  %84 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %83, align 8
  %85 = icmp eq %"class.WTF::StringImpl"* %84, null
  br i1 %85, label %99, label %86

86:                                               ; preds = %68
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = and i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 0
  %92 = load i32, i32* %91, align 4
  br i1 %90, label %93, label %95

93:                                               ; preds = %86
  %94 = add i32 %92, -1
  store i32 %94, i32* %91, align 4
  br label %95

95:                                               ; preds = %93, %86
  %96 = phi i32 [ %94, %93 ], [ %92, %86 ]
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %95
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %84) #7
  br label %99

99:                                               ; preds = %98, %95, %68
  %100 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %70, i64 1
  %101 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %69, i64 1
  %102 = icmp eq %"class.blink::CSSSyntaxComponent"* %101, %62
  br i1 %102, label %103, label %68

103:                                              ; preds = %99
  %104 = bitcast %"class.WTF::Vector.209"* %0 to i8**
  %105 = load i8*, i8** %104, align 8
  br label %106

106:                                              ; preds = %64, %103
  %107 = phi i8* [ %105, %103 ], [ %65, %64 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %107) #7
  %108 = bitcast %"class.WTF::Vector.209"* %0 to i64*
  store atomic i64 %56, i64* %108 monotonic, align 8
  %109 = trunc i64 %55 to i32
  %110 = getelementptr inbounds %"class.WTF::Vector.209", %"class.WTF::Vector.209"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %109, i32* %110, align 8
  br label %111

111:                                              ; preds = %106, %49
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18CSSSyntaxComponentEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 89391104
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 89391104) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i8* %11, i8* %12) #7
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.2, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #7
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %20 = mul i64 %0, 24
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #7
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink18CSSSyntaxComponentELj0ENS_18PartitionAllocatorEEC2ERKS4_(%"class.WTF::Vector.209"*, %"class.WTF::Vector.209"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.209", %"class.WTF::Vector.209"* %1, i64 0, i32 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.WTF::Vector.209", %"class.WTF::Vector.209"* %0, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::CSSSyntaxComponent"* null, %"class.blink::CSSSyntaxComponent"** %5, align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.209", %"class.WTF::Vector.209"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %6, align 8
  %7 = icmp eq i32 %4, 0
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = zext i32 %4 to i64
  %10 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18CSSSyntaxComponentEEEmm(i64 %9) #7
  %11 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %10, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink18CSSSyntaxComponentEEEPKcv, i64 0, i64 0)) #7
  %12 = ptrtoint i8* %11 to i64
  %13 = bitcast %"class.WTF::Vector.209"* %0 to i64*
  store atomic i64 %12, i64* %13 monotonic, align 8
  %14 = udiv i64 %10, 24
  %15 = trunc i64 %14 to i32
  store i32 %15, i32* %6, align 8
  %16 = bitcast i8* %11 to %"class.blink::CSSSyntaxComponent"*
  br label %17

17:                                               ; preds = %2, %8
  %18 = phi %"class.blink::CSSSyntaxComponent"* [ null, %2 ], [ %16, %8 ]
  %19 = getelementptr inbounds %"class.WTF::Vector.209", %"class.WTF::Vector.209"* %1, i64 0, i32 0, i32 0, i32 2
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.WTF::Vector.209", %"class.WTF::Vector.209"* %0, i64 0, i32 0, i32 0, i32 2
  store i32 %20, i32* %21, align 4
  %22 = getelementptr inbounds %"class.WTF::Vector.209", %"class.WTF::Vector.209"* %1, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.blink::CSSSyntaxComponent"*, %"class.blink::CSSSyntaxComponent"** %22, align 8
  %24 = load i32, i32* %19, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %23, i64 %25
  %27 = icmp eq i32 %24, 0
  br i1 %27, label %62, label %28

28:                                               ; preds = %17, %55
  %29 = phi %"class.blink::CSSSyntaxComponent"* [ %59, %55 ], [ %18, %17 ]
  %30 = phi %"class.blink::CSSSyntaxComponent"* [ %60, %55 ], [ %23, %17 ]
  %31 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %29, i64 0, i32 0
  %32 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %30, i64 0, i32 0
  %33 = load i32, i32* %32, align 8
  store i32 %33, i32* %31, align 8
  %34 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %30, i64 0, i32 2, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %29, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* %35, %"class.WTF::StringImpl"** %36, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %37, label %55, label %38

38:                                               ; preds = %28
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %55

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i33
  %47 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %46, i33 1) #7
  %48 = extractvalue { i33, i1 } %47, 1
  %49 = extractvalue { i33, i1 } %47, 0
  %50 = icmp slt i33 %49, 0
  %51 = or i1 %48, %50
  br i1 %51, label %52, label %53, !prof !2

52:                                               ; preds = %43
  tail call void @llvm.trap() #7
  unreachable

53:                                               ; preds = %43
  %54 = trunc i33 %49 to i32
  store i32 %54, i32* %44, align 4
  br label %55

55:                                               ; preds = %53, %38, %28
  %56 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %29, i64 0, i32 3
  %57 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %30, i64 0, i32 3
  %58 = load i32, i32* %57, align 8
  store i32 %58, i32* %56, align 8
  %59 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %29, i64 1
  %60 = getelementptr inbounds %"class.blink::CSSSyntaxComponent", %"class.blink::CSSSyntaxComponent"* %30, i64 1
  %61 = icmp eq %"class.blink::CSSSyntaxComponent"* %60, %26
  br i1 %61, label %62, label %28

62:                                               ; preds = %55, %17
  ret void
}

declare void @_ZN5blink23PaintRenderingContext2DC1ERKNS_7IntSizeEPKNS_31PaintRenderingContext2DSettingsEff(%"class.blink::PaintRenderingContext2D"*, %"class.blink::IntSize"* dereferenceable(8), %"class.blink::PaintRenderingContext2DSettings"*, float, float) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_15ScriptWrappableEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #7
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !2

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #7
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #7
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic.199"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic.199"*)) #7
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #7
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #7
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #7
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* %40, i8* %41) #7
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.6, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #7
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #7
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #7
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !2

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #7
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #3

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #3

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #3

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::ScriptWrappable"*
  %4 = bitcast i8* %1 to void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)**, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %5, i64 5
  %7 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::ScriptWrappable"* %3, %"class.blink::Visitor"* %0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::ScriptWrappable"*
  %3 = bitcast i8* %0 to void (%"class.blink::ScriptWrappable"*)***
  %4 = load void (%"class.blink::ScriptWrappable"*)**, void (%"class.blink::ScriptWrappable"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*)*, void (%"class.blink::ScriptWrappable"*)** %4, i64 1
  %6 = load void (%"class.blink::ScriptWrappable"*)*, void (%"class.blink::ScriptWrappable"*)** %5, align 8
  tail call void %6(%"class.blink::ScriptWrappable"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::NameClient"*
  %3 = bitcast i8* %0 to i8* (%"class.blink::NameClient"*)***
  %4 = load i8* (%"class.blink::NameClient"*)**, i8* (%"class.blink::NameClient"*)*** %3, align 8
  %5 = load i8* (%"class.blink::NameClient"*)*, i8* (%"class.blink::NameClient"*)** %4, align 8
  %6 = tail call i8* %5(%"class.blink::NameClient"* %2) #7
  %7 = insertvalue { i8*, i8 } undef, i8* %6, 0
  %8 = insertvalue { i8*, i8 } %7, i8 0, 1
  ret { i8*, i8 } %8
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic.199"*) local_unnamed_addr #3

declare i8* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv(%"class.blink::ScriptWrappable"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15ScriptWrappableD2Ev(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink9PaintSizeD0Ev(%"class.blink::PaintSize"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable18HasPendingActivityEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable17HasEventListenersEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.blink::WrapperTypeInfo"* @_ZNK5blink9PaintSize18GetWrapperTypeInfoEv(%"class.blink::PaintSize"*) unnamed_addr #0 comdat align 2 {
  %2 = load %"struct.blink::WrapperTypeInfo"*, %"struct.blink::WrapperTypeInfo"** @_ZN5blink9PaintSize18wrapper_type_info_E, align 8
  ret %"struct.blink::WrapperTypeInfo"* %2
}

declare %"class.v8::Value"* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE(%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*) unnamed_addr #3

declare %"class.v8::Object"* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE(%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.blink::WorldSafeV8Reference"* @_ZN5blink20WorldSafeV8ReferenceIN2v85ValueEEaSERKS3_(%"class.blink::WorldSafeV8Reference"*, %"class.blink::WorldSafeV8Reference"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::WorldSafeV8Reference", %"class.blink::WorldSafeV8Reference"* %0, i64 0, i32 0
  %4 = icmp eq %"class.blink::WorldSafeV8Reference"* %0, %1
  br i1 %4, label %16, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.blink::WorldSafeV8Reference", %"class.blink::WorldSafeV8Reference"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i64*, i64** %6, align 8
  %8 = icmp eq i64* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %5
  tail call void @_ZN2v82V819DisposeTracedGlobalEPm(i64* nonnull %7) #7
  %10 = bitcast %"class.blink::WorldSafeV8Reference"* %0 to i64*
  store atomic i64 0, i64* %10 monotonic, align 8
  br label %11

11:                                               ; preds = %9, %5
  %12 = getelementptr inbounds %"class.blink::WorldSafeV8Reference", %"class.blink::WorldSafeV8Reference"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i64*, i64** %12, align 8
  %14 = icmp eq i64* %13, null
  br i1 %14, label %16, label %15

15:                                               ; preds = %11
  tail call void @_ZN2v82V825CopyTracedGlobalReferenceEPKPKmPPm(i64** %12, i64** %6) #7
  br label %16

16:                                               ; preds = %2, %11, %15
  tail call void @_ZN5blink25UnifiedHeapMarkingVisitor12WriteBarrierERKNS_23TraceWrapperV8ReferenceIN2v85ValueEEE(%"class.blink::TraceWrapperV8Reference.187"* dereferenceable(8) %3) #7
  %17 = getelementptr inbounds %"class.blink::WorldSafeV8Reference", %"class.blink::WorldSafeV8Reference"* %0, i64 0, i32 1
  %18 = getelementptr inbounds %"class.blink::WorldSafeV8Reference", %"class.blink::WorldSafeV8Reference"* %1, i64 0, i32 1, i32 0
  %19 = load %"class.blink::DOMWrapperWorld"*, %"class.blink::DOMWrapperWorld"** %18, align 8
  %20 = icmp eq %"class.blink::DOMWrapperWorld"* %19, null
  br i1 %20, label %23, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.blink::DOMWrapperWorld", %"class.blink::DOMWrapperWorld"* %19, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %22) #7
  br label %23

23:                                               ; preds = %16, %21
  %24 = ptrtoint %"class.blink::DOMWrapperWorld"* %19 to i64
  %25 = bitcast %class.scoped_refptr.451* %17 to i64*
  %26 = getelementptr inbounds %class.scoped_refptr.451, %class.scoped_refptr.451* %17, i64 0, i32 0
  %27 = load %"class.blink::DOMWrapperWorld"*, %"class.blink::DOMWrapperWorld"** %26, align 8
  store i64 %24, i64* %25, align 8
  %28 = icmp eq %"class.blink::DOMWrapperWorld"* %27, null
  br i1 %28, label %36, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.blink::DOMWrapperWorld", %"class.blink::DOMWrapperWorld"* %27, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %30) #7
  %31 = getelementptr inbounds %"class.blink::DOMWrapperWorld", %"class.blink::DOMWrapperWorld"* %27, i64 0, i32 0, i32 0, i32 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  tail call void @_ZN5blink15DOMWrapperWorldD1Ev(%"class.blink::DOMWrapperWorld"* nonnull %27) #7
  %35 = bitcast %"class.blink::DOMWrapperWorld"* %27 to i8*
  tail call void @free(i8* %35) #7
  br label %36

36:                                               ; preds = %23, %29, %34
  ret %"class.blink::WorldSafeV8Reference"* %0
}

declare void @_ZN2v82V825CopyTracedGlobalReferenceEPKPKmPPm(i64**, i64**) local_unnamed_addr #3

declare void @_ZN2v82V819DisposeTracedGlobalEPm(i64*) local_unnamed_addr #3

declare void @_ZN5blink25UnifiedHeapMarkingVisitor12WriteBarrierERKNS_23TraceWrapperV8ReferenceIN2v85ValueEEE(%"class.blink::TraceWrapperV8Reference.187"* dereferenceable(8)) local_unnamed_addr #3

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #3

declare i64* @_ZN2v82V824GlobalizeTracedReferenceEPNS_8internal7IsolateEPmS4_b(%"class.v8::internal::Isolate"*, i64*, i64*, i1 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_23V8NoArgumentConstructorEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::CallbackFunctionBase"*
  tail call void @_ZNK5blink20CallbackFunctionBase5TraceEPNS_7VisitorE(%"class.blink::CallbackFunctionBase"* %3, %"class.blink::Visitor"* %0) #7
  ret void
}

declare void @_ZNK5blink20CallbackFunctionBase5TraceEPNS_7VisitorE(%"class.blink::CallbackFunctionBase"*, %"class.blink::Visitor"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_15V8PaintCallbackEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::CallbackFunctionBase"*
  tail call void @_ZNK5blink20CallbackFunctionBase5TraceEPNS_7VisitorE(%"class.blink::CallbackFunctionBase"* %3, %"class.blink::Visitor"* %0) #7
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i8 0, i8 2}
