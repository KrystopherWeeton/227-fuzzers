; ModuleID = 'gen/third_party/blink/renderer/bindings/modules/v8/v8_rtc_rtp_encoding_parameters.cc'
source_filename = "gen/third_party/blink/renderer/bindings/modules/v8/v8_rtc_rtp_encoding_parameters.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.79", i32, [4 x i8], %"class.std::__1::unique_ptr.215", %"class.std::__1::unique_ptr.215", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.225", %"class.std::__1::unique_ptr.231", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.243", %"class.std::__1::unique_ptr.249", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.256", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.82", %"class.std::__1::unique_ptr.88", %"class.std::__1::unique_ptr.94", %"class.std::__1::unique_ptr.100", %"class.std::__1::unique_ptr.106", %"class.std::__1::unique_ptr.112", %"class.std::__1::unique_ptr.123", %"class.std::__1::unique_ptr.130", %"class.std::__1::unique_ptr.130", %"class.std::__1::unique_ptr.137", %"class.std::__1::unique_ptr.144", %"class.std::__1::unique_ptr.151", %"class.std::__1::unique_ptr.151", %"class.std::__1::unique_ptr.158", %"class.std::__1::unique_ptr.165", %"class.std::__1::unique_ptr.172", %"class.std::__1::unique_ptr.195", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.82" = type { %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.100" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.112" = type { %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, {}* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.115" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.115" = type { %"struct.std::__1::__atomic_base.116" }
%"struct.std::__1::__atomic_base.116" = type { %"struct.std::__1::__atomic_base.117" }
%"struct.std::__1::__atomic_base.117" = type { %"struct.std::__1::__cxx_atomic_impl.118" }
%"struct.std::__1::__cxx_atomic_impl.118" = type { %"struct.std::__1::__cxx_atomic_base_impl.119" }
%"struct.std::__1::__cxx_atomic_base_impl.119" = type { i64 }
%"class.std::__1::unique_ptr.123" = type { %"class.std::__1::__compressed_pair.124" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { %"class.blink::Worklist.126"* }
%"class.blink::Worklist.126" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.115" }
%"class.std::__1::unique_ptr.130" = type { %"class.std::__1::__compressed_pair.131" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.132" }
%"struct.std::__1::__compressed_pair_elem.132" = type { %"class.blink::Worklist.133"* }
%"class.blink::Worklist.133" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.115" }
%"class.std::__1::unique_ptr.137" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"class.blink::Worklist.140"* }
%"class.blink::Worklist.140" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.115" }
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"class.blink::Worklist.147"* }
%"class.blink::Worklist.147" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.115" }
%"class.std::__1::unique_ptr.151" = type { %"class.std::__1::__compressed_pair.152" }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153" }
%"struct.std::__1::__compressed_pair_elem.153" = type { %"class.blink::Worklist.154"* }
%"class.blink::Worklist.154" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.115" }
%"class.std::__1::unique_ptr.158" = type { %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"class.blink::Worklist.161"* }
%"class.blink::Worklist.161" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.115" }
%"class.std::__1::unique_ptr.165" = type { %"class.std::__1::__compressed_pair.166" }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"struct.std::__1::__compressed_pair_elem.167" = type { %"class.blink::Worklist.168"* }
%"class.blink::Worklist.168" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.115" }
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.175", %"class.std::__1::__compressed_pair.182", %"class.std::__1::__compressed_pair.187", %"class.std::__1::__compressed_pair.189", [4 x i8] }>
%"class.std::__1::unique_ptr.175" = type { %"class.std::__1::__compressed_pair.176" }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177", %"struct.std::__1::__compressed_pair_elem.178" }
%"struct.std::__1::__compressed_pair_elem.177" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.178" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { i64 }
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.183" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.187" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.190" = type { float }
%"class.std::__1::unique_ptr.195" = type { %"class.std::__1::__compressed_pair.196" }
%"class.std::__1::__compressed_pair.196" = type { %"struct.std::__1::__compressed_pair_elem.197" }
%"struct.std::__1::__compressed_pair_elem.197" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.198", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.198" = type { %"class.std::__1::__compressed_pair.199" }
%"class.std::__1::__compressed_pair.199" = type { %"struct.std::__1::__compressed_pair_elem.200" }
%"struct.std::__1::__compressed_pair_elem.200" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.207" }
%"class.WTF::Vector.207" = type { %"class.WTF::VectorBuffer.208" }
%"class.WTF::VectorBuffer.208" = type { %"class.WTF::VectorBufferBase.209" }
%"class.WTF::VectorBufferBase.209" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.215" = type { %"class.std::__1::__compressed_pair.216" }
%"class.std::__1::__compressed_pair.216" = type { %"struct.std::__1::__compressed_pair_elem.217" }
%"struct.std::__1::__compressed_pair_elem.217" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.223" }
%"class.WTF::VectorBuffer.223" = type { %"class.WTF::VectorBufferBase.224" }
%"class.WTF::VectorBufferBase.224" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.225" = type { %"class.std::__1::__compressed_pair.226" }
%"class.std::__1::__compressed_pair.226" = type { %"struct.std::__1::__compressed_pair_elem.227" }
%"struct.std::__1::__compressed_pair_elem.227" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.231" = type { %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.237" }
%"class.std::__1::unique_ptr.237" = type { %"class.std::__1::__compressed_pair.238" }
%"class.std::__1::__compressed_pair.238" = type { %"struct.std::__1::__compressed_pair_elem.239" }
%"struct.std::__1::__compressed_pair_elem.239" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.126"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.133"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.140"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.147"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.154"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.287" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.287" = type { %"struct.std::__1::__compressed_pair_elem.288" }
%"struct.std::__1::__compressed_pair_elem.288" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.243" = type { %"class.std::__1::__compressed_pair.244" }
%"class.std::__1::__compressed_pair.244" = type { %"struct.std::__1::__compressed_pair_elem.245" }
%"struct.std::__1::__compressed_pair_elem.245" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.249" = type { %"class.std::__1::__compressed_pair.250" }
%"class.std::__1::__compressed_pair.250" = type { %"struct.std::__1::__compressed_pair_elem.251" }
%"struct.std::__1::__compressed_pair_elem.251" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.255 }
%class.scoped_refptr.255 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.256" = type { %"struct.std::__1::__atomic_base.257" }
%"struct.std::__1::__atomic_base.257" = type { %"struct.std::__1::__cxx_atomic_impl.258" }
%"struct.std::__1::__cxx_atomic_impl.258" = type { %"struct.std::__1::__cxx_atomic_base_impl.259" }
%"struct.std::__1::__cxx_atomic_base_impl.259" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.v8::Value" = type { i8 }
%"class.blink::RTCRtpEncodingParameters" = type { %"class.blink::RTCRtpCodingParameters", i8, i8, i8, i8, i8, i8, i8, i32, double, %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", double }
%"class.blink::RTCRtpCodingParameters" = type { %"class.blink::IDLDictionaryBase", %"class.WTF::String" }
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"class.v8::internal::Isolate" = type opaque
%"class.blink::V8StringResource" = type { %"class.v8::Local", i32, %"class.WTF::String", %"class.WTF::StringView::StackBackingStore" }
%"class.v8::Local" = type { %"class.v8::Value"* }
%"class.WTF::StringView::StackBackingStore" = type { [64 x i16], %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.v8::Object" = type { i8 }
%"class.blink::V8PerIsolateData" = type { i32, %"class.gin::IsolateHolder", %"class.WTF::HashMap", %"class.WTF::HashMap", %"class.WTF::HashMap.26", %"class.std::__1::unique_ptr.31", %"class.std::__1::unique_ptr.73", %"class.blink::Persistent", i8, i8, i8, %"class.WTF::Vector.260", %"class.std::__1::unique_ptr.265", %"class.blink::Persistent.271", %"class.blink::Persistent.275", %"class.blink::RuntimeCallStats", void (%"class.v8::Isolate"*, i32, i32)*, void (%"class.v8::Isolate"*, i32, i32)*, i64 }
%"class.gin::IsolateHolder" = type { %"class.std::__1::unique_ptr.10", %"class.v8::Isolate"*, %"class.std::__1::unique_ptr.14", %"class.std::__1::unique_ptr.20", i32, i32 }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.v8::SnapshotCreator"* }
%"class.v8::SnapshotCreator" = type { i8* }
%"class.std::__1::unique_ptr.14" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.gin::PerIsolateData"* }
%"class.gin::PerIsolateData" = type opaque
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.gin::V8IsolateMemoryDumpProvider"* }
%"class.gin::V8IsolateMemoryDumpProvider" = type opaque
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.WTF::HashMap.26" = type { %"class.WTF::HashTable.27" }
%"class.WTF::HashTable.27" = type <{ %"struct.WTF::KeyValuePair.30"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.30" = type opaque
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.blink::StringCache"* }
%"class.blink::StringCache" = type { %"class.v8::GlobalValueMap", %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference", %"class.v8::GlobalValueMap.39", %class.scoped_refptr }
%"class.v8::GlobalValueMap" = type { %"class.v8::PersistentValueMapBase" }
%"class.v8::PersistentValueMapBase" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.34", i8* }
%"class.WTF::HashMap.34" = type { %"class.WTF::HashTable.35" }
%"class.WTF::HashTable.35" = type <{ %"struct.WTF::KeyValuePair.38"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.38" = type { %"class.WTF::StringImpl"*, i64 }
%"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference" = type { i64 }
%"class.v8::GlobalValueMap.39" = type { %"class.v8::PersistentValueMapBase.40" }
%"class.v8::PersistentValueMapBase.40" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.41", i8* }
%"class.WTF::HashMap.41" = type { %"class.WTF::HashTable.42" }
%"class.WTF::HashTable.42" = type <{ %"struct.WTF::KeyValuePair.45"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.45" = type { %"class.blink::ParkableStringImpl"*, i64 }
%"class.blink::ParkableStringImpl" = type { %"class.WTF::RefCounted", %"class.WTF::String", %"class.std::__1::unique_ptr.46" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.blink::ParkableStringImpl::ParkableMetadata"* }
%"struct.blink::ParkableStringImpl::ParkableMetadata" = type { %"class.WTF::Mutex", i32, i8, i8, %"class.std::__1::unique_ptr.49", %"class.std::__1::unique_ptr.57", %"class.WTF::Vector.63", i8, i32 }
%"class.std::__1::unique_ptr.49" = type { %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.WTF::Vector"* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.std::__1::unique_ptr.57" = type { %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"class.blink::DiskDataMetadata"* }
%"class.blink::DiskDataMetadata" = type { i64, i64 }
%"class.WTF::Vector.63" = type { %"class.WTF::VectorBuffer.64" }
%"class.WTF::VectorBuffer.64" = type { %"class.WTF::VectorBufferBase", [32 x i8] }
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.blink::V8PrivateProperty"* }
%"class.blink::V8PrivateProperty" = type opaque
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.294, %"class.blink::Member.313", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%"class.v8::Context" = type { i8 }
%class.scoped_refptr.294 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.295", i32, i32, %"class.blink::Persistent.297" }
%"class.WTF::RefCounted.295" = type { %"class.base::RefCounted.296" }
%"class.base::RefCounted.296" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.297" = type { %"class.blink::PersistentBase.298" }
%"class.blink::PersistentBase.298" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.303" }
%"class.WTF::HashMap.303" = type { %"class.WTF::HashTable.304" }
%"class.WTF::HashTable.304" = type <{ %"struct.WTF::KeyValuePair.306"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.306" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference.310" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.307" }
%"class.blink::MemberBase.307" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference.310" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference.310" = type { %"class.v8::TracedReference.311" }
%"class.v8::TracedReference.311" = type { %"class.v8::BasicTracedReference.312" }
%"class.v8::BasicTracedReference.312" = type { %"class.v8::TracedReferenceBase" }
%"class.blink::Member.313" = type { %"class.blink::MemberBase.314" }
%"class.blink::MemberBase.314" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.WTF::Vector.260" = type { %"class.WTF::VectorBuffer.261" }
%"class.WTF::VectorBuffer.261" = type { %"class.WTF::VectorBufferBase.262" }
%"class.WTF::VectorBufferBase.262" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type opaque
%"class.std::__1::unique_ptr.265" = type { %"class.std::__1::__compressed_pair.266" }
%"class.std::__1::__compressed_pair.266" = type { %"struct.std::__1::__compressed_pair_elem.267" }
%"struct.std::__1::__compressed_pair_elem.267" = type { %"class.blink::V8PerIsolateData::Data"* }
%"class.blink::V8PerIsolateData::Data" = type { i32 (...)** }
%"class.blink::Persistent.271" = type { %"class.blink::PersistentBase.272" }
%"class.blink::PersistentBase.272" = type { %"class.blink::V8PerIsolateData::GarbageCollectedData"*, %"class.blink::PersistentNodePtr" }
%"class.blink::V8PerIsolateData::GarbageCollectedData" = type { i32 (...)** }
%"class.blink::Persistent.275" = type { %"class.blink::PersistentBase.276" }
%"class.blink::PersistentBase.276" = type { %"class.blink::ActiveScriptWrappableManager"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ActiveScriptWrappableManager" = type { %"class.blink::HeapVector", i64 }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.281" }
%"class.WTF::Vector.281" = type { %"class.WTF::VectorBuffer.282" }
%"class.WTF::VectorBuffer.282" = type { %"class.WTF::VectorBufferBase.283" }
%"class.WTF::VectorBufferBase.283" = type { %"struct.std::__1::pair.284"*, i32, i32 }
%"struct.std::__1::pair.284" = type { %"class.blink::UntracedMember", %"class.blink::Member" }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::ActiveScriptWrappableBase" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member" = type { %"class.blink::MemberBase.285" }
%"class.blink::MemberBase.285" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::RuntimeCallStats" = type { %"class.blink::RuntimeCallTimer"*, i8, [40 x %"class.blink::RuntimeCallCounter"], %"class.base::TickClock"* }
%"class.blink::RuntimeCallTimer" = type { %"class.blink::RuntimeCallCounter"*, %"class.blink::RuntimeCallTimer"*, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::TickClock"* }
%"class.blink::RuntimeCallCounter" = type { i64, %"class.base::TimeDelta", i8* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.v8::Eternal" = type { %"class.v8::Name"* }
%"class.v8::Name" = type { i8 }
%"class.base::span.315" = type { %"struct.base::internal::ExtentStorage", i8** }
%"struct.base::internal::ExtentStorage" = type { i64 }
%"class.v8::Boolean" = type { i8 }
%"class.v8::Uint32" = type { i8 }
%"class.v8::Int32" = type { i8 }
%"class.v8::String" = type { i8 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.v8::Integer" = type { i8 }
%"class.v8::Number" = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.337" }
%"class.std::__1::__compressed_pair.337" = type { %"struct.std::__1::__compressed_pair_elem.338" }
%"struct.std::__1::__compressed_pair_elem.338" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }

$_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE = comdat any

$_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv = comdat any

$_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = comdat any

@.str = private unnamed_addr constant [30 x i8] c"cannot convert to dictionary.\00", align 1
@_ZZN5blink26V8RTCRtpEncodingParameters6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_24RTCRtpEncodingParametersERNS_14ExceptionStateEE12kValidValues = internal constant [4 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0)], align 16
@.str.1 = private unnamed_addr constant [9 x i8] c"very-low\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"low\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"medium\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"high\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"RTCPriorityType\00", align 1
@_ZZN5blink26V8RTCRtpEncodingParameters6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_24RTCRtpEncodingParametersERNS_14ExceptionStateEE12kValidValues_0 = internal constant [4 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0)], align 16
@_ZZN5blinkL37eternalV8RTCRtpEncodingParametersKeysEPN2v87IsolateEE5kKeys = internal constant [8 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i32 0, i32 0)], align 16
@.str.6 = private unnamed_addr constant [7 x i8] c"active\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"adaptivePtime\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"maxBitrate\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"maxFramerate\00", align 1
@.str.10 = private unnamed_addr constant [16 x i8] c"networkPriority\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"priority\00", align 1
@.str.12 = private unnamed_addr constant [16 x i8] c"scalabilityMode\00", align 1
@.str.13 = private unnamed_addr constant [22 x i8] c"scaleResolutionDownBy\00", align 1
@.ref.tmp = private constant { i64, i8** } { i64 8, i8** getelementptr inbounds ([8 x i8*], [8 x i8*]* @_ZZN5blinkL37eternalV8RTCRtpEncodingParametersKeysEPN2v87IsolateEE5kKeys, i32 0, i32 0) }, align 8
@_ZN5blink26RuntimeEnabledFeaturesBase36is_rtc_svc_scalability_mode_enabled_E = external local_unnamed_addr global i8, align 1
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.14 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.15 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.16 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26V8RTCRtpEncodingParameters6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_24RTCRtpEncodingParametersERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::RTCRtpEncodingParameters"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::TryCatch", align 8
  %6 = alloca %"class.blink::V8StringResource", align 8
  %7 = alloca %"class.WTF::String", align 8
  %8 = alloca %"class.WTF::String", align 8
  %9 = alloca %"class.blink::V8StringResource", align 8
  %10 = alloca %"class.WTF::String", align 8
  %11 = alloca %"class.WTF::String", align 8
  %12 = alloca %"class.blink::V8StringResource", align 8
  %13 = icmp eq %"class.v8::Value"* %1, null
  br i1 %13, label %920, label %14

14:                                               ; preds = %4
  %15 = bitcast %"class.v8::Value"* %1 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = and i64 %16, 3
  %18 = icmp eq i64 %17, 1
  br i1 %18, label %19, label %35

19:                                               ; preds = %14
  %20 = add i64 %16, -1
  %21 = inttoptr i64 %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = and i64 %16, -4294967296
  %24 = zext i32 %22 to i64
  %25 = or i64 %23, %24
  %26 = add i64 %25, 7
  %27 = inttoptr i64 %26 to i16*
  %28 = load i16, i16* %27, align 2
  %29 = icmp eq i16 %28, 67
  br i1 %29, label %30, label %35

30:                                               ; preds = %19
  %31 = add i64 %16, 23
  %32 = inttoptr i64 %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = ashr i32 %33, 1
  switch i32 %34, label %35 [
    i32 5, label %920
    i32 3, label %920
  ]

35:                                               ; preds = %30, %19, %14
  %36 = tail call zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"* nonnull %1) #7
  br i1 %36, label %38, label %37

37:                                               ; preds = %35
  tail call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0)) #7
  br label %920

38:                                               ; preds = %35
  %39 = bitcast %"class.v8::Value"* %1 to %"class.v8::Object"*
  %40 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %2, i64 0, i32 0
  tail call void @_ZN5blink24V8RTCRtpCodingParameters6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_22RTCRtpCodingParametersERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %1, %"class.blink::RTCRtpCodingParameters"* %40, %"class.blink::ExceptionState"* dereferenceable(72) %3) #7
  %41 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %920

44:                                               ; preds = %38
  %45 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %46 = add i64 %45, 8
  %47 = inttoptr i64 %46 to %"class.blink::V8PerIsolateData"**
  %48 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %47, align 8
  %49 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %48, i8* bitcast ([8 x i8*]* @_ZZN5blinkL37eternalV8RTCRtpEncodingParametersKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.315"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.315"*)) #7
  %50 = extractvalue { i64, %"class.v8::Eternal"* } %49, 1
  %51 = bitcast %"class.v8::TryCatch"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %51) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 -86, i64 48, i1 false)
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %5, %"class.v8::Isolate"* %0) #7
  %52 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %0) #7
  %53 = bitcast %"class.v8::Eternal"* %50 to %"class.v8::Value"**
  %54 = load %"class.v8::Value"*, %"class.v8::Value"** %53, align 8
  %55 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %39, %"class.v8::Context"* %52, %"class.v8::Value"* %54) #7
  %56 = icmp eq %"class.v8::Value"* %55, null
  br i1 %56, label %57, label %63

57:                                               ; preds = %44
  %58 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %59 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %60 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %59, align 8
  %61 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %60, i64 5
  %62 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %61, align 8
  call void %62(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %58) #7
  br label %919

63:                                               ; preds = %44
  %64 = bitcast %"class.v8::Value"* %55 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 3
  %67 = icmp eq i64 %66, 1
  br i1 %67, label %68, label %85

68:                                               ; preds = %63
  %69 = add i64 %65, -1
  %70 = inttoptr i64 %69 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = and i64 %65, -4294967296
  %73 = zext i32 %71 to i64
  %74 = or i64 %72, %73
  %75 = add i64 %74, 7
  %76 = inttoptr i64 %75 to i16*
  %77 = load i16, i16* %76, align 2
  %78 = icmp eq i16 %77, 67
  br i1 %78, label %79, label %85

79:                                               ; preds = %68
  %80 = add i64 %65, 23
  %81 = inttoptr i64 %80 to i32*
  %82 = load i32, i32* %81, align 4
  %83 = and i32 %82, -2
  %84 = icmp eq i32 %83, 10
  br i1 %84, label %100, label %85

85:                                               ; preds = %68, %63, %79
  %86 = call zeroext i1 @_ZNK2v85Value9IsBooleanEv(%"class.v8::Value"* nonnull %55) #7
  br i1 %86, label %87, label %90, !prof !2

87:                                               ; preds = %85
  %88 = bitcast %"class.v8::Value"* %55 to %"class.v8::Boolean"*
  %89 = call zeroext i1 @_ZNK2v87Boolean5ValueEv(%"class.v8::Boolean"* nonnull %88) #7
  br label %92

90:                                               ; preds = %85
  %91 = call zeroext i1 @_ZNK2v85Value12BooleanValueEPNS_7IsolateE(%"class.v8::Value"* nonnull %55, %"class.v8::Isolate"* %0) #7
  br label %92

92:                                               ; preds = %87, %90
  %93 = phi i1 [ %89, %87 ], [ %91, %90 ]
  %94 = load i32, i32* %41, align 8
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %919

96:                                               ; preds = %92
  %97 = zext i1 %93 to i8
  %98 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %2, i64 0, i32 6
  store i8 %97, i8* %98, align 1
  %99 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %2, i64 0, i32 1
  store i8 1, i8* %99, align 8
  br label %100

100:                                              ; preds = %96, %79
  %101 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %50, i64 1, i32 0
  %102 = bitcast %"class.v8::Name"** %101 to %"class.v8::Value"**
  %103 = load %"class.v8::Value"*, %"class.v8::Value"** %102, align 8
  %104 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %39, %"class.v8::Context"* %52, %"class.v8::Value"* %103) #7
  %105 = icmp eq %"class.v8::Value"* %104, null
  br i1 %105, label %106, label %112

106:                                              ; preds = %100
  %107 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %108 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %109 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %108, align 8
  %110 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %109, i64 5
  %111 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %110, align 8
  call void %111(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %107) #7
  br label %919

112:                                              ; preds = %100
  %113 = bitcast %"class.v8::Value"* %104 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = and i64 %114, 3
  %116 = icmp eq i64 %115, 1
  br i1 %116, label %117, label %134

117:                                              ; preds = %112
  %118 = add i64 %114, -1
  %119 = inttoptr i64 %118 to i32*
  %120 = load i32, i32* %119, align 4
  %121 = and i64 %114, -4294967296
  %122 = zext i32 %120 to i64
  %123 = or i64 %121, %122
  %124 = add i64 %123, 7
  %125 = inttoptr i64 %124 to i16*
  %126 = load i16, i16* %125, align 2
  %127 = icmp eq i16 %126, 67
  br i1 %127, label %128, label %134

128:                                              ; preds = %117
  %129 = add i64 %114, 23
  %130 = inttoptr i64 %129 to i32*
  %131 = load i32, i32* %130, align 4
  %132 = and i32 %131, -2
  %133 = icmp eq i32 %132, 10
  br i1 %133, label %149, label %134

134:                                              ; preds = %117, %112, %128
  %135 = call zeroext i1 @_ZNK2v85Value9IsBooleanEv(%"class.v8::Value"* nonnull %104) #7
  br i1 %135, label %136, label %139, !prof !2

136:                                              ; preds = %134
  %137 = bitcast %"class.v8::Value"* %104 to %"class.v8::Boolean"*
  %138 = call zeroext i1 @_ZNK2v87Boolean5ValueEv(%"class.v8::Boolean"* nonnull %137) #7
  br label %141

139:                                              ; preds = %134
  %140 = call zeroext i1 @_ZNK2v85Value12BooleanValueEPNS_7IsolateE(%"class.v8::Value"* nonnull %104, %"class.v8::Isolate"* %0) #7
  br label %141

141:                                              ; preds = %136, %139
  %142 = phi i1 [ %138, %136 ], [ %140, %139 ]
  %143 = load i32, i32* %41, align 8
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %919

145:                                              ; preds = %141
  %146 = zext i1 %142 to i8
  %147 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %2, i64 0, i32 7
  store i8 %146, i8* %147, align 2
  %148 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %2, i64 0, i32 2
  store i8 1, i8* %148, align 1
  br label %149

149:                                              ; preds = %145, %128
  %150 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %50, i64 2, i32 0
  %151 = bitcast %"class.v8::Name"** %150 to %"class.v8::Value"**
  %152 = load %"class.v8::Value"*, %"class.v8::Value"** %151, align 8
  %153 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %39, %"class.v8::Context"* %52, %"class.v8::Value"* %152) #7
  %154 = icmp eq %"class.v8::Value"* %153, null
  br i1 %154, label %155, label %161

155:                                              ; preds = %149
  %156 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %157 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %158 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %157, align 8
  %159 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %158, i64 5
  %160 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %159, align 8
  call void %160(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %156) #7
  br label %919

161:                                              ; preds = %149
  %162 = bitcast %"class.v8::Value"* %153 to i64*
  %163 = load i64, i64* %162, align 8
  %164 = and i64 %163, 3
  %165 = icmp eq i64 %164, 1
  br i1 %165, label %166, label %183

166:                                              ; preds = %161
  %167 = add i64 %163, -1
  %168 = inttoptr i64 %167 to i32*
  %169 = load i32, i32* %168, align 4
  %170 = and i64 %163, -4294967296
  %171 = zext i32 %169 to i64
  %172 = or i64 %170, %171
  %173 = add i64 %172, 7
  %174 = inttoptr i64 %173 to i16*
  %175 = load i16, i16* %174, align 2
  %176 = icmp eq i16 %175, 67
  br i1 %176, label %177, label %183

177:                                              ; preds = %166
  %178 = add i64 %163, 23
  %179 = inttoptr i64 %178 to i32*
  %180 = load i32, i32* %179, align 4
  %181 = and i32 %180, -2
  %182 = icmp eq i32 %181, 10
  br i1 %182, label %202, label %183

183:                                              ; preds = %166, %161, %177
  %184 = call zeroext i1 @_ZNK2v85Value8IsUint32Ev(%"class.v8::Value"* nonnull %153) #7
  br i1 %184, label %185, label %188, !prof !2

185:                                              ; preds = %183
  %186 = bitcast %"class.v8::Value"* %153 to %"class.v8::Uint32"*
  %187 = call i32 @_ZNK2v86Uint325ValueEv(%"class.v8::Uint32"* nonnull %186) #7
  br label %195

188:                                              ; preds = %183
  %189 = call zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"* nonnull %153) #7
  br i1 %189, label %190, label %193, !prof !2

190:                                              ; preds = %188
  %191 = bitcast %"class.v8::Value"* %153 to %"class.v8::Int32"*
  %192 = call i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"* nonnull %191) #7
  br label %195

193:                                              ; preds = %188
  %194 = call i32 @_ZN5blink12ToUInt32SlowEPN2v87IsolateENS0_5LocalINS0_5ValueEEENS_30IntegerConversionConfigurationERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %153, i32 0, %"class.blink::ExceptionState"* dereferenceable(72) %3) #7
  br label %195

195:                                              ; preds = %185, %190, %193
  %196 = phi i32 [ %187, %185 ], [ %192, %190 ], [ %194, %193 ]
  %197 = load i32, i32* %41, align 8
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %919

199:                                              ; preds = %195
  %200 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %2, i64 0, i32 8
  store i32 %196, i32* %200, align 8
  %201 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %2, i64 0, i32 3
  store i8 1, i8* %201, align 2
  br label %202

202:                                              ; preds = %199, %177
  %203 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %50, i64 3, i32 0
  %204 = bitcast %"class.v8::Name"** %203 to %"class.v8::Value"**
  %205 = load %"class.v8::Value"*, %"class.v8::Value"** %204, align 8
  %206 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %39, %"class.v8::Context"* %52, %"class.v8::Value"* %205) #7
  %207 = icmp eq %"class.v8::Value"* %206, null
  br i1 %207, label %208, label %214

208:                                              ; preds = %202
  %209 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %210 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %211 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %210, align 8
  %212 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %211, i64 5
  %213 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %212, align 8
  call void %213(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %209) #7
  br label %919

214:                                              ; preds = %202
  %215 = bitcast %"class.v8::Value"* %206 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = and i64 %216, 3
  %218 = icmp eq i64 %217, 1
  br i1 %218, label %219, label %236

219:                                              ; preds = %214
  %220 = add i64 %216, -1
  %221 = inttoptr i64 %220 to i32*
  %222 = load i32, i32* %221, align 4
  %223 = and i64 %216, -4294967296
  %224 = zext i32 %222 to i64
  %225 = or i64 %223, %224
  %226 = add i64 %225, 7
  %227 = inttoptr i64 %226 to i16*
  %228 = load i16, i16* %227, align 2
  %229 = icmp eq i16 %228, 67
  br i1 %229, label %230, label %236

230:                                              ; preds = %219
  %231 = add i64 %216, 23
  %232 = inttoptr i64 %231 to i32*
  %233 = load i32, i32* %232, align 4
  %234 = and i32 %233, -2
  %235 = icmp eq i32 %234, 10
  br i1 %235, label %243, label %236

236:                                              ; preds = %219, %214, %230
  %237 = call double @_ZN5blink18ToRestrictedDoubleEPN2v87IsolateENS0_5LocalINS0_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %206, %"class.blink::ExceptionState"* dereferenceable(72) %3) #7
  %238 = load i32, i32* %41, align 8
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %240, label %919

240:                                              ; preds = %236
  %241 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %2, i64 0, i32 9
  store double %237, double* %241, align 8
  %242 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %2, i64 0, i32 4
  store i8 1, i8* %242, align 1
  br label %243

243:                                              ; preds = %240, %230
  %244 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %50, i64 4, i32 0
  %245 = bitcast %"class.v8::Name"** %244 to %"class.v8::Value"**
  %246 = load %"class.v8::Value"*, %"class.v8::Value"** %245, align 8
  %247 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %39, %"class.v8::Context"* %52, %"class.v8::Value"* %246) #7
  %248 = icmp eq %"class.v8::Value"* %247, null
  br i1 %248, label %249, label %255

249:                                              ; preds = %243
  %250 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %251 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %252 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %251, align 8
  %253 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %252, i64 5
  %254 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %253, align 8
  call void %254(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %250) #7
  br label %919

255:                                              ; preds = %243
  %256 = bitcast %"class.v8::Value"* %247 to i64*
  %257 = load i64, i64* %256, align 8
  %258 = and i64 %257, 3
  %259 = icmp eq i64 %258, 1
  br i1 %259, label %260, label %277

260:                                              ; preds = %255
  %261 = add i64 %257, -1
  %262 = inttoptr i64 %261 to i32*
  %263 = load i32, i32* %262, align 4
  %264 = and i64 %257, -4294967296
  %265 = zext i32 %263 to i64
  %266 = or i64 %264, %265
  %267 = add i64 %266, 7
  %268 = inttoptr i64 %267 to i16*
  %269 = load i16, i16* %268, align 2
  %270 = icmp eq i16 %269, 67
  br i1 %270, label %271, label %277

271:                                              ; preds = %260
  %272 = add i64 %257, 23
  %273 = inttoptr i64 %272 to i32*
  %274 = load i32, i32* %273, align 4
  %275 = and i32 %274, -2
  %276 = icmp eq i32 %275, 10
  br i1 %276, label %483, label %277

277:                                              ; preds = %260, %255, %271
  %278 = bitcast %"class.blink::V8StringResource"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %278) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %278, i8 -86, i64 152, i1 false)
  %279 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %247, %"class.v8::Value"** %279, align 8
  %280 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 1
  store i32 0, i32* %280, align 8
  %281 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %281, align 8
  %282 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 3, i32 1
  %283 = bitcast %"class.std::__1::unique_ptr"* %282 to i64*
  store i64 0, i64* %283, align 8
  %284 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %6, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %284, label %285, label %461

285:                                              ; preds = %277
  %286 = bitcast %"class.WTF::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %286) #7
  %287 = load %"class.v8::Value"*, %"class.v8::Value"** %279, align 8
  %288 = icmp eq %"class.v8::Value"* %287, null
  br i1 %288, label %293, label %289, !prof !3

289:                                              ; preds = %285
  %290 = bitcast %"class.v8::Value"* %287 to %"class.v8::String"*
  %291 = load i32, i32* %280, align 8
  %292 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %290, i32 %291) #7
  br label %313

293:                                              ; preds = %285
  %294 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %281, align 8
  %295 = icmp eq %"class.WTF::StringImpl"* %294, null
  br i1 %295, label %313, label %296

296:                                              ; preds = %293
  %297 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %294, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %298 = load atomic i32, i32* %297 monotonic, align 4
  %299 = and i32 %298, 2
  %300 = icmp eq i32 %299, 0
  br i1 %300, label %301, label %313

301:                                              ; preds = %296
  %302 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %294, i64 0, i32 0
  %303 = load i32, i32* %302, align 4
  %304 = zext i32 %303 to i33
  %305 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %304, i33 1) #7
  %306 = extractvalue { i33, i1 } %305, 1
  %307 = extractvalue { i33, i1 } %305, 0
  %308 = icmp slt i33 %307, 0
  %309 = or i1 %306, %308
  br i1 %309, label %310, label %311, !prof !3

310:                                              ; preds = %301
  call void @llvm.trap() #7
  unreachable

311:                                              ; preds = %301
  %312 = trunc i33 %307 to i32
  store i32 %312, i32* %302, align 4
  br label %313

313:                                              ; preds = %289, %293, %296, %311
  %314 = phi %"class.WTF::StringImpl"* [ %292, %289 ], [ null, %293 ], [ %294, %296 ], [ %294, %311 ]
  %315 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %314, %"class.WTF::StringImpl"** %315, align 8
  %316 = bitcast %"class.WTF::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %316) #7
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %8, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0), i64 15) #7
  %317 = call zeroext i1 @_ZN5blink11IsValidEnumERKN3WTF6StringEPKPKcmS3_RNS_14ExceptionStateE(%"class.WTF::String"* nonnull dereferenceable(8) %7, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZZN5blink26V8RTCRtpEncodingParameters6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_24RTCRtpEncodingParametersERNS_14ExceptionStateEE12kValidValues, i64 0, i64 0), i64 4, %"class.WTF::String"* nonnull dereferenceable(8) %8, %"class.blink::ExceptionState"* dereferenceable(72) %3) #7
  %318 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  %319 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %318, align 8
  %320 = icmp eq %"class.WTF::StringImpl"* %319, null
  br i1 %320, label %334, label %321

321:                                              ; preds = %313
  %322 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %319, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %323 = load atomic i32, i32* %322 monotonic, align 4
  %324 = and i32 %323, 2
  %325 = icmp eq i32 %324, 0
  %326 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %319, i64 0, i32 0
  %327 = load i32, i32* %326, align 4
  br i1 %325, label %328, label %330

328:                                              ; preds = %321
  %329 = add i32 %327, -1
  store i32 %329, i32* %326, align 4
  br label %330

330:                                              ; preds = %328, %321
  %331 = phi i32 [ %329, %328 ], [ %327, %321 ]
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %333, label %334

333:                                              ; preds = %330
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %319) #7
  br label %334

334:                                              ; preds = %313, %330, %333
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %316) #7
  %335 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %315, align 8
  %336 = icmp eq %"class.WTF::StringImpl"* %335, null
  br i1 %336, label %350, label %337

337:                                              ; preds = %334
  %338 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %335, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %339 = load atomic i32, i32* %338 monotonic, align 4
  %340 = and i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %335, i64 0, i32 0
  %343 = load i32, i32* %342, align 4
  br i1 %341, label %344, label %346

344:                                              ; preds = %337
  %345 = add i32 %343, -1
  store i32 %345, i32* %342, align 4
  br label %346

346:                                              ; preds = %344, %337
  %347 = phi i32 [ %345, %344 ], [ %343, %337 ]
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %349, label %350

349:                                              ; preds = %346
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %335) #7
  br label %350

350:                                              ; preds = %334, %346, %349
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %286) #7
  br i1 %317, label %351, label %461

351:                                              ; preds = %350
  %352 = load %"class.v8::Value"*, %"class.v8::Value"** %279, align 8
  %353 = icmp eq %"class.v8::Value"* %352, null
  br i1 %353, label %354, label %378, !prof !3

354:                                              ; preds = %351
  %355 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %281, align 8
  %356 = icmp eq %"class.WTF::StringImpl"* %355, null
  br i1 %356, label %357, label %359

357:                                              ; preds = %354
  %358 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %2, i64 0, i32 10
  br label %403

359:                                              ; preds = %354
  %360 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %355, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %361 = load atomic i32, i32* %360 monotonic, align 4
  %362 = and i32 %361, 2
  %363 = icmp eq i32 %362, 0
  br i1 %363, label %364, label %376

364:                                              ; preds = %359
  %365 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %355, i64 0, i32 0
  %366 = load i32, i32* %365, align 4
  %367 = zext i32 %366 to i33
  %368 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %367, i33 1) #7
  %369 = extractvalue { i33, i1 } %368, 1
  %370 = extractvalue { i33, i1 } %368, 0
  %371 = icmp slt i33 %370, 0
  %372 = or i1 %369, %371
  br i1 %372, label %373, label %374, !prof !3

373:                                              ; preds = %364
  call void @llvm.trap() #7
  unreachable

374:                                              ; preds = %364
  %375 = trunc i33 %370 to i32
  store i32 %375, i32* %365, align 4
  br label %376

376:                                              ; preds = %359, %374
  %377 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %2, i64 0, i32 10
  br label %384

378:                                              ; preds = %351
  %379 = bitcast %"class.v8::Value"* %352 to %"class.v8::String"*
  %380 = load i32, i32* %280, align 8
  %381 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %379, i32 %380) #7
  %382 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %2, i64 0, i32 10
  %383 = icmp eq %"class.WTF::StringImpl"* %381, null
  br i1 %383, label %403, label %384

384:                                              ; preds = %376, %378
  %385 = phi %"class.WTF::String"* [ %377, %376 ], [ %382, %378 ]
  %386 = phi %"class.WTF::StringImpl"* [ %355, %376 ], [ %381, %378 ]
  %387 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %386, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %388 = load atomic i32, i32* %387 monotonic, align 4
  %389 = and i32 %388, 2
  %390 = icmp eq i32 %389, 0
  br i1 %390, label %391, label %403

391:                                              ; preds = %384
  %392 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %386, i64 0, i32 0
  %393 = load i32, i32* %392, align 4
  %394 = zext i32 %393 to i33
  %395 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %394, i33 1) #7
  %396 = extractvalue { i33, i1 } %395, 1
  %397 = extractvalue { i33, i1 } %395, 0
  %398 = icmp slt i33 %397, 0
  %399 = or i1 %396, %398
  br i1 %399, label %400, label %401, !prof !3

400:                                              ; preds = %391
  call void @llvm.trap() #7
  unreachable

401:                                              ; preds = %391
  %402 = trunc i33 %397 to i32
  store i32 %402, i32* %392, align 4
  br label %403

403:                                              ; preds = %357, %401, %384, %378
  %404 = phi i1 [ false, %401 ], [ false, %384 ], [ true, %378 ], [ true, %357 ]
  %405 = phi %"class.WTF::String"* [ %385, %401 ], [ %385, %384 ], [ %382, %378 ], [ %358, %357 ]
  %406 = phi %"class.WTF::StringImpl"* [ %386, %401 ], [ %386, %384 ], [ null, %378 ], [ null, %357 ]
  %407 = ptrtoint %"class.WTF::StringImpl"* %406 to i64
  %408 = bitcast %"class.WTF::String"* %405 to i64*
  %409 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %405, i64 0, i32 0, i32 0
  %410 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %409, align 8
  store i64 %407, i64* %408, align 8
  %411 = icmp eq %"class.WTF::StringImpl"* %410, null
  br i1 %411, label %425, label %412

412:                                              ; preds = %403
  %413 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %410, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %414 = load atomic i32, i32* %413 monotonic, align 4
  %415 = and i32 %414, 2
  %416 = icmp eq i32 %415, 0
  %417 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %410, i64 0, i32 0
  %418 = load i32, i32* %417, align 4
  br i1 %416, label %419, label %421

419:                                              ; preds = %412
  %420 = add i32 %418, -1
  store i32 %420, i32* %417, align 4
  br label %421

421:                                              ; preds = %419, %412
  %422 = phi i32 [ %420, %419 ], [ %418, %412 ]
  %423 = icmp eq i32 %422, 0
  br i1 %423, label %424, label %425

424:                                              ; preds = %421
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %410) #7
  br label %425

425:                                              ; preds = %403, %421, %424
  br i1 %404, label %439, label %426

426:                                              ; preds = %425
  %427 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %406, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %428 = load atomic i32, i32* %427 monotonic, align 4
  %429 = and i32 %428, 2
  %430 = icmp eq i32 %429, 0
  %431 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %406, i64 0, i32 0
  %432 = load i32, i32* %431, align 4
  br i1 %430, label %433, label %435

433:                                              ; preds = %426
  %434 = add i32 %432, -1
  store i32 %434, i32* %431, align 4
  br label %435

435:                                              ; preds = %433, %426
  %436 = phi i32 [ %434, %433 ], [ %432, %426 ]
  %437 = icmp eq i32 %436, 0
  br i1 %437, label %438, label %439

438:                                              ; preds = %435
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %406) #7
  br label %439

439:                                              ; preds = %425, %435, %438
  %440 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %441 = load i8*, i8** %440, align 8
  store i8* null, i8** %440, align 8
  %442 = icmp eq i8* %441, null
  br i1 %442, label %444, label %443

443:                                              ; preds = %439
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %441) #7
  br label %444

444:                                              ; preds = %443, %439
  %445 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %281, align 8
  %446 = icmp eq %"class.WTF::StringImpl"* %445, null
  br i1 %446, label %460, label %447

447:                                              ; preds = %444
  %448 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %445, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %449 = load atomic i32, i32* %448 monotonic, align 4
  %450 = and i32 %449, 2
  %451 = icmp eq i32 %450, 0
  %452 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %445, i64 0, i32 0
  %453 = load i32, i32* %452, align 4
  br i1 %451, label %454, label %456

454:                                              ; preds = %447
  %455 = add i32 %453, -1
  store i32 %455, i32* %452, align 4
  br label %456

456:                                              ; preds = %454, %447
  %457 = phi i32 [ %455, %454 ], [ %453, %447 ]
  %458 = icmp eq i32 %457, 0
  br i1 %458, label %459, label %460

459:                                              ; preds = %456
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %445) #7
  br label %460

460:                                              ; preds = %444, %456, %459
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %278) #7
  br label %483

461:                                              ; preds = %350, %277
  %462 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %463 = load i8*, i8** %462, align 8
  store i8* null, i8** %462, align 8
  %464 = icmp eq i8* %463, null
  br i1 %464, label %466, label %465

465:                                              ; preds = %461
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %463) #7
  br label %466

466:                                              ; preds = %465, %461
  %467 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %281, align 8
  %468 = icmp eq %"class.WTF::StringImpl"* %467, null
  br i1 %468, label %482, label %469

469:                                              ; preds = %466
  %470 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %467, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %471 = load atomic i32, i32* %470 monotonic, align 4
  %472 = and i32 %471, 2
  %473 = icmp eq i32 %472, 0
  %474 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %467, i64 0, i32 0
  %475 = load i32, i32* %474, align 4
  br i1 %473, label %476, label %478

476:                                              ; preds = %469
  %477 = add i32 %475, -1
  store i32 %477, i32* %474, align 4
  br label %478

478:                                              ; preds = %476, %469
  %479 = phi i32 [ %477, %476 ], [ %475, %469 ]
  %480 = icmp eq i32 %479, 0
  br i1 %480, label %481, label %482

481:                                              ; preds = %478
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %467) #7
  br label %482

482:                                              ; preds = %466, %478, %481
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %278) #7
  br label %919

483:                                              ; preds = %460, %271
  %484 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %50, i64 5, i32 0
  %485 = bitcast %"class.v8::Name"** %484 to %"class.v8::Value"**
  %486 = load %"class.v8::Value"*, %"class.v8::Value"** %485, align 8
  %487 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %39, %"class.v8::Context"* %52, %"class.v8::Value"* %486) #7
  %488 = icmp eq %"class.v8::Value"* %487, null
  br i1 %488, label %489, label %495

489:                                              ; preds = %483
  %490 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %491 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %492 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %491, align 8
  %493 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %492, i64 5
  %494 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %493, align 8
  call void %494(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %490) #7
  br label %919

495:                                              ; preds = %483
  %496 = bitcast %"class.v8::Value"* %487 to i64*
  %497 = load i64, i64* %496, align 8
  %498 = and i64 %497, 3
  %499 = icmp eq i64 %498, 1
  br i1 %499, label %500, label %517

500:                                              ; preds = %495
  %501 = add i64 %497, -1
  %502 = inttoptr i64 %501 to i32*
  %503 = load i32, i32* %502, align 4
  %504 = and i64 %497, -4294967296
  %505 = zext i32 %503 to i64
  %506 = or i64 %504, %505
  %507 = add i64 %506, 7
  %508 = inttoptr i64 %507 to i16*
  %509 = load i16, i16* %508, align 2
  %510 = icmp eq i16 %509, 67
  br i1 %510, label %511, label %517

511:                                              ; preds = %500
  %512 = add i64 %497, 23
  %513 = inttoptr i64 %512 to i32*
  %514 = load i32, i32* %513, align 4
  %515 = and i32 %514, -2
  %516 = icmp eq i32 %515, 10
  br i1 %516, label %723, label %517

517:                                              ; preds = %500, %495, %511
  %518 = bitcast %"class.blink::V8StringResource"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %518) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %518, i8 -86, i64 152, i1 false)
  %519 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %487, %"class.v8::Value"** %519, align 8
  %520 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 1
  store i32 0, i32* %520, align 8
  %521 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %521, align 8
  %522 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1
  %523 = bitcast %"class.std::__1::unique_ptr"* %522 to i64*
  store i64 0, i64* %523, align 8
  %524 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %9, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %524, label %525, label %701

525:                                              ; preds = %517
  %526 = bitcast %"class.WTF::String"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %526) #7
  %527 = load %"class.v8::Value"*, %"class.v8::Value"** %519, align 8
  %528 = icmp eq %"class.v8::Value"* %527, null
  br i1 %528, label %533, label %529, !prof !3

529:                                              ; preds = %525
  %530 = bitcast %"class.v8::Value"* %527 to %"class.v8::String"*
  %531 = load i32, i32* %520, align 8
  %532 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %530, i32 %531) #7
  br label %553

533:                                              ; preds = %525
  %534 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %521, align 8
  %535 = icmp eq %"class.WTF::StringImpl"* %534, null
  br i1 %535, label %553, label %536

536:                                              ; preds = %533
  %537 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %534, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %538 = load atomic i32, i32* %537 monotonic, align 4
  %539 = and i32 %538, 2
  %540 = icmp eq i32 %539, 0
  br i1 %540, label %541, label %553

541:                                              ; preds = %536
  %542 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %534, i64 0, i32 0
  %543 = load i32, i32* %542, align 4
  %544 = zext i32 %543 to i33
  %545 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %544, i33 1) #7
  %546 = extractvalue { i33, i1 } %545, 1
  %547 = extractvalue { i33, i1 } %545, 0
  %548 = icmp slt i33 %547, 0
  %549 = or i1 %546, %548
  br i1 %549, label %550, label %551, !prof !3

550:                                              ; preds = %541
  call void @llvm.trap() #7
  unreachable

551:                                              ; preds = %541
  %552 = trunc i33 %547 to i32
  store i32 %552, i32* %542, align 4
  br label %553

553:                                              ; preds = %529, %533, %536, %551
  %554 = phi %"class.WTF::StringImpl"* [ %532, %529 ], [ null, %533 ], [ %534, %536 ], [ %534, %551 ]
  %555 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %10, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %554, %"class.WTF::StringImpl"** %555, align 8
  %556 = bitcast %"class.WTF::String"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %556) #7
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %11, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0), i64 15) #7
  %557 = call zeroext i1 @_ZN5blink11IsValidEnumERKN3WTF6StringEPKPKcmS3_RNS_14ExceptionStateE(%"class.WTF::String"* nonnull dereferenceable(8) %10, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZZN5blink26V8RTCRtpEncodingParameters6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_24RTCRtpEncodingParametersERNS_14ExceptionStateEE12kValidValues_0, i64 0, i64 0), i64 4, %"class.WTF::String"* nonnull dereferenceable(8) %11, %"class.blink::ExceptionState"* dereferenceable(72) %3) #7
  %558 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 0, i32 0, i32 0
  %559 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %558, align 8
  %560 = icmp eq %"class.WTF::StringImpl"* %559, null
  br i1 %560, label %574, label %561

561:                                              ; preds = %553
  %562 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %559, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %563 = load atomic i32, i32* %562 monotonic, align 4
  %564 = and i32 %563, 2
  %565 = icmp eq i32 %564, 0
  %566 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %559, i64 0, i32 0
  %567 = load i32, i32* %566, align 4
  br i1 %565, label %568, label %570

568:                                              ; preds = %561
  %569 = add i32 %567, -1
  store i32 %569, i32* %566, align 4
  br label %570

570:                                              ; preds = %568, %561
  %571 = phi i32 [ %569, %568 ], [ %567, %561 ]
  %572 = icmp eq i32 %571, 0
  br i1 %572, label %573, label %574

573:                                              ; preds = %570
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %559) #7
  br label %574

574:                                              ; preds = %553, %570, %573
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %556) #7
  %575 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %555, align 8
  %576 = icmp eq %"class.WTF::StringImpl"* %575, null
  br i1 %576, label %590, label %577

577:                                              ; preds = %574
  %578 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %575, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %579 = load atomic i32, i32* %578 monotonic, align 4
  %580 = and i32 %579, 2
  %581 = icmp eq i32 %580, 0
  %582 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %575, i64 0, i32 0
  %583 = load i32, i32* %582, align 4
  br i1 %581, label %584, label %586

584:                                              ; preds = %577
  %585 = add i32 %583, -1
  store i32 %585, i32* %582, align 4
  br label %586

586:                                              ; preds = %584, %577
  %587 = phi i32 [ %585, %584 ], [ %583, %577 ]
  %588 = icmp eq i32 %587, 0
  br i1 %588, label %589, label %590

589:                                              ; preds = %586
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %575) #7
  br label %590

590:                                              ; preds = %574, %586, %589
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %526) #7
  br i1 %557, label %591, label %701

591:                                              ; preds = %590
  %592 = load %"class.v8::Value"*, %"class.v8::Value"** %519, align 8
  %593 = icmp eq %"class.v8::Value"* %592, null
  br i1 %593, label %594, label %618, !prof !3

594:                                              ; preds = %591
  %595 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %521, align 8
  %596 = icmp eq %"class.WTF::StringImpl"* %595, null
  br i1 %596, label %597, label %599

597:                                              ; preds = %594
  %598 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %2, i64 0, i32 11
  br label %643

599:                                              ; preds = %594
  %600 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %595, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %601 = load atomic i32, i32* %600 monotonic, align 4
  %602 = and i32 %601, 2
  %603 = icmp eq i32 %602, 0
  br i1 %603, label %604, label %616

604:                                              ; preds = %599
  %605 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %595, i64 0, i32 0
  %606 = load i32, i32* %605, align 4
  %607 = zext i32 %606 to i33
  %608 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %607, i33 1) #7
  %609 = extractvalue { i33, i1 } %608, 1
  %610 = extractvalue { i33, i1 } %608, 0
  %611 = icmp slt i33 %610, 0
  %612 = or i1 %609, %611
  br i1 %612, label %613, label %614, !prof !3

613:                                              ; preds = %604
  call void @llvm.trap() #7
  unreachable

614:                                              ; preds = %604
  %615 = trunc i33 %610 to i32
  store i32 %615, i32* %605, align 4
  br label %616

616:                                              ; preds = %599, %614
  %617 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %2, i64 0, i32 11
  br label %624

618:                                              ; preds = %591
  %619 = bitcast %"class.v8::Value"* %592 to %"class.v8::String"*
  %620 = load i32, i32* %520, align 8
  %621 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %619, i32 %620) #7
  %622 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %2, i64 0, i32 11
  %623 = icmp eq %"class.WTF::StringImpl"* %621, null
  br i1 %623, label %643, label %624

624:                                              ; preds = %616, %618
  %625 = phi %"class.WTF::String"* [ %617, %616 ], [ %622, %618 ]
  %626 = phi %"class.WTF::StringImpl"* [ %595, %616 ], [ %621, %618 ]
  %627 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %626, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %628 = load atomic i32, i32* %627 monotonic, align 4
  %629 = and i32 %628, 2
  %630 = icmp eq i32 %629, 0
  br i1 %630, label %631, label %643

631:                                              ; preds = %624
  %632 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %626, i64 0, i32 0
  %633 = load i32, i32* %632, align 4
  %634 = zext i32 %633 to i33
  %635 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %634, i33 1) #7
  %636 = extractvalue { i33, i1 } %635, 1
  %637 = extractvalue { i33, i1 } %635, 0
  %638 = icmp slt i33 %637, 0
  %639 = or i1 %636, %638
  br i1 %639, label %640, label %641, !prof !3

640:                                              ; preds = %631
  call void @llvm.trap() #7
  unreachable

641:                                              ; preds = %631
  %642 = trunc i33 %637 to i32
  store i32 %642, i32* %632, align 4
  br label %643

643:                                              ; preds = %597, %641, %624, %618
  %644 = phi i1 [ false, %641 ], [ false, %624 ], [ true, %618 ], [ true, %597 ]
  %645 = phi %"class.WTF::String"* [ %625, %641 ], [ %625, %624 ], [ %622, %618 ], [ %598, %597 ]
  %646 = phi %"class.WTF::StringImpl"* [ %626, %641 ], [ %626, %624 ], [ null, %618 ], [ null, %597 ]
  %647 = ptrtoint %"class.WTF::StringImpl"* %646 to i64
  %648 = bitcast %"class.WTF::String"* %645 to i64*
  %649 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %645, i64 0, i32 0, i32 0
  %650 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %649, align 8
  store i64 %647, i64* %648, align 8
  %651 = icmp eq %"class.WTF::StringImpl"* %650, null
  br i1 %651, label %665, label %652

652:                                              ; preds = %643
  %653 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %650, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %654 = load atomic i32, i32* %653 monotonic, align 4
  %655 = and i32 %654, 2
  %656 = icmp eq i32 %655, 0
  %657 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %650, i64 0, i32 0
  %658 = load i32, i32* %657, align 4
  br i1 %656, label %659, label %661

659:                                              ; preds = %652
  %660 = add i32 %658, -1
  store i32 %660, i32* %657, align 4
  br label %661

661:                                              ; preds = %659, %652
  %662 = phi i32 [ %660, %659 ], [ %658, %652 ]
  %663 = icmp eq i32 %662, 0
  br i1 %663, label %664, label %665

664:                                              ; preds = %661
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %650) #7
  br label %665

665:                                              ; preds = %643, %661, %664
  br i1 %644, label %679, label %666

666:                                              ; preds = %665
  %667 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %646, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %668 = load atomic i32, i32* %667 monotonic, align 4
  %669 = and i32 %668, 2
  %670 = icmp eq i32 %669, 0
  %671 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %646, i64 0, i32 0
  %672 = load i32, i32* %671, align 4
  br i1 %670, label %673, label %675

673:                                              ; preds = %666
  %674 = add i32 %672, -1
  store i32 %674, i32* %671, align 4
  br label %675

675:                                              ; preds = %673, %666
  %676 = phi i32 [ %674, %673 ], [ %672, %666 ]
  %677 = icmp eq i32 %676, 0
  br i1 %677, label %678, label %679

678:                                              ; preds = %675
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %646) #7
  br label %679

679:                                              ; preds = %665, %675, %678
  %680 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %681 = load i8*, i8** %680, align 8
  store i8* null, i8** %680, align 8
  %682 = icmp eq i8* %681, null
  br i1 %682, label %684, label %683

683:                                              ; preds = %679
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %681) #7
  br label %684

684:                                              ; preds = %683, %679
  %685 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %521, align 8
  %686 = icmp eq %"class.WTF::StringImpl"* %685, null
  br i1 %686, label %700, label %687

687:                                              ; preds = %684
  %688 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %685, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %689 = load atomic i32, i32* %688 monotonic, align 4
  %690 = and i32 %689, 2
  %691 = icmp eq i32 %690, 0
  %692 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %685, i64 0, i32 0
  %693 = load i32, i32* %692, align 4
  br i1 %691, label %694, label %696

694:                                              ; preds = %687
  %695 = add i32 %693, -1
  store i32 %695, i32* %692, align 4
  br label %696

696:                                              ; preds = %694, %687
  %697 = phi i32 [ %695, %694 ], [ %693, %687 ]
  %698 = icmp eq i32 %697, 0
  br i1 %698, label %699, label %700

699:                                              ; preds = %696
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %685) #7
  br label %700

700:                                              ; preds = %684, %696, %699
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %518) #7
  br label %723

701:                                              ; preds = %590, %517
  %702 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %703 = load i8*, i8** %702, align 8
  store i8* null, i8** %702, align 8
  %704 = icmp eq i8* %703, null
  br i1 %704, label %706, label %705

705:                                              ; preds = %701
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %703) #7
  br label %706

706:                                              ; preds = %705, %701
  %707 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %521, align 8
  %708 = icmp eq %"class.WTF::StringImpl"* %707, null
  br i1 %708, label %722, label %709

709:                                              ; preds = %706
  %710 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %707, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %711 = load atomic i32, i32* %710 monotonic, align 4
  %712 = and i32 %711, 2
  %713 = icmp eq i32 %712, 0
  %714 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %707, i64 0, i32 0
  %715 = load i32, i32* %714, align 4
  br i1 %713, label %716, label %718

716:                                              ; preds = %709
  %717 = add i32 %715, -1
  store i32 %717, i32* %714, align 4
  br label %718

718:                                              ; preds = %716, %709
  %719 = phi i32 [ %717, %716 ], [ %715, %709 ]
  %720 = icmp eq i32 %719, 0
  br i1 %720, label %721, label %722

721:                                              ; preds = %718
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %707) #7
  br label %722

722:                                              ; preds = %706, %718, %721
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %518) #7
  br label %919

723:                                              ; preds = %700, %511
  %724 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %50, i64 7, i32 0
  %725 = bitcast %"class.v8::Name"** %724 to %"class.v8::Value"**
  %726 = load %"class.v8::Value"*, %"class.v8::Value"** %725, align 8
  %727 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %39, %"class.v8::Context"* %52, %"class.v8::Value"* %726) #7
  %728 = icmp eq %"class.v8::Value"* %727, null
  br i1 %728, label %729, label %735

729:                                              ; preds = %723
  %730 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %731 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %732 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %731, align 8
  %733 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %732, i64 5
  %734 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %733, align 8
  call void %734(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %730) #7
  br label %919

735:                                              ; preds = %723
  %736 = bitcast %"class.v8::Value"* %727 to i64*
  %737 = load i64, i64* %736, align 8
  %738 = and i64 %737, 3
  %739 = icmp eq i64 %738, 1
  br i1 %739, label %740, label %757

740:                                              ; preds = %735
  %741 = add i64 %737, -1
  %742 = inttoptr i64 %741 to i32*
  %743 = load i32, i32* %742, align 4
  %744 = and i64 %737, -4294967296
  %745 = zext i32 %743 to i64
  %746 = or i64 %744, %745
  %747 = add i64 %746, 7
  %748 = inttoptr i64 %747 to i16*
  %749 = load i16, i16* %748, align 2
  %750 = icmp eq i16 %749, 67
  br i1 %750, label %751, label %757

751:                                              ; preds = %740
  %752 = add i64 %737, 23
  %753 = inttoptr i64 %752 to i32*
  %754 = load i32, i32* %753, align 4
  %755 = and i32 %754, -2
  %756 = icmp eq i32 %755, 10
  br i1 %756, label %764, label %757

757:                                              ; preds = %740, %735, %751
  %758 = call double @_ZN5blink18ToRestrictedDoubleEPN2v87IsolateENS0_5LocalINS0_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %727, %"class.blink::ExceptionState"* dereferenceable(72) %3) #7
  %759 = load i32, i32* %41, align 8
  %760 = icmp eq i32 %759, 0
  br i1 %760, label %761, label %919

761:                                              ; preds = %757
  %762 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %2, i64 0, i32 13
  store double %758, double* %762, align 8
  %763 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %2, i64 0, i32 5
  store i8 1, i8* %763, align 4
  br label %764

764:                                              ; preds = %761, %751
  %765 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase36is_rtc_svc_scalability_mode_enabled_E, align 1, !range !4
  %766 = icmp eq i8 %765, 0
  br i1 %766, label %919, label %767

767:                                              ; preds = %764
  %768 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %50, i64 6, i32 0
  %769 = bitcast %"class.v8::Name"** %768 to %"class.v8::Value"**
  %770 = load %"class.v8::Value"*, %"class.v8::Value"** %769, align 8
  %771 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %39, %"class.v8::Context"* %52, %"class.v8::Value"* %770) #7
  %772 = icmp eq %"class.v8::Value"* %771, null
  br i1 %772, label %773, label %779

773:                                              ; preds = %767
  %774 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %775 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %776 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %775, align 8
  %777 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %776, i64 5
  %778 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %777, align 8
  call void %778(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %774) #7
  br label %919

779:                                              ; preds = %767
  %780 = bitcast %"class.v8::Value"* %771 to i64*
  %781 = load i64, i64* %780, align 8
  %782 = and i64 %781, 3
  %783 = icmp eq i64 %782, 1
  br i1 %783, label %784, label %801

784:                                              ; preds = %779
  %785 = add i64 %781, -1
  %786 = inttoptr i64 %785 to i32*
  %787 = load i32, i32* %786, align 4
  %788 = and i64 %781, -4294967296
  %789 = zext i32 %787 to i64
  %790 = or i64 %788, %789
  %791 = add i64 %790, 7
  %792 = inttoptr i64 %791 to i16*
  %793 = load i16, i16* %792, align 2
  %794 = icmp eq i16 %793, 67
  br i1 %794, label %795, label %801

795:                                              ; preds = %784
  %796 = add i64 %781, 23
  %797 = inttoptr i64 %796 to i32*
  %798 = load i32, i32* %797, align 4
  %799 = and i32 %798, -2
  %800 = icmp eq i32 %799, 10
  br i1 %800, label %919, label %801

801:                                              ; preds = %784, %779, %795
  %802 = bitcast %"class.blink::V8StringResource"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %802) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %802, i8 -86, i64 152, i1 false)
  %803 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %771, %"class.v8::Value"** %803, align 8
  %804 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 1
  store i32 0, i32* %804, align 8
  %805 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %805, align 8
  %806 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 3, i32 1
  %807 = bitcast %"class.std::__1::unique_ptr"* %806 to i64*
  store i64 0, i64* %807, align 8
  %808 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %12, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %808, label %809, label %897

809:                                              ; preds = %801
  %810 = load %"class.v8::Value"*, %"class.v8::Value"** %803, align 8
  %811 = icmp eq %"class.v8::Value"* %810, null
  br i1 %811, label %812, label %836, !prof !3

812:                                              ; preds = %809
  %813 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %805, align 8
  %814 = icmp eq %"class.WTF::StringImpl"* %813, null
  br i1 %814, label %815, label %817

815:                                              ; preds = %812
  %816 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %2, i64 0, i32 12
  br label %861

817:                                              ; preds = %812
  %818 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %813, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %819 = load atomic i32, i32* %818 monotonic, align 4
  %820 = and i32 %819, 2
  %821 = icmp eq i32 %820, 0
  br i1 %821, label %822, label %834

822:                                              ; preds = %817
  %823 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %813, i64 0, i32 0
  %824 = load i32, i32* %823, align 4
  %825 = zext i32 %824 to i33
  %826 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %825, i33 1) #7
  %827 = extractvalue { i33, i1 } %826, 1
  %828 = extractvalue { i33, i1 } %826, 0
  %829 = icmp slt i33 %828, 0
  %830 = or i1 %827, %829
  br i1 %830, label %831, label %832, !prof !3

831:                                              ; preds = %822
  call void @llvm.trap() #7
  unreachable

832:                                              ; preds = %822
  %833 = trunc i33 %828 to i32
  store i32 %833, i32* %823, align 4
  br label %834

834:                                              ; preds = %817, %832
  %835 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %2, i64 0, i32 12
  br label %842

836:                                              ; preds = %809
  %837 = bitcast %"class.v8::Value"* %810 to %"class.v8::String"*
  %838 = load i32, i32* %804, align 8
  %839 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %837, i32 %838) #7
  %840 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %2, i64 0, i32 12
  %841 = icmp eq %"class.WTF::StringImpl"* %839, null
  br i1 %841, label %861, label %842

842:                                              ; preds = %834, %836
  %843 = phi %"class.WTF::String"* [ %835, %834 ], [ %840, %836 ]
  %844 = phi %"class.WTF::StringImpl"* [ %813, %834 ], [ %839, %836 ]
  %845 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %844, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %846 = load atomic i32, i32* %845 monotonic, align 4
  %847 = and i32 %846, 2
  %848 = icmp eq i32 %847, 0
  br i1 %848, label %849, label %861

849:                                              ; preds = %842
  %850 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %844, i64 0, i32 0
  %851 = load i32, i32* %850, align 4
  %852 = zext i32 %851 to i33
  %853 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %852, i33 1) #7
  %854 = extractvalue { i33, i1 } %853, 1
  %855 = extractvalue { i33, i1 } %853, 0
  %856 = icmp slt i33 %855, 0
  %857 = or i1 %854, %856
  br i1 %857, label %858, label %859, !prof !3

858:                                              ; preds = %849
  call void @llvm.trap() #7
  unreachable

859:                                              ; preds = %849
  %860 = trunc i33 %855 to i32
  store i32 %860, i32* %850, align 4
  br label %861

861:                                              ; preds = %815, %859, %842, %836
  %862 = phi i1 [ false, %859 ], [ false, %842 ], [ true, %836 ], [ true, %815 ]
  %863 = phi %"class.WTF::String"* [ %843, %859 ], [ %843, %842 ], [ %840, %836 ], [ %816, %815 ]
  %864 = phi %"class.WTF::StringImpl"* [ %844, %859 ], [ %844, %842 ], [ null, %836 ], [ null, %815 ]
  %865 = ptrtoint %"class.WTF::StringImpl"* %864 to i64
  %866 = bitcast %"class.WTF::String"* %863 to i64*
  %867 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %863, i64 0, i32 0, i32 0
  %868 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %867, align 8
  store i64 %865, i64* %866, align 8
  %869 = icmp eq %"class.WTF::StringImpl"* %868, null
  br i1 %869, label %883, label %870

870:                                              ; preds = %861
  %871 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %868, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %872 = load atomic i32, i32* %871 monotonic, align 4
  %873 = and i32 %872, 2
  %874 = icmp eq i32 %873, 0
  %875 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %868, i64 0, i32 0
  %876 = load i32, i32* %875, align 4
  br i1 %874, label %877, label %879

877:                                              ; preds = %870
  %878 = add i32 %876, -1
  store i32 %878, i32* %875, align 4
  br label %879

879:                                              ; preds = %877, %870
  %880 = phi i32 [ %878, %877 ], [ %876, %870 ]
  %881 = icmp eq i32 %880, 0
  br i1 %881, label %882, label %883

882:                                              ; preds = %879
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %868) #7
  br label %883

883:                                              ; preds = %861, %879, %882
  br i1 %862, label %897, label %884

884:                                              ; preds = %883
  %885 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %864, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %886 = load atomic i32, i32* %885 monotonic, align 4
  %887 = and i32 %886, 2
  %888 = icmp eq i32 %887, 0
  %889 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %864, i64 0, i32 0
  %890 = load i32, i32* %889, align 4
  br i1 %888, label %891, label %893

891:                                              ; preds = %884
  %892 = add i32 %890, -1
  store i32 %892, i32* %889, align 4
  br label %893

893:                                              ; preds = %891, %884
  %894 = phi i32 [ %892, %891 ], [ %890, %884 ]
  %895 = icmp eq i32 %894, 0
  br i1 %895, label %896, label %897

896:                                              ; preds = %893
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %864) #7
  br label %897

897:                                              ; preds = %896, %893, %883, %801
  %898 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %899 = load i8*, i8** %898, align 8
  store i8* null, i8** %898, align 8
  %900 = icmp eq i8* %899, null
  br i1 %900, label %902, label %901

901:                                              ; preds = %897
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %899) #7
  br label %902

902:                                              ; preds = %901, %897
  %903 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %805, align 8
  %904 = icmp eq %"class.WTF::StringImpl"* %903, null
  br i1 %904, label %918, label %905

905:                                              ; preds = %902
  %906 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %903, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %907 = load atomic i32, i32* %906 monotonic, align 4
  %908 = and i32 %907, 2
  %909 = icmp eq i32 %908, 0
  %910 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %903, i64 0, i32 0
  %911 = load i32, i32* %910, align 4
  br i1 %909, label %912, label %914

912:                                              ; preds = %905
  %913 = add i32 %911, -1
  store i32 %913, i32* %910, align 4
  br label %914

914:                                              ; preds = %912, %905
  %915 = phi i32 [ %913, %912 ], [ %911, %905 ]
  %916 = icmp eq i32 %915, 0
  br i1 %916, label %917, label %918

917:                                              ; preds = %914
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %903) #7
  br label %918

918:                                              ; preds = %902, %914, %917
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %802) #7
  br label %919

919:                                              ; preds = %764, %757, %236, %195, %141, %92, %106, %208, %489, %722, %773, %795, %918, %729, %482, %249, %155, %57
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %51) #7
  br label %920

920:                                              ; preds = %38, %30, %30, %4, %919, %37
  ret void
}

declare zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"*) local_unnamed_addr #1

declare void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"*, i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN5blink24V8RTCRtpCodingParameters6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_22RTCRtpCodingParametersERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::RTCRtpCodingParameters"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"*, %"class.v8::Isolate"*) unnamed_addr #1

declare %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"*) local_unnamed_addr #1

declare %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Value"*) local_unnamed_addr #1

declare %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.v8::TryCatch", align 8
  %4 = tail call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"* %0)
  br i1 %4, label %23, label %5

5:                                                ; preds = %2
  %6 = tail call %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() #7
  %7 = bitcast %"class.v8::TryCatch"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %7) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 48, i1 false) #7
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %3, %"class.v8::Isolate"* %6) #7
  %8 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 0, i32 0
  %9 = load %"class.v8::Value"*, %"class.v8::Value"** %8, align 8
  %10 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %6) #7
  %11 = call %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"* %9, %"class.v8::Context"* %10) #7
  %12 = ptrtoint %"class.v8::String"* %11 to i64
  %13 = bitcast %"class.blink::V8StringResource"* %0 to i64*
  store i64 %12, i64* %13, align 8
  %14 = icmp eq %"class.v8::String"* %11, null
  br i1 %14, label %15, label %21

15:                                               ; preds = %5
  %16 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %3) #7
  %17 = bitcast %"class.blink::ExceptionState"* %1 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %18 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %18, i64 5
  %20 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %19, align 8
  call void %20(%"class.blink::ExceptionState"* %1, %"class.v8::Value"* %16) #7
  br label %21

21:                                               ; preds = %5, %15
  %22 = phi i1 [ false, %15 ], [ true, %5 ]
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %7) #7
  br label %23

23:                                               ; preds = %21, %2
  %24 = phi i1 [ true, %2 ], [ %22, %21 ]
  ret i1 %24
}

declare zeroext i1 @_ZN5blink11IsValidEnumERKN3WTF6StringEPKPKcmS3_RNS_14ExceptionStateE(%"class.WTF::String"* dereferenceable(8), i8**, i64, %"class.WTF::String"* dereferenceable(8), %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::Value"* @_ZNK5blink24RTCRtpEncodingParameters8ToV8ImplEN2v85LocalINS1_6ObjectEEEPNS1_7IsolateE(%"class.blink::RTCRtpEncodingParameters"*, %"class.v8::Object"*, %"class.v8::Isolate"*) unnamed_addr #0 align 2 {
  %4 = tail call %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"* %2) #7
  %5 = tail call zeroext i1 @_ZN5blink28toV8RTCRtpEncodingParametersEPKNS_24RTCRtpEncodingParametersEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::RTCRtpEncodingParameters"* %0, %"class.v8::Object"* %4, %"class.v8::Object"* %1, %"class.v8::Isolate"* %2)
  %6 = bitcast %"class.v8::Object"* %4 to %"class.v8::Value"*
  %7 = ptrtoint %"class.v8::Isolate"* %2 to i64
  %8 = add i64 %7, 160
  %9 = inttoptr i64 %8 to %"class.v8::Value"*
  %10 = select i1 %5, %"class.v8::Value"* %6, %"class.v8::Value"* %9
  ret %"class.v8::Value"* %10
}

declare %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink28toV8RTCRtpEncodingParametersEPKNS_24RTCRtpEncodingParametersEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::RTCRtpEncodingParameters"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Isolate"*) local_unnamed_addr #0 {
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %0, i64 0, i32 0
  %9 = tail call zeroext i1 @_ZN5blink26toV8RTCRtpCodingParametersEPKNS_22RTCRtpCodingParametersEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::RTCRtpCodingParameters"* %8, %"class.v8::Object"* %1, %"class.v8::Object"* %2, %"class.v8::Isolate"* %3) #7
  br i1 %9, label %10, label %191

10:                                               ; preds = %4
  %11 = ptrtoint %"class.v8::Isolate"* %3 to i64
  %12 = add i64 %11, 8
  %13 = inttoptr i64 %12 to %"class.blink::V8PerIsolateData"**
  %14 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %13, align 8
  %15 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %14, i8* bitcast ([8 x i8*]* @_ZZN5blinkL37eternalV8RTCRtpEncodingParametersKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.315"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.315"*)) #7
  %16 = extractvalue { i64, %"class.v8::Eternal"* } %15, 1
  %17 = tail call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %3) #7
  %18 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %0, i64 0, i32 1
  %19 = load i8, i8* %18, align 8, !range !4
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %27, label %21

21:                                               ; preds = %10
  %22 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %0, i64 0, i32 6
  %23 = load i8, i8* %22, align 1, !range !4
  %24 = icmp eq i8 %23, 0
  %25 = select i1 %24, i64 192, i64 184
  %26 = add i64 %25, %11
  br label %29

27:                                               ; preds = %10
  %28 = add i64 %11, 184
  br label %29

29:                                               ; preds = %21, %27
  %30 = phi i64 [ %26, %21 ], [ %28, %27 ]
  %31 = inttoptr i64 %30 to %"class.v8::Value"*
  %32 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 0, i32 0
  %33 = load %"class.v8::Name"*, %"class.v8::Name"** %32, align 8
  %34 = tail call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %33, %"class.v8::Value"* %31) #7
  %35 = trunc i16 %34 to i8
  %36 = icmp ne i8 %35, 0
  %37 = icmp ugt i16 %34, 255
  %38 = and i1 %37, %36
  br i1 %38, label %39, label %191

39:                                               ; preds = %29
  %40 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %0, i64 0, i32 2
  %41 = load i8, i8* %40, align 1, !range !4
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %49, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %0, i64 0, i32 7
  %45 = load i8, i8* %44, align 2, !range !4
  %46 = icmp eq i8 %45, 0
  %47 = select i1 %46, i64 192, i64 184
  %48 = add i64 %47, %11
  br label %51

49:                                               ; preds = %39
  %50 = add i64 %11, 192
  br label %51

51:                                               ; preds = %43, %49
  %52 = phi i64 [ %48, %43 ], [ %50, %49 ]
  %53 = inttoptr i64 %52 to %"class.v8::Value"*
  %54 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 1, i32 0
  %55 = load %"class.v8::Name"*, %"class.v8::Name"** %54, align 8
  %56 = tail call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %55, %"class.v8::Value"* %53) #7
  %57 = trunc i16 %56 to i8
  %58 = icmp ne i8 %57, 0
  %59 = icmp ugt i16 %56, 255
  %60 = and i1 %59, %58
  br i1 %60, label %61, label %191

61:                                               ; preds = %51
  %62 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %0, i64 0, i32 3
  %63 = load i8, i8* %62, align 2, !range !4
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %77, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %0, i64 0, i32 8
  %67 = load i32, i32* %66, align 8
  %68 = tail call %"class.v8::Integer"* @_ZN2v87Integer15NewFromUnsignedEPNS_7IsolateEj(%"class.v8::Isolate"* %3, i32 %67) #7
  %69 = bitcast %"class.v8::Integer"* %68 to %"class.v8::Value"*
  %70 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 2, i32 0
  %71 = load %"class.v8::Name"*, %"class.v8::Name"** %70, align 8
  %72 = tail call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %71, %"class.v8::Value"* %69) #7
  %73 = trunc i16 %72 to i8
  %74 = icmp ne i8 %73, 0
  %75 = icmp ugt i16 %72, 255
  %76 = and i1 %75, %74
  br i1 %76, label %77, label %191

77:                                               ; preds = %61, %65
  %78 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %0, i64 0, i32 4
  %79 = load i8, i8* %78, align 1, !range !4
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %93, label %81

81:                                               ; preds = %77
  %82 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %0, i64 0, i32 9
  %83 = load double, double* %82, align 8
  %84 = tail call %"class.v8::Number"* @_ZN2v86Number3NewEPNS_7IsolateEd(%"class.v8::Isolate"* %3, double %83) #7
  %85 = bitcast %"class.v8::Number"* %84 to %"class.v8::Value"*
  %86 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 3, i32 0
  %87 = load %"class.v8::Name"*, %"class.v8::Name"** %86, align 8
  %88 = tail call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %87, %"class.v8::Value"* %85) #7
  %89 = trunc i16 %88 to i8
  %90 = icmp ne i8 %89, 0
  %91 = icmp ugt i16 %88, 255
  %92 = and i1 %91, %90
  br i1 %92, label %93, label %191

93:                                               ; preds = %77, %81
  %94 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %0, i64 0, i32 10, i32 0, i32 0
  %95 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %94, align 8
  %96 = icmp eq %"class.WTF::StringImpl"* %95, null
  br i1 %96, label %107, label %97

97:                                               ; preds = %93
  %98 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %98) #7
  %99 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 0
  store %"class.WTF::StringImpl"* %95, %"class.WTF::StringImpl"** %99, align 8
  %100 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 1
  %101 = load i32, i32* %100, align 4
  %102 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 1
  %103 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  %104 = bitcast i8** %103 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %102, %"class.WTF::StringImpl"** %104, align 8
  %105 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 %101, i32* %105, align 8
  %106 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %5)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %98) #7
  br label %111

107:                                              ; preds = %93
  %108 = tail call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %3, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 0, i32 3) #7
  %109 = icmp eq %"class.v8::String"* %108, null
  br i1 %109, label %110, label %111, !prof !3

110:                                              ; preds = %107
  tail call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %111

111:                                              ; preds = %110, %107, %97
  %112 = phi %"class.v8::String"* [ %106, %97 ], [ %108, %107 ], [ null, %110 ]
  %113 = bitcast %"class.v8::String"* %112 to %"class.v8::Value"*
  %114 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 4, i32 0
  %115 = load %"class.v8::Name"*, %"class.v8::Name"** %114, align 8
  %116 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %115, %"class.v8::Value"* %113) #7
  %117 = trunc i16 %116 to i8
  %118 = icmp ne i8 %117, 0
  %119 = icmp ugt i16 %116, 255
  %120 = and i1 %119, %118
  br i1 %120, label %121, label %191

121:                                              ; preds = %111
  %122 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %0, i64 0, i32 11, i32 0, i32 0
  %123 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %122, align 8
  %124 = icmp eq %"class.WTF::StringImpl"* %123, null
  br i1 %124, label %135, label %125

125:                                              ; preds = %121
  %126 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %126) #7
  %127 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  store %"class.WTF::StringImpl"* %123, %"class.WTF::StringImpl"** %127, align 8
  %128 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 1
  %129 = load i32, i32* %128, align 4
  %130 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 1
  %131 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %132 = bitcast i8** %131 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %130, %"class.WTF::StringImpl"** %132, align 8
  %133 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 %129, i32* %133, align 8
  %134 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %6)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %126) #7
  br label %139

135:                                              ; preds = %121
  %136 = call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %3, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 0, i32 3) #7
  %137 = icmp eq %"class.v8::String"* %136, null
  br i1 %137, label %138, label %139, !prof !3

138:                                              ; preds = %135
  call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %139

139:                                              ; preds = %138, %135, %125
  %140 = phi %"class.v8::String"* [ %134, %125 ], [ %136, %135 ], [ null, %138 ]
  %141 = bitcast %"class.v8::String"* %140 to %"class.v8::Value"*
  %142 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 5, i32 0
  %143 = load %"class.v8::Name"*, %"class.v8::Name"** %142, align 8
  %144 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %143, %"class.v8::Value"* %141) #7
  %145 = trunc i16 %144 to i8
  %146 = icmp ne i8 %145, 0
  %147 = icmp ugt i16 %144, 255
  %148 = and i1 %147, %146
  br i1 %148, label %149, label %191

149:                                              ; preds = %139
  %150 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %0, i64 0, i32 5
  %151 = load i8, i8* %150, align 4, !range !4
  %152 = icmp eq i8 %151, 0
  br i1 %152, label %165, label %153

153:                                              ; preds = %149
  %154 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %0, i64 0, i32 13
  %155 = load double, double* %154, align 8
  %156 = call %"class.v8::Number"* @_ZN2v86Number3NewEPNS_7IsolateEd(%"class.v8::Isolate"* %3, double %155) #7
  %157 = bitcast %"class.v8::Number"* %156 to %"class.v8::Value"*
  %158 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 7, i32 0
  %159 = load %"class.v8::Name"*, %"class.v8::Name"** %158, align 8
  %160 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %159, %"class.v8::Value"* %157) #7
  %161 = trunc i16 %160 to i8
  %162 = icmp ne i8 %161, 0
  %163 = icmp ugt i16 %160, 255
  %164 = and i1 %163, %162
  br i1 %164, label %165, label %191

165:                                              ; preds = %149, %153
  %166 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase36is_rtc_svc_scalability_mode_enabled_E, align 1, !range !4
  %167 = icmp eq i8 %166, 0
  br i1 %167, label %191, label %168

168:                                              ; preds = %165
  %169 = getelementptr inbounds %"class.blink::RTCRtpEncodingParameters", %"class.blink::RTCRtpEncodingParameters"* %0, i64 0, i32 12, i32 0, i32 0
  %170 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %169, align 8
  %171 = icmp eq %"class.WTF::StringImpl"* %170, null
  br i1 %171, label %190, label %172

172:                                              ; preds = %168
  %173 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %173) #7
  %174 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 0
  store %"class.WTF::StringImpl"* %170, %"class.WTF::StringImpl"** %174, align 8
  %175 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %170, i64 0, i32 1
  %176 = load i32, i32* %175, align 4
  %177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %170, i64 1
  %178 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  %179 = bitcast i8** %178 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %177, %"class.WTF::StringImpl"** %179, align 8
  %180 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 %176, i32* %180, align 8
  %181 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %7)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %173) #7
  %182 = bitcast %"class.v8::String"* %181 to %"class.v8::Value"*
  %183 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 6, i32 0
  %184 = load %"class.v8::Name"*, %"class.v8::Name"** %183, align 8
  %185 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %184, %"class.v8::Value"* %182) #7
  %186 = trunc i16 %185 to i8
  %187 = icmp ne i8 %186, 0
  %188 = icmp ugt i16 %185, 255
  %189 = and i1 %188, %187
  br i1 %189, label %190, label %191

190:                                              ; preds = %168, %172
  br label %191

191:                                              ; preds = %165, %29, %65, %111, %153, %190, %172, %139, %81, %51, %4
  %192 = phi i1 [ false, %4 ], [ false, %29 ], [ false, %51 ], [ false, %65 ], [ false, %81 ], [ false, %111 ], [ false, %139 ], [ false, %153 ], [ true, %190 ], [ true, %165 ], [ false, %172 ]
  ret i1 %192
}

declare zeroext i1 @_ZN5blink26toV8RTCRtpCodingParametersEPKNS_22RTCRtpCodingParametersEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::RTCRtpCodingParameters"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Isolate"*) local_unnamed_addr #1

declare %"class.v8::Integer"* @_ZN2v87Integer15NewFromUnsignedEPNS_7IsolateEj(%"class.v8::Isolate"*, i32) local_unnamed_addr #1

declare %"class.v8::Number"* @_ZN2v86Number3NewEPNS_7IsolateEd(%"class.v8::Isolate"*, double) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #4 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  %6 = bitcast i8* %4 to i16*
  br i1 %5, label %7, label %11

7:                                                ; preds = %2
  %8 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %9 = add i64 %8, 200
  %10 = inttoptr i64 %9 to %"class.v8::String"*
  br label %63

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 1
  %15 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %16 = icmp eq i8* %4, %15
  br i1 %16, label %17, label %48

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp ne i32 %19, %21
  %23 = icmp eq %"class.WTF::StringImpl"* %13, null
  %24 = or i1 %23, %22
  br i1 %24, label %48, label %25

25:                                               ; preds = %17
  %26 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %27 = add i64 %26, 8
  %28 = inttoptr i64 %27 to %"class.blink::V8PerIsolateData"**
  %29 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %28, align 8
  %30 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %29, i64 0, i32 5, i32 0, i32 0, i32 0
  %31 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 3, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, %13
  br i1 %34, label %35, label %46

35:                                               ; preds = %25
  %36 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 1
  %37 = bitcast %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference"* %36 to %"class.v8::String"**
  %38 = load %"class.v8::String"*, %"class.v8::String"** %37, align 8
  %39 = icmp eq %"class.v8::String"* %38, null
  br i1 %39, label %63, label %40

40:                                               ; preds = %35
  %41 = bitcast %"class.v8::String"* %38 to i64*
  %42 = bitcast %"class.v8::Isolate"* %0 to %"class.v8::internal::Isolate"*
  %43 = load i64, i64* %41, align 8
  %44 = tail call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %42, i64 %43) #7
  %45 = bitcast i64* %44 to %"class.v8::String"*
  br label %63

46:                                               ; preds = %25
  %47 = tail call %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"* %31, %"class.v8::Isolate"* %0, %"class.WTF::StringImpl"* nonnull %13) #7
  br label %63

48:                                               ; preds = %17, %11
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load atomic i32, i32* %49 monotonic, align 4
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  %53 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %54 = load i32, i32* %53, align 8
  br i1 %52, label %59, label %55

55:                                               ; preds = %48
  %56 = tail call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i8* nonnull %4, i32 0, i32 %54) #7
  %57 = icmp eq %"class.v8::String"* %56, null
  br i1 %57, label %58, label %63, !prof !3

58:                                               ; preds = %55
  tail call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %63

59:                                               ; preds = %48
  %60 = tail call %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i16* nonnull %6, i32 0, i32 %54) #7
  %61 = icmp eq %"class.v8::String"* %60, null
  br i1 %61, label %62, label %63, !prof !3

62:                                               ; preds = %59
  tail call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %63

63:                                               ; preds = %46, %40, %35, %62, %59, %58, %55, %7
  %64 = phi %"class.v8::String"* [ %10, %7 ], [ %56, %55 ], [ null, %58 ], [ %60, %59 ], [ null, %62 ], [ null, %35 ], [ %45, %40 ], [ %47, %46 ]
  ret %"class.v8::String"* %64
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::RTCRtpEncodingParameters"* @_ZN5blink17NativeValueTraitsINS_24RTCRtpEncodingParametersEvE11NativeValueEPN2v87IsolateENS3_5LocalINS3_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64 72) #7
  %5 = bitcast i8* %4 to %"class.blink::RTCRtpEncodingParameters"*
  tail call void @_ZN5blink24RTCRtpEncodingParametersC1Ev(%"class.blink::RTCRtpEncodingParameters"* %5) #7
  %6 = getelementptr inbounds i8, i8* %4, i64 -4
  %7 = bitcast i8* %6 to i16*
  %8 = load atomic i16, i16* %7 monotonic, align 2
  %9 = or i16 %8, 1
  store atomic i16 %9, i16* %7 release, align 2
  tail call void @_ZN5blink26V8RTCRtpEncodingParameters6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_24RTCRtpEncodingParametersERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* %1, %"class.blink::RTCRtpEncodingParameters"* %5, %"class.blink::ExceptionState"* dereferenceable(72) %2)
  ret %"class.blink::RTCRtpEncodingParameters"* %5
}

declare { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"*, i8*, %"class.base::span.315"* dereferenceable(16)) local_unnamed_addr #1

declare zeroext i1 @_ZNK2v85Value9IsBooleanEv(%"class.v8::Value"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK2v87Boolean5ValueEv(%"class.v8::Boolean"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK2v85Value12BooleanValueEPNS_7IsolateE(%"class.v8::Value"*, %"class.v8::Isolate"*) local_unnamed_addr #1

declare double @_ZN5blink18ToRestrictedDoubleEPN2v87IsolateENS0_5LocalINS0_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZN3WTF10Partitions10BufferFreeEPv(i8*) local_unnamed_addr #1

declare i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Name"*, %"class.v8::Value"*) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"*, i8*, i32, i32) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"*, i16*, i32, i32) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"*, %"class.v8::Isolate"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1

declare i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #1

declare void @_ZN2v82V812ToLocalEmptyEv() local_unnamed_addr #1

declare void @_ZN5blink24RTCRtpEncodingParametersC1Ev(%"class.blink::RTCRtpEncodingParameters"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #7
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !3

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #7
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #7
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #7
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #7
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #7
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #7
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.14, i64 0, i64 0), i8* %40, i8* %41) #7
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.15, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #7
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #7
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #7
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !3

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #7
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #1

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #1

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #1

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #1

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::IDLDictionaryBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::IDLDictionaryBase"* %3, %"class.blink::Visitor"* %0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::IDLDictionaryBase"*
  %3 = bitcast i8* %0 to void (%"class.blink::IDLDictionaryBase"*)***
  %4 = load void (%"class.blink::IDLDictionaryBase"*)**, void (%"class.blink::IDLDictionaryBase"*)*** %3, align 8
  %5 = load void (%"class.blink::IDLDictionaryBase"*)*, void (%"class.blink::IDLDictionaryBase"*)** %4, align 8
  tail call void %5(%"class.blink::IDLDictionaryBase"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK2v85Value8IsUint32Ev(%"class.v8::Value"*) local_unnamed_addr #1

declare i32 @_ZNK2v86Uint325ValueEv(%"class.v8::Uint32"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"*) local_unnamed_addr #1

declare i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"*) local_unnamed_addr #1

declare i32 @_ZN5blink12ToUInt32SlowEPN2v87IsolateENS0_5LocalINS0_5ValueEEENS_30IntegerConversionConfigurationERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, i32, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.v8::Value"*, %"class.v8::Value"** %2, align 8
  %4 = icmp eq %"class.v8::Value"* %3, null
  br i1 %4, label %82, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.v8::Value"* %3 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 3
  %9 = icmp eq i64 %8, 1
  br i1 %9, label %10, label %21, !prof !5

10:                                               ; preds = %5
  %11 = add i64 %7, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = and i64 %7, -4294967296
  %15 = zext i32 %13 to i64
  %16 = or i64 %14, %15
  %17 = add i64 %16, 7
  %18 = inttoptr i64 %17 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = icmp ult i16 %19, 64
  br i1 %20, label %82, label %21, !prof !2

21:                                               ; preds = %5, %10
  %22 = tail call zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"* nonnull %3) #7
  br i1 %22, label %23, label %80, !prof !2

23:                                               ; preds = %21
  %24 = bitcast %"class.blink::V8StringResource"* %0 to %"class.v8::Int32"**
  %25 = load %"class.v8::Int32"*, %"class.v8::Int32"** %24, align 8
  %26 = tail call i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"* %25) #7
  %27 = tail call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32 %26) #7
  %28 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 2
  %29 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %29, label %47, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %47

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #7
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !3

44:                                               ; preds = %35
  tail call void @llvm.trap() #7
  unreachable

45:                                               ; preds = %35
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %36, align 4
  br label %47

47:                                               ; preds = %45, %30, %23
  %48 = ptrtoint %"class.WTF::StringImpl"* %27 to i64
  %49 = bitcast %"class.WTF::String"* %28 to i64*
  %50 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %28, i64 0, i32 0, i32 0
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  store i64 %48, i64* %49, align 8
  %52 = icmp eq %"class.WTF::StringImpl"* %51, null
  br i1 %52, label %66, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  br i1 %57, label %60, label %62

60:                                               ; preds = %53
  %61 = add i32 %59, -1
  store i32 %61, i32* %58, align 4
  br label %62

62:                                               ; preds = %60, %53
  %63 = phi i32 [ %61, %60 ], [ %59, %53 ]
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %51) #7
  br label %66

66:                                               ; preds = %47, %62, %65
  store %"class.v8::Value"* null, %"class.v8::Value"** %2, align 8
  br i1 %29, label %82, label %67

67:                                               ; preds = %66
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %82

79:                                               ; preds = %76
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #7
  br label %82

80:                                               ; preds = %21
  %81 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 1
  store i32 1, i32* %81, align 8
  br label %82

82:                                               ; preds = %79, %76, %66, %10, %1, %80
  %83 = phi i1 [ false, %80 ], [ true, %1 ], [ true, %10 ], [ true, %66 ], [ true, %76 ], [ true, %79 ]
  ret i1 %83
}

declare %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32) local_unnamed_addr #1

declare %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"*, %"class.v8::Context"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"*, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{i8 0, i8 2}
!5 = !{!"branch_weights", i32 2146410443, i32 1073205}
