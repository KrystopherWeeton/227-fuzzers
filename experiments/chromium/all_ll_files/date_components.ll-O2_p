; ModuleID = '../../third_party/blink/renderer/platform/text/date_components.cc'
source_filename = "../../third_party/blink/renderer/platform/text/date_components.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::DateComponents" = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringAppend" = type { %"class.WTF::String", %"class.WTF::String" }
%"class.WTF::StringTypeAdapter" = type { %"class.WTF::StringTypeAdapter.1" }
%"class.WTF::StringTypeAdapter.1" = type { %"class.WTF::StringView" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTFplINS_6StringEEENS_12StringAppendIS1_T_EERKS1_S3_ = comdat any

$_ZNK3WTF12StringAppendINS_6StringES1_EcvS1_Ev = comdat any

$_ZN3WTF12StringAppendINS_6StringES1_EC2ES1_S1_ = comdat any

$_ZNK3WTF12StringAppendINS_6StringES1_E6lengthEv = comdat any

@_ZN5blink14DateComponents18kMinimumWeekNumberE = hidden local_unnamed_addr constant i32 1, align 4
@_ZN5blink14DateComponents18kMaximumWeekNumberE = hidden local_unnamed_addr constant i32 53, align 4
@.str = private unnamed_addr constant [10 x i8] c"%02d:%02d\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"%02d:%02d:%02d\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"%02d:%02d:%02d.%03d\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"%04d-%02d-%02d\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"%04d-%02d-%02dT\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"%04d-%02d\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"%04d-W%02d\00", align 1
@.str.7 = private unnamed_addr constant [25 x i8] c"(Invalid DateComponents)\00", align 1
@_ZN5blinkL12kDaysInMonthE = internal unnamed_addr constant [12 x i32] [i32 31, i32 28, i32 31, i32 30, i32 31, i32 30, i32 31, i32 31, i32 30, i32 31, i32 30, i32 31], align 16
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.8 = private unnamed_addr constant [27 x i8] c"total >= adapter1.length()\00", align 1
@.str.9 = private unnamed_addr constant [70 x i8] c"../../third_party/blink/renderer/platform/wtf/text/string_operators.h\00", align 1
@.str.10 = private unnamed_addr constant [27 x i8] c"total >= adapter2.length()\00", align 1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink14DateComponents7WeekDayEv(%"class.blink::DateComponents"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 5
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 4
  %7 = load i32, i32* %6, align 4
  %8 = add nsw i32 %5, 2
  %9 = icmp slt i32 %8, 4
  %10 = add nsw i32 %5, 14
  %11 = select i1 %9, i32 %10, i32 %8
  %12 = zext i1 %9 to i32
  %13 = sub i32 %3, %12
  %14 = sdiv i32 %13, 100
  %15 = srem i32 %13, 100
  %16 = mul nsw i32 %11, 13
  %17 = sdiv i32 %16, 5
  %18 = sdiv i32 %15, 4
  %19 = sdiv i32 %13, 400
  %20 = mul nsw i32 %14, 5
  %21 = add i32 %7, 6
  %22 = add i32 %21, %17
  %23 = add i32 %22, %15
  %24 = add i32 %23, %19
  %25 = add i32 %24, %18
  %26 = add i32 %25, %20
  %27 = srem i32 %26, 7
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink14DateComponents19MaxWeekNumberInYearEv(%"class.blink::DateComponents"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  %3 = load i32, i32* %2, align 4
  %4 = add i32 %3, -1
  %5 = sdiv i32 %4, 100
  %6 = srem i32 %4, 100
  %7 = sdiv i32 %6, 4
  %8 = sdiv i32 %4, 400
  %9 = mul nsw i32 %5, 5
  %10 = add nsw i32 %6, 43
  %11 = add nsw i32 %10, %8
  %12 = add nsw i32 %11, %7
  %13 = add nsw i32 %12, %9
  %14 = srem i32 %13, 7
  switch i32 %14, label %18 [
    i32 4, label %19
    i32 3, label %15
  ]

15:                                               ; preds = %1
  %16 = tail call zeroext i1 @_ZN3WTF10IsLeapYearEi(i32 %3) #9
  %17 = select i1 %16, i32 53, i32 52
  br label %19

18:                                               ; preds = %1
  br label %19

19:                                               ; preds = %1, %18, %15
  %20 = phi i32 [ 53, %1 ], [ %17, %15 ], [ 52, %18 ]
  ret i32 %20
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare zeroext i1 @_ZN3WTF10IsLeapYearEi(i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink14DateComponents9ParseYearERKN3WTF6StringEjRj(%"class.blink::DateComponents"* nocapture, %"class.WTF::String"* nocapture readonly dereferenceable(8), i32, i32* nocapture dereferenceable(4)) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %6, null
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  %11 = bitcast %"class.WTF::StringImpl"* %10 to i8*
  %12 = bitcast %"class.WTF::StringImpl"* %10 to i16*
  %13 = zext i32 %2 to i64
  br i1 %7, label %37, label %14

14:                                               ; preds = %4
  %15 = load i32, i32* %8, align 4
  %16 = zext i32 %15 to i64
  %17 = icmp ugt i32 %15, %2
  br i1 %17, label %18, label %37

18:                                               ; preds = %14, %34
  %19 = phi i64 [ %35, %34 ], [ %13, %14 ]
  %20 = load atomic i32, i32* %9 monotonic, align 4
  %21 = and i32 %20, 1
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds i8, i8* %11, i64 %19
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i16
  br label %30

27:                                               ; preds = %18
  %28 = getelementptr inbounds i16, i16* %12, i64 %19
  %29 = load i16, i16* %28, align 2
  br label %30

30:                                               ; preds = %27, %23
  %31 = phi i16 [ %26, %23 ], [ %29, %27 ]
  %32 = add i16 %31, -48
  %33 = icmp ult i16 %32, 10
  br i1 %33, label %34, label %37

34:                                               ; preds = %30
  %35 = add nuw nsw i64 %19, 1
  %36 = icmp ult i64 %35, %16
  br i1 %36, label %18, label %37

37:                                               ; preds = %34, %30, %14, %4
  %38 = phi i64 [ %13, %4 ], [ %13, %14 ], [ %19, %30 ], [ %35, %34 ]
  %39 = trunc i64 %38 to i32
  %40 = sub i32 %39, %2
  %41 = icmp ult i32 %40, 4
  %42 = or i1 %41, %7
  br i1 %42, label %100, label %43

43:                                               ; preds = %37
  %44 = load i32, i32* %8, align 4
  %45 = icmp ult i32 %44, %39
  %46 = icmp ule i32 %39, %2
  %47 = or i1 %46, %45
  %48 = or i1 %7, %47
  br i1 %48, label %100, label %49

49:                                               ; preds = %43
  %50 = load i32, i32* %8, align 4
  %51 = zext i32 %50 to i64
  br label %52

52:                                               ; preds = %88, %49
  %53 = phi i64 [ %13, %49 ], [ %92, %88 ]
  %54 = phi i32 [ 0, %49 ], [ %91, %88 ]
  %55 = icmp ult i64 %53, %51
  br i1 %55, label %56, label %100

56:                                               ; preds = %52
  %57 = load atomic i32, i32* %9 monotonic, align 4
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %64, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds i8, i8* %11, i64 %53
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i16
  br label %67

64:                                               ; preds = %56
  %65 = getelementptr inbounds i16, i16* %12, i64 %53
  %66 = load i16, i16* %65, align 2
  br label %67

67:                                               ; preds = %64, %60
  %68 = phi i16 [ %63, %60 ], [ %66, %64 ]
  %69 = add i16 %68, -48
  %70 = icmp ult i16 %69, 10
  br i1 %70, label %71, label %100

71:                                               ; preds = %67
  %72 = load atomic i32, i32* %9 monotonic, align 4
  %73 = and i32 %72, 1
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %79, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds i8, i8* %11, i64 %53
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i16
  br label %82

79:                                               ; preds = %71
  %80 = getelementptr inbounds i16, i16* %12, i64 %53
  %81 = load i16, i16* %80, align 2
  br label %82

82:                                               ; preds = %79, %75
  %83 = phi i16 [ %78, %75 ], [ %81, %79 ]
  %84 = zext i16 %83 to i32
  %85 = sub nuw i32 -2147483601, %84
  %86 = sdiv i32 %85, 10
  %87 = icmp sgt i32 %54, %86
  br i1 %87, label %100, label %88

88:                                               ; preds = %82
  %89 = mul nsw i32 %54, 10
  %90 = add i32 %89, -48
  %91 = add i32 %90, %84
  %92 = add nuw nsw i64 %53, 1
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %39, %93
  br i1 %94, label %95, label %52

95:                                               ; preds = %88
  %96 = add i32 %91, -1
  %97 = icmp ugt i32 %96, 275759
  br i1 %97, label %100, label %98

98:                                               ; preds = %95
  %99 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  store i32 %91, i32* %99, align 4
  store i32 %39, i32* %3, align 4
  br label %100

100:                                              ; preds = %67, %82, %52, %37, %43, %98, %95
  %101 = phi i1 [ false, %37 ], [ true, %98 ], [ false, %95 ], [ false, %43 ], [ false, %52 ], [ false, %82 ], [ false, %67 ]
  ret i1 %101
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink14DateComponents10ParseMonthERKN3WTF6StringEjRj(%"class.blink::DateComponents"* nocapture, %"class.WTF::String"* nocapture readonly dereferenceable(8), i32, i32* nocapture dereferenceable(4)) local_unnamed_addr #1 align 2 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #9
  store i32 -1431655766, i32* %5, align 4
  %7 = call zeroext i1 @_ZN5blink14DateComponents9ParseYearERKN3WTF6StringEjRj(%"class.blink::DateComponents"* %0, %"class.WTF::String"* dereferenceable(8) %1, i32 %2, i32* nonnull dereferenceable(4) %5)
  br i1 %7, label %8, label %95

8:                                                ; preds = %4
  %9 = load i32, i32* %5, align 4
  %10 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %95, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp ult i32 %9, %15
  br i1 %16, label %17, label %95

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  br i1 %21, label %29, label %23

23:                                               ; preds = %17
  %24 = bitcast %"class.WTF::StringImpl"* %22 to i8*
  %25 = zext i32 %9 to i64
  %26 = getelementptr inbounds i8, i8* %24, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i16
  br label %34

29:                                               ; preds = %17
  %30 = bitcast %"class.WTF::StringImpl"* %22 to i16*
  %31 = zext i32 %9 to i64
  %32 = getelementptr inbounds i16, i16* %30, i64 %31
  %33 = load i16, i16* %32, align 2
  br label %34

34:                                               ; preds = %23, %29
  %35 = phi i16 [ %28, %23 ], [ %33, %29 ]
  %36 = icmp eq i16 %35, 45
  br i1 %36, label %37, label %95

37:                                               ; preds = %34
  %38 = add nuw i32 %9, 1
  store i32 %38, i32* %5, align 4
  %39 = add i32 %9, 3
  %40 = icmp ule i32 %39, %15
  %41 = icmp ugt i32 %39, %38
  %42 = and i1 %41, %40
  br i1 %42, label %43, label %95

43:                                               ; preds = %37
  %44 = bitcast %"class.WTF::StringImpl"* %22 to i8*
  %45 = bitcast %"class.WTF::StringImpl"* %22 to i16*
  %46 = zext i32 %38 to i64
  %47 = zext i32 %15 to i64
  %48 = icmp ult i32 %38, %15
  br i1 %48, label %49, label %95

49:                                               ; preds = %43
  %50 = load atomic i32, i32* %18 monotonic, align 4
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %57, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds i8, i8* %44, i64 %46
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i16
  br label %60

57:                                               ; preds = %49
  %58 = getelementptr inbounds i16, i16* %45, i64 %46
  %59 = load i16, i16* %58, align 2
  br label %60

60:                                               ; preds = %57, %53
  %61 = phi i16 [ %56, %53 ], [ %59, %57 ]
  %62 = add i16 %61, -48
  %63 = icmp ult i16 %62, 10
  br i1 %63, label %64, label %95

64:                                               ; preds = %60
  %65 = load atomic i32, i32* %18 monotonic, align 4
  %66 = and i32 %65, 1
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %72, label %68

68:                                               ; preds = %64
  %69 = getelementptr inbounds i8, i8* %44, i64 %46
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i16
  br label %75

72:                                               ; preds = %64
  %73 = getelementptr inbounds i16, i16* %45, i64 %46
  %74 = load i16, i16* %73, align 2
  br label %75

75:                                               ; preds = %72, %68
  %76 = phi i16 [ %71, %68 ], [ %74, %72 ]
  %77 = zext i16 %76 to i32
  %78 = sub nuw i32 -2147483601, %77
  %79 = icmp slt i32 %78, -9
  br i1 %79, label %95, label %80

80:                                               ; preds = %75
  %81 = add nsw i32 %77, -48
  %82 = add nuw nsw i64 %46, 1
  %83 = icmp ult i64 %82, %47
  br i1 %83, label %97, label %95

84:                                               ; preds = %129
  %85 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  %86 = load i32, i32* %85, align 4
  %87 = icmp slt i32 %86, 1
  br i1 %87, label %95, label %88

88:                                               ; preds = %84
  %89 = icmp slt i32 %86, 275760
  %90 = icmp slt i32 %132, 10
  %91 = or i1 %90, %89
  br i1 %91, label %92, label %95

92:                                               ; preds = %88
  %93 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 5
  store i32 %133, i32* %93, align 4
  store i32 %39, i32* %3, align 4
  %94 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 8
  store i32 3, i32* %94, align 4
  br label %95

95:                                               ; preds = %43, %60, %75, %80, %108, %123, %84, %37, %8, %92, %129, %88, %13, %34, %4
  %96 = phi i1 [ false, %4 ], [ false, %34 ], [ false, %13 ], [ true, %92 ], [ false, %129 ], [ false, %88 ], [ false, %8 ], [ false, %37 ], [ false, %84 ], [ false, %123 ], [ false, %108 ], [ false, %80 ], [ false, %75 ], [ false, %60 ], [ false, %43 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #9
  ret i1 %96

97:                                               ; preds = %80
  %98 = load atomic i32, i32* %18 monotonic, align 4
  %99 = and i32 %98, 1
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %105, label %101

101:                                              ; preds = %97
  %102 = getelementptr inbounds i8, i8* %44, i64 %82
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i16
  br label %108

105:                                              ; preds = %97
  %106 = getelementptr inbounds i16, i16* %45, i64 %82
  %107 = load i16, i16* %106, align 2
  br label %108

108:                                              ; preds = %105, %101
  %109 = phi i16 [ %104, %101 ], [ %107, %105 ]
  %110 = add i16 %109, -48
  %111 = icmp ult i16 %110, 10
  br i1 %111, label %112, label %95

112:                                              ; preds = %108
  %113 = load atomic i32, i32* %18 monotonic, align 4
  %114 = and i32 %113, 1
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %120, label %116

116:                                              ; preds = %112
  %117 = getelementptr inbounds i8, i8* %44, i64 %82
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i16
  br label %123

120:                                              ; preds = %112
  %121 = getelementptr inbounds i16, i16* %45, i64 %82
  %122 = load i16, i16* %121, align 2
  br label %123

123:                                              ; preds = %120, %116
  %124 = phi i16 [ %119, %116 ], [ %122, %120 ]
  %125 = zext i16 %124 to i32
  %126 = sub nuw i32 -2147483601, %125
  %127 = sdiv i32 %126, 10
  %128 = icmp sgt i32 %81, %127
  br i1 %128, label %95, label %129

129:                                              ; preds = %123
  %130 = mul nsw i32 %81, 10
  %131 = add nsw i32 %130, -48
  %132 = add nsw i32 %131, %125
  %133 = add nsw i32 %132, -1
  %134 = icmp ugt i32 %133, 11
  br i1 %134, label %95, label %84
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink14DateComponents9ParseDateERKN3WTF6StringEjRj(%"class.blink::DateComponents"* nocapture, %"class.WTF::String"* nocapture readonly dereferenceable(8), i32, i32* nocapture dereferenceable(4)) local_unnamed_addr #1 align 2 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #9
  store i32 -1431655766, i32* %5, align 4
  %7 = call zeroext i1 @_ZN5blink14DateComponents10ParseMonthERKN3WTF6StringEjRj(%"class.blink::DateComponents"* %0, %"class.WTF::String"* dereferenceable(8) %1, i32 %2, i32* nonnull dereferenceable(4) %5)
  br i1 %7, label %8, label %116

8:                                                ; preds = %4
  %9 = load i32, i32* %5, align 4
  %10 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %116, label %13

13:                                               ; preds = %8
  %14 = add i32 %9, 2
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp ult i32 %14, %16
  %18 = icmp ugt i32 %16, %9
  %19 = and i1 %17, %18
  br i1 %19, label %20, label %116

20:                                               ; preds = %13
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  br i1 %24, label %32, label %26

26:                                               ; preds = %20
  %27 = bitcast %"class.WTF::StringImpl"* %25 to i8*
  %28 = zext i32 %9 to i64
  %29 = getelementptr inbounds i8, i8* %27, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i16
  br label %37

32:                                               ; preds = %20
  %33 = bitcast %"class.WTF::StringImpl"* %25 to i16*
  %34 = zext i32 %9 to i64
  %35 = getelementptr inbounds i16, i16* %33, i64 %34
  %36 = load i16, i16* %35, align 2
  br label %37

37:                                               ; preds = %26, %32
  %38 = phi i16 [ %31, %26 ], [ %36, %32 ]
  %39 = icmp eq i16 %38, 45
  br i1 %39, label %40, label %116

40:                                               ; preds = %37
  %41 = add nuw i32 %9, 1
  store i32 %41, i32* %5, align 4
  %42 = add i32 %9, 3
  %43 = icmp ule i32 %42, %16
  %44 = icmp ugt i32 %42, %41
  %45 = and i1 %44, %43
  br i1 %45, label %46, label %116

46:                                               ; preds = %40
  %47 = bitcast %"class.WTF::StringImpl"* %25 to i8*
  %48 = bitcast %"class.WTF::StringImpl"* %25 to i16*
  %49 = zext i32 %41 to i64
  %50 = zext i32 %16 to i64
  %51 = icmp ult i32 %41, %16
  br i1 %51, label %52, label %116

52:                                               ; preds = %46
  %53 = load atomic i32, i32* %21 monotonic, align 4
  %54 = and i32 %53, 1
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds i8, i8* %47, i64 %49
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i16
  br label %63

60:                                               ; preds = %52
  %61 = getelementptr inbounds i16, i16* %48, i64 %49
  %62 = load i16, i16* %61, align 2
  br label %63

63:                                               ; preds = %60, %56
  %64 = phi i16 [ %59, %56 ], [ %62, %60 ]
  %65 = add i16 %64, -48
  %66 = icmp ult i16 %65, 10
  br i1 %66, label %67, label %116

67:                                               ; preds = %63
  %68 = load atomic i32, i32* %21 monotonic, align 4
  %69 = and i32 %68, 1
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %75, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds i8, i8* %47, i64 %49
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i16
  br label %78

75:                                               ; preds = %67
  %76 = getelementptr inbounds i16, i16* %48, i64 %49
  %77 = load i16, i16* %76, align 2
  br label %78

78:                                               ; preds = %75, %71
  %79 = phi i16 [ %74, %71 ], [ %77, %75 ]
  %80 = zext i16 %79 to i32
  %81 = sub nuw i32 -2147483601, %80
  %82 = icmp slt i32 %81, -9
  br i1 %82, label %116, label %83

83:                                               ; preds = %78
  %84 = add nsw i32 %80, -48
  %85 = add nuw nsw i64 %49, 1
  %86 = icmp ult i64 %85, %50
  br i1 %86, label %118, label %116

87:                                               ; preds = %150
  %88 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  %89 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 5
  %90 = load i32, i32* %89, align 4
  %91 = icmp eq i32 %90, 1
  br i1 %91, label %96, label %92

92:                                               ; preds = %87
  %93 = sext i32 %90 to i64
  %94 = getelementptr inbounds [12 x i32], [12 x i32]* @_ZN5blinkL12kDaysInMonthE, i64 0, i64 %93
  %95 = load i32, i32* %94, align 4
  br label %100

96:                                               ; preds = %87
  %97 = load i32, i32* %88, align 4
  %98 = tail call zeroext i1 @_ZN3WTF10IsLeapYearEi(i32 %97) #9
  %99 = select i1 %98, i32 29, i32 28
  br label %100

100:                                              ; preds = %92, %96
  %101 = phi i32 [ %95, %92 ], [ %99, %96 ]
  %102 = icmp sgt i32 %153, %101
  br i1 %102, label %116, label %103

103:                                              ; preds = %100
  %104 = load i32, i32* %88, align 4
  %105 = icmp slt i32 %104, 1
  br i1 %105, label %116, label %106

106:                                              ; preds = %103
  %107 = load i32, i32* %89, align 4
  %108 = icmp slt i32 %104, 275760
  %109 = icmp slt i32 %107, 8
  %110 = or i1 %108, %109
  %111 = icmp slt i32 %153, 14
  %112 = or i1 %111, %110
  br i1 %112, label %113, label %116

113:                                              ; preds = %106
  %114 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 4
  store i32 %153, i32* %114, align 4
  store i32 %42, i32* %3, align 4
  %115 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 8
  store i32 1, i32* %115, align 4
  br label %116

116:                                              ; preds = %46, %63, %78, %83, %129, %144, %103, %40, %8, %113, %150, %100, %106, %37, %13, %4
  %117 = phi i1 [ false, %4 ], [ false, %13 ], [ false, %37 ], [ true, %113 ], [ false, %150 ], [ false, %100 ], [ false, %106 ], [ false, %8 ], [ false, %40 ], [ false, %103 ], [ false, %144 ], [ false, %129 ], [ false, %83 ], [ false, %78 ], [ false, %63 ], [ false, %46 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #9
  ret i1 %117

118:                                              ; preds = %83
  %119 = load atomic i32, i32* %21 monotonic, align 4
  %120 = and i32 %119, 1
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %126, label %122

122:                                              ; preds = %118
  %123 = getelementptr inbounds i8, i8* %47, i64 %85
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i16
  br label %129

126:                                              ; preds = %118
  %127 = getelementptr inbounds i16, i16* %48, i64 %85
  %128 = load i16, i16* %127, align 2
  br label %129

129:                                              ; preds = %126, %122
  %130 = phi i16 [ %125, %122 ], [ %128, %126 ]
  %131 = add i16 %130, -48
  %132 = icmp ult i16 %131, 10
  br i1 %132, label %133, label %116

133:                                              ; preds = %129
  %134 = load atomic i32, i32* %21 monotonic, align 4
  %135 = and i32 %134, 1
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %141, label %137

137:                                              ; preds = %133
  %138 = getelementptr inbounds i8, i8* %47, i64 %85
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i16
  br label %144

141:                                              ; preds = %133
  %142 = getelementptr inbounds i16, i16* %48, i64 %85
  %143 = load i16, i16* %142, align 2
  br label %144

144:                                              ; preds = %141, %137
  %145 = phi i16 [ %140, %137 ], [ %143, %141 ]
  %146 = zext i16 %145 to i32
  %147 = sub nuw i32 -2147483601, %146
  %148 = sdiv i32 %147, 10
  %149 = icmp sgt i32 %84, %148
  br i1 %149, label %116, label %150

150:                                              ; preds = %144
  %151 = mul nsw i32 %84, 10
  %152 = add nsw i32 %151, -48
  %153 = add nsw i32 %152, %146
  %154 = icmp slt i32 %153, 1
  br i1 %154, label %116, label %87
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink14DateComponents9ParseWeekERKN3WTF6StringEjRj(%"class.blink::DateComponents"* nocapture, %"class.WTF::String"* nocapture readonly dereferenceable(8), i32, i32* nocapture dereferenceable(4)) local_unnamed_addr #1 align 2 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #9
  store i32 -1431655766, i32* %5, align 4
  %7 = call zeroext i1 @_ZN5blink14DateComponents9ParseYearERKN3WTF6StringEjRj(%"class.blink::DateComponents"* %0, %"class.WTF::String"* dereferenceable(8) %1, i32 %2, i32* nonnull dereferenceable(4) %5)
  br i1 %7, label %8, label %137

8:                                                ; preds = %4
  %9 = load i32, i32* %5, align 4
  %10 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %137, label %13

13:                                               ; preds = %8
  %14 = add i32 %9, 3
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp ult i32 %14, %16
  %18 = icmp ugt i32 %16, %9
  %19 = and i1 %17, %18
  br i1 %19, label %20, label %137

20:                                               ; preds = %13
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  br i1 %24, label %32, label %26

26:                                               ; preds = %20
  %27 = bitcast %"class.WTF::StringImpl"* %25 to i8*
  %28 = zext i32 %9 to i64
  %29 = getelementptr inbounds i8, i8* %27, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i16
  br label %37

32:                                               ; preds = %20
  %33 = bitcast %"class.WTF::StringImpl"* %25 to i16*
  %34 = zext i32 %9 to i64
  %35 = getelementptr inbounds i16, i16* %33, i64 %34
  %36 = load i16, i16* %35, align 2
  br label %37

37:                                               ; preds = %26, %32
  %38 = phi i16 [ %31, %26 ], [ %36, %32 ]
  %39 = icmp eq i16 %38, 45
  br i1 %39, label %40, label %137

40:                                               ; preds = %37
  %41 = add nuw i32 %9, 1
  store i32 %41, i32* %5, align 4
  %42 = icmp ugt i32 %16, %41
  br i1 %42, label %43, label %137

43:                                               ; preds = %40
  %44 = load atomic i32, i32* %21 monotonic, align 4
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %53, label %47

47:                                               ; preds = %43
  %48 = bitcast %"class.WTF::StringImpl"* %25 to i8*
  %49 = zext i32 %41 to i64
  %50 = getelementptr inbounds i8, i8* %48, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i16
  br label %58

53:                                               ; preds = %43
  %54 = bitcast %"class.WTF::StringImpl"* %25 to i16*
  %55 = zext i32 %41 to i64
  %56 = getelementptr inbounds i16, i16* %54, i64 %55
  %57 = load i16, i16* %56, align 2
  br label %58

58:                                               ; preds = %47, %53
  %59 = phi i16 [ %52, %47 ], [ %57, %53 ]
  %60 = icmp eq i16 %59, 87
  br i1 %60, label %61, label %137

61:                                               ; preds = %58
  %62 = add nuw i32 %9, 2
  store i32 %62, i32* %5, align 4
  %63 = add i32 %9, 4
  %64 = icmp ule i32 %63, %16
  %65 = icmp ugt i32 %63, %62
  %66 = and i1 %65, %64
  br i1 %66, label %67, label %137

67:                                               ; preds = %61
  %68 = bitcast %"class.WTF::StringImpl"* %25 to i8*
  %69 = bitcast %"class.WTF::StringImpl"* %25 to i16*
  %70 = zext i32 %62 to i64
  %71 = zext i32 %16 to i64
  %72 = icmp ult i32 %62, %16
  br i1 %72, label %73, label %137

73:                                               ; preds = %67
  %74 = load atomic i32, i32* %21 monotonic, align 4
  %75 = and i32 %74, 1
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %81, label %77

77:                                               ; preds = %73
  %78 = getelementptr inbounds i8, i8* %68, i64 %70
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i16
  br label %84

81:                                               ; preds = %73
  %82 = getelementptr inbounds i16, i16* %69, i64 %70
  %83 = load i16, i16* %82, align 2
  br label %84

84:                                               ; preds = %81, %77
  %85 = phi i16 [ %80, %77 ], [ %83, %81 ]
  %86 = add i16 %85, -48
  %87 = icmp ult i16 %86, 10
  br i1 %87, label %88, label %137

88:                                               ; preds = %84
  %89 = load atomic i32, i32* %21 monotonic, align 4
  %90 = and i32 %89, 1
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %96, label %92

92:                                               ; preds = %88
  %93 = getelementptr inbounds i8, i8* %68, i64 %70
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i16
  br label %99

96:                                               ; preds = %88
  %97 = getelementptr inbounds i16, i16* %69, i64 %70
  %98 = load i16, i16* %97, align 2
  br label %99

99:                                               ; preds = %96, %92
  %100 = phi i16 [ %95, %92 ], [ %98, %96 ]
  %101 = zext i16 %100 to i32
  %102 = sub nuw i32 -2147483601, %101
  %103 = icmp slt i32 %102, -9
  br i1 %103, label %137, label %104

104:                                              ; preds = %99
  %105 = add nsw i32 %101, -48
  %106 = add nuw nsw i64 %70, 1
  %107 = icmp ult i64 %106, %71
  br i1 %107, label %139, label %137

108:                                              ; preds = %171
  %109 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  %110 = load i32, i32* %109, align 4
  %111 = add i32 %110, -1
  %112 = sdiv i32 %111, 100
  %113 = srem i32 %111, 100
  %114 = sdiv i32 %113, 4
  %115 = sdiv i32 %111, 400
  %116 = mul nsw i32 %112, 5
  %117 = add nsw i32 %113, 43
  %118 = add nsw i32 %117, %115
  %119 = add nsw i32 %118, %114
  %120 = add nsw i32 %119, %116
  %121 = srem i32 %120, 7
  switch i32 %121, label %125 [
    i32 4, label %126
    i32 3, label %122
  ]

122:                                              ; preds = %108
  %123 = tail call zeroext i1 @_ZN3WTF10IsLeapYearEi(i32 %110) #9
  %124 = select i1 %123, i32 53, i32 52
  br label %126

125:                                              ; preds = %108
  br label %126

126:                                              ; preds = %108, %122, %125
  %127 = phi i32 [ 53, %108 ], [ %124, %122 ], [ 52, %125 ]
  %128 = icmp sgt i32 %174, %127
  br i1 %128, label %137, label %129

129:                                              ; preds = %126
  %130 = load i32, i32* %109, align 4
  %131 = icmp eq i32 %130, 275760
  %132 = icmp sgt i32 %174, 37
  %133 = and i1 %132, %131
  br i1 %133, label %137, label %134

134:                                              ; preds = %129
  %135 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 7
  store i32 %174, i32* %135, align 4
  store i32 %63, i32* %3, align 4
  %136 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 8
  store i32 5, i32* %136, align 4
  br label %137

137:                                              ; preds = %67, %84, %99, %104, %150, %165, %61, %40, %8, %134, %171, %126, %129, %58, %37, %13, %4
  %138 = phi i1 [ false, %4 ], [ false, %13 ], [ false, %37 ], [ false, %58 ], [ true, %134 ], [ false, %171 ], [ false, %126 ], [ false, %129 ], [ false, %8 ], [ false, %40 ], [ false, %61 ], [ false, %165 ], [ false, %150 ], [ false, %104 ], [ false, %99 ], [ false, %84 ], [ false, %67 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #9
  ret i1 %138

139:                                              ; preds = %104
  %140 = load atomic i32, i32* %21 monotonic, align 4
  %141 = and i32 %140, 1
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %147, label %143

143:                                              ; preds = %139
  %144 = getelementptr inbounds i8, i8* %68, i64 %106
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i16
  br label %150

147:                                              ; preds = %139
  %148 = getelementptr inbounds i16, i16* %69, i64 %106
  %149 = load i16, i16* %148, align 2
  br label %150

150:                                              ; preds = %147, %143
  %151 = phi i16 [ %146, %143 ], [ %149, %147 ]
  %152 = add i16 %151, -48
  %153 = icmp ult i16 %152, 10
  br i1 %153, label %154, label %137

154:                                              ; preds = %150
  %155 = load atomic i32, i32* %21 monotonic, align 4
  %156 = and i32 %155, 1
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %162, label %158

158:                                              ; preds = %154
  %159 = getelementptr inbounds i8, i8* %68, i64 %106
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i16
  br label %165

162:                                              ; preds = %154
  %163 = getelementptr inbounds i16, i16* %69, i64 %106
  %164 = load i16, i16* %163, align 2
  br label %165

165:                                              ; preds = %162, %158
  %166 = phi i16 [ %161, %158 ], [ %164, %162 ]
  %167 = zext i16 %166 to i32
  %168 = sub nuw i32 -2147483601, %167
  %169 = sdiv i32 %168, 10
  %170 = icmp sgt i32 %105, %169
  br i1 %170, label %137, label %171

171:                                              ; preds = %165
  %172 = mul nsw i32 %105, 10
  %173 = add nsw i32 %172, -48
  %174 = add nsw i32 %173, %167
  %175 = icmp slt i32 %174, 1
  br i1 %175, label %137, label %108
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink14DateComponents9ParseTimeERKN3WTF6StringEjRj(%"class.blink::DateComponents"* nocapture, %"class.WTF::String"* nocapture readonly dereferenceable(8), i32, i32* nocapture dereferenceable(4)) local_unnamed_addr #1 align 2 {
  %5 = add i32 %2, 2
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  br label %12

12:                                               ; preds = %9, %4
  %13 = phi i32 [ %11, %9 ], [ 0, %4 ]
  %14 = icmp ugt i32 %5, %13
  br i1 %14, label %407, label %15

15:                                               ; preds = %12
  %16 = icmp ult i32 %2, -2
  br i1 %16, label %17, label %63

17:                                               ; preds = %15
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 1
  %20 = bitcast %"class.WTF::StringImpl"* %19 to i8*
  %21 = bitcast %"class.WTF::StringImpl"* %19 to i16*
  br i1 %8, label %407, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 1
  %24 = zext i32 %2 to i64
  %25 = load i32, i32* %23, align 4
  %26 = zext i32 %25 to i64
  %27 = icmp ugt i32 %25, %2
  br i1 %27, label %28, label %407

28:                                               ; preds = %22
  %29 = load atomic i32, i32* %18 monotonic, align 4
  %30 = and i32 %29, 1
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %36, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds i8, i8* %20, i64 %24
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i16
  br label %39

36:                                               ; preds = %28
  %37 = getelementptr inbounds i16, i16* %21, i64 %24
  %38 = load i16, i16* %37, align 2
  br label %39

39:                                               ; preds = %36, %32
  %40 = phi i16 [ %35, %32 ], [ %38, %36 ]
  %41 = add i16 %40, -48
  %42 = icmp ult i16 %41, 10
  br i1 %42, label %43, label %407

43:                                               ; preds = %39
  %44 = load atomic i32, i32* %18 monotonic, align 4
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %51, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds i8, i8* %20, i64 %24
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i16
  br label %54

51:                                               ; preds = %43
  %52 = getelementptr inbounds i16, i16* %21, i64 %24
  %53 = load i16, i16* %52, align 2
  br label %54

54:                                               ; preds = %51, %47
  %55 = phi i16 [ %50, %47 ], [ %53, %51 ]
  %56 = zext i16 %55 to i32
  %57 = sub nuw i32 -2147483601, %56
  %58 = icmp slt i32 %57, -9
  br i1 %58, label %407, label %59

59:                                               ; preds = %54
  %60 = add nsw i32 %56, -48
  %61 = add nuw nsw i64 %24, 1
  %62 = icmp ult i64 %61, %26
  br i1 %62, label %584, label %407

63:                                               ; preds = %616, %15
  %64 = phi i32 [ 0, %15 ], [ %619, %616 ]
  %65 = icmp ugt i32 %64, 23
  %66 = or i1 %8, %65
  br i1 %66, label %407, label %67

67:                                               ; preds = %63
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 1
  %69 = load i32, i32* %68, align 4
  %70 = icmp ult i32 %5, %69
  br i1 %70, label %71, label %407

71:                                               ; preds = %67
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = load atomic i32, i32* %72 monotonic, align 4
  %74 = and i32 %73, 1
  %75 = icmp eq i32 %74, 0
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 1
  br i1 %75, label %83, label %77

77:                                               ; preds = %71
  %78 = bitcast %"class.WTF::StringImpl"* %76 to i8*
  %79 = zext i32 %5 to i64
  %80 = getelementptr inbounds i8, i8* %78, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i16
  br label %88

83:                                               ; preds = %71
  %84 = bitcast %"class.WTF::StringImpl"* %76 to i16*
  %85 = zext i32 %5 to i64
  %86 = getelementptr inbounds i16, i16* %84, i64 %85
  %87 = load i16, i16* %86, align 2
  br label %88

88:                                               ; preds = %77, %83
  %89 = phi i16 [ %82, %77 ], [ %87, %83 ]
  %90 = icmp eq i16 %89, 58
  br i1 %90, label %91, label %407

91:                                               ; preds = %88
  %92 = add i32 %2, 3
  %93 = add i32 %2, 5
  %94 = icmp ugt i32 %93, %69
  br i1 %94, label %407, label %95

95:                                               ; preds = %91
  %96 = icmp ugt i32 %93, %92
  br i1 %96, label %97, label %143

97:                                               ; preds = %95
  %98 = bitcast %"class.WTF::StringImpl"* %76 to i8*
  %99 = bitcast %"class.WTF::StringImpl"* %76 to i16*
  %100 = zext i32 %92 to i64
  %101 = zext i32 %69 to i64
  %102 = icmp ult i32 %92, %69
  br i1 %102, label %103, label %407

103:                                              ; preds = %97
  %104 = load atomic i32, i32* %72 monotonic, align 4
  %105 = and i32 %104, 1
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %111, label %107

107:                                              ; preds = %103
  %108 = getelementptr inbounds i8, i8* %98, i64 %100
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i16
  br label %114

111:                                              ; preds = %103
  %112 = getelementptr inbounds i16, i16* %99, i64 %100
  %113 = load i16, i16* %112, align 2
  br label %114

114:                                              ; preds = %111, %107
  %115 = phi i16 [ %110, %107 ], [ %113, %111 ]
  %116 = add i16 %115, -48
  %117 = icmp ult i16 %116, 10
  br i1 %117, label %118, label %407

118:                                              ; preds = %114
  %119 = load atomic i32, i32* %72 monotonic, align 4
  %120 = and i32 %119, 1
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %126, label %122

122:                                              ; preds = %118
  %123 = getelementptr inbounds i8, i8* %98, i64 %100
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i16
  br label %129

126:                                              ; preds = %118
  %127 = getelementptr inbounds i16, i16* %99, i64 %100
  %128 = load i16, i16* %127, align 2
  br label %129

129:                                              ; preds = %126, %122
  %130 = phi i16 [ %125, %122 ], [ %128, %126 ]
  %131 = zext i16 %130 to i32
  %132 = sub nuw i32 -2147483601, %131
  %133 = icmp slt i32 %132, -9
  br i1 %133, label %407, label %134

134:                                              ; preds = %129
  %135 = add nsw i32 %131, -48
  %136 = add nuw nsw i64 %100, 1
  %137 = icmp ult i64 %136, %101
  br i1 %137, label %552, label %407

138:                                              ; preds = %578
  %139 = mul nsw i32 %135, 10
  %140 = add nsw i32 %139, -48
  %141 = add nsw i32 %140, %580
  %142 = icmp ugt i32 %141, 59
  br i1 %142, label %407, label %143

143:                                              ; preds = %95, %138
  %144 = phi i32 [ %141, %138 ], [ 0, %95 ]
  %145 = add i32 %2, 7
  %146 = icmp ult i32 %145, %69
  %147 = icmp ugt i32 %69, %93
  %148 = and i1 %146, %147
  br i1 %148, label %149, label %398

149:                                              ; preds = %143
  %150 = load atomic i32, i32* %72 monotonic, align 4
  %151 = and i32 %150, 1
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %159, label %153

153:                                              ; preds = %149
  %154 = bitcast %"class.WTF::StringImpl"* %76 to i8*
  %155 = zext i32 %93 to i64
  %156 = getelementptr inbounds i8, i8* %154, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i16
  br label %164

159:                                              ; preds = %149
  %160 = bitcast %"class.WTF::StringImpl"* %76 to i16*
  %161 = zext i32 %93 to i64
  %162 = getelementptr inbounds i16, i16* %160, i64 %161
  %163 = load i16, i16* %162, align 2
  br label %164

164:                                              ; preds = %153, %159
  %165 = phi i16 [ %158, %153 ], [ %163, %159 ]
  %166 = icmp eq i16 %165, 58
  br i1 %166, label %167, label %398

167:                                              ; preds = %164
  %168 = add i32 %2, 6
  %169 = add i32 %2, 8
  %170 = icmp ugt i32 %169, %69
  br i1 %170, label %398, label %171

171:                                              ; preds = %167
  %172 = icmp ugt i32 %169, %168
  br i1 %172, label %173, label %219

173:                                              ; preds = %171
  %174 = bitcast %"class.WTF::StringImpl"* %76 to i8*
  %175 = bitcast %"class.WTF::StringImpl"* %76 to i16*
  %176 = zext i32 %168 to i64
  %177 = zext i32 %69 to i64
  %178 = icmp ult i32 %168, %69
  br i1 %178, label %179, label %398

179:                                              ; preds = %173
  %180 = load atomic i32, i32* %72 monotonic, align 4
  %181 = and i32 %180, 1
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %187, label %183

183:                                              ; preds = %179
  %184 = getelementptr inbounds i8, i8* %174, i64 %176
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i16
  br label %190

187:                                              ; preds = %179
  %188 = getelementptr inbounds i16, i16* %175, i64 %176
  %189 = load i16, i16* %188, align 2
  br label %190

190:                                              ; preds = %187, %183
  %191 = phi i16 [ %186, %183 ], [ %189, %187 ]
  %192 = add i16 %191, -48
  %193 = icmp ult i16 %192, 10
  br i1 %193, label %194, label %398

194:                                              ; preds = %190
  %195 = load atomic i32, i32* %72 monotonic, align 4
  %196 = and i32 %195, 1
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %202, label %198

198:                                              ; preds = %194
  %199 = getelementptr inbounds i8, i8* %174, i64 %176
  %200 = load i8, i8* %199, align 1
  %201 = zext i8 %200 to i16
  br label %205

202:                                              ; preds = %194
  %203 = getelementptr inbounds i16, i16* %175, i64 %176
  %204 = load i16, i16* %203, align 2
  br label %205

205:                                              ; preds = %202, %198
  %206 = phi i16 [ %201, %198 ], [ %204, %202 ]
  %207 = zext i16 %206 to i32
  %208 = sub nuw i32 -2147483601, %207
  %209 = icmp slt i32 %208, -9
  br i1 %209, label %398, label %210

210:                                              ; preds = %205
  %211 = add nsw i32 %207, -48
  %212 = add nuw nsw i64 %176, 1
  %213 = icmp ult i64 %212, %177
  br i1 %213, label %520, label %398

214:                                              ; preds = %546
  %215 = mul nsw i32 %211, 10
  %216 = add nsw i32 %215, -48
  %217 = add nsw i32 %216, %548
  %218 = icmp ult i32 %217, 60
  br i1 %218, label %219, label %398

219:                                              ; preds = %171, %214
  %220 = phi i32 [ %217, %214 ], [ 0, %171 ]
  %221 = icmp ult i32 %169, %69
  br i1 %221, label %222, label %398

222:                                              ; preds = %219
  %223 = load atomic i32, i32* %72 monotonic, align 4
  %224 = and i32 %223, 1
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %232, label %226

226:                                              ; preds = %222
  %227 = bitcast %"class.WTF::StringImpl"* %76 to i8*
  %228 = zext i32 %169 to i64
  %229 = getelementptr inbounds i8, i8* %227, i64 %228
  %230 = load i8, i8* %229, align 1
  %231 = zext i8 %230 to i16
  br label %237

232:                                              ; preds = %222
  %233 = bitcast %"class.WTF::StringImpl"* %76 to i16*
  %234 = zext i32 %169 to i64
  %235 = getelementptr inbounds i16, i16* %233, i64 %234
  %236 = load i16, i16* %235, align 2
  br label %237

237:                                              ; preds = %226, %232
  %238 = phi i16 [ %231, %226 ], [ %236, %232 ]
  %239 = icmp eq i16 %238, 46
  br i1 %239, label %240, label %398

240:                                              ; preds = %237
  %241 = add i32 %2, 9
  %242 = bitcast %"class.WTF::StringImpl"* %76 to i8*
  %243 = bitcast %"class.WTF::StringImpl"* %76 to i16*
  %244 = zext i32 %241 to i64
  %245 = icmp ult i32 %241, %69
  br i1 %245, label %246, label %267

246:                                              ; preds = %240
  %247 = zext i32 %69 to i64
  br label %248

248:                                              ; preds = %246, %264
  %249 = phi i64 [ %265, %264 ], [ %244, %246 ]
  %250 = load atomic i32, i32* %72 monotonic, align 4
  %251 = and i32 %250, 1
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %257, label %253

253:                                              ; preds = %248
  %254 = getelementptr inbounds i8, i8* %242, i64 %249
  %255 = load i8, i8* %254, align 1
  %256 = zext i8 %255 to i16
  br label %260

257:                                              ; preds = %248
  %258 = getelementptr inbounds i16, i16* %243, i64 %249
  %259 = load i16, i16* %258, align 2
  br label %260

260:                                              ; preds = %257, %253
  %261 = phi i16 [ %256, %253 ], [ %259, %257 ]
  %262 = add i16 %261, -48
  %263 = icmp ult i16 %262, 10
  br i1 %263, label %264, label %267

264:                                              ; preds = %260
  %265 = add nuw nsw i64 %249, 1
  %266 = icmp ult i64 %265, %247
  br i1 %266, label %248, label %267

267:                                              ; preds = %260, %264, %240
  %268 = phi i64 [ %244, %240 ], [ %265, %264 ], [ %249, %260 ]
  %269 = trunc i64 %268 to i32
  %270 = sub i32 %269, %241
  switch i32 %270, label %407 [
    i32 0, label %398
    i32 1, label %271
    i32 2, label %312
    i32 3, label %355
  ]

271:                                              ; preds = %267
  %272 = add i32 %2, 10
  %273 = icmp ule i32 %272, %69
  %274 = icmp ugt i32 %272, %241
  %275 = and i1 %274, %273
  %276 = icmp ult i32 %241, %69
  %277 = and i1 %275, %276
  br i1 %277, label %278, label %398

278:                                              ; preds = %271
  %279 = load atomic i32, i32* %72 monotonic, align 4
  %280 = and i32 %279, 1
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %286, label %282

282:                                              ; preds = %278
  %283 = getelementptr inbounds i8, i8* %242, i64 %244
  %284 = load i8, i8* %283, align 1
  %285 = zext i8 %284 to i16
  br label %289

286:                                              ; preds = %278
  %287 = getelementptr inbounds i16, i16* %243, i64 %244
  %288 = load i16, i16* %287, align 2
  br label %289

289:                                              ; preds = %286, %282
  %290 = phi i16 [ %285, %282 ], [ %288, %286 ]
  %291 = add i16 %290, -48
  %292 = icmp ult i16 %291, 10
  br i1 %292, label %293, label %398

293:                                              ; preds = %289
  %294 = load atomic i32, i32* %72 monotonic, align 4
  %295 = and i32 %294, 1
  %296 = icmp eq i32 %295, 0
  br i1 %296, label %301, label %297

297:                                              ; preds = %293
  %298 = getelementptr inbounds i8, i8* %242, i64 %244
  %299 = load i8, i8* %298, align 1
  %300 = zext i8 %299 to i16
  br label %304

301:                                              ; preds = %293
  %302 = getelementptr inbounds i16, i16* %243, i64 %244
  %303 = load i16, i16* %302, align 2
  br label %304

304:                                              ; preds = %301, %297
  %305 = phi i16 [ %300, %297 ], [ %303, %301 ]
  %306 = zext i16 %305 to i32
  %307 = sub nuw i32 -2147483601, %306
  %308 = icmp slt i32 %307, -9
  %309 = mul nuw nsw i32 %306, 100
  %310 = add nsw i32 %309, -4800
  %311 = select i1 %308, i32 0, i32 %310
  br label %398

312:                                              ; preds = %267
  %313 = add i32 %2, 11
  %314 = icmp ule i32 %313, %69
  %315 = icmp ugt i32 %313, %241
  %316 = and i1 %315, %314
  br i1 %316, label %317, label %398

317:                                              ; preds = %312
  %318 = zext i32 %69 to i64
  %319 = icmp ult i32 %241, %69
  br i1 %319, label %320, label %398

320:                                              ; preds = %317
  %321 = load atomic i32, i32* %72 monotonic, align 4
  %322 = and i32 %321, 1
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %328, label %324

324:                                              ; preds = %320
  %325 = getelementptr inbounds i8, i8* %242, i64 %244
  %326 = load i8, i8* %325, align 1
  %327 = zext i8 %326 to i16
  br label %331

328:                                              ; preds = %320
  %329 = getelementptr inbounds i16, i16* %243, i64 %244
  %330 = load i16, i16* %329, align 2
  br label %331

331:                                              ; preds = %328, %324
  %332 = phi i16 [ %327, %324 ], [ %330, %328 ]
  %333 = add i16 %332, -48
  %334 = icmp ult i16 %333, 10
  br i1 %334, label %335, label %398

335:                                              ; preds = %331
  %336 = load atomic i32, i32* %72 monotonic, align 4
  %337 = and i32 %336, 1
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %343, label %339

339:                                              ; preds = %335
  %340 = getelementptr inbounds i8, i8* %242, i64 %244
  %341 = load i8, i8* %340, align 1
  %342 = zext i8 %341 to i16
  br label %346

343:                                              ; preds = %335
  %344 = getelementptr inbounds i16, i16* %243, i64 %244
  %345 = load i16, i16* %344, align 2
  br label %346

346:                                              ; preds = %343, %339
  %347 = phi i16 [ %342, %339 ], [ %345, %343 ]
  %348 = zext i16 %347 to i32
  %349 = sub nuw i32 -2147483601, %348
  %350 = icmp slt i32 %349, -9
  br i1 %350, label %398, label %351

351:                                              ; preds = %346
  %352 = add nsw i32 %348, -48
  %353 = add nuw nsw i64 %244, 1
  %354 = icmp ult i64 %353, %318
  br i1 %354, label %409, label %398

355:                                              ; preds = %267
  %356 = add i32 %2, 12
  %357 = icmp ule i32 %356, %69
  %358 = icmp ugt i32 %356, %241
  %359 = and i1 %358, %357
  br i1 %359, label %360, label %398

360:                                              ; preds = %355
  %361 = zext i32 %69 to i64
  %362 = icmp ult i32 %241, %69
  br i1 %362, label %363, label %398

363:                                              ; preds = %360
  %364 = load atomic i32, i32* %72 monotonic, align 4
  %365 = and i32 %364, 1
  %366 = icmp eq i32 %365, 0
  br i1 %366, label %371, label %367

367:                                              ; preds = %363
  %368 = getelementptr inbounds i8, i8* %242, i64 %244
  %369 = load i8, i8* %368, align 1
  %370 = zext i8 %369 to i16
  br label %374

371:                                              ; preds = %363
  %372 = getelementptr inbounds i16, i16* %243, i64 %244
  %373 = load i16, i16* %372, align 2
  br label %374

374:                                              ; preds = %371, %367
  %375 = phi i16 [ %370, %367 ], [ %373, %371 ]
  %376 = add i16 %375, -48
  %377 = icmp ult i16 %376, 10
  br i1 %377, label %378, label %398

378:                                              ; preds = %374
  %379 = load atomic i32, i32* %72 monotonic, align 4
  %380 = and i32 %379, 1
  %381 = icmp eq i32 %380, 0
  br i1 %381, label %386, label %382

382:                                              ; preds = %378
  %383 = getelementptr inbounds i8, i8* %242, i64 %244
  %384 = load i8, i8* %383, align 1
  %385 = zext i8 %384 to i16
  br label %389

386:                                              ; preds = %378
  %387 = getelementptr inbounds i16, i16* %243, i64 %244
  %388 = load i16, i16* %387, align 2
  br label %389

389:                                              ; preds = %386, %382
  %390 = phi i16 [ %385, %382 ], [ %388, %386 ]
  %391 = zext i16 %390 to i32
  %392 = sub nuw i32 -2147483601, %391
  %393 = icmp slt i32 %392, -9
  br i1 %393, label %398, label %394

394:                                              ; preds = %389
  %395 = add nsw i32 %391, -48
  %396 = add nuw nsw i64 %244, 1
  %397 = icmp ult i64 %396, %361
  br i1 %397, label %446, label %398

398:                                              ; preds = %312, %441, %435, %420, %351, %346, %331, %317, %271, %289, %304, %190, %205, %173, %210, %531, %546, %360, %374, %389, %394, %457, %472, %478, %495, %510, %516, %167, %355, %267, %214, %237, %219, %164, %143
  %399 = phi i32 [ %220, %237 ], [ %220, %219 ], [ %217, %214 ], [ 0, %164 ], [ 0, %143 ], [ 0, %167 ], [ %220, %267 ], [ %220, %355 ], [ %220, %516 ], [ %220, %510 ], [ %220, %495 ], [ %220, %478 ], [ %220, %472 ], [ %220, %457 ], [ %220, %394 ], [ %220, %389 ], [ %220, %374 ], [ %220, %360 ], [ 0, %546 ], [ 0, %531 ], [ 0, %210 ], [ 0, %173 ], [ 0, %205 ], [ 0, %190 ], [ %220, %304 ], [ %220, %289 ], [ %220, %271 ], [ %220, %317 ], [ %220, %331 ], [ %220, %346 ], [ %220, %351 ], [ %220, %420 ], [ %220, %435 ], [ %220, %441 ], [ %220, %312 ]
  %400 = phi i32 [ 0, %237 ], [ 0, %219 ], [ 0, %214 ], [ 0, %164 ], [ 0, %143 ], [ 0, %167 ], [ %270, %267 ], [ 0, %355 ], [ %519, %516 ], [ 0, %510 ], [ 0, %495 ], [ 0, %478 ], [ 0, %472 ], [ 0, %457 ], [ 0, %394 ], [ 0, %389 ], [ 0, %374 ], [ 0, %360 ], [ 0, %546 ], [ 0, %531 ], [ 0, %210 ], [ 0, %173 ], [ 0, %205 ], [ 0, %190 ], [ %311, %304 ], [ 0, %289 ], [ 0, %271 ], [ 0, %317 ], [ 0, %331 ], [ 0, %346 ], [ 0, %351 ], [ 0, %420 ], [ 0, %435 ], [ %445, %441 ], [ 0, %312 ]
  %401 = phi i32 [ %169, %237 ], [ %169, %219 ], [ %93, %214 ], [ %93, %164 ], [ %93, %143 ], [ %93, %167 ], [ %169, %267 ], [ %269, %355 ], [ %269, %516 ], [ %269, %510 ], [ %269, %495 ], [ %269, %478 ], [ %269, %472 ], [ %269, %457 ], [ %269, %394 ], [ %269, %389 ], [ %269, %374 ], [ %269, %360 ], [ %93, %546 ], [ %93, %531 ], [ %93, %210 ], [ %93, %173 ], [ %93, %205 ], [ %93, %190 ], [ %269, %304 ], [ %269, %289 ], [ %269, %271 ], [ %269, %317 ], [ %269, %331 ], [ %269, %346 ], [ %269, %351 ], [ %269, %420 ], [ %269, %435 ], [ %269, %441 ], [ %269, %312 ]
  %402 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 3
  store i32 %64, i32* %402, align 4
  %403 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 2
  store i32 %144, i32* %403, align 4
  %404 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 1
  store i32 %399, i32* %404, align 4
  %405 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 0
  store i32 %400, i32* %405, align 4
  store i32 %401, i32* %3, align 4
  %406 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 8
  store i32 4, i32* %406, align 4
  br label %407

407:                                              ; preds = %22, %39, %54, %59, %595, %610, %97, %114, %129, %134, %563, %578, %91, %12, %63, %17, %138, %267, %398, %67, %88
  %408 = phi i1 [ false, %63 ], [ false, %67 ], [ false, %88 ], [ false, %138 ], [ true, %398 ], [ false, %267 ], [ false, %17 ], [ false, %12 ], [ false, %91 ], [ false, %578 ], [ false, %563 ], [ false, %134 ], [ false, %129 ], [ false, %114 ], [ false, %97 ], [ false, %610 ], [ false, %595 ], [ false, %59 ], [ false, %54 ], [ false, %39 ], [ false, %22 ]
  ret i1 %408

409:                                              ; preds = %351
  %410 = load atomic i32, i32* %72 monotonic, align 4
  %411 = and i32 %410, 1
  %412 = icmp eq i32 %411, 0
  br i1 %412, label %417, label %413

413:                                              ; preds = %409
  %414 = getelementptr inbounds i8, i8* %242, i64 %353
  %415 = load i8, i8* %414, align 1
  %416 = zext i8 %415 to i16
  br label %420

417:                                              ; preds = %409
  %418 = getelementptr inbounds i16, i16* %243, i64 %353
  %419 = load i16, i16* %418, align 2
  br label %420

420:                                              ; preds = %417, %413
  %421 = phi i16 [ %416, %413 ], [ %419, %417 ]
  %422 = add i16 %421, -48
  %423 = icmp ult i16 %422, 10
  br i1 %423, label %424, label %398

424:                                              ; preds = %420
  %425 = load atomic i32, i32* %72 monotonic, align 4
  %426 = and i32 %425, 1
  %427 = icmp eq i32 %426, 0
  br i1 %427, label %432, label %428

428:                                              ; preds = %424
  %429 = getelementptr inbounds i8, i8* %242, i64 %353
  %430 = load i8, i8* %429, align 1
  %431 = zext i8 %430 to i16
  br label %435

432:                                              ; preds = %424
  %433 = getelementptr inbounds i16, i16* %243, i64 %353
  %434 = load i16, i16* %433, align 2
  br label %435

435:                                              ; preds = %432, %428
  %436 = phi i16 [ %431, %428 ], [ %434, %432 ]
  %437 = zext i16 %436 to i32
  %438 = sub nuw i32 -2147483601, %437
  %439 = sdiv i32 %438, 10
  %440 = icmp sgt i32 %352, %439
  br i1 %440, label %398, label %441

441:                                              ; preds = %435
  %442 = mul nsw i32 %352, 10
  %443 = add nsw i32 %442, -48
  %444 = add nsw i32 %443, %437
  %445 = mul nsw i32 %444, 10
  br label %398

446:                                              ; preds = %394
  %447 = load atomic i32, i32* %72 monotonic, align 4
  %448 = and i32 %447, 1
  %449 = icmp eq i32 %448, 0
  br i1 %449, label %454, label %450

450:                                              ; preds = %446
  %451 = getelementptr inbounds i8, i8* %242, i64 %396
  %452 = load i8, i8* %451, align 1
  %453 = zext i8 %452 to i16
  br label %457

454:                                              ; preds = %446
  %455 = getelementptr inbounds i16, i16* %243, i64 %396
  %456 = load i16, i16* %455, align 2
  br label %457

457:                                              ; preds = %454, %450
  %458 = phi i16 [ %453, %450 ], [ %456, %454 ]
  %459 = add i16 %458, -48
  %460 = icmp ult i16 %459, 10
  br i1 %460, label %461, label %398

461:                                              ; preds = %457
  %462 = load atomic i32, i32* %72 monotonic, align 4
  %463 = and i32 %462, 1
  %464 = icmp eq i32 %463, 0
  br i1 %464, label %469, label %465

465:                                              ; preds = %461
  %466 = getelementptr inbounds i8, i8* %242, i64 %396
  %467 = load i8, i8* %466, align 1
  %468 = zext i8 %467 to i16
  br label %472

469:                                              ; preds = %461
  %470 = getelementptr inbounds i16, i16* %243, i64 %396
  %471 = load i16, i16* %470, align 2
  br label %472

472:                                              ; preds = %469, %465
  %473 = phi i16 [ %468, %465 ], [ %471, %469 ]
  %474 = zext i16 %473 to i32
  %475 = sub nuw i32 -2147483601, %474
  %476 = sdiv i32 %475, 10
  %477 = icmp sgt i32 %395, %476
  br i1 %477, label %398, label %478

478:                                              ; preds = %472
  %479 = mul nsw i32 %395, 10
  %480 = add nsw i32 %479, -48
  %481 = add nsw i32 %480, %474
  %482 = add nuw nsw i64 %244, 2
  %483 = icmp ult i64 %482, %361
  br i1 %483, label %484, label %398

484:                                              ; preds = %478
  %485 = load atomic i32, i32* %72 monotonic, align 4
  %486 = and i32 %485, 1
  %487 = icmp eq i32 %486, 0
  br i1 %487, label %492, label %488

488:                                              ; preds = %484
  %489 = getelementptr inbounds i8, i8* %242, i64 %482
  %490 = load i8, i8* %489, align 1
  %491 = zext i8 %490 to i16
  br label %495

492:                                              ; preds = %484
  %493 = getelementptr inbounds i16, i16* %243, i64 %482
  %494 = load i16, i16* %493, align 2
  br label %495

495:                                              ; preds = %492, %488
  %496 = phi i16 [ %491, %488 ], [ %494, %492 ]
  %497 = add i16 %496, -48
  %498 = icmp ult i16 %497, 10
  br i1 %498, label %499, label %398

499:                                              ; preds = %495
  %500 = load atomic i32, i32* %72 monotonic, align 4
  %501 = and i32 %500, 1
  %502 = icmp eq i32 %501, 0
  br i1 %502, label %507, label %503

503:                                              ; preds = %499
  %504 = getelementptr inbounds i8, i8* %242, i64 %482
  %505 = load i8, i8* %504, align 1
  %506 = zext i8 %505 to i16
  br label %510

507:                                              ; preds = %499
  %508 = getelementptr inbounds i16, i16* %243, i64 %482
  %509 = load i16, i16* %508, align 2
  br label %510

510:                                              ; preds = %507, %503
  %511 = phi i16 [ %506, %503 ], [ %509, %507 ]
  %512 = zext i16 %511 to i32
  %513 = sub nuw i32 -2147483601, %512
  %514 = sdiv i32 %513, 10
  %515 = icmp sgt i32 %481, %514
  br i1 %515, label %398, label %516

516:                                              ; preds = %510
  %517 = mul nsw i32 %481, 10
  %518 = add nsw i32 %517, -48
  %519 = add nsw i32 %518, %512
  br label %398

520:                                              ; preds = %210
  %521 = load atomic i32, i32* %72 monotonic, align 4
  %522 = and i32 %521, 1
  %523 = icmp eq i32 %522, 0
  br i1 %523, label %528, label %524

524:                                              ; preds = %520
  %525 = getelementptr inbounds i8, i8* %174, i64 %212
  %526 = load i8, i8* %525, align 1
  %527 = zext i8 %526 to i16
  br label %531

528:                                              ; preds = %520
  %529 = getelementptr inbounds i16, i16* %175, i64 %212
  %530 = load i16, i16* %529, align 2
  br label %531

531:                                              ; preds = %528, %524
  %532 = phi i16 [ %527, %524 ], [ %530, %528 ]
  %533 = add i16 %532, -48
  %534 = icmp ult i16 %533, 10
  br i1 %534, label %535, label %398

535:                                              ; preds = %531
  %536 = load atomic i32, i32* %72 monotonic, align 4
  %537 = and i32 %536, 1
  %538 = icmp eq i32 %537, 0
  br i1 %538, label %543, label %539

539:                                              ; preds = %535
  %540 = getelementptr inbounds i8, i8* %174, i64 %212
  %541 = load i8, i8* %540, align 1
  %542 = zext i8 %541 to i16
  br label %546

543:                                              ; preds = %535
  %544 = getelementptr inbounds i16, i16* %175, i64 %212
  %545 = load i16, i16* %544, align 2
  br label %546

546:                                              ; preds = %543, %539
  %547 = phi i16 [ %542, %539 ], [ %545, %543 ]
  %548 = zext i16 %547 to i32
  %549 = sub nuw i32 -2147483601, %548
  %550 = sdiv i32 %549, 10
  %551 = icmp sgt i32 %211, %550
  br i1 %551, label %398, label %214

552:                                              ; preds = %134
  %553 = load atomic i32, i32* %72 monotonic, align 4
  %554 = and i32 %553, 1
  %555 = icmp eq i32 %554, 0
  br i1 %555, label %560, label %556

556:                                              ; preds = %552
  %557 = getelementptr inbounds i8, i8* %98, i64 %136
  %558 = load i8, i8* %557, align 1
  %559 = zext i8 %558 to i16
  br label %563

560:                                              ; preds = %552
  %561 = getelementptr inbounds i16, i16* %99, i64 %136
  %562 = load i16, i16* %561, align 2
  br label %563

563:                                              ; preds = %560, %556
  %564 = phi i16 [ %559, %556 ], [ %562, %560 ]
  %565 = add i16 %564, -48
  %566 = icmp ult i16 %565, 10
  br i1 %566, label %567, label %407

567:                                              ; preds = %563
  %568 = load atomic i32, i32* %72 monotonic, align 4
  %569 = and i32 %568, 1
  %570 = icmp eq i32 %569, 0
  br i1 %570, label %575, label %571

571:                                              ; preds = %567
  %572 = getelementptr inbounds i8, i8* %98, i64 %136
  %573 = load i8, i8* %572, align 1
  %574 = zext i8 %573 to i16
  br label %578

575:                                              ; preds = %567
  %576 = getelementptr inbounds i16, i16* %99, i64 %136
  %577 = load i16, i16* %576, align 2
  br label %578

578:                                              ; preds = %575, %571
  %579 = phi i16 [ %574, %571 ], [ %577, %575 ]
  %580 = zext i16 %579 to i32
  %581 = sub nuw i32 -2147483601, %580
  %582 = sdiv i32 %581, 10
  %583 = icmp sgt i32 %135, %582
  br i1 %583, label %407, label %138

584:                                              ; preds = %59
  %585 = load atomic i32, i32* %18 monotonic, align 4
  %586 = and i32 %585, 1
  %587 = icmp eq i32 %586, 0
  br i1 %587, label %592, label %588

588:                                              ; preds = %584
  %589 = getelementptr inbounds i8, i8* %20, i64 %61
  %590 = load i8, i8* %589, align 1
  %591 = zext i8 %590 to i16
  br label %595

592:                                              ; preds = %584
  %593 = getelementptr inbounds i16, i16* %21, i64 %61
  %594 = load i16, i16* %593, align 2
  br label %595

595:                                              ; preds = %592, %588
  %596 = phi i16 [ %591, %588 ], [ %594, %592 ]
  %597 = add i16 %596, -48
  %598 = icmp ult i16 %597, 10
  br i1 %598, label %599, label %407

599:                                              ; preds = %595
  %600 = load atomic i32, i32* %18 monotonic, align 4
  %601 = and i32 %600, 1
  %602 = icmp eq i32 %601, 0
  br i1 %602, label %607, label %603

603:                                              ; preds = %599
  %604 = getelementptr inbounds i8, i8* %20, i64 %61
  %605 = load i8, i8* %604, align 1
  %606 = zext i8 %605 to i16
  br label %610

607:                                              ; preds = %599
  %608 = getelementptr inbounds i16, i16* %21, i64 %61
  %609 = load i16, i16* %608, align 2
  br label %610

610:                                              ; preds = %607, %603
  %611 = phi i16 [ %606, %603 ], [ %609, %607 ]
  %612 = zext i16 %611 to i32
  %613 = sub nuw i32 -2147483601, %612
  %614 = sdiv i32 %613, 10
  %615 = icmp sgt i32 %60, %614
  br i1 %615, label %407, label %616

616:                                              ; preds = %610
  %617 = mul nsw i32 %60, 10
  %618 = add nsw i32 %617, -48
  %619 = add nsw i32 %618, %612
  br label %63
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink14DateComponents18ParseDateTimeLocalERKN3WTF6StringEjRj(%"class.blink::DateComponents"* nocapture, %"class.WTF::String"* nocapture readonly dereferenceable(8), i32, i32* nocapture dereferenceable(4)) local_unnamed_addr #1 align 2 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #9
  store i32 -1431655766, i32* %5, align 4
  %7 = call zeroext i1 @_ZN5blink14DateComponents9ParseDateERKN3WTF6StringEjRj(%"class.blink::DateComponents"* %0, %"class.WTF::String"* dereferenceable(8) %1, i32 %2, i32* nonnull dereferenceable(4) %5)
  br i1 %7, label %8, label %71

8:                                                ; preds = %4
  %9 = load i32, i32* %5, align 4
  %10 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %71, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp ult i32 %9, %15
  br i1 %16, label %17, label %71

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 1
  br i1 %21, label %29, label %23

23:                                               ; preds = %17
  %24 = bitcast %"class.WTF::StringImpl"* %22 to i8*
  %25 = zext i32 %9 to i64
  %26 = getelementptr inbounds i8, i8* %24, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i16
  br label %34

29:                                               ; preds = %17
  %30 = bitcast %"class.WTF::StringImpl"* %22 to i16*
  %31 = zext i32 %9 to i64
  %32 = getelementptr inbounds i16, i16* %30, i64 %31
  %33 = load i16, i16* %32, align 2
  br label %34

34:                                               ; preds = %23, %29
  %35 = phi i16 [ %28, %23 ], [ %33, %29 ]
  %36 = icmp eq i16 %35, 84
  br i1 %36, label %37, label %71

37:                                               ; preds = %34
  %38 = add nuw i32 %9, 1
  store i32 %38, i32* %5, align 4
  %39 = tail call zeroext i1 @_ZN5blink14DateComponents9ParseTimeERKN3WTF6StringEjRj(%"class.blink::DateComponents"* %0, %"class.WTF::String"* dereferenceable(8) %1, i32 %38, i32* dereferenceable(4) %3)
  br i1 %39, label %40, label %71

40:                                               ; preds = %37
  %41 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 4
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 3
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 2
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = icmp slt i32 %42, 1
  br i1 %53, label %71, label %54

54:                                               ; preds = %40
  %55 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 5
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %42, 275760
  %58 = icmp slt i32 %56, 8
  %59 = or i1 %57, %58
  %60 = icmp slt i32 %44, 13
  %61 = or i1 %60, %59
  br i1 %61, label %69, label %62

62:                                               ; preds = %54
  %63 = icmp eq i32 %44, 13
  br i1 %63, label %64, label %71

64:                                               ; preds = %62
  %65 = or i32 %48, %46
  %66 = or i32 %65, %50
  %67 = or i32 %66, %52
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %71

69:                                               ; preds = %54, %64
  %70 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 8
  store i32 2, i32* %70, align 4
  br label %71

71:                                               ; preds = %62, %40, %8, %64, %37, %34, %13, %4, %69
  %72 = phi i1 [ true, %69 ], [ false, %4 ], [ false, %13 ], [ false, %34 ], [ false, %37 ], [ false, %64 ], [ false, %8 ], [ false, %40 ], [ false, %62 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #9
  ret i1 %72
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN5blink14DateComponents36SetMillisecondsSinceMidnightInternalEd(%"class.blink::DateComponents"* nocapture, double) local_unnamed_addr #4 align 2 {
  %3 = tail call double @fmod(double %1, double 1.000000e+03) #9
  %4 = fptosi double %3 to i32
  %5 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 0
  store i32 %4, i32* %5, align 4
  %6 = fdiv double %1, 1.000000e+03
  %7 = tail call double @llvm.floor.f64(double %6)
  %8 = tail call double @fmod(double %7, double 6.000000e+01) #9
  %9 = fptosi double %8 to i32
  %10 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 1
  store i32 %9, i32* %10, align 4
  %11 = fdiv double %7, 6.000000e+01
  %12 = tail call double @llvm.floor.f64(double %11)
  %13 = tail call double @fmod(double %12, double 6.000000e+01) #9
  %14 = fptosi double %13 to i32
  %15 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 2
  store i32 %14, i32* %15, align 4
  %16 = fdiv double %12, 6.000000e+01
  %17 = fptosi double %16 to i32
  %18 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 3
  store i32 %17, i32* %18, align 4
  ret void
}

; Function Attrs: nofree nounwind
declare double @fmod(double, double) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #6

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink14DateComponents40SetMillisecondsSinceEpochForDateInternalEd(%"class.blink::DateComponents"* nocapture, double) local_unnamed_addr #1 align 2 {
  %3 = tail call i32 @_ZN3WTF8MsToYearEd(double %1) #9
  %4 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  store i32 %3, i32* %4, align 4
  %5 = tail call i32 @_ZN3WTF9DayInYearEdi(double %1, i32 %3) #9
  %6 = load i32, i32* %4, align 4
  %7 = tail call zeroext i1 @_ZN3WTF10IsLeapYearEi(i32 %6) #9
  %8 = tail call i32 @_ZN3WTF18MonthFromDayInYearEib(i32 %5, i1 zeroext %7) #9
  %9 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 5
  store i32 %8, i32* %9, align 4
  %10 = load i32, i32* %4, align 4
  %11 = tail call zeroext i1 @_ZN3WTF10IsLeapYearEi(i32 %10) #9
  %12 = tail call i32 @_ZN3WTF23DayInMonthFromDayInYearEib(i32 %5, i1 zeroext %11) #9
  %13 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 4
  store i32 %12, i32* %13, align 4
  ret i1 true
}

declare i32 @_ZN3WTF8MsToYearEd(double) local_unnamed_addr #3

declare i32 @_ZN3WTF9DayInYearEdi(double, i32) local_unnamed_addr #3

declare i32 @_ZN3WTF18MonthFromDayInYearEib(i32, i1 zeroext) local_unnamed_addr #3

declare i32 @_ZN3WTF23DayInMonthFromDayInYearEib(i32, i1 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink14DateComponents32SetMillisecondsSinceEpochForDateEd(%"class.blink::DateComponents"* nocapture, double) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 8
  store i32 0, i32* %3, align 4
  %4 = tail call double @llvm.fabs.f64(double %1) #10
  %5 = fcmp ueq double %4, 0x7FF0000000000000
  br i1 %5, label %29, label %6

6:                                                ; preds = %2
  %7 = tail call double @llvm.round.f64(double %1)
  %8 = tail call i32 @_ZN3WTF8MsToYearEd(double %7) #9
  %9 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  store i32 %8, i32* %9, align 4
  %10 = tail call i32 @_ZN3WTF9DayInYearEdi(double %7, i32 %8) #9
  %11 = load i32, i32* %9, align 4
  %12 = tail call zeroext i1 @_ZN3WTF10IsLeapYearEi(i32 %11) #9
  %13 = tail call i32 @_ZN3WTF18MonthFromDayInYearEib(i32 %10, i1 zeroext %12) #9
  %14 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 5
  store i32 %13, i32* %14, align 4
  %15 = load i32, i32* %9, align 4
  %16 = tail call zeroext i1 @_ZN3WTF10IsLeapYearEi(i32 %15) #9
  %17 = tail call i32 @_ZN3WTF23DayInMonthFromDayInYearEib(i32 %10, i1 zeroext %16) #9
  %18 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 4
  store i32 %17, i32* %18, align 4
  %19 = load i32, i32* %9, align 4
  %20 = icmp slt i32 %19, 1
  br i1 %20, label %29, label %21

21:                                               ; preds = %6
  %22 = load i32, i32* %14, align 4
  %23 = icmp slt i32 %19, 275760
  %24 = icmp slt i32 %22, 8
  %25 = or i1 %23, %24
  %26 = icmp slt i32 %17, 14
  %27 = or i1 %26, %25
  br i1 %27, label %28, label %29

28:                                               ; preds = %21
  store i32 1, i32* %3, align 4
  br label %29

29:                                               ; preds = %2, %6, %21, %28
  %30 = phi i1 [ true, %28 ], [ false, %2 ], [ false, %21 ], [ false, %6 ]
  ret i1 %30
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.round.f64(double) #6

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink14DateComponents41SetMillisecondsSinceEpochForDateTimeLocalEd(%"class.blink::DateComponents"* nocapture, double) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 8
  store i32 0, i32* %3, align 4
  %4 = tail call double @llvm.fabs.f64(double %1) #10
  %5 = fcmp ueq double %4, 0x7FF0000000000000
  br i1 %5, label %60, label %6

6:                                                ; preds = %2
  %7 = tail call double @llvm.round.f64(double %1)
  %8 = tail call double @fmod(double %7, double 8.640000e+07) #9
  %9 = fcmp olt double %8, 0.000000e+00
  %10 = fadd double %8, 8.640000e+07
  %11 = select i1 %9, double %10, double %8
  %12 = tail call double @fmod(double %11, double 1.000000e+03) #9
  %13 = fptosi double %12 to i32
  %14 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = fdiv double %11, 1.000000e+03
  %16 = tail call double @llvm.floor.f64(double %15) #9
  %17 = tail call double @fmod(double %16, double 6.000000e+01) #9
  %18 = fptosi double %17 to i32
  %19 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 1
  store i32 %18, i32* %19, align 4
  %20 = fdiv double %16, 6.000000e+01
  %21 = tail call double @llvm.floor.f64(double %20) #9
  %22 = tail call double @fmod(double %21, double 6.000000e+01) #9
  %23 = fptosi double %22 to i32
  %24 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 2
  store i32 %23, i32* %24, align 4
  %25 = fdiv double %21, 6.000000e+01
  %26 = fptosi double %25 to i32
  %27 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 3
  store i32 %26, i32* %27, align 4
  %28 = tail call i32 @_ZN3WTF8MsToYearEd(double %7) #9
  %29 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  store i32 %28, i32* %29, align 4
  %30 = tail call i32 @_ZN3WTF9DayInYearEdi(double %7, i32 %28) #9
  %31 = load i32, i32* %29, align 4
  %32 = tail call zeroext i1 @_ZN3WTF10IsLeapYearEi(i32 %31) #9
  %33 = tail call i32 @_ZN3WTF18MonthFromDayInYearEib(i32 %30, i1 zeroext %32) #9
  %34 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 5
  store i32 %33, i32* %34, align 4
  %35 = load i32, i32* %29, align 4
  %36 = tail call zeroext i1 @_ZN3WTF10IsLeapYearEi(i32 %35) #9
  %37 = tail call i32 @_ZN3WTF23DayInMonthFromDayInYearEib(i32 %30, i1 zeroext %36) #9
  %38 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 4
  store i32 %37, i32* %38, align 4
  %39 = load i32, i32* %29, align 4
  %40 = load i32, i32* %27, align 4
  %41 = load i32, i32* %24, align 4
  %42 = load i32, i32* %19, align 4
  %43 = load i32, i32* %14, align 4
  %44 = icmp slt i32 %39, 1
  br i1 %44, label %60, label %45

45:                                               ; preds = %6
  %46 = load i32, i32* %34, align 4
  %47 = icmp slt i32 %39, 275760
  %48 = icmp slt i32 %46, 8
  %49 = or i1 %47, %48
  %50 = icmp slt i32 %37, 13
  %51 = or i1 %50, %49
  br i1 %51, label %59, label %52

52:                                               ; preds = %45
  %53 = icmp eq i32 %37, 13
  br i1 %53, label %54, label %60

54:                                               ; preds = %52
  %55 = or i32 %41, %40
  %56 = or i32 %55, %42
  %57 = or i32 %56, %43
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %45, %54
  store i32 2, i32* %3, align 4
  br label %60

60:                                               ; preds = %2, %52, %6, %54, %59
  %61 = phi i1 [ true, %59 ], [ false, %2 ], [ false, %54 ], [ false, %6 ], [ false, %52 ]
  ret i1 %61
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink14DateComponents33SetMillisecondsSinceEpochForMonthEd(%"class.blink::DateComponents"* nocapture, double) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 8
  store i32 0, i32* %3, align 4
  %4 = tail call double @llvm.fabs.f64(double %1) #10
  %5 = fcmp ueq double %4, 0x7FF0000000000000
  br i1 %5, label %27, label %6

6:                                                ; preds = %2
  %7 = tail call double @llvm.round.f64(double %1)
  %8 = tail call i32 @_ZN3WTF8MsToYearEd(double %7) #9
  %9 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  store i32 %8, i32* %9, align 4
  %10 = tail call i32 @_ZN3WTF9DayInYearEdi(double %7, i32 %8) #9
  %11 = load i32, i32* %9, align 4
  %12 = tail call zeroext i1 @_ZN3WTF10IsLeapYearEi(i32 %11) #9
  %13 = tail call i32 @_ZN3WTF18MonthFromDayInYearEib(i32 %10, i1 zeroext %12) #9
  %14 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 5
  store i32 %13, i32* %14, align 4
  %15 = load i32, i32* %9, align 4
  %16 = tail call zeroext i1 @_ZN3WTF10IsLeapYearEi(i32 %15) #9
  %17 = tail call i32 @_ZN3WTF23DayInMonthFromDayInYearEib(i32 %10, i1 zeroext %16) #9
  %18 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 4
  store i32 %17, i32* %18, align 4
  %19 = load i32, i32* %9, align 4
  %20 = icmp slt i32 %19, 1
  br i1 %20, label %27, label %21

21:                                               ; preds = %6
  %22 = load i32, i32* %14, align 4
  %23 = icmp slt i32 %19, 275760
  %24 = icmp slt i32 %22, 9
  %25 = or i1 %23, %24
  br i1 %25, label %26, label %27

26:                                               ; preds = %21
  store i32 3, i32* %3, align 4
  br label %27

27:                                               ; preds = %2, %6, %21, %26
  %28 = phi i1 [ true, %26 ], [ false, %2 ], [ false, %21 ], [ false, %6 ]
  ret i1 %28
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink14DateComponents28SetMillisecondsSinceMidnightEd(%"class.blink::DateComponents"* nocapture, double) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 8
  store i32 0, i32* %3, align 4
  %4 = tail call double @llvm.fabs.f64(double %1) #10
  %5 = fcmp ueq double %4, 0x7FF0000000000000
  br i1 %5, label %28, label %6

6:                                                ; preds = %2
  %7 = tail call double @llvm.round.f64(double %1)
  %8 = tail call double @fmod(double %7, double 8.640000e+07) #9
  %9 = fcmp olt double %8, 0.000000e+00
  %10 = fadd double %8, 8.640000e+07
  %11 = select i1 %9, double %10, double %8
  %12 = tail call double @fmod(double %11, double 1.000000e+03) #9
  %13 = fptosi double %12 to i32
  %14 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 0
  store i32 %13, i32* %14, align 4
  %15 = fdiv double %11, 1.000000e+03
  %16 = tail call double @llvm.floor.f64(double %15) #9
  %17 = tail call double @fmod(double %16, double 6.000000e+01) #9
  %18 = fptosi double %17 to i32
  %19 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 1
  store i32 %18, i32* %19, align 4
  %20 = fdiv double %16, 6.000000e+01
  %21 = tail call double @llvm.floor.f64(double %20) #9
  %22 = tail call double @fmod(double %21, double 6.000000e+01) #9
  %23 = fptosi double %22 to i32
  %24 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 2
  store i32 %23, i32* %24, align 4
  %25 = fdiv double %21, 6.000000e+01
  %26 = fptosi double %25 to i32
  %27 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 3
  store i32 %26, i32* %27, align 4
  store i32 4, i32* %3, align 4
  br label %28

28:                                               ; preds = %2, %6
  %29 = phi i1 [ true, %6 ], [ false, %2 ]
  ret i1 %29
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink14DateComponents19SetMonthsSinceEpochEd(%"class.blink::DateComponents"* nocapture, double) local_unnamed_addr #4 align 2 {
  %3 = tail call double @llvm.fabs.f64(double %1) #10
  %4 = fcmp ueq double %3, 0x7FF0000000000000
  br i1 %4, label %29, label %5

5:                                                ; preds = %2
  %6 = tail call double @llvm.round.f64(double %1)
  %7 = tail call double @fmod(double %6, double 1.200000e+01) #9
  %8 = fcmp olt double %7, 0.000000e+00
  %9 = fadd double %7, 1.200000e+01
  %10 = select i1 %8, double %9, double %7
  %11 = fsub double %6, %10
  %12 = fdiv double %11, 1.200000e+01
  %13 = fadd double %12, 1.970000e+03
  %14 = fcmp olt double %13, 1.000000e+00
  %15 = fcmp ogt double %13, 2.757600e+05
  %16 = or i1 %14, %15
  br i1 %16, label %29, label %17

17:                                               ; preds = %5
  %18 = fptosi double %13 to i32
  %19 = fptosi double %10 to i32
  %20 = icmp slt i32 %18, 1
  br i1 %20, label %29, label %21

21:                                               ; preds = %17
  %22 = icmp slt i32 %18, 275760
  %23 = icmp slt i32 %19, 9
  %24 = or i1 %23, %22
  br i1 %24, label %25, label %29

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  store i32 %18, i32* %26, align 4
  %27 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 5
  store i32 %19, i32* %27, align 4
  %28 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 8
  store i32 3, i32* %28, align 4
  br label %29

29:                                               ; preds = %2, %17, %5, %21, %25
  %30 = phi i1 [ false, %2 ], [ false, %5 ], [ true, %25 ], [ false, %21 ], [ false, %17 ]
  ret i1 %30
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink14DateComponents32SetMillisecondsSinceEpochForWeekEd(%"class.blink::DateComponents"* nocapture, double) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 8
  store i32 0, i32* %3, align 4
  %4 = tail call double @llvm.fabs.f64(double %1) #10
  %5 = fcmp ueq double %4, 0x7FF0000000000000
  br i1 %5, label %76, label %6

6:                                                ; preds = %2
  %7 = tail call double @llvm.round.f64(double %1)
  %8 = tail call i32 @_ZN3WTF8MsToYearEd(double %7) #9
  %9 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  store i32 %8, i32* %9, align 4
  %10 = add i32 %8, -1
  %11 = icmp ugt i32 %10, 275759
  br i1 %11, label %76, label %12

12:                                               ; preds = %6
  %13 = tail call i32 @_ZN3WTF9DayInYearEdi(double %7, i32 %8) #9
  %14 = load i32, i32* %9, align 4
  %15 = add i32 %14, -1
  %16 = sdiv i32 %15, 100
  %17 = srem i32 %15, 100
  %18 = sdiv i32 %17, 4
  %19 = sdiv i32 %15, 400
  %20 = mul nsw i32 %16, 5
  %21 = add nsw i32 %17, 43
  %22 = add nsw i32 %21, %19
  %23 = add nsw i32 %22, %18
  %24 = add nsw i32 %23, %20
  %25 = srem i32 %24, 7
  %26 = icmp sgt i32 %25, 4
  %27 = select i1 %26, i32 8, i32 1
  %28 = sub nsw i32 %27, %25
  %29 = icmp slt i32 %13, %28
  br i1 %29, label %30, label %51

30:                                               ; preds = %12
  store i32 %15, i32* %9, align 4
  %31 = icmp sgt i32 %15, 1
  br i1 %31, label %32, label %76

32:                                               ; preds = %30
  %33 = add i32 %14, -2
  %34 = sdiv i32 %33, 100
  %35 = srem i32 %33, 100
  %36 = sdiv i32 %35, 4
  %37 = sdiv i32 %33, 400
  %38 = mul nsw i32 %34, 5
  %39 = add nuw nsw i32 %35, 43
  %40 = add nuw nsw i32 %39, %37
  %41 = add nuw nsw i32 %40, %36
  %42 = add nuw nsw i32 %41, %38
  %43 = srem i32 %42, 7
  switch i32 %43, label %47 [
    i32 4, label %48
    i32 3, label %44
  ]

44:                                               ; preds = %32
  %45 = tail call zeroext i1 @_ZN3WTF10IsLeapYearEi(i32 %15) #9
  %46 = select i1 %45, i32 53, i32 52
  br label %48

47:                                               ; preds = %32
  br label %48

48:                                               ; preds = %32, %44, %47
  %49 = phi i32 [ 53, %32 ], [ %46, %44 ], [ 52, %47 ]
  %50 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 7
  store i32 %49, i32* %50, align 4
  br label %75

51:                                               ; preds = %12
  %52 = sub nsw i32 %13, %28
  %53 = sdiv i32 %52, 7
  %54 = add nsw i32 %53, 1
  %55 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 7
  store i32 %54, i32* %55, align 4
  switch i32 %25, label %60 [
    i32 4, label %61
    i32 3, label %56
  ]

56:                                               ; preds = %51
  %57 = tail call zeroext i1 @_ZN3WTF10IsLeapYearEi(i32 %14) #9
  %58 = select i1 %57, i32 53, i32 52
  %59 = load i32, i32* %9, align 4
  br label %61

60:                                               ; preds = %51
  br label %61

61:                                               ; preds = %51, %56, %60
  %62 = phi i32 [ %14, %51 ], [ %59, %56 ], [ %14, %60 ]
  %63 = phi i32 [ 53, %51 ], [ %58, %56 ], [ 52, %60 ]
  %64 = icmp slt i32 %53, %63
  br i1 %64, label %67, label %65

65:                                               ; preds = %61
  %66 = add nsw i32 %62, 1
  store i32 %66, i32* %9, align 4
  store i32 1, i32* %55, align 4
  br label %67

67:                                               ; preds = %61, %65
  %68 = phi i32 [ %66, %65 ], [ %62, %61 ]
  %69 = icmp sgt i32 %68, 275760
  br i1 %69, label %76, label %70

70:                                               ; preds = %67
  %71 = icmp eq i32 %68, 275760
  br i1 %71, label %72, label %75

72:                                               ; preds = %70
  %73 = load i32, i32* %55, align 4
  %74 = icmp sgt i32 %73, 37
  br i1 %74, label %76, label %75

75:                                               ; preds = %70, %72, %48
  store i32 5, i32* %3, align 4
  br label %76

76:                                               ; preds = %2, %75, %30, %72, %67, %6
  %77 = phi i1 [ false, %2 ], [ false, %6 ], [ true, %75 ], [ false, %30 ], [ false, %72 ], [ false, %67 ]
  ret i1 %77
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink14DateComponents7SetWeekEii(%"class.blink::DateComponents"* nocapture, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 8
  store i32 0, i32* %4, align 4
  %5 = add i32 %1, -1
  %6 = icmp ugt i32 %5, 275759
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  store i32 %1, i32* %8, align 4
  %9 = icmp slt i32 %2, 1
  br i1 %9, label %30, label %10

10:                                               ; preds = %7
  %11 = udiv i32 %5, 100
  %12 = urem i32 %5, 100
  %13 = lshr i32 %12, 2
  %14 = udiv i32 %5, 400
  %15 = mul nuw nsw i32 %11, 5
  %16 = add nuw nsw i32 %12, 43
  %17 = add nuw nsw i32 %16, %14
  %18 = add nuw nsw i32 %17, %13
  %19 = add nuw nsw i32 %18, %15
  %20 = urem i32 %19, 7
  switch i32 %20, label %24 [
    i32 4, label %25
    i32 3, label %21
  ]

21:                                               ; preds = %10
  %22 = tail call zeroext i1 @_ZN3WTF10IsLeapYearEi(i32 %1) #9
  %23 = select i1 %22, i32 53, i32 52
  br label %25

24:                                               ; preds = %10
  br label %25

25:                                               ; preds = %10, %21, %24
  %26 = phi i32 [ 53, %10 ], [ %23, %21 ], [ 52, %24 ]
  %27 = icmp slt i32 %26, %2
  br i1 %27, label %30, label %28

28:                                               ; preds = %25
  %29 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 7
  store i32 %2, i32* %29, align 4
  store i32 5, i32* %4, align 4
  br label %30

30:                                               ; preds = %7, %25, %3, %28
  %31 = phi i1 [ true, %28 ], [ false, %3 ], [ false, %25 ], [ false, %7 ]
  ret i1 %31
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK5blink14DateComponents29MillisecondsSinceEpochForTimeEv(%"class.blink::DateComponents"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 4
  %4 = sitofp i32 %3 to double
  %5 = fmul double %4, 6.000000e+01
  %6 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = sitofp i32 %7 to double
  %9 = fadd double %5, %8
  %10 = fmul double %9, 6.000000e+01
  %11 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = sitofp i32 %12 to double
  %14 = fadd double %10, %13
  %15 = fmul double %14, 1.000000e+03
  %16 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = sitofp i32 %17 to double
  %19 = fadd double %15, %18
  ret double %19
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZNK5blink14DateComponents22MillisecondsSinceEpochEv(%"class.blink::DateComponents"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 8
  %3 = load i32, i32* %2, align 4
  switch i32 %3, label %95 [
    i32 1, label %4
    i32 2, label %13
    i32 3, label %41
    i32 4, label %48
    i32 5, label %67
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 4
  %10 = load i32, i32* %9, align 4
  %11 = tail call double @_ZN3WTF18DateToDaysFrom1970Eiii(i32 %6, i32 %8, i32 %10) #9
  %12 = fmul double %11, 8.640000e+07
  br label %95

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 5
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 4
  %19 = load i32, i32* %18, align 4
  %20 = tail call double @_ZN3WTF18DateToDaysFrom1970Eiii(i32 %15, i32 %17, i32 %19) #9
  %21 = fmul double %20, 8.640000e+07
  %22 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = sitofp i32 %23 to double
  %25 = fmul double %24, 6.000000e+01
  %26 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = sitofp i32 %27 to double
  %29 = fadd double %25, %28
  %30 = fmul double %29, 6.000000e+01
  %31 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = sitofp i32 %32 to double
  %34 = fadd double %30, %33
  %35 = fmul double %34, 1.000000e+03
  %36 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = sitofp i32 %37 to double
  %39 = fadd double %35, %38
  %40 = fadd double %21, %39
  br label %95

41:                                               ; preds = %1
  %42 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 5
  %45 = load i32, i32* %44, align 4
  %46 = tail call double @_ZN3WTF18DateToDaysFrom1970Eiii(i32 %43, i32 %45, i32 1) #9
  %47 = fmul double %46, 8.640000e+07
  br label %95

48:                                               ; preds = %1
  %49 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 3
  %50 = load i32, i32* %49, align 4
  %51 = sitofp i32 %50 to double
  %52 = fmul double %51, 6.000000e+01
  %53 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 2
  %54 = load i32, i32* %53, align 4
  %55 = sitofp i32 %54 to double
  %56 = fadd double %52, %55
  %57 = fmul double %56, 6.000000e+01
  %58 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = sitofp i32 %59 to double
  %61 = fadd double %57, %60
  %62 = fmul double %61, 1.000000e+03
  %63 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = sitofp i32 %64 to double
  %66 = fadd double %62, %65
  br label %95

67:                                               ; preds = %1
  %68 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  %69 = load i32, i32* %68, align 4
  %70 = tail call double @_ZN3WTF18DateToDaysFrom1970Eiii(i32 %69, i32 0, i32 1) #9
  %71 = load i32, i32* %68, align 4
  %72 = add i32 %71, -1
  %73 = sdiv i32 %72, 100
  %74 = srem i32 %72, 100
  %75 = sdiv i32 %74, 4
  %76 = sdiv i32 %72, 400
  %77 = mul nsw i32 %73, 5
  %78 = add nsw i32 %74, 43
  %79 = add nsw i32 %78, %76
  %80 = add nsw i32 %79, %75
  %81 = add nsw i32 %80, %77
  %82 = srem i32 %81, 7
  %83 = icmp sgt i32 %82, 4
  %84 = select i1 %83, i32 8, i32 1
  %85 = sub nsw i32 %84, %82
  %86 = sitofp i32 %85 to double
  %87 = fadd double %70, %86
  %88 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 7
  %89 = load i32, i32* %88, align 4
  %90 = mul i32 %89, 7
  %91 = add i32 %90, -7
  %92 = sitofp i32 %91 to double
  %93 = fadd double %87, %92
  %94 = fmul double %93, 8.640000e+07
  br label %95

95:                                               ; preds = %1, %67, %48, %41, %13, %4
  %96 = phi double [ %94, %67 ], [ %66, %48 ], [ %47, %41 ], [ %40, %13 ], [ %12, %4 ], [ 0x7FF8000000000000, %1 ]
  ret double %96
}

declare double @_ZN3WTF18DateToDaysFrom1970Eiii(i32, i32, i32) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK5blink14DateComponents16MonthsSinceEpochEv(%"class.blink::DateComponents"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  %3 = load i32, i32* %2, align 4
  %4 = mul i32 %3, 12
  %5 = add i32 %4, -23640
  %6 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 5
  %7 = load i32, i32* %6, align 4
  %8 = add nsw i32 %5, %7
  %9 = sitofp i32 %8 to double
  ret double %9
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink14DateComponents15ToStringForTimeENS0_12SecondFormatE(%"class.blink::DateComponents"* nocapture readonly, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %27

6:                                                ; preds = %2
  switch i32 %1, label %14 [
    i32 0, label %10
    i32 2, label %27
    i32 1, label %7
  ]

7:                                                ; preds = %6
  %8 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  br label %20

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %20

14:                                               ; preds = %6, %10
  %15 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 %16, i32 %18) #9
  br label %35

20:                                               ; preds = %7, %10
  %21 = phi i32 [ %9, %7 ], [ %12, %10 ]
  %22 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 2
  %25 = load i32, i32* %24, align 4
  %26 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i32 %23, i32 %25, i32 %21) #9
  br label %35

27:                                               ; preds = %6, %2
  %28 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 3
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0), i32 %29, i32 %31, i32 %33, i32 %4) #9
  br label %35

35:                                               ; preds = %27, %20, %14
  %36 = phi %"class.WTF::StringImpl"* [ %19, %14 ], [ %26, %20 ], [ %34, %27 ]
  ret %"class.WTF::StringImpl"* %36
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String6FormatEPKcz(i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink14DateComponents8ToStringENS0_12SecondFormatE(%"class.blink::DateComponents"* readonly, i32) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"class.WTF::StringAppend", align 8
  %5 = alloca %"class.WTF::String", align 8
  %6 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 8
  %7 = load i32, i32* %6, align 4
  switch i32 %7, label %170 [
    i32 1, label %8
    i32 2, label %18
    i32 3, label %119
    i32 4, label %127
    i32 5, label %163
  ]

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 5
  %12 = load i32, i32* %11, align 4
  %13 = add nsw i32 %12, 1
  %14 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 4
  %15 = load i32, i32* %14, align 4
  %16 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0), i32 %10, i32 %13, i32 %15) #9
  %17 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %16, %"class.WTF::StringImpl"** %17, align 8
  br label %171

18:                                               ; preds = %2
  %19 = bitcast %"class.WTF::StringAppend"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #9
  %20 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  %21 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 5
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %24, 1
  %26 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 4
  %27 = load i32, i32* %26, align 4
  %28 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i32 %22, i32 %25, i32 %27) #9
  %29 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %28, %"class.WTF::StringImpl"** %29, align 8
  %30 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %54

33:                                               ; preds = %18
  switch i32 %1, label %41 [
    i32 0, label %37
    i32 2, label %54
    i32 1, label %34
  ]

34:                                               ; preds = %33
  %35 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 1
  %36 = load i32, i32* %35, align 4
  br label %47

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %47

41:                                               ; preds = %37, %33
  %42 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 3
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 %43, i32 %45) #9
  br label %62

47:                                               ; preds = %37, %34
  %48 = phi i32 [ %36, %34 ], [ %39, %37 ]
  %49 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 3
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 2
  %52 = load i32, i32* %51, align 4
  %53 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i32 %50, i32 %52, i32 %48) #9
  br label %62

54:                                               ; preds = %33, %18
  %55 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 3
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 2
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0), i32 %56, i32 %58, i32 %60, i32 %31) #9
  br label %62

62:                                               ; preds = %41, %47, %54
  %63 = phi %"class.WTF::StringImpl"* [ %46, %41 ], [ %53, %47 ], [ %61, %54 ]
  %64 = call { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } @_ZN3WTFplINS_6StringEEENS_12StringAppendIS1_T_EERKS1_S3_(%"class.WTF::String"* nonnull dereferenceable(8) %5, %"class.WTF::StringImpl"* %63)
  %65 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %4, i64 0, i32 0, i32 0, i32 0
  %66 = extractvalue { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } %64, 0
  store %"class.WTF::StringImpl"* %66, %"class.WTF::StringImpl"** %65, align 8
  %67 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %4, i64 0, i32 1, i32 0, i32 0
  %68 = extractvalue { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } %64, 1
  store %"class.WTF::StringImpl"* %68, %"class.WTF::StringImpl"** %67, align 8
  %69 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS_6StringES1_EcvS1_Ev(%"class.WTF::StringAppend"* nonnull %4)
  %70 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %69, %"class.WTF::StringImpl"** %70, align 8
  %71 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %67, align 8
  %72 = icmp eq %"class.WTF::StringImpl"* %71, null
  br i1 %72, label %86, label %73

73:                                               ; preds = %62
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load atomic i32, i32* %74 monotonic, align 4
  %76 = and i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 0
  %79 = load i32, i32* %78, align 4
  br i1 %77, label %80, label %82

80:                                               ; preds = %73
  %81 = add i32 %79, -1
  store i32 %81, i32* %78, align 4
  br label %82

82:                                               ; preds = %80, %73
  %83 = phi i32 [ %81, %80 ], [ %79, %73 ]
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %86

85:                                               ; preds = %82
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %71) #9
  br label %86

86:                                               ; preds = %85, %82, %62
  %87 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %65, align 8
  %88 = icmp eq %"class.WTF::StringImpl"* %87, null
  br i1 %88, label %102, label %89

89:                                               ; preds = %86
  %90 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %87, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %91 = load atomic i32, i32* %90 monotonic, align 4
  %92 = and i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %87, i64 0, i32 0
  %95 = load i32, i32* %94, align 4
  br i1 %93, label %96, label %98

96:                                               ; preds = %89
  %97 = add i32 %95, -1
  store i32 %97, i32* %94, align 4
  br label %98

98:                                               ; preds = %96, %89
  %99 = phi i32 [ %97, %96 ], [ %95, %89 ]
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %102

101:                                              ; preds = %98
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %87) #9
  br label %102

102:                                              ; preds = %86, %98, %101
  %103 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %104 = icmp eq %"class.WTF::StringImpl"* %103, null
  br i1 %104, label %118, label %105

105:                                              ; preds = %102
  %106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %103, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %107 = load atomic i32, i32* %106 monotonic, align 4
  %108 = and i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %103, i64 0, i32 0
  %111 = load i32, i32* %110, align 4
  br i1 %109, label %112, label %114

112:                                              ; preds = %105
  %113 = add i32 %111, -1
  store i32 %113, i32* %110, align 4
  br label %114

114:                                              ; preds = %112, %105
  %115 = phi i32 [ %113, %112 ], [ %111, %105 ]
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %118

117:                                              ; preds = %114
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %103) #9
  br label %118

118:                                              ; preds = %102, %114, %117
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #9
  br label %171

119:                                              ; preds = %2
  %120 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  %121 = load i32, i32* %120, align 4
  %122 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 5
  %123 = load i32, i32* %122, align 4
  %124 = add nsw i32 %123, 1
  %125 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i32 %121, i32 %124) #9
  %126 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %125, %"class.WTF::StringImpl"** %126, align 8
  br label %171

127:                                              ; preds = %2
  %128 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %152

131:                                              ; preds = %127
  switch i32 %1, label %139 [
    i32 0, label %135
    i32 2, label %152
    i32 1, label %132
  ]

132:                                              ; preds = %131
  %133 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 1
  %134 = load i32, i32* %133, align 4
  br label %145

135:                                              ; preds = %131
  %136 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 1
  %137 = load i32, i32* %136, align 4
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %145

139:                                              ; preds = %135, %131
  %140 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 3
  %141 = load i32, i32* %140, align 4
  %142 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 2
  %143 = load i32, i32* %142, align 4
  %144 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 %141, i32 %143) #9
  br label %160

145:                                              ; preds = %135, %132
  %146 = phi i32 [ %134, %132 ], [ %137, %135 ]
  %147 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 3
  %148 = load i32, i32* %147, align 4
  %149 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 2
  %150 = load i32, i32* %149, align 4
  %151 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i32 %148, i32 %150, i32 %146) #9
  br label %160

152:                                              ; preds = %131, %127
  %153 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 3
  %154 = load i32, i32* %153, align 4
  %155 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 2
  %156 = load i32, i32* %155, align 4
  %157 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 1
  %158 = load i32, i32* %157, align 4
  %159 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0), i32 %154, i32 %156, i32 %158, i32 %129) #9
  br label %160

160:                                              ; preds = %139, %145, %152
  %161 = phi %"class.WTF::StringImpl"* [ %144, %139 ], [ %151, %145 ], [ %159, %152 ]
  %162 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %161, %"class.WTF::StringImpl"** %162, align 8
  br label %171

163:                                              ; preds = %2
  %164 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 6
  %165 = load i32, i32* %164, align 4
  %166 = getelementptr inbounds %"class.blink::DateComponents", %"class.blink::DateComponents"* %0, i64 0, i32 7
  %167 = load i32, i32* %166, align 4
  %168 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i32 %165, i32 %167) #9
  %169 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %168, %"class.WTF::StringImpl"** %169, align 8
  br label %171

170:                                              ; preds = %2
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %3, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0), i64 24) #9
  br label %171

171:                                              ; preds = %170, %163, %160, %119, %118, %8
  %172 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %173 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %172, align 8
  ret %"class.WTF::StringImpl"* %173
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } @_ZN3WTFplINS_6StringEEENS_12StringAppendIS1_T_EERKS1_S3_(%"class.WTF::String"* dereferenceable(8), %"class.WTF::StringImpl"*) local_unnamed_addr #1 comdat {
  %3 = alloca %"class.WTF::StringAppend", align 8
  %4 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %24

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #9
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !2

21:                                               ; preds = %12
  tail call void @llvm.trap() #9
  unreachable

22:                                               ; preds = %12
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %13, align 4
  br label %24

24:                                               ; preds = %2, %7, %22
  %25 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %25, label %43, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = and i32 %28, 2
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %44

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = zext i32 %33 to i33
  %35 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %34, i33 1) #9
  %36 = extractvalue { i33, i1 } %35, 1
  %37 = extractvalue { i33, i1 } %35, 0
  %38 = icmp slt i33 %37, 0
  %39 = or i1 %36, %38
  br i1 %39, label %40, label %41, !prof !2

40:                                               ; preds = %31
  tail call void @llvm.trap() #9
  unreachable

41:                                               ; preds = %31
  %42 = trunc i33 %37 to i32
  store i32 %42, i32* %32, align 4
  br label %44

43:                                               ; preds = %24
  call void @_ZN3WTF12StringAppendINS_6StringES1_EC2ES1_S1_(%"class.WTF::StringAppend"* nonnull %3, %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"* null)
  br label %56

44:                                               ; preds = %26, %41
  call void @_ZN3WTF12StringAppendINS_6StringES1_EC2ES1_S1_(%"class.WTF::StringAppend"* nonnull %3, %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"* nonnull %1)
  %45 = load atomic i32, i32* %27 monotonic, align 4
  %46 = and i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %49 = load i32, i32* %48, align 4
  br i1 %47, label %50, label %52

50:                                               ; preds = %44
  %51 = add i32 %49, -1
  store i32 %51, i32* %48, align 4
  br label %52

52:                                               ; preds = %50, %44
  %53 = phi i32 [ %51, %50 ], [ %49, %44 ]
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %56

55:                                               ; preds = %52
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #9
  br label %56

56:                                               ; preds = %43, %52, %55
  %57 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %3, i64 0, i32 0, i32 0, i32 0
  %58 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %57, align 8
  %59 = insertvalue { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } undef, %"class.WTF::StringImpl"* %58, 0
  %60 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %3, i64 0, i32 1, i32 0, i32 0
  %61 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %60, align 8
  %62 = insertvalue { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } %59, %"class.WTF::StringImpl"* %61, 1
  ret { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* } %62
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS_6StringES1_EcvS1_Ev(%"class.WTF::StringAppend"*) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter", align 8
  %6 = alloca i8*, align 8
  %7 = alloca i16*, align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %12 = select i1 %10, %"class.WTF::StringImpl"* %11, %"class.WTF::StringImpl"* %9
  %13 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %103, label %19

19:                                               ; preds = %1
  %20 = icmp eq %"class.WTF::StringImpl"* %14, null
  %21 = select i1 %20, %"class.WTF::StringImpl"* %11, %"class.WTF::StringImpl"* %14
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %103, label %26

26:                                               ; preds = %19
  %27 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #9
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %28 = tail call i32 @_ZNK3WTF12StringAppendINS_6StringES1_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %29 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %28, i8** nonnull dereferenceable(8) %6) #9
  %30 = load i8*, i8** %6, align 8
  %31 = bitcast %"class.WTF::StringTypeAdapter"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #9
  %32 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %4, i64 0, i32 0, i32 0, i32 1
  %33 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %4, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 -86, i64 24, i1 false) #9
  %34 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %26
  %37 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %44

38:                                               ; preds = %26
  %39 = ptrtoint %"class.WTF::StringImpl"* %34 to i64
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 1
  %43 = bitcast %"class.WTF::StringImpl"* %42 to i8*
  br label %44

44:                                               ; preds = %38, %36
  %45 = phi i8* [ null, %36 ], [ %43, %38 ]
  %46 = phi i64 [ %37, %36 ], [ %39, %38 ]
  %47 = phi i32 [ 0, %36 ], [ %41, %38 ]
  %48 = bitcast %"class.WTF::StringTypeAdapter"* %4 to i64*
  store i64 %46, i64* %48, align 8
  store i8* %45, i8** %32, align 8
  store i32 %47, i32* %33, align 8
  %49 = bitcast %"class.WTF::StringTypeAdapter"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %49) #9
  %50 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %5, i64 0, i32 0, i32 0, i32 1
  %51 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %5, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 -86, i64 24, i1 false) #9
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %54, label %56

54:                                               ; preds = %44
  %55 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %62

56:                                               ; preds = %44
  %57 = ptrtoint %"class.WTF::StringImpl"* %52 to i64
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 1
  %61 = bitcast %"class.WTF::StringImpl"* %60 to i8*
  br label %62

62:                                               ; preds = %54, %56
  %63 = phi i8* [ null, %54 ], [ %61, %56 ]
  %64 = phi i64 [ %55, %54 ], [ %57, %56 ]
  %65 = phi i32 [ 0, %54 ], [ %59, %56 ]
  %66 = bitcast %"class.WTF::StringTypeAdapter"* %5 to i64*
  store i64 %64, i64* %66, align 8
  store i8* %63, i8** %50, align 8
  store i32 %65, i32* %51, align 8
  %67 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %4, i64 0, i32 0
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.1"* nonnull %67, i8* %30) #9
  %68 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %5, i64 0, i32 0
  %69 = load i32, i32* %33, align 8
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %30, i64 %70
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.1"* nonnull %68, i8* %71) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %49) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #9
  %72 = icmp eq %"class.WTF::StringImpl"* %29, null
  br i1 %72, label %180, label %73

73:                                               ; preds = %62
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load atomic i32, i32* %74 monotonic, align 4
  %76 = and i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 0
  %79 = load i32, i32* %78, align 4
  br i1 %77, label %80, label %90

80:                                               ; preds = %73
  %81 = zext i32 %79 to i33
  %82 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %81, i33 1) #9
  %83 = extractvalue { i33, i1 } %82, 1
  %84 = extractvalue { i33, i1 } %82, 0
  %85 = icmp slt i33 %84, 0
  %86 = or i1 %83, %85
  br i1 %86, label %87, label %88, !prof !2

87:                                               ; preds = %80
  call void @llvm.trap() #9
  unreachable

88:                                               ; preds = %80
  %89 = trunc i33 %84 to i32
  store i32 %89, i32* %78, align 4
  br label %90

90:                                               ; preds = %73, %88
  %91 = phi i32 [ %89, %88 ], [ %79, %73 ]
  %92 = ptrtoint %"class.WTF::StringImpl"* %29 to i64
  %93 = load atomic i32, i32* %74 monotonic, align 4
  %94 = and i32 %93, 2
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %99

96:                                               ; preds = %90
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 0
  %98 = add i32 %91, -1
  store i32 %98, i32* %97, align 4
  br label %99

99:                                               ; preds = %96, %90
  %100 = phi i32 [ %98, %96 ], [ %91, %90 ]
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %180

102:                                              ; preds = %99
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %29) #9
  br label %180

103:                                              ; preds = %19, %1
  %104 = bitcast i16** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %104) #9
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %7, align 8
  %105 = tail call i32 @_ZNK3WTF12StringAppendINS_6StringES1_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %106 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %105, i16** nonnull dereferenceable(8) %7) #9
  %107 = load i16*, i16** %7, align 8
  %108 = bitcast %"class.WTF::StringTypeAdapter"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %108) #9
  %109 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %2, i64 0, i32 0, i32 0, i32 1
  %110 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %2, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %108, i8 -86, i64 24, i1 false) #9
  %111 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %112 = icmp eq %"class.WTF::StringImpl"* %111, null
  br i1 %112, label %113, label %115

113:                                              ; preds = %103
  %114 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %121

115:                                              ; preds = %103
  %116 = ptrtoint %"class.WTF::StringImpl"* %111 to i64
  %117 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 0, i32 1
  %118 = load i32, i32* %117, align 4
  %119 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 1
  %120 = bitcast %"class.WTF::StringImpl"* %119 to i8*
  br label %121

121:                                              ; preds = %115, %113
  %122 = phi i8* [ null, %113 ], [ %120, %115 ]
  %123 = phi i64 [ %114, %113 ], [ %116, %115 ]
  %124 = phi i32 [ 0, %113 ], [ %118, %115 ]
  %125 = bitcast %"class.WTF::StringTypeAdapter"* %2 to i64*
  store i64 %123, i64* %125, align 8
  store i8* %122, i8** %109, align 8
  store i32 %124, i32* %110, align 8
  %126 = bitcast %"class.WTF::StringTypeAdapter"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %126) #9
  %127 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %3, i64 0, i32 0, i32 0, i32 1
  %128 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %3, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %126, i8 -86, i64 24, i1 false) #9
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %130 = icmp eq %"class.WTF::StringImpl"* %129, null
  br i1 %130, label %131, label %133

131:                                              ; preds = %121
  %132 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %139

133:                                              ; preds = %121
  %134 = ptrtoint %"class.WTF::StringImpl"* %129 to i64
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 1
  %136 = load i32, i32* %135, align 4
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 1
  %138 = bitcast %"class.WTF::StringImpl"* %137 to i8*
  br label %139

139:                                              ; preds = %131, %133
  %140 = phi i8* [ null, %131 ], [ %138, %133 ]
  %141 = phi i64 [ %132, %131 ], [ %134, %133 ]
  %142 = phi i32 [ 0, %131 ], [ %136, %133 ]
  %143 = bitcast %"class.WTF::StringTypeAdapter"* %3 to i64*
  store i64 %141, i64* %143, align 8
  store i8* %140, i8** %127, align 8
  store i32 %142, i32* %128, align 8
  %144 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %2, i64 0, i32 0
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.1"* nonnull %144, i16* %107) #9
  %145 = getelementptr inbounds %"class.WTF::StringTypeAdapter", %"class.WTF::StringTypeAdapter"* %3, i64 0, i32 0
  %146 = load i32, i32* %110, align 8
  %147 = zext i32 %146 to i64
  %148 = getelementptr inbounds i16, i16* %107, i64 %147
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.1"* nonnull %145, i16* %148) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %126) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %108) #9
  %149 = icmp eq %"class.WTF::StringImpl"* %106, null
  br i1 %149, label %180, label %150

150:                                              ; preds = %139
  %151 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %152 = load atomic i32, i32* %151 monotonic, align 4
  %153 = and i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 0
  %156 = load i32, i32* %155, align 4
  br i1 %154, label %157, label %167

157:                                              ; preds = %150
  %158 = zext i32 %156 to i33
  %159 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %158, i33 1) #9
  %160 = extractvalue { i33, i1 } %159, 1
  %161 = extractvalue { i33, i1 } %159, 0
  %162 = icmp slt i33 %161, 0
  %163 = or i1 %160, %162
  br i1 %163, label %164, label %165, !prof !2

164:                                              ; preds = %157
  call void @llvm.trap() #9
  unreachable

165:                                              ; preds = %157
  %166 = trunc i33 %161 to i32
  store i32 %166, i32* %155, align 4
  br label %167

167:                                              ; preds = %150, %165
  %168 = phi i32 [ %166, %165 ], [ %156, %150 ]
  %169 = ptrtoint %"class.WTF::StringImpl"* %106 to i64
  %170 = load atomic i32, i32* %151 monotonic, align 4
  %171 = and i32 %170, 2
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %176

173:                                              ; preds = %167
  %174 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 0
  %175 = add i32 %168, -1
  store i32 %175, i32* %174, align 4
  br label %176

176:                                              ; preds = %173, %167
  %177 = phi i32 [ %175, %173 ], [ %168, %167 ]
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %179, label %180

179:                                              ; preds = %176
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %106) #9
  br label %180

180:                                              ; preds = %179, %176, %139, %102, %99, %62
  %181 = phi i8* [ %27, %62 ], [ %27, %99 ], [ %27, %102 ], [ %104, %139 ], [ %104, %176 ], [ %104, %179 ]
  %182 = phi i64 [ 0, %62 ], [ %92, %99 ], [ %92, %102 ], [ 0, %139 ], [ %169, %176 ], [ %169, %179 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %181) #9
  %183 = inttoptr i64 %182 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %183
}

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS_6StringES1_EC2ES1_S1_(%"class.WTF::StringAppend"*, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %1, %"class.WTF::StringImpl"** %4, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %5, label %23, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %23

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i33
  %15 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %14, i33 1) #9
  %16 = extractvalue { i33, i1 } %15, 1
  %17 = extractvalue { i33, i1 } %15, 0
  %18 = icmp slt i33 %17, 0
  %19 = or i1 %16, %18
  br i1 %19, label %20, label %21, !prof !2

20:                                               ; preds = %11
  tail call void @llvm.trap() #9
  unreachable

21:                                               ; preds = %11
  %22 = trunc i33 %17 to i32
  store i32 %22, i32* %12, align 4
  br label %23

23:                                               ; preds = %3, %6, %21
  %24 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %2, %"class.WTF::StringImpl"** %24, align 8
  %25 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %25, label %55, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = and i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %32 = load i32, i32* %31, align 4
  br i1 %30, label %33, label %43

33:                                               ; preds = %26
  %34 = zext i32 %32 to i33
  %35 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %34, i33 1) #9
  %36 = extractvalue { i33, i1 } %35, 1
  %37 = extractvalue { i33, i1 } %35, 0
  %38 = icmp slt i33 %37, 0
  %39 = or i1 %36, %38
  br i1 %39, label %40, label %41, !prof !2

40:                                               ; preds = %33
  tail call void @llvm.trap() #9
  unreachable

41:                                               ; preds = %33
  %42 = trunc i33 %37 to i32
  store i32 %42, i32* %31, align 4
  br label %43

43:                                               ; preds = %26, %41
  %44 = phi i32 [ %42, %41 ], [ %32, %26 ]
  %45 = load atomic i32, i32* %27 monotonic, align 4
  %46 = and i32 %45, 2
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %51

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %50 = add i32 %44, -1
  store i32 %50, i32* %49, align 4
  br label %51

51:                                               ; preds = %48, %43
  %52 = phi i32 [ %50, %48 ], [ %44, %43 ]
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #9
  br label %55

55:                                               ; preds = %23, %51, %54
  br i1 %5, label %69, label %56

56:                                               ; preds = %55
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load atomic i32, i32* %57 monotonic, align 4
  %59 = and i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %62 = load i32, i32* %61, align 4
  br i1 %60, label %63, label %65

63:                                               ; preds = %56
  %64 = add i32 %62, -1
  store i32 %64, i32* %61, align 4
  br label %65

65:                                               ; preds = %63, %56
  %66 = phi i32 [ %64, %63 ], [ %62, %56 ]
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %69

68:                                               ; preds = %65
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #9
  br label %69

69:                                               ; preds = %55, %65, %68
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS_6StringES1_E6lengthEv(%"class.WTF::StringAppend"*) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  br label %14

14:                                               ; preds = %1, %11
  %15 = phi i32 [ %13, %11 ], [ 0, %1 ]
  %16 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = icmp eq %"class.WTF::StringImpl"* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  br label %22

22:                                               ; preds = %14, %19
  %23 = phi i32 [ %21, %19 ], [ 0, %14 ]
  %24 = add i32 %23, %15
  %25 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #9
  %26 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %26, align 8
  %27 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27)
  %28 = icmp ult i32 %24, %15
  br i1 %28, label %30, label %29

29:                                               ; preds = %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  store i8* null, i8** %26, align 8
  br label %39

30:                                               ; preds = %22
  %31 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %24) #9
  %32 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %15) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i64 0, i64 0), i8* %31, i8* %32) #9
  %33 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %34 = load i8*, i8** %33, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  store i8* %34, i8** %26, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %30
  %37 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.9, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %4) #9
  %38 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #9
  br label %39

39:                                               ; preds = %29, %30, %36
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #9
  %40 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #9
  %41 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %41, align 8
  %42 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42)
  %43 = icmp ult i32 %24, %23
  br i1 %43, label %45, label %44

44:                                               ; preds = %39
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* null, i8** %41, align 8
  br label %54

45:                                               ; preds = %39
  %46 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %24) #9
  %47 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.10, i64 0, i64 0), i8* %46, i8* %47) #9
  %48 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* %49, i8** %41, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %54, label %51

51:                                               ; preds = %45
  %52 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.9, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %6) #9
  %53 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #9
  br label %54

54:                                               ; preds = %44, %45, %51
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #9
  ret i32 %24
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #3

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.1"*, i8*) local_unnamed_addr #3

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.1"*, i16*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
