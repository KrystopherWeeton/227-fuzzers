; ModuleID = '../../third_party/libgav1/src/src/dsp/x86/film_grain_sse4.cc'
source_filename = "../../third_party/libgav1/src/src/dsp/x86/film_grain_sse4.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array", %"struct.std::__1::array.0", %"struct.std::__1::array.0", %"struct.std::__1::array.1", %"struct.std::__1::array.2", %"class.libgav1::Array2D", %"class.libgav1::Array2D.4" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::array.0" = type { [8 x i8] }
%"struct.std::__1::array.1" = type { [8 x i8] }
%"struct.std::__1::array.2" = type { [8 x i16] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"class.libgav1::Array2D.4" = type { %"class.std::__1::unique_ptr.5", i64, i64, %"class.libgav1::Array2DView.11" }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon }
%union.anon = type { i32 }
%"class.libgav1::Array2DView.11" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.4", %"class.libgav1::Array2D.12" }
%"class.libgav1::Array2D.12" = type { %"class.std::__1::unique_ptr.13", i64, i64, %"class.libgav1::Array2DView.19" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i8* }
%"class.libgav1::Array2DView.19" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }
%"class.libgav1::Array2D.20" = type { %"class.std::__1::unique_ptr.21", i64, i64, %"class.libgav1::Array2DView.27" }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { i16* }
%"class.libgav1::Array2DView.27" = type { i32, i32, i16* }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav13dsp20FilmGrainInit_SSE4_1Ev() local_unnamed_addr #0 {
  %1 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 8) #5
  %2 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 11, i32 5
  store void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)* @_ZN7libgav13dsp10film_grain12_GLOBAL__N_130BlendNoiseWithImageLuma_SSE4_1ILi8EahEEvPKviiiiiiPKhS5_lPvl, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)** %2, align 8
  %3 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 11, i32 6, i64 0
  %4 = bitcast void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)** %3 to <2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*>*
  store <2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*> <void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)* @_ZN7libgav13dsp10film_grain12low_bitdepth12_GLOBAL__N_136BlendNoiseWithImageChroma8bpp_SSE4_1ENS_5PlaneERKNS_15FilmGrainParamsEPKviiiiiiiPKhS9_lS9_lPvl, void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)* @_ZN7libgav13dsp10film_grain12_GLOBAL__N_139BlendNoiseWithImageChromaWithCfl_SSE4_1ILi8EahEEvNS_5PlaneERKNS_15FilmGrainParamsEPKviiiiiiiPKhS9_lS9_lPvl>, <2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*>* %4, align 8
  %5 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 10) #5
  %6 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %5, i64 0, i32 11, i32 5
  store void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)* @_ZN7libgav13dsp10film_grain12_GLOBAL__N_130BlendNoiseWithImageLuma_SSE4_1ILi10EstEEvPKviiiiiiPKhS5_lPvl, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)** %6, align 8
  %7 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %5, i64 0, i32 11, i32 6, i64 1
  store void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)* @_ZN7libgav13dsp10film_grain12_GLOBAL__N_139BlendNoiseWithImageChromaWithCfl_SSE4_1ILi10EstEEvNS_5PlaneERKNS_15FilmGrainParamsEPKviiiiiiiPKhS9_lS9_lPvl, void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)** %7, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp10film_grain12_GLOBAL__N_130BlendNoiseWithImageLuma_SSE4_1ILi8EahEEvPKviiiiiiPKhS5_lPvl(i8* nocapture readonly, i32, i32, i32, i32, i32, i32, i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture, i64) #3 {
  %13 = alloca <2 x i64>, align 16
  %14 = alloca <2 x i64>, align 16
  %15 = alloca i64, align 8
  %16 = bitcast i64* %15 to [8 x i8]*
  %17 = trunc i32 %1 to i16
  %18 = insertelement <8 x i16> undef, i16 %17, i32 0
  %19 = shufflevector <8 x i16> %18, <8 x i16> undef, <8 x i32> zeroinitializer
  %20 = trunc i32 %2 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = and i32 %4, -8
  %24 = sub nsw i32 15, %3
  %25 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %24, i32 0
  %26 = icmp sgt i32 %23, 0
  %27 = bitcast <2 x i64>* %13 to i8*
  %28 = bitcast <2 x i64>* %13 to i16*
  %29 = getelementptr inbounds i8, i8* %27, i64 2
  %30 = bitcast i8* %29 to i16*
  %31 = getelementptr inbounds i8, i8* %27, i64 4
  %32 = bitcast i8* %31 to i16*
  %33 = getelementptr inbounds i8, i8* %27, i64 6
  %34 = bitcast i8* %33 to i16*
  %35 = getelementptr inbounds <2 x i64>, <2 x i64>* %13, i64 0, i64 1
  %36 = bitcast i64* %35 to i16*
  %37 = getelementptr inbounds i8, i8* %27, i64 10
  %38 = bitcast i8* %37 to i16*
  %39 = getelementptr inbounds i8, i8* %27, i64 12
  %40 = bitcast i8* %39 to i16*
  %41 = getelementptr inbounds i8, i8* %27, i64 14
  %42 = bitcast i8* %41 to i16*
  %43 = bitcast <2 x i64>* %13 to <8 x i16>*
  %44 = getelementptr inbounds i8, i8* %0, i64 28
  %45 = bitcast i8* %44 to i32*
  %46 = getelementptr inbounds i8, i8* %0, i64 32
  %47 = bitcast i8* %46 to i8**
  %48 = bitcast <4 x i32> %25 to <8 x i16>
  %49 = bitcast i64* %15 to i8*
  %50 = add nsw i32 %4, -1
  %51 = sext i32 %50 to i64
  %52 = bitcast <2 x i64>* %14 to i8*
  %53 = bitcast <2 x i64>* %14 to i16*
  %54 = getelementptr inbounds i8, i8* %49, i64 1
  %55 = getelementptr inbounds i8, i8* %52, i64 2
  %56 = bitcast i8* %55 to i16*
  %57 = getelementptr inbounds i8, i8* %49, i64 2
  %58 = getelementptr inbounds i8, i8* %52, i64 4
  %59 = bitcast i8* %58 to i16*
  %60 = getelementptr inbounds i8, i8* %49, i64 3
  %61 = getelementptr inbounds i8, i8* %52, i64 6
  %62 = bitcast i8* %61 to i16*
  %63 = getelementptr inbounds i8, i8* %49, i64 4
  %64 = getelementptr inbounds <2 x i64>, <2 x i64>* %14, i64 0, i64 1
  %65 = bitcast i64* %64 to i16*
  %66 = getelementptr inbounds i8, i8* %49, i64 5
  %67 = getelementptr inbounds i8, i8* %52, i64 10
  %68 = bitcast i8* %67 to i16*
  %69 = getelementptr inbounds i8, i8* %49, i64 6
  %70 = getelementptr inbounds i8, i8* %52, i64 12
  %71 = bitcast i8* %70 to i16*
  %72 = getelementptr inbounds i8, i8* %49, i64 7
  %73 = getelementptr inbounds i8, i8* %52, i64 14
  %74 = bitcast i8* %73 to i16*
  %75 = bitcast <2 x i64>* %14 to <8 x i16>*
  %76 = sext i32 %23 to i64
  %77 = sext i32 %5 to i64
  %78 = sext i32 %6 to i64
  br label %79

79:                                               ; preds = %252, %12
  %80 = phi i64 [ %255, %252 ], [ 0, %12 ]
  %81 = phi i8* [ %254, %252 ], [ %10, %12 ]
  %82 = phi i8* [ %253, %252 ], [ %8, %12 ]
  br i1 %26, label %83, label %169

83:                                               ; preds = %79
  %84 = add nsw i64 %80, %78
  br label %85

85:                                               ; preds = %83, %85
  %86 = phi i64 [ 0, %83 ], [ %165, %85 ]
  %87 = getelementptr inbounds i8, i8* %82, i64 %86
  %88 = bitcast i8* %87 to i64*
  %89 = load i64, i64* %88, align 1
  %90 = insertelement <2 x i64> undef, i64 %89, i32 0
  %91 = bitcast <2 x i64> %90 to <16 x i8>
  %92 = shufflevector <16 x i8> %91, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %93 = zext <8 x i8> %92 to <8 x i16>
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27)
  %94 = and i64 %89, 255
  %95 = getelementptr inbounds i8, i8* %7, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i16
  store i16 %97, i16* %28, align 16
  %98 = getelementptr inbounds i8, i8* %87, i64 1
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i64
  %101 = getelementptr inbounds i8, i8* %7, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i16
  store i16 %103, i16* %30, align 2
  %104 = getelementptr inbounds i8, i8* %87, i64 2
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i64
  %107 = getelementptr inbounds i8, i8* %7, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i16
  store i16 %109, i16* %32, align 4
  %110 = getelementptr inbounds i8, i8* %87, i64 3
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i64
  %113 = getelementptr inbounds i8, i8* %7, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i16
  store i16 %115, i16* %34, align 2
  %116 = getelementptr inbounds i8, i8* %87, i64 4
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i64
  %119 = getelementptr inbounds i8, i8* %7, i64 %118
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i16
  store i16 %121, i16* %36, align 8
  %122 = getelementptr inbounds i8, i8* %87, i64 5
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i64
  %125 = getelementptr inbounds i8, i8* %7, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i16
  store i16 %127, i16* %38, align 2
  %128 = getelementptr inbounds i8, i8* %87, i64 6
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i64
  %131 = getelementptr inbounds i8, i8* %7, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i16
  store i16 %133, i16* %40, align 4
  %134 = getelementptr inbounds i8, i8* %87, i64 7
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i64
  %137 = getelementptr inbounds i8, i8* %7, i64 %136
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i16
  store i16 %139, i16* %42, align 2
  %140 = load <8 x i16>, <8 x i16>* %43, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27)
  %141 = load i32, i32* %45, align 4
  %142 = sext i32 %141 to i64
  %143 = mul nsw i64 %84, %142
  %144 = load i8*, i8** %47, align 8
  %145 = getelementptr inbounds i8, i8* %144, i64 %143
  %146 = getelementptr inbounds i8, i8* %145, i64 %86
  %147 = bitcast i8* %146 to i64*
  %148 = load i64, i64* %147, align 1
  %149 = insertelement <2 x i64> undef, i64 %148, i32 0
  %150 = bitcast <2 x i64> %149 to <16 x i8>
  %151 = shufflevector <16 x i8> %150, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %152 = sext <8 x i8> %151 to <8 x i16>
  %153 = tail call <8 x i16> @llvm.x86.sse2.psll.w(<8 x i16> %140, <8 x i16> %48) #5
  %154 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %152, <8 x i16> %153) #5
  %155 = add <8 x i16> %154, %93
  %156 = getelementptr inbounds i8, i8* %81, i64 %86
  %157 = icmp slt <8 x i16> %22, %155
  %158 = select <8 x i1> %157, <8 x i16> %22, <8 x i16> %155
  %159 = icmp slt <8 x i16> %158, %19
  %160 = select <8 x i1> %159, <8 x i16> %19, <8 x i16> %158
  %161 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %160, <8 x i16> undef) #5
  %162 = bitcast <16 x i8> %161 to <2 x i64>
  %163 = extractelement <2 x i64> %162, i32 0
  %164 = bitcast i8* %156 to i64*
  store i64 %163, i64* %164, align 1
  %165 = add nuw nsw i64 %86, 8
  %166 = icmp slt i64 %165, %76
  br i1 %166, label %85, label %167

167:                                              ; preds = %85
  %168 = trunc i64 %165 to i32
  br label %169

169:                                              ; preds = %167, %79
  %170 = phi i32 [ 0, %79 ], [ %168, %167 ]
  %171 = icmp slt i32 %170, %4
  br i1 %171, label %172, label %252

172:                                              ; preds = %169
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #5
  store i64 0, i64* %15, align 8
  %173 = sub nsw i32 %4, %170
  %174 = zext i32 %170 to i64
  %175 = getelementptr inbounds i8, i8* %82, i64 %174
  %176 = sext i32 %173 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %49, i8* align 1 %175, i64 %176, i1 false)
  %177 = getelementptr inbounds i8, i8* %82, i64 %51
  %178 = load i8, i8* %177, align 1
  %179 = getelementptr inbounds [8 x i8], [8 x i8]* %16, i64 0, i64 %176
  store i8 %178, i8* %179, align 1
  %180 = bitcast i8* %175 to i64*
  %181 = load i64, i64* %180, align 1
  %182 = insertelement <2 x i64> undef, i64 %181, i32 0
  %183 = bitcast <2 x i64> %182 to <16 x i8>
  %184 = shufflevector <16 x i8> %183, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %185 = zext <8 x i8> %184 to <8 x i16>
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52)
  %186 = load i8, i8* %49, align 8
  %187 = zext i8 %186 to i64
  %188 = getelementptr inbounds i8, i8* %7, i64 %187
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i16
  store i16 %190, i16* %53, align 16
  %191 = load i8, i8* %54, align 1
  %192 = zext i8 %191 to i64
  %193 = getelementptr inbounds i8, i8* %7, i64 %192
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i16
  store i16 %195, i16* %56, align 2
  %196 = load i8, i8* %57, align 2
  %197 = zext i8 %196 to i64
  %198 = getelementptr inbounds i8, i8* %7, i64 %197
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i16
  store i16 %200, i16* %59, align 4
  %201 = load i8, i8* %60, align 1
  %202 = zext i8 %201 to i64
  %203 = getelementptr inbounds i8, i8* %7, i64 %202
  %204 = load i8, i8* %203, align 1
  %205 = zext i8 %204 to i16
  store i16 %205, i16* %62, align 2
  %206 = load i8, i8* %63, align 4
  %207 = zext i8 %206 to i64
  %208 = getelementptr inbounds i8, i8* %7, i64 %207
  %209 = load i8, i8* %208, align 1
  %210 = zext i8 %209 to i16
  store i16 %210, i16* %65, align 8
  %211 = load i8, i8* %66, align 1
  %212 = zext i8 %211 to i64
  %213 = getelementptr inbounds i8, i8* %7, i64 %212
  %214 = load i8, i8* %213, align 1
  %215 = zext i8 %214 to i16
  store i16 %215, i16* %68, align 2
  %216 = load i8, i8* %69, align 2
  %217 = zext i8 %216 to i64
  %218 = getelementptr inbounds i8, i8* %7, i64 %217
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i16
  store i16 %220, i16* %71, align 4
  %221 = load i8, i8* %72, align 1
  %222 = zext i8 %221 to i64
  %223 = getelementptr inbounds i8, i8* %7, i64 %222
  %224 = load i8, i8* %223, align 1
  %225 = zext i8 %224 to i16
  store i16 %225, i16* %74, align 2
  %226 = load <8 x i16>, <8 x i16>* %75, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52)
  %227 = add nsw i64 %80, %78
  %228 = load i32, i32* %45, align 4
  %229 = sext i32 %228 to i64
  %230 = mul nsw i64 %227, %229
  %231 = load i8*, i8** %47, align 8
  %232 = getelementptr inbounds i8, i8* %231, i64 %230
  %233 = getelementptr inbounds i8, i8* %232, i64 %174
  %234 = bitcast i8* %233 to i64*
  %235 = load i64, i64* %234, align 1
  %236 = insertelement <2 x i64> undef, i64 %235, i32 0
  %237 = bitcast <2 x i64> %236 to <16 x i8>
  %238 = shufflevector <16 x i8> %237, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %239 = sext <8 x i8> %238 to <8 x i16>
  %240 = tail call <8 x i16> @llvm.x86.sse2.psll.w(<8 x i16> %226, <8 x i16> %48) #5
  %241 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %239, <8 x i16> %240) #5
  %242 = add <8 x i16> %241, %185
  %243 = getelementptr inbounds i8, i8* %81, i64 %174
  %244 = icmp slt <8 x i16> %22, %242
  %245 = select <8 x i1> %244, <8 x i16> %22, <8 x i16> %242
  %246 = icmp slt <8 x i16> %245, %19
  %247 = select <8 x i1> %246, <8 x i16> %19, <8 x i16> %245
  %248 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %247, <8 x i16> undef) #5
  %249 = bitcast <16 x i8> %248 to <2 x i64>
  %250 = extractelement <2 x i64> %249, i32 0
  %251 = bitcast i8* %243 to i64*
  store i64 %250, i64* %251, align 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #5
  br label %252

252:                                              ; preds = %172, %169
  %253 = getelementptr inbounds i8, i8* %82, i64 %9
  %254 = getelementptr inbounds i8, i8* %81, i64 %11
  %255 = add nuw nsw i64 %80, 1
  %256 = icmp slt i64 %255, %77
  br i1 %256, label %79, label %257

257:                                              ; preds = %252
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp10film_grain12low_bitdepth12_GLOBAL__N_136BlendNoiseWithImageChroma8bpp_SSE4_1ENS_5PlaneERKNS_15FilmGrainParamsEPKviiiiiiiPKhS9_lS9_lPvl(i8 zeroext, %"struct.libgav1::FilmGrainParams"* nocapture readonly dereferenceable(172), i8* nocapture readonly, i32, i32, i32, i32, i32, i32, i32, i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i8* nocapture, i64) #3 {
  %18 = alloca <16 x i8>, align 16
  %19 = alloca i64, align 8
  %20 = bitcast i8* %2 to %"class.libgav1::Array2D.12"*
  %21 = icmp eq i8 %0, 1
  %22 = getelementptr inbounds %"struct.libgav1::FilmGrainParams", %"struct.libgav1::FilmGrainParams"* %1, i64 0, i32 25
  %23 = getelementptr inbounds %"struct.libgav1::FilmGrainParams", %"struct.libgav1::FilmGrainParams"* %1, i64 0, i32 28
  %24 = load i16, i16* %22, align 2
  %25 = load i16, i16* %23, align 2
  %26 = select i1 %21, i16 %24, i16 %25
  %27 = getelementptr inbounds %"struct.libgav1::FilmGrainParams", %"struct.libgav1::FilmGrainParams"* %1, i64 0, i32 24
  %28 = getelementptr inbounds %"struct.libgav1::FilmGrainParams", %"struct.libgav1::FilmGrainParams"* %1, i64 0, i32 27
  %29 = load i8, i8* %27, align 1
  %30 = load i8, i8* %28, align 1
  %31 = select i1 %21, i8 %29, i8 %30
  %32 = sext i8 %31 to i32
  %33 = getelementptr inbounds %"struct.libgav1::FilmGrainParams", %"struct.libgav1::FilmGrainParams"* %1, i64 0, i32 23
  %34 = getelementptr inbounds %"struct.libgav1::FilmGrainParams", %"struct.libgav1::FilmGrainParams"* %1, i64 0, i32 26
  %35 = load i8, i8* %33, align 4
  %36 = load i8, i8* %34, align 4
  %37 = select i1 %21, i8 %35, i8 %36
  %38 = sext i8 %37 to i32
  %39 = zext i8 %0 to i64
  %40 = getelementptr inbounds %"struct.libgav1::FilmGrainParams", %"struct.libgav1::FilmGrainParams"* %1, i64 0, i32 14
  %41 = load i8, i8* %40, align 4
  %42 = zext i8 %41 to i32
  %43 = trunc i32 %3 to i16
  %44 = insertelement <8 x i16> undef, i16 %43, i32 0
  %45 = shufflevector <8 x i16> %44, <8 x i16> undef, <8 x i32> zeroinitializer
  %46 = trunc i32 %4 to i16
  %47 = insertelement <8 x i16> undef, i16 %46, i32 0
  %48 = shufflevector <8 x i16> %47, <8 x i16> undef, <8 x i32> zeroinitializer
  %49 = add nsw i32 %9, %6
  %50 = ashr i32 %49, %9
  %51 = add nsw i32 %8, %5
  %52 = ashr i32 %51, %8
  %53 = and i32 %5, 1
  %54 = sub nsw i32 %52, %53
  %55 = and i32 %54, -8
  %56 = getelementptr inbounds <16 x i8>, <16 x i8>* %18, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %56) #5
  %57 = insertelement <8 x i16> undef, i16 %26, i32 0
  %58 = shufflevector <8 x i16> %57, <8 x i16> undef, <8 x i32> zeroinitializer
  %59 = shl nsw i32 %38, 16
  %60 = and i32 %32, 65535
  %61 = or i32 %59, %60
  %62 = insertelement <4 x i32> undef, i32 %61, i32 0
  %63 = shufflevector <4 x i32> %62, <4 x i32> undef, <4 x i32> zeroinitializer
  %64 = sub nsw i32 15, %42
  %65 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %64, i32 0
  %66 = ashr i32 %7, %9
  %67 = icmp sgt i32 %55, 0
  %68 = icmp eq i32 %8, 0
  %69 = getelementptr inbounds %"class.libgav1::Array2D.12", %"class.libgav1::Array2D.12"* %20, i64 %39, i32 3, i32 1
  %70 = getelementptr inbounds %"class.libgav1::Array2D.12", %"class.libgav1::Array2D.12"* %20, i64 %39, i32 3, i32 2
  %71 = bitcast <4 x i32> %63 to <8 x i16>
  %72 = bitcast <4 x i32> %65 to <8 x i16>
  %73 = add nsw i32 %5, -1
  %74 = sext i32 %73 to i64
  %75 = bitcast i64* %19 to i8*
  %76 = bitcast <16 x i8>* %18 to i64*
  %77 = zext i32 %9 to i64
  %78 = shl i64 %12, %77
  %79 = sext i32 %55 to i64
  %80 = sext i32 %50 to i64
  %81 = sext i32 %66 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %56, i8 -86, i64 16, i1 false) #5
  br label %82

82:                                               ; preds = %328, %17
  %83 = phi i64 [ %332, %328 ], [ 0, %17 ]
  %84 = phi i8* [ %331, %328 ], [ %15, %17 ]
  %85 = phi i8* [ %330, %328 ], [ %13, %17 ]
  %86 = phi i8* [ %329, %328 ], [ %11, %17 ]
  br i1 %67, label %87, label %205

87:                                               ; preds = %82
  %88 = add nsw i64 %83, %81
  br label %89

89:                                               ; preds = %111, %87
  %90 = phi i64 [ 0, %87 ], [ %201, %111 ]
  %91 = trunc i64 %90 to i32
  %92 = shl i32 %91, %8
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i8, i8* %86, i64 %93
  br i1 %68, label %104, label %95

95:                                               ; preds = %89
  %96 = bitcast i8* %94 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 1
  %98 = shufflevector <16 x i8> %97, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %99 = zext <8 x i8> %98 to <8 x i16>
  %100 = shufflevector <16 x i8> %97, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %101 = bitcast <16 x i8> %100 to <8 x i16>
  %102 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %99, <8 x i16> %101) #5
  %103 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %102, <8 x i16> zeroinitializer) #5
  br label %111

104:                                              ; preds = %89
  %105 = bitcast i8* %94 to i64*
  %106 = load i64, i64* %105, align 1
  %107 = insertelement <2 x i64> undef, i64 %106, i32 0
  %108 = bitcast <2 x i64> %107 to <16 x i8>
  %109 = shufflevector <16 x i8> %108, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %110 = zext <8 x i8> %109 to <8 x i16>
  br label %111

111:                                              ; preds = %104, %95
  %112 = phi <8 x i16> [ %103, %95 ], [ %110, %104 ]
  %113 = getelementptr inbounds i8, i8* %85, i64 %90
  %114 = bitcast i8* %113 to i64*
  %115 = load i64, i64* %114, align 1
  %116 = insertelement <2 x i64> undef, i64 %115, i32 0
  %117 = bitcast <2 x i64> %116 to <16 x i8>
  %118 = shufflevector <16 x i8> %117, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %119 = zext <8 x i8> %118 to <8 x i16>
  %120 = load i32, i32* %69, align 4
  %121 = sext i32 %120 to i64
  %122 = mul nsw i64 %88, %121
  %123 = load i8*, i8** %70, align 8
  %124 = getelementptr inbounds i8, i8* %123, i64 %122
  %125 = getelementptr inbounds i8, i8* %124, i64 %90
  %126 = shufflevector <8 x i16> %112, <8 x i16> %119, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %127 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %126, <8 x i16> %71) #5
  %128 = shufflevector <8 x i16> %112, <8 x i16> %119, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %129 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %128, <8 x i16> %71) #5
  %130 = ashr <4 x i32> %127, <i32 6, i32 6, i32 6, i32 6>
  %131 = ashr <4 x i32> %129, <i32 6, i32 6, i32 6, i32 6>
  %132 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %130, <4 x i32> %131) #5
  %133 = add <8 x i16> %132, %58
  %134 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %133, <8 x i16> undef) #5
  %135 = bitcast <16 x i8> %134 to <2 x i64>
  %136 = extractelement <2 x i64> %135, i32 0
  %137 = lshr i64 %136, 8
  %138 = lshr i64 %136, 16
  %139 = lshr i64 %136, 24
  %140 = lshr i64 %136, 32
  %141 = lshr i64 %136, 40
  %142 = lshr i64 %136, 48
  %143 = lshr i64 %136, 56
  %144 = and i64 %136, 255
  %145 = getelementptr inbounds i8, i8* %10, i64 %144
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i16
  %148 = insertelement <8 x i16> undef, i16 %147, i32 0
  %149 = and i64 %137, 255
  %150 = getelementptr inbounds i8, i8* %10, i64 %149
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i16
  %153 = insertelement <8 x i16> %148, i16 %152, i32 1
  %154 = and i64 %138, 255
  %155 = getelementptr inbounds i8, i8* %10, i64 %154
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i16
  %158 = insertelement <8 x i16> %153, i16 %157, i32 2
  %159 = and i64 %139, 255
  %160 = getelementptr inbounds i8, i8* %10, i64 %159
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i16
  %163 = insertelement <8 x i16> %158, i16 %162, i32 3
  %164 = and i64 %140, 255
  %165 = getelementptr inbounds i8, i8* %10, i64 %164
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i16
  %168 = insertelement <8 x i16> %163, i16 %167, i32 4
  %169 = and i64 %141, 255
  %170 = getelementptr inbounds i8, i8* %10, i64 %169
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i16
  %173 = insertelement <8 x i16> %168, i16 %172, i32 5
  %174 = and i64 %142, 255
  %175 = getelementptr inbounds i8, i8* %10, i64 %174
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i16
  %178 = insertelement <8 x i16> %173, i16 %177, i32 6
  %179 = getelementptr inbounds i8, i8* %10, i64 %143
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i16
  %182 = insertelement <8 x i16> %178, i16 %181, i32 7
  %183 = bitcast i8* %125 to i64*
  %184 = load i64, i64* %183, align 1
  %185 = insertelement <2 x i64> undef, i64 %184, i32 0
  %186 = bitcast <2 x i64> %185 to <16 x i8>
  %187 = shufflevector <16 x i8> %186, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %188 = sext <8 x i8> %187 to <8 x i16>
  %189 = tail call <8 x i16> @llvm.x86.sse2.psll.w(<8 x i16> %182, <8 x i16> %72) #5
  %190 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %188, <8 x i16> %189) #5
  %191 = add <8 x i16> %190, %119
  %192 = getelementptr inbounds i8, i8* %84, i64 %90
  %193 = icmp slt <8 x i16> %48, %191
  %194 = select <8 x i1> %193, <8 x i16> %48, <8 x i16> %191
  %195 = icmp slt <8 x i16> %194, %45
  %196 = select <8 x i1> %195, <8 x i16> %45, <8 x i16> %194
  %197 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %196, <8 x i16> undef) #5
  %198 = bitcast <16 x i8> %197 to <2 x i64>
  %199 = extractelement <2 x i64> %198, i32 0
  %200 = bitcast i8* %192 to i64*
  store i64 %199, i64* %200, align 1
  %201 = add nuw nsw i64 %90, 8
  %202 = icmp slt i64 %201, %79
  br i1 %202, label %89, label %203

203:                                              ; preds = %111
  %204 = trunc i64 %201 to i32
  br label %205

205:                                              ; preds = %203, %82
  %206 = phi i32 [ 0, %82 ], [ %204, %203 ]
  %207 = icmp sgt i32 %52, %206
  br i1 %207, label %208, label %328

208:                                              ; preds = %205
  %209 = shl i32 %206, %8
  %210 = sub nsw i32 %5, %209
  %211 = sext i32 %209 to i64
  %212 = getelementptr inbounds i8, i8* %86, i64 %211
  %213 = sext i32 %210 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %56, i8* align 1 %212, i64 %213, i1 false) #5
  %214 = getelementptr inbounds i8, i8* %86, i64 %74
  %215 = load i8, i8* %214, align 1
  %216 = getelementptr inbounds <16 x i8>, <16 x i8>* %18, i64 0, i64 %213
  store i8 %215, i8* %216, align 1
  %217 = sub nsw i32 %52, %206
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %75) #5
  %218 = zext i32 %206 to i64
  %219 = getelementptr inbounds i8, i8* %85, i64 %218
  %220 = sext i32 %217 to i64
  %221 = icmp ugt i32 %217, 7
  %222 = sub nsw i64 8, %220
  %223 = select i1 %221, i64 0, i64 %222
  %224 = getelementptr i8, i8* %75, i64 %220
  call void @llvm.memset.p0i8.i64(i8* align 1 %224, i8 -86, i64 %223, i1 false) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %75, i8* align 1 %219, i64 %220, i1 false) #5
  br i1 %68, label %233, label %225

225:                                              ; preds = %208
  %226 = load <16 x i8>, <16 x i8>* %18, align 16
  %227 = shufflevector <16 x i8> %226, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %228 = zext <8 x i8> %227 to <8 x i16>
  %229 = shufflevector <16 x i8> %226, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %230 = bitcast <16 x i8> %229 to <8 x i16>
  %231 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %228, <8 x i16> %230) #5
  %232 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %231, <8 x i16> zeroinitializer) #5
  br label %239

233:                                              ; preds = %208
  %234 = load i64, i64* %76, align 16
  %235 = insertelement <2 x i64> undef, i64 %234, i32 0
  %236 = bitcast <2 x i64> %235 to <16 x i8>
  %237 = shufflevector <16 x i8> %236, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %238 = zext <8 x i8> %237 to <8 x i16>
  br label %239

239:                                              ; preds = %233, %225
  %240 = phi <8 x i16> [ %232, %225 ], [ %238, %233 ]
  %241 = load i64, i64* %19, align 8
  %242 = insertelement <2 x i64> undef, i64 %241, i32 0
  %243 = bitcast <2 x i64> %242 to <16 x i8>
  %244 = shufflevector <16 x i8> %243, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %245 = zext <8 x i8> %244 to <8 x i16>
  %246 = add nsw i64 %83, %81
  %247 = load i32, i32* %69, align 4
  %248 = sext i32 %247 to i64
  %249 = mul nsw i64 %246, %248
  %250 = load i8*, i8** %70, align 8
  %251 = getelementptr inbounds i8, i8* %250, i64 %249
  %252 = getelementptr inbounds i8, i8* %251, i64 %218
  %253 = shufflevector <8 x i16> %240, <8 x i16> %245, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %254 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %253, <8 x i16> %71) #5
  %255 = shufflevector <8 x i16> %240, <8 x i16> %245, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %256 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %255, <8 x i16> %71) #5
  %257 = ashr <4 x i32> %254, <i32 6, i32 6, i32 6, i32 6>
  %258 = ashr <4 x i32> %256, <i32 6, i32 6, i32 6, i32 6>
  %259 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %257, <4 x i32> %258) #5
  %260 = add <8 x i16> %259, %58
  %261 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %260, <8 x i16> undef) #5
  %262 = bitcast <16 x i8> %261 to <2 x i64>
  %263 = extractelement <2 x i64> %262, i32 0
  %264 = lshr i64 %263, 8
  %265 = lshr i64 %263, 16
  %266 = lshr i64 %263, 24
  %267 = lshr i64 %263, 32
  %268 = lshr i64 %263, 40
  %269 = lshr i64 %263, 48
  %270 = lshr i64 %263, 56
  %271 = and i64 %263, 255
  %272 = getelementptr inbounds i8, i8* %10, i64 %271
  %273 = load i8, i8* %272, align 1
  %274 = zext i8 %273 to i16
  %275 = insertelement <8 x i16> undef, i16 %274, i32 0
  %276 = and i64 %264, 255
  %277 = getelementptr inbounds i8, i8* %10, i64 %276
  %278 = load i8, i8* %277, align 1
  %279 = zext i8 %278 to i16
  %280 = insertelement <8 x i16> %275, i16 %279, i32 1
  %281 = and i64 %265, 255
  %282 = getelementptr inbounds i8, i8* %10, i64 %281
  %283 = load i8, i8* %282, align 1
  %284 = zext i8 %283 to i16
  %285 = insertelement <8 x i16> %280, i16 %284, i32 2
  %286 = and i64 %266, 255
  %287 = getelementptr inbounds i8, i8* %10, i64 %286
  %288 = load i8, i8* %287, align 1
  %289 = zext i8 %288 to i16
  %290 = insertelement <8 x i16> %285, i16 %289, i32 3
  %291 = and i64 %267, 255
  %292 = getelementptr inbounds i8, i8* %10, i64 %291
  %293 = load i8, i8* %292, align 1
  %294 = zext i8 %293 to i16
  %295 = insertelement <8 x i16> %290, i16 %294, i32 4
  %296 = and i64 %268, 255
  %297 = getelementptr inbounds i8, i8* %10, i64 %296
  %298 = load i8, i8* %297, align 1
  %299 = zext i8 %298 to i16
  %300 = insertelement <8 x i16> %295, i16 %299, i32 5
  %301 = and i64 %269, 255
  %302 = getelementptr inbounds i8, i8* %10, i64 %301
  %303 = load i8, i8* %302, align 1
  %304 = zext i8 %303 to i16
  %305 = insertelement <8 x i16> %300, i16 %304, i32 6
  %306 = getelementptr inbounds i8, i8* %10, i64 %270
  %307 = load i8, i8* %306, align 1
  %308 = zext i8 %307 to i16
  %309 = insertelement <8 x i16> %305, i16 %308, i32 7
  %310 = bitcast i8* %252 to i64*
  %311 = load i64, i64* %310, align 1
  %312 = insertelement <2 x i64> undef, i64 %311, i32 0
  %313 = bitcast <2 x i64> %312 to <16 x i8>
  %314 = shufflevector <16 x i8> %313, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %315 = sext <8 x i8> %314 to <8 x i16>
  %316 = tail call <8 x i16> @llvm.x86.sse2.psll.w(<8 x i16> %309, <8 x i16> %72) #5
  %317 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %315, <8 x i16> %316) #5
  %318 = add <8 x i16> %317, %245
  %319 = getelementptr inbounds i8, i8* %84, i64 %218
  %320 = icmp slt <8 x i16> %48, %318
  %321 = select <8 x i1> %320, <8 x i16> %48, <8 x i16> %318
  %322 = icmp slt <8 x i16> %321, %45
  %323 = select <8 x i1> %322, <8 x i16> %45, <8 x i16> %321
  %324 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %323, <8 x i16> undef) #5
  %325 = bitcast <16 x i8> %324 to <2 x i64>
  %326 = extractelement <2 x i64> %325, i32 0
  %327 = bitcast i8* %319 to i64*
  store i64 %326, i64* %327, align 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %75) #5
  br label %328

328:                                              ; preds = %239, %205
  %329 = getelementptr inbounds i8, i8* %86, i64 %78
  %330 = getelementptr inbounds i8, i8* %85, i64 %14
  %331 = getelementptr inbounds i8, i8* %84, i64 %16
  %332 = add nuw nsw i64 %83, 1
  %333 = icmp slt i64 %332, %80
  br i1 %333, label %82, label %334

334:                                              ; preds = %328
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %56) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp10film_grain12_GLOBAL__N_139BlendNoiseWithImageChromaWithCfl_SSE4_1ILi8EahEEvNS_5PlaneERKNS_15FilmGrainParamsEPKviiiiiiiPKhS9_lS9_lPvl(i8 zeroext, %"struct.libgav1::FilmGrainParams"* nocapture readonly dereferenceable(172), i8* nocapture readonly, i32, i32, i32, i32, i32, i32, i32, i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i8* nocapture, i64) #3 {
  %18 = alloca <16 x i8>, align 16
  %19 = bitcast i8* %2 to %"class.libgav1::Array2D.12"*
  %20 = zext i8 %0 to i64
  %21 = getelementptr inbounds %"struct.libgav1::FilmGrainParams", %"struct.libgav1::FilmGrainParams"* %1, i64 0, i32 14
  %22 = load i8, i8* %21, align 4
  %23 = zext i8 %22 to i32
  %24 = trunc i32 %3 to i16
  %25 = insertelement <8 x i16> undef, i16 %24, i32 0
  %26 = shufflevector <8 x i16> %25, <8 x i16> undef, <8 x i32> zeroinitializer
  %27 = trunc i32 %4 to i16
  %28 = insertelement <8 x i16> undef, i16 %27, i32 0
  %29 = shufflevector <8 x i16> %28, <8 x i16> undef, <8 x i32> zeroinitializer
  %30 = getelementptr inbounds <16 x i8>, <16 x i8>* %18, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %30) #5
  %31 = add nsw i32 %9, %6
  %32 = ashr i32 %31, %9
  %33 = add nsw i32 %8, %5
  %34 = ashr i32 %33, %8
  %35 = and i32 %5, 1
  %36 = sub nsw i32 %34, %35
  %37 = and i32 %36, -8
  %38 = ashr i32 %7, %9
  %39 = sub nsw i32 15, %23
  %40 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %39, i32 0
  %41 = icmp sgt i32 %37, 0
  %42 = icmp eq i32 %8, 0
  %43 = getelementptr inbounds %"class.libgav1::Array2D.12", %"class.libgav1::Array2D.12"* %19, i64 %20, i32 3, i32 1
  %44 = getelementptr inbounds %"class.libgav1::Array2D.12", %"class.libgav1::Array2D.12"* %19, i64 %20, i32 3, i32 2
  %45 = bitcast <4 x i32> %40 to <8 x i16>
  %46 = add nsw i32 %5, -1
  %47 = sext i32 %46 to i64
  %48 = bitcast <16 x i8>* %18 to i64*
  %49 = zext i32 %9 to i64
  %50 = shl i64 %12, %49
  %51 = sext i32 %37 to i64
  %52 = sext i32 %32 to i64
  %53 = sext i32 %38 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %30, i8 -86, i64 16, i1 false) #5
  br label %54

54:                                               ; preds = %279, %17
  %55 = phi i64 [ %283, %279 ], [ 0, %17 ]
  %56 = phi i8* [ %282, %279 ], [ %15, %17 ]
  %57 = phi i8* [ %281, %279 ], [ %13, %17 ]
  %58 = phi i8* [ %280, %279 ], [ %11, %17 ]
  br i1 %41, label %59, label %169

59:                                               ; preds = %54
  %60 = add nsw i64 %55, %53
  br label %61

61:                                               ; preds = %83, %59
  %62 = phi i64 [ 0, %59 ], [ %165, %83 ]
  %63 = trunc i64 %62 to i32
  %64 = shl i32 %63, %8
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %58, i64 %65
  br i1 %42, label %76, label %67

67:                                               ; preds = %61
  %68 = bitcast i8* %66 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 1
  %70 = shufflevector <16 x i8> %69, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %71 = zext <8 x i8> %70 to <8 x i16>
  %72 = shufflevector <16 x i8> %69, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %73 = bitcast <16 x i8> %72 to <8 x i16>
  %74 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %71, <8 x i16> %73) #5
  %75 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %74, <8 x i16> zeroinitializer) #5
  br label %83

76:                                               ; preds = %61
  %77 = bitcast i8* %66 to i64*
  %78 = load i64, i64* %77, align 1
  %79 = insertelement <2 x i64> undef, i64 %78, i32 0
  %80 = bitcast <2 x i64> %79 to <16 x i8>
  %81 = shufflevector <16 x i8> %80, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %82 = zext <8 x i8> %81 to <8 x i16>
  br label %83

83:                                               ; preds = %76, %67
  %84 = phi <8 x i16> [ %75, %67 ], [ %82, %76 ]
  %85 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %84, <8 x i16> undef) #5
  %86 = bitcast <16 x i8> %85 to <2 x i64>
  %87 = extractelement <2 x i64> %86, i32 0
  %88 = lshr i64 %87, 8
  %89 = lshr i64 %87, 16
  %90 = lshr i64 %87, 24
  %91 = lshr i64 %87, 32
  %92 = lshr i64 %87, 40
  %93 = lshr i64 %87, 48
  %94 = lshr i64 %87, 56
  %95 = getelementptr inbounds i8, i8* %57, i64 %62
  %96 = load i32, i32* %43, align 4
  %97 = sext i32 %96 to i64
  %98 = mul nsw i64 %60, %97
  %99 = load i8*, i8** %44, align 8
  %100 = getelementptr inbounds i8, i8* %99, i64 %98
  %101 = getelementptr inbounds i8, i8* %100, i64 %62
  %102 = and i64 %87, 255
  %103 = getelementptr inbounds i8, i8* %10, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i16
  %106 = insertelement <8 x i16> undef, i16 %105, i32 0
  %107 = and i64 %88, 255
  %108 = getelementptr inbounds i8, i8* %10, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i16
  %111 = insertelement <8 x i16> %106, i16 %110, i32 1
  %112 = and i64 %89, 255
  %113 = getelementptr inbounds i8, i8* %10, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i16
  %116 = insertelement <8 x i16> %111, i16 %115, i32 2
  %117 = and i64 %90, 255
  %118 = getelementptr inbounds i8, i8* %10, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i16
  %121 = insertelement <8 x i16> %116, i16 %120, i32 3
  %122 = and i64 %91, 255
  %123 = getelementptr inbounds i8, i8* %10, i64 %122
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i16
  %126 = insertelement <8 x i16> %121, i16 %125, i32 4
  %127 = and i64 %92, 255
  %128 = getelementptr inbounds i8, i8* %10, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i16
  %131 = insertelement <8 x i16> %126, i16 %130, i32 5
  %132 = and i64 %93, 255
  %133 = getelementptr inbounds i8, i8* %10, i64 %132
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i16
  %136 = insertelement <8 x i16> %131, i16 %135, i32 6
  %137 = getelementptr inbounds i8, i8* %10, i64 %94
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i16
  %140 = insertelement <8 x i16> %136, i16 %139, i32 7
  %141 = bitcast i8* %95 to i64*
  %142 = load i64, i64* %141, align 1
  %143 = insertelement <2 x i64> undef, i64 %142, i32 0
  %144 = bitcast <2 x i64> %143 to <16 x i8>
  %145 = shufflevector <16 x i8> %144, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %146 = zext <8 x i8> %145 to <8 x i16>
  %147 = bitcast i8* %101 to i64*
  %148 = load i64, i64* %147, align 1
  %149 = insertelement <2 x i64> undef, i64 %148, i32 0
  %150 = bitcast <2 x i64> %149 to <16 x i8>
  %151 = shufflevector <16 x i8> %150, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %152 = sext <8 x i8> %151 to <8 x i16>
  %153 = tail call <8 x i16> @llvm.x86.sse2.psll.w(<8 x i16> %140, <8 x i16> %45) #5
  %154 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %152, <8 x i16> %153) #5
  %155 = add <8 x i16> %154, %146
  %156 = getelementptr inbounds i8, i8* %56, i64 %62
  %157 = icmp slt <8 x i16> %29, %155
  %158 = select <8 x i1> %157, <8 x i16> %29, <8 x i16> %155
  %159 = icmp slt <8 x i16> %158, %26
  %160 = select <8 x i1> %159, <8 x i16> %26, <8 x i16> %158
  %161 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %160, <8 x i16> undef) #5
  %162 = bitcast <16 x i8> %161 to <2 x i64>
  %163 = extractelement <2 x i64> %162, i32 0
  %164 = bitcast i8* %156 to i64*
  store i64 %163, i64* %164, align 1
  %165 = add nuw nsw i64 %62, 8
  %166 = icmp slt i64 %165, %51
  br i1 %166, label %61, label %167

167:                                              ; preds = %83
  %168 = trunc i64 %165 to i32
  br label %169

169:                                              ; preds = %167, %54
  %170 = phi i32 [ 0, %54 ], [ %168, %167 ]
  %171 = icmp slt i32 %170, %34
  br i1 %171, label %172, label %279

172:                                              ; preds = %169
  %173 = shl i32 %170, %8
  %174 = sub nsw i32 %5, %173
  %175 = sext i32 %173 to i64
  %176 = getelementptr inbounds i8, i8* %58, i64 %175
  %177 = sext i32 %174 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %30, i8* align 1 %176, i64 %177, i1 false) #5
  %178 = getelementptr inbounds i8, i8* %58, i64 %47
  %179 = load i8, i8* %178, align 1
  %180 = getelementptr inbounds <16 x i8>, <16 x i8>* %18, i64 0, i64 %177
  store i8 %179, i8* %180, align 1
  br i1 %42, label %189, label %181

181:                                              ; preds = %172
  %182 = load <16 x i8>, <16 x i8>* %18, align 16
  %183 = shufflevector <16 x i8> %182, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %184 = zext <8 x i8> %183 to <8 x i16>
  %185 = shufflevector <16 x i8> %182, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %186 = bitcast <16 x i8> %185 to <8 x i16>
  %187 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %184, <8 x i16> %186) #5
  %188 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %187, <8 x i16> zeroinitializer) #5
  br label %195

189:                                              ; preds = %172
  %190 = load i64, i64* %48, align 16
  %191 = insertelement <2 x i64> undef, i64 %190, i32 0
  %192 = bitcast <2 x i64> %191 to <16 x i8>
  %193 = shufflevector <16 x i8> %192, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %194 = zext <8 x i8> %193 to <8 x i16>
  br label %195

195:                                              ; preds = %189, %181
  %196 = phi <8 x i16> [ %188, %181 ], [ %194, %189 ]
  %197 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %196, <8 x i16> undef) #5
  %198 = bitcast <16 x i8> %197 to <2 x i64>
  %199 = extractelement <2 x i64> %198, i32 0
  %200 = lshr i64 %199, 8
  %201 = lshr i64 %199, 16
  %202 = lshr i64 %199, 24
  %203 = lshr i64 %199, 32
  %204 = lshr i64 %199, 40
  %205 = lshr i64 %199, 48
  %206 = lshr i64 %199, 56
  %207 = zext i32 %170 to i64
  %208 = getelementptr inbounds i8, i8* %57, i64 %207
  %209 = add nsw i64 %55, %53
  %210 = load i32, i32* %43, align 4
  %211 = sext i32 %210 to i64
  %212 = mul nsw i64 %209, %211
  %213 = load i8*, i8** %44, align 8
  %214 = getelementptr inbounds i8, i8* %213, i64 %212
  %215 = getelementptr inbounds i8, i8* %214, i64 %207
  %216 = and i64 %199, 255
  %217 = getelementptr inbounds i8, i8* %10, i64 %216
  %218 = load i8, i8* %217, align 1
  %219 = zext i8 %218 to i16
  %220 = insertelement <8 x i16> undef, i16 %219, i32 0
  %221 = and i64 %200, 255
  %222 = getelementptr inbounds i8, i8* %10, i64 %221
  %223 = load i8, i8* %222, align 1
  %224 = zext i8 %223 to i16
  %225 = insertelement <8 x i16> %220, i16 %224, i32 1
  %226 = and i64 %201, 255
  %227 = getelementptr inbounds i8, i8* %10, i64 %226
  %228 = load i8, i8* %227, align 1
  %229 = zext i8 %228 to i16
  %230 = insertelement <8 x i16> %225, i16 %229, i32 2
  %231 = and i64 %202, 255
  %232 = getelementptr inbounds i8, i8* %10, i64 %231
  %233 = load i8, i8* %232, align 1
  %234 = zext i8 %233 to i16
  %235 = insertelement <8 x i16> %230, i16 %234, i32 3
  %236 = and i64 %203, 255
  %237 = getelementptr inbounds i8, i8* %10, i64 %236
  %238 = load i8, i8* %237, align 1
  %239 = zext i8 %238 to i16
  %240 = insertelement <8 x i16> %235, i16 %239, i32 4
  %241 = and i64 %204, 255
  %242 = getelementptr inbounds i8, i8* %10, i64 %241
  %243 = load i8, i8* %242, align 1
  %244 = zext i8 %243 to i16
  %245 = insertelement <8 x i16> %240, i16 %244, i32 5
  %246 = and i64 %205, 255
  %247 = getelementptr inbounds i8, i8* %10, i64 %246
  %248 = load i8, i8* %247, align 1
  %249 = zext i8 %248 to i16
  %250 = insertelement <8 x i16> %245, i16 %249, i32 6
  %251 = getelementptr inbounds i8, i8* %10, i64 %206
  %252 = load i8, i8* %251, align 1
  %253 = zext i8 %252 to i16
  %254 = insertelement <8 x i16> %250, i16 %253, i32 7
  %255 = bitcast i8* %208 to i64*
  %256 = load i64, i64* %255, align 1
  %257 = insertelement <2 x i64> undef, i64 %256, i32 0
  %258 = bitcast <2 x i64> %257 to <16 x i8>
  %259 = shufflevector <16 x i8> %258, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %260 = zext <8 x i8> %259 to <8 x i16>
  %261 = bitcast i8* %215 to i64*
  %262 = load i64, i64* %261, align 1
  %263 = insertelement <2 x i64> undef, i64 %262, i32 0
  %264 = bitcast <2 x i64> %263 to <16 x i8>
  %265 = shufflevector <16 x i8> %264, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %266 = sext <8 x i8> %265 to <8 x i16>
  %267 = tail call <8 x i16> @llvm.x86.sse2.psll.w(<8 x i16> %254, <8 x i16> %45) #5
  %268 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %266, <8 x i16> %267) #5
  %269 = add <8 x i16> %268, %260
  %270 = getelementptr inbounds i8, i8* %56, i64 %207
  %271 = icmp slt <8 x i16> %29, %269
  %272 = select <8 x i1> %271, <8 x i16> %29, <8 x i16> %269
  %273 = icmp slt <8 x i16> %272, %26
  %274 = select <8 x i1> %273, <8 x i16> %26, <8 x i16> %272
  %275 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %274, <8 x i16> undef) #5
  %276 = bitcast <16 x i8> %275 to <2 x i64>
  %277 = extractelement <2 x i64> %276, i32 0
  %278 = bitcast i8* %270 to i64*
  store i64 %277, i64* %278, align 1
  br label %279

279:                                              ; preds = %195, %169
  %280 = getelementptr inbounds i8, i8* %58, i64 %50
  %281 = getelementptr inbounds i8, i8* %57, i64 %14
  %282 = getelementptr inbounds i8, i8* %56, i64 %16
  %283 = add nuw nsw i64 %55, 1
  %284 = icmp slt i64 %283, %52
  br i1 %284, label %54, label %285

285:                                              ; preds = %279
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %30) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.psll.w(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #4

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp10film_grain12_GLOBAL__N_130BlendNoiseWithImageLuma_SSE4_1ILi10EstEEvPKviiiiiiPKhS5_lPvl(i8* nocapture readonly, i32, i32, i32, i32, i32, i32, i8* readonly, i8* nocapture readonly, i64, i8* nocapture, i64) #3 {
  %13 = alloca <8 x i16>, align 16
  %14 = bitcast i8* %8 to i16*
  %15 = lshr i64 %9, 1
  %16 = bitcast i8* %10 to i16*
  %17 = lshr i64 %11, 1
  %18 = trunc i32 %1 to i16
  %19 = insertelement <8 x i16> undef, i16 %18, i32 0
  %20 = shufflevector <8 x i16> %19, <8 x i16> undef, <8 x i32> zeroinitializer
  %21 = trunc i32 %2 to i16
  %22 = insertelement <8 x i16> undef, i16 %21, i32 0
  %23 = shufflevector <8 x i16> %22, <8 x i16> undef, <8 x i32> zeroinitializer
  %24 = and i32 %4, -8
  %25 = sub nsw i32 15, %3
  %26 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %25, i32 0
  %27 = icmp sgt i32 %24, 0
  %28 = getelementptr inbounds i8, i8* %0, i64 28
  %29 = bitcast i8* %28 to i32*
  %30 = getelementptr inbounds i8, i8* %0, i64 32
  %31 = bitcast i8* %30 to i16**
  %32 = bitcast <4 x i32> %26 to <8 x i16>
  %33 = bitcast <8 x i16>* %13 to i8*
  %34 = getelementptr inbounds <8 x i16>, <8 x i16>* %13, i64 0, i64 0
  %35 = getelementptr inbounds <8 x i16>, <8 x i16>* %13, i64 0, i64 1
  %36 = getelementptr inbounds <8 x i16>, <8 x i16>* %13, i64 0, i64 2
  %37 = getelementptr inbounds <8 x i16>, <8 x i16>* %13, i64 0, i64 3
  %38 = getelementptr inbounds <8 x i16>, <8 x i16>* %13, i64 0, i64 4
  %39 = getelementptr inbounds <8 x i16>, <8 x i16>* %13, i64 0, i64 5
  %40 = getelementptr inbounds <8 x i16>, <8 x i16>* %13, i64 0, i64 6
  %41 = getelementptr inbounds <8 x i16>, <8 x i16>* %13, i64 0, i64 7
  %42 = add nsw i32 %4, -1
  %43 = sext i32 %42 to i64
  %44 = sext i32 %24 to i64
  %45 = sext i32 %5 to i64
  %46 = sext i32 %6 to i64
  %47 = bitcast <8 x i16>* %13 to i8*
  br label %48

48:                                               ; preds = %344, %12
  %49 = phi i64 [ %347, %344 ], [ 0, %12 ]
  %50 = phi i16* [ %346, %344 ], [ %16, %12 ]
  %51 = phi i16* [ %345, %344 ], [ %14, %12 ]
  br i1 %27, label %52, label %197

52:                                               ; preds = %48
  %53 = add nsw i64 %49, %46
  br label %54

54:                                               ; preds = %52, %54
  %55 = phi i64 [ 0, %52 ], [ %193, %54 ]
  %56 = getelementptr inbounds i16, i16* %51, i64 %55
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 1
  %59 = extractelement <8 x i16> %58, i32 0
  %60 = lshr i16 %59, 2
  %61 = zext i16 %60 to i64
  %62 = getelementptr inbounds i8, i8* %7, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i16
  %65 = insertelement <8 x i16> undef, i16 %64, i32 0
  %66 = add nuw nsw i16 %60, 1
  %67 = zext i16 %66 to i64
  %68 = getelementptr inbounds i8, i8* %7, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i16
  %71 = insertelement <8 x i16> undef, i16 %70, i32 0
  %72 = getelementptr inbounds i16, i16* %56, i64 1
  %73 = load i16, i16* %72, align 2
  %74 = lshr i16 %73, 2
  %75 = zext i16 %74 to i64
  %76 = getelementptr inbounds i8, i8* %7, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i16
  %79 = insertelement <8 x i16> %65, i16 %78, i32 1
  %80 = add nuw nsw i16 %74, 1
  %81 = zext i16 %80 to i64
  %82 = getelementptr inbounds i8, i8* %7, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i16
  %85 = insertelement <8 x i16> %71, i16 %84, i32 1
  %86 = getelementptr inbounds i16, i16* %56, i64 2
  %87 = load i16, i16* %86, align 2
  %88 = lshr i16 %87, 2
  %89 = zext i16 %88 to i64
  %90 = getelementptr inbounds i8, i8* %7, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i16
  %93 = insertelement <8 x i16> %79, i16 %92, i32 2
  %94 = add nuw nsw i16 %88, 1
  %95 = zext i16 %94 to i64
  %96 = getelementptr inbounds i8, i8* %7, i64 %95
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i16
  %99 = insertelement <8 x i16> %85, i16 %98, i32 2
  %100 = getelementptr inbounds i16, i16* %56, i64 3
  %101 = load i16, i16* %100, align 2
  %102 = lshr i16 %101, 2
  %103 = zext i16 %102 to i64
  %104 = getelementptr inbounds i8, i8* %7, i64 %103
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i16
  %107 = insertelement <8 x i16> %93, i16 %106, i32 3
  %108 = add nuw nsw i16 %102, 1
  %109 = zext i16 %108 to i64
  %110 = getelementptr inbounds i8, i8* %7, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i16
  %113 = insertelement <8 x i16> %99, i16 %112, i32 3
  %114 = getelementptr inbounds i16, i16* %56, i64 4
  %115 = load i16, i16* %114, align 2
  %116 = lshr i16 %115, 2
  %117 = zext i16 %116 to i64
  %118 = getelementptr inbounds i8, i8* %7, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i16
  %121 = insertelement <8 x i16> %107, i16 %120, i32 4
  %122 = add nuw nsw i16 %116, 1
  %123 = zext i16 %122 to i64
  %124 = getelementptr inbounds i8, i8* %7, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i16
  %127 = insertelement <8 x i16> %113, i16 %126, i32 4
  %128 = getelementptr inbounds i16, i16* %56, i64 5
  %129 = load i16, i16* %128, align 2
  %130 = lshr i16 %129, 2
  %131 = zext i16 %130 to i64
  %132 = getelementptr inbounds i8, i8* %7, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i16
  %135 = insertelement <8 x i16> %121, i16 %134, i32 5
  %136 = add nuw nsw i16 %130, 1
  %137 = zext i16 %136 to i64
  %138 = getelementptr inbounds i8, i8* %7, i64 %137
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i16
  %141 = insertelement <8 x i16> %127, i16 %140, i32 5
  %142 = getelementptr inbounds i16, i16* %56, i64 6
  %143 = load i16, i16* %142, align 2
  %144 = lshr i16 %143, 2
  %145 = zext i16 %144 to i64
  %146 = getelementptr inbounds i8, i8* %7, i64 %145
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i16
  %149 = insertelement <8 x i16> %135, i16 %148, i32 6
  %150 = add nuw nsw i16 %144, 1
  %151 = zext i16 %150 to i64
  %152 = getelementptr inbounds i8, i8* %7, i64 %151
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i16
  %155 = insertelement <8 x i16> %141, i16 %154, i32 6
  %156 = getelementptr inbounds i16, i16* %56, i64 7
  %157 = load i16, i16* %156, align 2
  %158 = lshr i16 %157, 2
  %159 = zext i16 %158 to i64
  %160 = getelementptr inbounds i8, i8* %7, i64 %159
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i16
  %163 = insertelement <8 x i16> %149, i16 %162, i32 7
  %164 = add nuw nsw i16 %158, 1
  %165 = zext i16 %164 to i64
  %166 = getelementptr inbounds i8, i8* %7, i64 %165
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i16
  %169 = insertelement <8 x i16> %155, i16 %168, i32 7
  %170 = load <8 x i16>, <8 x i16>* %57, align 1
  %171 = shl <8 x i16> %170, <i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13>
  %172 = and <8 x i16> %171, <i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576>
  %173 = sub <8 x i16> %169, %163
  %174 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %173, <8 x i16> %172) #5
  %175 = add <8 x i16> %174, %163
  %176 = load i32, i32* %29, align 4
  %177 = sext i32 %176 to i64
  %178 = mul nsw i64 %53, %177
  %179 = load i16*, i16** %31, align 8
  %180 = getelementptr inbounds i16, i16* %179, i64 %178
  %181 = getelementptr inbounds i16, i16* %180, i64 %55
  %182 = bitcast i16* %181 to <8 x i16>*
  %183 = load <8 x i16>, <8 x i16>* %182, align 1
  %184 = tail call <8 x i16> @llvm.x86.sse2.psll.w(<8 x i16> %175, <8 x i16> %32) #5
  %185 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %183, <8 x i16> %184) #5
  %186 = add <8 x i16> %185, %58
  %187 = getelementptr inbounds i16, i16* %50, i64 %55
  %188 = icmp slt <8 x i16> %23, %186
  %189 = select <8 x i1> %188, <8 x i16> %23, <8 x i16> %186
  %190 = icmp slt <8 x i16> %189, %20
  %191 = select <8 x i1> %190, <8 x i16> %20, <8 x i16> %189
  %192 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %191, <8 x i16>* %192, align 1
  %193 = add nuw nsw i64 %55, 8
  %194 = icmp slt i64 %193, %44
  br i1 %194, label %54, label %195

195:                                              ; preds = %54
  %196 = trunc i64 %193 to i32
  br label %197

197:                                              ; preds = %195, %48
  %198 = phi i32 [ 0, %48 ], [ %196, %195 ]
  %199 = icmp slt i32 %198, %4
  br i1 %199, label %200, label %344

200:                                              ; preds = %197
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %33) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %47, i8 -86, i64 16, i1 false)
  %201 = sub nsw i32 %4, %198
  %202 = zext i32 %198 to i64
  %203 = getelementptr inbounds i16, i16* %51, i64 %202
  %204 = bitcast i16* %203 to i8*
  %205 = sext i32 %201 to i64
  %206 = shl nsw i64 %205, 1
  %207 = icmp ugt i64 %206, 15
  %208 = sub nsw i64 16, %206
  %209 = select i1 %207, i64 0, i64 %208
  %210 = getelementptr i8, i8* %33, i64 %206
  call void @llvm.memset.p0i8.i64(i8* align 2 %210, i8 0, i64 %209, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %33, i8* align 2 %204, i64 %206, i1 false)
  %211 = getelementptr inbounds i16, i16* %51, i64 %43
  %212 = load i16, i16* %211, align 2
  %213 = getelementptr inbounds <8 x i16>, <8 x i16>* %13, i64 0, i64 %205
  store i16 %212, i16* %213, align 2
  %214 = bitcast i16* %203 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 1
  %216 = load i16, i16* %34, align 16
  %217 = lshr i16 %216, 2
  %218 = zext i16 %217 to i64
  %219 = getelementptr inbounds i8, i8* %7, i64 %218
  %220 = load i8, i8* %219, align 1
  %221 = zext i8 %220 to i16
  %222 = insertelement <8 x i16> undef, i16 %221, i32 0
  %223 = add nuw nsw i16 %217, 1
  %224 = zext i16 %223 to i64
  %225 = getelementptr inbounds i8, i8* %7, i64 %224
  %226 = load i8, i8* %225, align 1
  %227 = zext i8 %226 to i16
  %228 = insertelement <8 x i16> undef, i16 %227, i32 0
  %229 = load i16, i16* %35, align 2
  %230 = lshr i16 %229, 2
  %231 = zext i16 %230 to i64
  %232 = getelementptr inbounds i8, i8* %7, i64 %231
  %233 = load i8, i8* %232, align 1
  %234 = zext i8 %233 to i16
  %235 = insertelement <8 x i16> %222, i16 %234, i32 1
  %236 = add nuw nsw i16 %230, 1
  %237 = zext i16 %236 to i64
  %238 = getelementptr inbounds i8, i8* %7, i64 %237
  %239 = load i8, i8* %238, align 1
  %240 = zext i8 %239 to i16
  %241 = insertelement <8 x i16> %228, i16 %240, i32 1
  %242 = load i16, i16* %36, align 4
  %243 = lshr i16 %242, 2
  %244 = zext i16 %243 to i64
  %245 = getelementptr inbounds i8, i8* %7, i64 %244
  %246 = load i8, i8* %245, align 1
  %247 = zext i8 %246 to i16
  %248 = insertelement <8 x i16> %235, i16 %247, i32 2
  %249 = add nuw nsw i16 %243, 1
  %250 = zext i16 %249 to i64
  %251 = getelementptr inbounds i8, i8* %7, i64 %250
  %252 = load i8, i8* %251, align 1
  %253 = zext i8 %252 to i16
  %254 = insertelement <8 x i16> %241, i16 %253, i32 2
  %255 = load i16, i16* %37, align 2
  %256 = lshr i16 %255, 2
  %257 = zext i16 %256 to i64
  %258 = getelementptr inbounds i8, i8* %7, i64 %257
  %259 = load i8, i8* %258, align 1
  %260 = zext i8 %259 to i16
  %261 = insertelement <8 x i16> %248, i16 %260, i32 3
  %262 = add nuw nsw i16 %256, 1
  %263 = zext i16 %262 to i64
  %264 = getelementptr inbounds i8, i8* %7, i64 %263
  %265 = load i8, i8* %264, align 1
  %266 = zext i8 %265 to i16
  %267 = insertelement <8 x i16> %254, i16 %266, i32 3
  %268 = load i16, i16* %38, align 8
  %269 = lshr i16 %268, 2
  %270 = zext i16 %269 to i64
  %271 = getelementptr inbounds i8, i8* %7, i64 %270
  %272 = load i8, i8* %271, align 1
  %273 = zext i8 %272 to i16
  %274 = insertelement <8 x i16> %261, i16 %273, i32 4
  %275 = add nuw nsw i16 %269, 1
  %276 = zext i16 %275 to i64
  %277 = getelementptr inbounds i8, i8* %7, i64 %276
  %278 = load i8, i8* %277, align 1
  %279 = zext i8 %278 to i16
  %280 = insertelement <8 x i16> %267, i16 %279, i32 4
  %281 = load i16, i16* %39, align 2
  %282 = lshr i16 %281, 2
  %283 = zext i16 %282 to i64
  %284 = getelementptr inbounds i8, i8* %7, i64 %283
  %285 = load i8, i8* %284, align 1
  %286 = zext i8 %285 to i16
  %287 = insertelement <8 x i16> %274, i16 %286, i32 5
  %288 = add nuw nsw i16 %282, 1
  %289 = zext i16 %288 to i64
  %290 = getelementptr inbounds i8, i8* %7, i64 %289
  %291 = load i8, i8* %290, align 1
  %292 = zext i8 %291 to i16
  %293 = insertelement <8 x i16> %280, i16 %292, i32 5
  %294 = load i16, i16* %40, align 4
  %295 = lshr i16 %294, 2
  %296 = zext i16 %295 to i64
  %297 = getelementptr inbounds i8, i8* %7, i64 %296
  %298 = load i8, i8* %297, align 1
  %299 = zext i8 %298 to i16
  %300 = insertelement <8 x i16> %287, i16 %299, i32 6
  %301 = add nuw nsw i16 %295, 1
  %302 = zext i16 %301 to i64
  %303 = getelementptr inbounds i8, i8* %7, i64 %302
  %304 = load i8, i8* %303, align 1
  %305 = zext i8 %304 to i16
  %306 = insertelement <8 x i16> %293, i16 %305, i32 6
  %307 = load i16, i16* %41, align 2
  %308 = lshr i16 %307, 2
  %309 = zext i16 %308 to i64
  %310 = getelementptr inbounds i8, i8* %7, i64 %309
  %311 = load i8, i8* %310, align 1
  %312 = zext i8 %311 to i16
  %313 = insertelement <8 x i16> %300, i16 %312, i32 7
  %314 = add nuw nsw i16 %308, 1
  %315 = zext i16 %314 to i64
  %316 = getelementptr inbounds i8, i8* %7, i64 %315
  %317 = load i8, i8* %316, align 1
  %318 = zext i8 %317 to i16
  %319 = insertelement <8 x i16> %306, i16 %318, i32 7
  %320 = load <8 x i16>, <8 x i16>* %13, align 16
  %321 = shl <8 x i16> %320, <i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13>
  %322 = and <8 x i16> %321, <i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576>
  %323 = sub <8 x i16> %319, %313
  %324 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %323, <8 x i16> %322) #5
  %325 = add <8 x i16> %324, %313
  %326 = add nsw i64 %49, %46
  %327 = load i32, i32* %29, align 4
  %328 = sext i32 %327 to i64
  %329 = mul nsw i64 %326, %328
  %330 = load i16*, i16** %31, align 8
  %331 = getelementptr inbounds i16, i16* %330, i64 %329
  %332 = getelementptr inbounds i16, i16* %331, i64 %202
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 1
  %335 = tail call <8 x i16> @llvm.x86.sse2.psll.w(<8 x i16> %325, <8 x i16> %32) #5
  %336 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %334, <8 x i16> %335) #5
  %337 = add <8 x i16> %336, %215
  %338 = getelementptr inbounds i16, i16* %50, i64 %202
  %339 = icmp slt <8 x i16> %23, %337
  %340 = select <8 x i1> %339, <8 x i16> %23, <8 x i16> %337
  %341 = icmp slt <8 x i16> %340, %20
  %342 = select <8 x i1> %341, <8 x i16> %20, <8 x i16> %340
  %343 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %343, align 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %33) #5
  br label %344

344:                                              ; preds = %200, %197
  %345 = getelementptr inbounds i16, i16* %51, i64 %15
  %346 = getelementptr inbounds i16, i16* %50, i64 %17
  %347 = add nuw nsw i64 %49, 1
  %348 = icmp slt i64 %347, %45
  br i1 %348, label %48, label %349

349:                                              ; preds = %344
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp10film_grain12_GLOBAL__N_139BlendNoiseWithImageChromaWithCfl_SSE4_1ILi10EstEEvNS_5PlaneERKNS_15FilmGrainParamsEPKviiiiiiiPKhS9_lS9_lPvl(i8 zeroext, %"struct.libgav1::FilmGrainParams"* nocapture readonly dereferenceable(172), i8* nocapture readonly, i32, i32, i32, i32, i32, i32, i32, i8* readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i8* nocapture, i64) #3 {
  %18 = alloca [16 x i16], align 16
  %19 = alloca <2 x i64>, align 16
  %20 = bitcast i8* %2 to %"class.libgav1::Array2D.20"*
  %21 = bitcast i8* %11 to i16*
  %22 = lshr i64 %12, 1
  %23 = bitcast i8* %13 to i16*
  %24 = lshr i64 %14, 1
  %25 = bitcast i8* %15 to i16*
  %26 = lshr i64 %16, 1
  %27 = zext i8 %0 to i64
  %28 = getelementptr inbounds %"struct.libgav1::FilmGrainParams", %"struct.libgav1::FilmGrainParams"* %1, i64 0, i32 14
  %29 = load i8, i8* %28, align 4
  %30 = zext i8 %29 to i32
  %31 = trunc i32 %3 to i16
  %32 = insertelement <8 x i16> undef, i16 %31, i32 0
  %33 = shufflevector <8 x i16> %32, <8 x i16> undef, <8 x i32> zeroinitializer
  %34 = trunc i32 %4 to i16
  %35 = insertelement <8 x i16> undef, i16 %34, i32 0
  %36 = shufflevector <8 x i16> %35, <8 x i16> undef, <8 x i32> zeroinitializer
  %37 = bitcast [16 x i16]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %37) #5
  %38 = getelementptr inbounds [16 x i16], [16 x i16]* %18, i64 0, i64 8
  %39 = add nsw i32 %9, %6
  %40 = ashr i32 %39, %9
  %41 = add nsw i32 %8, %5
  %42 = ashr i32 %41, %8
  %43 = and i32 %5, 1
  %44 = sub nsw i32 %42, %43
  %45 = and i32 %44, -8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 -86, i64 32, i1 false) #5
  %46 = bitcast <2 x i64>* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46)
  %47 = ashr i32 %7, %9
  %48 = sub nsw i32 15, %30
  %49 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %48, i32 0
  %50 = icmp sgt i32 %45, 0
  %51 = icmp eq i32 %8, 0
  %52 = getelementptr inbounds %"class.libgav1::Array2D.20", %"class.libgav1::Array2D.20"* %20, i64 %27, i32 3, i32 1
  %53 = getelementptr inbounds %"class.libgav1::Array2D.20", %"class.libgav1::Array2D.20"* %20, i64 %27, i32 3, i32 2
  %54 = bitcast <4 x i32> %49 to <8 x i16>
  %55 = add nsw i32 %5, -1
  %56 = sext i32 %55 to i64
  %57 = bitcast [16 x i16]* %18 to <2 x i64>*
  %58 = bitcast i16* %38 to <8 x i16>*
  %59 = zext i32 %9 to i64
  %60 = shl i64 %22, %59
  %61 = sext i32 %45 to i64
  %62 = sext i32 %40 to i64
  %63 = sext i32 %47 to i64
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %19, align 16
  %64 = getelementptr inbounds i8, i8* %46, i64 14
  %65 = bitcast i8* %64 to i16*
  br label %66

66:                                               ; preds = %384, %17
  %67 = phi i64 [ %388, %384 ], [ 0, %17 ]
  %68 = phi i16* [ %387, %384 ], [ %25, %17 ]
  %69 = phi i16* [ %386, %384 ], [ %23, %17 ]
  %70 = phi i16* [ %385, %384 ], [ %21, %17 ]
  br i1 %50, label %71, label %225

71:                                               ; preds = %66
  %72 = add nsw i64 %67, %63
  br label %73

73:                                               ; preds = %89, %71
  %74 = phi i64 [ 0, %71 ], [ %221, %89 ]
  %75 = trunc i64 %74 to i32
  %76 = shl i32 %75, %8
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i16, i16* %70, i64 %77
  %79 = bitcast i16* %78 to <2 x i64>*
  %80 = load <2 x i64>, <2 x i64>* %79, align 1
  br i1 %51, label %89, label %81

81:                                               ; preds = %73
  %82 = getelementptr inbounds i16, i16* %78, i64 8
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 1
  %85 = bitcast <2 x i64> %80 to <8 x i16>
  %86 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %85, <8 x i16> %84) #5
  %87 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %86, <8 x i16> zeroinitializer) #5
  %88 = bitcast <8 x i16> %87 to <2 x i64>
  br label %89

89:                                               ; preds = %81, %73
  %90 = phi <2 x i64> [ %88, %81 ], [ %80, %73 ]
  store <2 x i64> %90, <2 x i64>* %19, align 16
  %91 = getelementptr inbounds i16, i16* %69, i64 %74
  %92 = load i32, i32* %52, align 4
  %93 = sext i32 %92 to i64
  %94 = mul nsw i64 %72, %93
  %95 = load i16*, i16** %53, align 8
  %96 = getelementptr inbounds i16, i16* %95, i64 %94
  %97 = getelementptr inbounds i16, i16* %96, i64 %74
  %98 = bitcast <2 x i64> %90 to <8 x i16>
  %99 = extractelement <8 x i16> %98, i32 0
  %100 = lshr i16 %99, 2
  %101 = zext i16 %100 to i64
  %102 = getelementptr inbounds i8, i8* %10, i64 %101
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i16
  %105 = insertelement <8 x i16> undef, i16 %104, i32 0
  %106 = add nuw nsw i16 %100, 1
  %107 = zext i16 %106 to i64
  %108 = getelementptr inbounds i8, i8* %10, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i16
  %111 = insertelement <8 x i16> undef, i16 %110, i32 0
  %112 = extractelement <8 x i16> %98, i32 1
  %113 = lshr i16 %112, 2
  %114 = zext i16 %113 to i64
  %115 = getelementptr inbounds i8, i8* %10, i64 %114
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i16
  %118 = insertelement <8 x i16> %105, i16 %117, i32 1
  %119 = add nuw nsw i16 %113, 1
  %120 = zext i16 %119 to i64
  %121 = getelementptr inbounds i8, i8* %10, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i16
  %124 = insertelement <8 x i16> %111, i16 %123, i32 1
  %125 = extractelement <8 x i16> %98, i32 2
  %126 = lshr i16 %125, 2
  %127 = zext i16 %126 to i64
  %128 = getelementptr inbounds i8, i8* %10, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i16
  %131 = insertelement <8 x i16> %118, i16 %130, i32 2
  %132 = add nuw nsw i16 %126, 1
  %133 = zext i16 %132 to i64
  %134 = getelementptr inbounds i8, i8* %10, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i16
  %137 = insertelement <8 x i16> %124, i16 %136, i32 2
  %138 = extractelement <8 x i16> %98, i32 3
  %139 = lshr i16 %138, 2
  %140 = zext i16 %139 to i64
  %141 = getelementptr inbounds i8, i8* %10, i64 %140
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i16
  %144 = insertelement <8 x i16> %131, i16 %143, i32 3
  %145 = add nuw nsw i16 %139, 1
  %146 = zext i16 %145 to i64
  %147 = getelementptr inbounds i8, i8* %10, i64 %146
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i16
  %150 = insertelement <8 x i16> %137, i16 %149, i32 3
  %151 = extractelement <8 x i16> %98, i32 4
  %152 = lshr i16 %151, 2
  %153 = zext i16 %152 to i64
  %154 = getelementptr inbounds i8, i8* %10, i64 %153
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i16
  %157 = insertelement <8 x i16> %144, i16 %156, i32 4
  %158 = add nuw nsw i16 %152, 1
  %159 = zext i16 %158 to i64
  %160 = getelementptr inbounds i8, i8* %10, i64 %159
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i16
  %163 = insertelement <8 x i16> %150, i16 %162, i32 4
  %164 = extractelement <8 x i16> %98, i32 5
  %165 = lshr i16 %164, 2
  %166 = zext i16 %165 to i64
  %167 = getelementptr inbounds i8, i8* %10, i64 %166
  %168 = load i8, i8* %167, align 1
  %169 = zext i8 %168 to i16
  %170 = insertelement <8 x i16> %157, i16 %169, i32 5
  %171 = add nuw nsw i16 %165, 1
  %172 = zext i16 %171 to i64
  %173 = getelementptr inbounds i8, i8* %10, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i16
  %176 = insertelement <8 x i16> %163, i16 %175, i32 5
  %177 = extractelement <8 x i16> %98, i32 6
  %178 = lshr i16 %177, 2
  %179 = zext i16 %178 to i64
  %180 = getelementptr inbounds i8, i8* %10, i64 %179
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i16
  %183 = insertelement <8 x i16> %170, i16 %182, i32 6
  %184 = add nuw nsw i16 %178, 1
  %185 = zext i16 %184 to i64
  %186 = getelementptr inbounds i8, i8* %10, i64 %185
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i16
  %189 = insertelement <8 x i16> %176, i16 %188, i32 6
  %190 = load i16, i16* %65, align 2
  %191 = lshr i16 %190, 2
  %192 = zext i16 %191 to i64
  %193 = getelementptr inbounds i8, i8* %10, i64 %192
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i16
  %196 = insertelement <8 x i16> %183, i16 %195, i32 7
  %197 = add nuw nsw i16 %191, 1
  %198 = zext i16 %197 to i64
  %199 = getelementptr inbounds i8, i8* %10, i64 %198
  %200 = load i8, i8* %199, align 1
  %201 = zext i8 %200 to i16
  %202 = insertelement <8 x i16> %189, i16 %201, i32 7
  %203 = shl <8 x i16> %98, <i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13>
  %204 = and <8 x i16> %203, <i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576>
  %205 = sub <8 x i16> %202, %196
  %206 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %205, <8 x i16> %204) #5
  %207 = add <8 x i16> %206, %196
  %208 = bitcast i16* %91 to <8 x i16>*
  %209 = load <8 x i16>, <8 x i16>* %208, align 1
  %210 = bitcast i16* %97 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 1
  %212 = tail call <8 x i16> @llvm.x86.sse2.psll.w(<8 x i16> %207, <8 x i16> %54) #5
  %213 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %211, <8 x i16> %212) #5
  %214 = add <8 x i16> %213, %209
  %215 = getelementptr inbounds i16, i16* %68, i64 %74
  %216 = icmp slt <8 x i16> %36, %214
  %217 = select <8 x i1> %216, <8 x i16> %36, <8 x i16> %214
  %218 = icmp slt <8 x i16> %217, %33
  %219 = select <8 x i1> %218, <8 x i16> %33, <8 x i16> %217
  %220 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %219, <8 x i16>* %220, align 1
  %221 = add nuw nsw i64 %74, 8
  %222 = icmp slt i64 %221, %61
  br i1 %222, label %73, label %223

223:                                              ; preds = %89
  %224 = trunc i64 %221 to i32
  br label %225

225:                                              ; preds = %223, %66
  %226 = phi i32 [ 0, %66 ], [ %224, %223 ]
  %227 = icmp slt i32 %226, %42
  br i1 %227, label %228, label %384

228:                                              ; preds = %225
  %229 = shl i32 %226, %8
  %230 = sub nsw i32 %5, %229
  %231 = sext i32 %229 to i64
  %232 = getelementptr inbounds i16, i16* %70, i64 %231
  %233 = bitcast i16* %232 to i8*
  %234 = sext i32 %230 to i64
  %235 = shl nsw i64 %234, 1
  %236 = icmp ugt i64 %235, 31
  %237 = sub nsw i64 32, %235
  %238 = select i1 %236, i64 0, i64 %237
  %239 = getelementptr [16 x i16], [16 x i16]* %18, i64 0, i64 %234
  %240 = bitcast i16* %239 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 2 %240, i8 0, i64 %238, i1 false) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %37, i8* align 2 %233, i64 %235, i1 false) #5
  %241 = getelementptr inbounds i16, i16* %70, i64 %56
  %242 = load i16, i16* %241, align 2
  store i16 %242, i16* %239, align 2
  %243 = load <2 x i64>, <2 x i64>* %57, align 16
  br i1 %51, label %250, label %244

244:                                              ; preds = %228
  %245 = load <8 x i16>, <8 x i16>* %58, align 16
  %246 = bitcast <2 x i64> %243 to <8 x i16>
  %247 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %246, <8 x i16> %245) #5
  %248 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %247, <8 x i16> zeroinitializer) #5
  %249 = bitcast <8 x i16> %248 to <2 x i64>
  br label %250

250:                                              ; preds = %244, %228
  %251 = phi <2 x i64> [ %249, %244 ], [ %243, %228 ]
  store <2 x i64> %251, <2 x i64>* %19, align 16
  %252 = zext i32 %226 to i64
  %253 = getelementptr inbounds i16, i16* %69, i64 %252
  %254 = add nsw i64 %67, %63
  %255 = load i32, i32* %52, align 4
  %256 = sext i32 %255 to i64
  %257 = mul nsw i64 %254, %256
  %258 = load i16*, i16** %53, align 8
  %259 = getelementptr inbounds i16, i16* %258, i64 %257
  %260 = getelementptr inbounds i16, i16* %259, i64 %252
  %261 = bitcast <2 x i64> %251 to <8 x i16>
  %262 = extractelement <8 x i16> %261, i32 0
  %263 = lshr i16 %262, 2
  %264 = zext i16 %263 to i64
  %265 = getelementptr inbounds i8, i8* %10, i64 %264
  %266 = load i8, i8* %265, align 1
  %267 = zext i8 %266 to i16
  %268 = insertelement <8 x i16> undef, i16 %267, i32 0
  %269 = add nuw nsw i16 %263, 1
  %270 = zext i16 %269 to i64
  %271 = getelementptr inbounds i8, i8* %10, i64 %270
  %272 = load i8, i8* %271, align 1
  %273 = zext i8 %272 to i16
  %274 = insertelement <8 x i16> undef, i16 %273, i32 0
  %275 = extractelement <8 x i16> %261, i32 1
  %276 = lshr i16 %275, 2
  %277 = zext i16 %276 to i64
  %278 = getelementptr inbounds i8, i8* %10, i64 %277
  %279 = load i8, i8* %278, align 1
  %280 = zext i8 %279 to i16
  %281 = insertelement <8 x i16> %268, i16 %280, i32 1
  %282 = add nuw nsw i16 %276, 1
  %283 = zext i16 %282 to i64
  %284 = getelementptr inbounds i8, i8* %10, i64 %283
  %285 = load i8, i8* %284, align 1
  %286 = zext i8 %285 to i16
  %287 = insertelement <8 x i16> %274, i16 %286, i32 1
  %288 = extractelement <8 x i16> %261, i32 2
  %289 = lshr i16 %288, 2
  %290 = zext i16 %289 to i64
  %291 = getelementptr inbounds i8, i8* %10, i64 %290
  %292 = load i8, i8* %291, align 1
  %293 = zext i8 %292 to i16
  %294 = insertelement <8 x i16> %281, i16 %293, i32 2
  %295 = add nuw nsw i16 %289, 1
  %296 = zext i16 %295 to i64
  %297 = getelementptr inbounds i8, i8* %10, i64 %296
  %298 = load i8, i8* %297, align 1
  %299 = zext i8 %298 to i16
  %300 = insertelement <8 x i16> %287, i16 %299, i32 2
  %301 = extractelement <8 x i16> %261, i32 3
  %302 = lshr i16 %301, 2
  %303 = zext i16 %302 to i64
  %304 = getelementptr inbounds i8, i8* %10, i64 %303
  %305 = load i8, i8* %304, align 1
  %306 = zext i8 %305 to i16
  %307 = insertelement <8 x i16> %294, i16 %306, i32 3
  %308 = add nuw nsw i16 %302, 1
  %309 = zext i16 %308 to i64
  %310 = getelementptr inbounds i8, i8* %10, i64 %309
  %311 = load i8, i8* %310, align 1
  %312 = zext i8 %311 to i16
  %313 = insertelement <8 x i16> %300, i16 %312, i32 3
  %314 = extractelement <8 x i16> %261, i32 4
  %315 = lshr i16 %314, 2
  %316 = zext i16 %315 to i64
  %317 = getelementptr inbounds i8, i8* %10, i64 %316
  %318 = load i8, i8* %317, align 1
  %319 = zext i8 %318 to i16
  %320 = insertelement <8 x i16> %307, i16 %319, i32 4
  %321 = add nuw nsw i16 %315, 1
  %322 = zext i16 %321 to i64
  %323 = getelementptr inbounds i8, i8* %10, i64 %322
  %324 = load i8, i8* %323, align 1
  %325 = zext i8 %324 to i16
  %326 = insertelement <8 x i16> %313, i16 %325, i32 4
  %327 = extractelement <8 x i16> %261, i32 5
  %328 = lshr i16 %327, 2
  %329 = zext i16 %328 to i64
  %330 = getelementptr inbounds i8, i8* %10, i64 %329
  %331 = load i8, i8* %330, align 1
  %332 = zext i8 %331 to i16
  %333 = insertelement <8 x i16> %320, i16 %332, i32 5
  %334 = add nuw nsw i16 %328, 1
  %335 = zext i16 %334 to i64
  %336 = getelementptr inbounds i8, i8* %10, i64 %335
  %337 = load i8, i8* %336, align 1
  %338 = zext i8 %337 to i16
  %339 = insertelement <8 x i16> %326, i16 %338, i32 5
  %340 = extractelement <8 x i16> %261, i32 6
  %341 = lshr i16 %340, 2
  %342 = zext i16 %341 to i64
  %343 = getelementptr inbounds i8, i8* %10, i64 %342
  %344 = load i8, i8* %343, align 1
  %345 = zext i8 %344 to i16
  %346 = insertelement <8 x i16> %333, i16 %345, i32 6
  %347 = add nuw nsw i16 %341, 1
  %348 = zext i16 %347 to i64
  %349 = getelementptr inbounds i8, i8* %10, i64 %348
  %350 = load i8, i8* %349, align 1
  %351 = zext i8 %350 to i16
  %352 = insertelement <8 x i16> %339, i16 %351, i32 6
  %353 = load i16, i16* %65, align 2
  %354 = lshr i16 %353, 2
  %355 = zext i16 %354 to i64
  %356 = getelementptr inbounds i8, i8* %10, i64 %355
  %357 = load i8, i8* %356, align 1
  %358 = zext i8 %357 to i16
  %359 = insertelement <8 x i16> %346, i16 %358, i32 7
  %360 = add nuw nsw i16 %354, 1
  %361 = zext i16 %360 to i64
  %362 = getelementptr inbounds i8, i8* %10, i64 %361
  %363 = load i8, i8* %362, align 1
  %364 = zext i8 %363 to i16
  %365 = insertelement <8 x i16> %352, i16 %364, i32 7
  %366 = shl <8 x i16> %261, <i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13>
  %367 = and <8 x i16> %366, <i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576, i16 24576>
  %368 = sub <8 x i16> %365, %359
  %369 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %368, <8 x i16> %367) #5
  %370 = add <8 x i16> %369, %359
  %371 = bitcast i16* %253 to <8 x i16>*
  %372 = load <8 x i16>, <8 x i16>* %371, align 1
  %373 = bitcast i16* %260 to <8 x i16>*
  %374 = load <8 x i16>, <8 x i16>* %373, align 1
  %375 = tail call <8 x i16> @llvm.x86.sse2.psll.w(<8 x i16> %370, <8 x i16> %54) #5
  %376 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %374, <8 x i16> %375) #5
  %377 = add <8 x i16> %376, %372
  %378 = getelementptr inbounds i16, i16* %68, i64 %252
  %379 = icmp slt <8 x i16> %36, %377
  %380 = select <8 x i1> %379, <8 x i16> %36, <8 x i16> %377
  %381 = icmp slt <8 x i16> %380, %33
  %382 = select <8 x i1> %381, <8 x i16> %33, <8 x i16> %380
  %383 = bitcast i16* %378 to <8 x i16>*
  store <8 x i16> %382, <8 x i16>* %383, align 1
  br label %384

384:                                              ; preds = %250, %225
  %385 = getelementptr inbounds i16, i16* %70, i64 %60
  %386 = getelementptr inbounds i16, i16* %69, i64 %24
  %387 = getelementptr inbounds i16, i16* %68, i64 %26
  %388 = add nuw nsw i64 %67, 1
  %389 = icmp slt i64 %388, %62
  br i1 %389, label %66, label %390

390:                                              ; preds = %384
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %37) #5
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
