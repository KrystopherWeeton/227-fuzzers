; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_scale/generic/yv12extend.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_scale/generic/yv12extend.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_yv12_extend_frame_borders_c(%struct.yv12_buffer_config* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 19
  %3 = load i32, i32* %2, align 8
  %4 = sdiv i32 %3, 2
  %5 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 13
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = sub i32 %3, %12
  %16 = add i32 %15, %14
  %17 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = add nsw i32 %18, %3
  %20 = add i32 %19, %3
  %21 = sext i32 %10 to i64
  %22 = getelementptr inbounds i8, i8* %6, i64 %21
  %23 = sext i32 %3 to i64
  %24 = sub nsw i64 0, %23
  %25 = getelementptr inbounds i8, i8* %6, i64 %24
  %26 = icmp sgt i32 %12, 0
  br i1 %26, label %27, label %89

27:                                               ; preds = %1
  %28 = sub nsw i32 %19, %10
  %29 = getelementptr inbounds i8, i8* %22, i64 -1
  %30 = sext i32 %28 to i64
  %31 = sext i32 %8 to i64
  %32 = add i32 %12, -1
  %33 = and i32 %12, 3
  %34 = icmp ult i32 %32, 3
  br i1 %34, label %69, label %35

35:                                               ; preds = %27
  %36 = sub i32 %12, %33
  br label %37

37:                                               ; preds = %37, %35
  %38 = phi i8* [ %22, %35 ], [ %66, %37 ]
  %39 = phi i8* [ %25, %35 ], [ %65, %37 ]
  %40 = phi i8* [ %29, %35 ], [ %64, %37 ]
  %41 = phi i8* [ %6, %35 ], [ %63, %37 ]
  %42 = phi i32 [ %36, %35 ], [ %67, %37 ]
  %43 = load i8, i8* %41, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %43, i64 %23, i1 false) #2
  %44 = load i8, i8* %40, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 %44, i64 %30, i1 false) #2
  %45 = getelementptr inbounds i8, i8* %41, i64 %31
  %46 = getelementptr inbounds i8, i8* %40, i64 %31
  %47 = getelementptr inbounds i8, i8* %39, i64 %31
  %48 = getelementptr inbounds i8, i8* %38, i64 %31
  %49 = load i8, i8* %45, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 %49, i64 %23, i1 false) #2
  %50 = load i8, i8* %46, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %50, i64 %30, i1 false) #2
  %51 = getelementptr inbounds i8, i8* %45, i64 %31
  %52 = getelementptr inbounds i8, i8* %46, i64 %31
  %53 = getelementptr inbounds i8, i8* %47, i64 %31
  %54 = getelementptr inbounds i8, i8* %48, i64 %31
  %55 = load i8, i8* %51, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %53, i8 %55, i64 %23, i1 false) #2
  %56 = load i8, i8* %52, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 %56, i64 %30, i1 false) #2
  %57 = getelementptr inbounds i8, i8* %51, i64 %31
  %58 = getelementptr inbounds i8, i8* %52, i64 %31
  %59 = getelementptr inbounds i8, i8* %53, i64 %31
  %60 = getelementptr inbounds i8, i8* %54, i64 %31
  %61 = load i8, i8* %57, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %59, i8 %61, i64 %23, i1 false) #2
  %62 = load i8, i8* %58, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %60, i8 %62, i64 %30, i1 false) #2
  %63 = getelementptr inbounds i8, i8* %57, i64 %31
  %64 = getelementptr inbounds i8, i8* %58, i64 %31
  %65 = getelementptr inbounds i8, i8* %59, i64 %31
  %66 = getelementptr inbounds i8, i8* %60, i64 %31
  %67 = add i32 %42, -4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %37

69:                                               ; preds = %37, %27
  %70 = phi i8* [ %22, %27 ], [ %66, %37 ]
  %71 = phi i8* [ %25, %27 ], [ %65, %37 ]
  %72 = phi i8* [ %29, %27 ], [ %64, %37 ]
  %73 = phi i8* [ %6, %27 ], [ %63, %37 ]
  %74 = icmp eq i32 %33, 0
  br i1 %74, label %89, label %75

75:                                               ; preds = %69, %75
  %76 = phi i8* [ %86, %75 ], [ %70, %69 ]
  %77 = phi i8* [ %85, %75 ], [ %71, %69 ]
  %78 = phi i8* [ %84, %75 ], [ %72, %69 ]
  %79 = phi i8* [ %83, %75 ], [ %73, %69 ]
  %80 = phi i32 [ %87, %75 ], [ %33, %69 ]
  %81 = load i8, i8* %79, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %77, i8 %81, i64 %23, i1 false) #2
  %82 = load i8, i8* %78, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %76, i8 %82, i64 %30, i1 false) #2
  %83 = getelementptr inbounds i8, i8* %79, i64 %31
  %84 = getelementptr inbounds i8, i8* %78, i64 %31
  %85 = getelementptr inbounds i8, i8* %77, i64 %31
  %86 = getelementptr inbounds i8, i8* %76, i64 %31
  %87 = add i32 %80, -1
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %75, !llvm.loop !2

89:                                               ; preds = %69, %75, %1
  %90 = add nsw i32 %12, -1
  %91 = mul nsw i32 %90, %8
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %6, i64 %92
  %94 = getelementptr inbounds i8, i8* %93, i64 %24
  %95 = mul nsw i32 %12, %8
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i8, i8* %6, i64 %96
  %98 = getelementptr inbounds i8, i8* %97, i64 %24
  %99 = icmp sgt i32 %3, 0
  br i1 %99, label %100, label %122

100:                                              ; preds = %89
  %101 = mul i32 %3, %8
  %102 = sub i32 0, %101
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i8, i8* %6, i64 %103
  %105 = getelementptr inbounds i8, i8* %104, i64 %24
  %106 = sext i32 %20 to i64
  %107 = sext i32 %8 to i64
  %108 = add i32 %3, -1
  %109 = and i32 %3, 3
  %110 = icmp ult i32 %108, 3
  br i1 %110, label %113, label %111

111:                                              ; preds = %100
  %112 = sub i32 %3, %109
  br label %134

113:                                              ; preds = %134, %100
  %114 = phi i8* [ %105, %100 ], [ %140, %134 ]
  %115 = icmp eq i32 %109, 0
  br i1 %115, label %122, label %116

116:                                              ; preds = %113, %116
  %117 = phi i8* [ %119, %116 ], [ %114, %113 ]
  %118 = phi i32 [ %120, %116 ], [ %109, %113 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %117, i8* align 1 %25, i64 %106, i1 false) #2
  %119 = getelementptr inbounds i8, i8* %117, i64 %107
  %120 = add i32 %118, -1
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %116, !llvm.loop !4

122:                                              ; preds = %113, %116, %89
  %123 = icmp sgt i32 %16, 0
  br i1 %123, label %124, label %161

124:                                              ; preds = %122
  %125 = sext i32 %20 to i64
  %126 = sext i32 %8 to i64
  %127 = add i32 %3, %14
  %128 = xor i32 %12, -1
  %129 = add i32 %127, %128
  %130 = and i32 %16, 3
  %131 = icmp ult i32 %129, 3
  br i1 %131, label %152, label %132

132:                                              ; preds = %124
  %133 = sub i32 %16, %130
  br label %143

134:                                              ; preds = %134, %111
  %135 = phi i8* [ %105, %111 ], [ %140, %134 ]
  %136 = phi i32 [ %112, %111 ], [ %141, %134 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %135, i8* align 1 %25, i64 %106, i1 false) #2
  %137 = getelementptr inbounds i8, i8* %135, i64 %107
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %137, i8* align 1 %25, i64 %106, i1 false) #2
  %138 = getelementptr inbounds i8, i8* %137, i64 %107
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %138, i8* align 1 %25, i64 %106, i1 false) #2
  %139 = getelementptr inbounds i8, i8* %138, i64 %107
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %139, i8* align 1 %25, i64 %106, i1 false) #2
  %140 = getelementptr inbounds i8, i8* %139, i64 %107
  %141 = add i32 %136, -4
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %113, label %134

143:                                              ; preds = %143, %132
  %144 = phi i8* [ %98, %132 ], [ %149, %143 ]
  %145 = phi i32 [ %133, %132 ], [ %150, %143 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %144, i8* align 1 %94, i64 %125, i1 false) #2
  %146 = getelementptr inbounds i8, i8* %144, i64 %126
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %146, i8* align 1 %94, i64 %125, i1 false) #2
  %147 = getelementptr inbounds i8, i8* %146, i64 %126
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %147, i8* align 1 %94, i64 %125, i1 false) #2
  %148 = getelementptr inbounds i8, i8* %147, i64 %126
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %148, i8* align 1 %94, i64 %125, i1 false) #2
  %149 = getelementptr inbounds i8, i8* %148, i64 %126
  %150 = add i32 %145, -4
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %143

152:                                              ; preds = %143, %124
  %153 = phi i8* [ %98, %124 ], [ %149, %143 ]
  %154 = icmp eq i32 %130, 0
  br i1 %154, label %161, label %155

155:                                              ; preds = %152, %155
  %156 = phi i8* [ %158, %155 ], [ %153, %152 ]
  %157 = phi i32 [ %159, %155 ], [ %130, %152 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %156, i8* align 1 %94, i64 %125, i1 false) #2
  %158 = getelementptr inbounds i8, i8* %156, i64 %126
  %159 = add i32 %157, -1
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %155, !llvm.loop !5

161:                                              ; preds = %152, %155, %122
  %162 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 14
  %163 = load i8*, i8** %162, align 8
  %164 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  %165 = load i32, i32* %164, align 4
  %166 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 7
  %167 = load i32, i32* %166, align 4
  %168 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 8
  %169 = load i32, i32* %168, align 8
  %170 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 6
  %171 = load i32, i32* %170, align 8
  %172 = sub i32 %4, %169
  %173 = add i32 %172, %171
  %174 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5
  %175 = load i32, i32* %174, align 4
  %176 = add nsw i32 %175, %4
  %177 = add i32 %176, %4
  %178 = sext i32 %167 to i64
  %179 = getelementptr inbounds i8, i8* %163, i64 %178
  %180 = sext i32 %4 to i64
  %181 = sub nsw i64 0, %180
  %182 = getelementptr inbounds i8, i8* %163, i64 %181
  %183 = icmp sgt i32 %169, 0
  br i1 %183, label %184, label %246

184:                                              ; preds = %161
  %185 = sub nsw i32 %176, %167
  %186 = getelementptr inbounds i8, i8* %179, i64 -1
  %187 = sext i32 %185 to i64
  %188 = sext i32 %165 to i64
  %189 = add i32 %169, -1
  %190 = and i32 %169, 3
  %191 = icmp ult i32 %189, 3
  br i1 %191, label %226, label %192

192:                                              ; preds = %184
  %193 = sub i32 %169, %190
  br label %194

194:                                              ; preds = %194, %192
  %195 = phi i8* [ %179, %192 ], [ %223, %194 ]
  %196 = phi i8* [ %182, %192 ], [ %222, %194 ]
  %197 = phi i8* [ %186, %192 ], [ %221, %194 ]
  %198 = phi i8* [ %163, %192 ], [ %220, %194 ]
  %199 = phi i32 [ %193, %192 ], [ %224, %194 ]
  %200 = load i8, i8* %198, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %196, i8 %200, i64 %180, i1 false) #2
  %201 = load i8, i8* %197, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %195, i8 %201, i64 %187, i1 false) #2
  %202 = getelementptr inbounds i8, i8* %198, i64 %188
  %203 = getelementptr inbounds i8, i8* %197, i64 %188
  %204 = getelementptr inbounds i8, i8* %196, i64 %188
  %205 = getelementptr inbounds i8, i8* %195, i64 %188
  %206 = load i8, i8* %202, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %204, i8 %206, i64 %180, i1 false) #2
  %207 = load i8, i8* %203, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %205, i8 %207, i64 %187, i1 false) #2
  %208 = getelementptr inbounds i8, i8* %202, i64 %188
  %209 = getelementptr inbounds i8, i8* %203, i64 %188
  %210 = getelementptr inbounds i8, i8* %204, i64 %188
  %211 = getelementptr inbounds i8, i8* %205, i64 %188
  %212 = load i8, i8* %208, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %210, i8 %212, i64 %180, i1 false) #2
  %213 = load i8, i8* %209, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %211, i8 %213, i64 %187, i1 false) #2
  %214 = getelementptr inbounds i8, i8* %208, i64 %188
  %215 = getelementptr inbounds i8, i8* %209, i64 %188
  %216 = getelementptr inbounds i8, i8* %210, i64 %188
  %217 = getelementptr inbounds i8, i8* %211, i64 %188
  %218 = load i8, i8* %214, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %216, i8 %218, i64 %180, i1 false) #2
  %219 = load i8, i8* %215, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %217, i8 %219, i64 %187, i1 false) #2
  %220 = getelementptr inbounds i8, i8* %214, i64 %188
  %221 = getelementptr inbounds i8, i8* %215, i64 %188
  %222 = getelementptr inbounds i8, i8* %216, i64 %188
  %223 = getelementptr inbounds i8, i8* %217, i64 %188
  %224 = add i32 %199, -4
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %226, label %194

226:                                              ; preds = %194, %184
  %227 = phi i8* [ %179, %184 ], [ %223, %194 ]
  %228 = phi i8* [ %182, %184 ], [ %222, %194 ]
  %229 = phi i8* [ %186, %184 ], [ %221, %194 ]
  %230 = phi i8* [ %163, %184 ], [ %220, %194 ]
  %231 = icmp eq i32 %190, 0
  br i1 %231, label %246, label %232

232:                                              ; preds = %226, %232
  %233 = phi i8* [ %243, %232 ], [ %227, %226 ]
  %234 = phi i8* [ %242, %232 ], [ %228, %226 ]
  %235 = phi i8* [ %241, %232 ], [ %229, %226 ]
  %236 = phi i8* [ %240, %232 ], [ %230, %226 ]
  %237 = phi i32 [ %244, %232 ], [ %190, %226 ]
  %238 = load i8, i8* %236, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %234, i8 %238, i64 %180, i1 false) #2
  %239 = load i8, i8* %235, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %233, i8 %239, i64 %187, i1 false) #2
  %240 = getelementptr inbounds i8, i8* %236, i64 %188
  %241 = getelementptr inbounds i8, i8* %235, i64 %188
  %242 = getelementptr inbounds i8, i8* %234, i64 %188
  %243 = getelementptr inbounds i8, i8* %233, i64 %188
  %244 = add i32 %237, -1
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %246, label %232, !llvm.loop !6

246:                                              ; preds = %226, %232, %161
  %247 = add nsw i32 %169, -1
  %248 = mul nsw i32 %247, %165
  %249 = sext i32 %248 to i64
  %250 = getelementptr inbounds i8, i8* %163, i64 %249
  %251 = getelementptr inbounds i8, i8* %250, i64 %181
  %252 = mul nsw i32 %169, %165
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds i8, i8* %163, i64 %253
  %255 = getelementptr inbounds i8, i8* %254, i64 %181
  %256 = icmp sgt i32 %3, 1
  br i1 %256, label %257, label %279

257:                                              ; preds = %246
  %258 = mul i32 %4, %165
  %259 = sub i32 0, %258
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds i8, i8* %163, i64 %260
  %262 = getelementptr inbounds i8, i8* %261, i64 %181
  %263 = sext i32 %177 to i64
  %264 = sext i32 %165 to i64
  %265 = add nsw i32 %4, -1
  %266 = and i32 %4, 3
  %267 = icmp ult i32 %265, 3
  br i1 %267, label %270, label %268

268:                                              ; preds = %257
  %269 = sub nsw i32 %4, %266
  br label %291

270:                                              ; preds = %291, %257
  %271 = phi i8* [ %262, %257 ], [ %297, %291 ]
  %272 = icmp eq i32 %266, 0
  br i1 %272, label %279, label %273

273:                                              ; preds = %270, %273
  %274 = phi i8* [ %276, %273 ], [ %271, %270 ]
  %275 = phi i32 [ %277, %273 ], [ %266, %270 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %274, i8* align 1 %182, i64 %263, i1 false) #2
  %276 = getelementptr inbounds i8, i8* %274, i64 %264
  %277 = add i32 %275, -1
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %279, label %273, !llvm.loop !7

279:                                              ; preds = %270, %273, %246
  %280 = icmp sgt i32 %173, 0
  br i1 %280, label %281, label %318

281:                                              ; preds = %279
  %282 = sext i32 %177 to i64
  %283 = sext i32 %165 to i64
  %284 = add i32 %171, %4
  %285 = xor i32 %169, -1
  %286 = add i32 %284, %285
  %287 = and i32 %173, 3
  %288 = icmp ult i32 %286, 3
  br i1 %288, label %309, label %289

289:                                              ; preds = %281
  %290 = sub i32 %173, %287
  br label %300

291:                                              ; preds = %291, %268
  %292 = phi i8* [ %262, %268 ], [ %297, %291 ]
  %293 = phi i32 [ %269, %268 ], [ %298, %291 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %292, i8* align 1 %182, i64 %263, i1 false) #2
  %294 = getelementptr inbounds i8, i8* %292, i64 %264
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %294, i8* align 1 %182, i64 %263, i1 false) #2
  %295 = getelementptr inbounds i8, i8* %294, i64 %264
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %295, i8* align 1 %182, i64 %263, i1 false) #2
  %296 = getelementptr inbounds i8, i8* %295, i64 %264
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %296, i8* align 1 %182, i64 %263, i1 false) #2
  %297 = getelementptr inbounds i8, i8* %296, i64 %264
  %298 = add i32 %293, -4
  %299 = icmp eq i32 %298, 0
  br i1 %299, label %270, label %291

300:                                              ; preds = %300, %289
  %301 = phi i8* [ %255, %289 ], [ %306, %300 ]
  %302 = phi i32 [ %290, %289 ], [ %307, %300 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %301, i8* align 1 %251, i64 %282, i1 false) #2
  %303 = getelementptr inbounds i8, i8* %301, i64 %283
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %303, i8* align 1 %251, i64 %282, i1 false) #2
  %304 = getelementptr inbounds i8, i8* %303, i64 %283
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %304, i8* align 1 %251, i64 %282, i1 false) #2
  %305 = getelementptr inbounds i8, i8* %304, i64 %283
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %305, i8* align 1 %251, i64 %282, i1 false) #2
  %306 = getelementptr inbounds i8, i8* %305, i64 %283
  %307 = add i32 %302, -4
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %309, label %300

309:                                              ; preds = %300, %281
  %310 = phi i8* [ %255, %281 ], [ %306, %300 ]
  %311 = icmp eq i32 %287, 0
  br i1 %311, label %318, label %312

312:                                              ; preds = %309, %312
  %313 = phi i8* [ %315, %312 ], [ %310, %309 ]
  %314 = phi i32 [ %316, %312 ], [ %287, %309 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %313, i8* align 1 %251, i64 %282, i1 false) #2
  %315 = getelementptr inbounds i8, i8* %313, i64 %283
  %316 = add i32 %314, -1
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %318, label %312, !llvm.loop !8

318:                                              ; preds = %309, %312, %279
  %319 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 15
  %320 = load i8*, i8** %319, align 8
  %321 = load i32, i32* %164, align 4
  %322 = load i32, i32* %166, align 4
  %323 = load i32, i32* %168, align 8
  %324 = load i32, i32* %170, align 8
  %325 = sub i32 %4, %323
  %326 = add i32 %325, %324
  %327 = load i32, i32* %174, align 4
  %328 = add nsw i32 %327, %4
  %329 = add i32 %328, %4
  %330 = sext i32 %322 to i64
  %331 = getelementptr inbounds i8, i8* %320, i64 %330
  %332 = getelementptr inbounds i8, i8* %320, i64 %181
  %333 = icmp sgt i32 %323, 0
  br i1 %333, label %334, label %396

334:                                              ; preds = %318
  %335 = sub nsw i32 %328, %322
  %336 = getelementptr inbounds i8, i8* %331, i64 -1
  %337 = sext i32 %335 to i64
  %338 = sext i32 %321 to i64
  %339 = add i32 %323, -1
  %340 = and i32 %323, 3
  %341 = icmp ult i32 %339, 3
  br i1 %341, label %376, label %342

342:                                              ; preds = %334
  %343 = sub i32 %323, %340
  br label %344

344:                                              ; preds = %344, %342
  %345 = phi i8* [ %331, %342 ], [ %373, %344 ]
  %346 = phi i8* [ %332, %342 ], [ %372, %344 ]
  %347 = phi i8* [ %336, %342 ], [ %371, %344 ]
  %348 = phi i8* [ %320, %342 ], [ %370, %344 ]
  %349 = phi i32 [ %343, %342 ], [ %374, %344 ]
  %350 = load i8, i8* %348, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %346, i8 %350, i64 %180, i1 false) #2
  %351 = load i8, i8* %347, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %345, i8 %351, i64 %337, i1 false) #2
  %352 = getelementptr inbounds i8, i8* %348, i64 %338
  %353 = getelementptr inbounds i8, i8* %347, i64 %338
  %354 = getelementptr inbounds i8, i8* %346, i64 %338
  %355 = getelementptr inbounds i8, i8* %345, i64 %338
  %356 = load i8, i8* %352, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %354, i8 %356, i64 %180, i1 false) #2
  %357 = load i8, i8* %353, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %355, i8 %357, i64 %337, i1 false) #2
  %358 = getelementptr inbounds i8, i8* %352, i64 %338
  %359 = getelementptr inbounds i8, i8* %353, i64 %338
  %360 = getelementptr inbounds i8, i8* %354, i64 %338
  %361 = getelementptr inbounds i8, i8* %355, i64 %338
  %362 = load i8, i8* %358, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %360, i8 %362, i64 %180, i1 false) #2
  %363 = load i8, i8* %359, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %361, i8 %363, i64 %337, i1 false) #2
  %364 = getelementptr inbounds i8, i8* %358, i64 %338
  %365 = getelementptr inbounds i8, i8* %359, i64 %338
  %366 = getelementptr inbounds i8, i8* %360, i64 %338
  %367 = getelementptr inbounds i8, i8* %361, i64 %338
  %368 = load i8, i8* %364, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %366, i8 %368, i64 %180, i1 false) #2
  %369 = load i8, i8* %365, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %367, i8 %369, i64 %337, i1 false) #2
  %370 = getelementptr inbounds i8, i8* %364, i64 %338
  %371 = getelementptr inbounds i8, i8* %365, i64 %338
  %372 = getelementptr inbounds i8, i8* %366, i64 %338
  %373 = getelementptr inbounds i8, i8* %367, i64 %338
  %374 = add i32 %349, -4
  %375 = icmp eq i32 %374, 0
  br i1 %375, label %376, label %344

376:                                              ; preds = %344, %334
  %377 = phi i8* [ %331, %334 ], [ %373, %344 ]
  %378 = phi i8* [ %332, %334 ], [ %372, %344 ]
  %379 = phi i8* [ %336, %334 ], [ %371, %344 ]
  %380 = phi i8* [ %320, %334 ], [ %370, %344 ]
  %381 = icmp eq i32 %340, 0
  br i1 %381, label %396, label %382

382:                                              ; preds = %376, %382
  %383 = phi i8* [ %393, %382 ], [ %377, %376 ]
  %384 = phi i8* [ %392, %382 ], [ %378, %376 ]
  %385 = phi i8* [ %391, %382 ], [ %379, %376 ]
  %386 = phi i8* [ %390, %382 ], [ %380, %376 ]
  %387 = phi i32 [ %394, %382 ], [ %340, %376 ]
  %388 = load i8, i8* %386, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %384, i8 %388, i64 %180, i1 false) #2
  %389 = load i8, i8* %385, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %383, i8 %389, i64 %337, i1 false) #2
  %390 = getelementptr inbounds i8, i8* %386, i64 %338
  %391 = getelementptr inbounds i8, i8* %385, i64 %338
  %392 = getelementptr inbounds i8, i8* %384, i64 %338
  %393 = getelementptr inbounds i8, i8* %383, i64 %338
  %394 = add i32 %387, -1
  %395 = icmp eq i32 %394, 0
  br i1 %395, label %396, label %382, !llvm.loop !9

396:                                              ; preds = %376, %382, %318
  %397 = add nsw i32 %323, -1
  %398 = mul nsw i32 %397, %321
  %399 = sext i32 %398 to i64
  %400 = getelementptr inbounds i8, i8* %320, i64 %399
  %401 = getelementptr inbounds i8, i8* %400, i64 %181
  %402 = mul nsw i32 %323, %321
  %403 = sext i32 %402 to i64
  %404 = getelementptr inbounds i8, i8* %320, i64 %403
  %405 = getelementptr inbounds i8, i8* %404, i64 %181
  br i1 %256, label %406, label %428

406:                                              ; preds = %396
  %407 = mul i32 %4, %321
  %408 = sub i32 0, %407
  %409 = sext i32 %408 to i64
  %410 = getelementptr inbounds i8, i8* %320, i64 %409
  %411 = getelementptr inbounds i8, i8* %410, i64 %181
  %412 = sext i32 %329 to i64
  %413 = sext i32 %321 to i64
  %414 = add nsw i32 %4, -1
  %415 = and i32 %4, 3
  %416 = icmp ult i32 %414, 3
  br i1 %416, label %419, label %417

417:                                              ; preds = %406
  %418 = sub nsw i32 %4, %415
  br label %440

419:                                              ; preds = %440, %406
  %420 = phi i8* [ %411, %406 ], [ %446, %440 ]
  %421 = icmp eq i32 %415, 0
  br i1 %421, label %428, label %422

422:                                              ; preds = %419, %422
  %423 = phi i8* [ %425, %422 ], [ %420, %419 ]
  %424 = phi i32 [ %426, %422 ], [ %415, %419 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %423, i8* align 1 %332, i64 %412, i1 false) #2
  %425 = getelementptr inbounds i8, i8* %423, i64 %413
  %426 = add i32 %424, -1
  %427 = icmp eq i32 %426, 0
  br i1 %427, label %428, label %422, !llvm.loop !10

428:                                              ; preds = %419, %422, %396
  %429 = icmp sgt i32 %326, 0
  br i1 %429, label %430, label %467

430:                                              ; preds = %428
  %431 = sext i32 %329 to i64
  %432 = sext i32 %321 to i64
  %433 = add i32 %324, %4
  %434 = xor i32 %323, -1
  %435 = add i32 %433, %434
  %436 = and i32 %326, 3
  %437 = icmp ult i32 %435, 3
  br i1 %437, label %458, label %438

438:                                              ; preds = %430
  %439 = sub i32 %326, %436
  br label %449

440:                                              ; preds = %440, %417
  %441 = phi i8* [ %411, %417 ], [ %446, %440 ]
  %442 = phi i32 [ %418, %417 ], [ %447, %440 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %441, i8* align 1 %332, i64 %412, i1 false) #2
  %443 = getelementptr inbounds i8, i8* %441, i64 %413
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %443, i8* align 1 %332, i64 %412, i1 false) #2
  %444 = getelementptr inbounds i8, i8* %443, i64 %413
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %444, i8* align 1 %332, i64 %412, i1 false) #2
  %445 = getelementptr inbounds i8, i8* %444, i64 %413
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %445, i8* align 1 %332, i64 %412, i1 false) #2
  %446 = getelementptr inbounds i8, i8* %445, i64 %413
  %447 = add i32 %442, -4
  %448 = icmp eq i32 %447, 0
  br i1 %448, label %419, label %440

449:                                              ; preds = %449, %438
  %450 = phi i8* [ %405, %438 ], [ %455, %449 ]
  %451 = phi i32 [ %439, %438 ], [ %456, %449 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %450, i8* align 1 %401, i64 %431, i1 false) #2
  %452 = getelementptr inbounds i8, i8* %450, i64 %432
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %452, i8* align 1 %401, i64 %431, i1 false) #2
  %453 = getelementptr inbounds i8, i8* %452, i64 %432
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %453, i8* align 1 %401, i64 %431, i1 false) #2
  %454 = getelementptr inbounds i8, i8* %453, i64 %432
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %454, i8* align 1 %401, i64 %431, i1 false) #2
  %455 = getelementptr inbounds i8, i8* %454, i64 %432
  %456 = add i32 %451, -4
  %457 = icmp eq i32 %456, 0
  br i1 %457, label %458, label %449

458:                                              ; preds = %449, %430
  %459 = phi i8* [ %405, %430 ], [ %455, %449 ]
  %460 = icmp eq i32 %436, 0
  br i1 %460, label %467, label %461

461:                                              ; preds = %458, %461
  %462 = phi i8* [ %464, %461 ], [ %459, %458 ]
  %463 = phi i32 [ %465, %461 ], [ %436, %458 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %462, i8* align 1 %401, i64 %431, i1 false) #2
  %464 = getelementptr inbounds i8, i8* %462, i64 %432
  %465 = add i32 %463, -1
  %466 = icmp eq i32 %465, 0
  br i1 %466, label %467, label %461, !llvm.loop !11

467:                                              ; preds = %458, %461, %428
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_extend_frame_borders_c(%struct.yv12_buffer_config* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 19
  %3 = load i32, i32* %2, align 8
  tail call fastcc void @extend_frame(%struct.yv12_buffer_config* %0, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @extend_frame(%struct.yv12_buffer_config* nocapture readonly, i32) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 7
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 8
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp slt i32 %8, %10
  %12 = zext i1 %11 to i32
  %13 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 6
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %14, %16
  %18 = zext i1 %17 to i32
  %19 = ashr i32 %1, %18
  %20 = ashr i32 %1, %12
  %21 = sub i32 %14, %6
  %22 = add i32 %21, %19
  %23 = add nsw i32 %20, %8
  %24 = sub nsw i32 %23, %4
  %25 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 29
  %26 = load i32, i32* %25, align 8
  %27 = and i32 %26, 8
  %28 = icmp eq i32 %27, 0
  %29 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 13
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 2
  %34 = load i32, i32* %33, align 8
  %35 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 3
  %36 = load i32, i32* %35, align 4
  %37 = add nsw i32 %16, %1
  %38 = sub i32 %37, %36
  %39 = add nsw i32 %10, %1
  %40 = sub nsw i32 %39, %34
  %41 = add i32 %39, %1
  br i1 %28, label %891, label %42

42:                                               ; preds = %2
  %43 = ptrtoint i8* %30 to i64
  %44 = shl i64 %43, 1
  %45 = inttoptr i64 %44 to i16*
  %46 = sext i32 %34 to i64
  %47 = getelementptr inbounds i16, i16* %45, i64 %46
  %48 = sext i32 %1 to i64
  %49 = sub nsw i64 0, %48
  %50 = getelementptr inbounds i16, i16* %45, i64 %49
  %51 = icmp sgt i32 %36, 0
  br i1 %51, label %52, label %242

52:                                               ; preds = %42
  %53 = getelementptr inbounds i16, i16* %47, i64 -1
  %54 = icmp eq i32 %1, 0
  %55 = sext i32 %40 to i64
  %56 = icmp eq i32 %40, 0
  %57 = sext i32 %32 to i64
  %58 = add nsw i64 %48, -16
  %59 = lshr i64 %58, 4
  %60 = add nuw nsw i64 %59, 1
  %61 = add nsw i64 %55, -16
  %62 = lshr i64 %61, 4
  %63 = add nuw nsw i64 %62, 1
  %64 = icmp ult i32 %1, 16
  %65 = and i64 %48, -16
  %66 = and i64 %60, 7
  %67 = icmp ult i64 %58, 112
  %68 = sub nsw i64 %60, %66
  %69 = icmp eq i64 %66, 0
  %70 = icmp eq i64 %65, %48
  %71 = icmp ult i32 %40, 16
  %72 = and i64 %55, -16
  %73 = and i64 %63, 7
  %74 = icmp ult i64 %61, 112
  %75 = sub nsw i64 %63, %73
  %76 = icmp eq i64 %73, 0
  %77 = icmp eq i64 %72, %55
  br label %78

78:                                               ; preds = %235, %52
  %79 = phi i16* [ %47, %52 ], [ %239, %235 ]
  %80 = phi i16* [ %50, %52 ], [ %238, %235 ]
  %81 = phi i16* [ %53, %52 ], [ %237, %235 ]
  %82 = phi i16* [ %45, %52 ], [ %236, %235 ]
  %83 = phi i32 [ 0, %52 ], [ %240, %235 ]
  %84 = load i16, i16* %82, align 2
  br i1 %54, label %159, label %85

85:                                               ; preds = %78
  br i1 %64, label %150, label %86

86:                                               ; preds = %85
  %87 = getelementptr i16, i16* %80, i64 %65
  %88 = insertelement <8 x i16> undef, i16 %84, i32 0
  %89 = shufflevector <8 x i16> %88, <8 x i16> undef, <8 x i32> zeroinitializer
  %90 = insertelement <8 x i16> undef, i16 %84, i32 0
  %91 = shufflevector <8 x i16> %90, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %67, label %137, label %92

92:                                               ; preds = %86, %92
  %93 = phi i64 [ %134, %92 ], [ 0, %86 ]
  %94 = phi i64 [ %135, %92 ], [ %68, %86 ]
  %95 = getelementptr i16, i16* %80, i64 %93
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %96, align 2
  %97 = getelementptr i16, i16* %95, i64 8
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %98, align 2
  %99 = or i64 %93, 16
  %100 = getelementptr i16, i16* %80, i64 %99
  %101 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %101, align 2
  %102 = getelementptr i16, i16* %100, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %103, align 2
  %104 = or i64 %93, 32
  %105 = getelementptr i16, i16* %80, i64 %104
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %106, align 2
  %107 = getelementptr i16, i16* %105, i64 8
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %108, align 2
  %109 = or i64 %93, 48
  %110 = getelementptr i16, i16* %80, i64 %109
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %111, align 2
  %112 = getelementptr i16, i16* %110, i64 8
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %113, align 2
  %114 = or i64 %93, 64
  %115 = getelementptr i16, i16* %80, i64 %114
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %116, align 2
  %117 = getelementptr i16, i16* %115, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %118, align 2
  %119 = or i64 %93, 80
  %120 = getelementptr i16, i16* %80, i64 %119
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %121, align 2
  %122 = getelementptr i16, i16* %120, i64 8
  %123 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %123, align 2
  %124 = or i64 %93, 96
  %125 = getelementptr i16, i16* %80, i64 %124
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %126, align 2
  %127 = getelementptr i16, i16* %125, i64 8
  %128 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %128, align 2
  %129 = or i64 %93, 112
  %130 = getelementptr i16, i16* %80, i64 %129
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %131, align 2
  %132 = getelementptr i16, i16* %130, i64 8
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %133, align 2
  %134 = add i64 %93, 128
  %135 = add i64 %94, -8
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %92, !llvm.loop !12

137:                                              ; preds = %92, %86
  %138 = phi i64 [ 0, %86 ], [ %134, %92 ]
  br i1 %69, label %149, label %139

139:                                              ; preds = %137, %139
  %140 = phi i64 [ %146, %139 ], [ %138, %137 ]
  %141 = phi i64 [ %147, %139 ], [ %66, %137 ]
  %142 = getelementptr i16, i16* %80, i64 %140
  %143 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %143, align 2
  %144 = getelementptr i16, i16* %142, i64 8
  %145 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %145, align 2
  %146 = add i64 %140, 16
  %147 = add i64 %141, -1
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %149, label %139, !llvm.loop !14

149:                                              ; preds = %139, %137
  br i1 %70, label %159, label %150

150:                                              ; preds = %149, %85
  %151 = phi i16* [ %80, %85 ], [ %87, %149 ]
  %152 = phi i64 [ 0, %85 ], [ %65, %149 ]
  br label %153

153:                                              ; preds = %150, %153
  %154 = phi i16* [ %156, %153 ], [ %151, %150 ]
  %155 = phi i64 [ %157, %153 ], [ %152, %150 ]
  %156 = getelementptr inbounds i16, i16* %154, i64 1
  store i16 %84, i16* %154, align 2
  %157 = add nuw i64 %155, 1
  %158 = icmp eq i64 %157, %48
  br i1 %158, label %159, label %153, !llvm.loop !15

159:                                              ; preds = %153, %149, %78
  %160 = load i16, i16* %81, align 2
  br i1 %56, label %235, label %161

161:                                              ; preds = %159
  br i1 %71, label %226, label %162

162:                                              ; preds = %161
  %163 = getelementptr i16, i16* %79, i64 %72
  %164 = insertelement <8 x i16> undef, i16 %160, i32 0
  %165 = shufflevector <8 x i16> %164, <8 x i16> undef, <8 x i32> zeroinitializer
  %166 = insertelement <8 x i16> undef, i16 %160, i32 0
  %167 = shufflevector <8 x i16> %166, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %74, label %213, label %168

168:                                              ; preds = %162, %168
  %169 = phi i64 [ %210, %168 ], [ 0, %162 ]
  %170 = phi i64 [ %211, %168 ], [ %75, %162 ]
  %171 = getelementptr i16, i16* %79, i64 %169
  %172 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %172, align 2
  %173 = getelementptr i16, i16* %171, i64 8
  %174 = bitcast i16* %173 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %174, align 2
  %175 = or i64 %169, 16
  %176 = getelementptr i16, i16* %79, i64 %175
  %177 = bitcast i16* %176 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %177, align 2
  %178 = getelementptr i16, i16* %176, i64 8
  %179 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %179, align 2
  %180 = or i64 %169, 32
  %181 = getelementptr i16, i16* %79, i64 %180
  %182 = bitcast i16* %181 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %182, align 2
  %183 = getelementptr i16, i16* %181, i64 8
  %184 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %184, align 2
  %185 = or i64 %169, 48
  %186 = getelementptr i16, i16* %79, i64 %185
  %187 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %187, align 2
  %188 = getelementptr i16, i16* %186, i64 8
  %189 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %189, align 2
  %190 = or i64 %169, 64
  %191 = getelementptr i16, i16* %79, i64 %190
  %192 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %192, align 2
  %193 = getelementptr i16, i16* %191, i64 8
  %194 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %194, align 2
  %195 = or i64 %169, 80
  %196 = getelementptr i16, i16* %79, i64 %195
  %197 = bitcast i16* %196 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %197, align 2
  %198 = getelementptr i16, i16* %196, i64 8
  %199 = bitcast i16* %198 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %199, align 2
  %200 = or i64 %169, 96
  %201 = getelementptr i16, i16* %79, i64 %200
  %202 = bitcast i16* %201 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %202, align 2
  %203 = getelementptr i16, i16* %201, i64 8
  %204 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %204, align 2
  %205 = or i64 %169, 112
  %206 = getelementptr i16, i16* %79, i64 %205
  %207 = bitcast i16* %206 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %207, align 2
  %208 = getelementptr i16, i16* %206, i64 8
  %209 = bitcast i16* %208 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %209, align 2
  %210 = add i64 %169, 128
  %211 = add i64 %170, -8
  %212 = icmp eq i64 %211, 0
  br i1 %212, label %213, label %168, !llvm.loop !17

213:                                              ; preds = %168, %162
  %214 = phi i64 [ 0, %162 ], [ %210, %168 ]
  br i1 %76, label %225, label %215

215:                                              ; preds = %213, %215
  %216 = phi i64 [ %222, %215 ], [ %214, %213 ]
  %217 = phi i64 [ %223, %215 ], [ %73, %213 ]
  %218 = getelementptr i16, i16* %79, i64 %216
  %219 = bitcast i16* %218 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %219, align 2
  %220 = getelementptr i16, i16* %218, i64 8
  %221 = bitcast i16* %220 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %221, align 2
  %222 = add i64 %216, 16
  %223 = add i64 %217, -1
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %225, label %215, !llvm.loop !18

225:                                              ; preds = %215, %213
  br i1 %77, label %235, label %226

226:                                              ; preds = %225, %161
  %227 = phi i16* [ %79, %161 ], [ %163, %225 ]
  %228 = phi i64 [ 0, %161 ], [ %72, %225 ]
  br label %229

229:                                              ; preds = %226, %229
  %230 = phi i16* [ %232, %229 ], [ %227, %226 ]
  %231 = phi i64 [ %233, %229 ], [ %228, %226 ]
  %232 = getelementptr inbounds i16, i16* %230, i64 1
  store i16 %160, i16* %230, align 2
  %233 = add nuw i64 %231, 1
  %234 = icmp eq i64 %233, %55
  br i1 %234, label %235, label %229, !llvm.loop !19

235:                                              ; preds = %229, %225, %159
  %236 = getelementptr inbounds i16, i16* %82, i64 %57
  %237 = getelementptr inbounds i16, i16* %81, i64 %57
  %238 = getelementptr inbounds i16, i16* %80, i64 %57
  %239 = getelementptr inbounds i16, i16* %79, i64 %57
  %240 = add nuw nsw i32 %83, 1
  %241 = icmp eq i32 %240, %36
  br i1 %241, label %242, label %78

242:                                              ; preds = %235, %42
  %243 = add nsw i32 %36, -1
  %244 = mul nsw i32 %243, %32
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds i16, i16* %45, i64 %245
  %247 = getelementptr inbounds i16, i16* %246, i64 %49
  %248 = mul nsw i32 %36, %32
  %249 = sext i32 %248 to i64
  %250 = getelementptr inbounds i16, i16* %45, i64 %249
  %251 = getelementptr inbounds i16, i16* %250, i64 %49
  %252 = icmp sgt i32 %1, 0
  br i1 %252, label %253, label %278

253:                                              ; preds = %242
  %254 = mul i32 %32, %1
  %255 = sub i32 0, %254
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds i16, i16* %45, i64 %256
  %258 = getelementptr inbounds i16, i16* %257, i64 %49
  %259 = bitcast i16* %50 to i8*
  %260 = sext i32 %41 to i64
  %261 = shl nsw i64 %260, 1
  %262 = sext i32 %32 to i64
  %263 = add i32 %1, -1
  %264 = and i32 %1, 3
  %265 = icmp ult i32 %263, 3
  br i1 %265, label %268, label %266

266:                                              ; preds = %253
  %267 = sub i32 %1, %264
  br label %292

268:                                              ; preds = %292, %253
  %269 = phi i16* [ %258, %253 ], [ %302, %292 ]
  %270 = icmp eq i32 %264, 0
  br i1 %270, label %278, label %271

271:                                              ; preds = %268, %271
  %272 = phi i16* [ %275, %271 ], [ %269, %268 ]
  %273 = phi i32 [ %276, %271 ], [ %264, %268 ]
  %274 = bitcast i16* %272 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %274, i8* align 2 %259, i64 %261, i1 false) #2
  %275 = getelementptr inbounds i16, i16* %272, i64 %262
  %276 = add i32 %273, -1
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %278, label %271, !llvm.loop !20

278:                                              ; preds = %268, %271, %242
  %279 = icmp sgt i32 %38, 0
  br i1 %279, label %280, label %328

280:                                              ; preds = %278
  %281 = bitcast i16* %247 to i8*
  %282 = sext i32 %41 to i64
  %283 = shl nsw i64 %282, 1
  %284 = sext i32 %32 to i64
  %285 = add i32 %16, %1
  %286 = xor i32 %36, -1
  %287 = add i32 %285, %286
  %288 = and i32 %38, 3
  %289 = icmp ult i32 %287, 3
  br i1 %289, label %318, label %290

290:                                              ; preds = %280
  %291 = sub i32 %38, %288
  br label %305

292:                                              ; preds = %292, %266
  %293 = phi i16* [ %258, %266 ], [ %302, %292 ]
  %294 = phi i32 [ %267, %266 ], [ %303, %292 ]
  %295 = bitcast i16* %293 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %295, i8* align 2 %259, i64 %261, i1 false) #2
  %296 = getelementptr inbounds i16, i16* %293, i64 %262
  %297 = bitcast i16* %296 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %297, i8* align 2 %259, i64 %261, i1 false) #2
  %298 = getelementptr inbounds i16, i16* %296, i64 %262
  %299 = bitcast i16* %298 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %299, i8* align 2 %259, i64 %261, i1 false) #2
  %300 = getelementptr inbounds i16, i16* %298, i64 %262
  %301 = bitcast i16* %300 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %301, i8* align 2 %259, i64 %261, i1 false) #2
  %302 = getelementptr inbounds i16, i16* %300, i64 %262
  %303 = add i32 %294, -4
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %268, label %292

305:                                              ; preds = %305, %290
  %306 = phi i16* [ %251, %290 ], [ %315, %305 ]
  %307 = phi i32 [ %291, %290 ], [ %316, %305 ]
  %308 = bitcast i16* %306 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %308, i8* align 2 %281, i64 %283, i1 false) #2
  %309 = getelementptr inbounds i16, i16* %306, i64 %284
  %310 = bitcast i16* %309 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %310, i8* align 2 %281, i64 %283, i1 false) #2
  %311 = getelementptr inbounds i16, i16* %309, i64 %284
  %312 = bitcast i16* %311 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %312, i8* align 2 %281, i64 %283, i1 false) #2
  %313 = getelementptr inbounds i16, i16* %311, i64 %284
  %314 = bitcast i16* %313 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %314, i8* align 2 %281, i64 %283, i1 false) #2
  %315 = getelementptr inbounds i16, i16* %313, i64 %284
  %316 = add i32 %307, -4
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %318, label %305

318:                                              ; preds = %305, %280
  %319 = phi i16* [ %251, %280 ], [ %315, %305 ]
  %320 = icmp eq i32 %288, 0
  br i1 %320, label %328, label %321

321:                                              ; preds = %318, %321
  %322 = phi i16* [ %325, %321 ], [ %319, %318 ]
  %323 = phi i32 [ %326, %321 ], [ %288, %318 ]
  %324 = bitcast i16* %322 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %324, i8* align 2 %281, i64 %283, i1 false) #2
  %325 = getelementptr inbounds i16, i16* %322, i64 %284
  %326 = add i32 %323, -1
  %327 = icmp eq i32 %326, 0
  br i1 %327, label %328, label %321, !llvm.loop !21

328:                                              ; preds = %318, %321, %278
  %329 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 14
  %330 = bitcast i8** %329 to i64*
  %331 = load i64, i64* %330, align 8
  %332 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  %333 = load i32, i32* %332, align 4
  %334 = add i32 %23, %20
  %335 = shl i64 %331, 1
  %336 = inttoptr i64 %335 to i16*
  %337 = sext i32 %4 to i64
  %338 = getelementptr inbounds i16, i16* %336, i64 %337
  %339 = sext i32 %20 to i64
  %340 = sub nsw i64 0, %339
  %341 = getelementptr inbounds i16, i16* %336, i64 %340
  %342 = icmp sgt i32 %6, 0
  br i1 %342, label %343, label %533

343:                                              ; preds = %328
  %344 = getelementptr inbounds i16, i16* %338, i64 -1
  %345 = icmp eq i32 %20, 0
  %346 = sext i32 %24 to i64
  %347 = icmp eq i32 %24, 0
  %348 = sext i32 %333 to i64
  %349 = add nsw i64 %339, -16
  %350 = lshr i64 %349, 4
  %351 = add nuw nsw i64 %350, 1
  %352 = add nsw i64 %346, -16
  %353 = lshr i64 %352, 4
  %354 = add nuw nsw i64 %353, 1
  %355 = icmp ult i32 %20, 16
  %356 = and i64 %339, -16
  %357 = and i64 %351, 7
  %358 = icmp ult i64 %349, 112
  %359 = sub nsw i64 %351, %357
  %360 = icmp eq i64 %357, 0
  %361 = icmp eq i64 %356, %339
  %362 = icmp ult i32 %24, 16
  %363 = and i64 %346, -16
  %364 = and i64 %354, 7
  %365 = icmp ult i64 %352, 112
  %366 = sub nsw i64 %354, %364
  %367 = icmp eq i64 %364, 0
  %368 = icmp eq i64 %363, %346
  br label %369

369:                                              ; preds = %526, %343
  %370 = phi i16* [ %338, %343 ], [ %530, %526 ]
  %371 = phi i16* [ %341, %343 ], [ %529, %526 ]
  %372 = phi i16* [ %344, %343 ], [ %528, %526 ]
  %373 = phi i16* [ %336, %343 ], [ %527, %526 ]
  %374 = phi i32 [ 0, %343 ], [ %531, %526 ]
  %375 = load i16, i16* %373, align 2
  br i1 %345, label %450, label %376

376:                                              ; preds = %369
  br i1 %355, label %441, label %377

377:                                              ; preds = %376
  %378 = getelementptr i16, i16* %371, i64 %356
  %379 = insertelement <8 x i16> undef, i16 %375, i32 0
  %380 = shufflevector <8 x i16> %379, <8 x i16> undef, <8 x i32> zeroinitializer
  %381 = insertelement <8 x i16> undef, i16 %375, i32 0
  %382 = shufflevector <8 x i16> %381, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %358, label %428, label %383

383:                                              ; preds = %377, %383
  %384 = phi i64 [ %425, %383 ], [ 0, %377 ]
  %385 = phi i64 [ %426, %383 ], [ %359, %377 ]
  %386 = getelementptr i16, i16* %371, i64 %384
  %387 = bitcast i16* %386 to <8 x i16>*
  store <8 x i16> %380, <8 x i16>* %387, align 2
  %388 = getelementptr i16, i16* %386, i64 8
  %389 = bitcast i16* %388 to <8 x i16>*
  store <8 x i16> %382, <8 x i16>* %389, align 2
  %390 = or i64 %384, 16
  %391 = getelementptr i16, i16* %371, i64 %390
  %392 = bitcast i16* %391 to <8 x i16>*
  store <8 x i16> %380, <8 x i16>* %392, align 2
  %393 = getelementptr i16, i16* %391, i64 8
  %394 = bitcast i16* %393 to <8 x i16>*
  store <8 x i16> %382, <8 x i16>* %394, align 2
  %395 = or i64 %384, 32
  %396 = getelementptr i16, i16* %371, i64 %395
  %397 = bitcast i16* %396 to <8 x i16>*
  store <8 x i16> %380, <8 x i16>* %397, align 2
  %398 = getelementptr i16, i16* %396, i64 8
  %399 = bitcast i16* %398 to <8 x i16>*
  store <8 x i16> %382, <8 x i16>* %399, align 2
  %400 = or i64 %384, 48
  %401 = getelementptr i16, i16* %371, i64 %400
  %402 = bitcast i16* %401 to <8 x i16>*
  store <8 x i16> %380, <8 x i16>* %402, align 2
  %403 = getelementptr i16, i16* %401, i64 8
  %404 = bitcast i16* %403 to <8 x i16>*
  store <8 x i16> %382, <8 x i16>* %404, align 2
  %405 = or i64 %384, 64
  %406 = getelementptr i16, i16* %371, i64 %405
  %407 = bitcast i16* %406 to <8 x i16>*
  store <8 x i16> %380, <8 x i16>* %407, align 2
  %408 = getelementptr i16, i16* %406, i64 8
  %409 = bitcast i16* %408 to <8 x i16>*
  store <8 x i16> %382, <8 x i16>* %409, align 2
  %410 = or i64 %384, 80
  %411 = getelementptr i16, i16* %371, i64 %410
  %412 = bitcast i16* %411 to <8 x i16>*
  store <8 x i16> %380, <8 x i16>* %412, align 2
  %413 = getelementptr i16, i16* %411, i64 8
  %414 = bitcast i16* %413 to <8 x i16>*
  store <8 x i16> %382, <8 x i16>* %414, align 2
  %415 = or i64 %384, 96
  %416 = getelementptr i16, i16* %371, i64 %415
  %417 = bitcast i16* %416 to <8 x i16>*
  store <8 x i16> %380, <8 x i16>* %417, align 2
  %418 = getelementptr i16, i16* %416, i64 8
  %419 = bitcast i16* %418 to <8 x i16>*
  store <8 x i16> %382, <8 x i16>* %419, align 2
  %420 = or i64 %384, 112
  %421 = getelementptr i16, i16* %371, i64 %420
  %422 = bitcast i16* %421 to <8 x i16>*
  store <8 x i16> %380, <8 x i16>* %422, align 2
  %423 = getelementptr i16, i16* %421, i64 8
  %424 = bitcast i16* %423 to <8 x i16>*
  store <8 x i16> %382, <8 x i16>* %424, align 2
  %425 = add i64 %384, 128
  %426 = add i64 %385, -8
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %428, label %383, !llvm.loop !22

428:                                              ; preds = %383, %377
  %429 = phi i64 [ 0, %377 ], [ %425, %383 ]
  br i1 %360, label %440, label %430

430:                                              ; preds = %428, %430
  %431 = phi i64 [ %437, %430 ], [ %429, %428 ]
  %432 = phi i64 [ %438, %430 ], [ %357, %428 ]
  %433 = getelementptr i16, i16* %371, i64 %431
  %434 = bitcast i16* %433 to <8 x i16>*
  store <8 x i16> %380, <8 x i16>* %434, align 2
  %435 = getelementptr i16, i16* %433, i64 8
  %436 = bitcast i16* %435 to <8 x i16>*
  store <8 x i16> %382, <8 x i16>* %436, align 2
  %437 = add i64 %431, 16
  %438 = add i64 %432, -1
  %439 = icmp eq i64 %438, 0
  br i1 %439, label %440, label %430, !llvm.loop !23

440:                                              ; preds = %430, %428
  br i1 %361, label %450, label %441

441:                                              ; preds = %440, %376
  %442 = phi i16* [ %371, %376 ], [ %378, %440 ]
  %443 = phi i64 [ 0, %376 ], [ %356, %440 ]
  br label %444

444:                                              ; preds = %441, %444
  %445 = phi i16* [ %447, %444 ], [ %442, %441 ]
  %446 = phi i64 [ %448, %444 ], [ %443, %441 ]
  %447 = getelementptr inbounds i16, i16* %445, i64 1
  store i16 %375, i16* %445, align 2
  %448 = add nuw i64 %446, 1
  %449 = icmp eq i64 %448, %339
  br i1 %449, label %450, label %444, !llvm.loop !24

450:                                              ; preds = %444, %440, %369
  %451 = load i16, i16* %372, align 2
  br i1 %347, label %526, label %452

452:                                              ; preds = %450
  br i1 %362, label %517, label %453

453:                                              ; preds = %452
  %454 = getelementptr i16, i16* %370, i64 %363
  %455 = insertelement <8 x i16> undef, i16 %451, i32 0
  %456 = shufflevector <8 x i16> %455, <8 x i16> undef, <8 x i32> zeroinitializer
  %457 = insertelement <8 x i16> undef, i16 %451, i32 0
  %458 = shufflevector <8 x i16> %457, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %365, label %504, label %459

459:                                              ; preds = %453, %459
  %460 = phi i64 [ %501, %459 ], [ 0, %453 ]
  %461 = phi i64 [ %502, %459 ], [ %366, %453 ]
  %462 = getelementptr i16, i16* %370, i64 %460
  %463 = bitcast i16* %462 to <8 x i16>*
  store <8 x i16> %456, <8 x i16>* %463, align 2
  %464 = getelementptr i16, i16* %462, i64 8
  %465 = bitcast i16* %464 to <8 x i16>*
  store <8 x i16> %458, <8 x i16>* %465, align 2
  %466 = or i64 %460, 16
  %467 = getelementptr i16, i16* %370, i64 %466
  %468 = bitcast i16* %467 to <8 x i16>*
  store <8 x i16> %456, <8 x i16>* %468, align 2
  %469 = getelementptr i16, i16* %467, i64 8
  %470 = bitcast i16* %469 to <8 x i16>*
  store <8 x i16> %458, <8 x i16>* %470, align 2
  %471 = or i64 %460, 32
  %472 = getelementptr i16, i16* %370, i64 %471
  %473 = bitcast i16* %472 to <8 x i16>*
  store <8 x i16> %456, <8 x i16>* %473, align 2
  %474 = getelementptr i16, i16* %472, i64 8
  %475 = bitcast i16* %474 to <8 x i16>*
  store <8 x i16> %458, <8 x i16>* %475, align 2
  %476 = or i64 %460, 48
  %477 = getelementptr i16, i16* %370, i64 %476
  %478 = bitcast i16* %477 to <8 x i16>*
  store <8 x i16> %456, <8 x i16>* %478, align 2
  %479 = getelementptr i16, i16* %477, i64 8
  %480 = bitcast i16* %479 to <8 x i16>*
  store <8 x i16> %458, <8 x i16>* %480, align 2
  %481 = or i64 %460, 64
  %482 = getelementptr i16, i16* %370, i64 %481
  %483 = bitcast i16* %482 to <8 x i16>*
  store <8 x i16> %456, <8 x i16>* %483, align 2
  %484 = getelementptr i16, i16* %482, i64 8
  %485 = bitcast i16* %484 to <8 x i16>*
  store <8 x i16> %458, <8 x i16>* %485, align 2
  %486 = or i64 %460, 80
  %487 = getelementptr i16, i16* %370, i64 %486
  %488 = bitcast i16* %487 to <8 x i16>*
  store <8 x i16> %456, <8 x i16>* %488, align 2
  %489 = getelementptr i16, i16* %487, i64 8
  %490 = bitcast i16* %489 to <8 x i16>*
  store <8 x i16> %458, <8 x i16>* %490, align 2
  %491 = or i64 %460, 96
  %492 = getelementptr i16, i16* %370, i64 %491
  %493 = bitcast i16* %492 to <8 x i16>*
  store <8 x i16> %456, <8 x i16>* %493, align 2
  %494 = getelementptr i16, i16* %492, i64 8
  %495 = bitcast i16* %494 to <8 x i16>*
  store <8 x i16> %458, <8 x i16>* %495, align 2
  %496 = or i64 %460, 112
  %497 = getelementptr i16, i16* %370, i64 %496
  %498 = bitcast i16* %497 to <8 x i16>*
  store <8 x i16> %456, <8 x i16>* %498, align 2
  %499 = getelementptr i16, i16* %497, i64 8
  %500 = bitcast i16* %499 to <8 x i16>*
  store <8 x i16> %458, <8 x i16>* %500, align 2
  %501 = add i64 %460, 128
  %502 = add i64 %461, -8
  %503 = icmp eq i64 %502, 0
  br i1 %503, label %504, label %459, !llvm.loop !25

504:                                              ; preds = %459, %453
  %505 = phi i64 [ 0, %453 ], [ %501, %459 ]
  br i1 %367, label %516, label %506

506:                                              ; preds = %504, %506
  %507 = phi i64 [ %513, %506 ], [ %505, %504 ]
  %508 = phi i64 [ %514, %506 ], [ %364, %504 ]
  %509 = getelementptr i16, i16* %370, i64 %507
  %510 = bitcast i16* %509 to <8 x i16>*
  store <8 x i16> %456, <8 x i16>* %510, align 2
  %511 = getelementptr i16, i16* %509, i64 8
  %512 = bitcast i16* %511 to <8 x i16>*
  store <8 x i16> %458, <8 x i16>* %512, align 2
  %513 = add i64 %507, 16
  %514 = add i64 %508, -1
  %515 = icmp eq i64 %514, 0
  br i1 %515, label %516, label %506, !llvm.loop !26

516:                                              ; preds = %506, %504
  br i1 %368, label %526, label %517

517:                                              ; preds = %516, %452
  %518 = phi i16* [ %370, %452 ], [ %454, %516 ]
  %519 = phi i64 [ 0, %452 ], [ %363, %516 ]
  br label %520

520:                                              ; preds = %517, %520
  %521 = phi i16* [ %523, %520 ], [ %518, %517 ]
  %522 = phi i64 [ %524, %520 ], [ %519, %517 ]
  %523 = getelementptr inbounds i16, i16* %521, i64 1
  store i16 %451, i16* %521, align 2
  %524 = add nuw i64 %522, 1
  %525 = icmp eq i64 %524, %346
  br i1 %525, label %526, label %520, !llvm.loop !27

526:                                              ; preds = %520, %516, %450
  %527 = getelementptr inbounds i16, i16* %373, i64 %348
  %528 = getelementptr inbounds i16, i16* %372, i64 %348
  %529 = getelementptr inbounds i16, i16* %371, i64 %348
  %530 = getelementptr inbounds i16, i16* %370, i64 %348
  %531 = add nuw nsw i32 %374, 1
  %532 = icmp eq i32 %531, %6
  br i1 %532, label %533, label %369

533:                                              ; preds = %526, %328
  %534 = add nsw i32 %6, -1
  %535 = mul nsw i32 %333, %534
  %536 = sext i32 %535 to i64
  %537 = getelementptr inbounds i16, i16* %336, i64 %536
  %538 = getelementptr inbounds i16, i16* %537, i64 %340
  %539 = mul nsw i32 %333, %6
  %540 = sext i32 %539 to i64
  %541 = getelementptr inbounds i16, i16* %336, i64 %540
  %542 = getelementptr inbounds i16, i16* %541, i64 %340
  %543 = icmp sgt i32 %19, 0
  br i1 %543, label %544, label %569

544:                                              ; preds = %533
  %545 = mul i32 %19, %333
  %546 = sub i32 0, %545
  %547 = sext i32 %546 to i64
  %548 = getelementptr inbounds i16, i16* %336, i64 %547
  %549 = getelementptr inbounds i16, i16* %548, i64 %340
  %550 = bitcast i16* %341 to i8*
  %551 = sext i32 %334 to i64
  %552 = shl nsw i64 %551, 1
  %553 = sext i32 %333 to i64
  %554 = add i32 %19, -1
  %555 = and i32 %19, 3
  %556 = icmp ult i32 %554, 3
  br i1 %556, label %559, label %557

557:                                              ; preds = %544
  %558 = sub i32 %19, %555
  br label %583

559:                                              ; preds = %583, %544
  %560 = phi i16* [ %549, %544 ], [ %593, %583 ]
  %561 = icmp eq i32 %555, 0
  br i1 %561, label %569, label %562

562:                                              ; preds = %559, %562
  %563 = phi i16* [ %566, %562 ], [ %560, %559 ]
  %564 = phi i32 [ %567, %562 ], [ %555, %559 ]
  %565 = bitcast i16* %563 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %565, i8* align 2 %550, i64 %552, i1 false) #2
  %566 = getelementptr inbounds i16, i16* %563, i64 %553
  %567 = add i32 %564, -1
  %568 = icmp eq i32 %567, 0
  br i1 %568, label %569, label %562, !llvm.loop !28

569:                                              ; preds = %559, %562, %533
  %570 = icmp sgt i32 %22, 0
  br i1 %570, label %571, label %619

571:                                              ; preds = %569
  %572 = bitcast i16* %538 to i8*
  %573 = sext i32 %334 to i64
  %574 = shl nsw i64 %573, 1
  %575 = sext i32 %333 to i64
  %576 = add i32 %14, %19
  %577 = xor i32 %6, -1
  %578 = add i32 %576, %577
  %579 = and i32 %22, 3
  %580 = icmp ult i32 %578, 3
  br i1 %580, label %609, label %581

581:                                              ; preds = %571
  %582 = sub i32 %22, %579
  br label %596

583:                                              ; preds = %583, %557
  %584 = phi i16* [ %549, %557 ], [ %593, %583 ]
  %585 = phi i32 [ %558, %557 ], [ %594, %583 ]
  %586 = bitcast i16* %584 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %586, i8* align 2 %550, i64 %552, i1 false) #2
  %587 = getelementptr inbounds i16, i16* %584, i64 %553
  %588 = bitcast i16* %587 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %588, i8* align 2 %550, i64 %552, i1 false) #2
  %589 = getelementptr inbounds i16, i16* %587, i64 %553
  %590 = bitcast i16* %589 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %590, i8* align 2 %550, i64 %552, i1 false) #2
  %591 = getelementptr inbounds i16, i16* %589, i64 %553
  %592 = bitcast i16* %591 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %592, i8* align 2 %550, i64 %552, i1 false) #2
  %593 = getelementptr inbounds i16, i16* %591, i64 %553
  %594 = add i32 %585, -4
  %595 = icmp eq i32 %594, 0
  br i1 %595, label %559, label %583

596:                                              ; preds = %596, %581
  %597 = phi i16* [ %542, %581 ], [ %606, %596 ]
  %598 = phi i32 [ %582, %581 ], [ %607, %596 ]
  %599 = bitcast i16* %597 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %599, i8* align 2 %572, i64 %574, i1 false) #2
  %600 = getelementptr inbounds i16, i16* %597, i64 %575
  %601 = bitcast i16* %600 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %601, i8* align 2 %572, i64 %574, i1 false) #2
  %602 = getelementptr inbounds i16, i16* %600, i64 %575
  %603 = bitcast i16* %602 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %603, i8* align 2 %572, i64 %574, i1 false) #2
  %604 = getelementptr inbounds i16, i16* %602, i64 %575
  %605 = bitcast i16* %604 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %605, i8* align 2 %572, i64 %574, i1 false) #2
  %606 = getelementptr inbounds i16, i16* %604, i64 %575
  %607 = add i32 %598, -4
  %608 = icmp eq i32 %607, 0
  br i1 %608, label %609, label %596

609:                                              ; preds = %596, %571
  %610 = phi i16* [ %542, %571 ], [ %606, %596 ]
  %611 = icmp eq i32 %579, 0
  br i1 %611, label %619, label %612

612:                                              ; preds = %609, %612
  %613 = phi i16* [ %616, %612 ], [ %610, %609 ]
  %614 = phi i32 [ %617, %612 ], [ %579, %609 ]
  %615 = bitcast i16* %613 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %615, i8* align 2 %572, i64 %574, i1 false) #2
  %616 = getelementptr inbounds i16, i16* %613, i64 %575
  %617 = add i32 %614, -1
  %618 = icmp eq i32 %617, 0
  br i1 %618, label %619, label %612, !llvm.loop !29

619:                                              ; preds = %609, %612, %569
  %620 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 15
  %621 = bitcast i8** %620 to i64*
  %622 = load i64, i64* %621, align 8
  %623 = load i32, i32* %332, align 4
  %624 = shl i64 %622, 1
  %625 = inttoptr i64 %624 to i16*
  %626 = getelementptr inbounds i16, i16* %625, i64 %337
  %627 = getelementptr inbounds i16, i16* %625, i64 %340
  br i1 %342, label %628, label %818

628:                                              ; preds = %619
  %629 = getelementptr inbounds i16, i16* %626, i64 -1
  %630 = icmp eq i32 %20, 0
  %631 = sext i32 %24 to i64
  %632 = icmp eq i32 %24, 0
  %633 = sext i32 %623 to i64
  %634 = add nsw i64 %339, -16
  %635 = lshr i64 %634, 4
  %636 = add nuw nsw i64 %635, 1
  %637 = add nsw i64 %631, -16
  %638 = lshr i64 %637, 4
  %639 = add nuw nsw i64 %638, 1
  %640 = icmp ult i32 %20, 16
  %641 = and i64 %339, -16
  %642 = and i64 %636, 7
  %643 = icmp ult i64 %634, 112
  %644 = sub nsw i64 %636, %642
  %645 = icmp eq i64 %642, 0
  %646 = icmp eq i64 %641, %339
  %647 = icmp ult i32 %24, 16
  %648 = and i64 %631, -16
  %649 = and i64 %639, 7
  %650 = icmp ult i64 %637, 112
  %651 = sub nsw i64 %639, %649
  %652 = icmp eq i64 %649, 0
  %653 = icmp eq i64 %648, %631
  br label %654

654:                                              ; preds = %811, %628
  %655 = phi i16* [ %626, %628 ], [ %815, %811 ]
  %656 = phi i16* [ %627, %628 ], [ %814, %811 ]
  %657 = phi i16* [ %629, %628 ], [ %813, %811 ]
  %658 = phi i16* [ %625, %628 ], [ %812, %811 ]
  %659 = phi i32 [ 0, %628 ], [ %816, %811 ]
  %660 = load i16, i16* %658, align 2
  br i1 %630, label %735, label %661

661:                                              ; preds = %654
  br i1 %640, label %726, label %662

662:                                              ; preds = %661
  %663 = getelementptr i16, i16* %656, i64 %641
  %664 = insertelement <8 x i16> undef, i16 %660, i32 0
  %665 = shufflevector <8 x i16> %664, <8 x i16> undef, <8 x i32> zeroinitializer
  %666 = insertelement <8 x i16> undef, i16 %660, i32 0
  %667 = shufflevector <8 x i16> %666, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %643, label %713, label %668

668:                                              ; preds = %662, %668
  %669 = phi i64 [ %710, %668 ], [ 0, %662 ]
  %670 = phi i64 [ %711, %668 ], [ %644, %662 ]
  %671 = getelementptr i16, i16* %656, i64 %669
  %672 = bitcast i16* %671 to <8 x i16>*
  store <8 x i16> %665, <8 x i16>* %672, align 2
  %673 = getelementptr i16, i16* %671, i64 8
  %674 = bitcast i16* %673 to <8 x i16>*
  store <8 x i16> %667, <8 x i16>* %674, align 2
  %675 = or i64 %669, 16
  %676 = getelementptr i16, i16* %656, i64 %675
  %677 = bitcast i16* %676 to <8 x i16>*
  store <8 x i16> %665, <8 x i16>* %677, align 2
  %678 = getelementptr i16, i16* %676, i64 8
  %679 = bitcast i16* %678 to <8 x i16>*
  store <8 x i16> %667, <8 x i16>* %679, align 2
  %680 = or i64 %669, 32
  %681 = getelementptr i16, i16* %656, i64 %680
  %682 = bitcast i16* %681 to <8 x i16>*
  store <8 x i16> %665, <8 x i16>* %682, align 2
  %683 = getelementptr i16, i16* %681, i64 8
  %684 = bitcast i16* %683 to <8 x i16>*
  store <8 x i16> %667, <8 x i16>* %684, align 2
  %685 = or i64 %669, 48
  %686 = getelementptr i16, i16* %656, i64 %685
  %687 = bitcast i16* %686 to <8 x i16>*
  store <8 x i16> %665, <8 x i16>* %687, align 2
  %688 = getelementptr i16, i16* %686, i64 8
  %689 = bitcast i16* %688 to <8 x i16>*
  store <8 x i16> %667, <8 x i16>* %689, align 2
  %690 = or i64 %669, 64
  %691 = getelementptr i16, i16* %656, i64 %690
  %692 = bitcast i16* %691 to <8 x i16>*
  store <8 x i16> %665, <8 x i16>* %692, align 2
  %693 = getelementptr i16, i16* %691, i64 8
  %694 = bitcast i16* %693 to <8 x i16>*
  store <8 x i16> %667, <8 x i16>* %694, align 2
  %695 = or i64 %669, 80
  %696 = getelementptr i16, i16* %656, i64 %695
  %697 = bitcast i16* %696 to <8 x i16>*
  store <8 x i16> %665, <8 x i16>* %697, align 2
  %698 = getelementptr i16, i16* %696, i64 8
  %699 = bitcast i16* %698 to <8 x i16>*
  store <8 x i16> %667, <8 x i16>* %699, align 2
  %700 = or i64 %669, 96
  %701 = getelementptr i16, i16* %656, i64 %700
  %702 = bitcast i16* %701 to <8 x i16>*
  store <8 x i16> %665, <8 x i16>* %702, align 2
  %703 = getelementptr i16, i16* %701, i64 8
  %704 = bitcast i16* %703 to <8 x i16>*
  store <8 x i16> %667, <8 x i16>* %704, align 2
  %705 = or i64 %669, 112
  %706 = getelementptr i16, i16* %656, i64 %705
  %707 = bitcast i16* %706 to <8 x i16>*
  store <8 x i16> %665, <8 x i16>* %707, align 2
  %708 = getelementptr i16, i16* %706, i64 8
  %709 = bitcast i16* %708 to <8 x i16>*
  store <8 x i16> %667, <8 x i16>* %709, align 2
  %710 = add i64 %669, 128
  %711 = add i64 %670, -8
  %712 = icmp eq i64 %711, 0
  br i1 %712, label %713, label %668, !llvm.loop !30

713:                                              ; preds = %668, %662
  %714 = phi i64 [ 0, %662 ], [ %710, %668 ]
  br i1 %645, label %725, label %715

715:                                              ; preds = %713, %715
  %716 = phi i64 [ %722, %715 ], [ %714, %713 ]
  %717 = phi i64 [ %723, %715 ], [ %642, %713 ]
  %718 = getelementptr i16, i16* %656, i64 %716
  %719 = bitcast i16* %718 to <8 x i16>*
  store <8 x i16> %665, <8 x i16>* %719, align 2
  %720 = getelementptr i16, i16* %718, i64 8
  %721 = bitcast i16* %720 to <8 x i16>*
  store <8 x i16> %667, <8 x i16>* %721, align 2
  %722 = add i64 %716, 16
  %723 = add i64 %717, -1
  %724 = icmp eq i64 %723, 0
  br i1 %724, label %725, label %715, !llvm.loop !31

725:                                              ; preds = %715, %713
  br i1 %646, label %735, label %726

726:                                              ; preds = %725, %661
  %727 = phi i16* [ %656, %661 ], [ %663, %725 ]
  %728 = phi i64 [ 0, %661 ], [ %641, %725 ]
  br label %729

729:                                              ; preds = %726, %729
  %730 = phi i16* [ %732, %729 ], [ %727, %726 ]
  %731 = phi i64 [ %733, %729 ], [ %728, %726 ]
  %732 = getelementptr inbounds i16, i16* %730, i64 1
  store i16 %660, i16* %730, align 2
  %733 = add nuw i64 %731, 1
  %734 = icmp eq i64 %733, %339
  br i1 %734, label %735, label %729, !llvm.loop !32

735:                                              ; preds = %729, %725, %654
  %736 = load i16, i16* %657, align 2
  br i1 %632, label %811, label %737

737:                                              ; preds = %735
  br i1 %647, label %802, label %738

738:                                              ; preds = %737
  %739 = getelementptr i16, i16* %655, i64 %648
  %740 = insertelement <8 x i16> undef, i16 %736, i32 0
  %741 = shufflevector <8 x i16> %740, <8 x i16> undef, <8 x i32> zeroinitializer
  %742 = insertelement <8 x i16> undef, i16 %736, i32 0
  %743 = shufflevector <8 x i16> %742, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %650, label %789, label %744

744:                                              ; preds = %738, %744
  %745 = phi i64 [ %786, %744 ], [ 0, %738 ]
  %746 = phi i64 [ %787, %744 ], [ %651, %738 ]
  %747 = getelementptr i16, i16* %655, i64 %745
  %748 = bitcast i16* %747 to <8 x i16>*
  store <8 x i16> %741, <8 x i16>* %748, align 2
  %749 = getelementptr i16, i16* %747, i64 8
  %750 = bitcast i16* %749 to <8 x i16>*
  store <8 x i16> %743, <8 x i16>* %750, align 2
  %751 = or i64 %745, 16
  %752 = getelementptr i16, i16* %655, i64 %751
  %753 = bitcast i16* %752 to <8 x i16>*
  store <8 x i16> %741, <8 x i16>* %753, align 2
  %754 = getelementptr i16, i16* %752, i64 8
  %755 = bitcast i16* %754 to <8 x i16>*
  store <8 x i16> %743, <8 x i16>* %755, align 2
  %756 = or i64 %745, 32
  %757 = getelementptr i16, i16* %655, i64 %756
  %758 = bitcast i16* %757 to <8 x i16>*
  store <8 x i16> %741, <8 x i16>* %758, align 2
  %759 = getelementptr i16, i16* %757, i64 8
  %760 = bitcast i16* %759 to <8 x i16>*
  store <8 x i16> %743, <8 x i16>* %760, align 2
  %761 = or i64 %745, 48
  %762 = getelementptr i16, i16* %655, i64 %761
  %763 = bitcast i16* %762 to <8 x i16>*
  store <8 x i16> %741, <8 x i16>* %763, align 2
  %764 = getelementptr i16, i16* %762, i64 8
  %765 = bitcast i16* %764 to <8 x i16>*
  store <8 x i16> %743, <8 x i16>* %765, align 2
  %766 = or i64 %745, 64
  %767 = getelementptr i16, i16* %655, i64 %766
  %768 = bitcast i16* %767 to <8 x i16>*
  store <8 x i16> %741, <8 x i16>* %768, align 2
  %769 = getelementptr i16, i16* %767, i64 8
  %770 = bitcast i16* %769 to <8 x i16>*
  store <8 x i16> %743, <8 x i16>* %770, align 2
  %771 = or i64 %745, 80
  %772 = getelementptr i16, i16* %655, i64 %771
  %773 = bitcast i16* %772 to <8 x i16>*
  store <8 x i16> %741, <8 x i16>* %773, align 2
  %774 = getelementptr i16, i16* %772, i64 8
  %775 = bitcast i16* %774 to <8 x i16>*
  store <8 x i16> %743, <8 x i16>* %775, align 2
  %776 = or i64 %745, 96
  %777 = getelementptr i16, i16* %655, i64 %776
  %778 = bitcast i16* %777 to <8 x i16>*
  store <8 x i16> %741, <8 x i16>* %778, align 2
  %779 = getelementptr i16, i16* %777, i64 8
  %780 = bitcast i16* %779 to <8 x i16>*
  store <8 x i16> %743, <8 x i16>* %780, align 2
  %781 = or i64 %745, 112
  %782 = getelementptr i16, i16* %655, i64 %781
  %783 = bitcast i16* %782 to <8 x i16>*
  store <8 x i16> %741, <8 x i16>* %783, align 2
  %784 = getelementptr i16, i16* %782, i64 8
  %785 = bitcast i16* %784 to <8 x i16>*
  store <8 x i16> %743, <8 x i16>* %785, align 2
  %786 = add i64 %745, 128
  %787 = add i64 %746, -8
  %788 = icmp eq i64 %787, 0
  br i1 %788, label %789, label %744, !llvm.loop !33

789:                                              ; preds = %744, %738
  %790 = phi i64 [ 0, %738 ], [ %786, %744 ]
  br i1 %652, label %801, label %791

791:                                              ; preds = %789, %791
  %792 = phi i64 [ %798, %791 ], [ %790, %789 ]
  %793 = phi i64 [ %799, %791 ], [ %649, %789 ]
  %794 = getelementptr i16, i16* %655, i64 %792
  %795 = bitcast i16* %794 to <8 x i16>*
  store <8 x i16> %741, <8 x i16>* %795, align 2
  %796 = getelementptr i16, i16* %794, i64 8
  %797 = bitcast i16* %796 to <8 x i16>*
  store <8 x i16> %743, <8 x i16>* %797, align 2
  %798 = add i64 %792, 16
  %799 = add i64 %793, -1
  %800 = icmp eq i64 %799, 0
  br i1 %800, label %801, label %791, !llvm.loop !34

801:                                              ; preds = %791, %789
  br i1 %653, label %811, label %802

802:                                              ; preds = %801, %737
  %803 = phi i16* [ %655, %737 ], [ %739, %801 ]
  %804 = phi i64 [ 0, %737 ], [ %648, %801 ]
  br label %805

805:                                              ; preds = %802, %805
  %806 = phi i16* [ %808, %805 ], [ %803, %802 ]
  %807 = phi i64 [ %809, %805 ], [ %804, %802 ]
  %808 = getelementptr inbounds i16, i16* %806, i64 1
  store i16 %736, i16* %806, align 2
  %809 = add nuw i64 %807, 1
  %810 = icmp eq i64 %809, %631
  br i1 %810, label %811, label %805, !llvm.loop !35

811:                                              ; preds = %805, %801, %735
  %812 = getelementptr inbounds i16, i16* %658, i64 %633
  %813 = getelementptr inbounds i16, i16* %657, i64 %633
  %814 = getelementptr inbounds i16, i16* %656, i64 %633
  %815 = getelementptr inbounds i16, i16* %655, i64 %633
  %816 = add nuw nsw i32 %659, 1
  %817 = icmp eq i32 %816, %6
  br i1 %817, label %818, label %654

818:                                              ; preds = %811, %619
  %819 = mul nsw i32 %623, %534
  %820 = sext i32 %819 to i64
  %821 = getelementptr inbounds i16, i16* %625, i64 %820
  %822 = getelementptr inbounds i16, i16* %821, i64 %340
  %823 = mul nsw i32 %623, %6
  %824 = sext i32 %823 to i64
  %825 = getelementptr inbounds i16, i16* %625, i64 %824
  %826 = getelementptr inbounds i16, i16* %825, i64 %340
  br i1 %543, label %827, label %852

827:                                              ; preds = %818
  %828 = mul i32 %19, %623
  %829 = sub i32 0, %828
  %830 = sext i32 %829 to i64
  %831 = getelementptr inbounds i16, i16* %625, i64 %830
  %832 = getelementptr inbounds i16, i16* %831, i64 %340
  %833 = bitcast i16* %627 to i8*
  %834 = sext i32 %334 to i64
  %835 = shl nsw i64 %834, 1
  %836 = sext i32 %623 to i64
  %837 = add i32 %19, -1
  %838 = and i32 %19, 3
  %839 = icmp ult i32 %837, 3
  br i1 %839, label %842, label %840

840:                                              ; preds = %827
  %841 = sub i32 %19, %838
  br label %865

842:                                              ; preds = %865, %827
  %843 = phi i16* [ %832, %827 ], [ %875, %865 ]
  %844 = icmp eq i32 %838, 0
  br i1 %844, label %852, label %845

845:                                              ; preds = %842, %845
  %846 = phi i16* [ %849, %845 ], [ %843, %842 ]
  %847 = phi i32 [ %850, %845 ], [ %838, %842 ]
  %848 = bitcast i16* %846 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %848, i8* align 2 %833, i64 %835, i1 false) #2
  %849 = getelementptr inbounds i16, i16* %846, i64 %836
  %850 = add i32 %847, -1
  %851 = icmp eq i32 %850, 0
  br i1 %851, label %852, label %845, !llvm.loop !36

852:                                              ; preds = %842, %845, %818
  br i1 %570, label %853, label %1322

853:                                              ; preds = %852
  %854 = bitcast i16* %822 to i8*
  %855 = sext i32 %334 to i64
  %856 = shl nsw i64 %855, 1
  %857 = sext i32 %623 to i64
  %858 = add i32 %14, %19
  %859 = xor i32 %6, -1
  %860 = add i32 %858, %859
  %861 = and i32 %22, 3
  %862 = icmp ult i32 %860, 3
  br i1 %862, label %1312, label %863

863:                                              ; preds = %853
  %864 = sub i32 %22, %861
  br label %878

865:                                              ; preds = %865, %840
  %866 = phi i16* [ %832, %840 ], [ %875, %865 ]
  %867 = phi i32 [ %841, %840 ], [ %876, %865 ]
  %868 = bitcast i16* %866 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %868, i8* align 2 %833, i64 %835, i1 false) #2
  %869 = getelementptr inbounds i16, i16* %866, i64 %836
  %870 = bitcast i16* %869 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %870, i8* align 2 %833, i64 %835, i1 false) #2
  %871 = getelementptr inbounds i16, i16* %869, i64 %836
  %872 = bitcast i16* %871 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %872, i8* align 2 %833, i64 %835, i1 false) #2
  %873 = getelementptr inbounds i16, i16* %871, i64 %836
  %874 = bitcast i16* %873 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %874, i8* align 2 %833, i64 %835, i1 false) #2
  %875 = getelementptr inbounds i16, i16* %873, i64 %836
  %876 = add i32 %867, -4
  %877 = icmp eq i32 %876, 0
  br i1 %877, label %842, label %865

878:                                              ; preds = %878, %863
  %879 = phi i16* [ %826, %863 ], [ %888, %878 ]
  %880 = phi i32 [ %864, %863 ], [ %889, %878 ]
  %881 = bitcast i16* %879 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %881, i8* align 2 %854, i64 %856, i1 false) #2
  %882 = getelementptr inbounds i16, i16* %879, i64 %857
  %883 = bitcast i16* %882 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %883, i8* align 2 %854, i64 %856, i1 false) #2
  %884 = getelementptr inbounds i16, i16* %882, i64 %857
  %885 = bitcast i16* %884 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %885, i8* align 2 %854, i64 %856, i1 false) #2
  %886 = getelementptr inbounds i16, i16* %884, i64 %857
  %887 = bitcast i16* %886 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %887, i8* align 2 %854, i64 %856, i1 false) #2
  %888 = getelementptr inbounds i16, i16* %886, i64 %857
  %889 = add i32 %880, -4
  %890 = icmp eq i32 %889, 0
  br i1 %890, label %1312, label %878

891:                                              ; preds = %2
  %892 = sext i32 %34 to i64
  %893 = getelementptr inbounds i8, i8* %30, i64 %892
  %894 = sext i32 %1 to i64
  %895 = sub nsw i64 0, %894
  %896 = getelementptr inbounds i8, i8* %30, i64 %895
  %897 = icmp sgt i32 %36, 0
  br i1 %897, label %898, label %959

898:                                              ; preds = %891
  %899 = getelementptr inbounds i8, i8* %893, i64 -1
  %900 = sext i32 %40 to i64
  %901 = sext i32 %32 to i64
  %902 = add i32 %36, -1
  %903 = and i32 %36, 3
  %904 = icmp ult i32 %902, 3
  br i1 %904, label %939, label %905

905:                                              ; preds = %898
  %906 = sub i32 %36, %903
  br label %907

907:                                              ; preds = %907, %905
  %908 = phi i8* [ %893, %905 ], [ %936, %907 ]
  %909 = phi i8* [ %896, %905 ], [ %935, %907 ]
  %910 = phi i8* [ %899, %905 ], [ %934, %907 ]
  %911 = phi i8* [ %30, %905 ], [ %933, %907 ]
  %912 = phi i32 [ %906, %905 ], [ %937, %907 ]
  %913 = load i8, i8* %911, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %909, i8 %913, i64 %894, i1 false) #2
  %914 = load i8, i8* %910, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %908, i8 %914, i64 %900, i1 false) #2
  %915 = getelementptr inbounds i8, i8* %911, i64 %901
  %916 = getelementptr inbounds i8, i8* %910, i64 %901
  %917 = getelementptr inbounds i8, i8* %909, i64 %901
  %918 = getelementptr inbounds i8, i8* %908, i64 %901
  %919 = load i8, i8* %915, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %917, i8 %919, i64 %894, i1 false) #2
  %920 = load i8, i8* %916, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %918, i8 %920, i64 %900, i1 false) #2
  %921 = getelementptr inbounds i8, i8* %915, i64 %901
  %922 = getelementptr inbounds i8, i8* %916, i64 %901
  %923 = getelementptr inbounds i8, i8* %917, i64 %901
  %924 = getelementptr inbounds i8, i8* %918, i64 %901
  %925 = load i8, i8* %921, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %923, i8 %925, i64 %894, i1 false) #2
  %926 = load i8, i8* %922, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %924, i8 %926, i64 %900, i1 false) #2
  %927 = getelementptr inbounds i8, i8* %921, i64 %901
  %928 = getelementptr inbounds i8, i8* %922, i64 %901
  %929 = getelementptr inbounds i8, i8* %923, i64 %901
  %930 = getelementptr inbounds i8, i8* %924, i64 %901
  %931 = load i8, i8* %927, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %929, i8 %931, i64 %894, i1 false) #2
  %932 = load i8, i8* %928, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %930, i8 %932, i64 %900, i1 false) #2
  %933 = getelementptr inbounds i8, i8* %927, i64 %901
  %934 = getelementptr inbounds i8, i8* %928, i64 %901
  %935 = getelementptr inbounds i8, i8* %929, i64 %901
  %936 = getelementptr inbounds i8, i8* %930, i64 %901
  %937 = add i32 %912, -4
  %938 = icmp eq i32 %937, 0
  br i1 %938, label %939, label %907

939:                                              ; preds = %907, %898
  %940 = phi i8* [ %893, %898 ], [ %936, %907 ]
  %941 = phi i8* [ %896, %898 ], [ %935, %907 ]
  %942 = phi i8* [ %899, %898 ], [ %934, %907 ]
  %943 = phi i8* [ %30, %898 ], [ %933, %907 ]
  %944 = icmp eq i32 %903, 0
  br i1 %944, label %959, label %945

945:                                              ; preds = %939, %945
  %946 = phi i8* [ %956, %945 ], [ %940, %939 ]
  %947 = phi i8* [ %955, %945 ], [ %941, %939 ]
  %948 = phi i8* [ %954, %945 ], [ %942, %939 ]
  %949 = phi i8* [ %953, %945 ], [ %943, %939 ]
  %950 = phi i32 [ %957, %945 ], [ %903, %939 ]
  %951 = load i8, i8* %949, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %947, i8 %951, i64 %894, i1 false) #2
  %952 = load i8, i8* %948, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %946, i8 %952, i64 %900, i1 false) #2
  %953 = getelementptr inbounds i8, i8* %949, i64 %901
  %954 = getelementptr inbounds i8, i8* %948, i64 %901
  %955 = getelementptr inbounds i8, i8* %947, i64 %901
  %956 = getelementptr inbounds i8, i8* %946, i64 %901
  %957 = add i32 %950, -1
  %958 = icmp eq i32 %957, 0
  br i1 %958, label %959, label %945, !llvm.loop !37

959:                                              ; preds = %939, %945, %891
  %960 = add nsw i32 %36, -1
  %961 = mul nsw i32 %960, %32
  %962 = sext i32 %961 to i64
  %963 = getelementptr inbounds i8, i8* %30, i64 %962
  %964 = getelementptr inbounds i8, i8* %963, i64 %895
  %965 = mul nsw i32 %36, %32
  %966 = sext i32 %965 to i64
  %967 = getelementptr inbounds i8, i8* %30, i64 %966
  %968 = getelementptr inbounds i8, i8* %967, i64 %895
  %969 = icmp sgt i32 %1, 0
  br i1 %969, label %970, label %992

970:                                              ; preds = %959
  %971 = mul i32 %32, %1
  %972 = sub i32 0, %971
  %973 = sext i32 %972 to i64
  %974 = getelementptr inbounds i8, i8* %30, i64 %973
  %975 = getelementptr inbounds i8, i8* %974, i64 %895
  %976 = sext i32 %41 to i64
  %977 = sext i32 %32 to i64
  %978 = add i32 %1, -1
  %979 = and i32 %1, 3
  %980 = icmp ult i32 %978, 3
  br i1 %980, label %983, label %981

981:                                              ; preds = %970
  %982 = sub i32 %1, %979
  br label %1004

983:                                              ; preds = %1004, %970
  %984 = phi i8* [ %975, %970 ], [ %1010, %1004 ]
  %985 = icmp eq i32 %979, 0
  br i1 %985, label %992, label %986

986:                                              ; preds = %983, %986
  %987 = phi i8* [ %989, %986 ], [ %984, %983 ]
  %988 = phi i32 [ %990, %986 ], [ %979, %983 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %987, i8* align 1 %896, i64 %976, i1 false) #2
  %989 = getelementptr inbounds i8, i8* %987, i64 %977
  %990 = add i32 %988, -1
  %991 = icmp eq i32 %990, 0
  br i1 %991, label %992, label %986, !llvm.loop !38

992:                                              ; preds = %983, %986, %959
  %993 = icmp sgt i32 %38, 0
  br i1 %993, label %994, label %1031

994:                                              ; preds = %992
  %995 = sext i32 %41 to i64
  %996 = sext i32 %32 to i64
  %997 = add i32 %16, %1
  %998 = xor i32 %36, -1
  %999 = add i32 %997, %998
  %1000 = and i32 %38, 3
  %1001 = icmp ult i32 %999, 3
  br i1 %1001, label %1022, label %1002

1002:                                             ; preds = %994
  %1003 = sub i32 %38, %1000
  br label %1013

1004:                                             ; preds = %1004, %981
  %1005 = phi i8* [ %975, %981 ], [ %1010, %1004 ]
  %1006 = phi i32 [ %982, %981 ], [ %1011, %1004 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1005, i8* align 1 %896, i64 %976, i1 false) #2
  %1007 = getelementptr inbounds i8, i8* %1005, i64 %977
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1007, i8* align 1 %896, i64 %976, i1 false) #2
  %1008 = getelementptr inbounds i8, i8* %1007, i64 %977
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1008, i8* align 1 %896, i64 %976, i1 false) #2
  %1009 = getelementptr inbounds i8, i8* %1008, i64 %977
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1009, i8* align 1 %896, i64 %976, i1 false) #2
  %1010 = getelementptr inbounds i8, i8* %1009, i64 %977
  %1011 = add i32 %1006, -4
  %1012 = icmp eq i32 %1011, 0
  br i1 %1012, label %983, label %1004

1013:                                             ; preds = %1013, %1002
  %1014 = phi i8* [ %968, %1002 ], [ %1019, %1013 ]
  %1015 = phi i32 [ %1003, %1002 ], [ %1020, %1013 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1014, i8* align 1 %964, i64 %995, i1 false) #2
  %1016 = getelementptr inbounds i8, i8* %1014, i64 %996
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1016, i8* align 1 %964, i64 %995, i1 false) #2
  %1017 = getelementptr inbounds i8, i8* %1016, i64 %996
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1017, i8* align 1 %964, i64 %995, i1 false) #2
  %1018 = getelementptr inbounds i8, i8* %1017, i64 %996
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1018, i8* align 1 %964, i64 %995, i1 false) #2
  %1019 = getelementptr inbounds i8, i8* %1018, i64 %996
  %1020 = add i32 %1015, -4
  %1021 = icmp eq i32 %1020, 0
  br i1 %1021, label %1022, label %1013

1022:                                             ; preds = %1013, %994
  %1023 = phi i8* [ %968, %994 ], [ %1019, %1013 ]
  %1024 = icmp eq i32 %1000, 0
  br i1 %1024, label %1031, label %1025

1025:                                             ; preds = %1022, %1025
  %1026 = phi i8* [ %1028, %1025 ], [ %1023, %1022 ]
  %1027 = phi i32 [ %1029, %1025 ], [ %1000, %1022 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1026, i8* align 1 %964, i64 %995, i1 false) #2
  %1028 = getelementptr inbounds i8, i8* %1026, i64 %996
  %1029 = add i32 %1027, -1
  %1030 = icmp eq i32 %1029, 0
  br i1 %1030, label %1031, label %1025, !llvm.loop !39

1031:                                             ; preds = %1022, %1025, %992
  %1032 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 14
  %1033 = load i8*, i8** %1032, align 8
  %1034 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  %1035 = load i32, i32* %1034, align 4
  %1036 = add i32 %23, %20
  %1037 = sext i32 %4 to i64
  %1038 = getelementptr inbounds i8, i8* %1033, i64 %1037
  %1039 = sext i32 %20 to i64
  %1040 = sub nsw i64 0, %1039
  %1041 = getelementptr inbounds i8, i8* %1033, i64 %1040
  %1042 = icmp sgt i32 %6, 0
  br i1 %1042, label %1043, label %1104

1043:                                             ; preds = %1031
  %1044 = getelementptr inbounds i8, i8* %1038, i64 -1
  %1045 = sext i32 %24 to i64
  %1046 = sext i32 %1035 to i64
  %1047 = add i32 %6, -1
  %1048 = and i32 %6, 3
  %1049 = icmp ult i32 %1047, 3
  br i1 %1049, label %1084, label %1050

1050:                                             ; preds = %1043
  %1051 = sub i32 %6, %1048
  br label %1052

1052:                                             ; preds = %1052, %1050
  %1053 = phi i8* [ %1038, %1050 ], [ %1081, %1052 ]
  %1054 = phi i8* [ %1041, %1050 ], [ %1080, %1052 ]
  %1055 = phi i8* [ %1044, %1050 ], [ %1079, %1052 ]
  %1056 = phi i8* [ %1033, %1050 ], [ %1078, %1052 ]
  %1057 = phi i32 [ %1051, %1050 ], [ %1082, %1052 ]
  %1058 = load i8, i8* %1056, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1054, i8 %1058, i64 %1039, i1 false) #2
  %1059 = load i8, i8* %1055, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1053, i8 %1059, i64 %1045, i1 false) #2
  %1060 = getelementptr inbounds i8, i8* %1056, i64 %1046
  %1061 = getelementptr inbounds i8, i8* %1055, i64 %1046
  %1062 = getelementptr inbounds i8, i8* %1054, i64 %1046
  %1063 = getelementptr inbounds i8, i8* %1053, i64 %1046
  %1064 = load i8, i8* %1060, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1062, i8 %1064, i64 %1039, i1 false) #2
  %1065 = load i8, i8* %1061, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1063, i8 %1065, i64 %1045, i1 false) #2
  %1066 = getelementptr inbounds i8, i8* %1060, i64 %1046
  %1067 = getelementptr inbounds i8, i8* %1061, i64 %1046
  %1068 = getelementptr inbounds i8, i8* %1062, i64 %1046
  %1069 = getelementptr inbounds i8, i8* %1063, i64 %1046
  %1070 = load i8, i8* %1066, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1068, i8 %1070, i64 %1039, i1 false) #2
  %1071 = load i8, i8* %1067, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1069, i8 %1071, i64 %1045, i1 false) #2
  %1072 = getelementptr inbounds i8, i8* %1066, i64 %1046
  %1073 = getelementptr inbounds i8, i8* %1067, i64 %1046
  %1074 = getelementptr inbounds i8, i8* %1068, i64 %1046
  %1075 = getelementptr inbounds i8, i8* %1069, i64 %1046
  %1076 = load i8, i8* %1072, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1074, i8 %1076, i64 %1039, i1 false) #2
  %1077 = load i8, i8* %1073, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1075, i8 %1077, i64 %1045, i1 false) #2
  %1078 = getelementptr inbounds i8, i8* %1072, i64 %1046
  %1079 = getelementptr inbounds i8, i8* %1073, i64 %1046
  %1080 = getelementptr inbounds i8, i8* %1074, i64 %1046
  %1081 = getelementptr inbounds i8, i8* %1075, i64 %1046
  %1082 = add i32 %1057, -4
  %1083 = icmp eq i32 %1082, 0
  br i1 %1083, label %1084, label %1052

1084:                                             ; preds = %1052, %1043
  %1085 = phi i8* [ %1038, %1043 ], [ %1081, %1052 ]
  %1086 = phi i8* [ %1041, %1043 ], [ %1080, %1052 ]
  %1087 = phi i8* [ %1044, %1043 ], [ %1079, %1052 ]
  %1088 = phi i8* [ %1033, %1043 ], [ %1078, %1052 ]
  %1089 = icmp eq i32 %1048, 0
  br i1 %1089, label %1104, label %1090

1090:                                             ; preds = %1084, %1090
  %1091 = phi i8* [ %1101, %1090 ], [ %1085, %1084 ]
  %1092 = phi i8* [ %1100, %1090 ], [ %1086, %1084 ]
  %1093 = phi i8* [ %1099, %1090 ], [ %1087, %1084 ]
  %1094 = phi i8* [ %1098, %1090 ], [ %1088, %1084 ]
  %1095 = phi i32 [ %1102, %1090 ], [ %1048, %1084 ]
  %1096 = load i8, i8* %1094, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1092, i8 %1096, i64 %1039, i1 false) #2
  %1097 = load i8, i8* %1093, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1091, i8 %1097, i64 %1045, i1 false) #2
  %1098 = getelementptr inbounds i8, i8* %1094, i64 %1046
  %1099 = getelementptr inbounds i8, i8* %1093, i64 %1046
  %1100 = getelementptr inbounds i8, i8* %1092, i64 %1046
  %1101 = getelementptr inbounds i8, i8* %1091, i64 %1046
  %1102 = add i32 %1095, -1
  %1103 = icmp eq i32 %1102, 0
  br i1 %1103, label %1104, label %1090, !llvm.loop !40

1104:                                             ; preds = %1084, %1090, %1031
  %1105 = add nsw i32 %6, -1
  %1106 = mul nsw i32 %1035, %1105
  %1107 = sext i32 %1106 to i64
  %1108 = getelementptr inbounds i8, i8* %1033, i64 %1107
  %1109 = getelementptr inbounds i8, i8* %1108, i64 %1040
  %1110 = mul nsw i32 %1035, %6
  %1111 = sext i32 %1110 to i64
  %1112 = getelementptr inbounds i8, i8* %1033, i64 %1111
  %1113 = getelementptr inbounds i8, i8* %1112, i64 %1040
  %1114 = icmp sgt i32 %19, 0
  br i1 %1114, label %1115, label %1137

1115:                                             ; preds = %1104
  %1116 = mul i32 %19, %1035
  %1117 = sub i32 0, %1116
  %1118 = sext i32 %1117 to i64
  %1119 = getelementptr inbounds i8, i8* %1033, i64 %1118
  %1120 = getelementptr inbounds i8, i8* %1119, i64 %1040
  %1121 = sext i32 %1036 to i64
  %1122 = sext i32 %1035 to i64
  %1123 = add i32 %19, -1
  %1124 = and i32 %19, 3
  %1125 = icmp ult i32 %1123, 3
  br i1 %1125, label %1128, label %1126

1126:                                             ; preds = %1115
  %1127 = sub i32 %19, %1124
  br label %1149

1128:                                             ; preds = %1149, %1115
  %1129 = phi i8* [ %1120, %1115 ], [ %1155, %1149 ]
  %1130 = icmp eq i32 %1124, 0
  br i1 %1130, label %1137, label %1131

1131:                                             ; preds = %1128, %1131
  %1132 = phi i8* [ %1134, %1131 ], [ %1129, %1128 ]
  %1133 = phi i32 [ %1135, %1131 ], [ %1124, %1128 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1132, i8* align 1 %1041, i64 %1121, i1 false) #2
  %1134 = getelementptr inbounds i8, i8* %1132, i64 %1122
  %1135 = add i32 %1133, -1
  %1136 = icmp eq i32 %1135, 0
  br i1 %1136, label %1137, label %1131, !llvm.loop !41

1137:                                             ; preds = %1128, %1131, %1104
  %1138 = icmp sgt i32 %22, 0
  br i1 %1138, label %1139, label %1176

1139:                                             ; preds = %1137
  %1140 = sext i32 %1036 to i64
  %1141 = sext i32 %1035 to i64
  %1142 = add i32 %14, %19
  %1143 = xor i32 %6, -1
  %1144 = add i32 %1142, %1143
  %1145 = and i32 %22, 3
  %1146 = icmp ult i32 %1144, 3
  br i1 %1146, label %1167, label %1147

1147:                                             ; preds = %1139
  %1148 = sub i32 %22, %1145
  br label %1158

1149:                                             ; preds = %1149, %1126
  %1150 = phi i8* [ %1120, %1126 ], [ %1155, %1149 ]
  %1151 = phi i32 [ %1127, %1126 ], [ %1156, %1149 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1150, i8* align 1 %1041, i64 %1121, i1 false) #2
  %1152 = getelementptr inbounds i8, i8* %1150, i64 %1122
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1152, i8* align 1 %1041, i64 %1121, i1 false) #2
  %1153 = getelementptr inbounds i8, i8* %1152, i64 %1122
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1153, i8* align 1 %1041, i64 %1121, i1 false) #2
  %1154 = getelementptr inbounds i8, i8* %1153, i64 %1122
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1154, i8* align 1 %1041, i64 %1121, i1 false) #2
  %1155 = getelementptr inbounds i8, i8* %1154, i64 %1122
  %1156 = add i32 %1151, -4
  %1157 = icmp eq i32 %1156, 0
  br i1 %1157, label %1128, label %1149

1158:                                             ; preds = %1158, %1147
  %1159 = phi i8* [ %1113, %1147 ], [ %1164, %1158 ]
  %1160 = phi i32 [ %1148, %1147 ], [ %1165, %1158 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1159, i8* align 1 %1109, i64 %1140, i1 false) #2
  %1161 = getelementptr inbounds i8, i8* %1159, i64 %1141
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1161, i8* align 1 %1109, i64 %1140, i1 false) #2
  %1162 = getelementptr inbounds i8, i8* %1161, i64 %1141
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1162, i8* align 1 %1109, i64 %1140, i1 false) #2
  %1163 = getelementptr inbounds i8, i8* %1162, i64 %1141
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1163, i8* align 1 %1109, i64 %1140, i1 false) #2
  %1164 = getelementptr inbounds i8, i8* %1163, i64 %1141
  %1165 = add i32 %1160, -4
  %1166 = icmp eq i32 %1165, 0
  br i1 %1166, label %1167, label %1158

1167:                                             ; preds = %1158, %1139
  %1168 = phi i8* [ %1113, %1139 ], [ %1164, %1158 ]
  %1169 = icmp eq i32 %1145, 0
  br i1 %1169, label %1176, label %1170

1170:                                             ; preds = %1167, %1170
  %1171 = phi i8* [ %1173, %1170 ], [ %1168, %1167 ]
  %1172 = phi i32 [ %1174, %1170 ], [ %1145, %1167 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1171, i8* align 1 %1109, i64 %1140, i1 false) #2
  %1173 = getelementptr inbounds i8, i8* %1171, i64 %1141
  %1174 = add i32 %1172, -1
  %1175 = icmp eq i32 %1174, 0
  br i1 %1175, label %1176, label %1170, !llvm.loop !42

1176:                                             ; preds = %1167, %1170, %1137
  %1177 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 15
  %1178 = load i8*, i8** %1177, align 8
  %1179 = load i32, i32* %1034, align 4
  %1180 = getelementptr inbounds i8, i8* %1178, i64 %1037
  %1181 = getelementptr inbounds i8, i8* %1178, i64 %1040
  br i1 %1042, label %1182, label %1243

1182:                                             ; preds = %1176
  %1183 = getelementptr inbounds i8, i8* %1180, i64 -1
  %1184 = sext i32 %24 to i64
  %1185 = sext i32 %1179 to i64
  %1186 = add i32 %6, -1
  %1187 = and i32 %6, 3
  %1188 = icmp ult i32 %1186, 3
  br i1 %1188, label %1223, label %1189

1189:                                             ; preds = %1182
  %1190 = sub i32 %6, %1187
  br label %1191

1191:                                             ; preds = %1191, %1189
  %1192 = phi i8* [ %1180, %1189 ], [ %1220, %1191 ]
  %1193 = phi i8* [ %1181, %1189 ], [ %1219, %1191 ]
  %1194 = phi i8* [ %1183, %1189 ], [ %1218, %1191 ]
  %1195 = phi i8* [ %1178, %1189 ], [ %1217, %1191 ]
  %1196 = phi i32 [ %1190, %1189 ], [ %1221, %1191 ]
  %1197 = load i8, i8* %1195, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1193, i8 %1197, i64 %1039, i1 false) #2
  %1198 = load i8, i8* %1194, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1192, i8 %1198, i64 %1184, i1 false) #2
  %1199 = getelementptr inbounds i8, i8* %1195, i64 %1185
  %1200 = getelementptr inbounds i8, i8* %1194, i64 %1185
  %1201 = getelementptr inbounds i8, i8* %1193, i64 %1185
  %1202 = getelementptr inbounds i8, i8* %1192, i64 %1185
  %1203 = load i8, i8* %1199, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1201, i8 %1203, i64 %1039, i1 false) #2
  %1204 = load i8, i8* %1200, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1202, i8 %1204, i64 %1184, i1 false) #2
  %1205 = getelementptr inbounds i8, i8* %1199, i64 %1185
  %1206 = getelementptr inbounds i8, i8* %1200, i64 %1185
  %1207 = getelementptr inbounds i8, i8* %1201, i64 %1185
  %1208 = getelementptr inbounds i8, i8* %1202, i64 %1185
  %1209 = load i8, i8* %1205, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1207, i8 %1209, i64 %1039, i1 false) #2
  %1210 = load i8, i8* %1206, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1208, i8 %1210, i64 %1184, i1 false) #2
  %1211 = getelementptr inbounds i8, i8* %1205, i64 %1185
  %1212 = getelementptr inbounds i8, i8* %1206, i64 %1185
  %1213 = getelementptr inbounds i8, i8* %1207, i64 %1185
  %1214 = getelementptr inbounds i8, i8* %1208, i64 %1185
  %1215 = load i8, i8* %1211, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1213, i8 %1215, i64 %1039, i1 false) #2
  %1216 = load i8, i8* %1212, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1214, i8 %1216, i64 %1184, i1 false) #2
  %1217 = getelementptr inbounds i8, i8* %1211, i64 %1185
  %1218 = getelementptr inbounds i8, i8* %1212, i64 %1185
  %1219 = getelementptr inbounds i8, i8* %1213, i64 %1185
  %1220 = getelementptr inbounds i8, i8* %1214, i64 %1185
  %1221 = add i32 %1196, -4
  %1222 = icmp eq i32 %1221, 0
  br i1 %1222, label %1223, label %1191

1223:                                             ; preds = %1191, %1182
  %1224 = phi i8* [ %1180, %1182 ], [ %1220, %1191 ]
  %1225 = phi i8* [ %1181, %1182 ], [ %1219, %1191 ]
  %1226 = phi i8* [ %1183, %1182 ], [ %1218, %1191 ]
  %1227 = phi i8* [ %1178, %1182 ], [ %1217, %1191 ]
  %1228 = icmp eq i32 %1187, 0
  br i1 %1228, label %1243, label %1229

1229:                                             ; preds = %1223, %1229
  %1230 = phi i8* [ %1240, %1229 ], [ %1224, %1223 ]
  %1231 = phi i8* [ %1239, %1229 ], [ %1225, %1223 ]
  %1232 = phi i8* [ %1238, %1229 ], [ %1226, %1223 ]
  %1233 = phi i8* [ %1237, %1229 ], [ %1227, %1223 ]
  %1234 = phi i32 [ %1241, %1229 ], [ %1187, %1223 ]
  %1235 = load i8, i8* %1233, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1231, i8 %1235, i64 %1039, i1 false) #2
  %1236 = load i8, i8* %1232, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1230, i8 %1236, i64 %1184, i1 false) #2
  %1237 = getelementptr inbounds i8, i8* %1233, i64 %1185
  %1238 = getelementptr inbounds i8, i8* %1232, i64 %1185
  %1239 = getelementptr inbounds i8, i8* %1231, i64 %1185
  %1240 = getelementptr inbounds i8, i8* %1230, i64 %1185
  %1241 = add i32 %1234, -1
  %1242 = icmp eq i32 %1241, 0
  br i1 %1242, label %1243, label %1229, !llvm.loop !43

1243:                                             ; preds = %1223, %1229, %1176
  %1244 = mul nsw i32 %1179, %1105
  %1245 = sext i32 %1244 to i64
  %1246 = getelementptr inbounds i8, i8* %1178, i64 %1245
  %1247 = getelementptr inbounds i8, i8* %1246, i64 %1040
  %1248 = mul nsw i32 %1179, %6
  %1249 = sext i32 %1248 to i64
  %1250 = getelementptr inbounds i8, i8* %1178, i64 %1249
  %1251 = getelementptr inbounds i8, i8* %1250, i64 %1040
  br i1 %1114, label %1252, label %1274

1252:                                             ; preds = %1243
  %1253 = mul i32 %19, %1179
  %1254 = sub i32 0, %1253
  %1255 = sext i32 %1254 to i64
  %1256 = getelementptr inbounds i8, i8* %1178, i64 %1255
  %1257 = getelementptr inbounds i8, i8* %1256, i64 %1040
  %1258 = sext i32 %1036 to i64
  %1259 = sext i32 %1179 to i64
  %1260 = add i32 %19, -1
  %1261 = and i32 %19, 3
  %1262 = icmp ult i32 %1260, 3
  br i1 %1262, label %1265, label %1263

1263:                                             ; preds = %1252
  %1264 = sub i32 %19, %1261
  br label %1285

1265:                                             ; preds = %1285, %1252
  %1266 = phi i8* [ %1257, %1252 ], [ %1291, %1285 ]
  %1267 = icmp eq i32 %1261, 0
  br i1 %1267, label %1274, label %1268

1268:                                             ; preds = %1265, %1268
  %1269 = phi i8* [ %1271, %1268 ], [ %1266, %1265 ]
  %1270 = phi i32 [ %1272, %1268 ], [ %1261, %1265 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1269, i8* align 1 %1181, i64 %1258, i1 false) #2
  %1271 = getelementptr inbounds i8, i8* %1269, i64 %1259
  %1272 = add i32 %1270, -1
  %1273 = icmp eq i32 %1272, 0
  br i1 %1273, label %1274, label %1268, !llvm.loop !44

1274:                                             ; preds = %1265, %1268, %1243
  br i1 %1138, label %1275, label %1322

1275:                                             ; preds = %1274
  %1276 = sext i32 %1036 to i64
  %1277 = sext i32 %1179 to i64
  %1278 = add i32 %14, %19
  %1279 = xor i32 %6, -1
  %1280 = add i32 %1278, %1279
  %1281 = and i32 %22, 3
  %1282 = icmp ult i32 %1280, 3
  br i1 %1282, label %1303, label %1283

1283:                                             ; preds = %1275
  %1284 = sub i32 %22, %1281
  br label %1294

1285:                                             ; preds = %1285, %1263
  %1286 = phi i8* [ %1257, %1263 ], [ %1291, %1285 ]
  %1287 = phi i32 [ %1264, %1263 ], [ %1292, %1285 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1286, i8* align 1 %1181, i64 %1258, i1 false) #2
  %1288 = getelementptr inbounds i8, i8* %1286, i64 %1259
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1288, i8* align 1 %1181, i64 %1258, i1 false) #2
  %1289 = getelementptr inbounds i8, i8* %1288, i64 %1259
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1289, i8* align 1 %1181, i64 %1258, i1 false) #2
  %1290 = getelementptr inbounds i8, i8* %1289, i64 %1259
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1290, i8* align 1 %1181, i64 %1258, i1 false) #2
  %1291 = getelementptr inbounds i8, i8* %1290, i64 %1259
  %1292 = add i32 %1287, -4
  %1293 = icmp eq i32 %1292, 0
  br i1 %1293, label %1265, label %1285

1294:                                             ; preds = %1294, %1283
  %1295 = phi i8* [ %1251, %1283 ], [ %1300, %1294 ]
  %1296 = phi i32 [ %1284, %1283 ], [ %1301, %1294 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1295, i8* align 1 %1247, i64 %1276, i1 false) #2
  %1297 = getelementptr inbounds i8, i8* %1295, i64 %1277
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1297, i8* align 1 %1247, i64 %1276, i1 false) #2
  %1298 = getelementptr inbounds i8, i8* %1297, i64 %1277
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1298, i8* align 1 %1247, i64 %1276, i1 false) #2
  %1299 = getelementptr inbounds i8, i8* %1298, i64 %1277
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1299, i8* align 1 %1247, i64 %1276, i1 false) #2
  %1300 = getelementptr inbounds i8, i8* %1299, i64 %1277
  %1301 = add i32 %1296, -4
  %1302 = icmp eq i32 %1301, 0
  br i1 %1302, label %1303, label %1294

1303:                                             ; preds = %1294, %1275
  %1304 = phi i8* [ %1251, %1275 ], [ %1300, %1294 ]
  %1305 = icmp eq i32 %1281, 0
  br i1 %1305, label %1322, label %1306

1306:                                             ; preds = %1303, %1306
  %1307 = phi i8* [ %1309, %1306 ], [ %1304, %1303 ]
  %1308 = phi i32 [ %1310, %1306 ], [ %1281, %1303 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1307, i8* align 1 %1247, i64 %1276, i1 false) #2
  %1309 = getelementptr inbounds i8, i8* %1307, i64 %1277
  %1310 = add i32 %1308, -1
  %1311 = icmp eq i32 %1310, 0
  br i1 %1311, label %1322, label %1306, !llvm.loop !45

1312:                                             ; preds = %878, %853
  %1313 = phi i16* [ %826, %853 ], [ %888, %878 ]
  %1314 = icmp eq i32 %861, 0
  br i1 %1314, label %1322, label %1315

1315:                                             ; preds = %1312, %1315
  %1316 = phi i16* [ %1319, %1315 ], [ %1313, %1312 ]
  %1317 = phi i32 [ %1320, %1315 ], [ %861, %1312 ]
  %1318 = bitcast i16* %1316 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1318, i8* align 2 %854, i64 %856, i1 false) #2
  %1319 = getelementptr inbounds i16, i16* %1316, i64 %857
  %1320 = add i32 %1317, -1
  %1321 = icmp eq i32 %1320, 0
  br i1 %1321, label %1322, label %1315, !llvm.loop !46

1322:                                             ; preds = %1312, %1315, %1303, %1306, %1274, %852
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_extend_frame_inner_borders_c(%struct.yv12_buffer_config* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 19
  %3 = load i32, i32* %2, align 8
  %4 = icmp slt i32 %3, 96
  %5 = select i1 %4, i32 %3, i32 96
  tail call fastcc void @extend_frame(%struct.yv12_buffer_config* %0, i32 %5)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_yv12_copy_frame_c(%struct.yv12_buffer_config* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %29

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 13
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0
  %12 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %13 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  br label %14

14:                                               ; preds = %6, %14
  %15 = phi i8* [ %8, %6 ], [ %25, %14 ]
  %16 = phi i8* [ %10, %6 ], [ %22, %14 ]
  %17 = phi i32 [ 0, %6 ], [ %26, %14 ]
  %18 = load i32, i32* %11, align 8
  %19 = sext i32 %18 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %16, i64 %19, i1 false)
  %20 = load i32, i32* %12, align 8
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %16, i64 %21
  %23 = load i32, i32* %13, align 8
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %15, i64 %24
  %26 = add nuw nsw i32 %17, 1
  %27 = load i32, i32* %3, align 4
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %14, label %29

29:                                               ; preds = %14, %2
  %30 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 6
  %31 = load i32, i32* %30, align 8
  %32 = icmp sgt i32 %31, 0
  br i1 %32, label %33, label %81

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 14
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5
  %39 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  %40 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  br label %41

41:                                               ; preds = %33, %41
  %42 = phi i8* [ %35, %33 ], [ %52, %41 ]
  %43 = phi i8* [ %37, %33 ], [ %49, %41 ]
  %44 = phi i32 [ 0, %33 ], [ %53, %41 ]
  %45 = load i32, i32* %38, align 4
  %46 = sext i32 %45 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %43, i64 %46, i1 false)
  %47 = load i32, i32* %39, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* %43, i64 %48
  %50 = load i32, i32* %40, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %42, i64 %51
  %53 = add nuw nsw i32 %44, 1
  %54 = load i32, i32* %30, align 8
  %55 = icmp slt i32 %53, %54
  br i1 %55, label %41, label %56

56:                                               ; preds = %41
  %57 = icmp sgt i32 %54, 0
  br i1 %57, label %58, label %81

58:                                               ; preds = %56
  %59 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %60 = load i8*, i8** %59, align 8
  %61 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 15
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5
  %64 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  %65 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  br label %66

66:                                               ; preds = %58, %66
  %67 = phi i8* [ %60, %58 ], [ %77, %66 ]
  %68 = phi i8* [ %62, %58 ], [ %74, %66 ]
  %69 = phi i32 [ 0, %58 ], [ %78, %66 ]
  %70 = load i32, i32* %63, align 4
  %71 = sext i32 %70 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 1 %68, i64 %71, i1 false)
  %72 = load i32, i32* %64, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8, i8* %68, i64 %73
  %75 = load i32, i32* %65, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %67, i64 %76
  %78 = add nuw nsw i32 %69, 1
  %79 = load i32, i32* %30, align 8
  %80 = icmp slt i32 %78, %79
  br i1 %80, label %66, label %81

81:                                               ; preds = %66, %29, %56
  tail call void @vp8_yv12_extend_frame_borders_c(%struct.yv12_buffer_config* %1)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_yv12_copy_frame_c(%struct.yv12_buffer_config* readonly, %struct.yv12_buffer_config* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 13
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 29
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, 8
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %12, 0
  br i1 %10, label %19, label %14

14:                                               ; preds = %2
  br i1 %13, label %15, label %46

15:                                               ; preds = %14
  %16 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0
  %17 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %18 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  br label %24

19:                                               ; preds = %2
  br i1 %13, label %20, label %127

20:                                               ; preds = %19
  %21 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0
  %22 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %23 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  br label %112

24:                                               ; preds = %15, %24
  %25 = phi i8* [ %6, %15 ], [ %42, %24 ]
  %26 = phi i8* [ %4, %15 ], [ %39, %24 ]
  %27 = phi i32 [ 0, %15 ], [ %43, %24 ]
  %28 = load i32, i32* %16, align 8
  %29 = ptrtoint i8* %25 to i64
  %30 = shl i64 %29, 1
  %31 = ptrtoint i8* %26 to i64
  %32 = shl i64 %31, 1
  %33 = inttoptr i64 %30 to i8*
  %34 = inttoptr i64 %32 to i8*
  %35 = sext i32 %28 to i64
  %36 = shl nsw i64 %35, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %33, i8* align 2 %34, i64 %36, i1 false) #2
  %37 = load i32, i32* %17, align 8
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i8, i8* %26, i64 %38
  %40 = load i32, i32* %18, align 8
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8, i8* %25, i64 %41
  %43 = add nuw nsw i32 %27, 1
  %44 = load i32, i32* %11, align 4
  %45 = icmp slt i32 %43, %44
  br i1 %45, label %24, label %46

46:                                               ; preds = %24, %14
  %47 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 6
  %48 = load i32, i32* %47, align 8
  %49 = icmp sgt i32 %48, 0
  br i1 %49, label %50, label %179

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 14
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5
  %56 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  %57 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  br label %58

58:                                               ; preds = %50, %58
  %59 = phi i8* [ %52, %50 ], [ %76, %58 ]
  %60 = phi i8* [ %54, %50 ], [ %73, %58 ]
  %61 = phi i32 [ 0, %50 ], [ %77, %58 ]
  %62 = load i32, i32* %55, align 4
  %63 = ptrtoint i8* %59 to i64
  %64 = shl i64 %63, 1
  %65 = ptrtoint i8* %60 to i64
  %66 = shl i64 %65, 1
  %67 = inttoptr i64 %64 to i8*
  %68 = inttoptr i64 %66 to i8*
  %69 = sext i32 %62 to i64
  %70 = shl nsw i64 %69, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %67, i8* align 2 %68, i64 %70, i1 false) #2
  %71 = load i32, i32* %56, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %60, i64 %72
  %74 = load i32, i32* %57, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %59, i64 %75
  %77 = add nuw nsw i32 %61, 1
  %78 = load i32, i32* %47, align 8
  %79 = icmp slt i32 %77, %78
  br i1 %79, label %58, label %80

80:                                               ; preds = %58
  %81 = icmp sgt i32 %78, 0
  br i1 %81, label %82, label %179

82:                                               ; preds = %80
  %83 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %84 = load i8*, i8** %83, align 8
  %85 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 15
  %86 = load i8*, i8** %85, align 8
  %87 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5
  %88 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  %89 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  br label %90

90:                                               ; preds = %82, %90
  %91 = phi i8* [ %84, %82 ], [ %108, %90 ]
  %92 = phi i8* [ %86, %82 ], [ %105, %90 ]
  %93 = phi i32 [ 0, %82 ], [ %109, %90 ]
  %94 = load i32, i32* %87, align 4
  %95 = ptrtoint i8* %91 to i64
  %96 = shl i64 %95, 1
  %97 = ptrtoint i8* %92 to i64
  %98 = shl i64 %97, 1
  %99 = inttoptr i64 %96 to i8*
  %100 = inttoptr i64 %98 to i8*
  %101 = sext i32 %94 to i64
  %102 = shl nsw i64 %101, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %99, i8* align 2 %100, i64 %102, i1 false) #2
  %103 = load i32, i32* %88, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i8, i8* %92, i64 %104
  %106 = load i32, i32* %89, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i8, i8* %91, i64 %107
  %109 = add nuw nsw i32 %93, 1
  %110 = load i32, i32* %47, align 8
  %111 = icmp slt i32 %109, %110
  br i1 %111, label %90, label %179

112:                                              ; preds = %20, %112
  %113 = phi i8* [ %6, %20 ], [ %123, %112 ]
  %114 = phi i8* [ %4, %20 ], [ %120, %112 ]
  %115 = phi i32 [ 0, %20 ], [ %124, %112 ]
  %116 = load i32, i32* %21, align 8
  %117 = sext i32 %116 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %113, i8* align 1 %114, i64 %117, i1 false)
  %118 = load i32, i32* %22, align 8
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i8, i8* %114, i64 %119
  %121 = load i32, i32* %23, align 8
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %113, i64 %122
  %124 = add nuw nsw i32 %115, 1
  %125 = load i32, i32* %11, align 4
  %126 = icmp slt i32 %124, %125
  br i1 %126, label %112, label %127

127:                                              ; preds = %112, %19
  %128 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 6
  %129 = load i32, i32* %128, align 8
  %130 = icmp sgt i32 %129, 0
  br i1 %130, label %131, label %179

131:                                              ; preds = %127
  %132 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %133 = load i8*, i8** %132, align 8
  %134 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 14
  %135 = load i8*, i8** %134, align 8
  %136 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5
  %137 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  %138 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  br label %139

139:                                              ; preds = %131, %139
  %140 = phi i8* [ %133, %131 ], [ %150, %139 ]
  %141 = phi i8* [ %135, %131 ], [ %147, %139 ]
  %142 = phi i32 [ 0, %131 ], [ %151, %139 ]
  %143 = load i32, i32* %136, align 4
  %144 = sext i32 %143 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %140, i8* align 1 %141, i64 %144, i1 false)
  %145 = load i32, i32* %137, align 4
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds i8, i8* %141, i64 %146
  %148 = load i32, i32* %138, align 4
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds i8, i8* %140, i64 %149
  %151 = add nuw nsw i32 %142, 1
  %152 = load i32, i32* %128, align 8
  %153 = icmp slt i32 %151, %152
  br i1 %153, label %139, label %154

154:                                              ; preds = %139
  %155 = icmp sgt i32 %152, 0
  br i1 %155, label %156, label %179

156:                                              ; preds = %154
  %157 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %158 = load i8*, i8** %157, align 8
  %159 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 15
  %160 = load i8*, i8** %159, align 8
  %161 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5
  %162 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  %163 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  br label %164

164:                                              ; preds = %156, %164
  %165 = phi i8* [ %158, %156 ], [ %175, %164 ]
  %166 = phi i8* [ %160, %156 ], [ %172, %164 ]
  %167 = phi i32 [ 0, %156 ], [ %176, %164 ]
  %168 = load i32, i32* %161, align 4
  %169 = sext i32 %168 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %165, i8* align 1 %166, i64 %169, i1 false)
  %170 = load i32, i32* %162, align 4
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds i8, i8* %166, i64 %171
  %173 = load i32, i32* %163, align 4
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds i8, i8* %165, i64 %174
  %176 = add nuw nsw i32 %167, 1
  %177 = load i32, i32* %128, align 8
  %178 = icmp slt i32 %176, %177
  br i1 %178, label %164, label %179

179:                                              ; preds = %90, %164, %154, %127, %80, %46
  %180 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 19
  %181 = load i32, i32* %180, align 8
  tail call fastcc void @extend_frame(%struct.yv12_buffer_config* %1, i32 %181) #2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_yv12_copy_y_c(%struct.yv12_buffer_config* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 13
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 29
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, 8
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %12, 0
  br i1 %10, label %14, label %19

14:                                               ; preds = %2
  br i1 %13, label %15, label %63

15:                                               ; preds = %14
  %16 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0
  %17 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %18 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  br label %48

19:                                               ; preds = %2
  br i1 %13, label %20, label %63

20:                                               ; preds = %19
  %21 = ptrtoint i8* %6 to i64
  %22 = shl i64 %21, 1
  %23 = inttoptr i64 %22 to i16*
  %24 = ptrtoint i8* %4 to i64
  %25 = shl i64 %24, 1
  %26 = inttoptr i64 %25 to i16*
  %27 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0
  %28 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %29 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  br label %30

30:                                               ; preds = %20, %30
  %31 = phi i16* [ %23, %20 ], [ %44, %30 ]
  %32 = phi i16* [ %26, %20 ], [ %41, %30 ]
  %33 = phi i32 [ 0, %20 ], [ %45, %30 ]
  %34 = bitcast i16* %31 to i8*
  %35 = bitcast i16* %32 to i8*
  %36 = load i32, i32* %27, align 8
  %37 = sext i32 %36 to i64
  %38 = shl nsw i64 %37, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %34, i8* align 2 %35, i64 %38, i1 false)
  %39 = load i32, i32* %28, align 8
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i16, i16* %32, i64 %40
  %42 = load i32, i32* %29, align 8
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i16, i16* %31, i64 %43
  %45 = add nuw nsw i32 %33, 1
  %46 = load i32, i32* %11, align 4
  %47 = icmp slt i32 %45, %46
  br i1 %47, label %30, label %63

48:                                               ; preds = %15, %48
  %49 = phi i8* [ %6, %15 ], [ %59, %48 ]
  %50 = phi i8* [ %4, %15 ], [ %56, %48 ]
  %51 = phi i32 [ 0, %15 ], [ %60, %48 ]
  %52 = load i32, i32* %16, align 8
  %53 = sext i32 %52 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %49, i8* align 1 %50, i64 %53, i1 false)
  %54 = load i32, i32* %17, align 8
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %50, i64 %55
  %57 = load i32, i32* %18, align 8
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %49, i64 %58
  %60 = add nuw nsw i32 %51, 1
  %61 = load i32, i32* %11, align 4
  %62 = icmp slt i32 %60, %61
  br i1 %62, label %48, label %63

63:                                               ; preds = %30, %48, %19, %14
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !16, !13}
!16 = !{!"llvm.loop.unroll.runtime.disable"}
!17 = distinct !{!17, !13}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !16, !13}
!20 = distinct !{!20, !3}
!21 = distinct !{!21, !3}
!22 = distinct !{!22, !13}
!23 = distinct !{!23, !3}
!24 = distinct !{!24, !16, !13}
!25 = distinct !{!25, !13}
!26 = distinct !{!26, !3}
!27 = distinct !{!27, !16, !13}
!28 = distinct !{!28, !3}
!29 = distinct !{!29, !3}
!30 = distinct !{!30, !13}
!31 = distinct !{!31, !3}
!32 = distinct !{!32, !16, !13}
!33 = distinct !{!33, !13}
!34 = distinct !{!34, !3}
!35 = distinct !{!35, !16, !13}
!36 = distinct !{!36, !3}
!37 = distinct !{!37, !3}
!38 = distinct !{!38, !3}
!39 = distinct !{!39, !3}
!40 = distinct !{!40, !3}
!41 = distinct !{!41, !3}
!42 = distinct !{!42, !3}
!43 = distinct !{!43, !3}
!44 = distinct !{!44, !3}
!45 = distinct !{!45, !3}
!46 = distinct !{!46, !3}
