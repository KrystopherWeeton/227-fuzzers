; ModuleID = '../../chrome/browser/permissions/attestation_permission_request.cc'
source_filename = "../../chrome/browser/permissions/attestation_permission_request.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.permissions::PermissionRequest" = type { i32 (...)** }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.1 }
%union.anon.1 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.AttestationPermissionRequest = type { %"class.permissions::PermissionRequest", %"class.url::Origin", %"class.base::OnceCallback" }
%"class.std::__1::basic_string.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.6 }
%union.anon.6 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %class.GURL* }

$_ZN28AttestationPermissionRequestD2Ev = comdat any

$_ZN28AttestationPermissionRequestD0Ev = comdat any

$_ZNK28AttestationPermissionRequest14GetRequestTypeEv = comdat any

$_ZNK28AttestationPermissionRequest22GetMessageTextFragmentEv = comdat any

$_ZNK28AttestationPermissionRequest9GetOriginEv = comdat any

$_ZN28AttestationPermissionRequest17PermissionGrantedEb = comdat any

$_ZN28AttestationPermissionRequest16PermissionDeniedEv = comdat any

$_ZN28AttestationPermissionRequest9CancelledEv = comdat any

$_ZN28AttestationPermissionRequest15RequestFinishedEv = comdat any

$_ZTV28AttestationPermissionRequest = comdat any

@_ZTV28AttestationPermissionRequest = linkonce_odr hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.AttestationPermissionRequest*)* @_ZN28AttestationPermissionRequestD2Ev to i8*), i8* bitcast (void (%class.AttestationPermissionRequest*)* @_ZN28AttestationPermissionRequestD0Ev to i8*), i8* bitcast (i32 (%class.AttestationPermissionRequest*)* @_ZNK28AttestationPermissionRequest14GetRequestTypeEv to i8*), i8* bitcast (i1 (%"class.permissions::PermissionRequest"*, %"class.permissions::PermissionRequest"*)* @_ZNK11permissions17PermissionRequest13IsDuplicateOfEPS0_ to i8*), i8* bitcast (void ()* @_ZNK11permissions17PermissionRequest11GetChipTextEv to i8*), i8* bitcast (void (%"class.std::__1::basic_string.3"*, %class.AttestationPermissionRequest*)* @_ZNK28AttestationPermissionRequest22GetMessageTextFragmentEv to i8*), i8* bitcast (void (%class.GURL*, %class.AttestationPermissionRequest*)* @_ZNK28AttestationPermissionRequest9GetOriginEv to i8*), i8* bitcast (void (%class.AttestationPermissionRequest*, i1)* @_ZN28AttestationPermissionRequest17PermissionGrantedEb to i8*), i8* bitcast (void (%class.AttestationPermissionRequest*)* @_ZN28AttestationPermissionRequest16PermissionDeniedEv to i8*), i8* bitcast (void (%class.AttestationPermissionRequest*)* @_ZN28AttestationPermissionRequest9CancelledEv to i8*), i8* bitcast (void (%class.AttestationPermissionRequest*)* @_ZN28AttestationPermissionRequest15RequestFinishedEv to i8*), i8* bitcast (i32 (%"class.permissions::PermissionRequest"*)* @_ZNK11permissions17PermissionRequest14GetGestureTypeEv to i8*), i8* bitcast (i32 (%"class.permissions::PermissionRequest"*)* @_ZNK11permissions17PermissionRequest22GetContentSettingsTypeEv to i8*)] }, comdat, align 8

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %"class.permissions::PermissionRequest"* @_Z31NewAttestationPermissionRequestRKN3url6OriginEN4base12OnceCallbackIFvbEEE(%"class.url::Origin"* dereferenceable(80), %"class.base::OnceCallback"* nocapture) local_unnamed_addr #0 {
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = tail call i8* @_Znwm(i64 96) #6
  %5 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = bitcast %"class.base::OnceCallback"* %1 to i64*
  %7 = load i64, i64* %6, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %5, align 8
  %8 = bitcast i8* %4 to %"class.permissions::PermissionRequest"*
  tail call void @_ZN11permissions17PermissionRequestC2Ev(%"class.permissions::PermissionRequest"* nonnull %8) #7
  %9 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTV28AttestationPermissionRequest, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds i8, i8* %4, i64 8
  %11 = bitcast i8* %10 to %"class.url::Origin"*
  tail call void @_ZN3url6OriginC1ERKS0_(%"class.url::Origin"* %11, %"class.url::Origin"* dereferenceable(80) %0) #7
  %12 = getelementptr inbounds i8, i8* %4, i64 88
  %13 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0, i32 0, i32 0
  %14 = bitcast i8* %12 to i64*
  store i64 %7, i64* %14, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %13, align 8
  %15 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %15) #7
  ret %"class.permissions::PermissionRequest"* %8
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #2

declare void @_ZN11permissions17PermissionRequestC2Ev(%"class.permissions::PermissionRequest"*) unnamed_addr #3

declare void @_ZN3url6OriginC1ERKS0_(%"class.url::Origin"*, %"class.url::Origin"* dereferenceable(80)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN28AttestationPermissionRequestD2Ev(%class.AttestationPermissionRequest*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.AttestationPermissionRequest, %class.AttestationPermissionRequest* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTV28AttestationPermissionRequest, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.AttestationPermissionRequest, %class.AttestationPermissionRequest* %0, i64 0, i32 2, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %3) #7
  %4 = getelementptr inbounds %class.AttestationPermissionRequest, %class.AttestationPermissionRequest* %0, i64 0, i32 1
  tail call void @_ZN3url6OriginD1Ev(%"class.url::Origin"* %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN28AttestationPermissionRequestD0Ev(%class.AttestationPermissionRequest*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.AttestationPermissionRequest, %class.AttestationPermissionRequest* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTV28AttestationPermissionRequest, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.AttestationPermissionRequest, %class.AttestationPermissionRequest* %0, i64 0, i32 2, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %3) #7
  %4 = getelementptr inbounds %class.AttestationPermissionRequest, %class.AttestationPermissionRequest* %0, i64 0, i32 1
  tail call void @_ZN3url6OriginD1Ev(%"class.url::Origin"* %4) #7
  %5 = bitcast %class.AttestationPermissionRequest* %0 to i8*
  tail call void @_ZdlPv(i8* %5) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK28AttestationPermissionRequest14GetRequestTypeEv(%class.AttestationPermissionRequest*) unnamed_addr #0 comdat align 2 {
  ret i32 15
}

declare zeroext i1 @_ZNK11permissions17PermissionRequest13IsDuplicateOfEPS0_(%"class.permissions::PermissionRequest"*, %"class.permissions::PermissionRequest"*) unnamed_addr #3

declare void @_ZNK11permissions17PermissionRequest11GetChipTextEv() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK28AttestationPermissionRequest22GetMessageTextFragmentEv(%"class.std::__1::basic_string.3"* noalias sret, %class.AttestationPermissionRequest*) unnamed_addr #0 comdat align 2 {
  tail call void @_ZN9l10n_util14GetStringUTF16Ei(%"class.std::__1::basic_string.3"* sret %0, i32 9094) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK28AttestationPermissionRequest9GetOriginEv(%class.GURL* noalias sret, %class.AttestationPermissionRequest*) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.AttestationPermissionRequest, %class.AttestationPermissionRequest* %1, i64 0, i32 1
  tail call void @_ZNK3url6Origin6GetURLEv(%class.GURL* sret %0, %"class.url::Origin"* %3) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN28AttestationPermissionRequest17PermissionGrantedEb(%class.AttestationPermissionRequest*, i1 zeroext) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = getelementptr inbounds %class.AttestationPermissionRequest, %class.AttestationPermissionRequest* %0, i64 0, i32 2
  %5 = bitcast %"class.base::OnceCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0, i32 0, i32 0
  %7 = bitcast %"class.base::OnceCallback"* %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.base::OnceCallback"* %3 to i64*
  store i64 %8, i64* %9, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %6, align 8
  %10 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  %11 = inttoptr i64 %8 to %"class.base::internal::BindStateBase"*
  %12 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %11, i64 0, i32 1
  %13 = bitcast void ()** %12 to void (%"class.base::internal::BindStateBase"*, i1)**
  %14 = load void (%"class.base::internal::BindStateBase"*, i1)*, void (%"class.base::internal::BindStateBase"*, i1)** %13, align 8
  tail call void %14(%"class.base::internal::BindStateBase"* %11, i1 zeroext true) #7
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN28AttestationPermissionRequest16PermissionDeniedEv(%class.AttestationPermissionRequest*) unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.base::OnceCallback", align 8
  %3 = getelementptr inbounds %class.AttestationPermissionRequest, %class.AttestationPermissionRequest* %0, i64 0, i32 2
  %4 = bitcast %"class.base::OnceCallback"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #7
  %5 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0, i32 0, i32 0
  %6 = bitcast %"class.base::OnceCallback"* %3 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.base::OnceCallback"* %2 to i64*
  store i64 %7, i64* %8, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %5, align 8
  %9 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0
  %10 = inttoptr i64 %7 to %"class.base::internal::BindStateBase"*
  %11 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %10, i64 0, i32 1
  %12 = bitcast void ()** %11 to void (%"class.base::internal::BindStateBase"*, i1)**
  %13 = load void (%"class.base::internal::BindStateBase"*, i1)*, void (%"class.base::internal::BindStateBase"*, i1)** %12, align 8
  tail call void %13(%"class.base::internal::BindStateBase"* %10, i1 zeroext false) #7
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN28AttestationPermissionRequest9CancelledEv(%class.AttestationPermissionRequest*) unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.base::OnceCallback", align 8
  %3 = getelementptr inbounds %class.AttestationPermissionRequest, %class.AttestationPermissionRequest* %0, i64 0, i32 2
  %4 = bitcast %"class.base::OnceCallback"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #7
  %5 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0, i32 0, i32 0
  %6 = bitcast %"class.base::OnceCallback"* %3 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.base::OnceCallback"* %2 to i64*
  store i64 %7, i64* %8, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %5, align 8
  %9 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0
  %10 = inttoptr i64 %7 to %"class.base::internal::BindStateBase"*
  %11 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %10, i64 0, i32 1
  %12 = bitcast void ()** %11 to void (%"class.base::internal::BindStateBase"*, i1)**
  %13 = load void (%"class.base::internal::BindStateBase"*, i1)*, void (%"class.base::internal::BindStateBase"*, i1)** %12, align 8
  tail call void %13(%"class.base::internal::BindStateBase"* %10, i1 zeroext false) #7
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN28AttestationPermissionRequest15RequestFinishedEv(%class.AttestationPermissionRequest*) unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.base::OnceCallback", align 8
  %3 = getelementptr inbounds %class.AttestationPermissionRequest, %class.AttestationPermissionRequest* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %3, align 8
  %5 = icmp eq %"class.base::internal::BindStateBase"* %4, null
  br i1 %5, label %14, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"class.base::internal::BindStateBase"* %4 to i64
  %8 = bitcast %"class.base::OnceCallback"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #7
  %9 = bitcast %"class.base::OnceCallback"* %2 to i64*
  store i64 %7, i64* %9, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %3, align 8
  %10 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0
  %11 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %4, i64 0, i32 1
  %12 = bitcast void ()** %11 to void (%"class.base::internal::BindStateBase"*, i1)**
  %13 = load void (%"class.base::internal::BindStateBase"*, i1)*, void (%"class.base::internal::BindStateBase"*, i1)** %12, align 8
  tail call void %13(%"class.base::internal::BindStateBase"* nonnull %4, i1 zeroext false) #7
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #7
  br label %14

14:                                               ; preds = %1, %6
  %15 = icmp eq %class.AttestationPermissionRequest* %0, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %14
  %17 = bitcast %class.AttestationPermissionRequest* %0 to void (%class.AttestationPermissionRequest*)***
  %18 = load void (%class.AttestationPermissionRequest*)**, void (%class.AttestationPermissionRequest*)*** %17, align 8
  %19 = getelementptr inbounds void (%class.AttestationPermissionRequest*)*, void (%class.AttestationPermissionRequest*)** %18, i64 1
  %20 = load void (%class.AttestationPermissionRequest*)*, void (%class.AttestationPermissionRequest*)** %19, align 8
  call void %20(%class.AttestationPermissionRequest* nonnull %0) #7
  br label %21

21:                                               ; preds = %16, %14
  ret void
}

declare i32 @_ZNK11permissions17PermissionRequest14GetGestureTypeEv(%"class.permissions::PermissionRequest"*) unnamed_addr #3

declare i32 @_ZNK11permissions17PermissionRequest22GetContentSettingsTypeEv(%"class.permissions::PermissionRequest"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3url6OriginD1Ev(%"class.url::Origin"*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

declare void @_ZN9l10n_util14GetStringUTF16Ei(%"class.std::__1::basic_string.3"* sret, i32) local_unnamed_addr #3

declare void @_ZNK3url6Origin6GetURLEv(%class.GURL* sret, %"class.url::Origin"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
