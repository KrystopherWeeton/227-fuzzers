; ModuleID = '../../third_party/libjingle_xmpp/xmllite/xmlelement.cc'
source_filename = "../../third_party/libjingle_xmpp/xmllite/xmlelement.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.jingle_xmpp::StaticQName" = type { i8*, i8* }
%"class.jingle_xmpp::XmlChild" = type { i32 (...)**, %"class.jingle_xmpp::XmlChild"* }
%"class.jingle_xmpp::XmlText" = type { %"class.jingle_xmpp::XmlChild", %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.jingle_xmpp::XmlElement" = type <{ %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::QName", %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"*, i8, [7 x i8] }>
%"class.jingle_xmpp::QName" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.jingle_xmpp::XmlAttr" = type { %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::QName", %"class.std::__1::basic_string" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.std::__1::basic_stringstream" = type { %"class.std::__1::basic_iostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_iostream.base" = type { %"class.std::__1::basic_istream.base", %"class.std::__1::basic_ostream.base" }
%"class.std::__1::basic_istream.base" = type { i32 (...)**, i64 }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_iostream" = type { %"class.std::__1::basic_istream.base", %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32, [4 x i8] }>
%"class.jingle_xmpp::XmlBuilder" = type { %"class.jingle_xmpp::XmlParseHandler", %"class.jingle_xmpp::XmlElement"*, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.4" }
%"class.jingle_xmpp::XmlParseHandler" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.jingle_xmpp::XmlElement"* }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::vector"* }
%"class.std::__1::vector" = type opaque

@_ZTVN11jingle_xmpp7XmlTextE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"class.jingle_xmpp::XmlText"*)* @_ZNK11jingle_xmpp7XmlText10IsTextImplEv to i8*), i8* bitcast (%"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlText"*)* @_ZNK11jingle_xmpp7XmlText13AsElementImplEv to i8*), i8* bitcast (%"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlText"*)* @_ZNK11jingle_xmpp7XmlText10AsTextImplEv to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmlText"*)* @_ZN11jingle_xmpp7XmlTextD2Ev to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmlText"*)* @_ZN11jingle_xmpp7XmlTextD0Ev to i8*)] }, align 8
@_ZTVN11jingle_xmpp10XmlElementE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"class.jingle_xmpp::XmlElement"*)* @_ZNK11jingle_xmpp10XmlElement10IsTextImplEv to i8*), i8* bitcast (%"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlElement"*)* @_ZNK11jingle_xmpp10XmlElement13AsElementImplEv to i8*), i8* bitcast (%"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlElement"*)* @_ZNK11jingle_xmpp10XmlElement10AsTextImplEv to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmlElement"*)* @_ZN11jingle_xmpp10XmlElementD2Ev to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmlElement"*)* @_ZN11jingle_xmpp10XmlElementD0Ev to i8*)] }, align 8
@_ZN11jingle_xmpp8QN_XMLNSE = external global %"struct.jingle_xmpp::StaticQName", align 8
@_ZN11jingle_xmpp9STR_EMPTYE = external constant [0 x i8], align 1
@_ZTVN11jingle_xmpp8XmlChildE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmlChild"*)* @_ZN11jingle_xmpp8XmlChildD2Ev to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmlChild"*)* @_ZN11jingle_xmpp8XmlChildD0Ev to i8*)] }, align 8
@_ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant { [5 x i8*], [5 x i8*], [5 x i8*] }, align 8
@_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant [10 x i8*], align 8
@_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE = external unnamed_addr constant { [16 x i8*] }, align 8

@_ZN11jingle_xmpp8XmlChildD1Ev = hidden unnamed_addr alias void (%"class.jingle_xmpp::XmlChild"*), void (%"class.jingle_xmpp::XmlChild"*)* @_ZN11jingle_xmpp8XmlChildD2Ev
@_ZN11jingle_xmpp7XmlTextD1Ev = hidden unnamed_addr alias void (%"class.jingle_xmpp::XmlText"*), void (%"class.jingle_xmpp::XmlText"*)* @_ZN11jingle_xmpp7XmlTextD2Ev
@_ZN11jingle_xmpp10XmlElementC1ERKNS_5QNameE = hidden unnamed_addr alias void (%"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::QName"*), void (%"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::QName"*)* @_ZN11jingle_xmpp10XmlElementC2ERKNS_5QNameE
@_ZN11jingle_xmpp10XmlElementC1ERKS0_ = hidden unnamed_addr alias void (%"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"*), void (%"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"*)* @_ZN11jingle_xmpp10XmlElementC2ERKS0_
@_ZN11jingle_xmpp10XmlElementC1ERKNS_5QNameEb = hidden unnamed_addr alias void (%"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::QName"*, i1), void (%"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::QName"*, i1)* @_ZN11jingle_xmpp10XmlElementC2ERKNS_5QNameEb
@_ZN11jingle_xmpp10XmlElementD1Ev = hidden unnamed_addr alias void (%"class.jingle_xmpp::XmlElement"*), void (%"class.jingle_xmpp::XmlElement"*)* @_ZN11jingle_xmpp10XmlElementD2Ev

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN11jingle_xmpp8XmlChildD2Ev(%"class.jingle_xmpp::XmlChild"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp8XmlChildD0Ev(%"class.jingle_xmpp::XmlChild"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @llvm.trap() #14
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK11jingle_xmpp7XmlText10IsTextImplEv(%"class.jingle_xmpp::XmlText"* nocapture readnone) unnamed_addr #0 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %"class.jingle_xmpp::XmlElement"* @_ZNK11jingle_xmpp7XmlText13AsElementImplEv(%"class.jingle_xmpp::XmlText"* nocapture readnone) unnamed_addr #0 align 2 {
  ret %"class.jingle_xmpp::XmlElement"* null
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"class.jingle_xmpp::XmlText"* @_ZNK11jingle_xmpp7XmlText10AsTextImplEv(%"class.jingle_xmpp::XmlText"* readnone returned) unnamed_addr #0 align 2 {
  ret %"class.jingle_xmpp::XmlText"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp7XmlText7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.jingle_xmpp::XmlText"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlText", %"class.jingle_xmpp::XmlText"* %0, i64 0, i32 1
  %4 = icmp eq %"class.std::__1::basic_string"* %3, %1
  br i1 %4, label %34, label %5

5:                                                ; preds = %2
  %6 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %6, i64 0, i32 1, i32 0
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  br i1 %9, label %24, label %14

14:                                               ; preds = %5
  br i1 %13, label %18, label %15

15:                                               ; preds = %14
  %16 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %17 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 24, i1 false) #15
  br label %34

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %3, i8* %20, i64 %22) #15
  br label %34

24:                                               ; preds = %5
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %30 = zext i8 %12 to i64
  %31 = select i1 %13, i8* %26, i8* %29
  %32 = select i1 %13, i64 %28, i64 %30
  %33 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %3, i8* %31, i64 %32) #15
  br label %34

34:                                               ; preds = %2, %15, %18, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp7XmlText13AddParsedTextEPKci(%"class.jingle_xmpp::XmlText"*, i8*, i32) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmlText", %"class.jingle_xmpp::XmlText"* %0, i64 0, i32 1
  %5 = sext i32 %2 to i64
  %6 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %4, i8* %1, i64 %5) #15
  ret void
}

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp7XmlText7AddTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.jingle_xmpp::XmlText"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlText", %"class.jingle_xmpp::XmlText"* %0, i64 0, i32 1
  %4 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %13 = zext i8 %6 to i64
  %14 = select i1 %7, i8* %9, i8* %12
  %15 = select i1 %7, i64 %11, i64 %13
  %16 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %3, i8* %14, i64 %15) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp7XmlTextD2Ev(%"class.jingle_xmpp::XmlText"* nocapture) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmlText", %"class.jingle_xmpp::XmlText"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN11jingle_xmpp7XmlTextE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlText", %"class.jingle_xmpp::XmlText"* %0, i64 0, i32 1
  %4 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  tail call void @_ZdlPv(i8* %10) #16
  br label %11

11:                                               ; preds = %1, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp7XmlTextD0Ev(%"class.jingle_xmpp::XmlText"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmlText", %"class.jingle_xmpp::XmlText"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN11jingle_xmpp7XmlTextE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlText", %"class.jingle_xmpp::XmlText"* %0, i64 0, i32 1
  %4 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  tail call void @_ZdlPv(i8* %10) #16
  br label %11

11:                                               ; preds = %1, %8
  %12 = bitcast %"class.jingle_xmpp::XmlText"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #16
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElementC2ERKNS_5QNameE(%"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::QName"* dereferenceable(48)) unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 0, i32 1
  store %"class.jingle_xmpp::XmlChild"* null, %"class.jingle_xmpp::XmlChild"** %4, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN11jingle_xmpp10XmlElementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %5 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 1
  tail call void @_ZN11jingle_xmpp5QNameC1ERKS0_(%"class.jingle_xmpp::QName"* %5, %"class.jingle_xmpp::QName"* dereferenceable(48) %1) #15
  %6 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 2
  %7 = bitcast %"class.jingle_xmpp::XmlAttr"** %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 33, i1 false)
  ret void
}

declare void @_ZN11jingle_xmpp5QNameC1ERKS0_(%"class.jingle_xmpp::QName"*, %"class.jingle_xmpp::QName"* dereferenceable(48)) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElementC2ERKS0_(%"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::XmlElement"* dereferenceable(104)) unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 0, i32 1
  store %"class.jingle_xmpp::XmlChild"* null, %"class.jingle_xmpp::XmlChild"** %4, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN11jingle_xmpp10XmlElementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %5 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %1, i64 0, i32 1
  tail call void @_ZN11jingle_xmpp5QNameC1ERKS0_(%"class.jingle_xmpp::QName"* %5, %"class.jingle_xmpp::QName"* dereferenceable(48) %6) #15
  %7 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 2
  %8 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 3
  %9 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 4
  %10 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 5
  %11 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 6
  %12 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %1, i64 0, i32 2
  %13 = bitcast %"class.jingle_xmpp::XmlAttr"** %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 33, i1 false)
  %14 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %12, align 8
  %15 = icmp eq %"class.jingle_xmpp::XmlAttr"* %14, null
  br i1 %15, label %45, label %16

16:                                               ; preds = %2, %38
  %17 = phi %"class.jingle_xmpp::XmlAttr"* [ %41, %38 ], [ %14, %2 ]
  %18 = phi %"class.jingle_xmpp::XmlAttr"** [ %20, %38 ], [ %7, %2 ]
  %19 = tail call i8* @_Znwm(i64 80) #16
  %20 = bitcast i8* %19 to %"class.jingle_xmpp::XmlAttr"**
  store %"class.jingle_xmpp::XmlAttr"* null, %"class.jingle_xmpp::XmlAttr"** %20, align 8
  %21 = getelementptr inbounds i8, i8* %19, i64 8
  %22 = bitcast i8* %21 to %"class.jingle_xmpp::QName"*
  %23 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %17, i64 0, i32 1
  tail call void @_ZN11jingle_xmpp5QNameC1ERKS0_(%"class.jingle_xmpp::QName"* %22, %"class.jingle_xmpp::QName"* dereferenceable(48) %23) #15
  %24 = getelementptr inbounds i8, i8* %19, i64 56
  %25 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %17, i64 0, i32 2
  %26 = bitcast %"class.std::__1::basic_string"* %25 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %27 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %26, i64 0, i32 1, i32 0
  %28 = load i8, i8* %27, align 1
  %29 = icmp slt i8 %28, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %16
  %31 = bitcast %"class.std::__1::basic_string"* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %31, i64 24, i1 false) #15
  br label %38

32:                                               ; preds = %16
  %33 = bitcast i8* %24 to %"class.std::__1::basic_string"*
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %25, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %33, i8* %35, i64 %37) #15
  br label %38

38:                                               ; preds = %30, %32
  %39 = bitcast %"class.jingle_xmpp::XmlAttr"** %18 to i8**
  store i8* %19, i8** %39, align 8
  %40 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %17, i64 0, i32 0
  %41 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %40, align 8
  %42 = icmp eq %"class.jingle_xmpp::XmlAttr"* %41, null
  br i1 %42, label %43, label %16

43:                                               ; preds = %38
  %44 = bitcast i8* %19 to %"class.jingle_xmpp::XmlAttr"*
  br label %45

45:                                               ; preds = %43, %2
  %46 = phi %"class.jingle_xmpp::XmlAttr"* [ %44, %43 ], [ null, %2 ]
  store %"class.jingle_xmpp::XmlAttr"* %46, %"class.jingle_xmpp::XmlAttr"** %8, align 8
  %47 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %1, i64 0, i32 4
  %48 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %47, align 8
  %49 = icmp eq %"class.jingle_xmpp::XmlChild"* %48, null
  br i1 %49, label %99, label %50

50:                                               ; preds = %45, %89
  %51 = phi %"class.jingle_xmpp::XmlChild"* [ %95, %89 ], [ %48, %45 ]
  %52 = phi %"class.jingle_xmpp::XmlChild"** [ %93, %89 ], [ %9, %45 ]
  %53 = bitcast %"class.jingle_xmpp::XmlChild"* %51 to i1 (%"class.jingle_xmpp::XmlChild"*)***
  %54 = load i1 (%"class.jingle_xmpp::XmlChild"*)**, i1 (%"class.jingle_xmpp::XmlChild"*)*** %53, align 8
  %55 = load i1 (%"class.jingle_xmpp::XmlChild"*)*, i1 (%"class.jingle_xmpp::XmlChild"*)** %54, align 8
  %56 = tail call zeroext i1 %55(%"class.jingle_xmpp::XmlChild"* nonnull %51) #15
  br i1 %56, label %57, label %81

57:                                               ; preds = %50
  %58 = tail call i8* @_Znwm(i64 40) #16
  %59 = bitcast %"class.jingle_xmpp::XmlChild"* %51 to %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)***
  %60 = load %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)*** %59, align 8
  %61 = getelementptr inbounds %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)** %60, i64 2
  %62 = load %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)** %61, align 8
  %63 = tail call %"class.jingle_xmpp::XmlText"* %62(%"class.jingle_xmpp::XmlChild"* nonnull %51) #15
  %64 = bitcast i8* %58 to i32 (...)***
  %65 = getelementptr inbounds i8, i8* %58, i64 8
  %66 = bitcast i8* %65 to %"class.jingle_xmpp::XmlChild"**
  store %"class.jingle_xmpp::XmlChild"* null, %"class.jingle_xmpp::XmlChild"** %66, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN11jingle_xmpp7XmlTextE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %64, align 8
  %67 = getelementptr inbounds i8, i8* %58, i64 16
  %68 = getelementptr inbounds %"class.jingle_xmpp::XmlText", %"class.jingle_xmpp::XmlText"* %63, i64 0, i32 1
  %69 = bitcast %"class.std::__1::basic_string"* %68 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %70 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %69, i64 0, i32 1, i32 0
  %71 = load i8, i8* %70, align 1
  %72 = icmp slt i8 %71, 0
  br i1 %72, label %75, label %73

73:                                               ; preds = %57
  %74 = bitcast %"class.std::__1::basic_string"* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %74, i64 24, i1 false) #15
  br label %89

75:                                               ; preds = %57
  %76 = bitcast i8* %67 to %"class.std::__1::basic_string"*
  %77 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %68, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = load i8*, i8** %77, align 8
  %79 = getelementptr inbounds %"class.jingle_xmpp::XmlText", %"class.jingle_xmpp::XmlText"* %63, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %80 = load i64, i64* %79, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %76, i8* %78, i64 %80) #15
  br label %89

81:                                               ; preds = %50
  %82 = tail call i8* @_Znwm(i64 104) #16
  %83 = bitcast i8* %82 to %"class.jingle_xmpp::XmlElement"*
  %84 = bitcast %"class.jingle_xmpp::XmlChild"* %51 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %85 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %84, align 8
  %86 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %85, i64 1
  %87 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %86, align 8
  %88 = tail call %"class.jingle_xmpp::XmlElement"* %87(%"class.jingle_xmpp::XmlChild"* nonnull %51) #15
  tail call void @_ZN11jingle_xmpp10XmlElementC2ERKS0_(%"class.jingle_xmpp::XmlElement"* nonnull %83, %"class.jingle_xmpp::XmlElement"* dereferenceable(104) %88)
  br label %89

89:                                               ; preds = %75, %73, %81
  %90 = phi i8* [ %82, %81 ], [ %58, %73 ], [ %58, %75 ]
  %91 = bitcast %"class.jingle_xmpp::XmlChild"** %52 to i8**
  store i8* %90, i8** %91, align 8
  %92 = getelementptr inbounds i8, i8* %90, i64 8
  %93 = bitcast i8* %92 to %"class.jingle_xmpp::XmlChild"**
  %94 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %51, i64 0, i32 1
  %95 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %94, align 8
  %96 = icmp eq %"class.jingle_xmpp::XmlChild"* %95, null
  br i1 %96, label %97, label %50

97:                                               ; preds = %89
  %98 = bitcast i8* %90 to %"class.jingle_xmpp::XmlChild"*
  br label %99

99:                                               ; preds = %97, %45
  %100 = phi %"class.jingle_xmpp::XmlChild"* [ %98, %97 ], [ null, %45 ]
  store %"class.jingle_xmpp::XmlChild"* %100, %"class.jingle_xmpp::XmlChild"** %10, align 8
  %101 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %1, i64 0, i32 6
  %102 = load i8, i8* %101, align 8, !range !2
  store i8 %102, i8* %11, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElementC2ERKNS_5QNameEb(%"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::QName"* dereferenceable(48), i1 zeroext) unnamed_addr #3 align 2 {
  %4 = alloca %"class.jingle_xmpp::QName", align 8
  %5 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 0, i32 1
  store %"class.jingle_xmpp::XmlChild"* null, %"class.jingle_xmpp::XmlChild"** %6, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN11jingle_xmpp10XmlElementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %7 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 1
  tail call void @_ZN11jingle_xmpp5QNameC1ERKS0_(%"class.jingle_xmpp::QName"* %7, %"class.jingle_xmpp::QName"* dereferenceable(48) %1) #15
  %8 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 2
  br i1 %2, label %9, label %30

9:                                                ; preds = %3
  %10 = tail call i8* @_Znwm(i64 80) #16
  %11 = bitcast i8* %10 to %"class.jingle_xmpp::XmlAttr"*
  %12 = bitcast %"class.jingle_xmpp::QName"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %12) #15
  call void @_ZN11jingle_xmpp5QNameC1ERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"* nonnull %4, %"struct.jingle_xmpp::StaticQName"* nonnull dereferenceable(16) @_ZN11jingle_xmpp8QN_XMLNSE) #15
  %13 = bitcast i8* %10 to %"class.jingle_xmpp::XmlAttr"**
  store %"class.jingle_xmpp::XmlAttr"* null, %"class.jingle_xmpp::XmlAttr"** %13, align 8
  %14 = getelementptr inbounds i8, i8* %10, i64 8
  %15 = bitcast i8* %14 to %"class.jingle_xmpp::QName"*
  call void @_ZN11jingle_xmpp5QNameC1ERKS0_(%"class.jingle_xmpp::QName"* %15, %"class.jingle_xmpp::QName"* nonnull dereferenceable(48) %4) #15
  %16 = getelementptr inbounds i8, i8* %10, i64 56
  %17 = bitcast %"class.jingle_xmpp::QName"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  br i1 %20, label %23, label %21

21:                                               ; preds = %9
  %22 = bitcast %"class.jingle_xmpp::QName"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %22, i64 24, i1 false) #15
  br label %29

23:                                               ; preds = %9
  %24 = bitcast i8* %16 to %"class.std::__1::basic_string"*
  %25 = getelementptr inbounds %"class.jingle_xmpp::QName", %"class.jingle_xmpp::QName"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %"class.jingle_xmpp::QName", %"class.jingle_xmpp::QName"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %24, i8* %26, i64 %28) #15
  br label %29

29:                                               ; preds = %21, %23
  call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* nonnull %4) #15
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %12) #15
  br label %30

30:                                               ; preds = %3, %29
  %31 = phi %"class.jingle_xmpp::XmlAttr"* [ %11, %29 ], [ null, %3 ]
  store %"class.jingle_xmpp::XmlAttr"* %31, %"class.jingle_xmpp::XmlAttr"** %8, align 8
  %32 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 3
  store %"class.jingle_xmpp::XmlAttr"* %31, %"class.jingle_xmpp::XmlAttr"** %32, align 8
  %33 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 4
  %34 = bitcast %"class.jingle_xmpp::XmlChild"** %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 17, i1 false)
  ret void
}

declare void @_ZN11jingle_xmpp5QNameC1ERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"*, %"struct.jingle_xmpp::StaticQName"* dereferenceable(16)) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"*) unnamed_addr #8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK11jingle_xmpp10XmlElement10IsTextImplEv(%"class.jingle_xmpp::XmlElement"* nocapture readnone) unnamed_addr #0 align 2 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"class.jingle_xmpp::XmlElement"* @_ZNK11jingle_xmpp10XmlElement13AsElementImplEv(%"class.jingle_xmpp::XmlElement"* readnone returned) unnamed_addr #0 align 2 {
  ret %"class.jingle_xmpp::XmlElement"* %0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %"class.jingle_xmpp::XmlText"* @_ZNK11jingle_xmpp10XmlElement10AsTextImplEv(%"class.jingle_xmpp::XmlElement"* nocapture readnone) unnamed_addr #0 align 2 {
  ret %"class.jingle_xmpp::XmlText"* null
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK11jingle_xmpp10XmlElement8BodyTextEv(%"class.std::__1::basic_string"* noalias sret, %"class.jingle_xmpp::XmlElement"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %1, i64 0, i32 4
  %4 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %3, align 8
  %5 = icmp eq %"class.jingle_xmpp::XmlChild"* %4, null
  br i1 %5, label %35, label %6

6:                                                ; preds = %2
  %7 = bitcast %"class.jingle_xmpp::XmlChild"* %4 to i1 (%"class.jingle_xmpp::XmlChild"*)***
  %8 = load i1 (%"class.jingle_xmpp::XmlChild"*)**, i1 (%"class.jingle_xmpp::XmlChild"*)*** %7, align 8
  %9 = load i1 (%"class.jingle_xmpp::XmlChild"*)*, i1 (%"class.jingle_xmpp::XmlChild"*)** %8, align 8
  %10 = tail call zeroext i1 %9(%"class.jingle_xmpp::XmlChild"* nonnull %4) #15
  br i1 %10, label %11, label %35

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %1, i64 0, i32 5
  %13 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %12, align 8
  %14 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %3, align 8
  %15 = icmp eq %"class.jingle_xmpp::XmlChild"* %13, %14
  br i1 %15, label %16, label %35

16:                                               ; preds = %11
  %17 = bitcast %"class.jingle_xmpp::XmlChild"* %13 to %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)***
  %18 = load %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)*** %17, align 8
  %19 = getelementptr inbounds %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)** %18, i64 2
  %20 = load %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)** %19, align 8
  %21 = tail call %"class.jingle_xmpp::XmlText"* %20(%"class.jingle_xmpp::XmlChild"* %13) #15
  %22 = getelementptr inbounds %"class.jingle_xmpp::XmlText", %"class.jingle_xmpp::XmlText"* %21, i64 0, i32 1
  %23 = bitcast %"class.std::__1::basic_string"* %22 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %23, i64 0, i32 1, i32 0
  %25 = load i8, i8* %24, align 1
  %26 = icmp slt i8 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %16
  %28 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %29 = bitcast %"class.std::__1::basic_string"* %22 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 24, i1 false) #15
  br label %37

30:                                               ; preds = %16
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds %"class.jingle_xmpp::XmlText", %"class.jingle_xmpp::XmlText"* %21, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %0, i8* %32, i64 %34) #15
  br label %37

35:                                               ; preds = %2, %11, %6
  %36 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 24, i1 false) #15
  br label %37

37:                                               ; preds = %30, %27, %35
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElement11SetBodyTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.jingle_xmpp::XmlElement"* nocapture, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #3 align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = zext i8 %5 to i64
  %10 = select i1 %6, i64 %8, i64 %9
  %11 = icmp eq i64 %10, 0
  %12 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 4
  %13 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %12, align 8
  %14 = icmp eq %"class.jingle_xmpp::XmlChild"* %13, null
  br i1 %11, label %15, label %27

15:                                               ; preds = %2
  br i1 %14, label %25, label %16

16:                                               ; preds = %15, %16
  %17 = phi %"class.jingle_xmpp::XmlChild"* [ %20, %16 ], [ %13, %15 ]
  %18 = bitcast %"class.jingle_xmpp::XmlChild"* %17 to void (%"class.jingle_xmpp::XmlChild"*)***
  %19 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %17, i64 0, i32 1
  %20 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %19, align 8
  %21 = load void (%"class.jingle_xmpp::XmlChild"*)**, void (%"class.jingle_xmpp::XmlChild"*)*** %18, align 8
  %22 = getelementptr inbounds void (%"class.jingle_xmpp::XmlChild"*)*, void (%"class.jingle_xmpp::XmlChild"*)** %21, i64 4
  %23 = load void (%"class.jingle_xmpp::XmlChild"*)*, void (%"class.jingle_xmpp::XmlChild"*)** %22, align 8
  tail call void %23(%"class.jingle_xmpp::XmlChild"* nonnull %17) #15
  %24 = icmp eq %"class.jingle_xmpp::XmlChild"* %20, null
  br i1 %24, label %25, label %16

25:                                               ; preds = %16, %15
  %26 = bitcast %"class.jingle_xmpp::XmlChild"** %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 16, i1 false) #15
  br label %88

27:                                               ; preds = %2
  br i1 %14, label %28, label %29

28:                                               ; preds = %27
  tail call void @_ZN11jingle_xmpp10XmlElement7AddTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.jingle_xmpp::XmlElement"* %0, %"class.std::__1::basic_string"* dereferenceable(24) %1)
  br label %88

29:                                               ; preds = %27
  %30 = bitcast %"class.jingle_xmpp::XmlChild"* %13 to i1 (%"class.jingle_xmpp::XmlChild"*)***
  %31 = load i1 (%"class.jingle_xmpp::XmlChild"*)**, i1 (%"class.jingle_xmpp::XmlChild"*)*** %30, align 8
  %32 = load i1 (%"class.jingle_xmpp::XmlChild"*)*, i1 (%"class.jingle_xmpp::XmlChild"*)** %31, align 8
  %33 = tail call zeroext i1 %32(%"class.jingle_xmpp::XmlChild"* nonnull %13) #15
  br i1 %33, label %34, label %72

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 5
  %36 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %35, align 8
  %37 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %12, align 8
  %38 = icmp eq %"class.jingle_xmpp::XmlChild"* %36, %37
  br i1 %38, label %39, label %74

39:                                               ; preds = %34
  %40 = bitcast %"class.jingle_xmpp::XmlChild"* %36 to %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)***
  %41 = load %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)*** %40, align 8
  %42 = getelementptr inbounds %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)** %41, i64 2
  %43 = load %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)** %42, align 8
  %44 = tail call %"class.jingle_xmpp::XmlText"* %43(%"class.jingle_xmpp::XmlChild"* %36) #15
  %45 = getelementptr inbounds %"class.jingle_xmpp::XmlText", %"class.jingle_xmpp::XmlText"* %44, i64 0, i32 1
  %46 = icmp eq %"class.std::__1::basic_string"* %45, %1
  br i1 %46, label %88, label %47

47:                                               ; preds = %39
  %48 = bitcast %"class.std::__1::basic_string"* %45 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  %52 = load i8, i8* %4, align 1
  %53 = icmp slt i8 %52, 0
  br i1 %51, label %63, label %54

54:                                               ; preds = %47
  br i1 %53, label %58, label %55

55:                                               ; preds = %54
  %56 = bitcast %"class.std::__1::basic_string"* %45 to i8*
  %57 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 24, i1 false) #15
  br label %88

58:                                               ; preds = %54
  %59 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = load i64, i64* %7, align 8
  %62 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %45, i8* %60, i64 %61) #15
  br label %88

63:                                               ; preds = %47
  %64 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  %66 = load i64, i64* %7, align 8
  %67 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %68 = zext i8 %52 to i64
  %69 = select i1 %53, i8* %65, i8* %67
  %70 = select i1 %53, i64 %66, i64 %68
  %71 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %45, i8* %69, i64 %70) #15
  br label %88

72:                                               ; preds = %29
  %73 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %12, align 8
  br label %74

74:                                               ; preds = %72, %34
  %75 = phi %"class.jingle_xmpp::XmlChild"* [ %73, %72 ], [ %37, %34 ]
  %76 = icmp eq %"class.jingle_xmpp::XmlChild"* %75, null
  br i1 %76, label %86, label %77

77:                                               ; preds = %74, %77
  %78 = phi %"class.jingle_xmpp::XmlChild"* [ %81, %77 ], [ %75, %74 ]
  %79 = bitcast %"class.jingle_xmpp::XmlChild"* %78 to void (%"class.jingle_xmpp::XmlChild"*)***
  %80 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %78, i64 0, i32 1
  %81 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %80, align 8
  %82 = load void (%"class.jingle_xmpp::XmlChild"*)**, void (%"class.jingle_xmpp::XmlChild"*)*** %79, align 8
  %83 = getelementptr inbounds void (%"class.jingle_xmpp::XmlChild"*)*, void (%"class.jingle_xmpp::XmlChild"*)** %82, i64 4
  %84 = load void (%"class.jingle_xmpp::XmlChild"*)*, void (%"class.jingle_xmpp::XmlChild"*)** %83, align 8
  tail call void %84(%"class.jingle_xmpp::XmlChild"* nonnull %78) #15
  %85 = icmp eq %"class.jingle_xmpp::XmlChild"* %81, null
  br i1 %85, label %86, label %77

86:                                               ; preds = %77, %74
  %87 = bitcast %"class.jingle_xmpp::XmlChild"** %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %87, i8 0, i64 16, i1 false) #15
  tail call void @_ZN11jingle_xmpp10XmlElement7AddTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.jingle_xmpp::XmlElement"* %0, %"class.std::__1::basic_string"* dereferenceable(24) %1)
  br label %88

88:                                               ; preds = %63, %58, %55, %39, %28, %86, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElement13ClearChildrenEv(%"class.jingle_xmpp::XmlElement"* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 4
  %3 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %2, align 8
  %4 = icmp eq %"class.jingle_xmpp::XmlChild"* %3, null
  br i1 %4, label %14, label %5

5:                                                ; preds = %1, %5
  %6 = phi %"class.jingle_xmpp::XmlChild"* [ %9, %5 ], [ %3, %1 ]
  %7 = bitcast %"class.jingle_xmpp::XmlChild"* %6 to void (%"class.jingle_xmpp::XmlChild"*)***
  %8 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %6, i64 0, i32 1
  %9 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %8, align 8
  %10 = load void (%"class.jingle_xmpp::XmlChild"*)**, void (%"class.jingle_xmpp::XmlChild"*)*** %7, align 8
  %11 = getelementptr inbounds void (%"class.jingle_xmpp::XmlChild"*)*, void (%"class.jingle_xmpp::XmlChild"*)** %10, i64 4
  %12 = load void (%"class.jingle_xmpp::XmlChild"*)*, void (%"class.jingle_xmpp::XmlChild"*)** %11, align 8
  tail call void %12(%"class.jingle_xmpp::XmlChild"* nonnull %6) #15
  %13 = icmp eq %"class.jingle_xmpp::XmlChild"* %9, null
  br i1 %13, label %14, label %5

14:                                               ; preds = %5, %1
  %15 = bitcast %"class.jingle_xmpp::XmlChild"** %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElement7AddTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.jingle_xmpp::XmlElement"* nocapture, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #3 align 2 {
  %3 = tail call i64 @strlen(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN11jingle_xmpp9STR_EMPTYE, i64 0, i64 0)) #15
  %4 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = zext i8 %6 to i64
  %11 = select i1 %7, i64 %9, i64 %10
  %12 = icmp eq i64 %3, %11
  br i1 %12, label %13, label %16

13:                                               ; preds = %2
  %14 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %1, i64 0, i64 -1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN11jingle_xmpp9STR_EMPTYE, i64 0, i64 0), i64 %3) #15
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %66, label %16

16:                                               ; preds = %2, %13
  %17 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 5
  %18 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %17, align 8
  %19 = icmp eq %"class.jingle_xmpp::XmlChild"* %18, null
  br i1 %19, label %43, label %20

20:                                               ; preds = %16
  %21 = bitcast %"class.jingle_xmpp::XmlChild"* %18 to i1 (%"class.jingle_xmpp::XmlChild"*)***
  %22 = load i1 (%"class.jingle_xmpp::XmlChild"*)**, i1 (%"class.jingle_xmpp::XmlChild"*)*** %21, align 8
  %23 = load i1 (%"class.jingle_xmpp::XmlChild"*)*, i1 (%"class.jingle_xmpp::XmlChild"*)** %22, align 8
  %24 = tail call zeroext i1 %23(%"class.jingle_xmpp::XmlChild"* nonnull %18) #15
  %25 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %17, align 8
  br i1 %24, label %26, label %43

26:                                               ; preds = %20
  %27 = bitcast %"class.jingle_xmpp::XmlChild"* %25 to %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)***
  %28 = load %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)*** %27, align 8
  %29 = getelementptr inbounds %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)** %28, i64 2
  %30 = load %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)** %29, align 8
  %31 = tail call %"class.jingle_xmpp::XmlText"* %30(%"class.jingle_xmpp::XmlChild"* %25) #15
  %32 = getelementptr inbounds %"class.jingle_xmpp::XmlText", %"class.jingle_xmpp::XmlText"* %31, i64 0, i32 1
  %33 = load i8, i8* %5, align 1
  %34 = icmp slt i8 %33, 0
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = load i64, i64* %8, align 8
  %38 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %39 = zext i8 %33 to i64
  %40 = select i1 %34, i8* %36, i8* %38
  %41 = select i1 %34, i64 %37, i64 %39
  %42 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %32, i8* %40, i64 %41) #15
  br label %66

43:                                               ; preds = %20, %16
  %44 = phi %"class.jingle_xmpp::XmlChild"* [ null, %16 ], [ %25, %20 ]
  %45 = icmp eq %"class.jingle_xmpp::XmlChild"* %44, null
  %46 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %44, i64 0, i32 1
  %47 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 4
  %48 = select i1 %45, %"class.jingle_xmpp::XmlChild"** %47, %"class.jingle_xmpp::XmlChild"** %46
  %49 = tail call i8* @_Znwm(i64 40) #16
  %50 = bitcast i8* %49 to i32 (...)***
  %51 = getelementptr inbounds i8, i8* %49, i64 8
  %52 = bitcast i8* %51 to %"class.jingle_xmpp::XmlChild"**
  store %"class.jingle_xmpp::XmlChild"* null, %"class.jingle_xmpp::XmlChild"** %52, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN11jingle_xmpp7XmlTextE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %50, align 8
  %53 = getelementptr inbounds i8, i8* %49, i64 16
  %54 = load i8, i8* %5, align 1
  %55 = icmp slt i8 %54, 0
  br i1 %55, label %58, label %56

56:                                               ; preds = %43
  %57 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %57, i64 24, i1 false) #15
  br label %63

58:                                               ; preds = %43
  %59 = bitcast i8* %53 to %"class.std::__1::basic_string"*
  %60 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = load i64, i64* %8, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %59, i8* %61, i64 %62) #15
  br label %63

63:                                               ; preds = %56, %58
  %64 = bitcast %"class.jingle_xmpp::XmlChild"** %48 to i8**
  store i8* %49, i8** %64, align 8
  %65 = bitcast %"class.jingle_xmpp::XmlChild"** %17 to i8**
  store i8* %49, i8** %65, align 8
  br label %66

66:                                               ; preds = %13, %63, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK11jingle_xmpp10XmlElement16FirstElementNameEv(%"class.jingle_xmpp::QName"* noalias sret, %"class.jingle_xmpp::XmlElement"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %1, i64 0, i32 4
  %4 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %3, align 8
  %5 = icmp eq %"class.jingle_xmpp::XmlChild"* %4, null
  br i1 %5, label %23, label %6

6:                                                ; preds = %2, %12
  %7 = phi %"class.jingle_xmpp::XmlChild"* [ %14, %12 ], [ %4, %2 ]
  %8 = bitcast %"class.jingle_xmpp::XmlChild"* %7 to i1 (%"class.jingle_xmpp::XmlChild"*)***
  %9 = load i1 (%"class.jingle_xmpp::XmlChild"*)**, i1 (%"class.jingle_xmpp::XmlChild"*)*** %8, align 8
  %10 = load i1 (%"class.jingle_xmpp::XmlChild"*)*, i1 (%"class.jingle_xmpp::XmlChild"*)** %9, align 8
  %11 = tail call zeroext i1 %10(%"class.jingle_xmpp::XmlChild"* nonnull %7) #15
  br i1 %11, label %12, label %16

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %7, i64 0, i32 1
  %14 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %13, align 8
  %15 = icmp eq %"class.jingle_xmpp::XmlChild"* %14, null
  br i1 %15, label %23, label %6

16:                                               ; preds = %6
  %17 = bitcast %"class.jingle_xmpp::XmlChild"* %7 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %18 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %17, align 8
  %19 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %18, i64 1
  %20 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %19, align 8
  %21 = tail call %"class.jingle_xmpp::XmlElement"* %20(%"class.jingle_xmpp::XmlChild"* nonnull %7) #15
  %22 = icmp eq %"class.jingle_xmpp::XmlElement"* %21, null
  br i1 %22, label %23, label %24

23:                                               ; preds = %12, %2, %16
  tail call void @_ZN11jingle_xmpp5QNameC1Ev(%"class.jingle_xmpp::QName"* %0) #15
  br label %26

24:                                               ; preds = %16
  %25 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %21, i64 0, i32 1
  tail call void @_ZN11jingle_xmpp5QNameC1ERKS0_(%"class.jingle_xmpp::QName"* %0, %"class.jingle_xmpp::QName"* dereferenceable(48) %25) #15
  br label %26

26:                                               ; preds = %24, %23
  ret void
}

declare void @_ZN11jingle_xmpp5QNameC1Ev(%"class.jingle_xmpp::QName"*) unnamed_addr #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.jingle_xmpp::XmlAttr"* @_ZN11jingle_xmpp10XmlElement9FirstAttrEv(%"class.jingle_xmpp::XmlElement"* nocapture readonly) local_unnamed_addr #9 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 2
  %3 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %2, align 8
  ret %"class.jingle_xmpp::XmlAttr"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK11jingle_xmpp10XmlElement4AttrERKNS_11StaticQNameE(%"class.std::__1::basic_string"* noalias sret, %"class.jingle_xmpp::XmlElement"* nocapture readonly, %"struct.jingle_xmpp::StaticQName"* dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %1, i64 0, i32 2
  %5 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %4, align 8
  %6 = icmp eq %"class.jingle_xmpp::XmlAttr"* %5, null
  br i1 %6, label %30, label %7

7:                                                ; preds = %3, %26
  %8 = phi %"class.jingle_xmpp::XmlAttr"* [ %28, %26 ], [ %5, %3 ]
  %9 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %8, i64 0, i32 1
  %10 = tail call i32 @_ZNK11jingle_xmpp5QName7CompareERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"* %9, %"struct.jingle_xmpp::StaticQName"* dereferenceable(16) %2) #15
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %26

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %8, i64 0, i32 2
  %14 = bitcast %"class.std::__1::basic_string"* %13 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %14, i64 0, i32 1, i32 0
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %20 = bitcast %"class.std::__1::basic_string"* %13 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 24, i1 false) #15
  br label %32

21:                                               ; preds = %12
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %0, i8* %23, i64 %25) #15
  br label %32

26:                                               ; preds = %7
  %27 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %8, i64 0, i32 0
  %28 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %27, align 8
  %29 = icmp eq %"class.jingle_xmpp::XmlAttr"* %28, null
  br i1 %29, label %30, label %7

30:                                               ; preds = %26, %3
  %31 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 24, i1 false) #15
  br label %32

32:                                               ; preds = %21, %18, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK11jingle_xmpp10XmlElement4AttrERKNS_5QNameE(%"class.std::__1::basic_string"* noalias sret, %"class.jingle_xmpp::XmlElement"* nocapture readonly, %"class.jingle_xmpp::QName"* dereferenceable(48)) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %1, i64 0, i32 2
  %5 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %4, align 8
  %6 = icmp eq %"class.jingle_xmpp::XmlAttr"* %5, null
  br i1 %6, label %30, label %7

7:                                                ; preds = %3, %26
  %8 = phi %"class.jingle_xmpp::XmlAttr"* [ %28, %26 ], [ %5, %3 ]
  %9 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %8, i64 0, i32 1
  %10 = tail call i32 @_ZNK11jingle_xmpp5QName7CompareERKS0_(%"class.jingle_xmpp::QName"* %9, %"class.jingle_xmpp::QName"* dereferenceable(48) %2) #15
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %26

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %8, i64 0, i32 2
  %14 = bitcast %"class.std::__1::basic_string"* %13 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %14, i64 0, i32 1, i32 0
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %20 = bitcast %"class.std::__1::basic_string"* %13 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 24, i1 false) #15
  br label %32

21:                                               ; preds = %12
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %0, i8* %23, i64 %25) #15
  br label %32

26:                                               ; preds = %7
  %27 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %8, i64 0, i32 0
  %28 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %27, align 8
  %29 = icmp eq %"class.jingle_xmpp::XmlAttr"* %28, null
  br i1 %29, label %30, label %7

30:                                               ; preds = %26, %3
  %31 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 24, i1 false) #15
  br label %32

32:                                               ; preds = %21, %18, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK11jingle_xmpp10XmlElement7HasAttrERKNS_11StaticQNameE(%"class.jingle_xmpp::XmlElement"* nocapture readonly, %"struct.jingle_xmpp::StaticQName"* dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 2
  %4 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %3, align 8
  %5 = icmp eq %"class.jingle_xmpp::XmlAttr"* %4, null
  br i1 %5, label %15, label %10

6:                                                ; preds = %10
  %7 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %11, i64 0, i32 0
  %8 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %7, align 8
  %9 = icmp eq %"class.jingle_xmpp::XmlAttr"* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %2, %6
  %11 = phi %"class.jingle_xmpp::XmlAttr"* [ %8, %6 ], [ %4, %2 ]
  %12 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %11, i64 0, i32 1
  %13 = tail call i32 @_ZNK11jingle_xmpp5QName7CompareERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"* %12, %"struct.jingle_xmpp::StaticQName"* dereferenceable(16) %1) #15
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %6

15:                                               ; preds = %10, %6, %2
  %16 = phi i1 [ false, %2 ], [ false, %6 ], [ true, %10 ]
  ret i1 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK11jingle_xmpp10XmlElement7HasAttrERKNS_5QNameE(%"class.jingle_xmpp::XmlElement"* nocapture readonly, %"class.jingle_xmpp::QName"* dereferenceable(48)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 2
  %4 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %3, align 8
  %5 = icmp eq %"class.jingle_xmpp::XmlAttr"* %4, null
  br i1 %5, label %15, label %10

6:                                                ; preds = %10
  %7 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %11, i64 0, i32 0
  %8 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %7, align 8
  %9 = icmp eq %"class.jingle_xmpp::XmlAttr"* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %2, %6
  %11 = phi %"class.jingle_xmpp::XmlAttr"* [ %8, %6 ], [ %4, %2 ]
  %12 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %11, i64 0, i32 1
  %13 = tail call i32 @_ZNK11jingle_xmpp5QName7CompareERKS0_(%"class.jingle_xmpp::QName"* %12, %"class.jingle_xmpp::QName"* dereferenceable(48) %1) #15
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %6

15:                                               ; preds = %10, %6, %2
  %16 = phi i1 [ false, %2 ], [ false, %6 ], [ true, %10 ]
  ret i1 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElement7SetAttrERKNS_5QNameERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.jingle_xmpp::XmlElement"* nocapture, %"class.jingle_xmpp::QName"* dereferenceable(48), %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 2
  %5 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %4, align 8
  %6 = icmp eq %"class.jingle_xmpp::XmlAttr"* %5, null
  br i1 %6, label %16, label %7

7:                                                ; preds = %3, %12
  %8 = phi %"class.jingle_xmpp::XmlAttr"* [ %14, %12 ], [ %5, %3 ]
  %9 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %8, i64 0, i32 1
  %10 = tail call i32 @_ZNK11jingle_xmpp5QName7CompareERKS0_(%"class.jingle_xmpp::QName"* %9, %"class.jingle_xmpp::QName"* dereferenceable(48) %1) #15
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %42, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %8, i64 0, i32 0
  %14 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %13, align 8
  %15 = icmp eq %"class.jingle_xmpp::XmlAttr"* %14, null
  br i1 %15, label %16, label %7

16:                                               ; preds = %12, %3
  %17 = tail call i8* @_Znwm(i64 80) #16
  %18 = bitcast i8* %17 to %"class.jingle_xmpp::XmlAttr"**
  store %"class.jingle_xmpp::XmlAttr"* null, %"class.jingle_xmpp::XmlAttr"** %18, align 8
  %19 = getelementptr inbounds i8, i8* %17, i64 8
  %20 = bitcast i8* %19 to %"class.jingle_xmpp::QName"*
  tail call void @_ZN11jingle_xmpp5QNameC1ERKS0_(%"class.jingle_xmpp::QName"* %20, %"class.jingle_xmpp::QName"* dereferenceable(48) %1) #15
  %21 = getelementptr inbounds i8, i8* %17, i64 56
  %22 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  %24 = load i8, i8* %23, align 1
  %25 = icmp slt i8 %24, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %16
  %27 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %27, i64 24, i1 false) #15
  br label %34

28:                                               ; preds = %16
  %29 = bitcast i8* %21 to %"class.std::__1::basic_string"*
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %29, i8* %31, i64 %33) #15
  br label %34

34:                                               ; preds = %26, %28
  %35 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 3
  %36 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %35, align 8
  %37 = icmp eq %"class.jingle_xmpp::XmlAttr"* %36, null
  %38 = bitcast %"class.jingle_xmpp::XmlAttr"** %4 to i8**
  %39 = bitcast %"class.jingle_xmpp::XmlAttr"* %36 to i8**
  %40 = select i1 %37, i8** %38, i8** %39
  store i8* %17, i8** %40, align 8
  %41 = bitcast %"class.jingle_xmpp::XmlAttr"** %35 to i8**
  store i8* %17, i8** %41, align 8
  br label %74

42:                                               ; preds = %7
  %43 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %8, i64 0, i32 2
  %44 = icmp eq %"class.std::__1::basic_string"* %43, %2
  br i1 %44, label %74, label %45

45:                                               ; preds = %42
  %46 = bitcast %"class.std::__1::basic_string"* %43 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %46, i64 0, i32 1, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp slt i8 %48, 0
  %50 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %50, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  br i1 %49, label %64, label %54

54:                                               ; preds = %45
  br i1 %53, label %58, label %55

55:                                               ; preds = %54
  %56 = bitcast %"class.std::__1::basic_string"* %43 to i8*
  %57 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 24, i1 false) #15
  br label %74

58:                                               ; preds = %54
  %59 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %43, i8* %60, i64 %62) #15
  br label %74

64:                                               ; preds = %45
  %65 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  %70 = zext i8 %52 to i64
  %71 = select i1 %53, i8* %66, i8* %69
  %72 = select i1 %53, i64 %68, i64 %70
  %73 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %43, i8* %71, i64 %72) #15
  br label %74

74:                                               ; preds = %64, %58, %55, %42, %34
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElement9ClearAttrERKNS_5QNameE(%"class.jingle_xmpp::XmlElement"* nocapture, %"class.jingle_xmpp::QName"* dereferenceable(48)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 2
  %4 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %3, align 8
  %5 = icmp eq %"class.jingle_xmpp::XmlAttr"* %4, null
  br i1 %5, label %44, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %4, i64 0, i32 1
  %8 = tail call i32 @_ZNK11jingle_xmpp5QName7CompareERKS0_(%"class.jingle_xmpp::QName"* %7, %"class.jingle_xmpp::QName"* dereferenceable(48) %1) #15
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %19, label %14

10:                                               ; preds = %14
  %11 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %17, i64 0, i32 1
  %12 = tail call i32 @_ZNK11jingle_xmpp5QName7CompareERKS0_(%"class.jingle_xmpp::QName"* %11, %"class.jingle_xmpp::QName"* dereferenceable(48) %1) #15
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %6, %10
  %15 = phi %"class.jingle_xmpp::XmlAttr"* [ %17, %10 ], [ %4, %6 ]
  %16 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %15, i64 0, i32 0
  %17 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %16, align 8
  %18 = icmp eq %"class.jingle_xmpp::XmlAttr"* %17, null
  br i1 %18, label %44, label %10

19:                                               ; preds = %10, %6
  %20 = phi %"class.jingle_xmpp::XmlAttr"* [ %4, %6 ], [ %17, %10 ]
  %21 = phi %"class.jingle_xmpp::XmlAttr"* [ null, %6 ], [ %15, %10 ]
  %22 = phi %"class.jingle_xmpp::QName"* [ %7, %6 ], [ %11, %10 ]
  %23 = icmp eq %"class.jingle_xmpp::XmlAttr"* %21, null
  %24 = bitcast %"class.jingle_xmpp::XmlAttr"* %20 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.jingle_xmpp::XmlAttr"* %21 to i64*
  %27 = bitcast %"class.jingle_xmpp::XmlAttr"** %3 to i64*
  %28 = select i1 %23, i64* %27, i64* %26
  store i64 %25, i64* %28, align 8
  %29 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 3
  %30 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %29, align 8
  %31 = icmp eq %"class.jingle_xmpp::XmlAttr"* %30, %20
  br i1 %31, label %32, label %33

32:                                               ; preds = %19
  store %"class.jingle_xmpp::XmlAttr"* %21, %"class.jingle_xmpp::XmlAttr"** %29, align 8
  br label %33

33:                                               ; preds = %19, %32
  %34 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %20, i64 0, i32 2
  %35 = bitcast %"class.std::__1::basic_string"* %34 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %36 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %35, i64 0, i32 1, i32 0
  %37 = load i8, i8* %36, align 1
  %38 = icmp slt i8 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %33
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %34, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  tail call void @_ZdlPv(i8* %41) #16
  br label %42

42:                                               ; preds = %33, %39
  tail call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* %22) #15
  %43 = bitcast %"class.jingle_xmpp::XmlAttr"* %20 to i8*
  tail call void @_ZdlPv(i8* %43) #16
  br label %44

44:                                               ; preds = %14, %2, %42
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.jingle_xmpp::XmlChild"* @_ZN11jingle_xmpp10XmlElement10FirstChildEv(%"class.jingle_xmpp::XmlElement"* nocapture readonly) local_unnamed_addr #9 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 4
  %3 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %2, align 8
  ret %"class.jingle_xmpp::XmlChild"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlElement12FirstElementEv(%"class.jingle_xmpp::XmlElement"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 4
  %3 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %2, align 8
  %4 = icmp eq %"class.jingle_xmpp::XmlChild"* %3, null
  br i1 %4, label %21, label %5

5:                                                ; preds = %1, %17
  %6 = phi %"class.jingle_xmpp::XmlChild"* [ %19, %17 ], [ %3, %1 ]
  %7 = bitcast %"class.jingle_xmpp::XmlChild"* %6 to i1 (%"class.jingle_xmpp::XmlChild"*)***
  %8 = load i1 (%"class.jingle_xmpp::XmlChild"*)**, i1 (%"class.jingle_xmpp::XmlChild"*)*** %7, align 8
  %9 = load i1 (%"class.jingle_xmpp::XmlChild"*)*, i1 (%"class.jingle_xmpp::XmlChild"*)** %8, align 8
  %10 = tail call zeroext i1 %9(%"class.jingle_xmpp::XmlChild"* nonnull %6) #15
  br i1 %10, label %17, label %11

11:                                               ; preds = %5
  %12 = bitcast %"class.jingle_xmpp::XmlChild"* %6 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %13 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %13, i64 1
  %15 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %14, align 8
  %16 = tail call %"class.jingle_xmpp::XmlElement"* %15(%"class.jingle_xmpp::XmlChild"* nonnull %6) #15
  br label %21

17:                                               ; preds = %5
  %18 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %6, i64 0, i32 1
  %19 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %18, align 8
  %20 = icmp eq %"class.jingle_xmpp::XmlChild"* %19, null
  br i1 %20, label %21, label %5

21:                                               ; preds = %17, %1, %11
  %22 = phi %"class.jingle_xmpp::XmlElement"* [ %16, %11 ], [ null, %1 ], [ null, %17 ]
  ret %"class.jingle_xmpp::XmlElement"* %22
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlElement11NextElementEv(%"class.jingle_xmpp::XmlElement"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 0, i32 1
  %3 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %2, align 8
  %4 = icmp eq %"class.jingle_xmpp::XmlChild"* %3, null
  br i1 %4, label %21, label %5

5:                                                ; preds = %1, %17
  %6 = phi %"class.jingle_xmpp::XmlChild"* [ %19, %17 ], [ %3, %1 ]
  %7 = bitcast %"class.jingle_xmpp::XmlChild"* %6 to i1 (%"class.jingle_xmpp::XmlChild"*)***
  %8 = load i1 (%"class.jingle_xmpp::XmlChild"*)**, i1 (%"class.jingle_xmpp::XmlChild"*)*** %7, align 8
  %9 = load i1 (%"class.jingle_xmpp::XmlChild"*)*, i1 (%"class.jingle_xmpp::XmlChild"*)** %8, align 8
  %10 = tail call zeroext i1 %9(%"class.jingle_xmpp::XmlChild"* nonnull %6) #15
  br i1 %10, label %17, label %11

11:                                               ; preds = %5
  %12 = bitcast %"class.jingle_xmpp::XmlChild"* %6 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %13 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %13, i64 1
  %15 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %14, align 8
  %16 = tail call %"class.jingle_xmpp::XmlElement"* %15(%"class.jingle_xmpp::XmlChild"* nonnull %6) #15
  br label %21

17:                                               ; preds = %5
  %18 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %6, i64 0, i32 1
  %19 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %18, align 8
  %20 = icmp eq %"class.jingle_xmpp::XmlChild"* %19, null
  br i1 %20, label %21, label %5

21:                                               ; preds = %17, %1, %11
  %22 = phi %"class.jingle_xmpp::XmlElement"* [ %16, %11 ], [ null, %1 ], [ null, %17 ]
  ret %"class.jingle_xmpp::XmlElement"* %22
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlElement18FirstWithNamespaceERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.jingle_xmpp::XmlElement"* nocapture readonly, %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 4
  %4 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %3, align 8
  %5 = icmp eq %"class.jingle_xmpp::XmlChild"* %4, null
  br i1 %5, label %79, label %6

6:                                                ; preds = %2
  %7 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %7, i64 0, i32 1, i32 0
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  br label %12

12:                                               ; preds = %6, %75
  %13 = phi %"class.jingle_xmpp::XmlChild"* [ %4, %6 ], [ %77, %75 ]
  %14 = bitcast %"class.jingle_xmpp::XmlChild"* %13 to i1 (%"class.jingle_xmpp::XmlChild"*)***
  %15 = load i1 (%"class.jingle_xmpp::XmlChild"*)**, i1 (%"class.jingle_xmpp::XmlChild"*)*** %14, align 8
  %16 = load i1 (%"class.jingle_xmpp::XmlChild"*)*, i1 (%"class.jingle_xmpp::XmlChild"*)** %15, align 8
  %17 = tail call zeroext i1 %16(%"class.jingle_xmpp::XmlChild"* nonnull %13) #15
  br i1 %17, label %75, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.jingle_xmpp::XmlChild"* %13 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %20 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %19, align 8
  %21 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %20, i64 1
  %22 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %21, align 8
  %23 = tail call %"class.jingle_xmpp::XmlElement"* %22(%"class.jingle_xmpp::XmlChild"* nonnull %13) #15
  %24 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %23, i64 0, i32 1, i32 0
  %25 = bitcast %"class.std::__1::basic_string"* %24 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %26 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %25, i64 0, i32 1, i32 0
  %27 = load i8, i8* %26, align 1
  %28 = icmp slt i8 %27, 0
  %29 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %23, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = zext i8 %27 to i64
  %32 = select i1 %28, i64 %30, i64 %31
  %33 = load i8, i8* %8, align 1
  %34 = icmp slt i8 %33, 0
  %35 = load i64, i64* %9, align 8
  %36 = zext i8 %33 to i64
  %37 = select i1 %34, i64 %35, i64 %36
  %38 = icmp eq i64 %32, %37
  br i1 %38, label %39, label %75

39:                                               ; preds = %18
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %24 to i8*
  %43 = select i1 %28, i8* %41, i8* %42
  %44 = load i8*, i8** %10, align 8
  %45 = select i1 %34, i8* %44, i8* %11
  %46 = icmp eq i64 %32, 0
  br i1 %28, label %53, label %47

47:                                               ; preds = %39
  br i1 %46, label %69, label %48

48:                                               ; preds = %47
  %49 = ptrtoint i8* %41 to i64
  %50 = trunc i64 %49 to i8
  %51 = load i8, i8* %45, align 1
  %52 = icmp eq i8 %51, %50
  br i1 %52, label %54, label %75

53:                                               ; preds = %39
  br i1 %46, label %69, label %66

54:                                               ; preds = %48, %61
  %55 = phi i64 [ %58, %61 ], [ %31, %48 ]
  %56 = phi i8* [ %59, %61 ], [ %42, %48 ]
  %57 = phi i8* [ %62, %61 ], [ %45, %48 ]
  %58 = add i64 %55, -1
  %59 = getelementptr inbounds i8, i8* %56, i64 1
  %60 = icmp eq i64 %58, 0
  br i1 %60, label %69, label %61

61:                                               ; preds = %54
  %62 = getelementptr inbounds i8, i8* %57, i64 1
  %63 = load i8, i8* %59, align 1
  %64 = load i8, i8* %62, align 1
  %65 = icmp eq i8 %63, %64
  br i1 %65, label %54, label %75

66:                                               ; preds = %53
  %67 = tail call i32 @bcmp(i8* %43, i8* %45, i64 %32) #15
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %75

69:                                               ; preds = %47, %53, %66, %54
  %70 = bitcast %"class.jingle_xmpp::XmlChild"* %13 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %71 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %70, align 8
  %72 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %71, i64 1
  %73 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %72, align 8
  %74 = tail call %"class.jingle_xmpp::XmlElement"* %73(%"class.jingle_xmpp::XmlChild"* nonnull %13) #15
  br label %79

75:                                               ; preds = %61, %48, %18, %12, %66
  %76 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %13, i64 0, i32 1
  %77 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %76, align 8
  %78 = icmp eq %"class.jingle_xmpp::XmlChild"* %77, null
  br i1 %78, label %79, label %12

79:                                               ; preds = %75, %2, %69
  %80 = phi %"class.jingle_xmpp::XmlElement"* [ %74, %69 ], [ null, %2 ], [ null, %75 ]
  ret %"class.jingle_xmpp::XmlElement"* %80
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlElement17NextWithNamespaceERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.jingle_xmpp::XmlElement"* nocapture readonly, %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 0, i32 1
  %4 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %3, align 8
  %5 = icmp eq %"class.jingle_xmpp::XmlChild"* %4, null
  br i1 %5, label %79, label %6

6:                                                ; preds = %2
  %7 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %7, i64 0, i32 1, i32 0
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  br label %12

12:                                               ; preds = %6, %75
  %13 = phi %"class.jingle_xmpp::XmlChild"* [ %4, %6 ], [ %77, %75 ]
  %14 = bitcast %"class.jingle_xmpp::XmlChild"* %13 to i1 (%"class.jingle_xmpp::XmlChild"*)***
  %15 = load i1 (%"class.jingle_xmpp::XmlChild"*)**, i1 (%"class.jingle_xmpp::XmlChild"*)*** %14, align 8
  %16 = load i1 (%"class.jingle_xmpp::XmlChild"*)*, i1 (%"class.jingle_xmpp::XmlChild"*)** %15, align 8
  %17 = tail call zeroext i1 %16(%"class.jingle_xmpp::XmlChild"* nonnull %13) #15
  br i1 %17, label %75, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.jingle_xmpp::XmlChild"* %13 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %20 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %19, align 8
  %21 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %20, i64 1
  %22 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %21, align 8
  %23 = tail call %"class.jingle_xmpp::XmlElement"* %22(%"class.jingle_xmpp::XmlChild"* nonnull %13) #15
  %24 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %23, i64 0, i32 1, i32 0
  %25 = bitcast %"class.std::__1::basic_string"* %24 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %26 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %25, i64 0, i32 1, i32 0
  %27 = load i8, i8* %26, align 1
  %28 = icmp slt i8 %27, 0
  %29 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %23, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = zext i8 %27 to i64
  %32 = select i1 %28, i64 %30, i64 %31
  %33 = load i8, i8* %8, align 1
  %34 = icmp slt i8 %33, 0
  %35 = load i64, i64* %9, align 8
  %36 = zext i8 %33 to i64
  %37 = select i1 %34, i64 %35, i64 %36
  %38 = icmp eq i64 %32, %37
  br i1 %38, label %39, label %75

39:                                               ; preds = %18
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %24 to i8*
  %43 = select i1 %28, i8* %41, i8* %42
  %44 = load i8*, i8** %10, align 8
  %45 = select i1 %34, i8* %44, i8* %11
  %46 = icmp eq i64 %32, 0
  br i1 %28, label %53, label %47

47:                                               ; preds = %39
  br i1 %46, label %69, label %48

48:                                               ; preds = %47
  %49 = ptrtoint i8* %41 to i64
  %50 = trunc i64 %49 to i8
  %51 = load i8, i8* %45, align 1
  %52 = icmp eq i8 %51, %50
  br i1 %52, label %54, label %75

53:                                               ; preds = %39
  br i1 %46, label %69, label %66

54:                                               ; preds = %48, %61
  %55 = phi i64 [ %58, %61 ], [ %31, %48 ]
  %56 = phi i8* [ %59, %61 ], [ %42, %48 ]
  %57 = phi i8* [ %62, %61 ], [ %45, %48 ]
  %58 = add i64 %55, -1
  %59 = getelementptr inbounds i8, i8* %56, i64 1
  %60 = icmp eq i64 %58, 0
  br i1 %60, label %69, label %61

61:                                               ; preds = %54
  %62 = getelementptr inbounds i8, i8* %57, i64 1
  %63 = load i8, i8* %59, align 1
  %64 = load i8, i8* %62, align 1
  %65 = icmp eq i8 %63, %64
  br i1 %65, label %54, label %75

66:                                               ; preds = %53
  %67 = tail call i32 @bcmp(i8* %43, i8* %45, i64 %32) #15
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %75

69:                                               ; preds = %47, %53, %66, %54
  %70 = bitcast %"class.jingle_xmpp::XmlChild"* %13 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %71 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %70, align 8
  %72 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %71, i64 1
  %73 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %72, align 8
  %74 = tail call %"class.jingle_xmpp::XmlElement"* %73(%"class.jingle_xmpp::XmlChild"* nonnull %13) #15
  br label %79

75:                                               ; preds = %61, %48, %18, %12, %66
  %76 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %13, i64 0, i32 1
  %77 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %76, align 8
  %78 = icmp eq %"class.jingle_xmpp::XmlChild"* %77, null
  br i1 %78, label %79, label %12

79:                                               ; preds = %75, %2, %69
  %80 = phi %"class.jingle_xmpp::XmlElement"* [ %74, %69 ], [ null, %2 ], [ null, %75 ]
  ret %"class.jingle_xmpp::XmlElement"* %80
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlElement10FirstNamedERKNS_5QNameE(%"class.jingle_xmpp::XmlElement"* nocapture readonly, %"class.jingle_xmpp::QName"* dereferenceable(48)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 4
  %4 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %3, align 8
  %5 = icmp eq %"class.jingle_xmpp::XmlChild"* %4, null
  br i1 %5, label %31, label %6

6:                                                ; preds = %2, %27
  %7 = phi %"class.jingle_xmpp::XmlChild"* [ %29, %27 ], [ %4, %2 ]
  %8 = bitcast %"class.jingle_xmpp::XmlChild"* %7 to i1 (%"class.jingle_xmpp::XmlChild"*)***
  %9 = load i1 (%"class.jingle_xmpp::XmlChild"*)**, i1 (%"class.jingle_xmpp::XmlChild"*)*** %8, align 8
  %10 = load i1 (%"class.jingle_xmpp::XmlChild"*)*, i1 (%"class.jingle_xmpp::XmlChild"*)** %9, align 8
  %11 = tail call zeroext i1 %10(%"class.jingle_xmpp::XmlChild"* nonnull %7) #15
  br i1 %11, label %27, label %12

12:                                               ; preds = %6
  %13 = bitcast %"class.jingle_xmpp::XmlChild"* %7 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %14 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %13, align 8
  %15 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %14, i64 1
  %16 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %15, align 8
  %17 = tail call %"class.jingle_xmpp::XmlElement"* %16(%"class.jingle_xmpp::XmlChild"* nonnull %7) #15
  %18 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %17, i64 0, i32 1
  %19 = tail call i32 @_ZNK11jingle_xmpp5QName7CompareERKS0_(%"class.jingle_xmpp::QName"* %18, %"class.jingle_xmpp::QName"* dereferenceable(48) %1) #15
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %27

21:                                               ; preds = %12
  %22 = bitcast %"class.jingle_xmpp::XmlChild"* %7 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %23 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %22, align 8
  %24 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %23, i64 1
  %25 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %24, align 8
  %26 = tail call %"class.jingle_xmpp::XmlElement"* %25(%"class.jingle_xmpp::XmlChild"* nonnull %7) #15
  br label %31

27:                                               ; preds = %6, %12
  %28 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %7, i64 0, i32 1
  %29 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %28, align 8
  %30 = icmp eq %"class.jingle_xmpp::XmlChild"* %29, null
  br i1 %30, label %31, label %6

31:                                               ; preds = %27, %2, %21
  %32 = phi %"class.jingle_xmpp::XmlElement"* [ %26, %21 ], [ null, %2 ], [ null, %27 ]
  ret %"class.jingle_xmpp::XmlElement"* %32
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlElement10FirstNamedERKNS_11StaticQNameE(%"class.jingle_xmpp::XmlElement"* nocapture readonly, %"struct.jingle_xmpp::StaticQName"* dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 4
  %4 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %3, align 8
  %5 = icmp eq %"class.jingle_xmpp::XmlChild"* %4, null
  br i1 %5, label %31, label %6

6:                                                ; preds = %2, %27
  %7 = phi %"class.jingle_xmpp::XmlChild"* [ %29, %27 ], [ %4, %2 ]
  %8 = bitcast %"class.jingle_xmpp::XmlChild"* %7 to i1 (%"class.jingle_xmpp::XmlChild"*)***
  %9 = load i1 (%"class.jingle_xmpp::XmlChild"*)**, i1 (%"class.jingle_xmpp::XmlChild"*)*** %8, align 8
  %10 = load i1 (%"class.jingle_xmpp::XmlChild"*)*, i1 (%"class.jingle_xmpp::XmlChild"*)** %9, align 8
  %11 = tail call zeroext i1 %10(%"class.jingle_xmpp::XmlChild"* nonnull %7) #15
  br i1 %11, label %27, label %12

12:                                               ; preds = %6
  %13 = bitcast %"class.jingle_xmpp::XmlChild"* %7 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %14 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %13, align 8
  %15 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %14, i64 1
  %16 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %15, align 8
  %17 = tail call %"class.jingle_xmpp::XmlElement"* %16(%"class.jingle_xmpp::XmlChild"* nonnull %7) #15
  %18 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %17, i64 0, i32 1
  %19 = tail call i32 @_ZNK11jingle_xmpp5QName7CompareERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"* %18, %"struct.jingle_xmpp::StaticQName"* dereferenceable(16) %1) #15
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %27

21:                                               ; preds = %12
  %22 = bitcast %"class.jingle_xmpp::XmlChild"* %7 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %23 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %22, align 8
  %24 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %23, i64 1
  %25 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %24, align 8
  %26 = tail call %"class.jingle_xmpp::XmlElement"* %25(%"class.jingle_xmpp::XmlChild"* nonnull %7) #15
  br label %31

27:                                               ; preds = %6, %12
  %28 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %7, i64 0, i32 1
  %29 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %28, align 8
  %30 = icmp eq %"class.jingle_xmpp::XmlChild"* %29, null
  br i1 %30, label %31, label %6

31:                                               ; preds = %27, %2, %21
  %32 = phi %"class.jingle_xmpp::XmlElement"* [ %26, %21 ], [ null, %2 ], [ null, %27 ]
  ret %"class.jingle_xmpp::XmlElement"* %32
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlElement9NextNamedERKNS_5QNameE(%"class.jingle_xmpp::XmlElement"* nocapture readonly, %"class.jingle_xmpp::QName"* dereferenceable(48)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 0, i32 1
  %4 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %3, align 8
  %5 = icmp eq %"class.jingle_xmpp::XmlChild"* %4, null
  br i1 %5, label %31, label %6

6:                                                ; preds = %2, %27
  %7 = phi %"class.jingle_xmpp::XmlChild"* [ %29, %27 ], [ %4, %2 ]
  %8 = bitcast %"class.jingle_xmpp::XmlChild"* %7 to i1 (%"class.jingle_xmpp::XmlChild"*)***
  %9 = load i1 (%"class.jingle_xmpp::XmlChild"*)**, i1 (%"class.jingle_xmpp::XmlChild"*)*** %8, align 8
  %10 = load i1 (%"class.jingle_xmpp::XmlChild"*)*, i1 (%"class.jingle_xmpp::XmlChild"*)** %9, align 8
  %11 = tail call zeroext i1 %10(%"class.jingle_xmpp::XmlChild"* nonnull %7) #15
  br i1 %11, label %27, label %12

12:                                               ; preds = %6
  %13 = bitcast %"class.jingle_xmpp::XmlChild"* %7 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %14 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %13, align 8
  %15 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %14, i64 1
  %16 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %15, align 8
  %17 = tail call %"class.jingle_xmpp::XmlElement"* %16(%"class.jingle_xmpp::XmlChild"* nonnull %7) #15
  %18 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %17, i64 0, i32 1
  %19 = tail call i32 @_ZNK11jingle_xmpp5QName7CompareERKS0_(%"class.jingle_xmpp::QName"* %18, %"class.jingle_xmpp::QName"* dereferenceable(48) %1) #15
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %27

21:                                               ; preds = %12
  %22 = bitcast %"class.jingle_xmpp::XmlChild"* %7 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %23 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %22, align 8
  %24 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %23, i64 1
  %25 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %24, align 8
  %26 = tail call %"class.jingle_xmpp::XmlElement"* %25(%"class.jingle_xmpp::XmlChild"* nonnull %7) #15
  br label %31

27:                                               ; preds = %6, %12
  %28 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %7, i64 0, i32 1
  %29 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %28, align 8
  %30 = icmp eq %"class.jingle_xmpp::XmlChild"* %29, null
  br i1 %30, label %31, label %6

31:                                               ; preds = %27, %2, %21
  %32 = phi %"class.jingle_xmpp::XmlElement"* [ %26, %21 ], [ null, %2 ], [ null, %27 ]
  ret %"class.jingle_xmpp::XmlElement"* %32
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlElement9NextNamedERKNS_11StaticQNameE(%"class.jingle_xmpp::XmlElement"* nocapture readonly, %"struct.jingle_xmpp::StaticQName"* dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 0, i32 1
  %4 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %3, align 8
  %5 = icmp eq %"class.jingle_xmpp::XmlChild"* %4, null
  br i1 %5, label %31, label %6

6:                                                ; preds = %2, %27
  %7 = phi %"class.jingle_xmpp::XmlChild"* [ %29, %27 ], [ %4, %2 ]
  %8 = bitcast %"class.jingle_xmpp::XmlChild"* %7 to i1 (%"class.jingle_xmpp::XmlChild"*)***
  %9 = load i1 (%"class.jingle_xmpp::XmlChild"*)**, i1 (%"class.jingle_xmpp::XmlChild"*)*** %8, align 8
  %10 = load i1 (%"class.jingle_xmpp::XmlChild"*)*, i1 (%"class.jingle_xmpp::XmlChild"*)** %9, align 8
  %11 = tail call zeroext i1 %10(%"class.jingle_xmpp::XmlChild"* nonnull %7) #15
  br i1 %11, label %27, label %12

12:                                               ; preds = %6
  %13 = bitcast %"class.jingle_xmpp::XmlChild"* %7 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %14 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %13, align 8
  %15 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %14, i64 1
  %16 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %15, align 8
  %17 = tail call %"class.jingle_xmpp::XmlElement"* %16(%"class.jingle_xmpp::XmlChild"* nonnull %7) #15
  %18 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %17, i64 0, i32 1
  %19 = tail call i32 @_ZNK11jingle_xmpp5QName7CompareERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"* %18, %"struct.jingle_xmpp::StaticQName"* dereferenceable(16) %1) #15
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %27

21:                                               ; preds = %12
  %22 = bitcast %"class.jingle_xmpp::XmlChild"* %7 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %23 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %22, align 8
  %24 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %23, i64 1
  %25 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %24, align 8
  %26 = tail call %"class.jingle_xmpp::XmlElement"* %25(%"class.jingle_xmpp::XmlChild"* nonnull %7) #15
  br label %31

27:                                               ; preds = %6, %12
  %28 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %7, i64 0, i32 1
  %29 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %28, align 8
  %30 = icmp eq %"class.jingle_xmpp::XmlChild"* %29, null
  br i1 %30, label %31, label %6

31:                                               ; preds = %27, %2, %21
  %32 = phi %"class.jingle_xmpp::XmlElement"* [ %26, %21 ], [ null, %2 ], [ null, %27 ]
  ret %"class.jingle_xmpp::XmlElement"* %32
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlElement19FindOrAddNamedChildERKNS_5QNameE(%"class.jingle_xmpp::XmlElement"* nocapture, %"class.jingle_xmpp::QName"* dereferenceable(48)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 4
  %4 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %3, align 8
  %5 = icmp eq %"class.jingle_xmpp::XmlChild"* %4, null
  br i1 %5, label %32, label %6

6:                                                ; preds = %2, %21
  %7 = phi %"class.jingle_xmpp::XmlChild"* [ %23, %21 ], [ %4, %2 ]
  %8 = bitcast %"class.jingle_xmpp::XmlChild"* %7 to i1 (%"class.jingle_xmpp::XmlChild"*)***
  %9 = load i1 (%"class.jingle_xmpp::XmlChild"*)**, i1 (%"class.jingle_xmpp::XmlChild"*)*** %8, align 8
  %10 = load i1 (%"class.jingle_xmpp::XmlChild"*)*, i1 (%"class.jingle_xmpp::XmlChild"*)** %9, align 8
  %11 = tail call zeroext i1 %10(%"class.jingle_xmpp::XmlChild"* nonnull %7) #15
  br i1 %11, label %21, label %12

12:                                               ; preds = %6
  %13 = bitcast %"class.jingle_xmpp::XmlChild"* %7 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %14 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %13, align 8
  %15 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %14, i64 1
  %16 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %15, align 8
  %17 = tail call %"class.jingle_xmpp::XmlElement"* %16(%"class.jingle_xmpp::XmlChild"* nonnull %7) #15
  %18 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %17, i64 0, i32 1
  %19 = tail call i32 @_ZNK11jingle_xmpp5QName7CompareERKS0_(%"class.jingle_xmpp::QName"* %18, %"class.jingle_xmpp::QName"* dereferenceable(48) %1) #15
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %12, %6
  %22 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %7, i64 0, i32 1
  %23 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %22, align 8
  %24 = icmp eq %"class.jingle_xmpp::XmlChild"* %23, null
  br i1 %24, label %32, label %6

25:                                               ; preds = %12
  %26 = bitcast %"class.jingle_xmpp::XmlChild"* %7 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %27 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %26, align 8
  %28 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %27, i64 1
  %29 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %28, align 8
  %30 = tail call %"class.jingle_xmpp::XmlElement"* %29(%"class.jingle_xmpp::XmlChild"* nonnull %7) #15
  %31 = icmp eq %"class.jingle_xmpp::XmlElement"* %30, null
  br i1 %31, label %32, label %48

32:                                               ; preds = %21, %2, %25
  %33 = tail call i8* @_Znwm(i64 104) #16
  %34 = bitcast i8* %33 to %"class.jingle_xmpp::XmlElement"*
  %35 = bitcast i8* %33 to i32 (...)***
  %36 = getelementptr inbounds i8, i8* %33, i64 8
  %37 = bitcast i8* %36 to %"class.jingle_xmpp::XmlChild"**
  store %"class.jingle_xmpp::XmlChild"* null, %"class.jingle_xmpp::XmlChild"** %37, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN11jingle_xmpp10XmlElementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %35, align 8
  %38 = getelementptr inbounds i8, i8* %33, i64 16
  %39 = bitcast i8* %38 to %"class.jingle_xmpp::QName"*
  tail call void @_ZN11jingle_xmpp5QNameC1ERKS0_(%"class.jingle_xmpp::QName"* %39, %"class.jingle_xmpp::QName"* dereferenceable(48) %1) #15
  %40 = getelementptr inbounds i8, i8* %33, i64 64
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 33, i1 false) #15
  %41 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 5
  %42 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %41, align 8
  %43 = icmp eq %"class.jingle_xmpp::XmlChild"* %42, null
  %44 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %42, i64 0, i32 1
  %45 = select i1 %43, %"class.jingle_xmpp::XmlChild"** %3, %"class.jingle_xmpp::XmlChild"** %44
  %46 = bitcast %"class.jingle_xmpp::XmlChild"** %45 to i8**
  store i8* %33, i8** %46, align 8
  %47 = bitcast %"class.jingle_xmpp::XmlChild"** %41 to i8**
  store i8* %33, i8** %47, align 8
  store %"class.jingle_xmpp::XmlChild"* null, %"class.jingle_xmpp::XmlChild"** %37, align 8
  br label %48

48:                                               ; preds = %25, %32
  %49 = phi %"class.jingle_xmpp::XmlElement"* [ %30, %25 ], [ %34, %32 ]
  ret %"class.jingle_xmpp::XmlElement"* %49
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElement10AddElementEPS0_(%"class.jingle_xmpp::XmlElement"* nocapture, %"class.jingle_xmpp::XmlElement"*) local_unnamed_addr #10 align 2 {
  %3 = icmp eq %"class.jingle_xmpp::XmlElement"* %1, null
  br i1 %3, label %13, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 5
  %6 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %5, align 8
  %7 = icmp eq %"class.jingle_xmpp::XmlChild"* %6, null
  %8 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %6, i64 0, i32 1
  %9 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 4
  %10 = select i1 %7, %"class.jingle_xmpp::XmlChild"** %9, %"class.jingle_xmpp::XmlChild"** %8
  %11 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %1, i64 0, i32 0
  store %"class.jingle_xmpp::XmlChild"* %11, %"class.jingle_xmpp::XmlChild"** %10, align 8
  store %"class.jingle_xmpp::XmlChild"* %11, %"class.jingle_xmpp::XmlChild"** %5, align 8
  %12 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %1, i64 0, i32 0, i32 1
  store %"class.jingle_xmpp::XmlChild"* null, %"class.jingle_xmpp::XmlChild"** %12, align 8
  br label %13

13:                                               ; preds = %2, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK11jingle_xmpp10XmlElement9TextNamedERKNS_5QNameE(%"class.std::__1::basic_string"* noalias sret, %"class.jingle_xmpp::XmlElement"* nocapture readonly, %"class.jingle_xmpp::QName"* dereferenceable(48)) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %1, i64 0, i32 4
  %5 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %4, align 8
  %6 = icmp eq %"class.jingle_xmpp::XmlChild"* %5, null
  br i1 %6, label %66, label %7

7:                                                ; preds = %3, %62
  %8 = phi %"class.jingle_xmpp::XmlChild"* [ %64, %62 ], [ %5, %3 ]
  %9 = bitcast %"class.jingle_xmpp::XmlChild"* %8 to i1 (%"class.jingle_xmpp::XmlChild"*)***
  %10 = load i1 (%"class.jingle_xmpp::XmlChild"*)**, i1 (%"class.jingle_xmpp::XmlChild"*)*** %9, align 8
  %11 = load i1 (%"class.jingle_xmpp::XmlChild"*)*, i1 (%"class.jingle_xmpp::XmlChild"*)** %10, align 8
  %12 = tail call zeroext i1 %11(%"class.jingle_xmpp::XmlChild"* nonnull %8) #15
  br i1 %12, label %62, label %13

13:                                               ; preds = %7
  %14 = bitcast %"class.jingle_xmpp::XmlChild"* %8 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %15 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %14, align 8
  %16 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %15, i64 1
  %17 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %16, align 8
  %18 = tail call %"class.jingle_xmpp::XmlElement"* %17(%"class.jingle_xmpp::XmlChild"* nonnull %8) #15
  %19 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %18, i64 0, i32 1
  %20 = tail call i32 @_ZNK11jingle_xmpp5QName7CompareERKS0_(%"class.jingle_xmpp::QName"* %19, %"class.jingle_xmpp::QName"* dereferenceable(48) %2) #15
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %62

22:                                               ; preds = %13
  %23 = bitcast %"class.jingle_xmpp::XmlChild"* %8 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %24 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %23, align 8
  %25 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %24, i64 1
  %26 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %25, align 8
  %27 = tail call %"class.jingle_xmpp::XmlElement"* %26(%"class.jingle_xmpp::XmlChild"* nonnull %8) #15
  %28 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %27, i64 0, i32 4
  %29 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %28, align 8, !noalias !3
  %30 = icmp eq %"class.jingle_xmpp::XmlChild"* %29, null
  br i1 %30, label %60, label %31

31:                                               ; preds = %22
  %32 = bitcast %"class.jingle_xmpp::XmlChild"* %29 to i1 (%"class.jingle_xmpp::XmlChild"*)***
  %33 = load i1 (%"class.jingle_xmpp::XmlChild"*)**, i1 (%"class.jingle_xmpp::XmlChild"*)*** %32, align 8, !noalias !3
  %34 = load i1 (%"class.jingle_xmpp::XmlChild"*)*, i1 (%"class.jingle_xmpp::XmlChild"*)** %33, align 8, !noalias !3
  %35 = tail call zeroext i1 %34(%"class.jingle_xmpp::XmlChild"* nonnull %29) #15, !noalias !3
  br i1 %35, label %36, label %60

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %27, i64 0, i32 5
  %38 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %37, align 8, !noalias !3
  %39 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %28, align 8, !noalias !3
  %40 = icmp eq %"class.jingle_xmpp::XmlChild"* %38, %39
  br i1 %40, label %41, label %60

41:                                               ; preds = %36
  %42 = bitcast %"class.jingle_xmpp::XmlChild"* %38 to %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)***
  %43 = load %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)*** %42, align 8, !noalias !3
  %44 = getelementptr inbounds %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)** %43, i64 2
  %45 = load %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)** %44, align 8, !noalias !3
  %46 = tail call %"class.jingle_xmpp::XmlText"* %45(%"class.jingle_xmpp::XmlChild"* %38) #15, !noalias !3
  %47 = getelementptr inbounds %"class.jingle_xmpp::XmlText", %"class.jingle_xmpp::XmlText"* %46, i64 0, i32 1
  %48 = bitcast %"class.std::__1::basic_string"* %47 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = load i8, i8* %49, align 1, !noalias !3
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %55, label %52

52:                                               ; preds = %41
  %53 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %54 = bitcast %"class.std::__1::basic_string"* %47 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %54, i64 24, i1 false) #15
  br label %68

55:                                               ; preds = %41
  %56 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = load i8*, i8** %56, align 8, !noalias !3
  %58 = getelementptr inbounds %"class.jingle_xmpp::XmlText", %"class.jingle_xmpp::XmlText"* %46, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %59 = load i64, i64* %58, align 8, !noalias !3
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %0, i8* %57, i64 %59) #15
  br label %68

60:                                               ; preds = %36, %31, %22
  %61 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 24, i1 false) #15, !alias.scope !3
  br label %68

62:                                               ; preds = %7, %13
  %63 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %8, i64 0, i32 1
  %64 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %63, align 8
  %65 = icmp eq %"class.jingle_xmpp::XmlChild"* %64, null
  br i1 %65, label %66, label %7

66:                                               ; preds = %62, %3
  %67 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %67, i8 0, i64 24, i1 false) #15
  br label %68

68:                                               ; preds = %60, %55, %52, %66
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElement16InsertChildAfterEPNS_8XmlChildES2_(%"class.jingle_xmpp::XmlElement"* nocapture, %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"*) local_unnamed_addr #10 align 2 {
  %4 = icmp eq %"class.jingle_xmpp::XmlChild"* %1, null
  %5 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %1, i64 0, i32 1
  %6 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 4
  %7 = select i1 %4, %"class.jingle_xmpp::XmlChild"** %6, %"class.jingle_xmpp::XmlChild"** %5
  %8 = select i1 %4, %"class.jingle_xmpp::XmlChild"** %6, %"class.jingle_xmpp::XmlChild"** %5
  %9 = bitcast %"class.jingle_xmpp::XmlChild"** %7 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %2, i64 0, i32 1
  %12 = bitcast %"class.jingle_xmpp::XmlChild"** %11 to i64*
  store i64 %10, i64* %12, align 8
  store %"class.jingle_xmpp::XmlChild"* %2, %"class.jingle_xmpp::XmlChild"** %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElement16RemoveChildAfterEPNS_8XmlChildE(%"class.jingle_xmpp::XmlElement"* nocapture, %"class.jingle_xmpp::XmlChild"*) local_unnamed_addr #3 align 2 {
  %3 = icmp eq %"class.jingle_xmpp::XmlChild"* %1, null
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 4
  %6 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %5, align 8
  br label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %1, i64 0, i32 1
  %9 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %8, align 8
  br label %10

10:                                               ; preds = %7, %4
  %11 = phi %"class.jingle_xmpp::XmlChild"* [ %9, %7 ], [ %6, %4 ]
  %12 = phi %"class.jingle_xmpp::XmlChild"** [ %8, %7 ], [ %5, %4 ]
  %13 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %11, i64 0, i32 1
  %14 = bitcast %"class.jingle_xmpp::XmlChild"** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.jingle_xmpp::XmlChild"** %12 to i64*
  store i64 %15, i64* %16, align 8
  %17 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 5
  %18 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %17, align 8
  %19 = icmp eq %"class.jingle_xmpp::XmlChild"* %18, %11
  br i1 %19, label %20, label %21

20:                                               ; preds = %10
  store %"class.jingle_xmpp::XmlChild"* %1, %"class.jingle_xmpp::XmlChild"** %17, align 8
  br label %21

21:                                               ; preds = %20, %10
  %22 = icmp eq %"class.jingle_xmpp::XmlChild"* %11, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %21
  %24 = bitcast %"class.jingle_xmpp::XmlChild"* %11 to void (%"class.jingle_xmpp::XmlChild"*)***
  %25 = load void (%"class.jingle_xmpp::XmlChild"*)**, void (%"class.jingle_xmpp::XmlChild"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.jingle_xmpp::XmlChild"*)*, void (%"class.jingle_xmpp::XmlChild"*)** %25, i64 4
  %27 = load void (%"class.jingle_xmpp::XmlChild"*)*, void (%"class.jingle_xmpp::XmlChild"*)** %26, align 8
  tail call void %27(%"class.jingle_xmpp::XmlChild"* nonnull %11) #15
  br label %28

28:                                               ; preds = %23, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElement7AddAttrERKNS_5QNameERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.jingle_xmpp::XmlElement"* nocapture, %"class.jingle_xmpp::QName"* dereferenceable(48), %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24)) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 3
  %5 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %4, align 8
  %6 = icmp eq %"class.jingle_xmpp::XmlAttr"* %5, null
  %7 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 2
  %9 = select i1 %6, %"class.jingle_xmpp::XmlAttr"** %8, %"class.jingle_xmpp::XmlAttr"** %7
  %10 = tail call i8* @_Znwm(i64 80) #16
  %11 = bitcast i8* %10 to %"class.jingle_xmpp::XmlAttr"**
  store %"class.jingle_xmpp::XmlAttr"* null, %"class.jingle_xmpp::XmlAttr"** %11, align 8
  %12 = getelementptr inbounds i8, i8* %10, i64 8
  %13 = bitcast i8* %12 to %"class.jingle_xmpp::QName"*
  tail call void @_ZN11jingle_xmpp5QNameC1ERKS0_(%"class.jingle_xmpp::QName"* %13, %"class.jingle_xmpp::QName"* dereferenceable(48) %1) #15
  %14 = getelementptr inbounds i8, i8* %10, i64 56
  %15 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %3
  %20 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %20, i64 24, i1 false) #15
  br label %27

21:                                               ; preds = %3
  %22 = bitcast i8* %14 to %"class.std::__1::basic_string"*
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %22, i8* %24, i64 %26) #15
  br label %27

27:                                               ; preds = %19, %21
  %28 = bitcast %"class.jingle_xmpp::XmlAttr"** %9 to i8**
  store i8* %10, i8** %28, align 8
  %29 = bitcast %"class.jingle_xmpp::XmlAttr"** %4 to i8**
  store i8* %10, i8** %29, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElement7AddAttrERKNS_5QNameERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEi(%"class.jingle_xmpp::XmlElement"* nocapture, %"class.jingle_xmpp::QName"* dereferenceable(48), %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24), i32) local_unnamed_addr #3 align 2 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %18, label %6

6:                                                ; preds = %4, %6
  %7 = phi %"class.jingle_xmpp::XmlElement"* [ %16, %6 ], [ %0, %4 ]
  %8 = phi i32 [ %9, %6 ], [ %3, %4 ]
  %9 = add nsw i32 %8, -1
  %10 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %7, i64 0, i32 5
  %11 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %10, align 8
  %12 = bitcast %"class.jingle_xmpp::XmlChild"* %11 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %13 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %13, i64 1
  %15 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %14, align 8
  %16 = tail call %"class.jingle_xmpp::XmlElement"* %15(%"class.jingle_xmpp::XmlChild"* %11) #15
  %17 = icmp eq i32 %9, 0
  br i1 %17, label %18, label %6

18:                                               ; preds = %6, %4
  %19 = phi %"class.jingle_xmpp::XmlElement"* [ %0, %4 ], [ %16, %6 ]
  %20 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %19, i64 0, i32 3
  %21 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %20, align 8
  %22 = icmp eq %"class.jingle_xmpp::XmlAttr"* %21, null
  %23 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %21, i64 0, i32 0
  %24 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %19, i64 0, i32 2
  %25 = select i1 %22, %"class.jingle_xmpp::XmlAttr"** %24, %"class.jingle_xmpp::XmlAttr"** %23
  %26 = tail call i8* @_Znwm(i64 80) #16
  %27 = bitcast i8* %26 to %"class.jingle_xmpp::XmlAttr"**
  store %"class.jingle_xmpp::XmlAttr"* null, %"class.jingle_xmpp::XmlAttr"** %27, align 8
  %28 = getelementptr inbounds i8, i8* %26, i64 8
  %29 = bitcast i8* %28 to %"class.jingle_xmpp::QName"*
  tail call void @_ZN11jingle_xmpp5QNameC1ERKS0_(%"class.jingle_xmpp::QName"* %29, %"class.jingle_xmpp::QName"* dereferenceable(48) %1) #15
  %30 = getelementptr inbounds i8, i8* %26, i64 56
  %31 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %32 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %31, i64 0, i32 1, i32 0
  %33 = load i8, i8* %32, align 1
  %34 = icmp slt i8 %33, 0
  br i1 %34, label %37, label %35

35:                                               ; preds = %18
  %36 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %36, i64 24, i1 false) #15
  br label %43

37:                                               ; preds = %18
  %38 = bitcast i8* %30 to %"class.std::__1::basic_string"*
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %38, i8* %40, i64 %42) #15
  br label %43

43:                                               ; preds = %35, %37
  %44 = bitcast %"class.jingle_xmpp::XmlAttr"** %25 to i8**
  store i8* %26, i8** %44, align 8
  %45 = bitcast %"class.jingle_xmpp::XmlAttr"** %20 to i8**
  store i8* %26, i8** %45, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElement13AddParsedTextEPKci(%"class.jingle_xmpp::XmlElement"* nocapture, i8*, i32) local_unnamed_addr #3 align 2 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %59, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 5
  %7 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %6, align 8
  %8 = icmp eq %"class.jingle_xmpp::XmlChild"* %7, null
  br i1 %8, label %24, label %9

9:                                                ; preds = %5
  %10 = bitcast %"class.jingle_xmpp::XmlChild"* %7 to i1 (%"class.jingle_xmpp::XmlChild"*)***
  %11 = load i1 (%"class.jingle_xmpp::XmlChild"*)**, i1 (%"class.jingle_xmpp::XmlChild"*)*** %10, align 8
  %12 = load i1 (%"class.jingle_xmpp::XmlChild"*)*, i1 (%"class.jingle_xmpp::XmlChild"*)** %11, align 8
  %13 = tail call zeroext i1 %12(%"class.jingle_xmpp::XmlChild"* nonnull %7) #15
  %14 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %6, align 8
  br i1 %13, label %15, label %24

15:                                               ; preds = %9
  %16 = bitcast %"class.jingle_xmpp::XmlChild"* %14 to %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)***
  %17 = load %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)*** %16, align 8
  %18 = getelementptr inbounds %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)** %17, i64 2
  %19 = load %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlText"* (%"class.jingle_xmpp::XmlChild"*)** %18, align 8
  %20 = tail call %"class.jingle_xmpp::XmlText"* %19(%"class.jingle_xmpp::XmlChild"* %14) #15
  %21 = getelementptr inbounds %"class.jingle_xmpp::XmlText", %"class.jingle_xmpp::XmlText"* %20, i64 0, i32 1
  %22 = sext i32 %2 to i64
  %23 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %21, i8* %1, i64 %22) #15
  br label %59

24:                                               ; preds = %9, %5
  %25 = phi %"class.jingle_xmpp::XmlChild"* [ null, %5 ], [ %14, %9 ]
  %26 = icmp eq %"class.jingle_xmpp::XmlChild"* %25, null
  %27 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %25, i64 0, i32 1
  %28 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 4
  %29 = select i1 %26, %"class.jingle_xmpp::XmlChild"** %28, %"class.jingle_xmpp::XmlChild"** %27
  %30 = tail call i8* @_Znwm(i64 40) #16
  %31 = sext i32 %2 to i64
  %32 = bitcast i8* %30 to i32 (...)***
  %33 = getelementptr inbounds i8, i8* %30, i64 8
  %34 = bitcast i8* %33 to %"class.jingle_xmpp::XmlChild"**
  store %"class.jingle_xmpp::XmlChild"* null, %"class.jingle_xmpp::XmlChild"** %34, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN11jingle_xmpp7XmlTextE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %32, align 8
  %35 = getelementptr inbounds i8, i8* %30, i64 16
  %36 = icmp ugt i32 %2, -17
  br i1 %36, label %37, label %39

37:                                               ; preds = %24
  %38 = bitcast i8* %35 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %38) #14
  unreachable

39:                                               ; preds = %24
  %40 = icmp ult i32 %2, 23
  br i1 %40, label %51, label %41

41:                                               ; preds = %39
  %42 = add nuw nsw i64 %31, 16
  %43 = and i64 %42, -16
  %44 = tail call i8* @_Znwm(i64 %43) #16
  %45 = bitcast i8* %35 to i8**
  store i8* %44, i8** %45, align 8
  %46 = or i64 %43, -9223372036854775808
  %47 = getelementptr inbounds i8, i8* %30, i64 32
  %48 = bitcast i8* %47 to i64*
  store i64 %46, i64* %48, align 8
  %49 = getelementptr inbounds i8, i8* %30, i64 24
  %50 = bitcast i8* %49 to i64*
  store i64 %31, i64* %50, align 8
  br label %54

51:                                               ; preds = %39
  %52 = trunc i32 %2 to i8
  %53 = getelementptr inbounds i8, i8* %30, i64 39
  store i8 %52, i8* %53, align 1
  br label %54

54:                                               ; preds = %41, %51
  %55 = phi i8* [ %44, %41 ], [ %35, %51 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %55, i8* align 1 %1, i64 %31, i1 false) #15
  %56 = getelementptr inbounds i8, i8* %55, i64 %31
  store i8 0, i8* %56, align 1
  %57 = bitcast %"class.jingle_xmpp::XmlChild"** %29 to i8**
  store i8* %30, i8** %57, align 8
  %58 = bitcast %"class.jingle_xmpp::XmlChild"** %6 to i8**
  store i8* %30, i8** %58, align 8
  br label %59

59:                                               ; preds = %3, %54, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElement12AddCDATATextEPKci(%"class.jingle_xmpp::XmlElement"* nocapture, i8*, i32) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 6
  store i8 1, i8* %4, align 8
  tail call void @_ZN11jingle_xmpp10XmlElement13AddParsedTextEPKci(%"class.jingle_xmpp::XmlElement"* %0, i8* %1, i32 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElement7AddTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEi(%"class.jingle_xmpp::XmlElement"* nocapture, %"class.std::__1::basic_string"* dereferenceable(24), i32) local_unnamed_addr #3 align 2 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %17, label %5

5:                                                ; preds = %3, %5
  %6 = phi %"class.jingle_xmpp::XmlElement"* [ %15, %5 ], [ %0, %3 ]
  %7 = phi i32 [ %8, %5 ], [ %2, %3 ]
  %8 = add nsw i32 %7, -1
  %9 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %6, i64 0, i32 5
  %10 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %9, align 8
  %11 = bitcast %"class.jingle_xmpp::XmlChild"* %10 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %12 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %11, align 8
  %13 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %12, i64 1
  %14 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %13, align 8
  %15 = tail call %"class.jingle_xmpp::XmlElement"* %14(%"class.jingle_xmpp::XmlChild"* %10) #15
  %16 = icmp eq i32 %8, 0
  br i1 %16, label %17, label %5

17:                                               ; preds = %5, %3
  %18 = phi %"class.jingle_xmpp::XmlElement"* [ %0, %3 ], [ %15, %5 ]
  tail call void @_ZN11jingle_xmpp10XmlElement7AddTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.jingle_xmpp::XmlElement"* %18, %"class.std::__1::basic_string"* dereferenceable(24) %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElement10AddElementEPS0_i(%"class.jingle_xmpp::XmlElement"* nocapture, %"class.jingle_xmpp::XmlElement"*, i32) local_unnamed_addr #3 align 2 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %17, label %5

5:                                                ; preds = %3, %5
  %6 = phi %"class.jingle_xmpp::XmlElement"* [ %15, %5 ], [ %0, %3 ]
  %7 = phi i32 [ %8, %5 ], [ %2, %3 ]
  %8 = add nsw i32 %7, -1
  %9 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %6, i64 0, i32 5
  %10 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %9, align 8
  %11 = bitcast %"class.jingle_xmpp::XmlChild"* %10 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %12 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %11, align 8
  %13 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %12, i64 1
  %14 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %13, align 8
  %15 = tail call %"class.jingle_xmpp::XmlElement"* %14(%"class.jingle_xmpp::XmlChild"* %10) #15
  %16 = icmp eq i32 %8, 0
  br i1 %16, label %17, label %5

17:                                               ; preds = %5, %3
  %18 = phi %"class.jingle_xmpp::XmlElement"* [ %0, %3 ], [ %15, %5 ]
  %19 = icmp eq %"class.jingle_xmpp::XmlElement"* %1, null
  br i1 %19, label %29, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %18, i64 0, i32 5
  %22 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %21, align 8
  %23 = icmp eq %"class.jingle_xmpp::XmlChild"* %22, null
  %24 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %22, i64 0, i32 1
  %25 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %18, i64 0, i32 4
  %26 = select i1 %23, %"class.jingle_xmpp::XmlChild"** %25, %"class.jingle_xmpp::XmlChild"** %24
  %27 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %1, i64 0, i32 0
  store %"class.jingle_xmpp::XmlChild"* %27, %"class.jingle_xmpp::XmlChild"** %26, align 8
  store %"class.jingle_xmpp::XmlChild"* %27, %"class.jingle_xmpp::XmlChild"** %21, align 8
  %28 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %1, i64 0, i32 0, i32 1
  store %"class.jingle_xmpp::XmlChild"* null, %"class.jingle_xmpp::XmlChild"** %28, align 8
  br label %29

29:                                               ; preds = %17, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElement18ClearNamedChildrenERKNS_5QNameE(%"class.jingle_xmpp::XmlElement"* nocapture, %"class.jingle_xmpp::QName"* dereferenceable(48)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 4
  %4 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %3, align 8
  %5 = icmp eq %"class.jingle_xmpp::XmlChild"* %4, null
  br i1 %5, label %56, label %6

6:                                                ; preds = %2
  %7 = bitcast %"class.jingle_xmpp::XmlChild"** %3 to i64*
  %8 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 5
  br label %9

9:                                                ; preds = %6, %53
  %10 = phi %"class.jingle_xmpp::XmlChild"* [ %4, %6 ], [ %14, %53 ]
  %11 = phi %"class.jingle_xmpp::XmlChild"* [ null, %6 ], [ %54, %53 ]
  %12 = bitcast %"class.jingle_xmpp::XmlChild"* %10 to i1 (%"class.jingle_xmpp::XmlChild"*)***
  %13 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %10, i64 0, i32 1
  %14 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %13, align 8
  %15 = load i1 (%"class.jingle_xmpp::XmlChild"*)**, i1 (%"class.jingle_xmpp::XmlChild"*)*** %12, align 8
  %16 = load i1 (%"class.jingle_xmpp::XmlChild"*)*, i1 (%"class.jingle_xmpp::XmlChild"*)** %15, align 8
  %17 = tail call zeroext i1 %16(%"class.jingle_xmpp::XmlChild"* nonnull %10) #15
  br i1 %17, label %53, label %18

18:                                               ; preds = %9
  %19 = bitcast %"class.jingle_xmpp::XmlChild"* %10 to %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)***
  %20 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)**, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*** %19, align 8
  %21 = getelementptr inbounds %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %20, i64 1
  %22 = load %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)*, %"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::XmlChild"*)** %21, align 8
  %23 = tail call %"class.jingle_xmpp::XmlElement"* %22(%"class.jingle_xmpp::XmlChild"* nonnull %10) #15
  %24 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %23, i64 0, i32 1
  %25 = tail call i32 @_ZNK11jingle_xmpp5QName7CompareERKS0_(%"class.jingle_xmpp::QName"* %24, %"class.jingle_xmpp::QName"* dereferenceable(48) %1) #15
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %53

27:                                               ; preds = %18
  %28 = icmp eq %"class.jingle_xmpp::XmlChild"* %11, null
  br i1 %28, label %29, label %34

29:                                               ; preds = %27
  %30 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %3, align 8
  %31 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %30, i64 0, i32 1
  %32 = bitcast %"class.jingle_xmpp::XmlChild"** %31 to i64*
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %7, align 8
  br label %41

34:                                               ; preds = %27
  %35 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %11, i64 0, i32 1
  %36 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %35, align 8
  %37 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %36, i64 0, i32 1
  %38 = bitcast %"class.jingle_xmpp::XmlChild"** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.jingle_xmpp::XmlChild"** %35 to i64*
  store i64 %39, i64* %40, align 8
  br label %41

41:                                               ; preds = %34, %29
  %42 = phi %"class.jingle_xmpp::XmlChild"* [ %30, %29 ], [ %36, %34 ]
  %43 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %8, align 8
  %44 = icmp eq %"class.jingle_xmpp::XmlChild"* %43, %42
  br i1 %44, label %45, label %46

45:                                               ; preds = %41
  store %"class.jingle_xmpp::XmlChild"* %11, %"class.jingle_xmpp::XmlChild"** %8, align 8
  br label %46

46:                                               ; preds = %45, %41
  %47 = icmp eq %"class.jingle_xmpp::XmlChild"* %42, null
  br i1 %47, label %53, label %48

48:                                               ; preds = %46
  %49 = bitcast %"class.jingle_xmpp::XmlChild"* %42 to void (%"class.jingle_xmpp::XmlChild"*)***
  %50 = load void (%"class.jingle_xmpp::XmlChild"*)**, void (%"class.jingle_xmpp::XmlChild"*)*** %49, align 8
  %51 = getelementptr inbounds void (%"class.jingle_xmpp::XmlChild"*)*, void (%"class.jingle_xmpp::XmlChild"*)** %50, i64 4
  %52 = load void (%"class.jingle_xmpp::XmlChild"*)*, void (%"class.jingle_xmpp::XmlChild"*)** %51, align 8
  tail call void %52(%"class.jingle_xmpp::XmlChild"* nonnull %42) #15
  br label %53

53:                                               ; preds = %48, %46, %9, %18
  %54 = phi %"class.jingle_xmpp::XmlChild"* [ %10, %18 ], [ %10, %9 ], [ %11, %46 ], [ %11, %48 ]
  %55 = icmp eq %"class.jingle_xmpp::XmlChild"* %14, null
  br i1 %55, label %56, label %9

56:                                               ; preds = %53, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElement15ClearAttributesEv(%"class.jingle_xmpp::XmlElement"* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 2
  %3 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %2, align 8
  %4 = icmp eq %"class.jingle_xmpp::XmlAttr"* %3, null
  br i1 %4, label %21, label %5

5:                                                ; preds = %1, %18
  %6 = phi %"class.jingle_xmpp::XmlAttr"* [ %9, %18 ], [ %3, %1 ]
  %7 = bitcast %"class.jingle_xmpp::XmlAttr"* %6 to i8*
  %8 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %6, i64 0, i32 0
  %9 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %8, align 8
  %10 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %6, i64 0, i32 2
  %11 = bitcast %"class.std::__1::basic_string"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %5
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  tail call void @_ZdlPv(i8* %17) #16
  br label %18

18:                                               ; preds = %5, %15
  %19 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %6, i64 0, i32 1
  tail call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* %19) #15
  tail call void @_ZdlPv(i8* %7) #16
  %20 = icmp eq %"class.jingle_xmpp::XmlAttr"* %9, null
  br i1 %20, label %21, label %5

21:                                               ; preds = %18, %1
  %22 = bitcast %"class.jingle_xmpp::XmlAttr"** %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK11jingle_xmpp10XmlElement3StrEv(%"class.std::__1::basic_string"* noalias sret, %"class.jingle_xmpp::XmlElement"*) local_unnamed_addr #3 align 2 {
  %3 = alloca %"class.std::__1::basic_stringstream", align 8
  %4 = bitcast %"class.std::__1::basic_stringstream"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 280, i8* nonnull %4) #15
  %5 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %3, i64 0, i32 0, i32 0, i32 1
  %6 = bitcast i64* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 272, i1 false)
  %7 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %3, i64 0, i32 2, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %3, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*], [5 x i8*] }* @_ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 2, i64 3) to i32 (...)**), i32 (...)*** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %3, i64 0, i32 0, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*], [5 x i8*] }* @_ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %3, i64 0, i32 1
  %11 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %10, i64 0, i32 0
  %12 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 2) to i64*), align 8
  %13 = bitcast %"class.std::__1::basic_stringstream"* %3 to i64*
  store i64 %12, i64* %13, align 8
  %14 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 3) to i64*), align 8
  %15 = bitcast %"class.std::__1::basic_stringstream"* %3 to i8**
  %16 = inttoptr i64 %12 to i8*
  %17 = getelementptr i8, i8* %16, i64 -24
  %18 = bitcast i8* %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds i8, i8* %4, i64 %19
  %21 = bitcast i8* %20 to i64*
  store i64 %14, i64* %21, align 8
  %22 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %3, i64 0, i32 0, i32 0, i32 1
  store i64 0, i64* %22, align 8
  %23 = load i8*, i8** %15, align 8
  %24 = getelementptr i8, i8* %23, i64 -24
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds i8, i8* %4, i64 %26
  %28 = bitcast i8* %27 to %"class.std::__1::ios_base"*
  %29 = bitcast %"class.std::__1::basic_stringbuf"* %10 to i8*
  call void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"* %28, i8* %29) #15
  %30 = getelementptr inbounds i8, i8* %27, i64 136
  %31 = bitcast i8* %30 to %"class.std::__1::basic_ostream"**
  store %"class.std::__1::basic_ostream"* null, %"class.std::__1::basic_ostream"** %31, align 8
  %32 = getelementptr inbounds i8, i8* %27, i64 144
  %33 = bitcast i8* %32 to i32*
  store i32 -1, i32* %33, align 8
  %34 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %3, i64 0, i32 0, i32 1
  %35 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 4) to i64*), align 8
  %36 = bitcast %"class.std::__1::basic_ostream.base"* %34 to i64*
  store i64 %35, i64* %36, align 8
  %37 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 5) to i64*), align 8
  %38 = inttoptr i64 %35 to i8*
  %39 = getelementptr i8, i8* %38, i64 -24
  %40 = bitcast i8* %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = bitcast %"class.std::__1::basic_ostream.base"* %34 to i8*
  %43 = getelementptr inbounds i8, i8* %42, i64 %41
  %44 = bitcast i8* %43 to i64*
  store i64 %37, i64* %44, align 8
  %45 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1) to i64*), align 8
  store i64 %45, i64* %13, align 8
  %46 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 6) to i64*), align 8
  %47 = inttoptr i64 %45 to i8*
  %48 = getelementptr i8, i8* %47, i64 -24
  %49 = bitcast i8* %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds i8, i8* %4, i64 %50
  %52 = bitcast i8* %51 to i64*
  store i64 %46, i64* %52, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*], [5 x i8*] }* @_ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %8, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*], [5 x i8*] }* @_ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 2, i64 3) to i32 (...)**), i32 (...)*** %7, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*], [5 x i8*] }* @_ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %9, align 8
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"* %11) #15
  %53 = getelementptr inbounds %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_stringbuf"* %10, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %53, align 8
  %54 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %3, i64 0, i32 1, i32 1
  %55 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %3, i64 0, i32 1, i32 3
  %56 = bitcast %"class.std::__1::basic_string"* %54 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 32, i1 false) #15
  store i32 24, i32* %55, align 8
  %57 = bitcast %"class.std::__1::basic_ostream.base"* %34 to %"class.std::__1::basic_ostream"*
  call void @_ZN11jingle_xmpp10XmlPrinter8PrintXmlEPNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPKNS_10XmlElementE(%"class.std::__1::basic_ostream"* %57, %"class.jingle_xmpp::XmlElement"* %1) #15
  call void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string"* sret %0, %"class.std::__1::basic_stringbuf"* %10) #15
  %58 = load i64, i64* bitcast ([10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE to i64*), align 8
  store i64 %58, i64* %13, align 8
  %59 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 8) to i64*), align 8
  %60 = inttoptr i64 %58 to i8*
  %61 = getelementptr i8, i8* %60, i64 -24
  %62 = bitcast i8* %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds i8, i8* %4, i64 %63
  %65 = bitcast i8* %64 to i64*
  store i64 %59, i64* %65, align 8
  %66 = load i64, i64* bitcast (i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 9) to i64*), align 8
  store i64 %66, i64* %36, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %53, align 8
  %67 = bitcast %"class.std::__1::basic_string"* %54 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %68 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %67, i64 0, i32 1, i32 0
  %69 = load i8, i8* %68, align 1
  %70 = icmp slt i8 %69, 0
  br i1 %70, label %71, label %74

71:                                               ; preds = %2
  %72 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %54, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = load i8*, i8** %72, align 8
  call void @_ZdlPv(i8* %73) #16
  br label %74

74:                                               ; preds = %2, %71
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %11) #15
  %75 = bitcast %"class.std::__1::basic_stringstream"* %3 to %"class.std::__1::basic_iostream"*
  call void @_ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_iostream"* nonnull %75, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE, i64 0, i64 1)) #15
  %76 = getelementptr inbounds %"class.std::__1::basic_stringstream", %"class.std::__1::basic_stringstream"* %3, i64 0, i32 2
  %77 = bitcast %"class.std::__1::basic_ios.base"* %76 to %"class.std::__1::basic_ios"*
  call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %77) #15
  call void @llvm.lifetime.end.p0i8(i64 280, i8* nonnull %4) #15
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

declare void @_ZN11jingle_xmpp10XmlPrinter8PrintXmlEPNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPKNS_10XmlElementE(%"class.std::__1::basic_ostream"*, %"class.jingle_xmpp::XmlElement"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlElement6ForStrERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string"* nocapture readonly dereferenceable(24)) local_unnamed_addr #3 align 2 {
  %2 = alloca %"class.jingle_xmpp::XmlBuilder", align 8
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.jingle_xmpp::XmlBuilder"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #15
  %5 = bitcast %"class.jingle_xmpp::XmlBuilder"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 32, i1 false)
  call void @_ZN11jingle_xmpp10XmlBuilderC1Ev(%"class.jingle_xmpp::XmlBuilder"* nonnull %2) #15
  %6 = getelementptr inbounds %"class.jingle_xmpp::XmlBuilder", %"class.jingle_xmpp::XmlBuilder"* %2, i64 0, i32 0
  %7 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %7, i64 0, i32 1, i32 0
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %1
  %12 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %13 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 8 %13, i64 24, i1 false) #15
  br label %19

14:                                               ; preds = %1
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* nonnull %3, i8* %16, i64 %18) #15
  br label %19

19:                                               ; preds = %11, %14
  call void @_ZN11jingle_xmpp9XmlParser8ParseXmlEPNS_15XmlParseHandlerENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(%"class.jingle_xmpp::XmlParseHandler"* nonnull %6, %"class.std::__1::basic_string"* nonnull %3) #15
  %20 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  call void @_ZdlPv(i8* %26) #16
  br label %27

27:                                               ; preds = %19, %24
  %28 = call %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlBuilder13CreateElementEv(%"class.jingle_xmpp::XmlBuilder"* nonnull %2) #15
  call void @_ZN11jingle_xmpp10XmlBuilderD1Ev(%"class.jingle_xmpp::XmlBuilder"* nonnull %2) #15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #15
  ret %"class.jingle_xmpp::XmlElement"* %28
}

declare void @_ZN11jingle_xmpp10XmlBuilderC1Ev(%"class.jingle_xmpp::XmlBuilder"*) unnamed_addr #4

declare void @_ZN11jingle_xmpp9XmlParser8ParseXmlEPNS_15XmlParseHandlerENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(%"class.jingle_xmpp::XmlParseHandler"*, %"class.std::__1::basic_string"*) local_unnamed_addr #4

declare %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlBuilder13CreateElementEv(%"class.jingle_xmpp::XmlBuilder"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN11jingle_xmpp10XmlBuilderD1Ev(%"class.jingle_xmpp::XmlBuilder"*) unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElementD2Ev(%"class.jingle_xmpp::XmlElement"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN11jingle_xmpp10XmlElementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 2
  %4 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %3, align 8
  %5 = icmp eq %"class.jingle_xmpp::XmlAttr"* %4, null
  br i1 %5, label %22, label %6

6:                                                ; preds = %1, %19
  %7 = phi %"class.jingle_xmpp::XmlAttr"* [ %10, %19 ], [ %4, %1 ]
  %8 = bitcast %"class.jingle_xmpp::XmlAttr"* %7 to i8*
  %9 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %7, i64 0, i32 0
  %10 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %9, align 8
  %11 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %7, i64 0, i32 2
  %12 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %6
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  tail call void @_ZdlPv(i8* %18) #16
  br label %19

19:                                               ; preds = %6, %16
  %20 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %7, i64 0, i32 1
  tail call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* %20) #15
  tail call void @_ZdlPv(i8* %8) #16
  %21 = icmp eq %"class.jingle_xmpp::XmlAttr"* %10, null
  br i1 %21, label %22, label %6

22:                                               ; preds = %19, %1
  %23 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 4
  %24 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %23, align 8
  %25 = icmp eq %"class.jingle_xmpp::XmlChild"* %24, null
  br i1 %25, label %35, label %26

26:                                               ; preds = %22, %26
  %27 = phi %"class.jingle_xmpp::XmlChild"* [ %30, %26 ], [ %24, %22 ]
  %28 = bitcast %"class.jingle_xmpp::XmlChild"* %27 to void (%"class.jingle_xmpp::XmlChild"*)***
  %29 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %27, i64 0, i32 1
  %30 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %29, align 8
  %31 = load void (%"class.jingle_xmpp::XmlChild"*)**, void (%"class.jingle_xmpp::XmlChild"*)*** %28, align 8
  %32 = getelementptr inbounds void (%"class.jingle_xmpp::XmlChild"*)*, void (%"class.jingle_xmpp::XmlChild"*)** %31, i64 4
  %33 = load void (%"class.jingle_xmpp::XmlChild"*)*, void (%"class.jingle_xmpp::XmlChild"*)** %32, align 8
  tail call void %33(%"class.jingle_xmpp::XmlChild"* nonnull %27) #15
  %34 = icmp eq %"class.jingle_xmpp::XmlChild"* %30, null
  br i1 %34, label %35, label %26

35:                                               ; preds = %26, %22
  %36 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 1
  tail call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* %36) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp10XmlElementD0Ev(%"class.jingle_xmpp::XmlElement"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN11jingle_xmpp10XmlElementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 2
  %4 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %3, align 8
  %5 = icmp eq %"class.jingle_xmpp::XmlAttr"* %4, null
  br i1 %5, label %22, label %6

6:                                                ; preds = %1, %19
  %7 = phi %"class.jingle_xmpp::XmlAttr"* [ %10, %19 ], [ %4, %1 ]
  %8 = bitcast %"class.jingle_xmpp::XmlAttr"* %7 to i8*
  %9 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %7, i64 0, i32 0
  %10 = load %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"** %9, align 8
  %11 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %7, i64 0, i32 2
  %12 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %6
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  tail call void @_ZdlPv(i8* %18) #16
  br label %19

19:                                               ; preds = %16, %6
  %20 = getelementptr inbounds %"class.jingle_xmpp::XmlAttr", %"class.jingle_xmpp::XmlAttr"* %7, i64 0, i32 1
  tail call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* %20) #15
  tail call void @_ZdlPv(i8* %8) #16
  %21 = icmp eq %"class.jingle_xmpp::XmlAttr"* %10, null
  br i1 %21, label %22, label %6

22:                                               ; preds = %19, %1
  %23 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 4
  %24 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %23, align 8
  %25 = icmp eq %"class.jingle_xmpp::XmlChild"* %24, null
  br i1 %25, label %35, label %26

26:                                               ; preds = %22, %26
  %27 = phi %"class.jingle_xmpp::XmlChild"* [ %30, %26 ], [ %24, %22 ]
  %28 = bitcast %"class.jingle_xmpp::XmlChild"* %27 to void (%"class.jingle_xmpp::XmlChild"*)***
  %29 = getelementptr inbounds %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::XmlChild"* %27, i64 0, i32 1
  %30 = load %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"** %29, align 8
  %31 = load void (%"class.jingle_xmpp::XmlChild"*)**, void (%"class.jingle_xmpp::XmlChild"*)*** %28, align 8
  %32 = getelementptr inbounds void (%"class.jingle_xmpp::XmlChild"*)*, void (%"class.jingle_xmpp::XmlChild"*)** %31, i64 4
  %33 = load void (%"class.jingle_xmpp::XmlChild"*)*, void (%"class.jingle_xmpp::XmlChild"*)** %32, align 8
  tail call void %33(%"class.jingle_xmpp::XmlChild"* nonnull %27) #15
  %34 = icmp eq %"class.jingle_xmpp::XmlChild"* %30, null
  br i1 %34, label %35, label %26

35:                                               ; preds = %26, %22
  %36 = getelementptr inbounds %"class.jingle_xmpp::XmlElement", %"class.jingle_xmpp::XmlElement"* %0, i64 0, i32 1
  tail call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* %36) #15
  %37 = bitcast %"class.jingle_xmpp::XmlElement"* %0 to i8*
  tail call void @_ZdlPv(i8* %37) #16
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

declare i32 @_ZNK11jingle_xmpp5QName7CompareERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"*, %"struct.jingle_xmpp::StaticQName"* dereferenceable(16)) local_unnamed_addr #4

declare i32 @_ZNK11jingle_xmpp5QName7CompareERKS0_(%"class.jingle_xmpp::QName"*, %"class.jingle_xmpp::QName"* dereferenceable(48)) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #11

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind
declare void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"*) unnamed_addr #8

; Function Attrs: nounwind
declare void @_ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_iostream"*, i8**) unnamed_addr #8

; Function Attrs: nounwind
declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #8

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #4

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #4

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #4

declare i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"*, i64, i64, i8*, i64) local_unnamed_addr #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #12

declare void @_ZNSt3__18ios_base4initEPv(%"class.std::__1::ios_base"*, i8*) local_unnamed_addr #4

declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #4

declare void @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(%"class.std::__1::basic_string"* sret, %"class.std::__1::basic_stringbuf"*) local_unnamed_addr #4

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #13

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nofree nounwind readonly }
attributes #14 = { noreturn nounwind }
attributes #15 = { nounwind }
attributes #16 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNK11jingle_xmpp10XmlElement8BodyTextEv: argument 0"}
!5 = distinct !{!5, !"_ZNK11jingle_xmpp10XmlElement8BodyTextEv"}
