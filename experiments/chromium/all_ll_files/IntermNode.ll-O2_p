; ModuleID = '../../third_party/angle/src/compiler/translator/IntermNode.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/IntermNode.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.8", i8, [7 x i8] }>
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector.8" = type { %"class.std::__1::vector.9" }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.sh::TIntermNode"** }
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.8" }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.0"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector.0" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sh::TField"**, %"class.sh::TField"**, %"class.std::__1::__compressed_pair" }
%"class.sh::TField" = type <{ %"class.sh::TType"*, %"class.sh::ImmutableString", %"struct.sh::TSourceLoc", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TField"** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::TConstantUnion" = type { %union.anon.7, i32 }
%union.anon.7 = type { i32 }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.8", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector.24"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TVector.24" = type opaque
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.16", i8, [7 x i8] }>
%"class.sh::TVector.16" = type { %"class.std::__1::vector.17" }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { i32*, i32*, %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { i32* }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.62", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.62" = type { %"class.std::__1::__vector_base.63" }
%"class.std::__1::__vector_base.63" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.64" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.sh::TIntermOperator" = type <{ %"class.sh::TIntermExpression", i8, [7 x i8] }>
%"class.sh::TDiagnostics" = type { %"class.angle::pp::Diagnostics", %"class.sh::TInfoSinkBase"*, i32, i32 }
%"class.angle::pp::Diagnostics" = type { i32 (...)** }
%"class.sh::TInfoSinkBase" = type { %"class.std::__1::basic_string.26", %"class.std::__1::vector.32" }
%"class.std::__1::basic_string.26" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.29 }
%union.anon.29 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { i32*, i32*, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { i32* }
%"class.angle::Matrix" = type { %"class.std::__1::vector.41", i32, i32 }
%"class.std::__1::vector.41" = type { %"class.std::__1::__vector_base.42" }
%"class.std::__1::__vector_base.42" = type { float*, float*, %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { float* }
%"class.sh::TIntermTraverser" = type opaque

$_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertINS_11__wrap_iterIPKS3_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISD_E9referenceEEE5valueENS8_IPS3_EEE4typeESB_SD_SD_ = comdat any

$_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EERS8_ = comdat any

$_ZNK5angle6MatrixIfE9transposeEv = comdat any

$_ZNK5angle6MatrixIfE11determinantEv = comdat any

$_ZNK5angle6MatrixIfE7inverseEv = comdat any

$_ZNK5angle6MatrixIfE8compMultERKS1_ = comdat any

$_ZNK5angle6MatrixIfE12outerProductERKS1_ = comdat any

$_ZN2sh11TIntermNodeD2Ev = comdat any

$_ZN2sh12TIntermTypedD0Ev = comdat any

$_ZN2sh12TIntermTyped10getAsTypedEv = comdat any

$_ZN2sh11TIntermNode18getAsConstantUnionEv = comdat any

$_ZN2sh11TIntermNode23getAsFunctionDefinitionEv = comdat any

$_ZN2sh11TIntermNode14getAsAggregateEv = comdat any

$_ZN2sh11TIntermNode10getAsBlockEv = comdat any

$_ZN2sh11TIntermNode26getAsFunctionPrototypeNodeEv = comdat any

$_ZN2sh11TIntermNode35getAsGlobalQualifierDeclarationNodeEv = comdat any

$_ZN2sh11TIntermNode20getAsDeclarationNodeEv = comdat any

$_ZN2sh11TIntermNode16getAsSwizzleNodeEv = comdat any

$_ZN2sh11TIntermNode15getAsBinaryNodeEv = comdat any

$_ZN2sh11TIntermNode14getAsUnaryNodeEv = comdat any

$_ZN2sh11TIntermNode16getAsTernaryNodeEv = comdat any

$_ZN2sh11TIntermNode15getAsIfElseNodeEv = comdat any

$_ZN2sh11TIntermNode15getAsSwitchNodeEv = comdat any

$_ZN2sh11TIntermNode13getAsCaseNodeEv = comdat any

$_ZN2sh11TIntermNode15getAsSymbolNodeEv = comdat any

$_ZN2sh11TIntermNode13getAsLoopNodeEv = comdat any

$_ZN2sh11TIntermNode15getAsBranchNodeEv = comdat any

$_ZN2sh11TIntermNode26getAsPreprocessorDirectiveEv = comdat any

$_ZN2sh12TIntermTyped4foldEPNS_12TDiagnosticsE = comdat any

$_ZN2sh13TIntermSymbolD0Ev = comdat any

$_ZN2sh13TIntermSymbol15getAsSymbolNodeEv = comdat any

$_ZNK2sh13TIntermSymbol8deepCopyEv = comdat any

$_ZN2sh13TIntermSymbol16replaceChildNodeEPNS_11TIntermNodeES2_ = comdat any

$_ZNK2sh13TIntermSymbol14hasSideEffectsEv = comdat any

$_ZN2sh20TIntermConstantUnionD0Ev = comdat any

$_ZN2sh20TIntermConstantUnion18getAsConstantUnionEv = comdat any

$_ZNK2sh20TIntermConstantUnion8deepCopyEv = comdat any

$_ZN2sh20TIntermConstantUnion16replaceChildNodeEPNS_11TIntermNodeES2_ = comdat any

$_ZNK2sh20TIntermConstantUnion14hasSideEffectsEv = comdat any

$_ZNK2sh17TIntermExpression7getTypeEv = comdat any

$_ZN2sh16TIntermAggregateD2Ev = comdat any

$_ZN2sh16TIntermAggregateD0Ev = comdat any

$_ZN2sh16TIntermAggregate14getAsAggregateEv = comdat any

$_ZNK2sh16TIntermAggregate8deepCopyEv = comdat any

$_ZN2sh16TIntermAggregate11getSequenceEv = comdat any

$_ZNK2sh16TIntermAggregate11getSequenceEv = comdat any

$_ZThn216_N2sh16TIntermAggregateD1Ev = comdat any

$_ZThn216_N2sh16TIntermAggregateD0Ev = comdat any

$_ZThn216_N2sh16TIntermAggregate11getSequenceEv = comdat any

$_ZThn216_NK2sh16TIntermAggregate11getSequenceEv = comdat any

$_ZN2sh13TIntermBinaryD0Ev = comdat any

$_ZN2sh13TIntermBinary15getAsBinaryNodeEv = comdat any

$_ZNK2sh13TIntermBinary8deepCopyEv = comdat any

$_ZNK2sh13TIntermBinary14hasSideEffectsEv = comdat any

$_ZN2sh11TIntermNode10getAsTypedEv = comdat any

$_ZN2sh28TIntermPreprocessorDirective26getAsPreprocessorDirectiveEv = comdat any

$_ZNK2sh28TIntermPreprocessorDirective8deepCopyEv = comdat any

$_ZN2sh28TIntermPreprocessorDirective16replaceChildNodeEPNS_11TIntermNodeES2_ = comdat any

$_ZN2sh17TIntermExpressionD0Ev = comdat any

$_ZN2sh15TIntermOperatorD0Ev = comdat any

$_ZNK2sh15TIntermOperator14hasSideEffectsEv = comdat any

$_ZNSt3__16vectorIi14pool_allocatorIiEE6assignIPiEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_ = comdat any

$_ZTVN2sh17TIntermExpressionE = comdat any

$_ZTVN2sh15TIntermOperatorE = comdat any

@_ZTVN2sh17TIntermExpressionE = linkonce_odr hidden unnamed_addr constant { [34 x i8*] } { [34 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNodeD2Ev to i8*), i8* bitcast (void (%"class.sh::TIntermExpression"*)* @_ZN2sh17TIntermExpressionD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)* @_ZN2sh11TIntermNode8traverseEPNS_16TIntermTraverserE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)* @_ZN2sh12TIntermTyped10getAsTypedEv to i8*), i8* bitcast (%"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode23getAsFunctionDefinitionEv to i8*), i8* bitcast (%"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode10getAsBlockEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsFunctionPrototypeNodeEv to i8*), i8* bitcast (%"class.sh::TIntermGlobalQualifierDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode35getAsGlobalQualifierDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode20getAsDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsSwizzleNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermTernary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsTernaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermIfElse"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsIfElseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwitch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%"class.sh::TIntermLoop"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBranch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermPreprocessorDirective"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsPreprocessorDirectiveEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*, %"class.sh::TDiagnostics"*)* @_ZN2sh12TIntermTyped4foldEPNS_12TDiagnosticsE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTyped"*)* @_ZNK2sh12TIntermTyped16hasConstantValueEv to i8*), i8* bitcast (%"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)* @_ZNK2sh12TIntermTyped16getConstantValueEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.sh::TType"* (%"class.sh::TIntermExpression"*)* @_ZNK2sh17TIntermExpression7getTypeEv to i8*)] }, comdat, align 8
@_ZTVN2sh12TIntermBlockE = external unnamed_addr constant { [31 x i8*], [6 x i8*] }, align 8
@_ZTVN2sh18TIntermDeclarationE = external unnamed_addr constant { [31 x i8*], [6 x i8*] }, align 8
@_ZTVN2sh13TIntermSymbolE = hidden unnamed_addr constant { [34 x i8*] } { [34 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNodeD2Ev to i8*), i8* bitcast (void (%"class.sh::TIntermSymbol"*)* @_ZN2sh13TIntermSymbolD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermSymbol"*, %"class.sh::TIntermTraverser"*)* @_ZN2sh13TIntermSymbol8traverseEPNS_16TIntermTraverserE to i8*), i8* bitcast (i1 (%"class.sh::TIntermSymbol"*, i32, %"class.sh::TIntermTraverser"*)* @_ZN2sh13TIntermSymbol5visitENS_5VisitEPNS_16TIntermTraverserE to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)* @_ZN2sh12TIntermTyped10getAsTypedEv to i8*), i8* bitcast (%"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode23getAsFunctionDefinitionEv to i8*), i8* bitcast (%"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode10getAsBlockEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsFunctionPrototypeNodeEv to i8*), i8* bitcast (%"class.sh::TIntermGlobalQualifierDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode35getAsGlobalQualifierDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode20getAsDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsSwizzleNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermTernary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsTernaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermIfElse"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsIfElseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwitch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSymbol"* (%"class.sh::TIntermSymbol"*)* @_ZN2sh13TIntermSymbol15getAsSymbolNodeEv to i8*), i8* bitcast (%"class.sh::TIntermLoop"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBranch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermPreprocessorDirective"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsPreprocessorDirectiveEv to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)* @_ZNK2sh13TIntermSymbol8deepCopyEv to i8*), i8* bitcast (i64 (%"class.sh::TIntermSymbol"*)* @_ZNK2sh13TIntermSymbol13getChildCountEv to i8*), i8* bitcast (%"class.sh::TIntermNode"* (%"class.sh::TIntermSymbol"*, i64)* @_ZNK2sh13TIntermSymbol12getChildNodeEm to i8*), i8* bitcast (i1 (%"class.sh::TIntermSymbol"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)* @_ZN2sh13TIntermSymbol16replaceChildNodeEPNS_11TIntermNodeES2_ to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*, %"class.sh::TDiagnostics"*)* @_ZN2sh12TIntermTyped4foldEPNS_12TDiagnosticsE to i8*), i8* bitcast (i1 (%"class.sh::TIntermSymbol"*)* @_ZNK2sh13TIntermSymbol16hasConstantValueEv to i8*), i8* bitcast (%"class.sh::TConstantUnion"* (%"class.sh::TIntermSymbol"*)* @_ZNK2sh13TIntermSymbol16getConstantValueEv to i8*), i8* bitcast (i1 (%"class.sh::TIntermSymbol"*)* @_ZNK2sh13TIntermSymbol14hasSideEffectsEv to i8*), i8* bitcast (%"class.sh::TType"* (%"class.sh::TIntermSymbol"*)* @_ZNK2sh13TIntermSymbol7getTypeEv to i8*)] }, align 8
@_ZTVN2sh16TIntermAggregateE = hidden unnamed_addr constant { [36 x i8*], [6 x i8*] } { [36 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermAggregateD2Ev to i8*), i8* bitcast (void (%"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermAggregateD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermAggregate"*, %"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermAggregate8traverseEPNS_16TIntermTraverserE to i8*), i8* bitcast (i1 (%"class.sh::TIntermAggregate"*, i32, %"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermAggregate5visitENS_5VisitEPNS_16TIntermTraverserE to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)* @_ZN2sh12TIntermTyped10getAsTypedEv to i8*), i8* bitcast (%"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode23getAsFunctionDefinitionEv to i8*), i8* bitcast (%"class.sh::TIntermAggregate"* (%"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermAggregate14getAsAggregateEv to i8*), i8* bitcast (%"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode10getAsBlockEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsFunctionPrototypeNodeEv to i8*), i8* bitcast (%"class.sh::TIntermGlobalQualifierDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode35getAsGlobalQualifierDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode20getAsDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsSwizzleNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermTernary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsTernaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermIfElse"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsIfElseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwitch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%"class.sh::TIntermLoop"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBranch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermPreprocessorDirective"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsPreprocessorDirectiveEv to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*)* @_ZNK2sh16TIntermAggregate8deepCopyEv to i8*), i8* bitcast (i64 (%"class.sh::TIntermAggregate"*)* @_ZNK2sh16TIntermAggregate13getChildCountEv to i8*), i8* bitcast (%"class.sh::TIntermNode"* (%"class.sh::TIntermAggregate"*, i64)* @_ZNK2sh16TIntermAggregate12getChildNodeEm to i8*), i8* bitcast (i1 (%"class.sh::TIntermAggregate"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)* @_ZN2sh16TIntermAggregate16replaceChildNodeEPNS_11TIntermNodeES2_ to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)* @_ZN2sh16TIntermAggregate4foldEPNS_12TDiagnosticsE to i8*), i8* bitcast (i1 (%"class.sh::TIntermAggregate"*)* @_ZNK2sh16TIntermAggregate16hasConstantValueEv to i8*), i8* bitcast (%"class.sh::TConstantUnion"* (%"class.sh::TIntermAggregate"*)* @_ZNK2sh16TIntermAggregate16getConstantValueEv to i8*), i8* bitcast (i1 (%"class.sh::TIntermAggregate"*)* @_ZNK2sh16TIntermAggregate14hasSideEffectsEv to i8*), i8* bitcast (%"class.sh::TType"* (%"class.sh::TIntermExpression"*)* @_ZNK2sh17TIntermExpression7getTypeEv to i8*), i8* bitcast (%"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermAggregate11getSequenceEv to i8*), i8* bitcast (%"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)* @_ZNK2sh16TIntermAggregate11getSequenceEv to i8*)], [6 x i8*] [i8* inttoptr (i64 -216 to i8*), i8* null, i8* bitcast (void (%"class.sh::TIntermAggregate"*)* @_ZThn216_N2sh16TIntermAggregateD1Ev to i8*), i8* bitcast (void (%"class.sh::TIntermAggregate"*)* @_ZThn216_N2sh16TIntermAggregateD0Ev to i8*), i8* bitcast (%"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)* @_ZThn216_N2sh16TIntermAggregate11getSequenceEv to i8*), i8* bitcast (%"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)* @_ZThn216_NK2sh16TIntermAggregate11getSequenceEv to i8*)] }, align 8
@.str = private unnamed_addr constant [12 x i8] c"textureSize\00", align 1
@_ZTVN2sh12TIntermTypedE = hidden unnamed_addr constant { [34 x i8*] } { [34 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNodeD2Ev to i8*), i8* bitcast (void (%"class.sh::TIntermTyped"*)* @_ZN2sh12TIntermTypedD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)* @_ZN2sh11TIntermNode8traverseEPNS_16TIntermTraverserE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)* @_ZN2sh12TIntermTyped10getAsTypedEv to i8*), i8* bitcast (%"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode23getAsFunctionDefinitionEv to i8*), i8* bitcast (%"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode10getAsBlockEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsFunctionPrototypeNodeEv to i8*), i8* bitcast (%"class.sh::TIntermGlobalQualifierDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode35getAsGlobalQualifierDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode20getAsDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsSwizzleNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermTernary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsTernaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermIfElse"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsIfElseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwitch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%"class.sh::TIntermLoop"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBranch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermPreprocessorDirective"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsPreprocessorDirectiveEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*, %"class.sh::TDiagnostics"*)* @_ZN2sh12TIntermTyped4foldEPNS_12TDiagnosticsE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTyped"*)* @_ZNK2sh12TIntermTyped16hasConstantValueEv to i8*), i8* bitcast (%"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)* @_ZNK2sh12TIntermTyped16getConstantValueEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZTVN2sh20TIntermConstantUnionE = hidden unnamed_addr constant { [34 x i8*] } { [34 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNodeD2Ev to i8*), i8* bitcast (void (%"class.sh::TIntermConstantUnion"*)* @_ZN2sh20TIntermConstantUnionD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermConstantUnion"*, %"class.sh::TIntermTraverser"*)* @_ZN2sh20TIntermConstantUnion8traverseEPNS_16TIntermTraverserE to i8*), i8* bitcast (i1 (%"class.sh::TIntermConstantUnion"*, i32, %"class.sh::TIntermTraverser"*)* @_ZN2sh20TIntermConstantUnion5visitENS_5VisitEPNS_16TIntermTraverserE to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)* @_ZN2sh12TIntermTyped10getAsTypedEv to i8*), i8* bitcast (%"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermConstantUnion"*)* @_ZN2sh20TIntermConstantUnion18getAsConstantUnionEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode23getAsFunctionDefinitionEv to i8*), i8* bitcast (%"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode10getAsBlockEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsFunctionPrototypeNodeEv to i8*), i8* bitcast (%"class.sh::TIntermGlobalQualifierDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode35getAsGlobalQualifierDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode20getAsDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsSwizzleNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermTernary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsTernaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermIfElse"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsIfElseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwitch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%"class.sh::TIntermLoop"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBranch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermPreprocessorDirective"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsPreprocessorDirectiveEv to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)* @_ZNK2sh20TIntermConstantUnion8deepCopyEv to i8*), i8* bitcast (i64 (%"class.sh::TIntermConstantUnion"*)* @_ZNK2sh20TIntermConstantUnion13getChildCountEv to i8*), i8* bitcast (%"class.sh::TIntermNode"* (%"class.sh::TIntermConstantUnion"*, i64)* @_ZNK2sh20TIntermConstantUnion12getChildNodeEm to i8*), i8* bitcast (i1 (%"class.sh::TIntermConstantUnion"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)* @_ZN2sh20TIntermConstantUnion16replaceChildNodeEPNS_11TIntermNodeES2_ to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*, %"class.sh::TDiagnostics"*)* @_ZN2sh12TIntermTyped4foldEPNS_12TDiagnosticsE to i8*), i8* bitcast (i1 (%"class.sh::TIntermConstantUnion"*)* @_ZNK2sh20TIntermConstantUnion16hasConstantValueEv to i8*), i8* bitcast (%"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)* @_ZNK2sh20TIntermConstantUnion16getConstantValueEv to i8*), i8* bitcast (i1 (%"class.sh::TIntermConstantUnion"*)* @_ZNK2sh20TIntermConstantUnion14hasSideEffectsEv to i8*), i8* bitcast (%"class.sh::TType"* (%"class.sh::TIntermExpression"*)* @_ZNK2sh17TIntermExpression7getTypeEv to i8*)] }, align 8
@_ZTVN2sh24TIntermFunctionPrototypeE = external unnamed_addr constant { [34 x i8*] }, align 8
@_ZTVN2sh14TIntermSwizzleE = external unnamed_addr constant { [34 x i8*] }, align 8
@_ZTVN2sh13TIntermBinaryE = hidden unnamed_addr constant { [34 x i8*] } { [34 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNodeD2Ev to i8*), i8* bitcast (void (%"class.sh::TIntermBinary"*)* @_ZN2sh13TIntermBinaryD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermBinary"*, %"class.sh::TIntermTraverser"*)* @_ZN2sh13TIntermBinary8traverseEPNS_16TIntermTraverserE to i8*), i8* bitcast (i1 (%"class.sh::TIntermBinary"*, i32, %"class.sh::TIntermTraverser"*)* @_ZN2sh13TIntermBinary5visitENS_5VisitEPNS_16TIntermTraverserE to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)* @_ZN2sh12TIntermTyped10getAsTypedEv to i8*), i8* bitcast (%"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode23getAsFunctionDefinitionEv to i8*), i8* bitcast (%"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode10getAsBlockEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsFunctionPrototypeNodeEv to i8*), i8* bitcast (%"class.sh::TIntermGlobalQualifierDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode35getAsGlobalQualifierDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode20getAsDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsSwizzleNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::TIntermBinary"*)* @_ZN2sh13TIntermBinary15getAsBinaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermTernary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsTernaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermIfElse"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsIfElseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwitch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%"class.sh::TIntermLoop"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBranch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermPreprocessorDirective"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsPreprocessorDirectiveEv to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermBinary"*)* @_ZNK2sh13TIntermBinary8deepCopyEv to i8*), i8* bitcast (i64 (%"class.sh::TIntermBinary"*)* @_ZNK2sh13TIntermBinary13getChildCountEv to i8*), i8* bitcast (%"class.sh::TIntermNode"* (%"class.sh::TIntermBinary"*, i64)* @_ZNK2sh13TIntermBinary12getChildNodeEm to i8*), i8* bitcast (i1 (%"class.sh::TIntermBinary"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)* @_ZN2sh13TIntermBinary16replaceChildNodeEPNS_11TIntermNodeES2_ to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermBinary"*, %"class.sh::TDiagnostics"*)* @_ZN2sh13TIntermBinary4foldEPNS_12TDiagnosticsE to i8*), i8* bitcast (i1 (%"class.sh::TIntermBinary"*)* @_ZNK2sh13TIntermBinary16hasConstantValueEv to i8*), i8* bitcast (%"class.sh::TConstantUnion"* (%"class.sh::TIntermBinary"*)* @_ZNK2sh13TIntermBinary16getConstantValueEv to i8*), i8* bitcast (i1 (%"class.sh::TIntermBinary"*)* @_ZNK2sh13TIntermBinary14hasSideEffectsEv to i8*), i8* bitcast (%"class.sh::TType"* (%"class.sh::TIntermExpression"*)* @_ZNK2sh17TIntermExpression7getTypeEv to i8*)] }, align 8
@_ZTVN2sh12TIntermUnaryE = external unnamed_addr constant { [34 x i8*] }, align 8
@_ZTVN2sh14TIntermTernaryE = external unnamed_addr constant { [34 x i8*] }, align 8
@_ZTVN2sh33TIntermGlobalQualifierDeclarationE = external unnamed_addr constant { [29 x i8*] }, align 8
@_ZTVN2sh11TIntermLoopE = external unnamed_addr constant { [29 x i8*] }, align 8
@_ZTVN2sh13TIntermIfElseE = external unnamed_addr constant { [29 x i8*] }, align 8
@_ZTVN2sh13TIntermSwitchE = external unnamed_addr constant { [29 x i8*] }, align 8
@.str.1 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"y\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"z\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.5 = private unnamed_addr constant [46 x i8] c"casting a negative float to uint is undefined\00", align 1
@.str.6 = private unnamed_addr constant [59 x i8] c"Zero divided by zero during constant folding generated NaN\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.8 = private unnamed_addr constant [39 x i8] c"Divide by zero during constant folding\00", align 1
@.str.9 = private unnamed_addr constant [67 x i8] c"Infinity divided by infinity during constant folding generated NaN\00", align 1
@.str.10 = private unnamed_addr constant [48 x i8] c"Constant folded division overflowed to infinity\00", align 1
@.str.11 = private unnamed_addr constant [45 x i8] c"Divide by zero error during constant folding\00", align 1
@.str.12 = private unnamed_addr constant [94 x i8] c"Negative modulus operator operand encountered during constant folding. Results are undefined.\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"%\00", align 1
@_ZTVN2sh28TIntermPreprocessorDirectiveE = hidden unnamed_addr constant { [29 x i8*] } { [29 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh28TIntermPreprocessorDirectiveD2Ev to i8*), i8* bitcast (void (%"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh28TIntermPreprocessorDirectiveD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermPreprocessorDirective"*, %"class.sh::TIntermTraverser"*)* @_ZN2sh28TIntermPreprocessorDirective8traverseEPNS_16TIntermTraverserE to i8*), i8* bitcast (i1 (%"class.sh::TIntermPreprocessorDirective"*, i32, %"class.sh::TIntermTraverser"*)* @_ZN2sh28TIntermPreprocessorDirective5visitENS_5VisitEPNS_16TIntermTraverserE to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode10getAsTypedEv to i8*), i8* bitcast (%"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode23getAsFunctionDefinitionEv to i8*), i8* bitcast (%"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode10getAsBlockEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsFunctionPrototypeNodeEv to i8*), i8* bitcast (%"class.sh::TIntermGlobalQualifierDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode35getAsGlobalQualifierDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode20getAsDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsSwizzleNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermTernary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsTernaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermIfElse"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsIfElseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwitch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%"class.sh::TIntermLoop"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBranch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermPreprocessorDirective"* (%"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh28TIntermPreprocessorDirective26getAsPreprocessorDirectiveEv to i8*), i8* bitcast (%"class.sh::TIntermPreprocessorDirective"* (%"class.sh::TIntermPreprocessorDirective"*)* @_ZNK2sh28TIntermPreprocessorDirective8deepCopyEv to i8*), i8* bitcast (i64 (%"class.sh::TIntermPreprocessorDirective"*)* @_ZNK2sh28TIntermPreprocessorDirective13getChildCountEv to i8*), i8* bitcast (%"class.sh::TIntermNode"* (%"class.sh::TIntermPreprocessorDirective"*, i64)* @_ZNK2sh28TIntermPreprocessorDirective12getChildNodeEm to i8*), i8* bitcast (i1 (%"class.sh::TIntermPreprocessorDirective"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)* @_ZN2sh28TIntermPreprocessorDirective16replaceChildNodeEPNS_11TIntermNodeES2_ to i8*)] }, align 8
@_ZTVN2sh13TIntermBranchE = external unnamed_addr constant { [29 x i8*] }, align 8
@_ZTVN2sh15TIntermOperatorE = linkonce_odr hidden unnamed_addr constant { [34 x i8*] } { [34 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNodeD2Ev to i8*), i8* bitcast (void (%"class.sh::TIntermOperator"*)* @_ZN2sh15TIntermOperatorD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)* @_ZN2sh11TIntermNode8traverseEPNS_16TIntermTraverserE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)* @_ZN2sh12TIntermTyped10getAsTypedEv to i8*), i8* bitcast (%"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode23getAsFunctionDefinitionEv to i8*), i8* bitcast (%"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode10getAsBlockEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsFunctionPrototypeNodeEv to i8*), i8* bitcast (%"class.sh::TIntermGlobalQualifierDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode35getAsGlobalQualifierDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode20getAsDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsSwizzleNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermTernary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsTernaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermIfElse"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsIfElseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwitch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%"class.sh::TIntermLoop"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBranch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermPreprocessorDirective"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsPreprocessorDirectiveEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*, %"class.sh::TDiagnostics"*)* @_ZN2sh12TIntermTyped4foldEPNS_12TDiagnosticsE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTyped"*)* @_ZNK2sh12TIntermTyped16hasConstantValueEv to i8*), i8* bitcast (%"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)* @_ZNK2sh12TIntermTyped16getConstantValueEv to i8*), i8* bitcast (i1 (%"class.sh::TIntermOperator"*)* @_ZNK2sh15TIntermOperator14hasSideEffectsEv to i8*), i8* bitcast (%"class.sh::TType"* (%"class.sh::TIntermExpression"*)* @_ZNK2sh17TIntermExpression7getTypeEv to i8*)] }, comdat, align 8
@.str.14 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZTVN2sh11TIntermCaseE = external unnamed_addr constant { [29 x i8*] }, align 8
@.str.16 = private unnamed_addr constant [55 x i8] c"operation result is undefined for the values passed in\00", align 1
@switch.table._ZNK2sh14TIntermSwizzle18writeOffsetsAsXYZWEPNS_13TInfoSinkBaseE = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)], align 8

@_ZN2sh13TIntermBranchC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermBranch"*, %"class.sh::TIntermBranch"*), void (%"class.sh::TIntermBranch"*, %"class.sh::TIntermBranch"*)* @_ZN2sh13TIntermBranchC2ERKS0_
@_ZN2sh12TIntermBlockC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"*), void (%"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"*)* @_ZN2sh12TIntermBlockC2ERKS0_
@_ZN2sh18TIntermDeclarationC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermDeclaration"*), void (%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermDeclaration"*)* @_ZN2sh18TIntermDeclarationC2ERKS0_
@_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE = hidden unnamed_addr alias void (%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*), void (%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*)* @_ZN2sh13TIntermSymbolC2EPKNS_9TVariableE
@_ZN2sh16TIntermAggregateC1EPKNS_9TFunctionERKNS_5TTypeE9TOperatorPNS_7TVectorIPNS_11TIntermNodeEEE = hidden unnamed_addr alias void (%"class.sh::TIntermAggregate"*, %"class.sh::TFunction"*, %"class.sh::TType"*, i8, %"class.sh::TVector.8"*), void (%"class.sh::TIntermAggregate"*, %"class.sh::TFunction"*, %"class.sh::TType"*, i8, %"class.sh::TVector.8"*)* @_ZN2sh16TIntermAggregateC2EPKNS_9TFunctionERKNS_5TTypeE9TOperatorPNS_7TVectorIPNS_11TIntermNodeEEE
@_ZN2sh11TIntermCaseC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermCase"*, %"class.sh::TIntermCase"*), void (%"class.sh::TIntermCase"*, %"class.sh::TIntermCase"*)* @_ZN2sh11TIntermCaseC2ERKS0_
@_ZN2sh20TIntermConstantUnionC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermConstantUnion"*, %"class.sh::TIntermConstantUnion"*), void (%"class.sh::TIntermConstantUnion"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh20TIntermConstantUnionC2ERKS0_
@_ZN2sh24TIntermFunctionPrototypeC1EPKNS_9TFunctionE = hidden unnamed_addr alias void (%"class.sh::TIntermFunctionPrototype"*, %"class.sh::TFunction"*), void (%"class.sh::TIntermFunctionPrototype"*, %"class.sh::TFunction"*)* @_ZN2sh24TIntermFunctionPrototypeC2EPKNS_9TFunctionE
@_ZN2sh16TIntermAggregateC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermAggregate"*, %"class.sh::TIntermAggregate"*), void (%"class.sh::TIntermAggregate"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermAggregateC2ERKS0_
@_ZN2sh14TIntermSwizzleC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermSwizzle"*, %"class.sh::TIntermSwizzle"*), void (%"class.sh::TIntermSwizzle"*, %"class.sh::TIntermSwizzle"*)* @_ZN2sh14TIntermSwizzleC2ERKS0_
@_ZN2sh13TIntermBinaryC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"*), void (%"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"*)* @_ZN2sh13TIntermBinaryC2ERKS0_
@_ZN2sh12TIntermUnaryC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermUnary"*, %"class.sh::TIntermUnary"*), void (%"class.sh::TIntermUnary"*, %"class.sh::TIntermUnary"*)* @_ZN2sh12TIntermUnaryC2ERKS0_
@_ZN2sh14TIntermTernaryC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermTernary"*, %"class.sh::TIntermTernary"*), void (%"class.sh::TIntermTernary"*, %"class.sh::TIntermTernary"*)* @_ZN2sh14TIntermTernaryC2ERKS0_
@_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE = hidden unnamed_addr alias void (%"class.sh::TIntermSwizzle"*, %"class.sh::TIntermTyped"*, %"class.sh::TVector.16"*), void (%"class.sh::TIntermSwizzle"*, %"class.sh::TIntermTyped"*, %"class.sh::TVector.16"*)* @_ZN2sh14TIntermSwizzleC2EPNS_12TIntermTypedERKNS_7TVectorIiEE
@_ZN2sh12TIntermUnaryC1E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE = hidden unnamed_addr alias void (%"class.sh::TIntermUnary"*, i8, %"class.sh::TIntermTyped"*, %"class.sh::TFunction"*), void (%"class.sh::TIntermUnary"*, i8, %"class.sh::TIntermTyped"*, %"class.sh::TFunction"*)* @_ZN2sh12TIntermUnaryC2E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE
@_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_ = hidden unnamed_addr alias void (%"class.sh::TIntermBinary"*, i8, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*), void (%"class.sh::TIntermBinary"*, i8, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*)* @_ZN2sh13TIntermBinaryC2E9TOperatorPNS_12TIntermTypedES3_
@_ZN2sh33TIntermGlobalQualifierDeclarationC1EPNS_13TIntermSymbolEbRKNS_10TSourceLocE = hidden unnamed_addr alias void (%"class.sh::TIntermGlobalQualifierDeclaration"*, %"class.sh::TIntermSymbol"*, i1, %"struct.sh::TSourceLoc"*), void (%"class.sh::TIntermGlobalQualifierDeclaration"*, %"class.sh::TIntermSymbol"*, i1, %"struct.sh::TSourceLoc"*)* @_ZN2sh33TIntermGlobalQualifierDeclarationC2EPNS_13TIntermSymbolEbRKNS_10TSourceLocE
@_ZN2sh33TIntermGlobalQualifierDeclarationC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermGlobalQualifierDeclaration"*, %"class.sh::TIntermGlobalQualifierDeclaration"*), void (%"class.sh::TIntermGlobalQualifierDeclaration"*, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh33TIntermGlobalQualifierDeclarationC2ERKS0_
@_ZN2sh14TIntermTernaryC1EPNS_12TIntermTypedES2_S2_ = hidden unnamed_addr alias void (%"class.sh::TIntermTernary"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*), void (%"class.sh::TIntermTernary"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*)* @_ZN2sh14TIntermTernaryC2EPNS_12TIntermTypedES2_S2_
@_ZN2sh11TIntermLoopC1ENS_9TLoopTypeEPNS_11TIntermNodeEPNS_12TIntermTypedES5_PNS_12TIntermBlockE = hidden unnamed_addr alias void (%"class.sh::TIntermLoop"*, i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*), void (%"class.sh::TIntermLoop"*, i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*)* @_ZN2sh11TIntermLoopC2ENS_9TLoopTypeEPNS_11TIntermNodeEPNS_12TIntermTypedES5_PNS_12TIntermBlockE
@_ZN2sh11TIntermLoopC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermLoop"*, %"class.sh::TIntermLoop"*), void (%"class.sh::TIntermLoop"*, %"class.sh::TIntermLoop"*)* @_ZN2sh11TIntermLoopC2ERKS0_
@_ZN2sh13TIntermIfElseC1EPNS_12TIntermTypedEPNS_12TIntermBlockES4_ = hidden unnamed_addr alias void (%"class.sh::TIntermIfElse"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"*), void (%"class.sh::TIntermIfElse"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"*)* @_ZN2sh13TIntermIfElseC2EPNS_12TIntermTypedEPNS_12TIntermBlockES4_
@_ZN2sh13TIntermIfElseC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermIfElse"*, %"class.sh::TIntermIfElse"*), void (%"class.sh::TIntermIfElse"*, %"class.sh::TIntermIfElse"*)* @_ZN2sh13TIntermIfElseC2ERKS0_
@_ZN2sh13TIntermSwitchC1EPNS_12TIntermTypedEPNS_12TIntermBlockE = hidden unnamed_addr alias void (%"class.sh::TIntermSwitch"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*), void (%"class.sh::TIntermSwitch"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*)* @_ZN2sh13TIntermSwitchC2EPNS_12TIntermTypedEPNS_12TIntermBlockE
@_ZN2sh13TIntermSwitchC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermSwitch"*, %"class.sh::TIntermSwitch"*), void (%"class.sh::TIntermSwitch"*, %"class.sh::TIntermSwitch"*)* @_ZN2sh13TIntermSwitchC2ERKS0_
@_ZN2sh28TIntermPreprocessorDirectiveC1ENS_21PreprocessorDirectiveENS_15ImmutableStringE = hidden unnamed_addr alias void (%"class.sh::TIntermPreprocessorDirective"*, i32, i8*, i64), void (%"class.sh::TIntermPreprocessorDirective"*, i32, i8*, i64)* @_ZN2sh28TIntermPreprocessorDirectiveC2ENS_21PreprocessorDirectiveENS_15ImmutableStringE
@_ZN2sh28TIntermPreprocessorDirectiveC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermPreprocessorDirective"*, %"class.sh::TIntermPreprocessorDirective"*), void (%"class.sh::TIntermPreprocessorDirective"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh28TIntermPreprocessorDirectiveC2ERKS0_
@_ZN2sh28TIntermPreprocessorDirectiveD1Ev = hidden unnamed_addr alias void (%"class.sh::TIntermPreprocessorDirective"*), void (%"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh28TIntermPreprocessorDirectiveD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh17TIntermExpressionC2ERKNS_5TTypeE(%"class.sh::TIntermExpression"*, %"class.sh::TType"* dereferenceable(184)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermExpression", %"class.sh::TIntermExpression"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %4 = bitcast i32* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 16, i1 false) #18
  %5 = getelementptr inbounds %"class.sh::TIntermExpression", %"class.sh::TIntermExpression"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermExpression", %"class.sh::TIntermExpression"* %0, i64 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %6, %"class.sh::TType"* dereferenceable(184) %1) #18
  ret void
}

declare void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"*, %"class.sh::TType"* dereferenceable(184)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh17TIntermExpression24setTypePreservePrecisionERKNS_5TTypeE(%"class.sh::TIntermExpression"*, %"class.sh::TType"* dereferenceable(184)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermExpression", %"class.sh::TIntermExpression"* %0, i64 0, i32 0
  %4 = bitcast %"class.sh::TIntermExpression"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %5 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %5, i64 31
  %7 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %6, align 8
  %8 = tail call dereferenceable(184) %"class.sh::TType"* %7(%"class.sh::TIntermTyped"* %3) #18
  %9 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %8, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.sh::TIntermExpression", %"class.sh::TIntermExpression"* %0, i64 0, i32 1
  %12 = tail call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %11, %"class.sh::TType"* dereferenceable(184) %1) #18
  %13 = getelementptr inbounds %"class.sh::TIntermExpression", %"class.sh::TIntermExpression"* %0, i64 0, i32 1, i32 1
  store i32 %10, i32* %13, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"*, %"class.sh::TType"* dereferenceable(184)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh13TIntermSymbol13getChildCountEv(%"class.sh::TIntermSymbol"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %"class.sh::TIntermNode"* @_ZNK2sh13TIntermSymbol12getChildNodeEm(%"class.sh::TIntermSymbol"* nocapture readnone, i64) unnamed_addr #3 align 2 {
  ret %"class.sh::TIntermNode"* null
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh20TIntermConstantUnion13getChildCountEv(%"class.sh::TIntermConstantUnion"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %"class.sh::TIntermNode"* @_ZNK2sh20TIntermConstantUnion12getChildNodeEm(%"class.sh::TIntermConstantUnion"* nocapture readnone, i64) unnamed_addr #3 align 2 {
  ret %"class.sh::TIntermNode"* null
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2sh11TIntermLoop13getChildCountEv(%"class.sh::TIntermLoop"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 2
  %3 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, align 8
  %4 = icmp ne %"class.sh::TIntermNode"* %3, null
  %5 = zext i1 %4 to i64
  %6 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 3
  %7 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %6, align 8
  %8 = icmp ne %"class.sh::TIntermTyped"* %7, null
  %9 = zext i1 %8 to i64
  %10 = add nuw nsw i64 %9, %5
  %11 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 4
  %12 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %11, align 8
  %13 = icmp ne %"class.sh::TIntermTyped"* %12, null
  %14 = zext i1 %13 to i64
  %15 = add nuw nsw i64 %10, %14
  %16 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 5
  %17 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %16, align 8
  %18 = icmp ne %"class.sh::TIntermBlock"* %17, null
  %19 = zext i1 %18 to i64
  %20 = add nuw nsw i64 %15, %19
  ret i64 %20
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh11TIntermLoop12getChildNodeEm(%"class.sh::TIntermLoop"* nocapture readonly, i64) unnamed_addr #5 align 2 {
  %3 = alloca [4 x %"class.sh::TIntermNode"*], align 16
  %4 = bitcast [4 x %"class.sh::TIntermNode"*]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #18
  %5 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 2
  %6 = bitcast [4 x %"class.sh::TIntermNode"*]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 32, i1 false)
  %7 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %8 = icmp eq %"class.sh::TIntermNode"* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds [4 x %"class.sh::TIntermNode"*], [4 x %"class.sh::TIntermNode"*]* %3, i64 0, i64 0
  store %"class.sh::TIntermNode"* %7, %"class.sh::TIntermNode"** %10, align 16
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi i32 [ 1, %9 ], [ 0, %2 ]
  %13 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 3
  %14 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %13, align 8
  %15 = icmp eq %"class.sh::TIntermTyped"* %14, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %14, i64 0, i32 0
  %18 = zext i32 %12 to i64
  %19 = getelementptr inbounds [4 x %"class.sh::TIntermNode"*], [4 x %"class.sh::TIntermNode"*]* %3, i64 0, i64 %18
  store %"class.sh::TIntermNode"* %17, %"class.sh::TIntermNode"** %19, align 8
  %20 = add nuw nsw i32 %12, 1
  br label %21

21:                                               ; preds = %11, %16
  %22 = phi i32 [ %20, %16 ], [ %12, %11 ]
  %23 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 4
  %24 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %23, align 8
  %25 = icmp eq %"class.sh::TIntermTyped"* %24, null
  br i1 %25, label %31, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %24, i64 0, i32 0
  %28 = zext i32 %22 to i64
  %29 = getelementptr inbounds [4 x %"class.sh::TIntermNode"*], [4 x %"class.sh::TIntermNode"*]* %3, i64 0, i64 %28
  store %"class.sh::TIntermNode"* %27, %"class.sh::TIntermNode"** %29, align 8
  %30 = add nuw nsw i32 %22, 1
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i32 [ %30, %26 ], [ %22, %21 ]
  %33 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 5
  %34 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %33, align 8
  %35 = icmp eq %"class.sh::TIntermBlock"* %34, null
  br i1 %35, label %40, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %34, i64 0, i32 0
  %38 = zext i32 %32 to i64
  %39 = getelementptr inbounds [4 x %"class.sh::TIntermNode"*], [4 x %"class.sh::TIntermNode"*]* %3, i64 0, i64 %38
  store %"class.sh::TIntermNode"* %37, %"class.sh::TIntermNode"** %39, align 8
  br label %40

40:                                               ; preds = %31, %36
  %41 = getelementptr inbounds [4 x %"class.sh::TIntermNode"*], [4 x %"class.sh::TIntermNode"*]* %3, i64 0, i64 %1
  %42 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %41, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #18
  ret %"class.sh::TIntermNode"* %42
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh11TIntermLoop16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermLoop"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 2
  %5 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, align 8
  %6 = icmp eq %"class.sh::TIntermNode"* %5, %1
  br i1 %6, label %22, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 3
  %9 = bitcast %"class.sh::TIntermTyped"** %8 to %"class.sh::TIntermNode"**
  %10 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %9, align 8
  %11 = icmp eq %"class.sh::TIntermNode"* %10, %1
  br i1 %11, label %22, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 4
  %14 = bitcast %"class.sh::TIntermTyped"** %13 to %"class.sh::TIntermNode"**
  %15 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %14, align 8
  %16 = icmp eq %"class.sh::TIntermNode"* %15, %1
  br i1 %16, label %22, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 5
  %19 = bitcast %"class.sh::TIntermBlock"** %18 to %"class.sh::TIntermNode"**
  %20 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %19, align 8
  %21 = icmp eq %"class.sh::TIntermNode"* %20, %1
  br i1 %21, label %22, label %24

22:                                               ; preds = %17, %12, %7, %3
  %23 = phi %"class.sh::TIntermNode"** [ %4, %3 ], [ %9, %7 ], [ %14, %12 ], [ %19, %17 ]
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %23, align 8
  br label %24

24:                                               ; preds = %22, %17
  %25 = phi i1 [ false, %17 ], [ true, %22 ]
  ret i1 %25
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh13TIntermBranchC2ERKS0_(%"class.sh::TIntermBranch"* nocapture, %"class.sh::TIntermBranch"* nocapture readonly dereferenceable(40)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermBranch", %"class.sh::TIntermBranch"* %1, i64 0, i32 1
  %4 = load i8, i8* %3, align 8
  %5 = getelementptr inbounds %"class.sh::TIntermBranch", %"class.sh::TIntermBranch"* %1, i64 0, i32 2
  %6 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %5, align 8
  %7 = bitcast %"class.sh::TIntermTyped"* %6 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %8 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %7, align 8
  %9 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %8, i64 23
  %10 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %9, align 8
  %11 = tail call %"class.sh::TIntermTyped"* %10(%"class.sh::TIntermTyped"* %6) #18
  %12 = getelementptr inbounds %"class.sh::TIntermBranch", %"class.sh::TIntermBranch"* %0, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.sh::TIntermBranch", %"class.sh::TIntermBranch"* %0, i64 0, i32 0, i32 1, i32 0
  %14 = bitcast i32* %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [29 x i8*] }, { [29 x i8*] }* @_ZTVN2sh13TIntermBranchE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %15 = getelementptr inbounds %"class.sh::TIntermBranch", %"class.sh::TIntermBranch"* %0, i64 0, i32 1
  store i8 %4, i8* %15, align 8
  %16 = getelementptr inbounds %"class.sh::TIntermBranch", %"class.sh::TIntermBranch"* %0, i64 0, i32 2
  store %"class.sh::TIntermTyped"* %11, %"class.sh::TIntermTyped"** %16, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2sh13TIntermBranch13getChildCountEv(%"class.sh::TIntermBranch"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermBranch", %"class.sh::TIntermBranch"* %0, i64 0, i32 2
  %3 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %2, align 8
  %4 = icmp ne %"class.sh::TIntermTyped"* %3, null
  %5 = zext i1 %4 to i64
  ret i64 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh13TIntermBranch12getChildNodeEm(%"class.sh::TIntermBranch"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermBranch", %"class.sh::TIntermBranch"* %0, i64 0, i32 2
  %4 = bitcast %"class.sh::TIntermTyped"** %3 to %"class.sh::TIntermNode"**
  %5 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, align 8
  ret %"class.sh::TIntermNode"* %5
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh13TIntermBranch16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermBranch"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermBranch", %"class.sh::TIntermBranch"* %0, i64 0, i32 2
  %5 = bitcast %"class.sh::TIntermTyped"** %4 to %"class.sh::TIntermNode"**
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, %1
  br i1 %7, label %8, label %9

8:                                                ; preds = %3
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %5, align 8
  br label %9

9:                                                ; preds = %3, %8
  %10 = phi i1 [ true, %8 ], [ false, %3 ]
  ret i1 %10
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh14TIntermSwizzle13getChildCountEv(%"class.sh::TIntermSwizzle"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 1
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh14TIntermSwizzle12getChildNodeEm(%"class.sh::TIntermSwizzle"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 1
  %4 = bitcast %"class.sh::TIntermTyped"** %3 to %"class.sh::TIntermNode"**
  %5 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, align 8
  ret %"class.sh::TIntermNode"* %5
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh14TIntermSwizzle16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermSwizzle"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermTyped"** %4 to %"class.sh::TIntermNode"**
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, %1
  br i1 %7, label %8, label %9

8:                                                ; preds = %3
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %5, align 8
  br label %9

9:                                                ; preds = %3, %8
  %10 = phi i1 [ true, %8 ], [ false, %3 ]
  ret i1 %10
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh13TIntermBinary13getChildCountEv(%"class.sh::TIntermBinary"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 2
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh13TIntermBinary12getChildNodeEm(%"class.sh::TIntermBinary"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = icmp eq i64 %1, 0
  %4 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %5 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %6 = select i1 %3, %"class.sh::TIntermTyped"** %4, %"class.sh::TIntermTyped"** %5
  %7 = bitcast %"class.sh::TIntermTyped"** %6 to %"class.sh::TIntermNode"**
  %8 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %7, align 8
  ret %"class.sh::TIntermNode"* %8
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh13TIntermBinary16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermBinary"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %5 = bitcast %"class.sh::TIntermTyped"** %4 to %"class.sh::TIntermNode"**
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, %1
  br i1 %7, label %13, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %10 = bitcast %"class.sh::TIntermTyped"** %9 to %"class.sh::TIntermNode"**
  %11 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %10, align 8
  %12 = icmp eq %"class.sh::TIntermNode"* %11, %1
  br i1 %12, label %13, label %15

13:                                               ; preds = %8, %3
  %14 = phi %"class.sh::TIntermNode"** [ %5, %3 ], [ %10, %8 ]
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %14, align 8
  br label %15

15:                                               ; preds = %13, %8
  %16 = phi i1 [ false, %8 ], [ true, %13 ]
  ret i1 %16
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh12TIntermUnary13getChildCountEv(%"class.sh::TIntermUnary"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 1
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh12TIntermUnary12getChildNodeEm(%"class.sh::TIntermUnary"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 1
  %4 = bitcast %"class.sh::TIntermTyped"** %3 to %"class.sh::TIntermNode"**
  %5 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, align 8
  ret %"class.sh::TIntermNode"* %5
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh12TIntermUnary16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermUnary"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermTyped"** %4 to %"class.sh::TIntermNode"**
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, %1
  br i1 %7, label %8, label %9

8:                                                ; preds = %3
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %5, align 8
  br label %9

9:                                                ; preds = %3, %8
  %10 = phi i1 [ true, %8 ], [ false, %3 ]
  ret i1 %10
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh33TIntermGlobalQualifierDeclaration13getChildCountEv(%"class.sh::TIntermGlobalQualifierDeclaration"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 1
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh33TIntermGlobalQualifierDeclaration12getChildNodeEm(%"class.sh::TIntermGlobalQualifierDeclaration"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermGlobalQualifierDeclaration", %"class.sh::TIntermGlobalQualifierDeclaration"* %0, i64 0, i32 1
  %4 = bitcast %"class.sh::TIntermSymbol"** %3 to %"class.sh::TIntermNode"**
  %5 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, align 8
  ret %"class.sh::TIntermNode"* %5
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh33TIntermGlobalQualifierDeclaration16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermGlobalQualifierDeclaration"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermGlobalQualifierDeclaration", %"class.sh::TIntermGlobalQualifierDeclaration"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermSymbol"** %4 to %"class.sh::TIntermNode"**
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, %1
  br i1 %7, label %8, label %9

8:                                                ; preds = %3
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %5, align 8
  br label %9

9:                                                ; preds = %3, %8
  %10 = phi i1 [ true, %8 ], [ false, %3 ]
  ret i1 %10
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh25TIntermFunctionDefinition13getChildCountEv(%"class.sh::TIntermFunctionDefinition"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 2
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh25TIntermFunctionDefinition12getChildNodeEm(%"class.sh::TIntermFunctionDefinition"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = icmp eq i64 %1, 0
  %4 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermFunctionPrototype"** %4 to %"class.sh::TIntermNode"**
  %6 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %0, i64 0, i32 2
  %7 = bitcast %"class.sh::TIntermBlock"** %6 to %"class.sh::TIntermNode"**
  %8 = select i1 %3, %"class.sh::TIntermNode"** %5, %"class.sh::TIntermNode"** %7
  %9 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, align 8
  ret %"class.sh::TIntermNode"* %9
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh25TIntermFunctionDefinition16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermFunctionDefinition"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermFunctionPrototype"** %4 to %"class.sh::TIntermNode"**
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, %1
  br i1 %7, label %13, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %0, i64 0, i32 2
  %10 = bitcast %"class.sh::TIntermBlock"** %9 to %"class.sh::TIntermNode"**
  %11 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %10, align 8
  %12 = icmp eq %"class.sh::TIntermNode"* %11, %1
  br i1 %12, label %13, label %15

13:                                               ; preds = %8, %3
  %14 = phi %"class.sh::TIntermNode"** [ %5, %3 ], [ %10, %8 ]
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %14, align 8
  br label %15

15:                                               ; preds = %13, %8
  %16 = phi i1 [ false, %8 ], [ true, %13 ]
  ret i1 %16
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2sh16TIntermAggregate13getChildCountEv(%"class.sh::TIntermAggregate"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0
  %3 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %4 = bitcast %"class.sh::TIntermNode"*** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.9"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  ret i64 %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh16TIntermAggregate12getChildNodeEm(%"class.sh::TIntermAggregate"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %3, align 8
  %5 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, i64 %1
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  ret %"class.sh::TIntermNode"* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh16TIntermAggregate16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermAggregate"*, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermAggregateBase"* %4 to %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)***
  %6 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %6, i64 2
  %8 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %7, align 8
  %9 = tail call %"class.sh::TVector.8"* %8(%"class.sh::TIntermAggregateBase"* %4) #18
  %10 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %9, i64 0, i32 0, i32 0, i32 1
  %11 = bitcast %"class.sh::TIntermNode"*** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.sh::TVector.8"* %9 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %12, %14
  br i1 %15, label %49, label %16

16:                                               ; preds = %3, %27
  %17 = phi i64 [ %28, %27 ], [ 0, %3 ]
  %18 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %19 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %18, i64 2
  %20 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %19, align 8
  %21 = tail call %"class.sh::TVector.8"* %20(%"class.sh::TIntermAggregateBase"* %4) #18
  %22 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %21, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %22, align 8
  %24 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %23, i64 %17
  %25 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %24, align 8
  %26 = icmp eq %"class.sh::TIntermNode"* %25, %1
  br i1 %26, label %41, label %27

27:                                               ; preds = %16
  %28 = add nuw i64 %17, 1
  %29 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %30 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %29, i64 2
  %31 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %30, align 8
  %32 = tail call %"class.sh::TVector.8"* %31(%"class.sh::TIntermAggregateBase"* %4) #18
  %33 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %32, i64 0, i32 0, i32 0, i32 1
  %34 = bitcast %"class.sh::TIntermNode"*** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"class.sh::TVector.8"* %32 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %35, %37
  %39 = ashr exact i64 %38, 3
  %40 = icmp ult i64 %28, %39
  br i1 %40, label %16, label %49

41:                                               ; preds = %16
  %42 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %43 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %42, i64 2
  %44 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %43, align 8
  %45 = tail call %"class.sh::TVector.8"* %44(%"class.sh::TIntermAggregateBase"* %4) #18
  %46 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %45, i64 0, i32 0, i32 0, i32 0
  %47 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %46, align 8
  %48 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %47, i64 %17
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %48, align 8
  br label %49

49:                                               ; preds = %27, %3, %41
  %50 = phi i1 [ true, %41 ], [ false, %3 ], [ false, %27 ]
  ret i1 %50
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh20TIntermAggregateBase24replaceChildNodeInternalEPNS_11TIntermNodeES2_(%"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.sh::TIntermAggregateBase"* %0 to %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)***
  %5 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %5, i64 2
  %7 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %6, align 8
  %8 = tail call %"class.sh::TVector.8"* %7(%"class.sh::TIntermAggregateBase"* %0) #18
  %9 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %8, i64 0, i32 0, i32 0, i32 1
  %10 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.sh::TVector.8"* %8 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %11, %13
  br i1 %14, label %48, label %15

15:                                               ; preds = %3, %26
  %16 = phi i64 [ %27, %26 ], [ 0, %3 ]
  %17 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %18 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %17, i64 2
  %19 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %18, align 8
  %20 = tail call %"class.sh::TVector.8"* %19(%"class.sh::TIntermAggregateBase"* %0) #18
  %21 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %20, i64 0, i32 0, i32 0, i32 0
  %22 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %21, align 8
  %23 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %22, i64 %16
  %24 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %23, align 8
  %25 = icmp eq %"class.sh::TIntermNode"* %24, %1
  br i1 %25, label %40, label %26

26:                                               ; preds = %15
  %27 = add nuw i64 %16, 1
  %28 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %29 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %28, i64 2
  %30 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %29, align 8
  %31 = tail call %"class.sh::TVector.8"* %30(%"class.sh::TIntermAggregateBase"* %0) #18
  %32 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %31, i64 0, i32 0, i32 0, i32 1
  %33 = bitcast %"class.sh::TIntermNode"*** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"class.sh::TVector.8"* %31 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = sub i64 %34, %36
  %38 = ashr exact i64 %37, 3
  %39 = icmp ult i64 %27, %38
  br i1 %39, label %15, label %48

40:                                               ; preds = %15
  %41 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %42 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %41, i64 2
  %43 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %42, align 8
  %44 = tail call %"class.sh::TVector.8"* %43(%"class.sh::TIntermAggregateBase"* %0) #18
  %45 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %44, i64 0, i32 0, i32 0, i32 0
  %46 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %45, align 8
  %47 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 %16
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %47, align 8
  br label %48

48:                                               ; preds = %26, %3, %40
  %49 = phi i1 [ true, %40 ], [ false, %3 ], [ false, %26 ]
  ret i1 %49
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12TIntermBlockC2ERKS0_(%"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* nocapture readonly dereferenceable(64)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 0, i32 1, i32 0
  %5 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false) #18
  %6 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 2
  %8 = bitcast %"class.sh::TVector.8"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #18
  %9 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %10 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 2, i32 0, i32 0, i32 1
  %12 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %11, align 8
  %13 = icmp eq %"class.sh::TIntermNode"** %10, %12
  br i1 %13, label %21, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast %"class.sh::TIntermNode"*** %15 to i64*
  %18 = bitcast %"class.sh::TVector.8"* %7 to i64*
  %19 = bitcast %"class.sh::TIntermNode"*** %16 to i64*
  %20 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %7, i64 0, i32 0, i32 0, i32 0
  br label %23

21:                                               ; preds = %250, %2
  %22 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 3
  store i8 0, i8* %22, align 8
  ret void

23:                                               ; preds = %14, %250
  %24 = phi %"class.sh::TIntermNode"** [ %10, %14 ], [ %251, %250 ]
  %25 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %24, align 8
  %26 = bitcast %"class.sh::TIntermNode"* %25 to %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)***
  %27 = load %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)*** %26, align 8
  %28 = getelementptr inbounds %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)** %27, i64 23
  %29 = load %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)** %28, align 8
  %30 = tail call %"class.sh::TIntermNode"* %29(%"class.sh::TIntermNode"* %25) #18
  %31 = ptrtoint %"class.sh::TIntermNode"* %30 to i64
  %32 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %15, align 8
  %33 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %16, align 8
  %34 = icmp ult %"class.sh::TIntermNode"** %32, %33
  %35 = ptrtoint %"class.sh::TIntermNode"** %33 to i64
  br i1 %34, label %36, label %40

36:                                               ; preds = %23
  %37 = bitcast %"class.sh::TIntermNode"** %32 to i64*
  store i64 %31, i64* %37, align 8
  %38 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %32, i64 1
  %39 = ptrtoint %"class.sh::TIntermNode"** %38 to i64
  store i64 %39, i64* %17, align 8
  br label %250

40:                                               ; preds = %23
  %41 = ptrtoint %"class.sh::TIntermNode"** %32 to i64
  %42 = load i64, i64* %18, align 8
  %43 = sub i64 %41, %42
  %44 = ashr exact i64 %43, 3
  %45 = add nsw i64 %44, 1
  %46 = icmp ugt i64 %45, 2305843009213693951
  br i1 %46, label %47, label %49

47:                                               ; preds = %40
  %48 = bitcast %"class.sh::TVector.8"* %7 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %48) #19
  unreachable

49:                                               ; preds = %40
  %50 = sub i64 %35, %42
  %51 = ashr exact i64 %50, 3
  %52 = icmp ult i64 %51, 1152921504606846975
  br i1 %52, label %53, label %58

53:                                               ; preds = %49
  %54 = ashr exact i64 %50, 2
  %55 = icmp ult i64 %54, %45
  %56 = select i1 %55, i64 %45, i64 %54
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %64, label %58

58:                                               ; preds = %53, %49
  %59 = phi i64 [ %56, %53 ], [ 2305843009213693951, %49 ]
  %60 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %61 = shl i64 %59, 3
  %62 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %60, i64 %61) #18
  %63 = bitcast i8* %62 to %"class.sh::TIntermNode"**
  br label %64

64:                                               ; preds = %58, %53
  %65 = phi i64 [ %59, %58 ], [ 0, %53 ]
  %66 = phi %"class.sh::TIntermNode"** [ %63, %58 ], [ null, %53 ]
  %67 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %66, i64 %44
  %68 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %66, i64 %65
  %69 = ptrtoint %"class.sh::TIntermNode"** %68 to i64
  %70 = bitcast %"class.sh::TIntermNode"** %67 to i64*
  store i64 %31, i64* %70, align 8
  %71 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %67, i64 1
  %72 = ptrtoint %"class.sh::TIntermNode"** %71 to i64
  %73 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %20, align 8
  %74 = ptrtoint %"class.sh::TIntermNode"** %73 to i64
  %75 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %15, align 8
  %76 = icmp eq %"class.sh::TIntermNode"** %75, %73
  br i1 %76, label %247, label %77

77:                                               ; preds = %64
  %78 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 -1
  %79 = ptrtoint %"class.sh::TIntermNode"** %78 to i64
  %80 = sub i64 %79, %74
  %81 = lshr i64 %80, 3
  %82 = add nuw nsw i64 %81, 1
  %83 = icmp ult i64 %82, 4
  br i1 %83, label %177, label %84

84:                                               ; preds = %77
  %85 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %66, i64 -1
  %86 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 -1
  %87 = ptrtoint %"class.sh::TIntermNode"** %86 to i64
  %88 = sub i64 %87, %74
  %89 = lshr i64 %88, 3
  %90 = sub nsw i64 %44, %89
  %91 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %85, i64 %90
  %92 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 -1
  %93 = sub nsw i64 0, %89
  %94 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 %93
  %95 = icmp ult %"class.sh::TIntermNode"** %91, %75
  %96 = icmp ult %"class.sh::TIntermNode"** %94, %67
  %97 = and i1 %95, %96
  br i1 %97, label %177, label %98

98:                                               ; preds = %84
  %99 = and i64 %82, 4611686018427387900
  %100 = sub nsw i64 0, %99
  %101 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %67, i64 %100
  %102 = sub nsw i64 0, %99
  %103 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 %102
  %104 = add nsw i64 %99, -4
  %105 = lshr exact i64 %104, 2
  %106 = add nuw nsw i64 %105, 1
  %107 = and i64 %106, 1
  %108 = icmp eq i64 %104, 0
  br i1 %108, label %153, label %109

109:                                              ; preds = %98
  %110 = sub nuw nsw i64 %106, %107
  %111 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %67, i64 -1
  %112 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 -1
  %113 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %67, i64 -1
  %114 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 -1
  br label %115

115:                                              ; preds = %115, %109
  %116 = phi i64 [ 0, %109 ], [ %150, %115 ]
  %117 = phi i64 [ %110, %109 ], [ %151, %115 ]
  %118 = sub i64 0, %116
  %119 = sub i64 0, %116
  %120 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %111, i64 %118
  %121 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %112, i64 %119
  %122 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %121, i64 -1
  %123 = bitcast %"class.sh::TIntermNode"** %122 to <2 x i64>*
  %124 = load <2 x i64>, <2 x i64>* %123, align 8, !alias.scope !2
  %125 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %121, i64 -2
  %126 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %125, i64 -1
  %127 = bitcast %"class.sh::TIntermNode"** %126 to <2 x i64>*
  %128 = load <2 x i64>, <2 x i64>* %127, align 8, !alias.scope !2
  %129 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %120, i64 -1
  %130 = bitcast %"class.sh::TIntermNode"** %129 to <2 x i64>*
  store <2 x i64> %124, <2 x i64>* %130, align 8, !alias.scope !5, !noalias !2
  %131 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %120, i64 -2
  %132 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %131, i64 -1
  %133 = bitcast %"class.sh::TIntermNode"** %132 to <2 x i64>*
  store <2 x i64> %128, <2 x i64>* %133, align 8, !alias.scope !5, !noalias !2
  %134 = sub nuw nsw i64 -4, %116
  %135 = sub nuw nsw i64 -4, %116
  %136 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %113, i64 %134
  %137 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %114, i64 %135
  %138 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %137, i64 -1
  %139 = bitcast %"class.sh::TIntermNode"** %138 to <2 x i64>*
  %140 = load <2 x i64>, <2 x i64>* %139, align 8, !alias.scope !2
  %141 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %137, i64 -2
  %142 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %141, i64 -1
  %143 = bitcast %"class.sh::TIntermNode"** %142 to <2 x i64>*
  %144 = load <2 x i64>, <2 x i64>* %143, align 8, !alias.scope !2
  %145 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %136, i64 -1
  %146 = bitcast %"class.sh::TIntermNode"** %145 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %146, align 8, !alias.scope !5, !noalias !2
  %147 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %136, i64 -2
  %148 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %147, i64 -1
  %149 = bitcast %"class.sh::TIntermNode"** %148 to <2 x i64>*
  store <2 x i64> %144, <2 x i64>* %149, align 8, !alias.scope !5, !noalias !2
  %150 = add i64 %116, 8
  %151 = add i64 %117, -2
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %115, !llvm.loop !7

153:                                              ; preds = %115, %98
  %154 = phi i64 [ 0, %98 ], [ %150, %115 ]
  %155 = icmp eq i64 %107, 0
  br i1 %155, label %175, label %156

156:                                              ; preds = %153
  %157 = sub i64 0, %154
  %158 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %67, i64 -1
  %159 = sub i64 0, %154
  %160 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 -1
  %161 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %158, i64 %157
  %162 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %160, i64 %159
  %163 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 -1
  %164 = bitcast %"class.sh::TIntermNode"** %163 to <2 x i64>*
  %165 = load <2 x i64>, <2 x i64>* %164, align 8, !alias.scope !2
  %166 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 -2
  %167 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %166, i64 -1
  %168 = bitcast %"class.sh::TIntermNode"** %167 to <2 x i64>*
  %169 = load <2 x i64>, <2 x i64>* %168, align 8, !alias.scope !2
  %170 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -1
  %171 = bitcast %"class.sh::TIntermNode"** %170 to <2 x i64>*
  store <2 x i64> %165, <2 x i64>* %171, align 8, !alias.scope !5, !noalias !2
  %172 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -2
  %173 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %172, i64 -1
  %174 = bitcast %"class.sh::TIntermNode"** %173 to <2 x i64>*
  store <2 x i64> %169, <2 x i64>* %174, align 8, !alias.scope !5, !noalias !2
  br label %175

175:                                              ; preds = %153, %156
  %176 = icmp eq i64 %82, %99
  br i1 %176, label %247, label %177

177:                                              ; preds = %175, %84, %77
  %178 = phi %"class.sh::TIntermNode"** [ %67, %84 ], [ %67, %77 ], [ %101, %175 ]
  %179 = phi %"class.sh::TIntermNode"** [ %75, %84 ], [ %75, %77 ], [ %103, %175 ]
  %180 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %179, i64 -1
  %181 = ptrtoint %"class.sh::TIntermNode"** %180 to i64
  %182 = sub i64 %181, %74
  %183 = lshr i64 %182, 3
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 7
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %198, label %187

187:                                              ; preds = %177, %187
  %188 = phi %"class.sh::TIntermNode"** [ %191, %187 ], [ %178, %177 ]
  %189 = phi %"class.sh::TIntermNode"** [ %192, %187 ], [ %179, %177 ]
  %190 = phi i64 [ %196, %187 ], [ %185, %177 ]
  %191 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -1
  %192 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %189, i64 -1
  %193 = bitcast %"class.sh::TIntermNode"** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = bitcast %"class.sh::TIntermNode"** %191 to i64*
  store i64 %194, i64* %195, align 8
  %196 = add i64 %190, -1
  %197 = icmp eq i64 %196, 0
  br i1 %197, label %198, label %187, !llvm.loop !9

198:                                              ; preds = %187, %177
  %199 = phi %"class.sh::TIntermNode"** [ undef, %177 ], [ %191, %187 ]
  %200 = phi %"class.sh::TIntermNode"** [ %178, %177 ], [ %191, %187 ]
  %201 = phi %"class.sh::TIntermNode"** [ %179, %177 ], [ %192, %187 ]
  %202 = icmp ult i64 %182, 56
  br i1 %202, label %247, label %203

203:                                              ; preds = %198, %203
  %204 = phi %"class.sh::TIntermNode"** [ %241, %203 ], [ %200, %198 ]
  %205 = phi %"class.sh::TIntermNode"** [ %242, %203 ], [ %201, %198 ]
  %206 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 -1
  %207 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %205, i64 -1
  %208 = bitcast %"class.sh::TIntermNode"** %207 to i64*
  %209 = load i64, i64* %208, align 8
  %210 = bitcast %"class.sh::TIntermNode"** %206 to i64*
  store i64 %209, i64* %210, align 8
  %211 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 -2
  %212 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %205, i64 -2
  %213 = bitcast %"class.sh::TIntermNode"** %212 to i64*
  %214 = load i64, i64* %213, align 8
  %215 = bitcast %"class.sh::TIntermNode"** %211 to i64*
  store i64 %214, i64* %215, align 8
  %216 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 -3
  %217 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %205, i64 -3
  %218 = bitcast %"class.sh::TIntermNode"** %217 to i64*
  %219 = load i64, i64* %218, align 8
  %220 = bitcast %"class.sh::TIntermNode"** %216 to i64*
  store i64 %219, i64* %220, align 8
  %221 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 -4
  %222 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %205, i64 -4
  %223 = bitcast %"class.sh::TIntermNode"** %222 to i64*
  %224 = load i64, i64* %223, align 8
  %225 = bitcast %"class.sh::TIntermNode"** %221 to i64*
  store i64 %224, i64* %225, align 8
  %226 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 -5
  %227 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %205, i64 -5
  %228 = bitcast %"class.sh::TIntermNode"** %227 to i64*
  %229 = load i64, i64* %228, align 8
  %230 = bitcast %"class.sh::TIntermNode"** %226 to i64*
  store i64 %229, i64* %230, align 8
  %231 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 -6
  %232 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %205, i64 -6
  %233 = bitcast %"class.sh::TIntermNode"** %232 to i64*
  %234 = load i64, i64* %233, align 8
  %235 = bitcast %"class.sh::TIntermNode"** %231 to i64*
  store i64 %234, i64* %235, align 8
  %236 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 -7
  %237 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %205, i64 -7
  %238 = bitcast %"class.sh::TIntermNode"** %237 to i64*
  %239 = load i64, i64* %238, align 8
  %240 = bitcast %"class.sh::TIntermNode"** %236 to i64*
  store i64 %239, i64* %240, align 8
  %241 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 -8
  %242 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %205, i64 -8
  %243 = bitcast %"class.sh::TIntermNode"** %242 to i64*
  %244 = load i64, i64* %243, align 8
  %245 = bitcast %"class.sh::TIntermNode"** %241 to i64*
  store i64 %244, i64* %245, align 8
  %246 = icmp eq %"class.sh::TIntermNode"** %242, %73
  br i1 %246, label %247, label %203, !llvm.loop !11

247:                                              ; preds = %198, %203, %175, %64
  %248 = phi %"class.sh::TIntermNode"** [ %67, %64 ], [ %101, %175 ], [ %199, %198 ], [ %241, %203 ]
  %249 = ptrtoint %"class.sh::TIntermNode"** %248 to i64
  store i64 %249, i64* %18, align 8
  store i64 %72, i64* %17, align 8
  store i64 %69, i64* %19, align 8
  br label %250

250:                                              ; preds = %36, %247
  %251 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %24, i64 1
  %252 = icmp eq %"class.sh::TIntermNode"** %251, %12
  br i1 %252, label %21, label %23
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2sh12TIntermBlock13getChildCountEv(%"class.sh::TIntermBlock"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 2, i32 0
  %3 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %4 = bitcast %"class.sh::TIntermNode"*** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.9"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  ret i64 %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh12TIntermBlock12getChildNodeEm(%"class.sh::TIntermBlock"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %3, align 8
  %5 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, i64 %1
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  ret %"class.sh::TIntermNode"* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh12TIntermBlock16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermBlock"*, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermAggregateBase"* %4 to %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)***
  %6 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %6, i64 2
  %8 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %7, align 8
  %9 = tail call %"class.sh::TVector.8"* %8(%"class.sh::TIntermAggregateBase"* %4) #18
  %10 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %9, i64 0, i32 0, i32 0, i32 1
  %11 = bitcast %"class.sh::TIntermNode"*** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.sh::TVector.8"* %9 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %12, %14
  br i1 %15, label %49, label %16

16:                                               ; preds = %3, %27
  %17 = phi i64 [ %28, %27 ], [ 0, %3 ]
  %18 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %19 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %18, i64 2
  %20 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %19, align 8
  %21 = tail call %"class.sh::TVector.8"* %20(%"class.sh::TIntermAggregateBase"* %4) #18
  %22 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %21, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %22, align 8
  %24 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %23, i64 %17
  %25 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %24, align 8
  %26 = icmp eq %"class.sh::TIntermNode"* %25, %1
  br i1 %26, label %41, label %27

27:                                               ; preds = %16
  %28 = add nuw i64 %17, 1
  %29 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %30 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %29, i64 2
  %31 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %30, align 8
  %32 = tail call %"class.sh::TVector.8"* %31(%"class.sh::TIntermAggregateBase"* %4) #18
  %33 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %32, i64 0, i32 0, i32 0, i32 1
  %34 = bitcast %"class.sh::TIntermNode"*** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"class.sh::TVector.8"* %32 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %35, %37
  %39 = ashr exact i64 %38, 3
  %40 = icmp ult i64 %28, %39
  br i1 %40, label %16, label %49

41:                                               ; preds = %16
  %42 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %43 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %42, i64 2
  %44 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %43, align 8
  %45 = tail call %"class.sh::TVector.8"* %44(%"class.sh::TIntermAggregateBase"* %4) #18
  %46 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %45, i64 0, i32 0, i32 0, i32 0
  %47 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %46, align 8
  %48 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %47, i64 %17
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %48, align 8
  br label %49

49:                                               ; preds = %27, %3, %41
  %50 = phi i1 [ true, %41 ], [ false, %3 ], [ false, %27 ]
  ret i1 %50
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12TIntermBlock18replaceAllChildrenERKNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermBlock"*, %"class.sh::TVector.8"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 2, i32 0
  %4 = bitcast %"class.std::__1::vector.9"* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %7 = bitcast %"class.sh::TIntermNode"*** %6 to i64*
  store i64 %5, i64* %7, align 8
  %8 = inttoptr i64 %5 to %"class.sh::TIntermNode"**
  %9 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %1, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %11 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %1, i64 0, i32 0, i32 0, i32 1
  %12 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %11, align 8
  %13 = tail call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertINS_11__wrap_iterIPKS3_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISD_E9referenceEEE5valueENS8_IPS3_EEE4typeESB_SD_SD_(%"class.std::__1::vector.9"* %3, %"class.sh::TIntermNode"** %8, %"class.sh::TIntermNode"** %10, %"class.sh::TIntermNode"** %12)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertINS_11__wrap_iterIPKS3_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISD_E9referenceEEE5valueENS8_IPS3_EEE4typeESB_SD_SD_(%"class.std::__1::vector.9"*, %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast %"class.sh::TIntermNode"** %1 to i8*
  %6 = ptrtoint %"class.sh::TIntermNode"** %1 to i64
  %7 = ptrtoint %"class.sh::TIntermNode"** %2 to i64
  %8 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %0, i64 0, i32 0, i32 0
  %9 = ptrtoint %"class.sh::TIntermNode"** %3 to i64
  %10 = sub i64 %9, %7
  %11 = ashr exact i64 %10, 3
  %12 = icmp sgt i64 %10, 0
  br i1 %12, label %13, label %834

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = bitcast %"class.sh::TIntermNode"*** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %0, i64 0, i32 0, i32 1
  %18 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %19 = ptrtoint %"class.sh::TIntermNode"** %18 to i64
  %20 = sub i64 %16, %19
  %21 = ashr exact i64 %20, 3
  %22 = icmp sgt i64 %11, %21
  %23 = bitcast %"class.sh::TIntermNode"*** %17 to i64*
  br i1 %22, label %359, label %24

24:                                               ; preds = %13
  %25 = sub i64 %19, %6
  %26 = ashr exact i64 %25, 3
  %27 = icmp sgt i64 %11, %26
  br i1 %27, label %28, label %213

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %26
  %30 = icmp eq %"class.sh::TIntermNode"** %29, %3
  br i1 %30, label %208, label %31

31:                                               ; preds = %28
  %32 = xor i64 %26, -1
  %33 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %3, i64 %32
  %34 = ptrtoint %"class.sh::TIntermNode"** %33 to i64
  %35 = sub i64 %34, %7
  %36 = lshr i64 %35, 3
  %37 = add nuw nsw i64 %36, 1
  %38 = icmp ult i64 %37, 4
  br i1 %38, label %134, label %39

39:                                               ; preds = %31
  %40 = xor i64 %26, -1
  %41 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %3, i64 %40
  %42 = ptrtoint %"class.sh::TIntermNode"** %41 to i64
  %43 = sub i64 %42, %7
  %44 = lshr i64 %43, 3
  %45 = add nuw nsw i64 %44, 1
  %46 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %45
  %47 = add nsw i64 %26, %44
  %48 = add nsw i64 %47, 1
  %49 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %48
  %50 = icmp ult %"class.sh::TIntermNode"** %18, %49
  %51 = icmp ult %"class.sh::TIntermNode"** %29, %46
  %52 = and i1 %50, %51
  br i1 %52, label %134, label %53

53:                                               ; preds = %39
  %54 = and i64 %37, 4611686018427387900
  %55 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %54
  %56 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %54
  %57 = add nsw i64 %54, -4
  %58 = lshr exact i64 %57, 2
  %59 = add nuw nsw i64 %58, 1
  %60 = and i64 %59, 3
  %61 = icmp ult i64 %57, 12
  br i1 %61, label %113, label %62

62:                                               ; preds = %53
  %63 = sub nsw i64 %59, %60
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i64 [ 0, %62 ], [ %110, %64 ]
  %66 = phi i64 [ %63, %62 ], [ %111, %64 ]
  %67 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %65
  %68 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %65
  %69 = bitcast %"class.sh::TIntermNode"** %68 to <2 x i64>*
  %70 = load <2 x i64>, <2 x i64>* %69, align 8, !alias.scope !12
  %71 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %68, i64 2
  %72 = bitcast %"class.sh::TIntermNode"** %71 to <2 x i64>*
  %73 = load <2 x i64>, <2 x i64>* %72, align 8, !alias.scope !12
  %74 = bitcast %"class.sh::TIntermNode"** %67 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %74, align 8, !alias.scope !15, !noalias !12
  %75 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %67, i64 2
  %76 = bitcast %"class.sh::TIntermNode"** %75 to <2 x i64>*
  store <2 x i64> %73, <2 x i64>* %76, align 8, !alias.scope !15, !noalias !12
  %77 = or i64 %65, 4
  %78 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %77
  %79 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %77
  %80 = bitcast %"class.sh::TIntermNode"** %79 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 8, !alias.scope !12
  %82 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %79, i64 2
  %83 = bitcast %"class.sh::TIntermNode"** %82 to <2 x i64>*
  %84 = load <2 x i64>, <2 x i64>* %83, align 8, !alias.scope !12
  %85 = bitcast %"class.sh::TIntermNode"** %78 to <2 x i64>*
  store <2 x i64> %81, <2 x i64>* %85, align 8, !alias.scope !15, !noalias !12
  %86 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %78, i64 2
  %87 = bitcast %"class.sh::TIntermNode"** %86 to <2 x i64>*
  store <2 x i64> %84, <2 x i64>* %87, align 8, !alias.scope !15, !noalias !12
  %88 = or i64 %65, 8
  %89 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %88
  %90 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %88
  %91 = bitcast %"class.sh::TIntermNode"** %90 to <2 x i64>*
  %92 = load <2 x i64>, <2 x i64>* %91, align 8, !alias.scope !12
  %93 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %90, i64 2
  %94 = bitcast %"class.sh::TIntermNode"** %93 to <2 x i64>*
  %95 = load <2 x i64>, <2 x i64>* %94, align 8, !alias.scope !12
  %96 = bitcast %"class.sh::TIntermNode"** %89 to <2 x i64>*
  store <2 x i64> %92, <2 x i64>* %96, align 8, !alias.scope !15, !noalias !12
  %97 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %89, i64 2
  %98 = bitcast %"class.sh::TIntermNode"** %97 to <2 x i64>*
  store <2 x i64> %95, <2 x i64>* %98, align 8, !alias.scope !15, !noalias !12
  %99 = or i64 %65, 12
  %100 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %99
  %101 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %99
  %102 = bitcast %"class.sh::TIntermNode"** %101 to <2 x i64>*
  %103 = load <2 x i64>, <2 x i64>* %102, align 8, !alias.scope !12
  %104 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %101, i64 2
  %105 = bitcast %"class.sh::TIntermNode"** %104 to <2 x i64>*
  %106 = load <2 x i64>, <2 x i64>* %105, align 8, !alias.scope !12
  %107 = bitcast %"class.sh::TIntermNode"** %100 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %107, align 8, !alias.scope !15, !noalias !12
  %108 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %100, i64 2
  %109 = bitcast %"class.sh::TIntermNode"** %108 to <2 x i64>*
  store <2 x i64> %106, <2 x i64>* %109, align 8, !alias.scope !15, !noalias !12
  %110 = add i64 %65, 16
  %111 = add i64 %66, -4
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %64, !llvm.loop !17

113:                                              ; preds = %64, %53
  %114 = phi i64 [ 0, %53 ], [ %110, %64 ]
  %115 = icmp eq i64 %60, 0
  br i1 %115, label %132, label %116

116:                                              ; preds = %113, %116
  %117 = phi i64 [ %129, %116 ], [ %114, %113 ]
  %118 = phi i64 [ %130, %116 ], [ %60, %113 ]
  %119 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %117
  %120 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %117
  %121 = bitcast %"class.sh::TIntermNode"** %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8, !alias.scope !12
  %123 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %120, i64 2
  %124 = bitcast %"class.sh::TIntermNode"** %123 to <2 x i64>*
  %125 = load <2 x i64>, <2 x i64>* %124, align 8, !alias.scope !12
  %126 = bitcast %"class.sh::TIntermNode"** %119 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %126, align 8, !alias.scope !15, !noalias !12
  %127 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 2
  %128 = bitcast %"class.sh::TIntermNode"** %127 to <2 x i64>*
  store <2 x i64> %125, <2 x i64>* %128, align 8, !alias.scope !15, !noalias !12
  %129 = add i64 %117, 4
  %130 = add i64 %118, -1
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %116, !llvm.loop !18

132:                                              ; preds = %116, %113
  %133 = icmp eq i64 %37, %54
  br i1 %133, label %205, label %134

134:                                              ; preds = %132, %39, %31
  %135 = phi %"class.sh::TIntermNode"** [ %18, %39 ], [ %18, %31 ], [ %55, %132 ]
  %136 = phi %"class.sh::TIntermNode"** [ %29, %39 ], [ %29, %31 ], [ %56, %132 ]
  %137 = ptrtoint %"class.sh::TIntermNode"** %136 to i64
  %138 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %3, i64 -1
  %139 = ptrtoint %"class.sh::TIntermNode"** %138 to i64
  %140 = sub i64 %139, %137
  %141 = lshr i64 %140, 3
  %142 = add nuw nsw i64 %141, 1
  %143 = and i64 %142, 7
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %156, label %145

145:                                              ; preds = %134, %145
  %146 = phi %"class.sh::TIntermNode"** [ %153, %145 ], [ %135, %134 ]
  %147 = phi %"class.sh::TIntermNode"** [ %152, %145 ], [ %136, %134 ]
  %148 = phi i64 [ %154, %145 ], [ %143, %134 ]
  %149 = bitcast %"class.sh::TIntermNode"** %146 to i64*
  %150 = bitcast %"class.sh::TIntermNode"** %147 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %147, i64 1
  %153 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %146, i64 1
  %154 = add i64 %148, -1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %145, !llvm.loop !19

156:                                              ; preds = %145, %134
  %157 = phi %"class.sh::TIntermNode"** [ undef, %134 ], [ %153, %145 ]
  %158 = phi %"class.sh::TIntermNode"** [ %135, %134 ], [ %153, %145 ]
  %159 = phi %"class.sh::TIntermNode"** [ %136, %134 ], [ %152, %145 ]
  %160 = icmp ult i64 %140, 56
  br i1 %160, label %205, label %161

161:                                              ; preds = %156, %161
  %162 = phi %"class.sh::TIntermNode"** [ %203, %161 ], [ %158, %156 ]
  %163 = phi %"class.sh::TIntermNode"** [ %202, %161 ], [ %159, %156 ]
  %164 = bitcast %"class.sh::TIntermNode"** %162 to i64*
  %165 = bitcast %"class.sh::TIntermNode"** %163 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %164, align 8
  %167 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 1
  %168 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 1
  %169 = bitcast %"class.sh::TIntermNode"** %168 to i64*
  %170 = bitcast %"class.sh::TIntermNode"** %167 to i64*
  %171 = load i64, i64* %170, align 8
  store i64 %171, i64* %169, align 8
  %172 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 2
  %173 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 2
  %174 = bitcast %"class.sh::TIntermNode"** %173 to i64*
  %175 = bitcast %"class.sh::TIntermNode"** %172 to i64*
  %176 = load i64, i64* %175, align 8
  store i64 %176, i64* %174, align 8
  %177 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 3
  %178 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 3
  %179 = bitcast %"class.sh::TIntermNode"** %178 to i64*
  %180 = bitcast %"class.sh::TIntermNode"** %177 to i64*
  %181 = load i64, i64* %180, align 8
  store i64 %181, i64* %179, align 8
  %182 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 4
  %183 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 4
  %184 = bitcast %"class.sh::TIntermNode"** %183 to i64*
  %185 = bitcast %"class.sh::TIntermNode"** %182 to i64*
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %184, align 8
  %187 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 5
  %188 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 5
  %189 = bitcast %"class.sh::TIntermNode"** %188 to i64*
  %190 = bitcast %"class.sh::TIntermNode"** %187 to i64*
  %191 = load i64, i64* %190, align 8
  store i64 %191, i64* %189, align 8
  %192 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 6
  %193 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 6
  %194 = bitcast %"class.sh::TIntermNode"** %193 to i64*
  %195 = bitcast %"class.sh::TIntermNode"** %192 to i64*
  %196 = load i64, i64* %195, align 8
  store i64 %196, i64* %194, align 8
  %197 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 7
  %198 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 7
  %199 = bitcast %"class.sh::TIntermNode"** %198 to i64*
  %200 = bitcast %"class.sh::TIntermNode"** %197 to i64*
  %201 = load i64, i64* %200, align 8
  store i64 %201, i64* %199, align 8
  %202 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 8
  %203 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 8
  %204 = icmp eq %"class.sh::TIntermNode"** %202, %3
  br i1 %204, label %205, label %161, !llvm.loop !20

205:                                              ; preds = %156, %161, %132
  %206 = phi %"class.sh::TIntermNode"** [ %55, %132 ], [ %157, %156 ], [ %203, %161 ]
  %207 = ptrtoint %"class.sh::TIntermNode"** %206 to i64
  br label %208

208:                                              ; preds = %205, %28
  %209 = phi i64 [ %19, %28 ], [ %207, %205 ]
  store i64 %209, i64* %23, align 8
  %210 = icmp sgt i64 %25, 0
  br i1 %210, label %211, label %834

211:                                              ; preds = %208
  %212 = inttoptr i64 %209 to %"class.sh::TIntermNode"**
  br label %213

213:                                              ; preds = %211, %24
  %214 = phi i64 [ %209, %211 ], [ %19, %24 ]
  %215 = phi %"class.sh::TIntermNode"** [ %212, %211 ], [ %18, %24 ]
  %216 = phi %"class.sh::TIntermNode"** [ %29, %211 ], [ %3, %24 ]
  %217 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %11
  %218 = ptrtoint %"class.sh::TIntermNode"** %217 to i64
  %219 = sub i64 %214, %218
  %220 = ashr exact i64 %219, 3
  %221 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %220
  %222 = icmp ult %"class.sh::TIntermNode"** %221, %18
  br i1 %222, label %223, label %336

223:                                              ; preds = %213
  %224 = sub nsw i64 0, %220
  %225 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %224
  %226 = bitcast %"class.sh::TIntermNode"** %225 to i8*
  %227 = xor i64 %6, -1
  %228 = getelementptr i8, i8* %226, i64 %227
  %229 = ptrtoint i8* %228 to i64
  %230 = lshr i64 %229, 3
  %231 = add nuw nsw i64 %230, 1
  %232 = icmp ult i64 %231, 4
  br i1 %232, label %233, label %236

233:                                              ; preds = %331, %236, %223
  %234 = phi %"class.sh::TIntermNode"** [ %215, %236 ], [ %215, %223 ], [ %254, %331 ]
  %235 = phi %"class.sh::TIntermNode"** [ %221, %236 ], [ %221, %223 ], [ %255, %331 ]
  br label %344

236:                                              ; preds = %223
  %237 = sub nsw i64 0, %220
  %238 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %237
  %239 = bitcast %"class.sh::TIntermNode"** %238 to i8*
  %240 = xor i64 %6, -1
  %241 = getelementptr i8, i8* %239, i64 %240
  %242 = ptrtoint i8* %241 to i64
  %243 = lshr i64 %242, 3
  %244 = add nuw nsw i64 %243, 1
  %245 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %244
  %246 = add nsw i64 %220, %243
  %247 = add nsw i64 %246, 1
  %248 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %247
  %249 = icmp ult %"class.sh::TIntermNode"** %215, %248
  %250 = icmp ult %"class.sh::TIntermNode"** %221, %245
  %251 = and i1 %249, %250
  br i1 %251, label %233, label %252

252:                                              ; preds = %236
  %253 = and i64 %231, 4611686018427387900
  %254 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %253
  %255 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %253
  %256 = add nsw i64 %253, -4
  %257 = lshr exact i64 %256, 2
  %258 = add nuw nsw i64 %257, 1
  %259 = and i64 %258, 3
  %260 = icmp ult i64 %256, 12
  br i1 %260, label %312, label %261

261:                                              ; preds = %252
  %262 = sub nsw i64 %258, %259
  br label %263

263:                                              ; preds = %263, %261
  %264 = phi i64 [ 0, %261 ], [ %309, %263 ]
  %265 = phi i64 [ %262, %261 ], [ %310, %263 ]
  %266 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %264
  %267 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %264
  %268 = bitcast %"class.sh::TIntermNode"** %267 to <2 x i64>*
  %269 = load <2 x i64>, <2 x i64>* %268, align 8, !alias.scope !21
  %270 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %267, i64 2
  %271 = bitcast %"class.sh::TIntermNode"** %270 to <2 x i64>*
  %272 = load <2 x i64>, <2 x i64>* %271, align 8, !alias.scope !21
  %273 = bitcast %"class.sh::TIntermNode"** %266 to <2 x i64>*
  store <2 x i64> %269, <2 x i64>* %273, align 8, !alias.scope !24, !noalias !21
  %274 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %266, i64 2
  %275 = bitcast %"class.sh::TIntermNode"** %274 to <2 x i64>*
  store <2 x i64> %272, <2 x i64>* %275, align 8, !alias.scope !24, !noalias !21
  %276 = or i64 %264, 4
  %277 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %276
  %278 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %276
  %279 = bitcast %"class.sh::TIntermNode"** %278 to <2 x i64>*
  %280 = load <2 x i64>, <2 x i64>* %279, align 8, !alias.scope !21
  %281 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %278, i64 2
  %282 = bitcast %"class.sh::TIntermNode"** %281 to <2 x i64>*
  %283 = load <2 x i64>, <2 x i64>* %282, align 8, !alias.scope !21
  %284 = bitcast %"class.sh::TIntermNode"** %277 to <2 x i64>*
  store <2 x i64> %280, <2 x i64>* %284, align 8, !alias.scope !24, !noalias !21
  %285 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %277, i64 2
  %286 = bitcast %"class.sh::TIntermNode"** %285 to <2 x i64>*
  store <2 x i64> %283, <2 x i64>* %286, align 8, !alias.scope !24, !noalias !21
  %287 = or i64 %264, 8
  %288 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %287
  %289 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %287
  %290 = bitcast %"class.sh::TIntermNode"** %289 to <2 x i64>*
  %291 = load <2 x i64>, <2 x i64>* %290, align 8, !alias.scope !21
  %292 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 2
  %293 = bitcast %"class.sh::TIntermNode"** %292 to <2 x i64>*
  %294 = load <2 x i64>, <2 x i64>* %293, align 8, !alias.scope !21
  %295 = bitcast %"class.sh::TIntermNode"** %288 to <2 x i64>*
  store <2 x i64> %291, <2 x i64>* %295, align 8, !alias.scope !24, !noalias !21
  %296 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %288, i64 2
  %297 = bitcast %"class.sh::TIntermNode"** %296 to <2 x i64>*
  store <2 x i64> %294, <2 x i64>* %297, align 8, !alias.scope !24, !noalias !21
  %298 = or i64 %264, 12
  %299 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %298
  %300 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %298
  %301 = bitcast %"class.sh::TIntermNode"** %300 to <2 x i64>*
  %302 = load <2 x i64>, <2 x i64>* %301, align 8, !alias.scope !21
  %303 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %300, i64 2
  %304 = bitcast %"class.sh::TIntermNode"** %303 to <2 x i64>*
  %305 = load <2 x i64>, <2 x i64>* %304, align 8, !alias.scope !21
  %306 = bitcast %"class.sh::TIntermNode"** %299 to <2 x i64>*
  store <2 x i64> %302, <2 x i64>* %306, align 8, !alias.scope !24, !noalias !21
  %307 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %299, i64 2
  %308 = bitcast %"class.sh::TIntermNode"** %307 to <2 x i64>*
  store <2 x i64> %305, <2 x i64>* %308, align 8, !alias.scope !24, !noalias !21
  %309 = add i64 %264, 16
  %310 = add i64 %265, -4
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %312, label %263, !llvm.loop !26

312:                                              ; preds = %263, %252
  %313 = phi i64 [ 0, %252 ], [ %309, %263 ]
  %314 = icmp eq i64 %259, 0
  br i1 %314, label %331, label %315

315:                                              ; preds = %312, %315
  %316 = phi i64 [ %328, %315 ], [ %313, %312 ]
  %317 = phi i64 [ %329, %315 ], [ %259, %312 ]
  %318 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %316
  %319 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %316
  %320 = bitcast %"class.sh::TIntermNode"** %319 to <2 x i64>*
  %321 = load <2 x i64>, <2 x i64>* %320, align 8, !alias.scope !21
  %322 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %319, i64 2
  %323 = bitcast %"class.sh::TIntermNode"** %322 to <2 x i64>*
  %324 = load <2 x i64>, <2 x i64>* %323, align 8, !alias.scope !21
  %325 = bitcast %"class.sh::TIntermNode"** %318 to <2 x i64>*
  store <2 x i64> %321, <2 x i64>* %325, align 8, !alias.scope !24, !noalias !21
  %326 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %318, i64 2
  %327 = bitcast %"class.sh::TIntermNode"** %326 to <2 x i64>*
  store <2 x i64> %324, <2 x i64>* %327, align 8, !alias.scope !24, !noalias !21
  %328 = add i64 %316, 4
  %329 = add i64 %317, -1
  %330 = icmp eq i64 %329, 0
  br i1 %330, label %331, label %315, !llvm.loop !27

331:                                              ; preds = %315, %312
  %332 = icmp eq i64 %231, %253
  br i1 %332, label %333, label %233

333:                                              ; preds = %344, %331
  %334 = phi %"class.sh::TIntermNode"** [ %254, %331 ], [ %351, %344 ]
  %335 = ptrtoint %"class.sh::TIntermNode"** %334 to i64
  br label %336

336:                                              ; preds = %333, %213
  %337 = phi i64 [ %335, %333 ], [ %214, %213 ]
  store i64 %337, i64* %23, align 8
  %338 = icmp eq i64 %219, 0
  br i1 %338, label %353, label %339

339:                                              ; preds = %336
  %340 = sub nsw i64 0, %220
  %341 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %340
  %342 = bitcast %"class.sh::TIntermNode"** %341 to i8*
  %343 = bitcast %"class.sh::TIntermNode"** %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %342, i8* align 8 %343, i64 %219, i1 false) #18
  br label %353

344:                                              ; preds = %233, %344
  %345 = phi %"class.sh::TIntermNode"** [ %351, %344 ], [ %234, %233 ]
  %346 = phi %"class.sh::TIntermNode"** [ %350, %344 ], [ %235, %233 ]
  %347 = bitcast %"class.sh::TIntermNode"** %346 to i64*
  %348 = load i64, i64* %347, align 8
  %349 = bitcast %"class.sh::TIntermNode"** %345 to i64*
  store i64 %348, i64* %349, align 8
  %350 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %346, i64 1
  %351 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %345, i64 1
  %352 = icmp ult %"class.sh::TIntermNode"** %350, %18
  br i1 %352, label %344, label %333, !llvm.loop !28

353:                                              ; preds = %336, %339
  %354 = ptrtoint %"class.sh::TIntermNode"** %216 to i64
  %355 = sub i64 %354, %7
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %834, label %357

357:                                              ; preds = %353
  %358 = bitcast %"class.sh::TIntermNode"** %2 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %358, i64 %355, i1 false) #18
  br label %834

359:                                              ; preds = %13
  %360 = bitcast %"class.std::__1::vector.9"* %0 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = sub i64 %19, %361
  %363 = ashr exact i64 %362, 3
  %364 = add nsw i64 %363, %11
  %365 = icmp ugt i64 %364, 2305843009213693951
  br i1 %365, label %366, label %368

366:                                              ; preds = %359
  %367 = bitcast %"class.std::__1::vector.9"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %367) #19
  unreachable

368:                                              ; preds = %359
  %369 = sub i64 %16, %361
  %370 = ashr exact i64 %369, 3
  %371 = icmp ult i64 %370, 1152921504606846975
  br i1 %371, label %375, label %372

372:                                              ; preds = %368
  %373 = sub i64 %6, %361
  %374 = ashr exact i64 %373, 3
  br label %382

375:                                              ; preds = %368
  %376 = ashr exact i64 %369, 2
  %377 = icmp ult i64 %376, %364
  %378 = select i1 %377, i64 %364, i64 %376
  %379 = sub i64 %6, %361
  %380 = ashr exact i64 %379, 3
  %381 = icmp eq i64 %378, 0
  br i1 %381, label %389, label %382

382:                                              ; preds = %372, %375
  %383 = phi i64 [ %374, %372 ], [ %380, %375 ]
  %384 = phi i64 [ 2305843009213693951, %372 ], [ %378, %375 ]
  %385 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %386 = shl i64 %384, 3
  %387 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %385, i64 %386) #18
  %388 = bitcast i8* %387 to %"class.sh::TIntermNode"**
  br label %389

389:                                              ; preds = %382, %375
  %390 = phi i64 [ %383, %382 ], [ %380, %375 ]
  %391 = phi i64 [ %384, %382 ], [ 0, %375 ]
  %392 = phi %"class.sh::TIntermNode"** [ %388, %382 ], [ null, %375 ]
  %393 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %390
  %394 = ptrtoint %"class.sh::TIntermNode"** %393 to i64
  %395 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %391
  %396 = ptrtoint %"class.sh::TIntermNode"** %395 to i64
  %397 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 %11
  %398 = add i64 %10, -8
  %399 = lshr i64 %398, 3
  %400 = add nuw nsw i64 %399, 1
  %401 = and i64 %400, 7
  %402 = icmp eq i64 %401, 0
  br i1 %402, label %418, label %403

403:                                              ; preds = %389, %403
  %404 = phi %"class.sh::TIntermNode"** [ %411, %403 ], [ %393, %389 ]
  %405 = phi i64 [ %412, %403 ], [ %394, %389 ]
  %406 = phi %"class.sh::TIntermNode"** [ %413, %403 ], [ %2, %389 ]
  %407 = phi i64 [ %414, %403 ], [ %401, %389 ]
  %408 = bitcast %"class.sh::TIntermNode"** %406 to i64*
  %409 = load i64, i64* %408, align 8
  %410 = inttoptr i64 %405 to i64*
  store i64 %409, i64* %410, align 8
  %411 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %404, i64 1
  %412 = ptrtoint %"class.sh::TIntermNode"** %411 to i64
  %413 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %406, i64 1
  %414 = add i64 %407, -1
  %415 = icmp eq i64 %414, 0
  br i1 %415, label %416, label %403, !llvm.loop !29

416:                                              ; preds = %403
  %417 = ptrtoint %"class.sh::TIntermNode"** %411 to i64
  br label %418

418:                                              ; preds = %389, %416
  %419 = phi %"class.sh::TIntermNode"** [ %393, %389 ], [ %411, %416 ]
  %420 = phi i64 [ %394, %389 ], [ %417, %416 ]
  %421 = phi %"class.sh::TIntermNode"** [ %2, %389 ], [ %413, %416 ]
  %422 = icmp ult i64 %398, 56
  br i1 %422, label %469, label %423

423:                                              ; preds = %418, %423
  %424 = phi %"class.sh::TIntermNode"** [ %465, %423 ], [ %419, %418 ]
  %425 = phi i64 [ %466, %423 ], [ %420, %418 ]
  %426 = phi %"class.sh::TIntermNode"** [ %467, %423 ], [ %421, %418 ]
  %427 = bitcast %"class.sh::TIntermNode"** %426 to i64*
  %428 = load i64, i64* %427, align 8
  %429 = inttoptr i64 %425 to i64*
  store i64 %428, i64* %429, align 8
  %430 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 1
  %431 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 1
  %432 = bitcast %"class.sh::TIntermNode"** %431 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = bitcast %"class.sh::TIntermNode"** %430 to i64*
  store i64 %433, i64* %434, align 8
  %435 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 2
  %436 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 2
  %437 = bitcast %"class.sh::TIntermNode"** %436 to i64*
  %438 = load i64, i64* %437, align 8
  %439 = bitcast %"class.sh::TIntermNode"** %435 to i64*
  store i64 %438, i64* %439, align 8
  %440 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 3
  %441 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 3
  %442 = bitcast %"class.sh::TIntermNode"** %441 to i64*
  %443 = load i64, i64* %442, align 8
  %444 = bitcast %"class.sh::TIntermNode"** %440 to i64*
  store i64 %443, i64* %444, align 8
  %445 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 4
  %446 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 4
  %447 = bitcast %"class.sh::TIntermNode"** %446 to i64*
  %448 = load i64, i64* %447, align 8
  %449 = bitcast %"class.sh::TIntermNode"** %445 to i64*
  store i64 %448, i64* %449, align 8
  %450 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 5
  %451 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 5
  %452 = bitcast %"class.sh::TIntermNode"** %451 to i64*
  %453 = load i64, i64* %452, align 8
  %454 = bitcast %"class.sh::TIntermNode"** %450 to i64*
  store i64 %453, i64* %454, align 8
  %455 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 6
  %456 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 6
  %457 = bitcast %"class.sh::TIntermNode"** %456 to i64*
  %458 = load i64, i64* %457, align 8
  %459 = bitcast %"class.sh::TIntermNode"** %455 to i64*
  store i64 %458, i64* %459, align 8
  %460 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 7
  %461 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 7
  %462 = bitcast %"class.sh::TIntermNode"** %461 to i64*
  %463 = load i64, i64* %462, align 8
  %464 = bitcast %"class.sh::TIntermNode"** %460 to i64*
  store i64 %463, i64* %464, align 8
  %465 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 8
  %466 = ptrtoint %"class.sh::TIntermNode"** %465 to i64
  %467 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 8
  %468 = icmp eq %"class.sh::TIntermNode"** %397, %465
  br i1 %468, label %469, label %423

469:                                              ; preds = %423, %418
  %470 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %8, align 8
  %471 = ptrtoint %"class.sh::TIntermNode"** %470 to i64
  %472 = icmp eq %"class.sh::TIntermNode"** %470, %1
  br i1 %472, label %645, label %473

473:                                              ; preds = %469
  %474 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %475 = ptrtoint %"class.sh::TIntermNode"** %474 to i64
  %476 = sub i64 %475, %471
  %477 = lshr i64 %476, 3
  %478 = add nuw nsw i64 %477, 1
  %479 = icmp ult i64 %478, 4
  br i1 %479, label %572, label %480

480:                                              ; preds = %473
  %481 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %482 = ptrtoint %"class.sh::TIntermNode"** %481 to i64
  %483 = sub i64 %482, %471
  %484 = lshr i64 %483, 3
  %485 = xor i64 %484, -1
  %486 = add nsw i64 %390, %485
  %487 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %486
  %488 = xor i64 %484, -1
  %489 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %488
  %490 = icmp ult %"class.sh::TIntermNode"** %487, %1
  %491 = icmp ult %"class.sh::TIntermNode"** %489, %393
  %492 = and i1 %490, %491
  br i1 %492, label %572, label %493

493:                                              ; preds = %480
  %494 = and i64 %478, 4611686018427387900
  %495 = sub nsw i64 0, %494
  %496 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 %495
  %497 = sub nsw i64 0, %494
  %498 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %497
  %499 = add nsw i64 %494, -4
  %500 = lshr exact i64 %499, 2
  %501 = add nuw nsw i64 %500, 1
  %502 = and i64 %501, 1
  %503 = icmp eq i64 %499, 0
  br i1 %503, label %548, label %504

504:                                              ; preds = %493
  %505 = sub nuw nsw i64 %501, %502
  %506 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -1
  %507 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %508 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -1
  %509 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  br label %510

510:                                              ; preds = %510, %504
  %511 = phi i64 [ 0, %504 ], [ %545, %510 ]
  %512 = phi i64 [ %505, %504 ], [ %546, %510 ]
  %513 = sub i64 0, %511
  %514 = sub i64 0, %511
  %515 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 %513
  %516 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %507, i64 %514
  %517 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %516, i64 -1
  %518 = bitcast %"class.sh::TIntermNode"** %517 to <2 x i64>*
  %519 = load <2 x i64>, <2 x i64>* %518, align 8, !alias.scope !30
  %520 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %516, i64 -2
  %521 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %520, i64 -1
  %522 = bitcast %"class.sh::TIntermNode"** %521 to <2 x i64>*
  %523 = load <2 x i64>, <2 x i64>* %522, align 8, !alias.scope !30
  %524 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %515, i64 -1
  %525 = bitcast %"class.sh::TIntermNode"** %524 to <2 x i64>*
  store <2 x i64> %519, <2 x i64>* %525, align 8, !alias.scope !33, !noalias !30
  %526 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %515, i64 -2
  %527 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %526, i64 -1
  %528 = bitcast %"class.sh::TIntermNode"** %527 to <2 x i64>*
  store <2 x i64> %523, <2 x i64>* %528, align 8, !alias.scope !33, !noalias !30
  %529 = sub nuw nsw i64 -4, %511
  %530 = sub nuw nsw i64 -4, %511
  %531 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %508, i64 %529
  %532 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %509, i64 %530
  %533 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 -1
  %534 = bitcast %"class.sh::TIntermNode"** %533 to <2 x i64>*
  %535 = load <2 x i64>, <2 x i64>* %534, align 8, !alias.scope !30
  %536 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 -2
  %537 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %536, i64 -1
  %538 = bitcast %"class.sh::TIntermNode"** %537 to <2 x i64>*
  %539 = load <2 x i64>, <2 x i64>* %538, align 8, !alias.scope !30
  %540 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 -1
  %541 = bitcast %"class.sh::TIntermNode"** %540 to <2 x i64>*
  store <2 x i64> %535, <2 x i64>* %541, align 8, !alias.scope !33, !noalias !30
  %542 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 -2
  %543 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %542, i64 -1
  %544 = bitcast %"class.sh::TIntermNode"** %543 to <2 x i64>*
  store <2 x i64> %539, <2 x i64>* %544, align 8, !alias.scope !33, !noalias !30
  %545 = add i64 %511, 8
  %546 = add i64 %512, -2
  %547 = icmp eq i64 %546, 0
  br i1 %547, label %548, label %510, !llvm.loop !35

548:                                              ; preds = %510, %493
  %549 = phi i64 [ 0, %493 ], [ %545, %510 ]
  %550 = icmp eq i64 %502, 0
  br i1 %550, label %570, label %551

551:                                              ; preds = %548
  %552 = sub i64 0, %549
  %553 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -1
  %554 = sub i64 0, %549
  %555 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %556 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %553, i64 %552
  %557 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %555, i64 %554
  %558 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %557, i64 -1
  %559 = bitcast %"class.sh::TIntermNode"** %558 to <2 x i64>*
  %560 = load <2 x i64>, <2 x i64>* %559, align 8, !alias.scope !30
  %561 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %557, i64 -2
  %562 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %561, i64 -1
  %563 = bitcast %"class.sh::TIntermNode"** %562 to <2 x i64>*
  %564 = load <2 x i64>, <2 x i64>* %563, align 8, !alias.scope !30
  %565 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %556, i64 -1
  %566 = bitcast %"class.sh::TIntermNode"** %565 to <2 x i64>*
  store <2 x i64> %560, <2 x i64>* %566, align 8, !alias.scope !33, !noalias !30
  %567 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %556, i64 -2
  %568 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %567, i64 -1
  %569 = bitcast %"class.sh::TIntermNode"** %568 to <2 x i64>*
  store <2 x i64> %564, <2 x i64>* %569, align 8, !alias.scope !33, !noalias !30
  br label %570

570:                                              ; preds = %548, %551
  %571 = icmp eq i64 %478, %494
  br i1 %571, label %642, label %572

572:                                              ; preds = %570, %480, %473
  %573 = phi %"class.sh::TIntermNode"** [ %393, %480 ], [ %393, %473 ], [ %496, %570 ]
  %574 = phi %"class.sh::TIntermNode"** [ %1, %480 ], [ %1, %473 ], [ %498, %570 ]
  %575 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %574, i64 -1
  %576 = ptrtoint %"class.sh::TIntermNode"** %575 to i64
  %577 = sub i64 %576, %471
  %578 = lshr i64 %577, 3
  %579 = add nuw nsw i64 %578, 1
  %580 = and i64 %579, 7
  %581 = icmp eq i64 %580, 0
  br i1 %581, label %593, label %582

582:                                              ; preds = %572, %582
  %583 = phi %"class.sh::TIntermNode"** [ %586, %582 ], [ %573, %572 ]
  %584 = phi %"class.sh::TIntermNode"** [ %587, %582 ], [ %574, %572 ]
  %585 = phi i64 [ %591, %582 ], [ %580, %572 ]
  %586 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %583, i64 -1
  %587 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %584, i64 -1
  %588 = bitcast %"class.sh::TIntermNode"** %587 to i64*
  %589 = load i64, i64* %588, align 8
  %590 = bitcast %"class.sh::TIntermNode"** %586 to i64*
  store i64 %589, i64* %590, align 8
  %591 = add i64 %585, -1
  %592 = icmp eq i64 %591, 0
  br i1 %592, label %593, label %582, !llvm.loop !36

593:                                              ; preds = %582, %572
  %594 = phi %"class.sh::TIntermNode"** [ undef, %572 ], [ %586, %582 ]
  %595 = phi %"class.sh::TIntermNode"** [ %573, %572 ], [ %586, %582 ]
  %596 = phi %"class.sh::TIntermNode"** [ %574, %572 ], [ %587, %582 ]
  %597 = icmp ult i64 %577, 56
  br i1 %597, label %642, label %598

598:                                              ; preds = %593, %598
  %599 = phi %"class.sh::TIntermNode"** [ %636, %598 ], [ %595, %593 ]
  %600 = phi %"class.sh::TIntermNode"** [ %637, %598 ], [ %596, %593 ]
  %601 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -1
  %602 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -1
  %603 = bitcast %"class.sh::TIntermNode"** %602 to i64*
  %604 = load i64, i64* %603, align 8
  %605 = bitcast %"class.sh::TIntermNode"** %601 to i64*
  store i64 %604, i64* %605, align 8
  %606 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -2
  %607 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -2
  %608 = bitcast %"class.sh::TIntermNode"** %607 to i64*
  %609 = load i64, i64* %608, align 8
  %610 = bitcast %"class.sh::TIntermNode"** %606 to i64*
  store i64 %609, i64* %610, align 8
  %611 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -3
  %612 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -3
  %613 = bitcast %"class.sh::TIntermNode"** %612 to i64*
  %614 = load i64, i64* %613, align 8
  %615 = bitcast %"class.sh::TIntermNode"** %611 to i64*
  store i64 %614, i64* %615, align 8
  %616 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -4
  %617 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -4
  %618 = bitcast %"class.sh::TIntermNode"** %617 to i64*
  %619 = load i64, i64* %618, align 8
  %620 = bitcast %"class.sh::TIntermNode"** %616 to i64*
  store i64 %619, i64* %620, align 8
  %621 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -5
  %622 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -5
  %623 = bitcast %"class.sh::TIntermNode"** %622 to i64*
  %624 = load i64, i64* %623, align 8
  %625 = bitcast %"class.sh::TIntermNode"** %621 to i64*
  store i64 %624, i64* %625, align 8
  %626 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -6
  %627 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -6
  %628 = bitcast %"class.sh::TIntermNode"** %627 to i64*
  %629 = load i64, i64* %628, align 8
  %630 = bitcast %"class.sh::TIntermNode"** %626 to i64*
  store i64 %629, i64* %630, align 8
  %631 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -7
  %632 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -7
  %633 = bitcast %"class.sh::TIntermNode"** %632 to i64*
  %634 = load i64, i64* %633, align 8
  %635 = bitcast %"class.sh::TIntermNode"** %631 to i64*
  store i64 %634, i64* %635, align 8
  %636 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -8
  %637 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -8
  %638 = bitcast %"class.sh::TIntermNode"** %637 to i64*
  %639 = load i64, i64* %638, align 8
  %640 = bitcast %"class.sh::TIntermNode"** %636 to i64*
  store i64 %639, i64* %640, align 8
  %641 = icmp eq %"class.sh::TIntermNode"** %637, %470
  br i1 %641, label %642, label %598, !llvm.loop !37

642:                                              ; preds = %593, %598, %570
  %643 = phi %"class.sh::TIntermNode"** [ %496, %570 ], [ %594, %593 ], [ %636, %598 ]
  %644 = ptrtoint %"class.sh::TIntermNode"** %643 to i64
  br label %645

645:                                              ; preds = %642, %469
  %646 = phi i64 [ %394, %469 ], [ %644, %642 ]
  %647 = phi %"class.sh::TIntermNode"** [ %393, %469 ], [ %643, %642 ]
  %648 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %649 = icmp eq %"class.sh::TIntermNode"** %648, %1
  br i1 %649, label %650, label %652

650:                                              ; preds = %645
  %651 = ptrtoint %"class.sh::TIntermNode"** %647 to i64
  br label %830

652:                                              ; preds = %645
  %653 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %648, i64 -1
  %654 = ptrtoint %"class.sh::TIntermNode"** %653 to i64
  %655 = sub i64 %654, %6
  %656 = lshr i64 %655, 3
  %657 = add nuw nsw i64 %656, 1
  %658 = icmp ult i64 %657, 4
  br i1 %658, label %755, label %659

659:                                              ; preds = %652
  %660 = add nsw i64 %390, %11
  %661 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %648, i64 -1
  %662 = ptrtoint %"class.sh::TIntermNode"** %661 to i64
  %663 = sub i64 %662, %6
  %664 = lshr i64 %663, 3
  %665 = add nsw i64 %660, %664
  %666 = add nsw i64 %665, 1
  %667 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %666
  %668 = add nuw nsw i64 %664, 1
  %669 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %668
  %670 = icmp ult %"class.sh::TIntermNode"** %397, %669
  %671 = icmp ugt %"class.sh::TIntermNode"** %667, %1
  %672 = and i1 %670, %671
  br i1 %672, label %755, label %673

673:                                              ; preds = %659
  %674 = and i64 %657, 4611686018427387900
  %675 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %674
  %676 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %674
  %677 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %674
  %678 = add nsw i64 %674, -4
  %679 = lshr exact i64 %678, 2
  %680 = add nuw nsw i64 %679, 1
  %681 = and i64 %680, 3
  %682 = icmp ult i64 %678, 12
  br i1 %682, label %734, label %683

683:                                              ; preds = %673
  %684 = sub nsw i64 %680, %681
  br label %685

685:                                              ; preds = %685, %683
  %686 = phi i64 [ 0, %683 ], [ %731, %685 ]
  %687 = phi i64 [ %684, %683 ], [ %732, %685 ]
  %688 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %686
  %689 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %686
  %690 = bitcast %"class.sh::TIntermNode"** %689 to <2 x i64>*
  %691 = load <2 x i64>, <2 x i64>* %690, align 8, !alias.scope !38
  %692 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %689, i64 2
  %693 = bitcast %"class.sh::TIntermNode"** %692 to <2 x i64>*
  %694 = load <2 x i64>, <2 x i64>* %693, align 8, !alias.scope !38
  %695 = bitcast %"class.sh::TIntermNode"** %688 to <2 x i64>*
  store <2 x i64> %691, <2 x i64>* %695, align 8, !alias.scope !41, !noalias !38
  %696 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %688, i64 2
  %697 = bitcast %"class.sh::TIntermNode"** %696 to <2 x i64>*
  store <2 x i64> %694, <2 x i64>* %697, align 8, !alias.scope !41, !noalias !38
  %698 = or i64 %686, 4
  %699 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %698
  %700 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %698
  %701 = bitcast %"class.sh::TIntermNode"** %700 to <2 x i64>*
  %702 = load <2 x i64>, <2 x i64>* %701, align 8, !alias.scope !38
  %703 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %700, i64 2
  %704 = bitcast %"class.sh::TIntermNode"** %703 to <2 x i64>*
  %705 = load <2 x i64>, <2 x i64>* %704, align 8, !alias.scope !38
  %706 = bitcast %"class.sh::TIntermNode"** %699 to <2 x i64>*
  store <2 x i64> %702, <2 x i64>* %706, align 8, !alias.scope !41, !noalias !38
  %707 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %699, i64 2
  %708 = bitcast %"class.sh::TIntermNode"** %707 to <2 x i64>*
  store <2 x i64> %705, <2 x i64>* %708, align 8, !alias.scope !41, !noalias !38
  %709 = or i64 %686, 8
  %710 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %709
  %711 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %709
  %712 = bitcast %"class.sh::TIntermNode"** %711 to <2 x i64>*
  %713 = load <2 x i64>, <2 x i64>* %712, align 8, !alias.scope !38
  %714 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %711, i64 2
  %715 = bitcast %"class.sh::TIntermNode"** %714 to <2 x i64>*
  %716 = load <2 x i64>, <2 x i64>* %715, align 8, !alias.scope !38
  %717 = bitcast %"class.sh::TIntermNode"** %710 to <2 x i64>*
  store <2 x i64> %713, <2 x i64>* %717, align 8, !alias.scope !41, !noalias !38
  %718 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %710, i64 2
  %719 = bitcast %"class.sh::TIntermNode"** %718 to <2 x i64>*
  store <2 x i64> %716, <2 x i64>* %719, align 8, !alias.scope !41, !noalias !38
  %720 = or i64 %686, 12
  %721 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %720
  %722 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %720
  %723 = bitcast %"class.sh::TIntermNode"** %722 to <2 x i64>*
  %724 = load <2 x i64>, <2 x i64>* %723, align 8, !alias.scope !38
  %725 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %722, i64 2
  %726 = bitcast %"class.sh::TIntermNode"** %725 to <2 x i64>*
  %727 = load <2 x i64>, <2 x i64>* %726, align 8, !alias.scope !38
  %728 = bitcast %"class.sh::TIntermNode"** %721 to <2 x i64>*
  store <2 x i64> %724, <2 x i64>* %728, align 8, !alias.scope !41, !noalias !38
  %729 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %721, i64 2
  %730 = bitcast %"class.sh::TIntermNode"** %729 to <2 x i64>*
  store <2 x i64> %727, <2 x i64>* %730, align 8, !alias.scope !41, !noalias !38
  %731 = add i64 %686, 16
  %732 = add i64 %687, -4
  %733 = icmp eq i64 %732, 0
  br i1 %733, label %734, label %685, !llvm.loop !43

734:                                              ; preds = %685, %673
  %735 = phi i64 [ 0, %673 ], [ %731, %685 ]
  %736 = icmp eq i64 %681, 0
  br i1 %736, label %753, label %737

737:                                              ; preds = %734, %737
  %738 = phi i64 [ %750, %737 ], [ %735, %734 ]
  %739 = phi i64 [ %751, %737 ], [ %681, %734 ]
  %740 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %738
  %741 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %738
  %742 = bitcast %"class.sh::TIntermNode"** %741 to <2 x i64>*
  %743 = load <2 x i64>, <2 x i64>* %742, align 8, !alias.scope !38
  %744 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %741, i64 2
  %745 = bitcast %"class.sh::TIntermNode"** %744 to <2 x i64>*
  %746 = load <2 x i64>, <2 x i64>* %745, align 8, !alias.scope !38
  %747 = bitcast %"class.sh::TIntermNode"** %740 to <2 x i64>*
  store <2 x i64> %743, <2 x i64>* %747, align 8, !alias.scope !41, !noalias !38
  %748 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %740, i64 2
  %749 = bitcast %"class.sh::TIntermNode"** %748 to <2 x i64>*
  store <2 x i64> %746, <2 x i64>* %749, align 8, !alias.scope !41, !noalias !38
  %750 = add i64 %738, 4
  %751 = add i64 %739, -1
  %752 = icmp eq i64 %751, 0
  br i1 %752, label %753, label %737, !llvm.loop !44

753:                                              ; preds = %737, %734
  %754 = icmp eq i64 %657, %674
  br i1 %754, label %830, label %755

755:                                              ; preds = %753, %659, %652
  %756 = phi %"class.sh::TIntermNode"** [ %397, %659 ], [ %397, %652 ], [ %675, %753 ]
  %757 = phi %"class.sh::TIntermNode"** [ %397, %659 ], [ %397, %652 ], [ %676, %753 ]
  %758 = phi %"class.sh::TIntermNode"** [ %1, %659 ], [ %1, %652 ], [ %677, %753 ]
  %759 = ptrtoint %"class.sh::TIntermNode"** %758 to i64
  %760 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %648, i64 -1
  %761 = ptrtoint %"class.sh::TIntermNode"** %760 to i64
  %762 = sub i64 %761, %759
  %763 = lshr i64 %762, 3
  %764 = add nuw nsw i64 %763, 1
  %765 = and i64 %764, 7
  %766 = icmp eq i64 %765, 0
  br i1 %766, label %779, label %767

767:                                              ; preds = %755, %767
  %768 = phi %"class.sh::TIntermNode"** [ %776, %767 ], [ %756, %755 ]
  %769 = phi %"class.sh::TIntermNode"** [ %776, %767 ], [ %757, %755 ]
  %770 = phi %"class.sh::TIntermNode"** [ %775, %767 ], [ %758, %755 ]
  %771 = phi i64 [ %777, %767 ], [ %765, %755 ]
  %772 = bitcast %"class.sh::TIntermNode"** %769 to i64*
  %773 = bitcast %"class.sh::TIntermNode"** %770 to i64*
  %774 = load i64, i64* %773, align 8
  store i64 %774, i64* %772, align 8
  %775 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %770, i64 1
  %776 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %768, i64 1
  %777 = add i64 %771, -1
  %778 = icmp eq i64 %777, 0
  br i1 %778, label %779, label %767, !llvm.loop !45

779:                                              ; preds = %767, %755
  %780 = phi %"class.sh::TIntermNode"** [ undef, %755 ], [ %776, %767 ]
  %781 = phi %"class.sh::TIntermNode"** [ %756, %755 ], [ %776, %767 ]
  %782 = phi %"class.sh::TIntermNode"** [ %757, %755 ], [ %776, %767 ]
  %783 = phi %"class.sh::TIntermNode"** [ %758, %755 ], [ %775, %767 ]
  %784 = icmp ult i64 %762, 56
  br i1 %784, label %830, label %785

785:                                              ; preds = %779, %785
  %786 = phi %"class.sh::TIntermNode"** [ %828, %785 ], [ %781, %779 ]
  %787 = phi %"class.sh::TIntermNode"** [ %828, %785 ], [ %782, %779 ]
  %788 = phi %"class.sh::TIntermNode"** [ %827, %785 ], [ %783, %779 ]
  %789 = bitcast %"class.sh::TIntermNode"** %787 to i64*
  %790 = bitcast %"class.sh::TIntermNode"** %788 to i64*
  %791 = load i64, i64* %790, align 8
  store i64 %791, i64* %789, align 8
  %792 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 1
  %793 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 1
  %794 = bitcast %"class.sh::TIntermNode"** %793 to i64*
  %795 = bitcast %"class.sh::TIntermNode"** %792 to i64*
  %796 = load i64, i64* %795, align 8
  store i64 %796, i64* %794, align 8
  %797 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 2
  %798 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 2
  %799 = bitcast %"class.sh::TIntermNode"** %798 to i64*
  %800 = bitcast %"class.sh::TIntermNode"** %797 to i64*
  %801 = load i64, i64* %800, align 8
  store i64 %801, i64* %799, align 8
  %802 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 3
  %803 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 3
  %804 = bitcast %"class.sh::TIntermNode"** %803 to i64*
  %805 = bitcast %"class.sh::TIntermNode"** %802 to i64*
  %806 = load i64, i64* %805, align 8
  store i64 %806, i64* %804, align 8
  %807 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 4
  %808 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 4
  %809 = bitcast %"class.sh::TIntermNode"** %808 to i64*
  %810 = bitcast %"class.sh::TIntermNode"** %807 to i64*
  %811 = load i64, i64* %810, align 8
  store i64 %811, i64* %809, align 8
  %812 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 5
  %813 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 5
  %814 = bitcast %"class.sh::TIntermNode"** %813 to i64*
  %815 = bitcast %"class.sh::TIntermNode"** %812 to i64*
  %816 = load i64, i64* %815, align 8
  store i64 %816, i64* %814, align 8
  %817 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 6
  %818 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 6
  %819 = bitcast %"class.sh::TIntermNode"** %818 to i64*
  %820 = bitcast %"class.sh::TIntermNode"** %817 to i64*
  %821 = load i64, i64* %820, align 8
  store i64 %821, i64* %819, align 8
  %822 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 7
  %823 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 7
  %824 = bitcast %"class.sh::TIntermNode"** %823 to i64*
  %825 = bitcast %"class.sh::TIntermNode"** %822 to i64*
  %826 = load i64, i64* %825, align 8
  store i64 %826, i64* %824, align 8
  %827 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 8
  %828 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 8
  %829 = icmp eq %"class.sh::TIntermNode"** %827, %648
  br i1 %829, label %830, label %785, !llvm.loop !46

830:                                              ; preds = %779, %785, %753, %650
  %831 = phi %"class.sh::TIntermNode"** [ %397, %650 ], [ %675, %753 ], [ %780, %779 ], [ %828, %785 ]
  %832 = phi i64 [ %651, %650 ], [ %646, %753 ], [ %646, %785 ], [ %646, %779 ]
  %833 = ptrtoint %"class.sh::TIntermNode"** %831 to i64
  store i64 %832, i64* %360, align 8
  store i64 %833, i64* %23, align 8
  store i64 %396, i64* %15, align 8
  ret %"class.sh::TIntermNode"** %393

834:                                              ; preds = %208, %353, %357, %4
  ret %"class.sh::TIntermNode"** %1
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh24TIntermFunctionPrototype13getChildCountEv(%"class.sh::TIntermFunctionPrototype"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %"class.sh::TIntermNode"* @_ZNK2sh24TIntermFunctionPrototype12getChildNodeEm(%"class.sh::TIntermFunctionPrototype"* nocapture readnone, i64) unnamed_addr #3 align 2 {
  ret %"class.sh::TIntermNode"* null
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN2sh24TIntermFunctionPrototype16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermFunctionPrototype"* nocapture readnone, %"class.sh::TIntermNode"* nocapture readnone, %"class.sh::TIntermNode"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2sh18TIntermDeclaration13getChildCountEv(%"class.sh::TIntermDeclaration"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %0, i64 0, i32 2, i32 0
  %3 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %4 = bitcast %"class.sh::TIntermNode"*** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.9"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  ret i64 %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh18TIntermDeclaration12getChildNodeEm(%"class.sh::TIntermDeclaration"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %3, align 8
  %5 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, i64 %1
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  ret %"class.sh::TIntermNode"* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh18TIntermDeclaration16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermAggregateBase"* %4 to %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)***
  %6 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %6, i64 2
  %8 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %7, align 8
  %9 = tail call %"class.sh::TVector.8"* %8(%"class.sh::TIntermAggregateBase"* %4) #18
  %10 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %9, i64 0, i32 0, i32 0, i32 1
  %11 = bitcast %"class.sh::TIntermNode"*** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.sh::TVector.8"* %9 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %12, %14
  br i1 %15, label %49, label %16

16:                                               ; preds = %3, %27
  %17 = phi i64 [ %28, %27 ], [ 0, %3 ]
  %18 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %19 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %18, i64 2
  %20 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %19, align 8
  %21 = tail call %"class.sh::TVector.8"* %20(%"class.sh::TIntermAggregateBase"* %4) #18
  %22 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %21, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %22, align 8
  %24 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %23, i64 %17
  %25 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %24, align 8
  %26 = icmp eq %"class.sh::TIntermNode"* %25, %1
  br i1 %26, label %41, label %27

27:                                               ; preds = %16
  %28 = add nuw i64 %17, 1
  %29 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %30 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %29, i64 2
  %31 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %30, align 8
  %32 = tail call %"class.sh::TVector.8"* %31(%"class.sh::TIntermAggregateBase"* %4) #18
  %33 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %32, i64 0, i32 0, i32 0, i32 1
  %34 = bitcast %"class.sh::TIntermNode"*** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"class.sh::TVector.8"* %32 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %35, %37
  %39 = ashr exact i64 %38, 3
  %40 = icmp ult i64 %28, %39
  br i1 %40, label %16, label %49

41:                                               ; preds = %16
  %42 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %43 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %42, i64 2
  %44 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %43, align 8
  %45 = tail call %"class.sh::TVector.8"* %44(%"class.sh::TIntermAggregateBase"* %4) #18
  %46 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %45, i64 0, i32 0, i32 0, i32 0
  %47 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %46, align 8
  %48 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %47, i64 %17
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %48, align 8
  br label %49

49:                                               ; preds = %27, %3, %41
  %50 = phi i1 [ true, %41 ], [ false, %3 ], [ false, %27 ]
  ret i1 %50
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh18TIntermDeclarationC2ERKS0_(%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermDeclaration"* nocapture readonly dereferenceable(56)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %0, i64 0, i32 0, i32 1, i32 0
  %5 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false) #18
  %6 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %0, i64 0, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %0, i64 0, i32 2
  %8 = bitcast %"class.sh::TVector.8"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #18
  %9 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %10 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %1, i64 0, i32 2, i32 0, i32 0, i32 1
  %12 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %11, align 8
  %13 = icmp eq %"class.sh::TIntermNode"** %10, %12
  br i1 %13, label %21, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast %"class.sh::TIntermNode"*** %15 to i64*
  %18 = bitcast %"class.sh::TVector.8"* %7 to i64*
  %19 = bitcast %"class.sh::TIntermNode"*** %16 to i64*
  %20 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %7, i64 0, i32 0, i32 0, i32 0
  br label %22

21:                                               ; preds = %249, %2
  ret void

22:                                               ; preds = %14, %249
  %23 = phi %"class.sh::TIntermNode"** [ %10, %14 ], [ %250, %249 ]
  %24 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %23, align 8
  %25 = bitcast %"class.sh::TIntermNode"* %24 to %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)***
  %26 = load %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)*** %25, align 8
  %27 = getelementptr inbounds %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)** %26, i64 23
  %28 = load %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)** %27, align 8
  %29 = tail call %"class.sh::TIntermNode"* %28(%"class.sh::TIntermNode"* %24) #18
  %30 = ptrtoint %"class.sh::TIntermNode"* %29 to i64
  %31 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %15, align 8
  %32 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %16, align 8
  %33 = icmp ult %"class.sh::TIntermNode"** %31, %32
  %34 = ptrtoint %"class.sh::TIntermNode"** %32 to i64
  br i1 %33, label %35, label %39

35:                                               ; preds = %22
  %36 = bitcast %"class.sh::TIntermNode"** %31 to i64*
  store i64 %30, i64* %36, align 8
  %37 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %31, i64 1
  %38 = ptrtoint %"class.sh::TIntermNode"** %37 to i64
  store i64 %38, i64* %17, align 8
  br label %249

39:                                               ; preds = %22
  %40 = ptrtoint %"class.sh::TIntermNode"** %31 to i64
  %41 = load i64, i64* %18, align 8
  %42 = sub i64 %40, %41
  %43 = ashr exact i64 %42, 3
  %44 = add nsw i64 %43, 1
  %45 = icmp ugt i64 %44, 2305843009213693951
  br i1 %45, label %46, label %48

46:                                               ; preds = %39
  %47 = bitcast %"class.sh::TVector.8"* %7 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %47) #19
  unreachable

48:                                               ; preds = %39
  %49 = sub i64 %34, %41
  %50 = ashr exact i64 %49, 3
  %51 = icmp ult i64 %50, 1152921504606846975
  br i1 %51, label %52, label %57

52:                                               ; preds = %48
  %53 = ashr exact i64 %49, 2
  %54 = icmp ult i64 %53, %44
  %55 = select i1 %54, i64 %44, i64 %53
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %63, label %57

57:                                               ; preds = %52, %48
  %58 = phi i64 [ %55, %52 ], [ 2305843009213693951, %48 ]
  %59 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %60 = shl i64 %58, 3
  %61 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %59, i64 %60) #18
  %62 = bitcast i8* %61 to %"class.sh::TIntermNode"**
  br label %63

63:                                               ; preds = %57, %52
  %64 = phi i64 [ %58, %57 ], [ 0, %52 ]
  %65 = phi %"class.sh::TIntermNode"** [ %62, %57 ], [ null, %52 ]
  %66 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %65, i64 %43
  %67 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %65, i64 %64
  %68 = ptrtoint %"class.sh::TIntermNode"** %67 to i64
  %69 = bitcast %"class.sh::TIntermNode"** %66 to i64*
  store i64 %30, i64* %69, align 8
  %70 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %66, i64 1
  %71 = ptrtoint %"class.sh::TIntermNode"** %70 to i64
  %72 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %20, align 8
  %73 = ptrtoint %"class.sh::TIntermNode"** %72 to i64
  %74 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %15, align 8
  %75 = icmp eq %"class.sh::TIntermNode"** %74, %72
  br i1 %75, label %246, label %76

76:                                               ; preds = %63
  %77 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 -1
  %78 = ptrtoint %"class.sh::TIntermNode"** %77 to i64
  %79 = sub i64 %78, %73
  %80 = lshr i64 %79, 3
  %81 = add nuw nsw i64 %80, 1
  %82 = icmp ult i64 %81, 4
  br i1 %82, label %176, label %83

83:                                               ; preds = %76
  %84 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %65, i64 -1
  %85 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 -1
  %86 = ptrtoint %"class.sh::TIntermNode"** %85 to i64
  %87 = sub i64 %86, %73
  %88 = lshr i64 %87, 3
  %89 = sub nsw i64 %43, %88
  %90 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %84, i64 %89
  %91 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 -1
  %92 = sub nsw i64 0, %88
  %93 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %91, i64 %92
  %94 = icmp ult %"class.sh::TIntermNode"** %90, %74
  %95 = icmp ult %"class.sh::TIntermNode"** %93, %66
  %96 = and i1 %94, %95
  br i1 %96, label %176, label %97

97:                                               ; preds = %83
  %98 = and i64 %81, 4611686018427387900
  %99 = sub nsw i64 0, %98
  %100 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %66, i64 %99
  %101 = sub nsw i64 0, %98
  %102 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 %101
  %103 = add nsw i64 %98, -4
  %104 = lshr exact i64 %103, 2
  %105 = add nuw nsw i64 %104, 1
  %106 = and i64 %105, 1
  %107 = icmp eq i64 %103, 0
  br i1 %107, label %152, label %108

108:                                              ; preds = %97
  %109 = sub nuw nsw i64 %105, %106
  %110 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %66, i64 -1
  %111 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 -1
  %112 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %66, i64 -1
  %113 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 -1
  br label %114

114:                                              ; preds = %114, %108
  %115 = phi i64 [ 0, %108 ], [ %149, %114 ]
  %116 = phi i64 [ %109, %108 ], [ %150, %114 ]
  %117 = sub i64 0, %115
  %118 = sub i64 0, %115
  %119 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %110, i64 %117
  %120 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %111, i64 %118
  %121 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %120, i64 -1
  %122 = bitcast %"class.sh::TIntermNode"** %121 to <2 x i64>*
  %123 = load <2 x i64>, <2 x i64>* %122, align 8, !alias.scope !47
  %124 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %120, i64 -2
  %125 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %124, i64 -1
  %126 = bitcast %"class.sh::TIntermNode"** %125 to <2 x i64>*
  %127 = load <2 x i64>, <2 x i64>* %126, align 8, !alias.scope !47
  %128 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 -1
  %129 = bitcast %"class.sh::TIntermNode"** %128 to <2 x i64>*
  store <2 x i64> %123, <2 x i64>* %129, align 8, !alias.scope !50, !noalias !47
  %130 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 -2
  %131 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %130, i64 -1
  %132 = bitcast %"class.sh::TIntermNode"** %131 to <2 x i64>*
  store <2 x i64> %127, <2 x i64>* %132, align 8, !alias.scope !50, !noalias !47
  %133 = sub nuw nsw i64 -4, %115
  %134 = sub nuw nsw i64 -4, %115
  %135 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %112, i64 %133
  %136 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %113, i64 %134
  %137 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %136, i64 -1
  %138 = bitcast %"class.sh::TIntermNode"** %137 to <2 x i64>*
  %139 = load <2 x i64>, <2 x i64>* %138, align 8, !alias.scope !47
  %140 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %136, i64 -2
  %141 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %140, i64 -1
  %142 = bitcast %"class.sh::TIntermNode"** %141 to <2 x i64>*
  %143 = load <2 x i64>, <2 x i64>* %142, align 8, !alias.scope !47
  %144 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %135, i64 -1
  %145 = bitcast %"class.sh::TIntermNode"** %144 to <2 x i64>*
  store <2 x i64> %139, <2 x i64>* %145, align 8, !alias.scope !50, !noalias !47
  %146 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %135, i64 -2
  %147 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %146, i64 -1
  %148 = bitcast %"class.sh::TIntermNode"** %147 to <2 x i64>*
  store <2 x i64> %143, <2 x i64>* %148, align 8, !alias.scope !50, !noalias !47
  %149 = add i64 %115, 8
  %150 = add i64 %116, -2
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %152, label %114, !llvm.loop !52

152:                                              ; preds = %114, %97
  %153 = phi i64 [ 0, %97 ], [ %149, %114 ]
  %154 = icmp eq i64 %106, 0
  br i1 %154, label %174, label %155

155:                                              ; preds = %152
  %156 = sub i64 0, %153
  %157 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %66, i64 -1
  %158 = sub i64 0, %153
  %159 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 -1
  %160 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %157, i64 %156
  %161 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %159, i64 %158
  %162 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -1
  %163 = bitcast %"class.sh::TIntermNode"** %162 to <2 x i64>*
  %164 = load <2 x i64>, <2 x i64>* %163, align 8, !alias.scope !47
  %165 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -2
  %166 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 -1
  %167 = bitcast %"class.sh::TIntermNode"** %166 to <2 x i64>*
  %168 = load <2 x i64>, <2 x i64>* %167, align 8, !alias.scope !47
  %169 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %160, i64 -1
  %170 = bitcast %"class.sh::TIntermNode"** %169 to <2 x i64>*
  store <2 x i64> %164, <2 x i64>* %170, align 8, !alias.scope !50, !noalias !47
  %171 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %160, i64 -2
  %172 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %171, i64 -1
  %173 = bitcast %"class.sh::TIntermNode"** %172 to <2 x i64>*
  store <2 x i64> %168, <2 x i64>* %173, align 8, !alias.scope !50, !noalias !47
  br label %174

174:                                              ; preds = %152, %155
  %175 = icmp eq i64 %81, %98
  br i1 %175, label %246, label %176

176:                                              ; preds = %174, %83, %76
  %177 = phi %"class.sh::TIntermNode"** [ %66, %83 ], [ %66, %76 ], [ %100, %174 ]
  %178 = phi %"class.sh::TIntermNode"** [ %74, %83 ], [ %74, %76 ], [ %102, %174 ]
  %179 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %178, i64 -1
  %180 = ptrtoint %"class.sh::TIntermNode"** %179 to i64
  %181 = sub i64 %180, %73
  %182 = lshr i64 %181, 3
  %183 = add nuw nsw i64 %182, 1
  %184 = and i64 %183, 7
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %197, label %186

186:                                              ; preds = %176, %186
  %187 = phi %"class.sh::TIntermNode"** [ %190, %186 ], [ %177, %176 ]
  %188 = phi %"class.sh::TIntermNode"** [ %191, %186 ], [ %178, %176 ]
  %189 = phi i64 [ %195, %186 ], [ %184, %176 ]
  %190 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -1
  %191 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -1
  %192 = bitcast %"class.sh::TIntermNode"** %191 to i64*
  %193 = load i64, i64* %192, align 8
  %194 = bitcast %"class.sh::TIntermNode"** %190 to i64*
  store i64 %193, i64* %194, align 8
  %195 = add i64 %189, -1
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %197, label %186, !llvm.loop !53

197:                                              ; preds = %186, %176
  %198 = phi %"class.sh::TIntermNode"** [ undef, %176 ], [ %190, %186 ]
  %199 = phi %"class.sh::TIntermNode"** [ %177, %176 ], [ %190, %186 ]
  %200 = phi %"class.sh::TIntermNode"** [ %178, %176 ], [ %191, %186 ]
  %201 = icmp ult i64 %181, 56
  br i1 %201, label %246, label %202

202:                                              ; preds = %197, %202
  %203 = phi %"class.sh::TIntermNode"** [ %240, %202 ], [ %199, %197 ]
  %204 = phi %"class.sh::TIntermNode"** [ %241, %202 ], [ %200, %197 ]
  %205 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %203, i64 -1
  %206 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 -1
  %207 = bitcast %"class.sh::TIntermNode"** %206 to i64*
  %208 = load i64, i64* %207, align 8
  %209 = bitcast %"class.sh::TIntermNode"** %205 to i64*
  store i64 %208, i64* %209, align 8
  %210 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %203, i64 -2
  %211 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 -2
  %212 = bitcast %"class.sh::TIntermNode"** %211 to i64*
  %213 = load i64, i64* %212, align 8
  %214 = bitcast %"class.sh::TIntermNode"** %210 to i64*
  store i64 %213, i64* %214, align 8
  %215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %203, i64 -3
  %216 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 -3
  %217 = bitcast %"class.sh::TIntermNode"** %216 to i64*
  %218 = load i64, i64* %217, align 8
  %219 = bitcast %"class.sh::TIntermNode"** %215 to i64*
  store i64 %218, i64* %219, align 8
  %220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %203, i64 -4
  %221 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 -4
  %222 = bitcast %"class.sh::TIntermNode"** %221 to i64*
  %223 = load i64, i64* %222, align 8
  %224 = bitcast %"class.sh::TIntermNode"** %220 to i64*
  store i64 %223, i64* %224, align 8
  %225 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %203, i64 -5
  %226 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 -5
  %227 = bitcast %"class.sh::TIntermNode"** %226 to i64*
  %228 = load i64, i64* %227, align 8
  %229 = bitcast %"class.sh::TIntermNode"** %225 to i64*
  store i64 %228, i64* %229, align 8
  %230 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %203, i64 -6
  %231 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 -6
  %232 = bitcast %"class.sh::TIntermNode"** %231 to i64*
  %233 = load i64, i64* %232, align 8
  %234 = bitcast %"class.sh::TIntermNode"** %230 to i64*
  store i64 %233, i64* %234, align 8
  %235 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %203, i64 -7
  %236 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 -7
  %237 = bitcast %"class.sh::TIntermNode"** %236 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = bitcast %"class.sh::TIntermNode"** %235 to i64*
  store i64 %238, i64* %239, align 8
  %240 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %203, i64 -8
  %241 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 -8
  %242 = bitcast %"class.sh::TIntermNode"** %241 to i64*
  %243 = load i64, i64* %242, align 8
  %244 = bitcast %"class.sh::TIntermNode"** %240 to i64*
  store i64 %243, i64* %244, align 8
  %245 = icmp eq %"class.sh::TIntermNode"** %241, %72
  br i1 %245, label %246, label %202, !llvm.loop !54

246:                                              ; preds = %197, %202, %174, %63
  %247 = phi %"class.sh::TIntermNode"** [ %66, %63 ], [ %100, %174 ], [ %198, %197 ], [ %240, %202 ]
  %248 = ptrtoint %"class.sh::TIntermNode"** %247 to i64
  store i64 %248, i64* %18, align 8
  store i64 %71, i64* %17, align 8
  store i64 %68, i64* %19, align 8
  br label %249

249:                                              ; preds = %35, %246
  %250 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %23, i64 1
  %251 = icmp eq %"class.sh::TIntermNode"** %250, %12
  br i1 %251, label %21, label %22
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh20TIntermAggregateBase28replaceChildNodeWithMultipleEPNS_11TIntermNodeERKNS_7TVectorIS2_EE(%"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"* readnone, %"class.sh::TVector.8"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.sh::TIntermAggregateBase"* %0 to %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)***
  %5 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %5, i64 2
  %7 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %6, align 8
  %8 = tail call %"class.sh::TVector.8"* %7(%"class.sh::TIntermAggregateBase"* %0) #18
  %9 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %8, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %11 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %12 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %11, i64 2
  %13 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %12, align 8
  %14 = tail call %"class.sh::TVector.8"* %13(%"class.sh::TIntermAggregateBase"* %0) #18
  %15 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %14, i64 0, i32 0, i32 0, i32 1
  %16 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %15, align 8
  %17 = icmp ult %"class.sh::TIntermNode"** %10, %16
  br i1 %17, label %18, label %59

18:                                               ; preds = %3, %38
  %19 = phi %"class.sh::TIntermNode"** [ %39, %38 ], [ %10, %3 ]
  %20 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %19, align 8
  %21 = icmp eq %"class.sh::TIntermNode"* %20, %1
  br i1 %21, label %22, label %38

22:                                               ; preds = %18
  %23 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %24 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %23, i64 2
  %25 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %24, align 8
  %26 = tail call %"class.sh::TVector.8"* %25(%"class.sh::TIntermAggregateBase"* %0) #18
  %27 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %19, i64 1
  %28 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %26, i64 0, i32 0, i32 0, i32 1
  %29 = bitcast %"class.sh::TIntermNode"*** %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = ptrtoint %"class.sh::TIntermNode"** %27 to i64
  %32 = sub i64 %30, %31
  %33 = ashr exact i64 %32, 3
  %34 = icmp eq i64 %32, 0
  br i1 %34, label %47, label %35

35:                                               ; preds = %22
  %36 = bitcast %"class.sh::TIntermNode"** %19 to i8*
  %37 = bitcast %"class.sh::TIntermNode"** %27 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 %32, i1 false) #18
  br label %47

38:                                               ; preds = %18
  %39 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %19, i64 1
  %40 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %41 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %40, i64 2
  %42 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %41, align 8
  %43 = tail call %"class.sh::TVector.8"* %42(%"class.sh::TIntermAggregateBase"* %0) #18
  %44 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %43, i64 0, i32 0, i32 0, i32 1
  %45 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %44, align 8
  %46 = icmp ult %"class.sh::TIntermNode"** %39, %45
  br i1 %46, label %18, label %59

47:                                               ; preds = %35, %22
  %48 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %19, i64 %33
  store %"class.sh::TIntermNode"** %48, %"class.sh::TIntermNode"*** %28, align 8
  %49 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %50 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %49, i64 2
  %51 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %50, align 8
  %52 = tail call %"class.sh::TVector.8"* %51(%"class.sh::TIntermAggregateBase"* %0) #18
  %53 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %52, i64 0, i32 0
  %54 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %2, i64 0, i32 0, i32 0, i32 0
  %55 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %54, align 8
  %56 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %2, i64 0, i32 0, i32 0, i32 1
  %57 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %56, align 8
  %58 = tail call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertINS_11__wrap_iterIPKS3_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISD_E9referenceEEE5valueENS8_IPS3_EEE4typeESB_SD_SD_(%"class.std::__1::vector.9"* %53, %"class.sh::TIntermNode"** %19, %"class.sh::TIntermNode"** %55, %"class.sh::TIntermNode"** %57)
  br label %59

59:                                               ; preds = %38, %3, %47
  %60 = phi i1 [ true, %47 ], [ false, %3 ], [ false, %38 ]
  ret i1 %60
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh20TIntermAggregateBase16insertChildNodesEmRKNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermAggregateBase"*, i64, %"class.sh::TVector.8"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.sh::TIntermAggregateBase"* %0 to %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)***
  %5 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %5, i64 2
  %7 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %6, align 8
  %8 = tail call %"class.sh::TVector.8"* %7(%"class.sh::TIntermAggregateBase"* %0) #18
  %9 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %8, i64 0, i32 0, i32 0, i32 1
  %10 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.sh::TVector.8"* %8 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = ashr exact i64 %14, 3
  %16 = icmp ult i64 %15, %1
  br i1 %16, label %35, label %17

17:                                               ; preds = %3
  %18 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %19 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %18, i64 2
  %20 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %19, align 8
  %21 = tail call %"class.sh::TVector.8"* %20(%"class.sh::TIntermAggregateBase"* %0) #18
  %22 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %21, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %22, align 8
  %24 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %23, i64 %1
  %25 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %26 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %25, i64 2
  %27 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregateBase"*)** %26, align 8
  %28 = tail call %"class.sh::TVector.8"* %27(%"class.sh::TIntermAggregateBase"* %0) #18
  %29 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %28, i64 0, i32 0
  %30 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %2, i64 0, i32 0, i32 0, i32 0
  %31 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %30, align 8
  %32 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %2, i64 0, i32 0, i32 0, i32 1
  %33 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %32, align 8
  %34 = tail call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertINS_11__wrap_iterIPKS3_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISD_E9referenceEEE5valueENS8_IPS3_EEE4typeESB_SD_SD_(%"class.std::__1::vector.9"* %29, %"class.sh::TIntermNode"** %24, %"class.sh::TIntermNode"** %31, %"class.sh::TIntermNode"** %33)
  br label %35

35:                                               ; preds = %3, %17
  %36 = phi i1 [ true, %17 ], [ false, %3 ]
  ret i1 %36
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh13TIntermSymbolC2EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* nocapture, %"class.sh::TVariable"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %4 = bitcast i32* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 16, i1 false) #18
  %5 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh13TIntermSymbolE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %0, i64 0, i32 1
  store %"class.sh::TVariable"* %1, %"class.sh::TVariable"** %6, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh13TIntermSymbol16hasConstantValueEv(%"class.sh::TIntermSymbol"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %0, i64 0, i32 1
  %3 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %2, align 8
  %4 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %3, i64 0, i32 2
  %5 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %4, align 8
  %6 = icmp ne %"class.sh::TConstantUnion"* %5, null
  ret i1 %6
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TConstantUnion"* @_ZNK2sh13TIntermSymbol16getConstantValueEv(%"class.sh::TIntermSymbol"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %0, i64 0, i32 1
  %3 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %2, align 8
  %4 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %3, i64 0, i32 2
  %5 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %4, align 8
  ret %"class.sh::TConstantUnion"* %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(4) %"class.sh::TSymbolUniqueId"* @_ZNK2sh13TIntermSymbol8uniqueIdEv(%"class.sh::TIntermSymbol"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %0, i64 0, i32 1
  %3 = bitcast %"class.sh::TVariable"** %2 to %"class.sh::TSymbol"**
  %4 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %3, align 8
  %5 = getelementptr inbounds %"class.sh::TSymbol", %"class.sh::TSymbol"* %4, i64 0, i32 1
  ret %"class.sh::TSymbolUniqueId"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %0, i64 0, i32 1
  %3 = bitcast %"class.sh::TVariable"** %2 to %"class.sh::TSymbol"**
  %4 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %3, align 8
  %5 = tail call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %4) #18
  ret { i8*, i64 } %5
}

declare { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(184) %"class.sh::TType"* @_ZNK2sh13TIntermSymbol7getTypeEv(%"class.sh::TIntermSymbol"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %0, i64 0, i32 1
  %3 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %2, align 8
  %4 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %3, i64 0, i32 1
  %5 = load %"class.sh::TType"*, %"class.sh::TType"** %4, align 8
  ret %"class.sh::TType"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate18CreateFunctionCallERKNS_9TFunctionEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TFunction"* dereferenceable(80), %"class.sh::TVector.8"*) local_unnamed_addr #0 align 2 {
  %3 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %4 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %3, i64 264) #18
  %5 = bitcast i8* %4 to %"class.sh::TIntermAggregate"*
  %6 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %0, i64 0, i32 5
  %7 = load %"class.sh::TType"*, %"class.sh::TType"** %6, align 8
  %8 = getelementptr inbounds i8, i8* %4, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false) #18
  %9 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds i8, i8* %4, i64 24
  %11 = bitcast i8* %10 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %11, %"class.sh::TType"* dereferenceable(184) %7) #18
  %12 = getelementptr inbounds i8, i8* %4, i64 208
  store i8 1, i8* %12, align 8
  %13 = getelementptr inbounds i8, i8* %4, i64 216
  %14 = bitcast i8* %13 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  %15 = getelementptr inbounds i8, i8* %4, i64 224
  %16 = getelementptr inbounds i8, i8* %4, i64 256
  %17 = bitcast i8* %16 to %"class.sh::TFunction"**
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 26, i1 false) #18
  store %"class.sh::TFunction"* %0, %"class.sh::TFunction"** %17, align 8
  %18 = icmp eq %"class.sh::TVector.8"* %1, null
  br i1 %18, label %35, label %19

19:                                               ; preds = %2
  %20 = bitcast i8* %15 to i64*
  %21 = bitcast %"class.sh::TVector.8"* %1 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %20, align 8
  store i64 0, i64* %21, align 8
  %23 = getelementptr inbounds i8, i8* %4, i64 232
  %24 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %1, i64 0, i32 0, i32 0, i32 1
  %25 = bitcast i8* %23 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.sh::TIntermNode"*** %24 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %25, align 8
  store i64 %26, i64* %27, align 8
  %29 = getelementptr inbounds i8, i8* %4, i64 240
  %30 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %31 = bitcast i8* %29 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"class.sh::TIntermNode"*** %30 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %31, align 8
  store i64 %32, i64* %33, align 8
  br label %35

35:                                               ; preds = %2, %19
  tail call void @_ZN2sh16TIntermAggregate24setPrecisionAndQualifierEv(%"class.sh::TIntermAggregate"* %5) #18
  ret %"class.sh::TIntermAggregate"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate21CreateRawFunctionCallERKNS_9TFunctionEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TFunction"* dereferenceable(80), %"class.sh::TVector.8"*) local_unnamed_addr #0 align 2 {
  %3 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %4 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %3, i64 264) #18
  %5 = bitcast i8* %4 to %"class.sh::TIntermAggregate"*
  %6 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %0, i64 0, i32 5
  %7 = load %"class.sh::TType"*, %"class.sh::TType"** %6, align 8
  %8 = getelementptr inbounds i8, i8* %4, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false) #18
  %9 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds i8, i8* %4, i64 24
  %11 = bitcast i8* %10 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %11, %"class.sh::TType"* dereferenceable(184) %7) #18
  %12 = getelementptr inbounds i8, i8* %4, i64 208
  store i8 2, i8* %12, align 8
  %13 = getelementptr inbounds i8, i8* %4, i64 216
  %14 = bitcast i8* %13 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  %15 = getelementptr inbounds i8, i8* %4, i64 224
  %16 = getelementptr inbounds i8, i8* %4, i64 256
  %17 = bitcast i8* %16 to %"class.sh::TFunction"**
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 26, i1 false) #18
  store %"class.sh::TFunction"* %0, %"class.sh::TFunction"** %17, align 8
  %18 = icmp eq %"class.sh::TVector.8"* %1, null
  br i1 %18, label %35, label %19

19:                                               ; preds = %2
  %20 = bitcast i8* %15 to i64*
  %21 = bitcast %"class.sh::TVector.8"* %1 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %20, align 8
  store i64 0, i64* %21, align 8
  %23 = getelementptr inbounds i8, i8* %4, i64 232
  %24 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %1, i64 0, i32 0, i32 0, i32 1
  %25 = bitcast i8* %23 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.sh::TIntermNode"*** %24 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %25, align 8
  store i64 %26, i64* %27, align 8
  %29 = getelementptr inbounds i8, i8* %4, i64 240
  %30 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %31 = bitcast i8* %29 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"class.sh::TIntermNode"*** %30 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %31, align 8
  store i64 %32, i64* %33, align 8
  br label %35

35:                                               ; preds = %2, %19
  tail call void @_ZN2sh16TIntermAggregate24setPrecisionAndQualifierEv(%"class.sh::TIntermAggregate"* %5) #18
  ret %"class.sh::TIntermAggregate"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate25CreateBuiltInFunctionCallERKNS_9TFunctionEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TFunction"* dereferenceable(80), %"class.sh::TVector.8"*) local_unnamed_addr #0 align 2 {
  %3 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %4 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %3, i64 264) #18
  %5 = bitcast i8* %4 to %"class.sh::TIntermAggregate"*
  %6 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %0, i64 0, i32 5
  %7 = load %"class.sh::TType"*, %"class.sh::TType"** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %0, i64 0, i32 7
  %9 = load i8, i8* %8, align 8
  %10 = getelementptr inbounds i8, i8* %4, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false) #18
  %11 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %12 = getelementptr inbounds i8, i8* %4, i64 24
  %13 = bitcast i8* %12 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %13, %"class.sh::TType"* dereferenceable(184) %7) #18
  %14 = getelementptr inbounds i8, i8* %4, i64 208
  store i8 %9, i8* %14, align 8
  %15 = getelementptr inbounds i8, i8* %4, i64 216
  %16 = bitcast i8* %15 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %16, align 8
  %17 = getelementptr inbounds i8, i8* %4, i64 224
  %18 = getelementptr inbounds i8, i8* %4, i64 256
  %19 = bitcast i8* %18 to %"class.sh::TFunction"**
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 26, i1 false) #18
  store %"class.sh::TFunction"* %0, %"class.sh::TFunction"** %19, align 8
  %20 = icmp eq %"class.sh::TVector.8"* %1, null
  br i1 %20, label %37, label %21

21:                                               ; preds = %2
  %22 = bitcast i8* %17 to i64*
  %23 = bitcast %"class.sh::TVector.8"* %1 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %22, align 8
  store i64 0, i64* %23, align 8
  %25 = getelementptr inbounds i8, i8* %4, i64 232
  %26 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %1, i64 0, i32 0, i32 0, i32 1
  %27 = bitcast i8* %25 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %"class.sh::TIntermNode"*** %26 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %27, align 8
  store i64 %28, i64* %29, align 8
  %31 = getelementptr inbounds i8, i8* %4, i64 240
  %32 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %33 = bitcast i8* %31 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"class.sh::TIntermNode"*** %32 to i64*
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %33, align 8
  store i64 %34, i64* %35, align 8
  br label %37

37:                                               ; preds = %2, %21
  tail call void @_ZN2sh16TIntermAggregate24setPrecisionAndQualifierEv(%"class.sh::TIntermAggregate"* %5) #18
  ret %"class.sh::TIntermAggregate"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* dereferenceable(184), %"class.sh::TVector.8"*) local_unnamed_addr #0 align 2 {
  %3 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %4 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %3, i64 264) #18
  %5 = bitcast i8* %4 to %"class.sh::TIntermAggregate"*
  %6 = getelementptr inbounds i8, i8* %4, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false) #18
  %7 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds i8, i8* %4, i64 24
  %9 = bitcast i8* %8 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %9, %"class.sh::TType"* dereferenceable(184) %0) #18
  %10 = getelementptr inbounds i8, i8* %4, i64 208
  store i8 -119, i8* %10, align 8
  %11 = getelementptr inbounds i8, i8* %4, i64 216
  %12 = bitcast i8* %11 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %13 = getelementptr inbounds i8, i8* %4, i64 224
  %14 = getelementptr inbounds i8, i8* %4, i64 256
  %15 = bitcast i8* %14 to %"class.sh::TFunction"**
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 26, i1 false) #18
  store %"class.sh::TFunction"* null, %"class.sh::TFunction"** %15, align 8
  %16 = icmp eq %"class.sh::TVector.8"* %1, null
  br i1 %16, label %33, label %17

17:                                               ; preds = %2
  %18 = bitcast i8* %13 to i64*
  %19 = bitcast %"class.sh::TVector.8"* %1 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %18, align 8
  store i64 0, i64* %19, align 8
  %21 = getelementptr inbounds i8, i8* %4, i64 232
  %22 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %1, i64 0, i32 0, i32 0, i32 1
  %23 = bitcast i8* %21 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast %"class.sh::TIntermNode"*** %22 to i64*
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %23, align 8
  store i64 %24, i64* %25, align 8
  %27 = getelementptr inbounds i8, i8* %4, i64 240
  %28 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %29 = bitcast i8* %27 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = bitcast %"class.sh::TIntermNode"*** %28 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %29, align 8
  store i64 %30, i64* %31, align 8
  br label %33

33:                                               ; preds = %2, %17
  tail call void @_ZN2sh16TIntermAggregate24setPrecisionAndQualifierEv(%"class.sh::TIntermAggregate"* %5) #18
  ret %"class.sh::TIntermAggregate"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh16TIntermAggregateC2EPKNS_9TFunctionERKNS_5TTypeE9TOperatorPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermAggregate"*, %"class.sh::TFunction"*, %"class.sh::TType"* dereferenceable(184), i8 zeroext, %"class.sh::TVector.8"*) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %7 = bitcast i32* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false) #18
  %8 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %9, %"class.sh::TType"* dereferenceable(184) %2) #18
  %10 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 1
  store i8 %3, i8* %10, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2
  %13 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 5
  %14 = bitcast %"class.sh::TVector.8"* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 26, i1 false)
  store %"class.sh::TFunction"* %1, %"class.sh::TFunction"** %13, align 8
  %15 = icmp eq %"class.sh::TVector.8"* %4, null
  br i1 %15, label %32, label %16

16:                                               ; preds = %5
  %17 = bitcast %"class.sh::TVector.8"* %12 to i64*
  %18 = bitcast %"class.sh::TVector.8"* %4 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %17, align 8
  store i64 0, i64* %18, align 8
  %20 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %4, i64 0, i32 0, i32 0, i32 1
  %22 = bitcast %"class.sh::TIntermNode"*** %20 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast %"class.sh::TIntermNode"*** %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %22, align 8
  store i64 %23, i64* %24, align 8
  %26 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %27 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %4, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %28 = bitcast %"class.sh::TIntermNode"*** %26 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %"class.sh::TIntermNode"*** %27 to i64*
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %28, align 8
  store i64 %29, i64* %30, align 8
  br label %32

32:                                               ; preds = %5, %16
  tail call void @_ZN2sh16TIntermAggregate24setPrecisionAndQualifierEv(%"class.sh::TIntermAggregate"* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh16TIntermAggregate24setPrecisionAndQualifierEv(%"class.sh::TIntermAggregate"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 2
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 1
  %4 = load i8, i8* %3, align 8
  %5 = icmp eq i8 %4, 3
  br i1 %5, label %6, label %55

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %8 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %9 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %10 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %11 = icmp eq %"class.sh::TIntermNode"** %8, %10
  br i1 %11, label %42, label %12

12:                                               ; preds = %6, %39
  %13 = phi %"class.sh::TIntermNode"** [ %40, %39 ], [ %8, %6 ]
  %14 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %13, align 8
  %15 = bitcast %"class.sh::TIntermNode"* %14 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %16 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %15, align 8
  %17 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %16, i64 4
  %18 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %17, align 8
  %19 = tail call %"class.sh::TIntermTyped"* %18(%"class.sh::TIntermNode"* %14) #18
  %20 = icmp eq %"class.sh::TIntermTyped"* %19, null
  br i1 %20, label %39, label %21

21:                                               ; preds = %12
  %22 = bitcast %"class.sh::TIntermTyped"* %19 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %23 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %22, align 8
  %24 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %23, i64 31
  %25 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %24, align 8
  %26 = tail call dereferenceable(184) %"class.sh::TType"* %25(%"class.sh::TIntermTyped"* nonnull %19) #18
  %27 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %26, i64 0, i32 0
  %28 = load i32, i32* %27, align 8
  %29 = add i32 %28, -8
  %30 = icmp ult i32 %29, 43
  br i1 %30, label %31, label %39

31:                                               ; preds = %21
  %32 = bitcast %"class.sh::TIntermTyped"* %19 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %33 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %32, align 8
  %34 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %33, i64 31
  %35 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %34, align 8
  %36 = tail call dereferenceable(184) %"class.sh::TType"* %35(%"class.sh::TIntermTyped"* nonnull %19) #18
  %37 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %36, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  br label %42

39:                                               ; preds = %21, %12
  %40 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %13, i64 1
  %41 = icmp eq %"class.sh::TIntermNode"** %40, %10
  br i1 %41, label %42, label %12

42:                                               ; preds = %39, %6, %31
  %43 = phi i32 [ %38, %31 ], [ 0, %6 ], [ 0, %39 ]
  %44 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 5
  %45 = bitcast %"class.sh::TFunction"** %44 to %"class.sh::TSymbol"**
  %46 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %45, align 8
  %47 = tail call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %46) #18
  %48 = extractvalue { i8*, i64 } %47, 0
  %49 = icmp eq i8* %48, null
  %50 = select i1 %49, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %48
  %51 = tail call i32 @strcmp(i8* %50, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0)) #20
  %52 = icmp eq i32 %51, 0
  %53 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  %54 = select i1 %52, i32 3, i32 %43
  store i32 %54, i32* %53, align 4
  br label %193

55:                                               ; preds = %1
  %56 = zext i8 %4 to i32
  %57 = add nsw i32 %56, -1
  %58 = icmp ult i32 %57, 3
  br i1 %58, label %193, label %59

59:                                               ; preds = %55
  %60 = icmp eq i8 %4, -119
  br i1 %60, label %61, label %116

61:                                               ; preds = %59
  %62 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  %63 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %64 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %63, align 8
  %65 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %64, i64 31
  %66 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %65, align 8
  %67 = tail call dereferenceable(184) %"class.sh::TType"* %66(%"class.sh::TIntermTyped"* %62) #18
  %68 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %67, i64 0, i32 0
  %69 = load i32, i32* %68, align 8
  %70 = icmp eq i32 %69, 90
  br i1 %70, label %165, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 4
  store i8 1, i8* %72, align 1
  %73 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %63, align 8
  %74 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %73, i64 31
  %75 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %74, align 8
  %76 = tail call dereferenceable(184) %"class.sh::TType"* %75(%"class.sh::TIntermTyped"* %62) #18
  %77 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %76, i64 0, i32 0
  %78 = load i32, i32* %77, align 8
  %79 = icmp eq i32 %78, 5
  br i1 %79, label %80, label %82

80:                                               ; preds = %71
  %81 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  store i32 0, i32* %81, align 4
  br label %165

82:                                               ; preds = %71
  %83 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %84 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %83, align 8
  %85 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %86 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %85, align 8
  %87 = icmp eq %"class.sh::TIntermNode"** %84, %86
  br i1 %87, label %113, label %88

88:                                               ; preds = %82, %108
  %89 = phi i32 [ %109, %108 ], [ 0, %82 ]
  %90 = phi %"class.sh::TIntermNode"** [ %110, %108 ], [ %84, %82 ]
  %91 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %90, align 8
  %92 = bitcast %"class.sh::TIntermNode"* %91 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %93 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %92, align 8
  %94 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %93, i64 4
  %95 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %94, align 8
  %96 = tail call %"class.sh::TIntermTyped"* %95(%"class.sh::TIntermNode"* %91) #18
  %97 = icmp eq %"class.sh::TIntermTyped"* %96, null
  br i1 %97, label %108, label %98

98:                                               ; preds = %88
  %99 = bitcast %"class.sh::TIntermTyped"* %96 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %100 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %99, align 8
  %101 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %100, i64 31
  %102 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %101, align 8
  %103 = tail call dereferenceable(184) %"class.sh::TType"* %102(%"class.sh::TIntermTyped"* nonnull %96) #18
  %104 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %103, i64 0, i32 1
  %105 = load i32, i32* %104, align 4
  %106 = icmp sgt i32 %105, %89
  %107 = select i1 %106, i32 %105, i32 %89
  br label %108

108:                                              ; preds = %98, %88
  %109 = phi i32 [ %107, %98 ], [ %89, %88 ]
  %110 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %90, i64 1
  %111 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %85, align 8
  %112 = icmp eq %"class.sh::TIntermNode"** %110, %111
  br i1 %112, label %113, label %88

113:                                              ; preds = %108, %82
  %114 = phi i32 [ 0, %82 ], [ %109, %108 ]
  %115 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  store i32 %114, i32* %115, align 4
  br label %165

116:                                              ; preds = %59
  %117 = tail call zeroext i1 @_ZN2sh16TIntermAggregate31setPrecisionForSpecialBuiltInOpEv(%"class.sh::TIntermAggregate"* %0) #18
  br i1 %117, label %165, label %118

118:                                              ; preds = %116
  %119 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 4
  store i8 1, i8* %119, align 1
  %120 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  %121 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %122 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %121, align 8
  %123 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %122, i64 31
  %124 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %123, align 8
  %125 = tail call dereferenceable(184) %"class.sh::TType"* %124(%"class.sh::TIntermTyped"* %120) #18
  %126 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %125, i64 0, i32 0
  %127 = load i32, i32* %126, align 8
  %128 = icmp eq i32 %127, 5
  br i1 %128, label %129, label %131

129:                                              ; preds = %118
  %130 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  store i32 0, i32* %130, align 4
  br label %165

131:                                              ; preds = %118
  %132 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %133 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %132, align 8
  %134 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %135 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %134, align 8
  %136 = icmp eq %"class.sh::TIntermNode"** %133, %135
  br i1 %136, label %162, label %137

137:                                              ; preds = %131, %157
  %138 = phi i32 [ %158, %157 ], [ 0, %131 ]
  %139 = phi %"class.sh::TIntermNode"** [ %159, %157 ], [ %133, %131 ]
  %140 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %139, align 8
  %141 = bitcast %"class.sh::TIntermNode"* %140 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %142 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %141, align 8
  %143 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %142, i64 4
  %144 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %143, align 8
  %145 = tail call %"class.sh::TIntermTyped"* %144(%"class.sh::TIntermNode"* %140) #18
  %146 = icmp eq %"class.sh::TIntermTyped"* %145, null
  br i1 %146, label %157, label %147

147:                                              ; preds = %137
  %148 = bitcast %"class.sh::TIntermTyped"* %145 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %149 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %148, align 8
  %150 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %149, i64 31
  %151 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %150, align 8
  %152 = tail call dereferenceable(184) %"class.sh::TType"* %151(%"class.sh::TIntermTyped"* nonnull %145) #18
  %153 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %152, i64 0, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp sgt i32 %154, %138
  %156 = select i1 %155, i32 %154, i32 %138
  br label %157

157:                                              ; preds = %147, %137
  %158 = phi i32 [ %156, %147 ], [ %138, %137 ]
  %159 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %139, i64 1
  %160 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %134, align 8
  %161 = icmp eq %"class.sh::TIntermNode"** %159, %160
  br i1 %161, label %162, label %137

162:                                              ; preds = %157, %131
  %163 = phi i32 [ 0, %131 ], [ %158, %157 ]
  %164 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  store i32 %163, i32* %164, align 4
  br label %165

165:                                              ; preds = %162, %129, %116, %113, %80, %61
  %166 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %167 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %166, align 8
  %168 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %169 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %168, align 8
  %170 = icmp eq %"class.sh::TIntermNode"** %167, %169
  br i1 %170, label %192, label %171

171:                                              ; preds = %165, %189
  %172 = phi %"class.sh::TIntermNode"** [ %190, %189 ], [ %167, %165 ]
  %173 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %172, align 8
  %174 = bitcast %"class.sh::TIntermNode"* %173 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %175 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %174, align 8
  %176 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %175, i64 4
  %177 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %176, align 8
  %178 = tail call %"class.sh::TIntermTyped"* %177(%"class.sh::TIntermNode"* %173) #18
  %179 = icmp eq %"class.sh::TIntermTyped"* %178, null
  br i1 %179, label %189, label %180

180:                                              ; preds = %171
  %181 = bitcast %"class.sh::TIntermTyped"* %178 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %182 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %181, align 8
  %183 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %182, i64 31
  %184 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %183, align 8
  %185 = tail call dereferenceable(184) %"class.sh::TType"* %184(%"class.sh::TIntermTyped"* nonnull %178) #18
  %186 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %185, i64 0, i32 2
  %187 = load i32, i32* %186, align 8
  %188 = icmp eq i32 %187, 2
  br i1 %188, label %189, label %193

189:                                              ; preds = %180, %171
  %190 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %172, i64 1
  %191 = icmp eq %"class.sh::TIntermNode"** %190, %169
  br i1 %191, label %192, label %171

192:                                              ; preds = %189, %165
  store i32 2, i32* %2, align 8
  br label %193

193:                                              ; preds = %180, %55, %192, %42
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh16TIntermAggregate27setBuiltInFunctionPrecisionEv(%"class.sh::TIntermAggregate"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2, align 8
  %4 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %5 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %4, align 8
  %6 = icmp eq %"class.sh::TIntermNode"** %3, %5
  br i1 %6, label %37, label %7

7:                                                ; preds = %1, %34
  %8 = phi %"class.sh::TIntermNode"** [ %35, %34 ], [ %3, %1 ]
  %9 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, align 8
  %10 = bitcast %"class.sh::TIntermNode"* %9 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %11 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %10, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %11, i64 4
  %13 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %12, align 8
  %14 = tail call %"class.sh::TIntermTyped"* %13(%"class.sh::TIntermNode"* %9) #18
  %15 = icmp eq %"class.sh::TIntermTyped"* %14, null
  br i1 %15, label %34, label %16

16:                                               ; preds = %7
  %17 = bitcast %"class.sh::TIntermTyped"* %14 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %18 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %17, align 8
  %19 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %18, i64 31
  %20 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %19, align 8
  %21 = tail call dereferenceable(184) %"class.sh::TType"* %20(%"class.sh::TIntermTyped"* nonnull %14) #18
  %22 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %21, i64 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = add i32 %23, -8
  %25 = icmp ult i32 %24, 43
  br i1 %25, label %26, label %34

26:                                               ; preds = %16
  %27 = bitcast %"class.sh::TIntermTyped"* %14 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %28 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %27, align 8
  %29 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %28, i64 31
  %30 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %29, align 8
  %31 = tail call dereferenceable(184) %"class.sh::TType"* %30(%"class.sh::TIntermTyped"* nonnull %14) #18
  %32 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %31, i64 0, i32 1
  %33 = load i32, i32* %32, align 4
  br label %37

34:                                               ; preds = %7, %16
  %35 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 1
  %36 = icmp eq %"class.sh::TIntermNode"** %35, %5
  br i1 %36, label %37, label %7

37:                                               ; preds = %34, %1, %26
  %38 = phi i32 [ %33, %26 ], [ 0, %1 ], [ 0, %34 ]
  %39 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 5
  %40 = bitcast %"class.sh::TFunction"** %39 to %"class.sh::TSymbol"**
  %41 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %40, align 8
  %42 = tail call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %41) #18
  %43 = extractvalue { i8*, i64 } %42, 0
  %44 = icmp eq i8* %43, null
  %45 = select i1 %44, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %43
  %46 = tail call i32 @strcmp(i8* %45, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0)) #20
  %47 = icmp eq i32 %46, 0
  %48 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  %49 = select i1 %47, i32 3, i32 %38
  store i32 %49, i32* %48, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh15TIntermOperator14isFunctionCallEv(%"class.sh::TIntermOperator"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermOperator", %"class.sh::TIntermOperator"* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 8
  %4 = zext i8 %3 to i32
  %5 = add nsw i32 %4, -1
  %6 = icmp ult i32 %5, 3
  ret i1 %6
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh15TIntermOperator13isConstructorEv(%"class.sh::TIntermOperator"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermOperator", %"class.sh::TIntermOperator"* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 8
  %4 = icmp eq i8 %3, -119
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh16TIntermAggregate24setPrecisionFromChildrenEv(%"class.sh::TIntermAggregate"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 4
  store i8 1, i8* %2, align 1
  %3 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %5 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %5, i64 31
  %7 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %6, align 8
  %8 = tail call dereferenceable(184) %"class.sh::TType"* %7(%"class.sh::TIntermTyped"* %3) #18
  %9 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %8, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 5
  br i1 %11, label %43, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %14 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %13, align 8
  %15 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %16 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %15, align 8
  %17 = icmp eq %"class.sh::TIntermNode"** %14, %16
  br i1 %17, label %43, label %18

18:                                               ; preds = %12, %38
  %19 = phi i32 [ %39, %38 ], [ 0, %12 ]
  %20 = phi %"class.sh::TIntermNode"** [ %40, %38 ], [ %14, %12 ]
  %21 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %20, align 8
  %22 = bitcast %"class.sh::TIntermNode"* %21 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %23 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %22, align 8
  %24 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %23, i64 4
  %25 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %24, align 8
  %26 = tail call %"class.sh::TIntermTyped"* %25(%"class.sh::TIntermNode"* %21) #18
  %27 = icmp eq %"class.sh::TIntermTyped"* %26, null
  br i1 %27, label %38, label %28

28:                                               ; preds = %18
  %29 = bitcast %"class.sh::TIntermTyped"* %26 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %30 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %29, align 8
  %31 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %30, i64 31
  %32 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %31, align 8
  %33 = tail call dereferenceable(184) %"class.sh::TType"* %32(%"class.sh::TIntermTyped"* nonnull %26) #18
  %34 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %33, i64 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = icmp sgt i32 %35, %19
  %37 = select i1 %36, i32 %35, i32 %19
  br label %38

38:                                               ; preds = %18, %28
  %39 = phi i32 [ %37, %28 ], [ %19, %18 ]
  %40 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %20, i64 1
  %41 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %15, align 8
  %42 = icmp eq %"class.sh::TIntermNode"** %40, %41
  br i1 %42, label %43, label %18

43:                                               ; preds = %38, %12, %1
  %44 = phi i32 [ 0, %1 ], [ 0, %12 ], [ %39, %38 ]
  %45 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  store i32 %44, i32* %45, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh16TIntermAggregate24setPrecisionForBuiltInOpEv(%"class.sh::TIntermAggregate"*) local_unnamed_addr #0 align 2 {
  %2 = tail call zeroext i1 @_ZN2sh16TIntermAggregate31setPrecisionForSpecialBuiltInOpEv(%"class.sh::TIntermAggregate"* %0)
  br i1 %2, label %48, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 4
  store i8 1, i8* %4, align 1
  %5 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %7 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %7, i64 31
  %9 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %8, align 8
  %10 = tail call dereferenceable(184) %"class.sh::TType"* %9(%"class.sh::TIntermTyped"* %5) #18
  %11 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %10, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 5
  br i1 %13, label %45, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %16 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %15, align 8
  %17 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %18 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %19 = icmp eq %"class.sh::TIntermNode"** %16, %18
  br i1 %19, label %45, label %20

20:                                               ; preds = %14, %40
  %21 = phi i32 [ %41, %40 ], [ 0, %14 ]
  %22 = phi %"class.sh::TIntermNode"** [ %42, %40 ], [ %16, %14 ]
  %23 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %22, align 8
  %24 = bitcast %"class.sh::TIntermNode"* %23 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %25 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %24, align 8
  %26 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %25, i64 4
  %27 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %26, align 8
  %28 = tail call %"class.sh::TIntermTyped"* %27(%"class.sh::TIntermNode"* %23) #18
  %29 = icmp eq %"class.sh::TIntermTyped"* %28, null
  br i1 %29, label %40, label %30

30:                                               ; preds = %20
  %31 = bitcast %"class.sh::TIntermTyped"* %28 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %32 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %31, align 8
  %33 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %32, i64 31
  %34 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %33, align 8
  %35 = tail call dereferenceable(184) %"class.sh::TType"* %34(%"class.sh::TIntermTyped"* nonnull %28) #18
  %36 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %35, i64 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = icmp sgt i32 %37, %21
  %39 = select i1 %38, i32 %37, i32 %21
  br label %40

40:                                               ; preds = %30, %20
  %41 = phi i32 [ %39, %30 ], [ %21, %20 ]
  %42 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %22, i64 1
  %43 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %44 = icmp eq %"class.sh::TIntermNode"** %42, %43
  br i1 %44, label %45, label %20

45:                                               ; preds = %40, %14, %3
  %46 = phi i32 [ 0, %3 ], [ 0, %14 ], [ %41, %40 ]
  %47 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  store i32 %46, i32* %47, align 4
  br label %48

48:                                               ; preds = %45, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh16TIntermAggregate25areChildrenConstQualifiedEv(%"class.sh::TIntermAggregate"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2, align 8
  %4 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %5 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %4, align 8
  %6 = icmp eq %"class.sh::TIntermNode"** %3, %5
  br i1 %6, label %28, label %7

7:                                                ; preds = %1, %25
  %8 = phi %"class.sh::TIntermNode"** [ %26, %25 ], [ %3, %1 ]
  %9 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, align 8
  %10 = bitcast %"class.sh::TIntermNode"* %9 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %11 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %10, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %11, i64 4
  %13 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %12, align 8
  %14 = tail call %"class.sh::TIntermTyped"* %13(%"class.sh::TIntermNode"* %9) #18
  %15 = icmp eq %"class.sh::TIntermTyped"* %14, null
  br i1 %15, label %25, label %16

16:                                               ; preds = %7
  %17 = bitcast %"class.sh::TIntermTyped"* %14 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %18 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %17, align 8
  %19 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %18, i64 31
  %20 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %19, align 8
  %21 = tail call dereferenceable(184) %"class.sh::TType"* %20(%"class.sh::TIntermTyped"* nonnull %14) #18
  %22 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %21, i64 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 2
  br i1 %24, label %25, label %28

25:                                               ; preds = %7, %16
  %26 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 1
  %27 = icmp eq %"class.sh::TIntermNode"** %26, %5
  br i1 %27, label %28, label %7

28:                                               ; preds = %16, %25, %1
  %29 = phi i1 [ true, %1 ], [ true, %25 ], [ false, %16 ]
  ret i1 %29
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh16TIntermAggregate31setPrecisionForSpecialBuiltInOpEv(%"class.sh::TIntermAggregate"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 1
  %3 = load i8, i8* %2, align 8
  switch i8 %3, label %59 [
    i8 123, label %4
    i8 124, label %22
    i8 -127, label %57
    i8 -126, label %57
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %6 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %5, align 8
  %7 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %6, align 8
  %8 = bitcast %"class.sh::TIntermNode"* %7 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %9 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %9, i64 4
  %11 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %10, align 8
  %12 = tail call %"class.sh::TIntermTyped"* %11(%"class.sh::TIntermNode"* %7) #18
  %13 = bitcast %"class.sh::TIntermTyped"* %12 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %14 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %13, align 8
  %15 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %14, i64 31
  %16 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %15, align 8
  %17 = tail call dereferenceable(184) %"class.sh::TType"* %16(%"class.sh::TIntermTyped"* %12) #18
  %18 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %17, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  store i32 %19, i32* %20, align 4
  %21 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 4
  store i8 1, i8* %21, align 1
  br label %59

22:                                               ; preds = %1
  %23 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %24 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %23, align 8
  %25 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %24, align 8
  %26 = bitcast %"class.sh::TIntermNode"* %25 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %27 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %26, align 8
  %28 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %27, i64 4
  %29 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %28, align 8
  %30 = tail call %"class.sh::TIntermTyped"* %29(%"class.sh::TIntermNode"* %25) #18
  %31 = bitcast %"class.sh::TIntermTyped"* %30 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %32 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %31, align 8
  %33 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %32, i64 31
  %34 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %33, align 8
  %35 = tail call dereferenceable(184) %"class.sh::TType"* %34(%"class.sh::TIntermTyped"* %30) #18
  %36 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %35, i64 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %23, align 8
  %39 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %38, i64 1
  %40 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %39, align 8
  %41 = bitcast %"class.sh::TIntermNode"* %40 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %42 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %41, align 8
  %43 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %42, i64 4
  %44 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %43, align 8
  %45 = tail call %"class.sh::TIntermTyped"* %44(%"class.sh::TIntermNode"* %40) #18
  %46 = bitcast %"class.sh::TIntermTyped"* %45 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %47 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %46, align 8
  %48 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %47, i64 31
  %49 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %48, align 8
  %50 = tail call dereferenceable(184) %"class.sh::TType"* %49(%"class.sh::TIntermTyped"* %45) #18
  %51 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %50, i64 0, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = icmp sgt i32 %37, %52
  %54 = select i1 %53, i32 %37, i32 %52
  %55 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  store i32 %54, i32* %55, align 4
  %56 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 4
  store i8 1, i8* %56, align 1
  br label %59

57:                                               ; preds = %1, %1
  %58 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  store i32 3, i32* %58, align 4
  br label %59

59:                                               ; preds = %1, %57, %22, %4
  %60 = phi i1 [ true, %57 ], [ true, %22 ], [ true, %4 ], [ false, %1 ]
  ret i1 %60
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZNK2sh16TIntermAggregate12functionNameEv(%"class.sh::TIntermAggregate"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 1
  %3 = load i8, i8* %2, align 8
  %4 = zext i8 %3 to i32
  %5 = add nsw i32 %4, -1
  %6 = icmp ult i32 %5, 3
  br i1 %6, label %7, label %15

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 5
  %9 = bitcast %"class.sh::TFunction"** %8 to %"class.sh::TSymbol"**
  %10 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %9, align 8
  %11 = tail call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %10) #18
  %12 = extractvalue { i8*, i64 } %11, 0
  %13 = icmp eq i8* %12, null
  %14 = select i1 %13, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %12
  br label %17

15:                                               ; preds = %1
  %16 = tail call i8* @_Z17GetOperatorString9TOperator(i8 zeroext %3) #18
  br label %17

17:                                               ; preds = %15, %7
  %18 = phi i8* [ %14, %7 ], [ %16, %15 ]
  ret i8* %18
}

declare i8* @_Z17GetOperatorString9TOperator(i8 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2sh16TIntermAggregate16hasConstantValueEv(%"class.sh::TIntermAggregate"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 1
  %3 = load i8, i8* %2, align 8
  %4 = icmp eq i8 %3, -119
  br i1 %4, label %5, label %27

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %7 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %9 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %8, align 8
  %10 = icmp eq %"class.sh::TIntermNode"** %7, %9
  br i1 %10, label %27, label %13

11:                                               ; preds = %13
  %12 = icmp eq %"class.sh::TIntermNode"** %26, %9
  br i1 %12, label %27, label %13

13:                                               ; preds = %5, %11
  %14 = phi %"class.sh::TIntermNode"** [ %26, %11 ], [ %7, %5 ]
  %15 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %14, align 8
  %16 = bitcast %"class.sh::TIntermNode"* %15 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %17 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %16, align 8
  %18 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %17, i64 4
  %19 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %18, align 8
  %20 = tail call %"class.sh::TIntermTyped"* %19(%"class.sh::TIntermNode"* %15) #18
  %21 = bitcast %"class.sh::TIntermTyped"* %20 to i1 (%"class.sh::TIntermTyped"*)***
  %22 = load i1 (%"class.sh::TIntermTyped"*)**, i1 (%"class.sh::TIntermTyped"*)*** %21, align 8
  %23 = getelementptr inbounds i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %22, i64 28
  %24 = load i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %23, align 8
  %25 = tail call zeroext i1 %24(%"class.sh::TIntermTyped"* %20) #18
  %26 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %14, i64 1
  br i1 %25, label %11, label %27

27:                                               ; preds = %13, %11, %5, %1
  %28 = phi i1 [ false, %1 ], [ true, %5 ], [ false, %13 ], [ true, %11 ]
  ret i1 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TConstantUnion"* @_ZNK2sh16TIntermAggregate16getConstantValueEv(%"class.sh::TIntermAggregate"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.sh::TIntermAggregate"* %0 to i1 (%"class.sh::TIntermAggregate"*)***
  %3 = load i1 (%"class.sh::TIntermAggregate"*)**, i1 (%"class.sh::TIntermAggregate"*)*** %2, align 8
  %4 = getelementptr inbounds i1 (%"class.sh::TIntermAggregate"*)*, i1 (%"class.sh::TIntermAggregate"*)** %3, i64 28
  %5 = load i1 (%"class.sh::TIntermAggregate"*)*, i1 (%"class.sh::TIntermAggregate"*)** %4, align 8
  %6 = tail call zeroext i1 %5(%"class.sh::TIntermAggregate"* %0) #18
  br i1 %6, label %7, label %321

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %10 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %9, align 8
  %11 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %10, i64 31
  %12 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %11, align 8
  %13 = tail call dereferenceable(184) %"class.sh::TType"* %12(%"class.sh::TIntermTyped"* %8) #18
  %14 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %13, i64 0, i32 10, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %86, label %17

17:                                               ; preds = %7
  %18 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %19 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %18, align 8
  %20 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %19, align 8
  %21 = bitcast %"class.sh::TIntermNode"* %20 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %22 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %21, align 8
  %23 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %22, i64 4
  %24 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %23, align 8
  %25 = tail call %"class.sh::TIntermTyped"* %24(%"class.sh::TIntermNode"* %20) #18
  %26 = bitcast %"class.sh::TIntermTyped"* %25 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %27 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %26, align 8
  %28 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %27, i64 31
  %29 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %28, align 8
  %30 = tail call dereferenceable(184) %"class.sh::TType"* %29(%"class.sh::TIntermTyped"* %25) #18
  %31 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %30) #18
  %32 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %9, align 8
  %33 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %32, i64 31
  %34 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %33, align 8
  %35 = tail call dereferenceable(184) %"class.sh::TType"* %34(%"class.sh::TIntermTyped"* %8) #18
  %36 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %35, i64 0, i32 10, i32 0
  %37 = load i32*, i32** %36, align 8
  %38 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %35, i64 0, i32 10, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = add i64 %39, -1
  %41 = getelementptr inbounds i32, i32* %37, i64 %40
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = mul i64 %31, %43
  %45 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %44, i64 8)
  %46 = extractvalue { i64, i1 } %45, 1
  %47 = extractvalue { i64, i1 } %45, 0
  %48 = select i1 %46, i64 -1, i64 %47
  %49 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %50 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %49, i64 %48) #18
  %51 = bitcast i8* %50 to %"class.sh::TConstantUnion"*
  %52 = icmp eq i64 %44, 0
  br i1 %52, label %59, label %53

53:                                               ; preds = %17
  %54 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %51, i64 %44
  br label %55

55:                                               ; preds = %55, %53
  %56 = phi %"class.sh::TConstantUnion"* [ %51, %53 ], [ %57, %55 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %56) #18
  %57 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %56, i64 1
  %58 = icmp eq %"class.sh::TConstantUnion"* %57, %54
  br i1 %58, label %59, label %55

59:                                               ; preds = %55, %17
  %60 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %18, align 8
  %61 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %62 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %61, align 8
  %63 = icmp eq %"class.sh::TIntermNode"** %60, %62
  br i1 %63, label %321, label %64

64:                                               ; preds = %59
  %65 = shl i64 %31, 3
  br label %66

66:                                               ; preds = %64, %66
  %67 = phi i64 [ 0, %64 ], [ %83, %66 ]
  %68 = phi %"class.sh::TIntermNode"** [ %60, %64 ], [ %84, %66 ]
  %69 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %68, align 8
  %70 = bitcast %"class.sh::TIntermNode"* %69 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %71 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %70, align 8
  %72 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %71, i64 4
  %73 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %72, align 8
  %74 = tail call %"class.sh::TIntermTyped"* %73(%"class.sh::TIntermNode"* %69) #18
  %75 = bitcast %"class.sh::TIntermTyped"* %74 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)***
  %76 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*** %75, align 8
  %77 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %76, i64 29
  %78 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %77, align 8
  %79 = tail call %"class.sh::TConstantUnion"* %78(%"class.sh::TIntermTyped"* %74) #18
  %80 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %51, i64 %67
  %81 = bitcast %"class.sh::TConstantUnion"* %80 to i8*
  %82 = bitcast %"class.sh::TConstantUnion"* %79 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %81, i8* align 1 %82, i64 %65, i1 false)
  %83 = add i64 %67, %31
  %84 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %68, i64 1
  %85 = icmp eq %"class.sh::TIntermNode"** %84, %62
  br i1 %85, label %321, label %66

86:                                               ; preds = %7
  %87 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0
  %88 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %89 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %88, align 8
  %90 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %89, i64 31
  %91 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %90, align 8
  %92 = tail call dereferenceable(184) %"class.sh::TType"* %91(%"class.sh::TIntermExpression"* %87) #18
  %93 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %92) #18
  %94 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %93, i64 8)
  %95 = extractvalue { i64, i1 } %94, 1
  %96 = extractvalue { i64, i1 } %94, 0
  %97 = select i1 %95, i64 -1, i64 %96
  %98 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %99 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %98, i64 %97) #18
  %100 = bitcast i8* %99 to %"class.sh::TConstantUnion"*
  %101 = icmp eq i64 %93, 0
  br i1 %101, label %108, label %102

102:                                              ; preds = %86
  %103 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %100, i64 %93
  br label %104

104:                                              ; preds = %104, %102
  %105 = phi %"class.sh::TConstantUnion"* [ %100, %102 ], [ %106, %104 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %105) #18
  %106 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %105, i64 1
  %107 = icmp eq %"class.sh::TConstantUnion"* %106, %103
  br i1 %107, label %108, label %104

108:                                              ; preds = %104, %86
  %109 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %9, align 8
  %110 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %109, i64 31
  %111 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %110, align 8
  %112 = tail call dereferenceable(184) %"class.sh::TType"* %111(%"class.sh::TIntermTyped"* %8) #18
  %113 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %112, i64 0, i32 0
  %114 = load i32, i32* %113, align 8
  %115 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0
  %116 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %117 = bitcast %"class.sh::TIntermNode"*** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.std::__1::vector.9"* %115 to i64*
  %120 = load i64, i64* %119, align 8
  %121 = sub i64 %118, %120
  %122 = icmp eq i64 %121, 8
  br i1 %122, label %123, label %278

123:                                              ; preds = %108
  %124 = inttoptr i64 %120 to %"class.sh::TIntermNode"**
  %125 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %124, align 8
  %126 = bitcast %"class.sh::TIntermNode"* %125 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %127 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %126, align 8
  %128 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %127, i64 4
  %129 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %128, align 8
  %130 = tail call %"class.sh::TIntermTyped"* %129(%"class.sh::TIntermNode"* %125) #18
  %131 = bitcast %"class.sh::TIntermTyped"* %130 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)***
  %132 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*** %131, align 8
  %133 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %132, i64 29
  %134 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %133, align 8
  %135 = tail call %"class.sh::TConstantUnion"* %134(%"class.sh::TIntermTyped"* %130) #18
  %136 = bitcast %"class.sh::TIntermTyped"* %130 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %137 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %136, align 8
  %138 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %137, i64 31
  %139 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %138, align 8
  %140 = tail call dereferenceable(184) %"class.sh::TType"* %139(%"class.sh::TIntermTyped"* %130) #18
  %141 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %140) #18
  %142 = icmp eq i64 %141, 1
  %143 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %9, align 8
  %144 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %143, i64 31
  %145 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %144, align 8
  %146 = tail call dereferenceable(184) %"class.sh::TType"* %145(%"class.sh::TIntermTyped"* %8) #18
  %147 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %146, i64 0, i32 8
  %148 = load i8, i8* %147, align 8
  %149 = icmp ugt i8 %148, 1
  %150 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %146, i64 0, i32 9
  %151 = load i8, i8* %150, align 1
  %152 = icmp ugt i8 %151, 1
  %153 = and i1 %149, %152
  br i1 %142, label %154, label %201

154:                                              ; preds = %123
  br i1 %153, label %156, label %155

155:                                              ; preds = %154
  br i1 %101, label %321, label %195

156:                                              ; preds = %154
  %157 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %88, align 8
  %158 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %157, i64 31
  %159 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %158, align 8
  %160 = tail call dereferenceable(184) %"class.sh::TType"* %159(%"class.sh::TIntermExpression"* %87) #18
  %161 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %160, i64 0, i32 8
  %162 = load i8, i8* %161, align 8
  %163 = zext i8 %162 to i32
  %164 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %88, align 8
  %165 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %164, i64 31
  %166 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %165, align 8
  %167 = tail call dereferenceable(184) %"class.sh::TType"* %166(%"class.sh::TIntermExpression"* %87) #18
  %168 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %167, i64 0, i32 9
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i32
  %171 = icmp eq i8 %162, 0
  br i1 %171, label %321, label %172

172:                                              ; preds = %156
  %173 = icmp eq i8 %169, 0
  br label %174

174:                                              ; preds = %177, %172
  %175 = phi i32 [ 0, %172 ], [ %179, %177 ]
  %176 = phi i64 [ 0, %172 ], [ %178, %177 ]
  br i1 %173, label %177, label %181

177:                                              ; preds = %191, %174
  %178 = phi i64 [ %176, %174 ], [ %192, %191 ]
  %179 = add nuw nsw i32 %175, 1
  %180 = icmp eq i32 %179, %163
  br i1 %180, label %321, label %174

181:                                              ; preds = %174, %191
  %182 = phi i32 [ %193, %191 ], [ 0, %174 ]
  %183 = phi i64 [ %192, %191 ], [ %176, %174 ]
  %184 = icmp eq i32 %175, %182
  %185 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %100, i64 %183
  br i1 %184, label %186, label %188

186:                                              ; preds = %181
  %187 = tail call zeroext i1 @_ZN2sh14TConstantUnion4castENS_10TBasicTypeERKS0_(%"class.sh::TConstantUnion"* %185, i32 %114, %"class.sh::TConstantUnion"* dereferenceable(8) %135) #18
  br label %191

188:                                              ; preds = %181
  %189 = bitcast %"class.sh::TConstantUnion"* %185 to float*
  store float 0.000000e+00, float* %189, align 4
  %190 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %100, i64 %183, i32 1
  store i32 1, i32* %190, align 4
  br label %191

191:                                              ; preds = %188, %186
  %192 = add i64 %183, 1
  %193 = add nuw nsw i32 %182, 1
  %194 = icmp eq i32 %193, %170
  br i1 %194, label %177, label %181

195:                                              ; preds = %155, %195
  %196 = phi i64 [ %199, %195 ], [ 0, %155 ]
  %197 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %100, i64 %196
  %198 = tail call zeroext i1 @_ZN2sh14TConstantUnion4castENS_10TBasicTypeERKS0_(%"class.sh::TConstantUnion"* %197, i32 %114, %"class.sh::TConstantUnion"* dereferenceable(8) %135) #18
  %199 = add nuw i64 %196, 1
  %200 = icmp eq i64 %199, %93
  br i1 %200, label %321, label %195

201:                                              ; preds = %123
  br i1 %153, label %202, label %278

202:                                              ; preds = %201
  %203 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %136, align 8
  %204 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %203, i64 31
  %205 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %204, align 8
  %206 = tail call dereferenceable(184) %"class.sh::TType"* %205(%"class.sh::TIntermTyped"* %130) #18
  %207 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %206, i64 0, i32 8
  %208 = load i8, i8* %207, align 8
  %209 = icmp ugt i8 %208, 1
  %210 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %206, i64 0, i32 9
  %211 = load i8, i8* %210, align 1
  %212 = icmp ugt i8 %211, 1
  %213 = and i1 %209, %212
  br i1 %213, label %214, label %278

214:                                              ; preds = %202
  %215 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %136, align 8
  %216 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %215, i64 31
  %217 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %216, align 8
  %218 = tail call dereferenceable(184) %"class.sh::TType"* %217(%"class.sh::TIntermTyped"* %130) #18
  %219 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %218, i64 0, i32 8
  %220 = load i8, i8* %219, align 8
  %221 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %136, align 8
  %222 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %221, i64 31
  %223 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %222, align 8
  %224 = tail call dereferenceable(184) %"class.sh::TType"* %223(%"class.sh::TIntermTyped"* %130) #18
  %225 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %224, i64 0, i32 9
  %226 = load i8, i8* %225, align 1
  %227 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %88, align 8
  %228 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %227, i64 31
  %229 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %228, align 8
  %230 = tail call dereferenceable(184) %"class.sh::TType"* %229(%"class.sh::TIntermExpression"* %87) #18
  %231 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %230, i64 0, i32 8
  %232 = load i8, i8* %231, align 8
  %233 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %88, align 8
  %234 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %233, i64 31
  %235 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %234, align 8
  %236 = tail call dereferenceable(184) %"class.sh::TType"* %235(%"class.sh::TIntermExpression"* %87) #18
  %237 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %236, i64 0, i32 9
  %238 = load i8, i8* %237, align 1
  %239 = icmp eq i8 %232, 0
  br i1 %239, label %321, label %240

240:                                              ; preds = %214
  %241 = icmp eq i8 %238, 0
  %242 = zext i8 %226 to i64
  %243 = zext i8 %220 to i64
  %244 = zext i8 %232 to i64
  %245 = zext i8 %238 to i64
  br label %246

246:                                              ; preds = %252, %240
  %247 = phi i64 [ 0, %240 ], [ %254, %252 ]
  %248 = phi i64 [ 0, %240 ], [ %253, %252 ]
  br i1 %241, label %252, label %249

249:                                              ; preds = %246
  %250 = icmp ult i64 %247, %243
  %251 = mul nuw nsw i64 %247, %242
  br label %256

252:                                              ; preds = %274, %246
  %253 = phi i64 [ %248, %246 ], [ %275, %274 ]
  %254 = add nuw nsw i64 %247, 1
  %255 = icmp eq i64 %254, %244
  br i1 %255, label %321, label %246

256:                                              ; preds = %274, %249
  %257 = phi i64 [ 0, %249 ], [ %276, %274 ]
  %258 = phi i64 [ %248, %249 ], [ %275, %274 ]
  %259 = icmp ult i64 %257, %242
  %260 = and i1 %250, %259
  br i1 %260, label %261, label %266

261:                                              ; preds = %256
  %262 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %100, i64 %258
  %263 = add nuw nsw i64 %257, %251
  %264 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %135, i64 %263
  %265 = tail call zeroext i1 @_ZN2sh14TConstantUnion4castENS_10TBasicTypeERKS0_(%"class.sh::TConstantUnion"* %262, i32 %114, %"class.sh::TConstantUnion"* dereferenceable(8) %264) #18
  br label %274

266:                                              ; preds = %256
  %267 = icmp eq i64 %247, %257
  %268 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %100, i64 %258
  %269 = bitcast %"class.sh::TConstantUnion"* %268 to float*
  br i1 %267, label %270, label %272

270:                                              ; preds = %266
  store float 1.000000e+00, float* %269, align 4
  %271 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %100, i64 %258, i32 1
  store i32 1, i32* %271, align 4
  br label %274

272:                                              ; preds = %266
  store float 0.000000e+00, float* %269, align 4
  %273 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %100, i64 %258, i32 1
  store i32 1, i32* %273, align 4
  br label %274

274:                                              ; preds = %270, %272, %261
  %275 = add i64 %258, 1
  %276 = add nuw nsw i64 %257, 1
  %277 = icmp eq i64 %276, %245
  br i1 %277, label %252, label %256

278:                                              ; preds = %201, %202, %108
  %279 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %115, i64 0, i32 0, i32 0
  %280 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %279, align 8
  %281 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %116, align 8
  %282 = icmp eq %"class.sh::TIntermNode"** %280, %281
  br i1 %282, label %321, label %283

283:                                              ; preds = %278, %317
  %284 = phi i64 [ %318, %317 ], [ 0, %278 ]
  %285 = phi %"class.sh::TIntermNode"** [ %319, %317 ], [ %280, %278 ]
  %286 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %285, align 8
  %287 = bitcast %"class.sh::TIntermNode"* %286 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %288 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %287, align 8
  %289 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %288, i64 4
  %290 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %289, align 8
  %291 = tail call %"class.sh::TIntermTyped"* %290(%"class.sh::TIntermNode"* %286) #18
  %292 = bitcast %"class.sh::TIntermTyped"* %291 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %293 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %292, align 8
  %294 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %293, i64 31
  %295 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %294, align 8
  %296 = tail call dereferenceable(184) %"class.sh::TType"* %295(%"class.sh::TIntermTyped"* %291) #18
  %297 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %296) #18
  %298 = bitcast %"class.sh::TIntermTyped"* %291 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)***
  %299 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*** %298, align 8
  %300 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %299, i64 29
  %301 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %300, align 8
  %302 = tail call %"class.sh::TConstantUnion"* %301(%"class.sh::TIntermTyped"* %291) #18
  %303 = icmp ne i64 %297, 0
  %304 = icmp ult i64 %284, %93
  %305 = and i1 %304, %303
  br i1 %305, label %306, label %317

306:                                              ; preds = %283, %306
  %307 = phi i64 [ %313, %306 ], [ 0, %283 ]
  %308 = phi i64 [ %312, %306 ], [ %284, %283 ]
  %309 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %100, i64 %308
  %310 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %302, i64 %307
  %311 = tail call zeroext i1 @_ZN2sh14TConstantUnion4castENS_10TBasicTypeERKS0_(%"class.sh::TConstantUnion"* %309, i32 %114, %"class.sh::TConstantUnion"* dereferenceable(8) %310) #18
  %312 = add nuw i64 %308, 1
  %313 = add nuw i64 %307, 1
  %314 = icmp ult i64 %313, %297
  %315 = icmp ult i64 %312, %93
  %316 = and i1 %315, %314
  br i1 %316, label %306, label %317

317:                                              ; preds = %306, %283
  %318 = phi i64 [ %284, %283 ], [ %312, %306 ]
  %319 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %285, i64 1
  %320 = icmp eq %"class.sh::TIntermNode"** %319, %281
  br i1 %320, label %321, label %283

321:                                              ; preds = %66, %317, %252, %195, %177, %156, %155, %214, %59, %278, %1
  %322 = phi %"class.sh::TConstantUnion"* [ null, %1 ], [ %100, %156 ], [ %100, %155 ], [ %100, %214 ], [ %100, %278 ], [ %51, %59 ], [ %100, %177 ], [ %100, %195 ], [ %100, %252 ], [ %100, %317 ], [ %51, %66 ]
  ret %"class.sh::TConstantUnion"* %322
}

declare i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #7

declare void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh14TConstantUnion4castENS_10TBasicTypeERKS0_(%"class.sh::TConstantUnion"*, i32, %"class.sh::TConstantUnion"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2sh16TIntermAggregate14hasSideEffectsEv(%"class.sh::TIntermAggregate"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %4 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %3, align 8
  %5 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %4, i64 31
  %6 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %5, align 8
  %7 = tail call dereferenceable(184) %"class.sh::TType"* %6(%"class.sh::TIntermTyped"* %2) #18
  %8 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %7, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 2
  br i1 %10, label %51, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 1
  %13 = load i8, i8* %12, align 8
  %14 = zext i8 %13 to i32
  %15 = add nsw i32 %14, -1
  %16 = icmp ult i32 %15, 3
  br i1 %16, label %17, label %27

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 5
  %19 = load %"class.sh::TFunction"*, %"class.sh::TFunction"** %18, align 8
  %20 = icmp eq %"class.sh::TFunction"* %19, null
  br i1 %20, label %27, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %19, i64 0, i32 10
  %23 = load i8, i8* %22, align 1, !range !55
  %24 = icmp ne i8 %23, 0
  %25 = icmp eq i8 %13, -119
  %26 = or i1 %25, %24
  br i1 %26, label %29, label %51

27:                                               ; preds = %11, %17
  %28 = icmp eq i8 %13, -119
  br i1 %28, label %29, label %51

29:                                               ; preds = %27, %21
  %30 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %31 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %30, align 8
  %32 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %33 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %32, align 8
  %34 = icmp eq %"class.sh::TIntermNode"** %31, %33
  br i1 %34, label %51, label %37

35:                                               ; preds = %37
  %36 = icmp eq %"class.sh::TIntermNode"** %50, %33
  br i1 %36, label %51, label %37

37:                                               ; preds = %29, %35
  %38 = phi %"class.sh::TIntermNode"** [ %50, %35 ], [ %31, %29 ]
  %39 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %38, align 8
  %40 = bitcast %"class.sh::TIntermNode"* %39 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %41 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %40, align 8
  %42 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %41, i64 4
  %43 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %42, align 8
  %44 = tail call %"class.sh::TIntermTyped"* %43(%"class.sh::TIntermNode"* %39) #18
  %45 = bitcast %"class.sh::TIntermTyped"* %44 to i1 (%"class.sh::TIntermTyped"*)***
  %46 = load i1 (%"class.sh::TIntermTyped"*)**, i1 (%"class.sh::TIntermTyped"*)*** %45, align 8
  %47 = getelementptr inbounds i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %46, i64 30
  %48 = load i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %47, align 8
  %49 = tail call zeroext i1 %48(%"class.sh::TIntermTyped"* %44) #18
  %50 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %38, i64 1
  br i1 %49, label %51, label %35

51:                                               ; preds = %35, %37, %29, %1, %27, %21
  %52 = phi i1 [ false, %1 ], [ true, %27 ], [ true, %21 ], [ false, %29 ], [ false, %35 ], [ true, %37 ]
  ret i1 %52
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermNode"*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.sh::TIntermNode"* %1 to i64
  %4 = icmp eq %"class.sh::TIntermNode"* %1, null
  br i1 %4, label %231, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 2, i32 0
  %7 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %8 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %9 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %10 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %11 = icmp eq %"class.sh::TIntermNode"** %8, %10
  %12 = ptrtoint %"class.sh::TIntermNode"** %10 to i64
  br i1 %11, label %18, label %13

13:                                               ; preds = %5
  %14 = bitcast %"class.sh::TIntermNode"** %8 to i64*
  store i64 %3, i64* %14, align 8
  %15 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 1
  %16 = ptrtoint %"class.sh::TIntermNode"** %15 to i64
  %17 = bitcast %"class.sh::TIntermNode"*** %7 to i64*
  store i64 %16, i64* %17, align 8
  br label %231

18:                                               ; preds = %5
  %19 = ptrtoint %"class.sh::TIntermNode"** %8 to i64
  %20 = bitcast %"class.sh::TIntermNode"*** %7 to i64*
  %21 = bitcast %"class.std::__1::vector.9"* %6 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %19, %22
  %24 = ashr exact i64 %23, 3
  %25 = add nsw i64 %24, 1
  %26 = icmp ugt i64 %25, 2305843009213693951
  br i1 %26, label %27, label %29

27:                                               ; preds = %18
  %28 = bitcast %"class.std::__1::vector.9"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %28) #19
  unreachable

29:                                               ; preds = %18
  %30 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  %31 = sub i64 %12, %22
  %32 = ashr exact i64 %31, 3
  %33 = icmp ult i64 %32, 1152921504606846975
  br i1 %33, label %34, label %39

34:                                               ; preds = %29
  %35 = ashr exact i64 %31, 2
  %36 = icmp ult i64 %35, %25
  %37 = select i1 %36, i64 %25, i64 %35
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %45, label %39

39:                                               ; preds = %34, %29
  %40 = phi i64 [ %37, %34 ], [ 2305843009213693951, %29 ]
  %41 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %42 = shl i64 %40, 3
  %43 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %41, i64 %42) #18
  %44 = bitcast i8* %43 to %"class.sh::TIntermNode"**
  br label %45

45:                                               ; preds = %39, %34
  %46 = phi i64 [ %40, %39 ], [ 0, %34 ]
  %47 = phi %"class.sh::TIntermNode"** [ %44, %39 ], [ null, %34 ]
  %48 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %47, i64 %24
  %49 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %47, i64 %46
  %50 = ptrtoint %"class.sh::TIntermNode"** %49 to i64
  %51 = bitcast %"class.sh::TIntermNode"** %48 to i64*
  store i64 %3, i64* %51, align 8
  %52 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %48, i64 1
  %53 = ptrtoint %"class.sh::TIntermNode"** %52 to i64
  %54 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %6, i64 0, i32 0, i32 0
  %55 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %54, align 8
  %56 = ptrtoint %"class.sh::TIntermNode"** %55 to i64
  %57 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %58 = icmp eq %"class.sh::TIntermNode"** %57, %55
  br i1 %58, label %228, label %59

59:                                               ; preds = %45
  %60 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %57, i64 -1
  %61 = ptrtoint %"class.sh::TIntermNode"** %60 to i64
  %62 = sub i64 %61, %56
  %63 = lshr i64 %62, 3
  %64 = add nuw nsw i64 %63, 1
  %65 = icmp ult i64 %64, 4
  br i1 %65, label %158, label %66

66:                                               ; preds = %59
  %67 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %57, i64 -1
  %68 = ptrtoint %"class.sh::TIntermNode"** %67 to i64
  %69 = sub i64 %68, %56
  %70 = lshr i64 %69, 3
  %71 = xor i64 %70, -1
  %72 = add nsw i64 %24, %71
  %73 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %47, i64 %72
  %74 = xor i64 %70, -1
  %75 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %57, i64 %74
  %76 = icmp ult %"class.sh::TIntermNode"** %73, %57
  %77 = icmp ult %"class.sh::TIntermNode"** %75, %48
  %78 = and i1 %76, %77
  br i1 %78, label %158, label %79

79:                                               ; preds = %66
  %80 = and i64 %64, 4611686018427387900
  %81 = sub nsw i64 0, %80
  %82 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %48, i64 %81
  %83 = sub nsw i64 0, %80
  %84 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %57, i64 %83
  %85 = add nsw i64 %80, -4
  %86 = lshr exact i64 %85, 2
  %87 = add nuw nsw i64 %86, 1
  %88 = and i64 %87, 1
  %89 = icmp eq i64 %85, 0
  br i1 %89, label %136, label %90

90:                                               ; preds = %79
  %91 = sub nuw nsw i64 %87, %88
  %92 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %48, i64 -1
  %93 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %57, i64 -1
  %94 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %48, i64 -1
  %95 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %57, i64 -1
  br label %96

96:                                               ; preds = %96, %90
  %97 = phi i64 [ 0, %90 ], [ %131, %96 ]
  %98 = phi i64 [ %91, %90 ], [ %132, %96 ]
  %99 = sub i64 0, %97
  %100 = sub i64 0, %97
  %101 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 %99
  %102 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %93, i64 %100
  %103 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %102, i64 -1
  %104 = bitcast %"class.sh::TIntermNode"** %103 to <2 x i64>*
  %105 = load <2 x i64>, <2 x i64>* %104, align 8, !alias.scope !56
  %106 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %102, i64 -2
  %107 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %106, i64 -1
  %108 = bitcast %"class.sh::TIntermNode"** %107 to <2 x i64>*
  %109 = load <2 x i64>, <2 x i64>* %108, align 8, !alias.scope !56
  %110 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %101, i64 -1
  %111 = bitcast %"class.sh::TIntermNode"** %110 to <2 x i64>*
  store <2 x i64> %105, <2 x i64>* %111, align 8, !alias.scope !59, !noalias !56
  %112 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %101, i64 -2
  %113 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %112, i64 -1
  %114 = bitcast %"class.sh::TIntermNode"** %113 to <2 x i64>*
  store <2 x i64> %109, <2 x i64>* %114, align 8, !alias.scope !59, !noalias !56
  %115 = sub nuw nsw i64 -4, %97
  %116 = sub nuw nsw i64 -4, %97
  %117 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %94, i64 %115
  %118 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %95, i64 %116
  %119 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -1
  %120 = bitcast %"class.sh::TIntermNode"** %119 to <2 x i64>*
  %121 = load <2 x i64>, <2 x i64>* %120, align 8, !alias.scope !56
  %122 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -2
  %123 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %122, i64 -1
  %124 = bitcast %"class.sh::TIntermNode"** %123 to <2 x i64>*
  %125 = load <2 x i64>, <2 x i64>* %124, align 8, !alias.scope !56
  %126 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %117, i64 -1
  %127 = bitcast %"class.sh::TIntermNode"** %126 to <2 x i64>*
  store <2 x i64> %121, <2 x i64>* %127, align 8, !alias.scope !59, !noalias !56
  %128 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %117, i64 -2
  %129 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %128, i64 -1
  %130 = bitcast %"class.sh::TIntermNode"** %129 to <2 x i64>*
  store <2 x i64> %125, <2 x i64>* %130, align 8, !alias.scope !59, !noalias !56
  %131 = add i64 %97, 8
  %132 = add i64 %98, -2
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %96, !llvm.loop !61

134:                                              ; preds = %96
  %135 = sub nuw nsw i64 -8, %97
  br label %136

136:                                              ; preds = %134, %79
  %137 = phi i64 [ 0, %79 ], [ %135, %134 ]
  %138 = icmp eq i64 %88, 0
  br i1 %138, label %156, label %139

139:                                              ; preds = %136
  %140 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %48, i64 -1
  %141 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %57, i64 -1
  %142 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %140, i64 %137
  %143 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %141, i64 %137
  %144 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %143, i64 -1
  %145 = bitcast %"class.sh::TIntermNode"** %144 to <2 x i64>*
  %146 = load <2 x i64>, <2 x i64>* %145, align 8, !alias.scope !56
  %147 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %143, i64 -2
  %148 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %147, i64 -1
  %149 = bitcast %"class.sh::TIntermNode"** %148 to <2 x i64>*
  %150 = load <2 x i64>, <2 x i64>* %149, align 8, !alias.scope !56
  %151 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %142, i64 -1
  %152 = bitcast %"class.sh::TIntermNode"** %151 to <2 x i64>*
  store <2 x i64> %146, <2 x i64>* %152, align 8, !alias.scope !59, !noalias !56
  %153 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %142, i64 -2
  %154 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %153, i64 -1
  %155 = bitcast %"class.sh::TIntermNode"** %154 to <2 x i64>*
  store <2 x i64> %150, <2 x i64>* %155, align 8, !alias.scope !59, !noalias !56
  br label %156

156:                                              ; preds = %136, %139
  %157 = icmp eq i64 %64, %80
  br i1 %157, label %228, label %158

158:                                              ; preds = %156, %66, %59
  %159 = phi %"class.sh::TIntermNode"** [ %48, %66 ], [ %48, %59 ], [ %82, %156 ]
  %160 = phi %"class.sh::TIntermNode"** [ %57, %66 ], [ %57, %59 ], [ %84, %156 ]
  %161 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %160, i64 -1
  %162 = ptrtoint %"class.sh::TIntermNode"** %161 to i64
  %163 = sub i64 %162, %56
  %164 = lshr i64 %163, 3
  %165 = add nuw nsw i64 %164, 1
  %166 = and i64 %165, 7
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %179, label %168

168:                                              ; preds = %158, %168
  %169 = phi %"class.sh::TIntermNode"** [ %172, %168 ], [ %159, %158 ]
  %170 = phi %"class.sh::TIntermNode"** [ %173, %168 ], [ %160, %158 ]
  %171 = phi i64 [ %177, %168 ], [ %166, %158 ]
  %172 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %169, i64 -1
  %173 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %170, i64 -1
  %174 = bitcast %"class.sh::TIntermNode"** %173 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = bitcast %"class.sh::TIntermNode"** %172 to i64*
  store i64 %175, i64* %176, align 8
  %177 = add i64 %171, -1
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %179, label %168, !llvm.loop !62

179:                                              ; preds = %168, %158
  %180 = phi %"class.sh::TIntermNode"** [ undef, %158 ], [ %172, %168 ]
  %181 = phi %"class.sh::TIntermNode"** [ %159, %158 ], [ %172, %168 ]
  %182 = phi %"class.sh::TIntermNode"** [ %160, %158 ], [ %173, %168 ]
  %183 = icmp ult i64 %163, 56
  br i1 %183, label %228, label %184

184:                                              ; preds = %179, %184
  %185 = phi %"class.sh::TIntermNode"** [ %222, %184 ], [ %181, %179 ]
  %186 = phi %"class.sh::TIntermNode"** [ %223, %184 ], [ %182, %179 ]
  %187 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %185, i64 -1
  %188 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %186, i64 -1
  %189 = bitcast %"class.sh::TIntermNode"** %188 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = bitcast %"class.sh::TIntermNode"** %187 to i64*
  store i64 %190, i64* %191, align 8
  %192 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %185, i64 -2
  %193 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %186, i64 -2
  %194 = bitcast %"class.sh::TIntermNode"** %193 to i64*
  %195 = load i64, i64* %194, align 8
  %196 = bitcast %"class.sh::TIntermNode"** %192 to i64*
  store i64 %195, i64* %196, align 8
  %197 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %185, i64 -3
  %198 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %186, i64 -3
  %199 = bitcast %"class.sh::TIntermNode"** %198 to i64*
  %200 = load i64, i64* %199, align 8
  %201 = bitcast %"class.sh::TIntermNode"** %197 to i64*
  store i64 %200, i64* %201, align 8
  %202 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %185, i64 -4
  %203 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %186, i64 -4
  %204 = bitcast %"class.sh::TIntermNode"** %203 to i64*
  %205 = load i64, i64* %204, align 8
  %206 = bitcast %"class.sh::TIntermNode"** %202 to i64*
  store i64 %205, i64* %206, align 8
  %207 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %185, i64 -5
  %208 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %186, i64 -5
  %209 = bitcast %"class.sh::TIntermNode"** %208 to i64*
  %210 = load i64, i64* %209, align 8
  %211 = bitcast %"class.sh::TIntermNode"** %207 to i64*
  store i64 %210, i64* %211, align 8
  %212 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %185, i64 -6
  %213 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %186, i64 -6
  %214 = bitcast %"class.sh::TIntermNode"** %213 to i64*
  %215 = load i64, i64* %214, align 8
  %216 = bitcast %"class.sh::TIntermNode"** %212 to i64*
  store i64 %215, i64* %216, align 8
  %217 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %185, i64 -7
  %218 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %186, i64 -7
  %219 = bitcast %"class.sh::TIntermNode"** %218 to i64*
  %220 = load i64, i64* %219, align 8
  %221 = bitcast %"class.sh::TIntermNode"** %217 to i64*
  store i64 %220, i64* %221, align 8
  %222 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %185, i64 -8
  %223 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %186, i64 -8
  %224 = bitcast %"class.sh::TIntermNode"** %223 to i64*
  %225 = load i64, i64* %224, align 8
  %226 = bitcast %"class.sh::TIntermNode"** %222 to i64*
  store i64 %225, i64* %226, align 8
  %227 = icmp eq %"class.sh::TIntermNode"** %223, %55
  br i1 %227, label %228, label %184, !llvm.loop !63

228:                                              ; preds = %179, %184, %156, %45
  %229 = phi %"class.sh::TIntermNode"** [ %48, %45 ], [ %82, %156 ], [ %180, %179 ], [ %222, %184 ]
  %230 = ptrtoint %"class.sh::TIntermNode"** %229 to i64
  store i64 %230, i64* %21, align 8
  store i64 %53, i64* %20, align 8
  store i64 %50, i64* %30, align 8
  br label %231

231:                                              ; preds = %228, %13, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12TIntermBlock15insertStatementEmPNS_11TIntermNodeE(%"class.sh::TIntermBlock"*, i64, %"class.sh::TIntermNode"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TIntermNode"*, align 8
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %4, align 8
  %5 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 2, i32 0
  %6 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %5, i64 0, i32 0, i32 0
  %7 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %7, i64 %1
  %9 = call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EERS8_(%"class.std::__1::vector.9"* %5, %"class.sh::TIntermNode"** %8, %"class.sh::TIntermNode"** nonnull dereferenceable(8) %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EERS8_(%"class.std::__1::vector.9"*, %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"class.sh::TIntermNode"** %1 to i64
  %5 = bitcast %"class.sh::TIntermNode"** %1 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %0, i64 0, i32 0, i32 1
  %8 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %11 = icmp ult %"class.sh::TIntermNode"** %8, %10
  %12 = ptrtoint %"class.sh::TIntermNode"** %8 to i64
  %13 = ptrtoint %"class.sh::TIntermNode"** %10 to i64
  br i1 %11, label %14, label %172

14:                                               ; preds = %3
  %15 = icmp eq %"class.sh::TIntermNode"** %8, %1
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = bitcast %"class.sh::TIntermNode"** %2 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.sh::TIntermNode"** %1 to i64*
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 1
  %21 = ptrtoint %"class.sh::TIntermNode"** %20 to i64
  %22 = bitcast %"class.sh::TIntermNode"*** %7 to i64*
  store i64 %21, i64* %22, align 8
  br label %586

23:                                               ; preds = %14
  %24 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 1
  %25 = ptrtoint %"class.sh::TIntermNode"** %24 to i64
  %26 = sub i64 %12, %25
  %27 = ashr exact i64 %26, 3
  %28 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %27
  %29 = bitcast %"class.sh::TIntermNode"*** %7 to i64*
  %30 = icmp ult %"class.sh::TIntermNode"** %28, %8
  br i1 %30, label %31, label %144

31:                                               ; preds = %23
  %32 = sub nsw i64 0, %27
  %33 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %32
  %34 = bitcast %"class.sh::TIntermNode"** %33 to i8*
  %35 = xor i64 %4, -1
  %36 = getelementptr i8, i8* %34, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = lshr i64 %37, 3
  %39 = add nuw nsw i64 %38, 1
  %40 = icmp ult i64 %39, 4
  br i1 %40, label %41, label %44

41:                                               ; preds = %139, %44, %31
  %42 = phi %"class.sh::TIntermNode"** [ %8, %44 ], [ %8, %31 ], [ %62, %139 ]
  %43 = phi %"class.sh::TIntermNode"** [ %28, %44 ], [ %28, %31 ], [ %63, %139 ]
  br label %151

44:                                               ; preds = %31
  %45 = sub nsw i64 0, %27
  %46 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %45
  %47 = bitcast %"class.sh::TIntermNode"** %46 to i8*
  %48 = xor i64 %4, -1
  %49 = getelementptr i8, i8* %47, i64 %48
  %50 = ptrtoint i8* %49 to i64
  %51 = lshr i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %52
  %54 = add nsw i64 %27, %51
  %55 = add nsw i64 %54, 1
  %56 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %55
  %57 = icmp ult %"class.sh::TIntermNode"** %8, %56
  %58 = icmp ult %"class.sh::TIntermNode"** %28, %53
  %59 = and i1 %57, %58
  br i1 %59, label %41, label %60

60:                                               ; preds = %44
  %61 = and i64 %39, 4611686018427387900
  %62 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %61
  %63 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %61
  %64 = add nsw i64 %61, -4
  %65 = lshr exact i64 %64, 2
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 3
  %68 = icmp ult i64 %64, 12
  br i1 %68, label %120, label %69

69:                                               ; preds = %60
  %70 = sub nsw i64 %66, %67
  br label %71

71:                                               ; preds = %71, %69
  %72 = phi i64 [ 0, %69 ], [ %117, %71 ]
  %73 = phi i64 [ %70, %69 ], [ %118, %71 ]
  %74 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %72
  %75 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %72
  %76 = bitcast %"class.sh::TIntermNode"** %75 to <2 x i64>*
  %77 = load <2 x i64>, <2 x i64>* %76, align 8, !alias.scope !64
  %78 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 2
  %79 = bitcast %"class.sh::TIntermNode"** %78 to <2 x i64>*
  %80 = load <2 x i64>, <2 x i64>* %79, align 8, !alias.scope !64
  %81 = bitcast %"class.sh::TIntermNode"** %74 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %81, align 8, !alias.scope !67, !noalias !64
  %82 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 2
  %83 = bitcast %"class.sh::TIntermNode"** %82 to <2 x i64>*
  store <2 x i64> %80, <2 x i64>* %83, align 8, !alias.scope !67, !noalias !64
  %84 = or i64 %72, 4
  %85 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %84
  %86 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %84
  %87 = bitcast %"class.sh::TIntermNode"** %86 to <2 x i64>*
  %88 = load <2 x i64>, <2 x i64>* %87, align 8, !alias.scope !64
  %89 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %86, i64 2
  %90 = bitcast %"class.sh::TIntermNode"** %89 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 8, !alias.scope !64
  %92 = bitcast %"class.sh::TIntermNode"** %85 to <2 x i64>*
  store <2 x i64> %88, <2 x i64>* %92, align 8, !alias.scope !67, !noalias !64
  %93 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %85, i64 2
  %94 = bitcast %"class.sh::TIntermNode"** %93 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %94, align 8, !alias.scope !67, !noalias !64
  %95 = or i64 %72, 8
  %96 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %95
  %97 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %95
  %98 = bitcast %"class.sh::TIntermNode"** %97 to <2 x i64>*
  %99 = load <2 x i64>, <2 x i64>* %98, align 8, !alias.scope !64
  %100 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %97, i64 2
  %101 = bitcast %"class.sh::TIntermNode"** %100 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8, !alias.scope !64
  %103 = bitcast %"class.sh::TIntermNode"** %96 to <2 x i64>*
  store <2 x i64> %99, <2 x i64>* %103, align 8, !alias.scope !67, !noalias !64
  %104 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %96, i64 2
  %105 = bitcast %"class.sh::TIntermNode"** %104 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %105, align 8, !alias.scope !67, !noalias !64
  %106 = or i64 %72, 12
  %107 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %106
  %108 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %106
  %109 = bitcast %"class.sh::TIntermNode"** %108 to <2 x i64>*
  %110 = load <2 x i64>, <2 x i64>* %109, align 8, !alias.scope !64
  %111 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %108, i64 2
  %112 = bitcast %"class.sh::TIntermNode"** %111 to <2 x i64>*
  %113 = load <2 x i64>, <2 x i64>* %112, align 8, !alias.scope !64
  %114 = bitcast %"class.sh::TIntermNode"** %107 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %114, align 8, !alias.scope !67, !noalias !64
  %115 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %107, i64 2
  %116 = bitcast %"class.sh::TIntermNode"** %115 to <2 x i64>*
  store <2 x i64> %113, <2 x i64>* %116, align 8, !alias.scope !67, !noalias !64
  %117 = add i64 %72, 16
  %118 = add i64 %73, -4
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %71, !llvm.loop !69

120:                                              ; preds = %71, %60
  %121 = phi i64 [ 0, %60 ], [ %117, %71 ]
  %122 = icmp eq i64 %67, 0
  br i1 %122, label %139, label %123

123:                                              ; preds = %120, %123
  %124 = phi i64 [ %136, %123 ], [ %121, %120 ]
  %125 = phi i64 [ %137, %123 ], [ %67, %120 ]
  %126 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %124
  %127 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %124
  %128 = bitcast %"class.sh::TIntermNode"** %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 8, !alias.scope !64
  %130 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %127, i64 2
  %131 = bitcast %"class.sh::TIntermNode"** %130 to <2 x i64>*
  %132 = load <2 x i64>, <2 x i64>* %131, align 8, !alias.scope !64
  %133 = bitcast %"class.sh::TIntermNode"** %126 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %133, align 8, !alias.scope !67, !noalias !64
  %134 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %126, i64 2
  %135 = bitcast %"class.sh::TIntermNode"** %134 to <2 x i64>*
  store <2 x i64> %132, <2 x i64>* %135, align 8, !alias.scope !67, !noalias !64
  %136 = add i64 %124, 4
  %137 = add i64 %125, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %123, !llvm.loop !70

139:                                              ; preds = %123, %120
  %140 = icmp eq i64 %39, %61
  br i1 %140, label %141, label %41

141:                                              ; preds = %151, %139
  %142 = phi %"class.sh::TIntermNode"** [ %62, %139 ], [ %158, %151 ]
  %143 = ptrtoint %"class.sh::TIntermNode"** %142 to i64
  br label %144

144:                                              ; preds = %141, %23
  %145 = phi i64 [ %143, %141 ], [ %12, %23 ]
  store i64 %145, i64* %29, align 8
  %146 = icmp eq i64 %26, 0
  br i1 %146, label %160, label %147

147:                                              ; preds = %144
  %148 = sub nsw i64 0, %27
  %149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %148
  %150 = bitcast %"class.sh::TIntermNode"** %149 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %5, i64 %26, i1 false) #18
  br label %160

151:                                              ; preds = %41, %151
  %152 = phi %"class.sh::TIntermNode"** [ %158, %151 ], [ %42, %41 ]
  %153 = phi %"class.sh::TIntermNode"** [ %157, %151 ], [ %43, %41 ]
  %154 = bitcast %"class.sh::TIntermNode"** %153 to i64*
  %155 = load i64, i64* %154, align 8
  %156 = bitcast %"class.sh::TIntermNode"** %152 to i64*
  store i64 %155, i64* %156, align 8
  %157 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %153, i64 1
  %158 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %152, i64 1
  %159 = icmp ult %"class.sh::TIntermNode"** %157, %8
  br i1 %159, label %151, label %141, !llvm.loop !71

160:                                              ; preds = %144, %147
  %161 = icmp ugt %"class.sh::TIntermNode"** %1, %2
  br i1 %161, label %167, label %162

162:                                              ; preds = %160
  %163 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %164 = icmp ugt %"class.sh::TIntermNode"** %163, %2
  %165 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 1
  %166 = select i1 %164, %"class.sh::TIntermNode"** %165, %"class.sh::TIntermNode"** %2
  br label %167

167:                                              ; preds = %162, %160
  %168 = phi %"class.sh::TIntermNode"** [ %2, %160 ], [ %166, %162 ]
  %169 = bitcast %"class.sh::TIntermNode"** %168 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = bitcast %"class.sh::TIntermNode"** %1 to i64*
  store i64 %170, i64* %171, align 8
  br label %586

172:                                              ; preds = %3
  %173 = bitcast %"class.sh::TIntermNode"*** %7 to i64*
  %174 = bitcast %"class.std::__1::vector.9"* %0 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = sub i64 %12, %175
  %177 = ashr exact i64 %176, 3
  %178 = add nsw i64 %177, 1
  %179 = icmp ugt i64 %178, 2305843009213693951
  br i1 %179, label %180, label %182

180:                                              ; preds = %172
  %181 = bitcast %"class.std::__1::vector.9"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %181) #19
  unreachable

182:                                              ; preds = %172
  %183 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  %184 = sub i64 %13, %175
  %185 = ashr exact i64 %184, 3
  %186 = icmp ult i64 %185, 1152921504606846975
  br i1 %186, label %190, label %187

187:                                              ; preds = %182
  %188 = sub i64 %4, %175
  %189 = ashr exact i64 %188, 3
  br label %197

190:                                              ; preds = %182
  %191 = ashr exact i64 %184, 2
  %192 = icmp ult i64 %191, %178
  %193 = select i1 %192, i64 %178, i64 %191
  %194 = sub i64 %4, %175
  %195 = ashr exact i64 %194, 3
  %196 = icmp eq i64 %193, 0
  br i1 %196, label %204, label %197

197:                                              ; preds = %187, %190
  %198 = phi i64 [ %189, %187 ], [ %195, %190 ]
  %199 = phi i64 [ 2305843009213693951, %187 ], [ %193, %190 ]
  %200 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %201 = shl i64 %199, 3
  %202 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %200, i64 %201) #18
  %203 = bitcast i8* %202 to %"class.sh::TIntermNode"**
  br label %204

204:                                              ; preds = %190, %197
  %205 = phi i64 [ %198, %197 ], [ %195, %190 ]
  %206 = phi i64 [ %199, %197 ], [ 0, %190 ]
  %207 = phi %"class.sh::TIntermNode"** [ %203, %197 ], [ null, %190 ]
  %208 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 %205
  %209 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 %206
  %210 = ptrtoint %"class.sh::TIntermNode"** %209 to i64
  %211 = icmp eq i64 %205, %206
  br i1 %211, label %212, label %230

212:                                              ; preds = %204
  %213 = icmp sgt i64 %205, 0
  br i1 %213, label %214, label %218

214:                                              ; preds = %212
  %215 = add nuw nsw i64 %205, 1
  %216 = sdiv i64 %215, -2
  %217 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %208, i64 %216
  br label %230

218:                                              ; preds = %212
  %219 = shl nsw i64 %205, 1
  %220 = icmp eq i64 %205, 0
  %221 = select i1 %220, i64 1, i64 %219
  %222 = lshr i64 %221, 2
  %223 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %224 = shl i64 %221, 3
  %225 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %223, i64 %224) #18
  %226 = bitcast i8* %225 to %"class.sh::TIntermNode"**
  %227 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %226, i64 %222
  %228 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %226, i64 %221
  %229 = ptrtoint %"class.sh::TIntermNode"** %228 to i64
  br label %230

230:                                              ; preds = %204, %214, %218
  %231 = phi %"class.sh::TIntermNode"** [ %217, %214 ], [ %227, %218 ], [ %208, %204 ]
  %232 = phi i64 [ %210, %214 ], [ %229, %218 ], [ %210, %204 ]
  %233 = bitcast %"class.sh::TIntermNode"** %231 to i64*
  %234 = bitcast %"class.sh::TIntermNode"** %2 to i64*
  %235 = load i64, i64* %234, align 8
  store i64 %235, i64* %233, align 8
  %236 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %231, i64 1
  %237 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %6, align 8
  %238 = ptrtoint %"class.sh::TIntermNode"** %237 to i64
  %239 = icmp eq %"class.sh::TIntermNode"** %237, %1
  br i1 %239, label %407, label %240

240:                                              ; preds = %230
  %241 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %242 = ptrtoint %"class.sh::TIntermNode"** %241 to i64
  %243 = sub i64 %242, %238
  %244 = lshr i64 %243, 3
  %245 = add nuw nsw i64 %244, 1
  %246 = icmp ult i64 %245, 4
  br i1 %246, label %337, label %247

247:                                              ; preds = %240
  %248 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %249 = ptrtoint %"class.sh::TIntermNode"** %248 to i64
  %250 = sub i64 %249, %238
  %251 = lshr i64 %250, 3
  %252 = xor i64 %251, -1
  %253 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %231, i64 %252
  %254 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %252
  %255 = icmp ult %"class.sh::TIntermNode"** %253, %1
  %256 = icmp ult %"class.sh::TIntermNode"** %254, %231
  %257 = and i1 %255, %256
  br i1 %257, label %337, label %258

258:                                              ; preds = %247
  %259 = and i64 %245, 4611686018427387900
  %260 = sub nsw i64 0, %259
  %261 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %231, i64 %260
  %262 = sub nsw i64 0, %259
  %263 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %262
  %264 = add nsw i64 %259, -4
  %265 = lshr exact i64 %264, 2
  %266 = add nuw nsw i64 %265, 1
  %267 = and i64 %266, 1
  %268 = icmp eq i64 %264, 0
  br i1 %268, label %313, label %269

269:                                              ; preds = %258
  %270 = sub nuw nsw i64 %266, %267
  %271 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %231, i64 -1
  %272 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %273 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %231, i64 -1
  %274 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  br label %275

275:                                              ; preds = %275, %269
  %276 = phi i64 [ 0, %269 ], [ %310, %275 ]
  %277 = phi i64 [ %270, %269 ], [ %311, %275 ]
  %278 = sub i64 0, %276
  %279 = sub i64 0, %276
  %280 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %271, i64 %278
  %281 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %272, i64 %279
  %282 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %281, i64 -1
  %283 = bitcast %"class.sh::TIntermNode"** %282 to <2 x i64>*
  %284 = load <2 x i64>, <2 x i64>* %283, align 8, !alias.scope !72
  %285 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %281, i64 -2
  %286 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %285, i64 -1
  %287 = bitcast %"class.sh::TIntermNode"** %286 to <2 x i64>*
  %288 = load <2 x i64>, <2 x i64>* %287, align 8, !alias.scope !72
  %289 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %280, i64 -1
  %290 = bitcast %"class.sh::TIntermNode"** %289 to <2 x i64>*
  store <2 x i64> %284, <2 x i64>* %290, align 8, !alias.scope !75, !noalias !72
  %291 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %280, i64 -2
  %292 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %291, i64 -1
  %293 = bitcast %"class.sh::TIntermNode"** %292 to <2 x i64>*
  store <2 x i64> %288, <2 x i64>* %293, align 8, !alias.scope !75, !noalias !72
  %294 = sub nuw nsw i64 -4, %276
  %295 = sub nuw nsw i64 -4, %276
  %296 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %273, i64 %294
  %297 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %274, i64 %295
  %298 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %297, i64 -1
  %299 = bitcast %"class.sh::TIntermNode"** %298 to <2 x i64>*
  %300 = load <2 x i64>, <2 x i64>* %299, align 8, !alias.scope !72
  %301 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %297, i64 -2
  %302 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %301, i64 -1
  %303 = bitcast %"class.sh::TIntermNode"** %302 to <2 x i64>*
  %304 = load <2 x i64>, <2 x i64>* %303, align 8, !alias.scope !72
  %305 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %296, i64 -1
  %306 = bitcast %"class.sh::TIntermNode"** %305 to <2 x i64>*
  store <2 x i64> %300, <2 x i64>* %306, align 8, !alias.scope !75, !noalias !72
  %307 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %296, i64 -2
  %308 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %307, i64 -1
  %309 = bitcast %"class.sh::TIntermNode"** %308 to <2 x i64>*
  store <2 x i64> %304, <2 x i64>* %309, align 8, !alias.scope !75, !noalias !72
  %310 = add i64 %276, 8
  %311 = add i64 %277, -2
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %313, label %275, !llvm.loop !77

313:                                              ; preds = %275, %258
  %314 = phi i64 [ 0, %258 ], [ %310, %275 ]
  %315 = icmp eq i64 %267, 0
  br i1 %315, label %335, label %316

316:                                              ; preds = %313
  %317 = sub i64 0, %314
  %318 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %231, i64 -1
  %319 = sub i64 0, %314
  %320 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %321 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %318, i64 %317
  %322 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %320, i64 %319
  %323 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %322, i64 -1
  %324 = bitcast %"class.sh::TIntermNode"** %323 to <2 x i64>*
  %325 = load <2 x i64>, <2 x i64>* %324, align 8, !alias.scope !72
  %326 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %322, i64 -2
  %327 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %326, i64 -1
  %328 = bitcast %"class.sh::TIntermNode"** %327 to <2 x i64>*
  %329 = load <2 x i64>, <2 x i64>* %328, align 8, !alias.scope !72
  %330 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %321, i64 -1
  %331 = bitcast %"class.sh::TIntermNode"** %330 to <2 x i64>*
  store <2 x i64> %325, <2 x i64>* %331, align 8, !alias.scope !75, !noalias !72
  %332 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %321, i64 -2
  %333 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %332, i64 -1
  %334 = bitcast %"class.sh::TIntermNode"** %333 to <2 x i64>*
  store <2 x i64> %329, <2 x i64>* %334, align 8, !alias.scope !75, !noalias !72
  br label %335

335:                                              ; preds = %313, %316
  %336 = icmp eq i64 %245, %259
  br i1 %336, label %407, label %337

337:                                              ; preds = %335, %247, %240
  %338 = phi %"class.sh::TIntermNode"** [ %231, %247 ], [ %231, %240 ], [ %261, %335 ]
  %339 = phi %"class.sh::TIntermNode"** [ %1, %247 ], [ %1, %240 ], [ %263, %335 ]
  %340 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %339, i64 -1
  %341 = ptrtoint %"class.sh::TIntermNode"** %340 to i64
  %342 = sub i64 %341, %238
  %343 = lshr i64 %342, 3
  %344 = add nuw nsw i64 %343, 1
  %345 = and i64 %344, 7
  %346 = icmp eq i64 %345, 0
  br i1 %346, label %358, label %347

347:                                              ; preds = %337, %347
  %348 = phi %"class.sh::TIntermNode"** [ %351, %347 ], [ %338, %337 ]
  %349 = phi %"class.sh::TIntermNode"** [ %352, %347 ], [ %339, %337 ]
  %350 = phi i64 [ %356, %347 ], [ %345, %337 ]
  %351 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %348, i64 -1
  %352 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %349, i64 -1
  %353 = bitcast %"class.sh::TIntermNode"** %352 to i64*
  %354 = load i64, i64* %353, align 8
  %355 = bitcast %"class.sh::TIntermNode"** %351 to i64*
  store i64 %354, i64* %355, align 8
  %356 = add i64 %350, -1
  %357 = icmp eq i64 %356, 0
  br i1 %357, label %358, label %347, !llvm.loop !78

358:                                              ; preds = %347, %337
  %359 = phi %"class.sh::TIntermNode"** [ undef, %337 ], [ %351, %347 ]
  %360 = phi %"class.sh::TIntermNode"** [ %338, %337 ], [ %351, %347 ]
  %361 = phi %"class.sh::TIntermNode"** [ %339, %337 ], [ %352, %347 ]
  %362 = icmp ult i64 %342, 56
  br i1 %362, label %407, label %363

363:                                              ; preds = %358, %363
  %364 = phi %"class.sh::TIntermNode"** [ %401, %363 ], [ %360, %358 ]
  %365 = phi %"class.sh::TIntermNode"** [ %402, %363 ], [ %361, %358 ]
  %366 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %364, i64 -1
  %367 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %365, i64 -1
  %368 = bitcast %"class.sh::TIntermNode"** %367 to i64*
  %369 = load i64, i64* %368, align 8
  %370 = bitcast %"class.sh::TIntermNode"** %366 to i64*
  store i64 %369, i64* %370, align 8
  %371 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %364, i64 -2
  %372 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %365, i64 -2
  %373 = bitcast %"class.sh::TIntermNode"** %372 to i64*
  %374 = load i64, i64* %373, align 8
  %375 = bitcast %"class.sh::TIntermNode"** %371 to i64*
  store i64 %374, i64* %375, align 8
  %376 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %364, i64 -3
  %377 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %365, i64 -3
  %378 = bitcast %"class.sh::TIntermNode"** %377 to i64*
  %379 = load i64, i64* %378, align 8
  %380 = bitcast %"class.sh::TIntermNode"** %376 to i64*
  store i64 %379, i64* %380, align 8
  %381 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %364, i64 -4
  %382 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %365, i64 -4
  %383 = bitcast %"class.sh::TIntermNode"** %382 to i64*
  %384 = load i64, i64* %383, align 8
  %385 = bitcast %"class.sh::TIntermNode"** %381 to i64*
  store i64 %384, i64* %385, align 8
  %386 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %364, i64 -5
  %387 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %365, i64 -5
  %388 = bitcast %"class.sh::TIntermNode"** %387 to i64*
  %389 = load i64, i64* %388, align 8
  %390 = bitcast %"class.sh::TIntermNode"** %386 to i64*
  store i64 %389, i64* %390, align 8
  %391 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %364, i64 -6
  %392 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %365, i64 -6
  %393 = bitcast %"class.sh::TIntermNode"** %392 to i64*
  %394 = load i64, i64* %393, align 8
  %395 = bitcast %"class.sh::TIntermNode"** %391 to i64*
  store i64 %394, i64* %395, align 8
  %396 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %364, i64 -7
  %397 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %365, i64 -7
  %398 = bitcast %"class.sh::TIntermNode"** %397 to i64*
  %399 = load i64, i64* %398, align 8
  %400 = bitcast %"class.sh::TIntermNode"** %396 to i64*
  store i64 %399, i64* %400, align 8
  %401 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %364, i64 -8
  %402 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %365, i64 -8
  %403 = bitcast %"class.sh::TIntermNode"** %402 to i64*
  %404 = load i64, i64* %403, align 8
  %405 = bitcast %"class.sh::TIntermNode"** %401 to i64*
  store i64 %404, i64* %405, align 8
  %406 = icmp eq %"class.sh::TIntermNode"** %402, %237
  br i1 %406, label %407, label %363, !llvm.loop !79

407:                                              ; preds = %358, %363, %335, %230
  %408 = phi %"class.sh::TIntermNode"** [ %231, %230 ], [ %261, %335 ], [ %359, %358 ], [ %401, %363 ]
  %409 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %410 = icmp eq %"class.sh::TIntermNode"** %409, %1
  br i1 %410, label %582, label %411

411:                                              ; preds = %407
  %412 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 -1
  %413 = ptrtoint %"class.sh::TIntermNode"** %412 to i64
  %414 = sub i64 %413, %4
  %415 = lshr i64 %414, 3
  %416 = add nuw nsw i64 %415, 1
  %417 = icmp ult i64 %416, 4
  br i1 %417, label %511, label %418

418:                                              ; preds = %411
  %419 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 -1
  %420 = ptrtoint %"class.sh::TIntermNode"** %419 to i64
  %421 = sub i64 %420, %4
  %422 = lshr i64 %421, 3
  %423 = add nuw nsw i64 %422, 2
  %424 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %231, i64 %423
  %425 = add nuw nsw i64 %422, 1
  %426 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %425
  %427 = icmp ult %"class.sh::TIntermNode"** %236, %426
  %428 = icmp ugt %"class.sh::TIntermNode"** %424, %1
  %429 = and i1 %427, %428
  br i1 %429, label %511, label %430

430:                                              ; preds = %418
  %431 = and i64 %416, 4611686018427387900
  %432 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %236, i64 %431
  %433 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %431
  %434 = add nsw i64 %431, -4
  %435 = lshr exact i64 %434, 2
  %436 = add nuw nsw i64 %435, 1
  %437 = and i64 %436, 3
  %438 = icmp ult i64 %434, 12
  br i1 %438, label %490, label %439

439:                                              ; preds = %430
  %440 = sub nsw i64 %436, %437
  br label %441

441:                                              ; preds = %441, %439
  %442 = phi i64 [ 0, %439 ], [ %487, %441 ]
  %443 = phi i64 [ %440, %439 ], [ %488, %441 ]
  %444 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %236, i64 %442
  %445 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %442
  %446 = bitcast %"class.sh::TIntermNode"** %445 to <2 x i64>*
  %447 = load <2 x i64>, <2 x i64>* %446, align 8, !alias.scope !80
  %448 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %445, i64 2
  %449 = bitcast %"class.sh::TIntermNode"** %448 to <2 x i64>*
  %450 = load <2 x i64>, <2 x i64>* %449, align 8, !alias.scope !80
  %451 = bitcast %"class.sh::TIntermNode"** %444 to <2 x i64>*
  store <2 x i64> %447, <2 x i64>* %451, align 8, !alias.scope !83, !noalias !80
  %452 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %444, i64 2
  %453 = bitcast %"class.sh::TIntermNode"** %452 to <2 x i64>*
  store <2 x i64> %450, <2 x i64>* %453, align 8, !alias.scope !83, !noalias !80
  %454 = or i64 %442, 4
  %455 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %236, i64 %454
  %456 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %454
  %457 = bitcast %"class.sh::TIntermNode"** %456 to <2 x i64>*
  %458 = load <2 x i64>, <2 x i64>* %457, align 8, !alias.scope !80
  %459 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %456, i64 2
  %460 = bitcast %"class.sh::TIntermNode"** %459 to <2 x i64>*
  %461 = load <2 x i64>, <2 x i64>* %460, align 8, !alias.scope !80
  %462 = bitcast %"class.sh::TIntermNode"** %455 to <2 x i64>*
  store <2 x i64> %458, <2 x i64>* %462, align 8, !alias.scope !83, !noalias !80
  %463 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %455, i64 2
  %464 = bitcast %"class.sh::TIntermNode"** %463 to <2 x i64>*
  store <2 x i64> %461, <2 x i64>* %464, align 8, !alias.scope !83, !noalias !80
  %465 = or i64 %442, 8
  %466 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %236, i64 %465
  %467 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %465
  %468 = bitcast %"class.sh::TIntermNode"** %467 to <2 x i64>*
  %469 = load <2 x i64>, <2 x i64>* %468, align 8, !alias.scope !80
  %470 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %467, i64 2
  %471 = bitcast %"class.sh::TIntermNode"** %470 to <2 x i64>*
  %472 = load <2 x i64>, <2 x i64>* %471, align 8, !alias.scope !80
  %473 = bitcast %"class.sh::TIntermNode"** %466 to <2 x i64>*
  store <2 x i64> %469, <2 x i64>* %473, align 8, !alias.scope !83, !noalias !80
  %474 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %466, i64 2
  %475 = bitcast %"class.sh::TIntermNode"** %474 to <2 x i64>*
  store <2 x i64> %472, <2 x i64>* %475, align 8, !alias.scope !83, !noalias !80
  %476 = or i64 %442, 12
  %477 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %236, i64 %476
  %478 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %476
  %479 = bitcast %"class.sh::TIntermNode"** %478 to <2 x i64>*
  %480 = load <2 x i64>, <2 x i64>* %479, align 8, !alias.scope !80
  %481 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %478, i64 2
  %482 = bitcast %"class.sh::TIntermNode"** %481 to <2 x i64>*
  %483 = load <2 x i64>, <2 x i64>* %482, align 8, !alias.scope !80
  %484 = bitcast %"class.sh::TIntermNode"** %477 to <2 x i64>*
  store <2 x i64> %480, <2 x i64>* %484, align 8, !alias.scope !83, !noalias !80
  %485 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %477, i64 2
  %486 = bitcast %"class.sh::TIntermNode"** %485 to <2 x i64>*
  store <2 x i64> %483, <2 x i64>* %486, align 8, !alias.scope !83, !noalias !80
  %487 = add i64 %442, 16
  %488 = add i64 %443, -4
  %489 = icmp eq i64 %488, 0
  br i1 %489, label %490, label %441, !llvm.loop !85

490:                                              ; preds = %441, %430
  %491 = phi i64 [ 0, %430 ], [ %487, %441 ]
  %492 = icmp eq i64 %437, 0
  br i1 %492, label %509, label %493

493:                                              ; preds = %490, %493
  %494 = phi i64 [ %506, %493 ], [ %491, %490 ]
  %495 = phi i64 [ %507, %493 ], [ %437, %490 ]
  %496 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %236, i64 %494
  %497 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %494
  %498 = bitcast %"class.sh::TIntermNode"** %497 to <2 x i64>*
  %499 = load <2 x i64>, <2 x i64>* %498, align 8, !alias.scope !80
  %500 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %497, i64 2
  %501 = bitcast %"class.sh::TIntermNode"** %500 to <2 x i64>*
  %502 = load <2 x i64>, <2 x i64>* %501, align 8, !alias.scope !80
  %503 = bitcast %"class.sh::TIntermNode"** %496 to <2 x i64>*
  store <2 x i64> %499, <2 x i64>* %503, align 8, !alias.scope !83, !noalias !80
  %504 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %496, i64 2
  %505 = bitcast %"class.sh::TIntermNode"** %504 to <2 x i64>*
  store <2 x i64> %502, <2 x i64>* %505, align 8, !alias.scope !83, !noalias !80
  %506 = add i64 %494, 4
  %507 = add i64 %495, -1
  %508 = icmp eq i64 %507, 0
  br i1 %508, label %509, label %493, !llvm.loop !86

509:                                              ; preds = %493, %490
  %510 = icmp eq i64 %416, %431
  br i1 %510, label %582, label %511

511:                                              ; preds = %509, %418, %411
  %512 = phi %"class.sh::TIntermNode"** [ %236, %418 ], [ %236, %411 ], [ %432, %509 ]
  %513 = phi %"class.sh::TIntermNode"** [ %1, %418 ], [ %1, %411 ], [ %433, %509 ]
  %514 = ptrtoint %"class.sh::TIntermNode"** %513 to i64
  %515 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 -1
  %516 = ptrtoint %"class.sh::TIntermNode"** %515 to i64
  %517 = sub i64 %516, %514
  %518 = lshr i64 %517, 3
  %519 = add nuw nsw i64 %518, 1
  %520 = and i64 %519, 7
  %521 = icmp eq i64 %520, 0
  br i1 %521, label %533, label %522

522:                                              ; preds = %511, %522
  %523 = phi %"class.sh::TIntermNode"** [ %530, %522 ], [ %512, %511 ]
  %524 = phi %"class.sh::TIntermNode"** [ %529, %522 ], [ %513, %511 ]
  %525 = phi i64 [ %531, %522 ], [ %520, %511 ]
  %526 = bitcast %"class.sh::TIntermNode"** %523 to i64*
  %527 = bitcast %"class.sh::TIntermNode"** %524 to i64*
  %528 = load i64, i64* %527, align 8
  store i64 %528, i64* %526, align 8
  %529 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %524, i64 1
  %530 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %523, i64 1
  %531 = add i64 %525, -1
  %532 = icmp eq i64 %531, 0
  br i1 %532, label %533, label %522, !llvm.loop !87

533:                                              ; preds = %522, %511
  %534 = phi %"class.sh::TIntermNode"** [ undef, %511 ], [ %530, %522 ]
  %535 = phi %"class.sh::TIntermNode"** [ %512, %511 ], [ %530, %522 ]
  %536 = phi %"class.sh::TIntermNode"** [ %513, %511 ], [ %529, %522 ]
  %537 = icmp ult i64 %517, 56
  br i1 %537, label %582, label %538

538:                                              ; preds = %533, %538
  %539 = phi %"class.sh::TIntermNode"** [ %580, %538 ], [ %535, %533 ]
  %540 = phi %"class.sh::TIntermNode"** [ %579, %538 ], [ %536, %533 ]
  %541 = bitcast %"class.sh::TIntermNode"** %539 to i64*
  %542 = bitcast %"class.sh::TIntermNode"** %540 to i64*
  %543 = load i64, i64* %542, align 8
  store i64 %543, i64* %541, align 8
  %544 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %540, i64 1
  %545 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %539, i64 1
  %546 = bitcast %"class.sh::TIntermNode"** %545 to i64*
  %547 = bitcast %"class.sh::TIntermNode"** %544 to i64*
  %548 = load i64, i64* %547, align 8
  store i64 %548, i64* %546, align 8
  %549 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %540, i64 2
  %550 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %539, i64 2
  %551 = bitcast %"class.sh::TIntermNode"** %550 to i64*
  %552 = bitcast %"class.sh::TIntermNode"** %549 to i64*
  %553 = load i64, i64* %552, align 8
  store i64 %553, i64* %551, align 8
  %554 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %540, i64 3
  %555 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %539, i64 3
  %556 = bitcast %"class.sh::TIntermNode"** %555 to i64*
  %557 = bitcast %"class.sh::TIntermNode"** %554 to i64*
  %558 = load i64, i64* %557, align 8
  store i64 %558, i64* %556, align 8
  %559 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %540, i64 4
  %560 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %539, i64 4
  %561 = bitcast %"class.sh::TIntermNode"** %560 to i64*
  %562 = bitcast %"class.sh::TIntermNode"** %559 to i64*
  %563 = load i64, i64* %562, align 8
  store i64 %563, i64* %561, align 8
  %564 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %540, i64 5
  %565 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %539, i64 5
  %566 = bitcast %"class.sh::TIntermNode"** %565 to i64*
  %567 = bitcast %"class.sh::TIntermNode"** %564 to i64*
  %568 = load i64, i64* %567, align 8
  store i64 %568, i64* %566, align 8
  %569 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %540, i64 6
  %570 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %539, i64 6
  %571 = bitcast %"class.sh::TIntermNode"** %570 to i64*
  %572 = bitcast %"class.sh::TIntermNode"** %569 to i64*
  %573 = load i64, i64* %572, align 8
  store i64 %573, i64* %571, align 8
  %574 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %540, i64 7
  %575 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %539, i64 7
  %576 = bitcast %"class.sh::TIntermNode"** %575 to i64*
  %577 = bitcast %"class.sh::TIntermNode"** %574 to i64*
  %578 = load i64, i64* %577, align 8
  store i64 %578, i64* %576, align 8
  %579 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %540, i64 8
  %580 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %539, i64 8
  %581 = icmp eq %"class.sh::TIntermNode"** %579, %409
  br i1 %581, label %582, label %538, !llvm.loop !88

582:                                              ; preds = %533, %538, %509, %407
  %583 = phi %"class.sh::TIntermNode"** [ %236, %407 ], [ %432, %509 ], [ %534, %533 ], [ %580, %538 ]
  %584 = ptrtoint %"class.sh::TIntermNode"** %408 to i64
  %585 = ptrtoint %"class.sh::TIntermNode"** %583 to i64
  store i64 %584, i64* %174, align 8
  store i64 %585, i64* %173, align 8
  store i64 %232, i64* %183, align 8
  ret %"class.sh::TIntermNode"** %231

586:                                              ; preds = %16, %167
  ret %"class.sh::TIntermNode"** %1
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %0, i64 0, i32 2, i32 0
  %4 = ptrtoint %"class.sh::TIntermTyped"* %1 to i64
  %5 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %6 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %8 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %9 = icmp ult %"class.sh::TIntermNode"** %6, %8
  %10 = ptrtoint %"class.sh::TIntermNode"** %8 to i64
  br i1 %9, label %11, label %16

11:                                               ; preds = %2
  %12 = bitcast %"class.sh::TIntermNode"** %6 to i64*
  store i64 %4, i64* %12, align 8
  %13 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %6, i64 1
  %14 = ptrtoint %"class.sh::TIntermNode"** %13 to i64
  %15 = bitcast %"class.sh::TIntermNode"*** %5 to i64*
  store i64 %14, i64* %15, align 8
  br label %229

16:                                               ; preds = %2
  %17 = ptrtoint %"class.sh::TIntermNode"** %6 to i64
  %18 = bitcast %"class.sh::TIntermNode"*** %5 to i64*
  %19 = bitcast %"class.std::__1::vector.9"* %3 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 3
  %23 = add nsw i64 %22, 1
  %24 = icmp ugt i64 %23, 2305843009213693951
  br i1 %24, label %25, label %27

25:                                               ; preds = %16
  %26 = bitcast %"class.std::__1::vector.9"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %26) #19
  unreachable

27:                                               ; preds = %16
  %28 = bitcast %"class.sh::TIntermNode"*** %7 to i64*
  %29 = sub i64 %10, %20
  %30 = ashr exact i64 %29, 3
  %31 = icmp ult i64 %30, 1152921504606846975
  br i1 %31, label %32, label %37

32:                                               ; preds = %27
  %33 = ashr exact i64 %29, 2
  %34 = icmp ult i64 %33, %23
  %35 = select i1 %34, i64 %23, i64 %33
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %43, label %37

37:                                               ; preds = %32, %27
  %38 = phi i64 [ %35, %32 ], [ 2305843009213693951, %27 ]
  %39 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %40 = shl i64 %38, 3
  %41 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %39, i64 %40) #18
  %42 = bitcast i8* %41 to %"class.sh::TIntermNode"**
  br label %43

43:                                               ; preds = %37, %32
  %44 = phi i64 [ %38, %37 ], [ 0, %32 ]
  %45 = phi %"class.sh::TIntermNode"** [ %42, %37 ], [ null, %32 ]
  %46 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %45, i64 %22
  %47 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %45, i64 %44
  %48 = ptrtoint %"class.sh::TIntermNode"** %47 to i64
  %49 = bitcast %"class.sh::TIntermNode"** %46 to i64*
  store i64 %4, i64* %49, align 8
  %50 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 1
  %51 = ptrtoint %"class.sh::TIntermNode"** %50 to i64
  %52 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %3, i64 0, i32 0, i32 0
  %53 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %52, align 8
  %54 = ptrtoint %"class.sh::TIntermNode"** %53 to i64
  %55 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %5, align 8
  %56 = icmp eq %"class.sh::TIntermNode"** %55, %53
  br i1 %56, label %226, label %57

57:                                               ; preds = %43
  %58 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %55, i64 -1
  %59 = ptrtoint %"class.sh::TIntermNode"** %58 to i64
  %60 = sub i64 %59, %54
  %61 = lshr i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = icmp ult i64 %62, 4
  br i1 %63, label %156, label %64

64:                                               ; preds = %57
  %65 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %55, i64 -1
  %66 = ptrtoint %"class.sh::TIntermNode"** %65 to i64
  %67 = sub i64 %66, %54
  %68 = lshr i64 %67, 3
  %69 = xor i64 %68, -1
  %70 = add nsw i64 %22, %69
  %71 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %45, i64 %70
  %72 = xor i64 %68, -1
  %73 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %55, i64 %72
  %74 = icmp ult %"class.sh::TIntermNode"** %71, %55
  %75 = icmp ult %"class.sh::TIntermNode"** %73, %46
  %76 = and i1 %74, %75
  br i1 %76, label %156, label %77

77:                                               ; preds = %64
  %78 = and i64 %62, 4611686018427387900
  %79 = sub nsw i64 0, %78
  %80 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 %79
  %81 = sub nsw i64 0, %78
  %82 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %55, i64 %81
  %83 = add nsw i64 %78, -4
  %84 = lshr exact i64 %83, 2
  %85 = add nuw nsw i64 %84, 1
  %86 = and i64 %85, 1
  %87 = icmp eq i64 %83, 0
  br i1 %87, label %134, label %88

88:                                               ; preds = %77
  %89 = sub nuw nsw i64 %85, %86
  %90 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 -1
  %91 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %55, i64 -1
  %92 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 -1
  %93 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %55, i64 -1
  br label %94

94:                                               ; preds = %94, %88
  %95 = phi i64 [ 0, %88 ], [ %129, %94 ]
  %96 = phi i64 [ %89, %88 ], [ %130, %94 ]
  %97 = sub i64 0, %95
  %98 = sub i64 0, %95
  %99 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %90, i64 %97
  %100 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %91, i64 %98
  %101 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %100, i64 -1
  %102 = bitcast %"class.sh::TIntermNode"** %101 to <2 x i64>*
  %103 = load <2 x i64>, <2 x i64>* %102, align 8, !alias.scope !89
  %104 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %100, i64 -2
  %105 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %104, i64 -1
  %106 = bitcast %"class.sh::TIntermNode"** %105 to <2 x i64>*
  %107 = load <2 x i64>, <2 x i64>* %106, align 8, !alias.scope !89
  %108 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %99, i64 -1
  %109 = bitcast %"class.sh::TIntermNode"** %108 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %109, align 8, !alias.scope !92, !noalias !89
  %110 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %99, i64 -2
  %111 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %110, i64 -1
  %112 = bitcast %"class.sh::TIntermNode"** %111 to <2 x i64>*
  store <2 x i64> %107, <2 x i64>* %112, align 8, !alias.scope !92, !noalias !89
  %113 = sub nuw nsw i64 -4, %95
  %114 = sub nuw nsw i64 -4, %95
  %115 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 %113
  %116 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %93, i64 %114
  %117 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %116, i64 -1
  %118 = bitcast %"class.sh::TIntermNode"** %117 to <2 x i64>*
  %119 = load <2 x i64>, <2 x i64>* %118, align 8, !alias.scope !89
  %120 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %116, i64 -2
  %121 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %120, i64 -1
  %122 = bitcast %"class.sh::TIntermNode"** %121 to <2 x i64>*
  %123 = load <2 x i64>, <2 x i64>* %122, align 8, !alias.scope !89
  %124 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %115, i64 -1
  %125 = bitcast %"class.sh::TIntermNode"** %124 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %125, align 8, !alias.scope !92, !noalias !89
  %126 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %115, i64 -2
  %127 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %126, i64 -1
  %128 = bitcast %"class.sh::TIntermNode"** %127 to <2 x i64>*
  store <2 x i64> %123, <2 x i64>* %128, align 8, !alias.scope !92, !noalias !89
  %129 = add i64 %95, 8
  %130 = add i64 %96, -2
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %94, !llvm.loop !94

132:                                              ; preds = %94
  %133 = sub nuw nsw i64 -8, %95
  br label %134

134:                                              ; preds = %132, %77
  %135 = phi i64 [ 0, %77 ], [ %133, %132 ]
  %136 = icmp eq i64 %86, 0
  br i1 %136, label %154, label %137

137:                                              ; preds = %134
  %138 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 -1
  %139 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %55, i64 -1
  %140 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %138, i64 %135
  %141 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %139, i64 %135
  %142 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %141, i64 -1
  %143 = bitcast %"class.sh::TIntermNode"** %142 to <2 x i64>*
  %144 = load <2 x i64>, <2 x i64>* %143, align 8, !alias.scope !89
  %145 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %141, i64 -2
  %146 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %145, i64 -1
  %147 = bitcast %"class.sh::TIntermNode"** %146 to <2 x i64>*
  %148 = load <2 x i64>, <2 x i64>* %147, align 8, !alias.scope !89
  %149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %140, i64 -1
  %150 = bitcast %"class.sh::TIntermNode"** %149 to <2 x i64>*
  store <2 x i64> %144, <2 x i64>* %150, align 8, !alias.scope !92, !noalias !89
  %151 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %140, i64 -2
  %152 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %151, i64 -1
  %153 = bitcast %"class.sh::TIntermNode"** %152 to <2 x i64>*
  store <2 x i64> %148, <2 x i64>* %153, align 8, !alias.scope !92, !noalias !89
  br label %154

154:                                              ; preds = %134, %137
  %155 = icmp eq i64 %62, %78
  br i1 %155, label %226, label %156

156:                                              ; preds = %154, %64, %57
  %157 = phi %"class.sh::TIntermNode"** [ %46, %64 ], [ %46, %57 ], [ %80, %154 ]
  %158 = phi %"class.sh::TIntermNode"** [ %55, %64 ], [ %55, %57 ], [ %82, %154 ]
  %159 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %158, i64 -1
  %160 = ptrtoint %"class.sh::TIntermNode"** %159 to i64
  %161 = sub i64 %160, %54
  %162 = lshr i64 %161, 3
  %163 = add nuw nsw i64 %162, 1
  %164 = and i64 %163, 7
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %177, label %166

166:                                              ; preds = %156, %166
  %167 = phi %"class.sh::TIntermNode"** [ %170, %166 ], [ %157, %156 ]
  %168 = phi %"class.sh::TIntermNode"** [ %171, %166 ], [ %158, %156 ]
  %169 = phi i64 [ %175, %166 ], [ %164, %156 ]
  %170 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %167, i64 -1
  %171 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %168, i64 -1
  %172 = bitcast %"class.sh::TIntermNode"** %171 to i64*
  %173 = load i64, i64* %172, align 8
  %174 = bitcast %"class.sh::TIntermNode"** %170 to i64*
  store i64 %173, i64* %174, align 8
  %175 = add i64 %169, -1
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %177, label %166, !llvm.loop !95

177:                                              ; preds = %166, %156
  %178 = phi %"class.sh::TIntermNode"** [ undef, %156 ], [ %170, %166 ]
  %179 = phi %"class.sh::TIntermNode"** [ %157, %156 ], [ %170, %166 ]
  %180 = phi %"class.sh::TIntermNode"** [ %158, %156 ], [ %171, %166 ]
  %181 = icmp ult i64 %161, 56
  br i1 %181, label %226, label %182

182:                                              ; preds = %177, %182
  %183 = phi %"class.sh::TIntermNode"** [ %220, %182 ], [ %179, %177 ]
  %184 = phi %"class.sh::TIntermNode"** [ %221, %182 ], [ %180, %177 ]
  %185 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -1
  %186 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -1
  %187 = bitcast %"class.sh::TIntermNode"** %186 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = bitcast %"class.sh::TIntermNode"** %185 to i64*
  store i64 %188, i64* %189, align 8
  %190 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -2
  %191 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -2
  %192 = bitcast %"class.sh::TIntermNode"** %191 to i64*
  %193 = load i64, i64* %192, align 8
  %194 = bitcast %"class.sh::TIntermNode"** %190 to i64*
  store i64 %193, i64* %194, align 8
  %195 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -3
  %196 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -3
  %197 = bitcast %"class.sh::TIntermNode"** %196 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = bitcast %"class.sh::TIntermNode"** %195 to i64*
  store i64 %198, i64* %199, align 8
  %200 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -4
  %201 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -4
  %202 = bitcast %"class.sh::TIntermNode"** %201 to i64*
  %203 = load i64, i64* %202, align 8
  %204 = bitcast %"class.sh::TIntermNode"** %200 to i64*
  store i64 %203, i64* %204, align 8
  %205 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -5
  %206 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -5
  %207 = bitcast %"class.sh::TIntermNode"** %206 to i64*
  %208 = load i64, i64* %207, align 8
  %209 = bitcast %"class.sh::TIntermNode"** %205 to i64*
  store i64 %208, i64* %209, align 8
  %210 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -6
  %211 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -6
  %212 = bitcast %"class.sh::TIntermNode"** %211 to i64*
  %213 = load i64, i64* %212, align 8
  %214 = bitcast %"class.sh::TIntermNode"** %210 to i64*
  store i64 %213, i64* %214, align 8
  %215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -7
  %216 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -7
  %217 = bitcast %"class.sh::TIntermNode"** %216 to i64*
  %218 = load i64, i64* %217, align 8
  %219 = bitcast %"class.sh::TIntermNode"** %215 to i64*
  store i64 %218, i64* %219, align 8
  %220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -8
  %221 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -8
  %222 = bitcast %"class.sh::TIntermNode"** %221 to i64*
  %223 = load i64, i64* %222, align 8
  %224 = bitcast %"class.sh::TIntermNode"** %220 to i64*
  store i64 %223, i64* %224, align 8
  %225 = icmp eq %"class.sh::TIntermNode"** %221, %53
  br i1 %225, label %226, label %182, !llvm.loop !96

226:                                              ; preds = %177, %182, %154, %43
  %227 = phi %"class.sh::TIntermNode"** [ %46, %43 ], [ %80, %154 ], [ %178, %177 ], [ %220, %182 ]
  %228 = ptrtoint %"class.sh::TIntermNode"** %227 to i64
  store i64 %228, i64* %19, align 8
  store i64 %51, i64* %18, align 8
  store i64 %48, i64* %28, align 8
  br label %229

229:                                              ; preds = %11, %226
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh14TIntermTernary13getChildCountEv(%"class.sh::TIntermTernary"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh14TIntermTernary12getChildNodeEm(%"class.sh::TIntermTernary"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  switch i64 %1, label %7 [
    i64 0, label %3
    i64 1, label %5
  ]

3:                                                ; preds = %2
  %4 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 1
  br label %9

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 2
  br label %9

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 3
  br label %9

9:                                                ; preds = %7, %5, %3
  %10 = phi %"class.sh::TIntermTyped"** [ %4, %3 ], [ %6, %5 ], [ %8, %7 ]
  %11 = bitcast %"class.sh::TIntermTyped"** %10 to %"class.sh::TIntermNode"**
  %12 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %11, align 8
  ret %"class.sh::TIntermNode"* %12
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh14TIntermTernary16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermTernary"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermTyped"** %4 to %"class.sh::TIntermNode"**
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, %1
  br i1 %7, label %18, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 2
  %10 = bitcast %"class.sh::TIntermTyped"** %9 to %"class.sh::TIntermNode"**
  %11 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %10, align 8
  %12 = icmp eq %"class.sh::TIntermNode"* %11, %1
  br i1 %12, label %18, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 3
  %15 = bitcast %"class.sh::TIntermTyped"** %14 to %"class.sh::TIntermNode"**
  %16 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %15, align 8
  %17 = icmp eq %"class.sh::TIntermNode"* %16, %1
  br i1 %17, label %18, label %20

18:                                               ; preds = %13, %8, %3
  %19 = phi %"class.sh::TIntermNode"** [ %5, %3 ], [ %10, %8 ], [ %15, %13 ]
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %19, align 8
  br label %20

20:                                               ; preds = %18, %13
  %21 = phi i1 [ false, %13 ], [ true, %18 ]
  ret i1 %21
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2sh13TIntermIfElse13getChildCountEv(%"class.sh::TIntermIfElse"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 2
  %3 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %2, align 8
  %4 = icmp eq %"class.sh::TIntermBlock"* %3, null
  %5 = select i1 %4, i64 1, i64 2
  %6 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 3
  %7 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %6, align 8
  %8 = icmp ne %"class.sh::TIntermBlock"* %7, null
  %9 = zext i1 %8 to i64
  %10 = add nuw nsw i64 %5, %9
  ret i64 %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh13TIntermIfElse12getChildNodeEm(%"class.sh::TIntermIfElse"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %4, label %8

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 1
  %6 = bitcast %"class.sh::TIntermTyped"** %5 to %"class.sh::TIntermNode"**
  %7 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %6, align 8
  br label %20

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 2
  %10 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %9, align 8
  %11 = icmp ne %"class.sh::TIntermBlock"* %10, null
  %12 = icmp eq i64 %1, 1
  %13 = and i1 %12, %11
  br i1 %13, label %14, label %16

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %10, i64 0, i32 0
  br label %20

16:                                               ; preds = %8
  %17 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 3
  %18 = bitcast %"class.sh::TIntermBlock"** %17 to %"class.sh::TIntermNode"**
  %19 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, align 8
  br label %20

20:                                               ; preds = %16, %14, %4
  %21 = phi %"class.sh::TIntermNode"* [ %7, %4 ], [ %15, %14 ], [ %19, %16 ]
  ret %"class.sh::TIntermNode"* %21
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh13TIntermIfElse16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermIfElse"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermTyped"** %4 to %"class.sh::TIntermNode"**
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, %1
  br i1 %7, label %18, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 2
  %10 = bitcast %"class.sh::TIntermBlock"** %9 to %"class.sh::TIntermNode"**
  %11 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %10, align 8
  %12 = icmp eq %"class.sh::TIntermNode"* %11, %1
  br i1 %12, label %18, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 3
  %15 = bitcast %"class.sh::TIntermBlock"** %14 to %"class.sh::TIntermNode"**
  %16 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %15, align 8
  %17 = icmp eq %"class.sh::TIntermNode"* %16, %1
  br i1 %17, label %18, label %20

18:                                               ; preds = %13, %8, %3
  %19 = phi %"class.sh::TIntermNode"** [ %5, %3 ], [ %10, %8 ], [ %15, %13 ]
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %19, align 8
  br label %20

20:                                               ; preds = %18, %13
  %21 = phi i1 [ false, %13 ], [ true, %18 ]
  ret i1 %21
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh13TIntermSwitch13getChildCountEv(%"class.sh::TIntermSwitch"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 2
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh13TIntermSwitch12getChildNodeEm(%"class.sh::TIntermSwitch"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = icmp eq i64 %1, 0
  %4 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermTyped"** %4 to %"class.sh::TIntermNode"**
  %6 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 2
  %7 = bitcast %"class.sh::TIntermBlock"** %6 to %"class.sh::TIntermNode"**
  %8 = select i1 %3, %"class.sh::TIntermNode"** %5, %"class.sh::TIntermNode"** %7
  %9 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, align 8
  ret %"class.sh::TIntermNode"* %9
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh13TIntermSwitch16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermSwitch"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermTyped"** %4 to %"class.sh::TIntermNode"**
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, %1
  br i1 %7, label %13, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 2
  %10 = bitcast %"class.sh::TIntermBlock"** %9 to %"class.sh::TIntermNode"**
  %11 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %10, align 8
  %12 = icmp eq %"class.sh::TIntermNode"* %11, %1
  br i1 %12, label %13, label %15

13:                                               ; preds = %8, %3
  %14 = phi %"class.sh::TIntermNode"** [ %5, %3 ], [ %10, %8 ]
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %14, align 8
  br label %15

15:                                               ; preds = %13, %8
  %16 = phi i1 [ false, %8 ], [ true, %13 ]
  ret i1 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh11TIntermCaseC2ERKS0_(%"class.sh::TIntermCase"* nocapture, %"class.sh::TIntermCase"* nocapture readonly dereferenceable(32)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermCase", %"class.sh::TIntermCase"* %1, i64 0, i32 1
  %4 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %3, align 8
  %5 = bitcast %"class.sh::TIntermTyped"* %4 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %6 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %6, i64 23
  %8 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %7, align 8
  %9 = tail call %"class.sh::TIntermTyped"* %8(%"class.sh::TIntermTyped"* %4) #18
  %10 = getelementptr inbounds %"class.sh::TIntermCase", %"class.sh::TIntermCase"* %0, i64 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.sh::TIntermCase", %"class.sh::TIntermCase"* %0, i64 0, i32 0, i32 1, i32 0
  %12 = bitcast i32* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [29 x i8*] }, { [29 x i8*] }* @_ZTVN2sh11TIntermCaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %13 = getelementptr inbounds %"class.sh::TIntermCase", %"class.sh::TIntermCase"* %0, i64 0, i32 1
  store %"class.sh::TIntermTyped"* %9, %"class.sh::TIntermTyped"** %13, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2sh11TIntermCase13getChildCountEv(%"class.sh::TIntermCase"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermCase", %"class.sh::TIntermCase"* %0, i64 0, i32 1
  %3 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %2, align 8
  %4 = icmp ne %"class.sh::TIntermTyped"* %3, null
  %5 = zext i1 %4 to i64
  ret i64 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh11TIntermCase12getChildNodeEm(%"class.sh::TIntermCase"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermCase", %"class.sh::TIntermCase"* %0, i64 0, i32 1
  %4 = bitcast %"class.sh::TIntermTyped"** %3 to %"class.sh::TIntermNode"**
  %5 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, align 8
  ret %"class.sh::TIntermNode"* %5
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh11TIntermCase16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermCase"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermCase", %"class.sh::TIntermCase"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermTyped"** %4 to %"class.sh::TIntermNode"**
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, %1
  br i1 %7, label %8, label %9

8:                                                ; preds = %3
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %5, align 8
  br label %9

9:                                                ; preds = %3, %8
  %10 = phi i1 [ true, %8 ], [ false, %3 ]
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12TIntermTypedC2ERKS0_(%"class.sh::TIntermTyped"* nocapture, %"class.sh::TIntermTyped"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %0, i64 0, i32 0, i32 1, i32 0
  %5 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermTypedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %1, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"struct.sh::TSourceLoc"* %7 to i8*
  %9 = bitcast %"struct.sh::TSourceLoc"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 4 %9, i64 16, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK2sh12TIntermTyped16hasConstantValueEv(%"class.sh::TIntermTyped"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %"class.sh::TConstantUnion"* @_ZNK2sh12TIntermTyped16getConstantValueEv(%"class.sh::TIntermTyped"* nocapture readnone) unnamed_addr #3 align 2 {
  ret %"class.sh::TConstantUnion"* null
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh20TIntermConstantUnionC2ERKS0_(%"class.sh::TIntermConstantUnion"*, %"class.sh::TIntermConstantUnion"* dereferenceable(216)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %5 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermTypedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %"struct.sh::TSourceLoc"* %7 to i8*
  %9 = bitcast %"struct.sh::TSourceLoc"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 4 %9, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %1, i64 0, i32 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %10, %"class.sh::TType"* dereferenceable(184) %11) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %1, i64 0, i32 1
  %13 = bitcast %"class.sh::TConstantUnion"** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 1
  %16 = bitcast %"class.sh::TConstantUnion"** %15 to i64*
  store i64 %14, i64* %16, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh24TIntermFunctionPrototypeC2EPKNS_9TFunctionE(%"class.sh::TIntermFunctionPrototype"* nocapture, %"class.sh::TFunction"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype", %"class.sh::TIntermFunctionPrototype"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %4 = bitcast i32* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 16, i1 false) #18
  %5 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype", %"class.sh::TIntermFunctionPrototype"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh24TIntermFunctionPrototypeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype", %"class.sh::TIntermFunctionPrototype"* %0, i64 0, i32 1
  store %"class.sh::TFunction"* %1, %"class.sh::TFunction"** %6, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(184) %"class.sh::TType"* @_ZNK2sh24TIntermFunctionPrototype7getTypeEv(%"class.sh::TIntermFunctionPrototype"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype", %"class.sh::TIntermFunctionPrototype"* %0, i64 0, i32 1
  %3 = load %"class.sh::TFunction"*, %"class.sh::TFunction"** %2, align 8
  %4 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %3, i64 0, i32 5
  %5 = load %"class.sh::TType"*, %"class.sh::TType"** %4, align 8
  ret %"class.sh::TType"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh16TIntermAggregateC2ERKS0_(%"class.sh::TIntermAggregate"*, %"class.sh::TIntermAggregate"* dereferenceable(264)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %5 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermTypedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %"struct.sh::TSourceLoc"* %7 to i8*
  %9 = bitcast %"struct.sh::TSourceLoc"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 4 %9, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %1, i64 0, i32 0, i32 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %10, %"class.sh::TType"* dereferenceable(184) %11) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh15TIntermOperatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %1, i64 0, i32 0, i32 1
  %14 = load i8, i8* %13, align 8
  store i8 %14, i8* %12, align 8
  %15 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %15, align 8
  %16 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2
  %17 = bitcast %"class.sh::TVector.8"* %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 24, i1 false) #18
  %18 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 3
  %19 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %1, i64 0, i32 3
  %20 = load i8, i8* %19, align 8, !range !55
  store i8 %20, i8* %18, align 8
  %21 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 4
  %22 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %1, i64 0, i32 4
  %23 = load i8, i8* %22, align 1, !range !55
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 5
  %25 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %1, i64 0, i32 5
  %26 = bitcast %"class.sh::TFunction"** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"class.sh::TFunction"** %24 to i64*
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %30 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %29, align 8
  %31 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %1, i64 0, i32 2, i32 0, i32 0, i32 1
  %32 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %31, align 8
  %33 = icmp eq %"class.sh::TIntermNode"** %30, %32
  br i1 %33, label %41, label %34

34:                                               ; preds = %2
  %35 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %36 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %37 = bitcast %"class.sh::TIntermNode"*** %35 to i64*
  %38 = bitcast %"class.sh::TVector.8"* %16 to i64*
  %39 = bitcast %"class.sh::TIntermNode"*** %36 to i64*
  %40 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %16, i64 0, i32 0, i32 0, i32 0
  br label %42

41:                                               ; preds = %274, %2
  ret void

42:                                               ; preds = %34, %274
  %43 = phi %"class.sh::TIntermNode"** [ %30, %34 ], [ %275, %274 ]
  %44 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %43, align 8
  %45 = bitcast %"class.sh::TIntermNode"* %44 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %46 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %45, align 8
  %47 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %46, i64 4
  %48 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %47, align 8
  %49 = tail call %"class.sh::TIntermTyped"* %48(%"class.sh::TIntermNode"* %44) #18
  %50 = bitcast %"class.sh::TIntermTyped"* %49 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %51 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %50, align 8
  %52 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %51, i64 23
  %53 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %52, align 8
  %54 = tail call %"class.sh::TIntermTyped"* %53(%"class.sh::TIntermTyped"* %49) #18
  %55 = ptrtoint %"class.sh::TIntermTyped"* %54 to i64
  %56 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %35, align 8
  %57 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %36, align 8
  %58 = icmp ult %"class.sh::TIntermNode"** %56, %57
  %59 = ptrtoint %"class.sh::TIntermNode"** %57 to i64
  br i1 %58, label %60, label %64

60:                                               ; preds = %42
  %61 = bitcast %"class.sh::TIntermNode"** %56 to i64*
  store i64 %55, i64* %61, align 8
  %62 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %56, i64 1
  %63 = ptrtoint %"class.sh::TIntermNode"** %62 to i64
  store i64 %63, i64* %37, align 8
  br label %274

64:                                               ; preds = %42
  %65 = ptrtoint %"class.sh::TIntermNode"** %56 to i64
  %66 = load i64, i64* %38, align 8
  %67 = sub i64 %65, %66
  %68 = ashr exact i64 %67, 3
  %69 = add nsw i64 %68, 1
  %70 = icmp ugt i64 %69, 2305843009213693951
  br i1 %70, label %71, label %73

71:                                               ; preds = %64
  %72 = bitcast %"class.sh::TVector.8"* %16 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %72) #19
  unreachable

73:                                               ; preds = %64
  %74 = sub i64 %59, %66
  %75 = ashr exact i64 %74, 3
  %76 = icmp ult i64 %75, 1152921504606846975
  br i1 %76, label %77, label %82

77:                                               ; preds = %73
  %78 = ashr exact i64 %74, 2
  %79 = icmp ult i64 %78, %69
  %80 = select i1 %79, i64 %69, i64 %78
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %88, label %82

82:                                               ; preds = %77, %73
  %83 = phi i64 [ %80, %77 ], [ 2305843009213693951, %73 ]
  %84 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %85 = shl i64 %83, 3
  %86 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %84, i64 %85) #18
  %87 = bitcast i8* %86 to %"class.sh::TIntermNode"**
  br label %88

88:                                               ; preds = %82, %77
  %89 = phi i64 [ %83, %82 ], [ 0, %77 ]
  %90 = phi %"class.sh::TIntermNode"** [ %87, %82 ], [ null, %77 ]
  %91 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %90, i64 %68
  %92 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %90, i64 %89
  %93 = ptrtoint %"class.sh::TIntermNode"** %92 to i64
  %94 = bitcast %"class.sh::TIntermNode"** %91 to i64*
  store i64 %55, i64* %94, align 8
  %95 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %91, i64 1
  %96 = ptrtoint %"class.sh::TIntermNode"** %95 to i64
  %97 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %40, align 8
  %98 = ptrtoint %"class.sh::TIntermNode"** %97 to i64
  %99 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %35, align 8
  %100 = icmp eq %"class.sh::TIntermNode"** %99, %97
  br i1 %100, label %271, label %101

101:                                              ; preds = %88
  %102 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %99, i64 -1
  %103 = ptrtoint %"class.sh::TIntermNode"** %102 to i64
  %104 = sub i64 %103, %98
  %105 = lshr i64 %104, 3
  %106 = add nuw nsw i64 %105, 1
  %107 = icmp ult i64 %106, 4
  br i1 %107, label %201, label %108

108:                                              ; preds = %101
  %109 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %90, i64 -1
  %110 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %99, i64 -1
  %111 = ptrtoint %"class.sh::TIntermNode"** %110 to i64
  %112 = sub i64 %111, %98
  %113 = lshr i64 %112, 3
  %114 = sub nsw i64 %68, %113
  %115 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %109, i64 %114
  %116 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %99, i64 -1
  %117 = sub nsw i64 0, %113
  %118 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %116, i64 %117
  %119 = icmp ult %"class.sh::TIntermNode"** %115, %99
  %120 = icmp ult %"class.sh::TIntermNode"** %118, %91
  %121 = and i1 %119, %120
  br i1 %121, label %201, label %122

122:                                              ; preds = %108
  %123 = and i64 %106, 4611686018427387900
  %124 = sub nsw i64 0, %123
  %125 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %91, i64 %124
  %126 = sub nsw i64 0, %123
  %127 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %99, i64 %126
  %128 = add nsw i64 %123, -4
  %129 = lshr exact i64 %128, 2
  %130 = add nuw nsw i64 %129, 1
  %131 = and i64 %130, 1
  %132 = icmp eq i64 %128, 0
  br i1 %132, label %177, label %133

133:                                              ; preds = %122
  %134 = sub nuw nsw i64 %130, %131
  %135 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %91, i64 -1
  %136 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %99, i64 -1
  %137 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %91, i64 -1
  %138 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %99, i64 -1
  br label %139

139:                                              ; preds = %139, %133
  %140 = phi i64 [ 0, %133 ], [ %174, %139 ]
  %141 = phi i64 [ %134, %133 ], [ %175, %139 ]
  %142 = sub i64 0, %140
  %143 = sub i64 0, %140
  %144 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %135, i64 %142
  %145 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %136, i64 %143
  %146 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %145, i64 -1
  %147 = bitcast %"class.sh::TIntermNode"** %146 to <2 x i64>*
  %148 = load <2 x i64>, <2 x i64>* %147, align 8, !alias.scope !97
  %149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %145, i64 -2
  %150 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %149, i64 -1
  %151 = bitcast %"class.sh::TIntermNode"** %150 to <2 x i64>*
  %152 = load <2 x i64>, <2 x i64>* %151, align 8, !alias.scope !97
  %153 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %144, i64 -1
  %154 = bitcast %"class.sh::TIntermNode"** %153 to <2 x i64>*
  store <2 x i64> %148, <2 x i64>* %154, align 8, !alias.scope !100, !noalias !97
  %155 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %144, i64 -2
  %156 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %155, i64 -1
  %157 = bitcast %"class.sh::TIntermNode"** %156 to <2 x i64>*
  store <2 x i64> %152, <2 x i64>* %157, align 8, !alias.scope !100, !noalias !97
  %158 = sub nuw nsw i64 -4, %140
  %159 = sub nuw nsw i64 -4, %140
  %160 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %137, i64 %158
  %161 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %138, i64 %159
  %162 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -1
  %163 = bitcast %"class.sh::TIntermNode"** %162 to <2 x i64>*
  %164 = load <2 x i64>, <2 x i64>* %163, align 8, !alias.scope !97
  %165 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -2
  %166 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 -1
  %167 = bitcast %"class.sh::TIntermNode"** %166 to <2 x i64>*
  %168 = load <2 x i64>, <2 x i64>* %167, align 8, !alias.scope !97
  %169 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %160, i64 -1
  %170 = bitcast %"class.sh::TIntermNode"** %169 to <2 x i64>*
  store <2 x i64> %164, <2 x i64>* %170, align 8, !alias.scope !100, !noalias !97
  %171 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %160, i64 -2
  %172 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %171, i64 -1
  %173 = bitcast %"class.sh::TIntermNode"** %172 to <2 x i64>*
  store <2 x i64> %168, <2 x i64>* %173, align 8, !alias.scope !100, !noalias !97
  %174 = add i64 %140, 8
  %175 = add i64 %141, -2
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %177, label %139, !llvm.loop !102

177:                                              ; preds = %139, %122
  %178 = phi i64 [ 0, %122 ], [ %174, %139 ]
  %179 = icmp eq i64 %131, 0
  br i1 %179, label %199, label %180

180:                                              ; preds = %177
  %181 = sub i64 0, %178
  %182 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %91, i64 -1
  %183 = sub i64 0, %178
  %184 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %99, i64 -1
  %185 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %182, i64 %181
  %186 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 %183
  %187 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %186, i64 -1
  %188 = bitcast %"class.sh::TIntermNode"** %187 to <2 x i64>*
  %189 = load <2 x i64>, <2 x i64>* %188, align 8, !alias.scope !97
  %190 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %186, i64 -2
  %191 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %190, i64 -1
  %192 = bitcast %"class.sh::TIntermNode"** %191 to <2 x i64>*
  %193 = load <2 x i64>, <2 x i64>* %192, align 8, !alias.scope !97
  %194 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %185, i64 -1
  %195 = bitcast %"class.sh::TIntermNode"** %194 to <2 x i64>*
  store <2 x i64> %189, <2 x i64>* %195, align 8, !alias.scope !100, !noalias !97
  %196 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %185, i64 -2
  %197 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %196, i64 -1
  %198 = bitcast %"class.sh::TIntermNode"** %197 to <2 x i64>*
  store <2 x i64> %193, <2 x i64>* %198, align 8, !alias.scope !100, !noalias !97
  br label %199

199:                                              ; preds = %177, %180
  %200 = icmp eq i64 %106, %123
  br i1 %200, label %271, label %201

201:                                              ; preds = %199, %108, %101
  %202 = phi %"class.sh::TIntermNode"** [ %91, %108 ], [ %91, %101 ], [ %125, %199 ]
  %203 = phi %"class.sh::TIntermNode"** [ %99, %108 ], [ %99, %101 ], [ %127, %199 ]
  %204 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %203, i64 -1
  %205 = ptrtoint %"class.sh::TIntermNode"** %204 to i64
  %206 = sub i64 %205, %98
  %207 = lshr i64 %206, 3
  %208 = add nuw nsw i64 %207, 1
  %209 = and i64 %208, 7
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %222, label %211

211:                                              ; preds = %201, %211
  %212 = phi %"class.sh::TIntermNode"** [ %215, %211 ], [ %202, %201 ]
  %213 = phi %"class.sh::TIntermNode"** [ %216, %211 ], [ %203, %201 ]
  %214 = phi i64 [ %220, %211 ], [ %209, %201 ]
  %215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %212, i64 -1
  %216 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %213, i64 -1
  %217 = bitcast %"class.sh::TIntermNode"** %216 to i64*
  %218 = load i64, i64* %217, align 8
  %219 = bitcast %"class.sh::TIntermNode"** %215 to i64*
  store i64 %218, i64* %219, align 8
  %220 = add i64 %214, -1
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %222, label %211, !llvm.loop !103

222:                                              ; preds = %211, %201
  %223 = phi %"class.sh::TIntermNode"** [ undef, %201 ], [ %215, %211 ]
  %224 = phi %"class.sh::TIntermNode"** [ %202, %201 ], [ %215, %211 ]
  %225 = phi %"class.sh::TIntermNode"** [ %203, %201 ], [ %216, %211 ]
  %226 = icmp ult i64 %206, 56
  br i1 %226, label %271, label %227

227:                                              ; preds = %222, %227
  %228 = phi %"class.sh::TIntermNode"** [ %265, %227 ], [ %224, %222 ]
  %229 = phi %"class.sh::TIntermNode"** [ %266, %227 ], [ %225, %222 ]
  %230 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 -1
  %231 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %229, i64 -1
  %232 = bitcast %"class.sh::TIntermNode"** %231 to i64*
  %233 = load i64, i64* %232, align 8
  %234 = bitcast %"class.sh::TIntermNode"** %230 to i64*
  store i64 %233, i64* %234, align 8
  %235 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 -2
  %236 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %229, i64 -2
  %237 = bitcast %"class.sh::TIntermNode"** %236 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = bitcast %"class.sh::TIntermNode"** %235 to i64*
  store i64 %238, i64* %239, align 8
  %240 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 -3
  %241 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %229, i64 -3
  %242 = bitcast %"class.sh::TIntermNode"** %241 to i64*
  %243 = load i64, i64* %242, align 8
  %244 = bitcast %"class.sh::TIntermNode"** %240 to i64*
  store i64 %243, i64* %244, align 8
  %245 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 -4
  %246 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %229, i64 -4
  %247 = bitcast %"class.sh::TIntermNode"** %246 to i64*
  %248 = load i64, i64* %247, align 8
  %249 = bitcast %"class.sh::TIntermNode"** %245 to i64*
  store i64 %248, i64* %249, align 8
  %250 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 -5
  %251 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %229, i64 -5
  %252 = bitcast %"class.sh::TIntermNode"** %251 to i64*
  %253 = load i64, i64* %252, align 8
  %254 = bitcast %"class.sh::TIntermNode"** %250 to i64*
  store i64 %253, i64* %254, align 8
  %255 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 -6
  %256 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %229, i64 -6
  %257 = bitcast %"class.sh::TIntermNode"** %256 to i64*
  %258 = load i64, i64* %257, align 8
  %259 = bitcast %"class.sh::TIntermNode"** %255 to i64*
  store i64 %258, i64* %259, align 8
  %260 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 -7
  %261 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %229, i64 -7
  %262 = bitcast %"class.sh::TIntermNode"** %261 to i64*
  %263 = load i64, i64* %262, align 8
  %264 = bitcast %"class.sh::TIntermNode"** %260 to i64*
  store i64 %263, i64* %264, align 8
  %265 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 -8
  %266 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %229, i64 -8
  %267 = bitcast %"class.sh::TIntermNode"** %266 to i64*
  %268 = load i64, i64* %267, align 8
  %269 = bitcast %"class.sh::TIntermNode"** %265 to i64*
  store i64 %268, i64* %269, align 8
  %270 = icmp eq %"class.sh::TIntermNode"** %266, %97
  br i1 %270, label %271, label %227, !llvm.loop !104

271:                                              ; preds = %222, %227, %199, %88
  %272 = phi %"class.sh::TIntermNode"** [ %91, %88 ], [ %125, %199 ], [ %223, %222 ], [ %265, %227 ]
  %273 = ptrtoint %"class.sh::TIntermNode"** %272 to i64
  store i64 %273, i64* %38, align 8
  store i64 %96, i64* %37, align 8
  store i64 %93, i64* %39, align 8
  br label %274

274:                                              ; preds = %60, %271
  %275 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %43, i64 1
  %276 = icmp eq %"class.sh::TIntermNode"** %275, %32
  br i1 %276, label %41, label %42
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermAggregate"* @_ZNK2sh16TIntermAggregate11shallowCopyEv(%"class.sh::TIntermAggregate"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.sh::TVector.8", align 16
  %3 = bitcast %"class.sh::TVector.8"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #18
  %4 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %2, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %2, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 0, i64 24, i1 false) #18
  %6 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %2, i64 0, i32 0
  %7 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)***
  %8 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)*** %7, align 8
  %9 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)** %8, i64 33
  %10 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)** %9, align 8
  %11 = tail call %"class.sh::TVector.8"* %10(%"class.sh::TIntermAggregate"* %0) #18
  %12 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %11, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %12, align 8
  %14 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)*** %7, align 8
  %15 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)** %14, i64 33
  %16 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)** %15, align 8
  %17 = tail call %"class.sh::TVector.8"* %16(%"class.sh::TIntermAggregate"* %0) #18
  %18 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %17, i64 0, i32 0, i32 0, i32 1
  %19 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %18, align 8
  %20 = call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertINS_11__wrap_iterIPKS3_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISD_E9referenceEEE5valueENS8_IPS3_EEE4typeESB_SD_SD_(%"class.std::__1::vector.9"* nonnull %6, %"class.sh::TIntermNode"** null, %"class.sh::TIntermNode"** %13, %"class.sh::TIntermNode"** %19)
  %21 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %22 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %21, i64 264) #18
  %23 = bitcast i8* %22 to %"class.sh::TIntermAggregate"*
  %24 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 5
  %25 = bitcast %"class.sh::TFunction"** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1
  %28 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 1
  %29 = load i8, i8* %28, align 8
  %30 = getelementptr inbounds i8, i8* %22, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 16, i1 false) #18
  %31 = bitcast i8* %22 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %31, align 8
  %32 = getelementptr inbounds i8, i8* %22, i64 24
  %33 = bitcast i8* %32 to %"class.sh::TType"*
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %33, %"class.sh::TType"* dereferenceable(184) %27) #18
  %34 = getelementptr inbounds i8, i8* %22, i64 208
  store i8 %29, i8* %34, align 8
  %35 = getelementptr inbounds i8, i8* %22, i64 216
  %36 = bitcast i8* %35 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %31, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %36, align 8
  %37 = getelementptr inbounds i8, i8* %22, i64 224
  %38 = getelementptr inbounds i8, i8* %22, i64 256
  %39 = getelementptr inbounds i8, i8* %22, i64 248
  %40 = bitcast i8* %39 to i16*
  store i16 0, i16* %40, align 8
  %41 = bitcast i8* %38 to i64*
  store i64 %26, i64* %41, align 8
  %42 = bitcast %"class.sh::TVector.8"* %2 to <2 x i64>*
  %43 = load <2 x i64>, <2 x i64>* %42, align 16
  %44 = bitcast i8* %37 to <2 x i64>*
  store <2 x i64> %43, <2 x i64>* %44, align 8
  %45 = bitcast %"class.sh::TVector.8"* %2 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %45, align 16
  %46 = getelementptr inbounds i8, i8* %22, i64 240
  %47 = bitcast i8* %46 to i64*
  %48 = bitcast %"class.sh::TIntermNode"*** %5 to i64*
  %49 = load i64, i64* %48, align 16
  store i64 %49, i64* %47, align 8
  store i64 0, i64* %48, align 16
  call void @_ZN2sh16TIntermAggregate24setPrecisionAndQualifierEv(%"class.sh::TIntermAggregate"* %23) #18
  %50 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %51 = bitcast %"struct.sh::TSourceLoc"* %50 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 4 %51, i64 16, i1 false) #18
  %52 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %4, align 16
  %53 = icmp eq %"class.sh::TIntermNode"** %52, null
  br i1 %53, label %58, label %54

54:                                               ; preds = %1
  %55 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %2, i64 0, i32 0, i32 0, i32 1
  %56 = bitcast %"class.sh::TIntermNode"*** %55 to i64*
  %57 = ptrtoint %"class.sh::TIntermNode"** %52 to i64
  store i64 %57, i64* %56, align 8
  br label %58

58:                                               ; preds = %1, %54
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #18
  ret %"class.sh::TIntermAggregate"* %23
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh14TIntermSwizzleC2ERKS0_(%"class.sh::TIntermSwizzle"*, %"class.sh::TIntermSwizzle"* dereferenceable(248)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %5 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermTypedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %"struct.sh::TSourceLoc"* %7 to i8*
  %9 = bitcast %"struct.sh::TSourceLoc"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 4 %9, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %1, i64 0, i32 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %10, %"class.sh::TType"* dereferenceable(184) %11) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh14TIntermSwizzleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2
  %13 = bitcast %"class.sh::TVector.16"* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 24, i1 false) #18
  %14 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %1, i64 0, i32 1
  %15 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %14, align 8
  %16 = bitcast %"class.sh::TIntermTyped"* %15 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %17 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %16, align 8
  %18 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %17, i64 23
  %19 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %18, align 8
  %20 = tail call %"class.sh::TIntermTyped"* %19(%"class.sh::TIntermTyped"* %15) #18
  %21 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 1
  store %"class.sh::TIntermTyped"* %20, %"class.sh::TIntermTyped"** %21, align 8
  %22 = icmp eq %"class.sh::TIntermSwizzle"* %0, %1
  br i1 %22, label %29, label %23

23:                                               ; preds = %2
  %24 = getelementptr inbounds %"class.sh::TVector.16", %"class.sh::TVector.16"* %12, i64 0, i32 0
  %25 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %26 = load i32*, i32** %25, align 8
  %27 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %1, i64 0, i32 2, i32 0, i32 0, i32 1
  %28 = load i32*, i32** %27, align 8
  tail call void @_ZNSt3__16vectorIi14pool_allocatorIiEE6assignIPiEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.17"* %24, i32* %26, i32* %28) #18
  br label %29

29:                                               ; preds = %2, %23
  %30 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %1, i64 0, i32 3
  %31 = load i8, i8* %30, align 8, !range !55
  %32 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 3
  store i8 %31, i8* %32, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh13TIntermBinaryC2ERKS0_(%"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"* dereferenceable(240)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %5 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermTypedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %"struct.sh::TSourceLoc"* %7 to i8*
  %9 = bitcast %"struct.sh::TSourceLoc"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 4 %9, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1, i64 0, i32 0, i32 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %10, %"class.sh::TType"* dereferenceable(184) %11) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh15TIntermOperatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1, i64 0, i32 0, i32 1
  %14 = load i8, i8* %13, align 8
  store i8 %14, i8* %12, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh13TIntermBinaryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %15 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 4
  %16 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1, i64 0, i32 4
  %17 = load i8, i8* %16, align 8, !range !55
  store i8 %17, i8* %15, align 8
  %18 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1, i64 0, i32 2
  %19 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %18, align 8
  %20 = bitcast %"class.sh::TIntermTyped"* %19 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %21 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %20, align 8
  %22 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %21, i64 23
  %23 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %22, align 8
  %24 = tail call %"class.sh::TIntermTyped"* %23(%"class.sh::TIntermTyped"* %19) #18
  %25 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1, i64 0, i32 3
  %26 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %25, align 8
  %27 = bitcast %"class.sh::TIntermTyped"* %26 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %28 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %27, align 8
  %29 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %28, i64 23
  %30 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %29, align 8
  %31 = tail call %"class.sh::TIntermTyped"* %30(%"class.sh::TIntermTyped"* %26) #18
  %32 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  store %"class.sh::TIntermTyped"* %24, %"class.sh::TIntermTyped"** %32, align 8
  %33 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  store %"class.sh::TIntermTyped"* %31, %"class.sh::TIntermTyped"** %33, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12TIntermUnaryC2ERKS0_(%"class.sh::TIntermUnary"*, %"class.sh::TIntermUnary"* dereferenceable(240)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %5 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermTypedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %"struct.sh::TSourceLoc"* %7 to i8*
  %9 = bitcast %"struct.sh::TSourceLoc"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 4 %9, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %1, i64 0, i32 0, i32 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %10, %"class.sh::TType"* dereferenceable(184) %11) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh15TIntermOperatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %1, i64 0, i32 0, i32 1
  %14 = load i8, i8* %13, align 8
  store i8 %14, i8* %12, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermUnaryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %15 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 2
  %16 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %1, i64 0, i32 2
  %17 = load i8, i8* %16, align 8, !range !55
  store i8 %17, i8* %15, align 8
  %18 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 3
  %19 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %1, i64 0, i32 3
  %20 = bitcast %"class.sh::TFunction"** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.sh::TFunction"** %18 to i64*
  store i64 %21, i64* %22, align 8
  %23 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %1, i64 0, i32 1
  %24 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %23, align 8
  %25 = bitcast %"class.sh::TIntermTyped"* %24 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %26 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %25, align 8
  %27 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %26, i64 23
  %28 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %27, align 8
  %29 = tail call %"class.sh::TIntermTyped"* %28(%"class.sh::TIntermTyped"* %24) #18
  %30 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 1
  store %"class.sh::TIntermTyped"* %29, %"class.sh::TIntermTyped"** %30, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh14TIntermTernaryC2ERKS0_(%"class.sh::TIntermTernary"*, %"class.sh::TIntermTernary"* dereferenceable(232)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %5 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermTypedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %"struct.sh::TSourceLoc"* %7 to i8*
  %9 = bitcast %"struct.sh::TSourceLoc"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 4 %9, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %1, i64 0, i32 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %10, %"class.sh::TType"* dereferenceable(184) %11) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh14TIntermTernaryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %1, i64 0, i32 1
  %13 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %12, align 8
  %14 = bitcast %"class.sh::TIntermTyped"* %13 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %15 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %14, align 8
  %16 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %15, i64 23
  %17 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %16, align 8
  %18 = tail call %"class.sh::TIntermTyped"* %17(%"class.sh::TIntermTyped"* %13) #18
  %19 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %1, i64 0, i32 2
  %20 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %19, align 8
  %21 = bitcast %"class.sh::TIntermTyped"* %20 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %22 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %21, align 8
  %23 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %22, i64 23
  %24 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %23, align 8
  %25 = tail call %"class.sh::TIntermTyped"* %24(%"class.sh::TIntermTyped"* %20) #18
  %26 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %1, i64 0, i32 3
  %27 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %26, align 8
  %28 = bitcast %"class.sh::TIntermTyped"* %27 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %29 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %28, align 8
  %30 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %29, i64 23
  %31 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %30, align 8
  %32 = tail call %"class.sh::TIntermTyped"* %31(%"class.sh::TIntermTyped"* %27) #18
  %33 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 1
  store %"class.sh::TIntermTyped"* %18, %"class.sh::TIntermTyped"** %33, align 8
  %34 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 2
  store %"class.sh::TIntermTyped"* %25, %"class.sh::TIntermTyped"** %34, align 8
  %35 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 3
  store %"class.sh::TIntermTyped"* %32, %"class.sh::TIntermTyped"** %35, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2sh15TIntermOperator12isAssignmentEv(%"class.sh::TIntermOperator"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermOperator", %"class.sh::TIntermOperator"* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 8
  %4 = tail call zeroext i1 @_Z12IsAssignment9TOperator(i8 zeroext %3) #18
  ret i1 %4
}

declare zeroext i1 @_Z12IsAssignment9TOperator(i8 zeroext) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh15TIntermOperator16isMultiplicationEv(%"class.sh::TIntermOperator"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermOperator", %"class.sh::TIntermOperator"* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 8
  %4 = add i8 %3, -15
  %5 = icmp ult i8 %4, 21
  br i1 %5, label %6, label %11

6:                                                ; preds = %1
  %7 = zext i8 %4 to i21
  %8 = lshr i21 -65535, %7
  %9 = and i21 %8, 1
  %10 = icmp ne i21 %9, 0
  ret i1 %10

11:                                               ; preds = %1
  ret i1 false
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZN2sh13TIntermBinary23GetMulOpBasedOnOperandsERKNS_5TTypeES3_(%"class.sh::TType"* nocapture readonly dereferenceable(184), %"class.sh::TType"* nocapture readonly dereferenceable(184)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 8
  %4 = load i8, i8* %3, align 8
  %5 = icmp ugt i8 %4, 1
  %6 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 9
  %7 = load i8, i8* %6, align 1
  %8 = icmp ugt i8 %7, 1
  %9 = and i1 %5, %8
  %10 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 8
  %11 = load i8, i8* %10, align 8
  %12 = icmp ugt i8 %11, 1
  %13 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 9
  %14 = load i8, i8* %13, align 1
  %15 = icmp ugt i8 %14, 1
  %16 = and i1 %12, %15
  br i1 %9, label %17, label %24

17:                                               ; preds = %2
  %18 = xor i1 %12, true
  %19 = or i1 %15, %18
  %20 = select i1 %16, i8 35, i8 34
  br i1 %19, label %34, label %21

21:                                               ; preds = %17
  %22 = icmp eq i8 %14, 1
  %23 = select i1 %22, i8 33, i8 34
  ret i8 %23

24:                                               ; preds = %2
  %25 = icmp eq i8 %7, 1
  %26 = and i1 %5, %25
  br i1 %16, label %27, label %29

27:                                               ; preds = %24
  %28 = select i1 %26, i8 32, i8 34
  br label %34

29:                                               ; preds = %24
  %30 = icmp eq i8 %14, 1
  %31 = and i1 %12, %30
  %32 = xor i1 %26, %31
  %33 = select i1 %32, i8 31, i8 15
  br label %34

34:                                               ; preds = %17, %29, %27
  %35 = phi i8 [ %20, %17 ], [ %28, %27 ], [ %33, %29 ]
  ret i8 %35
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZN2sh13TIntermBinary29GetMulAssignOpBasedOnOperandsERKNS_5TTypeES3_(%"class.sh::TType"* nocapture readonly dereferenceable(184), %"class.sh::TType"* nocapture readonly dereferenceable(184)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 8
  %4 = load i8, i8* %3, align 8
  %5 = icmp ugt i8 %4, 1
  %6 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 9
  %7 = load i8, i8* %6, align 1
  %8 = icmp ugt i8 %7, 1
  %9 = and i1 %5, %8
  %10 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 8
  %11 = load i8, i8* %10, align 8
  %12 = icmp ugt i8 %11, 1
  %13 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 9
  %14 = load i8, i8* %13, align 1
  %15 = icmp ugt i8 %14, 1
  %16 = and i1 %12, %15
  br i1 %9, label %17, label %19

17:                                               ; preds = %2
  %18 = select i1 %16, i8 -110, i8 -111
  br label %27

19:                                               ; preds = %2
  br i1 %16, label %27, label %20

20:                                               ; preds = %19
  %21 = icmp eq i8 %7, 1
  %22 = and i1 %5, %21
  %23 = icmp eq i8 %14, 1
  %24 = and i1 %12, %23
  %25 = xor i1 %22, %24
  %26 = select i1 %25, i8 -112, i8 -114
  br label %27

27:                                               ; preds = %20, %19, %17
  %28 = phi i8 [ %18, %17 ], [ -113, %19 ], [ %26, %20 ]
  ret i8 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12TIntermUnary7promoteEv(%"class.sh::TIntermUnary"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.sh::TType", align 8
  %3 = alloca %"class.sh::TType", align 8
  %4 = alloca %"class.sh::TType", align 8
  %5 = alloca %"class.sh::TType", align 8
  %6 = alloca %"class.sh::TType", align 8
  %7 = alloca %"class.sh::TType", align 8
  %8 = alloca %"class.sh::TType", align 8
  %9 = alloca %"class.sh::TType", align 8
  %10 = alloca %"class.sh::TType", align 8
  %11 = alloca %"class.sh::TType", align 8
  %12 = alloca %"class.sh::TType", align 8
  %13 = alloca %"class.sh::TType", align 8
  %14 = alloca %"class.sh::TType", align 8
  %15 = alloca %"class.sh::TType", align 8
  %16 = alloca %"class.sh::TType", align 8
  %17 = alloca %"class.sh::TType", align 8
  %18 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 1
  %19 = load i8, i8* %18, align 8
  %20 = icmp eq i8 %19, 12
  br i1 %20, label %21, label %25

21:                                               ; preds = %1
  %22 = bitcast %"class.sh::TType"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %22) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %2, i32 3, i32 0, i32 2, i8 zeroext 1, i8 zeroext 1) #18
  %23 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %24 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %23, %"class.sh::TType"* nonnull dereferenceable(184) %2) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %22) #18
  br label %156

25:                                               ; preds = %1
  %26 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 1
  %27 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %26, align 8
  %28 = bitcast %"class.sh::TIntermTyped"* %27 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %29 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %28, align 8
  %30 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %29, i64 31
  %31 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %30, align 8
  %32 = tail call dereferenceable(184) %"class.sh::TType"* %31(%"class.sh::TIntermTyped"* %27) #18
  %33 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %32, i64 0, i32 2
  %34 = load i32, i32* %33, align 8
  %35 = icmp eq i32 %34, 2
  %36 = select i1 %35, i32 2, i32 0
  %37 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %26, align 8
  %38 = bitcast %"class.sh::TIntermTyped"* %37 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %39 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %38, align 8
  %40 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %39, i64 31
  %41 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %40, align 8
  %42 = tail call dereferenceable(184) %"class.sh::TType"* %41(%"class.sh::TIntermTyped"* %37) #18
  %43 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %42, i64 0, i32 8
  %44 = load i8, i8* %43, align 8
  %45 = load i8, i8* %18, align 8
  switch i8 %45, label %146 [
    i8 88, label %46
    i8 89, label %50
    i8 90, label %54
    i8 91, label %54
    i8 94, label %58
    i8 95, label %58
    i8 96, label %58
    i8 100, label %58
    i8 101, label %58
    i8 97, label %62
    i8 98, label %62
    i8 99, label %66
    i8 102, label %70
    i8 103, label %70
    i8 120, label %74
    i8 121, label %74
    i8 104, label %78
    i8 118, label %78
    i8 117, label %90
    i8 86, label %118
    i8 85, label %118
    i8 125, label %122
    i8 126, label %134
    i8 127, label %138
    i8 -128, label %142
  ]

46:                                               ; preds = %25
  %47 = bitcast %"class.sh::TType"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %47) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %3, i32 3, i32 3, i32 %36, i8 zeroext %44, i8 zeroext 1) #18
  %48 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %49 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %48, %"class.sh::TType"* nonnull dereferenceable(184) %3) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %47) #18
  br label %156

50:                                               ; preds = %25
  %51 = bitcast %"class.sh::TType"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %51) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %4, i32 4, i32 3, i32 %36, i8 zeroext %44, i8 zeroext 1) #18
  %52 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %53 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %52, %"class.sh::TType"* nonnull dereferenceable(184) %4) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %51) #18
  br label %156

54:                                               ; preds = %25, %25
  %55 = bitcast %"class.sh::TType"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %55) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %5, i32 1, i32 3, i32 %36, i8 zeroext %44, i8 zeroext 1) #18
  %56 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %57 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %56, %"class.sh::TType"* nonnull dereferenceable(184) %5) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %55) #18
  br label %156

58:                                               ; preds = %25, %25, %25, %25, %25
  %59 = bitcast %"class.sh::TType"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %59) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %6, i32 4, i32 3, i32 %36, i8 zeroext 1, i8 zeroext 1) #18
  %60 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %61 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %60, %"class.sh::TType"* nonnull dereferenceable(184) %6) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %59) #18
  br label %156

62:                                               ; preds = %25, %25
  %63 = bitcast %"class.sh::TType"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %63) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %7, i32 1, i32 3, i32 %36, i8 zeroext 2, i8 zeroext 1) #18
  %64 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %65 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %64, %"class.sh::TType"* nonnull dereferenceable(184) %7) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %63) #18
  br label %156

66:                                               ; preds = %25
  %67 = bitcast %"class.sh::TType"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %67) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %8, i32 1, i32 2, i32 %36, i8 zeroext 2, i8 zeroext 1) #18
  %68 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %69 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %68, %"class.sh::TType"* nonnull dereferenceable(184) %8) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %67) #18
  br label %156

70:                                               ; preds = %25, %25
  %71 = bitcast %"class.sh::TType"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %71) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %9, i32 1, i32 2, i32 %36, i8 zeroext 4, i8 zeroext 1) #18
  %72 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %73 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %72, %"class.sh::TType"* nonnull dereferenceable(184) %9) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %71) #18
  br label %156

74:                                               ; preds = %25, %25
  %75 = bitcast %"class.sh::TType"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %75) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %10, i32 5, i32 0, i32 %36, i8 zeroext 1, i8 zeroext 1) #18
  %76 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %77 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %76, %"class.sh::TType"* nonnull dereferenceable(184) %10) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %75) #18
  br label %156

78:                                               ; preds = %25, %25
  %79 = bitcast %"class.sh::TType"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %79) #18
  %80 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %26, align 8
  %81 = bitcast %"class.sh::TIntermTyped"* %80 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %82 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %81, align 8
  %83 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %82, i64 31
  %84 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %83, align 8
  %85 = tail call dereferenceable(184) %"class.sh::TType"* %84(%"class.sh::TIntermTyped"* %80) #18
  %86 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %85, i64 0, i32 1
  %87 = load i32, i32* %86, align 4
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %11, i32 1, i32 %87, i32 %36, i8 zeroext 1, i8 zeroext 1) #18
  %88 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %89 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %88, %"class.sh::TType"* nonnull dereferenceable(184) %11) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %79) #18
  br label %156

90:                                               ; preds = %25
  %91 = bitcast %"class.sh::TType"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %91) #18
  %92 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %26, align 8
  %93 = bitcast %"class.sh::TIntermTyped"* %92 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %94 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %93, align 8
  %95 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %94, i64 31
  %96 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %95, align 8
  %97 = tail call dereferenceable(184) %"class.sh::TType"* %96(%"class.sh::TIntermTyped"* %92) #18
  %98 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %97, i64 0, i32 1
  %99 = load i32, i32* %98, align 4
  %100 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %26, align 8
  %101 = bitcast %"class.sh::TIntermTyped"* %100 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %102 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %101, align 8
  %103 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %102, i64 31
  %104 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %103, align 8
  %105 = tail call dereferenceable(184) %"class.sh::TType"* %104(%"class.sh::TIntermTyped"* %100) #18
  %106 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %105, i64 0, i32 9
  %107 = load i8, i8* %106, align 1
  %108 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %26, align 8
  %109 = bitcast %"class.sh::TIntermTyped"* %108 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %110 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %109, align 8
  %111 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %110, i64 31
  %112 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %111, align 8
  %113 = tail call dereferenceable(184) %"class.sh::TType"* %112(%"class.sh::TIntermTyped"* %108) #18
  %114 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %113, i64 0, i32 8
  %115 = load i8, i8* %114, align 8
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %12, i32 1, i32 %99, i32 %36, i8 zeroext %107, i8 zeroext %115) #18
  %116 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %117 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %116, %"class.sh::TType"* nonnull dereferenceable(184) %12) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %91) #18
  br label %156

118:                                              ; preds = %25, %25
  %119 = bitcast %"class.sh::TType"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %119) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %13, i32 5, i32 0, i32 %36, i8 zeroext %44, i8 zeroext 1) #18
  %120 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %121 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %120, %"class.sh::TType"* nonnull dereferenceable(184) %13) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %119) #18
  br label %156

122:                                              ; preds = %25
  %123 = bitcast %"class.sh::TType"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %123) #18
  %124 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %26, align 8
  %125 = bitcast %"class.sh::TIntermTyped"* %124 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %126 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %125, align 8
  %127 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %126, i64 31
  %128 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %127, align 8
  %129 = tail call dereferenceable(184) %"class.sh::TType"* %128(%"class.sh::TIntermTyped"* %124) #18
  %130 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %129, i64 0, i32 0
  %131 = load i32, i32* %130, align 8
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %14, i32 %131, i32 3, i32 %36, i8 zeroext %44, i8 zeroext 1) #18
  %132 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %133 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %132, %"class.sh::TType"* nonnull dereferenceable(184) %14) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %123) #18
  br label %156

134:                                              ; preds = %25
  %135 = bitcast %"class.sh::TType"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %135) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %15, i32 3, i32 1, i32 %36, i8 zeroext %44, i8 zeroext 1) #18
  %136 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %137 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %136, %"class.sh::TType"* nonnull dereferenceable(184) %15) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %135) #18
  br label %156

138:                                              ; preds = %25
  %139 = bitcast %"class.sh::TType"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %139) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %16, i32 3, i32 1, i32 %36, i8 zeroext %44, i8 zeroext 1) #18
  %140 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %141 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %140, %"class.sh::TType"* nonnull dereferenceable(184) %16) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %139) #18
  br label %156

142:                                              ; preds = %25
  %143 = bitcast %"class.sh::TType"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %143) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %17, i32 3, i32 1, i32 %36, i8 zeroext %44, i8 zeroext 1) #18
  %144 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %145 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %144, %"class.sh::TType"* nonnull dereferenceable(184) %17) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %143) #18
  br label %156

146:                                              ; preds = %25
  %147 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %26, align 8
  %148 = bitcast %"class.sh::TIntermTyped"* %147 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %149 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %148, align 8
  %150 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %149, i64 31
  %151 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %150, align 8
  %152 = tail call dereferenceable(184) %"class.sh::TType"* %151(%"class.sh::TIntermTyped"* %147) #18
  %153 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %154 = tail call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %153, %"class.sh::TType"* dereferenceable(184) %152) #18
  %155 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1, i32 2
  store i32 %36, i32* %155, align 8
  br label %156

156:                                              ; preds = %46, %50, %54, %58, %62, %66, %70, %74, %78, %90, %118, %122, %134, %138, %142, %146, %21
  ret void
}

declare void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"*, i32, i32, i32, i8 zeroext, i8 zeroext) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh14TIntermSwizzleC2EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"*, %"class.sh::TIntermTyped"*, %"class.sh::TVector.16"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TType", align 8
  %5 = alloca %"class.sh::TType", align 8
  %6 = bitcast %"class.sh::TType"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %6) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %5, i32 1, i32 0, i32 0, i8 zeroext 1, i8 zeroext 1) #18
  %7 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false) #18
  %9 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 1
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %10, %"class.sh::TType"* nonnull dereferenceable(184) %5) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %6) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh14TIntermSwizzleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 1
  store %"class.sh::TIntermTyped"* %1, %"class.sh::TIntermTyped"** %11, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2
  %13 = bitcast %"class.sh::TVector.16"* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 24, i1 false) #18
  %14 = getelementptr inbounds %"class.sh::TVector.16", %"class.sh::TVector.16"* %2, i64 0, i32 0, i32 0, i32 1
  %15 = bitcast i32** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.sh::TVector.16"* %2 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 2
  %21 = icmp eq i64 %19, 0
  br i1 %21, label %204, label %22

22:                                               ; preds = %3
  %23 = icmp ugt i64 %20, 4611686018427387903
  br i1 %23, label %24, label %26

24:                                               ; preds = %22
  %25 = bitcast %"class.sh::TVector.16"* %12 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %25) #19
  unreachable

26:                                               ; preds = %22
  %27 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %28 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %27, i64 %19) #18
  %29 = bitcast i8* %28 to i32*
  %30 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %31 = bitcast i32** %30 to i8**
  store i8* %28, i8** %31, align 8
  %32 = bitcast %"class.sh::TVector.16"* %12 to i8**
  store i8* %28, i8** %32, align 8
  %33 = getelementptr inbounds i32, i32* %29, i64 %20
  %34 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  store i32* %33, i32** %34, align 8
  %35 = getelementptr inbounds %"class.sh::TVector.16", %"class.sh::TVector.16"* %2, i64 0, i32 0, i32 0, i32 0
  %36 = load i32*, i32** %35, align 8
  %37 = bitcast i32* %36 to i8*
  %38 = ptrtoint i32* %36 to i64
  %39 = load i32*, i32** %14, align 8
  %40 = bitcast i32** %30 to i64*
  %41 = ptrtoint i8* %28 to i64
  %42 = icmp eq i32* %36, %39
  br i1 %42, label %201, label %43

43:                                               ; preds = %26
  %44 = getelementptr i32, i32* %39, i64 -1
  %45 = ptrtoint i32* %44 to i64
  %46 = sub i64 %45, %38
  %47 = lshr i64 %46, 2
  %48 = add nuw nsw i64 %47, 1
  %49 = icmp ult i64 %48, 8
  br i1 %49, label %145, label %50

50:                                               ; preds = %43
  %51 = getelementptr i32, i32* %39, i64 -1
  %52 = ptrtoint i32* %51 to i64
  %53 = sub i64 %52, %38
  %54 = lshr i64 %53, 2
  %55 = add i64 %53, 4
  %56 = and i64 %55, -4
  %57 = getelementptr i8, i8* %28, i64 %56
  %58 = add nuw nsw i64 %54, 1
  %59 = getelementptr i32, i32* %36, i64 %58
  %60 = bitcast i32* %59 to i8*
  %61 = icmp ult i8* %28, %60
  %62 = icmp ugt i8* %57, %37
  %63 = and i1 %61, %62
  br i1 %63, label %145, label %64

64:                                               ; preds = %50
  %65 = and i64 %48, 9223372036854775800
  %66 = getelementptr i32, i32* %29, i64 %65
  %67 = getelementptr i32, i32* %36, i64 %65
  %68 = add nsw i64 %65, -8
  %69 = lshr exact i64 %68, 3
  %70 = add nuw nsw i64 %69, 1
  %71 = and i64 %70, 3
  %72 = icmp ult i64 %68, 24
  br i1 %72, label %124, label %73

73:                                               ; preds = %64
  %74 = sub nsw i64 %70, %71
  br label %75

75:                                               ; preds = %75, %73
  %76 = phi i64 [ 0, %73 ], [ %121, %75 ]
  %77 = phi i64 [ %74, %73 ], [ %122, %75 ]
  %78 = getelementptr i32, i32* %29, i64 %76
  %79 = getelementptr i32, i32* %36, i64 %76
  %80 = bitcast i32* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 4, !alias.scope !105
  %82 = getelementptr i32, i32* %79, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  %84 = load <4 x i32>, <4 x i32>* %83, align 4, !alias.scope !105
  %85 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %81, <4 x i32>* %85, align 4, !alias.scope !108, !noalias !105
  %86 = getelementptr i32, i32* %78, i64 4
  %87 = bitcast i32* %86 to <4 x i32>*
  store <4 x i32> %84, <4 x i32>* %87, align 4, !alias.scope !108, !noalias !105
  %88 = or i64 %76, 8
  %89 = getelementptr i32, i32* %29, i64 %88
  %90 = getelementptr i32, i32* %36, i64 %88
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4, !alias.scope !105
  %93 = getelementptr i32, i32* %90, i64 4
  %94 = bitcast i32* %93 to <4 x i32>*
  %95 = load <4 x i32>, <4 x i32>* %94, align 4, !alias.scope !105
  %96 = bitcast i32* %89 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %96, align 4, !alias.scope !108, !noalias !105
  %97 = getelementptr i32, i32* %89, i64 4
  %98 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> %95, <4 x i32>* %98, align 4, !alias.scope !108, !noalias !105
  %99 = or i64 %76, 16
  %100 = getelementptr i32, i32* %29, i64 %99
  %101 = getelementptr i32, i32* %36, i64 %99
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4, !alias.scope !105
  %104 = getelementptr i32, i32* %101, i64 4
  %105 = bitcast i32* %104 to <4 x i32>*
  %106 = load <4 x i32>, <4 x i32>* %105, align 4, !alias.scope !105
  %107 = bitcast i32* %100 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %107, align 4, !alias.scope !108, !noalias !105
  %108 = getelementptr i32, i32* %100, i64 4
  %109 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %106, <4 x i32>* %109, align 4, !alias.scope !108, !noalias !105
  %110 = or i64 %76, 24
  %111 = getelementptr i32, i32* %29, i64 %110
  %112 = getelementptr i32, i32* %36, i64 %110
  %113 = bitcast i32* %112 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 4, !alias.scope !105
  %115 = getelementptr i32, i32* %112, i64 4
  %116 = bitcast i32* %115 to <4 x i32>*
  %117 = load <4 x i32>, <4 x i32>* %116, align 4, !alias.scope !105
  %118 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %118, align 4, !alias.scope !108, !noalias !105
  %119 = getelementptr i32, i32* %111, i64 4
  %120 = bitcast i32* %119 to <4 x i32>*
  store <4 x i32> %117, <4 x i32>* %120, align 4, !alias.scope !108, !noalias !105
  %121 = add i64 %76, 32
  %122 = add i64 %77, -4
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %75, !llvm.loop !110

124:                                              ; preds = %75, %64
  %125 = phi i64 [ 0, %64 ], [ %121, %75 ]
  %126 = icmp eq i64 %71, 0
  br i1 %126, label %143, label %127

127:                                              ; preds = %124, %127
  %128 = phi i64 [ %140, %127 ], [ %125, %124 ]
  %129 = phi i64 [ %141, %127 ], [ %71, %124 ]
  %130 = getelementptr i32, i32* %29, i64 %128
  %131 = getelementptr i32, i32* %36, i64 %128
  %132 = bitcast i32* %131 to <4 x i32>*
  %133 = load <4 x i32>, <4 x i32>* %132, align 4, !alias.scope !105
  %134 = getelementptr i32, i32* %131, i64 4
  %135 = bitcast i32* %134 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 4, !alias.scope !105
  %137 = bitcast i32* %130 to <4 x i32>*
  store <4 x i32> %133, <4 x i32>* %137, align 4, !alias.scope !108, !noalias !105
  %138 = getelementptr i32, i32* %130, i64 4
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %136, <4 x i32>* %139, align 4, !alias.scope !108, !noalias !105
  %140 = add i64 %128, 8
  %141 = add i64 %129, -1
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %127, !llvm.loop !111

143:                                              ; preds = %127, %124
  %144 = icmp eq i64 %48, %65
  br i1 %144, label %198, label %145

145:                                              ; preds = %143, %50, %43
  %146 = phi i32* [ %29, %50 ], [ %29, %43 ], [ %66, %143 ]
  %147 = phi i32* [ %36, %50 ], [ %36, %43 ], [ %67, %143 ]
  %148 = ptrtoint i32* %147 to i64
  %149 = getelementptr i32, i32* %39, i64 -1
  %150 = ptrtoint i32* %149 to i64
  %151 = sub i64 %150, %148
  %152 = lshr i64 %151, 2
  %153 = add nuw nsw i64 %152, 1
  %154 = and i64 %153, 7
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %165, label %156

156:                                              ; preds = %145, %156
  %157 = phi i32* [ %162, %156 ], [ %146, %145 ]
  %158 = phi i32* [ %161, %156 ], [ %147, %145 ]
  %159 = phi i64 [ %163, %156 ], [ %154, %145 ]
  %160 = load i32, i32* %158, align 4
  store i32 %160, i32* %157, align 4
  %161 = getelementptr inbounds i32, i32* %158, i64 1
  %162 = getelementptr inbounds i32, i32* %157, i64 1
  %163 = add i64 %159, -1
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %156, !llvm.loop !112

165:                                              ; preds = %156, %145
  %166 = phi i32* [ undef, %145 ], [ %162, %156 ]
  %167 = phi i32* [ %146, %145 ], [ %162, %156 ]
  %168 = phi i32* [ %147, %145 ], [ %161, %156 ]
  %169 = icmp ult i64 %151, 28
  br i1 %169, label %198, label %170

170:                                              ; preds = %165, %170
  %171 = phi i32* [ %196, %170 ], [ %167, %165 ]
  %172 = phi i32* [ %195, %170 ], [ %168, %165 ]
  %173 = load i32, i32* %172, align 4
  store i32 %173, i32* %171, align 4
  %174 = getelementptr inbounds i32, i32* %172, i64 1
  %175 = getelementptr inbounds i32, i32* %171, i64 1
  %176 = load i32, i32* %174, align 4
  store i32 %176, i32* %175, align 4
  %177 = getelementptr inbounds i32, i32* %172, i64 2
  %178 = getelementptr inbounds i32, i32* %171, i64 2
  %179 = load i32, i32* %177, align 4
  store i32 %179, i32* %178, align 4
  %180 = getelementptr inbounds i32, i32* %172, i64 3
  %181 = getelementptr inbounds i32, i32* %171, i64 3
  %182 = load i32, i32* %180, align 4
  store i32 %182, i32* %181, align 4
  %183 = getelementptr inbounds i32, i32* %172, i64 4
  %184 = getelementptr inbounds i32, i32* %171, i64 4
  %185 = load i32, i32* %183, align 4
  store i32 %185, i32* %184, align 4
  %186 = getelementptr inbounds i32, i32* %172, i64 5
  %187 = getelementptr inbounds i32, i32* %171, i64 5
  %188 = load i32, i32* %186, align 4
  store i32 %188, i32* %187, align 4
  %189 = getelementptr inbounds i32, i32* %172, i64 6
  %190 = getelementptr inbounds i32, i32* %171, i64 6
  %191 = load i32, i32* %189, align 4
  store i32 %191, i32* %190, align 4
  %192 = getelementptr inbounds i32, i32* %172, i64 7
  %193 = getelementptr inbounds i32, i32* %171, i64 7
  %194 = load i32, i32* %192, align 4
  store i32 %194, i32* %193, align 4
  %195 = getelementptr inbounds i32, i32* %172, i64 8
  %196 = getelementptr inbounds i32, i32* %171, i64 8
  %197 = icmp eq i32* %195, %39
  br i1 %197, label %198, label %170, !llvm.loop !113

198:                                              ; preds = %165, %170, %143
  %199 = phi i32* [ %66, %143 ], [ %166, %165 ], [ %196, %170 ]
  %200 = ptrtoint i32* %199 to i64
  br label %201

201:                                              ; preds = %198, %26
  %202 = phi i64 [ %41, %26 ], [ %200, %198 ]
  store i64 %202, i64* %40, align 8
  %203 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %11, align 8
  br label %204

204:                                              ; preds = %3, %201
  %205 = phi %"class.sh::TIntermTyped"* [ %203, %201 ], [ %1, %3 ]
  %206 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 3
  store i8 0, i8* %206, align 8
  %207 = bitcast %"class.sh::TIntermTyped"* %205 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %208 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %207, align 8
  %209 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %208, i64 31
  %210 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %209, align 8
  %211 = call dereferenceable(184) %"class.sh::TType"* %210(%"class.sh::TIntermTyped"* %205) #18
  %212 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %211, i64 0, i32 2
  %213 = load i32, i32* %212, align 8
  %214 = icmp eq i32 %213, 2
  %215 = select i1 %214, i32 2, i32 0
  %216 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0
  %217 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %218 = bitcast i32** %217 to i64*
  %219 = load i64, i64* %218, align 8
  %220 = bitcast %"class.std::__1::vector.17"* %216 to i64*
  %221 = load i64, i64* %220, align 8
  %222 = sub i64 %219, %221
  %223 = lshr exact i64 %222, 2
  %224 = bitcast %"class.sh::TType"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %224) #18
  %225 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %11, align 8
  %226 = bitcast %"class.sh::TIntermTyped"* %225 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %227 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %226, align 8
  %228 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %227, i64 31
  %229 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %228, align 8
  %230 = call dereferenceable(184) %"class.sh::TType"* %229(%"class.sh::TIntermTyped"* %225) #18
  %231 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %230, i64 0, i32 0
  %232 = load i32, i32* %231, align 8
  %233 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %11, align 8
  %234 = bitcast %"class.sh::TIntermTyped"* %233 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %235 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %234, align 8
  %236 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %235, i64 31
  %237 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %236, align 8
  %238 = call dereferenceable(184) %"class.sh::TType"* %237(%"class.sh::TIntermTyped"* %233) #18
  %239 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %238, i64 0, i32 1
  %240 = load i32, i32* %239, align 4
  %241 = trunc i64 %223 to i8
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %4, i32 %232, i32 %240, i32 %215, i8 zeroext %241, i8 zeroext 1) #18
  %242 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %10, %"class.sh::TType"* nonnull dereferenceable(184) %4) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %224) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh14TIntermSwizzle7promoteEv(%"class.sh::TIntermSwizzle"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.sh::TType", align 8
  %3 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 1
  %4 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %3, align 8
  %5 = bitcast %"class.sh::TIntermTyped"* %4 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %6 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %6, i64 31
  %8 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %7, align 8
  %9 = tail call dereferenceable(184) %"class.sh::TType"* %8(%"class.sh::TIntermTyped"* %4) #18
  %10 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %9, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 2
  %13 = select i1 %12, i32 2, i32 0
  %14 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0
  %15 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %16 = bitcast i32** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.std::__1::vector.17"* %14 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %17, %19
  %21 = lshr exact i64 %20, 2
  %22 = bitcast %"class.sh::TType"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %22) #18
  %23 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %3, align 8
  %24 = bitcast %"class.sh::TIntermTyped"* %23 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %25 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %24, align 8
  %26 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %25, i64 31
  %27 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %26, align 8
  %28 = tail call dereferenceable(184) %"class.sh::TType"* %27(%"class.sh::TIntermTyped"* %23) #18
  %29 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %28, i64 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %3, align 8
  %32 = bitcast %"class.sh::TIntermTyped"* %31 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %33 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %32, align 8
  %34 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %33, i64 31
  %35 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %34, align 8
  %36 = tail call dereferenceable(184) %"class.sh::TType"* %35(%"class.sh::TIntermTyped"* %31) #18
  %37 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %36, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = trunc i64 %21 to i8
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %2, i32 %30, i32 %38, i32 %13, i8 zeroext %39, i8 zeroext 1) #18
  %40 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 1
  %41 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %40, %"class.sh::TType"* nonnull dereferenceable(184) %2) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %22) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12TIntermUnaryC2E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE(%"class.sh::TIntermUnary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TFunction"*) unnamed_addr #0 align 2 {
  %5 = alloca %"class.sh::TType", align 8
  %6 = bitcast %"class.sh::TType"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %6) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %5, i32 1, i32 0, i32 0, i8 zeroext 1, i8 zeroext 1) #18
  %7 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false) #18
  %9 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %10, %"class.sh::TType"* nonnull dereferenceable(184) %5) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %6) #18
  %11 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 1
  store i8 %1, i8* %11, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermUnaryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 1
  store %"class.sh::TIntermTyped"* %2, %"class.sh::TIntermTyped"** %12, align 8
  %13 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 2
  store i8 0, i8* %13, align 8
  %14 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 3
  store %"class.sh::TFunction"* %3, %"class.sh::TFunction"** %14, align 8
  call void @_ZN2sh12TIntermUnary7promoteEv(%"class.sh::TIntermUnary"* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh13TIntermBinaryC2E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #0 align 2 {
  %5 = alloca %"class.sh::TType", align 8
  %6 = bitcast %"class.sh::TType"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %6) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %5, i32 1, i32 0, i32 0, i8 zeroext 1, i8 zeroext 1) #18
  %7 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false) #18
  %9 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 1
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %10, %"class.sh::TType"* nonnull dereferenceable(184) %5) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %6) #18
  %11 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 1
  store i8 %1, i8* %11, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh13TIntermBinaryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  store %"class.sh::TIntermTyped"* %2, %"class.sh::TIntermTyped"** %12, align 8
  %13 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  store %"class.sh::TIntermTyped"* %3, %"class.sh::TIntermTyped"** %13, align 8
  %14 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 4
  store i8 0, i8* %14, align 8
  call void @_ZN2sh13TIntermBinary7promoteEv(%"class.sh::TIntermBinary"* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh13TIntermBinary7promoteEv(%"class.sh::TIntermBinary"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.sh::TType", align 8
  %3 = alloca %"class.sh::TType", align 8
  %4 = alloca %"class.sh::TType", align 8
  %5 = alloca %"class.sh::TType", align 8
  %6 = alloca %"class.sh::TType", align 8
  %7 = alloca %"class.sh::TType", align 8
  %8 = alloca %"class.sh::TType", align 8
  %9 = alloca %"class.sh::TType", align 8
  %10 = alloca %"class.sh::TType", align 8
  %11 = alloca %"class.sh::TType", align 8
  %12 = alloca %"class.sh::TType", align 8
  %13 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 1
  %14 = load i8, i8* %13, align 8
  %15 = icmp eq i8 %14, 30
  br i1 %15, label %16, label %26

16:                                               ; preds = %1
  %17 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %18 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %17, align 8
  %19 = bitcast %"class.sh::TIntermTyped"* %18 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %20 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %19, align 8
  %21 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %20, i64 31
  %22 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %21, align 8
  %23 = tail call dereferenceable(184) %"class.sh::TType"* %22(%"class.sh::TIntermTyped"* %18) #18
  %24 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 1
  %25 = tail call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %24, %"class.sh::TType"* dereferenceable(184) %23) #18
  br label %379

26:                                               ; preds = %1
  %27 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %28 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %29 = bitcast %"class.sh::TIntermTyped"* %28 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %30 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %29, align 8
  %31 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %30, i64 31
  %32 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %31, align 8
  %33 = tail call dereferenceable(184) %"class.sh::TType"* %32(%"class.sh::TIntermTyped"* %28) #18
  %34 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 1
  %35 = tail call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %34, %"class.sh::TType"* dereferenceable(184) %33) #18
  %36 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %37 = bitcast %"class.sh::TIntermTyped"* %36 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %38 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %37, align 8
  %39 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %38, i64 31
  %40 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %39, align 8
  %41 = tail call dereferenceable(184) %"class.sh::TType"* %40(%"class.sh::TIntermTyped"* %36) #18
  %42 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %41, i64 0, i32 2
  %43 = load i32, i32* %42, align 8
  %44 = icmp eq i32 %43, 2
  br i1 %44, label %45, label %56

45:                                               ; preds = %26
  %46 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %47 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %46, align 8
  %48 = bitcast %"class.sh::TIntermTyped"* %47 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %49 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %48, align 8
  %50 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %49, i64 31
  %51 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %50, align 8
  %52 = tail call dereferenceable(184) %"class.sh::TType"* %51(%"class.sh::TIntermTyped"* %47) #18
  %53 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %52, i64 0, i32 2
  %54 = load i32, i32* %53, align 8
  %55 = icmp eq i32 %54, 2
  br i1 %55, label %58, label %56

56:                                               ; preds = %45, %26
  %57 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 1, i32 2
  store i32 0, i32* %57, align 8
  br label %58

58:                                               ; preds = %45, %56
  %59 = phi i32 [ 0, %56 ], [ 2, %45 ]
  %60 = load i8, i8* %13, align 8
  switch i8 %60, label %216 [
    i8 44, label %61
    i8 45, label %61
    i8 46, label %146
    i8 47, label %181
  ]

61:                                               ; preds = %58, %58
  %62 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %63 = bitcast %"class.sh::TIntermTyped"* %62 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %64 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %63, align 8
  %65 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %64, i64 31
  %66 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %65, align 8
  %67 = tail call dereferenceable(184) %"class.sh::TType"* %66(%"class.sh::TIntermTyped"* %62) #18
  %68 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %67, i64 0, i32 10, i32 1
  %69 = load i64, i64* %68, align 8
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %72, label %71

71:                                               ; preds = %61
  tail call void @_ZN2sh5TType18toArrayElementTypeEv(%"class.sh::TType"* %34) #18
  br label %379

72:                                               ; preds = %61
  %73 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %74 = bitcast %"class.sh::TIntermTyped"* %73 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %75 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %74, align 8
  %76 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %75, i64 31
  %77 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %76, align 8
  %78 = tail call dereferenceable(184) %"class.sh::TType"* %77(%"class.sh::TIntermTyped"* %73) #18
  %79 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %78, i64 0, i32 8
  %80 = load i8, i8* %79, align 8
  %81 = icmp ugt i8 %80, 1
  %82 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %78, i64 0, i32 9
  %83 = load i8, i8* %82, align 1
  %84 = icmp ugt i8 %83, 1
  %85 = and i1 %81, %84
  br i1 %85, label %86, label %113

86:                                               ; preds = %72
  %87 = bitcast %"class.sh::TType"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %87) #18
  %88 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %89 = bitcast %"class.sh::TIntermTyped"* %88 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %90 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %89, align 8
  %91 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %90, i64 31
  %92 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %91, align 8
  %93 = tail call dereferenceable(184) %"class.sh::TType"* %92(%"class.sh::TIntermTyped"* %88) #18
  %94 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %93, i64 0, i32 0
  %95 = load i32, i32* %94, align 8
  %96 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %97 = bitcast %"class.sh::TIntermTyped"* %96 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %98 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %97, align 8
  %99 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %98, i64 31
  %100 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %99, align 8
  %101 = tail call dereferenceable(184) %"class.sh::TType"* %100(%"class.sh::TIntermTyped"* %96) #18
  %102 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %101, i64 0, i32 1
  %103 = load i32, i32* %102, align 4
  %104 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %105 = bitcast %"class.sh::TIntermTyped"* %104 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %106 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %105, align 8
  %107 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %106, i64 31
  %108 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %107, align 8
  %109 = tail call dereferenceable(184) %"class.sh::TType"* %108(%"class.sh::TIntermTyped"* %104) #18
  %110 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %109, i64 0, i32 9
  %111 = load i8, i8* %110, align 1
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %2, i32 %95, i32 %103, i32 %59, i8 zeroext %111, i8 zeroext 1) #18
  %112 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %34, %"class.sh::TType"* nonnull dereferenceable(184) %2) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %87) #18
  br label %379

113:                                              ; preds = %72
  %114 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %115 = bitcast %"class.sh::TIntermTyped"* %114 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %116 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %115, align 8
  %117 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %116, i64 31
  %118 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %117, align 8
  %119 = tail call dereferenceable(184) %"class.sh::TType"* %118(%"class.sh::TIntermTyped"* %114) #18
  %120 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %119, i64 0, i32 8
  %121 = load i8, i8* %120, align 8
  %122 = icmp ugt i8 %121, 1
  %123 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %119, i64 0, i32 9
  %124 = load i8, i8* %123, align 1
  %125 = icmp eq i8 %124, 1
  %126 = and i1 %122, %125
  br i1 %126, label %127, label %379

127:                                              ; preds = %113
  %128 = bitcast %"class.sh::TType"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %128) #18
  %129 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %130 = bitcast %"class.sh::TIntermTyped"* %129 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %131 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %130, align 8
  %132 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %131, i64 31
  %133 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %132, align 8
  %134 = tail call dereferenceable(184) %"class.sh::TType"* %133(%"class.sh::TIntermTyped"* %129) #18
  %135 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %134, i64 0, i32 0
  %136 = load i32, i32* %135, align 8
  %137 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %138 = bitcast %"class.sh::TIntermTyped"* %137 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %139 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %138, align 8
  %140 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %139, i64 31
  %141 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %140, align 8
  %142 = tail call dereferenceable(184) %"class.sh::TType"* %141(%"class.sh::TIntermTyped"* %137) #18
  %143 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %142, i64 0, i32 1
  %144 = load i32, i32* %143, align 4
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %3, i32 %136, i32 %144, i32 %59, i8 zeroext 1, i8 zeroext 1) #18
  %145 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %34, %"class.sh::TType"* nonnull dereferenceable(184) %3) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %128) #18
  br label %379

146:                                              ; preds = %58
  %147 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %148 = bitcast %"class.sh::TIntermTyped"* %147 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %149 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %148, align 8
  %150 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %149, i64 31
  %151 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %150, align 8
  %152 = tail call dereferenceable(184) %"class.sh::TType"* %151(%"class.sh::TIntermTyped"* %147) #18
  %153 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %152, i64 0, i32 13
  %154 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %153, align 8
  %155 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %154, i64 0, i32 2, i32 0
  %156 = load %"class.sh::TVector.0"*, %"class.sh::TVector.0"** %155, align 8
  %157 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %158 = bitcast %"class.sh::TIntermTyped"** %157 to %"class.sh::TIntermNode"**
  %159 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %158, align 8
  %160 = bitcast %"class.sh::TIntermNode"* %159 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %161 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %160, align 8
  %162 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %161, i64 5
  %163 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %162, align 8
  %164 = tail call %"class.sh::TIntermConstantUnion"* %163(%"class.sh::TIntermNode"* %159) #18
  %165 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %164, i64 0, i32 1
  %166 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %165, align 8
  %167 = icmp eq %"class.sh::TConstantUnion"* %166, null
  br i1 %167, label %171, label %168

168:                                              ; preds = %146
  %169 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* nonnull %166) #18
  %170 = sext i32 %169 to i64
  br label %171

171:                                              ; preds = %146, %168
  %172 = phi i64 [ %170, %168 ], [ 0, %146 ]
  %173 = getelementptr inbounds %"class.sh::TVector.0", %"class.sh::TVector.0"* %156, i64 0, i32 0, i32 0, i32 0
  %174 = load %"class.sh::TField"**, %"class.sh::TField"*** %173, align 8
  %175 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %174, i64 %172
  %176 = load %"class.sh::TField"*, %"class.sh::TField"** %175, align 8
  %177 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %176, i64 0, i32 0
  %178 = load %"class.sh::TType"*, %"class.sh::TType"** %177, align 8
  %179 = tail call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %34, %"class.sh::TType"* dereferenceable(184) %178) #18
  %180 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 1, i32 2
  store i32 %59, i32* %180, align 8
  br label %379

181:                                              ; preds = %58
  %182 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %183 = bitcast %"class.sh::TIntermTyped"* %182 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %184 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %183, align 8
  %185 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %184, i64 31
  %186 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %185, align 8
  %187 = tail call dereferenceable(184) %"class.sh::TType"* %186(%"class.sh::TIntermTyped"* %182) #18
  %188 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %187, i64 0, i32 12
  %189 = load %"class.sh::TInterfaceBlock"*, %"class.sh::TInterfaceBlock"** %188, align 8
  %190 = getelementptr inbounds %"class.sh::TInterfaceBlock", %"class.sh::TInterfaceBlock"* %189, i64 0, i32 1, i32 0
  %191 = load %"class.sh::TVector.0"*, %"class.sh::TVector.0"** %190, align 8
  %192 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %193 = bitcast %"class.sh::TIntermTyped"** %192 to %"class.sh::TIntermNode"**
  %194 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %193, align 8
  %195 = bitcast %"class.sh::TIntermNode"* %194 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %196 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %195, align 8
  %197 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %196, i64 5
  %198 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %197, align 8
  %199 = tail call %"class.sh::TIntermConstantUnion"* %198(%"class.sh::TIntermNode"* %194) #18
  %200 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %199, i64 0, i32 1
  %201 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %200, align 8
  %202 = icmp eq %"class.sh::TConstantUnion"* %201, null
  br i1 %202, label %206, label %203

203:                                              ; preds = %181
  %204 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* nonnull %201) #18
  %205 = sext i32 %204 to i64
  br label %206

206:                                              ; preds = %181, %203
  %207 = phi i64 [ %205, %203 ], [ 0, %181 ]
  %208 = getelementptr inbounds %"class.sh::TVector.0", %"class.sh::TVector.0"* %191, i64 0, i32 0, i32 0, i32 0
  %209 = load %"class.sh::TField"**, %"class.sh::TField"*** %208, align 8
  %210 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %209, i64 %207
  %211 = load %"class.sh::TField"*, %"class.sh::TField"** %210, align 8
  %212 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %211, i64 0, i32 0
  %213 = load %"class.sh::TType"*, %"class.sh::TType"** %212, align 8
  %214 = tail call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %34, %"class.sh::TType"* dereferenceable(184) %213) #18
  %215 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 1, i32 2
  store i32 %59, i32* %215, align 8
  br label %379

216:                                              ; preds = %58
  %217 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %218 = bitcast %"class.sh::TIntermTyped"* %217 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %219 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %218, align 8
  %220 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %219, i64 31
  %221 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %220, align 8
  %222 = tail call dereferenceable(184) %"class.sh::TType"* %221(%"class.sh::TIntermTyped"* %217) #18
  %223 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %222, i64 0, i32 1
  %224 = load i32, i32* %223, align 4
  %225 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %226 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %225, align 8
  %227 = bitcast %"class.sh::TIntermTyped"* %226 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %228 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %227, align 8
  %229 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %228, i64 31
  %230 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %229, align 8
  %231 = tail call dereferenceable(184) %"class.sh::TType"* %230(%"class.sh::TIntermTyped"* %226) #18
  %232 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %231, i64 0, i32 1
  %233 = load i32, i32* %232, align 4
  %234 = icmp sgt i32 %224, %233
  %235 = select i1 %234, i32 %224, i32 %233
  %236 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  store i32 %235, i32* %236, align 4
  %237 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %238 = bitcast %"class.sh::TIntermTyped"* %237 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %239 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %238, align 8
  %240 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %239, i64 31
  %241 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %240, align 8
  %242 = tail call dereferenceable(184) %"class.sh::TType"* %241(%"class.sh::TIntermTyped"* %237) #18
  %243 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %242, i64 0, i32 8
  %244 = load i8, i8* %243, align 8
  %245 = zext i8 %244 to i32
  %246 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %225, align 8
  %247 = bitcast %"class.sh::TIntermTyped"* %246 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %248 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %247, align 8
  %249 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %248, i64 31
  %250 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %249, align 8
  %251 = tail call dereferenceable(184) %"class.sh::TType"* %250(%"class.sh::TIntermTyped"* %246) #18
  %252 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %251, i64 0, i32 8
  %253 = load i8, i8* %252, align 8
  %254 = zext i8 %253 to i32
  %255 = icmp ult i32 %245, %254
  %256 = select i1 %255, i32 %254, i32 %245
  %257 = icmp eq i32 %256, 1
  br i1 %257, label %258, label %266

258:                                              ; preds = %216
  %259 = load i8, i8* %13, align 8
  switch i8 %259, label %379 [
    i8 18, label %260
    i8 19, label %260
    i8 20, label %260
    i8 21, label %260
    i8 22, label %260
    i8 23, label %260
    i8 38, label %263
    i8 37, label %263
    i8 36, label %263
  ]

260:                                              ; preds = %258, %258, %258, %258, %258, %258
  %261 = bitcast %"class.sh::TType"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %261) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %4, i32 5, i32 0, i32 %59, i8 zeroext 1, i8 zeroext 1) #18
  %262 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %34, %"class.sh::TType"* nonnull dereferenceable(184) %4) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %261) #18
  br label %379

263:                                              ; preds = %258, %258, %258
  %264 = bitcast %"class.sh::TType"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %264) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %5, i32 5, i32 0, i32 %59, i8 zeroext 1, i8 zeroext 1) #18
  %265 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %34, %"class.sh::TType"* nonnull dereferenceable(184) %5) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %264) #18
  br label %379

266:                                              ; preds = %216
  %267 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %268 = bitcast %"class.sh::TIntermTyped"* %267 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %269 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %268, align 8
  %270 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %269, i64 31
  %271 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %270, align 8
  %272 = tail call dereferenceable(184) %"class.sh::TType"* %271(%"class.sh::TIntermTyped"* %267) #18
  %273 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %272, i64 0, i32 0
  %274 = load i32, i32* %273, align 8
  %275 = load i8, i8* %13, align 8
  switch i8 %275, label %379 [
    i8 23, label %376
    i8 34, label %276
    i8 33, label %309
    i8 35, label %320
    i8 31, label %339
    i8 32, label %343
    i8 22, label %376
    i8 21, label %376
    i8 20, label %376
    i8 19, label %376
    i8 18, label %376
    i8 -103, label %354
    i8 -104, label %354
    i8 13, label %354
    i8 14, label %354
    i8 16, label %354
    i8 17, label %354
    i8 39, label %354
    i8 40, label %354
    i8 41, label %354
    i8 42, label %354
    i8 43, label %354
    i8 -116, label %354
    i8 -115, label %354
    i8 -109, label %354
    i8 -108, label %354
    i8 -107, label %354
    i8 -106, label %354
    i8 -105, label %354
  ]

276:                                              ; preds = %266
  %277 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %225, align 8
  %278 = bitcast %"class.sh::TIntermTyped"* %277 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %279 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %278, align 8
  %280 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %279, i64 31
  %281 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %280, align 8
  %282 = tail call dereferenceable(184) %"class.sh::TType"* %281(%"class.sh::TIntermTyped"* %277) #18
  %283 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %282, i64 0, i32 8
  %284 = load i8, i8* %283, align 8
  %285 = icmp ugt i8 %284, 1
  %286 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %282, i64 0, i32 9
  %287 = load i8, i8* %286, align 1
  %288 = icmp ugt i8 %287, 1
  %289 = and i1 %285, %288
  br i1 %289, label %290, label %379

290:                                              ; preds = %276
  %291 = bitcast %"class.sh::TType"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %291) #18
  %292 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %225, align 8
  %293 = bitcast %"class.sh::TIntermTyped"* %292 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %294 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %293, align 8
  %295 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %294, i64 31
  %296 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %295, align 8
  %297 = tail call dereferenceable(184) %"class.sh::TType"* %296(%"class.sh::TIntermTyped"* %292) #18
  %298 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %297, i64 0, i32 8
  %299 = load i8, i8* %298, align 8
  %300 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %225, align 8
  %301 = bitcast %"class.sh::TIntermTyped"* %300 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %302 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %301, align 8
  %303 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %302, i64 31
  %304 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %303, align 8
  %305 = tail call dereferenceable(184) %"class.sh::TType"* %304(%"class.sh::TIntermTyped"* %300) #18
  %306 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %305, i64 0, i32 9
  %307 = load i8, i8* %306, align 1
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %6, i32 %274, i32 %235, i32 %59, i8 zeroext %299, i8 zeroext %307) #18
  %308 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %34, %"class.sh::TType"* nonnull dereferenceable(184) %6) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %291) #18
  br label %379

309:                                              ; preds = %266
  %310 = bitcast %"class.sh::TType"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %310) #18
  %311 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %312 = bitcast %"class.sh::TIntermTyped"* %311 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %313 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %312, align 8
  %314 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %313, i64 31
  %315 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %314, align 8
  %316 = tail call dereferenceable(184) %"class.sh::TType"* %315(%"class.sh::TIntermTyped"* %311) #18
  %317 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %316, i64 0, i32 9
  %318 = load i8, i8* %317, align 1
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %7, i32 %274, i32 %235, i32 %59, i8 zeroext %318, i8 zeroext 1) #18
  %319 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %34, %"class.sh::TType"* nonnull dereferenceable(184) %7) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %310) #18
  br label %379

320:                                              ; preds = %266
  %321 = bitcast %"class.sh::TType"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %321) #18
  %322 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %225, align 8
  %323 = bitcast %"class.sh::TIntermTyped"* %322 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %324 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %323, align 8
  %325 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %324, i64 31
  %326 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %325, align 8
  %327 = tail call dereferenceable(184) %"class.sh::TType"* %326(%"class.sh::TIntermTyped"* %322) #18
  %328 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %327, i64 0, i32 8
  %329 = load i8, i8* %328, align 8
  %330 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %331 = bitcast %"class.sh::TIntermTyped"* %330 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %332 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %331, align 8
  %333 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %332, i64 31
  %334 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %333, align 8
  %335 = tail call dereferenceable(184) %"class.sh::TType"* %334(%"class.sh::TIntermTyped"* %330) #18
  %336 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %335, i64 0, i32 9
  %337 = load i8, i8* %336, align 1
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %8, i32 %274, i32 %235, i32 %59, i8 zeroext %329, i8 zeroext %337) #18
  %338 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %34, %"class.sh::TType"* nonnull dereferenceable(184) %8) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %321) #18
  br label %379

339:                                              ; preds = %266
  %340 = bitcast %"class.sh::TType"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %340) #18
  %341 = trunc i32 %256 to i8
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %9, i32 %274, i32 %235, i32 %59, i8 zeroext %341, i8 zeroext 1) #18
  %342 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %34, %"class.sh::TType"* nonnull dereferenceable(184) %9) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %340) #18
  br label %379

343:                                              ; preds = %266
  %344 = bitcast %"class.sh::TType"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %344) #18
  %345 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %225, align 8
  %346 = bitcast %"class.sh::TIntermTyped"* %345 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %347 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %346, align 8
  %348 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %347, i64 31
  %349 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %348, align 8
  %350 = tail call dereferenceable(184) %"class.sh::TType"* %349(%"class.sh::TIntermTyped"* %345) #18
  %351 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %350, i64 0, i32 8
  %352 = load i8, i8* %351, align 8
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %10, i32 %274, i32 %235, i32 %59, i8 zeroext %352, i8 zeroext 1) #18
  %353 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %34, %"class.sh::TType"* nonnull dereferenceable(184) %10) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %344) #18
  br label %379

354:                                              ; preds = %266, %266, %266, %266, %266, %266, %266, %266, %266, %266, %266, %266, %266, %266, %266, %266, %266, %266
  %355 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %356 = bitcast %"class.sh::TIntermTyped"* %355 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %357 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %356, align 8
  %358 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %357, i64 31
  %359 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %358, align 8
  %360 = tail call dereferenceable(184) %"class.sh::TType"* %359(%"class.sh::TIntermTyped"* %355) #18
  %361 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %360, i64 0, i32 9
  %362 = load i8, i8* %361, align 1
  %363 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %225, align 8
  %364 = bitcast %"class.sh::TIntermTyped"* %363 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %365 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %364, align 8
  %366 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %365, i64 31
  %367 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %366, align 8
  %368 = tail call dereferenceable(184) %"class.sh::TType"* %367(%"class.sh::TIntermTyped"* %363) #18
  %369 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %368, i64 0, i32 9
  %370 = load i8, i8* %369, align 1
  %371 = icmp ult i8 %362, %370
  %372 = select i1 %371, i8 %370, i8 %362
  %373 = bitcast %"class.sh::TType"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %373) #18
  %374 = trunc i32 %256 to i8
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %11, i32 %274, i32 %235, i32 %59, i8 zeroext %374, i8 zeroext %372) #18
  %375 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %34, %"class.sh::TType"* nonnull dereferenceable(184) %11) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %373) #18
  br label %379

376:                                              ; preds = %266, %266, %266, %266, %266, %266
  %377 = bitcast %"class.sh::TType"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %377) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %12, i32 5, i32 0, i32 %59, i8 zeroext 1, i8 zeroext 1) #18
  %378 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %34, %"class.sh::TType"* nonnull dereferenceable(184) %12) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %377) #18
  br label %379

379:                                              ; preds = %171, %206, %86, %113, %127, %71, %309, %320, %339, %343, %354, %376, %290, %276, %266, %260, %263, %258, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermBinary"* @_ZN2sh13TIntermBinary11CreateCommaEPNS_12TIntermTypedES2_i(%"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TType", align 8
  %5 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %6 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %5, i64 240) #18
  %7 = bitcast i8* %6 to %"class.sh::TIntermBinary"*
  %8 = bitcast %"class.sh::TType"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %8) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %4, i32 1, i32 0, i32 0, i8 zeroext 1, i8 zeroext 1) #18
  %9 = getelementptr inbounds i8, i8* %6, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 16, i1 false) #18
  %10 = bitcast i8* %6 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds i8, i8* %6, i64 24
  %12 = bitcast i8* %11 to %"class.sh::TType"*
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %12, %"class.sh::TType"* nonnull dereferenceable(184) %4) #18
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %8) #18
  %13 = getelementptr inbounds i8, i8* %6, i64 208
  store i8 30, i8* %13, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh13TIntermBinaryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %14 = getelementptr inbounds i8, i8* %6, i64 216
  %15 = bitcast i8* %14 to %"class.sh::TIntermTyped"**
  store %"class.sh::TIntermTyped"* %0, %"class.sh::TIntermTyped"** %15, align 8
  %16 = getelementptr inbounds i8, i8* %6, i64 224
  %17 = bitcast i8* %16 to %"class.sh::TIntermTyped"**
  store %"class.sh::TIntermTyped"* %1, %"class.sh::TIntermTyped"** %17, align 8
  %18 = getelementptr inbounds i8, i8* %6, i64 232
  store i8 0, i8* %18, align 8
  call void @_ZN2sh13TIntermBinary7promoteEv(%"class.sh::TIntermBinary"* %7) #18
  %19 = icmp sgt i32 %2, 299
  br i1 %19, label %39, label %20

20:                                               ; preds = %3
  %21 = bitcast %"class.sh::TIntermTyped"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %22 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %21, align 8
  %23 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %22, i64 31
  %24 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %23, align 8
  %25 = call dereferenceable(184) %"class.sh::TType"* %24(%"class.sh::TIntermTyped"* %0) #18
  %26 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %25, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 2
  br i1 %28, label %29, label %39

29:                                               ; preds = %20
  %30 = bitcast %"class.sh::TIntermTyped"* %1 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %31 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %30, align 8
  %32 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %31, i64 31
  %33 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %32, align 8
  %34 = call dereferenceable(184) %"class.sh::TType"* %33(%"class.sh::TIntermTyped"* %1) #18
  %35 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %34, i64 0, i32 2
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 2
  %38 = select i1 %37, i32 2, i32 0
  br label %39

39:                                               ; preds = %3, %20, %29
  %40 = phi i32 [ %38, %29 ], [ 0, %20 ], [ 0, %3 ]
  %41 = getelementptr inbounds i8, i8* %6, i64 32
  %42 = bitcast i8* %41 to i32*
  store i32 %40, i32* %42, align 8
  ret %"class.sh::TIntermBinary"* %7
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2sh13TIntermBinary17GetCommaQualifierEiPKNS_12TIntermTypedES3_(i32, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #0 align 2 {
  %4 = icmp sgt i32 %0, 299
  br i1 %4, label %24, label %5

5:                                                ; preds = %3
  %6 = bitcast %"class.sh::TIntermTyped"* %1 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %7 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %7, i64 31
  %9 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %8, align 8
  %10 = tail call dereferenceable(184) %"class.sh::TType"* %9(%"class.sh::TIntermTyped"* %1) #18
  %11 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %10, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 2
  br i1 %13, label %14, label %24

14:                                               ; preds = %5
  %15 = bitcast %"class.sh::TIntermTyped"* %2 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %16 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %15, align 8
  %17 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %16, i64 31
  %18 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %17, align 8
  %19 = tail call dereferenceable(184) %"class.sh::TType"* %18(%"class.sh::TIntermTyped"* %2) #18
  %20 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %19, i64 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 2
  %23 = select i1 %22, i32 2, i32 0
  ret i32 %23

24:                                               ; preds = %3, %5
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh33TIntermGlobalQualifierDeclarationC2EPNS_13TIntermSymbolEbRKNS_10TSourceLocE(%"class.sh::TIntermGlobalQualifierDeclaration"* nocapture, %"class.sh::TIntermSymbol"*, i1 zeroext, %"struct.sh::TSourceLoc"* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %5 = zext i1 %2 to i8
  %6 = getelementptr inbounds %"class.sh::TIntermGlobalQualifierDeclaration", %"class.sh::TIntermGlobalQualifierDeclaration"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.sh::TIntermGlobalQualifierDeclaration", %"class.sh::TIntermGlobalQualifierDeclaration"* %0, i64 0, i32 0, i32 1, i32 0
  %8 = bitcast i32* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [29 x i8*] }, { [29 x i8*] }* @_ZTVN2sh33TIntermGlobalQualifierDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %9 = getelementptr inbounds %"class.sh::TIntermGlobalQualifierDeclaration", %"class.sh::TIntermGlobalQualifierDeclaration"* %0, i64 0, i32 1
  store %"class.sh::TIntermSymbol"* %1, %"class.sh::TIntermSymbol"** %9, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermGlobalQualifierDeclaration", %"class.sh::TIntermGlobalQualifierDeclaration"* %0, i64 0, i32 2
  store i8 %5, i8* %10, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermGlobalQualifierDeclaration", %"class.sh::TIntermGlobalQualifierDeclaration"* %0, i64 0, i32 0, i32 1
  %12 = bitcast %"struct.sh::TSourceLoc"* %11 to i8*
  %13 = bitcast %"struct.sh::TSourceLoc"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 4 %13, i64 16, i1 false) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh33TIntermGlobalQualifierDeclarationC2ERKS0_(%"class.sh::TIntermGlobalQualifierDeclaration"* nocapture, %"class.sh::TIntermGlobalQualifierDeclaration"* nocapture readonly dereferenceable(40)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermGlobalQualifierDeclaration", %"class.sh::TIntermGlobalQualifierDeclaration"* %1, i64 0, i32 1
  %4 = load %"class.sh::TIntermSymbol"*, %"class.sh::TIntermSymbol"** %3, align 8
  %5 = bitcast %"class.sh::TIntermSymbol"* %4 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)***
  %6 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %6, i64 23
  %8 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %7, align 8
  %9 = tail call %"class.sh::TIntermTyped"* %8(%"class.sh::TIntermSymbol"* %4) #18
  %10 = getelementptr inbounds %"class.sh::TIntermGlobalQualifierDeclaration", %"class.sh::TIntermGlobalQualifierDeclaration"* %1, i64 0, i32 2
  %11 = load i8, i8* %10, align 8, !range !55
  %12 = getelementptr inbounds %"class.sh::TIntermGlobalQualifierDeclaration", %"class.sh::TIntermGlobalQualifierDeclaration"* %1, i64 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.sh::TIntermGlobalQualifierDeclaration", %"class.sh::TIntermGlobalQualifierDeclaration"* %0, i64 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.sh::TIntermGlobalQualifierDeclaration", %"class.sh::TIntermGlobalQualifierDeclaration"* %0, i64 0, i32 0, i32 1, i32 0
  %15 = bitcast i32* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [29 x i8*] }, { [29 x i8*] }* @_ZTVN2sh33TIntermGlobalQualifierDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %13, align 8
  %16 = getelementptr inbounds %"class.sh::TIntermGlobalQualifierDeclaration", %"class.sh::TIntermGlobalQualifierDeclaration"* %0, i64 0, i32 1
  %17 = bitcast %"class.sh::TIntermSymbol"** %16 to %"class.sh::TIntermTyped"**
  store %"class.sh::TIntermTyped"* %9, %"class.sh::TIntermTyped"** %17, align 8
  %18 = getelementptr inbounds %"class.sh::TIntermGlobalQualifierDeclaration", %"class.sh::TIntermGlobalQualifierDeclaration"* %0, i64 0, i32 2
  store i8 %11, i8* %18, align 8
  %19 = getelementptr inbounds %"class.sh::TIntermGlobalQualifierDeclaration", %"class.sh::TIntermGlobalQualifierDeclaration"* %0, i64 0, i32 0, i32 1
  %20 = bitcast %"struct.sh::TSourceLoc"* %19 to i8*
  %21 = bitcast %"struct.sh::TSourceLoc"* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 4 %21, i64 16, i1 false) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh14TIntermTernaryC2EPNS_12TIntermTypedES2_S2_(%"class.sh::TIntermTernary"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #0 align 2 {
  %5 = bitcast %"class.sh::TIntermTyped"* %2 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %6 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %6, i64 31
  %8 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %7, align 8
  %9 = tail call dereferenceable(184) %"class.sh::TType"* %8(%"class.sh::TIntermTyped"* %2) #18
  %10 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %11 = bitcast i32* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 16, i1 false) #18
  %12 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %13 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %13, %"class.sh::TType"* dereferenceable(184) %9) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh14TIntermTernaryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %14 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 1
  store %"class.sh::TIntermTyped"* %1, %"class.sh::TIntermTyped"** %14, align 8
  %15 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 2
  store %"class.sh::TIntermTyped"* %2, %"class.sh::TIntermTyped"** %15, align 8
  %16 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 3
  store %"class.sh::TIntermTyped"* %3, %"class.sh::TIntermTyped"** %16, align 8
  %17 = bitcast %"class.sh::TIntermTyped"* %1 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %18 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %17, align 8
  %19 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %18, i64 31
  %20 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %19, align 8
  %21 = tail call dereferenceable(184) %"class.sh::TType"* %20(%"class.sh::TIntermTyped"* %1) #18
  %22 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %21, i64 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 2
  br i1 %24, label %25, label %42

25:                                               ; preds = %4
  %26 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %5, align 8
  %27 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %26, i64 31
  %28 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %27, align 8
  %29 = tail call dereferenceable(184) %"class.sh::TType"* %28(%"class.sh::TIntermTyped"* %2) #18
  %30 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %29, i64 0, i32 2
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 2
  br i1 %32, label %33, label %42

33:                                               ; preds = %25
  %34 = bitcast %"class.sh::TIntermTyped"* %3 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %35 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %34, align 8
  %36 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %35, i64 31
  %37 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %36, align 8
  %38 = tail call dereferenceable(184) %"class.sh::TType"* %37(%"class.sh::TIntermTyped"* %3) #18
  %39 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %38, i64 0, i32 2
  %40 = load i32, i32* %39, align 8
  %41 = icmp eq i32 %40, 2
  br i1 %41, label %43, label %42

42:                                               ; preds = %33, %25, %4
  br label %43

43:                                               ; preds = %33, %42
  %44 = phi i32 [ 0, %42 ], [ 2, %33 ]
  %45 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 0, i32 1, i32 2
  store i32 %44, i32* %45, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2sh14TIntermTernary18DetermineQualifierEPNS_12TIntermTypedES2_S2_(%"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.sh::TIntermTyped"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %5 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %5, i64 31
  %7 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %6, align 8
  %8 = tail call dereferenceable(184) %"class.sh::TType"* %7(%"class.sh::TIntermTyped"* %0) #18
  %9 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %8, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 2
  br i1 %11, label %12, label %30

12:                                               ; preds = %3
  %13 = bitcast %"class.sh::TIntermTyped"* %1 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %14 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %13, align 8
  %15 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %14, i64 31
  %16 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %15, align 8
  %17 = tail call dereferenceable(184) %"class.sh::TType"* %16(%"class.sh::TIntermTyped"* %1) #18
  %18 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %17, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 2
  br i1 %20, label %21, label %30

21:                                               ; preds = %12
  %22 = bitcast %"class.sh::TIntermTyped"* %2 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %23 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %22, align 8
  %24 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %23, i64 31
  %25 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %24, align 8
  %26 = tail call dereferenceable(184) %"class.sh::TType"* %25(%"class.sh::TIntermTyped"* %2) #18
  %27 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %26, i64 0, i32 2
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, 2
  br i1 %29, label %31, label %30

30:                                               ; preds = %21, %12, %3
  br label %31

31:                                               ; preds = %21, %30
  %32 = phi i32 [ 0, %30 ], [ 2, %21 ]
  ret i32 %32
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh11TIntermLoopC2ENS_9TLoopTypeEPNS_11TIntermNodeEPNS_12TIntermTypedES5_PNS_12TIntermBlockE(%"class.sh::TIntermLoop"* nocapture, i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*) unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 0, i32 1, i32 0
  %9 = bitcast i32* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [29 x i8*] }, { [29 x i8*] }* @_ZTVN2sh11TIntermLoopE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 1
  store i32 %1, i32* %10, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 2
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %11, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 3
  store %"class.sh::TIntermTyped"* %3, %"class.sh::TIntermTyped"** %12, align 8
  %13 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 4
  store %"class.sh::TIntermTyped"* %4, %"class.sh::TIntermTyped"** %13, align 8
  %14 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 5
  store %"class.sh::TIntermBlock"* %5, %"class.sh::TIntermBlock"** %14, align 8
  %15 = icmp eq %"class.sh::TIntermNode"* %2, null
  br i1 %15, label %41, label %16

16:                                               ; preds = %6
  %17 = bitcast %"class.sh::TIntermNode"* %2 to %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)***
  %18 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*** %17, align 8
  %19 = getelementptr inbounds %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %18, i64 11
  %20 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %19, align 8
  %21 = tail call %"class.sh::TIntermDeclaration"* %20(%"class.sh::TIntermNode"* nonnull %2) #18
  %22 = icmp eq %"class.sh::TIntermDeclaration"* %21, null
  br i1 %22, label %41, label %23

23:                                               ; preds = %16
  %24 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %11, align 8
  %25 = bitcast %"class.sh::TIntermNode"* %24 to %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)***
  %26 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*** %25, align 8
  %27 = getelementptr inbounds %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %26, i64 11
  %28 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %27, align 8
  %29 = tail call %"class.sh::TIntermDeclaration"* %28(%"class.sh::TIntermNode"* %24) #18
  %30 = bitcast %"class.sh::TIntermDeclaration"* %29 to %"class.sh::TVector.8"* (%"class.sh::TIntermDeclaration"*)***
  %31 = load %"class.sh::TVector.8"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermDeclaration"*)*** %30, align 8
  %32 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermDeclaration"*)** %31, i64 27
  %33 = load %"class.sh::TVector.8"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermDeclaration"*)** %32, align 8
  %34 = tail call %"class.sh::TVector.8"* %33(%"class.sh::TIntermDeclaration"* %29) #18
  %35 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %35, align 8
  %37 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %34, i64 0, i32 0, i32 0, i32 1
  %38 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %37, align 8
  %39 = icmp eq %"class.sh::TIntermNode"** %36, %38
  br i1 %39, label %40, label %41

40:                                               ; preds = %23
  store %"class.sh::TIntermNode"* null, %"class.sh::TIntermNode"** %11, align 8
  br label %41

41:                                               ; preds = %16, %6, %40, %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh11TIntermLoopC2ERKS0_(%"class.sh::TIntermLoop"* nocapture, %"class.sh::TIntermLoop"* nocapture readonly dereferenceable(64)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 2
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = bitcast %"class.sh::TIntermNode"* %6 to %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)***
  %8 = load %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)*** %7, align 8
  %9 = getelementptr inbounds %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)** %8, i64 23
  %10 = load %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermNode"* (%"class.sh::TIntermNode"*)** %9, align 8
  %11 = tail call %"class.sh::TIntermNode"* %10(%"class.sh::TIntermNode"* %6) #18
  %12 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 3
  %13 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %12, align 8
  %14 = bitcast %"class.sh::TIntermTyped"* %13 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %15 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %14, align 8
  %16 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %15, i64 23
  %17 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %16, align 8
  %18 = tail call %"class.sh::TIntermTyped"* %17(%"class.sh::TIntermTyped"* %13) #18
  %19 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 4
  %20 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %19, align 8
  %21 = bitcast %"class.sh::TIntermTyped"* %20 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %22 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %21, align 8
  %23 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %22, i64 23
  %24 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %23, align 8
  %25 = tail call %"class.sh::TIntermTyped"* %24(%"class.sh::TIntermTyped"* %20) #18
  %26 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %1, i64 0, i32 5
  %27 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %26, align 8
  %28 = bitcast %"class.sh::TIntermBlock"* %27 to %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)***
  %29 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)*** %28, align 8
  %30 = getelementptr inbounds %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)** %29, i64 23
  %31 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)** %30, align 8
  %32 = tail call %"class.sh::TIntermBlock"* %31(%"class.sh::TIntermBlock"* %27) #18
  %33 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 0, i32 0
  %34 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 0, i32 1, i32 0
  %35 = bitcast i32* %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [29 x i8*] }, { [29 x i8*] }* @_ZTVN2sh11TIntermLoopE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %33, align 8
  %36 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 1
  store i32 %4, i32* %36, align 8
  %37 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 2
  store %"class.sh::TIntermNode"* %11, %"class.sh::TIntermNode"** %37, align 8
  %38 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 3
  store %"class.sh::TIntermTyped"* %18, %"class.sh::TIntermTyped"** %38, align 8
  %39 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 4
  store %"class.sh::TIntermTyped"* %25, %"class.sh::TIntermTyped"** %39, align 8
  %40 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 5
  store %"class.sh::TIntermBlock"* %32, %"class.sh::TIntermBlock"** %40, align 8
  %41 = icmp eq %"class.sh::TIntermNode"* %11, null
  br i1 %41, label %67, label %42

42:                                               ; preds = %2
  %43 = bitcast %"class.sh::TIntermNode"* %11 to %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)***
  %44 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*** %43, align 8
  %45 = getelementptr inbounds %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %44, i64 11
  %46 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %45, align 8
  %47 = tail call %"class.sh::TIntermDeclaration"* %46(%"class.sh::TIntermNode"* nonnull %11) #18
  %48 = icmp eq %"class.sh::TIntermDeclaration"* %47, null
  br i1 %48, label %67, label %49

49:                                               ; preds = %42
  %50 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %37, align 8
  %51 = bitcast %"class.sh::TIntermNode"* %50 to %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)***
  %52 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*** %51, align 8
  %53 = getelementptr inbounds %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %52, i64 11
  %54 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %53, align 8
  %55 = tail call %"class.sh::TIntermDeclaration"* %54(%"class.sh::TIntermNode"* %50) #18
  %56 = bitcast %"class.sh::TIntermDeclaration"* %55 to %"class.sh::TVector.8"* (%"class.sh::TIntermDeclaration"*)***
  %57 = load %"class.sh::TVector.8"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermDeclaration"*)*** %56, align 8
  %58 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermDeclaration"*)** %57, i64 27
  %59 = load %"class.sh::TVector.8"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermDeclaration"*)** %58, align 8
  %60 = tail call %"class.sh::TVector.8"* %59(%"class.sh::TIntermDeclaration"* %55) #18
  %61 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %60, i64 0, i32 0, i32 0, i32 0
  %62 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %61, align 8
  %63 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %60, i64 0, i32 0, i32 0, i32 1
  %64 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %63, align 8
  %65 = icmp eq %"class.sh::TIntermNode"** %62, %64
  br i1 %65, label %66, label %67

66:                                               ; preds = %49
  store %"class.sh::TIntermNode"* null, %"class.sh::TIntermNode"** %37, align 8
  br label %67

67:                                               ; preds = %2, %42, %49, %66
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh13TIntermIfElseC2EPNS_12TIntermTypedEPNS_12TIntermBlockES4_(%"class.sh::TIntermIfElse"* nocapture, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"*) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 0, i32 1, i32 0
  %7 = bitcast i32* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [29 x i8*] }, { [29 x i8*] }* @_ZTVN2sh13TIntermIfElseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %8 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 1
  store %"class.sh::TIntermTyped"* %1, %"class.sh::TIntermTyped"** %8, align 8
  %9 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 2
  store %"class.sh::TIntermBlock"* %2, %"class.sh::TIntermBlock"** %9, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 3
  store %"class.sh::TIntermBlock"* %3, %"class.sh::TIntermBlock"** %10, align 8
  %11 = icmp eq %"class.sh::TIntermBlock"* %3, null
  br i1 %11, label %24, label %12

12:                                               ; preds = %4
  %13 = bitcast %"class.sh::TIntermBlock"* %3 to %"class.sh::TVector.8"* (%"class.sh::TIntermBlock"*)***
  %14 = load %"class.sh::TVector.8"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermBlock"*)*** %13, align 8
  %15 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermBlock"*)** %14, i64 27
  %16 = load %"class.sh::TVector.8"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermBlock"*)** %15, align 8
  %17 = tail call %"class.sh::TVector.8"* %16(%"class.sh::TIntermBlock"* nonnull %3) #18
  %18 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %17, i64 0, i32 0, i32 0, i32 0
  %19 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %18, align 8
  %20 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %17, i64 0, i32 0, i32 0, i32 1
  %21 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %20, align 8
  %22 = icmp eq %"class.sh::TIntermNode"** %19, %21
  br i1 %22, label %23, label %24

23:                                               ; preds = %12
  store %"class.sh::TIntermBlock"* null, %"class.sh::TIntermBlock"** %10, align 8
  br label %24

24:                                               ; preds = %4, %23, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh13TIntermIfElseC2ERKS0_(%"class.sh::TIntermIfElse"* nocapture, %"class.sh::TIntermIfElse"* nocapture readonly dereferenceable(48)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %1, i64 0, i32 1
  %4 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %3, align 8
  %5 = bitcast %"class.sh::TIntermTyped"* %4 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %6 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %6, i64 23
  %8 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %7, align 8
  %9 = tail call %"class.sh::TIntermTyped"* %8(%"class.sh::TIntermTyped"* %4) #18
  %10 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %1, i64 0, i32 2
  %11 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %10, align 8
  %12 = bitcast %"class.sh::TIntermBlock"* %11 to %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)***
  %13 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)** %13, i64 23
  %15 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)** %14, align 8
  %16 = tail call %"class.sh::TIntermBlock"* %15(%"class.sh::TIntermBlock"* %11) #18
  %17 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %1, i64 0, i32 3
  %18 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %17, align 8
  %19 = icmp eq %"class.sh::TIntermBlock"* %18, null
  br i1 %19, label %26, label %20

20:                                               ; preds = %2
  %21 = bitcast %"class.sh::TIntermBlock"* %18 to %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)***
  %22 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)*** %21, align 8
  %23 = getelementptr inbounds %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)** %22, i64 23
  %24 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)** %23, align 8
  %25 = tail call %"class.sh::TIntermBlock"* %24(%"class.sh::TIntermBlock"* nonnull %18) #18
  br label %26

26:                                               ; preds = %2, %20
  %27 = phi %"class.sh::TIntermBlock"* [ %25, %20 ], [ null, %2 ]
  %28 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 0, i32 1, i32 0
  %30 = bitcast i32* %29 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [29 x i8*] }, { [29 x i8*] }* @_ZTVN2sh13TIntermIfElseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %28, align 8
  %31 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 1
  store %"class.sh::TIntermTyped"* %9, %"class.sh::TIntermTyped"** %31, align 8
  %32 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 2
  store %"class.sh::TIntermBlock"* %16, %"class.sh::TIntermBlock"** %32, align 8
  %33 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 3
  store %"class.sh::TIntermBlock"* %27, %"class.sh::TIntermBlock"** %33, align 8
  %34 = icmp eq %"class.sh::TIntermBlock"* %27, null
  br i1 %34, label %47, label %35

35:                                               ; preds = %26
  %36 = bitcast %"class.sh::TIntermBlock"* %27 to %"class.sh::TVector.8"* (%"class.sh::TIntermBlock"*)***
  %37 = load %"class.sh::TVector.8"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermBlock"*)*** %36, align 8
  %38 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermBlock"*)** %37, i64 27
  %39 = load %"class.sh::TVector.8"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermBlock"*)** %38, align 8
  %40 = tail call %"class.sh::TVector.8"* %39(%"class.sh::TIntermBlock"* nonnull %27) #18
  %41 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %40, i64 0, i32 0, i32 0, i32 0
  %42 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %41, align 8
  %43 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %40, i64 0, i32 0, i32 0, i32 1
  %44 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %43, align 8
  %45 = icmp eq %"class.sh::TIntermNode"** %42, %44
  br i1 %45, label %46, label %47

46:                                               ; preds = %35
  store %"class.sh::TIntermBlock"* null, %"class.sh::TIntermBlock"** %33, align 8
  br label %47

47:                                               ; preds = %26, %35, %46
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh13TIntermSwitchC2EPNS_12TIntermTypedEPNS_12TIntermBlockE(%"class.sh::TIntermSwitch"* nocapture, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 0, i32 1, i32 0
  %6 = bitcast i32* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [29 x i8*] }, { [29 x i8*] }* @_ZTVN2sh13TIntermSwitchE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %7 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 1
  store %"class.sh::TIntermTyped"* %1, %"class.sh::TIntermTyped"** %7, align 8
  %8 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 2
  store %"class.sh::TIntermBlock"* %2, %"class.sh::TIntermBlock"** %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh13TIntermSwitchC2ERKS0_(%"class.sh::TIntermSwitch"* nocapture, %"class.sh::TIntermSwitch"* nocapture readonly dereferenceable(40)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %1, i64 0, i32 1
  %4 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %3, align 8
  %5 = bitcast %"class.sh::TIntermTyped"* %4 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %6 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %6, i64 23
  %8 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %7, align 8
  %9 = tail call %"class.sh::TIntermTyped"* %8(%"class.sh::TIntermTyped"* %4) #18
  %10 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %1, i64 0, i32 2
  %11 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %10, align 8
  %12 = bitcast %"class.sh::TIntermBlock"* %11 to %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)***
  %13 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)** %13, i64 23
  %15 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermBlock"*)** %14, align 8
  %16 = tail call %"class.sh::TIntermBlock"* %15(%"class.sh::TIntermBlock"* %11) #18
  %17 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 0, i32 1, i32 0
  %19 = bitcast i32* %18 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [29 x i8*] }, { [29 x i8*] }* @_ZTVN2sh13TIntermSwitchE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %17, align 8
  %20 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 1
  store %"class.sh::TIntermTyped"* %9, %"class.sh::TIntermTyped"** %20, align 8
  %21 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 2
  store %"class.sh::TIntermBlock"* %16, %"class.sh::TIntermBlock"** %21, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2sh13TIntermSwitch16setStatementListEPNS_12TIntermBlockE(%"class.sh::TIntermSwitch"* nocapture, %"class.sh::TIntermBlock"*) local_unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 2
  store %"class.sh::TIntermBlock"* %1, %"class.sh::TIntermBlock"** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh14TIntermTernary4foldEPNS_12TDiagnosticsE(%"class.sh::TIntermTernary"* readonly, %"class.sh::TDiagnostics"* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 1
  %4 = bitcast %"class.sh::TIntermTyped"** %3 to %"class.sh::TIntermNode"**
  %5 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, align 8
  %6 = bitcast %"class.sh::TIntermNode"* %5 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %7 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %7, i64 5
  %9 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %8, align 8
  %10 = tail call %"class.sh::TIntermConstantUnion"* %9(%"class.sh::TIntermNode"* %5) #18
  %11 = icmp eq %"class.sh::TIntermConstantUnion"* %10, null
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, align 8
  %14 = bitcast %"class.sh::TIntermNode"* %13 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %15 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %14, align 8
  %16 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %15, i64 5
  %17 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %16, align 8
  %18 = tail call %"class.sh::TIntermConstantUnion"* %17(%"class.sh::TIntermNode"* %13) #18
  %19 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %18, i64 0, i32 1
  %20 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %19, align 8
  %21 = icmp eq %"class.sh::TConstantUnion"* %20, null
  br i1 %21, label %27, label %22

22:                                               ; preds = %12
  %23 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* nonnull %20) #18
  br i1 %23, label %24, label %27

24:                                               ; preds = %22
  %25 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 2
  %26 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %25, align 8
  br label %32

27:                                               ; preds = %12, %22
  %28 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 3
  %29 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %28, align 8
  br label %32

30:                                               ; preds = %2
  %31 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 0, i32 0
  br label %32

32:                                               ; preds = %30, %27, %24
  %33 = phi %"class.sh::TIntermTyped"* [ %26, %24 ], [ %29, %27 ], [ %31, %30 ]
  ret %"class.sh::TIntermTyped"* %33
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh14TIntermSwizzle19hasDuplicateOffsetsEv(%"class.sh::TIntermSwizzle"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = alloca [4 x i32], align 16
  %3 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 3
  %4 = load i8, i8* %3, align 8, !range !55
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %26

6:                                                ; preds = %1
  %7 = bitcast [4 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 16, i1 false)
  %8 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %11 = load i32*, i32** %10, align 8
  %12 = icmp eq i32* %9, %11
  br i1 %12, label %24, label %15

13:                                               ; preds = %15
  %14 = icmp eq i32* %23, %11
  br i1 %14, label %24, label %15

15:                                               ; preds = %6, %13
  %16 = phi i32* [ %23, %13 ], [ %9, %6 ]
  %17 = load i32, i32* %16, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 %18
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = icmp slt i32 %20, 1
  %23 = getelementptr inbounds i32, i32* %16, i64 1
  br i1 %22, label %13, label %24

24:                                               ; preds = %15, %13, %6
  %25 = phi i1 [ false, %6 ], [ false, %13 ], [ true, %15 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #18
  br label %26

26:                                               ; preds = %1, %24
  %27 = phi i1 [ %25, %24 ], [ true, %1 ]
  ret i1 %27
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2sh14TIntermSwizzle28setHasFoldedDuplicateOffsetsEb(%"class.sh::TIntermSwizzle"* nocapture, i1 zeroext) local_unnamed_addr #8 align 2 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 3
  store i8 %3, i8* %4, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh14TIntermSwizzle12offsetsMatchEi(%"class.sh::TIntermSwizzle"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0
  %4 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %5 = bitcast i32** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.17"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = icmp eq i64 %9, 4
  br i1 %10, label %11, label %15

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, %1
  br label %15

15:                                               ; preds = %11, %2
  %16 = phi i1 [ false, %2 ], [ %14, %11 ]
  ret i1 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2sh14TIntermSwizzle18writeOffsetsAsXYZWEPNS_13TInfoSinkBaseE(%"class.sh::TIntermSwizzle"* nocapture readonly, %"class.sh::TInfoSinkBase"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %4, %6
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %1, i64 0, i32 0
  br label %11

10:                                               ; preds = %20, %2
  ret void

11:                                               ; preds = %8, %20
  %12 = phi i32* [ %4, %8 ], [ %21, %20 ]
  %13 = load i32, i32* %12, align 4
  %14 = icmp ult i32 %13, 4
  br i1 %14, label %15, label %20

15:                                               ; preds = %11
  %16 = sext i32 %13 to i64
  %17 = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table._ZNK2sh14TIntermSwizzle18writeOffsetsAsXYZWEPNS_13TInfoSinkBaseE, i64 0, i64 %16
  %18 = load i8*, i8** %17, align 8
  %19 = tail call dereferenceable(24) %"class.std::__1::basic_string.26"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.26"* %9, i8* %18) #18
  br label %20

20:                                               ; preds = %11, %15
  %21 = getelementptr inbounds i32, i32* %12, i64 1
  %22 = icmp eq i32* %21, %6
  br i1 %22, label %10, label %11
}

declare void @_ZN2sh5TType18toArrayElementTypeEv(%"class.sh::TType"*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK2sh20TIntermConstantUnion16hasConstantValueEv(%"class.sh::TIntermConstantUnion"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TConstantUnion"* @_ZNK2sh20TIntermConstantUnion16getConstantValueEv(%"class.sh::TIntermConstantUnion"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 1
  %3 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %2, align 8
  ret %"class.sh::TConstantUnion"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TConstantUnion"* @_ZN2sh20TIntermConstantUnion12FoldIndexingERKNS_5TTypeEPKNS_14TConstantUnionEi(%"class.sh::TType"* dereferenceable(184), %"class.sh::TConstantUnion"* readnone, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TType", align 8
  %5 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 10, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %3
  %9 = bitcast %"class.sh::TType"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %9) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 184, i1 false)
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %4, %"class.sh::TType"* dereferenceable(184) %0) #18
  call void @_ZN2sh5TType18toArrayElementTypeEv(%"class.sh::TType"* nonnull %4) #18
  %10 = call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %4) #18
  %11 = sext i32 %2 to i64
  %12 = mul i64 %10, %11
  %13 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1, i64 %12
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %9) #18
  br label %32

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 8
  %16 = load i8, i8* %15, align 8
  %17 = icmp ugt i8 %16, 1
  br i1 %17, label %18, label %32

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 9
  %20 = load i8, i8* %19, align 1
  %21 = icmp ugt i8 %20, 1
  br i1 %21, label %22, label %27

22:                                               ; preds = %18
  %23 = zext i8 %20 to i32
  %24 = mul nsw i32 %23, %2
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1, i64 %25
  br label %32

27:                                               ; preds = %18
  %28 = icmp eq i8 %20, 1
  br i1 %28, label %29, label %32

29:                                               ; preds = %27
  %30 = sext i32 %2 to i64
  %31 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1, i64 %30
  br label %32

32:                                               ; preds = %14, %27, %29, %22, %8
  %33 = phi %"class.sh::TConstantUnion"* [ %13, %8 ], [ %26, %22 ], [ %31, %29 ], [ null, %27 ], [ null, %14 ]
  ret %"class.sh::TConstantUnion"* %33
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh14TIntermSwizzle4foldEPNS_12TDiagnosticsE(%"class.sh::TIntermSwizzle"*, %"class.sh::TDiagnostics"* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = alloca %"class.sh::TType", align 8
  %4 = alloca [4 x i32], align 16
  %5 = alloca %"class.sh::TVector.16", align 8
  %6 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 1
  %7 = bitcast %"class.sh::TIntermTyped"** %6 to %"class.sh::TIntermNode"**
  %8 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %7, align 8
  %9 = bitcast %"class.sh::TIntermNode"* %8 to %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)***
  %10 = load %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)*** %9, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)** %10, i64 12
  %12 = load %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)** %11, align 8
  %13 = tail call %"class.sh::TIntermSwizzle"* %12(%"class.sh::TIntermNode"* %8) #18
  %14 = icmp eq %"class.sh::TIntermSwizzle"* %13, null
  br i1 %14, label %288, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %13, i64 0, i32 3
  %17 = load i8, i8* %16, align 8, !range !55
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %39

19:                                               ; preds = %15
  %20 = bitcast [4 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 0, i64 16, i1 false) #18
  %21 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %13, i64 0, i32 2, i32 0, i32 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %13, i64 0, i32 2, i32 0, i32 0, i32 1
  %24 = load i32*, i32** %23, align 8
  %25 = icmp eq i32* %22, %24
  br i1 %25, label %37, label %28

26:                                               ; preds = %28
  %27 = icmp eq i32* %36, %24
  br i1 %27, label %37, label %28

28:                                               ; preds = %19, %26
  %29 = phi i32* [ %36, %26 ], [ %22, %19 ]
  %30 = load i32, i32* %29, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %32, align 4
  %35 = icmp slt i32 %33, 1
  %36 = getelementptr inbounds i32, i32* %29, i64 1
  br i1 %35, label %26, label %37

37:                                               ; preds = %28, %26, %19
  %38 = phi i8 [ 0, %19 ], [ 1, %28 ], [ 0, %26 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #18
  br label %39

39:                                               ; preds = %15, %37
  %40 = phi i8 [ %38, %37 ], [ 1, %15 ]
  %41 = bitcast %"class.sh::TVector.16"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %41) #18
  %42 = getelementptr inbounds %"class.sh::TVector.16", %"class.sh::TVector.16"* %5, i64 0, i32 0, i32 0, i32 0
  %43 = getelementptr inbounds %"class.sh::TVector.16", %"class.sh::TVector.16"* %5, i64 0, i32 0, i32 0, i32 1
  %44 = getelementptr inbounds %"class.sh::TVector.16", %"class.sh::TVector.16"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %41, i8 0, i64 24, i1 false) #18
  %45 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %46 = load i32*, i32** %45, align 8
  %47 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %48 = load i32*, i32** %47, align 8
  %49 = icmp eq i32* %46, %48
  br i1 %49, label %55, label %50

50:                                               ; preds = %39
  %51 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %13, i64 0, i32 2, i32 0, i32 0, i32 0
  %52 = bitcast i32** %43 to i64*
  %53 = bitcast %"class.sh::TVector.16"* %5 to i64*
  %54 = bitcast i32** %44 to i64*
  br label %79

55:                                               ; preds = %282, %39
  %56 = phi i32* [ null, %39 ], [ %283, %282 ]
  %57 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %13, i64 0, i32 2
  %58 = icmp eq %"class.sh::TVector.16"* %57, %5
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %"class.sh::TVector.16", %"class.sh::TVector.16"* %57, i64 0, i32 0
  %61 = load i32*, i32** %42, align 8
  call void @_ZNSt3__16vectorIi14pool_allocatorIiEE6assignIPiEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.17"* %60, i32* %61, i32* %56) #18
  br label %62

62:                                               ; preds = %55, %59
  %63 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0
  %64 = bitcast %"class.sh::TIntermSwizzle"* %0 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %65 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %64, align 8
  %66 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %65, i64 31
  %67 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %66, align 8
  %68 = call dereferenceable(184) %"class.sh::TType"* %67(%"class.sh::TIntermExpression"* %63) #18
  %69 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %13, i64 0, i32 0, i32 1
  %70 = call dereferenceable(184) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* %69, %"class.sh::TType"* dereferenceable(184) %68) #18
  %71 = and i8 %40, 1
  store i8 %71, i8* %16, align 8
  %72 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %13, i64 0, i32 0, i32 0
  %73 = load i32*, i32** %42, align 8
  %74 = icmp eq i32* %73, null
  br i1 %74, label %78, label %75

75:                                               ; preds = %62
  %76 = ptrtoint i32* %73 to i64
  %77 = bitcast i32** %43 to i64*
  store i64 %76, i64* %77, align 8
  br label %78

78:                                               ; preds = %62, %75
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %41) #18
  br label %407

79:                                               ; preds = %286, %50
  %80 = phi i32* [ null, %50 ], [ %287, %286 ]
  %81 = phi i32* [ null, %50 ], [ %283, %286 ]
  %82 = phi i32* [ %46, %50 ], [ %284, %286 ]
  %83 = load i32, i32* %82, align 4
  %84 = sext i32 %83 to i64
  %85 = load i32*, i32** %51, align 8
  %86 = getelementptr inbounds i32, i32* %85, i64 %84
  %87 = icmp eq i32* %81, %80
  br i1 %87, label %92, label %88

88:                                               ; preds = %79
  %89 = load i32, i32* %86, align 4
  store i32 %89, i32* %81, align 4
  %90 = getelementptr inbounds i32, i32* %81, i64 1
  %91 = ptrtoint i32* %90 to i64
  store i64 %91, i64* %52, align 8
  br label %282

92:                                               ; preds = %79
  %93 = ptrtoint i32* %80 to i64
  %94 = load i64, i64* %53, align 8
  %95 = sub i64 %93, %94
  %96 = ashr exact i64 %95, 2
  %97 = add nsw i64 %96, 1
  %98 = icmp ugt i64 %97, 4611686018427387903
  br i1 %98, label %99, label %101

99:                                               ; preds = %92
  %100 = bitcast %"class.sh::TVector.16"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %100) #19
  unreachable

101:                                              ; preds = %92
  %102 = icmp ult i64 %96, 2305843009213693951
  br i1 %102, label %103, label %108

103:                                              ; preds = %101
  %104 = ashr exact i64 %95, 1
  %105 = icmp ult i64 %104, %97
  %106 = select i1 %105, i64 %97, i64 %104
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %114, label %108

108:                                              ; preds = %103, %101
  %109 = phi i64 [ %106, %103 ], [ 4611686018427387903, %101 ]
  %110 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %111 = shl i64 %109, 2
  %112 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %110, i64 %111) #18
  %113 = bitcast i8* %112 to i32*
  br label %114

114:                                              ; preds = %108, %103
  %115 = phi i64 [ %109, %108 ], [ 0, %103 ]
  %116 = phi i32* [ %113, %108 ], [ null, %103 ]
  %117 = getelementptr inbounds i32, i32* %116, i64 %96
  %118 = getelementptr inbounds i32, i32* %116, i64 %115
  %119 = ptrtoint i32* %118 to i64
  %120 = load i32, i32* %86, align 4
  store i32 %120, i32* %117, align 4
  %121 = getelementptr inbounds i32, i32* %117, i64 1
  %122 = ptrtoint i32* %121 to i64
  %123 = load i32*, i32** %42, align 8
  %124 = ptrtoint i32* %123 to i64
  %125 = load i32*, i32** %43, align 8
  %126 = icmp eq i32* %125, %123
  br i1 %126, label %279, label %127

127:                                              ; preds = %114
  %128 = getelementptr i32, i32* %125, i64 -1
  %129 = ptrtoint i32* %128 to i64
  %130 = sub i64 %129, %124
  %131 = lshr i64 %130, 2
  %132 = add nuw nsw i64 %131, 1
  %133 = icmp ult i64 %132, 8
  br i1 %133, label %227, label %134

134:                                              ; preds = %127
  %135 = getelementptr i32, i32* %116, i64 -1
  %136 = getelementptr i32, i32* %125, i64 -1
  %137 = ptrtoint i32* %136 to i64
  %138 = sub i64 %137, %124
  %139 = lshr i64 %138, 2
  %140 = sub nsw i64 %96, %139
  %141 = getelementptr i32, i32* %135, i64 %140
  %142 = getelementptr i32, i32* %125, i64 -1
  %143 = sub nsw i64 0, %139
  %144 = getelementptr i32, i32* %142, i64 %143
  %145 = icmp ult i32* %141, %125
  %146 = icmp ult i32* %144, %117
  %147 = and i1 %145, %146
  br i1 %147, label %227, label %148

148:                                              ; preds = %134
  %149 = and i64 %132, 9223372036854775800
  %150 = sub nsw i64 0, %149
  %151 = getelementptr i32, i32* %117, i64 %150
  %152 = sub nsw i64 0, %149
  %153 = getelementptr i32, i32* %125, i64 %152
  %154 = add nsw i64 %149, -8
  %155 = lshr exact i64 %154, 3
  %156 = add nuw nsw i64 %155, 1
  %157 = and i64 %156, 1
  %158 = icmp eq i64 %154, 0
  br i1 %158, label %203, label %159

159:                                              ; preds = %148
  %160 = sub nuw nsw i64 %156, %157
  %161 = getelementptr i32, i32* %117, i64 -1
  %162 = getelementptr i32, i32* %125, i64 -1
  %163 = getelementptr i32, i32* %117, i64 -1
  %164 = getelementptr i32, i32* %125, i64 -1
  br label %165

165:                                              ; preds = %165, %159
  %166 = phi i64 [ 0, %159 ], [ %200, %165 ]
  %167 = phi i64 [ %160, %159 ], [ %201, %165 ]
  %168 = sub i64 0, %166
  %169 = sub i64 0, %166
  %170 = getelementptr inbounds i32, i32* %161, i64 %168
  %171 = getelementptr inbounds i32, i32* %162, i64 %169
  %172 = getelementptr inbounds i32, i32* %171, i64 -3
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 4, !alias.scope !114
  %175 = getelementptr inbounds i32, i32* %171, i64 -4
  %176 = getelementptr inbounds i32, i32* %175, i64 -3
  %177 = bitcast i32* %176 to <4 x i32>*
  %178 = load <4 x i32>, <4 x i32>* %177, align 4, !alias.scope !114
  %179 = getelementptr inbounds i32, i32* %170, i64 -3
  %180 = bitcast i32* %179 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %180, align 4, !alias.scope !117, !noalias !114
  %181 = getelementptr inbounds i32, i32* %170, i64 -4
  %182 = getelementptr inbounds i32, i32* %181, i64 -3
  %183 = bitcast i32* %182 to <4 x i32>*
  store <4 x i32> %178, <4 x i32>* %183, align 4, !alias.scope !117, !noalias !114
  %184 = sub nuw nsw i64 -8, %166
  %185 = sub nuw nsw i64 -8, %166
  %186 = getelementptr inbounds i32, i32* %163, i64 %184
  %187 = getelementptr inbounds i32, i32* %164, i64 %185
  %188 = getelementptr inbounds i32, i32* %187, i64 -3
  %189 = bitcast i32* %188 to <4 x i32>*
  %190 = load <4 x i32>, <4 x i32>* %189, align 4, !alias.scope !114
  %191 = getelementptr inbounds i32, i32* %187, i64 -4
  %192 = getelementptr inbounds i32, i32* %191, i64 -3
  %193 = bitcast i32* %192 to <4 x i32>*
  %194 = load <4 x i32>, <4 x i32>* %193, align 4, !alias.scope !114
  %195 = getelementptr inbounds i32, i32* %186, i64 -3
  %196 = bitcast i32* %195 to <4 x i32>*
  store <4 x i32> %190, <4 x i32>* %196, align 4, !alias.scope !117, !noalias !114
  %197 = getelementptr inbounds i32, i32* %186, i64 -4
  %198 = getelementptr inbounds i32, i32* %197, i64 -3
  %199 = bitcast i32* %198 to <4 x i32>*
  store <4 x i32> %194, <4 x i32>* %199, align 4, !alias.scope !117, !noalias !114
  %200 = add i64 %166, 16
  %201 = add i64 %167, -2
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %203, label %165, !llvm.loop !119

203:                                              ; preds = %165, %148
  %204 = phi i64 [ 0, %148 ], [ %200, %165 ]
  %205 = icmp eq i64 %157, 0
  br i1 %205, label %225, label %206

206:                                              ; preds = %203
  %207 = sub i64 0, %204
  %208 = getelementptr i32, i32* %117, i64 -1
  %209 = sub i64 0, %204
  %210 = getelementptr i32, i32* %125, i64 -1
  %211 = getelementptr inbounds i32, i32* %208, i64 %207
  %212 = getelementptr inbounds i32, i32* %210, i64 %209
  %213 = getelementptr inbounds i32, i32* %212, i64 -3
  %214 = bitcast i32* %213 to <4 x i32>*
  %215 = load <4 x i32>, <4 x i32>* %214, align 4, !alias.scope !114
  %216 = getelementptr inbounds i32, i32* %212, i64 -4
  %217 = getelementptr inbounds i32, i32* %216, i64 -3
  %218 = bitcast i32* %217 to <4 x i32>*
  %219 = load <4 x i32>, <4 x i32>* %218, align 4, !alias.scope !114
  %220 = getelementptr inbounds i32, i32* %211, i64 -3
  %221 = bitcast i32* %220 to <4 x i32>*
  store <4 x i32> %215, <4 x i32>* %221, align 4, !alias.scope !117, !noalias !114
  %222 = getelementptr inbounds i32, i32* %211, i64 -4
  %223 = getelementptr inbounds i32, i32* %222, i64 -3
  %224 = bitcast i32* %223 to <4 x i32>*
  store <4 x i32> %219, <4 x i32>* %224, align 4, !alias.scope !117, !noalias !114
  br label %225

225:                                              ; preds = %203, %206
  %226 = icmp eq i64 %132, %149
  br i1 %226, label %279, label %227

227:                                              ; preds = %225, %134, %127
  %228 = phi i32* [ %117, %134 ], [ %117, %127 ], [ %151, %225 ]
  %229 = phi i32* [ %125, %134 ], [ %125, %127 ], [ %153, %225 ]
  %230 = getelementptr i32, i32* %229, i64 -1
  %231 = ptrtoint i32* %230 to i64
  %232 = sub i64 %231, %124
  %233 = lshr i64 %232, 2
  %234 = add nuw nsw i64 %233, 1
  %235 = and i64 %234, 7
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %246, label %237

237:                                              ; preds = %227, %237
  %238 = phi i32* [ %241, %237 ], [ %228, %227 ]
  %239 = phi i32* [ %242, %237 ], [ %229, %227 ]
  %240 = phi i64 [ %244, %237 ], [ %235, %227 ]
  %241 = getelementptr inbounds i32, i32* %238, i64 -1
  %242 = getelementptr inbounds i32, i32* %239, i64 -1
  %243 = load i32, i32* %242, align 4
  store i32 %243, i32* %241, align 4
  %244 = add i64 %240, -1
  %245 = icmp eq i64 %244, 0
  br i1 %245, label %246, label %237, !llvm.loop !120

246:                                              ; preds = %237, %227
  %247 = phi i32* [ undef, %227 ], [ %241, %237 ]
  %248 = phi i32* [ %228, %227 ], [ %241, %237 ]
  %249 = phi i32* [ %229, %227 ], [ %242, %237 ]
  %250 = icmp ult i64 %232, 28
  br i1 %250, label %279, label %251

251:                                              ; preds = %246, %251
  %252 = phi i32* [ %275, %251 ], [ %248, %246 ]
  %253 = phi i32* [ %276, %251 ], [ %249, %246 ]
  %254 = getelementptr inbounds i32, i32* %252, i64 -1
  %255 = getelementptr inbounds i32, i32* %253, i64 -1
  %256 = load i32, i32* %255, align 4
  store i32 %256, i32* %254, align 4
  %257 = getelementptr inbounds i32, i32* %252, i64 -2
  %258 = getelementptr inbounds i32, i32* %253, i64 -2
  %259 = load i32, i32* %258, align 4
  store i32 %259, i32* %257, align 4
  %260 = getelementptr inbounds i32, i32* %252, i64 -3
  %261 = getelementptr inbounds i32, i32* %253, i64 -3
  %262 = load i32, i32* %261, align 4
  store i32 %262, i32* %260, align 4
  %263 = getelementptr inbounds i32, i32* %252, i64 -4
  %264 = getelementptr inbounds i32, i32* %253, i64 -4
  %265 = load i32, i32* %264, align 4
  store i32 %265, i32* %263, align 4
  %266 = getelementptr inbounds i32, i32* %252, i64 -5
  %267 = getelementptr inbounds i32, i32* %253, i64 -5
  %268 = load i32, i32* %267, align 4
  store i32 %268, i32* %266, align 4
  %269 = getelementptr inbounds i32, i32* %252, i64 -6
  %270 = getelementptr inbounds i32, i32* %253, i64 -6
  %271 = load i32, i32* %270, align 4
  store i32 %271, i32* %269, align 4
  %272 = getelementptr inbounds i32, i32* %252, i64 -7
  %273 = getelementptr inbounds i32, i32* %253, i64 -7
  %274 = load i32, i32* %273, align 4
  store i32 %274, i32* %272, align 4
  %275 = getelementptr inbounds i32, i32* %252, i64 -8
  %276 = getelementptr inbounds i32, i32* %253, i64 -8
  %277 = load i32, i32* %276, align 4
  store i32 %277, i32* %275, align 4
  %278 = icmp eq i32* %276, %123
  br i1 %278, label %279, label %251, !llvm.loop !121

279:                                              ; preds = %246, %251, %225, %114
  %280 = phi i32* [ %117, %114 ], [ %151, %225 ], [ %247, %246 ], [ %275, %251 ]
  %281 = ptrtoint i32* %280 to i64
  store i64 %281, i64* %53, align 8
  store i64 %122, i64* %52, align 8
  store i64 %119, i64* %54, align 8
  br label %282

282:                                              ; preds = %88, %279
  %283 = phi i32* [ %90, %88 ], [ %121, %279 ]
  %284 = getelementptr inbounds i32, i32* %82, i64 1
  %285 = icmp eq i32* %284, %48
  br i1 %285, label %55, label %286

286:                                              ; preds = %282
  %287 = load i32*, i32** %44, align 8
  br label %79

288:                                              ; preds = %2
  %289 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %7, align 8
  %290 = bitcast %"class.sh::TIntermNode"* %289 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %291 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %290, align 8
  %292 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %291, i64 5
  %293 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %292, align 8
  %294 = tail call %"class.sh::TIntermConstantUnion"* %293(%"class.sh::TIntermNode"* %289) #18
  %295 = icmp eq %"class.sh::TIntermConstantUnion"* %294, null
  br i1 %295, label %296, label %298

296:                                              ; preds = %288
  %297 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 0
  br label %407

298:                                              ; preds = %288
  %299 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0
  %300 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %301 = bitcast i32** %300 to i64*
  %302 = load i64, i64* %301, align 8
  %303 = bitcast %"class.std::__1::vector.17"* %299 to i64*
  %304 = load i64, i64* %303, align 8
  %305 = sub i64 %302, %304
  %306 = ashr exact i64 %305, 2
  %307 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %306, i64 8)
  %308 = extractvalue { i64, i1 } %307, 1
  %309 = extractvalue { i64, i1 } %307, 0
  %310 = select i1 %308, i64 -1, i64 %309
  %311 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %312 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %311, i64 %310) #18
  %313 = bitcast i8* %312 to %"class.sh::TConstantUnion"*
  %314 = icmp eq i64 %305, 0
  br i1 %314, label %321, label %315

315:                                              ; preds = %298
  %316 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %313, i64 %306
  br label %317

317:                                              ; preds = %317, %315
  %318 = phi %"class.sh::TConstantUnion"* [ %313, %315 ], [ %319, %317 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %318) #18
  %319 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %318, i64 1
  %320 = icmp eq %"class.sh::TConstantUnion"* %319, %316
  br i1 %320, label %321, label %317

321:                                              ; preds = %317, %298
  %322 = load i64, i64* %301, align 8
  %323 = load i64, i64* %303, align 8
  %324 = icmp eq i64 %322, %323
  br i1 %324, label %330, label %325

325:                                              ; preds = %321
  %326 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %294, i64 0, i32 0
  %327 = bitcast %"class.sh::TIntermConstantUnion"* %294 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %328 = bitcast %"class.sh::TIntermConstantUnion"* %294 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)***
  %329 = bitcast %"class.sh::TType"* %3 to i8*
  br label %348

330:                                              ; preds = %395, %321
  %331 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 0
  %332 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %333 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %332, i64 216) #18
  %334 = bitcast %"class.sh::TIntermSwizzle"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %335 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %334, align 8
  %336 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %335, i64 31
  %337 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %336, align 8
  %338 = call dereferenceable(184) %"class.sh::TType"* %337(%"class.sh::TIntermTyped"* %331) #18
  %339 = getelementptr inbounds i8, i8* %333, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %339, i8 0, i64 16, i1 false) #18
  %340 = bitcast i8* %333 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %340, align 8
  %341 = getelementptr inbounds i8, i8* %333, i64 24
  %342 = bitcast i8* %341 to %"class.sh::TType"*
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %342, %"class.sh::TType"* dereferenceable(184) %338) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %340, align 8
  %343 = getelementptr inbounds i8, i8* %333, i64 208
  %344 = bitcast i8* %343 to i8**
  store i8* %312, i8** %344, align 8
  %345 = bitcast i8* %333 to %"class.sh::TIntermTyped"*
  %346 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %347 = bitcast %"struct.sh::TSourceLoc"* %346 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %339, i8* align 4 %347, i64 16, i1 false) #18
  br label %407

348:                                              ; preds = %325, %395
  %349 = phi i64 [ 0, %325 ], [ %401, %395 ]
  %350 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %327, align 8
  %351 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %350, i64 31
  %352 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %351, align 8
  %353 = call dereferenceable(184) %"class.sh::TType"* %352(%"class.sh::TIntermExpression"* %326) #18
  %354 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*** %328, align 8
  %355 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)** %354, i64 29
  %356 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)** %355, align 8
  %357 = call %"class.sh::TConstantUnion"* %356(%"class.sh::TIntermConstantUnion"* nonnull %294) #18
  %358 = load i64, i64* %301, align 8
  %359 = load i64, i64* %303, align 8
  %360 = sub i64 %358, %359
  %361 = ashr exact i64 %360, 2
  %362 = icmp ugt i64 %361, %349
  br i1 %362, label %365, label %363

363:                                              ; preds = %348
  %364 = bitcast %"class.std::__1::vector.17"* %299 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %364) #19
  unreachable

365:                                              ; preds = %348
  %366 = inttoptr i64 %359 to i32*
  %367 = getelementptr inbounds i32, i32* %366, i64 %349
  %368 = load i32, i32* %367, align 4
  %369 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %353, i64 0, i32 10, i32 1
  %370 = load i64, i64* %369, align 8
  %371 = icmp eq i64 %370, 0
  br i1 %371, label %377, label %372

372:                                              ; preds = %365
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %329) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %329, i8 -86, i64 184, i1 false) #18
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %3, %"class.sh::TType"* dereferenceable(184) %353) #18
  call void @_ZN2sh5TType18toArrayElementTypeEv(%"class.sh::TType"* nonnull %3) #18
  %373 = call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %3) #18
  %374 = sext i32 %368 to i64
  %375 = mul i64 %373, %374
  %376 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %357, i64 %375
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %329) #18
  br label %395

377:                                              ; preds = %365
  %378 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %353, i64 0, i32 8
  %379 = load i8, i8* %378, align 8
  %380 = icmp ugt i8 %379, 1
  br i1 %380, label %381, label %395

381:                                              ; preds = %377
  %382 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %353, i64 0, i32 9
  %383 = load i8, i8* %382, align 1
  %384 = icmp ugt i8 %383, 1
  br i1 %384, label %385, label %390

385:                                              ; preds = %381
  %386 = zext i8 %383 to i32
  %387 = mul nsw i32 %368, %386
  %388 = sext i32 %387 to i64
  %389 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %357, i64 %388
  br label %395

390:                                              ; preds = %381
  %391 = icmp eq i8 %383, 1
  br i1 %391, label %392, label %395

392:                                              ; preds = %390
  %393 = sext i32 %368 to i64
  %394 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %357, i64 %393
  br label %395

395:                                              ; preds = %372, %377, %385, %390, %392
  %396 = phi %"class.sh::TConstantUnion"* [ %376, %372 ], [ %389, %385 ], [ %394, %392 ], [ null, %390 ], [ null, %377 ]
  %397 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %313, i64 %349
  %398 = bitcast %"class.sh::TConstantUnion"* %396 to i64*
  %399 = bitcast %"class.sh::TConstantUnion"* %397 to i64*
  %400 = load i64, i64* %398, align 4
  store i64 %400, i64* %399, align 4
  %401 = add nuw i64 %349, 1
  %402 = load i64, i64* %301, align 8
  %403 = load i64, i64* %303, align 8
  %404 = sub i64 %402, %403
  %405 = ashr exact i64 %404, 2
  %406 = icmp ult i64 %401, %405
  br i1 %406, label %348, label %330

407:                                              ; preds = %296, %330, %78
  %408 = phi %"class.sh::TIntermTyped"* [ %72, %78 ], [ %297, %296 ], [ %345, %330 ]
  ret %"class.sh::TIntermTyped"* %408
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh13TIntermBinary4foldEPNS_12TDiagnosticsE(%"class.sh::TIntermBinary"*, %"class.sh::TDiagnostics"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %4 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %3, align 8
  %5 = bitcast %"class.sh::TIntermTyped"* %4 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)***
  %6 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %6, i64 29
  %8 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %7, align 8
  %9 = tail call %"class.sh::TConstantUnion"* %8(%"class.sh::TIntermTyped"* %4) #18
  %10 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 1
  %11 = load i8, i8* %10, align 8
  switch i8 %11, label %130 [
    i8 30, label %12
    i8 44, label %24
    i8 46, label %24
    i8 45, label %128
    i8 47, label %128
    i8 -117, label %128
  ]

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %14 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %13, align 8
  %15 = bitcast %"class.sh::TIntermTyped"* %14 to i1 (%"class.sh::TIntermTyped"*)***
  %16 = load i1 (%"class.sh::TIntermTyped"*)**, i1 (%"class.sh::TIntermTyped"*)*** %15, align 8
  %17 = getelementptr inbounds i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %16, i64 30
  %18 = load i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %17, align 8
  %19 = tail call zeroext i1 %18(%"class.sh::TIntermTyped"* %14) #18
  br i1 %19, label %20, label %22

20:                                               ; preds = %12
  %21 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0
  br label %182

22:                                               ; preds = %12
  %23 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %3, align 8
  br label %182

24:                                               ; preds = %2, %2
  %25 = icmp eq %"class.sh::TConstantUnion"* %9, null
  br i1 %25, label %26, label %28

26:                                               ; preds = %24
  %27 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0
  br label %182

28:                                               ; preds = %24
  %29 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* nonnull %9) #18
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %32 = bitcast %"class.sh::TIntermTyped"** %31 to %"class.sh::TIntermNode"**
  %33 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %32, align 8
  %34 = bitcast %"class.sh::TIntermNode"* %33 to %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)***
  %35 = load %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)*** %34, align 8
  %36 = getelementptr inbounds %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)** %35, i64 7
  %37 = load %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)** %36, align 8
  %38 = tail call %"class.sh::TIntermAggregate"* %37(%"class.sh::TIntermNode"* %33) #18
  %39 = icmp eq %"class.sh::TIntermAggregate"* %38, null
  br i1 %39, label %85, label %40

40:                                               ; preds = %28
  %41 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %38, i64 0, i32 0, i32 1
  %42 = load i8, i8* %41, align 8
  %43 = icmp eq i8 %42, -119
  br i1 %43, label %44, label %85

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %38, i64 0, i32 0, i32 0, i32 0
  %46 = bitcast %"class.sh::TIntermAggregate"* %38 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %47 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %46, align 8
  %48 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %47, i64 31
  %49 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %48, align 8
  %50 = tail call dereferenceable(184) %"class.sh::TType"* %49(%"class.sh::TIntermTyped"* %45) #18
  %51 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %50, i64 0, i32 10, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %85, label %54

54:                                               ; preds = %44
  %55 = bitcast %"class.sh::TIntermAggregate"* %38 to i1 (%"class.sh::TIntermAggregate"*)***
  %56 = load i1 (%"class.sh::TIntermAggregate"*)**, i1 (%"class.sh::TIntermAggregate"*)*** %55, align 8
  %57 = getelementptr inbounds i1 (%"class.sh::TIntermAggregate"*)*, i1 (%"class.sh::TIntermAggregate"*)** %56, i64 30
  %58 = load i1 (%"class.sh::TIntermAggregate"*)*, i1 (%"class.sh::TIntermAggregate"*)** %57, align 8
  %59 = tail call zeroext i1 %58(%"class.sh::TIntermAggregate"* nonnull %38) #18
  br i1 %59, label %85, label %60

60:                                               ; preds = %54
  %61 = bitcast %"class.sh::TIntermAggregate"* %38 to %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)***
  %62 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)*** %61, align 8
  %63 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)** %62, i64 32
  %64 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)** %63, align 8
  %65 = tail call %"class.sh::TVector.8"* %64(%"class.sh::TIntermAggregate"* nonnull %38) #18
  %66 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %65, i64 0, i32 0, i32 0, i32 1
  %67 = bitcast %"class.sh::TIntermNode"*** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = bitcast %"class.sh::TVector.8"* %65 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = sub i64 %68, %70
  %72 = ashr exact i64 %71, 3
  %73 = icmp ugt i64 %72, %30
  br i1 %73, label %76, label %74

74:                                               ; preds = %60
  %75 = bitcast %"class.sh::TVector.8"* %65 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %75) #19
  unreachable

76:                                               ; preds = %60
  %77 = inttoptr i64 %70 to %"class.sh::TIntermNode"**
  %78 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %77, i64 %30
  %79 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %78, align 8
  %80 = bitcast %"class.sh::TIntermNode"* %79 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %81 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %80, align 8
  %82 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %81, i64 4
  %83 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %82, align 8
  %84 = tail call %"class.sh::TIntermTyped"* %83(%"class.sh::TIntermNode"* %79) #18
  br label %182

85:                                               ; preds = %44, %28, %54, %40
  %86 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %32, align 8
  %87 = bitcast %"class.sh::TIntermNode"* %86 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %88 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %87, align 8
  %89 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %88, i64 5
  %90 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %89, align 8
  %91 = tail call %"class.sh::TIntermConstantUnion"* %90(%"class.sh::TIntermNode"* %86) #18
  %92 = icmp eq %"class.sh::TIntermConstantUnion"* %91, null
  br i1 %92, label %93, label %101

93:                                               ; preds = %85
  %94 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0
  %95 = bitcast %"class.sh::TIntermBinary"* %0 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %96 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %95, align 8
  %97 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %96, i64 31
  %98 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %97, align 8
  %99 = tail call dereferenceable(184) %"class.sh::TType"* %98(%"class.sh::TIntermExpression"* %94) #18
  %100 = tail call zeroext i1 @_ZNK2sh5TType27canReplaceWithConstantUnionEv(%"class.sh::TType"* %99) #18
  br i1 %100, label %101, label %126

101:                                              ; preds = %85, %93
  %102 = bitcast %"class.sh::TIntermBinary"* %0 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermBinary"*)***
  %103 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermBinary"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermBinary"*)*** %102, align 8
  %104 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermBinary"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermBinary"*)** %103, i64 29
  %105 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermBinary"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermBinary"*)** %104, align 8
  %106 = tail call %"class.sh::TConstantUnion"* %105(%"class.sh::TIntermBinary"* %0) #18
  %107 = icmp eq %"class.sh::TConstantUnion"* %106, null
  %108 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0
  br i1 %107, label %182, label %109

109:                                              ; preds = %101
  %110 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %111 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %110, i64 216) #18
  %112 = bitcast %"class.sh::TIntermBinary"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %113 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %112, align 8
  %114 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %113, i64 31
  %115 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %114, align 8
  %116 = tail call dereferenceable(184) %"class.sh::TType"* %115(%"class.sh::TIntermTyped"* %108) #18
  %117 = getelementptr inbounds i8, i8* %111, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %117, i8 0, i64 16, i1 false) #18
  %118 = bitcast i8* %111 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %118, align 8
  %119 = getelementptr inbounds i8, i8* %111, i64 24
  %120 = bitcast i8* %119 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %120, %"class.sh::TType"* dereferenceable(184) %116) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %118, align 8
  %121 = getelementptr inbounds i8, i8* %111, i64 208
  %122 = bitcast i8* %121 to %"class.sh::TConstantUnion"**
  store %"class.sh::TConstantUnion"* %106, %"class.sh::TConstantUnion"** %122, align 8
  %123 = bitcast i8* %111 to %"class.sh::TIntermTyped"*
  %124 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %125 = bitcast %"struct.sh::TSourceLoc"* %124 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 4 %125, i64 16, i1 false) #18
  br label %182

126:                                              ; preds = %93
  %127 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0
  br label %182

128:                                              ; preds = %2, %2, %2
  %129 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0
  br label %182

130:                                              ; preds = %2
  %131 = icmp eq %"class.sh::TConstantUnion"* %9, null
  br i1 %131, label %132, label %134

132:                                              ; preds = %130
  %133 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0
  br label %182

134:                                              ; preds = %130
  %135 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %136 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %135, align 8
  %137 = bitcast %"class.sh::TIntermTyped"* %136 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)***
  %138 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*** %137, align 8
  %139 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %138, i64 29
  %140 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %139, align 8
  %141 = tail call %"class.sh::TConstantUnion"* %140(%"class.sh::TIntermTyped"* %136) #18
  %142 = icmp eq %"class.sh::TConstantUnion"* %141, null
  br i1 %142, label %143, label %145

143:                                              ; preds = %134
  %144 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0
  br label %182

145:                                              ; preds = %134
  %146 = load i8, i8* %10, align 8
  %147 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %135, align 8
  %148 = bitcast %"class.sh::TIntermTyped"* %147 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %149 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %148, align 8
  %150 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %149, i64 31
  %151 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %150, align 8
  %152 = tail call dereferenceable(184) %"class.sh::TType"* %151(%"class.sh::TIntermTyped"* %147) #18
  %153 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %3, align 8
  %154 = bitcast %"class.sh::TIntermTyped"* %153 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %155 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %154, align 8
  %156 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %155, i64 31
  %157 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %156, align 8
  %158 = tail call dereferenceable(184) %"class.sh::TType"* %157(%"class.sh::TIntermTyped"* %153) #18
  %159 = bitcast %"class.sh::TIntermTyped"** %135 to %"class.sh::TIntermNode"**
  %160 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %159, align 8
  %161 = getelementptr inbounds %"class.sh::TIntermNode", %"class.sh::TIntermNode"* %160, i64 0, i32 1
  %162 = tail call %"class.sh::TConstantUnion"* @_ZN2sh20TIntermConstantUnion10FoldBinaryE9TOperatorPKNS_14TConstantUnionERKNS_5TTypeES4_S7_PNS_12TDiagnosticsERKNS_10TSourceLocE(i8 zeroext %146, %"class.sh::TConstantUnion"* nonnull %141, %"class.sh::TType"* dereferenceable(184) %152, %"class.sh::TConstantUnion"* nonnull %9, %"class.sh::TType"* dereferenceable(184) %158, %"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* dereferenceable(16) %161)
  %163 = icmp eq %"class.sh::TConstantUnion"* %162, null
  %164 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0
  br i1 %163, label %182, label %165

165:                                              ; preds = %145
  %166 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %167 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %166, i64 216) #18
  %168 = bitcast %"class.sh::TIntermBinary"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %169 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %168, align 8
  %170 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %169, i64 31
  %171 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %170, align 8
  %172 = tail call dereferenceable(184) %"class.sh::TType"* %171(%"class.sh::TIntermTyped"* %164) #18
  %173 = getelementptr inbounds i8, i8* %167, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %173, i8 0, i64 16, i1 false) #18
  %174 = bitcast i8* %167 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %174, align 8
  %175 = getelementptr inbounds i8, i8* %167, i64 24
  %176 = bitcast i8* %175 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %176, %"class.sh::TType"* dereferenceable(184) %172) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %174, align 8
  %177 = getelementptr inbounds i8, i8* %167, i64 208
  %178 = bitcast i8* %177 to %"class.sh::TConstantUnion"**
  store %"class.sh::TConstantUnion"* %162, %"class.sh::TConstantUnion"** %178, align 8
  %179 = bitcast i8* %167 to %"class.sh::TIntermTyped"*
  %180 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %181 = bitcast %"struct.sh::TSourceLoc"* %180 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %173, i8* align 4 %181, i64 16, i1 false) #18
  br label %182

182:                                              ; preds = %143, %145, %165, %76, %126, %101, %109, %132, %128, %26, %22, %20
  %183 = phi %"class.sh::TIntermTyped"* [ %133, %132 ], [ %129, %128 ], [ %27, %26 ], [ %21, %20 ], [ %23, %22 ], [ %127, %126 ], [ %84, %76 ], [ %123, %109 ], [ %108, %101 ], [ %144, %143 ], [ %179, %165 ], [ %164, %145 ]
  ret %"class.sh::TIntermTyped"* %183
}

declare i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK2sh5TType27canReplaceWithConstantUnionEv(%"class.sh::TType"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TConstantUnion"* @_ZN2sh20TIntermConstantUnion10FoldBinaryE9TOperatorPKNS_14TConstantUnionERKNS_5TTypeES4_S7_PNS_12TDiagnosticsERKNS_10TSourceLocE(i8 zeroext, %"class.sh::TConstantUnion"*, %"class.sh::TType"* dereferenceable(184), %"class.sh::TConstantUnion"*, %"class.sh::TType"* dereferenceable(184), %"class.sh::TDiagnostics"*, %"struct.sh::TSourceLoc"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %8 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %2) #18
  %9 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %4) #18
  %10 = icmp eq i64 %9, 1
  %11 = icmp ugt i64 %8, 1
  %12 = and i1 %11, %10
  br i1 %12, label %13, label %106

13:                                               ; preds = %7
  %14 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %8, i64 8) #18
  %15 = extractvalue { i64, i1 } %14, 1
  %16 = extractvalue { i64, i1 } %14, 0
  %17 = select i1 %15, i64 -1, i64 %16
  %18 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %19 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %18, i64 %17) #18
  %20 = bitcast i8* %19 to %"class.sh::TConstantUnion"*
  %21 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %20, i64 %8
  br label %22

22:                                               ; preds = %22, %13
  %23 = phi %"class.sh::TConstantUnion"* [ %20, %13 ], [ %24, %22 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %23) #18
  %24 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 1
  %25 = icmp eq %"class.sh::TConstantUnion"* %24, %21
  br i1 %25, label %26, label %22

26:                                               ; preds = %22
  %27 = bitcast %"class.sh::TConstantUnion"* %3 to i64*
  %28 = icmp ult i64 %8, 4
  br i1 %28, label %94, label %29

29:                                               ; preds = %26
  %30 = add i64 %8, -1
  %31 = icmp ugt i64 %30, 4294967295
  %32 = trunc i64 %30 to i32
  %33 = icmp eq i32 %32, -1
  %34 = or i1 %33, %31
  br i1 %34, label %94, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.sh::TConstantUnion"* %3 to i8*
  %37 = getelementptr i8, i8* %36, i64 1
  %38 = shl nsw i64 %8, 3
  %39 = getelementptr i8, i8* %19, i64 %38
  %40 = bitcast %"class.sh::TConstantUnion"* %3 to i8*
  %41 = icmp ugt i8* %39, %40
  %42 = icmp ult i8* %19, %37
  %43 = and i1 %41, %42
  br i1 %43, label %94, label %44

44:                                               ; preds = %35
  %45 = and i64 %8, -4
  %46 = trunc i64 %45 to i32
  %47 = add i64 %45, -4
  %48 = lshr exact i64 %47, 2
  %49 = add nuw nsw i64 %48, 1
  %50 = and i64 %49, 1
  %51 = icmp eq i64 %47, 0
  br i1 %51, label %79, label %52

52:                                               ; preds = %44
  %53 = sub nuw nsw i64 %49, %50
  %54 = load i64, i64* %27, align 4, !alias.scope !122, !noalias !125
  %55 = insertelement <2 x i64> undef, i64 %54, i32 0
  %56 = shufflevector <2 x i64> %55, <2 x i64> undef, <2 x i32> zeroinitializer
  %57 = insertelement <2 x i64> undef, i64 %54, i32 0
  %58 = shufflevector <2 x i64> %57, <2 x i64> undef, <2 x i32> zeroinitializer
  %59 = load i64, i64* %27, align 4, !alias.scope !122, !noalias !125
  %60 = insertelement <2 x i64> undef, i64 %59, i32 0
  %61 = shufflevector <2 x i64> %60, <2 x i64> undef, <2 x i32> zeroinitializer
  %62 = insertelement <2 x i64> undef, i64 %59, i32 0
  %63 = shufflevector <2 x i64> %62, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %64

64:                                               ; preds = %64, %52
  %65 = phi i64 [ 0, %52 ], [ %76, %64 ]
  %66 = phi i64 [ %53, %52 ], [ %77, %64 ]
  %67 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %20, i64 %65
  %68 = bitcast %"class.sh::TConstantUnion"* %67 to <2 x i64>*
  store <2 x i64> %56, <2 x i64>* %68, align 4, !alias.scope !125
  %69 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %67, i64 2
  %70 = bitcast %"class.sh::TConstantUnion"* %69 to <2 x i64>*
  store <2 x i64> %58, <2 x i64>* %70, align 4, !alias.scope !125
  %71 = or i64 %65, 4
  %72 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %20, i64 %71
  %73 = bitcast %"class.sh::TConstantUnion"* %72 to <2 x i64>*
  store <2 x i64> %61, <2 x i64>* %73, align 4, !alias.scope !125
  %74 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %72, i64 2
  %75 = bitcast %"class.sh::TConstantUnion"* %74 to <2 x i64>*
  store <2 x i64> %63, <2 x i64>* %75, align 4, !alias.scope !125
  %76 = add i64 %65, 8
  %77 = add i64 %66, -2
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %64, !llvm.loop !127

79:                                               ; preds = %64, %44
  %80 = phi i64 [ 0, %44 ], [ %76, %64 ]
  %81 = icmp eq i64 %50, 0
  br i1 %81, label %92, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %20, i64 %80
  %84 = load i64, i64* %27, align 4, !alias.scope !122, !noalias !125
  %85 = insertelement <2 x i64> undef, i64 %84, i32 0
  %86 = shufflevector <2 x i64> %85, <2 x i64> undef, <2 x i32> zeroinitializer
  %87 = insertelement <2 x i64> undef, i64 %84, i32 0
  %88 = shufflevector <2 x i64> %87, <2 x i64> undef, <2 x i32> zeroinitializer
  %89 = bitcast %"class.sh::TConstantUnion"* %83 to <2 x i64>*
  store <2 x i64> %86, <2 x i64>* %89, align 4, !alias.scope !125
  %90 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %83, i64 2
  %91 = bitcast %"class.sh::TConstantUnion"* %90 to <2 x i64>*
  store <2 x i64> %88, <2 x i64>* %91, align 4, !alias.scope !125
  br label %92

92:                                               ; preds = %79, %82
  %93 = icmp eq i64 %8, %45
  br i1 %93, label %209, label %94

94:                                               ; preds = %92, %35, %29, %26
  %95 = phi i64 [ 0, %35 ], [ 0, %29 ], [ 0, %26 ], [ %45, %92 ]
  %96 = phi i32 [ 0, %35 ], [ 0, %29 ], [ 0, %26 ], [ %46, %92 ]
  br label %97

97:                                               ; preds = %94, %97
  %98 = phi i64 [ %104, %97 ], [ %95, %94 ]
  %99 = phi i32 [ %103, %97 ], [ %96, %94 ]
  %100 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %20, i64 %98
  %101 = bitcast %"class.sh::TConstantUnion"* %100 to i64*
  %102 = load i64, i64* %27, align 4
  store i64 %102, i64* %101, align 4
  %103 = add i32 %99, 1
  %104 = zext i32 %103 to i64
  %105 = icmp ugt i64 %8, %104
  br i1 %105, label %97, label %209, !llvm.loop !128

106:                                              ; preds = %7
  %107 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %4) #18
  %108 = icmp ugt i64 %107, 1
  %109 = icmp eq i64 %8, 1
  %110 = and i1 %109, %108
  br i1 %110, label %111, label %209

111:                                              ; preds = %106
  %112 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %4) #18
  %113 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %112, i64 8) #18
  %114 = extractvalue { i64, i1 } %113, 1
  %115 = extractvalue { i64, i1 } %113, 0
  %116 = select i1 %114, i64 -1, i64 %115
  %117 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %118 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %117, i64 %116) #18
  %119 = bitcast i8* %118 to %"class.sh::TConstantUnion"*
  %120 = icmp eq i64 %112, 0
  br i1 %120, label %207, label %121

121:                                              ; preds = %111
  %122 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %119, i64 %112
  br label %123

123:                                              ; preds = %123, %121
  %124 = phi %"class.sh::TConstantUnion"* [ %119, %121 ], [ %125, %123 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %124) #18
  %125 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %124, i64 1
  %126 = icmp eq %"class.sh::TConstantUnion"* %125, %122
  br i1 %126, label %127, label %123

127:                                              ; preds = %123
  %128 = bitcast %"class.sh::TConstantUnion"* %1 to i64*
  %129 = icmp ult i64 %112, 4
  br i1 %129, label %195, label %130

130:                                              ; preds = %127
  %131 = add i64 %112, -1
  %132 = icmp ugt i64 %131, 4294967295
  %133 = trunc i64 %131 to i32
  %134 = icmp eq i32 %133, -1
  %135 = or i1 %134, %132
  br i1 %135, label %195, label %136

136:                                              ; preds = %130
  %137 = bitcast %"class.sh::TConstantUnion"* %1 to i8*
  %138 = getelementptr i8, i8* %137, i64 1
  %139 = shl nsw i64 %112, 3
  %140 = getelementptr i8, i8* %118, i64 %139
  %141 = bitcast %"class.sh::TConstantUnion"* %1 to i8*
  %142 = icmp ugt i8* %140, %141
  %143 = icmp ult i8* %118, %138
  %144 = and i1 %142, %143
  br i1 %144, label %195, label %145

145:                                              ; preds = %136
  %146 = and i64 %112, -4
  %147 = trunc i64 %146 to i32
  %148 = add i64 %146, -4
  %149 = lshr exact i64 %148, 2
  %150 = add nuw nsw i64 %149, 1
  %151 = and i64 %150, 1
  %152 = icmp eq i64 %148, 0
  br i1 %152, label %180, label %153

153:                                              ; preds = %145
  %154 = sub nuw nsw i64 %150, %151
  %155 = load i64, i64* %128, align 4, !alias.scope !129, !noalias !132
  %156 = insertelement <2 x i64> undef, i64 %155, i32 0
  %157 = shufflevector <2 x i64> %156, <2 x i64> undef, <2 x i32> zeroinitializer
  %158 = insertelement <2 x i64> undef, i64 %155, i32 0
  %159 = shufflevector <2 x i64> %158, <2 x i64> undef, <2 x i32> zeroinitializer
  %160 = load i64, i64* %128, align 4, !alias.scope !129, !noalias !132
  %161 = insertelement <2 x i64> undef, i64 %160, i32 0
  %162 = shufflevector <2 x i64> %161, <2 x i64> undef, <2 x i32> zeroinitializer
  %163 = insertelement <2 x i64> undef, i64 %160, i32 0
  %164 = shufflevector <2 x i64> %163, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %165

165:                                              ; preds = %165, %153
  %166 = phi i64 [ 0, %153 ], [ %177, %165 ]
  %167 = phi i64 [ %154, %153 ], [ %178, %165 ]
  %168 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %119, i64 %166
  %169 = bitcast %"class.sh::TConstantUnion"* %168 to <2 x i64>*
  store <2 x i64> %157, <2 x i64>* %169, align 4, !alias.scope !132
  %170 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %168, i64 2
  %171 = bitcast %"class.sh::TConstantUnion"* %170 to <2 x i64>*
  store <2 x i64> %159, <2 x i64>* %171, align 4, !alias.scope !132
  %172 = or i64 %166, 4
  %173 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %119, i64 %172
  %174 = bitcast %"class.sh::TConstantUnion"* %173 to <2 x i64>*
  store <2 x i64> %162, <2 x i64>* %174, align 4, !alias.scope !132
  %175 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %173, i64 2
  %176 = bitcast %"class.sh::TConstantUnion"* %175 to <2 x i64>*
  store <2 x i64> %164, <2 x i64>* %176, align 4, !alias.scope !132
  %177 = add i64 %166, 8
  %178 = add i64 %167, -2
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %180, label %165, !llvm.loop !134

180:                                              ; preds = %165, %145
  %181 = phi i64 [ 0, %145 ], [ %177, %165 ]
  %182 = icmp eq i64 %151, 0
  br i1 %182, label %193, label %183

183:                                              ; preds = %180
  %184 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %119, i64 %181
  %185 = load i64, i64* %128, align 4, !alias.scope !129, !noalias !132
  %186 = insertelement <2 x i64> undef, i64 %185, i32 0
  %187 = shufflevector <2 x i64> %186, <2 x i64> undef, <2 x i32> zeroinitializer
  %188 = insertelement <2 x i64> undef, i64 %185, i32 0
  %189 = shufflevector <2 x i64> %188, <2 x i64> undef, <2 x i32> zeroinitializer
  %190 = bitcast %"class.sh::TConstantUnion"* %184 to <2 x i64>*
  store <2 x i64> %187, <2 x i64>* %190, align 4, !alias.scope !132
  %191 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %184, i64 2
  %192 = bitcast %"class.sh::TConstantUnion"* %191 to <2 x i64>*
  store <2 x i64> %189, <2 x i64>* %192, align 4, !alias.scope !132
  br label %193

193:                                              ; preds = %180, %183
  %194 = icmp eq i64 %112, %146
  br i1 %194, label %207, label %195

195:                                              ; preds = %193, %136, %130, %127
  %196 = phi i64 [ 0, %136 ], [ 0, %130 ], [ 0, %127 ], [ %146, %193 ]
  %197 = phi i32 [ 0, %136 ], [ 0, %130 ], [ 0, %127 ], [ %147, %193 ]
  br label %198

198:                                              ; preds = %195, %198
  %199 = phi i64 [ %205, %198 ], [ %196, %195 ]
  %200 = phi i32 [ %204, %198 ], [ %197, %195 ]
  %201 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %119, i64 %199
  %202 = bitcast %"class.sh::TConstantUnion"* %201 to i64*
  %203 = load i64, i64* %128, align 4
  store i64 %203, i64* %202, align 4
  %204 = add i32 %200, 1
  %205 = zext i32 %204 to i64
  %206 = icmp ugt i64 %112, %205
  br i1 %206, label %198, label %207, !llvm.loop !135

207:                                              ; preds = %198, %193, %111
  %208 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %4) #18
  br label %209

209:                                              ; preds = %97, %92, %106, %207
  %210 = phi i64 [ %208, %207 ], [ %8, %106 ], [ %8, %92 ], [ %8, %97 ]
  %211 = phi %"class.sh::TConstantUnion"* [ %3, %207 ], [ %3, %106 ], [ %20, %92 ], [ %20, %97 ]
  %212 = phi %"class.sh::TConstantUnion"* [ %119, %207 ], [ %1, %106 ], [ %1, %92 ], [ %1, %97 ]
  switch i8 %0, label %821 [
    i8 13, label %213
    i8 14, label %238
    i8 15, label %263
    i8 31, label %263
    i8 34, label %263
    i8 35, label %288
    i8 16, label %353
    i8 17, label %353
    i8 33, label %473
    i8 32, label %516
    i8 38, label %560
    i8 36, label %585
    i8 37, label %610
    i8 41, label %637
    i8 42, label %662
    i8 43, label %687
    i8 39, label %712
    i8 40, label %737
    i8 20, label %762
    i8 21, label %770
    i8 22, label %778
    i8 23, label %787
    i8 18, label %796
    i8 19, label %796
  ]

213:                                              ; preds = %209
  %214 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %215 = extractvalue { i64, i1 } %214, 1
  %216 = extractvalue { i64, i1 } %214, 0
  %217 = select i1 %215, i64 -1, i64 %216
  %218 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %219 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %218, i64 %217) #18
  %220 = bitcast i8* %219 to %"class.sh::TConstantUnion"*
  %221 = icmp eq i64 %210, 0
  br i1 %221, label %821, label %222

222:                                              ; preds = %213
  %223 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %220, i64 %210
  br label %224

224:                                              ; preds = %224, %222
  %225 = phi %"class.sh::TConstantUnion"* [ %220, %222 ], [ %226, %224 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %225) #18
  %226 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %225, i64 1
  %227 = icmp eq %"class.sh::TConstantUnion"* %226, %223
  br i1 %227, label %228, label %224

228:                                              ; preds = %224
  br i1 %221, label %821, label %229

229:                                              ; preds = %228, %229
  %230 = phi i64 [ %236, %229 ], [ 0, %228 ]
  %231 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %230
  %232 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %230
  %233 = tail call i64 @_ZN2sh14TConstantUnion3addERKS0_S2_PNS_12TDiagnosticsERKNS_10TSourceLocE(%"class.sh::TConstantUnion"* dereferenceable(8) %231, %"class.sh::TConstantUnion"* dereferenceable(8) %232, %"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* dereferenceable(16) %6) #18
  %234 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %220, i64 %230
  %235 = bitcast %"class.sh::TConstantUnion"* %234 to i64*
  store i64 %233, i64* %235, align 4
  %236 = add nuw i64 %230, 1
  %237 = icmp eq i64 %236, %210
  br i1 %237, label %821, label %229

238:                                              ; preds = %209
  %239 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %240 = extractvalue { i64, i1 } %239, 1
  %241 = extractvalue { i64, i1 } %239, 0
  %242 = select i1 %240, i64 -1, i64 %241
  %243 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %244 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %243, i64 %242) #18
  %245 = bitcast i8* %244 to %"class.sh::TConstantUnion"*
  %246 = icmp eq i64 %210, 0
  br i1 %246, label %821, label %247

247:                                              ; preds = %238
  %248 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %245, i64 %210
  br label %249

249:                                              ; preds = %249, %247
  %250 = phi %"class.sh::TConstantUnion"* [ %245, %247 ], [ %251, %249 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %250) #18
  %251 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %250, i64 1
  %252 = icmp eq %"class.sh::TConstantUnion"* %251, %248
  br i1 %252, label %253, label %249

253:                                              ; preds = %249
  br i1 %246, label %821, label %254

254:                                              ; preds = %253, %254
  %255 = phi i64 [ %261, %254 ], [ 0, %253 ]
  %256 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %255
  %257 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %255
  %258 = tail call i64 @_ZN2sh14TConstantUnion3subERKS0_S2_PNS_12TDiagnosticsERKNS_10TSourceLocE(%"class.sh::TConstantUnion"* dereferenceable(8) %256, %"class.sh::TConstantUnion"* dereferenceable(8) %257, %"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* dereferenceable(16) %6) #18
  %259 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %245, i64 %255
  %260 = bitcast %"class.sh::TConstantUnion"* %259 to i64*
  store i64 %258, i64* %260, align 4
  %261 = add nuw i64 %255, 1
  %262 = icmp eq i64 %261, %210
  br i1 %262, label %821, label %254

263:                                              ; preds = %209, %209, %209
  %264 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %265 = extractvalue { i64, i1 } %264, 1
  %266 = extractvalue { i64, i1 } %264, 0
  %267 = select i1 %265, i64 -1, i64 %266
  %268 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %269 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %268, i64 %267) #18
  %270 = bitcast i8* %269 to %"class.sh::TConstantUnion"*
  %271 = icmp eq i64 %210, 0
  br i1 %271, label %821, label %272

272:                                              ; preds = %263
  %273 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %270, i64 %210
  br label %274

274:                                              ; preds = %274, %272
  %275 = phi %"class.sh::TConstantUnion"* [ %270, %272 ], [ %276, %274 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %275) #18
  %276 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %275, i64 1
  %277 = icmp eq %"class.sh::TConstantUnion"* %276, %273
  br i1 %277, label %278, label %274

278:                                              ; preds = %274
  br i1 %271, label %821, label %279

279:                                              ; preds = %278, %279
  %280 = phi i64 [ %286, %279 ], [ 0, %278 ]
  %281 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %280
  %282 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %280
  %283 = tail call i64 @_ZN2sh14TConstantUnion3mulERKS0_S2_PNS_12TDiagnosticsERKNS_10TSourceLocE(%"class.sh::TConstantUnion"* dereferenceable(8) %281, %"class.sh::TConstantUnion"* dereferenceable(8) %282, %"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* dereferenceable(16) %6) #18
  %284 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %270, i64 %280
  %285 = bitcast %"class.sh::TConstantUnion"* %284 to i64*
  store i64 %283, i64* %285, align 4
  %286 = add nuw i64 %280, 1
  %287 = icmp eq i64 %286, %210
  br i1 %287, label %821, label %279

288:                                              ; preds = %209
  %289 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %2, i64 0, i32 8
  %290 = load i8, i8* %289, align 8
  %291 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %2, i64 0, i32 9
  %292 = load i8, i8* %291, align 1
  %293 = zext i8 %292 to i32
  %294 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %4, i64 0, i32 8
  %295 = load i8, i8* %294, align 8
  %296 = zext i8 %295 to i32
  %297 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %4, i64 0, i32 9
  %298 = load i8, i8* %297, align 1
  %299 = mul nuw nsw i32 %296, %293
  %300 = shl nuw nsw i32 %299, 3
  %301 = zext i32 %300 to i64
  %302 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %303 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %302, i64 %301) #18
  %304 = bitcast i8* %303 to %"class.sh::TConstantUnion"*
  %305 = icmp eq i32 %299, 0
  br i1 %305, label %313, label %306

306:                                              ; preds = %288
  %307 = zext i32 %299 to i64
  %308 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %304, i64 %307
  br label %309

309:                                              ; preds = %309, %306
  %310 = phi %"class.sh::TConstantUnion"* [ %304, %306 ], [ %311, %309 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %310) #18
  %311 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %310, i64 1
  %312 = icmp eq %"class.sh::TConstantUnion"* %311, %308
  br i1 %312, label %313, label %309

313:                                              ; preds = %309, %288
  %314 = icmp eq i8 %292, 0
  br i1 %314, label %821, label %315

315:                                              ; preds = %313
  %316 = icmp eq i8 %295, 0
  %317 = icmp eq i8 %290, 0
  %318 = zext i8 %292 to i64
  %319 = zext i8 %298 to i64
  %320 = zext i8 %295 to i64
  %321 = zext i8 %290 to i64
  br label %322

322:                                              ; preds = %324, %315
  %323 = phi i64 [ 0, %315 ], [ %325, %324 ]
  br i1 %316, label %324, label %327

324:                                              ; preds = %336, %322
  %325 = add nuw nsw i64 %323, 1
  %326 = icmp eq i64 %325, %318
  br i1 %326, label %821, label %322

327:                                              ; preds = %322, %336
  %328 = phi i64 [ %337, %336 ], [ 0, %322 ]
  %329 = mul nuw nsw i64 %328, %318
  %330 = add nuw nsw i64 %329, %323
  %331 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %304, i64 %330
  %332 = bitcast %"class.sh::TConstantUnion"* %331 to float*
  store float 0.000000e+00, float* %332, align 4
  %333 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %304, i64 %330, i32 1
  store i32 1, i32* %333, align 4
  br i1 %317, label %336, label %334

334:                                              ; preds = %327
  %335 = mul nuw nsw i64 %328, %319
  br label %339

336:                                              ; preds = %339, %327
  %337 = add nuw nsw i64 %328, 1
  %338 = icmp eq i64 %337, %320
  br i1 %338, label %324, label %327

339:                                              ; preds = %339, %334
  %340 = phi i64 [ 0, %334 ], [ %351, %339 ]
  %341 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %331) #18
  %342 = mul nuw nsw i64 %340, %318
  %343 = add nuw nsw i64 %342, %323
  %344 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %343
  %345 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %344) #18
  %346 = add nuw nsw i64 %340, %335
  %347 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %346
  %348 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %347) #18
  %349 = fmul float %345, %348
  %350 = fadd float %341, %349
  store float %350, float* %332, align 4
  store i32 1, i32* %333, align 4
  %351 = add nuw nsw i64 %340, 1
  %352 = icmp eq i64 %351, %321
  br i1 %352, label %336, label %339

353:                                              ; preds = %209, %209
  %354 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %355 = extractvalue { i64, i1 } %354, 1
  %356 = extractvalue { i64, i1 } %354, 0
  %357 = select i1 %355, i64 -1, i64 %356
  %358 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %359 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %358, i64 %357) #18
  %360 = bitcast i8* %359 to %"class.sh::TConstantUnion"*
  %361 = icmp eq i64 %210, 0
  br i1 %361, label %821, label %362

362:                                              ; preds = %353
  %363 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %210
  br label %364

364:                                              ; preds = %364, %362
  %365 = phi %"class.sh::TConstantUnion"* [ %360, %362 ], [ %366, %364 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %365) #18
  %366 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %365, i64 1
  %367 = icmp eq %"class.sh::TConstantUnion"* %366, %363
  br i1 %367, label %368, label %364

368:                                              ; preds = %364
  br i1 %361, label %821, label %369

369:                                              ; preds = %368
  %370 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %2, i64 0, i32 0
  %371 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %4, i64 0, i32 0
  %372 = icmp eq i8 %0, 16
  br label %373

373:                                              ; preds = %468, %369
  %374 = phi i64 [ 0, %369 ], [ %471, %468 ]
  %375 = load i32, i32* %370, align 8
  %376 = load i32, i32* %371, align 8
  %377 = tail call i32 @_ZN2sh13GetConversionENS_10TBasicTypeES0_(i32 %375, i32 %376) #18
  %378 = icmp ne i32 %377, 0
  %379 = icmp eq i32 %375, 1
  %380 = or i1 %379, %378
  br i1 %380, label %381, label %423

381:                                              ; preds = %373
  %382 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %374
  %383 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %382) #18
  %384 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %374
  %385 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %384) #18
  %386 = fcmp oeq float %385, 0.000000e+00
  br i1 %386, label %387, label %400

387:                                              ; preds = %381
  %388 = fcmp oeq float %383, 0.000000e+00
  br i1 %388, label %389, label %392

389:                                              ; preds = %387
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* dereferenceable(16) %6, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)) #18
  %390 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %374
  %391 = bitcast %"class.sh::TConstantUnion"* %390 to float*
  store float 0x7FF8000000000000, float* %391, align 4
  br label %468

392:                                              ; preds = %387
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* dereferenceable(16) %6, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)) #18
  %393 = bitcast float %383 to i32
  %394 = bitcast float %385 to i32
  %395 = xor i32 %394, %393
  %396 = icmp slt i32 %395, 0
  %397 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %374
  %398 = select i1 %396, float 0xFFF0000000000000, float 0x7FF0000000000000
  %399 = bitcast %"class.sh::TConstantUnion"* %397 to float*
  store float %398, float* %399, align 4
  br label %468

400:                                              ; preds = %381
  %401 = bitcast float %383 to i32
  %402 = and i32 %401, 2147483647
  %403 = icmp eq i32 %402, 2139095040
  br i1 %403, label %404, label %413

404:                                              ; preds = %400
  %405 = bitcast float %385 to i32
  %406 = and i32 %405, 2147483647
  %407 = icmp eq i32 %406, 2139095040
  br i1 %407, label %410, label %408

408:                                              ; preds = %404
  %409 = fdiv float %383, %385
  br label %419

410:                                              ; preds = %404
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* dereferenceable(16) %6, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)) #18
  %411 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %374
  %412 = bitcast %"class.sh::TConstantUnion"* %411 to float*
  store float 0x7FF8000000000000, float* %412, align 4
  br label %468

413:                                              ; preds = %400
  %414 = fdiv float %383, %385
  %415 = bitcast float %414 to i32
  %416 = and i32 %415, 2147483647
  %417 = icmp eq i32 %416, 2139095040
  br i1 %417, label %418, label %419

418:                                              ; preds = %413
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* dereferenceable(16) %6, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)) #18
  br label %419

419:                                              ; preds = %408, %418, %413
  %420 = phi float [ %409, %408 ], [ %414, %418 ], [ %414, %413 ]
  %421 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %374
  %422 = bitcast %"class.sh::TConstantUnion"* %421 to float*
  store float %420, float* %422, align 4
  br label %468

423:                                              ; preds = %373
  %424 = load i32, i32* %370, align 8
  switch i32 %424, label %821 [
    i32 3, label %425
    i32 4, label %452
  ]

425:                                              ; preds = %423
  %426 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %374
  %427 = tail call zeroext i1 @_ZNK2sh14TConstantUnioneqEi(%"class.sh::TConstantUnion"* %426, i32 0) #18
  br i1 %427, label %428, label %430

428:                                              ; preds = %425
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* dereferenceable(16) %6, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)) #18
  %429 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %374, i32 0, i32 0
  store i32 2147483647, i32* %429, align 4
  br label %468

430:                                              ; preds = %425
  %431 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %374
  %432 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %431) #18
  %433 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %426) #18
  br i1 %372, label %434, label %444

434:                                              ; preds = %430
  %435 = icmp eq i32 %432, -2147483648
  %436 = icmp eq i32 %433, -1
  %437 = and i1 %435, %436
  %438 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %374
  br i1 %437, label %439, label %441

439:                                              ; preds = %434
  %440 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %438, i64 0, i32 0, i32 0
  store i32 2147483647, i32* %440, align 4
  br label %468

441:                                              ; preds = %434
  %442 = sdiv i32 %432, %433
  %443 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %438, i64 0, i32 0, i32 0
  store i32 %442, i32* %443, align 4
  br label %468

444:                                              ; preds = %430
  %445 = or i32 %433, %432
  %446 = icmp slt i32 %445, 0
  br i1 %446, label %447, label %449

447:                                              ; preds = %444
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* dereferenceable(16) %6, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)) #18
  %448 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %374, i32 0, i32 0
  store i32 0, i32* %448, align 4
  br label %468

449:                                              ; preds = %444
  %450 = srem i32 %432, %433
  %451 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %374, i32 0, i32 0
  store i32 %450, i32* %451, align 4
  br label %468

452:                                              ; preds = %423
  %453 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %374
  %454 = tail call zeroext i1 @_ZNK2sh14TConstantUnioneqEi(%"class.sh::TConstantUnion"* %453, i32 0) #18
  br i1 %454, label %455, label %457

455:                                              ; preds = %452
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* dereferenceable(16) %6, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)) #18
  %456 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %374, i32 0, i32 0
  store i32 -1, i32* %456, align 4
  br label %468

457:                                              ; preds = %452
  %458 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %374
  %459 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %374
  %460 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %459) #18
  %461 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %453) #18
  br i1 %372, label %462, label %465

462:                                              ; preds = %457
  %463 = udiv i32 %460, %461
  %464 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %458, i64 0, i32 0, i32 0
  store i32 %463, i32* %464, align 4
  br label %468

465:                                              ; preds = %457
  %466 = urem i32 %460, %461
  %467 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %458, i64 0, i32 0, i32 0
  store i32 %466, i32* %467, align 4
  br label %468

468:                                              ; preds = %441, %439, %449, %447, %392, %389, %419, %410, %455, %465, %462, %428
  %469 = phi i32 [ 3, %441 ], [ 3, %439 ], [ 3, %449 ], [ 3, %447 ], [ 1, %392 ], [ 1, %389 ], [ 1, %419 ], [ 1, %410 ], [ 4, %455 ], [ 4, %465 ], [ 4, %462 ], [ 3, %428 ]
  %470 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %374, i32 1
  store i32 %469, i32* %470, align 4
  %471 = add nuw i64 %374, 1
  %472 = icmp eq i64 %471, %210
  br i1 %472, label %821, label %373

473:                                              ; preds = %209
  %474 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %2, i64 0, i32 8
  %475 = load i8, i8* %474, align 8
  %476 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %2, i64 0, i32 9
  %477 = load i8, i8* %476, align 1
  %478 = zext i8 %477 to i64
  %479 = shl nuw nsw i64 %478, 3
  %480 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %481 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %480, i64 %479) #18
  %482 = bitcast i8* %481 to %"class.sh::TConstantUnion"*
  %483 = icmp eq i8 %477, 0
  br i1 %483, label %821, label %484

484:                                              ; preds = %473
  %485 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %482, i64 %478
  br label %486

486:                                              ; preds = %486, %484
  %487 = phi %"class.sh::TConstantUnion"* [ %482, %484 ], [ %488, %486 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %487) #18
  %488 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %487, i64 1
  %489 = icmp eq %"class.sh::TConstantUnion"* %488, %485
  br i1 %489, label %490, label %486

490:                                              ; preds = %486
  br i1 %483, label %821, label %491

491:                                              ; preds = %490
  %492 = icmp eq i8 %475, 0
  %493 = zext i8 %477 to i64
  %494 = zext i8 %475 to i64
  br label %495

495:                                              ; preds = %500, %491
  %496 = phi i64 [ 0, %491 ], [ %501, %500 ]
  %497 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %482, i64 %496
  %498 = bitcast %"class.sh::TConstantUnion"* %497 to float*
  store float 0.000000e+00, float* %498, align 4
  %499 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %482, i64 %496, i32 1
  store i32 1, i32* %499, align 4
  br i1 %492, label %500, label %503

500:                                              ; preds = %503, %495
  %501 = add nuw nsw i64 %496, 1
  %502 = icmp eq i64 %501, %493
  br i1 %502, label %821, label %495

503:                                              ; preds = %495, %503
  %504 = phi i64 [ %514, %503 ], [ 0, %495 ]
  %505 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %497) #18
  %506 = mul nuw nsw i64 %504, %493
  %507 = add nuw nsw i64 %506, %496
  %508 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %507
  %509 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %508) #18
  %510 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %504
  %511 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %510) #18
  %512 = fmul float %509, %511
  %513 = fadd float %505, %512
  store float %513, float* %498, align 4
  store i32 1, i32* %499, align 4
  %514 = add nuw nsw i64 %504, 1
  %515 = icmp eq i64 %514, %494
  br i1 %515, label %500, label %503

516:                                              ; preds = %209
  %517 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %4, i64 0, i32 8
  %518 = load i8, i8* %517, align 8
  %519 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %4, i64 0, i32 9
  %520 = load i8, i8* %519, align 1
  %521 = zext i8 %518 to i64
  %522 = shl nuw nsw i64 %521, 3
  %523 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %524 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %523, i64 %522) #18
  %525 = bitcast i8* %524 to %"class.sh::TConstantUnion"*
  %526 = icmp eq i8 %518, 0
  br i1 %526, label %821, label %527

527:                                              ; preds = %516
  %528 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %525, i64 %521
  br label %529

529:                                              ; preds = %529, %527
  %530 = phi %"class.sh::TConstantUnion"* [ %525, %527 ], [ %531, %529 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %530) #18
  %531 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %530, i64 1
  %532 = icmp eq %"class.sh::TConstantUnion"* %531, %528
  br i1 %532, label %533, label %529

533:                                              ; preds = %529
  br i1 %526, label %821, label %534

534:                                              ; preds = %533
  %535 = icmp eq i8 %520, 0
  %536 = zext i8 %520 to i64
  %537 = zext i8 %518 to i64
  br label %538

538:                                              ; preds = %545, %534
  %539 = phi i64 [ 0, %534 ], [ %546, %545 ]
  %540 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %525, i64 %539
  %541 = bitcast %"class.sh::TConstantUnion"* %540 to float*
  store float 0.000000e+00, float* %541, align 4
  %542 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %525, i64 %539, i32 1
  store i32 1, i32* %542, align 4
  br i1 %535, label %545, label %543

543:                                              ; preds = %538
  %544 = mul nuw nsw i64 %539, %536
  br label %548

545:                                              ; preds = %548, %538
  %546 = add nuw nsw i64 %539, 1
  %547 = icmp eq i64 %546, %537
  br i1 %547, label %821, label %538

548:                                              ; preds = %548, %543
  %549 = phi i64 [ 0, %543 ], [ %558, %548 ]
  %550 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %540) #18
  %551 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %549
  %552 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %551) #18
  %553 = add nuw nsw i64 %549, %544
  %554 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %553
  %555 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %554) #18
  %556 = fmul float %552, %555
  %557 = fadd float %550, %556
  store float %557, float* %541, align 4
  store i32 1, i32* %542, align 4
  %558 = add nuw nsw i64 %549, 1
  %559 = icmp eq i64 %558, %536
  br i1 %559, label %545, label %548

560:                                              ; preds = %209
  %561 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %562 = extractvalue { i64, i1 } %561, 1
  %563 = extractvalue { i64, i1 } %561, 0
  %564 = select i1 %562, i64 -1, i64 %563
  %565 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %566 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %565, i64 %564) #18
  %567 = bitcast i8* %566 to %"class.sh::TConstantUnion"*
  %568 = icmp eq i64 %210, 0
  br i1 %568, label %821, label %569

569:                                              ; preds = %560
  %570 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %567, i64 %210
  br label %571

571:                                              ; preds = %571, %569
  %572 = phi %"class.sh::TConstantUnion"* [ %567, %569 ], [ %573, %571 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %572) #18
  %573 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %572, i64 1
  %574 = icmp eq %"class.sh::TConstantUnion"* %573, %570
  br i1 %574, label %575, label %571

575:                                              ; preds = %571
  br i1 %568, label %821, label %576

576:                                              ; preds = %575, %576
  %577 = phi i64 [ %583, %576 ], [ 0, %575 ]
  %578 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %577
  %579 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %577
  %580 = tail call i64 @_ZNK2sh14TConstantUnionaaERKS0_(%"class.sh::TConstantUnion"* %578, %"class.sh::TConstantUnion"* dereferenceable(8) %579) #18
  %581 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %567, i64 %577
  %582 = bitcast %"class.sh::TConstantUnion"* %581 to i64*
  store i64 %580, i64* %582, align 4
  %583 = add nuw i64 %577, 1
  %584 = icmp eq i64 %583, %210
  br i1 %584, label %821, label %576

585:                                              ; preds = %209
  %586 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %587 = extractvalue { i64, i1 } %586, 1
  %588 = extractvalue { i64, i1 } %586, 0
  %589 = select i1 %587, i64 -1, i64 %588
  %590 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %591 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %590, i64 %589) #18
  %592 = bitcast i8* %591 to %"class.sh::TConstantUnion"*
  %593 = icmp eq i64 %210, 0
  br i1 %593, label %821, label %594

594:                                              ; preds = %585
  %595 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %592, i64 %210
  br label %596

596:                                              ; preds = %596, %594
  %597 = phi %"class.sh::TConstantUnion"* [ %592, %594 ], [ %598, %596 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %597) #18
  %598 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %597, i64 1
  %599 = icmp eq %"class.sh::TConstantUnion"* %598, %595
  br i1 %599, label %600, label %596

600:                                              ; preds = %596
  br i1 %593, label %821, label %601

601:                                              ; preds = %600, %601
  %602 = phi i64 [ %608, %601 ], [ 0, %600 ]
  %603 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %602
  %604 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %602
  %605 = tail call i64 @_ZNK2sh14TConstantUnionooERKS0_(%"class.sh::TConstantUnion"* %603, %"class.sh::TConstantUnion"* dereferenceable(8) %604) #18
  %606 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %592, i64 %602
  %607 = bitcast %"class.sh::TConstantUnion"* %606 to i64*
  store i64 %605, i64* %607, align 4
  %608 = add nuw i64 %602, 1
  %609 = icmp eq i64 %608, %210
  br i1 %609, label %821, label %601

610:                                              ; preds = %209
  %611 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %612 = extractvalue { i64, i1 } %611, 1
  %613 = extractvalue { i64, i1 } %611, 0
  %614 = select i1 %612, i64 -1, i64 %613
  %615 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %616 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %615, i64 %614) #18
  %617 = bitcast i8* %616 to %"class.sh::TConstantUnion"*
  %618 = icmp eq i64 %210, 0
  br i1 %618, label %821, label %619

619:                                              ; preds = %610
  %620 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %617, i64 %210
  br label %621

621:                                              ; preds = %621, %619
  %622 = phi %"class.sh::TConstantUnion"* [ %617, %619 ], [ %623, %621 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %622) #18
  %623 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %622, i64 1
  %624 = icmp eq %"class.sh::TConstantUnion"* %623, %620
  br i1 %624, label %625, label %621

625:                                              ; preds = %621
  br i1 %618, label %821, label %626

626:                                              ; preds = %625, %626
  %627 = phi i64 [ %635, %626 ], [ 0, %625 ]
  %628 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %617, i64 %627
  %629 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %627
  %630 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %627
  %631 = tail call zeroext i1 @_ZNK2sh14TConstantUnionneERKS0_(%"class.sh::TConstantUnion"* %629, %"class.sh::TConstantUnion"* dereferenceable(8) %630) #18
  %632 = zext i1 %631 to i8
  %633 = bitcast %"class.sh::TConstantUnion"* %628 to i8*
  store i8 %632, i8* %633, align 4
  %634 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %617, i64 %627, i32 1
  store i32 5, i32* %634, align 4
  %635 = add nuw i64 %627, 1
  %636 = icmp eq i64 %635, %210
  br i1 %636, label %821, label %626

637:                                              ; preds = %209
  %638 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %639 = extractvalue { i64, i1 } %638, 1
  %640 = extractvalue { i64, i1 } %638, 0
  %641 = select i1 %639, i64 -1, i64 %640
  %642 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %643 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %642, i64 %641) #18
  %644 = bitcast i8* %643 to %"class.sh::TConstantUnion"*
  %645 = icmp eq i64 %210, 0
  br i1 %645, label %821, label %646

646:                                              ; preds = %637
  %647 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %644, i64 %210
  br label %648

648:                                              ; preds = %648, %646
  %649 = phi %"class.sh::TConstantUnion"* [ %644, %646 ], [ %650, %648 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %649) #18
  %650 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %649, i64 1
  %651 = icmp eq %"class.sh::TConstantUnion"* %650, %647
  br i1 %651, label %652, label %648

652:                                              ; preds = %648
  br i1 %645, label %821, label %653

653:                                              ; preds = %652, %653
  %654 = phi i64 [ %660, %653 ], [ 0, %652 ]
  %655 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %654
  %656 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %654
  %657 = tail call i64 @_ZNK2sh14TConstantUnionanERKS0_(%"class.sh::TConstantUnion"* %655, %"class.sh::TConstantUnion"* dereferenceable(8) %656) #18
  %658 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %644, i64 %654
  %659 = bitcast %"class.sh::TConstantUnion"* %658 to i64*
  store i64 %657, i64* %659, align 4
  %660 = add nuw i64 %654, 1
  %661 = icmp eq i64 %660, %210
  br i1 %661, label %821, label %653

662:                                              ; preds = %209
  %663 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %664 = extractvalue { i64, i1 } %663, 1
  %665 = extractvalue { i64, i1 } %663, 0
  %666 = select i1 %664, i64 -1, i64 %665
  %667 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %668 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %667, i64 %666) #18
  %669 = bitcast i8* %668 to %"class.sh::TConstantUnion"*
  %670 = icmp eq i64 %210, 0
  br i1 %670, label %821, label %671

671:                                              ; preds = %662
  %672 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %669, i64 %210
  br label %673

673:                                              ; preds = %673, %671
  %674 = phi %"class.sh::TConstantUnion"* [ %669, %671 ], [ %675, %673 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %674) #18
  %675 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %674, i64 1
  %676 = icmp eq %"class.sh::TConstantUnion"* %675, %672
  br i1 %676, label %677, label %673

677:                                              ; preds = %673
  br i1 %670, label %821, label %678

678:                                              ; preds = %677, %678
  %679 = phi i64 [ %685, %678 ], [ 0, %677 ]
  %680 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %679
  %681 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %679
  %682 = tail call i64 @_ZNK2sh14TConstantUnioneoERKS0_(%"class.sh::TConstantUnion"* %680, %"class.sh::TConstantUnion"* dereferenceable(8) %681) #18
  %683 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %669, i64 %679
  %684 = bitcast %"class.sh::TConstantUnion"* %683 to i64*
  store i64 %682, i64* %684, align 4
  %685 = add nuw i64 %679, 1
  %686 = icmp eq i64 %685, %210
  br i1 %686, label %821, label %678

687:                                              ; preds = %209
  %688 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %689 = extractvalue { i64, i1 } %688, 1
  %690 = extractvalue { i64, i1 } %688, 0
  %691 = select i1 %689, i64 -1, i64 %690
  %692 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %693 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %692, i64 %691) #18
  %694 = bitcast i8* %693 to %"class.sh::TConstantUnion"*
  %695 = icmp eq i64 %210, 0
  br i1 %695, label %821, label %696

696:                                              ; preds = %687
  %697 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %694, i64 %210
  br label %698

698:                                              ; preds = %698, %696
  %699 = phi %"class.sh::TConstantUnion"* [ %694, %696 ], [ %700, %698 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %699) #18
  %700 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %699, i64 1
  %701 = icmp eq %"class.sh::TConstantUnion"* %700, %697
  br i1 %701, label %702, label %698

702:                                              ; preds = %698
  br i1 %695, label %821, label %703

703:                                              ; preds = %702, %703
  %704 = phi i64 [ %710, %703 ], [ 0, %702 ]
  %705 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %704
  %706 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %704
  %707 = tail call i64 @_ZNK2sh14TConstantUnionorERKS0_(%"class.sh::TConstantUnion"* %705, %"class.sh::TConstantUnion"* dereferenceable(8) %706) #18
  %708 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %694, i64 %704
  %709 = bitcast %"class.sh::TConstantUnion"* %708 to i64*
  store i64 %707, i64* %709, align 4
  %710 = add nuw i64 %704, 1
  %711 = icmp eq i64 %710, %210
  br i1 %711, label %821, label %703

712:                                              ; preds = %209
  %713 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %714 = extractvalue { i64, i1 } %713, 1
  %715 = extractvalue { i64, i1 } %713, 0
  %716 = select i1 %714, i64 -1, i64 %715
  %717 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %718 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %717, i64 %716) #18
  %719 = bitcast i8* %718 to %"class.sh::TConstantUnion"*
  %720 = icmp eq i64 %210, 0
  br i1 %720, label %821, label %721

721:                                              ; preds = %712
  %722 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %719, i64 %210
  br label %723

723:                                              ; preds = %723, %721
  %724 = phi %"class.sh::TConstantUnion"* [ %719, %721 ], [ %725, %723 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %724) #18
  %725 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %724, i64 1
  %726 = icmp eq %"class.sh::TConstantUnion"* %725, %722
  br i1 %726, label %727, label %723

727:                                              ; preds = %723
  br i1 %720, label %821, label %728

728:                                              ; preds = %727, %728
  %729 = phi i64 [ %735, %728 ], [ 0, %727 ]
  %730 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %729
  %731 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %729
  %732 = tail call i64 @_ZN2sh14TConstantUnion6lshiftERKS0_S2_PNS_12TDiagnosticsERKNS_10TSourceLocE(%"class.sh::TConstantUnion"* dereferenceable(8) %730, %"class.sh::TConstantUnion"* dereferenceable(8) %731, %"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* dereferenceable(16) %6) #18
  %733 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %719, i64 %729
  %734 = bitcast %"class.sh::TConstantUnion"* %733 to i64*
  store i64 %732, i64* %734, align 4
  %735 = add nuw i64 %729, 1
  %736 = icmp eq i64 %735, %210
  br i1 %736, label %821, label %728

737:                                              ; preds = %209
  %738 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %739 = extractvalue { i64, i1 } %738, 1
  %740 = extractvalue { i64, i1 } %738, 0
  %741 = select i1 %739, i64 -1, i64 %740
  %742 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %743 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %742, i64 %741) #18
  %744 = bitcast i8* %743 to %"class.sh::TConstantUnion"*
  %745 = icmp eq i64 %210, 0
  br i1 %745, label %821, label %746

746:                                              ; preds = %737
  %747 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %744, i64 %210
  br label %748

748:                                              ; preds = %748, %746
  %749 = phi %"class.sh::TConstantUnion"* [ %744, %746 ], [ %750, %748 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %749) #18
  %750 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %749, i64 1
  %751 = icmp eq %"class.sh::TConstantUnion"* %750, %747
  br i1 %751, label %752, label %748

752:                                              ; preds = %748
  br i1 %745, label %821, label %753

753:                                              ; preds = %752, %753
  %754 = phi i64 [ %760, %753 ], [ 0, %752 ]
  %755 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %754
  %756 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %754
  %757 = tail call i64 @_ZN2sh14TConstantUnion6rshiftERKS0_S2_PNS_12TDiagnosticsERKNS_10TSourceLocE(%"class.sh::TConstantUnion"* dereferenceable(8) %755, %"class.sh::TConstantUnion"* dereferenceable(8) %756, %"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* dereferenceable(16) %6) #18
  %758 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %744, i64 %754
  %759 = bitcast %"class.sh::TConstantUnion"* %758 to i64*
  store i64 %757, i64* %759, align 4
  %760 = add nuw i64 %754, 1
  %761 = icmp eq i64 %760, %210
  br i1 %761, label %821, label %753

762:                                              ; preds = %209
  %763 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %764 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %763, i64 8) #18
  %765 = bitcast i8* %764 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %765) #18
  %766 = tail call zeroext i1 @_ZNK2sh14TConstantUnionltERKS0_(%"class.sh::TConstantUnion"* %212, %"class.sh::TConstantUnion"* dereferenceable(8) %211) #18
  %767 = zext i1 %766 to i8
  store i8 %767, i8* %764, align 4
  %768 = getelementptr inbounds i8, i8* %764, i64 4
  %769 = bitcast i8* %768 to i32*
  store i32 5, i32* %769, align 4
  br label %821

770:                                              ; preds = %209
  %771 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %772 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %771, i64 8) #18
  %773 = bitcast i8* %772 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %773) #18
  %774 = tail call zeroext i1 @_ZNK2sh14TConstantUniongtERKS0_(%"class.sh::TConstantUnion"* %212, %"class.sh::TConstantUnion"* dereferenceable(8) %211) #18
  %775 = zext i1 %774 to i8
  store i8 %775, i8* %772, align 4
  %776 = getelementptr inbounds i8, i8* %772, i64 4
  %777 = bitcast i8* %776 to i32*
  store i32 5, i32* %777, align 4
  br label %821

778:                                              ; preds = %209
  %779 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %780 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %779, i64 8) #18
  %781 = bitcast i8* %780 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %781) #18
  %782 = tail call zeroext i1 @_ZNK2sh14TConstantUniongtERKS0_(%"class.sh::TConstantUnion"* %212, %"class.sh::TConstantUnion"* dereferenceable(8) %211) #18
  %783 = xor i1 %782, true
  %784 = zext i1 %783 to i8
  store i8 %784, i8* %780, align 4
  %785 = getelementptr inbounds i8, i8* %780, i64 4
  %786 = bitcast i8* %785 to i32*
  store i32 5, i32* %786, align 4
  br label %821

787:                                              ; preds = %209
  %788 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %789 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %788, i64 8) #18
  %790 = bitcast i8* %789 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %790) #18
  %791 = tail call zeroext i1 @_ZNK2sh14TConstantUnionltERKS0_(%"class.sh::TConstantUnion"* %212, %"class.sh::TConstantUnion"* dereferenceable(8) %211) #18
  %792 = xor i1 %791, true
  %793 = zext i1 %792 to i8
  store i8 %793, i8* %789, align 4
  %794 = getelementptr inbounds i8, i8* %789, i64 4
  %795 = bitcast i8* %794 to i32*
  store i32 5, i32* %795, align 4
  br label %821

796:                                              ; preds = %209, %209
  %797 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %798 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %797, i64 8) #18
  %799 = bitcast i8* %798 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %799) #18
  %800 = icmp eq i64 %210, 0
  br i1 %800, label %809, label %803

801:                                              ; preds = %803
  %802 = icmp eq i64 %808, %210
  br i1 %802, label %809, label %803

803:                                              ; preds = %796, %801
  %804 = phi i64 [ %808, %801 ], [ 0, %796 ]
  %805 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %804
  %806 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %804
  %807 = tail call zeroext i1 @_ZNK2sh14TConstantUnionneERKS0_(%"class.sh::TConstantUnion"* %805, %"class.sh::TConstantUnion"* dereferenceable(8) %806) #18
  %808 = add nuw i64 %804, 1
  br i1 %807, label %809, label %801

809:                                              ; preds = %803, %801, %796
  %810 = phi i1 [ true, %796 ], [ false, %803 ], [ true, %801 ]
  %811 = icmp eq i8 %0, 18
  br i1 %811, label %812, label %816

812:                                              ; preds = %809
  %813 = zext i1 %810 to i8
  store i8 %813, i8* %798, align 4
  %814 = getelementptr inbounds i8, i8* %798, i64 4
  %815 = bitcast i8* %814 to i32*
  store i32 5, i32* %815, align 4
  br label %821

816:                                              ; preds = %809
  %817 = xor i1 %810, true
  %818 = zext i1 %817 to i8
  store i8 %818, i8* %798, align 4
  %819 = getelementptr inbounds i8, i8* %798, i64 4
  %820 = bitcast i8* %819 to i32*
  store i32 5, i32* %820, align 4
  br label %821

821:                                              ; preds = %753, %728, %703, %678, %653, %626, %601, %576, %545, %500, %423, %468, %324, %279, %254, %229, %737, %712, %687, %662, %637, %610, %585, %560, %516, %473, %353, %263, %238, %213, %228, %253, %278, %313, %368, %490, %533, %575, %600, %625, %652, %677, %702, %727, %752, %762, %770, %778, %787, %816, %812, %209
  %822 = phi %"class.sh::TConstantUnion"* [ null, %209 ], [ %790, %787 ], [ %781, %778 ], [ %773, %770 ], [ %765, %762 ], [ %799, %816 ], [ %799, %812 ], [ %220, %228 ], [ %245, %253 ], [ %270, %278 ], [ %304, %313 ], [ %360, %368 ], [ %482, %490 ], [ %525, %533 ], [ %567, %575 ], [ %592, %600 ], [ %617, %625 ], [ %644, %652 ], [ %669, %677 ], [ %694, %702 ], [ %719, %727 ], [ %744, %752 ], [ %220, %213 ], [ %245, %238 ], [ %270, %263 ], [ %360, %353 ], [ %482, %473 ], [ %525, %516 ], [ %567, %560 ], [ %592, %585 ], [ %617, %610 ], [ %644, %637 ], [ %669, %662 ], [ %694, %687 ], [ %719, %712 ], [ %744, %737 ], [ %220, %229 ], [ %245, %254 ], [ %270, %279 ], [ %304, %324 ], [ null, %423 ], [ %360, %468 ], [ %482, %500 ], [ %525, %545 ], [ %567, %576 ], [ %592, %601 ], [ %617, %626 ], [ %644, %653 ], [ %669, %678 ], [ %694, %703 ], [ %719, %728 ], [ %744, %753 ]
  ret %"class.sh::TConstantUnion"* %822
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2sh13TIntermBinary16hasConstantValueEv(%"class.sh::TIntermBinary"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 1
  %3 = load i8, i8* %2, align 8
  switch i8 %3, label %20 [
    i8 44, label %4
    i8 46, label %4
  ]

4:                                                ; preds = %1, %1
  %5 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %6 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %5, align 8
  %7 = bitcast %"class.sh::TIntermTyped"* %6 to i1 (%"class.sh::TIntermTyped"*)***
  %8 = load i1 (%"class.sh::TIntermTyped"*)**, i1 (%"class.sh::TIntermTyped"*)*** %7, align 8
  %9 = getelementptr inbounds i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %8, i64 28
  %10 = load i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %9, align 8
  %11 = tail call zeroext i1 %10(%"class.sh::TIntermTyped"* %6) #18
  br i1 %11, label %12, label %20

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %14 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %13, align 8
  %15 = bitcast %"class.sh::TIntermTyped"* %14 to i1 (%"class.sh::TIntermTyped"*)***
  %16 = load i1 (%"class.sh::TIntermTyped"*)**, i1 (%"class.sh::TIntermTyped"*)*** %15, align 8
  %17 = getelementptr inbounds i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %16, i64 28
  %18 = load i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %17, align 8
  %19 = tail call zeroext i1 %18(%"class.sh::TIntermTyped"* %14) #18
  br i1 %19, label %21, label %20

20:                                               ; preds = %1, %4, %12
  br label %21

21:                                               ; preds = %12, %20
  %22 = phi i1 [ false, %20 ], [ true, %12 ]
  ret i1 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TConstantUnion"* @_ZNK2sh13TIntermBinary16getConstantValueEv(%"class.sh::TIntermBinary"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.sh::TType", align 8
  %3 = bitcast %"class.sh::TIntermBinary"* %0 to i1 (%"class.sh::TIntermBinary"*)***
  %4 = load i1 (%"class.sh::TIntermBinary"*)**, i1 (%"class.sh::TIntermBinary"*)*** %3, align 8
  %5 = getelementptr inbounds i1 (%"class.sh::TIntermBinary"*)*, i1 (%"class.sh::TIntermBinary"*)** %4, i64 28
  %6 = load i1 (%"class.sh::TIntermBinary"*)*, i1 (%"class.sh::TIntermBinary"*)** %5, align 8
  %7 = tail call zeroext i1 %6(%"class.sh::TIntermBinary"* %0) #18
  br i1 %7, label %8, label %85

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %10 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %9, align 8
  %11 = bitcast %"class.sh::TIntermTyped"* %10 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)***
  %12 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*** %11, align 8
  %13 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %12, i64 29
  %14 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %13, align 8
  %15 = tail call %"class.sh::TConstantUnion"* %14(%"class.sh::TIntermTyped"* %10) #18
  %16 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %17 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %16, align 8
  %18 = bitcast %"class.sh::TIntermTyped"* %17 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)***
  %19 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*** %18, align 8
  %20 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %19, i64 29
  %21 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %20, align 8
  %22 = tail call %"class.sh::TConstantUnion"* %21(%"class.sh::TIntermTyped"* %17) #18
  %23 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %22) #18
  %24 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 1
  %25 = load i8, i8* %24, align 8
  %26 = icmp eq i8 %25, 44
  %27 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %9, align 8
  %28 = bitcast %"class.sh::TIntermTyped"* %27 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %29 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %28, align 8
  %30 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %29, i64 31
  %31 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %30, align 8
  %32 = tail call dereferenceable(184) %"class.sh::TType"* %31(%"class.sh::TIntermTyped"* %27) #18
  br i1 %26, label %33, label %61

33:                                               ; preds = %8
  %34 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %32, i64 0, i32 10, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %43, label %37

37:                                               ; preds = %33
  %38 = bitcast %"class.sh::TType"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %38) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 -86, i64 184, i1 false) #18
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %2, %"class.sh::TType"* dereferenceable(184) %32) #18
  call void @_ZN2sh5TType18toArrayElementTypeEv(%"class.sh::TType"* nonnull %2) #18
  %39 = call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %2) #18
  %40 = sext i32 %23 to i64
  %41 = mul i64 %39, %40
  %42 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %15, i64 %41
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %38) #18
  br label %85

43:                                               ; preds = %33
  %44 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %32, i64 0, i32 8
  %45 = load i8, i8* %44, align 8
  %46 = icmp ugt i8 %45, 1
  br i1 %46, label %47, label %85

47:                                               ; preds = %43
  %48 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %32, i64 0, i32 9
  %49 = load i8, i8* %48, align 1
  %50 = icmp ugt i8 %49, 1
  br i1 %50, label %51, label %56

51:                                               ; preds = %47
  %52 = zext i8 %49 to i32
  %53 = mul nsw i32 %23, %52
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %15, i64 %54
  br label %85

56:                                               ; preds = %47
  %57 = icmp eq i8 %49, 1
  br i1 %57, label %58, label %85

58:                                               ; preds = %56
  %59 = sext i32 %23 to i64
  %60 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %15, i64 %59
  br label %85

61:                                               ; preds = %8
  %62 = icmp sgt i32 %23, 0
  br i1 %62, label %63, label %70

63:                                               ; preds = %61
  %64 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %32, i64 0, i32 13
  %65 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %64, align 8
  %66 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %65, i64 0, i32 2, i32 0
  %67 = load %"class.sh::TVector.0"*, %"class.sh::TVector.0"** %66, align 8
  %68 = getelementptr inbounds %"class.sh::TVector.0", %"class.sh::TVector.0"* %67, i64 0, i32 0, i32 0, i32 0
  %69 = zext i32 %23 to i64
  br label %73

70:                                               ; preds = %73, %61
  %71 = phi i64 [ 0, %61 ], [ %82, %73 ]
  %72 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %15, i64 %71
  br label %85

73:                                               ; preds = %73, %63
  %74 = phi i64 [ 0, %63 ], [ %83, %73 ]
  %75 = phi i64 [ 0, %63 ], [ %82, %73 ]
  %76 = load %"class.sh::TField"**, %"class.sh::TField"*** %68, align 8
  %77 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %76, i64 %74
  %78 = load %"class.sh::TField"*, %"class.sh::TField"** %77, align 8
  %79 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %78, i64 0, i32 0
  %80 = load %"class.sh::TType"*, %"class.sh::TType"** %79, align 8
  %81 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %80) #18
  %82 = add i64 %81, %75
  %83 = add nuw nsw i64 %74, 1
  %84 = icmp eq i64 %83, %69
  br i1 %84, label %70, label %73

85:                                               ; preds = %58, %56, %51, %43, %37, %70, %1
  %86 = phi %"class.sh::TConstantUnion"* [ null, %1 ], [ %72, %70 ], [ %42, %37 ], [ %55, %51 ], [ %60, %58 ], [ null, %56 ], [ null, %43 ]
  ret %"class.sh::TConstantUnion"* %86
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(16) %"class.sh::ImmutableString"* @_ZNK2sh13TIntermBinary23getIndexStructFieldNameEv(%"class.sh::TIntermBinary"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %3 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %2, align 8
  %4 = bitcast %"class.sh::TIntermTyped"* %3 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %5 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %5, i64 31
  %7 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %6, align 8
  %8 = tail call dereferenceable(184) %"class.sh::TType"* %7(%"class.sh::TIntermTyped"* %3) #18
  %9 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %8, i64 0, i32 13
  %10 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %9, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %12 = bitcast %"class.sh::TIntermTyped"** %11 to %"class.sh::TIntermNode"**
  %13 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %12, align 8
  %14 = bitcast %"class.sh::TIntermNode"* %13 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %15 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %14, align 8
  %16 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %15, i64 5
  %17 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %16, align 8
  %18 = tail call %"class.sh::TIntermConstantUnion"* %17(%"class.sh::TIntermNode"* %13) #18
  %19 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %18, i64 0, i32 1
  %20 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %19, align 8
  %21 = icmp eq %"class.sh::TConstantUnion"* %20, null
  br i1 %21, label %25, label %22

22:                                               ; preds = %1
  %23 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* nonnull %20) #18
  %24 = sext i32 %23 to i64
  br label %25

25:                                               ; preds = %1, %22
  %26 = phi i64 [ %24, %22 ], [ 0, %1 ]
  %27 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %10, i64 0, i32 2, i32 0
  %28 = load %"class.sh::TVector.0"*, %"class.sh::TVector.0"** %27, align 8
  %29 = getelementptr inbounds %"class.sh::TVector.0", %"class.sh::TVector.0"* %28, i64 0, i32 0, i32 0, i32 0
  %30 = load %"class.sh::TField"**, %"class.sh::TField"*** %29, align 8
  %31 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %30, i64 %26
  %32 = load %"class.sh::TField"*, %"class.sh::TField"** %31, align 8
  %33 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %32, i64 0, i32 1
  ret %"class.sh::ImmutableString"* %33
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh12TIntermUnary4foldEPNS_12TDiagnosticsE(%"class.sh::TIntermUnary"*, %"class.sh::TDiagnostics"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 1
  %4 = load i8, i8* %3, align 8
  %5 = icmp eq i8 %4, 12
  %6 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 1
  br i1 %5, label %7, label %44

7:                                                ; preds = %2
  %8 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %6, align 8
  %9 = bitcast %"class.sh::TIntermTyped"* %8 to i1 (%"class.sh::TIntermTyped"*)***
  %10 = load i1 (%"class.sh::TIntermTyped"*)**, i1 (%"class.sh::TIntermTyped"*)*** %9, align 8
  %11 = getelementptr inbounds i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %10, i64 30
  %12 = load i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %11, align 8
  %13 = tail call zeroext i1 %12(%"class.sh::TIntermTyped"* %8) #18
  br i1 %13, label %22, label %14

14:                                               ; preds = %7
  %15 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %6, align 8
  %16 = bitcast %"class.sh::TIntermTyped"* %15 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %17 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %16, align 8
  %18 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %17, i64 31
  %19 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %18, align 8
  %20 = tail call dereferenceable(184) %"class.sh::TType"* %19(%"class.sh::TIntermTyped"* %15) #18
  %21 = tail call zeroext i1 @_ZNK2sh5TType14isUnsizedArrayEv(%"class.sh::TType"* %20) #18
  br i1 %21, label %22, label %24

22:                                               ; preds = %14, %7
  %23 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 0
  br label %82

24:                                               ; preds = %14
  %25 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %26 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %25, i64 8) #18
  %27 = bitcast i8* %26 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %27) #18
  %28 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %6, align 8
  %29 = bitcast %"class.sh::TIntermTyped"* %28 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %30 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %29, align 8
  %31 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %30, i64 31
  %32 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %31, align 8
  %33 = tail call dereferenceable(184) %"class.sh::TType"* %32(%"class.sh::TIntermTyped"* %28) #18
  %34 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %33, i64 0, i32 10, i32 0
  %35 = load i32*, i32** %34, align 8
  %36 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %33, i64 0, i32 10, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %37, -1
  %39 = getelementptr inbounds i32, i32* %35, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = bitcast i8* %26 to i32*
  store i32 %40, i32* %41, align 4
  %42 = getelementptr inbounds i8, i8* %26, i64 4
  %43 = bitcast i8* %42 to i32*
  store i32 3, i32* %43, align 4
  br label %61

44:                                               ; preds = %2
  %45 = bitcast %"class.sh::TIntermTyped"** %6 to %"class.sh::TIntermNode"**
  %46 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %45, align 8
  %47 = bitcast %"class.sh::TIntermNode"* %46 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %48 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %47, align 8
  %49 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %48, i64 5
  %50 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %49, align 8
  %51 = tail call %"class.sh::TIntermConstantUnion"* %50(%"class.sh::TIntermNode"* %46) #18
  %52 = icmp eq %"class.sh::TIntermConstantUnion"* %51, null
  br i1 %52, label %59, label %53

53:                                               ; preds = %44
  %54 = load i8, i8* %3, align 8
  switch i8 %54, label %57 [
    i8 120, label %55
    i8 121, label %55
    i8 104, label %55
    i8 117, label %55
    i8 118, label %55
    i8 119, label %55
    i8 94, label %55
    i8 97, label %55
    i8 95, label %55
    i8 98, label %55
    i8 96, label %55
    i8 99, label %55
    i8 100, label %55
    i8 101, label %55
    i8 102, label %55
    i8 103, label %55
  ]

55:                                               ; preds = %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53
  %56 = tail call %"class.sh::TConstantUnion"* @_ZN2sh20TIntermConstantUnion25foldUnaryNonComponentWiseE9TOperator(%"class.sh::TIntermConstantUnion"* nonnull %51, i8 zeroext %54)
  br label %61

57:                                               ; preds = %53
  %58 = tail call %"class.sh::TConstantUnion"* @_ZN2sh20TIntermConstantUnion22foldUnaryComponentWiseE9TOperatorPNS_12TDiagnosticsE(%"class.sh::TIntermConstantUnion"* nonnull %51, i8 zeroext %54, %"class.sh::TDiagnostics"* %1)
  br label %61

59:                                               ; preds = %44
  %60 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 0
  br label %82

61:                                               ; preds = %55, %57, %24
  %62 = phi %"class.sh::TConstantUnion"* [ %27, %24 ], [ %56, %55 ], [ %58, %57 ]
  %63 = icmp eq %"class.sh::TConstantUnion"* %62, null
  %64 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 0
  br i1 %63, label %82, label %65

65:                                               ; preds = %61
  %66 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %67 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %66, i64 216) #18
  %68 = bitcast %"class.sh::TIntermUnary"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %69 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %68, align 8
  %70 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %69, i64 31
  %71 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %70, align 8
  %72 = tail call dereferenceable(184) %"class.sh::TType"* %71(%"class.sh::TIntermTyped"* %64) #18
  %73 = getelementptr inbounds i8, i8* %67, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %73, i8 0, i64 16, i1 false) #18
  %74 = bitcast i8* %67 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %74, align 8
  %75 = getelementptr inbounds i8, i8* %67, i64 24
  %76 = bitcast i8* %75 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %76, %"class.sh::TType"* dereferenceable(184) %72) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %74, align 8
  %77 = getelementptr inbounds i8, i8* %67, i64 208
  %78 = bitcast i8* %77 to %"class.sh::TConstantUnion"**
  store %"class.sh::TConstantUnion"* %62, %"class.sh::TConstantUnion"** %78, align 8
  %79 = bitcast i8* %67 to %"class.sh::TIntermTyped"*
  %80 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %81 = bitcast %"struct.sh::TSourceLoc"* %80 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %73, i8* align 4 %81, i64 16, i1 false) #18
  br label %82

82:                                               ; preds = %59, %61, %65, %22
  %83 = phi %"class.sh::TIntermTyped"* [ %23, %22 ], [ %79, %65 ], [ %60, %59 ], [ %64, %61 ]
  ret %"class.sh::TIntermTyped"* %83
}

declare zeroext i1 @_ZNK2sh5TType14isUnsizedArrayEv(%"class.sh::TType"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TConstantUnion"* @_ZN2sh20TIntermConstantUnion25foldUnaryNonComponentWiseE9TOperator(%"class.sh::TIntermConstantUnion"*, i8 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.angle::Matrix", align 8
  %4 = alloca %"class.angle::Matrix", align 8
  %5 = alloca %"class.angle::Matrix", align 8
  %6 = alloca %"class.angle::Matrix", align 8
  %7 = alloca %"class.angle::Matrix", align 8
  %8 = bitcast %"class.sh::TIntermConstantUnion"* %0 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)***
  %9 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)** %9, i64 29
  %11 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)** %10, align 8
  %12 = tail call %"class.sh::TConstantUnion"* %11(%"class.sh::TIntermConstantUnion"* %0) #18
  %13 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 0
  %14 = bitcast %"class.sh::TIntermConstantUnion"* %0 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %15 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %14, align 8
  %16 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %15, i64 31
  %17 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %16, align 8
  %18 = tail call dereferenceable(184) %"class.sh::TType"* %17(%"class.sh::TIntermExpression"* %13) #18
  %19 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %18) #18
  switch i8 %1, label %602 [
    i8 120, label %20
    i8 121, label %35
    i8 104, label %50
    i8 117, label %70
    i8 118, label %121
    i8 119, label %146
    i8 94, label %190
    i8 97, label %218
    i8 95, label %247
    i8 98, label %275
    i8 96, label %296
    i8 99, label %381
    i8 100, label %400
    i8 101, label %452
    i8 102, label %504
    i8 103, label %545
  ]

20:                                               ; preds = %2
  %21 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %22 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %21, i64 8) #18
  %23 = bitcast i8* %22 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %23) #18
  store i8 0, i8* %22, align 4
  %24 = getelementptr inbounds i8, i8* %22, i64 4
  %25 = bitcast i8* %24 to i32*
  store i32 5, i32* %25, align 4
  %26 = icmp eq i64 %19, 0
  br i1 %26, label %602, label %29

27:                                               ; preds = %29
  %28 = icmp eq i64 %33, %19
  br i1 %28, label %602, label %29

29:                                               ; preds = %20, %27
  %30 = phi i64 [ %33, %27 ], [ 0, %20 ]
  %31 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 %30
  %32 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* %31) #18
  %33 = add nuw i64 %30, 1
  br i1 %32, label %34, label %27

34:                                               ; preds = %29
  store i8 1, i8* %22, align 4
  store i32 5, i32* %25, align 4
  br label %602

35:                                               ; preds = %2
  %36 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %37 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %36, i64 8) #18
  %38 = bitcast i8* %37 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %38) #18
  store i8 1, i8* %37, align 4
  %39 = getelementptr inbounds i8, i8* %37, i64 4
  %40 = bitcast i8* %39 to i32*
  store i32 5, i32* %40, align 4
  %41 = icmp eq i64 %19, 0
  br i1 %41, label %602, label %44

42:                                               ; preds = %44
  %43 = icmp eq i64 %48, %19
  br i1 %43, label %602, label %44

44:                                               ; preds = %35, %42
  %45 = phi i64 [ %48, %42 ], [ 0, %35 ]
  %46 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 %45
  %47 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* %46) #18
  %48 = add nuw i64 %45, 1
  br i1 %47, label %42, label %49

49:                                               ; preds = %44
  store i8 0, i8* %37, align 4
  store i32 5, i32* %40, align 4
  br label %602

50:                                               ; preds = %2
  %51 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %52 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %51, i64 8) #18
  %53 = bitcast i8* %52 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %53) #18
  %54 = icmp eq i64 %19, 0
  br i1 %54, label %64, label %55

55:                                               ; preds = %50, %55
  %56 = phi float [ %61, %55 ], [ 0.000000e+00, %50 ]
  %57 = phi i64 [ %62, %55 ], [ 0, %50 ]
  %58 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 %57
  %59 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %58) #18
  %60 = fmul float %59, %59
  %61 = fadd float %56, %60
  %62 = add nuw i64 %57, 1
  %63 = icmp eq i64 %62, %19
  br i1 %63, label %64, label %55

64:                                               ; preds = %55, %50
  %65 = phi float [ 0.000000e+00, %50 ], [ %61, %55 ]
  %66 = tail call float @sqrtf(float %65) #18
  %67 = bitcast i8* %52 to float*
  store float %66, float* %67, align 4
  %68 = getelementptr inbounds i8, i8* %52, i64 4
  %69 = bitcast i8* %68 to i32*
  store i32 1, i32* %69, align 4
  br label %602

70:                                               ; preds = %2
  %71 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %19, i64 8)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %76 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %75, i64 %74) #18
  %77 = bitcast i8* %76 to %"class.sh::TConstantUnion"*
  %78 = icmp eq i64 %19, 0
  br i1 %78, label %85, label %79

79:                                               ; preds = %70
  %80 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %77, i64 %19
  br label %81

81:                                               ; preds = %81, %79
  %82 = phi %"class.sh::TConstantUnion"* [ %77, %79 ], [ %83, %81 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %82) #18
  %83 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %82, i64 1
  %84 = icmp eq %"class.sh::TConstantUnion"* %83, %80
  br i1 %84, label %85, label %81

85:                                               ; preds = %81, %70
  %86 = bitcast %"class.angle::Matrix"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %86) #18
  %87 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 0
  %88 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 1
  %89 = bitcast %"class.angle::Matrix"* %4 to i8*
  %90 = bitcast %"class.angle::Matrix"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %90, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %89) #18
  %91 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %14, align 8
  %92 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %91, i64 31
  %93 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %92, align 8
  %94 = tail call dereferenceable(184) %"class.sh::TType"* %93(%"class.sh::TIntermExpression"* %13) #18
  %95 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %94, i64 0, i32 9
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %14, align 8
  %99 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %98, i64 31
  %100 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %99, align 8
  %101 = tail call dereferenceable(184) %"class.sh::TType"* %100(%"class.sh::TIntermExpression"* %13) #18
  %102 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %101, i64 0, i32 8
  %103 = load i8, i8* %102, align 8
  %104 = zext i8 %103 to i32
  call fastcc void @_ZN2sh12_GLOBAL__N_19GetMatrixEPKNS_14TConstantUnionEjj(%"class.angle::Matrix"* nonnull sret %4, %"class.sh::TConstantUnion"* %12, i32 %97, i32 %104)
  call void @_ZNK5angle6MatrixIfE9transposeEv(%"class.angle::Matrix"* nonnull sret %3, %"class.angle::Matrix"* nonnull %4)
  %105 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %4, i64 0, i32 0, i32 0, i32 0
  %106 = load float*, float** %105, align 8
  %107 = icmp eq float* %106, null
  br i1 %107, label %113, label %108

108:                                              ; preds = %85
  %109 = ptrtoint float* %106 to i64
  %110 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %4, i64 0, i32 0, i32 0, i32 1
  %111 = bitcast float** %110 to i64*
  store i64 %109, i64* %111, align 8
  %112 = bitcast float* %106 to i8*
  call void @_ZdlPv(i8* %112) #21
  br label %113

113:                                              ; preds = %85, %108
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %89) #18
  call fastcc void @_ZN2sh12_GLOBAL__N_123SetUnionArrayFromMatrixERKN5angle6MatrixIfEEPNS_14TConstantUnionE(%"class.angle::Matrix"* nonnull dereferenceable(32) %3, %"class.sh::TConstantUnion"* %77)
  %114 = load float*, float** %87, align 8
  %115 = icmp eq float* %114, null
  br i1 %115, label %120, label %116

116:                                              ; preds = %113
  %117 = ptrtoint float* %114 to i64
  %118 = bitcast float** %88 to i64*
  store i64 %117, i64* %118, align 8
  %119 = bitcast float* %114 to i8*
  call void @_ZdlPv(i8* %119) #21
  br label %120

120:                                              ; preds = %113, %116
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %86) #18
  br label %602

121:                                              ; preds = %2
  %122 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %14, align 8
  %123 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %122, i64 31
  %124 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %123, align 8
  %125 = tail call dereferenceable(184) %"class.sh::TType"* %124(%"class.sh::TIntermExpression"* %13) #18
  %126 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %125, i64 0, i32 8
  %127 = load i8, i8* %126, align 8
  %128 = zext i8 %127 to i32
  %129 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %130 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %129, i64 8) #18
  %131 = bitcast i8* %130 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %131) #18
  %132 = bitcast %"class.angle::Matrix"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %132) #18
  call fastcc void @_ZN2sh12_GLOBAL__N_19GetMatrixEPKNS_14TConstantUnionEj(%"class.angle::Matrix"* nonnull sret %5, %"class.sh::TConstantUnion"* %12, i32 %128)
  %133 = call float @_ZNK5angle6MatrixIfE11determinantEv(%"class.angle::Matrix"* nonnull %5)
  %134 = bitcast i8* %130 to float*
  store float %133, float* %134, align 4
  %135 = getelementptr inbounds i8, i8* %130, i64 4
  %136 = bitcast i8* %135 to i32*
  store i32 1, i32* %136, align 4
  %137 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 0
  %138 = load float*, float** %137, align 8
  %139 = icmp eq float* %138, null
  br i1 %139, label %145, label %140

140:                                              ; preds = %121
  %141 = ptrtoint float* %138 to i64
  %142 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 1
  %143 = bitcast float** %142 to i64*
  store i64 %141, i64* %143, align 8
  %144 = bitcast float* %138 to i8*
  call void @_ZdlPv(i8* %144) #21
  br label %145

145:                                              ; preds = %121, %140
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %132) #18
  br label %602

146:                                              ; preds = %2
  %147 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %14, align 8
  %148 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %147, i64 31
  %149 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %148, align 8
  %150 = tail call dereferenceable(184) %"class.sh::TType"* %149(%"class.sh::TIntermExpression"* %13) #18
  %151 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %150, i64 0, i32 8
  %152 = load i8, i8* %151, align 8
  %153 = zext i8 %152 to i32
  %154 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %19, i64 8)
  %155 = extractvalue { i64, i1 } %154, 1
  %156 = extractvalue { i64, i1 } %154, 0
  %157 = select i1 %155, i64 -1, i64 %156
  %158 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %159 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %158, i64 %157) #18
  %160 = bitcast i8* %159 to %"class.sh::TConstantUnion"*
  %161 = icmp eq i64 %19, 0
  br i1 %161, label %168, label %162

162:                                              ; preds = %146
  %163 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %160, i64 %19
  br label %164

164:                                              ; preds = %164, %162
  %165 = phi %"class.sh::TConstantUnion"* [ %160, %162 ], [ %166, %164 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %165) #18
  %166 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %165, i64 1
  %167 = icmp eq %"class.sh::TConstantUnion"* %166, %163
  br i1 %167, label %168, label %164

168:                                              ; preds = %164, %146
  %169 = bitcast %"class.angle::Matrix"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %169) #18
  %170 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 0
  %171 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 1
  %172 = bitcast %"class.angle::Matrix"* %7 to i8*
  %173 = bitcast %"class.angle::Matrix"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %173, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %172) #18
  call fastcc void @_ZN2sh12_GLOBAL__N_19GetMatrixEPKNS_14TConstantUnionEj(%"class.angle::Matrix"* nonnull sret %7, %"class.sh::TConstantUnion"* %12, i32 %153)
  call void @_ZNK5angle6MatrixIfE7inverseEv(%"class.angle::Matrix"* nonnull sret %6, %"class.angle::Matrix"* nonnull %7)
  %174 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %7, i64 0, i32 0, i32 0, i32 0
  %175 = load float*, float** %174, align 8
  %176 = icmp eq float* %175, null
  br i1 %176, label %182, label %177

177:                                              ; preds = %168
  %178 = ptrtoint float* %175 to i64
  %179 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %7, i64 0, i32 0, i32 0, i32 1
  %180 = bitcast float** %179 to i64*
  store i64 %178, i64* %180, align 8
  %181 = bitcast float* %175 to i8*
  call void @_ZdlPv(i8* %181) #21
  br label %182

182:                                              ; preds = %168, %177
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %172) #18
  call fastcc void @_ZN2sh12_GLOBAL__N_123SetUnionArrayFromMatrixERKN5angle6MatrixIfEEPNS_14TConstantUnionE(%"class.angle::Matrix"* nonnull dereferenceable(32) %6, %"class.sh::TConstantUnion"* %160)
  %183 = load float*, float** %170, align 8
  %184 = icmp eq float* %183, null
  br i1 %184, label %189, label %185

185:                                              ; preds = %182
  %186 = ptrtoint float* %183 to i64
  %187 = bitcast float** %171 to i64*
  store i64 %186, i64* %187, align 8
  %188 = bitcast float* %183 to i8*
  call void @_ZdlPv(i8* %188) #21
  br label %189

189:                                              ; preds = %182, %185
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %169) #18
  br label %602

190:                                              ; preds = %2
  %191 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %192 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %191, i64 8) #18
  %193 = bitcast i8* %192 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %193) #18
  %194 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %12) #18
  %195 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 1
  %196 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %195) #18
  %197 = fcmp ogt float %194, -1.000000e+00
  %198 = fcmp ogt float %194, 1.000000e+00
  %199 = select i1 %198, float 1.000000e+00, float %194
  %200 = fmul float %199, 3.276700e+04
  %201 = select i1 %197, float %200, float -3.276700e+04
  %202 = tail call float @llvm.round.f32(float %201) #18
  %203 = fptosi float %202 to i16
  %204 = fcmp ogt float %196, -1.000000e+00
  %205 = fcmp ogt float %196, 1.000000e+00
  %206 = select i1 %205, float 1.000000e+00, float %196
  %207 = fmul float %206, 3.276700e+04
  %208 = select i1 %204, float %207, float -3.276700e+04
  %209 = tail call float @llvm.round.f32(float %208) #18
  %210 = fptosi float %209 to i16
  %211 = zext i16 %210 to i32
  %212 = shl nuw i32 %211, 16
  %213 = zext i16 %203 to i32
  %214 = or i32 %212, %213
  %215 = bitcast i8* %192 to i32*
  store i32 %214, i32* %215, align 4
  %216 = getelementptr inbounds i8, i8* %192, i64 4
  %217 = bitcast i8* %216 to i32*
  store i32 4, i32* %217, align 4
  br label %602

218:                                              ; preds = %2
  %219 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %220 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %219, i64 16) #18
  %221 = bitcast i8* %220 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %221) #18
  %222 = getelementptr inbounds i8, i8* %220, i64 8
  %223 = bitcast i8* %222 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %223) #18
  %224 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %12) #18
  %225 = trunc i32 %224 to i16
  %226 = lshr i32 %224, 16
  %227 = trunc i32 %226 to i16
  %228 = sitofp i16 %225 to float
  %229 = fdiv float %228, 3.276700e+04
  %230 = fcmp ogt float %229, -1.000000e+00
  %231 = fcmp ogt float %229, 1.000000e+00
  %232 = select i1 %231, float 1.000000e+00, float %229
  %233 = select i1 %230, float %232, float -1.000000e+00
  %234 = sitofp i16 %227 to float
  %235 = fdiv float %234, 3.276700e+04
  %236 = fcmp ogt float %235, -1.000000e+00
  %237 = fcmp ogt float %235, 1.000000e+00
  %238 = select i1 %237, float 1.000000e+00, float %235
  %239 = select i1 %236, float %238, float -1.000000e+00
  %240 = bitcast i8* %220 to float*
  store float %233, float* %240, align 4
  %241 = getelementptr inbounds i8, i8* %220, i64 4
  %242 = bitcast i8* %241 to i32*
  store i32 1, i32* %242, align 4
  %243 = getelementptr inbounds i8, i8* %220, i64 8
  %244 = bitcast i8* %243 to float*
  store float %239, float* %244, align 4
  %245 = getelementptr inbounds i8, i8* %220, i64 12
  %246 = bitcast i8* %245 to i32*
  store i32 1, i32* %246, align 4
  br label %602

247:                                              ; preds = %2
  %248 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %249 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %248, i64 8) #18
  %250 = bitcast i8* %249 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %250) #18
  %251 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %12) #18
  %252 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 1
  %253 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %252) #18
  %254 = fcmp ogt float %251, 0.000000e+00
  %255 = fcmp ogt float %251, 1.000000e+00
  %256 = select i1 %255, float 1.000000e+00, float %251
  %257 = fmul float %256, 6.553500e+04
  %258 = select i1 %254, float %257, float 0.000000e+00
  %259 = tail call float @llvm.round.f32(float %258) #18
  %260 = fptoui float %259 to i16
  %261 = fcmp ogt float %253, 0.000000e+00
  %262 = fcmp ogt float %253, 1.000000e+00
  %263 = select i1 %262, float 1.000000e+00, float %253
  %264 = fmul float %263, 6.553500e+04
  %265 = select i1 %261, float %264, float 0.000000e+00
  %266 = tail call float @llvm.round.f32(float %265) #18
  %267 = fptoui float %266 to i16
  %268 = zext i16 %267 to i32
  %269 = shl nuw i32 %268, 16
  %270 = zext i16 %260 to i32
  %271 = or i32 %269, %270
  %272 = bitcast i8* %249 to i32*
  store i32 %271, i32* %272, align 4
  %273 = getelementptr inbounds i8, i8* %249, i64 4
  %274 = bitcast i8* %273 to i32*
  store i32 4, i32* %274, align 4
  br label %602

275:                                              ; preds = %2
  %276 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %277 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %276, i64 16) #18
  %278 = bitcast i8* %277 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %278) #18
  %279 = getelementptr inbounds i8, i8* %277, i64 8
  %280 = bitcast i8* %279 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %280) #18
  %281 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %12) #18
  %282 = trunc i32 %281 to i16
  %283 = lshr i32 %281, 16
  %284 = trunc i32 %283 to i16
  %285 = uitofp i16 %282 to float
  %286 = fdiv float %285, 6.553500e+04
  %287 = uitofp i16 %284 to float
  %288 = fdiv float %287, 6.553500e+04
  %289 = bitcast i8* %277 to float*
  store float %286, float* %289, align 4
  %290 = getelementptr inbounds i8, i8* %277, i64 4
  %291 = bitcast i8* %290 to i32*
  store i32 1, i32* %291, align 4
  %292 = getelementptr inbounds i8, i8* %277, i64 8
  %293 = bitcast i8* %292 to float*
  store float %288, float* %293, align 4
  %294 = getelementptr inbounds i8, i8* %277, i64 12
  %295 = bitcast i8* %294 to i32*
  store i32 1, i32* %295, align 4
  br label %602

296:                                              ; preds = %2
  %297 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %298 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %297, i64 8) #18
  %299 = bitcast i8* %298 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %299) #18
  %300 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %12) #18
  %301 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 1
  %302 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %301) #18
  %303 = bitcast float %300 to i32
  %304 = lshr i32 %303, 16
  %305 = and i32 %304, 32768
  %306 = and i32 %303, 2147483647
  %307 = icmp ugt i32 %306, 2139095040
  br i1 %307, label %337, label %308

308:                                              ; preds = %296
  %309 = icmp ugt i32 %306, 1207955455
  br i1 %309, label %310, label %312

310:                                              ; preds = %308
  %311 = or i32 %305, 31744
  br label %337

312:                                              ; preds = %308
  %313 = icmp ult i32 %306, 947912704
  br i1 %313, label %314, label %330

314:                                              ; preds = %312
  %315 = icmp ugt i32 %306, 754974719
  br i1 %315, label %316, label %322

316:                                              ; preds = %314
  %317 = lshr i32 %306, 23
  %318 = sub nuw nsw i32 113, %317
  %319 = and i32 %303, 8388607
  %320 = or i32 %319, 8388608
  %321 = lshr i32 %320, %318
  br label %322

322:                                              ; preds = %316, %314
  %323 = phi i32 [ %321, %316 ], [ 0, %314 ]
  %324 = add nuw i32 %323, 4095
  %325 = lshr i32 %323, 13
  %326 = and i32 %325, 1
  %327 = add nuw i32 %324, %326
  %328 = lshr i32 %327, 13
  %329 = or i32 %328, %305
  br label %337

330:                                              ; preds = %312
  %331 = add i32 %303, 134221823
  %332 = lshr i32 %303, 13
  %333 = and i32 %332, 1
  %334 = add i32 %331, %333
  %335 = lshr i32 %334, 13
  %336 = or i32 %335, %305
  br label %337

337:                                              ; preds = %330, %322, %310, %296
  %338 = phi i32 [ %311, %310 ], [ %329, %322 ], [ %336, %330 ], [ 32767, %296 ]
  %339 = bitcast float %302 to i32
  %340 = lshr i32 %339, 16
  %341 = and i32 %340, 32768
  %342 = and i32 %339, 2147483647
  %343 = icmp ugt i32 %342, 2139095040
  br i1 %343, label %373, label %344

344:                                              ; preds = %337
  %345 = icmp ugt i32 %342, 1207955455
  br i1 %345, label %346, label %348

346:                                              ; preds = %344
  %347 = or i32 %341, 31744
  br label %373

348:                                              ; preds = %344
  %349 = icmp ult i32 %342, 947912704
  br i1 %349, label %350, label %366

350:                                              ; preds = %348
  %351 = icmp ugt i32 %342, 754974719
  br i1 %351, label %352, label %358

352:                                              ; preds = %350
  %353 = lshr i32 %342, 23
  %354 = sub nuw nsw i32 113, %353
  %355 = and i32 %339, 8388607
  %356 = or i32 %355, 8388608
  %357 = lshr i32 %356, %354
  br label %358

358:                                              ; preds = %352, %350
  %359 = phi i32 [ %357, %352 ], [ 0, %350 ]
  %360 = add nuw i32 %359, 4095
  %361 = lshr i32 %359, 13
  %362 = and i32 %361, 1
  %363 = add nuw i32 %360, %362
  %364 = lshr i32 %363, 13
  %365 = or i32 %364, %341
  br label %373

366:                                              ; preds = %348
  %367 = add i32 %339, 134221823
  %368 = lshr i32 %339, 13
  %369 = and i32 %368, 1
  %370 = add i32 %367, %369
  %371 = lshr i32 %370, 13
  %372 = or i32 %371, %341
  br label %373

373:                                              ; preds = %337, %346, %358, %366
  %374 = phi i32 [ %347, %346 ], [ %365, %358 ], [ %372, %366 ], [ 32767, %337 ]
  %375 = shl i32 %374, 16
  %376 = and i32 %338, 65535
  %377 = or i32 %375, %376
  %378 = bitcast i8* %298 to i32*
  store i32 %377, i32* %378, align 4
  %379 = getelementptr inbounds i8, i8* %298, i64 4
  %380 = bitcast i8* %379 to i32*
  store i32 4, i32* %380, align 4
  br label %602

381:                                              ; preds = %2
  %382 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %383 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %382, i64 16) #18
  %384 = bitcast i8* %383 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %384) #18
  %385 = getelementptr inbounds i8, i8* %383, i64 8
  %386 = bitcast i8* %385 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %386) #18
  %387 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %12) #18
  %388 = trunc i32 %387 to i16
  %389 = lshr i32 %387, 16
  %390 = trunc i32 %389 to i16
  %391 = tail call float @_ZN2gl16float16ToFloat32Et(i16 zeroext %388) #18
  %392 = tail call float @_ZN2gl16float16ToFloat32Et(i16 zeroext %390) #18
  %393 = bitcast i8* %383 to float*
  store float %391, float* %393, align 4
  %394 = getelementptr inbounds i8, i8* %383, i64 4
  %395 = bitcast i8* %394 to i32*
  store i32 1, i32* %395, align 4
  %396 = getelementptr inbounds i8, i8* %383, i64 8
  %397 = bitcast i8* %396 to float*
  store float %392, float* %397, align 4
  %398 = getelementptr inbounds i8, i8* %383, i64 12
  %399 = bitcast i8* %398 to i32*
  store i32 1, i32* %399, align 4
  br label %602

400:                                              ; preds = %2
  %401 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %402 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %401, i64 8) #18
  %403 = bitcast i8* %402 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %403) #18
  %404 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %12) #18
  %405 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 1
  %406 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %405) #18
  %407 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 2
  %408 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %407) #18
  %409 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 3
  %410 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %409) #18
  %411 = fcmp ogt float %404, 0.000000e+00
  %412 = fcmp ogt float %404, 1.000000e+00
  %413 = select i1 %412, float 1.000000e+00, float %404
  %414 = fmul float %413, 2.550000e+02
  %415 = select i1 %411, float %414, float 0.000000e+00
  %416 = tail call float @llvm.round.f32(float %415) #18
  %417 = fptoui float %416 to i8
  %418 = fcmp ogt float %406, 0.000000e+00
  %419 = fcmp ogt float %406, 1.000000e+00
  %420 = select i1 %419, float 1.000000e+00, float %406
  %421 = fmul float %420, 2.550000e+02
  %422 = select i1 %418, float %421, float 0.000000e+00
  %423 = tail call float @llvm.round.f32(float %422) #18
  %424 = fptoui float %423 to i8
  %425 = fcmp ogt float %408, 0.000000e+00
  %426 = fcmp ogt float %408, 1.000000e+00
  %427 = select i1 %426, float 1.000000e+00, float %408
  %428 = fmul float %427, 2.550000e+02
  %429 = select i1 %425, float %428, float 0.000000e+00
  %430 = tail call float @llvm.round.f32(float %429) #18
  %431 = fptoui float %430 to i8
  %432 = fcmp ogt float %410, 0.000000e+00
  %433 = fcmp ogt float %410, 1.000000e+00
  %434 = select i1 %433, float 1.000000e+00, float %410
  %435 = fmul float %434, 2.550000e+02
  %436 = select i1 %432, float %435, float 0.000000e+00
  %437 = tail call float @llvm.round.f32(float %436) #18
  %438 = fptoui float %437 to i8
  %439 = zext i8 %417 to i32
  %440 = zext i8 %424 to i32
  %441 = shl nuw nsw i32 %440, 8
  %442 = or i32 %441, %439
  %443 = zext i8 %431 to i32
  %444 = shl nuw nsw i32 %443, 16
  %445 = or i32 %442, %444
  %446 = zext i8 %438 to i32
  %447 = shl nuw i32 %446, 24
  %448 = or i32 %445, %447
  %449 = bitcast i8* %402 to i32*
  store i32 %448, i32* %449, align 4
  %450 = getelementptr inbounds i8, i8* %402, i64 4
  %451 = bitcast i8* %450 to i32*
  store i32 4, i32* %451, align 4
  br label %602

452:                                              ; preds = %2
  %453 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %454 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %453, i64 8) #18
  %455 = bitcast i8* %454 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %455) #18
  %456 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %12) #18
  %457 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 1
  %458 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %457) #18
  %459 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 2
  %460 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %459) #18
  %461 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 3
  %462 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %461) #18
  %463 = fcmp ogt float %456, -1.000000e+00
  %464 = fcmp ogt float %456, 1.000000e+00
  %465 = select i1 %464, float 1.000000e+00, float %456
  %466 = fmul float %465, 1.270000e+02
  %467 = select i1 %463, float %466, float -1.270000e+02
  %468 = tail call float @llvm.round.f32(float %467) #18
  %469 = fptosi float %468 to i8
  %470 = fcmp ogt float %458, -1.000000e+00
  %471 = fcmp ogt float %458, 1.000000e+00
  %472 = select i1 %471, float 1.000000e+00, float %458
  %473 = fmul float %472, 1.270000e+02
  %474 = select i1 %470, float %473, float -1.270000e+02
  %475 = tail call float @llvm.round.f32(float %474) #18
  %476 = fptosi float %475 to i8
  %477 = fcmp ogt float %460, -1.000000e+00
  %478 = fcmp ogt float %460, 1.000000e+00
  %479 = select i1 %478, float 1.000000e+00, float %460
  %480 = fmul float %479, 1.270000e+02
  %481 = select i1 %477, float %480, float -1.270000e+02
  %482 = tail call float @llvm.round.f32(float %481) #18
  %483 = fptosi float %482 to i8
  %484 = fcmp ogt float %462, -1.000000e+00
  %485 = fcmp ogt float %462, 1.000000e+00
  %486 = select i1 %485, float 1.000000e+00, float %462
  %487 = fmul float %486, 1.270000e+02
  %488 = select i1 %484, float %487, float -1.270000e+02
  %489 = tail call float @llvm.round.f32(float %488) #18
  %490 = fptosi float %489 to i8
  %491 = zext i8 %469 to i32
  %492 = zext i8 %476 to i32
  %493 = shl nuw nsw i32 %492, 8
  %494 = or i32 %493, %491
  %495 = zext i8 %483 to i32
  %496 = shl nuw nsw i32 %495, 16
  %497 = or i32 %494, %496
  %498 = zext i8 %490 to i32
  %499 = shl nuw i32 %498, 24
  %500 = or i32 %497, %499
  %501 = bitcast i8* %454 to i32*
  store i32 %500, i32* %501, align 4
  %502 = getelementptr inbounds i8, i8* %454, i64 4
  %503 = bitcast i8* %502 to i32*
  store i32 4, i32* %503, align 4
  br label %602

504:                                              ; preds = %2
  %505 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %506 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %505, i64 32) #18
  %507 = bitcast i8* %506 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %507) #18
  %508 = getelementptr inbounds i8, i8* %506, i64 8
  %509 = bitcast i8* %508 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %509) #18
  %510 = getelementptr inbounds i8, i8* %506, i64 16
  %511 = bitcast i8* %510 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %511) #18
  %512 = getelementptr inbounds i8, i8* %506, i64 24
  %513 = bitcast i8* %512 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %513) #18
  %514 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %12) #18
  %515 = trunc i32 %514 to i8
  %516 = uitofp i8 %515 to float
  %517 = fdiv float %516, 2.550000e+02
  %518 = lshr i32 %514, 8
  %519 = trunc i32 %518 to i8
  %520 = uitofp i8 %519 to float
  %521 = fdiv float %520, 2.550000e+02
  %522 = lshr i32 %514, 16
  %523 = trunc i32 %522 to i8
  %524 = uitofp i8 %523 to float
  %525 = fdiv float %524, 2.550000e+02
  %526 = lshr i32 %514, 24
  %527 = trunc i32 %526 to i8
  %528 = uitofp i8 %527 to float
  %529 = fdiv float %528, 2.550000e+02
  %530 = bitcast i8* %506 to float*
  store float %517, float* %530, align 4
  %531 = getelementptr inbounds i8, i8* %506, i64 4
  %532 = bitcast i8* %531 to i32*
  store i32 1, i32* %532, align 4
  %533 = getelementptr inbounds i8, i8* %506, i64 8
  %534 = bitcast i8* %533 to float*
  store float %521, float* %534, align 4
  %535 = getelementptr inbounds i8, i8* %506, i64 12
  %536 = bitcast i8* %535 to i32*
  store i32 1, i32* %536, align 4
  %537 = getelementptr inbounds i8, i8* %506, i64 16
  %538 = bitcast i8* %537 to float*
  store float %525, float* %538, align 4
  %539 = getelementptr inbounds i8, i8* %506, i64 20
  %540 = bitcast i8* %539 to i32*
  store i32 1, i32* %540, align 4
  %541 = getelementptr inbounds i8, i8* %506, i64 24
  %542 = bitcast i8* %541 to float*
  store float %529, float* %542, align 4
  %543 = getelementptr inbounds i8, i8* %506, i64 28
  %544 = bitcast i8* %543 to i32*
  store i32 1, i32* %544, align 4
  br label %602

545:                                              ; preds = %2
  %546 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %547 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %546, i64 32) #18
  %548 = bitcast i8* %547 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %548) #18
  %549 = getelementptr inbounds i8, i8* %547, i64 8
  %550 = bitcast i8* %549 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %550) #18
  %551 = getelementptr inbounds i8, i8* %547, i64 16
  %552 = bitcast i8* %551 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %552) #18
  %553 = getelementptr inbounds i8, i8* %547, i64 24
  %554 = bitcast i8* %553 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %554) #18
  %555 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %12) #18
  %556 = trunc i32 %555 to i8
  %557 = sitofp i8 %556 to float
  %558 = fdiv float %557, 1.270000e+02
  %559 = fcmp ogt float %558, -1.000000e+00
  %560 = fcmp ogt float %558, 1.000000e+00
  %561 = select i1 %560, float 1.000000e+00, float %558
  %562 = select i1 %559, float %561, float -1.000000e+00
  %563 = lshr i32 %555, 8
  %564 = trunc i32 %563 to i8
  %565 = sitofp i8 %564 to float
  %566 = fdiv float %565, 1.270000e+02
  %567 = fcmp ogt float %566, -1.000000e+00
  %568 = fcmp ogt float %566, 1.000000e+00
  %569 = select i1 %568, float 1.000000e+00, float %566
  %570 = select i1 %567, float %569, float -1.000000e+00
  %571 = lshr i32 %555, 16
  %572 = trunc i32 %571 to i8
  %573 = sitofp i8 %572 to float
  %574 = fdiv float %573, 1.270000e+02
  %575 = fcmp ogt float %574, -1.000000e+00
  %576 = fcmp ogt float %574, 1.000000e+00
  %577 = select i1 %576, float 1.000000e+00, float %574
  %578 = select i1 %575, float %577, float -1.000000e+00
  %579 = lshr i32 %555, 24
  %580 = trunc i32 %579 to i8
  %581 = sitofp i8 %580 to float
  %582 = fdiv float %581, 1.270000e+02
  %583 = fcmp ogt float %582, -1.000000e+00
  %584 = fcmp ogt float %582, 1.000000e+00
  %585 = select i1 %584, float 1.000000e+00, float %582
  %586 = select i1 %583, float %585, float -1.000000e+00
  %587 = bitcast i8* %547 to float*
  store float %562, float* %587, align 4
  %588 = getelementptr inbounds i8, i8* %547, i64 4
  %589 = bitcast i8* %588 to i32*
  store i32 1, i32* %589, align 4
  %590 = getelementptr inbounds i8, i8* %547, i64 8
  %591 = bitcast i8* %590 to float*
  store float %570, float* %591, align 4
  %592 = getelementptr inbounds i8, i8* %547, i64 12
  %593 = bitcast i8* %592 to i32*
  store i32 1, i32* %593, align 4
  %594 = getelementptr inbounds i8, i8* %547, i64 16
  %595 = bitcast i8* %594 to float*
  store float %578, float* %595, align 4
  %596 = getelementptr inbounds i8, i8* %547, i64 20
  %597 = bitcast i8* %596 to i32*
  store i32 1, i32* %597, align 4
  %598 = getelementptr inbounds i8, i8* %547, i64 24
  %599 = bitcast i8* %598 to float*
  store float %586, float* %599, align 4
  %600 = getelementptr inbounds i8, i8* %547, i64 28
  %601 = bitcast i8* %600 to i32*
  store i32 1, i32* %601, align 4
  br label %602

602:                                              ; preds = %42, %27, %20, %35, %49, %34, %2, %545, %504, %452, %400, %381, %373, %275, %247, %218, %190, %189, %145, %120, %64
  %603 = phi %"class.sh::TConstantUnion"* [ null, %2 ], [ %548, %545 ], [ %507, %504 ], [ %455, %452 ], [ %403, %400 ], [ %384, %381 ], [ %299, %373 ], [ %278, %275 ], [ %250, %247 ], [ %221, %218 ], [ %193, %190 ], [ %160, %189 ], [ %131, %145 ], [ %77, %120 ], [ %53, %64 ], [ %23, %34 ], [ %38, %49 ], [ %23, %20 ], [ %38, %35 ], [ %23, %27 ], [ %38, %42 ]
  ret %"class.sh::TConstantUnion"* %603
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TConstantUnion"* @_ZN2sh20TIntermConstantUnion22foldUnaryComponentWiseE9TOperatorPNS_12TDiagnosticsE(%"class.sh::TIntermConstantUnion"*, i8 zeroext, %"class.sh::TDiagnostics"*) local_unnamed_addr #0 align 2 {
  %4 = alloca float, align 4
  %5 = bitcast %"class.sh::TIntermConstantUnion"* %0 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)***
  %6 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)** %6, i64 29
  %8 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)** %7, align 8
  %9 = tail call %"class.sh::TConstantUnion"* %8(%"class.sh::TIntermConstantUnion"* %0) #18
  %10 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 0
  %11 = bitcast %"class.sh::TIntermConstantUnion"* %0 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %12 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %13 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %12, i64 31
  %14 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %13, align 8
  %15 = tail call dereferenceable(184) %"class.sh::TType"* %14(%"class.sh::TIntermExpression"* %10) #18
  %16 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %15) #18
  %17 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %16, i64 8)
  %18 = extractvalue { i64, i1 } %17, 1
  %19 = extractvalue { i64, i1 } %17, 0
  %20 = select i1 %18, i64 -1, i64 %19
  %21 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %22 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %21, i64 %20) #18
  %23 = bitcast i8* %22 to %"class.sh::TConstantUnion"*
  %24 = icmp eq i64 %16, 0
  br i1 %24, label %826, label %25

25:                                               ; preds = %3
  %26 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %16
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi %"class.sh::TConstantUnion"* [ %23, %25 ], [ %29, %27 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %28) #18
  %29 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %28, i64 1
  %30 = icmp eq %"class.sh::TConstantUnion"* %29, %26
  br i1 %30, label %31, label %27

31:                                               ; preds = %27
  br i1 %24, label %826, label %32

32:                                               ; preds = %31
  %33 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %34 = bitcast float* %4 to i8*
  br label %35

35:                                               ; preds = %823, %32
  %36 = phi i64 [ 0, %32 ], [ %824, %823 ]
  switch i8 %1, label %826 [
    i8 4, label %37
    i8 5, label %75
    i8 6, label %98
    i8 7, label %114
    i8 48, label %133
    i8 49, label %140
    i8 50, label %147
    i8 51, label %154
    i8 52, label %161
    i8 53, label %168
    i8 54, label %200
    i8 55, label %232
    i8 56, label %239
    i8 57, label %246
    i8 58, label %253
    i8 59, label %260
    i8 60, label %267
    i8 61, label %298
    i8 69, label %330
    i8 70, label %352
    i8 71, label %379
    i8 72, label %386
    i8 73, label %393
    i8 74, label %400
    i8 75, label %417
    i8 76, label %424
    i8 85, label %432
    i8 86, label %444
    i8 88, label %453
    i8 89, label %458
    i8 90, label %463
    i8 91, label %467
    i8 63, label %471
    i8 64, label %478
    i8 65, label %509
    i8 66, label %516
    i8 67, label %549
    i8 68, label %580
    i8 122, label %613
    i8 108, label %621
    i8 125, label %662
    i8 126, label %756
    i8 127, label %774
    i8 -128, label %794
    i8 112, label %819
    i8 113, label %819
    i8 114, label %819
  ]

37:                                               ; preds = %35
  %38 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %39 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %38, i64 31
  %40 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %39, align 8
  %41 = tail call dereferenceable(184) %"class.sh::TType"* %40(%"class.sh::TIntermExpression"* %10) #18
  %42 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %41, i64 0, i32 0
  %43 = load i32, i32* %42, align 8
  switch i32 %43, label %826 [
    i32 1, label %44
    i32 3, label %51
    i32 4, label %63
  ]

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %46 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %47 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %46) #18
  %48 = fsub float -0.000000e+00, %47
  %49 = bitcast %"class.sh::TConstantUnion"* %45 to float*
  store float %48, float* %49, align 4
  %50 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %50, align 4
  br label %823

51:                                               ; preds = %37
  %52 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %53 = tail call zeroext i1 @_ZNK2sh14TConstantUnioneqEi(%"class.sh::TConstantUnion"* %52, i32 -2147483648) #18
  %54 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  br i1 %53, label %55, label %58

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %54, i64 0, i32 0, i32 0
  store i32 -2147483648, i32* %56, align 4
  %57 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %57, align 4
  br label %823

58:                                               ; preds = %51
  %59 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %52) #18
  %60 = sub nsw i32 0, %59
  %61 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %54, i64 0, i32 0, i32 0
  store i32 %60, i32* %61, align 4
  %62 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %62, align 4
  br label %823

63:                                               ; preds = %37
  %64 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %65 = tail call zeroext i1 @_ZNK2sh14TConstantUnioneqEj(%"class.sh::TConstantUnion"* %64, i32 -2147483648) #18
  %66 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  br i1 %65, label %67, label %70

67:                                               ; preds = %63
  %68 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %66, i64 0, i32 0, i32 0
  store i32 -2147483648, i32* %68, align 4
  %69 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %69, align 4
  br label %823

70:                                               ; preds = %63
  %71 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %64) #18
  %72 = sub nsw i32 0, %71
  %73 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %66, i64 0, i32 0, i32 0
  store i32 %72, i32* %73, align 4
  %74 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %74, align 4
  br label %823

75:                                               ; preds = %35
  %76 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %77 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %76, i64 31
  %78 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %77, align 8
  %79 = tail call dereferenceable(184) %"class.sh::TType"* %78(%"class.sh::TIntermExpression"* %10) #18
  %80 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %79, i64 0, i32 0
  %81 = load i32, i32* %80, align 8
  switch i32 %81, label %826 [
    i32 1, label %82
    i32 3, label %88
    i32 4, label %93
  ]

82:                                               ; preds = %75
  %83 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %84 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %85 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %84) #18
  %86 = bitcast %"class.sh::TConstantUnion"* %83 to float*
  store float %85, float* %86, align 4
  %87 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %87, align 4
  br label %823

88:                                               ; preds = %75
  %89 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %90 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %89) #18
  %91 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %90, i32* %91, align 4
  %92 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %92, align 4
  br label %823

93:                                               ; preds = %75
  %94 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %95 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %94) #18
  %96 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %95, i32* %96, align 4
  %97 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %97, align 4
  br label %823

98:                                               ; preds = %35
  %99 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %100 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %99, i64 31
  %101 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %100, align 8
  %102 = tail call dereferenceable(184) %"class.sh::TType"* %101(%"class.sh::TIntermExpression"* %10) #18
  %103 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %102, i64 0, i32 0
  %104 = load i32, i32* %103, align 8
  %105 = icmp eq i32 %104, 5
  br i1 %105, label %106, label %826

106:                                              ; preds = %98
  %107 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %108 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %109 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* %108) #18
  %110 = xor i1 %109, true
  %111 = zext i1 %110 to i8
  %112 = bitcast %"class.sh::TConstantUnion"* %107 to i8*
  store i8 %111, i8* %112, align 4
  %113 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 5, i32* %113, align 4
  br label %823

114:                                              ; preds = %35
  %115 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %116 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %115, i64 31
  %117 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %116, align 8
  %118 = tail call dereferenceable(184) %"class.sh::TType"* %117(%"class.sh::TIntermExpression"* %10) #18
  %119 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %118, i64 0, i32 0
  %120 = load i32, i32* %119, align 8
  switch i32 %120, label %826 [
    i32 3, label %121
    i32 4, label %127
  ]

121:                                              ; preds = %114
  %122 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %123 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %122) #18
  %124 = xor i32 %123, -1
  %125 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %124, i32* %125, align 4
  %126 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %126, align 4
  br label %823

127:                                              ; preds = %114
  %128 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %129 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %128) #18
  %130 = xor i32 %129, -1
  %131 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %130, i32* %131, align 4
  %132 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %132, align 4
  br label %823

133:                                              ; preds = %35
  %134 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %135 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %136 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %135) #18
  %137 = fmul float %136, 0x3F91DF46A0000000
  %138 = bitcast %"class.sh::TConstantUnion"* %134 to float*
  store float %137, float* %138, align 4
  %139 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %139, align 4
  br label %823

140:                                              ; preds = %35
  %141 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %142 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %143 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %142) #18
  %144 = fmul float %143, 0x404CA5DC00000000
  %145 = bitcast %"class.sh::TConstantUnion"* %141 to float*
  store float %144, float* %145, align 4
  %146 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %146, align 4
  br label %823

147:                                              ; preds = %35
  %148 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %149 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %150 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %148) #18
  %151 = tail call float @sinf(float %150) #18
  %152 = bitcast %"class.sh::TConstantUnion"* %149 to float*
  store float %151, float* %152, align 4
  %153 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %153, align 4
  br label %823

154:                                              ; preds = %35
  %155 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %156 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %157 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %155) #18
  %158 = tail call float @cosf(float %157) #18
  %159 = bitcast %"class.sh::TConstantUnion"* %156 to float*
  store float %158, float* %159, align 4
  %160 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %160, align 4
  br label %823

161:                                              ; preds = %35
  %162 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %163 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %164 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %162) #18
  %165 = tail call float @tanf(float %164) #18
  %166 = bitcast %"class.sh::TConstantUnion"* %163 to float*
  store float %165, float* %166, align 4
  %167 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %167, align 4
  br label %823

168:                                              ; preds = %35
  %169 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %170 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %169) #18
  %171 = tail call float @llvm.fabs.f32(float %170)
  %172 = fcmp ogt float %171, 1.000000e+00
  br i1 %172, label %173, label %194

173:                                              ; preds = %168
  %174 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %175 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %174, i64 31
  %176 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %175, align 8
  %177 = tail call dereferenceable(184) %"class.sh::TType"* %176(%"class.sh::TIntermExpression"* %10) #18
  %178 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %177, i64 0, i32 0
  %179 = load i32, i32* %178, align 8
  %180 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %181 = tail call i8* @_Z17GetOperatorString9TOperator(i8 zeroext 53) #18
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* dereferenceable(16) %33, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %181) #18
  switch i32 %179, label %823 [
    i32 1, label %182
    i32 3, label %185
    i32 4, label %188
    i32 5, label %191
  ]

182:                                              ; preds = %173
  %183 = bitcast %"class.sh::TConstantUnion"* %180 to float*
  store float 0.000000e+00, float* %183, align 4
  %184 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %184, align 4
  br label %823

185:                                              ; preds = %173
  %186 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %180, i64 0, i32 0, i32 0
  store i32 0, i32* %186, align 4
  %187 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %187, align 4
  br label %823

188:                                              ; preds = %173
  %189 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %180, i64 0, i32 0, i32 0
  store i32 0, i32* %189, align 4
  %190 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %190, align 4
  br label %823

191:                                              ; preds = %173
  %192 = bitcast %"class.sh::TConstantUnion"* %180 to i8*
  store i8 0, i8* %192, align 4
  %193 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 5, i32* %193, align 4
  br label %823

194:                                              ; preds = %168
  %195 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %196 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %169) #18
  %197 = tail call float @asinf(float %196) #18
  %198 = bitcast %"class.sh::TConstantUnion"* %195 to float*
  store float %197, float* %198, align 4
  %199 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %199, align 4
  br label %823

200:                                              ; preds = %35
  %201 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %202 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %201) #18
  %203 = tail call float @llvm.fabs.f32(float %202)
  %204 = fcmp ogt float %203, 1.000000e+00
  br i1 %204, label %205, label %226

205:                                              ; preds = %200
  %206 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %207 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %206, i64 31
  %208 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %207, align 8
  %209 = tail call dereferenceable(184) %"class.sh::TType"* %208(%"class.sh::TIntermExpression"* %10) #18
  %210 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %209, i64 0, i32 0
  %211 = load i32, i32* %210, align 8
  %212 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %213 = tail call i8* @_Z17GetOperatorString9TOperator(i8 zeroext 54) #18
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* dereferenceable(16) %33, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %213) #18
  switch i32 %211, label %823 [
    i32 1, label %214
    i32 3, label %217
    i32 4, label %220
    i32 5, label %223
  ]

214:                                              ; preds = %205
  %215 = bitcast %"class.sh::TConstantUnion"* %212 to float*
  store float 0.000000e+00, float* %215, align 4
  %216 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %216, align 4
  br label %823

217:                                              ; preds = %205
  %218 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 0, i32 0, i32 0
  store i32 0, i32* %218, align 4
  %219 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %219, align 4
  br label %823

220:                                              ; preds = %205
  %221 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 0, i32 0, i32 0
  store i32 0, i32* %221, align 4
  %222 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %222, align 4
  br label %823

223:                                              ; preds = %205
  %224 = bitcast %"class.sh::TConstantUnion"* %212 to i8*
  store i8 0, i8* %224, align 4
  %225 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 5, i32* %225, align 4
  br label %823

226:                                              ; preds = %200
  %227 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %228 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %201) #18
  %229 = tail call float @acosf(float %228) #18
  %230 = bitcast %"class.sh::TConstantUnion"* %227 to float*
  store float %229, float* %230, align 4
  %231 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %231, align 4
  br label %823

232:                                              ; preds = %35
  %233 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %234 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %235 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %233) #18
  %236 = tail call float @atanf(float %235) #18
  %237 = bitcast %"class.sh::TConstantUnion"* %234 to float*
  store float %236, float* %237, align 4
  %238 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %238, align 4
  br label %823

239:                                              ; preds = %35
  %240 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %241 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %242 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %240) #18
  %243 = tail call float @sinhf(float %242) #18
  %244 = bitcast %"class.sh::TConstantUnion"* %241 to float*
  store float %243, float* %244, align 4
  %245 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %245, align 4
  br label %823

246:                                              ; preds = %35
  %247 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %248 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %249 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %247) #18
  %250 = tail call float @coshf(float %249) #18
  %251 = bitcast %"class.sh::TConstantUnion"* %248 to float*
  store float %250, float* %251, align 4
  %252 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %252, align 4
  br label %823

253:                                              ; preds = %35
  %254 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %255 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %256 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %254) #18
  %257 = tail call float @tanhf(float %256) #18
  %258 = bitcast %"class.sh::TConstantUnion"* %255 to float*
  store float %257, float* %258, align 4
  %259 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %259, align 4
  br label %823

260:                                              ; preds = %35
  %261 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %262 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %263 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %261) #18
  %264 = tail call float @asinhf(float %263) #18
  %265 = bitcast %"class.sh::TConstantUnion"* %262 to float*
  store float %264, float* %265, align 4
  %266 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %266, align 4
  br label %823

267:                                              ; preds = %35
  %268 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %269 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %268) #18
  %270 = fcmp olt float %269, 1.000000e+00
  br i1 %270, label %271, label %292

271:                                              ; preds = %267
  %272 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %273 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %272, i64 31
  %274 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %273, align 8
  %275 = tail call dereferenceable(184) %"class.sh::TType"* %274(%"class.sh::TIntermExpression"* %10) #18
  %276 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %275, i64 0, i32 0
  %277 = load i32, i32* %276, align 8
  %278 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %279 = tail call i8* @_Z17GetOperatorString9TOperator(i8 zeroext 60) #18
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* dereferenceable(16) %33, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %279) #18
  switch i32 %277, label %823 [
    i32 1, label %280
    i32 3, label %283
    i32 4, label %286
    i32 5, label %289
  ]

280:                                              ; preds = %271
  %281 = bitcast %"class.sh::TConstantUnion"* %278 to float*
  store float 0.000000e+00, float* %281, align 4
  %282 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %282, align 4
  br label %823

283:                                              ; preds = %271
  %284 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %278, i64 0, i32 0, i32 0
  store i32 0, i32* %284, align 4
  %285 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %285, align 4
  br label %823

286:                                              ; preds = %271
  %287 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %278, i64 0, i32 0, i32 0
  store i32 0, i32* %287, align 4
  %288 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %288, align 4
  br label %823

289:                                              ; preds = %271
  %290 = bitcast %"class.sh::TConstantUnion"* %278 to i8*
  store i8 0, i8* %290, align 4
  %291 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 5, i32* %291, align 4
  br label %823

292:                                              ; preds = %267
  %293 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %294 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %268) #18
  %295 = tail call float @acoshf(float %294) #18
  %296 = bitcast %"class.sh::TConstantUnion"* %293 to float*
  store float %295, float* %296, align 4
  %297 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %297, align 4
  br label %823

298:                                              ; preds = %35
  %299 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %300 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %299) #18
  %301 = tail call float @llvm.fabs.f32(float %300)
  %302 = fcmp ult float %301, 1.000000e+00
  br i1 %302, label %324, label %303

303:                                              ; preds = %298
  %304 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %305 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %304, i64 31
  %306 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %305, align 8
  %307 = tail call dereferenceable(184) %"class.sh::TType"* %306(%"class.sh::TIntermExpression"* %10) #18
  %308 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %307, i64 0, i32 0
  %309 = load i32, i32* %308, align 8
  %310 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %311 = tail call i8* @_Z17GetOperatorString9TOperator(i8 zeroext 61) #18
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* dereferenceable(16) %33, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %311) #18
  switch i32 %309, label %823 [
    i32 1, label %312
    i32 3, label %315
    i32 4, label %318
    i32 5, label %321
  ]

312:                                              ; preds = %303
  %313 = bitcast %"class.sh::TConstantUnion"* %310 to float*
  store float 0.000000e+00, float* %313, align 4
  %314 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %314, align 4
  br label %823

315:                                              ; preds = %303
  %316 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %310, i64 0, i32 0, i32 0
  store i32 0, i32* %316, align 4
  %317 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %317, align 4
  br label %823

318:                                              ; preds = %303
  %319 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %310, i64 0, i32 0, i32 0
  store i32 0, i32* %319, align 4
  %320 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %320, align 4
  br label %823

321:                                              ; preds = %303
  %322 = bitcast %"class.sh::TConstantUnion"* %310 to i8*
  store i8 0, i8* %322, align 4
  %323 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 5, i32* %323, align 4
  br label %823

324:                                              ; preds = %298
  %325 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %326 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %299) #18
  %327 = tail call float @atanhf(float %326) #18
  %328 = bitcast %"class.sh::TConstantUnion"* %325 to float*
  store float %327, float* %328, align 4
  %329 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %329, align 4
  br label %823

330:                                              ; preds = %35
  %331 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %332 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %331, i64 31
  %333 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %332, align 8
  %334 = tail call dereferenceable(184) %"class.sh::TType"* %333(%"class.sh::TIntermExpression"* %10) #18
  %335 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %334, i64 0, i32 0
  %336 = load i32, i32* %335, align 8
  switch i32 %336, label %826 [
    i32 1, label %337
    i32 3, label %344
  ]

337:                                              ; preds = %330
  %338 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %339 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %340 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %339) #18
  %341 = tail call float @llvm.fabs.f32(float %340)
  %342 = bitcast %"class.sh::TConstantUnion"* %338 to float*
  store float %341, float* %342, align 4
  %343 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %343, align 4
  br label %823

344:                                              ; preds = %330
  %345 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %346 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %345) #18
  %347 = icmp slt i32 %346, 0
  %348 = sub nsw i32 0, %346
  %349 = select i1 %347, i32 %348, i32 %346
  %350 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %349, i32* %350, align 4
  %351 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %351, align 4
  br label %823

352:                                              ; preds = %35
  %353 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %354 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %353, i64 31
  %355 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %354, align 8
  %356 = tail call dereferenceable(184) %"class.sh::TType"* %355(%"class.sh::TIntermExpression"* %10) #18
  %357 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %356, i64 0, i32 0
  %358 = load i32, i32* %357, align 8
  switch i32 %358, label %826 [
    i32 1, label %359
    i32 3, label %371
  ]

359:                                              ; preds = %352
  %360 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %361 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %360) #18
  %362 = fcmp ogt float %361, 0.000000e+00
  br i1 %362, label %366, label %363

363:                                              ; preds = %359
  %364 = fcmp olt float %361, 0.000000e+00
  br i1 %364, label %365, label %366

365:                                              ; preds = %363
  br label %366

366:                                              ; preds = %359, %363, %365
  %367 = phi float [ -1.000000e+00, %365 ], [ 0.000000e+00, %363 ], [ 1.000000e+00, %359 ]
  %368 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %369 = bitcast %"class.sh::TConstantUnion"* %368 to float*
  store float %367, float* %369, align 4
  %370 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %370, align 4
  br label %823

371:                                              ; preds = %352
  %372 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %373 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %372) #18
  %374 = icmp sgt i32 %373, 0
  %375 = ashr i32 %373, 31
  %376 = select i1 %374, i32 1, i32 %375
  %377 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %376, i32* %377, align 4
  %378 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %378, align 4
  br label %823

379:                                              ; preds = %35
  %380 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %381 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %382 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %380) #18
  %383 = tail call float @floorf(float %382) #18
  %384 = bitcast %"class.sh::TConstantUnion"* %381 to float*
  store float %383, float* %384, align 4
  %385 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %385, align 4
  br label %823

386:                                              ; preds = %35
  %387 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %388 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %389 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %387) #18
  %390 = tail call float @truncf(float %389) #18
  %391 = bitcast %"class.sh::TConstantUnion"* %388 to float*
  store float %390, float* %391, align 4
  %392 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %392, align 4
  br label %823

393:                                              ; preds = %35
  %394 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %395 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %396 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %394) #18
  %397 = tail call float @roundf(float %396) #18
  %398 = bitcast %"class.sh::TConstantUnion"* %395 to float*
  store float %397, float* %398, align 4
  %399 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %399, align 4
  br label %823

400:                                              ; preds = %35
  %401 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %402 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %401) #18
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %34) #18
  store float 0xFFFFFFFFE0000000, float* %4, align 4
  %403 = call float @modff(float %402, float* nonnull %4) #18
  %404 = tail call float @llvm.fabs.f32(float %403)
  %405 = fcmp oeq float %404, 5.000000e-01
  br i1 %405, label %406, label %410

406:                                              ; preds = %400
  %407 = fmul float %402, 5.000000e-01
  %408 = tail call float @llvm.round.f32(float %407)
  %409 = fmul float %408, 2.000000e+00
  br label %412

410:                                              ; preds = %400
  %411 = tail call float @llvm.round.f32(float %402)
  br label %412

412:                                              ; preds = %410, %406
  %413 = phi float [ %411, %410 ], [ %409, %406 ]
  %414 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %415 = bitcast %"class.sh::TConstantUnion"* %414 to float*
  store float %413, float* %415, align 4
  %416 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %416, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34) #18
  br label %823

417:                                              ; preds = %35
  %418 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %419 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %420 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %418) #18
  %421 = tail call float @ceilf(float %420) #18
  %422 = bitcast %"class.sh::TConstantUnion"* %419 to float*
  store float %421, float* %422, align 4
  %423 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %423, align 4
  br label %823

424:                                              ; preds = %35
  %425 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %426 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %425) #18
  %427 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %428 = tail call float @llvm.floor.f32(float %426)
  %429 = fsub float %426, %428
  %430 = bitcast %"class.sh::TConstantUnion"* %427 to float*
  store float %429, float* %430, align 4
  %431 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %431, align 4
  br label %823

432:                                              ; preds = %35
  %433 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %434 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %9) #18
  %435 = bitcast float %434 to i32
  %436 = and i32 %435, 2139095040
  %437 = icmp eq i32 %436, 2139095040
  %438 = and i32 %435, 8388607
  %439 = icmp ne i32 %438, 0
  %440 = and i1 %437, %439
  %441 = zext i1 %440 to i8
  %442 = bitcast %"class.sh::TConstantUnion"* %433 to i8*
  store i8 %441, i8* %442, align 4
  %443 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 5, i32* %443, align 4
  br label %823

444:                                              ; preds = %35
  %445 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %446 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %9) #18
  %447 = bitcast float %446 to i32
  %448 = and i32 %447, 2147483647
  %449 = icmp eq i32 %448, 2139095040
  %450 = zext i1 %449 to i8
  %451 = bitcast %"class.sh::TConstantUnion"* %445 to i8*
  store i8 %450, i8* %451, align 4
  %452 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 5, i32* %452, align 4
  br label %823

453:                                              ; preds = %35
  %454 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %455 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %9) #18
  %456 = bitcast %"class.sh::TConstantUnion"* %454 to float*
  store float %455, float* %456, align 4
  %457 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %457, align 4
  br label %823

458:                                              ; preds = %35
  %459 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %460 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %9) #18
  %461 = bitcast %"class.sh::TConstantUnion"* %459 to float*
  store float %460, float* %461, align 4
  %462 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %462, align 4
  br label %823

463:                                              ; preds = %35
  %464 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %9) #18
  %465 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %464, i32* %465, align 4
  %466 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %466, align 4
  br label %823

467:                                              ; preds = %35
  %468 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %9) #18
  %469 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %468, i32* %469, align 4
  %470 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %470, align 4
  br label %823

471:                                              ; preds = %35
  %472 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %473 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %474 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %472) #18
  %475 = tail call float @expf(float %474) #18
  %476 = bitcast %"class.sh::TConstantUnion"* %473 to float*
  store float %475, float* %476, align 4
  %477 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %477, align 4
  br label %823

478:                                              ; preds = %35
  %479 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %480 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %479) #18
  %481 = fcmp ugt float %480, 0.000000e+00
  br i1 %481, label %503, label %482

482:                                              ; preds = %478
  %483 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %484 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %483, i64 31
  %485 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %484, align 8
  %486 = tail call dereferenceable(184) %"class.sh::TType"* %485(%"class.sh::TIntermExpression"* %10) #18
  %487 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %486, i64 0, i32 0
  %488 = load i32, i32* %487, align 8
  %489 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %490 = tail call i8* @_Z17GetOperatorString9TOperator(i8 zeroext 64) #18
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* dereferenceable(16) %33, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %490) #18
  switch i32 %488, label %823 [
    i32 1, label %491
    i32 3, label %494
    i32 4, label %497
    i32 5, label %500
  ]

491:                                              ; preds = %482
  %492 = bitcast %"class.sh::TConstantUnion"* %489 to float*
  store float 0.000000e+00, float* %492, align 4
  %493 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %493, align 4
  br label %823

494:                                              ; preds = %482
  %495 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %489, i64 0, i32 0, i32 0
  store i32 0, i32* %495, align 4
  %496 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %496, align 4
  br label %823

497:                                              ; preds = %482
  %498 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %489, i64 0, i32 0, i32 0
  store i32 0, i32* %498, align 4
  %499 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %499, align 4
  br label %823

500:                                              ; preds = %482
  %501 = bitcast %"class.sh::TConstantUnion"* %489 to i8*
  store i8 0, i8* %501, align 4
  %502 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 5, i32* %502, align 4
  br label %823

503:                                              ; preds = %478
  %504 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %505 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %479) #18
  %506 = tail call float @logf(float %505) #18
  %507 = bitcast %"class.sh::TConstantUnion"* %504 to float*
  store float %506, float* %507, align 4
  %508 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %508, align 4
  br label %823

509:                                              ; preds = %35
  %510 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %511 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %512 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %510) #18
  %513 = tail call float @exp2f(float %512) #18
  %514 = bitcast %"class.sh::TConstantUnion"* %511 to float*
  store float %513, float* %514, align 4
  %515 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %515, align 4
  br label %823

516:                                              ; preds = %35
  %517 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %518 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %517) #18
  %519 = fcmp ugt float %518, 0.000000e+00
  br i1 %519, label %541, label %520

520:                                              ; preds = %516
  %521 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %522 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %521, i64 31
  %523 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %522, align 8
  %524 = tail call dereferenceable(184) %"class.sh::TType"* %523(%"class.sh::TIntermExpression"* %10) #18
  %525 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %524, i64 0, i32 0
  %526 = load i32, i32* %525, align 8
  %527 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %528 = tail call i8* @_Z17GetOperatorString9TOperator(i8 zeroext 66) #18
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* dereferenceable(16) %33, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %528) #18
  switch i32 %526, label %823 [
    i32 1, label %529
    i32 3, label %532
    i32 4, label %535
    i32 5, label %538
  ]

529:                                              ; preds = %520
  %530 = bitcast %"class.sh::TConstantUnion"* %527 to float*
  store float 0.000000e+00, float* %530, align 4
  %531 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %531, align 4
  br label %823

532:                                              ; preds = %520
  %533 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %527, i64 0, i32 0, i32 0
  store i32 0, i32* %533, align 4
  %534 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %534, align 4
  br label %823

535:                                              ; preds = %520
  %536 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %527, i64 0, i32 0, i32 0
  store i32 0, i32* %536, align 4
  %537 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %537, align 4
  br label %823

538:                                              ; preds = %520
  %539 = bitcast %"class.sh::TConstantUnion"* %527 to i8*
  store i8 0, i8* %539, align 4
  %540 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 5, i32* %540, align 4
  br label %823

541:                                              ; preds = %516
  %542 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %543 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %517) #18
  %544 = tail call float @logf(float %543) #18
  %545 = bitcast %"class.sh::TConstantUnion"* %542 to float*
  store float %544, float* %545, align 4
  %546 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %546, align 4
  %547 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %542) #18
  %548 = fdiv float %547, 0x3FE62E4300000000
  store float %548, float* %545, align 4
  store i32 1, i32* %546, align 4
  br label %823

549:                                              ; preds = %35
  %550 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %551 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %550) #18
  %552 = fcmp olt float %551, 0.000000e+00
  br i1 %552, label %553, label %574

553:                                              ; preds = %549
  %554 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %555 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %554, i64 31
  %556 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %555, align 8
  %557 = tail call dereferenceable(184) %"class.sh::TType"* %556(%"class.sh::TIntermExpression"* %10) #18
  %558 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %557, i64 0, i32 0
  %559 = load i32, i32* %558, align 8
  %560 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %561 = tail call i8* @_Z17GetOperatorString9TOperator(i8 zeroext 67) #18
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* dereferenceable(16) %33, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %561) #18
  switch i32 %559, label %823 [
    i32 1, label %562
    i32 3, label %565
    i32 4, label %568
    i32 5, label %571
  ]

562:                                              ; preds = %553
  %563 = bitcast %"class.sh::TConstantUnion"* %560 to float*
  store float 0.000000e+00, float* %563, align 4
  %564 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %564, align 4
  br label %823

565:                                              ; preds = %553
  %566 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %560, i64 0, i32 0, i32 0
  store i32 0, i32* %566, align 4
  %567 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %567, align 4
  br label %823

568:                                              ; preds = %553
  %569 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %560, i64 0, i32 0, i32 0
  store i32 0, i32* %569, align 4
  %570 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %570, align 4
  br label %823

571:                                              ; preds = %553
  %572 = bitcast %"class.sh::TConstantUnion"* %560 to i8*
  store i8 0, i8* %572, align 4
  %573 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 5, i32* %573, align 4
  br label %823

574:                                              ; preds = %549
  %575 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %576 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %550) #18
  %577 = tail call float @sqrtf(float %576) #18
  %578 = bitcast %"class.sh::TConstantUnion"* %575 to float*
  store float %577, float* %578, align 4
  %579 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %579, align 4
  br label %823

580:                                              ; preds = %35
  %581 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %582 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %581) #18
  %583 = fcmp ugt float %582, 0.000000e+00
  br i1 %583, label %605, label %584

584:                                              ; preds = %580
  %585 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %586 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %585, i64 31
  %587 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %586, align 8
  %588 = tail call dereferenceable(184) %"class.sh::TType"* %587(%"class.sh::TIntermExpression"* %10) #18
  %589 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %588, i64 0, i32 0
  %590 = load i32, i32* %589, align 8
  %591 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %592 = tail call i8* @_Z17GetOperatorString9TOperator(i8 zeroext 68) #18
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* dereferenceable(16) %33, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %592) #18
  switch i32 %590, label %823 [
    i32 1, label %593
    i32 3, label %596
    i32 4, label %599
    i32 5, label %602
  ]

593:                                              ; preds = %584
  %594 = bitcast %"class.sh::TConstantUnion"* %591 to float*
  store float 0.000000e+00, float* %594, align 4
  %595 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %595, align 4
  br label %823

596:                                              ; preds = %584
  %597 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %591, i64 0, i32 0, i32 0
  store i32 0, i32* %597, align 4
  %598 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %598, align 4
  br label %823

599:                                              ; preds = %584
  %600 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %591, i64 0, i32 0, i32 0
  store i32 0, i32* %600, align 4
  %601 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %601, align 4
  br label %823

602:                                              ; preds = %584
  %603 = bitcast %"class.sh::TConstantUnion"* %591 to i8*
  store i8 0, i8* %603, align 4
  %604 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 5, i32* %604, align 4
  br label %823

605:                                              ; preds = %580
  %606 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %607 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %581) #18
  %608 = tail call float @sqrtf(float %607) #18
  %609 = bitcast %"class.sh::TConstantUnion"* %606 to float*
  store float %608, float* %609, align 4
  %610 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %610, align 4
  %611 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %606) #18
  %612 = fdiv float 1.000000e+00, %611
  store float %612, float* %609, align 4
  store i32 1, i32* %610, align 4
  br label %823

613:                                              ; preds = %35
  %614 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %615 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %616 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* %615) #18
  %617 = xor i1 %616, true
  %618 = zext i1 %617 to i8
  %619 = bitcast %"class.sh::TConstantUnion"* %614 to i8*
  store i8 %618, i8* %619, align 4
  %620 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 5, i32* %620, align 4
  br label %823

621:                                              ; preds = %35
  %622 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %623 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %622) #18
  br label %624

624:                                              ; preds = %621, %624
  %625 = phi float [ %630, %624 ], [ 0.000000e+00, %621 ]
  %626 = phi i64 [ %631, %624 ], [ 0, %621 ]
  %627 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %626
  %628 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %627) #18
  %629 = fmul float %628, %628
  %630 = fadd float %625, %629
  %631 = add nuw i64 %626, 1
  %632 = icmp eq i64 %631, %16
  br i1 %632, label %633, label %624

633:                                              ; preds = %624
  %634 = tail call float @sqrtf(float %630) #18
  %635 = fcmp une float %634, 0.000000e+00
  br i1 %635, label %636, label %641

636:                                              ; preds = %633
  %637 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %638 = fdiv float %623, %634
  %639 = bitcast %"class.sh::TConstantUnion"* %637 to float*
  store float %638, float* %639, align 4
  %640 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %640, align 4
  br label %823

641:                                              ; preds = %633
  %642 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %643 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %642, i64 31
  %644 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %643, align 8
  %645 = tail call dereferenceable(184) %"class.sh::TType"* %644(%"class.sh::TIntermExpression"* %10) #18
  %646 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %645, i64 0, i32 0
  %647 = load i32, i32* %646, align 8
  %648 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %649 = tail call i8* @_Z17GetOperatorString9TOperator(i8 zeroext 108) #18
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* dereferenceable(16) %33, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %649) #18
  switch i32 %647, label %823 [
    i32 1, label %650
    i32 3, label %653
    i32 4, label %656
    i32 5, label %659
  ]

650:                                              ; preds = %641
  %651 = bitcast %"class.sh::TConstantUnion"* %648 to float*
  store float 0.000000e+00, float* %651, align 4
  %652 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %652, align 4
  br label %823

653:                                              ; preds = %641
  %654 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %648, i64 0, i32 0, i32 0
  store i32 0, i32* %654, align 4
  %655 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %655, align 4
  br label %823

656:                                              ; preds = %641
  %657 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %648, i64 0, i32 0, i32 0
  store i32 0, i32* %657, align 4
  %658 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %658, align 4
  br label %823

659:                                              ; preds = %641
  %660 = bitcast %"class.sh::TConstantUnion"* %648 to i8*
  store i8 0, i8* %660, align 4
  %661 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 5, i32* %661, align 4
  br label %823

662:                                              ; preds = %35
  %663 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %664 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %663, i64 31
  %665 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %664, align 8
  %666 = tail call dereferenceable(184) %"class.sh::TType"* %665(%"class.sh::TIntermExpression"* %10) #18
  %667 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %666, i64 0, i32 0
  %668 = load i32, i32* %667, align 8
  %669 = icmp eq i32 %668, 3
  %670 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  br i1 %669, label %671, label %673

671:                                              ; preds = %662
  %672 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %670) #18
  br label %675

673:                                              ; preds = %662
  %674 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %670) #18
  br label %675

675:                                              ; preds = %671, %673
  %676 = phi i32 [ %672, %671 ], [ %674, %673 ]
  %677 = insertelement <2 x i32> undef, i32 %676, i32 0
  %678 = shufflevector <2 x i32> %677, <2 x i32> undef, <2 x i32> zeroinitializer
  %679 = lshr <2 x i32> %678, <i32 0, i32 1>
  %680 = and <2 x i32> %679, <i32 1, i32 1>
  %681 = shl <2 x i32> %680, <i32 31, i32 30>
  %682 = lshr <2 x i32> %678, <i32 2, i32 3>
  %683 = and <2 x i32> %682, <i32 1, i32 1>
  %684 = shl <2 x i32> %683, <i32 29, i32 28>
  %685 = or <2 x i32> %684, %681
  %686 = lshr <2 x i32> %678, <i32 4, i32 5>
  %687 = and <2 x i32> %686, <i32 1, i32 1>
  %688 = shl <2 x i32> %687, <i32 27, i32 26>
  %689 = or <2 x i32> %688, %685
  %690 = lshr <2 x i32> %678, <i32 6, i32 7>
  %691 = and <2 x i32> %690, <i32 1, i32 1>
  %692 = shl <2 x i32> %691, <i32 25, i32 24>
  %693 = or <2 x i32> %692, %689
  %694 = lshr <2 x i32> %678, <i32 8, i32 9>
  %695 = and <2 x i32> %694, <i32 1, i32 1>
  %696 = shl <2 x i32> %695, <i32 23, i32 22>
  %697 = or <2 x i32> %696, %693
  %698 = lshr <2 x i32> %678, <i32 10, i32 11>
  %699 = and <2 x i32> %698, <i32 1, i32 1>
  %700 = shl <2 x i32> %699, <i32 21, i32 20>
  %701 = or <2 x i32> %700, %697
  %702 = lshr <2 x i32> %678, <i32 12, i32 13>
  %703 = and <2 x i32> %702, <i32 1, i32 1>
  %704 = shl <2 x i32> %703, <i32 19, i32 18>
  %705 = or <2 x i32> %704, %701
  %706 = lshr <2 x i32> %678, <i32 14, i32 15>
  %707 = and <2 x i32> %706, <i32 1, i32 1>
  %708 = shl <2 x i32> %707, <i32 17, i32 16>
  %709 = or <2 x i32> %708, %705
  %710 = lshr <2 x i32> %678, <i32 16, i32 17>
  %711 = and <2 x i32> %710, <i32 1, i32 1>
  %712 = shl <2 x i32> %711, <i32 15, i32 14>
  %713 = or <2 x i32> %712, %709
  %714 = lshr <2 x i32> %678, <i32 18, i32 19>
  %715 = and <2 x i32> %714, <i32 1, i32 1>
  %716 = shl <2 x i32> %715, <i32 13, i32 12>
  %717 = or <2 x i32> %716, %713
  %718 = lshr <2 x i32> %678, <i32 20, i32 21>
  %719 = and <2 x i32> %718, <i32 1, i32 1>
  %720 = shl <2 x i32> %719, <i32 11, i32 10>
  %721 = or <2 x i32> %720, %717
  %722 = lshr <2 x i32> %678, <i32 22, i32 23>
  %723 = and <2 x i32> %722, <i32 1, i32 1>
  %724 = shl <2 x i32> %723, <i32 9, i32 8>
  %725 = or <2 x i32> %724, %721
  %726 = lshr <2 x i32> %678, <i32 24, i32 25>
  %727 = and <2 x i32> %726, <i32 1, i32 1>
  %728 = shl <2 x i32> %727, <i32 7, i32 6>
  %729 = or <2 x i32> %728, %725
  %730 = lshr <2 x i32> %678, <i32 26, i32 27>
  %731 = and <2 x i32> %730, <i32 1, i32 1>
  %732 = shl <2 x i32> %731, <i32 5, i32 4>
  %733 = or <2 x i32> %732, %729
  %734 = lshr <2 x i32> %678, <i32 28, i32 29>
  %735 = and <2 x i32> %734, <i32 1, i32 1>
  %736 = shl <2 x i32> %735, <i32 3, i32 2>
  %737 = or <2 x i32> %736, %733
  %738 = lshr <2 x i32> %678, <i32 30, i32 31>
  %739 = and <2 x i32> %738, <i32 1, i32 1>
  %740 = shl <2 x i32> %739, <i32 1, i32 0>
  %741 = or <2 x i32> %740, %737
  %742 = shufflevector <2 x i32> %741, <2 x i32> undef, <2 x i32> <i32 1, i32 undef>
  %743 = or <2 x i32> %741, %742
  %744 = extractelement <2 x i32> %743, i32 0
  %745 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %746 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %745, i64 31
  %747 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %746, align 8
  %748 = tail call dereferenceable(184) %"class.sh::TType"* %747(%"class.sh::TIntermExpression"* %10) #18
  %749 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %748, i64 0, i32 0
  %750 = load i32, i32* %749, align 8
  %751 = icmp eq i32 %750, 3
  %752 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %744, i32* %752, align 4
  %753 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  br i1 %751, label %754, label %755

754:                                              ; preds = %675
  store i32 3, i32* %753, align 4
  br label %823

755:                                              ; preds = %675
  store i32 4, i32* %753, align 4
  br label %823

756:                                              ; preds = %35
  %757 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %758 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %757, i64 31
  %759 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %758, align 8
  %760 = tail call dereferenceable(184) %"class.sh::TType"* %759(%"class.sh::TIntermExpression"* %10) #18
  %761 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %760, i64 0, i32 0
  %762 = load i32, i32* %761, align 8
  %763 = icmp eq i32 %762, 3
  %764 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  br i1 %763, label %765, label %767

765:                                              ; preds = %756
  %766 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %764) #18
  br label %769

767:                                              ; preds = %756
  %768 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %764) #18
  br label %769

769:                                              ; preds = %767, %765
  %770 = phi i32 [ %766, %765 ], [ %768, %767 ]
  %771 = tail call i32 @llvm.ctpop.i32(i32 %770) #18, !range !136
  %772 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %771, i32* %772, align 4
  %773 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %773, align 4
  br label %823

774:                                              ; preds = %35
  %775 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %776 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %775, i64 31
  %777 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %776, align 8
  %778 = tail call dereferenceable(184) %"class.sh::TType"* %777(%"class.sh::TIntermExpression"* %10) #18
  %779 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %778, i64 0, i32 0
  %780 = load i32, i32* %779, align 8
  %781 = icmp eq i32 %780, 3
  %782 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  br i1 %781, label %783, label %785

783:                                              ; preds = %774
  %784 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %782) #18
  br label %787

785:                                              ; preds = %774
  %786 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %782) #18
  br label %787

787:                                              ; preds = %785, %783
  %788 = phi i32 [ %784, %783 ], [ %786, %785 ]
  %789 = icmp eq i32 %788, 0
  %790 = tail call i32 @llvm.cttz.i32(i32 %788, i1 true) #18, !range !136
  %791 = select i1 %789, i32 -1, i32 %790
  %792 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %791, i32* %792, align 4
  %793 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %793, align 4
  br label %823

794:                                              ; preds = %35
  %795 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %796 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %795, i64 31
  %797 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %796, align 8
  %798 = tail call dereferenceable(184) %"class.sh::TType"* %797(%"class.sh::TIntermExpression"* %10) #18
  %799 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %798, i64 0, i32 0
  %800 = load i32, i32* %799, align 8
  %801 = icmp eq i32 %800, 3
  %802 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  br i1 %801, label %803, label %807

803:                                              ; preds = %794
  %804 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %802) #18
  %805 = ashr i32 %804, 31
  %806 = xor i32 %805, %804
  br label %809

807:                                              ; preds = %794
  %808 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %802) #18
  br label %809

809:                                              ; preds = %807, %803
  %810 = phi i32 [ %806, %803 ], [ %808, %807 ]
  %811 = icmp eq i32 %810, 0
  br i1 %811, label %815, label %812

812:                                              ; preds = %809
  %813 = tail call i32 @llvm.ctlz.i32(i32 %810, i1 true) #18, !range !136
  %814 = xor i32 %813, 31
  br label %815

815:                                              ; preds = %809, %812
  %816 = phi i32 [ %814, %812 ], [ -1, %809 ]
  %817 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %816, i32* %817, align 4
  %818 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %818, align 4
  br label %823

819:                                              ; preds = %35, %35, %35
  %820 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %821 = bitcast %"class.sh::TConstantUnion"* %820 to float*
  store float 0.000000e+00, float* %821, align 4
  %822 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %822, align 4
  br label %823

823:                                              ; preds = %659, %656, %653, %650, %641, %602, %599, %596, %593, %584, %571, %568, %565, %562, %553, %538, %535, %532, %529, %520, %500, %497, %494, %491, %482, %321, %318, %315, %312, %303, %289, %286, %283, %280, %271, %223, %220, %217, %214, %205, %191, %188, %185, %182, %173, %754, %755, %636, %106, %133, %140, %147, %154, %161, %232, %239, %246, %253, %260, %379, %386, %393, %412, %417, %424, %432, %444, %453, %458, %463, %467, %471, %509, %613, %769, %787, %815, %819, %67, %70, %55, %58, %44, %93, %88, %82, %127, %121, %194, %226, %292, %324, %344, %337, %371, %366, %503, %541, %574, %605
  %824 = add nuw i64 %36, 1
  %825 = icmp eq i64 %824, %16
  br i1 %825, label %826, label %35

826:                                              ; preds = %37, %75, %98, %114, %330, %352, %35, %823, %3, %31
  %827 = phi %"class.sh::TConstantUnion"* [ %23, %31 ], [ %23, %3 ], [ null, %35 ], [ null, %352 ], [ null, %330 ], [ null, %114 ], [ null, %98 ], [ null, %75 ], [ null, %37 ], [ %23, %823 ]
  ret %"class.sh::TConstantUnion"* %827
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh16TIntermAggregate4foldEPNS_12TDiagnosticsE(%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)***
  %4 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)*** %3, align 8
  %5 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)** %4, i64 32
  %6 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)** %5, align 8
  %7 = tail call %"class.sh::TVector.8"* %6(%"class.sh::TIntermAggregate"* %0) #18
  %8 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %7, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %8, align 8
  %10 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %7, i64 0, i32 0, i32 0, i32 1
  %11 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %10, align 8
  %12 = icmp eq %"class.sh::TIntermNode"** %9, %11
  br i1 %12, label %27, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  br label %17

15:                                               ; preds = %17
  %16 = icmp eq %"class.sh::TIntermNode"** %26, %11
  br i1 %16, label %27, label %17

17:                                               ; preds = %13, %15
  %18 = phi %"class.sh::TIntermNode"** [ %9, %13 ], [ %26, %15 ]
  %19 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, align 8
  %20 = bitcast %"class.sh::TIntermNode"* %19 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %21 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %20, align 8
  %22 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %21, i64 5
  %23 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %22, align 8
  %24 = tail call %"class.sh::TIntermConstantUnion"* %23(%"class.sh::TIntermNode"* %19) #18
  %25 = icmp eq %"class.sh::TIntermConstantUnion"* %24, null
  %26 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 1
  br i1 %25, label %134, label %15

27:                                               ; preds = %15, %2
  %28 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 1
  %29 = load i8, i8* %28, align 8
  switch i8 %29, label %109 [
    i8 -119, label %30
    i8 55, label %107
    i8 62, label %107
    i8 77, label %107
    i8 79, label %107
    i8 80, label %107
    i8 81, label %107
    i8 82, label %107
    i8 83, label %107
    i8 84, label %107
    i8 87, label %107
    i8 93, label %107
    i8 115, label %107
    i8 116, label %107
    i8 24, label %107
    i8 25, label %107
    i8 26, label %107
    i8 27, label %107
    i8 28, label %107
    i8 29, label %107
    i8 105, label %107
    i8 106, label %107
    i8 107, label %107
    i8 109, label %107
    i8 110, label %107
    i8 111, label %107
    i8 123, label %107
    i8 124, label %107
  ]

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1
  %32 = tail call zeroext i1 @_ZNK2sh5TType27canReplaceWithConstantUnionEv(%"class.sh::TType"* %31) #18
  br i1 %32, label %33, label %109

33:                                               ; preds = %30
  %34 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermAggregate"*)***
  %35 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermAggregate"*)*** %34, align 8
  %36 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermAggregate"*)** %35, i64 29
  %37 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermAggregate"*)** %36, align 8
  %38 = tail call %"class.sh::TConstantUnion"* %37(%"class.sh::TIntermAggregate"* %0) #18
  %39 = icmp eq %"class.sh::TConstantUnion"* %38, null
  br i1 %39, label %109, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %31, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %42, 4
  br i1 %43, label %46, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  br label %115

46:                                               ; preds = %40
  %47 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %31) #18
  %48 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %49 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %48, align 8
  %50 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %51 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %50, align 8
  %52 = icmp eq %"class.sh::TIntermNode"** %49, %51
  br i1 %52, label %53, label %55

53:                                               ; preds = %46
  %54 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  br label %115

55:                                               ; preds = %46
  %56 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  br label %57

57:                                               ; preds = %55, %98
  %58 = phi %"class.sh::TIntermNode"** [ %49, %55 ], [ %105, %98 ]
  %59 = phi i64 [ %47, %55 ], [ %104, %98 ]
  %60 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %58, align 8
  %61 = bitcast %"class.sh::TIntermNode"* %60 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %62 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %61, align 8
  %63 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %62, i64 4
  %64 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %63, align 8
  %65 = tail call %"class.sh::TIntermTyped"* %64(%"class.sh::TIntermNode"* %60) #18
  %66 = bitcast %"class.sh::TIntermTyped"* %65 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %67 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %66, align 8
  %68 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %67, i64 31
  %69 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %68, align 8
  %70 = tail call dereferenceable(184) %"class.sh::TType"* %69(%"class.sh::TIntermTyped"* %65) #18
  %71 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %70, i64 0, i32 0
  %72 = load i32, i32* %71, align 8
  %73 = icmp eq i32 %72, 1
  br i1 %73, label %74, label %98

74:                                               ; preds = %57
  %75 = bitcast %"class.sh::TIntermTyped"* %65 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)***
  %76 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*** %75, align 8
  %77 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %76, i64 29
  %78 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %77, align 8
  %79 = tail call %"class.sh::TConstantUnion"* %78(%"class.sh::TIntermTyped"* %65) #18
  %80 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %66, align 8
  %81 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %80, i64 31
  %82 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %81, align 8
  %83 = tail call dereferenceable(184) %"class.sh::TType"* %82(%"class.sh::TIntermTyped"* %65) #18
  %84 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %83) #18
  %85 = icmp ult i64 %59, %84
  %86 = select i1 %85, i64 %59, i64 %84
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %98, label %88

88:                                               ; preds = %74, %95
  %89 = phi i64 [ %96, %95 ], [ 0, %74 ]
  %90 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %79, i64 %89
  %91 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %90) #18
  %92 = fcmp olt float %91, 0.000000e+00
  br i1 %92, label %93, label %95

93:                                               ; preds = %88
  %94 = tail call i8* @_ZNK2sh5TType24getBuiltInTypeNameStringEv(%"class.sh::TType"* %31) #18
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* dereferenceable(16) %56, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5, i64 0, i64 0), i8* %94) #18
  br label %95

95:                                               ; preds = %88, %93
  %96 = add nuw i64 %89, 1
  %97 = icmp ult i64 %96, %86
  br i1 %97, label %88, label %98

98:                                               ; preds = %95, %74, %57
  %99 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %66, align 8
  %100 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %99, i64 31
  %101 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %100, align 8
  %102 = tail call dereferenceable(184) %"class.sh::TType"* %101(%"class.sh::TIntermTyped"* %65) #18
  %103 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %102) #18
  %104 = sub i64 %59, %103
  %105 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %58, i64 1
  %106 = icmp eq %"class.sh::TIntermNode"** %105, %51
  br i1 %106, label %111, label %57

107:                                              ; preds = %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27
  %108 = tail call %"class.sh::TConstantUnion"* @_ZN2sh20TIntermConstantUnion20FoldAggregateBuiltInEPNS_16TIntermAggregateEPNS_12TDiagnosticsE(%"class.sh::TIntermAggregate"* %0, %"class.sh::TDiagnostics"* %1)
  br label %111

109:                                              ; preds = %27, %33, %30
  %110 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  br label %134

111:                                              ; preds = %98, %107
  %112 = phi %"class.sh::TConstantUnion"* [ %108, %107 ], [ %38, %98 ]
  %113 = icmp eq %"class.sh::TConstantUnion"* %112, null
  %114 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  br i1 %113, label %134, label %115

115:                                              ; preds = %53, %44, %111
  %116 = phi %"class.sh::TIntermTyped"* [ %45, %44 ], [ %114, %111 ], [ %54, %53 ]
  %117 = phi %"class.sh::TConstantUnion"* [ %38, %44 ], [ %112, %111 ], [ %38, %53 ]
  %118 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %119 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %118, i64 216) #18
  %120 = bitcast %"class.sh::TIntermTyped"* %116 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %121 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %120, align 8
  %122 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %121, i64 31
  %123 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %122, align 8
  %124 = tail call dereferenceable(184) %"class.sh::TType"* %123(%"class.sh::TIntermTyped"* %116) #18
  %125 = getelementptr inbounds i8, i8* %119, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %125, i8 0, i64 16, i1 false) #18
  %126 = bitcast i8* %119 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %126, align 8
  %127 = getelementptr inbounds i8, i8* %119, i64 24
  %128 = bitcast i8* %127 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %128, %"class.sh::TType"* dereferenceable(184) %124) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %126, align 8
  %129 = getelementptr inbounds i8, i8* %119, i64 208
  %130 = bitcast i8* %129 to %"class.sh::TConstantUnion"**
  store %"class.sh::TConstantUnion"* %117, %"class.sh::TConstantUnion"** %130, align 8
  %131 = bitcast i8* %119 to %"class.sh::TIntermTyped"*
  %132 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %133 = bitcast %"struct.sh::TSourceLoc"* %132 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* align 4 %133, i64 16, i1 false) #18
  br label %134

134:                                              ; preds = %17, %109, %115, %111
  %135 = phi %"class.sh::TIntermTyped"* [ %131, %115 ], [ %114, %111 ], [ %110, %109 ], [ %14, %17 ]
  ret %"class.sh::TIntermTyped"* %135
}

declare float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"*) local_unnamed_addr #1

declare void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"*, %"struct.sh::TSourceLoc"* dereferenceable(16), i8*, i8*) local_unnamed_addr #1

declare i8* @_ZNK2sh5TType24getBuiltInTypeNameStringEv(%"class.sh::TType"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TConstantUnion"* @_ZN2sh20TIntermConstantUnion20FoldAggregateBuiltInEPNS_16TIntermAggregateEPNS_12TDiagnosticsE(%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.sh::TSourceLoc", align 4
  %4 = alloca %"class.angle::Matrix", align 8
  %5 = alloca %"class.angle::Matrix", align 8
  %6 = alloca %"class.angle::Matrix", align 8
  %7 = alloca %"class.angle::Matrix", align 8
  %8 = alloca %"class.angle::Matrix", align 8
  %9 = alloca %"class.angle::Matrix", align 8
  %10 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 1
  %11 = load i8, i8* %10, align 8
  %12 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)***
  %13 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)** %13, i64 32
  %15 = load %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.8"* (%"class.sh::TIntermAggregate"*)** %14, align 8
  %16 = tail call %"class.sh::TVector.8"* %15(%"class.sh::TIntermAggregate"* %0) #18
  %17 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %16, i64 0, i32 0, i32 0, i32 1
  %18 = bitcast %"class.sh::TIntermNode"*** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.sh::TVector.8"* %16 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = ashr exact i64 %22, 3
  %24 = trunc i64 %23 to i32
  %25 = and i64 %23, 4294967295
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %46, label %27

27:                                               ; preds = %2
  %28 = shl nuw nsw i64 %25, 3
  %29 = tail call i8* @_Znwm(i64 %28) #21
  %30 = bitcast i8* %29 to %"class.sh::TConstantUnion"**
  %31 = ptrtoint i8* %29 to i64
  %32 = add nsw i64 %25, -1
  %33 = getelementptr %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %30, i64 %32
  %34 = ptrtoint %"class.sh::TConstantUnion"** %33 to i64
  %35 = sub i64 8, %31
  %36 = add i64 %35, %34
  %37 = and i64 %36, -8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 0, i64 %37, i1 false) #18
  %38 = tail call i8* @_Znwm(i64 %28) #21
  %39 = bitcast i8* %38 to i64*
  %40 = ptrtoint i8* %38 to i64
  %41 = getelementptr i64, i64* %39, i64 %32
  %42 = ptrtoint i64* %41 to i64
  %43 = sub i64 8, %40
  %44 = add i64 %43, %42
  %45 = and i64 %44, -8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 0, i64 %45, i1 false) #18
  br label %46

46:                                               ; preds = %2, %27
  %47 = phi i8* [ %29, %27 ], [ null, %2 ]
  %48 = phi %"class.sh::TConstantUnion"** [ %30, %27 ], [ null, %2 ]
  %49 = phi i8* [ %38, %27 ], [ null, %2 ]
  %50 = phi i64* [ %39, %27 ], [ null, %2 ]
  %51 = bitcast %"struct.sh::TSourceLoc"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51) #18
  %52 = icmp eq i32 %24, 0
  %53 = bitcast %"struct.sh::TSourceLoc"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %53, i8 -86, i64 16, i1 false)
  br i1 %52, label %57, label %54

54:                                               ; preds = %46
  %55 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %16, i64 0, i32 0, i32 0, i32 0
  %56 = and i64 %23, 4294967295
  br label %80

57:                                               ; preds = %106, %46
  %58 = phi i32 [ 0, %46 ], [ %108, %106 ]
  %59 = phi i64 [ 0, %46 ], [ %123, %106 ]
  %60 = getelementptr inbounds %"class.sh::TVector.8", %"class.sh::TVector.8"* %16, i64 0, i32 0, i32 0, i32 0
  %61 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %60, align 8
  %62 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %61, align 8
  %63 = bitcast %"class.sh::TIntermNode"* %62 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %64 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %63, align 8
  %65 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %64, i64 4
  %66 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %65, align 8
  %67 = tail call %"class.sh::TIntermTyped"* %66(%"class.sh::TIntermNode"* %62) #18
  %68 = bitcast %"class.sh::TIntermTyped"* %67 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %69 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %68, align 8
  %70 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %69, i64 31
  %71 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %70, align 8
  %72 = tail call dereferenceable(184) %"class.sh::TType"* %71(%"class.sh::TIntermTyped"* %67) #18
  %73 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %72, i64 0, i32 8
  %74 = load i8, i8* %73, align 8
  %75 = icmp ugt i8 %74, 1
  %76 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %72, i64 0, i32 9
  %77 = load i8, i8* %76, align 1
  %78 = icmp ugt i8 %77, 1
  %79 = and i1 %75, %78
  br i1 %79, label %240, label %126

80:                                               ; preds = %106, %54
  %81 = phi i64 [ 0, %54 ], [ %124, %106 ]
  %82 = phi i64 [ 0, %54 ], [ %123, %106 ]
  %83 = phi i32 [ 0, %54 ], [ %108, %106 ]
  %84 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %55, align 8
  %85 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %84, i64 %81
  %86 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %85, align 8
  %87 = bitcast %"class.sh::TIntermNode"* %86 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %88 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %87, align 8
  %89 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %88, i64 5
  %90 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %89, align 8
  %91 = tail call %"class.sh::TIntermConstantUnion"* %90(%"class.sh::TIntermNode"* %86) #18
  %92 = icmp eq i64 %81, 0
  br i1 %92, label %95, label %93

93:                                               ; preds = %80
  %94 = bitcast %"class.sh::TIntermConstantUnion"* %91 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  br label %106

95:                                               ; preds = %80
  %96 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %91, i64 0, i32 0
  %97 = bitcast %"class.sh::TIntermConstantUnion"* %91 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %98 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %97, align 8
  %99 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %98, i64 31
  %100 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %99, align 8
  %101 = tail call dereferenceable(184) %"class.sh::TType"* %100(%"class.sh::TIntermExpression"* %96) #18
  %102 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %101, i64 0, i32 0
  %103 = load i32, i32* %102, align 8
  %104 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %91, i64 0, i32 0, i32 0, i32 0, i32 1
  %105 = bitcast %"struct.sh::TSourceLoc"* %104 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %51, i8* align 4 %105, i64 16, i1 false)
  br label %106

106:                                              ; preds = %93, %95
  %107 = phi %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** [ %94, %93 ], [ %97, %95 ]
  %108 = phi i32 [ %83, %93 ], [ %103, %95 ]
  %109 = bitcast %"class.sh::TIntermConstantUnion"* %91 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)***
  %110 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*** %109, align 8
  %111 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)** %110, i64 29
  %112 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)** %111, align 8
  %113 = tail call %"class.sh::TConstantUnion"* %112(%"class.sh::TIntermConstantUnion"* %91) #18
  %114 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 %81
  store %"class.sh::TConstantUnion"* %113, %"class.sh::TConstantUnion"** %114, align 8
  %115 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %91, i64 0, i32 0
  %116 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %107, align 8
  %117 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %116, i64 31
  %118 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %117, align 8
  %119 = tail call dereferenceable(184) %"class.sh::TType"* %118(%"class.sh::TIntermExpression"* %115) #18
  %120 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %119) #18
  %121 = getelementptr inbounds i64, i64* %50, i64 %81
  store i64 %120, i64* %121, align 8
  %122 = icmp ugt i64 %120, %82
  %123 = select i1 %122, i64 %120, i64 %82
  %124 = add nuw nsw i64 %81, 1
  %125 = icmp eq i64 %124, %56
  br i1 %125, label %57, label %80

126:                                              ; preds = %57
  %127 = load i8, i8* %10, align 8
  %128 = icmp ne i8 %127, 116
  %129 = icmp ne i32 %24, 0
  %130 = and i1 %128, %129
  br i1 %130, label %131, label %240

131:                                              ; preds = %126
  %132 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8) #18
  %133 = extractvalue { i64, i1 } %132, 1
  %134 = extractvalue { i64, i1 } %132, 0
  %135 = select i1 %133, i64 -1, i64 %134
  %136 = icmp eq i64 %59, 0
  %137 = and i64 %23, 4294967295
  %138 = add i64 %59, -1
  %139 = shl nsw i64 %59, 3
  %140 = add i64 %59, -4
  %141 = lshr i64 %140, 2
  %142 = add nuw nsw i64 %141, 1
  %143 = icmp ult i64 %59, 4
  %144 = icmp ugt i64 %138, 4294967295
  %145 = trunc i64 %138 to i32
  %146 = icmp eq i32 %145, -1
  %147 = or i1 %146, %144
  %148 = and i64 %59, -4
  %149 = trunc i64 %148 to i32
  %150 = and i64 %142, 1
  %151 = icmp eq i64 %141, 0
  %152 = sub nuw nsw i64 %142, %150
  %153 = icmp eq i64 %150, 0
  %154 = icmp eq i64 %59, %148
  br label %155

155:                                              ; preds = %237, %131
  %156 = phi i64 [ 0, %131 ], [ %238, %237 ]
  %157 = getelementptr inbounds i64, i64* %50, i64 %156
  %158 = load i64, i64* %157, align 8
  %159 = icmp eq i64 %158, %59
  br i1 %159, label %237, label %160

160:                                              ; preds = %155
  %161 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 %156
  %162 = bitcast %"class.sh::TConstantUnion"** %161 to i64**
  %163 = load i64*, i64** %162, align 8
  %164 = bitcast i64* %163 to i8*
  %165 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %166 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %165, i64 %135) #18
  %167 = bitcast i8* %166 to %"class.sh::TConstantUnion"*
  br i1 %136, label %235, label %168

168:                                              ; preds = %160
  %169 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %167, i64 %59
  br label %170

170:                                              ; preds = %170, %168
  %171 = phi %"class.sh::TConstantUnion"* [ %167, %168 ], [ %172, %170 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %171) #18
  %172 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %171, i64 1
  %173 = icmp eq %"class.sh::TConstantUnion"* %172, %169
  br i1 %173, label %174, label %170

174:                                              ; preds = %170
  %175 = or i1 %143, %147
  br i1 %175, label %223, label %176

176:                                              ; preds = %174
  %177 = getelementptr i8, i8* %164, i64 1
  %178 = getelementptr i8, i8* %166, i64 %139
  %179 = bitcast i64* %163 to i8*
  %180 = icmp ugt i8* %178, %179
  %181 = icmp ult i8* %166, %177
  %182 = and i1 %180, %181
  br i1 %182, label %223, label %183

183:                                              ; preds = %176
  br i1 %151, label %210, label %184

184:                                              ; preds = %183
  %185 = load i64, i64* %163, align 4, !alias.scope !137, !noalias !140
  %186 = insertelement <2 x i64> undef, i64 %185, i32 0
  %187 = shufflevector <2 x i64> %186, <2 x i64> undef, <2 x i32> zeroinitializer
  %188 = insertelement <2 x i64> undef, i64 %185, i32 0
  %189 = shufflevector <2 x i64> %188, <2 x i64> undef, <2 x i32> zeroinitializer
  %190 = load i64, i64* %163, align 4, !alias.scope !137, !noalias !140
  %191 = insertelement <2 x i64> undef, i64 %190, i32 0
  %192 = shufflevector <2 x i64> %191, <2 x i64> undef, <2 x i32> zeroinitializer
  %193 = insertelement <2 x i64> undef, i64 %190, i32 0
  %194 = shufflevector <2 x i64> %193, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %195

195:                                              ; preds = %195, %184
  %196 = phi i64 [ 0, %184 ], [ %207, %195 ]
  %197 = phi i64 [ %152, %184 ], [ %208, %195 ]
  %198 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %167, i64 %196
  %199 = bitcast %"class.sh::TConstantUnion"* %198 to <2 x i64>*
  store <2 x i64> %187, <2 x i64>* %199, align 4, !alias.scope !140
  %200 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %198, i64 2
  %201 = bitcast %"class.sh::TConstantUnion"* %200 to <2 x i64>*
  store <2 x i64> %189, <2 x i64>* %201, align 4, !alias.scope !140
  %202 = or i64 %196, 4
  %203 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %167, i64 %202
  %204 = bitcast %"class.sh::TConstantUnion"* %203 to <2 x i64>*
  store <2 x i64> %192, <2 x i64>* %204, align 4, !alias.scope !140
  %205 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %203, i64 2
  %206 = bitcast %"class.sh::TConstantUnion"* %205 to <2 x i64>*
  store <2 x i64> %194, <2 x i64>* %206, align 4, !alias.scope !140
  %207 = add i64 %196, 8
  %208 = add i64 %197, -2
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %210, label %195, !llvm.loop !142

210:                                              ; preds = %195, %183
  %211 = phi i64 [ 0, %183 ], [ %207, %195 ]
  br i1 %153, label %222, label %212

212:                                              ; preds = %210
  %213 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %167, i64 %211
  %214 = load i64, i64* %163, align 4, !alias.scope !137, !noalias !140
  %215 = insertelement <2 x i64> undef, i64 %214, i32 0
  %216 = shufflevector <2 x i64> %215, <2 x i64> undef, <2 x i32> zeroinitializer
  %217 = insertelement <2 x i64> undef, i64 %214, i32 0
  %218 = shufflevector <2 x i64> %217, <2 x i64> undef, <2 x i32> zeroinitializer
  %219 = bitcast %"class.sh::TConstantUnion"* %213 to <2 x i64>*
  store <2 x i64> %216, <2 x i64>* %219, align 4, !alias.scope !140
  %220 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %213, i64 2
  %221 = bitcast %"class.sh::TConstantUnion"* %220 to <2 x i64>*
  store <2 x i64> %218, <2 x i64>* %221, align 4, !alias.scope !140
  br label %222

222:                                              ; preds = %210, %212
  br i1 %154, label %235, label %223

223:                                              ; preds = %174, %222, %176
  %224 = phi i64 [ 0, %176 ], [ 0, %174 ], [ %148, %222 ]
  %225 = phi i32 [ 0, %176 ], [ 0, %174 ], [ %149, %222 ]
  br label %226

226:                                              ; preds = %223, %226
  %227 = phi i64 [ %233, %226 ], [ %224, %223 ]
  %228 = phi i32 [ %232, %226 ], [ %225, %223 ]
  %229 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %167, i64 %227
  %230 = bitcast %"class.sh::TConstantUnion"* %229 to i64*
  %231 = load i64, i64* %163, align 4
  store i64 %231, i64* %230, align 4
  %232 = add i32 %228, 1
  %233 = zext i32 %232 to i64
  %234 = icmp ugt i64 %59, %233
  br i1 %234, label %226, label %235, !llvm.loop !143

235:                                              ; preds = %226, %222, %160
  %236 = bitcast %"class.sh::TConstantUnion"** %161 to i8**
  store i8* %166, i8** %236, align 8
  br label %237

237:                                              ; preds = %155, %235
  %238 = add nuw nsw i64 %156, 1
  %239 = icmp eq i64 %238, %137
  br i1 %239, label %240, label %155

240:                                              ; preds = %237, %126, %57
  switch i8 %11, label %1892 [
    i8 55, label %241
    i8 62, label %290
    i8 77, label %358
    i8 79, label %393
    i8 80, label %450
    i8 83, label %507
    i8 26, label %540
    i8 27, label %593
    i8 28, label %646
    i8 29, label %699
    i8 24, label %752
    i8 25, label %814
    i8 105, label %875
    i8 106, label %926
    i8 107, label %950
    i8 110, label %1003
    i8 115, label %1050
    i8 116, label %1132
    i8 81, label %1212
    i8 82, label %1302
    i8 84, label %1404
    i8 87, label %1466
    i8 93, label %1503
    i8 109, label %1557
    i8 111, label %1603
    i8 123, label %1667
    i8 124, label %1778
  ]

241:                                              ; preds = %240
  %242 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %243 = extractvalue { i64, i1 } %242, 1
  %244 = extractvalue { i64, i1 } %242, 0
  %245 = select i1 %243, i64 -1, i64 %244
  %246 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %247 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %246, i64 %245) #18
  %248 = bitcast i8* %247 to %"class.sh::TConstantUnion"*
  %249 = icmp eq i64 %59, 0
  br i1 %249, label %1892, label %250

250:                                              ; preds = %241
  %251 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %248, i64 %59
  br label %252

252:                                              ; preds = %252, %250
  %253 = phi %"class.sh::TConstantUnion"* [ %248, %250 ], [ %254, %252 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %253) #18
  %254 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %253, i64 1
  %255 = icmp eq %"class.sh::TConstantUnion"* %254, %251
  br i1 %255, label %256, label %252

256:                                              ; preds = %252
  br i1 %249, label %1892, label %257

257:                                              ; preds = %256
  %258 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  br label %259

259:                                              ; preds = %287, %257
  %260 = phi i64 [ 0, %257 ], [ %288, %287 ]
  %261 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %262 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %261, i64 %260
  %263 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %262) #18
  %264 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %258, align 8
  %265 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %264, i64 %260
  %266 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %265) #18
  %267 = fcmp oeq float %266, 0.000000e+00
  %268 = fcmp oeq float %263, 0.000000e+00
  %269 = and i1 %268, %267
  %270 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %248, i64 %260
  br i1 %269, label %271, label %281

271:                                              ; preds = %259
  %272 = call i8* @_Z17GetOperatorString9TOperator(i8 zeroext 55) #18
  call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %272) #18
  switch i32 %58, label %287 [
    i32 1, label %273
    i32 3, label %275
    i32 4, label %277
    i32 5, label %279
  ]

273:                                              ; preds = %271
  %274 = bitcast %"class.sh::TConstantUnion"* %270 to float*
  store float 0.000000e+00, float* %274, align 4
  br label %284

275:                                              ; preds = %271
  %276 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %270, i64 0, i32 0, i32 0
  store i32 0, i32* %276, align 4
  br label %284

277:                                              ; preds = %271
  %278 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %270, i64 0, i32 0, i32 0
  store i32 0, i32* %278, align 4
  br label %284

279:                                              ; preds = %271
  %280 = bitcast %"class.sh::TConstantUnion"* %270 to i8*
  store i8 0, i8* %280, align 4
  br label %284

281:                                              ; preds = %259
  %282 = call float @atan2f(float %263, float %266) #18
  %283 = bitcast %"class.sh::TConstantUnion"* %270 to float*
  store float %282, float* %283, align 4
  br label %284

284:                                              ; preds = %281, %273, %275, %277, %279
  %285 = phi i32 [ 5, %279 ], [ 4, %277 ], [ 3, %275 ], [ 1, %273 ], [ 1, %281 ]
  %286 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %248, i64 %260, i32 1
  store i32 %285, i32* %286, align 4
  br label %287

287:                                              ; preds = %284, %271
  %288 = add nuw i64 %260, 1
  %289 = icmp eq i64 %288, %59
  br i1 %289, label %1892, label %259

290:                                              ; preds = %240
  %291 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %292 = extractvalue { i64, i1 } %291, 1
  %293 = extractvalue { i64, i1 } %291, 0
  %294 = select i1 %292, i64 -1, i64 %293
  %295 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %296 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %295, i64 %294) #18
  %297 = bitcast i8* %296 to %"class.sh::TConstantUnion"*
  %298 = icmp eq i64 %59, 0
  br i1 %298, label %1892, label %299

299:                                              ; preds = %290
  %300 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %297, i64 %59
  br label %301

301:                                              ; preds = %301, %299
  %302 = phi %"class.sh::TConstantUnion"* [ %297, %299 ], [ %303, %301 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %302) #18
  %303 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %302, i64 1
  %304 = icmp eq %"class.sh::TConstantUnion"* %303, %300
  br i1 %304, label %305, label %301

305:                                              ; preds = %301
  br i1 %298, label %1892, label %306

306:                                              ; preds = %305
  %307 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  br label %308

308:                                              ; preds = %355, %306
  %309 = phi i64 [ 0, %306 ], [ %356, %355 ]
  %310 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %311 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %310, i64 %309
  %312 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %311) #18
  %313 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %307, align 8
  %314 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %313, i64 %309
  %315 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %314) #18
  %316 = fcmp olt float %312, 0.000000e+00
  br i1 %316, label %317, label %332

317:                                              ; preds = %308
  %318 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %297, i64 %309
  %319 = call i8* @_Z17GetOperatorString9TOperator(i8 zeroext 62) #18
  call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %319) #18
  switch i32 %58, label %355 [
    i32 1, label %320
    i32 3, label %323
    i32 4, label %326
    i32 5, label %329
  ]

320:                                              ; preds = %317
  %321 = bitcast %"class.sh::TConstantUnion"* %318 to float*
  store float 0.000000e+00, float* %321, align 4
  %322 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %297, i64 %309, i32 1
  store i32 1, i32* %322, align 4
  br label %355

323:                                              ; preds = %317
  %324 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %318, i64 0, i32 0, i32 0
  store i32 0, i32* %324, align 4
  %325 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %297, i64 %309, i32 1
  store i32 3, i32* %325, align 4
  br label %355

326:                                              ; preds = %317
  %327 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %318, i64 0, i32 0, i32 0
  store i32 0, i32* %327, align 4
  %328 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %297, i64 %309, i32 1
  store i32 4, i32* %328, align 4
  br label %355

329:                                              ; preds = %317
  %330 = bitcast %"class.sh::TConstantUnion"* %318 to i8*
  store i8 0, i8* %330, align 4
  %331 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %297, i64 %309, i32 1
  store i32 5, i32* %331, align 4
  br label %355

332:                                              ; preds = %308
  %333 = fcmp oeq float %312, 0.000000e+00
  %334 = fcmp ole float %315, 0.000000e+00
  %335 = and i1 %333, %334
  %336 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %297, i64 %309
  br i1 %335, label %337, label %351

337:                                              ; preds = %332
  %338 = call i8* @_Z17GetOperatorString9TOperator(i8 zeroext 62) #18
  call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %338) #18
  switch i32 %58, label %355 [
    i32 1, label %339
    i32 3, label %342
    i32 4, label %345
    i32 5, label %348
  ]

339:                                              ; preds = %337
  %340 = bitcast %"class.sh::TConstantUnion"* %336 to float*
  store float 0.000000e+00, float* %340, align 4
  %341 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %297, i64 %309, i32 1
  store i32 1, i32* %341, align 4
  br label %355

342:                                              ; preds = %337
  %343 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %336, i64 0, i32 0, i32 0
  store i32 0, i32* %343, align 4
  %344 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %297, i64 %309, i32 1
  store i32 3, i32* %344, align 4
  br label %355

345:                                              ; preds = %337
  %346 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %336, i64 0, i32 0, i32 0
  store i32 0, i32* %346, align 4
  %347 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %297, i64 %309, i32 1
  store i32 4, i32* %347, align 4
  br label %355

348:                                              ; preds = %337
  %349 = bitcast %"class.sh::TConstantUnion"* %336 to i8*
  store i8 0, i8* %349, align 4
  %350 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %297, i64 %309, i32 1
  store i32 5, i32* %350, align 4
  br label %355

351:                                              ; preds = %332
  %352 = call float @powf(float %312, float %315) #18
  %353 = bitcast %"class.sh::TConstantUnion"* %336 to float*
  store float %352, float* %353, align 4
  %354 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %297, i64 %309, i32 1
  store i32 1, i32* %354, align 4
  br label %355

355:                                              ; preds = %348, %345, %342, %339, %337, %329, %326, %323, %320, %317, %351
  %356 = add nuw i64 %309, 1
  %357 = icmp eq i64 %356, %59
  br i1 %357, label %1892, label %308

358:                                              ; preds = %240
  %359 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %360 = extractvalue { i64, i1 } %359, 1
  %361 = extractvalue { i64, i1 } %359, 0
  %362 = select i1 %360, i64 -1, i64 %361
  %363 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %364 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %363, i64 %362) #18
  %365 = bitcast i8* %364 to %"class.sh::TConstantUnion"*
  %366 = icmp eq i64 %59, 0
  br i1 %366, label %1892, label %367

367:                                              ; preds = %358
  %368 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %365, i64 %59
  br label %369

369:                                              ; preds = %369, %367
  %370 = phi %"class.sh::TConstantUnion"* [ %365, %367 ], [ %371, %369 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %370) #18
  %371 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %370, i64 1
  %372 = icmp eq %"class.sh::TConstantUnion"* %371, %368
  br i1 %372, label %373, label %369

373:                                              ; preds = %369
  br i1 %366, label %1892, label %374

374:                                              ; preds = %373
  %375 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  br label %376

376:                                              ; preds = %376, %374
  %377 = phi i64 [ 0, %374 ], [ %391, %376 ]
  %378 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %379 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %378, i64 %377
  %380 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %379) #18
  %381 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %375, align 8
  %382 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %381, i64 %377
  %383 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %382) #18
  %384 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %365, i64 %377
  %385 = fdiv float %380, %383
  %386 = tail call float @llvm.floor.f32(float %385)
  %387 = fmul float %383, %386
  %388 = fsub float %380, %387
  %389 = bitcast %"class.sh::TConstantUnion"* %384 to float*
  store float %388, float* %389, align 4
  %390 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %365, i64 %377, i32 1
  store i32 1, i32* %390, align 4
  %391 = add nuw i64 %377, 1
  %392 = icmp eq i64 %391, %59
  br i1 %392, label %1892, label %376

393:                                              ; preds = %240
  %394 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %395 = extractvalue { i64, i1 } %394, 1
  %396 = extractvalue { i64, i1 } %394, 0
  %397 = select i1 %395, i64 -1, i64 %396
  %398 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %399 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %398, i64 %397) #18
  %400 = bitcast i8* %399 to %"class.sh::TConstantUnion"*
  %401 = icmp eq i64 %59, 0
  br i1 %401, label %1892, label %402

402:                                              ; preds = %393
  %403 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %400, i64 %59
  br label %404

404:                                              ; preds = %404, %402
  %405 = phi %"class.sh::TConstantUnion"* [ %400, %402 ], [ %406, %404 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %405) #18
  %406 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %405, i64 1
  %407 = icmp eq %"class.sh::TConstantUnion"* %406, %403
  br i1 %407, label %408, label %404

408:                                              ; preds = %404
  br i1 %401, label %1892, label %409

409:                                              ; preds = %408
  %410 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  br label %411

411:                                              ; preds = %447, %409
  %412 = phi i64 [ 0, %409 ], [ %448, %447 ]
  switch i32 %58, label %447 [
    i32 1, label %413
    i32 3, label %424
    i32 4, label %434
  ]

413:                                              ; preds = %411
  %414 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %400, i64 %412
  %415 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %416 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %415, i64 %412
  %417 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %416) #18
  %418 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %410, align 8
  %419 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %418, i64 %412
  %420 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %419) #18
  %421 = fcmp olt float %420, %417
  %422 = select i1 %421, float %420, float %417
  %423 = bitcast %"class.sh::TConstantUnion"* %414 to float*
  store float %422, float* %423, align 4
  br label %444

424:                                              ; preds = %411
  %425 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %426 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %425, i64 %412
  %427 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %426) #18
  %428 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %410, align 8
  %429 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %428, i64 %412
  %430 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %429) #18
  %431 = icmp slt i32 %430, %427
  %432 = select i1 %431, i32 %430, i32 %427
  %433 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %400, i64 %412, i32 0, i32 0
  store i32 %432, i32* %433, align 4
  br label %444

434:                                              ; preds = %411
  %435 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %436 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %435, i64 %412
  %437 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %436) #18
  %438 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %410, align 8
  %439 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %438, i64 %412
  %440 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %439) #18
  %441 = icmp ult i32 %440, %437
  %442 = select i1 %441, i32 %440, i32 %437
  %443 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %400, i64 %412, i32 0, i32 0
  store i32 %442, i32* %443, align 4
  br label %444

444:                                              ; preds = %434, %424, %413
  %445 = phi i32 [ 1, %413 ], [ 3, %424 ], [ 4, %434 ]
  %446 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %400, i64 %412, i32 1
  store i32 %445, i32* %446, align 4
  br label %447

447:                                              ; preds = %444, %411
  %448 = add nuw i64 %412, 1
  %449 = icmp eq i64 %448, %59
  br i1 %449, label %1892, label %411

450:                                              ; preds = %240
  %451 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %452 = extractvalue { i64, i1 } %451, 1
  %453 = extractvalue { i64, i1 } %451, 0
  %454 = select i1 %452, i64 -1, i64 %453
  %455 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %456 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %455, i64 %454) #18
  %457 = bitcast i8* %456 to %"class.sh::TConstantUnion"*
  %458 = icmp eq i64 %59, 0
  br i1 %458, label %1892, label %459

459:                                              ; preds = %450
  %460 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %457, i64 %59
  br label %461

461:                                              ; preds = %461, %459
  %462 = phi %"class.sh::TConstantUnion"* [ %457, %459 ], [ %463, %461 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %462) #18
  %463 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %462, i64 1
  %464 = icmp eq %"class.sh::TConstantUnion"* %463, %460
  br i1 %464, label %465, label %461

465:                                              ; preds = %461
  br i1 %458, label %1892, label %466

466:                                              ; preds = %465
  %467 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  br label %468

468:                                              ; preds = %504, %466
  %469 = phi i64 [ 0, %466 ], [ %505, %504 ]
  switch i32 %58, label %504 [
    i32 1, label %470
    i32 3, label %481
    i32 4, label %491
  ]

470:                                              ; preds = %468
  %471 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %457, i64 %469
  %472 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %473 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %472, i64 %469
  %474 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %473) #18
  %475 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %467, align 8
  %476 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %475, i64 %469
  %477 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %476) #18
  %478 = fcmp olt float %474, %477
  %479 = select i1 %478, float %477, float %474
  %480 = bitcast %"class.sh::TConstantUnion"* %471 to float*
  store float %479, float* %480, align 4
  br label %501

481:                                              ; preds = %468
  %482 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %483 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %482, i64 %469
  %484 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %483) #18
  %485 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %467, align 8
  %486 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %485, i64 %469
  %487 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %486) #18
  %488 = icmp slt i32 %484, %487
  %489 = select i1 %488, i32 %487, i32 %484
  %490 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %457, i64 %469, i32 0, i32 0
  store i32 %489, i32* %490, align 4
  br label %501

491:                                              ; preds = %468
  %492 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %493 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %492, i64 %469
  %494 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %493) #18
  %495 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %467, align 8
  %496 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %495, i64 %469
  %497 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %496) #18
  %498 = icmp ult i32 %494, %497
  %499 = select i1 %498, i32 %497, i32 %494
  %500 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %457, i64 %469, i32 0, i32 0
  store i32 %499, i32* %500, align 4
  br label %501

501:                                              ; preds = %491, %481, %470
  %502 = phi i32 [ 1, %470 ], [ 3, %481 ], [ 4, %491 ]
  %503 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %457, i64 %469, i32 1
  store i32 %502, i32* %503, align 4
  br label %504

504:                                              ; preds = %501, %468
  %505 = add nuw i64 %469, 1
  %506 = icmp eq i64 %505, %59
  br i1 %506, label %1892, label %468

507:                                              ; preds = %240
  %508 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %509 = extractvalue { i64, i1 } %508, 1
  %510 = extractvalue { i64, i1 } %508, 0
  %511 = select i1 %509, i64 -1, i64 %510
  %512 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %513 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %512, i64 %511) #18
  %514 = bitcast i8* %513 to %"class.sh::TConstantUnion"*
  %515 = icmp eq i64 %59, 0
  br i1 %515, label %1892, label %516

516:                                              ; preds = %507
  %517 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %514, i64 %59
  br label %518

518:                                              ; preds = %518, %516
  %519 = phi %"class.sh::TConstantUnion"* [ %514, %516 ], [ %520, %518 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %519) #18
  %520 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %519, i64 1
  %521 = icmp eq %"class.sh::TConstantUnion"* %520, %517
  br i1 %521, label %522, label %518

522:                                              ; preds = %518
  br i1 %515, label %1892, label %523

523:                                              ; preds = %522
  %524 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  br label %525

525:                                              ; preds = %525, %523
  %526 = phi i64 [ 0, %523 ], [ %538, %525 ]
  %527 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %514, i64 %526
  %528 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %524, align 8
  %529 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %528, i64 %526
  %530 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %529) #18
  %531 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %532 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %531, i64 %526
  %533 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %532) #18
  %534 = fcmp olt float %530, %533
  %535 = select i1 %534, float 0.000000e+00, float 1.000000e+00
  %536 = bitcast %"class.sh::TConstantUnion"* %527 to float*
  store float %535, float* %536, align 4
  %537 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %514, i64 %526, i32 1
  store i32 1, i32* %537, align 4
  %538 = add nuw i64 %526, 1
  %539 = icmp eq i64 %538, %59
  br i1 %539, label %1892, label %525

540:                                              ; preds = %240
  %541 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %542 = extractvalue { i64, i1 } %541, 1
  %543 = extractvalue { i64, i1 } %541, 0
  %544 = select i1 %542, i64 -1, i64 %543
  %545 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %546 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %545, i64 %544) #18
  %547 = bitcast i8* %546 to %"class.sh::TConstantUnion"*
  %548 = icmp eq i64 %59, 0
  br i1 %548, label %1892, label %549

549:                                              ; preds = %540
  %550 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %547, i64 %59
  br label %551

551:                                              ; preds = %551, %549
  %552 = phi %"class.sh::TConstantUnion"* [ %547, %549 ], [ %553, %551 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %552) #18
  %553 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %552, i64 1
  %554 = icmp eq %"class.sh::TConstantUnion"* %553, %550
  br i1 %554, label %555, label %551

555:                                              ; preds = %551
  br i1 %548, label %1892, label %556

556:                                              ; preds = %555
  %557 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  br label %558

558:                                              ; preds = %590, %556
  %559 = phi i64 [ 0, %556 ], [ %591, %590 ]
  switch i32 %58, label %590 [
    i32 1, label %560
    i32 3, label %568
    i32 4, label %576
  ]

560:                                              ; preds = %558
  %561 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %562 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %561, i64 %559
  %563 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %562) #18
  %564 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %557, align 8
  %565 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %564, i64 %559
  %566 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %565) #18
  %567 = fcmp olt float %563, %566
  br label %584

568:                                              ; preds = %558
  %569 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %570 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %569, i64 %559
  %571 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %570) #18
  %572 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %557, align 8
  %573 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %572, i64 %559
  %574 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %573) #18
  %575 = icmp slt i32 %571, %574
  br label %584

576:                                              ; preds = %558
  %577 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %578 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %577, i64 %559
  %579 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %578) #18
  %580 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %557, align 8
  %581 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %580, i64 %559
  %582 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %581) #18
  %583 = icmp ult i32 %579, %582
  br label %584

584:                                              ; preds = %576, %568, %560
  %585 = phi i1 [ %567, %560 ], [ %575, %568 ], [ %583, %576 ]
  %586 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %547, i64 %559
  %587 = zext i1 %585 to i8
  %588 = bitcast %"class.sh::TConstantUnion"* %586 to i8*
  store i8 %587, i8* %588, align 4
  %589 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %547, i64 %559, i32 1
  store i32 5, i32* %589, align 4
  br label %590

590:                                              ; preds = %584, %558
  %591 = add nuw i64 %559, 1
  %592 = icmp eq i64 %591, %59
  br i1 %592, label %1892, label %558

593:                                              ; preds = %240
  %594 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %595 = extractvalue { i64, i1 } %594, 1
  %596 = extractvalue { i64, i1 } %594, 0
  %597 = select i1 %595, i64 -1, i64 %596
  %598 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %599 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %598, i64 %597) #18
  %600 = bitcast i8* %599 to %"class.sh::TConstantUnion"*
  %601 = icmp eq i64 %59, 0
  br i1 %601, label %1892, label %602

602:                                              ; preds = %593
  %603 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %600, i64 %59
  br label %604

604:                                              ; preds = %604, %602
  %605 = phi %"class.sh::TConstantUnion"* [ %600, %602 ], [ %606, %604 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %605) #18
  %606 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %605, i64 1
  %607 = icmp eq %"class.sh::TConstantUnion"* %606, %603
  br i1 %607, label %608, label %604

608:                                              ; preds = %604
  br i1 %601, label %1892, label %609

609:                                              ; preds = %608
  %610 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  br label %611

611:                                              ; preds = %643, %609
  %612 = phi i64 [ 0, %609 ], [ %644, %643 ]
  switch i32 %58, label %643 [
    i32 1, label %613
    i32 3, label %621
    i32 4, label %629
  ]

613:                                              ; preds = %611
  %614 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %615 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %614, i64 %612
  %616 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %615) #18
  %617 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %610, align 8
  %618 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %617, i64 %612
  %619 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %618) #18
  %620 = fcmp ole float %616, %619
  br label %637

621:                                              ; preds = %611
  %622 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %623 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %622, i64 %612
  %624 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %623) #18
  %625 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %610, align 8
  %626 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %625, i64 %612
  %627 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %626) #18
  %628 = icmp sle i32 %624, %627
  br label %637

629:                                              ; preds = %611
  %630 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %631 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %630, i64 %612
  %632 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %631) #18
  %633 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %610, align 8
  %634 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %633, i64 %612
  %635 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %634) #18
  %636 = icmp ule i32 %632, %635
  br label %637

637:                                              ; preds = %629, %621, %613
  %638 = phi i1 [ %620, %613 ], [ %628, %621 ], [ %636, %629 ]
  %639 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %600, i64 %612
  %640 = zext i1 %638 to i8
  %641 = bitcast %"class.sh::TConstantUnion"* %639 to i8*
  store i8 %640, i8* %641, align 4
  %642 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %600, i64 %612, i32 1
  store i32 5, i32* %642, align 4
  br label %643

643:                                              ; preds = %637, %611
  %644 = add nuw i64 %612, 1
  %645 = icmp eq i64 %644, %59
  br i1 %645, label %1892, label %611

646:                                              ; preds = %240
  %647 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %648 = extractvalue { i64, i1 } %647, 1
  %649 = extractvalue { i64, i1 } %647, 0
  %650 = select i1 %648, i64 -1, i64 %649
  %651 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %652 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %651, i64 %650) #18
  %653 = bitcast i8* %652 to %"class.sh::TConstantUnion"*
  %654 = icmp eq i64 %59, 0
  br i1 %654, label %1892, label %655

655:                                              ; preds = %646
  %656 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %653, i64 %59
  br label %657

657:                                              ; preds = %657, %655
  %658 = phi %"class.sh::TConstantUnion"* [ %653, %655 ], [ %659, %657 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %658) #18
  %659 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %658, i64 1
  %660 = icmp eq %"class.sh::TConstantUnion"* %659, %656
  br i1 %660, label %661, label %657

661:                                              ; preds = %657
  br i1 %654, label %1892, label %662

662:                                              ; preds = %661
  %663 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  br label %664

664:                                              ; preds = %696, %662
  %665 = phi i64 [ 0, %662 ], [ %697, %696 ]
  switch i32 %58, label %696 [
    i32 1, label %666
    i32 3, label %674
    i32 4, label %682
  ]

666:                                              ; preds = %664
  %667 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %668 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %667, i64 %665
  %669 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %668) #18
  %670 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %663, align 8
  %671 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %670, i64 %665
  %672 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %671) #18
  %673 = fcmp ogt float %669, %672
  br label %690

674:                                              ; preds = %664
  %675 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %676 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %675, i64 %665
  %677 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %676) #18
  %678 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %663, align 8
  %679 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %678, i64 %665
  %680 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %679) #18
  %681 = icmp sgt i32 %677, %680
  br label %690

682:                                              ; preds = %664
  %683 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %684 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %683, i64 %665
  %685 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %684) #18
  %686 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %663, align 8
  %687 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %686, i64 %665
  %688 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %687) #18
  %689 = icmp ugt i32 %685, %688
  br label %690

690:                                              ; preds = %682, %674, %666
  %691 = phi i1 [ %673, %666 ], [ %681, %674 ], [ %689, %682 ]
  %692 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %653, i64 %665
  %693 = zext i1 %691 to i8
  %694 = bitcast %"class.sh::TConstantUnion"* %692 to i8*
  store i8 %693, i8* %694, align 4
  %695 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %653, i64 %665, i32 1
  store i32 5, i32* %695, align 4
  br label %696

696:                                              ; preds = %690, %664
  %697 = add nuw i64 %665, 1
  %698 = icmp eq i64 %697, %59
  br i1 %698, label %1892, label %664

699:                                              ; preds = %240
  %700 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %701 = extractvalue { i64, i1 } %700, 1
  %702 = extractvalue { i64, i1 } %700, 0
  %703 = select i1 %701, i64 -1, i64 %702
  %704 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %705 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %704, i64 %703) #18
  %706 = bitcast i8* %705 to %"class.sh::TConstantUnion"*
  %707 = icmp eq i64 %59, 0
  br i1 %707, label %1892, label %708

708:                                              ; preds = %699
  %709 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %706, i64 %59
  br label %710

710:                                              ; preds = %710, %708
  %711 = phi %"class.sh::TConstantUnion"* [ %706, %708 ], [ %712, %710 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %711) #18
  %712 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %711, i64 1
  %713 = icmp eq %"class.sh::TConstantUnion"* %712, %709
  br i1 %713, label %714, label %710

714:                                              ; preds = %710
  br i1 %707, label %1892, label %715

715:                                              ; preds = %714
  %716 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  br label %717

717:                                              ; preds = %749, %715
  %718 = phi i64 [ 0, %715 ], [ %750, %749 ]
  switch i32 %58, label %749 [
    i32 1, label %719
    i32 3, label %727
    i32 4, label %735
  ]

719:                                              ; preds = %717
  %720 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %721 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %720, i64 %718
  %722 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %721) #18
  %723 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %716, align 8
  %724 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %723, i64 %718
  %725 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %724) #18
  %726 = fcmp oge float %722, %725
  br label %743

727:                                              ; preds = %717
  %728 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %729 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %728, i64 %718
  %730 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %729) #18
  %731 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %716, align 8
  %732 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %731, i64 %718
  %733 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %732) #18
  %734 = icmp sge i32 %730, %733
  br label %743

735:                                              ; preds = %717
  %736 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %737 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %736, i64 %718
  %738 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %737) #18
  %739 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %716, align 8
  %740 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %739, i64 %718
  %741 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %740) #18
  %742 = icmp uge i32 %738, %741
  br label %743

743:                                              ; preds = %735, %727, %719
  %744 = phi i1 [ %726, %719 ], [ %734, %727 ], [ %742, %735 ]
  %745 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %706, i64 %718
  %746 = zext i1 %744 to i8
  %747 = bitcast %"class.sh::TConstantUnion"* %745 to i8*
  store i8 %746, i8* %747, align 4
  %748 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %706, i64 %718, i32 1
  store i32 5, i32* %748, align 4
  br label %749

749:                                              ; preds = %743, %717
  %750 = add nuw i64 %718, 1
  %751 = icmp eq i64 %750, %59
  br i1 %751, label %1892, label %717

752:                                              ; preds = %240
  %753 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %754 = extractvalue { i64, i1 } %753, 1
  %755 = extractvalue { i64, i1 } %753, 0
  %756 = select i1 %754, i64 -1, i64 %755
  %757 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %758 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %757, i64 %756) #18
  %759 = bitcast i8* %758 to %"class.sh::TConstantUnion"*
  %760 = icmp eq i64 %59, 0
  br i1 %760, label %1892, label %761

761:                                              ; preds = %752
  %762 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %759, i64 %59
  br label %763

763:                                              ; preds = %763, %761
  %764 = phi %"class.sh::TConstantUnion"* [ %759, %761 ], [ %765, %763 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %764) #18
  %765 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %764, i64 1
  %766 = icmp eq %"class.sh::TConstantUnion"* %765, %762
  br i1 %766, label %767, label %763

767:                                              ; preds = %763
  br i1 %760, label %1892, label %768

768:                                              ; preds = %767
  %769 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  br label %770

770:                                              ; preds = %811, %768
  %771 = phi i64 [ 0, %768 ], [ %812, %811 ]
  switch i32 %58, label %811 [
    i32 1, label %772
    i32 3, label %780
    i32 4, label %788
    i32 5, label %796
  ]

772:                                              ; preds = %770
  %773 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %774 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %773, i64 %771
  %775 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %774) #18
  %776 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %769, align 8
  %777 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %776, i64 %771
  %778 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %777) #18
  %779 = fcmp oeq float %775, %778
  br label %805

780:                                              ; preds = %770
  %781 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %782 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %781, i64 %771
  %783 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %782) #18
  %784 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %769, align 8
  %785 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %784, i64 %771
  %786 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %785) #18
  %787 = icmp eq i32 %783, %786
  br label %805

788:                                              ; preds = %770
  %789 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %790 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %789, i64 %771
  %791 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %790) #18
  %792 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %769, align 8
  %793 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %792, i64 %771
  %794 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %793) #18
  %795 = icmp eq i32 %791, %794
  br label %805

796:                                              ; preds = %770
  %797 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %798 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %797, i64 %771
  %799 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* %798) #18
  %800 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %769, align 8
  %801 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %800, i64 %771
  %802 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* %801) #18
  %803 = xor i1 %799, %802
  %804 = xor i1 %803, true
  br label %805

805:                                              ; preds = %796, %788, %780, %772
  %806 = phi i1 [ %779, %772 ], [ %787, %780 ], [ %795, %788 ], [ %804, %796 ]
  %807 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %759, i64 %771
  %808 = zext i1 %806 to i8
  %809 = bitcast %"class.sh::TConstantUnion"* %807 to i8*
  store i8 %808, i8* %809, align 4
  %810 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %759, i64 %771, i32 1
  store i32 5, i32* %810, align 4
  br label %811

811:                                              ; preds = %805, %770
  %812 = add nuw i64 %771, 1
  %813 = icmp eq i64 %812, %59
  br i1 %813, label %1892, label %770

814:                                              ; preds = %240
  %815 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %816 = extractvalue { i64, i1 } %815, 1
  %817 = extractvalue { i64, i1 } %815, 0
  %818 = select i1 %816, i64 -1, i64 %817
  %819 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %820 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %819, i64 %818) #18
  %821 = bitcast i8* %820 to %"class.sh::TConstantUnion"*
  %822 = icmp eq i64 %59, 0
  br i1 %822, label %1892, label %823

823:                                              ; preds = %814
  %824 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %821, i64 %59
  br label %825

825:                                              ; preds = %825, %823
  %826 = phi %"class.sh::TConstantUnion"* [ %821, %823 ], [ %827, %825 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %826) #18
  %827 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %826, i64 1
  %828 = icmp eq %"class.sh::TConstantUnion"* %827, %824
  br i1 %828, label %829, label %825

829:                                              ; preds = %825
  br i1 %822, label %1892, label %830

830:                                              ; preds = %829
  %831 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  br label %832

832:                                              ; preds = %872, %830
  %833 = phi i64 [ 0, %830 ], [ %873, %872 ]
  switch i32 %58, label %872 [
    i32 1, label %834
    i32 3, label %842
    i32 4, label %850
    i32 5, label %858
  ]

834:                                              ; preds = %832
  %835 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %836 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %835, i64 %833
  %837 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %836) #18
  %838 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %831, align 8
  %839 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %838, i64 %833
  %840 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %839) #18
  %841 = fcmp une float %837, %840
  br label %866

842:                                              ; preds = %832
  %843 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %844 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %843, i64 %833
  %845 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %844) #18
  %846 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %831, align 8
  %847 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %846, i64 %833
  %848 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %847) #18
  %849 = icmp ne i32 %845, %848
  br label %866

850:                                              ; preds = %832
  %851 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %852 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %851, i64 %833
  %853 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %852) #18
  %854 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %831, align 8
  %855 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %854, i64 %833
  %856 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %855) #18
  %857 = icmp ne i32 %853, %856
  br label %866

858:                                              ; preds = %832
  %859 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %860 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %859, i64 %833
  %861 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* %860) #18
  %862 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %831, align 8
  %863 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %862, i64 %833
  %864 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* %863) #18
  %865 = xor i1 %861, %864
  br label %866

866:                                              ; preds = %858, %850, %842, %834
  %867 = phi i1 [ %841, %834 ], [ %849, %842 ], [ %857, %850 ], [ %865, %858 ]
  %868 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %821, i64 %833
  %869 = zext i1 %867 to i8
  %870 = bitcast %"class.sh::TConstantUnion"* %868 to i8*
  store i8 %869, i8* %870, align 4
  %871 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %821, i64 %833, i32 1
  store i32 5, i32* %871, align 4
  br label %872

872:                                              ; preds = %866, %832
  %873 = add nuw i64 %833, 1
  %874 = icmp eq i64 %873, %59
  br i1 %874, label %1892, label %832

875:                                              ; preds = %240
  %876 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %877 = extractvalue { i64, i1 } %876, 1
  %878 = extractvalue { i64, i1 } %876, 0
  %879 = select i1 %877, i64 -1, i64 %878
  %880 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %881 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %880, i64 %879) #18
  %882 = bitcast i8* %881 to %"class.sh::TConstantUnion"*
  %883 = icmp eq i64 %59, 0
  br i1 %883, label %890, label %884

884:                                              ; preds = %875
  %885 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %882, i64 %59
  br label %886

886:                                              ; preds = %886, %884
  %887 = phi %"class.sh::TConstantUnion"* [ %882, %884 ], [ %888, %886 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %887) #18
  %888 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %887, i64 1
  %889 = icmp eq %"class.sh::TConstantUnion"* %888, %885
  br i1 %889, label %890, label %886

890:                                              ; preds = %886, %875
  %891 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %892 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %891, i64 8) #18
  %893 = bitcast i8* %892 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %893) #18
  br i1 %883, label %906, label %894

894:                                              ; preds = %890
  %895 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  br label %912

896:                                              ; preds = %912
  br i1 %883, label %906, label %897

897:                                              ; preds = %896, %897
  %898 = phi float [ %903, %897 ], [ 0.000000e+00, %896 ]
  %899 = phi i64 [ %904, %897 ], [ 0, %896 ]
  %900 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %882, i64 %899
  %901 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %900) #18
  %902 = fmul float %901, %901
  %903 = fadd float %898, %902
  %904 = add nuw i64 %899, 1
  %905 = icmp eq i64 %904, %59
  br i1 %905, label %906, label %897

906:                                              ; preds = %897, %890, %896
  %907 = phi float [ 0.000000e+00, %896 ], [ 0.000000e+00, %890 ], [ %903, %897 ]
  %908 = tail call float @sqrtf(float %907) #18
  %909 = bitcast i8* %892 to float*
  store float %908, float* %909, align 4
  %910 = getelementptr inbounds i8, i8* %892, i64 4
  %911 = bitcast i8* %910 to i32*
  store i32 1, i32* %911, align 4
  br label %1892

912:                                              ; preds = %912, %894
  %913 = phi i64 [ 0, %894 ], [ %924, %912 ]
  %914 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %915 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %914, i64 %913
  %916 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %915) #18
  %917 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %895, align 8
  %918 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %917, i64 %913
  %919 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %918) #18
  %920 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %882, i64 %913
  %921 = fsub float %916, %919
  %922 = bitcast %"class.sh::TConstantUnion"* %920 to float*
  store float %921, float* %922, align 4
  %923 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %882, i64 %913, i32 1
  store i32 1, i32* %923, align 4
  %924 = add nuw i64 %913, 1
  %925 = icmp eq i64 %924, %59
  br i1 %925, label %896, label %912

926:                                              ; preds = %240
  %927 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %928 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %927, i64 8) #18
  %929 = bitcast i8* %928 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %929) #18
  %930 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %931 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  %932 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %931, align 8
  %933 = icmp eq i64 %59, 0
  br i1 %933, label %945, label %934

934:                                              ; preds = %926, %934
  %935 = phi i64 [ %943, %934 ], [ 0, %926 ]
  %936 = phi float [ %942, %934 ], [ 0.000000e+00, %926 ]
  %937 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %930, i64 %935
  %938 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %937) #18
  %939 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %932, i64 %935
  %940 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %939) #18
  %941 = fmul float %938, %940
  %942 = fadd float %936, %941
  %943 = add nuw i64 %935, 1
  %944 = icmp eq i64 %943, %59
  br i1 %944, label %945, label %934

945:                                              ; preds = %934, %926
  %946 = phi float [ 0.000000e+00, %926 ], [ %942, %934 ]
  %947 = bitcast i8* %928 to float*
  store float %946, float* %947, align 4
  %948 = getelementptr inbounds i8, i8* %928, i64 4
  %949 = bitcast i8* %948 to i32*
  store i32 1, i32* %949, align 4
  br label %1892

950:                                              ; preds = %240
  %951 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %952 = extractvalue { i64, i1 } %951, 1
  %953 = extractvalue { i64, i1 } %951, 0
  %954 = select i1 %952, i64 -1, i64 %953
  %955 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %956 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %955, i64 %954) #18
  %957 = bitcast i8* %956 to %"class.sh::TConstantUnion"*
  %958 = icmp eq i64 %59, 0
  br i1 %958, label %965, label %959

959:                                              ; preds = %950
  %960 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %957, i64 %59
  br label %961

961:                                              ; preds = %961, %959
  %962 = phi %"class.sh::TConstantUnion"* [ %957, %959 ], [ %963, %961 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %962) #18
  %963 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %962, i64 1
  %964 = icmp eq %"class.sh::TConstantUnion"* %963, %960
  br i1 %964, label %965, label %961

965:                                              ; preds = %961, %950
  %966 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %967 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %966) #18
  %968 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %969 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %968, i64 1
  %970 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %969) #18
  %971 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %972 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %971, i64 2
  %973 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %972) #18
  %974 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  %975 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %974, align 8
  %976 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %975) #18
  %977 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %974, align 8
  %978 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %977, i64 1
  %979 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %978) #18
  %980 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %974, align 8
  %981 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %980, i64 2
  %982 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %981) #18
  %983 = fmul float %970, %982
  %984 = fmul float %973, %979
  %985 = fsub float %983, %984
  %986 = bitcast i8* %956 to float*
  store float %985, float* %986, align 4
  %987 = getelementptr inbounds i8, i8* %956, i64 4
  %988 = bitcast i8* %987 to i32*
  store i32 1, i32* %988, align 4
  %989 = getelementptr inbounds i8, i8* %956, i64 8
  %990 = fmul float %973, %976
  %991 = fmul float %967, %982
  %992 = fsub float %990, %991
  %993 = bitcast i8* %989 to float*
  store float %992, float* %993, align 4
  %994 = getelementptr inbounds i8, i8* %956, i64 12
  %995 = bitcast i8* %994 to i32*
  store i32 1, i32* %995, align 4
  %996 = getelementptr inbounds i8, i8* %956, i64 16
  %997 = fmul float %967, %979
  %998 = fmul float %970, %976
  %999 = fsub float %997, %998
  %1000 = bitcast i8* %996 to float*
  store float %999, float* %1000, align 4
  %1001 = getelementptr inbounds i8, i8* %956, i64 20
  %1002 = bitcast i8* %1001 to i32*
  store i32 1, i32* %1002, align 4
  br label %1892

1003:                                             ; preds = %240
  %1004 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %1005 = extractvalue { i64, i1 } %1004, 1
  %1006 = extractvalue { i64, i1 } %1004, 0
  %1007 = select i1 %1005, i64 -1, i64 %1006
  %1008 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %1009 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1008, i64 %1007) #18
  %1010 = bitcast i8* %1009 to %"class.sh::TConstantUnion"*
  %1011 = icmp eq i64 %59, 0
  br i1 %1011, label %1892, label %1012

1012:                                             ; preds = %1003
  %1013 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1010, i64 %59
  br label %1014

1014:                                             ; preds = %1014, %1012
  %1015 = phi %"class.sh::TConstantUnion"* [ %1010, %1012 ], [ %1016, %1014 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1015) #18
  %1016 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1015, i64 1
  %1017 = icmp eq %"class.sh::TConstantUnion"* %1016, %1013
  br i1 %1017, label %1018, label %1014

1018:                                             ; preds = %1014
  %1019 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  %1020 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1019, align 8
  %1021 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  br label %1022

1022:                                             ; preds = %1018, %1022
  %1023 = phi i64 [ %1031, %1022 ], [ 0, %1018 ]
  %1024 = phi float [ %1030, %1022 ], [ 0.000000e+00, %1018 ]
  %1025 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1020, i64 %1023
  %1026 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1025) #18
  %1027 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1021, i64 %1023
  %1028 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1027) #18
  %1029 = fmul float %1026, %1028
  %1030 = fadd float %1024, %1029
  %1031 = add nuw i64 %1023, 1
  %1032 = icmp eq i64 %1031, %59
  br i1 %1032, label %1033, label %1022

1033:                                             ; preds = %1022
  %1034 = fmul float %1030, 2.000000e+00
  br i1 %1011, label %1892, label %1035

1035:                                             ; preds = %1033, %1035
  %1036 = phi i64 [ %1048, %1035 ], [ 0, %1033 ]
  %1037 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %1038 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1037, i64 %1036
  %1039 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1038) #18
  %1040 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1019, align 8
  %1041 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1040, i64 %1036
  %1042 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1041) #18
  %1043 = fmul float %1034, %1042
  %1044 = fsub float %1039, %1043
  %1045 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1010, i64 %1036
  %1046 = bitcast %"class.sh::TConstantUnion"* %1045 to float*
  store float %1044, float* %1046, align 4
  %1047 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1010, i64 %1036, i32 1
  store i32 1, i32* %1047, align 4
  %1048 = add nuw i64 %1036, 1
  %1049 = icmp eq i64 %1048, %59
  br i1 %1049, label %1892, label %1035

1050:                                             ; preds = %240
  %1051 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %1052 = extractvalue { i64, i1 } %1051, 1
  %1053 = extractvalue { i64, i1 } %1051, 0
  %1054 = select i1 %1052, i64 -1, i64 %1053
  %1055 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %1056 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1055, i64 %1054) #18
  %1057 = bitcast i8* %1056 to %"class.sh::TConstantUnion"*
  %1058 = icmp eq i64 %59, 0
  br i1 %1058, label %1065, label %1059

1059:                                             ; preds = %1050
  %1060 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1057, i64 %59
  br label %1061

1061:                                             ; preds = %1061, %1059
  %1062 = phi %"class.sh::TConstantUnion"* [ %1057, %1059 ], [ %1063, %1061 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1062) #18
  %1063 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1062, i64 1
  %1064 = icmp eq %"class.sh::TConstantUnion"* %1063, %1060
  br i1 %1064, label %1065, label %1061

1065:                                             ; preds = %1061, %1050
  %1066 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %60, align 8
  %1067 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1066, align 8
  %1068 = bitcast %"class.sh::TIntermNode"* %1067 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %1069 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %1068, align 8
  %1070 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %1069, i64 4
  %1071 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %1070, align 8
  %1072 = tail call %"class.sh::TIntermTyped"* %1071(%"class.sh::TIntermNode"* %1067) #18
  %1073 = bitcast %"class.sh::TIntermTyped"* %1072 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %1074 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1073, align 8
  %1075 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1074, i64 31
  %1076 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1075, align 8
  %1077 = tail call dereferenceable(184) %"class.sh::TType"* %1076(%"class.sh::TIntermTyped"* %1072) #18
  %1078 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1077, i64 0, i32 9
  %1079 = load i8, i8* %1078, align 1
  %1080 = zext i8 %1079 to i32
  %1081 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %60, align 8
  %1082 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1081, align 8
  %1083 = bitcast %"class.sh::TIntermNode"* %1082 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %1084 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %1083, align 8
  %1085 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %1084, i64 4
  %1086 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %1085, align 8
  %1087 = tail call %"class.sh::TIntermTyped"* %1086(%"class.sh::TIntermNode"* %1082) #18
  %1088 = bitcast %"class.sh::TIntermTyped"* %1087 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %1089 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1088, align 8
  %1090 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1089, i64 31
  %1091 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1090, align 8
  %1092 = tail call dereferenceable(184) %"class.sh::TType"* %1091(%"class.sh::TIntermTyped"* %1087) #18
  %1093 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1092, i64 0, i32 8
  %1094 = load i8, i8* %1093, align 8
  %1095 = zext i8 %1094 to i32
  %1096 = bitcast %"class.angle::Matrix"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1096) #18
  %1097 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %4, i64 0, i32 0, i32 0, i32 0
  %1098 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %4, i64 0, i32 0, i32 0, i32 1
  %1099 = bitcast %"class.angle::Matrix"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1099, i8 -86, i64 32, i1 false)
  %1100 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  call fastcc void @_ZN2sh12_GLOBAL__N_19GetMatrixEPKNS_14TConstantUnionEjj(%"class.angle::Matrix"* nonnull sret %4, %"class.sh::TConstantUnion"* %1100, i32 %1080, i32 %1095)
  %1101 = bitcast %"class.angle::Matrix"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1101) #18
  %1102 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 0
  %1103 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 1
  %1104 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  %1105 = bitcast %"class.angle::Matrix"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1105, i8 -86, i64 32, i1 false)
  %1106 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1104, align 8
  call fastcc void @_ZN2sh12_GLOBAL__N_19GetMatrixEPKNS_14TConstantUnionEjj(%"class.angle::Matrix"* nonnull sret %5, %"class.sh::TConstantUnion"* %1106, i32 %1080, i32 %1095)
  %1107 = bitcast %"class.angle::Matrix"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1107) #18
  %1108 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 0
  %1109 = bitcast %"class.angle::Matrix"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1109, i8 -86, i64 32, i1 false)
  call void @_ZNK5angle6MatrixIfE8compMultERKS1_(%"class.angle::Matrix"* nonnull sret %6, %"class.angle::Matrix"* nonnull %4, %"class.angle::Matrix"* nonnull dereferenceable(32) %5)
  call fastcc void @_ZN2sh12_GLOBAL__N_123SetUnionArrayFromMatrixERKN5angle6MatrixIfEEPNS_14TConstantUnionE(%"class.angle::Matrix"* nonnull dereferenceable(32) %6, %"class.sh::TConstantUnion"* %1057)
  %1110 = load float*, float** %1108, align 8
  %1111 = icmp eq float* %1110, null
  br i1 %1111, label %1117, label %1112

1112:                                             ; preds = %1065
  %1113 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 1
  %1114 = ptrtoint float* %1110 to i64
  %1115 = bitcast float** %1113 to i64*
  store i64 %1114, i64* %1115, align 8
  %1116 = bitcast float* %1110 to i8*
  call void @_ZdlPv(i8* %1116) #21
  br label %1117

1117:                                             ; preds = %1065, %1112
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1107) #18
  %1118 = load float*, float** %1102, align 8
  %1119 = icmp eq float* %1118, null
  br i1 %1119, label %1124, label %1120

1120:                                             ; preds = %1117
  %1121 = ptrtoint float* %1118 to i64
  %1122 = bitcast float** %1103 to i64*
  store i64 %1121, i64* %1122, align 8
  %1123 = bitcast float* %1118 to i8*
  call void @_ZdlPv(i8* %1123) #21
  br label %1124

1124:                                             ; preds = %1117, %1120
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1101) #18
  %1125 = load float*, float** %1097, align 8
  %1126 = icmp eq float* %1125, null
  br i1 %1126, label %1131, label %1127

1127:                                             ; preds = %1124
  %1128 = ptrtoint float* %1125 to i64
  %1129 = bitcast float** %1098 to i64*
  store i64 %1128, i64* %1129, align 8
  %1130 = bitcast float* %1125 to i8*
  call void @_ZdlPv(i8* %1130) #21
  br label %1131

1131:                                             ; preds = %1124, %1127
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1096) #18
  br label %1892

1132:                                             ; preds = %240
  %1133 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %60, align 8
  %1134 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1133, align 8
  %1135 = bitcast %"class.sh::TIntermNode"* %1134 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %1136 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %1135, align 8
  %1137 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %1136, i64 4
  %1138 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %1137, align 8
  %1139 = tail call %"class.sh::TIntermTyped"* %1138(%"class.sh::TIntermNode"* %1134) #18
  %1140 = bitcast %"class.sh::TIntermTyped"* %1139 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %1141 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1140, align 8
  %1142 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1141, i64 31
  %1143 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1142, align 8
  %1144 = tail call dereferenceable(184) %"class.sh::TType"* %1143(%"class.sh::TIntermTyped"* %1139) #18
  %1145 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %1144) #18
  %1146 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %60, align 8
  %1147 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1146, i64 1
  %1148 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1147, align 8
  %1149 = bitcast %"class.sh::TIntermNode"* %1148 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %1150 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %1149, align 8
  %1151 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %1150, i64 4
  %1152 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %1151, align 8
  %1153 = tail call %"class.sh::TIntermTyped"* %1152(%"class.sh::TIntermNode"* %1148) #18
  %1154 = bitcast %"class.sh::TIntermTyped"* %1153 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %1155 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1154, align 8
  %1156 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1155, i64 31
  %1157 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1156, align 8
  %1158 = tail call dereferenceable(184) %"class.sh::TType"* %1157(%"class.sh::TIntermTyped"* %1153) #18
  %1159 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %1158) #18
  %1160 = mul i64 %1159, %1145
  %1161 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %1160, i64 8)
  %1162 = extractvalue { i64, i1 } %1161, 1
  %1163 = extractvalue { i64, i1 } %1161, 0
  %1164 = select i1 %1162, i64 -1, i64 %1163
  %1165 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %1166 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1165, i64 %1164) #18
  %1167 = bitcast i8* %1166 to %"class.sh::TConstantUnion"*
  %1168 = icmp eq i64 %1160, 0
  br i1 %1168, label %1175, label %1169

1169:                                             ; preds = %1132
  %1170 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1167, i64 %1160
  br label %1171

1171:                                             ; preds = %1171, %1169
  %1172 = phi %"class.sh::TConstantUnion"* [ %1167, %1169 ], [ %1173, %1171 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1172) #18
  %1173 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1172, i64 1
  %1174 = icmp eq %"class.sh::TConstantUnion"* %1173, %1170
  br i1 %1174, label %1175, label %1171

1175:                                             ; preds = %1171, %1132
  %1176 = bitcast %"class.angle::Matrix"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1176) #18
  %1177 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %7, i64 0, i32 0, i32 0, i32 0
  %1178 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %7, i64 0, i32 0, i32 0, i32 1
  %1179 = bitcast %"class.angle::Matrix"* %8 to i8*
  %1180 = bitcast %"class.angle::Matrix"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1180, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1179) #18
  %1181 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %1182 = trunc i64 %1145 to i32
  call fastcc void @_ZN2sh12_GLOBAL__N_19GetMatrixEPKNS_14TConstantUnionEjj(%"class.angle::Matrix"* nonnull sret %8, %"class.sh::TConstantUnion"* %1181, i32 %1182, i32 1)
  %1183 = bitcast %"class.angle::Matrix"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1183) #18
  %1184 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  %1185 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1184, align 8
  %1186 = trunc i64 %1159 to i32
  call fastcc void @_ZN2sh12_GLOBAL__N_19GetMatrixEPKNS_14TConstantUnionEjj(%"class.angle::Matrix"* nonnull sret %9, %"class.sh::TConstantUnion"* %1185, i32 1, i32 %1186)
  call void @_ZNK5angle6MatrixIfE12outerProductERKS1_(%"class.angle::Matrix"* nonnull sret %7, %"class.angle::Matrix"* nonnull %8, %"class.angle::Matrix"* nonnull dereferenceable(32) %9)
  %1187 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %9, i64 0, i32 0, i32 0, i32 0
  %1188 = load float*, float** %1187, align 8
  %1189 = icmp eq float* %1188, null
  br i1 %1189, label %1195, label %1190

1190:                                             ; preds = %1175
  %1191 = ptrtoint float* %1188 to i64
  %1192 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %9, i64 0, i32 0, i32 0, i32 1
  %1193 = bitcast float** %1192 to i64*
  store i64 %1191, i64* %1193, align 8
  %1194 = bitcast float* %1188 to i8*
  call void @_ZdlPv(i8* %1194) #21
  br label %1195

1195:                                             ; preds = %1175, %1190
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1183) #18
  %1196 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %8, i64 0, i32 0, i32 0, i32 0
  %1197 = load float*, float** %1196, align 8
  %1198 = icmp eq float* %1197, null
  br i1 %1198, label %1204, label %1199

1199:                                             ; preds = %1195
  %1200 = ptrtoint float* %1197 to i64
  %1201 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %8, i64 0, i32 0, i32 0, i32 1
  %1202 = bitcast float** %1201 to i64*
  store i64 %1200, i64* %1202, align 8
  %1203 = bitcast float* %1197 to i8*
  call void @_ZdlPv(i8* %1203) #21
  br label %1204

1204:                                             ; preds = %1195, %1199
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1179) #18
  call fastcc void @_ZN2sh12_GLOBAL__N_123SetUnionArrayFromMatrixERKN5angle6MatrixIfEEPNS_14TConstantUnionE(%"class.angle::Matrix"* nonnull dereferenceable(32) %7, %"class.sh::TConstantUnion"* %1167)
  %1205 = load float*, float** %1177, align 8
  %1206 = icmp eq float* %1205, null
  br i1 %1206, label %1211, label %1207

1207:                                             ; preds = %1204
  %1208 = ptrtoint float* %1205 to i64
  %1209 = bitcast float** %1178 to i64*
  store i64 %1208, i64* %1209, align 8
  %1210 = bitcast float* %1205 to i8*
  call void @_ZdlPv(i8* %1210) #21
  br label %1211

1211:                                             ; preds = %1204, %1207
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1176) #18
  br label %1892

1212:                                             ; preds = %240
  %1213 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %1214 = extractvalue { i64, i1 } %1213, 1
  %1215 = extractvalue { i64, i1 } %1213, 0
  %1216 = select i1 %1214, i64 -1, i64 %1215
  %1217 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %1218 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1217, i64 %1216) #18
  %1219 = bitcast i8* %1218 to %"class.sh::TConstantUnion"*
  %1220 = icmp eq i64 %59, 0
  br i1 %1220, label %1892, label %1221

1221:                                             ; preds = %1212
  %1222 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1219, i64 %59
  br label %1223

1223:                                             ; preds = %1223, %1221
  %1224 = phi %"class.sh::TConstantUnion"* [ %1219, %1221 ], [ %1225, %1223 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1224) #18
  %1225 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1224, i64 1
  %1226 = icmp eq %"class.sh::TConstantUnion"* %1225, %1222
  br i1 %1226, label %1227, label %1223

1227:                                             ; preds = %1223
  br i1 %1220, label %1892, label %1228

1228:                                             ; preds = %1227
  %1229 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  %1230 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 2
  br label %1231

1231:                                             ; preds = %1299, %1228
  %1232 = phi i64 [ 0, %1228 ], [ %1300, %1299 ]
  switch i32 %58, label %1299 [
    i32 1, label %1233
    i32 3, label %1254
    i32 4, label %1275
  ]

1233:                                             ; preds = %1231
  %1234 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %1235 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1234, i64 %1232
  %1236 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1235) #18
  %1237 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1229, align 8
  %1238 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1237, i64 %1232
  %1239 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1238) #18
  %1240 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1230, align 8
  %1241 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1240, i64 %1232
  %1242 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1241) #18
  %1243 = fcmp ogt float %1239, %1242
  %1244 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1219, i64 %1232
  br i1 %1243, label %1245, label %1248

1245:                                             ; preds = %1233
  %1246 = call i8* @_Z17GetOperatorString9TOperator(i8 zeroext 81) #18
  call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %1246) #18
  %1247 = bitcast %"class.sh::TConstantUnion"* %1244 to float*
  store float 0.000000e+00, float* %1247, align 4
  br label %1296

1248:                                             ; preds = %1233
  %1249 = fcmp ogt float %1236, %1239
  %1250 = fcmp ogt float %1236, %1242
  %1251 = select i1 %1250, float %1242, float %1236
  %1252 = select i1 %1249, float %1251, float %1239
  %1253 = bitcast %"class.sh::TConstantUnion"* %1244 to float*
  store float %1252, float* %1253, align 4
  br label %1296

1254:                                             ; preds = %1231
  %1255 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %1256 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1255, i64 %1232
  %1257 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1256) #18
  %1258 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1229, align 8
  %1259 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1258, i64 %1232
  %1260 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1259) #18
  %1261 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1230, align 8
  %1262 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1261, i64 %1232
  %1263 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1262) #18
  %1264 = icmp sgt i32 %1260, %1263
  %1265 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1219, i64 %1232
  br i1 %1264, label %1266, label %1269

1266:                                             ; preds = %1254
  %1267 = call i8* @_Z17GetOperatorString9TOperator(i8 zeroext 81) #18
  call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %1267) #18
  %1268 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1265, i64 0, i32 0, i32 0
  store i32 0, i32* %1268, align 4
  br label %1296

1269:                                             ; preds = %1254
  %1270 = icmp sgt i32 %1257, %1260
  %1271 = icmp sgt i32 %1257, %1263
  %1272 = select i1 %1271, i32 %1263, i32 %1257
  %1273 = select i1 %1270, i32 %1272, i32 %1260
  %1274 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1265, i64 0, i32 0, i32 0
  store i32 %1273, i32* %1274, align 4
  br label %1296

1275:                                             ; preds = %1231
  %1276 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %1277 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1276, i64 %1232
  %1278 = call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %1277) #18
  %1279 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1229, align 8
  %1280 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1279, i64 %1232
  %1281 = call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %1280) #18
  %1282 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1230, align 8
  %1283 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1282, i64 %1232
  %1284 = call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %1283) #18
  %1285 = icmp ugt i32 %1281, %1284
  %1286 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1219, i64 %1232
  br i1 %1285, label %1287, label %1290

1287:                                             ; preds = %1275
  %1288 = call i8* @_Z17GetOperatorString9TOperator(i8 zeroext 81) #18
  call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %1288) #18
  %1289 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1286, i64 0, i32 0, i32 0
  store i32 0, i32* %1289, align 4
  br label %1296

1290:                                             ; preds = %1275
  %1291 = icmp ugt i32 %1278, %1281
  %1292 = icmp ugt i32 %1278, %1284
  %1293 = select i1 %1292, i32 %1284, i32 %1278
  %1294 = select i1 %1291, i32 %1293, i32 %1281
  %1295 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1286, i64 0, i32 0, i32 0
  store i32 %1294, i32* %1295, align 4
  br label %1296

1296:                                             ; preds = %1248, %1245, %1269, %1266, %1290, %1287
  %1297 = phi i32 [ 4, %1287 ], [ 4, %1290 ], [ 3, %1266 ], [ 3, %1269 ], [ 1, %1245 ], [ 1, %1248 ]
  %1298 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1219, i64 %1232, i32 1
  store i32 %1297, i32* %1298, align 4
  br label %1299

1299:                                             ; preds = %1296, %1231
  %1300 = add nuw i64 %1232, 1
  %1301 = icmp eq i64 %1300, %59
  br i1 %1301, label %1892, label %1231

1302:                                             ; preds = %240
  %1303 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %1304 = extractvalue { i64, i1 } %1303, 1
  %1305 = extractvalue { i64, i1 } %1303, 0
  %1306 = select i1 %1304, i64 -1, i64 %1305
  %1307 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %1308 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1307, i64 %1306) #18
  %1309 = bitcast i8* %1308 to %"class.sh::TConstantUnion"*
  %1310 = icmp eq i64 %59, 0
  br i1 %1310, label %1892, label %1311

1311:                                             ; preds = %1302
  %1312 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1309, i64 %59
  br label %1313

1313:                                             ; preds = %1313, %1311
  %1314 = phi %"class.sh::TConstantUnion"* [ %1309, %1311 ], [ %1315, %1313 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1314) #18
  %1315 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1314, i64 1
  %1316 = icmp eq %"class.sh::TConstantUnion"* %1315, %1312
  br i1 %1316, label %1317, label %1313

1317:                                             ; preds = %1313
  br i1 %1310, label %1892, label %1318

1318:                                             ; preds = %1317
  %1319 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 2
  %1320 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  br label %1321

1321:                                             ; preds = %1401, %1318
  %1322 = phi i64 [ 0, %1318 ], [ %1402, %1401 ]
  %1323 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %60, align 8
  %1324 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1323, i64 2
  %1325 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1324, align 8
  %1326 = bitcast %"class.sh::TIntermNode"* %1325 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %1327 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %1326, align 8
  %1328 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %1327, i64 4
  %1329 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %1328, align 8
  %1330 = tail call %"class.sh::TIntermTyped"* %1329(%"class.sh::TIntermNode"* %1325) #18
  %1331 = bitcast %"class.sh::TIntermTyped"* %1330 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %1332 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1331, align 8
  %1333 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1332, i64 31
  %1334 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1333, align 8
  %1335 = tail call dereferenceable(184) %"class.sh::TType"* %1334(%"class.sh::TIntermTyped"* %1330) #18
  %1336 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1335, i64 0, i32 0
  %1337 = load i32, i32* %1336, align 8
  %1338 = icmp eq i32 %1337, 1
  br i1 %1338, label %1339, label %1355

1339:                                             ; preds = %1321
  %1340 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %1341 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1340, i64 %1322
  %1342 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1341) #18
  %1343 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1320, align 8
  %1344 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1343, i64 %1322
  %1345 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1344) #18
  %1346 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1319, align 8
  %1347 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1346, i64 %1322
  %1348 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1347) #18
  %1349 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1309, i64 %1322
  %1350 = fsub float 1.000000e+00, %1348
  %1351 = fmul float %1342, %1350
  %1352 = fmul float %1345, %1348
  %1353 = fadd float %1352, %1351
  %1354 = bitcast %"class.sh::TConstantUnion"* %1349 to float*
  store float %1353, float* %1354, align 4
  br label %1398

1355:                                             ; preds = %1321
  %1356 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1319, align 8
  %1357 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1356, i64 %1322
  %1358 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* %1357) #18
  switch i32 %58, label %1401 [
    i32 1, label %1359
    i32 3, label %1369
    i32 4, label %1378
    i32 5, label %1387
  ]

1359:                                             ; preds = %1355
  %1360 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %1361 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1360, i64 %1322
  %1362 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1361) #18
  %1363 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1320, align 8
  %1364 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1363, i64 %1322
  %1365 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1364) #18
  %1366 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1309, i64 %1322
  %1367 = select i1 %1358, float %1365, float %1362
  %1368 = bitcast %"class.sh::TConstantUnion"* %1366 to float*
  store float %1367, float* %1368, align 4
  br label %1398

1369:                                             ; preds = %1355
  %1370 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %1371 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1370, i64 %1322
  %1372 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1371) #18
  %1373 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1320, align 8
  %1374 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1373, i64 %1322
  %1375 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1374) #18
  %1376 = select i1 %1358, i32 %1375, i32 %1372
  %1377 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1309, i64 %1322, i32 0, i32 0
  store i32 %1376, i32* %1377, align 4
  br label %1398

1378:                                             ; preds = %1355
  %1379 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %1380 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1379, i64 %1322
  %1381 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %1380) #18
  %1382 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1320, align 8
  %1383 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1382, i64 %1322
  %1384 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %1383) #18
  %1385 = select i1 %1358, i32 %1384, i32 %1381
  %1386 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1309, i64 %1322, i32 0, i32 0
  store i32 %1385, i32* %1386, align 4
  br label %1398

1387:                                             ; preds = %1355
  %1388 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %1389 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1388, i64 %1322
  %1390 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* %1389) #18
  %1391 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1320, align 8
  %1392 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1391, i64 %1322
  %1393 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* %1392) #18
  %1394 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1309, i64 %1322
  %1395 = select i1 %1358, i1 %1393, i1 %1390
  %1396 = zext i1 %1395 to i8
  %1397 = bitcast %"class.sh::TConstantUnion"* %1394 to i8*
  store i8 %1396, i8* %1397, align 4
  br label %1398

1398:                                             ; preds = %1339, %1387, %1378, %1369, %1359
  %1399 = phi i32 [ 1, %1359 ], [ 3, %1369 ], [ 4, %1378 ], [ 5, %1387 ], [ 1, %1339 ]
  %1400 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1309, i64 %1322, i32 1
  store i32 %1399, i32* %1400, align 4
  br label %1401

1401:                                             ; preds = %1398, %1355
  %1402 = add nuw i64 %1322, 1
  %1403 = icmp eq i64 %1402, %59
  br i1 %1403, label %1892, label %1321

1404:                                             ; preds = %240
  %1405 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %1406 = extractvalue { i64, i1 } %1405, 1
  %1407 = extractvalue { i64, i1 } %1405, 0
  %1408 = select i1 %1406, i64 -1, i64 %1407
  %1409 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %1410 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1409, i64 %1408) #18
  %1411 = bitcast i8* %1410 to %"class.sh::TConstantUnion"*
  %1412 = icmp eq i64 %59, 0
  br i1 %1412, label %1892, label %1413

1413:                                             ; preds = %1404
  %1414 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1411, i64 %59
  br label %1415

1415:                                             ; preds = %1415, %1413
  %1416 = phi %"class.sh::TConstantUnion"* [ %1411, %1413 ], [ %1417, %1415 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1416) #18
  %1417 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1416, i64 1
  %1418 = icmp eq %"class.sh::TConstantUnion"* %1417, %1414
  br i1 %1418, label %1419, label %1415

1419:                                             ; preds = %1415
  br i1 %1412, label %1892, label %1420

1420:                                             ; preds = %1419
  %1421 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  %1422 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 2
  br label %1423

1423:                                             ; preds = %1463, %1420
  %1424 = phi i64 [ 0, %1420 ], [ %1464, %1463 ]
  %1425 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %1426 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1425, i64 %1424
  %1427 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1426) #18
  %1428 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1421, align 8
  %1429 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1428, i64 %1424
  %1430 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1429) #18
  %1431 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1422, align 8
  %1432 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1431, i64 %1424
  %1433 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1432) #18
  %1434 = fcmp ult float %1427, %1430
  br i1 %1434, label %1446, label %1435

1435:                                             ; preds = %1423
  %1436 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1411, i64 %1424
  %1437 = call i8* @_Z17GetOperatorString9TOperator(i8 zeroext 84) #18
  call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %1437) #18
  switch i32 %58, label %1463 [
    i32 1, label %1438
    i32 3, label %1440
    i32 4, label %1442
    i32 5, label %1444
  ]

1438:                                             ; preds = %1435
  %1439 = bitcast %"class.sh::TConstantUnion"* %1436 to float*
  store float 0.000000e+00, float* %1439, align 4
  br label %1460

1440:                                             ; preds = %1435
  %1441 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1436, i64 0, i32 0, i32 0
  store i32 0, i32* %1441, align 4
  br label %1460

1442:                                             ; preds = %1435
  %1443 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1436, i64 0, i32 0, i32 0
  store i32 0, i32* %1443, align 4
  br label %1460

1444:                                             ; preds = %1435
  %1445 = bitcast %"class.sh::TConstantUnion"* %1436 to i8*
  store i8 0, i8* %1445, align 4
  br label %1460

1446:                                             ; preds = %1423
  %1447 = fsub float %1433, %1427
  %1448 = fsub float %1430, %1427
  %1449 = fdiv float %1447, %1448
  %1450 = fcmp ogt float %1449, 0.000000e+00
  %1451 = fcmp ogt float %1449, 1.000000e+00
  %1452 = select i1 %1451, float 1.000000e+00, float %1449
  %1453 = select i1 %1450, float %1452, float 0.000000e+00
  %1454 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1411, i64 %1424
  %1455 = fmul float %1453, %1453
  %1456 = fmul float %1453, 2.000000e+00
  %1457 = fsub float 3.000000e+00, %1456
  %1458 = fmul float %1455, %1457
  %1459 = bitcast %"class.sh::TConstantUnion"* %1454 to float*
  store float %1458, float* %1459, align 4
  br label %1460

1460:                                             ; preds = %1446, %1438, %1440, %1442, %1444
  %1461 = phi i32 [ 5, %1444 ], [ 4, %1442 ], [ 3, %1440 ], [ 1, %1438 ], [ 1, %1446 ]
  %1462 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1411, i64 %1424, i32 1
  store i32 %1461, i32* %1462, align 4
  br label %1463

1463:                                             ; preds = %1460, %1435
  %1464 = add nuw i64 %1424, 1
  %1465 = icmp eq i64 %1464, %59
  br i1 %1465, label %1892, label %1423

1466:                                             ; preds = %240
  %1467 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %1468 = extractvalue { i64, i1 } %1467, 1
  %1469 = extractvalue { i64, i1 } %1467, 0
  %1470 = select i1 %1468, i64 -1, i64 %1469
  %1471 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %1472 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1471, i64 %1470) #18
  %1473 = bitcast i8* %1472 to %"class.sh::TConstantUnion"*
  %1474 = icmp eq i64 %59, 0
  br i1 %1474, label %1892, label %1475

1475:                                             ; preds = %1466
  %1476 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1473, i64 %59
  br label %1477

1477:                                             ; preds = %1477, %1475
  %1478 = phi %"class.sh::TConstantUnion"* [ %1473, %1475 ], [ %1479, %1477 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1478) #18
  %1479 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1478, i64 1
  %1480 = icmp eq %"class.sh::TConstantUnion"* %1479, %1476
  br i1 %1480, label %1481, label %1477

1481:                                             ; preds = %1477
  br i1 %1474, label %1892, label %1482

1482:                                             ; preds = %1481
  %1483 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  %1484 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 2
  br label %1485

1485:                                             ; preds = %1485, %1482
  %1486 = phi i64 [ 0, %1482 ], [ %1501, %1485 ]
  %1487 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %1488 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1487, i64 %1486
  %1489 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1488) #18
  %1490 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1483, align 8
  %1491 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1490, i64 %1486
  %1492 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1491) #18
  %1493 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1484, align 8
  %1494 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1493, i64 %1486
  %1495 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1494) #18
  %1496 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1473, i64 %1486
  %1497 = fmul float %1489, %1492
  %1498 = fadd float %1497, %1495
  %1499 = bitcast %"class.sh::TConstantUnion"* %1496 to float*
  store float %1498, float* %1499, align 4
  %1500 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1473, i64 %1486, i32 1
  store i32 1, i32* %1500, align 4
  %1501 = add nuw i64 %1486, 1
  %1502 = icmp eq i64 %1501, %59
  br i1 %1502, label %1892, label %1485

1503:                                             ; preds = %240
  %1504 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %1505 = extractvalue { i64, i1 } %1504, 1
  %1506 = extractvalue { i64, i1 } %1504, 0
  %1507 = select i1 %1505, i64 -1, i64 %1506
  %1508 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %1509 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1508, i64 %1507) #18
  %1510 = bitcast i8* %1509 to %"class.sh::TConstantUnion"*
  %1511 = icmp eq i64 %59, 0
  br i1 %1511, label %1892, label %1512

1512:                                             ; preds = %1503
  %1513 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1510, i64 %59
  br label %1514

1514:                                             ; preds = %1514, %1512
  %1515 = phi %"class.sh::TConstantUnion"* [ %1510, %1512 ], [ %1516, %1514 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1515) #18
  %1516 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1515, i64 1
  %1517 = icmp eq %"class.sh::TConstantUnion"* %1516, %1513
  br i1 %1517, label %1518, label %1514

1518:                                             ; preds = %1514
  br i1 %1511, label %1892, label %1519

1519:                                             ; preds = %1518
  %1520 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  br label %1521

1521:                                             ; preds = %1554, %1519
  %1522 = phi i64 [ 0, %1519 ], [ %1555, %1554 ]
  %1523 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %1524 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1523, i64 %1522
  %1525 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1524) #18
  %1526 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1520, align 8
  %1527 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1526, i64 %1522
  %1528 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1527) #18
  %1529 = icmp sgt i32 %1528, 128
  %1530 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1510, i64 %1522
  br i1 %1529, label %1531, label %1541

1531:                                             ; preds = %1521
  %1532 = call i8* @_Z17GetOperatorString9TOperator(i8 zeroext 93) #18
  call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %1532) #18
  switch i32 %58, label %1554 [
    i32 1, label %1533
    i32 3, label %1535
    i32 4, label %1537
    i32 5, label %1539
  ]

1533:                                             ; preds = %1531
  %1534 = bitcast %"class.sh::TConstantUnion"* %1530 to float*
  store float 0.000000e+00, float* %1534, align 4
  br label %1551

1535:                                             ; preds = %1531
  %1536 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1530, i64 0, i32 0, i32 0
  store i32 0, i32* %1536, align 4
  br label %1551

1537:                                             ; preds = %1531
  %1538 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1530, i64 0, i32 0, i32 0
  store i32 0, i32* %1538, align 4
  br label %1551

1539:                                             ; preds = %1531
  %1540 = bitcast %"class.sh::TConstantUnion"* %1530 to i8*
  store i8 0, i8* %1540, align 4
  br label %1551

1541:                                             ; preds = %1521
  %1542 = icmp slt i32 %1528, -126
  br i1 %1542, label %1548, label %1543

1543:                                             ; preds = %1541
  %1544 = fpext float %1525 to double
  %1545 = call double @ldexp(double 1.000000e+00, i32 %1528) #18
  %1546 = fmul double %1545, %1544
  %1547 = fptrunc double %1546 to float
  br label %1548

1548:                                             ; preds = %1541, %1543
  %1549 = phi float [ %1547, %1543 ], [ 0.000000e+00, %1541 ]
  %1550 = bitcast %"class.sh::TConstantUnion"* %1530 to float*
  store float %1549, float* %1550, align 4
  br label %1551

1551:                                             ; preds = %1548, %1533, %1535, %1537, %1539
  %1552 = phi i32 [ 5, %1539 ], [ 4, %1537 ], [ 3, %1535 ], [ 1, %1533 ], [ 1, %1548 ]
  %1553 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1510, i64 %1522, i32 1
  store i32 %1552, i32* %1553, align 4
  br label %1554

1554:                                             ; preds = %1551, %1531
  %1555 = add nuw i64 %1522, 1
  %1556 = icmp eq i64 %1555, %59
  br i1 %1556, label %1892, label %1521

1557:                                             ; preds = %240
  %1558 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %1559 = extractvalue { i64, i1 } %1558, 1
  %1560 = extractvalue { i64, i1 } %1558, 0
  %1561 = select i1 %1559, i64 -1, i64 %1560
  %1562 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %1563 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1562, i64 %1561) #18
  %1564 = bitcast i8* %1563 to %"class.sh::TConstantUnion"*
  %1565 = icmp eq i64 %59, 0
  br i1 %1565, label %1892, label %1566

1566:                                             ; preds = %1557
  %1567 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1564, i64 %59
  br label %1568

1568:                                             ; preds = %1568, %1566
  %1569 = phi %"class.sh::TConstantUnion"* [ %1564, %1566 ], [ %1570, %1568 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1569) #18
  %1570 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1569, i64 1
  %1571 = icmp eq %"class.sh::TConstantUnion"* %1570, %1567
  br i1 %1571, label %1572, label %1568

1572:                                             ; preds = %1568
  %1573 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 2
  %1574 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1573, align 8
  %1575 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  %1576 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1575, align 8
  br label %1577

1577:                                             ; preds = %1572, %1577
  %1578 = phi i64 [ %1586, %1577 ], [ 0, %1572 ]
  %1579 = phi float [ %1585, %1577 ], [ 0.000000e+00, %1572 ]
  %1580 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1574, i64 %1578
  %1581 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1580) #18
  %1582 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1576, i64 %1578
  %1583 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1582) #18
  %1584 = fmul float %1581, %1583
  %1585 = fadd float %1579, %1584
  %1586 = add nuw i64 %1578, 1
  %1587 = icmp eq i64 %1586, %59
  br i1 %1587, label %1588, label %1577

1588:                                             ; preds = %1577
  br i1 %1565, label %1892, label %1589

1589:                                             ; preds = %1588
  %1590 = fcmp olt float %1585, 0.000000e+00
  br label %1591

1591:                                             ; preds = %1591, %1589
  %1592 = phi i64 [ 0, %1589 ], [ %1601, %1591 ]
  %1593 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1564, i64 %1592
  %1594 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %1595 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1594, i64 %1592
  %1596 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1595) #18
  %1597 = fsub float -0.000000e+00, %1596
  %1598 = select i1 %1590, float %1596, float %1597
  %1599 = bitcast %"class.sh::TConstantUnion"* %1593 to float*
  store float %1598, float* %1599, align 4
  %1600 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1564, i64 %1592, i32 1
  store i32 1, i32* %1600, align 4
  %1601 = add nuw i64 %1592, 1
  %1602 = icmp eq i64 %1601, %59
  br i1 %1602, label %1892, label %1591

1603:                                             ; preds = %240
  %1604 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %1605 = extractvalue { i64, i1 } %1604, 1
  %1606 = extractvalue { i64, i1 } %1604, 0
  %1607 = select i1 %1605, i64 -1, i64 %1606
  %1608 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %1609 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1608, i64 %1607) #18
  %1610 = bitcast i8* %1609 to %"class.sh::TConstantUnion"*
  %1611 = icmp eq i64 %59, 0
  br i1 %1611, label %1892, label %1612

1612:                                             ; preds = %1603
  %1613 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1610, i64 %59
  br label %1614

1614:                                             ; preds = %1614, %1612
  %1615 = phi %"class.sh::TConstantUnion"* [ %1610, %1612 ], [ %1616, %1614 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1615) #18
  %1616 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1615, i64 1
  %1617 = icmp eq %"class.sh::TConstantUnion"* %1616, %1613
  br i1 %1617, label %1618, label %1614

1618:                                             ; preds = %1614
  %1619 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  %1620 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1619, align 8
  %1621 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  br label %1622

1622:                                             ; preds = %1618, %1622
  %1623 = phi i64 [ %1631, %1622 ], [ 0, %1618 ]
  %1624 = phi float [ %1630, %1622 ], [ 0.000000e+00, %1618 ]
  %1625 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1620, i64 %1623
  %1626 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1625) #18
  %1627 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1621, i64 %1623
  %1628 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1627) #18
  %1629 = fmul float %1626, %1628
  %1630 = fadd float %1624, %1629
  %1631 = add nuw i64 %1623, 1
  %1632 = icmp eq i64 %1631, %59
  br i1 %1632, label %1633, label %1622

1633:                                             ; preds = %1622
  br i1 %1611, label %1892, label %1634

1634:                                             ; preds = %1633
  %1635 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 2
  %1636 = fmul float %1630, %1630
  %1637 = fsub float 1.000000e+00, %1636
  br label %1638

1638:                                             ; preds = %1661, %1634
  %1639 = phi i64 [ 0, %1634 ], [ %1665, %1661 ]
  %1640 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1635, align 8
  %1641 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1640, i64 %1639
  %1642 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1641) #18
  %1643 = fmul float %1642, %1642
  %1644 = fmul float %1637, %1643
  %1645 = fsub float 1.000000e+00, %1644
  %1646 = fcmp olt float %1645, 0.000000e+00
  %1647 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1610, i64 %1639
  br i1 %1646, label %1661, label %1648

1648:                                             ; preds = %1638
  %1649 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %1650 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1649, i64 %1639
  %1651 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1650) #18
  %1652 = fmul float %1642, %1651
  %1653 = fmul float %1630, %1642
  %1654 = tail call float @sqrtf(float %1645) #18
  %1655 = fadd float %1653, %1654
  %1656 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1619, align 8
  %1657 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1656, i64 %1639
  %1658 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1657) #18
  %1659 = fmul float %1655, %1658
  %1660 = fsub float %1652, %1659
  br label %1661

1661:                                             ; preds = %1638, %1648
  %1662 = phi float [ %1660, %1648 ], [ 0.000000e+00, %1638 ]
  %1663 = bitcast %"class.sh::TConstantUnion"* %1647 to float*
  store float %1662, float* %1663, align 4
  %1664 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1610, i64 %1639, i32 1
  store i32 1, i32* %1664, align 4
  %1665 = add nuw i64 %1639, 1
  %1666 = icmp eq i64 %1665, %59
  br i1 %1666, label %1892, label %1638

1667:                                             ; preds = %240
  %1668 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %1669 = extractvalue { i64, i1 } %1668, 1
  %1670 = extractvalue { i64, i1 } %1668, 0
  %1671 = select i1 %1669, i64 -1, i64 %1670
  %1672 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %1673 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1672, i64 %1671) #18
  %1674 = bitcast i8* %1673 to %"class.sh::TConstantUnion"*
  %1675 = icmp eq i64 %59, 0
  br i1 %1675, label %1892, label %1676

1676:                                             ; preds = %1667
  %1677 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1674, i64 %59
  br label %1678

1678:                                             ; preds = %1678, %1676
  %1679 = phi %"class.sh::TConstantUnion"* [ %1674, %1676 ], [ %1680, %1678 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1679) #18
  %1680 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1679, i64 1
  %1681 = icmp eq %"class.sh::TConstantUnion"* %1680, %1677
  br i1 %1681, label %1682, label %1678

1682:                                             ; preds = %1678
  br i1 %1675, label %1892, label %1683

1683:                                             ; preds = %1682
  %1684 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  %1685 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 2
  %1686 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  %1687 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  br label %1688

1688:                                             ; preds = %1775, %1683
  %1689 = phi i64 [ 0, %1683 ], [ %1776, %1775 ]
  %1690 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1684, align 8
  %1691 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1690) #18
  %1692 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1685, align 8
  %1693 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1692) #18
  %1694 = icmp eq i32 %1693, 0
  br i1 %1694, label %1695, label %1707

1695:                                             ; preds = %1688
  %1696 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1687, align 8
  %1697 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1696, i64 31
  %1698 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1697, align 8
  %1699 = call dereferenceable(184) %"class.sh::TType"* %1698(%"class.sh::TIntermTyped"* %1686) #18
  %1700 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1699, i64 0, i32 0
  %1701 = load i32, i32* %1700, align 8
  %1702 = icmp eq i32 %1701, 3
  %1703 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1674, i64 %1689, i32 0, i32 0
  store i32 0, i32* %1703, align 4
  %1704 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1674, i64 %1689, i32 1
  br i1 %1702, label %1705, label %1706

1705:                                             ; preds = %1695
  store i32 3, i32* %1704, align 4
  br label %1775

1706:                                             ; preds = %1695
  store i32 4, i32* %1704, align 4
  br label %1775

1707:                                             ; preds = %1688
  %1708 = or i32 %1693, %1691
  %1709 = icmp slt i32 %1708, 0
  %1710 = icmp sgt i32 %1691, 31
  %1711 = or i1 %1710, %1709
  %1712 = icmp sgt i32 %1693, 32
  %1713 = or i1 %1712, %1711
  %1714 = add nsw i32 %1693, %1691
  %1715 = icmp sgt i32 %1714, 32
  %1716 = or i1 %1715, %1713
  br i1 %1716, label %1717, label %1738

1717:                                             ; preds = %1707
  %1718 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1687, align 8
  %1719 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1718, i64 31
  %1720 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1719, align 8
  %1721 = call dereferenceable(184) %"class.sh::TType"* %1720(%"class.sh::TIntermTyped"* %1686) #18
  %1722 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1721, i64 0, i32 0
  %1723 = load i32, i32* %1722, align 8
  %1724 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1674, i64 %1689
  %1725 = call i8* @_Z17GetOperatorString9TOperator(i8 zeroext 123) #18
  call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %1725) #18
  switch i32 %1723, label %1775 [
    i32 1, label %1726
    i32 3, label %1729
    i32 4, label %1732
    i32 5, label %1735
  ]

1726:                                             ; preds = %1717
  %1727 = bitcast %"class.sh::TConstantUnion"* %1724 to float*
  store float 0.000000e+00, float* %1727, align 4
  %1728 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1674, i64 %1689, i32 1
  store i32 1, i32* %1728, align 4
  br label %1775

1729:                                             ; preds = %1717
  %1730 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1724, i64 0, i32 0, i32 0
  store i32 0, i32* %1730, align 4
  %1731 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1674, i64 %1689, i32 1
  store i32 3, i32* %1731, align 4
  br label %1775

1732:                                             ; preds = %1717
  %1733 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1724, i64 0, i32 0, i32 0
  store i32 0, i32* %1733, align 4
  %1734 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1674, i64 %1689, i32 1
  store i32 4, i32* %1734, align 4
  br label %1775

1735:                                             ; preds = %1717
  %1736 = bitcast %"class.sh::TConstantUnion"* %1724 to i8*
  store i8 0, i8* %1736, align 4
  %1737 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1674, i64 %1689, i32 1
  store i32 5, i32* %1737, align 4
  br label %1775

1738:                                             ; preds = %1707
  %1739 = add nsw i32 %1693, -1
  %1740 = shl i32 1, %1739
  %1741 = add i32 %1740, -1
  %1742 = or i32 %1741, %1740
  %1743 = shl i32 %1742, %1691
  %1744 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1687, align 8
  %1745 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1744, i64 31
  %1746 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1745, align 8
  %1747 = call dereferenceable(184) %"class.sh::TType"* %1746(%"class.sh::TIntermTyped"* %1686) #18
  %1748 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1747, i64 0, i32 0
  %1749 = load i32, i32* %1748, align 8
  %1750 = icmp eq i32 %1749, 3
  %1751 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %1752 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1751, i64 %1689
  br i1 %1750, label %1753, label %1769

1753:                                             ; preds = %1738
  %1754 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1752) #18
  %1755 = and i32 %1754, %1743
  %1756 = lshr i32 %1755, %1691
  %1757 = and i32 %1756, %1740
  %1758 = icmp eq i32 %1757, 0
  br i1 %1758, label %1765, label %1759

1759:                                             ; preds = %1753
  %1760 = sub nsw i32 32, %1693
  %1761 = shl nsw i32 -1, %1760
  %1762 = xor i32 %1761, -1
  %1763 = shl i32 %1762, %1693
  %1764 = or i32 %1756, %1763
  br label %1765

1765:                                             ; preds = %1753, %1759
  %1766 = phi i32 [ %1764, %1759 ], [ %1756, %1753 ]
  %1767 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1674, i64 %1689, i32 0, i32 0
  store i32 %1766, i32* %1767, align 4
  %1768 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1674, i64 %1689, i32 1
  store i32 3, i32* %1768, align 4
  br label %1775

1769:                                             ; preds = %1738
  %1770 = call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %1752) #18
  %1771 = and i32 %1770, %1743
  %1772 = lshr i32 %1771, %1691
  %1773 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1674, i64 %1689, i32 0, i32 0
  store i32 %1772, i32* %1773, align 4
  %1774 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1674, i64 %1689, i32 1
  store i32 4, i32* %1774, align 4
  br label %1775

1775:                                             ; preds = %1735, %1732, %1729, %1726, %1717, %1765, %1769, %1705, %1706
  %1776 = add nuw i64 %1689, 1
  %1777 = icmp eq i64 %1776, %59
  br i1 %1777, label %1892, label %1688

1778:                                             ; preds = %240
  %1779 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %59, i64 8)
  %1780 = extractvalue { i64, i1 } %1779, 1
  %1781 = extractvalue { i64, i1 } %1779, 0
  %1782 = select i1 %1780, i64 -1, i64 %1781
  %1783 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %1784 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1783, i64 %1782) #18
  %1785 = bitcast i8* %1784 to %"class.sh::TConstantUnion"*
  %1786 = icmp eq i64 %59, 0
  br i1 %1786, label %1892, label %1787

1787:                                             ; preds = %1778
  %1788 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1785, i64 %59
  br label %1789

1789:                                             ; preds = %1789, %1787
  %1790 = phi %"class.sh::TConstantUnion"* [ %1785, %1787 ], [ %1791, %1789 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1790) #18
  %1791 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1790, i64 1
  %1792 = icmp eq %"class.sh::TConstantUnion"* %1791, %1788
  br i1 %1792, label %1793, label %1789

1793:                                             ; preds = %1789
  br i1 %1786, label %1892, label %1794

1794:                                             ; preds = %1793
  %1795 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 2
  %1796 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 3
  %1797 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  %1798 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %1799 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, i64 1
  br label %1800

1800:                                             ; preds = %1889, %1794
  %1801 = phi i64 [ 0, %1794 ], [ %1890, %1889 ]
  %1802 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1795, align 8
  %1803 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1802) #18
  %1804 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1796, align 8
  %1805 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1804) #18
  %1806 = icmp eq i32 %1805, 0
  br i1 %1806, label %1807, label %1823

1807:                                             ; preds = %1800
  %1808 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1798, align 8
  %1809 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1808, i64 31
  %1810 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1809, align 8
  %1811 = call dereferenceable(184) %"class.sh::TType"* %1810(%"class.sh::TIntermTyped"* %1797) #18
  %1812 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1811, i64 0, i32 0
  %1813 = load i32, i32* %1812, align 8
  %1814 = icmp eq i32 %1813, 3
  %1815 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %1816 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1815, i64 %1801
  br i1 %1814, label %1817, label %1820

1817:                                             ; preds = %1807
  %1818 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1816) #18
  %1819 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1785, i64 %1801, i32 0, i32 0
  store i32 %1818, i32* %1819, align 4
  br label %1886

1820:                                             ; preds = %1807
  %1821 = call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %1816) #18
  %1822 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1785, i64 %1801, i32 0, i32 0
  store i32 %1821, i32* %1822, align 4
  br label %1886

1823:                                             ; preds = %1800
  %1824 = or i32 %1805, %1803
  %1825 = icmp slt i32 %1824, 0
  %1826 = icmp sgt i32 %1803, 31
  %1827 = or i1 %1826, %1825
  %1828 = icmp sgt i32 %1805, 32
  %1829 = or i1 %1828, %1827
  %1830 = add nsw i32 %1805, %1803
  %1831 = icmp sgt i32 %1830, 32
  %1832 = or i1 %1831, %1829
  br i1 %1832, label %1833, label %1850

1833:                                             ; preds = %1823
  %1834 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1798, align 8
  %1835 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1834, i64 31
  %1836 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1835, align 8
  %1837 = call dereferenceable(184) %"class.sh::TType"* %1836(%"class.sh::TIntermTyped"* %1797) #18
  %1838 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1837, i64 0, i32 0
  %1839 = load i32, i32* %1838, align 8
  %1840 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1785, i64 %1801
  %1841 = call i8* @_Z17GetOperatorString9TOperator(i8 zeroext 124) #18
  call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %1841) #18
  switch i32 %1839, label %1889 [
    i32 1, label %1842
    i32 3, label %1844
    i32 4, label %1846
    i32 5, label %1848
  ]

1842:                                             ; preds = %1833
  %1843 = bitcast %"class.sh::TConstantUnion"* %1840 to float*
  store float 0.000000e+00, float* %1843, align 4
  br label %1886

1844:                                             ; preds = %1833
  %1845 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1840, i64 0, i32 0, i32 0
  store i32 0, i32* %1845, align 4
  br label %1886

1846:                                             ; preds = %1833
  %1847 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1840, i64 0, i32 0, i32 0
  store i32 0, i32* %1847, align 4
  br label %1886

1848:                                             ; preds = %1833
  %1849 = bitcast %"class.sh::TConstantUnion"* %1840 to i8*
  store i8 0, i8* %1849, align 4
  br label %1886

1850:                                             ; preds = %1823
  %1851 = add nsw i32 %1805, -1
  %1852 = shl i32 1, %1851
  %1853 = add i32 %1852, -1
  %1854 = or i32 %1853, %1852
  %1855 = shl i32 %1854, %1803
  %1856 = xor i32 %1855, -1
  %1857 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1798, align 8
  %1858 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1857, i64 31
  %1859 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1858, align 8
  %1860 = call dereferenceable(184) %"class.sh::TType"* %1859(%"class.sh::TIntermTyped"* %1797) #18
  %1861 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1860, i64 0, i32 0
  %1862 = load i32, i32* %1861, align 8
  %1863 = icmp eq i32 %1862, 3
  %1864 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %48, align 8
  %1865 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1864, i64 %1801
  br i1 %1863, label %1866, label %1876

1866:                                             ; preds = %1850
  %1867 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1865) #18
  %1868 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1799, align 8
  %1869 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1868, i64 %1801
  %1870 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1869) #18
  %1871 = and i32 %1867, %1856
  %1872 = shl i32 %1870, %1803
  %1873 = and i32 %1872, %1855
  %1874 = or i32 %1873, %1871
  %1875 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1785, i64 %1801, i32 0, i32 0
  store i32 %1874, i32* %1875, align 4
  br label %1886

1876:                                             ; preds = %1850
  %1877 = call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %1865) #18
  %1878 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1799, align 8
  %1879 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1878, i64 %1801
  %1880 = call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %1879) #18
  %1881 = and i32 %1877, %1856
  %1882 = shl i32 %1880, %1803
  %1883 = and i32 %1882, %1855
  %1884 = or i32 %1883, %1881
  %1885 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1785, i64 %1801, i32 0, i32 0
  store i32 %1884, i32* %1885, align 4
  br label %1886

1886:                                             ; preds = %1820, %1817, %1876, %1866, %1842, %1844, %1846, %1848
  %1887 = phi i32 [ 5, %1848 ], [ 4, %1846 ], [ 3, %1844 ], [ 1, %1842 ], [ 3, %1866 ], [ 4, %1876 ], [ 3, %1817 ], [ 4, %1820 ]
  %1888 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1785, i64 %1801, i32 1
  store i32 %1887, i32* %1888, align 4
  br label %1889

1889:                                             ; preds = %1886, %1833
  %1890 = add nuw i64 %1801, 1
  %1891 = icmp eq i64 %1890, %59
  br i1 %1891, label %1892, label %1800

1892:                                             ; preds = %1889, %1775, %1661, %1591, %1554, %1485, %1463, %1401, %1299, %1035, %872, %811, %749, %696, %643, %590, %525, %504, %447, %376, %355, %287, %1778, %1667, %1603, %1557, %1503, %1466, %1404, %1302, %1212, %1003, %814, %752, %699, %646, %593, %540, %507, %450, %393, %358, %290, %241, %256, %305, %373, %408, %465, %522, %555, %608, %661, %714, %767, %829, %1033, %1227, %1317, %1419, %1481, %1518, %1588, %1633, %1682, %1793, %906, %945, %965, %1131, %1211, %240
  %1893 = phi %"class.sh::TConstantUnion"* [ null, %240 ], [ %1167, %1211 ], [ %1057, %1131 ], [ %957, %965 ], [ %929, %945 ], [ %893, %906 ], [ %248, %256 ], [ %297, %305 ], [ %365, %373 ], [ %400, %408 ], [ %457, %465 ], [ %514, %522 ], [ %547, %555 ], [ %600, %608 ], [ %653, %661 ], [ %706, %714 ], [ %759, %767 ], [ %821, %829 ], [ %1010, %1033 ], [ %1219, %1227 ], [ %1309, %1317 ], [ %1411, %1419 ], [ %1473, %1481 ], [ %1510, %1518 ], [ %1564, %1588 ], [ %1610, %1633 ], [ %1674, %1682 ], [ %1785, %1793 ], [ %248, %241 ], [ %297, %290 ], [ %365, %358 ], [ %400, %393 ], [ %457, %450 ], [ %514, %507 ], [ %547, %540 ], [ %600, %593 ], [ %653, %646 ], [ %706, %699 ], [ %759, %752 ], [ %821, %814 ], [ %1010, %1003 ], [ %1219, %1212 ], [ %1309, %1302 ], [ %1411, %1404 ], [ %1473, %1466 ], [ %1510, %1503 ], [ %1564, %1557 ], [ %1610, %1603 ], [ %1674, %1667 ], [ %1785, %1778 ], [ %248, %287 ], [ %297, %355 ], [ %365, %376 ], [ %400, %447 ], [ %457, %504 ], [ %514, %525 ], [ %547, %590 ], [ %600, %643 ], [ %653, %696 ], [ %706, %749 ], [ %759, %811 ], [ %821, %872 ], [ %1010, %1035 ], [ %1219, %1299 ], [ %1309, %1401 ], [ %1411, %1463 ], [ %1473, %1485 ], [ %1510, %1554 ], [ %1564, %1591 ], [ %1610, %1661 ], [ %1674, %1775 ], [ %1785, %1889 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %51) #18
  %1894 = icmp eq i64* %50, null
  br i1 %1894, label %1896, label %1895

1895:                                             ; preds = %1892
  call void @_ZdlPv(i8* %49) #21
  br label %1896

1896:                                             ; preds = %1892, %1895
  %1897 = icmp eq %"class.sh::TConstantUnion"** %48, null
  br i1 %1897, label %1899, label %1898

1898:                                             ; preds = %1896
  call void @_ZdlPv(i8* %47) #21
  br label %1899

1899:                                             ; preds = %1896, %1898
  ret %"class.sh::TConstantUnion"* %1893
}

declare i64 @_ZN2sh14TConstantUnion3addERKS0_S2_PNS_12TDiagnosticsERKNS_10TSourceLocE(%"class.sh::TConstantUnion"* dereferenceable(8), %"class.sh::TConstantUnion"* dereferenceable(8), %"class.sh::TDiagnostics"*, %"struct.sh::TSourceLoc"* dereferenceable(16)) local_unnamed_addr #1

declare i64 @_ZN2sh14TConstantUnion3subERKS0_S2_PNS_12TDiagnosticsERKNS_10TSourceLocE(%"class.sh::TConstantUnion"* dereferenceable(8), %"class.sh::TConstantUnion"* dereferenceable(8), %"class.sh::TDiagnostics"*, %"struct.sh::TSourceLoc"* dereferenceable(16)) local_unnamed_addr #1

declare i64 @_ZN2sh14TConstantUnion3mulERKS0_S2_PNS_12TDiagnosticsERKNS_10TSourceLocE(%"class.sh::TConstantUnion"* dereferenceable(8), %"class.sh::TConstantUnion"* dereferenceable(8), %"class.sh::TDiagnostics"*, %"struct.sh::TSourceLoc"* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh20TIntermConstantUnion15IsFloatDivisionENS_10TBasicTypeES1_(i32, i32) local_unnamed_addr #0 align 2 {
  %3 = tail call i32 @_ZN2sh13GetConversionENS_10TBasicTypeES0_(i32 %0, i32 %1) #18
  %4 = icmp ne i32 %3, 0
  %5 = icmp eq i32 %0, 1
  %6 = or i1 %5, %4
  ret i1 %6
}

declare zeroext i1 @_ZNK2sh14TConstantUnioneqEi(%"class.sh::TConstantUnion"*, i32) local_unnamed_addr #1

declare i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"*) local_unnamed_addr #1

declare i64 @_ZNK2sh14TConstantUnionaaERKS0_(%"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"* dereferenceable(8)) local_unnamed_addr #1

declare i64 @_ZNK2sh14TConstantUnionooERKS0_(%"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"* dereferenceable(8)) local_unnamed_addr #1

declare zeroext i1 @_ZNK2sh14TConstantUnionneERKS0_(%"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"* dereferenceable(8)) local_unnamed_addr #1

declare i64 @_ZNK2sh14TConstantUnionanERKS0_(%"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"* dereferenceable(8)) local_unnamed_addr #1

declare i64 @_ZNK2sh14TConstantUnioneoERKS0_(%"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"* dereferenceable(8)) local_unnamed_addr #1

declare i64 @_ZNK2sh14TConstantUnionorERKS0_(%"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"* dereferenceable(8)) local_unnamed_addr #1

declare i64 @_ZN2sh14TConstantUnion6lshiftERKS0_S2_PNS_12TDiagnosticsERKNS_10TSourceLocE(%"class.sh::TConstantUnion"* dereferenceable(8), %"class.sh::TConstantUnion"* dereferenceable(8), %"class.sh::TDiagnostics"*, %"struct.sh::TSourceLoc"* dereferenceable(16)) local_unnamed_addr #1

declare i64 @_ZN2sh14TConstantUnion6rshiftERKS0_S2_PNS_12TDiagnosticsERKNS_10TSourceLocE(%"class.sh::TConstantUnion"* dereferenceable(8), %"class.sh::TConstantUnion"* dereferenceable(8), %"class.sh::TDiagnostics"*, %"struct.sh::TSourceLoc"* dereferenceable(16)) local_unnamed_addr #1

declare zeroext i1 @_ZNK2sh14TConstantUnionltERKS0_(%"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"* dereferenceable(8)) local_unnamed_addr #1

declare zeroext i1 @_ZNK2sh14TConstantUniongtERKS0_(%"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"* dereferenceable(8)) local_unnamed_addr #1

declare zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_19GetMatrixEPKNS_14TConstantUnionEjj(%"class.angle::Matrix"* noalias sret, %"class.sh::TConstantUnion"*, i32, i32) unnamed_addr #0 {
  %5 = alloca %"class.std::__1::vector.41", align 8
  %6 = alloca %"class.angle::Matrix", align 8
  %7 = bitcast %"class.std::__1::vector.41"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #18
  %8 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %5, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %5, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 24, i1 false) #18
  %11 = mul i32 %3, %2
  %12 = zext i32 %11 to i64
  %13 = icmp eq i32 %11, 0
  %14 = bitcast float** %9 to i64*
  br i1 %13, label %21, label %15

15:                                               ; preds = %4
  %16 = bitcast %"class.std::__1::vector.41"* %5 to i64*
  %17 = bitcast float** %10 to i64*
  br label %71

18:                                               ; preds = %130
  %19 = load i64, i64* %16, align 8
  %20 = inttoptr i64 %19 to float*
  br label %21

21:                                               ; preds = %4, %18
  %22 = phi float* [ %20, %18 ], [ null, %4 ]
  %23 = phi i64 [ %19, %18 ], [ 0, %4 ]
  %24 = phi i64 [ %131, %18 ], [ 0, %4 ]
  %25 = bitcast %"class.angle::Matrix"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 0, i64 24, i1 false) #18
  %26 = sub i64 %24, %23
  %27 = ashr exact i64 %26, 2
  %28 = icmp eq i64 %26, 0
  br i1 %28, label %53, label %29

29:                                               ; preds = %21
  %30 = icmp ugt i64 %27, 4611686018427387903
  br i1 %30, label %31, label %33

31:                                               ; preds = %29
  %32 = bitcast %"class.angle::Matrix"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %32) #19
  unreachable

33:                                               ; preds = %29
  %34 = tail call i8* @_Znwm(i64 %26) #21
  %35 = bitcast i8* %34 to float*
  %36 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 1
  %37 = bitcast float** %36 to i8**
  store i8* %34, i8** %37, align 8
  %38 = bitcast %"class.angle::Matrix"* %6 to i8**
  store i8* %34, i8** %38, align 8
  %39 = getelementptr inbounds float, float* %35, i64 %27
  %40 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store float* %39, float** %40, align 8
  %41 = bitcast float** %36 to i64*
  %42 = ptrtoint i8* %34 to i64
  %43 = ptrtoint float* %22 to i64
  %44 = sub i64 %24, %43
  %45 = icmp sgt i64 %44, 0
  br i1 %45, label %46, label %51

46:                                               ; preds = %33
  %47 = lshr exact i64 %44, 2
  %48 = bitcast float* %22 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %34, i8* align 4 %48, i64 %44, i1 false) #18
  %49 = getelementptr inbounds float, float* %35, i64 %47
  %50 = ptrtoint float* %49 to i64
  br label %51

51:                                               ; preds = %46, %33
  %52 = phi i64 [ %50, %46 ], [ %42, %33 ]
  store i64 %52, i64* %41, align 8
  br label %53

53:                                               ; preds = %21, %51
  %54 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 1
  store i32 %3, i32* %54, align 8
  %55 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 2
  store i32 %2, i32* %55, align 4
  call void @_ZNK5angle6MatrixIfE9transposeEv(%"class.angle::Matrix"* sret %0, %"class.angle::Matrix"* nonnull %6)
  %56 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 0
  %57 = load float*, float** %56, align 8
  %58 = icmp eq float* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %53
  %60 = ptrtoint float* %57 to i64
  %61 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 1
  %62 = bitcast float** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = bitcast float* %57 to i8*
  call void @_ZdlPv(i8* %63) #21
  br label %64

64:                                               ; preds = %53, %59
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #18
  %65 = load float*, float** %8, align 8
  %66 = icmp eq float* %65, null
  br i1 %66, label %70, label %67

67:                                               ; preds = %64
  %68 = ptrtoint float* %65 to i64
  store i64 %68, i64* %14, align 8
  %69 = bitcast float* %65 to i8*
  call void @_ZdlPv(i8* %69) #21
  br label %70

70:                                               ; preds = %64, %67
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #18
  ret void

71:                                               ; preds = %135, %15
  %72 = phi i64 [ 0, %15 ], [ %131, %135 ]
  %73 = phi float* [ null, %15 ], [ %136, %135 ]
  %74 = phi float* [ null, %15 ], [ %132, %135 ]
  %75 = phi i64 [ 0, %15 ], [ %133, %135 ]
  %76 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1, i64 %75
  %77 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %76) #18
  %78 = icmp ult float* %74, %73
  %79 = ptrtoint float* %73 to i64
  br i1 %78, label %80, label %83

80:                                               ; preds = %71
  store float %77, float* %74, align 4
  %81 = getelementptr inbounds float, float* %74, i64 1
  %82 = ptrtoint float* %81 to i64
  store i64 %82, i64* %14, align 8
  br label %130

83:                                               ; preds = %71
  %84 = ptrtoint float* %74 to i64
  %85 = load i64, i64* %16, align 8
  %86 = sub i64 %84, %85
  %87 = ashr exact i64 %86, 2
  %88 = add nsw i64 %87, 1
  %89 = icmp ugt i64 %88, 4611686018427387903
  br i1 %89, label %90, label %92

90:                                               ; preds = %83
  %91 = bitcast %"class.std::__1::vector.41"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %91) #19
  unreachable

92:                                               ; preds = %83
  %93 = sub i64 %79, %85
  %94 = ashr exact i64 %93, 2
  %95 = icmp ult i64 %94, 2305843009213693951
  br i1 %95, label %96, label %104

96:                                               ; preds = %92
  %97 = ashr exact i64 %93, 1
  %98 = icmp ult i64 %97, %88
  %99 = select i1 %98, i64 %88, i64 %97
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %109, label %101

101:                                              ; preds = %96
  %102 = icmp ugt i64 %99, 4611686018427387903
  br i1 %102, label %103, label %104

103:                                              ; preds = %101
  tail call void @abort() #19
  unreachable

104:                                              ; preds = %101, %92
  %105 = phi i64 [ %99, %101 ], [ 4611686018427387903, %92 ]
  %106 = shl i64 %105, 2
  %107 = tail call i8* @_Znwm(i64 %106) #21
  %108 = bitcast i8* %107 to float*
  br label %109

109:                                              ; preds = %104, %96
  %110 = phi i64 [ %105, %104 ], [ 0, %96 ]
  %111 = phi float* [ %108, %104 ], [ null, %96 ]
  %112 = getelementptr inbounds float, float* %111, i64 %87
  %113 = getelementptr inbounds float, float* %111, i64 %110
  %114 = ptrtoint float* %113 to i64
  store float %77, float* %112, align 4
  %115 = getelementptr inbounds float, float* %112, i64 1
  %116 = ptrtoint float* %115 to i64
  %117 = sub i64 %72, %85
  %118 = ashr exact i64 %117, 2
  %119 = sub nsw i64 0, %118
  %120 = getelementptr inbounds float, float* %112, i64 %119
  %121 = ptrtoint float* %120 to i64
  %122 = icmp sgt i64 %117, 0
  br i1 %122, label %123, label %126

123:                                              ; preds = %109
  %124 = bitcast float* %120 to i8*
  %125 = inttoptr i64 %85 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %124, i8* align 4 %125, i64 %117, i1 false) #18
  br label %126

126:                                              ; preds = %123, %109
  store i64 %121, i64* %16, align 8
  store i64 %116, i64* %14, align 8
  store i64 %114, i64* %17, align 8
  %127 = icmp eq i64 %85, 0
  br i1 %127, label %130, label %128

128:                                              ; preds = %126
  %129 = inttoptr i64 %85 to i8*
  tail call void @_ZdlPv(i8* %129) #21
  br label %130

130:                                              ; preds = %80, %126, %128
  %131 = phi i64 [ %82, %80 ], [ %116, %126 ], [ %116, %128 ]
  %132 = phi float* [ %81, %80 ], [ %115, %126 ], [ %115, %128 ]
  %133 = add nuw nsw i64 %75, 1
  %134 = icmp eq i64 %133, %12
  br i1 %134, label %18, label %135

135:                                              ; preds = %130
  %136 = load float*, float** %10, align 8
  br label %71
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5angle6MatrixIfE9transposeEv(%"class.angle::Matrix"* noalias sret, %"class.angle::Matrix"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.std::__1::vector.41", align 8
  %4 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %7 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 2
  %9 = bitcast %"class.std::__1::vector.41"* %3 to i8*
  %10 = bitcast %"class.angle::Matrix"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #18
  %11 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 0, i32 0, i32 1
  %12 = bitcast float** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.angle::Matrix"* %1 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %13, %15
  %17 = ashr exact i64 %16, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 24, i1 false) #18
  %18 = icmp eq i64 %16, 0
  br i1 %18, label %40, label %19

19:                                               ; preds = %2
  %20 = icmp ugt i64 %17, 4611686018427387903
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = bitcast %"class.std::__1::vector.41"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %22) #19
  unreachable

23:                                               ; preds = %19
  %24 = tail call i8* @_Znwm(i64 %16) #21
  %25 = bitcast i8* %24 to float*
  %26 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %3, i64 0, i32 0, i32 1
  %27 = bitcast %"class.std::__1::vector.41"* %3 to i8**
  store i8* %24, i8** %27, align 8
  %28 = getelementptr inbounds float, float* %25, i64 %17
  %29 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  store float* %28, float** %29, align 8
  %30 = bitcast float** %26 to i64*
  %31 = ptrtoint i8* %24 to i64
  %32 = add nsw i64 %17, -1
  %33 = getelementptr float, float* %25, i64 %32
  %34 = ptrtoint float* %33 to i64
  %35 = sub i64 4, %31
  %36 = add i64 %35, %34
  %37 = and i64 %36, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %24, i8 0, i64 %37, i1 false) #18
  %38 = ptrtoint float* %28 to i64
  store i64 %38, i64* %30, align 8
  %39 = ptrtoint i8* %24 to i64
  br label %40

40:                                               ; preds = %2, %23
  %41 = phi i8* [ %24, %23 ], [ null, %2 ]
  %42 = phi float* [ %25, %23 ], [ null, %2 ]
  %43 = phi i64 [ %39, %23 ], [ 0, %2 ]
  %44 = phi i64 [ %31, %23 ], [ 0, %2 ]
  %45 = phi i64 [ %38, %23 ], [ 0, %2 ]
  %46 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 1
  %49 = load i32, i32* %48, align 8
  %50 = bitcast %"class.angle::Matrix"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 24, i1 false) #18
  %51 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %3, i64 0, i32 0, i32 1
  %52 = bitcast float** %51 to i64*
  %53 = sub i64 %45, %44
  %54 = ashr exact i64 %53, 2
  %55 = icmp eq i64 %53, 0
  br i1 %55, label %76, label %56

56:                                               ; preds = %40
  %57 = icmp ugt i64 %54, 4611686018427387903
  br i1 %57, label %58, label %60

58:                                               ; preds = %56
  %59 = bitcast %"class.angle::Matrix"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %59) #19
  unreachable

60:                                               ; preds = %56
  %61 = tail call i8* @_Znwm(i64 %53) #21
  %62 = bitcast i8* %61 to float*
  %63 = bitcast float** %5 to i8**
  store i8* %61, i8** %63, align 8
  %64 = bitcast %"class.angle::Matrix"* %0 to i8**
  store i8* %61, i8** %64, align 8
  %65 = getelementptr inbounds float, float* %62, i64 %54
  store float* %65, float** %6, align 8
  %66 = bitcast float** %5 to i64*
  %67 = ptrtoint i8* %61 to i64
  %68 = sub i64 %45, %43
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %74

70:                                               ; preds = %60
  %71 = lshr exact i64 %68, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %61, i8* align 4 %41, i64 %68, i1 false) #18
  %72 = getelementptr inbounds float, float* %62, i64 %71
  %73 = ptrtoint float* %72 to i64
  br label %74

74:                                               ; preds = %70, %60
  %75 = phi i64 [ %73, %70 ], [ %67, %60 ]
  store i64 %75, i64* %66, align 8
  br label %76

76:                                               ; preds = %40, %74
  store i32 %47, i32* %7, align 8
  store i32 %49, i32* %8, align 4
  %77 = icmp eq float* %42, null
  br i1 %77, label %81, label %78

78:                                               ; preds = %76
  %79 = ptrtoint float* %42 to i64
  store i64 %79, i64* %52, align 8
  tail call void @_ZdlPv(i8* %41) #21
  %80 = load i32, i32* %46, align 4
  br label %81

81:                                               ; preds = %76, %78
  %82 = phi i32 [ %47, %76 ], [ %80, %78 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #18
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %134, label %84

84:                                               ; preds = %81
  %85 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 0, i32 0, i32 0
  %86 = load i32, i32* %48, align 8
  br label %87

87:                                               ; preds = %84, %109
  %88 = phi i32 [ %82, %84 ], [ %110, %109 ]
  %89 = phi i32 [ %86, %84 ], [ %111, %109 ]
  %90 = phi i32 [ 0, %84 ], [ %112, %109 ]
  %91 = icmp eq i32 %89, 0
  br i1 %91, label %109, label %92

92:                                               ; preds = %87
  %93 = zext i32 %90 to i64
  %94 = load float*, float** %85, align 8
  %95 = getelementptr inbounds float, float* %94, i64 %93
  %96 = bitcast float* %95 to i32*
  %97 = load i32, i32* %96, align 4
  %98 = load i32, i32* %8, align 4
  %99 = mul i32 %98, %90
  %100 = zext i32 %99 to i64
  %101 = load float*, float** %4, align 8
  %102 = getelementptr inbounds float, float* %101, i64 %100
  %103 = bitcast float* %102 to i32*
  store i32 %97, i32* %103, align 4
  %104 = load i32, i32* %48, align 8
  %105 = icmp ugt i32 %104, 1
  br i1 %105, label %114, label %106

106:                                              ; preds = %114, %92
  %107 = phi i32 [ %104, %92 ], [ %132, %114 ]
  %108 = load i32, i32* %46, align 4
  br label %109

109:                                              ; preds = %106, %87
  %110 = phi i32 [ %108, %106 ], [ %88, %87 ]
  %111 = phi i32 [ %107, %106 ], [ 0, %87 ]
  %112 = add nuw i32 %90, 1
  %113 = icmp ult i32 %112, %110
  br i1 %113, label %87, label %134

114:                                              ; preds = %92, %114
  %115 = phi i32 [ %131, %114 ], [ 1, %92 ]
  %116 = load i32, i32* %46, align 4
  %117 = mul i32 %116, %115
  %118 = add i32 %117, %90
  %119 = zext i32 %118 to i64
  %120 = load float*, float** %85, align 8
  %121 = getelementptr inbounds float, float* %120, i64 %119
  %122 = bitcast float* %121 to i32*
  %123 = load i32, i32* %122, align 4
  %124 = load i32, i32* %8, align 4
  %125 = mul i32 %124, %90
  %126 = add i32 %125, %115
  %127 = zext i32 %126 to i64
  %128 = load float*, float** %4, align 8
  %129 = getelementptr inbounds float, float* %128, i64 %127
  %130 = bitcast float* %129 to i32*
  store i32 %123, i32* %130, align 4
  %131 = add nuw i32 %115, 1
  %132 = load i32, i32* %48, align 8
  %133 = icmp ult i32 %131, %132
  br i1 %133, label %114, label %106

134:                                              ; preds = %109, %81
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_123SetUnionArrayFromMatrixERKN5angle6MatrixIfEEPNS_14TConstantUnionE(%"class.angle::Matrix"* dereferenceable(32), %"class.sh::TConstantUnion"* nocapture) unnamed_addr #0 {
  %3 = alloca %"class.angle::Matrix", align 8
  %4 = alloca %"class.std::__1::vector.41", align 8
  %5 = bitcast %"class.angle::Matrix"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #18
  %6 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast %"class.angle::Matrix"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 32, i1 false)
  call void @_ZNK5angle6MatrixIfE9transposeEv(%"class.angle::Matrix"* nonnull sret %3, %"class.angle::Matrix"* %0)
  %9 = bitcast %"class.std::__1::vector.41"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #18
  %10 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 24, i1 false) #18, !alias.scope !144
  %12 = bitcast float** %7 to i64*
  %13 = load i64, i64* %12, align 8, !noalias !144
  %14 = bitcast %"class.angle::Matrix"* %3 to i64*
  %15 = load i64, i64* %14, align 8, !noalias !144
  %16 = sub i64 %13, %15
  %17 = ashr exact i64 %16, 2
  %18 = icmp eq i64 %16, 0
  %19 = inttoptr i64 %15 to float*
  br i1 %18, label %53, label %20

20:                                               ; preds = %2
  %21 = icmp ugt i64 %17, 4611686018427387903
  br i1 %21, label %22, label %24

22:                                               ; preds = %20
  %23 = bitcast %"class.std::__1::vector.41"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %23) #19
  unreachable

24:                                               ; preds = %20
  %25 = call i8* @_Znwm(i64 %16) #21
  %26 = bitcast i8* %25 to float*
  %27 = bitcast float** %10 to i8**
  store i8* %25, i8** %27, align 8, !alias.scope !144
  %28 = bitcast %"class.std::__1::vector.41"* %4 to i8**
  store i8* %25, i8** %28, align 8, !alias.scope !144
  %29 = getelementptr inbounds float, float* %26, i64 %17
  store float* %29, float** %11, align 8, !alias.scope !144
  %30 = bitcast float** %10 to i64*
  %31 = ptrtoint i8* %25 to i64
  %32 = icmp sgt i64 %16, 0
  br i1 %32, label %34, label %33

33:                                               ; preds = %24
  store i64 %31, i64* %30, align 8, !alias.scope !144
  br label %50

34:                                               ; preds = %24
  %35 = lshr exact i64 %16, 2
  %36 = inttoptr i64 %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %25, i8* align 4 %36, i64 %16, i1 false) #18
  %37 = getelementptr inbounds float, float* %26, i64 %35
  %38 = ptrtoint float* %37 to i64
  store i64 %38, i64* %30, align 8, !alias.scope !144
  %39 = bitcast i8* %25 to float*
  %40 = icmp eq float* %37, %39
  br i1 %40, label %50, label %41

41:                                               ; preds = %34
  %42 = sub i64 %38, %31
  %43 = ashr exact i64 %42, 2
  %44 = bitcast i8* %25 to float*
  %45 = bitcast i8* %25 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1, i64 0, i32 0, i32 0
  store i32 %46, i32* %47, align 4
  %48 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1, i64 0, i32 1
  store i32 1, i32* %48, align 4
  %49 = icmp ugt i64 %43, 1
  br i1 %49, label %60, label %50

50:                                               ; preds = %41, %60, %34, %33
  %51 = ptrtoint i8* %25 to i64
  store i64 %51, i64* %30, align 8
  call void @_ZdlPv(i8* %25) #21
  %52 = load float*, float** %6, align 8
  br label %53

53:                                               ; preds = %2, %50
  %54 = phi float* [ %52, %50 ], [ %19, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #18
  %55 = icmp eq float* %54, null
  br i1 %55, label %59, label %56

56:                                               ; preds = %53
  %57 = ptrtoint float* %54 to i64
  store i64 %57, i64* %12, align 8
  %58 = bitcast float* %54 to i8*
  call void @_ZdlPv(i8* %58) #21
  br label %59

59:                                               ; preds = %53, %56
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #18
  ret void

60:                                               ; preds = %41, %60
  %61 = phi i64 [ %67, %60 ], [ 1, %41 ]
  %62 = getelementptr inbounds float, float* %44, i64 %61
  %63 = bitcast float* %62 to i32*
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1, i64 %61, i32 0, i32 0
  store i32 %64, i32* %65, align 4
  %66 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1, i64 %61, i32 1
  store i32 1, i32* %66, align 4
  %67 = add nuw i64 %61, 1
  %68 = icmp ult i64 %67, %43
  br i1 %68, label %60, label %50, !llvm.loop !147
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_19GetMatrixEPKNS_14TConstantUnionEj(%"class.angle::Matrix"* noalias sret, %"class.sh::TConstantUnion"*, i32) unnamed_addr #0 {
  %4 = alloca %"class.std::__1::vector.41", align 8
  %5 = alloca %"class.angle::Matrix", align 8
  %6 = bitcast %"class.std::__1::vector.41"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #18
  %7 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false) #18
  %10 = mul i32 %2, %2
  %11 = zext i32 %10 to i64
  %12 = icmp eq i32 %10, 0
  %13 = bitcast float** %8 to i64*
  br i1 %12, label %20, label %14

14:                                               ; preds = %3
  %15 = bitcast %"class.std::__1::vector.41"* %4 to i64*
  %16 = bitcast float** %9 to i64*
  br label %70

17:                                               ; preds = %129
  %18 = load i64, i64* %15, align 8
  %19 = inttoptr i64 %18 to float*
  br label %20

20:                                               ; preds = %3, %17
  %21 = phi float* [ %19, %17 ], [ null, %3 ]
  %22 = phi i64 [ %18, %17 ], [ 0, %3 ]
  %23 = phi i64 [ %130, %17 ], [ 0, %3 ]
  %24 = bitcast %"class.angle::Matrix"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %24) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 0, i64 24, i1 false) #18
  %25 = sub i64 %23, %22
  %26 = ashr exact i64 %25, 2
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %52, label %28

28:                                               ; preds = %20
  %29 = icmp ugt i64 %26, 4611686018427387903
  br i1 %29, label %30, label %32

30:                                               ; preds = %28
  %31 = bitcast %"class.angle::Matrix"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %31) #19
  unreachable

32:                                               ; preds = %28
  %33 = tail call i8* @_Znwm(i64 %25) #21
  %34 = bitcast i8* %33 to float*
  %35 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 1
  %36 = bitcast float** %35 to i8**
  store i8* %33, i8** %36, align 8
  %37 = bitcast %"class.angle::Matrix"* %5 to i8**
  store i8* %33, i8** %37, align 8
  %38 = getelementptr inbounds float, float* %34, i64 %26
  %39 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store float* %38, float** %39, align 8
  %40 = bitcast float** %35 to i64*
  %41 = ptrtoint i8* %33 to i64
  %42 = ptrtoint float* %21 to i64
  %43 = sub i64 %23, %42
  %44 = icmp sgt i64 %43, 0
  br i1 %44, label %45, label %50

45:                                               ; preds = %32
  %46 = lshr exact i64 %43, 2
  %47 = bitcast float* %21 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %33, i8* align 4 %47, i64 %43, i1 false) #18
  %48 = getelementptr inbounds float, float* %34, i64 %46
  %49 = ptrtoint float* %48 to i64
  br label %50

50:                                               ; preds = %45, %32
  %51 = phi i64 [ %49, %45 ], [ %41, %32 ]
  store i64 %51, i64* %40, align 8
  br label %52

52:                                               ; preds = %20, %50
  %53 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 1
  store i32 %2, i32* %53, align 8
  %54 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 2
  store i32 %2, i32* %54, align 4
  call void @_ZNK5angle6MatrixIfE9transposeEv(%"class.angle::Matrix"* sret %0, %"class.angle::Matrix"* nonnull %5)
  %55 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 0
  %56 = load float*, float** %55, align 8
  %57 = icmp eq float* %56, null
  br i1 %57, label %63, label %58

58:                                               ; preds = %52
  %59 = ptrtoint float* %56 to i64
  %60 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 1
  %61 = bitcast float** %60 to i64*
  store i64 %59, i64* %61, align 8
  %62 = bitcast float* %56 to i8*
  call void @_ZdlPv(i8* %62) #21
  br label %63

63:                                               ; preds = %52, %58
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #18
  %64 = load float*, float** %7, align 8
  %65 = icmp eq float* %64, null
  br i1 %65, label %69, label %66

66:                                               ; preds = %63
  %67 = ptrtoint float* %64 to i64
  store i64 %67, i64* %13, align 8
  %68 = bitcast float* %64 to i8*
  call void @_ZdlPv(i8* %68) #21
  br label %69

69:                                               ; preds = %63, %66
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #18
  ret void

70:                                               ; preds = %134, %14
  %71 = phi i64 [ 0, %14 ], [ %130, %134 ]
  %72 = phi float* [ null, %14 ], [ %135, %134 ]
  %73 = phi float* [ null, %14 ], [ %131, %134 ]
  %74 = phi i64 [ 0, %14 ], [ %132, %134 ]
  %75 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1, i64 %74
  %76 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %75) #18
  %77 = icmp ult float* %73, %72
  %78 = ptrtoint float* %72 to i64
  br i1 %77, label %79, label %82

79:                                               ; preds = %70
  store float %76, float* %73, align 4
  %80 = getelementptr inbounds float, float* %73, i64 1
  %81 = ptrtoint float* %80 to i64
  store i64 %81, i64* %13, align 8
  br label %129

82:                                               ; preds = %70
  %83 = ptrtoint float* %73 to i64
  %84 = load i64, i64* %15, align 8
  %85 = sub i64 %83, %84
  %86 = ashr exact i64 %85, 2
  %87 = add nsw i64 %86, 1
  %88 = icmp ugt i64 %87, 4611686018427387903
  br i1 %88, label %89, label %91

89:                                               ; preds = %82
  %90 = bitcast %"class.std::__1::vector.41"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %90) #19
  unreachable

91:                                               ; preds = %82
  %92 = sub i64 %78, %84
  %93 = ashr exact i64 %92, 2
  %94 = icmp ult i64 %93, 2305843009213693951
  br i1 %94, label %95, label %103

95:                                               ; preds = %91
  %96 = ashr exact i64 %92, 1
  %97 = icmp ult i64 %96, %87
  %98 = select i1 %97, i64 %87, i64 %96
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %108, label %100

100:                                              ; preds = %95
  %101 = icmp ugt i64 %98, 4611686018427387903
  br i1 %101, label %102, label %103

102:                                              ; preds = %100
  tail call void @abort() #19
  unreachable

103:                                              ; preds = %100, %91
  %104 = phi i64 [ %98, %100 ], [ 4611686018427387903, %91 ]
  %105 = shl i64 %104, 2
  %106 = tail call i8* @_Znwm(i64 %105) #21
  %107 = bitcast i8* %106 to float*
  br label %108

108:                                              ; preds = %103, %95
  %109 = phi i64 [ %104, %103 ], [ 0, %95 ]
  %110 = phi float* [ %107, %103 ], [ null, %95 ]
  %111 = getelementptr inbounds float, float* %110, i64 %86
  %112 = getelementptr inbounds float, float* %110, i64 %109
  %113 = ptrtoint float* %112 to i64
  store float %76, float* %111, align 4
  %114 = getelementptr inbounds float, float* %111, i64 1
  %115 = ptrtoint float* %114 to i64
  %116 = sub i64 %71, %84
  %117 = ashr exact i64 %116, 2
  %118 = sub nsw i64 0, %117
  %119 = getelementptr inbounds float, float* %111, i64 %118
  %120 = ptrtoint float* %119 to i64
  %121 = icmp sgt i64 %116, 0
  br i1 %121, label %122, label %125

122:                                              ; preds = %108
  %123 = bitcast float* %119 to i8*
  %124 = inttoptr i64 %84 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %123, i8* align 4 %124, i64 %116, i1 false) #18
  br label %125

125:                                              ; preds = %122, %108
  store i64 %120, i64* %15, align 8
  store i64 %115, i64* %13, align 8
  store i64 %113, i64* %16, align 8
  %126 = icmp eq i64 %84, 0
  br i1 %126, label %129, label %127

127:                                              ; preds = %125
  %128 = inttoptr i64 %84 to i8*
  tail call void @_ZdlPv(i8* %128) #21
  br label %129

129:                                              ; preds = %79, %125, %127
  %130 = phi i64 [ %81, %79 ], [ %115, %125 ], [ %115, %127 ]
  %131 = phi float* [ %80, %79 ], [ %114, %125 ], [ %114, %127 ]
  %132 = add nuw nsw i64 %74, 1
  %133 = icmp eq i64 %132, %11
  br i1 %133, label %17, label %134

134:                                              ; preds = %129
  %135 = load float*, float** %9, align 8
  br label %70
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float @_ZNK5angle6MatrixIfE11determinantEv(%"class.angle::Matrix"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca [4 x [9 x float]], align 16
  %3 = alloca %"class.angle::Matrix", align 8
  %4 = alloca %"class.angle::Matrix", align 8
  %5 = alloca %"class.angle::Matrix", align 8
  %6 = alloca %"class.angle::Matrix", align 8
  %7 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  switch i32 %8, label %594 [
    i32 2, label %9
    i32 3, label %27
    i32 4, label %77
  ]

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 2
  %11 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load float*, float** %11, align 8
  %13 = load float, float* %12, align 4
  %14 = load i32, i32* %10, align 4
  %15 = add i32 %14, 1
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds float, float* %12, i64 %16
  %18 = load float, float* %17, align 4
  %19 = fmul float %13, %18
  %20 = getelementptr inbounds float, float* %12, i64 1
  %21 = load float, float* %20, align 4
  %22 = zext i32 %14 to i64
  %23 = getelementptr inbounds float, float* %12, i64 %22
  %24 = load float, float* %23, align 4
  %25 = fmul float %21, %24
  %26 = fsub float %19, %25
  br label %594

27:                                               ; preds = %1
  %28 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 2
  %29 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 0
  %30 = load float*, float** %29, align 8
  %31 = load float, float* %30, align 4
  %32 = load i32, i32* %28, align 4
  %33 = add i32 %32, 1
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds float, float* %30, i64 %34
  %36 = load float, float* %35, align 4
  %37 = fmul float %31, %36
  %38 = shl i32 %32, 1
  %39 = add i32 %38, 2
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds float, float* %30, i64 %40
  %42 = load float, float* %41, align 4
  %43 = fmul float %37, %42
  %44 = getelementptr inbounds float, float* %30, i64 1
  %45 = load float, float* %44, align 4
  %46 = add i32 %32, 2
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds float, float* %30, i64 %47
  %49 = load float, float* %48, align 4
  %50 = fmul float %45, %49
  %51 = zext i32 %38 to i64
  %52 = getelementptr inbounds float, float* %30, i64 %51
  %53 = load float, float* %52, align 4
  %54 = fmul float %50, %53
  %55 = fadd float %43, %54
  %56 = getelementptr inbounds float, float* %30, i64 2
  %57 = load float, float* %56, align 4
  %58 = zext i32 %32 to i64
  %59 = getelementptr inbounds float, float* %30, i64 %58
  %60 = load float, float* %59, align 4
  %61 = fmul float %57, %60
  %62 = or i32 %38, 1
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds float, float* %30, i64 %63
  %65 = load float, float* %64, align 4
  %66 = fmul float %61, %65
  %67 = fadd float %55, %66
  %68 = fmul float %36, %57
  %69 = fmul float %53, %68
  %70 = fsub float %67, %69
  %71 = fmul float %45, %60
  %72 = fmul float %42, %71
  %73 = fsub float %70, %72
  %74 = fmul float %31, %49
  %75 = fmul float %74, %65
  %76 = fsub float %73, %75
  br label %594

77:                                               ; preds = %1
  %78 = bitcast [4 x [9 x float]]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %78) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %78, i8 -1, i64 144, i1 false)
  %79 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 2
  %80 = load i32, i32* %79, align 4
  %81 = add i32 %80, 1
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 0
  %84 = load float*, float** %83, align 8
  %85 = getelementptr inbounds float, float* %84, i64 %82
  %86 = bitcast float* %85 to i32*
  %87 = load i32, i32* %86, align 4
  %88 = bitcast [4 x [9 x float]]* %2 to i32*
  store i32 %87, i32* %88, align 16
  %89 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 0, i64 1
  %90 = shl i32 %80, 1
  %91 = or i32 %90, 1
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds float, float* %84, i64 %92
  %94 = bitcast float* %93 to i32*
  %95 = load i32, i32* %94, align 4
  %96 = bitcast float* %89 to i32*
  store i32 %95, i32* %96, align 4
  %97 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 0, i64 2
  %98 = mul i32 %80, 3
  %99 = add i32 %98, 1
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds float, float* %84, i64 %100
  %102 = bitcast float* %101 to i32*
  %103 = load i32, i32* %102, align 4
  %104 = bitcast float* %97 to i32*
  store i32 %103, i32* %104, align 8
  %105 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 0, i64 3
  %106 = add i32 %80, 2
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds float, float* %84, i64 %107
  %109 = bitcast float* %108 to i32*
  %110 = load i32, i32* %109, align 4
  %111 = bitcast float* %105 to i32*
  store i32 %110, i32* %111, align 4
  %112 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 0, i64 4
  %113 = add i32 %90, 2
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds float, float* %84, i64 %114
  %116 = bitcast float* %115 to i32*
  %117 = load i32, i32* %116, align 4
  %118 = bitcast float* %112 to i32*
  store i32 %117, i32* %118, align 16
  %119 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 0, i64 5
  %120 = add i32 %98, 2
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds float, float* %84, i64 %121
  %123 = bitcast float* %122 to i32*
  %124 = load i32, i32* %123, align 4
  %125 = bitcast float* %119 to i32*
  store i32 %124, i32* %125, align 4
  %126 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 0, i64 6
  %127 = add i32 %80, 3
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds float, float* %84, i64 %128
  %130 = bitcast float* %129 to i32*
  %131 = load i32, i32* %130, align 4
  %132 = bitcast float* %126 to i32*
  store i32 %131, i32* %132, align 8
  %133 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 0, i64 7
  %134 = add i32 %90, 3
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds float, float* %84, i64 %135
  %137 = bitcast float* %136 to i32*
  %138 = load i32, i32* %137, align 4
  %139 = bitcast float* %133 to i32*
  store i32 %138, i32* %139, align 4
  %140 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 0, i64 8
  %141 = add i32 %98, 3
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds float, float* %84, i64 %142
  %144 = bitcast float* %143 to i32*
  %145 = load i32, i32* %144, align 4
  %146 = bitcast float* %140 to i32*
  store i32 %145, i32* %146, align 16
  %147 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 1
  %148 = zext i32 %80 to i64
  %149 = getelementptr inbounds float, float* %84, i64 %148
  %150 = bitcast float* %149 to i32*
  %151 = load i32, i32* %150, align 4
  %152 = bitcast [9 x float]* %147 to i32*
  store i32 %151, i32* %152, align 4
  %153 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 1, i64 1
  %154 = zext i32 %90 to i64
  %155 = getelementptr inbounds float, float* %84, i64 %154
  %156 = bitcast float* %155 to i32*
  %157 = load i32, i32* %156, align 4
  %158 = bitcast float* %153 to i32*
  store i32 %157, i32* %158, align 4
  %159 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 1, i64 2
  %160 = zext i32 %98 to i64
  %161 = getelementptr inbounds float, float* %84, i64 %160
  %162 = bitcast float* %161 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = bitcast float* %159 to i32*
  store i32 %163, i32* %164, align 4
  %165 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 1, i64 3
  %166 = load i32, i32* %109, align 4
  %167 = bitcast float* %165 to i32*
  store i32 %166, i32* %167, align 4
  %168 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 1, i64 4
  %169 = load i32, i32* %116, align 4
  %170 = bitcast float* %168 to i32*
  store i32 %169, i32* %170, align 4
  %171 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 1, i64 5
  %172 = load i32, i32* %123, align 4
  %173 = bitcast float* %171 to i32*
  store i32 %172, i32* %173, align 4
  %174 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 1, i64 6
  %175 = load i32, i32* %130, align 4
  %176 = bitcast float* %174 to i32*
  store i32 %175, i32* %176, align 4
  %177 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 1, i64 7
  %178 = load i32, i32* %137, align 4
  %179 = bitcast float* %177 to i32*
  store i32 %178, i32* %179, align 4
  %180 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 1, i64 8
  %181 = load i32, i32* %144, align 4
  %182 = bitcast float* %180 to i32*
  store i32 %181, i32* %182, align 4
  %183 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 2
  %184 = load i32, i32* %150, align 4
  %185 = bitcast [9 x float]* %183 to i32*
  store i32 %184, i32* %185, align 8
  %186 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 2, i64 1
  %187 = load i32, i32* %156, align 4
  %188 = bitcast float* %186 to i32*
  store i32 %187, i32* %188, align 4
  %189 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 2, i64 2
  %190 = load i32, i32* %162, align 4
  %191 = bitcast float* %189 to i32*
  store i32 %190, i32* %191, align 8
  %192 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 2, i64 3
  %193 = load i32, i32* %86, align 4
  %194 = bitcast float* %192 to i32*
  store i32 %193, i32* %194, align 4
  %195 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 2, i64 4
  %196 = load i32, i32* %94, align 4
  %197 = bitcast float* %195 to i32*
  store i32 %196, i32* %197, align 8
  %198 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 2, i64 5
  %199 = load i32, i32* %102, align 4
  %200 = bitcast float* %198 to i32*
  store i32 %199, i32* %200, align 4
  %201 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 2, i64 6
  %202 = load i32, i32* %130, align 4
  %203 = bitcast float* %201 to i32*
  store i32 %202, i32* %203, align 8
  %204 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 2, i64 7
  %205 = load i32, i32* %137, align 4
  %206 = bitcast float* %204 to i32*
  store i32 %205, i32* %206, align 4
  %207 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 2, i64 8
  %208 = load i32, i32* %144, align 4
  %209 = bitcast float* %207 to i32*
  store i32 %208, i32* %209, align 8
  %210 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 3, i64 0
  %211 = load i32, i32* %150, align 4
  %212 = bitcast float* %210 to i32*
  store i32 %211, i32* %212, align 4
  %213 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 3, i64 1
  %214 = load i32, i32* %156, align 4
  %215 = bitcast float* %213 to i32*
  store i32 %214, i32* %215, align 4
  %216 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 3, i64 2
  %217 = load i32, i32* %162, align 4
  %218 = bitcast float* %216 to i32*
  store i32 %217, i32* %218, align 4
  %219 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 3, i64 3
  %220 = load i32, i32* %86, align 4
  %221 = bitcast float* %219 to i32*
  store i32 %220, i32* %221, align 4
  %222 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 3, i64 4
  %223 = load i32, i32* %94, align 4
  %224 = bitcast float* %222 to i32*
  store i32 %223, i32* %224, align 4
  %225 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 3, i64 5
  %226 = load i32, i32* %102, align 4
  %227 = bitcast float* %225 to i32*
  store i32 %226, i32* %227, align 4
  %228 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 3, i64 6
  %229 = load i32, i32* %109, align 4
  %230 = bitcast float* %228 to i32*
  store i32 %229, i32* %230, align 4
  %231 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 3, i64 7
  %232 = load i32, i32* %116, align 4
  %233 = bitcast float* %231 to i32*
  store i32 %232, i32* %233, align 4
  %234 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 3, i64 8
  %235 = load i32, i32* %123, align 4
  %236 = bitcast float* %234 to i32*
  store i32 %235, i32* %236, align 4
  %237 = load float, float* %84, align 4
  %238 = bitcast %"class.angle::Matrix"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %238) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %238, i8 0, i64 24, i1 false) #18
  %239 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 1
  store i32 3, i32* %239, align 8
  %240 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 2
  store i32 3, i32* %240, align 4
  %241 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 1
  %242 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %243 = bitcast float** %241 to i64*
  %244 = bitcast %"class.angle::Matrix"* %3 to i64*
  %245 = bitcast float** %242 to i64*
  %246 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 0
  br label %247

247:                                              ; preds = %313, %77
  %248 = phi i64 [ %309, %313 ], [ 0, %77 ]
  %249 = phi float* [ %314, %313 ], [ null, %77 ]
  %250 = phi float* [ %310, %313 ], [ null, %77 ]
  %251 = phi i64 [ %311, %313 ], [ 0, %77 ]
  %252 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 0, i64 %251
  %253 = icmp eq float* %250, %249
  br i1 %253, label %260, label %254

254:                                              ; preds = %247
  %255 = bitcast float* %252 to i32*
  %256 = load i32, i32* %255, align 4
  %257 = bitcast float* %250 to i32*
  store i32 %256, i32* %257, align 4
  %258 = getelementptr inbounds float, float* %250, i64 1
  %259 = ptrtoint float* %258 to i64
  store i64 %259, i64* %243, align 8
  br label %308

260:                                              ; preds = %247
  %261 = ptrtoint float* %249 to i64
  %262 = load i64, i64* %244, align 8
  %263 = sub i64 %261, %262
  %264 = ashr exact i64 %263, 2
  %265 = add nsw i64 %264, 1
  %266 = icmp ugt i64 %265, 4611686018427387903
  br i1 %266, label %267, label %269

267:                                              ; preds = %260
  %268 = bitcast %"class.angle::Matrix"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %268) #19
  unreachable

269:                                              ; preds = %260
  %270 = icmp ult i64 %264, 2305843009213693951
  br i1 %270, label %271, label %279

271:                                              ; preds = %269
  %272 = ashr exact i64 %263, 1
  %273 = icmp ult i64 %272, %265
  %274 = select i1 %273, i64 %265, i64 %272
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %284, label %276

276:                                              ; preds = %271
  %277 = icmp ugt i64 %274, 4611686018427387903
  br i1 %277, label %278, label %279

278:                                              ; preds = %276
  tail call void @abort() #19
  unreachable

279:                                              ; preds = %276, %269
  %280 = phi i64 [ %274, %276 ], [ 4611686018427387903, %269 ]
  %281 = shl i64 %280, 2
  %282 = tail call i8* @_Znwm(i64 %281) #21
  %283 = bitcast i8* %282 to float*
  br label %284

284:                                              ; preds = %279, %271
  %285 = phi i64 [ %280, %279 ], [ 0, %271 ]
  %286 = phi float* [ %283, %279 ], [ null, %271 ]
  %287 = getelementptr inbounds float, float* %286, i64 %264
  %288 = getelementptr inbounds float, float* %286, i64 %285
  %289 = ptrtoint float* %288 to i64
  %290 = bitcast float* %252 to i32*
  %291 = load i32, i32* %290, align 4
  %292 = bitcast float* %287 to i32*
  store i32 %291, i32* %292, align 4
  %293 = getelementptr inbounds float, float* %287, i64 1
  %294 = ptrtoint float* %293 to i64
  %295 = sub i64 %248, %262
  %296 = ashr exact i64 %295, 2
  %297 = sub nsw i64 0, %296
  %298 = getelementptr inbounds float, float* %287, i64 %297
  %299 = ptrtoint float* %298 to i64
  %300 = icmp sgt i64 %295, 0
  br i1 %300, label %301, label %304

301:                                              ; preds = %284
  %302 = bitcast float* %298 to i8*
  %303 = inttoptr i64 %262 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %302, i8* align 4 %303, i64 %295, i1 false) #18
  br label %304

304:                                              ; preds = %301, %284
  store i64 %299, i64* %244, align 8
  store i64 %294, i64* %243, align 8
  store i64 %289, i64* %245, align 8
  %305 = icmp eq i64 %262, 0
  br i1 %305, label %308, label %306

306:                                              ; preds = %304
  %307 = inttoptr i64 %262 to i8*
  tail call void @_ZdlPv(i8* %307) #21
  br label %308

308:                                              ; preds = %254, %304, %306
  %309 = phi i64 [ %259, %254 ], [ %294, %304 ], [ %294, %306 ]
  %310 = phi float* [ %258, %254 ], [ %293, %304 ], [ %293, %306 ]
  %311 = add nuw nsw i64 %251, 1
  %312 = icmp eq i64 %311, 9
  br i1 %312, label %315, label %313

313:                                              ; preds = %308
  %314 = load float*, float** %242, align 8
  br label %247

315:                                              ; preds = %308
  %316 = call float @_ZNK5angle6MatrixIfE11determinantEv(%"class.angle::Matrix"* nonnull %3)
  %317 = fmul float %237, %316
  %318 = load float*, float** %83, align 8
  %319 = getelementptr inbounds float, float* %318, i64 1
  %320 = load float, float* %319, align 4
  %321 = bitcast %"class.angle::Matrix"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %321) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %321, i8 0, i64 24, i1 false) #18
  %322 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %4, i64 0, i32 1
  store i32 3, i32* %322, align 8
  %323 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %4, i64 0, i32 2
  store i32 3, i32* %323, align 4
  %324 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %4, i64 0, i32 0, i32 0, i32 1
  %325 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %4, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %326 = bitcast float** %324 to i64*
  %327 = bitcast %"class.angle::Matrix"* %4 to i64*
  %328 = bitcast float** %325 to i64*
  %329 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %4, i64 0, i32 0, i32 0, i32 0
  br label %330

330:                                              ; preds = %394, %315
  %331 = phi i64 [ %397, %394 ], [ 0, %315 ]
  %332 = phi float* [ %396, %394 ], [ null, %315 ]
  %333 = phi float* [ %395, %394 ], [ null, %315 ]
  %334 = phi i64 [ %392, %394 ], [ 0, %315 ]
  %335 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 1, i64 %334
  %336 = icmp eq float* %333, %332
  br i1 %336, label %343, label %337

337:                                              ; preds = %330
  %338 = bitcast float* %335 to i32*
  %339 = load i32, i32* %338, align 4
  %340 = bitcast float* %333 to i32*
  store i32 %339, i32* %340, align 4
  %341 = getelementptr inbounds float, float* %333, i64 1
  %342 = ptrtoint float* %341 to i64
  store i64 %342, i64* %326, align 8
  br label %391

343:                                              ; preds = %330
  %344 = ptrtoint float* %332 to i64
  %345 = load i64, i64* %327, align 8
  %346 = sub i64 %344, %345
  %347 = ashr exact i64 %346, 2
  %348 = add nsw i64 %347, 1
  %349 = icmp ugt i64 %348, 4611686018427387903
  br i1 %349, label %350, label %352

350:                                              ; preds = %343
  %351 = bitcast %"class.angle::Matrix"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %351) #19
  unreachable

352:                                              ; preds = %343
  %353 = icmp ult i64 %347, 2305843009213693951
  br i1 %353, label %354, label %362

354:                                              ; preds = %352
  %355 = ashr exact i64 %346, 1
  %356 = icmp ult i64 %355, %348
  %357 = select i1 %356, i64 %348, i64 %355
  %358 = icmp eq i64 %357, 0
  br i1 %358, label %367, label %359

359:                                              ; preds = %354
  %360 = icmp ugt i64 %357, 4611686018427387903
  br i1 %360, label %361, label %362

361:                                              ; preds = %359
  call void @abort() #19
  unreachable

362:                                              ; preds = %359, %352
  %363 = phi i64 [ %357, %359 ], [ 4611686018427387903, %352 ]
  %364 = shl i64 %363, 2
  %365 = call i8* @_Znwm(i64 %364) #21
  %366 = bitcast i8* %365 to float*
  br label %367

367:                                              ; preds = %362, %354
  %368 = phi i64 [ %363, %362 ], [ 0, %354 ]
  %369 = phi float* [ %366, %362 ], [ null, %354 ]
  %370 = getelementptr inbounds float, float* %369, i64 %347
  %371 = getelementptr inbounds float, float* %369, i64 %368
  %372 = ptrtoint float* %371 to i64
  %373 = bitcast float* %335 to i32*
  %374 = load i32, i32* %373, align 4
  %375 = bitcast float* %370 to i32*
  store i32 %374, i32* %375, align 4
  %376 = getelementptr inbounds float, float* %370, i64 1
  %377 = ptrtoint float* %376 to i64
  %378 = sub i64 %331, %345
  %379 = ashr exact i64 %378, 2
  %380 = sub nsw i64 0, %379
  %381 = getelementptr inbounds float, float* %370, i64 %380
  %382 = ptrtoint float* %381 to i64
  %383 = icmp sgt i64 %378, 0
  br i1 %383, label %384, label %387

384:                                              ; preds = %367
  %385 = bitcast float* %381 to i8*
  %386 = inttoptr i64 %345 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %385, i8* align 4 %386, i64 %378, i1 false) #18
  br label %387

387:                                              ; preds = %384, %367
  store i64 %382, i64* %327, align 8
  store i64 %377, i64* %326, align 8
  store i64 %372, i64* %328, align 8
  %388 = icmp eq i64 %345, 0
  br i1 %388, label %391, label %389

389:                                              ; preds = %387
  %390 = inttoptr i64 %345 to i8*
  call void @_ZdlPv(i8* %390) #21
  br label %391

391:                                              ; preds = %337, %387, %389
  %392 = add nuw nsw i64 %334, 1
  %393 = icmp eq i64 %392, 9
  br i1 %393, label %398, label %394

394:                                              ; preds = %391
  %395 = load float*, float** %324, align 8
  %396 = load float*, float** %325, align 8
  %397 = ptrtoint float* %395 to i64
  br label %330

398:                                              ; preds = %391
  %399 = call float @_ZNK5angle6MatrixIfE11determinantEv(%"class.angle::Matrix"* nonnull %4)
  %400 = fmul float %320, %399
  %401 = fsub float %317, %400
  %402 = load float*, float** %83, align 8
  %403 = getelementptr inbounds float, float* %402, i64 2
  %404 = load float, float* %403, align 4
  %405 = bitcast %"class.angle::Matrix"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %405) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %405, i8 0, i64 24, i1 false) #18
  %406 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 1
  store i32 3, i32* %406, align 8
  %407 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 2
  store i32 3, i32* %407, align 4
  %408 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 1
  %409 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %410 = bitcast float** %408 to i64*
  %411 = bitcast %"class.angle::Matrix"* %5 to i64*
  %412 = bitcast float** %409 to i64*
  %413 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 0
  br label %414

414:                                              ; preds = %478, %398
  %415 = phi i64 [ %481, %478 ], [ 0, %398 ]
  %416 = phi float* [ %480, %478 ], [ null, %398 ]
  %417 = phi float* [ %479, %478 ], [ null, %398 ]
  %418 = phi i64 [ %476, %478 ], [ 0, %398 ]
  %419 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 2, i64 %418
  %420 = icmp eq float* %417, %416
  br i1 %420, label %427, label %421

421:                                              ; preds = %414
  %422 = bitcast float* %419 to i32*
  %423 = load i32, i32* %422, align 4
  %424 = bitcast float* %417 to i32*
  store i32 %423, i32* %424, align 4
  %425 = getelementptr inbounds float, float* %417, i64 1
  %426 = ptrtoint float* %425 to i64
  store i64 %426, i64* %410, align 8
  br label %475

427:                                              ; preds = %414
  %428 = ptrtoint float* %416 to i64
  %429 = load i64, i64* %411, align 8
  %430 = sub i64 %428, %429
  %431 = ashr exact i64 %430, 2
  %432 = add nsw i64 %431, 1
  %433 = icmp ugt i64 %432, 4611686018427387903
  br i1 %433, label %434, label %436

434:                                              ; preds = %427
  %435 = bitcast %"class.angle::Matrix"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %435) #19
  unreachable

436:                                              ; preds = %427
  %437 = icmp ult i64 %431, 2305843009213693951
  br i1 %437, label %438, label %446

438:                                              ; preds = %436
  %439 = ashr exact i64 %430, 1
  %440 = icmp ult i64 %439, %432
  %441 = select i1 %440, i64 %432, i64 %439
  %442 = icmp eq i64 %441, 0
  br i1 %442, label %451, label %443

443:                                              ; preds = %438
  %444 = icmp ugt i64 %441, 4611686018427387903
  br i1 %444, label %445, label %446

445:                                              ; preds = %443
  call void @abort() #19
  unreachable

446:                                              ; preds = %443, %436
  %447 = phi i64 [ %441, %443 ], [ 4611686018427387903, %436 ]
  %448 = shl i64 %447, 2
  %449 = call i8* @_Znwm(i64 %448) #21
  %450 = bitcast i8* %449 to float*
  br label %451

451:                                              ; preds = %446, %438
  %452 = phi i64 [ %447, %446 ], [ 0, %438 ]
  %453 = phi float* [ %450, %446 ], [ null, %438 ]
  %454 = getelementptr inbounds float, float* %453, i64 %431
  %455 = getelementptr inbounds float, float* %453, i64 %452
  %456 = ptrtoint float* %455 to i64
  %457 = bitcast float* %419 to i32*
  %458 = load i32, i32* %457, align 4
  %459 = bitcast float* %454 to i32*
  store i32 %458, i32* %459, align 4
  %460 = getelementptr inbounds float, float* %454, i64 1
  %461 = ptrtoint float* %460 to i64
  %462 = sub i64 %415, %429
  %463 = ashr exact i64 %462, 2
  %464 = sub nsw i64 0, %463
  %465 = getelementptr inbounds float, float* %454, i64 %464
  %466 = ptrtoint float* %465 to i64
  %467 = icmp sgt i64 %462, 0
  br i1 %467, label %468, label %471

468:                                              ; preds = %451
  %469 = bitcast float* %465 to i8*
  %470 = inttoptr i64 %429 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %469, i8* align 4 %470, i64 %462, i1 false) #18
  br label %471

471:                                              ; preds = %468, %451
  store i64 %466, i64* %411, align 8
  store i64 %461, i64* %410, align 8
  store i64 %456, i64* %412, align 8
  %472 = icmp eq i64 %429, 0
  br i1 %472, label %475, label %473

473:                                              ; preds = %471
  %474 = inttoptr i64 %429 to i8*
  call void @_ZdlPv(i8* %474) #21
  br label %475

475:                                              ; preds = %421, %471, %473
  %476 = add nuw nsw i64 %418, 1
  %477 = icmp eq i64 %476, 9
  br i1 %477, label %482, label %478

478:                                              ; preds = %475
  %479 = load float*, float** %408, align 8
  %480 = load float*, float** %409, align 8
  %481 = ptrtoint float* %479 to i64
  br label %414

482:                                              ; preds = %475
  %483 = call float @_ZNK5angle6MatrixIfE11determinantEv(%"class.angle::Matrix"* nonnull %5)
  %484 = fmul float %404, %483
  %485 = fadd float %401, %484
  %486 = load float*, float** %83, align 8
  %487 = getelementptr inbounds float, float* %486, i64 3
  %488 = load float, float* %487, align 4
  %489 = bitcast %"class.angle::Matrix"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %489) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %489, i8 0, i64 24, i1 false) #18
  %490 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 1
  store i32 3, i32* %490, align 8
  %491 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 2
  store i32 3, i32* %491, align 4
  %492 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 1
  %493 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %494 = bitcast float** %492 to i64*
  %495 = bitcast %"class.angle::Matrix"* %6 to i64*
  %496 = bitcast float** %493 to i64*
  %497 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 0
  br label %498

498:                                              ; preds = %562, %482
  %499 = phi i64 [ %565, %562 ], [ 0, %482 ]
  %500 = phi float* [ %564, %562 ], [ null, %482 ]
  %501 = phi float* [ %563, %562 ], [ null, %482 ]
  %502 = phi i64 [ %560, %562 ], [ 0, %482 ]
  %503 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 3, i64 %502
  %504 = icmp eq float* %501, %500
  br i1 %504, label %511, label %505

505:                                              ; preds = %498
  %506 = bitcast float* %503 to i32*
  %507 = load i32, i32* %506, align 4
  %508 = bitcast float* %501 to i32*
  store i32 %507, i32* %508, align 4
  %509 = getelementptr inbounds float, float* %501, i64 1
  %510 = ptrtoint float* %509 to i64
  store i64 %510, i64* %494, align 8
  br label %559

511:                                              ; preds = %498
  %512 = ptrtoint float* %500 to i64
  %513 = load i64, i64* %495, align 8
  %514 = sub i64 %512, %513
  %515 = ashr exact i64 %514, 2
  %516 = add nsw i64 %515, 1
  %517 = icmp ugt i64 %516, 4611686018427387903
  br i1 %517, label %518, label %520

518:                                              ; preds = %511
  %519 = bitcast %"class.angle::Matrix"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %519) #19
  unreachable

520:                                              ; preds = %511
  %521 = icmp ult i64 %515, 2305843009213693951
  br i1 %521, label %522, label %530

522:                                              ; preds = %520
  %523 = ashr exact i64 %514, 1
  %524 = icmp ult i64 %523, %516
  %525 = select i1 %524, i64 %516, i64 %523
  %526 = icmp eq i64 %525, 0
  br i1 %526, label %535, label %527

527:                                              ; preds = %522
  %528 = icmp ugt i64 %525, 4611686018427387903
  br i1 %528, label %529, label %530

529:                                              ; preds = %527
  call void @abort() #19
  unreachable

530:                                              ; preds = %527, %520
  %531 = phi i64 [ %525, %527 ], [ 4611686018427387903, %520 ]
  %532 = shl i64 %531, 2
  %533 = call i8* @_Znwm(i64 %532) #21
  %534 = bitcast i8* %533 to float*
  br label %535

535:                                              ; preds = %530, %522
  %536 = phi i64 [ %531, %530 ], [ 0, %522 ]
  %537 = phi float* [ %534, %530 ], [ null, %522 ]
  %538 = getelementptr inbounds float, float* %537, i64 %515
  %539 = getelementptr inbounds float, float* %537, i64 %536
  %540 = ptrtoint float* %539 to i64
  %541 = bitcast float* %503 to i32*
  %542 = load i32, i32* %541, align 4
  %543 = bitcast float* %538 to i32*
  store i32 %542, i32* %543, align 4
  %544 = getelementptr inbounds float, float* %538, i64 1
  %545 = ptrtoint float* %544 to i64
  %546 = sub i64 %499, %513
  %547 = ashr exact i64 %546, 2
  %548 = sub nsw i64 0, %547
  %549 = getelementptr inbounds float, float* %538, i64 %548
  %550 = ptrtoint float* %549 to i64
  %551 = icmp sgt i64 %546, 0
  br i1 %551, label %552, label %555

552:                                              ; preds = %535
  %553 = bitcast float* %549 to i8*
  %554 = inttoptr i64 %513 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %553, i8* align 4 %554, i64 %546, i1 false) #18
  br label %555

555:                                              ; preds = %552, %535
  store i64 %550, i64* %495, align 8
  store i64 %545, i64* %494, align 8
  store i64 %540, i64* %496, align 8
  %556 = icmp eq i64 %513, 0
  br i1 %556, label %559, label %557

557:                                              ; preds = %555
  %558 = inttoptr i64 %513 to i8*
  call void @_ZdlPv(i8* %558) #21
  br label %559

559:                                              ; preds = %505, %555, %557
  %560 = add nuw nsw i64 %502, 1
  %561 = icmp eq i64 %560, 9
  br i1 %561, label %566, label %562

562:                                              ; preds = %559
  %563 = load float*, float** %492, align 8
  %564 = load float*, float** %493, align 8
  %565 = ptrtoint float* %563 to i64
  br label %498

566:                                              ; preds = %559
  %567 = call float @_ZNK5angle6MatrixIfE11determinantEv(%"class.angle::Matrix"* nonnull %6)
  %568 = fmul float %488, %567
  %569 = fsub float %485, %568
  %570 = load float*, float** %497, align 8
  %571 = icmp eq float* %570, null
  br i1 %571, label %575, label %572

572:                                              ; preds = %566
  %573 = ptrtoint float* %570 to i64
  store i64 %573, i64* %494, align 8
  %574 = bitcast float* %570 to i8*
  call void @_ZdlPv(i8* %574) #21
  br label %575

575:                                              ; preds = %566, %572
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %489) #18
  %576 = load float*, float** %413, align 8
  %577 = icmp eq float* %576, null
  br i1 %577, label %581, label %578

578:                                              ; preds = %575
  %579 = ptrtoint float* %576 to i64
  store i64 %579, i64* %410, align 8
  %580 = bitcast float* %576 to i8*
  call void @_ZdlPv(i8* %580) #21
  br label %581

581:                                              ; preds = %575, %578
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %405) #18
  %582 = load float*, float** %329, align 8
  %583 = icmp eq float* %582, null
  br i1 %583, label %587, label %584

584:                                              ; preds = %581
  %585 = ptrtoint float* %582 to i64
  store i64 %585, i64* %326, align 8
  %586 = bitcast float* %582 to i8*
  call void @_ZdlPv(i8* %586) #21
  br label %587

587:                                              ; preds = %581, %584
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %321) #18
  %588 = load float*, float** %246, align 8
  %589 = icmp eq float* %588, null
  br i1 %589, label %593, label %590

590:                                              ; preds = %587
  %591 = ptrtoint float* %588 to i64
  store i64 %591, i64* %243, align 8
  %592 = bitcast float* %588 to i8*
  call void @_ZdlPv(i8* %592) #21
  br label %593

593:                                              ; preds = %587, %590
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %238) #18
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %78) #18
  br label %594

594:                                              ; preds = %1, %593, %27, %9
  %595 = phi float [ %569, %593 ], [ %76, %27 ], [ %26, %9 ], [ 0.000000e+00, %1 ]
  ret float %595
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5angle6MatrixIfE7inverseEv(%"class.angle::Matrix"* noalias sret, %"class.angle::Matrix"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.angle::Matrix", align 8
  %4 = alloca %"class.std::__1::vector.41", align 8
  %5 = alloca %"class.angle::Matrix", align 8
  %6 = alloca %"class.std::__1::vector.41", align 8
  %7 = bitcast %"class.angle::Matrix"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #18
  %8 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %11 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 1
  %12 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 2
  %13 = bitcast %"class.std::__1::vector.41"* %4 to i8*
  %14 = bitcast %"class.angle::Matrix"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #18
  %15 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 0, i32 0, i32 1
  %16 = bitcast float** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.angle::Matrix"* %1 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %17, %19
  %21 = ashr exact i64 %20, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 24, i1 false) #18
  %22 = icmp eq i64 %20, 0
  br i1 %22, label %44, label %23

23:                                               ; preds = %2
  %24 = icmp ugt i64 %21, 4611686018427387903
  br i1 %24, label %25, label %27

25:                                               ; preds = %23
  %26 = bitcast %"class.std::__1::vector.41"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %26) #19
  unreachable

27:                                               ; preds = %23
  %28 = tail call i8* @_Znwm(i64 %20) #21
  %29 = bitcast i8* %28 to float*
  %30 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 1
  %31 = bitcast %"class.std::__1::vector.41"* %4 to i8**
  store i8* %28, i8** %31, align 8
  %32 = getelementptr inbounds float, float* %29, i64 %21
  %33 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  store float* %32, float** %33, align 8
  %34 = bitcast float** %30 to i64*
  %35 = ptrtoint i8* %28 to i64
  %36 = add nsw i64 %21, -1
  %37 = getelementptr float, float* %29, i64 %36
  %38 = ptrtoint float* %37 to i64
  %39 = sub i64 4, %35
  %40 = add i64 %39, %38
  %41 = and i64 %40, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %28, i8 0, i64 %41, i1 false) #18
  %42 = ptrtoint float* %32 to i64
  store i64 %42, i64* %34, align 8
  %43 = ptrtoint i8* %28 to i64
  br label %44

44:                                               ; preds = %2, %27
  %45 = phi i8* [ %28, %27 ], [ null, %2 ]
  %46 = phi float* [ %29, %27 ], [ null, %2 ]
  %47 = phi i64 [ %43, %27 ], [ 0, %2 ]
  %48 = phi i64 [ %35, %27 ], [ 0, %2 ]
  %49 = phi i64 [ %42, %27 ], [ 0, %2 ]
  %50 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 1
  %51 = load i32, i32* %50, align 8
  %52 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 2
  %53 = load i32, i32* %52, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 24, i1 false) #18
  %54 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 1
  %55 = bitcast float** %54 to i64*
  %56 = sub i64 %49, %48
  %57 = ashr exact i64 %56, 2
  %58 = icmp eq i64 %56, 0
  br i1 %58, label %80, label %59

59:                                               ; preds = %44
  %60 = icmp ugt i64 %57, 4611686018427387903
  br i1 %60, label %61, label %63

61:                                               ; preds = %59
  %62 = bitcast %"class.angle::Matrix"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %62) #19
  unreachable

63:                                               ; preds = %59
  %64 = tail call i8* @_Znwm(i64 %56) #21
  %65 = bitcast i8* %64 to float*
  %66 = bitcast float** %9 to i8**
  store i8* %64, i8** %66, align 8
  %67 = bitcast %"class.angle::Matrix"* %3 to i8**
  store i8* %64, i8** %67, align 8
  %68 = getelementptr inbounds float, float* %65, i64 %57
  store float* %68, float** %10, align 8
  %69 = bitcast float** %9 to i64*
  %70 = ptrtoint i8* %64 to i64
  %71 = sub i64 %49, %47
  %72 = icmp sgt i64 %71, 0
  %73 = bitcast i8* %64 to i32*
  br i1 %72, label %74, label %78

74:                                               ; preds = %63
  %75 = lshr exact i64 %71, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %64, i8* align 4 %45, i64 %71, i1 false) #18
  %76 = getelementptr inbounds float, float* %65, i64 %75
  %77 = ptrtoint float* %76 to i64
  br label %78

78:                                               ; preds = %74, %63
  %79 = phi i64 [ %77, %74 ], [ %70, %63 ]
  store i64 %79, i64* %69, align 8
  br label %80

80:                                               ; preds = %44, %78
  %81 = phi float* [ null, %44 ], [ %65, %78 ]
  %82 = phi i32* [ null, %44 ], [ %73, %78 ]
  store i32 %51, i32* %11, align 8
  store i32 %53, i32* %12, align 4
  %83 = icmp eq float* %46, null
  br i1 %83, label %87, label %84

84:                                               ; preds = %80
  %85 = ptrtoint float* %46 to i64
  store i64 %85, i64* %55, align 8
  tail call void @_ZdlPv(i8* %45) #21
  %86 = load i32, i32* %50, align 8
  br label %87

87:                                               ; preds = %80, %84
  %88 = phi i32 [ %51, %80 ], [ %86, %84 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #18
  switch i32 %88, label %1189 [
    i32 2, label %89
    i32 3, label %118
    i32 4, label %314
  ]

89:                                               ; preds = %87
  %90 = load i32, i32* %52, align 4
  %91 = add i32 %90, 1
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 0, i32 0, i32 0
  %94 = load float*, float** %93, align 8
  %95 = getelementptr inbounds float, float* %94, i64 %92
  %96 = bitcast float* %95 to i32*
  %97 = load i32, i32* %96, align 4
  store i32 %97, i32* %82, align 4
  %98 = load i32, i32* %52, align 4
  %99 = zext i32 %98 to i64
  %100 = load float*, float** %93, align 8
  %101 = getelementptr inbounds float, float* %100, i64 %99
  %102 = load float, float* %101, align 4
  %103 = fsub float -0.000000e+00, %102
  %104 = getelementptr inbounds float, float* %81, i64 1
  store float %103, float* %104, align 4
  %105 = load float*, float** %93, align 8
  %106 = getelementptr inbounds float, float* %105, i64 1
  %107 = load float, float* %106, align 4
  %108 = fsub float -0.000000e+00, %107
  %109 = zext i32 %53 to i64
  %110 = getelementptr inbounds float, float* %81, i64 %109
  store float %108, float* %110, align 4
  %111 = bitcast %"class.angle::Matrix"* %1 to i32**
  %112 = load i32*, i32** %111, align 8
  %113 = load i32, i32* %112, align 4
  %114 = add i32 %53, 1
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds float, float* %81, i64 %115
  %117 = bitcast float* %116 to i32*
  store i32 %113, i32* %117, align 4
  br label %1189

118:                                              ; preds = %87
  %119 = load i32, i32* %52, align 4
  %120 = add i32 %119, 1
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 0, i32 0, i32 0
  %123 = load float*, float** %122, align 8
  %124 = getelementptr inbounds float, float* %123, i64 %121
  %125 = load float, float* %124, align 4
  %126 = shl i32 %119, 1
  %127 = add i32 %126, 2
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds float, float* %123, i64 %128
  %130 = load float, float* %129, align 4
  %131 = fmul float %125, %130
  %132 = or i32 %126, 1
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds float, float* %123, i64 %133
  %135 = load float, float* %134, align 4
  %136 = add i32 %119, 2
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds float, float* %123, i64 %137
  %139 = load float, float* %138, align 4
  %140 = fmul float %135, %139
  %141 = fsub float %131, %140
  store float %141, float* %81, align 4
  %142 = load i32, i32* %52, align 4
  %143 = zext i32 %142 to i64
  %144 = load float*, float** %122, align 8
  %145 = getelementptr inbounds float, float* %144, i64 %143
  %146 = load float, float* %145, align 4
  %147 = shl i32 %142, 1
  %148 = add i32 %147, 2
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds float, float* %144, i64 %149
  %151 = load float, float* %150, align 4
  %152 = fmul float %146, %151
  %153 = zext i32 %147 to i64
  %154 = getelementptr inbounds float, float* %144, i64 %153
  %155 = load float, float* %154, align 4
  %156 = add i32 %142, 2
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds float, float* %144, i64 %157
  %159 = load float, float* %158, align 4
  %160 = fmul float %155, %159
  %161 = fsub float %152, %160
  %162 = fsub float -0.000000e+00, %161
  %163 = getelementptr inbounds float, float* %81, i64 1
  store float %162, float* %163, align 4
  %164 = load i32, i32* %52, align 4
  %165 = zext i32 %164 to i64
  %166 = load float*, float** %122, align 8
  %167 = getelementptr inbounds float, float* %166, i64 %165
  %168 = load float, float* %167, align 4
  %169 = shl i32 %164, 1
  %170 = or i32 %169, 1
  %171 = zext i32 %170 to i64
  %172 = getelementptr inbounds float, float* %166, i64 %171
  %173 = load float, float* %172, align 4
  %174 = fmul float %168, %173
  %175 = zext i32 %169 to i64
  %176 = getelementptr inbounds float, float* %166, i64 %175
  %177 = load float, float* %176, align 4
  %178 = add i32 %164, 1
  %179 = zext i32 %178 to i64
  %180 = getelementptr inbounds float, float* %166, i64 %179
  %181 = load float, float* %180, align 4
  %182 = fmul float %177, %181
  %183 = fsub float %174, %182
  %184 = getelementptr inbounds float, float* %81, i64 2
  store float %183, float* %184, align 4
  %185 = load float*, float** %122, align 8
  %186 = getelementptr inbounds float, float* %185, i64 1
  %187 = load float, float* %186, align 4
  %188 = load i32, i32* %52, align 4
  %189 = shl i32 %188, 1
  %190 = add i32 %189, 2
  %191 = zext i32 %190 to i64
  %192 = getelementptr inbounds float, float* %185, i64 %191
  %193 = load float, float* %192, align 4
  %194 = fmul float %187, %193
  %195 = or i32 %189, 1
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds float, float* %185, i64 %196
  %198 = load float, float* %197, align 4
  %199 = getelementptr inbounds float, float* %185, i64 2
  %200 = load float, float* %199, align 4
  %201 = fmul float %198, %200
  %202 = fsub float %194, %201
  %203 = fsub float -0.000000e+00, %202
  %204 = zext i32 %53 to i64
  %205 = getelementptr inbounds float, float* %81, i64 %204
  store float %203, float* %205, align 4
  %206 = load float*, float** %122, align 8
  %207 = load float, float* %206, align 4
  %208 = load i32, i32* %52, align 4
  %209 = shl i32 %208, 1
  %210 = add i32 %209, 2
  %211 = zext i32 %210 to i64
  %212 = getelementptr inbounds float, float* %206, i64 %211
  %213 = load float, float* %212, align 4
  %214 = fmul float %207, %213
  %215 = zext i32 %209 to i64
  %216 = getelementptr inbounds float, float* %206, i64 %215
  %217 = load float, float* %216, align 4
  %218 = getelementptr inbounds float, float* %206, i64 2
  %219 = load float, float* %218, align 4
  %220 = fmul float %217, %219
  %221 = fsub float %214, %220
  %222 = load i32, i32* %12, align 4
  %223 = add i32 %222, 1
  %224 = zext i32 %223 to i64
  %225 = load float*, float** %8, align 8
  %226 = getelementptr inbounds float, float* %225, i64 %224
  store float %221, float* %226, align 4
  %227 = load float*, float** %122, align 8
  %228 = load float, float* %227, align 4
  %229 = load i32, i32* %52, align 4
  %230 = shl i32 %229, 1
  %231 = or i32 %230, 1
  %232 = zext i32 %231 to i64
  %233 = getelementptr inbounds float, float* %227, i64 %232
  %234 = load float, float* %233, align 4
  %235 = fmul float %228, %234
  %236 = zext i32 %230 to i64
  %237 = getelementptr inbounds float, float* %227, i64 %236
  %238 = load float, float* %237, align 4
  %239 = getelementptr inbounds float, float* %227, i64 1
  %240 = load float, float* %239, align 4
  %241 = fmul float %238, %240
  %242 = fsub float %235, %241
  %243 = fsub float -0.000000e+00, %242
  %244 = load i32, i32* %12, align 4
  %245 = add i32 %244, 2
  %246 = zext i32 %245 to i64
  %247 = load float*, float** %8, align 8
  %248 = getelementptr inbounds float, float* %247, i64 %246
  store float %243, float* %248, align 4
  %249 = load float*, float** %122, align 8
  %250 = getelementptr inbounds float, float* %249, i64 1
  %251 = load float, float* %250, align 4
  %252 = load i32, i32* %52, align 4
  %253 = add i32 %252, 2
  %254 = zext i32 %253 to i64
  %255 = getelementptr inbounds float, float* %249, i64 %254
  %256 = load float, float* %255, align 4
  %257 = fmul float %251, %256
  %258 = add i32 %252, 1
  %259 = zext i32 %258 to i64
  %260 = getelementptr inbounds float, float* %249, i64 %259
  %261 = load float, float* %260, align 4
  %262 = getelementptr inbounds float, float* %249, i64 2
  %263 = load float, float* %262, align 4
  %264 = fmul float %261, %263
  %265 = fsub float %257, %264
  %266 = load i32, i32* %12, align 4
  %267 = shl i32 %266, 1
  %268 = zext i32 %267 to i64
  %269 = load float*, float** %8, align 8
  %270 = getelementptr inbounds float, float* %269, i64 %268
  store float %265, float* %270, align 4
  %271 = load float*, float** %122, align 8
  %272 = load float, float* %271, align 4
  %273 = load i32, i32* %52, align 4
  %274 = add i32 %273, 2
  %275 = zext i32 %274 to i64
  %276 = getelementptr inbounds float, float* %271, i64 %275
  %277 = load float, float* %276, align 4
  %278 = fmul float %272, %277
  %279 = zext i32 %273 to i64
  %280 = getelementptr inbounds float, float* %271, i64 %279
  %281 = load float, float* %280, align 4
  %282 = getelementptr inbounds float, float* %271, i64 2
  %283 = load float, float* %282, align 4
  %284 = fmul float %281, %283
  %285 = fsub float %278, %284
  %286 = fsub float -0.000000e+00, %285
  %287 = load i32, i32* %12, align 4
  %288 = shl i32 %287, 1
  %289 = or i32 %288, 1
  %290 = zext i32 %289 to i64
  %291 = load float*, float** %8, align 8
  %292 = getelementptr inbounds float, float* %291, i64 %290
  store float %286, float* %292, align 4
  %293 = load float*, float** %122, align 8
  %294 = load float, float* %293, align 4
  %295 = load i32, i32* %52, align 4
  %296 = add i32 %295, 1
  %297 = zext i32 %296 to i64
  %298 = getelementptr inbounds float, float* %293, i64 %297
  %299 = load float, float* %298, align 4
  %300 = fmul float %294, %299
  %301 = zext i32 %295 to i64
  %302 = getelementptr inbounds float, float* %293, i64 %301
  %303 = load float, float* %302, align 4
  %304 = getelementptr inbounds float, float* %293, i64 1
  %305 = load float, float* %304, align 4
  %306 = fmul float %303, %305
  %307 = fsub float %300, %306
  %308 = load i32, i32* %12, align 4
  %309 = shl i32 %308, 1
  %310 = add i32 %309, 2
  %311 = zext i32 %310 to i64
  %312 = load float*, float** %8, align 8
  %313 = getelementptr inbounds float, float* %312, i64 %311
  store float %307, float* %313, align 4
  br label %1189

314:                                              ; preds = %87
  %315 = load i32, i32* %52, align 4
  %316 = add i32 %315, 1
  %317 = zext i32 %316 to i64
  %318 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 0, i32 0, i32 0
  %319 = load float*, float** %318, align 8
  %320 = getelementptr inbounds float, float* %319, i64 %317
  %321 = load float, float* %320, align 4
  %322 = shl i32 %315, 1
  %323 = add i32 %322, 2
  %324 = zext i32 %323 to i64
  %325 = getelementptr inbounds float, float* %319, i64 %324
  %326 = load float, float* %325, align 4
  %327 = fmul float %321, %326
  %328 = mul i32 %315, 3
  %329 = add i32 %328, 3
  %330 = zext i32 %329 to i64
  %331 = getelementptr inbounds float, float* %319, i64 %330
  %332 = load float, float* %331, align 4
  %333 = fmul float %327, %332
  %334 = or i32 %322, 1
  %335 = zext i32 %334 to i64
  %336 = getelementptr inbounds float, float* %319, i64 %335
  %337 = load float, float* %336, align 4
  %338 = add i32 %328, 2
  %339 = zext i32 %338 to i64
  %340 = getelementptr inbounds float, float* %319, i64 %339
  %341 = load float, float* %340, align 4
  %342 = fmul float %337, %341
  %343 = add i32 %315, 3
  %344 = zext i32 %343 to i64
  %345 = getelementptr inbounds float, float* %319, i64 %344
  %346 = load float, float* %345, align 4
  %347 = fmul float %342, %346
  %348 = fadd float %333, %347
  %349 = add i32 %328, 1
  %350 = zext i32 %349 to i64
  %351 = getelementptr inbounds float, float* %319, i64 %350
  %352 = load float, float* %351, align 4
  %353 = add i32 %315, 2
  %354 = zext i32 %353 to i64
  %355 = getelementptr inbounds float, float* %319, i64 %354
  %356 = load float, float* %355, align 4
  %357 = fmul float %352, %356
  %358 = add i32 %322, 3
  %359 = zext i32 %358 to i64
  %360 = getelementptr inbounds float, float* %319, i64 %359
  %361 = load float, float* %360, align 4
  %362 = fmul float %357, %361
  %363 = fadd float %348, %362
  %364 = fmul float %321, %341
  %365 = fmul float %364, %361
  %366 = fsub float %363, %365
  %367 = fmul float %337, %356
  %368 = fmul float %332, %367
  %369 = fsub float %366, %368
  %370 = fmul float %326, %352
  %371 = fmul float %346, %370
  %372 = fsub float %369, %371
  store float %372, float* %81, align 4
  %373 = load i32, i32* %52, align 4
  %374 = zext i32 %373 to i64
  %375 = load float*, float** %318, align 8
  %376 = getelementptr inbounds float, float* %375, i64 %374
  %377 = load float, float* %376, align 4
  %378 = shl i32 %373, 1
  %379 = add i32 %378, 2
  %380 = zext i32 %379 to i64
  %381 = getelementptr inbounds float, float* %375, i64 %380
  %382 = load float, float* %381, align 4
  %383 = fmul float %377, %382
  %384 = mul i32 %373, 3
  %385 = add i32 %384, 3
  %386 = zext i32 %385 to i64
  %387 = getelementptr inbounds float, float* %375, i64 %386
  %388 = load float, float* %387, align 4
  %389 = fmul float %383, %388
  %390 = zext i32 %378 to i64
  %391 = getelementptr inbounds float, float* %375, i64 %390
  %392 = load float, float* %391, align 4
  %393 = add i32 %384, 2
  %394 = zext i32 %393 to i64
  %395 = getelementptr inbounds float, float* %375, i64 %394
  %396 = load float, float* %395, align 4
  %397 = fmul float %392, %396
  %398 = add i32 %373, 3
  %399 = zext i32 %398 to i64
  %400 = getelementptr inbounds float, float* %375, i64 %399
  %401 = load float, float* %400, align 4
  %402 = fmul float %397, %401
  %403 = fadd float %389, %402
  %404 = zext i32 %384 to i64
  %405 = getelementptr inbounds float, float* %375, i64 %404
  %406 = load float, float* %405, align 4
  %407 = add i32 %373, 2
  %408 = zext i32 %407 to i64
  %409 = getelementptr inbounds float, float* %375, i64 %408
  %410 = load float, float* %409, align 4
  %411 = fmul float %406, %410
  %412 = add i32 %378, 3
  %413 = zext i32 %412 to i64
  %414 = getelementptr inbounds float, float* %375, i64 %413
  %415 = load float, float* %414, align 4
  %416 = fmul float %411, %415
  %417 = fadd float %403, %416
  %418 = fmul float %377, %396
  %419 = fmul float %418, %415
  %420 = fsub float %417, %419
  %421 = fmul float %392, %410
  %422 = fmul float %388, %421
  %423 = fsub float %420, %422
  %424 = fmul float %382, %406
  %425 = fmul float %401, %424
  %426 = fsub float %423, %425
  %427 = fsub float -0.000000e+00, %426
  %428 = load float*, float** %8, align 8
  %429 = getelementptr inbounds float, float* %428, i64 1
  store float %427, float* %429, align 4
  %430 = load i32, i32* %52, align 4
  %431 = zext i32 %430 to i64
  %432 = load float*, float** %318, align 8
  %433 = getelementptr inbounds float, float* %432, i64 %431
  %434 = load float, float* %433, align 4
  %435 = shl i32 %430, 1
  %436 = or i32 %435, 1
  %437 = zext i32 %436 to i64
  %438 = getelementptr inbounds float, float* %432, i64 %437
  %439 = load float, float* %438, align 4
  %440 = fmul float %434, %439
  %441 = mul i32 %430, 3
  %442 = add i32 %441, 3
  %443 = zext i32 %442 to i64
  %444 = getelementptr inbounds float, float* %432, i64 %443
  %445 = load float, float* %444, align 4
  %446 = fmul float %440, %445
  %447 = zext i32 %435 to i64
  %448 = getelementptr inbounds float, float* %432, i64 %447
  %449 = load float, float* %448, align 4
  %450 = add i32 %441, 1
  %451 = zext i32 %450 to i64
  %452 = getelementptr inbounds float, float* %432, i64 %451
  %453 = load float, float* %452, align 4
  %454 = fmul float %449, %453
  %455 = add i32 %430, 3
  %456 = zext i32 %455 to i64
  %457 = getelementptr inbounds float, float* %432, i64 %456
  %458 = load float, float* %457, align 4
  %459 = fmul float %454, %458
  %460 = fadd float %446, %459
  %461 = zext i32 %441 to i64
  %462 = getelementptr inbounds float, float* %432, i64 %461
  %463 = load float, float* %462, align 4
  %464 = add i32 %430, 1
  %465 = zext i32 %464 to i64
  %466 = getelementptr inbounds float, float* %432, i64 %465
  %467 = load float, float* %466, align 4
  %468 = fmul float %463, %467
  %469 = add i32 %435, 3
  %470 = zext i32 %469 to i64
  %471 = getelementptr inbounds float, float* %432, i64 %470
  %472 = load float, float* %471, align 4
  %473 = fmul float %468, %472
  %474 = fadd float %460, %473
  %475 = fmul float %434, %453
  %476 = fmul float %475, %472
  %477 = fsub float %474, %476
  %478 = fmul float %449, %467
  %479 = fmul float %445, %478
  %480 = fsub float %477, %479
  %481 = fmul float %439, %463
  %482 = fmul float %458, %481
  %483 = fsub float %480, %482
  %484 = load float*, float** %8, align 8
  %485 = getelementptr inbounds float, float* %484, i64 2
  store float %483, float* %485, align 4
  %486 = load i32, i32* %52, align 4
  %487 = zext i32 %486 to i64
  %488 = load float*, float** %318, align 8
  %489 = getelementptr inbounds float, float* %488, i64 %487
  %490 = load float, float* %489, align 4
  %491 = shl i32 %486, 1
  %492 = or i32 %491, 1
  %493 = zext i32 %492 to i64
  %494 = getelementptr inbounds float, float* %488, i64 %493
  %495 = load float, float* %494, align 4
  %496 = fmul float %490, %495
  %497 = mul i32 %486, 3
  %498 = add i32 %497, 2
  %499 = zext i32 %498 to i64
  %500 = getelementptr inbounds float, float* %488, i64 %499
  %501 = load float, float* %500, align 4
  %502 = fmul float %496, %501
  %503 = zext i32 %491 to i64
  %504 = getelementptr inbounds float, float* %488, i64 %503
  %505 = load float, float* %504, align 4
  %506 = add i32 %497, 1
  %507 = zext i32 %506 to i64
  %508 = getelementptr inbounds float, float* %488, i64 %507
  %509 = load float, float* %508, align 4
  %510 = fmul float %505, %509
  %511 = add i32 %486, 2
  %512 = zext i32 %511 to i64
  %513 = getelementptr inbounds float, float* %488, i64 %512
  %514 = load float, float* %513, align 4
  %515 = fmul float %510, %514
  %516 = fadd float %502, %515
  %517 = zext i32 %497 to i64
  %518 = getelementptr inbounds float, float* %488, i64 %517
  %519 = load float, float* %518, align 4
  %520 = add i32 %486, 1
  %521 = zext i32 %520 to i64
  %522 = getelementptr inbounds float, float* %488, i64 %521
  %523 = load float, float* %522, align 4
  %524 = fmul float %519, %523
  %525 = add i32 %491, 2
  %526 = zext i32 %525 to i64
  %527 = getelementptr inbounds float, float* %488, i64 %526
  %528 = load float, float* %527, align 4
  %529 = fmul float %524, %528
  %530 = fadd float %516, %529
  %531 = fmul float %490, %509
  %532 = fmul float %531, %528
  %533 = fsub float %530, %532
  %534 = fmul float %505, %523
  %535 = fmul float %501, %534
  %536 = fsub float %533, %535
  %537 = fmul float %495, %519
  %538 = fmul float %514, %537
  %539 = fsub float %536, %538
  %540 = fsub float -0.000000e+00, %539
  %541 = getelementptr inbounds float, float* %484, i64 3
  store float %540, float* %541, align 4
  %542 = load float*, float** %318, align 8
  %543 = getelementptr inbounds float, float* %542, i64 1
  %544 = load float, float* %543, align 4
  %545 = load i32, i32* %52, align 4
  %546 = shl i32 %545, 1
  %547 = add i32 %546, 2
  %548 = zext i32 %547 to i64
  %549 = getelementptr inbounds float, float* %542, i64 %548
  %550 = load float, float* %549, align 4
  %551 = fmul float %544, %550
  %552 = mul i32 %545, 3
  %553 = add i32 %552, 3
  %554 = zext i32 %553 to i64
  %555 = getelementptr inbounds float, float* %542, i64 %554
  %556 = load float, float* %555, align 4
  %557 = fmul float %551, %556
  %558 = or i32 %546, 1
  %559 = zext i32 %558 to i64
  %560 = getelementptr inbounds float, float* %542, i64 %559
  %561 = load float, float* %560, align 4
  %562 = add i32 %552, 2
  %563 = zext i32 %562 to i64
  %564 = getelementptr inbounds float, float* %542, i64 %563
  %565 = load float, float* %564, align 4
  %566 = fmul float %561, %565
  %567 = getelementptr inbounds float, float* %542, i64 3
  %568 = load float, float* %567, align 4
  %569 = fmul float %566, %568
  %570 = fadd float %557, %569
  %571 = add i32 %552, 1
  %572 = zext i32 %571 to i64
  %573 = getelementptr inbounds float, float* %542, i64 %572
  %574 = load float, float* %573, align 4
  %575 = getelementptr inbounds float, float* %542, i64 2
  %576 = load float, float* %575, align 4
  %577 = fmul float %574, %576
  %578 = add i32 %546, 3
  %579 = zext i32 %578 to i64
  %580 = getelementptr inbounds float, float* %542, i64 %579
  %581 = load float, float* %580, align 4
  %582 = fmul float %577, %581
  %583 = fadd float %570, %582
  %584 = fmul float %544, %565
  %585 = fmul float %584, %581
  %586 = fsub float %583, %585
  %587 = fmul float %561, %576
  %588 = fmul float %556, %587
  %589 = fsub float %586, %588
  %590 = fmul float %550, %574
  %591 = fmul float %568, %590
  %592 = fsub float %589, %591
  %593 = fsub float -0.000000e+00, %592
  %594 = load i32, i32* %12, align 4
  %595 = zext i32 %594 to i64
  %596 = getelementptr inbounds float, float* %484, i64 %595
  store float %593, float* %596, align 4
  %597 = load float*, float** %318, align 8
  %598 = load float, float* %597, align 4
  %599 = load i32, i32* %52, align 4
  %600 = shl i32 %599, 1
  %601 = add i32 %600, 2
  %602 = zext i32 %601 to i64
  %603 = getelementptr inbounds float, float* %597, i64 %602
  %604 = load float, float* %603, align 4
  %605 = fmul float %598, %604
  %606 = mul i32 %599, 3
  %607 = add i32 %606, 3
  %608 = zext i32 %607 to i64
  %609 = getelementptr inbounds float, float* %597, i64 %608
  %610 = load float, float* %609, align 4
  %611 = fmul float %605, %610
  %612 = zext i32 %600 to i64
  %613 = getelementptr inbounds float, float* %597, i64 %612
  %614 = load float, float* %613, align 4
  %615 = add i32 %606, 2
  %616 = zext i32 %615 to i64
  %617 = getelementptr inbounds float, float* %597, i64 %616
  %618 = load float, float* %617, align 4
  %619 = fmul float %614, %618
  %620 = getelementptr inbounds float, float* %597, i64 3
  %621 = load float, float* %620, align 4
  %622 = fmul float %619, %621
  %623 = fadd float %611, %622
  %624 = zext i32 %606 to i64
  %625 = getelementptr inbounds float, float* %597, i64 %624
  %626 = load float, float* %625, align 4
  %627 = getelementptr inbounds float, float* %597, i64 2
  %628 = load float, float* %627, align 4
  %629 = fmul float %626, %628
  %630 = add i32 %600, 3
  %631 = zext i32 %630 to i64
  %632 = getelementptr inbounds float, float* %597, i64 %631
  %633 = load float, float* %632, align 4
  %634 = fmul float %629, %633
  %635 = fadd float %623, %634
  %636 = fmul float %598, %618
  %637 = fmul float %636, %633
  %638 = fsub float %635, %637
  %639 = fmul float %614, %628
  %640 = fmul float %610, %639
  %641 = fsub float %638, %640
  %642 = fmul float %604, %626
  %643 = fmul float %621, %642
  %644 = fsub float %641, %643
  %645 = load i32, i32* %12, align 4
  %646 = add i32 %645, 1
  %647 = zext i32 %646 to i64
  %648 = load float*, float** %8, align 8
  %649 = getelementptr inbounds float, float* %648, i64 %647
  store float %644, float* %649, align 4
  %650 = load float*, float** %318, align 8
  %651 = load float, float* %650, align 4
  %652 = load i32, i32* %52, align 4
  %653 = shl i32 %652, 1
  %654 = or i32 %653, 1
  %655 = zext i32 %654 to i64
  %656 = getelementptr inbounds float, float* %650, i64 %655
  %657 = load float, float* %656, align 4
  %658 = fmul float %651, %657
  %659 = mul i32 %652, 3
  %660 = add i32 %659, 3
  %661 = zext i32 %660 to i64
  %662 = getelementptr inbounds float, float* %650, i64 %661
  %663 = load float, float* %662, align 4
  %664 = fmul float %658, %663
  %665 = zext i32 %653 to i64
  %666 = getelementptr inbounds float, float* %650, i64 %665
  %667 = load float, float* %666, align 4
  %668 = add i32 %659, 1
  %669 = zext i32 %668 to i64
  %670 = getelementptr inbounds float, float* %650, i64 %669
  %671 = load float, float* %670, align 4
  %672 = fmul float %667, %671
  %673 = getelementptr inbounds float, float* %650, i64 3
  %674 = load float, float* %673, align 4
  %675 = fmul float %672, %674
  %676 = fadd float %664, %675
  %677 = zext i32 %659 to i64
  %678 = getelementptr inbounds float, float* %650, i64 %677
  %679 = load float, float* %678, align 4
  %680 = getelementptr inbounds float, float* %650, i64 1
  %681 = load float, float* %680, align 4
  %682 = fmul float %679, %681
  %683 = add i32 %653, 3
  %684 = zext i32 %683 to i64
  %685 = getelementptr inbounds float, float* %650, i64 %684
  %686 = load float, float* %685, align 4
  %687 = fmul float %682, %686
  %688 = fadd float %676, %687
  %689 = fmul float %651, %671
  %690 = fmul float %689, %686
  %691 = fsub float %688, %690
  %692 = fmul float %667, %681
  %693 = fmul float %663, %692
  %694 = fsub float %691, %693
  %695 = fmul float %657, %679
  %696 = fmul float %674, %695
  %697 = fsub float %694, %696
  %698 = fsub float -0.000000e+00, %697
  %699 = load i32, i32* %12, align 4
  %700 = add i32 %699, 2
  %701 = zext i32 %700 to i64
  %702 = load float*, float** %8, align 8
  %703 = getelementptr inbounds float, float* %702, i64 %701
  store float %698, float* %703, align 4
  %704 = load float*, float** %318, align 8
  %705 = load float, float* %704, align 4
  %706 = load i32, i32* %52, align 4
  %707 = shl i32 %706, 1
  %708 = or i32 %707, 1
  %709 = zext i32 %708 to i64
  %710 = getelementptr inbounds float, float* %704, i64 %709
  %711 = load float, float* %710, align 4
  %712 = fmul float %705, %711
  %713 = mul i32 %706, 3
  %714 = add i32 %713, 2
  %715 = zext i32 %714 to i64
  %716 = getelementptr inbounds float, float* %704, i64 %715
  %717 = load float, float* %716, align 4
  %718 = fmul float %712, %717
  %719 = zext i32 %707 to i64
  %720 = getelementptr inbounds float, float* %704, i64 %719
  %721 = load float, float* %720, align 4
  %722 = add i32 %713, 1
  %723 = zext i32 %722 to i64
  %724 = getelementptr inbounds float, float* %704, i64 %723
  %725 = load float, float* %724, align 4
  %726 = fmul float %721, %725
  %727 = getelementptr inbounds float, float* %704, i64 2
  %728 = load float, float* %727, align 4
  %729 = fmul float %726, %728
  %730 = fadd float %718, %729
  %731 = zext i32 %713 to i64
  %732 = getelementptr inbounds float, float* %704, i64 %731
  %733 = load float, float* %732, align 4
  %734 = getelementptr inbounds float, float* %704, i64 1
  %735 = load float, float* %734, align 4
  %736 = fmul float %733, %735
  %737 = add i32 %707, 2
  %738 = zext i32 %737 to i64
  %739 = getelementptr inbounds float, float* %704, i64 %738
  %740 = load float, float* %739, align 4
  %741 = fmul float %736, %740
  %742 = fadd float %730, %741
  %743 = fmul float %705, %725
  %744 = fmul float %743, %740
  %745 = fsub float %742, %744
  %746 = fmul float %721, %735
  %747 = fmul float %717, %746
  %748 = fsub float %745, %747
  %749 = fmul float %711, %733
  %750 = fmul float %728, %749
  %751 = fsub float %748, %750
  %752 = load i32, i32* %12, align 4
  %753 = add i32 %752, 3
  %754 = zext i32 %753 to i64
  %755 = load float*, float** %8, align 8
  %756 = getelementptr inbounds float, float* %755, i64 %754
  store float %751, float* %756, align 4
  %757 = load float*, float** %318, align 8
  %758 = getelementptr inbounds float, float* %757, i64 1
  %759 = load float, float* %758, align 4
  %760 = load i32, i32* %52, align 4
  %761 = add i32 %760, 2
  %762 = zext i32 %761 to i64
  %763 = getelementptr inbounds float, float* %757, i64 %762
  %764 = load float, float* %763, align 4
  %765 = fmul float %759, %764
  %766 = mul i32 %760, 3
  %767 = add i32 %766, 3
  %768 = zext i32 %767 to i64
  %769 = getelementptr inbounds float, float* %757, i64 %768
  %770 = load float, float* %769, align 4
  %771 = fmul float %765, %770
  %772 = add i32 %760, 1
  %773 = zext i32 %772 to i64
  %774 = getelementptr inbounds float, float* %757, i64 %773
  %775 = load float, float* %774, align 4
  %776 = add i32 %766, 2
  %777 = zext i32 %776 to i64
  %778 = getelementptr inbounds float, float* %757, i64 %777
  %779 = load float, float* %778, align 4
  %780 = fmul float %775, %779
  %781 = getelementptr inbounds float, float* %757, i64 3
  %782 = load float, float* %781, align 4
  %783 = fmul float %780, %782
  %784 = fadd float %771, %783
  %785 = add i32 %766, 1
  %786 = zext i32 %785 to i64
  %787 = getelementptr inbounds float, float* %757, i64 %786
  %788 = load float, float* %787, align 4
  %789 = getelementptr inbounds float, float* %757, i64 2
  %790 = load float, float* %789, align 4
  %791 = fmul float %788, %790
  %792 = add i32 %760, 3
  %793 = zext i32 %792 to i64
  %794 = getelementptr inbounds float, float* %757, i64 %793
  %795 = load float, float* %794, align 4
  %796 = fmul float %791, %795
  %797 = fadd float %784, %796
  %798 = fmul float %759, %779
  %799 = fmul float %798, %795
  %800 = fsub float %797, %799
  %801 = fmul float %775, %790
  %802 = fmul float %770, %801
  %803 = fsub float %800, %802
  %804 = fmul float %764, %788
  %805 = fmul float %782, %804
  %806 = fsub float %803, %805
  %807 = load i32, i32* %12, align 4
  %808 = shl i32 %807, 1
  %809 = zext i32 %808 to i64
  %810 = load float*, float** %8, align 8
  %811 = getelementptr inbounds float, float* %810, i64 %809
  store float %806, float* %811, align 4
  %812 = load float*, float** %318, align 8
  %813 = load float, float* %812, align 4
  %814 = load i32, i32* %52, align 4
  %815 = add i32 %814, 2
  %816 = zext i32 %815 to i64
  %817 = getelementptr inbounds float, float* %812, i64 %816
  %818 = load float, float* %817, align 4
  %819 = fmul float %813, %818
  %820 = mul i32 %814, 3
  %821 = add i32 %820, 3
  %822 = zext i32 %821 to i64
  %823 = getelementptr inbounds float, float* %812, i64 %822
  %824 = load float, float* %823, align 4
  %825 = fmul float %819, %824
  %826 = zext i32 %814 to i64
  %827 = getelementptr inbounds float, float* %812, i64 %826
  %828 = load float, float* %827, align 4
  %829 = add i32 %820, 2
  %830 = zext i32 %829 to i64
  %831 = getelementptr inbounds float, float* %812, i64 %830
  %832 = load float, float* %831, align 4
  %833 = fmul float %828, %832
  %834 = getelementptr inbounds float, float* %812, i64 3
  %835 = load float, float* %834, align 4
  %836 = fmul float %833, %835
  %837 = fadd float %825, %836
  %838 = zext i32 %820 to i64
  %839 = getelementptr inbounds float, float* %812, i64 %838
  %840 = load float, float* %839, align 4
  %841 = getelementptr inbounds float, float* %812, i64 2
  %842 = load float, float* %841, align 4
  %843 = fmul float %840, %842
  %844 = add i32 %814, 3
  %845 = zext i32 %844 to i64
  %846 = getelementptr inbounds float, float* %812, i64 %845
  %847 = load float, float* %846, align 4
  %848 = fmul float %843, %847
  %849 = fadd float %837, %848
  %850 = fmul float %813, %832
  %851 = fmul float %850, %847
  %852 = fsub float %849, %851
  %853 = fmul float %828, %842
  %854 = fmul float %824, %853
  %855 = fsub float %852, %854
  %856 = fmul float %818, %840
  %857 = fmul float %835, %856
  %858 = fsub float %855, %857
  %859 = fsub float -0.000000e+00, %858
  %860 = load i32, i32* %12, align 4
  %861 = shl i32 %860, 1
  %862 = or i32 %861, 1
  %863 = zext i32 %862 to i64
  %864 = load float*, float** %8, align 8
  %865 = getelementptr inbounds float, float* %864, i64 %863
  store float %859, float* %865, align 4
  %866 = load float*, float** %318, align 8
  %867 = load float, float* %866, align 4
  %868 = load i32, i32* %52, align 4
  %869 = add i32 %868, 1
  %870 = zext i32 %869 to i64
  %871 = getelementptr inbounds float, float* %866, i64 %870
  %872 = load float, float* %871, align 4
  %873 = fmul float %867, %872
  %874 = mul i32 %868, 3
  %875 = add i32 %874, 3
  %876 = zext i32 %875 to i64
  %877 = getelementptr inbounds float, float* %866, i64 %876
  %878 = load float, float* %877, align 4
  %879 = fmul float %873, %878
  %880 = zext i32 %868 to i64
  %881 = getelementptr inbounds float, float* %866, i64 %880
  %882 = load float, float* %881, align 4
  %883 = add i32 %874, 1
  %884 = zext i32 %883 to i64
  %885 = getelementptr inbounds float, float* %866, i64 %884
  %886 = load float, float* %885, align 4
  %887 = fmul float %882, %886
  %888 = getelementptr inbounds float, float* %866, i64 3
  %889 = load float, float* %888, align 4
  %890 = fmul float %887, %889
  %891 = fadd float %879, %890
  %892 = zext i32 %874 to i64
  %893 = getelementptr inbounds float, float* %866, i64 %892
  %894 = load float, float* %893, align 4
  %895 = getelementptr inbounds float, float* %866, i64 1
  %896 = load float, float* %895, align 4
  %897 = fmul float %894, %896
  %898 = add i32 %868, 3
  %899 = zext i32 %898 to i64
  %900 = getelementptr inbounds float, float* %866, i64 %899
  %901 = load float, float* %900, align 4
  %902 = fmul float %897, %901
  %903 = fadd float %891, %902
  %904 = fmul float %867, %886
  %905 = fmul float %904, %901
  %906 = fsub float %903, %905
  %907 = fmul float %882, %896
  %908 = fmul float %878, %907
  %909 = fsub float %906, %908
  %910 = fmul float %872, %894
  %911 = fmul float %889, %910
  %912 = fsub float %909, %911
  %913 = load i32, i32* %12, align 4
  %914 = shl i32 %913, 1
  %915 = add i32 %914, 2
  %916 = zext i32 %915 to i64
  %917 = load float*, float** %8, align 8
  %918 = getelementptr inbounds float, float* %917, i64 %916
  store float %912, float* %918, align 4
  %919 = load float*, float** %318, align 8
  %920 = load float, float* %919, align 4
  %921 = load i32, i32* %52, align 4
  %922 = add i32 %921, 1
  %923 = zext i32 %922 to i64
  %924 = getelementptr inbounds float, float* %919, i64 %923
  %925 = load float, float* %924, align 4
  %926 = fmul float %920, %925
  %927 = mul i32 %921, 3
  %928 = add i32 %927, 2
  %929 = zext i32 %928 to i64
  %930 = getelementptr inbounds float, float* %919, i64 %929
  %931 = load float, float* %930, align 4
  %932 = fmul float %926, %931
  %933 = zext i32 %921 to i64
  %934 = getelementptr inbounds float, float* %919, i64 %933
  %935 = load float, float* %934, align 4
  %936 = add i32 %927, 1
  %937 = zext i32 %936 to i64
  %938 = getelementptr inbounds float, float* %919, i64 %937
  %939 = load float, float* %938, align 4
  %940 = fmul float %935, %939
  %941 = getelementptr inbounds float, float* %919, i64 2
  %942 = load float, float* %941, align 4
  %943 = fmul float %940, %942
  %944 = fadd float %932, %943
  %945 = zext i32 %927 to i64
  %946 = getelementptr inbounds float, float* %919, i64 %945
  %947 = load float, float* %946, align 4
  %948 = getelementptr inbounds float, float* %919, i64 1
  %949 = load float, float* %948, align 4
  %950 = fmul float %947, %949
  %951 = add i32 %921, 2
  %952 = zext i32 %951 to i64
  %953 = getelementptr inbounds float, float* %919, i64 %952
  %954 = load float, float* %953, align 4
  %955 = fmul float %950, %954
  %956 = fadd float %944, %955
  %957 = fmul float %920, %939
  %958 = fmul float %957, %954
  %959 = fsub float %956, %958
  %960 = fmul float %935, %949
  %961 = fmul float %931, %960
  %962 = fsub float %959, %961
  %963 = fmul float %925, %947
  %964 = fmul float %942, %963
  %965 = fsub float %962, %964
  %966 = fsub float -0.000000e+00, %965
  %967 = load i32, i32* %12, align 4
  %968 = shl i32 %967, 1
  %969 = add i32 %968, 3
  %970 = zext i32 %969 to i64
  %971 = load float*, float** %8, align 8
  %972 = getelementptr inbounds float, float* %971, i64 %970
  store float %966, float* %972, align 4
  %973 = load float*, float** %318, align 8
  %974 = getelementptr inbounds float, float* %973, i64 1
  %975 = load float, float* %974, align 4
  %976 = load i32, i32* %52, align 4
  %977 = add i32 %976, 2
  %978 = zext i32 %977 to i64
  %979 = getelementptr inbounds float, float* %973, i64 %978
  %980 = load float, float* %979, align 4
  %981 = fmul float %975, %980
  %982 = shl i32 %976, 1
  %983 = add i32 %982, 3
  %984 = zext i32 %983 to i64
  %985 = getelementptr inbounds float, float* %973, i64 %984
  %986 = load float, float* %985, align 4
  %987 = fmul float %981, %986
  %988 = add i32 %976, 1
  %989 = zext i32 %988 to i64
  %990 = getelementptr inbounds float, float* %973, i64 %989
  %991 = load float, float* %990, align 4
  %992 = add i32 %982, 2
  %993 = zext i32 %992 to i64
  %994 = getelementptr inbounds float, float* %973, i64 %993
  %995 = load float, float* %994, align 4
  %996 = fmul float %991, %995
  %997 = getelementptr inbounds float, float* %973, i64 3
  %998 = load float, float* %997, align 4
  %999 = fmul float %996, %998
  %1000 = fadd float %987, %999
  %1001 = or i32 %982, 1
  %1002 = zext i32 %1001 to i64
  %1003 = getelementptr inbounds float, float* %973, i64 %1002
  %1004 = load float, float* %1003, align 4
  %1005 = getelementptr inbounds float, float* %973, i64 2
  %1006 = load float, float* %1005, align 4
  %1007 = fmul float %1004, %1006
  %1008 = add i32 %976, 3
  %1009 = zext i32 %1008 to i64
  %1010 = getelementptr inbounds float, float* %973, i64 %1009
  %1011 = load float, float* %1010, align 4
  %1012 = fmul float %1007, %1011
  %1013 = fadd float %1000, %1012
  %1014 = fmul float %975, %995
  %1015 = fmul float %1014, %1011
  %1016 = fsub float %1013, %1015
  %1017 = fmul float %991, %1006
  %1018 = fmul float %986, %1017
  %1019 = fsub float %1016, %1018
  %1020 = fmul float %980, %1004
  %1021 = fmul float %998, %1020
  %1022 = fsub float %1019, %1021
  %1023 = fsub float -0.000000e+00, %1022
  %1024 = load i32, i32* %12, align 4
  %1025 = mul i32 %1024, 3
  %1026 = zext i32 %1025 to i64
  %1027 = load float*, float** %8, align 8
  %1028 = getelementptr inbounds float, float* %1027, i64 %1026
  store float %1023, float* %1028, align 4
  %1029 = load float*, float** %318, align 8
  %1030 = load float, float* %1029, align 4
  %1031 = load i32, i32* %52, align 4
  %1032 = add i32 %1031, 2
  %1033 = zext i32 %1032 to i64
  %1034 = getelementptr inbounds float, float* %1029, i64 %1033
  %1035 = load float, float* %1034, align 4
  %1036 = fmul float %1030, %1035
  %1037 = shl i32 %1031, 1
  %1038 = add i32 %1037, 3
  %1039 = zext i32 %1038 to i64
  %1040 = getelementptr inbounds float, float* %1029, i64 %1039
  %1041 = load float, float* %1040, align 4
  %1042 = fmul float %1036, %1041
  %1043 = zext i32 %1031 to i64
  %1044 = getelementptr inbounds float, float* %1029, i64 %1043
  %1045 = load float, float* %1044, align 4
  %1046 = add i32 %1037, 2
  %1047 = zext i32 %1046 to i64
  %1048 = getelementptr inbounds float, float* %1029, i64 %1047
  %1049 = load float, float* %1048, align 4
  %1050 = fmul float %1045, %1049
  %1051 = getelementptr inbounds float, float* %1029, i64 3
  %1052 = load float, float* %1051, align 4
  %1053 = fmul float %1050, %1052
  %1054 = fadd float %1042, %1053
  %1055 = zext i32 %1037 to i64
  %1056 = getelementptr inbounds float, float* %1029, i64 %1055
  %1057 = load float, float* %1056, align 4
  %1058 = getelementptr inbounds float, float* %1029, i64 2
  %1059 = load float, float* %1058, align 4
  %1060 = fmul float %1057, %1059
  %1061 = add i32 %1031, 3
  %1062 = zext i32 %1061 to i64
  %1063 = getelementptr inbounds float, float* %1029, i64 %1062
  %1064 = load float, float* %1063, align 4
  %1065 = fmul float %1060, %1064
  %1066 = fadd float %1054, %1065
  %1067 = fmul float %1030, %1049
  %1068 = fmul float %1067, %1064
  %1069 = fsub float %1066, %1068
  %1070 = fmul float %1045, %1059
  %1071 = fmul float %1041, %1070
  %1072 = fsub float %1069, %1071
  %1073 = fmul float %1035, %1057
  %1074 = fmul float %1052, %1073
  %1075 = fsub float %1072, %1074
  %1076 = load i32, i32* %12, align 4
  %1077 = mul i32 %1076, 3
  %1078 = add i32 %1077, 1
  %1079 = zext i32 %1078 to i64
  %1080 = load float*, float** %8, align 8
  %1081 = getelementptr inbounds float, float* %1080, i64 %1079
  store float %1075, float* %1081, align 4
  %1082 = load float*, float** %318, align 8
  %1083 = load float, float* %1082, align 4
  %1084 = load i32, i32* %52, align 4
  %1085 = add i32 %1084, 1
  %1086 = zext i32 %1085 to i64
  %1087 = getelementptr inbounds float, float* %1082, i64 %1086
  %1088 = load float, float* %1087, align 4
  %1089 = fmul float %1083, %1088
  %1090 = shl i32 %1084, 1
  %1091 = add i32 %1090, 3
  %1092 = zext i32 %1091 to i64
  %1093 = getelementptr inbounds float, float* %1082, i64 %1092
  %1094 = load float, float* %1093, align 4
  %1095 = fmul float %1089, %1094
  %1096 = zext i32 %1084 to i64
  %1097 = getelementptr inbounds float, float* %1082, i64 %1096
  %1098 = load float, float* %1097, align 4
  %1099 = or i32 %1090, 1
  %1100 = zext i32 %1099 to i64
  %1101 = getelementptr inbounds float, float* %1082, i64 %1100
  %1102 = load float, float* %1101, align 4
  %1103 = fmul float %1098, %1102
  %1104 = getelementptr inbounds float, float* %1082, i64 3
  %1105 = load float, float* %1104, align 4
  %1106 = fmul float %1103, %1105
  %1107 = fadd float %1095, %1106
  %1108 = zext i32 %1090 to i64
  %1109 = getelementptr inbounds float, float* %1082, i64 %1108
  %1110 = load float, float* %1109, align 4
  %1111 = getelementptr inbounds float, float* %1082, i64 1
  %1112 = load float, float* %1111, align 4
  %1113 = fmul float %1110, %1112
  %1114 = add i32 %1084, 3
  %1115 = zext i32 %1114 to i64
  %1116 = getelementptr inbounds float, float* %1082, i64 %1115
  %1117 = load float, float* %1116, align 4
  %1118 = fmul float %1113, %1117
  %1119 = fadd float %1107, %1118
  %1120 = fmul float %1083, %1102
  %1121 = fmul float %1120, %1117
  %1122 = fsub float %1119, %1121
  %1123 = fmul float %1098, %1112
  %1124 = fmul float %1094, %1123
  %1125 = fsub float %1122, %1124
  %1126 = fmul float %1088, %1110
  %1127 = fmul float %1105, %1126
  %1128 = fsub float %1125, %1127
  %1129 = fsub float -0.000000e+00, %1128
  %1130 = load i32, i32* %12, align 4
  %1131 = mul i32 %1130, 3
  %1132 = add i32 %1131, 2
  %1133 = zext i32 %1132 to i64
  %1134 = load float*, float** %8, align 8
  %1135 = getelementptr inbounds float, float* %1134, i64 %1133
  store float %1129, float* %1135, align 4
  %1136 = load float*, float** %318, align 8
  %1137 = load float, float* %1136, align 4
  %1138 = load i32, i32* %52, align 4
  %1139 = add i32 %1138, 1
  %1140 = zext i32 %1139 to i64
  %1141 = getelementptr inbounds float, float* %1136, i64 %1140
  %1142 = load float, float* %1141, align 4
  %1143 = fmul float %1137, %1142
  %1144 = shl i32 %1138, 1
  %1145 = add i32 %1144, 2
  %1146 = zext i32 %1145 to i64
  %1147 = getelementptr inbounds float, float* %1136, i64 %1146
  %1148 = load float, float* %1147, align 4
  %1149 = fmul float %1143, %1148
  %1150 = zext i32 %1138 to i64
  %1151 = getelementptr inbounds float, float* %1136, i64 %1150
  %1152 = load float, float* %1151, align 4
  %1153 = or i32 %1144, 1
  %1154 = zext i32 %1153 to i64
  %1155 = getelementptr inbounds float, float* %1136, i64 %1154
  %1156 = load float, float* %1155, align 4
  %1157 = fmul float %1152, %1156
  %1158 = getelementptr inbounds float, float* %1136, i64 2
  %1159 = load float, float* %1158, align 4
  %1160 = fmul float %1157, %1159
  %1161 = fadd float %1149, %1160
  %1162 = zext i32 %1144 to i64
  %1163 = getelementptr inbounds float, float* %1136, i64 %1162
  %1164 = load float, float* %1163, align 4
  %1165 = getelementptr inbounds float, float* %1136, i64 1
  %1166 = load float, float* %1165, align 4
  %1167 = fmul float %1164, %1166
  %1168 = add i32 %1138, 2
  %1169 = zext i32 %1168 to i64
  %1170 = getelementptr inbounds float, float* %1136, i64 %1169
  %1171 = load float, float* %1170, align 4
  %1172 = fmul float %1167, %1171
  %1173 = fadd float %1161, %1172
  %1174 = fmul float %1137, %1156
  %1175 = fmul float %1174, %1171
  %1176 = fsub float %1173, %1175
  %1177 = fmul float %1152, %1166
  %1178 = fmul float %1148, %1177
  %1179 = fsub float %1176, %1178
  %1180 = fmul float %1142, %1164
  %1181 = fmul float %1159, %1180
  %1182 = fsub float %1179, %1181
  %1183 = load i32, i32* %12, align 4
  %1184 = mul i32 %1183, 3
  %1185 = add i32 %1184, 3
  %1186 = zext i32 %1185 to i64
  %1187 = load float*, float** %8, align 8
  %1188 = getelementptr inbounds float, float* %1187, i64 %1186
  store float %1182, float* %1188, align 4
  br label %1189

1189:                                             ; preds = %87, %314, %118, %89
  %1190 = bitcast %"class.angle::Matrix"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1190) #18
  %1191 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 0
  %1192 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 1
  %1193 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 2
  %1194 = bitcast %"class.angle::Matrix"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1194, i8 -86, i64 32, i1 false)
  call void @_ZNK5angle6MatrixIfE9transposeEv(%"class.angle::Matrix"* nonnull sret %5, %"class.angle::Matrix"* nonnull %3)
  %1195 = call float @_ZNK5angle6MatrixIfE11determinantEv(%"class.angle::Matrix"* %1)
  %1196 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 0
  %1197 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 1
  %1198 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %1199 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 1
  %1200 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 2
  %1201 = bitcast %"class.std::__1::vector.41"* %6 to i8*
  %1202 = bitcast %"class.angle::Matrix"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1202, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1201) #18
  %1203 = load i64, i64* %16, align 8
  %1204 = load i64, i64* %18, align 8
  %1205 = sub i64 %1203, %1204
  %1206 = ashr exact i64 %1205, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1201, i8 0, i64 24, i1 false) #18
  %1207 = icmp eq i64 %1205, 0
  br i1 %1207, label %1229, label %1208

1208:                                             ; preds = %1189
  %1209 = icmp ugt i64 %1206, 4611686018427387903
  br i1 %1209, label %1210, label %1212

1210:                                             ; preds = %1208
  %1211 = bitcast %"class.std::__1::vector.41"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1211) #19
  unreachable

1212:                                             ; preds = %1208
  %1213 = call i8* @_Znwm(i64 %1205) #21
  %1214 = bitcast i8* %1213 to float*
  %1215 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %6, i64 0, i32 0, i32 1
  %1216 = bitcast %"class.std::__1::vector.41"* %6 to i8**
  store i8* %1213, i8** %1216, align 8
  %1217 = getelementptr inbounds float, float* %1214, i64 %1206
  %1218 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  store float* %1217, float** %1218, align 8
  %1219 = bitcast float** %1215 to i64*
  %1220 = ptrtoint i8* %1213 to i64
  %1221 = add nsw i64 %1206, -1
  %1222 = getelementptr float, float* %1214, i64 %1221
  %1223 = ptrtoint float* %1222 to i64
  %1224 = sub i64 4, %1220
  %1225 = add i64 %1224, %1223
  %1226 = and i64 %1225, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %1213, i8 0, i64 %1226, i1 false) #18
  %1227 = ptrtoint float* %1217 to i64
  store i64 %1227, i64* %1219, align 8
  %1228 = ptrtoint i8* %1213 to i64
  br label %1229

1229:                                             ; preds = %1189, %1212
  %1230 = phi i8* [ %1213, %1212 ], [ null, %1189 ]
  %1231 = phi float* [ %1214, %1212 ], [ null, %1189 ]
  %1232 = phi i64 [ %1228, %1212 ], [ 0, %1189 ]
  %1233 = phi i64 [ %1220, %1212 ], [ 0, %1189 ]
  %1234 = phi i64 [ %1227, %1212 ], [ 0, %1189 ]
  %1235 = load i32, i32* %50, align 8
  %1236 = load i32, i32* %52, align 4
  %1237 = bitcast %"class.angle::Matrix"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1237, i8 0, i64 24, i1 false) #18
  %1238 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %6, i64 0, i32 0, i32 1
  %1239 = bitcast float** %1238 to i64*
  %1240 = sub i64 %1234, %1233
  %1241 = ashr exact i64 %1240, 2
  %1242 = icmp eq i64 %1240, 0
  br i1 %1242, label %1263, label %1243

1243:                                             ; preds = %1229
  %1244 = icmp ugt i64 %1241, 4611686018427387903
  br i1 %1244, label %1245, label %1247

1245:                                             ; preds = %1243
  %1246 = bitcast %"class.angle::Matrix"* %0 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1246) #19
  unreachable

1247:                                             ; preds = %1243
  %1248 = call i8* @_Znwm(i64 %1240) #21
  %1249 = bitcast i8* %1248 to float*
  %1250 = bitcast float** %1197 to i8**
  store i8* %1248, i8** %1250, align 8
  %1251 = bitcast %"class.angle::Matrix"* %0 to i8**
  store i8* %1248, i8** %1251, align 8
  %1252 = getelementptr inbounds float, float* %1249, i64 %1241
  store float* %1252, float** %1198, align 8
  %1253 = bitcast float** %1197 to i64*
  %1254 = ptrtoint i8* %1248 to i64
  %1255 = sub i64 %1234, %1232
  %1256 = icmp sgt i64 %1255, 0
  br i1 %1256, label %1257, label %1261

1257:                                             ; preds = %1247
  %1258 = lshr exact i64 %1255, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %1248, i8* align 4 %1230, i64 %1255, i1 false) #18
  %1259 = getelementptr inbounds float, float* %1249, i64 %1258
  %1260 = ptrtoint float* %1259 to i64
  br label %1261

1261:                                             ; preds = %1257, %1247
  %1262 = phi i64 [ %1260, %1257 ], [ %1254, %1247 ]
  store i64 %1262, i64* %1253, align 8
  br label %1263

1263:                                             ; preds = %1229, %1261
  store i32 %1235, i32* %1199, align 8
  store i32 %1236, i32* %1200, align 4
  %1264 = icmp eq float* %1231, null
  br i1 %1264, label %1268, label %1265

1265:                                             ; preds = %1263
  %1266 = ptrtoint float* %1231 to i64
  store i64 %1266, i64* %1239, align 8
  call void @_ZdlPv(i8* %1230) #21
  %1267 = load i32, i32* %50, align 8
  br label %1268

1268:                                             ; preds = %1263, %1265
  %1269 = phi i32 [ %1235, %1263 ], [ %1267, %1265 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1201) #18
  %1270 = icmp eq i32 %1269, 0
  br i1 %1270, label %1308, label %1271

1271:                                             ; preds = %1268
  %1272 = fcmp une float %1195, 0.000000e+00
  %1273 = load i32, i32* %52, align 4
  br label %1274

1274:                                             ; preds = %1271, %1281
  %1275 = phi i32 [ %1269, %1271 ], [ %1282, %1281 ]
  %1276 = phi i32 [ %1273, %1271 ], [ %1283, %1281 ]
  %1277 = phi i32 [ 0, %1271 ], [ %1284, %1281 ]
  %1278 = icmp eq i32 %1276, 0
  br i1 %1278, label %1281, label %1286

1279:                                             ; preds = %1297
  %1280 = load i32, i32* %50, align 8
  br label %1281

1281:                                             ; preds = %1279, %1274
  %1282 = phi i32 [ %1280, %1279 ], [ %1275, %1274 ]
  %1283 = phi i32 [ %1306, %1279 ], [ 0, %1274 ]
  %1284 = add nuw i32 %1277, 1
  %1285 = icmp ult i32 %1284, %1282
  br i1 %1285, label %1274, label %1308

1286:                                             ; preds = %1274, %1297
  %1287 = phi i32 [ %1305, %1297 ], [ 0, %1274 ]
  br i1 %1272, label %1288, label %1297

1288:                                             ; preds = %1286
  %1289 = load i32, i32* %1193, align 4
  %1290 = mul i32 %1289, %1277
  %1291 = add i32 %1290, %1287
  %1292 = zext i32 %1291 to i64
  %1293 = load float*, float** %1191, align 8
  %1294 = getelementptr inbounds float, float* %1293, i64 %1292
  %1295 = load float, float* %1294, align 4
  %1296 = fdiv float %1295, %1195
  br label %1297

1297:                                             ; preds = %1286, %1288
  %1298 = phi float [ %1296, %1288 ], [ 0.000000e+00, %1286 ]
  %1299 = load i32, i32* %1200, align 4
  %1300 = mul i32 %1299, %1277
  %1301 = add i32 %1300, %1287
  %1302 = zext i32 %1301 to i64
  %1303 = load float*, float** %1196, align 8
  %1304 = getelementptr inbounds float, float* %1303, i64 %1302
  store float %1298, float* %1304, align 4
  %1305 = add nuw i32 %1287, 1
  %1306 = load i32, i32* %52, align 4
  %1307 = icmp ult i32 %1305, %1306
  br i1 %1307, label %1286, label %1279

1308:                                             ; preds = %1281, %1268
  %1309 = load float*, float** %1191, align 8
  %1310 = icmp eq float* %1309, null
  br i1 %1310, label %1315, label %1311

1311:                                             ; preds = %1308
  %1312 = ptrtoint float* %1309 to i64
  %1313 = bitcast float** %1192 to i64*
  store i64 %1312, i64* %1313, align 8
  %1314 = bitcast float* %1309 to i8*
  call void @_ZdlPv(i8* %1314) #21
  br label %1315

1315:                                             ; preds = %1308, %1311
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1190) #18
  %1316 = load float*, float** %8, align 8
  %1317 = icmp eq float* %1316, null
  br i1 %1317, label %1322, label %1318

1318:                                             ; preds = %1315
  %1319 = ptrtoint float* %1316 to i64
  %1320 = bitcast float** %9 to i64*
  store i64 %1319, i64* %1320, align 8
  %1321 = bitcast float* %1316 to i8*
  call void @_ZdlPv(i8* %1321) #21
  br label %1322

1322:                                             ; preds = %1315, %1318
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #18
  ret void
}

declare zeroext i1 @_ZNK2sh14TConstantUnioneqEj(%"class.sh::TConstantUnion"*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2sh20TIntermConstantUnion18foldFloatTypeUnaryERKNS_14TConstantUnionEPFffEPS1_(%"class.sh::TIntermConstantUnion"* nocapture readnone, %"class.sh::TConstantUnion"* dereferenceable(8), float (float)* nocapture, %"class.sh::TConstantUnion"* nocapture) local_unnamed_addr #0 align 2 {
  %5 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1) #18
  %6 = tail call float %2(float %5) #18
  %7 = bitcast %"class.sh::TConstantUnion"* %3 to float*
  store float %6, float* %7, align 4
  %8 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %3, i64 0, i32 1
  store i32 1, i32* %8, align 4
  ret void
}

; Function Attrs: nofree nounwind
declare float @sinf(float) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare float @cosf(float) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare float @tanf(float) local_unnamed_addr #9

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #7

; Function Attrs: nofree nounwind
declare float @asinf(float) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare float @acosf(float) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare float @atanf(float) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare float @sinhf(float) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare float @coshf(float) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare float @tanhf(float) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare float @asinhf(float) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare float @acoshf(float) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare float @atanhf(float) local_unnamed_addr #9

; Function Attrs: nofree nounwind readnone
declare float @floorf(float) local_unnamed_addr #10

; Function Attrs: nofree nounwind readnone
declare float @truncf(float) local_unnamed_addr #10

; Function Attrs: nofree nounwind readnone
declare float @roundf(float) local_unnamed_addr #10

; Function Attrs: nofree nounwind
declare float @modff(float, float* nocapture) local_unnamed_addr #9

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #7

; Function Attrs: nofree nounwind readnone
declare float @ceilf(float) local_unnamed_addr #10

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #7

; Function Attrs: nofree nounwind
declare float @expf(float) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare float @logf(float) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare float @exp2f(float) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare float @atan2f(float, float) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare float @powf(float, float) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5angle6MatrixIfE8compMultERKS1_(%"class.angle::Matrix"* noalias sret, %"class.angle::Matrix"*, %"class.angle::Matrix"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.std::__1::vector.41", align 8
  %5 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %8 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 2
  %10 = bitcast %"class.std::__1::vector.41"* %4 to i8*
  %11 = bitcast %"class.angle::Matrix"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #18
  %12 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 0, i32 0, i32 1
  %13 = bitcast float** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.angle::Matrix"* %1 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = ashr exact i64 %17, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 24, i1 false) #18
  %19 = icmp eq i64 %17, 0
  br i1 %19, label %41, label %20

20:                                               ; preds = %3
  %21 = icmp ugt i64 %18, 4611686018427387903
  br i1 %21, label %22, label %24

22:                                               ; preds = %20
  %23 = bitcast %"class.std::__1::vector.41"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %23) #19
  unreachable

24:                                               ; preds = %20
  %25 = tail call i8* @_Znwm(i64 %17) #21
  %26 = bitcast i8* %25 to float*
  %27 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 1
  %28 = bitcast %"class.std::__1::vector.41"* %4 to i8**
  store i8* %25, i8** %28, align 8
  %29 = getelementptr inbounds float, float* %26, i64 %18
  %30 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  store float* %29, float** %30, align 8
  %31 = bitcast float** %27 to i64*
  %32 = ptrtoint i8* %25 to i64
  %33 = add nsw i64 %18, -1
  %34 = getelementptr float, float* %26, i64 %33
  %35 = ptrtoint float* %34 to i64
  %36 = sub i64 4, %32
  %37 = add i64 %36, %35
  %38 = and i64 %37, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %25, i8 0, i64 %38, i1 false) #18
  %39 = ptrtoint float* %29 to i64
  store i64 %39, i64* %31, align 8
  %40 = ptrtoint i8* %25 to i64
  br label %41

41:                                               ; preds = %3, %24
  %42 = phi i8* [ %25, %24 ], [ null, %3 ]
  %43 = phi float* [ %26, %24 ], [ null, %3 ]
  %44 = phi i64 [ %40, %24 ], [ 0, %3 ]
  %45 = phi i64 [ %32, %24 ], [ 0, %3 ]
  %46 = phi i64 [ %39, %24 ], [ 0, %3 ]
  %47 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 1
  %48 = load i32, i32* %47, align 8
  %49 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 2
  %50 = load i32, i32* %49, align 4
  %51 = bitcast %"class.angle::Matrix"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %51, i8 0, i64 24, i1 false) #18
  %52 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 1
  %53 = bitcast float** %52 to i64*
  %54 = sub i64 %46, %45
  %55 = ashr exact i64 %54, 2
  %56 = icmp eq i64 %54, 0
  br i1 %56, label %77, label %57

57:                                               ; preds = %41
  %58 = icmp ugt i64 %55, 4611686018427387903
  br i1 %58, label %59, label %61

59:                                               ; preds = %57
  %60 = bitcast %"class.angle::Matrix"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #19
  unreachable

61:                                               ; preds = %57
  %62 = tail call i8* @_Znwm(i64 %54) #21
  %63 = bitcast i8* %62 to float*
  %64 = bitcast float** %6 to i8**
  store i8* %62, i8** %64, align 8
  %65 = bitcast %"class.angle::Matrix"* %0 to i8**
  store i8* %62, i8** %65, align 8
  %66 = getelementptr inbounds float, float* %63, i64 %55
  store float* %66, float** %7, align 8
  %67 = bitcast float** %6 to i64*
  %68 = ptrtoint i8* %62 to i64
  %69 = sub i64 %46, %44
  %70 = icmp sgt i64 %69, 0
  br i1 %70, label %71, label %75

71:                                               ; preds = %61
  %72 = lshr exact i64 %69, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %62, i8* align 4 %42, i64 %69, i1 false) #18
  %73 = getelementptr inbounds float, float* %63, i64 %72
  %74 = ptrtoint float* %73 to i64
  br label %75

75:                                               ; preds = %71, %61
  %76 = phi i64 [ %74, %71 ], [ %68, %61 ]
  store i64 %76, i64* %67, align 8
  br label %77

77:                                               ; preds = %41, %75
  store i32 %48, i32* %8, align 8
  store i32 %50, i32* %9, align 4
  %78 = icmp eq float* %43, null
  br i1 %78, label %82, label %79

79:                                               ; preds = %77
  %80 = ptrtoint float* %43 to i64
  store i64 %80, i64* %53, align 8
  tail call void @_ZdlPv(i8* %42) #21
  %81 = load i32, i32* %47, align 8
  br label %82

82:                                               ; preds = %77, %79
  %83 = phi i32 [ %48, %77 ], [ %81, %79 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #18
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %128, label %85

85:                                               ; preds = %82
  %86 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 0, i32 0, i32 0
  %87 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %2, i64 0, i32 2
  %88 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %2, i64 0, i32 0, i32 0, i32 0
  %89 = load i32, i32* %49, align 4
  br label %90

90:                                               ; preds = %85, %97
  %91 = phi i32 [ %83, %85 ], [ %98, %97 ]
  %92 = phi i32 [ %89, %85 ], [ %99, %97 ]
  %93 = phi i32 [ 0, %85 ], [ %100, %97 ]
  %94 = icmp eq i32 %92, 0
  br i1 %94, label %97, label %102

95:                                               ; preds = %102
  %96 = load i32, i32* %47, align 8
  br label %97

97:                                               ; preds = %95, %90
  %98 = phi i32 [ %96, %95 ], [ %91, %90 ]
  %99 = phi i32 [ %126, %95 ], [ 0, %90 ]
  %100 = add nuw i32 %93, 1
  %101 = icmp ult i32 %100, %98
  br i1 %101, label %90, label %128

102:                                              ; preds = %90, %102
  %103 = phi i32 [ %126, %102 ], [ %92, %90 ]
  %104 = phi i32 [ %125, %102 ], [ 0, %90 ]
  %105 = mul i32 %103, %93
  %106 = add i32 %105, %104
  %107 = zext i32 %106 to i64
  %108 = load float*, float** %86, align 8
  %109 = getelementptr inbounds float, float* %108, i64 %107
  %110 = load float, float* %109, align 4
  %111 = load i32, i32* %87, align 4
  %112 = mul i32 %111, %93
  %113 = add i32 %112, %104
  %114 = zext i32 %113 to i64
  %115 = load float*, float** %88, align 8
  %116 = getelementptr inbounds float, float* %115, i64 %114
  %117 = load float, float* %116, align 4
  %118 = fmul float %110, %117
  %119 = load i32, i32* %9, align 4
  %120 = mul i32 %119, %93
  %121 = add i32 %120, %104
  %122 = zext i32 %121 to i64
  %123 = load float*, float** %5, align 8
  %124 = getelementptr inbounds float, float* %123, i64 %122
  store float %118, float* %124, align 4
  %125 = add nuw i32 %104, 1
  %126 = load i32, i32* %49, align 4
  %127 = icmp ult i32 %125, %126
  br i1 %127, label %102, label %95

128:                                              ; preds = %97, %82
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5angle6MatrixIfE12outerProductERKS1_(%"class.angle::Matrix"* noalias sret, %"class.angle::Matrix"*, %"class.angle::Matrix"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %2, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %9 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 1
  %10 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 2
  %11 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 1
  %12 = bitcast %"class.angle::Matrix"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 -86, i64 32, i1 false)
  %13 = load i32, i32* %11, align 8
  %14 = mul i32 %13, %5
  %15 = zext i32 %14 to i64
  %16 = icmp eq i32 %14, 0
  br i1 %16, label %30, label %17

17:                                               ; preds = %3
  %18 = shl nuw nsw i64 %15, 2
  %19 = tail call i8* @_Znwm(i64 %18) #21
  %20 = bitcast i8* %19 to float*
  %21 = ptrtoint i8* %19 to i64
  %22 = getelementptr inbounds float, float* %20, i64 %15
  %23 = add nsw i64 %15, -1
  %24 = getelementptr float, float* %20, i64 %23
  %25 = ptrtoint float* %24 to i64
  %26 = sub i64 4, %21
  %27 = add i64 %26, %25
  %28 = and i64 %27, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %19, i8 0, i64 %28, i1 false) #18
  %29 = ptrtoint float* %22 to i64
  br label %30

30:                                               ; preds = %3, %17
  %31 = phi i64 [ 0, %3 ], [ %21, %17 ]
  %32 = phi i64 [ 0, %3 ], [ %29, %17 ]
  %33 = bitcast %"class.angle::Matrix"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 24, i1 false) #18
  %34 = sub i64 %32, %31
  %35 = ashr exact i64 %34, 2
  %36 = icmp eq i64 %34, 0
  br i1 %36, label %57, label %37

37:                                               ; preds = %30
  %38 = icmp ugt i64 %35, 4611686018427387903
  br i1 %38, label %39, label %41

39:                                               ; preds = %37
  %40 = bitcast %"class.angle::Matrix"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %40) #19
  unreachable

41:                                               ; preds = %37
  %42 = tail call i8* @_Znwm(i64 %34) #21
  %43 = bitcast i8* %42 to float*
  %44 = bitcast float** %7 to i8**
  store i8* %42, i8** %44, align 8
  %45 = bitcast %"class.angle::Matrix"* %0 to i8**
  store i8* %42, i8** %45, align 8
  %46 = getelementptr inbounds float, float* %43, i64 %35
  store float* %46, float** %8, align 8
  %47 = bitcast float** %7 to i64*
  %48 = ptrtoint i8* %42 to i64
  %49 = icmp sgt i64 %34, 0
  br i1 %49, label %50, label %55

50:                                               ; preds = %41
  %51 = lshr exact i64 %34, 2
  %52 = inttoptr i64 %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %42, i8* align 4 %52, i64 %34, i1 false) #18
  %53 = getelementptr inbounds float, float* %43, i64 %51
  %54 = ptrtoint float* %53 to i64
  br label %55

55:                                               ; preds = %50, %41
  %56 = phi i64 [ %54, %50 ], [ %48, %41 ]
  store i64 %56, i64* %47, align 8
  br label %57

57:                                               ; preds = %30, %55
  store i32 %13, i32* %9, align 8
  store i32 %5, i32* %10, align 4
  %58 = icmp eq i64 %31, 0
  br i1 %58, label %62, label %59

59:                                               ; preds = %57
  %60 = inttoptr i64 %31 to i8*
  tail call void @_ZdlPv(i8* %60) #21
  %61 = load i32, i32* %11, align 8
  br label %62

62:                                               ; preds = %57, %59
  %63 = phi i32 [ %13, %57 ], [ %61, %59 ]
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %101, label %65

65:                                               ; preds = %62
  %66 = icmp eq i32 %5, 0
  %67 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 2
  %68 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 0, i32 0, i32 0
  %69 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %2, i64 0, i32 0, i32 0, i32 0
  %70 = zext i32 %5 to i64
  br label %71

71:                                               ; preds = %65, %76
  %72 = phi i32 [ %63, %65 ], [ %77, %76 ]
  %73 = phi i32 [ 0, %65 ], [ %78, %76 ]
  br i1 %66, label %76, label %80

74:                                               ; preds = %80
  %75 = load i32, i32* %11, align 8
  br label %76

76:                                               ; preds = %74, %71
  %77 = phi i32 [ %75, %74 ], [ %72, %71 ]
  %78 = add nuw i32 %73, 1
  %79 = icmp ult i32 %78, %77
  br i1 %79, label %71, label %101

80:                                               ; preds = %71, %80
  %81 = phi i64 [ %99, %80 ], [ 0, %71 ]
  %82 = load i32, i32* %67, align 4
  %83 = mul i32 %82, %73
  %84 = zext i32 %83 to i64
  %85 = load float*, float** %68, align 8
  %86 = getelementptr inbounds float, float* %85, i64 %84
  %87 = load float, float* %86, align 4
  %88 = load float*, float** %69, align 8
  %89 = getelementptr inbounds float, float* %88, i64 %81
  %90 = load float, float* %89, align 4
  %91 = fmul float %87, %90
  %92 = load i32, i32* %10, align 4
  %93 = mul i32 %92, %73
  %94 = trunc i64 %81 to i32
  %95 = add i32 %93, %94
  %96 = zext i32 %95 to i64
  %97 = load float*, float** %6, align 8
  %98 = getelementptr inbounds float, float* %97, i64 %96
  store float %91, float* %98, align 4
  %99 = add nuw nsw i64 %81, 1
  %100 = icmp eq i64 %99, %70
  br i1 %100, label %74, label %80

101:                                              ; preds = %76, %62
  ret void
}

declare i32 @_ZN2sh13GetConversionENS_10TBasicTypeES0_(i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh28TIntermPreprocessorDirectiveC2ENS_21PreprocessorDirectiveENS_15ImmutableStringE(%"class.sh::TIntermPreprocessorDirective"* nocapture, i32, i8*, i64) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.sh::TIntermPreprocessorDirective", %"class.sh::TIntermPreprocessorDirective"* %0, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.sh::TIntermPreprocessorDirective", %"class.sh::TIntermPreprocessorDirective"* %0, i64 0, i32 0, i32 1, i32 0
  %7 = bitcast i32* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [29 x i8*] }, { [29 x i8*] }* @_ZTVN2sh28TIntermPreprocessorDirectiveE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %8 = getelementptr inbounds %"class.sh::TIntermPreprocessorDirective", %"class.sh::TIntermPreprocessorDirective"* %0, i64 0, i32 1
  store i32 %1, i32* %8, align 8
  %9 = getelementptr inbounds %"class.sh::TIntermPreprocessorDirective", %"class.sh::TIntermPreprocessorDirective"* %0, i64 0, i32 2, i32 0
  store i8* %2, i8** %9, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermPreprocessorDirective", %"class.sh::TIntermPreprocessorDirective"* %0, i64 0, i32 2, i32 1
  store i64 %3, i64* %10, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh28TIntermPreprocessorDirectiveC2ERKS0_(%"class.sh::TIntermPreprocessorDirective"* nocapture, %"class.sh::TIntermPreprocessorDirective"* nocapture readonly dereferenceable(48)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermPreprocessorDirective", %"class.sh::TIntermPreprocessorDirective"* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.sh::TIntermPreprocessorDirective", %"class.sh::TIntermPreprocessorDirective"* %1, i64 0, i32 2, i32 0
  %6 = bitcast i8** %5 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8
  %8 = getelementptr inbounds %"class.sh::TIntermPreprocessorDirective", %"class.sh::TIntermPreprocessorDirective"* %0, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.sh::TIntermPreprocessorDirective", %"class.sh::TIntermPreprocessorDirective"* %0, i64 0, i32 0, i32 1, i32 0
  %10 = bitcast i32* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [29 x i8*] }, { [29 x i8*] }* @_ZTVN2sh28TIntermPreprocessorDirectiveE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermPreprocessorDirective", %"class.sh::TIntermPreprocessorDirective"* %0, i64 0, i32 1
  store i32 %4, i32* %11, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermPreprocessorDirective", %"class.sh::TIntermPreprocessorDirective"* %0, i64 0, i32 2, i32 0
  %13 = bitcast i8** %12 to <2 x i64>*
  store <2 x i64> %7, <2 x i64>* %13, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2sh28TIntermPreprocessorDirectiveD2Ev(%"class.sh::TIntermPreprocessorDirective"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2sh28TIntermPreprocessorDirectiveD0Ev(%"class.sh::TIntermPreprocessorDirective"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh28TIntermPreprocessorDirective13getChildCountEv(%"class.sh::TIntermPreprocessorDirective"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %"class.sh::TIntermNode"* @_ZNK2sh28TIntermPreprocessorDirective12getChildNodeEm(%"class.sh::TIntermPreprocessorDirective"* nocapture readnone, i64) unnamed_addr #3 align 2 {
  ret %"class.sh::TIntermNode"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh11TIntermNodeD2Ev(%"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh12TIntermTypedD0Ev(%"class.sh::TIntermTyped"*) unnamed_addr #11 comdat align 2 {
  tail call void @llvm.trap() #19
  unreachable
}

declare void @_ZN2sh11TIntermNode8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*) unnamed_addr #1

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermTyped"* @_ZN2sh12TIntermTyped10getAsTypedEv(%"class.sh::TIntermTyped"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermTyped"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermConstantUnion"* @_ZN2sh11TIntermNode18getAsConstantUnionEv(%"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermConstantUnion"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermFunctionDefinition"* @_ZN2sh11TIntermNode23getAsFunctionDefinitionEv(%"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermFunctionDefinition"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermAggregate"* @_ZN2sh11TIntermNode14getAsAggregateEv(%"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermAggregate"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermBlock"* @_ZN2sh11TIntermNode10getAsBlockEv(%"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermBlock"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermFunctionPrototype"* @_ZN2sh11TIntermNode26getAsFunctionPrototypeNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermFunctionPrototype"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermGlobalQualifierDeclaration"* @_ZN2sh11TIntermNode35getAsGlobalQualifierDeclarationNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermGlobalQualifierDeclaration"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermDeclaration"* @_ZN2sh11TIntermNode20getAsDeclarationNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermDeclaration"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermSwizzle"* @_ZN2sh11TIntermNode16getAsSwizzleNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermSwizzle"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermBinary"* @_ZN2sh11TIntermNode15getAsBinaryNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermBinary"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermUnary"* @_ZN2sh11TIntermNode14getAsUnaryNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermUnary"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermTernary"* @_ZN2sh11TIntermNode16getAsTernaryNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermTernary"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermIfElse"* @_ZN2sh11TIntermNode15getAsIfElseNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermIfElse"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermSwitch"* @_ZN2sh11TIntermNode15getAsSwitchNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermSwitch"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermCase"* @_ZN2sh11TIntermNode13getAsCaseNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermCase"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermSymbol"* @_ZN2sh11TIntermNode15getAsSymbolNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermSymbol"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermLoop"* @_ZN2sh11TIntermNode13getAsLoopNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermLoop"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermBranch"* @_ZN2sh11TIntermNode15getAsBranchNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermBranch"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermPreprocessorDirective"* @_ZN2sh11TIntermNode26getAsPreprocessorDirectiveEv(%"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermPreprocessorDirective"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermTyped"* @_ZN2sh12TIntermTyped4foldEPNS_12TDiagnosticsE(%"class.sh::TIntermTyped"*, %"class.sh::TDiagnostics"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermTyped"* %0
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh13TIntermSymbolD0Ev(%"class.sh::TIntermSymbol"*) unnamed_addr #11 comdat align 2 {
  ret void
}

declare void @_ZN2sh13TIntermSymbol8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermSymbol"*, %"class.sh::TIntermTraverser"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh13TIntermSymbol5visitENS_5VisitEPNS_16TIntermTraverserE(%"class.sh::TIntermSymbol"*, i32, %"class.sh::TIntermTraverser"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermSymbol"* @_ZN2sh13TIntermSymbol15getAsSymbolNodeEv(%"class.sh::TIntermSymbol"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermSymbol"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermTyped"* @_ZNK2sh13TIntermSymbol8deepCopyEv(%"class.sh::TIntermSymbol"*) unnamed_addr #0 comdat align 2 {
  %2 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %3 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2, i64 32) #18
  %4 = bitcast i8* %3 to i32 (...)***
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermTypedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = bitcast %"struct.sh::TSourceLoc"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 4 %7, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh13TIntermSymbolE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %8 = getelementptr inbounds i8, i8* %3, i64 24
  %9 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %0, i64 0, i32 1
  %10 = bitcast %"class.sh::TVariable"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast i8* %8 to i64*
  store i64 %11, i64* %12, align 8
  %13 = bitcast i8* %3 to %"class.sh::TIntermTyped"*
  ret %"class.sh::TIntermTyped"* %13
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh13TIntermSymbol16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermSymbol"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK2sh13TIntermSymbol14hasSideEffectsEv(%"class.sh::TIntermSymbol"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh20TIntermConstantUnionD0Ev(%"class.sh::TIntermConstantUnion"*) unnamed_addr #11 comdat align 2 {
  ret void
}

declare void @_ZN2sh20TIntermConstantUnion8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermConstantUnion"*, %"class.sh::TIntermTraverser"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh20TIntermConstantUnion5visitENS_5VisitEPNS_16TIntermTraverserE(%"class.sh::TIntermConstantUnion"*, i32, %"class.sh::TIntermTraverser"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermConstantUnion"* @_ZN2sh20TIntermConstantUnion18getAsConstantUnionEv(%"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermConstantUnion"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermTyped"* @_ZNK2sh20TIntermConstantUnion8deepCopyEv(%"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  %2 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %3 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2, i64 216) #18
  %4 = bitcast i8* %3 to i32 (...)***
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermTypedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = bitcast %"struct.sh::TSourceLoc"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 4 %7, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %8 = getelementptr inbounds i8, i8* %3, i64 24
  %9 = bitcast i8* %8 to %"class.sh::TType"*
  %10 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %9, %"class.sh::TType"* dereferenceable(184) %10) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 1
  %12 = bitcast %"class.sh::TConstantUnion"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds i8, i8* %3, i64 208
  %15 = bitcast i8* %14 to i64*
  store i64 %13, i64* %15, align 8
  %16 = bitcast i8* %3 to %"class.sh::TIntermTyped"*
  ret %"class.sh::TIntermTyped"* %16
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh20TIntermConstantUnion16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermConstantUnion"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK2sh20TIntermConstantUnion14hasSideEffectsEv(%"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(184) %"class.sh::TType"* @_ZNK2sh17TIntermExpression7getTypeEv(%"class.sh::TIntermExpression"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermExpression", %"class.sh::TIntermExpression"* %0, i64 0, i32 1
  ret %"class.sh::TType"* %2
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermAggregateD2Ev(%"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %5 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %4, align 8
  %6 = icmp eq %"class.sh::TIntermNode"** %5, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %1
  %8 = ptrtoint %"class.sh::TIntermNode"** %5 to i64
  %9 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %10 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  store i64 %8, i64* %10, align 8
  br label %11

11:                                               ; preds = %1, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermAggregateD0Ev(%"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %5 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %4, align 8
  %6 = icmp eq %"class.sh::TIntermNode"** %5, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %1
  %8 = ptrtoint %"class.sh::TIntermNode"** %5 to i64
  %9 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %10 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  store i64 %8, i64* %10, align 8
  br label %11

11:                                               ; preds = %1, %7
  ret void
}

declare void @_ZN2sh16TIntermAggregate8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermAggregate"*, %"class.sh::TIntermTraverser"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh16TIntermAggregate5visitENS_5VisitEPNS_16TIntermTraverserE(%"class.sh::TIntermAggregate"*, i32, %"class.sh::TIntermTraverser"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate14getAsAggregateEv(%"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermAggregate"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermTyped"* @_ZNK2sh16TIntermAggregate8deepCopyEv(%"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  %2 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %3 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2, i64 264) #18
  %4 = bitcast i8* %3 to %"class.sh::TIntermAggregate"*
  tail call void @_ZN2sh16TIntermAggregateC2ERKS0_(%"class.sh::TIntermAggregate"* %4, %"class.sh::TIntermAggregate"* dereferenceable(264) %0)
  %5 = bitcast i8* %3 to %"class.sh::TIntermTyped"*
  ret %"class.sh::TIntermTyped"* %5
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TVector.8"* @_ZN2sh16TIntermAggregate11getSequenceEv(%"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2
  ret %"class.sh::TVector.8"* %2
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TVector.8"* @_ZNK2sh16TIntermAggregate11getSequenceEv(%"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2
  ret %"class.sh::TVector.8"* %2
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn216_N2sh16TIntermAggregateD1Ev(%"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 -1, i32 0, i32 0, i32 1, i32 7, i32 1
  %3 = bitcast i32* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds i32, i32* %2, i64 54
  %5 = bitcast i32* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds i32, i32* %2, i64 56
  %7 = bitcast i32* %6 to %"class.sh::TIntermNode"***
  %8 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %9 = icmp eq %"class.sh::TIntermNode"** %8, null
  br i1 %9, label %14, label %10

10:                                               ; preds = %1
  %11 = ptrtoint %"class.sh::TIntermNode"** %8 to i64
  %12 = getelementptr inbounds i32, i32* %2, i64 58
  %13 = bitcast i32* %12 to i64*
  store i64 %11, i64* %13, align 8
  br label %14

14:                                               ; preds = %1, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn216_N2sh16TIntermAggregateD0Ev(%"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 -1, i32 0, i32 0, i32 1, i32 7, i32 1
  %3 = bitcast i32* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds i32, i32* %2, i64 54
  %5 = bitcast i32* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds i32, i32* %2, i64 56
  %7 = bitcast i32* %6 to %"class.sh::TIntermNode"***
  %8 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %9 = icmp eq %"class.sh::TIntermNode"** %8, null
  br i1 %9, label %14, label %10

10:                                               ; preds = %1
  %11 = ptrtoint %"class.sh::TIntermNode"** %8 to i64
  %12 = getelementptr inbounds i32, i32* %2, i64 58
  %13 = bitcast i32* %12 to i64*
  store i64 %11, i64* %13, align 8
  br label %14

14:                                               ; preds = %1, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TVector.8"* @_ZThn216_N2sh16TIntermAggregate11getSequenceEv(%"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 -1, i32 0, i32 0, i32 1, i32 7, i32 1
  %3 = getelementptr inbounds i32, i32* %2, i64 56
  %4 = bitcast i32* %3 to %"class.sh::TVector.8"*
  ret %"class.sh::TVector.8"* %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TVector.8"* @_ZThn216_NK2sh16TIntermAggregate11getSequenceEv(%"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 -1, i32 0, i32 0, i32 1, i32 7, i32 1
  %3 = getelementptr inbounds i32, i32* %2, i64 56
  %4 = bitcast i32* %3 to %"class.sh::TVector.8"*
  ret %"class.sh::TVector.8"* %4
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh13TIntermBinaryD0Ev(%"class.sh::TIntermBinary"*) unnamed_addr #11 comdat align 2 {
  ret void
}

declare void @_ZN2sh13TIntermBinary8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBinary"*, %"class.sh::TIntermTraverser"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh13TIntermBinary5visitENS_5VisitEPNS_16TIntermTraverserE(%"class.sh::TIntermBinary"*, i32, %"class.sh::TIntermTraverser"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermBinary"* @_ZN2sh13TIntermBinary15getAsBinaryNodeEv(%"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermBinary"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermTyped"* @_ZNK2sh13TIntermBinary8deepCopyEv(%"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  %2 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %3 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2, i64 240) #18
  %4 = bitcast i8* %3 to i32 (...)***
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermTypedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %7 = bitcast %"struct.sh::TSourceLoc"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 4 %7, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %8 = getelementptr inbounds i8, i8* %3, i64 24
  %9 = bitcast i8* %8 to %"class.sh::TType"*
  %10 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %9, %"class.sh::TType"* dereferenceable(184) %10) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh15TIntermOperatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %11 = getelementptr inbounds i8, i8* %3, i64 208
  %12 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 1
  %13 = load i8, i8* %12, align 8
  store i8 %13, i8* %11, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh13TIntermBinaryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %14 = getelementptr inbounds i8, i8* %3, i64 232
  %15 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 4
  %16 = load i8, i8* %15, align 8, !range !55
  store i8 %16, i8* %14, align 8
  %17 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %18 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %17, align 8
  %19 = bitcast %"class.sh::TIntermTyped"* %18 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %20 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %19, align 8
  %21 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %20, i64 23
  %22 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %21, align 8
  %23 = tail call %"class.sh::TIntermTyped"* %22(%"class.sh::TIntermTyped"* %18) #18
  %24 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %25 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %24, align 8
  %26 = bitcast %"class.sh::TIntermTyped"* %25 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %27 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %26, align 8
  %28 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %27, i64 23
  %29 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %28, align 8
  %30 = tail call %"class.sh::TIntermTyped"* %29(%"class.sh::TIntermTyped"* %25) #18
  %31 = getelementptr inbounds i8, i8* %3, i64 216
  %32 = bitcast i8* %31 to %"class.sh::TIntermTyped"**
  store %"class.sh::TIntermTyped"* %23, %"class.sh::TIntermTyped"** %32, align 8
  %33 = getelementptr inbounds i8, i8* %3, i64 224
  %34 = bitcast i8* %33 to %"class.sh::TIntermTyped"**
  store %"class.sh::TIntermTyped"* %30, %"class.sh::TIntermTyped"** %34, align 8
  %35 = bitcast i8* %3 to %"class.sh::TIntermTyped"*
  ret %"class.sh::TIntermTyped"* %35
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK2sh13TIntermBinary14hasSideEffectsEv(%"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 1
  %3 = load i8, i8* %2, align 8
  %4 = tail call zeroext i1 @_Z12IsAssignment9TOperator(i8 zeroext %3) #18
  br i1 %4, label %21, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %7 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %6, align 8
  %8 = bitcast %"class.sh::TIntermTyped"* %7 to i1 (%"class.sh::TIntermTyped"*)***
  %9 = load i1 (%"class.sh::TIntermTyped"*)**, i1 (%"class.sh::TIntermTyped"*)*** %8, align 8
  %10 = getelementptr inbounds i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %9, i64 30
  %11 = load i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %10, align 8
  %12 = tail call zeroext i1 %11(%"class.sh::TIntermTyped"* %7) #18
  br i1 %12, label %21, label %13

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %15 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %14, align 8
  %16 = bitcast %"class.sh::TIntermTyped"* %15 to i1 (%"class.sh::TIntermTyped"*)***
  %17 = load i1 (%"class.sh::TIntermTyped"*)**, i1 (%"class.sh::TIntermTyped"*)*** %16, align 8
  %18 = getelementptr inbounds i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %17, i64 30
  %19 = load i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %18, align 8
  %20 = tail call zeroext i1 %19(%"class.sh::TIntermTyped"* %15) #18
  br label %21

21:                                               ; preds = %13, %5, %1
  %22 = phi i1 [ true, %5 ], [ true, %1 ], [ %20, %13 ]
  ret i1 %22
}

declare void @_ZN2sh28TIntermPreprocessorDirective8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermPreprocessorDirective"*, %"class.sh::TIntermTraverser"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh28TIntermPreprocessorDirective5visitENS_5VisitEPNS_16TIntermTraverserE(%"class.sh::TIntermPreprocessorDirective"*, i32, %"class.sh::TIntermTraverser"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermTyped"* @_ZN2sh11TIntermNode10getAsTypedEv(%"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermTyped"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermPreprocessorDirective"* @_ZN2sh28TIntermPreprocessorDirective26getAsPreprocessorDirectiveEv(%"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret %"class.sh::TIntermPreprocessorDirective"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermPreprocessorDirective"* @_ZNK2sh28TIntermPreprocessorDirective8deepCopyEv(%"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  %2 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %3 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %2, i64 48) #18
  %4 = bitcast i8* %3 to %"class.sh::TIntermPreprocessorDirective"*
  %5 = getelementptr inbounds %"class.sh::TIntermPreprocessorDirective", %"class.sh::TIntermPreprocessorDirective"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %"class.sh::TIntermPreprocessorDirective", %"class.sh::TIntermPreprocessorDirective"* %0, i64 0, i32 2, i32 0
  %8 = bitcast i8** %7 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 8
  %10 = bitcast i8* %3 to i32 (...)***
  %11 = getelementptr inbounds i8, i8* %3, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [29 x i8*] }, { [29 x i8*] }* @_ZTVN2sh28TIntermPreprocessorDirectiveE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %12 = getelementptr inbounds i8, i8* %3, i64 24
  %13 = bitcast i8* %12 to i32*
  store i32 %6, i32* %13, align 8
  %14 = getelementptr inbounds i8, i8* %3, i64 32
  %15 = bitcast i8* %14 to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %15, align 8
  ret %"class.sh::TIntermPreprocessorDirective"* %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh28TIntermPreprocessorDirective16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermPreprocessorDirective"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh17TIntermExpressionD0Ev(%"class.sh::TIntermExpression"*) unnamed_addr #11 comdat align 2 {
  tail call void @llvm.trap() #19
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #12

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #1

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh15TIntermOperatorD0Ev(%"class.sh::TIntermOperator"*) unnamed_addr #11 comdat align 2 {
  tail call void @llvm.trap() #19
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK2sh15TIntermOperator14hasSideEffectsEv(%"class.sh::TIntermOperator"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermOperator", %"class.sh::TIntermOperator"* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 8
  %4 = tail call zeroext i1 @_Z12IsAssignment9TOperator(i8 zeroext %3) #18
  ret i1 %4
}

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #13

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIi14pool_allocatorIiEE6assignIPiEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.17"*, i32*, i32*) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i32* %1 to i8*
  %5 = ptrtoint i32* %1 to i64
  %6 = ptrtoint i32* %2 to i64
  %7 = sub i64 %6, %5
  %8 = ashr exact i64 %7, 2
  %9 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector.17"* %0 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = ashr exact i64 %14, 2
  %16 = icmp ugt i64 %8, %15
  %17 = inttoptr i64 %13 to i32*
  br i1 %16, label %203, label %18

18:                                               ; preds = %3
  %19 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %0, i64 0, i32 0, i32 1
  %20 = bitcast i32** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %21, %13
  %23 = ashr exact i64 %22, 2
  %24 = icmp ugt i64 %8, %23
  %25 = getelementptr inbounds i32, i32* %1, i64 %23
  %26 = select i1 %24, i32* %25, i32* %2
  %27 = ptrtoint i32* %26 to i64
  %28 = sub i64 %27, %5
  %29 = ashr exact i64 %28, 2
  %30 = icmp eq i64 %28, 0
  br i1 %30, label %33, label %31

31:                                               ; preds = %18
  %32 = inttoptr i64 %13 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %32, i8* align 4 %4, i64 %28, i1 false) #18
  br label %33

33:                                               ; preds = %18, %31
  br i1 %24, label %34, label %201

34:                                               ; preds = %33
  %35 = load i64, i64* %20, align 8
  %36 = icmp eq i32* %26, %2
  br i1 %36, label %199, label %37

37:                                               ; preds = %34
  %38 = inttoptr i64 %35 to i32*
  %39 = xor i64 %23, -1
  %40 = getelementptr i32, i32* %2, i64 %39
  %41 = ptrtoint i32* %40 to i64
  %42 = sub i64 %41, %5
  %43 = lshr i64 %42, 2
  %44 = add nuw nsw i64 %43, 1
  %45 = icmp ult i64 %44, 8
  br i1 %45, label %143, label %46

46:                                               ; preds = %37
  %47 = inttoptr i64 %35 to i8*
  %48 = xor i64 %23, -1
  %49 = getelementptr i32, i32* %2, i64 %48
  %50 = ptrtoint i32* %49 to i64
  %51 = sub i64 %50, %5
  %52 = lshr i64 %51, 2
  %53 = add nuw nsw i64 %52, 1
  %54 = getelementptr i32, i32* %38, i64 %53
  %55 = add nsw i64 %23, %52
  %56 = add i64 %55, 1
  %57 = getelementptr i32, i32* %1, i64 %56
  %58 = bitcast i32* %57 to i8*
  %59 = icmp ult i8* %47, %58
  %60 = icmp ult i32* %25, %54
  %61 = and i1 %59, %60
  br i1 %61, label %143, label %62

62:                                               ; preds = %46
  %63 = and i64 %44, 9223372036854775800
  %64 = getelementptr i32, i32* %38, i64 %63
  %65 = getelementptr i32, i32* %25, i64 %63
  %66 = add nsw i64 %63, -8
  %67 = lshr exact i64 %66, 3
  %68 = add nuw nsw i64 %67, 1
  %69 = and i64 %68, 3
  %70 = icmp ult i64 %66, 24
  br i1 %70, label %122, label %71

71:                                               ; preds = %62
  %72 = sub nsw i64 %68, %69
  br label %73

73:                                               ; preds = %73, %71
  %74 = phi i64 [ 0, %71 ], [ %119, %73 ]
  %75 = phi i64 [ %72, %71 ], [ %120, %73 ]
  %76 = getelementptr i32, i32* %38, i64 %74
  %77 = getelementptr i32, i32* %25, i64 %74
  %78 = bitcast i32* %77 to <4 x i32>*
  %79 = load <4 x i32>, <4 x i32>* %78, align 4, !alias.scope !148
  %80 = getelementptr i32, i32* %77, i64 4
  %81 = bitcast i32* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 4, !alias.scope !148
  %83 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %83, align 4, !alias.scope !151, !noalias !148
  %84 = getelementptr i32, i32* %76, i64 4
  %85 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %85, align 4, !alias.scope !151, !noalias !148
  %86 = or i64 %74, 8
  %87 = getelementptr i32, i32* %38, i64 %86
  %88 = getelementptr i32, i32* %25, i64 %86
  %89 = bitcast i32* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 4, !alias.scope !148
  %91 = getelementptr i32, i32* %88, i64 4
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4, !alias.scope !148
  %94 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %90, <4 x i32>* %94, align 4, !alias.scope !151, !noalias !148
  %95 = getelementptr i32, i32* %87, i64 4
  %96 = bitcast i32* %95 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %96, align 4, !alias.scope !151, !noalias !148
  %97 = or i64 %74, 16
  %98 = getelementptr i32, i32* %38, i64 %97
  %99 = getelementptr i32, i32* %25, i64 %97
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4, !alias.scope !148
  %102 = getelementptr i32, i32* %99, i64 4
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !148
  %105 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %105, align 4, !alias.scope !151, !noalias !148
  %106 = getelementptr i32, i32* %98, i64 4
  %107 = bitcast i32* %106 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %107, align 4, !alias.scope !151, !noalias !148
  %108 = or i64 %74, 24
  %109 = getelementptr i32, i32* %38, i64 %108
  %110 = getelementptr i32, i32* %25, i64 %108
  %111 = bitcast i32* %110 to <4 x i32>*
  %112 = load <4 x i32>, <4 x i32>* %111, align 4, !alias.scope !148
  %113 = getelementptr i32, i32* %110, i64 4
  %114 = bitcast i32* %113 to <4 x i32>*
  %115 = load <4 x i32>, <4 x i32>* %114, align 4, !alias.scope !148
  %116 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %116, align 4, !alias.scope !151, !noalias !148
  %117 = getelementptr i32, i32* %109, i64 4
  %118 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %115, <4 x i32>* %118, align 4, !alias.scope !151, !noalias !148
  %119 = add i64 %74, 32
  %120 = add i64 %75, -4
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %73, !llvm.loop !153

122:                                              ; preds = %73, %62
  %123 = phi i64 [ 0, %62 ], [ %119, %73 ]
  %124 = icmp eq i64 %69, 0
  br i1 %124, label %141, label %125

125:                                              ; preds = %122, %125
  %126 = phi i64 [ %138, %125 ], [ %123, %122 ]
  %127 = phi i64 [ %139, %125 ], [ %69, %122 ]
  %128 = getelementptr i32, i32* %38, i64 %126
  %129 = getelementptr i32, i32* %25, i64 %126
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 4, !alias.scope !148
  %132 = getelementptr i32, i32* %129, i64 4
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 4, !alias.scope !148
  %135 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %135, align 4, !alias.scope !151, !noalias !148
  %136 = getelementptr i32, i32* %128, i64 4
  %137 = bitcast i32* %136 to <4 x i32>*
  store <4 x i32> %134, <4 x i32>* %137, align 4, !alias.scope !151, !noalias !148
  %138 = add i64 %126, 8
  %139 = add i64 %127, -1
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %125, !llvm.loop !154

141:                                              ; preds = %125, %122
  %142 = icmp eq i64 %44, %63
  br i1 %142, label %196, label %143

143:                                              ; preds = %141, %46, %37
  %144 = phi i32* [ %38, %46 ], [ %38, %37 ], [ %64, %141 ]
  %145 = phi i32* [ %25, %46 ], [ %25, %37 ], [ %65, %141 ]
  %146 = ptrtoint i32* %145 to i64
  %147 = getelementptr i32, i32* %2, i64 -1
  %148 = ptrtoint i32* %147 to i64
  %149 = sub i64 %148, %146
  %150 = lshr i64 %149, 2
  %151 = add nuw nsw i64 %150, 1
  %152 = and i64 %151, 7
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %163, label %154

154:                                              ; preds = %143, %154
  %155 = phi i32* [ %160, %154 ], [ %144, %143 ]
  %156 = phi i32* [ %159, %154 ], [ %145, %143 ]
  %157 = phi i64 [ %161, %154 ], [ %152, %143 ]
  %158 = load i32, i32* %156, align 4
  store i32 %158, i32* %155, align 4
  %159 = getelementptr inbounds i32, i32* %156, i64 1
  %160 = getelementptr inbounds i32, i32* %155, i64 1
  %161 = add i64 %157, -1
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %163, label %154, !llvm.loop !155

163:                                              ; preds = %154, %143
  %164 = phi i32* [ undef, %143 ], [ %160, %154 ]
  %165 = phi i32* [ %144, %143 ], [ %160, %154 ]
  %166 = phi i32* [ %145, %143 ], [ %159, %154 ]
  %167 = icmp ult i64 %149, 28
  br i1 %167, label %196, label %168

168:                                              ; preds = %163, %168
  %169 = phi i32* [ %194, %168 ], [ %165, %163 ]
  %170 = phi i32* [ %193, %168 ], [ %166, %163 ]
  %171 = load i32, i32* %170, align 4
  store i32 %171, i32* %169, align 4
  %172 = getelementptr inbounds i32, i32* %170, i64 1
  %173 = getelementptr inbounds i32, i32* %169, i64 1
  %174 = load i32, i32* %172, align 4
  store i32 %174, i32* %173, align 4
  %175 = getelementptr inbounds i32, i32* %170, i64 2
  %176 = getelementptr inbounds i32, i32* %169, i64 2
  %177 = load i32, i32* %175, align 4
  store i32 %177, i32* %176, align 4
  %178 = getelementptr inbounds i32, i32* %170, i64 3
  %179 = getelementptr inbounds i32, i32* %169, i64 3
  %180 = load i32, i32* %178, align 4
  store i32 %180, i32* %179, align 4
  %181 = getelementptr inbounds i32, i32* %170, i64 4
  %182 = getelementptr inbounds i32, i32* %169, i64 4
  %183 = load i32, i32* %181, align 4
  store i32 %183, i32* %182, align 4
  %184 = getelementptr inbounds i32, i32* %170, i64 5
  %185 = getelementptr inbounds i32, i32* %169, i64 5
  %186 = load i32, i32* %184, align 4
  store i32 %186, i32* %185, align 4
  %187 = getelementptr inbounds i32, i32* %170, i64 6
  %188 = getelementptr inbounds i32, i32* %169, i64 6
  %189 = load i32, i32* %187, align 4
  store i32 %189, i32* %188, align 4
  %190 = getelementptr inbounds i32, i32* %170, i64 7
  %191 = getelementptr inbounds i32, i32* %169, i64 7
  %192 = load i32, i32* %190, align 4
  store i32 %192, i32* %191, align 4
  %193 = getelementptr inbounds i32, i32* %170, i64 8
  %194 = getelementptr inbounds i32, i32* %169, i64 8
  %195 = icmp eq i32* %193, %2
  br i1 %195, label %196, label %168, !llvm.loop !156

196:                                              ; preds = %163, %168, %141
  %197 = phi i32* [ %64, %141 ], [ %164, %163 ], [ %194, %168 ]
  %198 = ptrtoint i32* %197 to i64
  br label %199

199:                                              ; preds = %34, %196
  %200 = phi i64 [ %35, %34 ], [ %198, %196 ]
  store i64 %200, i64* %20, align 8
  br label %395

201:                                              ; preds = %33
  %202 = getelementptr inbounds i32, i32* %17, i64 %29
  store i32* %202, i32** %19, align 8
  br label %395

203:                                              ; preds = %3
  %204 = icmp eq i64 %13, 0
  br i1 %204, label %207, label %205

205:                                              ; preds = %203
  %206 = bitcast %"class.std::__1::vector.17"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %206, i8 0, i64 24, i1 false) #18
  br label %207

207:                                              ; preds = %203, %205
  %208 = phi i64 [ %11, %203 ], [ 0, %205 ]
  %209 = icmp ugt i64 %8, 4611686018427387903
  br i1 %209, label %210, label %212

210:                                              ; preds = %207
  %211 = bitcast %"class.std::__1::vector.17"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %211) #19
  unreachable

212:                                              ; preds = %207
  %213 = ashr exact i64 %208, 2
  %214 = icmp ult i64 %213, 2305843009213693951
  br i1 %214, label %215, label %222

215:                                              ; preds = %212
  %216 = ashr exact i64 %208, 1
  %217 = icmp ult i64 %216, %8
  br i1 %217, label %222, label %218

218:                                              ; preds = %215
  %219 = icmp ugt i64 %216, 4611686018427387903
  br i1 %219, label %220, label %222

220:                                              ; preds = %218
  %221 = bitcast %"class.std::__1::vector.17"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %221) #19
  unreachable

222:                                              ; preds = %215, %212, %218
  %223 = phi i64 [ %216, %218 ], [ 4611686018427387903, %212 ], [ %8, %215 ]
  %224 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #18
  %225 = shl i64 %223, 2
  %226 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %224, i64 %225) #18
  %227 = bitcast i8* %226 to i32*
  %228 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %0, i64 0, i32 0, i32 1
  %229 = bitcast i32** %228 to i8**
  store i8* %226, i8** %229, align 8
  %230 = bitcast %"class.std::__1::vector.17"* %0 to i8**
  store i8* %226, i8** %230, align 8
  %231 = getelementptr inbounds i32, i32* %227, i64 %223
  store i32* %231, i32** %9, align 8
  %232 = bitcast i32** %228 to i64*
  %233 = ptrtoint i8* %226 to i64
  %234 = icmp eq i32* %1, %2
  br i1 %234, label %393, label %235

235:                                              ; preds = %222
  %236 = getelementptr i32, i32* %2, i64 -1
  %237 = ptrtoint i32* %236 to i64
  %238 = sub i64 %237, %5
  %239 = lshr i64 %238, 2
  %240 = add nuw nsw i64 %239, 1
  %241 = icmp ult i64 %240, 8
  br i1 %241, label %337, label %242

242:                                              ; preds = %235
  %243 = getelementptr i32, i32* %2, i64 -1
  %244 = ptrtoint i32* %243 to i64
  %245 = sub i64 %244, %5
  %246 = lshr i64 %245, 2
  %247 = add i64 %245, 4
  %248 = and i64 %247, -4
  %249 = getelementptr i8, i8* %226, i64 %248
  %250 = add nuw nsw i64 %246, 1
  %251 = getelementptr i32, i32* %1, i64 %250
  %252 = bitcast i32* %251 to i8*
  %253 = icmp ult i8* %226, %252
  %254 = icmp ugt i8* %249, %4
  %255 = and i1 %253, %254
  br i1 %255, label %337, label %256

256:                                              ; preds = %242
  %257 = and i64 %240, 9223372036854775800
  %258 = getelementptr i32, i32* %227, i64 %257
  %259 = getelementptr i32, i32* %1, i64 %257
  %260 = add nsw i64 %257, -8
  %261 = lshr exact i64 %260, 3
  %262 = add nuw nsw i64 %261, 1
  %263 = and i64 %262, 3
  %264 = icmp ult i64 %260, 24
  br i1 %264, label %316, label %265

265:                                              ; preds = %256
  %266 = sub nsw i64 %262, %263
  br label %267

267:                                              ; preds = %267, %265
  %268 = phi i64 [ 0, %265 ], [ %313, %267 ]
  %269 = phi i64 [ %266, %265 ], [ %314, %267 ]
  %270 = getelementptr i32, i32* %227, i64 %268
  %271 = getelementptr i32, i32* %1, i64 %268
  %272 = bitcast i32* %271 to <4 x i32>*
  %273 = load <4 x i32>, <4 x i32>* %272, align 4, !alias.scope !157
  %274 = getelementptr i32, i32* %271, i64 4
  %275 = bitcast i32* %274 to <4 x i32>*
  %276 = load <4 x i32>, <4 x i32>* %275, align 4, !alias.scope !157
  %277 = bitcast i32* %270 to <4 x i32>*
  store <4 x i32> %273, <4 x i32>* %277, align 4, !alias.scope !160, !noalias !157
  %278 = getelementptr i32, i32* %270, i64 4
  %279 = bitcast i32* %278 to <4 x i32>*
  store <4 x i32> %276, <4 x i32>* %279, align 4, !alias.scope !160, !noalias !157
  %280 = or i64 %268, 8
  %281 = getelementptr i32, i32* %227, i64 %280
  %282 = getelementptr i32, i32* %1, i64 %280
  %283 = bitcast i32* %282 to <4 x i32>*
  %284 = load <4 x i32>, <4 x i32>* %283, align 4, !alias.scope !157
  %285 = getelementptr i32, i32* %282, i64 4
  %286 = bitcast i32* %285 to <4 x i32>*
  %287 = load <4 x i32>, <4 x i32>* %286, align 4, !alias.scope !157
  %288 = bitcast i32* %281 to <4 x i32>*
  store <4 x i32> %284, <4 x i32>* %288, align 4, !alias.scope !160, !noalias !157
  %289 = getelementptr i32, i32* %281, i64 4
  %290 = bitcast i32* %289 to <4 x i32>*
  store <4 x i32> %287, <4 x i32>* %290, align 4, !alias.scope !160, !noalias !157
  %291 = or i64 %268, 16
  %292 = getelementptr i32, i32* %227, i64 %291
  %293 = getelementptr i32, i32* %1, i64 %291
  %294 = bitcast i32* %293 to <4 x i32>*
  %295 = load <4 x i32>, <4 x i32>* %294, align 4, !alias.scope !157
  %296 = getelementptr i32, i32* %293, i64 4
  %297 = bitcast i32* %296 to <4 x i32>*
  %298 = load <4 x i32>, <4 x i32>* %297, align 4, !alias.scope !157
  %299 = bitcast i32* %292 to <4 x i32>*
  store <4 x i32> %295, <4 x i32>* %299, align 4, !alias.scope !160, !noalias !157
  %300 = getelementptr i32, i32* %292, i64 4
  %301 = bitcast i32* %300 to <4 x i32>*
  store <4 x i32> %298, <4 x i32>* %301, align 4, !alias.scope !160, !noalias !157
  %302 = or i64 %268, 24
  %303 = getelementptr i32, i32* %227, i64 %302
  %304 = getelementptr i32, i32* %1, i64 %302
  %305 = bitcast i32* %304 to <4 x i32>*
  %306 = load <4 x i32>, <4 x i32>* %305, align 4, !alias.scope !157
  %307 = getelementptr i32, i32* %304, i64 4
  %308 = bitcast i32* %307 to <4 x i32>*
  %309 = load <4 x i32>, <4 x i32>* %308, align 4, !alias.scope !157
  %310 = bitcast i32* %303 to <4 x i32>*
  store <4 x i32> %306, <4 x i32>* %310, align 4, !alias.scope !160, !noalias !157
  %311 = getelementptr i32, i32* %303, i64 4
  %312 = bitcast i32* %311 to <4 x i32>*
  store <4 x i32> %309, <4 x i32>* %312, align 4, !alias.scope !160, !noalias !157
  %313 = add i64 %268, 32
  %314 = add i64 %269, -4
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %316, label %267, !llvm.loop !162

316:                                              ; preds = %267, %256
  %317 = phi i64 [ 0, %256 ], [ %313, %267 ]
  %318 = icmp eq i64 %263, 0
  br i1 %318, label %335, label %319

319:                                              ; preds = %316, %319
  %320 = phi i64 [ %332, %319 ], [ %317, %316 ]
  %321 = phi i64 [ %333, %319 ], [ %263, %316 ]
  %322 = getelementptr i32, i32* %227, i64 %320
  %323 = getelementptr i32, i32* %1, i64 %320
  %324 = bitcast i32* %323 to <4 x i32>*
  %325 = load <4 x i32>, <4 x i32>* %324, align 4, !alias.scope !157
  %326 = getelementptr i32, i32* %323, i64 4
  %327 = bitcast i32* %326 to <4 x i32>*
  %328 = load <4 x i32>, <4 x i32>* %327, align 4, !alias.scope !157
  %329 = bitcast i32* %322 to <4 x i32>*
  store <4 x i32> %325, <4 x i32>* %329, align 4, !alias.scope !160, !noalias !157
  %330 = getelementptr i32, i32* %322, i64 4
  %331 = bitcast i32* %330 to <4 x i32>*
  store <4 x i32> %328, <4 x i32>* %331, align 4, !alias.scope !160, !noalias !157
  %332 = add i64 %320, 8
  %333 = add i64 %321, -1
  %334 = icmp eq i64 %333, 0
  br i1 %334, label %335, label %319, !llvm.loop !163

335:                                              ; preds = %319, %316
  %336 = icmp eq i64 %240, %257
  br i1 %336, label %390, label %337

337:                                              ; preds = %335, %242, %235
  %338 = phi i32* [ %227, %242 ], [ %227, %235 ], [ %258, %335 ]
  %339 = phi i32* [ %1, %242 ], [ %1, %235 ], [ %259, %335 ]
  %340 = ptrtoint i32* %339 to i64
  %341 = getelementptr i32, i32* %2, i64 -1
  %342 = ptrtoint i32* %341 to i64
  %343 = sub i64 %342, %340
  %344 = lshr i64 %343, 2
  %345 = add nuw nsw i64 %344, 1
  %346 = and i64 %345, 7
  %347 = icmp eq i64 %346, 0
  br i1 %347, label %357, label %348

348:                                              ; preds = %337, %348
  %349 = phi i32* [ %354, %348 ], [ %338, %337 ]
  %350 = phi i32* [ %353, %348 ], [ %339, %337 ]
  %351 = phi i64 [ %355, %348 ], [ %346, %337 ]
  %352 = load i32, i32* %350, align 4
  store i32 %352, i32* %349, align 4
  %353 = getelementptr inbounds i32, i32* %350, i64 1
  %354 = getelementptr inbounds i32, i32* %349, i64 1
  %355 = add i64 %351, -1
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %357, label %348, !llvm.loop !164

357:                                              ; preds = %348, %337
  %358 = phi i32* [ undef, %337 ], [ %354, %348 ]
  %359 = phi i32* [ %338, %337 ], [ %354, %348 ]
  %360 = phi i32* [ %339, %337 ], [ %353, %348 ]
  %361 = icmp ult i64 %343, 28
  br i1 %361, label %390, label %362

362:                                              ; preds = %357, %362
  %363 = phi i32* [ %388, %362 ], [ %359, %357 ]
  %364 = phi i32* [ %387, %362 ], [ %360, %357 ]
  %365 = load i32, i32* %364, align 4
  store i32 %365, i32* %363, align 4
  %366 = getelementptr inbounds i32, i32* %364, i64 1
  %367 = getelementptr inbounds i32, i32* %363, i64 1
  %368 = load i32, i32* %366, align 4
  store i32 %368, i32* %367, align 4
  %369 = getelementptr inbounds i32, i32* %364, i64 2
  %370 = getelementptr inbounds i32, i32* %363, i64 2
  %371 = load i32, i32* %369, align 4
  store i32 %371, i32* %370, align 4
  %372 = getelementptr inbounds i32, i32* %364, i64 3
  %373 = getelementptr inbounds i32, i32* %363, i64 3
  %374 = load i32, i32* %372, align 4
  store i32 %374, i32* %373, align 4
  %375 = getelementptr inbounds i32, i32* %364, i64 4
  %376 = getelementptr inbounds i32, i32* %363, i64 4
  %377 = load i32, i32* %375, align 4
  store i32 %377, i32* %376, align 4
  %378 = getelementptr inbounds i32, i32* %364, i64 5
  %379 = getelementptr inbounds i32, i32* %363, i64 5
  %380 = load i32, i32* %378, align 4
  store i32 %380, i32* %379, align 4
  %381 = getelementptr inbounds i32, i32* %364, i64 6
  %382 = getelementptr inbounds i32, i32* %363, i64 6
  %383 = load i32, i32* %381, align 4
  store i32 %383, i32* %382, align 4
  %384 = getelementptr inbounds i32, i32* %364, i64 7
  %385 = getelementptr inbounds i32, i32* %363, i64 7
  %386 = load i32, i32* %384, align 4
  store i32 %386, i32* %385, align 4
  %387 = getelementptr inbounds i32, i32* %364, i64 8
  %388 = getelementptr inbounds i32, i32* %363, i64 8
  %389 = icmp eq i32* %387, %2
  br i1 %389, label %390, label %362, !llvm.loop !165

390:                                              ; preds = %357, %362, %335
  %391 = phi i32* [ %258, %335 ], [ %358, %357 ], [ %388, %362 ]
  %392 = ptrtoint i32* %391 to i64
  br label %393

393:                                              ; preds = %222, %390
  %394 = phi i64 [ %233, %222 ], [ %392, %390 ]
  store i64 %394, i64* %232, align 8
  br label %395

395:                                              ; preds = %199, %201, %393
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #14

declare dereferenceable(24) %"class.std::__1::basic_string.26"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.26"*, i8*) local_unnamed_addr #1

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #15

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #16

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #17

declare float @_ZN2gl16float16ToFloat32Et(i16 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #7

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

declare double @ldexp(double, i32) local_unnamed_addr

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { cold noreturn nounwind }
attributes #13 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { nounwind }
attributes #19 = { noreturn nounwind }
attributes #20 = { nounwind readonly }
attributes #21 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !8}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !8}
!27 = distinct !{!27, !10}
!28 = distinct !{!28, !8}
!29 = distinct !{!29, !10}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !8}
!36 = distinct !{!36, !10}
!37 = distinct !{!37, !8}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !8}
!44 = distinct !{!44, !10}
!45 = distinct !{!45, !10}
!46 = distinct !{!46, !8}
!47 = !{!48}
!48 = distinct !{!48, !49}
!49 = distinct !{!49, !"LVerDomain"}
!50 = !{!51}
!51 = distinct !{!51, !49}
!52 = distinct !{!52, !8}
!53 = distinct !{!53, !10}
!54 = distinct !{!54, !8}
!55 = !{i8 0, i8 2}
!56 = !{!57}
!57 = distinct !{!57, !58}
!58 = distinct !{!58, !"LVerDomain"}
!59 = !{!60}
!60 = distinct !{!60, !58}
!61 = distinct !{!61, !8}
!62 = distinct !{!62, !10}
!63 = distinct !{!63, !8}
!64 = !{!65}
!65 = distinct !{!65, !66}
!66 = distinct !{!66, !"LVerDomain"}
!67 = !{!68}
!68 = distinct !{!68, !66}
!69 = distinct !{!69, !8}
!70 = distinct !{!70, !10}
!71 = distinct !{!71, !8}
!72 = !{!73}
!73 = distinct !{!73, !74}
!74 = distinct !{!74, !"LVerDomain"}
!75 = !{!76}
!76 = distinct !{!76, !74}
!77 = distinct !{!77, !8}
!78 = distinct !{!78, !10}
!79 = distinct !{!79, !8}
!80 = !{!81}
!81 = distinct !{!81, !82}
!82 = distinct !{!82, !"LVerDomain"}
!83 = !{!84}
!84 = distinct !{!84, !82}
!85 = distinct !{!85, !8}
!86 = distinct !{!86, !10}
!87 = distinct !{!87, !10}
!88 = distinct !{!88, !8}
!89 = !{!90}
!90 = distinct !{!90, !91}
!91 = distinct !{!91, !"LVerDomain"}
!92 = !{!93}
!93 = distinct !{!93, !91}
!94 = distinct !{!94, !8}
!95 = distinct !{!95, !10}
!96 = distinct !{!96, !8}
!97 = !{!98}
!98 = distinct !{!98, !99}
!99 = distinct !{!99, !"LVerDomain"}
!100 = !{!101}
!101 = distinct !{!101, !99}
!102 = distinct !{!102, !8}
!103 = distinct !{!103, !10}
!104 = distinct !{!104, !8}
!105 = !{!106}
!106 = distinct !{!106, !107}
!107 = distinct !{!107, !"LVerDomain"}
!108 = !{!109}
!109 = distinct !{!109, !107}
!110 = distinct !{!110, !8}
!111 = distinct !{!111, !10}
!112 = distinct !{!112, !10}
!113 = distinct !{!113, !8}
!114 = !{!115}
!115 = distinct !{!115, !116}
!116 = distinct !{!116, !"LVerDomain"}
!117 = !{!118}
!118 = distinct !{!118, !116}
!119 = distinct !{!119, !8}
!120 = distinct !{!120, !10}
!121 = distinct !{!121, !8}
!122 = !{!123}
!123 = distinct !{!123, !124}
!124 = distinct !{!124, !"LVerDomain"}
!125 = !{!126}
!126 = distinct !{!126, !124}
!127 = distinct !{!127, !8}
!128 = distinct !{!128, !8}
!129 = !{!130}
!130 = distinct !{!130, !131}
!131 = distinct !{!131, !"LVerDomain"}
!132 = !{!133}
!133 = distinct !{!133, !131}
!134 = distinct !{!134, !8}
!135 = distinct !{!135, !8}
!136 = !{i32 0, i32 33}
!137 = !{!138}
!138 = distinct !{!138, !139}
!139 = distinct !{!139, !"LVerDomain"}
!140 = !{!141}
!141 = distinct !{!141, !139}
!142 = distinct !{!142, !8}
!143 = distinct !{!143, !8}
!144 = !{!145}
!145 = distinct !{!145, !146, !"_ZNK5angle6MatrixIfE8elementsEv: argument 0"}
!146 = distinct !{!146, !"_ZNK5angle6MatrixIfE8elementsEv"}
!147 = distinct !{!147, !10}
!148 = !{!149}
!149 = distinct !{!149, !150}
!150 = distinct !{!150, !"LVerDomain"}
!151 = !{!152}
!152 = distinct !{!152, !150}
!153 = distinct !{!153, !8}
!154 = distinct !{!154, !10}
!155 = distinct !{!155, !10}
!156 = distinct !{!156, !8}
!157 = !{!158}
!158 = distinct !{!158, !159}
!159 = distinct !{!159, !"LVerDomain"}
!160 = !{!161}
!161 = distinct !{!161, !159}
!162 = distinct !{!162, !8}
!163 = distinct !{!163, !10}
!164 = distinct !{!164, !10}
!165 = distinct !{!165, !8}
