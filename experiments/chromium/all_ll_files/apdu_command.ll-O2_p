; ModuleID = '../../components/apdu/apdu_command.cc'
source_filename = "../../components/apdu/apdu_command.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.apdu::ApduCommand" = type { i8, i8, i8, i8, i64, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.apdu::ApduCommand" }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.base::CheckedContiguousIterator" = type { i8*, i8*, i8* }
%"class.std::__1::basic_ostream" = type opaque
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIN4base25CheckedContiguousIteratorIKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IPS7_EESA_SA_ = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertINS_11__wrap_iterIPKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPhEEE4typeES8_SA_SA_ = comdat any

$_ZN4base25CheckedContiguousIteratorIKhEpLEl = comdat any

$_ZN4base25CheckedContiguousIteratorIKhEC2EPS1_S3_S3_ = comdat any

$_ZN4base25CheckedContiguousIteratorIKhEmIEl = comdat any

$_ZNK4base25CheckedContiguousIteratorIKhE15CheckComparableERKS2_ = comdat any

$_ZNK4base25CheckedContiguousIteratorIKhEdeEv = comdat any

$_ZN4base25CheckedContiguousIteratorIKhEppEv = comdat any

@.str = private unnamed_addr constant [29 x i8] c"../../base/containers/span.h\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"idx < size()\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"start <= current\00", align 1
@.str.3 = private unnamed_addr constant [42 x i8] c"../../base/containers/checked_iterators.h\00", align 1
@.str.4 = private unnamed_addr constant [15 x i8] c"current <= end\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"rhs <= end_ - current_\00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"-rhs <= current_ - start_\00", align 1
@.str.7 = private unnamed_addr constant [24 x i8] c"-rhs <= end_ - current_\00", align 1
@.str.8 = private unnamed_addr constant [25 x i8] c"rhs <= current_ - start_\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"start_ == other.start_\00", align 1
@.str.10 = private unnamed_addr constant [19 x i8] c"end_ == other.end_\00", align 1
@.str.11 = private unnamed_addr constant [17 x i8] c"current_ != end_\00", align 1

@_ZN4apdu11ApduCommandC1Ev = hidden unnamed_addr alias void (%"class.apdu::ApduCommand"*), void (%"class.apdu::ApduCommand"*)* @_ZN4apdu11ApduCommandC2Ev
@_ZN4apdu11ApduCommandC1EhhhhmNSt3__16vectorIhNS1_9allocatorIhEEEE = hidden unnamed_addr alias void (%"class.apdu::ApduCommand"*, i8, i8, i8, i8, i64, %"class.std::__1::vector"*), void (%"class.apdu::ApduCommand"*, i8, i8, i8, i8, i64, %"class.std::__1::vector"*)* @_ZN4apdu11ApduCommandC2EhhhhmNSt3__16vectorIhNS1_9allocatorIhEEEE
@_ZN4apdu11ApduCommandC1EOS0_ = hidden unnamed_addr alias void (%"class.apdu::ApduCommand"*, %"class.apdu::ApduCommand"*), void (%"class.apdu::ApduCommand"*, %"class.apdu::ApduCommand"*)* @_ZN4apdu11ApduCommandC2EOS0_
@_ZN4apdu11ApduCommandD1Ev = hidden unnamed_addr alias void (%"class.apdu::ApduCommand"*), void (%"class.apdu::ApduCommand"*)* @_ZN4apdu11ApduCommandD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4apdu11ApduCommand17CreateFromMessageEN4base4spanIKhLm18446744073709551615EEE(%"class.absl::optional"* noalias nocapture sret, i64, i8*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.std::__1::vector", align 16
  %7 = alloca %"class.base::CheckedContiguousIterator", align 8
  %8 = alloca %"class.base::CheckedContiguousIterator", align 8
  %9 = alloca %"class.base::CheckedContiguousIterator", align 8
  %10 = alloca %"class.base::CheckedContiguousIterator", align 8
  %11 = alloca %"class.base::CheckedContiguousIterator", align 8
  %12 = alloca %"class.base::CheckedContiguousIterator", align 8
  %13 = alloca %"class.base::CheckedContiguousIterator", align 8
  %14 = add i64 %1, -4
  %15 = icmp ugt i64 %14, 65540
  br i1 %15, label %16, label %19

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %17, align 8
  %18 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 40, i1 false) #7
  br label %129

19:                                               ; preds = %3
  %20 = load i8, i8* %2, align 1
  %21 = getelementptr inbounds i8, i8* %2, i64 1
  %22 = load i8, i8* %21, align 1
  %23 = getelementptr inbounds i8, i8* %2, i64 2
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds i8, i8* %2, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = bitcast %"class.std::__1::vector"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #7
  %28 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 0, i64 24, i1 false) #7
  switch i64 %1, label %51 [
    i64 4, label %112
    i64 5, label %29
    i64 6, label %29
    i64 7, label %32
  ]

29:                                               ; preds = %19, %19
  %30 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %30, align 8
  %31 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 40, i1 false) #7
  br label %128

32:                                               ; preds = %19
  %33 = getelementptr inbounds i8, i8* %2, i64 4
  %34 = load i8, i8* %33, align 1
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %37, align 8
  %38 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 40, i1 false) #7
  br label %128

39:                                               ; preds = %32
  %40 = getelementptr inbounds i8, i8* %2, i64 5
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i16
  %43 = shl nuw i16 %42, 8
  %44 = getelementptr inbounds i8, i8* %2, i64 6
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i16
  %47 = or i16 %43, %46
  %48 = zext i16 %47 to i64
  %49 = icmp eq i16 %47, 0
  %50 = select i1 %49, i64 65536, i64 %48
  br label %112

51:                                               ; preds = %19
  %52 = getelementptr inbounds i8, i8* %2, i64 4
  %53 = load i8, i8* %52, align 1
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %58, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %56, align 8
  %57 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %57, i8 0, i64 40, i1 false) #7
  br label %128

58:                                               ; preds = %51
  %59 = getelementptr inbounds i8, i8* %2, i64 5
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i64
  %62 = shl nuw nsw i64 %61, 8
  %63 = getelementptr inbounds i8, i8* %2, i64 6
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i64
  %66 = or i64 %62, %65
  %67 = add nuw nsw i64 %66, 7
  %68 = icmp eq i64 %67, %1
  br i1 %68, label %69, label %75

69:                                               ; preds = %58
  %70 = bitcast %"class.base::CheckedContiguousIterator"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %70) #7
  %71 = getelementptr inbounds i8, i8* %2, i64 %1
  call void @_ZN4base25CheckedContiguousIteratorIKhEC2EPS1_S3_S3_(%"class.base::CheckedContiguousIterator"* nonnull %8, i8* %2, i8* %2, i8* %71) #7
  %72 = bitcast %"class.base::CheckedContiguousIterator"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %72, i8* nonnull align 8 %70, i64 24, i1 false) #7
  %73 = call dereferenceable(24) %"class.base::CheckedContiguousIterator"* @_ZN4base25CheckedContiguousIteratorIKhEpLEl(%"class.base::CheckedContiguousIterator"* nonnull %7, i64 7) #7
  call void @_ZN4base25CheckedContiguousIteratorIKhEC2EPS1_S3_S3_(%"class.base::CheckedContiguousIterator"* nonnull %9, i8* %2, i8* %71, i8* %71) #7
  %74 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIN4base25CheckedContiguousIteratorIKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IPS7_EESA_SA_(%"class.std::__1::vector"* nonnull %6, i8* null, %"class.base::CheckedContiguousIterator"* nonnull byval(%"class.base::CheckedContiguousIterator") align 8 %7, %"class.base::CheckedContiguousIterator"* nonnull byval(%"class.base::CheckedContiguousIterator") align 8 %9)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %70) #7
  br label %112

75:                                               ; preds = %58
  %76 = add nuw nsw i64 %66, 9
  %77 = icmp eq i64 %76, %1
  br i1 %77, label %78, label %109

78:                                               ; preds = %75
  %79 = bitcast %"class.base::CheckedContiguousIterator"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %79) #7
  %80 = getelementptr inbounds i8, i8* %2, i64 %1
  call void @_ZN4base25CheckedContiguousIteratorIKhEC2EPS1_S3_S3_(%"class.base::CheckedContiguousIterator"* nonnull %11, i8* %2, i8* %2, i8* %80) #7
  %81 = bitcast %"class.base::CheckedContiguousIterator"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %81, i8* nonnull align 8 %79, i64 24, i1 false) #7
  %82 = call dereferenceable(24) %"class.base::CheckedContiguousIterator"* @_ZN4base25CheckedContiguousIteratorIKhEpLEl(%"class.base::CheckedContiguousIterator"* nonnull %10, i64 7) #7
  %83 = bitcast %"class.base::CheckedContiguousIterator"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %83) #7
  call void @_ZN4base25CheckedContiguousIteratorIKhEC2EPS1_S3_S3_(%"class.base::CheckedContiguousIterator"* nonnull %13, i8* %2, i8* %80, i8* %80) #7
  %84 = bitcast %"class.base::CheckedContiguousIterator"* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %84, i8* nonnull align 8 %83, i64 24, i1 false) #7
  %85 = call dereferenceable(24) %"class.base::CheckedContiguousIterator"* @_ZN4base25CheckedContiguousIteratorIKhEmIEl(%"class.base::CheckedContiguousIterator"* nonnull %12, i64 2) #7
  %86 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIN4base25CheckedContiguousIteratorIKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IPS7_EESA_SA_(%"class.std::__1::vector"* nonnull %6, i8* null, %"class.base::CheckedContiguousIterator"* nonnull byval(%"class.base::CheckedContiguousIterator") align 8 %10, %"class.base::CheckedContiguousIterator"* nonnull byval(%"class.base::CheckedContiguousIterator") align 8 %12)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %83) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %79) #7
  %87 = icmp ult i64 %67, %1
  br i1 %87, label %91, label %88

88:                                               ; preds = %78
  %89 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %89) #7
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i32 418, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0)) #7
  %90 = call %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %89) #7
  br label %91

91:                                               ; preds = %78, %88
  %92 = getelementptr inbounds i8, i8* %2, i64 %67
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i16
  %95 = shl nuw i16 %94, 8
  %96 = add nuw nsw i64 %66, 8
  %97 = icmp ult i64 %96, %1
  br i1 %97, label %101, label %98

98:                                               ; preds = %91
  %99 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %99) #7
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i32 418, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0)) #7
  %100 = call %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %99) #7
  br label %101

101:                                              ; preds = %91, %98
  %102 = getelementptr inbounds i8, i8* %2, i64 %96
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i16
  %105 = or i16 %95, %104
  %106 = zext i16 %105 to i64
  %107 = icmp eq i16 %105, 0
  %108 = select i1 %107, i64 65536, i64 %106
  br label %112

109:                                              ; preds = %75
  %110 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %110, align 8
  %111 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %111, i8 0, i64 40, i1 false) #7
  br label %128

112:                                              ; preds = %69, %101, %39, %19
  %113 = phi i64 [ %50, %39 ], [ 0, %19 ], [ %108, %101 ], [ 0, %69 ]
  %114 = bitcast %"class.std::__1::vector"* %6 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 16
  %116 = bitcast i8** %28 to i64*
  %117 = load i64, i64* %116, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 0, i64 24, i1 false) #7
  %118 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %118, align 8
  %119 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store i8 %20, i8* %119, align 8
  %120 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  store i8 %22, i8* %120, align 1
  %121 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2
  store i8 %24, i8* %121, align 2
  %122 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3
  store i8 %26, i8* %122, align 1
  %123 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4
  store i64 %113, i64* %123, align 8
  %124 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 5
  %125 = bitcast %"class.std::__1::vector"* %124 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %125, align 8
  %126 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 5, i32 0, i32 2, i32 0, i32 0
  %127 = bitcast i8** %126 to i64*
  store i64 %117, i64* %127, align 8
  br label %128

128:                                              ; preds = %29, %36, %55, %112, %109
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #7
  br label %129

129:                                              ; preds = %128, %16
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIN4base25CheckedContiguousIteratorIKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IPS7_EESA_SA_(%"class.std::__1::vector"*, i8*, %"class.base::CheckedContiguousIterator"* byval(%"class.base::CheckedContiguousIterator") align 8, %"class.base::CheckedContiguousIterator"* byval(%"class.base::CheckedContiguousIterator") align 8) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = alloca %"class.base::CheckedContiguousIterator", align 8
  %7 = alloca %"class.base::CheckedContiguousIterator", align 8
  %8 = alloca %"class.base::CheckedContiguousIterator", align 8
  %9 = alloca %"class.base::CheckedContiguousIterator", align 8
  %10 = alloca %"class.base::CheckedContiguousIterator", align 8
  %11 = alloca %"class.base::CheckedContiguousIterator", align 8
  %12 = alloca %"class.base::CheckedContiguousIterator", align 8
  %13 = alloca %"class.base::CheckedContiguousIterator", align 8
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %15 = bitcast %"class.base::CheckedContiguousIterator"* %2 to i8*
  %16 = bitcast %"class.base::CheckedContiguousIterator"* %3 to i8*
  %17 = bitcast %"class.base::CheckedContiguousIterator"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #7
  %18 = bitcast %"class.base::CheckedContiguousIterator"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %18, i8* nonnull align 8 %16, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %17, i8* nonnull align 8 %15, i64 24, i1 false)
  call void @_ZNK4base25CheckedContiguousIteratorIKhE15CheckComparableERKS2_(%"class.base::CheckedContiguousIterator"* nonnull %8, %"class.base::CheckedContiguousIterator"* nonnull dereferenceable(24) %9) #7
  %19 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %8, i64 0, i32 1
  %20 = bitcast i8** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %9, i64 0, i32 1
  %23 = bitcast i8** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %21, %24
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #7
  %26 = icmp sgt i64 %25, 0
  br i1 %26, label %27, label %372

27:                                               ; preds = %4
  %28 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %29 = bitcast i8** %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %32 = load i8*, i8** %31, align 8
  %33 = ptrtoint i8* %32 to i64
  %34 = sub i64 %30, %33
  %35 = icmp sgt i64 %25, %34
  br i1 %35, label %201, label %36

36:                                               ; preds = %27
  %37 = bitcast %"class.base::CheckedContiguousIterator"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %37) #7
  %38 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %13, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %37, i8* nonnull align 8 %16, i64 24, i1 false)
  %39 = bitcast i8** %31 to i64*
  %40 = sub i64 %33, %5
  %41 = icmp sgt i64 %25, %40
  br i1 %41, label %42, label %70

42:                                               ; preds = %36
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %37, i8* nonnull align 8 %15, i64 24, i1 false)
  %43 = call dereferenceable(24) %"class.base::CheckedContiguousIterator"* @_ZN4base25CheckedContiguousIteratorIKhEpLEl(%"class.base::CheckedContiguousIterator"* nonnull %13, i64 %40) #7
  %44 = load i64, i64* %39, align 8
  %45 = bitcast %"class.base::CheckedContiguousIterator"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %45) #7
  %46 = bitcast %"class.base::CheckedContiguousIterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %46) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %46, i8* nonnull align 8 %16, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %45, i8* nonnull align 8 %37, i64 24, i1 false)
  call void @_ZNK4base25CheckedContiguousIteratorIKhE15CheckComparableERKS2_(%"class.base::CheckedContiguousIterator"* nonnull %7, %"class.base::CheckedContiguousIterator"* nonnull dereferenceable(24) %6) #7
  %47 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %7, i64 0, i32 1
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %6, i64 0, i32 1
  %50 = load i8*, i8** %49, align 8
  %51 = icmp eq i8* %48, %50
  br i1 %51, label %65, label %52

52:                                               ; preds = %42, %52
  %53 = phi i64 [ %59, %52 ], [ %44, %42 ]
  %54 = inttoptr i64 %53 to i8*
  %55 = call dereferenceable(1) i8* @_ZNK4base25CheckedContiguousIteratorIKhEdeEv(%"class.base::CheckedContiguousIterator"* nonnull %7) #7
  %56 = load i8, i8* %55, align 1
  store i8 %56, i8* %54, align 1
  %57 = call dereferenceable(24) %"class.base::CheckedContiguousIterator"* @_ZN4base25CheckedContiguousIteratorIKhEppEv(%"class.base::CheckedContiguousIterator"* nonnull %7) #7
  %58 = getelementptr inbounds i8, i8* %54, i64 1
  %59 = ptrtoint i8* %58 to i64
  call void @_ZNK4base25CheckedContiguousIteratorIKhE15CheckComparableERKS2_(%"class.base::CheckedContiguousIterator"* nonnull %7, %"class.base::CheckedContiguousIterator"* nonnull dereferenceable(24) %6) #7
  %60 = load i8*, i8** %47, align 8
  %61 = load i8*, i8** %49, align 8
  %62 = icmp eq i8* %60, %61
  br i1 %62, label %63, label %52

63:                                               ; preds = %52
  %64 = ptrtoint i8* %58 to i64
  br label %65

65:                                               ; preds = %63, %42
  %66 = phi i64 [ %44, %42 ], [ %64, %63 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %45) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46) #7
  store i64 %66, i64* %39, align 8
  %67 = icmp sgt i64 %40, 0
  br i1 %67, label %68, label %200

68:                                               ; preds = %65
  %69 = inttoptr i64 %66 to i8*
  br label %70

70:                                               ; preds = %68, %36
  %71 = phi i64 [ %66, %68 ], [ %33, %36 ]
  %72 = phi i8* [ %69, %68 ], [ %32, %36 ]
  %73 = getelementptr inbounds i8, i8* %1, i64 %25
  %74 = ptrtoint i8* %73 to i64
  %75 = sub i64 %71, %74
  %76 = getelementptr inbounds i8, i8* %1, i64 %75
  %77 = icmp ult i8* %76, %32
  br i1 %77, label %78, label %178

78:                                               ; preds = %70
  %79 = sub i64 %25, %71
  %80 = getelementptr i8, i8* %32, i64 %79
  %81 = ptrtoint i8* %80 to i64
  %82 = icmp ult i8* %80, inttoptr (i64 32 to i8*)
  br i1 %82, label %83, label %86

83:                                               ; preds = %173, %86, %78
  %84 = phi i8* [ %76, %86 ], [ %76, %78 ], [ %96, %173 ]
  %85 = phi i8* [ %72, %86 ], [ %72, %78 ], [ %97, %173 ]
  br label %184

86:                                               ; preds = %78
  %87 = sub i64 %25, %71
  %88 = getelementptr i8, i8* %32, i64 %87
  %89 = ptrtoint i8* %88 to i64
  %90 = getelementptr i8, i8* %72, i64 %89
  %91 = icmp ult i8* %72, %32
  %92 = icmp ult i8* %76, %90
  %93 = and i1 %91, %92
  br i1 %93, label %83, label %94

94:                                               ; preds = %86
  %95 = and i64 %81, -32
  %96 = getelementptr i8, i8* %76, i64 %95
  %97 = getelementptr i8, i8* %72, i64 %95
  %98 = add i64 %95, -32
  %99 = lshr exact i64 %98, 5
  %100 = add nuw nsw i64 %99, 1
  %101 = and i64 %100, 3
  %102 = icmp ult i64 %98, 96
  br i1 %102, label %154, label %103

103:                                              ; preds = %94
  %104 = sub nsw i64 %100, %101
  br label %105

105:                                              ; preds = %105, %103
  %106 = phi i64 [ 0, %103 ], [ %151, %105 ]
  %107 = phi i64 [ %104, %103 ], [ %152, %105 ]
  %108 = getelementptr i8, i8* %76, i64 %106
  %109 = getelementptr i8, i8* %72, i64 %106
  %110 = bitcast i8* %108 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1, !alias.scope !2
  %112 = getelementptr i8, i8* %108, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !2
  %115 = bitcast i8* %109 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %115, align 1, !alias.scope !5, !noalias !2
  %116 = getelementptr i8, i8* %109, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %117, align 1, !alias.scope !5, !noalias !2
  %118 = or i64 %106, 32
  %119 = getelementptr i8, i8* %76, i64 %118
  %120 = getelementptr i8, i8* %72, i64 %118
  %121 = bitcast i8* %119 to <16 x i8>*
  %122 = load <16 x i8>, <16 x i8>* %121, align 1, !alias.scope !2
  %123 = getelementptr i8, i8* %119, i64 16
  %124 = bitcast i8* %123 to <16 x i8>*
  %125 = load <16 x i8>, <16 x i8>* %124, align 1, !alias.scope !2
  %126 = bitcast i8* %120 to <16 x i8>*
  store <16 x i8> %122, <16 x i8>* %126, align 1, !alias.scope !5, !noalias !2
  %127 = getelementptr i8, i8* %120, i64 16
  %128 = bitcast i8* %127 to <16 x i8>*
  store <16 x i8> %125, <16 x i8>* %128, align 1, !alias.scope !5, !noalias !2
  %129 = or i64 %106, 64
  %130 = getelementptr i8, i8* %76, i64 %129
  %131 = getelementptr i8, i8* %72, i64 %129
  %132 = bitcast i8* %130 to <16 x i8>*
  %133 = load <16 x i8>, <16 x i8>* %132, align 1, !alias.scope !2
  %134 = getelementptr i8, i8* %130, i64 16
  %135 = bitcast i8* %134 to <16 x i8>*
  %136 = load <16 x i8>, <16 x i8>* %135, align 1, !alias.scope !2
  %137 = bitcast i8* %131 to <16 x i8>*
  store <16 x i8> %133, <16 x i8>* %137, align 1, !alias.scope !5, !noalias !2
  %138 = getelementptr i8, i8* %131, i64 16
  %139 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> %136, <16 x i8>* %139, align 1, !alias.scope !5, !noalias !2
  %140 = or i64 %106, 96
  %141 = getelementptr i8, i8* %76, i64 %140
  %142 = getelementptr i8, i8* %72, i64 %140
  %143 = bitcast i8* %141 to <16 x i8>*
  %144 = load <16 x i8>, <16 x i8>* %143, align 1, !alias.scope !2
  %145 = getelementptr i8, i8* %141, i64 16
  %146 = bitcast i8* %145 to <16 x i8>*
  %147 = load <16 x i8>, <16 x i8>* %146, align 1, !alias.scope !2
  %148 = bitcast i8* %142 to <16 x i8>*
  store <16 x i8> %144, <16 x i8>* %148, align 1, !alias.scope !5, !noalias !2
  %149 = getelementptr i8, i8* %142, i64 16
  %150 = bitcast i8* %149 to <16 x i8>*
  store <16 x i8> %147, <16 x i8>* %150, align 1, !alias.scope !5, !noalias !2
  %151 = add i64 %106, 128
  %152 = add i64 %107, -4
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %105, !llvm.loop !7

154:                                              ; preds = %105, %94
  %155 = phi i64 [ 0, %94 ], [ %151, %105 ]
  %156 = icmp eq i64 %101, 0
  br i1 %156, label %173, label %157

157:                                              ; preds = %154, %157
  %158 = phi i64 [ %170, %157 ], [ %155, %154 ]
  %159 = phi i64 [ %171, %157 ], [ %101, %154 ]
  %160 = getelementptr i8, i8* %76, i64 %158
  %161 = getelementptr i8, i8* %72, i64 %158
  %162 = bitcast i8* %160 to <16 x i8>*
  %163 = load <16 x i8>, <16 x i8>* %162, align 1, !alias.scope !2
  %164 = getelementptr i8, i8* %160, i64 16
  %165 = bitcast i8* %164 to <16 x i8>*
  %166 = load <16 x i8>, <16 x i8>* %165, align 1, !alias.scope !2
  %167 = bitcast i8* %161 to <16 x i8>*
  store <16 x i8> %163, <16 x i8>* %167, align 1, !alias.scope !5, !noalias !2
  %168 = getelementptr i8, i8* %161, i64 16
  %169 = bitcast i8* %168 to <16 x i8>*
  store <16 x i8> %166, <16 x i8>* %169, align 1, !alias.scope !5, !noalias !2
  %170 = add i64 %158, 32
  %171 = add i64 %159, -1
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %173, label %157, !llvm.loop !9

173:                                              ; preds = %157, %154
  %174 = icmp eq i64 %95, %81
  br i1 %174, label %175, label %83

175:                                              ; preds = %184, %173
  %176 = phi i8* [ %97, %173 ], [ %189, %184 ]
  %177 = ptrtoint i8* %176 to i64
  br label %178

178:                                              ; preds = %175, %70
  %179 = phi i64 [ %177, %175 ], [ %71, %70 ]
  store i64 %179, i64* %39, align 8
  %180 = icmp eq i64 %75, 0
  br i1 %180, label %191, label %181

181:                                              ; preds = %178
  %182 = sub i64 0, %75
  %183 = getelementptr inbounds i8, i8* %72, i64 %182
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %183, i8* align 1 %1, i64 %75, i1 false) #7
  br label %191

184:                                              ; preds = %83, %184
  %185 = phi i8* [ %188, %184 ], [ %84, %83 ]
  %186 = phi i8* [ %189, %184 ], [ %85, %83 ]
  %187 = load i8, i8* %185, align 1
  store i8 %187, i8* %186, align 1
  %188 = getelementptr inbounds i8, i8* %185, i64 1
  %189 = getelementptr inbounds i8, i8* %186, i64 1
  %190 = icmp eq i8* %188, %32
  br i1 %190, label %175, label %184, !llvm.loop !11

191:                                              ; preds = %178, %181
  %192 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %2, i64 0, i32 1
  %193 = load i8*, i8** %192, align 8
  %194 = bitcast i8** %38 to i64*
  %195 = load i64, i64* %194, align 8
  %196 = ptrtoint i8* %193 to i64
  %197 = sub i64 %195, %196
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %200, label %199

199:                                              ; preds = %191
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %193, i64 %197, i1 false) #7
  br label %200

200:                                              ; preds = %199, %191, %65
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %37) #7
  br label %372

201:                                              ; preds = %27
  %202 = bitcast i8** %31 to i64*
  %203 = bitcast %"class.std::__1::vector"* %0 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = sub i64 %33, %204
  %206 = add i64 %205, %25
  %207 = icmp slt i64 %206, 0
  br i1 %207, label %208, label %210

208:                                              ; preds = %201
  %209 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %209) #8
  unreachable

210:                                              ; preds = %201
  %211 = sub i64 %30, %204
  %212 = icmp ult i64 %211, 4611686018427387903
  br i1 %212, label %215, label %213

213:                                              ; preds = %210
  %214 = sub i64 %5, %204
  br label %221

215:                                              ; preds = %210
  %216 = shl i64 %211, 1
  %217 = icmp ult i64 %216, %206
  %218 = select i1 %217, i64 %206, i64 %216
  %219 = sub i64 %5, %204
  %220 = icmp eq i64 %218, 0
  br i1 %220, label %225, label %221

221:                                              ; preds = %213, %215
  %222 = phi i64 [ %214, %213 ], [ %219, %215 ]
  %223 = phi i64 [ 9223372036854775807, %213 ], [ %218, %215 ]
  %224 = call i8* @_Znwm(i64 %223) #9
  br label %225

225:                                              ; preds = %215, %221
  %226 = phi i64 [ %222, %221 ], [ %219, %215 ]
  %227 = phi i64 [ %223, %221 ], [ 0, %215 ]
  %228 = phi i8* [ %224, %221 ], [ null, %215 ]
  %229 = getelementptr inbounds i8, i8* %228, i64 %226
  %230 = getelementptr inbounds i8, i8* %228, i64 %227
  %231 = ptrtoint i8* %230 to i64
  %232 = bitcast %"class.base::CheckedContiguousIterator"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %232)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %232, i8* nonnull align 8 %15, i64 24, i1 false)
  %233 = bitcast %"class.base::CheckedContiguousIterator"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %233) #7
  %234 = bitcast %"class.base::CheckedContiguousIterator"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %234) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %234, i8* nonnull align 8 %16, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %233, i8* nonnull align 8 %15, i64 24, i1 false)
  call void @_ZNK4base25CheckedContiguousIteratorIKhE15CheckComparableERKS2_(%"class.base::CheckedContiguousIterator"* nonnull %10, %"class.base::CheckedContiguousIterator"* nonnull dereferenceable(24) %11) #7
  %235 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %10, i64 0, i32 1
  %236 = bitcast i8** %235 to i64*
  %237 = load i64, i64* %236, align 8
  %238 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %11, i64 0, i32 1
  %239 = bitcast i8** %238 to i64*
  %240 = load i64, i64* %239, align 8
  %241 = sub i64 %237, %240
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %233) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %234) #7
  %242 = getelementptr inbounds i8, i8* %229, i64 %241
  %243 = icmp eq i64 %241, 0
  br i1 %243, label %251, label %244

244:                                              ; preds = %225, %244
  %245 = phi i8* [ %248, %244 ], [ %229, %225 ]
  %246 = call dereferenceable(1) i8* @_ZNK4base25CheckedContiguousIteratorIKhEdeEv(%"class.base::CheckedContiguousIterator"* nonnull %12) #7
  %247 = load i8, i8* %246, align 1
  store i8 %247, i8* %245, align 1
  %248 = getelementptr inbounds i8, i8* %245, i64 1
  %249 = call dereferenceable(24) %"class.base::CheckedContiguousIterator"* @_ZN4base25CheckedContiguousIteratorIKhEppEv(%"class.base::CheckedContiguousIterator"* nonnull %12) #7
  %250 = icmp eq i8* %242, %248
  br i1 %250, label %251, label %244

251:                                              ; preds = %244, %225
  %252 = phi i8* [ %229, %225 ], [ %242, %244 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %232)
  %253 = load i8*, i8** %14, align 8
  %254 = ptrtoint i8* %253 to i64
  %255 = sub i64 %5, %254
  %256 = sub i64 0, %255
  %257 = getelementptr inbounds i8, i8* %229, i64 %256
  %258 = ptrtoint i8* %257 to i64
  %259 = icmp sgt i64 %255, 0
  br i1 %259, label %260, label %261

260:                                              ; preds = %251
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %257, i8* align 1 %253, i64 %255, i1 false) #7
  br label %261

261:                                              ; preds = %260, %251
  %262 = load i8*, i8** %31, align 8
  %263 = icmp eq i8* %262, %1
  br i1 %263, label %366, label %264

264:                                              ; preds = %261
  %265 = ptrtoint i8* %262 to i64
  %266 = sub i64 %265, %5
  %267 = icmp ult i64 %266, 32
  br i1 %267, label %356, label %268

268:                                              ; preds = %264
  %269 = ptrtoint i8* %262 to i64
  %270 = sub i64 %269, %5
  %271 = getelementptr i8, i8* %252, i64 %270
  %272 = icmp ult i8* %252, %262
  %273 = icmp ugt i8* %271, %1
  %274 = and i1 %272, %273
  br i1 %274, label %356, label %275

275:                                              ; preds = %268
  %276 = and i64 %266, -32
  %277 = getelementptr i8, i8* %252, i64 %276
  %278 = getelementptr i8, i8* %1, i64 %276
  %279 = add i64 %276, -32
  %280 = lshr exact i64 %279, 5
  %281 = add nuw nsw i64 %280, 1
  %282 = and i64 %281, 3
  %283 = icmp ult i64 %279, 96
  br i1 %283, label %335, label %284

284:                                              ; preds = %275
  %285 = sub nsw i64 %281, %282
  br label %286

286:                                              ; preds = %286, %284
  %287 = phi i64 [ 0, %284 ], [ %332, %286 ]
  %288 = phi i64 [ %285, %284 ], [ %333, %286 ]
  %289 = getelementptr i8, i8* %252, i64 %287
  %290 = getelementptr i8, i8* %1, i64 %287
  %291 = bitcast i8* %290 to <16 x i8>*
  %292 = load <16 x i8>, <16 x i8>* %291, align 1, !alias.scope !12
  %293 = getelementptr i8, i8* %290, i64 16
  %294 = bitcast i8* %293 to <16 x i8>*
  %295 = load <16 x i8>, <16 x i8>* %294, align 1, !alias.scope !12
  %296 = bitcast i8* %289 to <16 x i8>*
  store <16 x i8> %292, <16 x i8>* %296, align 1, !alias.scope !15, !noalias !12
  %297 = getelementptr i8, i8* %289, i64 16
  %298 = bitcast i8* %297 to <16 x i8>*
  store <16 x i8> %295, <16 x i8>* %298, align 1, !alias.scope !15, !noalias !12
  %299 = or i64 %287, 32
  %300 = getelementptr i8, i8* %252, i64 %299
  %301 = getelementptr i8, i8* %1, i64 %299
  %302 = bitcast i8* %301 to <16 x i8>*
  %303 = load <16 x i8>, <16 x i8>* %302, align 1, !alias.scope !12
  %304 = getelementptr i8, i8* %301, i64 16
  %305 = bitcast i8* %304 to <16 x i8>*
  %306 = load <16 x i8>, <16 x i8>* %305, align 1, !alias.scope !12
  %307 = bitcast i8* %300 to <16 x i8>*
  store <16 x i8> %303, <16 x i8>* %307, align 1, !alias.scope !15, !noalias !12
  %308 = getelementptr i8, i8* %300, i64 16
  %309 = bitcast i8* %308 to <16 x i8>*
  store <16 x i8> %306, <16 x i8>* %309, align 1, !alias.scope !15, !noalias !12
  %310 = or i64 %287, 64
  %311 = getelementptr i8, i8* %252, i64 %310
  %312 = getelementptr i8, i8* %1, i64 %310
  %313 = bitcast i8* %312 to <16 x i8>*
  %314 = load <16 x i8>, <16 x i8>* %313, align 1, !alias.scope !12
  %315 = getelementptr i8, i8* %312, i64 16
  %316 = bitcast i8* %315 to <16 x i8>*
  %317 = load <16 x i8>, <16 x i8>* %316, align 1, !alias.scope !12
  %318 = bitcast i8* %311 to <16 x i8>*
  store <16 x i8> %314, <16 x i8>* %318, align 1, !alias.scope !15, !noalias !12
  %319 = getelementptr i8, i8* %311, i64 16
  %320 = bitcast i8* %319 to <16 x i8>*
  store <16 x i8> %317, <16 x i8>* %320, align 1, !alias.scope !15, !noalias !12
  %321 = or i64 %287, 96
  %322 = getelementptr i8, i8* %252, i64 %321
  %323 = getelementptr i8, i8* %1, i64 %321
  %324 = bitcast i8* %323 to <16 x i8>*
  %325 = load <16 x i8>, <16 x i8>* %324, align 1, !alias.scope !12
  %326 = getelementptr i8, i8* %323, i64 16
  %327 = bitcast i8* %326 to <16 x i8>*
  %328 = load <16 x i8>, <16 x i8>* %327, align 1, !alias.scope !12
  %329 = bitcast i8* %322 to <16 x i8>*
  store <16 x i8> %325, <16 x i8>* %329, align 1, !alias.scope !15, !noalias !12
  %330 = getelementptr i8, i8* %322, i64 16
  %331 = bitcast i8* %330 to <16 x i8>*
  store <16 x i8> %328, <16 x i8>* %331, align 1, !alias.scope !15, !noalias !12
  %332 = add i64 %287, 128
  %333 = add i64 %288, -4
  %334 = icmp eq i64 %333, 0
  br i1 %334, label %335, label %286, !llvm.loop !17

335:                                              ; preds = %286, %275
  %336 = phi i64 [ 0, %275 ], [ %332, %286 ]
  %337 = icmp eq i64 %282, 0
  br i1 %337, label %354, label %338

338:                                              ; preds = %335, %338
  %339 = phi i64 [ %351, %338 ], [ %336, %335 ]
  %340 = phi i64 [ %352, %338 ], [ %282, %335 ]
  %341 = getelementptr i8, i8* %252, i64 %339
  %342 = getelementptr i8, i8* %1, i64 %339
  %343 = bitcast i8* %342 to <16 x i8>*
  %344 = load <16 x i8>, <16 x i8>* %343, align 1, !alias.scope !12
  %345 = getelementptr i8, i8* %342, i64 16
  %346 = bitcast i8* %345 to <16 x i8>*
  %347 = load <16 x i8>, <16 x i8>* %346, align 1, !alias.scope !12
  %348 = bitcast i8* %341 to <16 x i8>*
  store <16 x i8> %344, <16 x i8>* %348, align 1, !alias.scope !15, !noalias !12
  %349 = getelementptr i8, i8* %341, i64 16
  %350 = bitcast i8* %349 to <16 x i8>*
  store <16 x i8> %347, <16 x i8>* %350, align 1, !alias.scope !15, !noalias !12
  %351 = add i64 %339, 32
  %352 = add i64 %340, -1
  %353 = icmp eq i64 %352, 0
  br i1 %353, label %354, label %338, !llvm.loop !18

354:                                              ; preds = %338, %335
  %355 = icmp eq i64 %266, %276
  br i1 %355, label %366, label %356

356:                                              ; preds = %354, %268, %264
  %357 = phi i8* [ %252, %268 ], [ %252, %264 ], [ %277, %354 ]
  %358 = phi i8* [ %1, %268 ], [ %1, %264 ], [ %278, %354 ]
  br label %359

359:                                              ; preds = %356, %359
  %360 = phi i8* [ %364, %359 ], [ %357, %356 ]
  %361 = phi i8* [ %363, %359 ], [ %358, %356 ]
  %362 = load i8, i8* %361, align 1
  store i8 %362, i8* %360, align 1
  %363 = getelementptr inbounds i8, i8* %361, i64 1
  %364 = getelementptr inbounds i8, i8* %360, i64 1
  %365 = icmp eq i8* %363, %262
  br i1 %365, label %366, label %359, !llvm.loop !19

366:                                              ; preds = %359, %354, %261
  %367 = phi i8* [ %252, %261 ], [ %277, %354 ], [ %364, %359 ]
  %368 = ptrtoint i8* %367 to i64
  %369 = load i8*, i8** %14, align 8
  store i64 %258, i64* %203, align 8
  store i64 %368, i64* %202, align 8
  store i64 %231, i64* %29, align 8
  %370 = icmp eq i8* %369, null
  br i1 %370, label %372, label %371

371:                                              ; preds = %366
  call void @_ZdlPv(i8* nonnull %369) #9
  br label %372

372:                                              ; preds = %371, %366, %200, %4
  %373 = phi i8* [ %1, %200 ], [ %1, %4 ], [ %229, %366 ], [ %229, %371 ]
  ret i8* %373
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4apdu11ApduCommandC2Ev(%"class.apdu::ApduCommand"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %0, i64 0, i32 4
  %3 = bitcast %"class.apdu::ApduCommand"* %0 to i32*
  store i32 0, i32* %3, align 8
  %4 = bitcast i64* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4apdu11ApduCommandC2EhhhhmNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.apdu::ApduCommand"* nocapture, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i64, %"class.std::__1::vector"* nocapture) unnamed_addr #0 align 2 {
  %8 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %0, i64 0, i32 0
  store i8 %1, i8* %8, align 8
  %9 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %0, i64 0, i32 1
  store i8 %2, i8* %9, align 1
  %10 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %0, i64 0, i32 2
  store i8 %3, i8* %10, align 2
  %11 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %0, i64 0, i32 3
  store i8 %4, i8* %11, align 1
  %12 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %0, i64 0, i32 4
  store i64 %5, i64* %12, align 8
  %13 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %0, i64 0, i32 5
  %14 = bitcast %"class.std::__1::vector"* %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #7
  %15 = bitcast %"class.std::__1::vector"* %6 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.std::__1::vector"* %13 to i64*
  store i64 %16, i64* %17, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %19 = bitcast i8** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %0, i64 0, i32 5, i32 0, i32 1
  %22 = bitcast i8** %21 to i64*
  store i64 %20, i64* %22, align 8
  %23 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %24 = bitcast i8** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  %27 = bitcast i8** %26 to i64*
  store i64 %25, i64* %27, align 8
  %28 = bitcast %"class.std::__1::vector"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 24, i1 false) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4apdu11ApduCommandC2EOS0_(%"class.apdu::ApduCommand"* nocapture, %"class.apdu::ApduCommand"* nocapture dereferenceable(40)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %1, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 16, i1 false)
  %5 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %0, i64 0, i32 5
  %6 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %1, i64 0, i32 5
  %7 = bitcast %"class.std::__1::vector"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #7
  %8 = bitcast %"class.std::__1::vector"* %6 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %5 to i64*
  store i64 %9, i64* %10, align 8
  %11 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %1, i64 0, i32 5, i32 0, i32 1
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %0, i64 0, i32 5, i32 0, i32 1
  %15 = bitcast i8** %14 to i64*
  store i64 %13, i64* %15, align 8
  %16 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %1, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  %20 = bitcast i8** %19 to i64*
  store i64 %18, i64* %20, align 8
  %21 = bitcast %"class.std::__1::vector"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 24, i1 false) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %"class.apdu::ApduCommand"* @_ZN4apdu11ApduCommandaSEOS0_(%"class.apdu::ApduCommand"* returned, %"class.apdu::ApduCommand"* nocapture dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %1, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 16, i1 false)
  %5 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %0, i64 0, i32 5
  %6 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %1, i64 0, i32 5
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = icmp eq i8* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %2
  %11 = ptrtoint i8* %8 to i64
  %12 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %0, i64 0, i32 5, i32 0, i32 1
  %13 = bitcast i8** %12 to i64*
  store i64 %11, i64* %13, align 8
  tail call void @_ZdlPv(i8* nonnull %8) #9
  %14 = bitcast %"class.std::__1::vector"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #7
  br label %15

15:                                               ; preds = %2, %10
  %16 = bitcast %"class.std::__1::vector"* %6 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.std::__1::vector"* %5 to i64*
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %1, i64 0, i32 5, i32 0, i32 1
  %20 = bitcast i8** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %0, i64 0, i32 5, i32 0, i32 1
  %23 = bitcast i8** %22 to i64*
  store i64 %21, i64* %23, align 8
  %24 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %1, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  %25 = bitcast i8** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  %28 = bitcast i8** %27 to i64*
  store i64 %26, i64* %28, align 8
  %29 = bitcast %"class.std::__1::vector"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 24, i1 false) #7
  ret %"class.apdu::ApduCommand"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4apdu11ApduCommandD2Ev(%"class.apdu::ApduCommand"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %0, i64 0, i32 5, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i8* %3 to i64
  %7 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %0, i64 0, i32 5, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  store i64 %6, i64* %8, align 8
  tail call void @_ZdlPv(i8* nonnull %3) #9
  br label %9

9:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4apdu11ApduCommand17GetEncodedCommandEv(%"class.std::__1::vector"* noalias sret, %"class.apdu::ApduCommand"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %6 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %1, i64 0, i32 0
  %7 = load i8, i8* %6, align 8
  %8 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %1, i64 0, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %1, i64 0, i32 2
  %11 = load i8, i8* %10, align 2
  %12 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %1, i64 0, i32 3
  %13 = load i8, i8* %12, align 1
  %14 = tail call i8* @_Znwm(i64 4) #9
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 4
  store i8* %15, i8** %5, align 8
  %16 = bitcast i8** %4 to i64*
  store i8 %7, i8* %14, align 1
  %17 = getelementptr inbounds i8, i8* %14, i64 1
  store i8 %9, i8* %17, align 1
  %18 = getelementptr inbounds i8, i8* %14, i64 2
  store i8 %11, i8* %18, align 1
  %19 = getelementptr inbounds i8, i8* %14, i64 3
  store i8 %13, i8* %19, align 1
  %20 = ptrtoint i8* %15 to i64
  store i64 %20, i64* %16, align 8
  %21 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %1, i64 0, i32 5, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %1, i64 0, i32 5, i32 0, i32 1
  %24 = load i8*, i8** %23, align 8
  %25 = icmp eq i8* %22, %24
  br i1 %25, label %150, label %26

26:                                               ; preds = %2
  %27 = ptrtoint i8* %22 to i64
  %28 = ptrtoint i8* %24 to i64
  %29 = sub i64 %28, %27
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = tail call i8* @_Znwm(i64 8) #9
  %32 = getelementptr inbounds i8, i8* %31, i64 4
  store i8 0, i8* %32, align 1
  %33 = insertelement <2 x i8*> undef, i8* %31, i32 0
  %34 = shufflevector <2 x i8*> %33, <2 x i8*> undef, <2 x i32> zeroinitializer
  %35 = getelementptr i8, <2 x i8*> %34, <2 x i64> <i64 5, i64 8>
  %36 = ptrtoint <2 x i8*> %35 to <2 x i64>
  %37 = ptrtoint i8* %31 to i64
  %38 = bitcast i8* %14 to i32*
  %39 = bitcast i8* %31 to i32*
  %40 = load i32, i32* %38, align 1
  store i32 %40, i32* %39, align 1
  store i64 %37, i64* %30, align 8
  %41 = bitcast i8** %4 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %41, align 8
  tail call void @_ZdlPv(i8* nonnull %14) #9
  %42 = load i8*, i8** %4, align 8
  %43 = load i8*, i8** %5, align 8
  %44 = ptrtoint i8* %42 to i64
  %45 = icmp ult i64 %29, 65535
  %46 = select i1 %45, i64 %29, i64 65535
  %47 = lshr i64 %46, 8
  %48 = trunc i64 %47 to i8
  %49 = icmp ult i8* %42, %43
  %50 = ptrtoint i8* %43 to i64
  br i1 %49, label %51, label %54

51:                                               ; preds = %26
  store i8 %48, i8* %42, align 1
  %52 = getelementptr inbounds i8, i8* %42, i64 1
  %53 = ptrtoint i8* %52 to i64
  store i64 %53, i64* %16, align 8
  br label %95

54:                                               ; preds = %26
  %55 = ptrtoint i8* %42 to i64
  %56 = bitcast %"class.std::__1::vector"* %0 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = sub i64 %55, %57
  %59 = add i64 %58, 1
  %60 = icmp slt i64 %59, 0
  %61 = inttoptr i64 %57 to i8*
  br i1 %60, label %62, label %64

62:                                               ; preds = %54
  %63 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %63) #8
  unreachable

64:                                               ; preds = %54
  %65 = bitcast i8** %5 to i64*
  %66 = sub i64 %50, %57
  %67 = icmp ult i64 %66, 4611686018427387903
  br i1 %67, label %68, label %73

68:                                               ; preds = %64
  %69 = shl i64 %66, 1
  %70 = icmp ult i64 %69, %59
  %71 = select i1 %70, i64 %59, i64 %69
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %76, label %73

73:                                               ; preds = %68, %64
  %74 = phi i64 [ %71, %68 ], [ 9223372036854775807, %64 ]
  %75 = tail call i8* @_Znwm(i64 %74) #9
  br label %76

76:                                               ; preds = %73, %68
  %77 = phi i64 [ %74, %73 ], [ 0, %68 ]
  %78 = phi i8* [ %75, %73 ], [ null, %68 ]
  %79 = getelementptr inbounds i8, i8* %78, i64 %58
  %80 = getelementptr inbounds i8, i8* %78, i64 %77
  %81 = ptrtoint i8* %80 to i64
  store i8 %48, i8* %79, align 1
  %82 = getelementptr inbounds i8, i8* %79, i64 1
  %83 = ptrtoint i8* %82 to i64
  %84 = sub i64 %44, %57
  %85 = sub i64 0, %84
  %86 = getelementptr inbounds i8, i8* %79, i64 %85
  %87 = ptrtoint i8* %86 to i64
  %88 = icmp sgt i64 %84, 0
  br i1 %88, label %89, label %90

89:                                               ; preds = %76
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %86, i8* align 1 %61, i64 %84, i1 false) #7
  br label %90

90:                                               ; preds = %89, %76
  store i64 %87, i64* %56, align 8
  store i64 %83, i64* %16, align 8
  store i64 %81, i64* %65, align 8
  %91 = icmp eq i64 %57, 0
  br i1 %91, label %95, label %92

92:                                               ; preds = %90
  tail call void @_ZdlPv(i8* nonnull %61) #9
  %93 = load i8*, i8** %4, align 8
  %94 = ptrtoint i8* %93 to i64
  br label %95

95:                                               ; preds = %51, %90, %92
  %96 = phi i64 [ %53, %51 ], [ %83, %90 ], [ %94, %92 ]
  %97 = phi i8* [ %52, %51 ], [ %82, %90 ], [ %93, %92 ]
  %98 = trunc i64 %46 to i8
  %99 = load i8*, i8** %5, align 8
  %100 = icmp ult i8* %97, %99
  %101 = ptrtoint i8* %99 to i64
  br i1 %100, label %102, label %105

102:                                              ; preds = %95
  store i8 %98, i8* %97, align 1
  %103 = getelementptr inbounds i8, i8* %97, i64 1
  %104 = ptrtoint i8* %103 to i64
  store i64 %104, i64* %16, align 8
  br label %145

105:                                              ; preds = %95
  %106 = ptrtoint i8* %97 to i64
  %107 = bitcast %"class.std::__1::vector"* %0 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = sub i64 %106, %108
  %110 = add i64 %109, 1
  %111 = icmp slt i64 %110, 0
  %112 = inttoptr i64 %108 to i8*
  br i1 %111, label %113, label %115

113:                                              ; preds = %105
  %114 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %114) #8
  unreachable

115:                                              ; preds = %105
  %116 = bitcast i8** %5 to i64*
  %117 = sub i64 %101, %108
  %118 = icmp ult i64 %117, 4611686018427387903
  br i1 %118, label %119, label %124

119:                                              ; preds = %115
  %120 = shl i64 %117, 1
  %121 = icmp ult i64 %120, %110
  %122 = select i1 %121, i64 %110, i64 %120
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %127, label %124

124:                                              ; preds = %119, %115
  %125 = phi i64 [ %122, %119 ], [ 9223372036854775807, %115 ]
  %126 = tail call i8* @_Znwm(i64 %125) #9
  br label %127

127:                                              ; preds = %124, %119
  %128 = phi i64 [ %125, %124 ], [ 0, %119 ]
  %129 = phi i8* [ %126, %124 ], [ null, %119 ]
  %130 = getelementptr inbounds i8, i8* %129, i64 %109
  %131 = getelementptr inbounds i8, i8* %129, i64 %128
  %132 = ptrtoint i8* %131 to i64
  store i8 %98, i8* %130, align 1
  %133 = getelementptr inbounds i8, i8* %130, i64 1
  %134 = ptrtoint i8* %133 to i64
  %135 = sub i64 %96, %108
  %136 = sub i64 0, %135
  %137 = getelementptr inbounds i8, i8* %130, i64 %136
  %138 = ptrtoint i8* %137 to i64
  %139 = icmp sgt i64 %135, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %127
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %137, i8* align 1 %112, i64 %135, i1 false) #7
  br label %141

141:                                              ; preds = %140, %127
  store i64 %138, i64* %107, align 8
  store i64 %134, i64* %16, align 8
  store i64 %132, i64* %116, align 8
  %142 = icmp eq i64 %108, 0
  br i1 %142, label %145, label %143

143:                                              ; preds = %141
  tail call void @_ZdlPv(i8* nonnull %112) #9
  %144 = load i8*, i8** %4, align 8
  br label %145

145:                                              ; preds = %102, %141, %143
  %146 = phi i8* [ %103, %102 ], [ %133, %141 ], [ %144, %143 ]
  %147 = load i8*, i8** %21, align 8
  %148 = getelementptr inbounds i8, i8* %147, i64 %46
  %149 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertINS_11__wrap_iterIPKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPhEEE4typeES8_SA_SA_(%"class.std::__1::vector"* %0, i8* %146, i8* %147, i8* %148)
  br label %167

150:                                              ; preds = %2
  %151 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %1, i64 0, i32 4
  %152 = load i64, i64* %151, align 8
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %167, label %154

154:                                              ; preds = %150
  %155 = bitcast %"class.std::__1::vector"* %0 to i64*
  %156 = tail call i8* @_Znwm(i64 8) #9
  %157 = getelementptr inbounds i8, i8* %156, i64 4
  store i8 0, i8* %157, align 1
  %158 = insertelement <2 x i8*> undef, i8* %156, i32 0
  %159 = shufflevector <2 x i8*> %158, <2 x i8*> undef, <2 x i32> zeroinitializer
  %160 = getelementptr i8, <2 x i8*> %159, <2 x i64> <i64 5, i64 8>
  %161 = ptrtoint <2 x i8*> %160 to <2 x i64>
  %162 = ptrtoint i8* %156 to i64
  %163 = bitcast i8* %14 to i32*
  %164 = bitcast i8* %156 to i32*
  %165 = load i32, i32* %163, align 1
  store i32 %165, i32* %164, align 1
  store i64 %162, i64* %155, align 8
  %166 = bitcast i8** %4 to <2 x i64>*
  store <2 x i64> %161, <2 x i64>* %166, align 8
  tail call void @_ZdlPv(i8* nonnull %14) #9
  br label %167

167:                                              ; preds = %154, %150, %145
  %168 = getelementptr inbounds %"class.apdu::ApduCommand", %"class.apdu::ApduCommand"* %1, i64 0, i32 4
  %169 = load i64, i64* %168, align 8
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %270, label %171

171:                                              ; preds = %167
  %172 = icmp ult i64 %169, 65536
  %173 = select i1 %172, i64 %169, i64 65536
  %174 = lshr i64 %173, 8
  %175 = trunc i64 %174 to i8
  %176 = load i8*, i8** %4, align 8
  %177 = load i8*, i8** %5, align 8
  %178 = icmp ult i8* %176, %177
  %179 = ptrtoint i8* %177 to i64
  br i1 %178, label %180, label %183

180:                                              ; preds = %171
  store i8 %175, i8* %176, align 1
  %181 = getelementptr inbounds i8, i8* %176, i64 1
  %182 = ptrtoint i8* %181 to i64
  store i64 %182, i64* %16, align 8
  br label %221

183:                                              ; preds = %171
  %184 = ptrtoint i8* %176 to i64
  %185 = bitcast %"class.std::__1::vector"* %0 to i64*
  %186 = load i64, i64* %185, align 8
  %187 = sub i64 %184, %186
  %188 = add i64 %187, 1
  %189 = icmp slt i64 %188, 0
  %190 = inttoptr i64 %186 to i8*
  br i1 %189, label %191, label %193

191:                                              ; preds = %183
  %192 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %192) #8
  unreachable

193:                                              ; preds = %183
  %194 = bitcast i8** %5 to i64*
  %195 = sub i64 %179, %186
  %196 = icmp ult i64 %195, 4611686018427387903
  br i1 %196, label %197, label %202

197:                                              ; preds = %193
  %198 = shl i64 %195, 1
  %199 = icmp ult i64 %198, %188
  %200 = select i1 %199, i64 %188, i64 %198
  %201 = icmp eq i64 %200, 0
  br i1 %201, label %205, label %202

202:                                              ; preds = %197, %193
  %203 = phi i64 [ %200, %197 ], [ 9223372036854775807, %193 ]
  %204 = tail call i8* @_Znwm(i64 %203) #9
  br label %205

205:                                              ; preds = %202, %197
  %206 = phi i64 [ %203, %202 ], [ 0, %197 ]
  %207 = phi i8* [ %204, %202 ], [ null, %197 ]
  %208 = getelementptr inbounds i8, i8* %207, i64 %187
  %209 = getelementptr inbounds i8, i8* %207, i64 %206
  %210 = ptrtoint i8* %209 to i64
  store i8 %175, i8* %208, align 1
  %211 = getelementptr inbounds i8, i8* %208, i64 1
  %212 = ptrtoint i8* %211 to i64
  %213 = ptrtoint i8* %207 to i64
  %214 = icmp sgt i64 %187, 0
  br i1 %214, label %215, label %216

215:                                              ; preds = %205
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %207, i8* align 1 %190, i64 %187, i1 false) #7
  br label %216

216:                                              ; preds = %215, %205
  store i64 %213, i64* %185, align 8
  store i64 %212, i64* %16, align 8
  store i64 %210, i64* %194, align 8
  %217 = icmp eq i64 %186, 0
  br i1 %217, label %221, label %218

218:                                              ; preds = %216
  tail call void @_ZdlPv(i8* nonnull %190) #9
  %219 = load i8*, i8** %4, align 8
  %220 = ptrtoint i8* %219 to i64
  br label %221

221:                                              ; preds = %180, %216, %218
  %222 = phi i64 [ %182, %180 ], [ %212, %216 ], [ %220, %218 ]
  %223 = phi i8* [ %181, %180 ], [ %211, %216 ], [ %219, %218 ]
  %224 = trunc i64 %173 to i8
  %225 = load i8*, i8** %5, align 8
  %226 = icmp ult i8* %223, %225
  %227 = ptrtoint i8* %225 to i64
  br i1 %226, label %228, label %231

228:                                              ; preds = %221
  store i8 %224, i8* %223, align 1
  %229 = getelementptr inbounds i8, i8* %223, i64 1
  %230 = ptrtoint i8* %229 to i64
  store i64 %230, i64* %16, align 8
  br label %270

231:                                              ; preds = %221
  %232 = ptrtoint i8* %223 to i64
  %233 = bitcast %"class.std::__1::vector"* %0 to i64*
  %234 = load i64, i64* %233, align 8
  %235 = sub i64 %232, %234
  %236 = add i64 %235, 1
  %237 = icmp slt i64 %236, 0
  %238 = inttoptr i64 %234 to i8*
  br i1 %237, label %239, label %241

239:                                              ; preds = %231
  %240 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %240) #8
  unreachable

241:                                              ; preds = %231
  %242 = bitcast i8** %5 to i64*
  %243 = sub i64 %227, %234
  %244 = icmp ult i64 %243, 4611686018427387903
  br i1 %244, label %245, label %250

245:                                              ; preds = %241
  %246 = shl i64 %243, 1
  %247 = icmp ult i64 %246, %236
  %248 = select i1 %247, i64 %236, i64 %246
  %249 = icmp eq i64 %248, 0
  br i1 %249, label %253, label %250

250:                                              ; preds = %245, %241
  %251 = phi i64 [ %248, %245 ], [ 9223372036854775807, %241 ]
  %252 = tail call i8* @_Znwm(i64 %251) #9
  br label %253

253:                                              ; preds = %250, %245
  %254 = phi i64 [ %251, %250 ], [ 0, %245 ]
  %255 = phi i8* [ %252, %250 ], [ null, %245 ]
  %256 = getelementptr inbounds i8, i8* %255, i64 %235
  %257 = getelementptr inbounds i8, i8* %255, i64 %254
  %258 = ptrtoint i8* %257 to i64
  store i8 %224, i8* %256, align 1
  %259 = getelementptr inbounds i8, i8* %256, i64 1
  %260 = ptrtoint i8* %259 to i64
  %261 = sub i64 %222, %234
  %262 = sub i64 0, %261
  %263 = getelementptr inbounds i8, i8* %256, i64 %262
  %264 = ptrtoint i8* %263 to i64
  %265 = icmp sgt i64 %261, 0
  br i1 %265, label %266, label %267

266:                                              ; preds = %253
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %263, i8* align 1 %238, i64 %261, i1 false) #7
  br label %267

267:                                              ; preds = %266, %253
  store i64 %264, i64* %233, align 8
  store i64 %260, i64* %16, align 8
  store i64 %258, i64* %242, align 8
  %268 = icmp eq i64 %234, 0
  br i1 %268, label %270, label %269

269:                                              ; preds = %267
  tail call void @_ZdlPv(i8* nonnull %238) #9
  br label %270

270:                                              ; preds = %269, %267, %228, %167
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertINS_11__wrap_iterIPKhEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPhEEE4typeES8_SA_SA_(%"class.std::__1::vector"*, i8*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = ptrtoint i8* %2 to i64
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %8 = ptrtoint i8* %3 to i64
  %9 = sub i64 %8, %6
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %518

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %9, %18
  %20 = bitcast i8** %15 to i64*
  br i1 %19, label %268, label %21

21:                                               ; preds = %11
  %22 = sub i64 %17, %5
  %23 = icmp sgt i64 %9, %22
  br i1 %23, label %24, label %141

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %2, i64 %22
  %26 = icmp eq i8* %25, %3
  br i1 %26, label %136, label %27

27:                                               ; preds = %24
  %28 = sub i64 %5, %6
  %29 = sub i64 %28, %17
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = ptrtoint i8* %30 to i64
  %32 = icmp ult i8* %30, inttoptr (i64 32 to i8*)
  br i1 %32, label %123, label %33

33:                                               ; preds = %27
  %34 = sub i64 %5, %6
  %35 = sub i64 %34, %17
  %36 = getelementptr i8, i8* %3, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = getelementptr i8, i8* %16, i64 %37
  %39 = icmp ult i8* %16, %3
  %40 = icmp ult i8* %25, %38
  %41 = and i1 %39, %40
  br i1 %41, label %123, label %42

42:                                               ; preds = %33
  %43 = and i64 %31, -32
  %44 = getelementptr i8, i8* %16, i64 %43
  %45 = getelementptr i8, i8* %25, i64 %43
  %46 = add i64 %43, -32
  %47 = lshr exact i64 %46, 5
  %48 = add nuw nsw i64 %47, 1
  %49 = and i64 %48, 3
  %50 = icmp ult i64 %46, 96
  br i1 %50, label %102, label %51

51:                                               ; preds = %42
  %52 = sub nsw i64 %48, %49
  br label %53

53:                                               ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %99, %53 ]
  %55 = phi i64 [ %52, %51 ], [ %100, %53 ]
  %56 = getelementptr i8, i8* %16, i64 %54
  %57 = getelementptr i8, i8* %25, i64 %54
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !20
  %60 = getelementptr i8, i8* %57, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !20
  %63 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %63, align 1, !alias.scope !23, !noalias !20
  %64 = getelementptr i8, i8* %56, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %65, align 1, !alias.scope !23, !noalias !20
  %66 = or i64 %54, 32
  %67 = getelementptr i8, i8* %16, i64 %66
  %68 = getelementptr i8, i8* %25, i64 %66
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !20
  %71 = getelementptr i8, i8* %68, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !20
  %74 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %74, align 1, !alias.scope !23, !noalias !20
  %75 = getelementptr i8, i8* %67, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %76, align 1, !alias.scope !23, !noalias !20
  %77 = or i64 %54, 64
  %78 = getelementptr i8, i8* %16, i64 %77
  %79 = getelementptr i8, i8* %25, i64 %77
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !20
  %82 = getelementptr i8, i8* %79, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !20
  %85 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %85, align 1, !alias.scope !23, !noalias !20
  %86 = getelementptr i8, i8* %78, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %87, align 1, !alias.scope !23, !noalias !20
  %88 = or i64 %54, 96
  %89 = getelementptr i8, i8* %16, i64 %88
  %90 = getelementptr i8, i8* %25, i64 %88
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !20
  %93 = getelementptr i8, i8* %90, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !20
  %96 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %96, align 1, !alias.scope !23, !noalias !20
  %97 = getelementptr i8, i8* %89, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %98, align 1, !alias.scope !23, !noalias !20
  %99 = add i64 %54, 128
  %100 = add i64 %55, -4
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %53, !llvm.loop !25

102:                                              ; preds = %53, %42
  %103 = phi i64 [ 0, %42 ], [ %99, %53 ]
  %104 = icmp eq i64 %49, 0
  br i1 %104, label %121, label %105

105:                                              ; preds = %102, %105
  %106 = phi i64 [ %118, %105 ], [ %103, %102 ]
  %107 = phi i64 [ %119, %105 ], [ %49, %102 ]
  %108 = getelementptr i8, i8* %16, i64 %106
  %109 = getelementptr i8, i8* %25, i64 %106
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1, !alias.scope !20
  %112 = getelementptr i8, i8* %109, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !20
  %115 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %115, align 1, !alias.scope !23, !noalias !20
  %116 = getelementptr i8, i8* %108, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %117, align 1, !alias.scope !23, !noalias !20
  %118 = add i64 %106, 32
  %119 = add i64 %107, -1
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %105, !llvm.loop !26

121:                                              ; preds = %105, %102
  %122 = icmp eq i64 %43, %31
  br i1 %122, label %133, label %123

123:                                              ; preds = %121, %33, %27
  %124 = phi i8* [ %16, %33 ], [ %16, %27 ], [ %44, %121 ]
  %125 = phi i8* [ %25, %33 ], [ %25, %27 ], [ %45, %121 ]
  br label %126

126:                                              ; preds = %123, %126
  %127 = phi i8* [ %131, %126 ], [ %124, %123 ]
  %128 = phi i8* [ %130, %126 ], [ %125, %123 ]
  %129 = load i8, i8* %128, align 1
  store i8 %129, i8* %127, align 1
  %130 = getelementptr inbounds i8, i8* %128, i64 1
  %131 = getelementptr inbounds i8, i8* %127, i64 1
  %132 = icmp eq i8* %130, %3
  br i1 %132, label %133, label %126, !llvm.loop !27

133:                                              ; preds = %126, %121
  %134 = phi i8* [ %44, %121 ], [ %131, %126 ]
  %135 = ptrtoint i8* %134 to i64
  br label %136

136:                                              ; preds = %133, %24
  %137 = phi i64 [ %17, %24 ], [ %135, %133 ]
  store i64 %137, i64* %20, align 8
  %138 = icmp sgt i64 %22, 0
  br i1 %138, label %139, label %518

139:                                              ; preds = %136
  %140 = inttoptr i64 %137 to i8*
  br label %141

141:                                              ; preds = %139, %21
  %142 = phi i64 [ %137, %139 ], [ %17, %21 ]
  %143 = phi i8* [ %140, %139 ], [ %16, %21 ]
  %144 = phi i8* [ %25, %139 ], [ %3, %21 ]
  %145 = getelementptr inbounds i8, i8* %1, i64 %9
  %146 = ptrtoint i8* %145 to i64
  %147 = sub i64 %142, %146
  %148 = getelementptr inbounds i8, i8* %1, i64 %147
  %149 = icmp ult i8* %148, %16
  br i1 %149, label %150, label %250

150:                                              ; preds = %141
  %151 = sub i64 %9, %142
  %152 = getelementptr i8, i8* %16, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = icmp ult i8* %152, inttoptr (i64 32 to i8*)
  br i1 %154, label %155, label %158

155:                                              ; preds = %245, %158, %150
  %156 = phi i8* [ %148, %158 ], [ %148, %150 ], [ %168, %245 ]
  %157 = phi i8* [ %143, %158 ], [ %143, %150 ], [ %169, %245 ]
  br label %256

158:                                              ; preds = %150
  %159 = sub i64 %9, %142
  %160 = getelementptr i8, i8* %16, i64 %159
  %161 = ptrtoint i8* %160 to i64
  %162 = getelementptr i8, i8* %143, i64 %161
  %163 = icmp ult i8* %143, %16
  %164 = icmp ult i8* %148, %162
  %165 = and i1 %163, %164
  br i1 %165, label %155, label %166

166:                                              ; preds = %158
  %167 = and i64 %153, -32
  %168 = getelementptr i8, i8* %148, i64 %167
  %169 = getelementptr i8, i8* %143, i64 %167
  %170 = add i64 %167, -32
  %171 = lshr exact i64 %170, 5
  %172 = add nuw nsw i64 %171, 1
  %173 = and i64 %172, 3
  %174 = icmp ult i64 %170, 96
  br i1 %174, label %226, label %175

175:                                              ; preds = %166
  %176 = sub nsw i64 %172, %173
  br label %177

177:                                              ; preds = %177, %175
  %178 = phi i64 [ 0, %175 ], [ %223, %177 ]
  %179 = phi i64 [ %176, %175 ], [ %224, %177 ]
  %180 = getelementptr i8, i8* %148, i64 %178
  %181 = getelementptr i8, i8* %143, i64 %178
  %182 = bitcast i8* %180 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1, !alias.scope !28
  %184 = getelementptr i8, i8* %180, i64 16
  %185 = bitcast i8* %184 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1, !alias.scope !28
  %187 = bitcast i8* %181 to <16 x i8>*
  store <16 x i8> %183, <16 x i8>* %187, align 1, !alias.scope !31, !noalias !28
  %188 = getelementptr i8, i8* %181, i64 16
  %189 = bitcast i8* %188 to <16 x i8>*
  store <16 x i8> %186, <16 x i8>* %189, align 1, !alias.scope !31, !noalias !28
  %190 = or i64 %178, 32
  %191 = getelementptr i8, i8* %148, i64 %190
  %192 = getelementptr i8, i8* %143, i64 %190
  %193 = bitcast i8* %191 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1, !alias.scope !28
  %195 = getelementptr i8, i8* %191, i64 16
  %196 = bitcast i8* %195 to <16 x i8>*
  %197 = load <16 x i8>, <16 x i8>* %196, align 1, !alias.scope !28
  %198 = bitcast i8* %192 to <16 x i8>*
  store <16 x i8> %194, <16 x i8>* %198, align 1, !alias.scope !31, !noalias !28
  %199 = getelementptr i8, i8* %192, i64 16
  %200 = bitcast i8* %199 to <16 x i8>*
  store <16 x i8> %197, <16 x i8>* %200, align 1, !alias.scope !31, !noalias !28
  %201 = or i64 %178, 64
  %202 = getelementptr i8, i8* %148, i64 %201
  %203 = getelementptr i8, i8* %143, i64 %201
  %204 = bitcast i8* %202 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1, !alias.scope !28
  %206 = getelementptr i8, i8* %202, i64 16
  %207 = bitcast i8* %206 to <16 x i8>*
  %208 = load <16 x i8>, <16 x i8>* %207, align 1, !alias.scope !28
  %209 = bitcast i8* %203 to <16 x i8>*
  store <16 x i8> %205, <16 x i8>* %209, align 1, !alias.scope !31, !noalias !28
  %210 = getelementptr i8, i8* %203, i64 16
  %211 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %208, <16 x i8>* %211, align 1, !alias.scope !31, !noalias !28
  %212 = or i64 %178, 96
  %213 = getelementptr i8, i8* %148, i64 %212
  %214 = getelementptr i8, i8* %143, i64 %212
  %215 = bitcast i8* %213 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !28
  %217 = getelementptr i8, i8* %213, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1, !alias.scope !28
  %220 = bitcast i8* %214 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %220, align 1, !alias.scope !31, !noalias !28
  %221 = getelementptr i8, i8* %214, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %222, align 1, !alias.scope !31, !noalias !28
  %223 = add i64 %178, 128
  %224 = add i64 %179, -4
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %177, !llvm.loop !33

226:                                              ; preds = %177, %166
  %227 = phi i64 [ 0, %166 ], [ %223, %177 ]
  %228 = icmp eq i64 %173, 0
  br i1 %228, label %245, label %229

229:                                              ; preds = %226, %229
  %230 = phi i64 [ %242, %229 ], [ %227, %226 ]
  %231 = phi i64 [ %243, %229 ], [ %173, %226 ]
  %232 = getelementptr i8, i8* %148, i64 %230
  %233 = getelementptr i8, i8* %143, i64 %230
  %234 = bitcast i8* %232 to <16 x i8>*
  %235 = load <16 x i8>, <16 x i8>* %234, align 1, !alias.scope !28
  %236 = getelementptr i8, i8* %232, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1, !alias.scope !28
  %239 = bitcast i8* %233 to <16 x i8>*
  store <16 x i8> %235, <16 x i8>* %239, align 1, !alias.scope !31, !noalias !28
  %240 = getelementptr i8, i8* %233, i64 16
  %241 = bitcast i8* %240 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %241, align 1, !alias.scope !31, !noalias !28
  %242 = add i64 %230, 32
  %243 = add i64 %231, -1
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %229, !llvm.loop !34

245:                                              ; preds = %229, %226
  %246 = icmp eq i64 %167, %153
  br i1 %246, label %247, label %155

247:                                              ; preds = %256, %245
  %248 = phi i8* [ %169, %245 ], [ %261, %256 ]
  %249 = ptrtoint i8* %248 to i64
  br label %250

250:                                              ; preds = %247, %141
  %251 = phi i64 [ %249, %247 ], [ %142, %141 ]
  store i64 %251, i64* %20, align 8
  %252 = icmp eq i64 %147, 0
  br i1 %252, label %263, label %253

253:                                              ; preds = %250
  %254 = sub i64 0, %147
  %255 = getelementptr inbounds i8, i8* %143, i64 %254
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %255, i8* align 1 %1, i64 %147, i1 false) #7
  br label %263

256:                                              ; preds = %155, %256
  %257 = phi i8* [ %260, %256 ], [ %156, %155 ]
  %258 = phi i8* [ %261, %256 ], [ %157, %155 ]
  %259 = load i8, i8* %257, align 1
  store i8 %259, i8* %258, align 1
  %260 = getelementptr inbounds i8, i8* %257, i64 1
  %261 = getelementptr inbounds i8, i8* %258, i64 1
  %262 = icmp eq i8* %260, %16
  br i1 %262, label %247, label %256, !llvm.loop !35

263:                                              ; preds = %250, %253
  %264 = ptrtoint i8* %144 to i64
  %265 = sub i64 %264, %6
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %518, label %267

267:                                              ; preds = %263
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 %265, i1 false) #7
  br label %518

268:                                              ; preds = %11
  %269 = bitcast %"class.std::__1::vector"* %0 to i64*
  %270 = load i64, i64* %269, align 8
  %271 = sub i64 %17, %270
  %272 = add i64 %271, %9
  %273 = icmp slt i64 %272, 0
  br i1 %273, label %274, label %276

274:                                              ; preds = %268
  %275 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %275) #8
  unreachable

276:                                              ; preds = %268
  %277 = sub i64 %14, %270
  %278 = icmp ult i64 %277, 4611686018427387903
  br i1 %278, label %281, label %279

279:                                              ; preds = %276
  %280 = sub i64 %5, %270
  br label %287

281:                                              ; preds = %276
  %282 = shl i64 %277, 1
  %283 = icmp ult i64 %282, %272
  %284 = select i1 %283, i64 %272, i64 %282
  %285 = sub i64 %5, %270
  %286 = icmp eq i64 %284, 0
  br i1 %286, label %291, label %287

287:                                              ; preds = %279, %281
  %288 = phi i64 [ %280, %279 ], [ %285, %281 ]
  %289 = phi i64 [ 9223372036854775807, %279 ], [ %284, %281 ]
  %290 = tail call i8* @_Znwm(i64 %289) #9
  br label %291

291:                                              ; preds = %281, %287
  %292 = phi i64 [ %288, %287 ], [ %285, %281 ]
  %293 = phi i64 [ %289, %287 ], [ 0, %281 ]
  %294 = phi i8* [ %290, %287 ], [ null, %281 ]
  %295 = getelementptr inbounds i8, i8* %294, i64 %292
  %296 = getelementptr inbounds i8, i8* %294, i64 %293
  %297 = getelementptr inbounds i8, i8* %295, i64 %9
  %298 = icmp ult i64 %9, 32
  br i1 %298, label %384, label %299

299:                                              ; preds = %291
  %300 = icmp ult i8* %295, %3
  %301 = icmp ugt i8* %297, %2
  %302 = and i1 %300, %301
  br i1 %302, label %384, label %303

303:                                              ; preds = %299
  %304 = and i64 %9, -32
  %305 = getelementptr i8, i8* %295, i64 %304
  %306 = getelementptr i8, i8* %2, i64 %304
  %307 = add i64 %304, -32
  %308 = lshr exact i64 %307, 5
  %309 = add nuw nsw i64 %308, 1
  %310 = and i64 %309, 3
  %311 = icmp ult i64 %307, 96
  br i1 %311, label %363, label %312

312:                                              ; preds = %303
  %313 = sub nsw i64 %309, %310
  br label %314

314:                                              ; preds = %314, %312
  %315 = phi i64 [ 0, %312 ], [ %360, %314 ]
  %316 = phi i64 [ %313, %312 ], [ %361, %314 ]
  %317 = getelementptr i8, i8* %295, i64 %315
  %318 = getelementptr i8, i8* %2, i64 %315
  %319 = bitcast i8* %318 to <16 x i8>*
  %320 = load <16 x i8>, <16 x i8>* %319, align 1, !alias.scope !36
  %321 = getelementptr i8, i8* %318, i64 16
  %322 = bitcast i8* %321 to <16 x i8>*
  %323 = load <16 x i8>, <16 x i8>* %322, align 1, !alias.scope !36
  %324 = bitcast i8* %317 to <16 x i8>*
  store <16 x i8> %320, <16 x i8>* %324, align 1, !alias.scope !39, !noalias !36
  %325 = getelementptr i8, i8* %317, i64 16
  %326 = bitcast i8* %325 to <16 x i8>*
  store <16 x i8> %323, <16 x i8>* %326, align 1, !alias.scope !39, !noalias !36
  %327 = or i64 %315, 32
  %328 = getelementptr i8, i8* %295, i64 %327
  %329 = getelementptr i8, i8* %2, i64 %327
  %330 = bitcast i8* %329 to <16 x i8>*
  %331 = load <16 x i8>, <16 x i8>* %330, align 1, !alias.scope !36
  %332 = getelementptr i8, i8* %329, i64 16
  %333 = bitcast i8* %332 to <16 x i8>*
  %334 = load <16 x i8>, <16 x i8>* %333, align 1, !alias.scope !36
  %335 = bitcast i8* %328 to <16 x i8>*
  store <16 x i8> %331, <16 x i8>* %335, align 1, !alias.scope !39, !noalias !36
  %336 = getelementptr i8, i8* %328, i64 16
  %337 = bitcast i8* %336 to <16 x i8>*
  store <16 x i8> %334, <16 x i8>* %337, align 1, !alias.scope !39, !noalias !36
  %338 = or i64 %315, 64
  %339 = getelementptr i8, i8* %295, i64 %338
  %340 = getelementptr i8, i8* %2, i64 %338
  %341 = bitcast i8* %340 to <16 x i8>*
  %342 = load <16 x i8>, <16 x i8>* %341, align 1, !alias.scope !36
  %343 = getelementptr i8, i8* %340, i64 16
  %344 = bitcast i8* %343 to <16 x i8>*
  %345 = load <16 x i8>, <16 x i8>* %344, align 1, !alias.scope !36
  %346 = bitcast i8* %339 to <16 x i8>*
  store <16 x i8> %342, <16 x i8>* %346, align 1, !alias.scope !39, !noalias !36
  %347 = getelementptr i8, i8* %339, i64 16
  %348 = bitcast i8* %347 to <16 x i8>*
  store <16 x i8> %345, <16 x i8>* %348, align 1, !alias.scope !39, !noalias !36
  %349 = or i64 %315, 96
  %350 = getelementptr i8, i8* %295, i64 %349
  %351 = getelementptr i8, i8* %2, i64 %349
  %352 = bitcast i8* %351 to <16 x i8>*
  %353 = load <16 x i8>, <16 x i8>* %352, align 1, !alias.scope !36
  %354 = getelementptr i8, i8* %351, i64 16
  %355 = bitcast i8* %354 to <16 x i8>*
  %356 = load <16 x i8>, <16 x i8>* %355, align 1, !alias.scope !36
  %357 = bitcast i8* %350 to <16 x i8>*
  store <16 x i8> %353, <16 x i8>* %357, align 1, !alias.scope !39, !noalias !36
  %358 = getelementptr i8, i8* %350, i64 16
  %359 = bitcast i8* %358 to <16 x i8>*
  store <16 x i8> %356, <16 x i8>* %359, align 1, !alias.scope !39, !noalias !36
  %360 = add i64 %315, 128
  %361 = add i64 %316, -4
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %363, label %314, !llvm.loop !41

363:                                              ; preds = %314, %303
  %364 = phi i64 [ 0, %303 ], [ %360, %314 ]
  %365 = icmp eq i64 %310, 0
  br i1 %365, label %382, label %366

366:                                              ; preds = %363, %366
  %367 = phi i64 [ %379, %366 ], [ %364, %363 ]
  %368 = phi i64 [ %380, %366 ], [ %310, %363 ]
  %369 = getelementptr i8, i8* %295, i64 %367
  %370 = getelementptr i8, i8* %2, i64 %367
  %371 = bitcast i8* %370 to <16 x i8>*
  %372 = load <16 x i8>, <16 x i8>* %371, align 1, !alias.scope !36
  %373 = getelementptr i8, i8* %370, i64 16
  %374 = bitcast i8* %373 to <16 x i8>*
  %375 = load <16 x i8>, <16 x i8>* %374, align 1, !alias.scope !36
  %376 = bitcast i8* %369 to <16 x i8>*
  store <16 x i8> %372, <16 x i8>* %376, align 1, !alias.scope !39, !noalias !36
  %377 = getelementptr i8, i8* %369, i64 16
  %378 = bitcast i8* %377 to <16 x i8>*
  store <16 x i8> %375, <16 x i8>* %378, align 1, !alias.scope !39, !noalias !36
  %379 = add i64 %367, 32
  %380 = add i64 %368, -1
  %381 = icmp eq i64 %380, 0
  br i1 %381, label %382, label %366, !llvm.loop !42

382:                                              ; preds = %366, %363
  %383 = icmp eq i64 %9, %304
  br i1 %383, label %394, label %384

384:                                              ; preds = %382, %299, %291
  %385 = phi i8* [ %295, %299 ], [ %295, %291 ], [ %305, %382 ]
  %386 = phi i8* [ %2, %299 ], [ %2, %291 ], [ %306, %382 ]
  br label %387

387:                                              ; preds = %384, %387
  %388 = phi i8* [ %391, %387 ], [ %385, %384 ]
  %389 = phi i8* [ %392, %387 ], [ %386, %384 ]
  %390 = load i8, i8* %389, align 1
  store i8 %390, i8* %388, align 1
  %391 = getelementptr inbounds i8, i8* %388, i64 1
  %392 = getelementptr inbounds i8, i8* %389, i64 1
  %393 = icmp eq i8* %297, %391
  br i1 %393, label %394, label %387, !llvm.loop !43

394:                                              ; preds = %387, %382
  %395 = ptrtoint i8* %296 to i64
  %396 = load i8*, i8** %7, align 8
  %397 = ptrtoint i8* %396 to i64
  %398 = sub i64 %5, %397
  %399 = sub i64 0, %398
  %400 = getelementptr inbounds i8, i8* %295, i64 %399
  %401 = ptrtoint i8* %400 to i64
  %402 = icmp sgt i64 %398, 0
  br i1 %402, label %403, label %404

403:                                              ; preds = %394
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %400, i8* align 1 %396, i64 %398, i1 false) #7
  br label %404

404:                                              ; preds = %403, %394
  %405 = load i8*, i8** %15, align 8
  %406 = icmp eq i8* %405, %1
  br i1 %406, label %512, label %407

407:                                              ; preds = %404
  %408 = ptrtoint i8* %405 to i64
  %409 = sub i64 %408, %5
  %410 = icmp ult i64 %409, 32
  br i1 %410, label %502, label %411

411:                                              ; preds = %407
  %412 = add i64 %292, %8
  %413 = sub i64 %412, %5
  %414 = sub i64 %413, %6
  %415 = getelementptr i8, i8* %405, i64 %414
  %416 = ptrtoint i8* %415 to i64
  %417 = getelementptr i8, i8* %294, i64 %416
  %418 = icmp ult i8* %297, %405
  %419 = icmp ugt i8* %417, %1
  %420 = and i1 %418, %419
  br i1 %420, label %502, label %421

421:                                              ; preds = %411
  %422 = and i64 %409, -32
  %423 = getelementptr i8, i8* %297, i64 %422
  %424 = getelementptr i8, i8* %1, i64 %422
  %425 = add i64 %422, -32
  %426 = lshr exact i64 %425, 5
  %427 = add nuw nsw i64 %426, 1
  %428 = and i64 %427, 3
  %429 = icmp ult i64 %425, 96
  br i1 %429, label %481, label %430

430:                                              ; preds = %421
  %431 = sub nsw i64 %427, %428
  br label %432

432:                                              ; preds = %432, %430
  %433 = phi i64 [ 0, %430 ], [ %478, %432 ]
  %434 = phi i64 [ %431, %430 ], [ %479, %432 ]
  %435 = getelementptr i8, i8* %297, i64 %433
  %436 = getelementptr i8, i8* %1, i64 %433
  %437 = bitcast i8* %436 to <16 x i8>*
  %438 = load <16 x i8>, <16 x i8>* %437, align 1, !alias.scope !44
  %439 = getelementptr i8, i8* %436, i64 16
  %440 = bitcast i8* %439 to <16 x i8>*
  %441 = load <16 x i8>, <16 x i8>* %440, align 1, !alias.scope !44
  %442 = bitcast i8* %435 to <16 x i8>*
  store <16 x i8> %438, <16 x i8>* %442, align 1, !alias.scope !47, !noalias !44
  %443 = getelementptr i8, i8* %435, i64 16
  %444 = bitcast i8* %443 to <16 x i8>*
  store <16 x i8> %441, <16 x i8>* %444, align 1, !alias.scope !47, !noalias !44
  %445 = or i64 %433, 32
  %446 = getelementptr i8, i8* %297, i64 %445
  %447 = getelementptr i8, i8* %1, i64 %445
  %448 = bitcast i8* %447 to <16 x i8>*
  %449 = load <16 x i8>, <16 x i8>* %448, align 1, !alias.scope !44
  %450 = getelementptr i8, i8* %447, i64 16
  %451 = bitcast i8* %450 to <16 x i8>*
  %452 = load <16 x i8>, <16 x i8>* %451, align 1, !alias.scope !44
  %453 = bitcast i8* %446 to <16 x i8>*
  store <16 x i8> %449, <16 x i8>* %453, align 1, !alias.scope !47, !noalias !44
  %454 = getelementptr i8, i8* %446, i64 16
  %455 = bitcast i8* %454 to <16 x i8>*
  store <16 x i8> %452, <16 x i8>* %455, align 1, !alias.scope !47, !noalias !44
  %456 = or i64 %433, 64
  %457 = getelementptr i8, i8* %297, i64 %456
  %458 = getelementptr i8, i8* %1, i64 %456
  %459 = bitcast i8* %458 to <16 x i8>*
  %460 = load <16 x i8>, <16 x i8>* %459, align 1, !alias.scope !44
  %461 = getelementptr i8, i8* %458, i64 16
  %462 = bitcast i8* %461 to <16 x i8>*
  %463 = load <16 x i8>, <16 x i8>* %462, align 1, !alias.scope !44
  %464 = bitcast i8* %457 to <16 x i8>*
  store <16 x i8> %460, <16 x i8>* %464, align 1, !alias.scope !47, !noalias !44
  %465 = getelementptr i8, i8* %457, i64 16
  %466 = bitcast i8* %465 to <16 x i8>*
  store <16 x i8> %463, <16 x i8>* %466, align 1, !alias.scope !47, !noalias !44
  %467 = or i64 %433, 96
  %468 = getelementptr i8, i8* %297, i64 %467
  %469 = getelementptr i8, i8* %1, i64 %467
  %470 = bitcast i8* %469 to <16 x i8>*
  %471 = load <16 x i8>, <16 x i8>* %470, align 1, !alias.scope !44
  %472 = getelementptr i8, i8* %469, i64 16
  %473 = bitcast i8* %472 to <16 x i8>*
  %474 = load <16 x i8>, <16 x i8>* %473, align 1, !alias.scope !44
  %475 = bitcast i8* %468 to <16 x i8>*
  store <16 x i8> %471, <16 x i8>* %475, align 1, !alias.scope !47, !noalias !44
  %476 = getelementptr i8, i8* %468, i64 16
  %477 = bitcast i8* %476 to <16 x i8>*
  store <16 x i8> %474, <16 x i8>* %477, align 1, !alias.scope !47, !noalias !44
  %478 = add i64 %433, 128
  %479 = add i64 %434, -4
  %480 = icmp eq i64 %479, 0
  br i1 %480, label %481, label %432, !llvm.loop !49

481:                                              ; preds = %432, %421
  %482 = phi i64 [ 0, %421 ], [ %478, %432 ]
  %483 = icmp eq i64 %428, 0
  br i1 %483, label %500, label %484

484:                                              ; preds = %481, %484
  %485 = phi i64 [ %497, %484 ], [ %482, %481 ]
  %486 = phi i64 [ %498, %484 ], [ %428, %481 ]
  %487 = getelementptr i8, i8* %297, i64 %485
  %488 = getelementptr i8, i8* %1, i64 %485
  %489 = bitcast i8* %488 to <16 x i8>*
  %490 = load <16 x i8>, <16 x i8>* %489, align 1, !alias.scope !44
  %491 = getelementptr i8, i8* %488, i64 16
  %492 = bitcast i8* %491 to <16 x i8>*
  %493 = load <16 x i8>, <16 x i8>* %492, align 1, !alias.scope !44
  %494 = bitcast i8* %487 to <16 x i8>*
  store <16 x i8> %490, <16 x i8>* %494, align 1, !alias.scope !47, !noalias !44
  %495 = getelementptr i8, i8* %487, i64 16
  %496 = bitcast i8* %495 to <16 x i8>*
  store <16 x i8> %493, <16 x i8>* %496, align 1, !alias.scope !47, !noalias !44
  %497 = add i64 %485, 32
  %498 = add i64 %486, -1
  %499 = icmp eq i64 %498, 0
  br i1 %499, label %500, label %484, !llvm.loop !50

500:                                              ; preds = %484, %481
  %501 = icmp eq i64 %409, %422
  br i1 %501, label %512, label %502

502:                                              ; preds = %500, %411, %407
  %503 = phi i8* [ %297, %411 ], [ %297, %407 ], [ %423, %500 ]
  %504 = phi i8* [ %1, %411 ], [ %1, %407 ], [ %424, %500 ]
  br label %505

505:                                              ; preds = %502, %505
  %506 = phi i8* [ %510, %505 ], [ %503, %502 ]
  %507 = phi i8* [ %509, %505 ], [ %504, %502 ]
  %508 = load i8, i8* %507, align 1
  store i8 %508, i8* %506, align 1
  %509 = getelementptr inbounds i8, i8* %507, i64 1
  %510 = getelementptr inbounds i8, i8* %506, i64 1
  %511 = icmp eq i8* %509, %405
  br i1 %511, label %512, label %505, !llvm.loop !51

512:                                              ; preds = %505, %500, %404
  %513 = phi i8* [ %297, %404 ], [ %423, %500 ], [ %510, %505 ]
  %514 = ptrtoint i8* %513 to i64
  %515 = load i8*, i8** %7, align 8
  store i64 %401, i64* %269, align 8
  store i64 %514, i64* %20, align 8
  store i64 %395, i64* %13, align 8
  %516 = icmp eq i8* %515, null
  br i1 %516, label %518, label %517

517:                                              ; preds = %512
  tail call void @_ZdlPv(i8* nonnull %515) #9
  br label %518

518:                                              ; preds = %517, %512, %136, %263, %267, %4
  %519 = phi i8* [ %1, %4 ], [ %1, %267 ], [ %1, %263 ], [ %1, %136 ], [ %295, %512 ], [ %295, %517 ]
  ret i8* %519
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEPKv(i8*) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.base::CheckedContiguousIterator"* @_ZN4base25CheckedContiguousIteratorIKhEpLEl(%"class.base::CheckedContiguousIterator"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = icmp sgt i64 %1, 0
  br i1 %9, label %10, label %32

10:                                               ; preds = %2
  %11 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #7
  %12 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %12, align 8
  %13 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 2
  %14 = bitcast i8** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 1
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %15, %18
  %20 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20)
  %21 = icmp slt i64 %19, %1
  br i1 %21, label %23, label %22

22:                                               ; preds = %10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20)
  store i8* null, i8** %12, align 8
  br label %54

23:                                               ; preds = %10
  %24 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #7
  %25 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %19) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* %24, i8* %25) #7
  %26 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20)
  store i8* %27, i8** %12, align 8
  %28 = icmp eq i8* %27, null
  br i1 %28, label %54, label %29

29:                                               ; preds = %23
  %30 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0), i32 135, %"class.logging::CheckOpResult"* nonnull %5) #7
  %31 = call %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #7
  br label %54

32:                                               ; preds = %2
  %33 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #7
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = sub nsw i64 0, %1
  %36 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 1
  %37 = bitcast i8** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.base::CheckedContiguousIterator"* %0 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42)
  %43 = icmp slt i64 %41, %35
  br i1 %43, label %45, label %44

44:                                               ; preds = %32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* null, i8** %34, align 8
  br label %54

45:                                               ; preds = %32
  %46 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %35) #7
  %47 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %41) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0), i8* %46, i8* %47) #7
  %48 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* %49, i8** %34, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %54, label %51

51:                                               ; preds = %45
  %52 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0), i32 137, %"class.logging::CheckOpResult"* nonnull %7) #7
  %53 = call %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #7
  br label %54

54:                                               ; preds = %51, %45, %44, %29, %23, %22
  %55 = phi i8* [ %11, %22 ], [ %11, %23 ], [ %11, %29 ], [ %33, %44 ], [ %33, %45 ], [ %33, %51 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %55) #7
  %56 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 1
  %57 = load i8*, i8** %56, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 %1
  store i8* %58, i8** %56, align 8
  ret %"class.base::CheckedContiguousIterator"* %0
}

declare i8* @_ZN7logging15CheckOpValueStrEl(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base25CheckedContiguousIteratorIKhEC2EPS1_S3_S3_(%"class.base::CheckedContiguousIterator"*, i8*, i8*, i8*) unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = alloca %"class.logging::CheckOpResult", align 8
  %10 = alloca %"class.logging::CheckError", align 8
  %11 = ptrtoint i8* %2 to i64
  %12 = ptrtoint i8* %3 to i64
  %13 = ptrtoint i8* %1 to i64
  %14 = bitcast %"class.base::CheckedContiguousIterator"* %0 to i64*
  store i64 %13, i64* %14, align 8
  %15 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 1
  %16 = bitcast i8** %15 to i64*
  store i64 %11, i64* %16, align 8
  %17 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 2
  %18 = bitcast i8** %17 to i64*
  store i64 %12, i64* %18, align 8
  %19 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #7
  %20 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %20, align 8
  %21 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ugt i8* %1, %2
  br i1 %22, label %24, label %23

23:                                               ; preds = %4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %20, align 8
  br label %33

24:                                               ; preds = %4
  %25 = tail call i8* @_ZN7logging15CheckOpValueStrEPKv(i8* %1) #7
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEPKv(i8* %2) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %6, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0), i8* %25, i8* %26) #7
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %20, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0), i32 45, %"class.logging::CheckOpResult"* nonnull %7) #7
  %32 = call %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #7
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #7
  %34 = bitcast %"class.logging::CheckOpResult"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #7
  %35 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %9, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %35, align 8
  %36 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36)
  %37 = icmp ugt i8* %2, %3
  br i1 %37, label %39, label %38

38:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36)
  store i8* null, i8** %35, align 8
  br label %48

39:                                               ; preds = %33
  %40 = call i8* @_ZN7logging15CheckOpValueStrEPKv(i8* %2) #7
  %41 = call i8* @_ZN7logging15CheckOpValueStrEPKv(i8* %3) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %5, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i8* %40, i8* %41) #7
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36)
  store i8* %43, i8** %35, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %39
  %46 = bitcast %"class.logging::CheckError"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %10, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0), i32 46, %"class.logging::CheckOpResult"* nonnull %9) #7
  %47 = call %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %10) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #7
  br label %48

48:                                               ; preds = %38, %39, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.base::CheckedContiguousIterator"* @_ZN4base25CheckedContiguousIteratorIKhEmIEl(%"class.base::CheckedContiguousIterator"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = icmp slt i64 %1, 0
  br i1 %9, label %10, label %34

10:                                               ; preds = %2
  %11 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #7
  %12 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %12, align 8
  %13 = sub i64 0, %1
  %14 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 2
  %15 = bitcast i8** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 1
  %18 = bitcast i8** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %16, %19
  %21 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp slt i64 %20, %13
  br i1 %22, label %24, label %23

23:                                               ; preds = %10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %12, align 8
  br label %33

24:                                               ; preds = %10
  %25 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %13) #7
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %20) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i8* %25, i8* %26) #7
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %12, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0), i32 151, %"class.logging::CheckOpResult"* nonnull %5) #7
  %32 = call %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #7
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #7
  br label %57

34:                                               ; preds = %2
  %35 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #7
  %36 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %36, align 8
  %37 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 1
  %38 = bitcast i8** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.base::CheckedContiguousIterator"* %0 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43)
  %44 = icmp slt i64 %42, %1
  br i1 %44, label %46, label %45

45:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43)
  store i8* null, i8** %36, align 8
  br label %55

46:                                               ; preds = %34
  %47 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #7
  %48 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %42) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i64 0, i64 0), i8* %47, i8* %48) #7
  %49 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %50 = load i8*, i8** %49, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43)
  store i8* %50, i8** %36, align 8
  %51 = icmp eq i8* %50, null
  br i1 %51, label %55, label %52

52:                                               ; preds = %46
  %53 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %53) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0), i32 153, %"class.logging::CheckOpResult"* nonnull %7) #7
  %54 = call %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %53) #7
  br label %55

55:                                               ; preds = %45, %46, %52
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  %56 = sub nsw i64 0, %1
  br label %57

57:                                               ; preds = %55, %33
  %58 = phi i64 [ %56, %55 ], [ %13, %33 ]
  %59 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 1
  %60 = load i8*, i8** %59, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 %58
  store i8* %61, i8** %59, align 8
  ret %"class.base::CheckedContiguousIterator"* %0
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4base25CheckedContiguousIteratorIKhE15CheckComparableERKS2_(%"class.base::CheckedContiguousIterator"*, %"class.base::CheckedContiguousIterator"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #7
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 0
  %12 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %1, i64 0, i32 0
  %13 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13)
  %14 = load i8*, i8** %11, align 8
  %15 = load i8*, i8** %12, align 8
  %16 = icmp eq i8* %14, %15
  br i1 %16, label %17, label %18

17:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13)
  store i8* null, i8** %10, align 8
  br label %28

18:                                               ; preds = %2
  %19 = tail call i8* @_ZN7logging15CheckOpValueStrEPKv(i8* %14) #7
  %20 = load i8*, i8** %12, align 8
  %21 = tail call i8* @_ZN7logging15CheckOpValueStrEPKv(i8* %20) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0), i8* %19, i8* %21) #7
  %22 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13)
  store i8* %23, i8** %10, align 8
  %24 = icmp eq i8* %23, null
  br i1 %24, label %28, label %25

25:                                               ; preds = %18
  %26 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0), i32 206, %"class.logging::CheckOpResult"* nonnull %5) #7
  %27 = call %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #7
  br label %28

28:                                               ; preds = %17, %18, %25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #7
  %29 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #7
  %30 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %30, align 8
  %31 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 2
  %32 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %1, i64 0, i32 2
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33)
  %34 = load i8*, i8** %31, align 8
  %35 = load i8*, i8** %32, align 8
  %36 = icmp eq i8* %34, %35
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33)
  store i8* null, i8** %30, align 8
  br label %48

38:                                               ; preds = %28
  %39 = call i8* @_ZN7logging15CheckOpValueStrEPKv(i8* %34) #7
  %40 = load i8*, i8** %32, align 8
  %41 = call i8* @_ZN7logging15CheckOpValueStrEPKv(i8* %40) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.10, i64 0, i64 0), i8* %39, i8* %41) #7
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33)
  store i8* %43, i8** %30, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0), i32 207, %"class.logging::CheckOpResult"* nonnull %7) #7
  %47 = call %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #7
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) i8* @_ZNK4base25CheckedContiguousIteratorIKhEdeEv(%"class.base::CheckedContiguousIterator"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 2
  %9 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  %10 = load i8*, i8** %7, align 8
  %11 = load i8*, i8** %8, align 8
  %12 = icmp eq i8* %10, %11
  br i1 %12, label %14, label %13

13:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* null, i8** %6, align 8
  br label %24

14:                                               ; preds = %1
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEPKv(i8* %10) #7
  %16 = load i8*, i8** %8, align 8
  %17 = tail call i8* @_ZN7logging15CheckOpValueStrEPKv(i8* %16) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i64 0, i64 0), i8* %15, i8* %17) #7
  %18 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* %19, i8** %6, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %24, label %21

21:                                               ; preds = %14
  %22 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0), i32 173, %"class.logging::CheckOpResult"* nonnull %3) #7
  %23 = call %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #7
  br label %24

24:                                               ; preds = %13, %14, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %25 = load i8*, i8** %7, align 8
  ret i8* %25
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.base::CheckedContiguousIterator"* @_ZN4base25CheckedContiguousIteratorIKhEppEv(%"class.base::CheckedContiguousIterator"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.base::CheckedContiguousIterator", %"class.base::CheckedContiguousIterator"* %0, i64 0, i32 2
  %9 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  %10 = load i8*, i8** %7, align 8
  %11 = load i8*, i8** %8, align 8
  %12 = icmp eq i8* %10, %11
  br i1 %12, label %14, label %13

13:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* null, i8** %6, align 8
  br label %24

14:                                               ; preds = %1
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEPKv(i8* %10) #7
  %16 = load i8*, i8** %8, align 8
  %17 = tail call i8* @_ZN7logging15CheckOpValueStrEPKv(i8* %16) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i64 0, i64 0), i8* %15, i8* %17) #7
  %18 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* %19, i8** %6, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %24, label %21

21:                                               ; preds = %14
  %22 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0), i32 110, %"class.logging::CheckOpResult"* nonnull %3) #7
  %23 = call %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #7
  br label %24

24:                                               ; preds = %13, %14, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %25 = load i8*, i8** %7, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %26, i8** %7, align 8
  ret %"class.base::CheckedContiguousIterator"* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !8}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !8}
!26 = distinct !{!26, !10}
!27 = distinct !{!27, !8}
!28 = !{!29}
!29 = distinct !{!29, !30}
!30 = distinct !{!30, !"LVerDomain"}
!31 = !{!32}
!32 = distinct !{!32, !30}
!33 = distinct !{!33, !8}
!34 = distinct !{!34, !10}
!35 = distinct !{!35, !8}
!36 = !{!37}
!37 = distinct !{!37, !38}
!38 = distinct !{!38, !"LVerDomain"}
!39 = !{!40}
!40 = distinct !{!40, !38}
!41 = distinct !{!41, !8}
!42 = distinct !{!42, !10}
!43 = distinct !{!43, !8}
!44 = !{!45}
!45 = distinct !{!45, !46}
!46 = distinct !{!46, !"LVerDomain"}
!47 = !{!48}
!48 = distinct !{!48, !46}
!49 = distinct !{!49, !8}
!50 = distinct !{!50, !10}
!51 = distinct !{!51, !8}
