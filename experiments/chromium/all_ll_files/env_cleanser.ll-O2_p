; ModuleID = '../../native_client/src/trusted/service_runtime/env_cleanser.c'
source_filename = "../../native_client/src/trusted/service_runtime/env_cleanser.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.NaClEnvCleanser = type { i32, i32, i8** }

@.str = private unnamed_addr constant [5 x i8] c"LANG\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"LC_ADDRESS\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"LC_ALL\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"LC_COLLATE\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"LC_CTYPE\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"LC_IDENTIFICATION\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"LC_MEASUREMENT\00", align 1
@.str.7 = private unnamed_addr constant [12 x i8] c"LC_MESSAGES\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"LC_MONETARY\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"LC_NAME\00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"LC_NUMERIC\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"LC_PAPER\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"LC_TELEPHONE\00", align 1
@.str.13 = private unnamed_addr constant [8 x i8] c"LC_TIME\00", align 1
@.str.14 = private unnamed_addr constant [14 x i8] c"NACLVERBOSITY\00", align 1
@.str.15 = private unnamed_addr constant [18 x i8] c"NACL_PLUGIN_DEBUG\00", align 1
@kNaClEnvWhitelist = hidden constant [17 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.15, i32 0, i32 0), i8* null], align 16
@.str.16 = private unnamed_addr constant [9 x i8] c"NACLENV_\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @NaClEnvCleanserCtor(%struct.NaClEnvCleanser* nocapture, i32, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.NaClEnvCleanser, %struct.NaClEnvCleanser* %0, i64 0, i32 0
  store i32 %1, i32* %4, align 8
  %5 = getelementptr inbounds %struct.NaClEnvCleanser, %struct.NaClEnvCleanser* %0, i64 0, i32 1
  store i32 %2, i32* %5, align 4
  %6 = getelementptr inbounds %struct.NaClEnvCleanser, %struct.NaClEnvCleanser* %0, i64 0, i32 2
  store i8** null, i8*** %6, align 8
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @NaClEnvIsPassThroughVar(i8* nocapture readonly) local_unnamed_addr #1 {
  %2 = tail call i64 @strlen(i8* %0) #8
  %3 = icmp ugt i64 %2, 8
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = tail call i32 @strncmp(i8* %0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16, i64 0, i64 0), i64 8) #8
  %6 = icmp eq i32 %5, 0
  %7 = zext i1 %6 to i32
  br label %8

8:                                                ; preds = %4, %1
  %9 = phi i32 [ 0, %1 ], [ %7, %4 ]
  ret i32 %9
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @NaClEnvInWhitelist(i8*) local_unnamed_addr #4 {
  %2 = load i8, i8* %0, align 1
  %3 = icmp eq i8 %2, 0
  br label %4

4:                                                ; preds = %43, %1
  %5 = phi i64 [ %45, %43 ], [ 16, %1 ]
  %6 = phi i64 [ %44, %43 ], [ 0, %1 ]
  %7 = add i64 %6, %5
  %8 = lshr i64 %7, 1
  %9 = getelementptr [17 x i8*], [17 x i8*]* @kNaClEnvWhitelist, i64 0, i64 %8
  %10 = load i8*, i8** %9, align 8
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %2, %11
  %13 = or i1 %3, %12
  %14 = icmp eq i8 %11, 0
  %15 = or i1 %14, %13
  br i1 %15, label %28, label %16

16:                                               ; preds = %4, %16
  %17 = phi i8* [ %20, %16 ], [ %10, %4 ]
  %18 = phi i8* [ %19, %16 ], [ %0, %4 ]
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  %20 = getelementptr inbounds i8, i8* %17, i64 1
  %21 = load i8, i8* %19, align 1
  %22 = load i8, i8* %20, align 1
  %23 = icmp ne i8 %21, %22
  %24 = icmp eq i8 %21, 0
  %25 = or i1 %24, %23
  %26 = icmp eq i8 %22, 0
  %27 = or i1 %26, %25
  br i1 %27, label %28, label %16

28:                                               ; preds = %16, %4
  %29 = phi i8 [ %2, %4 ], [ %21, %16 ]
  %30 = phi i8 [ %11, %4 ], [ %22, %16 ]
  %31 = phi i1 [ %14, %4 ], [ %26, %16 ]
  %32 = zext i8 %30 to i32
  %33 = zext i8 %29 to i32
  %34 = icmp eq i8 %29, 61
  %35 = and i1 %34, %31
  %36 = sub nsw i32 %33, %32
  %37 = select i1 %35, i32 0, i32 %36
  %38 = icmp slt i32 %37, 0
  br i1 %38, label %43, label %39

39:                                               ; preds = %28
  %40 = icmp eq i32 %37, 0
  br i1 %40, label %47, label %41

41:                                               ; preds = %39
  %42 = add nuw i64 %8, 1
  br label %43

43:                                               ; preds = %41, %28
  %44 = phi i64 [ %42, %41 ], [ %6, %28 ]
  %45 = phi i64 [ %5, %41 ], [ %8, %28 ]
  %46 = icmp ult i64 %44, %45
  br i1 %46, label %4, label %50

47:                                               ; preds = %39
  %48 = icmp ne i8** %9, null
  %49 = zext i1 %48 to i32
  br label %50

50:                                               ; preds = %43, %47
  %51 = phi i32 [ %49, %47 ], [ 0, %43 ]
  ret i32 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClEnvCleanserInit(%struct.NaClEnvCleanser* nocapture, i8** readonly, i8** readonly) local_unnamed_addr #5 {
  %4 = icmp eq i8** %1, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %3
  %6 = load i8*, i8** %1, align 8
  %7 = icmp eq i8* %6, null
  br i1 %7, label %8, label %15

8:                                                ; preds = %5, %3
  %9 = icmp eq i8** %2, null
  br i1 %9, label %13, label %10

10:                                               ; preds = %8
  %11 = load i8*, i8** %2, align 8
  %12 = icmp eq i8* %11, null
  br i1 %12, label %13, label %20

13:                                               ; preds = %10, %8
  %14 = getelementptr inbounds %struct.NaClEnvCleanser, %struct.NaClEnvCleanser* %0, i64 0, i32 2
  store i8** null, i8*** %14, align 8
  br label %272

15:                                               ; preds = %5
  %16 = icmp ne i8** %2, null
  br i1 %16, label %17, label %32

17:                                               ; preds = %15
  %18 = load i8*, i8** %2, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %32, label %20

20:                                               ; preds = %10, %17
  br label %21

21:                                               ; preds = %20, %25
  %22 = phi i8** [ %27, %25 ], [ %2, %20 ]
  %23 = phi i64 [ %26, %25 ], [ 0, %20 ]
  %24 = icmp eq i64 %23, -1
  br i1 %24, label %272, label %25

25:                                               ; preds = %21
  %26 = add nuw i64 %23, 1
  %27 = getelementptr inbounds i8*, i8** %22, i64 1
  %28 = load i8*, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %30, label %21

30:                                               ; preds = %25
  %31 = icmp eq i8** %1, null
  br i1 %31, label %133, label %32

32:                                               ; preds = %30, %15, %17
  %33 = phi i64 [ %26, %30 ], [ 0, %17 ], [ 0, %15 ]
  %34 = phi i1 [ true, %30 ], [ %16, %17 ], [ %16, %15 ]
  %35 = load i8*, i8** %1, align 8
  %36 = icmp eq i8* %35, null
  br i1 %36, label %133, label %37

37:                                               ; preds = %32
  %38 = icmp eq i8** %2, null
  %39 = getelementptr inbounds %struct.NaClEnvCleanser, %struct.NaClEnvCleanser* %0, i64 0, i32 1
  %40 = getelementptr inbounds %struct.NaClEnvCleanser, %struct.NaClEnvCleanser* %0, i64 0, i32 0
  br label %41

41:                                               ; preds = %37, %128
  %42 = phi i8* [ %35, %37 ], [ %131, %128 ]
  %43 = phi i8** [ %1, %37 ], [ %130, %128 ]
  %44 = phi i64 [ %33, %37 ], [ %129, %128 ]
  br i1 %38, label %64, label %45

45:                                               ; preds = %41
  %46 = tail call i8* @strchr(i8* nonnull %42, i32 61) #8
  %47 = icmp eq i8* %46, null
  br i1 %47, label %64, label %48

48:                                               ; preds = %45
  %49 = getelementptr inbounds i8, i8* %46, i64 1
  %50 = ptrtoint i8* %49 to i64
  %51 = ptrtoint i8* %42 to i64
  %52 = sub i64 %50, %51
  %53 = load i8*, i8** %2, align 8
  %54 = icmp eq i8* %53, null
  br i1 %54, label %64, label %58

55:                                               ; preds = %58
  %56 = load i8*, i8** %63, align 8
  %57 = icmp eq i8* %56, null
  br i1 %57, label %64, label %58

58:                                               ; preds = %48, %55
  %59 = phi i8* [ %56, %55 ], [ %53, %48 ]
  %60 = phi i8** [ %63, %55 ], [ %2, %48 ]
  %61 = tail call i32 @strncmp(i8* nonnull %42, i8* nonnull %59, i64 %52) #8
  %62 = icmp eq i32 %61, 0
  %63 = getelementptr inbounds i8*, i8** %60, i64 1
  br i1 %62, label %128, label %55

64:                                               ; preds = %55, %41, %45, %48
  %65 = load i32, i32* %39, align 4
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %124

67:                                               ; preds = %64
  %68 = load i32, i32* %40, align 8
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %118, label %70

70:                                               ; preds = %67
  %71 = load i8, i8* %42, align 1
  %72 = icmp eq i8 %71, 0
  br label %73

73:                                               ; preds = %112, %70
  %74 = phi i64 [ %114, %112 ], [ 16, %70 ]
  %75 = phi i64 [ %113, %112 ], [ 0, %70 ]
  %76 = add i64 %75, %74
  %77 = lshr i64 %76, 1
  %78 = getelementptr [17 x i8*], [17 x i8*]* @kNaClEnvWhitelist, i64 0, i64 %77
  %79 = load i8*, i8** %78, align 8
  %80 = load i8, i8* %79, align 1
  %81 = icmp ne i8 %71, %80
  %82 = or i1 %72, %81
  %83 = icmp eq i8 %80, 0
  %84 = or i1 %83, %82
  br i1 %84, label %97, label %85

85:                                               ; preds = %73, %85
  %86 = phi i8* [ %89, %85 ], [ %79, %73 ]
  %87 = phi i8* [ %88, %85 ], [ %42, %73 ]
  %88 = getelementptr inbounds i8, i8* %87, i64 1
  %89 = getelementptr inbounds i8, i8* %86, i64 1
  %90 = load i8, i8* %88, align 1
  %91 = load i8, i8* %89, align 1
  %92 = icmp ne i8 %90, %91
  %93 = icmp eq i8 %90, 0
  %94 = or i1 %93, %92
  %95 = icmp eq i8 %91, 0
  %96 = or i1 %95, %94
  br i1 %96, label %97, label %85

97:                                               ; preds = %85, %73
  %98 = phi i8 [ %71, %73 ], [ %90, %85 ]
  %99 = phi i8 [ %80, %73 ], [ %91, %85 ]
  %100 = phi i1 [ %83, %73 ], [ %95, %85 ]
  %101 = zext i8 %99 to i32
  %102 = zext i8 %98 to i32
  %103 = icmp eq i8 %98, 61
  %104 = and i1 %103, %100
  %105 = sub nsw i32 %102, %101
  %106 = select i1 %104, i32 0, i32 %105
  %107 = icmp slt i32 %106, 0
  br i1 %107, label %112, label %108

108:                                              ; preds = %97
  %109 = icmp eq i32 %106, 0
  br i1 %109, label %116, label %110

110:                                              ; preds = %108
  %111 = add nuw i64 %77, 1
  br label %112

112:                                              ; preds = %110, %97
  %113 = phi i64 [ %111, %110 ], [ %75, %97 ]
  %114 = phi i64 [ %74, %110 ], [ %77, %97 ]
  %115 = icmp ult i64 %113, %114
  br i1 %115, label %73, label %118

116:                                              ; preds = %108
  %117 = icmp eq i8** %78, null
  br i1 %117, label %118, label %124

118:                                              ; preds = %112, %116, %67
  %119 = tail call i64 @strlen(i8* nonnull %42) #8
  %120 = icmp ugt i64 %119, 8
  br i1 %120, label %121, label %128

121:                                              ; preds = %118
  %122 = tail call i32 @strncmp(i8* nonnull %42, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16, i64 0, i64 0), i64 8) #8
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %128

124:                                              ; preds = %121, %116, %64
  %125 = icmp eq i64 %44, -1
  br i1 %125, label %272, label %126

126:                                              ; preds = %124
  %127 = add nuw i64 %44, 1
  br label %128

128:                                              ; preds = %58, %121, %118, %126
  %129 = phi i64 [ %127, %126 ], [ %44, %121 ], [ %44, %118 ], [ %44, %58 ]
  %130 = getelementptr inbounds i8*, i8** %43, i64 1
  %131 = load i8*, i8** %130, align 8
  %132 = icmp eq i8* %131, null
  br i1 %132, label %133, label %41

133:                                              ; preds = %128, %30, %32
  %134 = phi i1 [ false, %30 ], [ true, %32 ], [ true, %128 ]
  %135 = phi i1 [ true, %30 ], [ %34, %32 ], [ %34, %128 ]
  %136 = phi i64 [ %26, %30 ], [ %33, %32 ], [ %129, %128 ]
  %137 = add i64 %136, 1
  %138 = icmp ugt i64 %137, 2305843009213693951
  br i1 %138, label %272, label %139

139:                                              ; preds = %133
  %140 = shl i64 %137, 3
  %141 = tail call noalias i8* @malloc(i64 %140) #9
  %142 = bitcast i8* %141 to i8**
  %143 = icmp eq i8* %141, null
  br i1 %143, label %272, label %144

144:                                              ; preds = %139
  br i1 %135, label %145, label %157

145:                                              ; preds = %144
  %146 = load i8*, i8** %2, align 8
  %147 = icmp eq i8* %146, null
  br i1 %147, label %157, label %148

148:                                              ; preds = %145, %148
  %149 = phi i8* [ %155, %148 ], [ %146, %145 ]
  %150 = phi i64 [ %153, %148 ], [ 0, %145 ]
  %151 = phi i8** [ %154, %148 ], [ %2, %145 ]
  %152 = getelementptr inbounds i8*, i8** %142, i64 %150
  store i8* %149, i8** %152, align 8
  %153 = add i64 %150, 1
  %154 = getelementptr inbounds i8*, i8** %151, i64 1
  %155 = load i8*, i8** %154, align 8
  %156 = icmp eq i8* %155, null
  br i1 %156, label %157, label %148

157:                                              ; preds = %148, %145, %144
  %158 = phi i64 [ 0, %144 ], [ 0, %145 ], [ %153, %148 ]
  br i1 %134, label %159, label %264

159:                                              ; preds = %157
  %160 = load i8*, i8** %1, align 8
  %161 = icmp eq i8* %160, null
  br i1 %161, label %264, label %162

162:                                              ; preds = %159
  %163 = icmp eq i8** %2, null
  %164 = getelementptr inbounds %struct.NaClEnvCleanser, %struct.NaClEnvCleanser* %0, i64 0, i32 1
  %165 = getelementptr inbounds %struct.NaClEnvCleanser, %struct.NaClEnvCleanser* %0, i64 0, i32 0
  br label %166

166:                                              ; preds = %162, %259
  %167 = phi i8* [ %160, %162 ], [ %262, %259 ]
  %168 = phi i64 [ %158, %162 ], [ %260, %259 ]
  %169 = phi i8** [ %1, %162 ], [ %261, %259 ]
  br i1 %163, label %189, label %170

170:                                              ; preds = %166
  %171 = tail call i8* @strchr(i8* nonnull %167, i32 61) #8
  %172 = icmp eq i8* %171, null
  br i1 %172, label %189, label %173

173:                                              ; preds = %170
  %174 = getelementptr inbounds i8, i8* %171, i64 1
  %175 = ptrtoint i8* %174 to i64
  %176 = ptrtoint i8* %167 to i64
  %177 = sub i64 %175, %176
  %178 = load i8*, i8** %2, align 8
  %179 = icmp eq i8* %178, null
  br i1 %179, label %189, label %183

180:                                              ; preds = %183
  %181 = load i8*, i8** %188, align 8
  %182 = icmp eq i8* %181, null
  br i1 %182, label %189, label %183

183:                                              ; preds = %173, %180
  %184 = phi i8* [ %181, %180 ], [ %178, %173 ]
  %185 = phi i8** [ %188, %180 ], [ %2, %173 ]
  %186 = tail call i32 @strncmp(i8* nonnull %167, i8* nonnull %184, i64 %177) #8
  %187 = icmp eq i32 %186, 0
  %188 = getelementptr inbounds i8*, i8** %185, i64 1
  br i1 %187, label %259, label %180

189:                                              ; preds = %180, %166, %170, %173
  %190 = tail call i64 @strlen(i8* nonnull %167) #8
  %191 = icmp ugt i64 %190, 8
  br i1 %191, label %192, label %198

192:                                              ; preds = %189
  %193 = tail call i32 @strncmp(i8* nonnull %167, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16, i64 0, i64 0), i64 8) #8
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %195, label %198

195:                                              ; preds = %192
  %196 = getelementptr inbounds i8, i8* %167, i64 8
  %197 = getelementptr inbounds i8*, i8** %142, i64 %168
  store i8* %196, i8** %197, align 8
  br label %257

198:                                              ; preds = %192, %189
  %199 = load i32, i32* %164, align 4
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %201, label %252

201:                                              ; preds = %198
  %202 = load i32, i32* %165, align 8
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %259, label %204

204:                                              ; preds = %201
  %205 = load i8, i8* %167, align 1
  %206 = icmp eq i8 %205, 0
  br label %207

207:                                              ; preds = %246, %204
  %208 = phi i64 [ %248, %246 ], [ 16, %204 ]
  %209 = phi i64 [ %247, %246 ], [ 0, %204 ]
  %210 = add i64 %209, %208
  %211 = lshr i64 %210, 1
  %212 = getelementptr [17 x i8*], [17 x i8*]* @kNaClEnvWhitelist, i64 0, i64 %211
  %213 = load i8*, i8** %212, align 8
  %214 = load i8, i8* %213, align 1
  %215 = icmp ne i8 %205, %214
  %216 = or i1 %206, %215
  %217 = icmp eq i8 %214, 0
  %218 = or i1 %217, %216
  br i1 %218, label %231, label %219

219:                                              ; preds = %207, %219
  %220 = phi i8* [ %223, %219 ], [ %213, %207 ]
  %221 = phi i8* [ %222, %219 ], [ %167, %207 ]
  %222 = getelementptr inbounds i8, i8* %221, i64 1
  %223 = getelementptr inbounds i8, i8* %220, i64 1
  %224 = load i8, i8* %222, align 1
  %225 = load i8, i8* %223, align 1
  %226 = icmp ne i8 %224, %225
  %227 = icmp eq i8 %224, 0
  %228 = or i1 %227, %226
  %229 = icmp eq i8 %225, 0
  %230 = or i1 %229, %228
  br i1 %230, label %231, label %219

231:                                              ; preds = %219, %207
  %232 = phi i8 [ %205, %207 ], [ %224, %219 ]
  %233 = phi i8 [ %214, %207 ], [ %225, %219 ]
  %234 = phi i1 [ %217, %207 ], [ %229, %219 ]
  %235 = zext i8 %233 to i32
  %236 = zext i8 %232 to i32
  %237 = icmp eq i8 %232, 61
  %238 = and i1 %237, %234
  %239 = sub nsw i32 %236, %235
  %240 = select i1 %238, i32 0, i32 %239
  %241 = icmp slt i32 %240, 0
  br i1 %241, label %246, label %242

242:                                              ; preds = %231
  %243 = icmp eq i32 %240, 0
  br i1 %243, label %250, label %244

244:                                              ; preds = %242
  %245 = add nuw i64 %211, 1
  br label %246

246:                                              ; preds = %244, %231
  %247 = phi i64 [ %245, %244 ], [ %209, %231 ]
  %248 = phi i64 [ %208, %244 ], [ %211, %231 ]
  %249 = icmp ult i64 %247, %248
  br i1 %249, label %207, label %259

250:                                              ; preds = %242
  %251 = icmp eq i8** %212, null
  br i1 %251, label %259, label %252

252:                                              ; preds = %250, %198
  %253 = bitcast i8** %169 to i64*
  %254 = load i64, i64* %253, align 8
  %255 = getelementptr inbounds i8*, i8** %142, i64 %168
  %256 = bitcast i8** %255 to i64*
  store i64 %254, i64* %256, align 8
  br label %257

257:                                              ; preds = %195, %252
  %258 = add i64 %168, 1
  br label %259

259:                                              ; preds = %183, %246, %250, %201, %257
  %260 = phi i64 [ %258, %257 ], [ %168, %250 ], [ %168, %201 ], [ %168, %246 ], [ %168, %183 ]
  %261 = getelementptr inbounds i8*, i8** %169, i64 1
  %262 = load i8*, i8** %261, align 8
  %263 = icmp eq i8* %262, null
  br i1 %263, label %264, label %166

264:                                              ; preds = %259, %159, %157
  %265 = phi i64 [ %158, %157 ], [ %158, %159 ], [ %260, %259 ]
  %266 = icmp eq i64 %136, %265
  br i1 %266, label %268, label %267

267:                                              ; preds = %264
  tail call void @free(i8* %141) #9
  br label %272

268:                                              ; preds = %264
  %269 = getelementptr inbounds i8*, i8** %142, i64 %136
  store i8* null, i8** %269, align 8
  %270 = getelementptr inbounds %struct.NaClEnvCleanser, %struct.NaClEnvCleanser* %0, i64 0, i32 2
  %271 = bitcast i8*** %270 to i8**
  store i8* %141, i8** %271, align 8
  br label %272

272:                                              ; preds = %21, %124, %139, %133, %268, %267, %13
  %273 = phi i32 [ 1, %13 ], [ 0, %267 ], [ 1, %268 ], [ 0, %133 ], [ 0, %139 ], [ 0, %124 ], [ 0, %21 ]
  ret i32 %273
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #6

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #7

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8** @NaClEnvCleanserEnvironment(%struct.NaClEnvCleanser* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.NaClEnvCleanser, %struct.NaClEnvCleanser* %0, i64 0, i32 2
  %3 = load i8**, i8*** %2, align 8
  ret i8** %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @NaClEnvCleanserDtor(%struct.NaClEnvCleanser* nocapture) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.NaClEnvCleanser, %struct.NaClEnvCleanser* %0, i64 0, i32 2
  %3 = bitcast i8*** %2 to i8**
  %4 = load i8*, i8** %3, align 8
  tail call void @free(i8* %4) #9
  store i8** null, i8*** %2, align 8
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i8* @strchr(i8*, i32) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readonly }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
