; ModuleID = '../../third_party/webrtc/modules/audio_processing/transient/wpd_node.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/transient/wpd_node.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::WPDNode" = type { %"class.std::__1::unique_ptr", i64, %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.webrtc::FIRFilter"* }
%"class.webrtc::FIRFilter" = type { i32 (...)** }

@_ZN6webrtc7WPDNodeC1EmPKfm = hidden unnamed_addr alias void (%"class.webrtc::WPDNode"*, i64, float*, i64), void (%"class.webrtc::WPDNode"*, i64, float*, i64)* @_ZN6webrtc7WPDNodeC2EmPKfm
@_ZN6webrtc7WPDNodeD1Ev = hidden unnamed_addr alias void (%"class.webrtc::WPDNode"*), void (%"class.webrtc::WPDNode"*)* @_ZN6webrtc7WPDNodeD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc7WPDNodeC2EmPKfm(%"class.webrtc::WPDNode"* nocapture, i64, float*, i64) unnamed_addr #0 align 2 {
  %5 = shl i64 %1, 1
  %6 = or i64 %5, 1
  %7 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %6, i64 4)
  %8 = extractvalue { i64, i1 } %7, 1
  %9 = extractvalue { i64, i1 } %7, 0
  %10 = select i1 %8, i64 -1, i64 %9
  %11 = tail call i8* @_Znam(i64 %10) #6
  %12 = ptrtoint i8* %11 to i64
  %13 = bitcast %"class.webrtc::WPDNode"* %0 to i64*
  store i64 %12, i64* %13, align 8
  %14 = getelementptr inbounds %"class.webrtc::WPDNode", %"class.webrtc::WPDNode"* %0, i64 0, i32 1
  store i64 %1, i64* %14, align 8
  %15 = getelementptr inbounds %"class.webrtc::WPDNode", %"class.webrtc::WPDNode"* %0, i64 0, i32 2
  %16 = tail call %"class.webrtc::FIRFilter"* @_ZN6webrtc15CreateFirFilterEPKfmm(float* %2, i64 %3, i64 %6) #7
  %17 = ptrtoint %"class.webrtc::FIRFilter"* %16 to i64
  %18 = bitcast %"class.std::__1::unique_ptr.1"* %15 to i64*
  store i64 %17, i64* %18, align 8
  %19 = bitcast %"class.webrtc::WPDNode"* %0 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = shl i64 %6, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 %21, i1 false)
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #2

declare %"class.webrtc::FIRFilter"* @_ZN6webrtc15CreateFirFilterEPKfmm(float*, i64, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc7WPDNodeD2Ev(%"class.webrtc::WPDNode"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::WPDNode", %"class.webrtc::WPDNode"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %"class.webrtc::FIRFilter"*, %"class.webrtc::FIRFilter"** %2, align 8
  store %"class.webrtc::FIRFilter"* null, %"class.webrtc::FIRFilter"** %2, align 8
  %4 = icmp eq %"class.webrtc::FIRFilter"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.webrtc::FIRFilter"* %3 to void (%"class.webrtc::FIRFilter"*)***
  %7 = load void (%"class.webrtc::FIRFilter"*)**, void (%"class.webrtc::FIRFilter"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.webrtc::FIRFilter"*)*, void (%"class.webrtc::FIRFilter"*)** %7, i64 1
  %9 = load void (%"class.webrtc::FIRFilter"*)*, void (%"class.webrtc::FIRFilter"*)** %8, align 8
  tail call void %9(%"class.webrtc::FIRFilter"* nonnull %3) #7
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.webrtc::WPDNode", %"class.webrtc::WPDNode"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load float*, float** %11, align 8
  store float* null, float** %11, align 8
  %13 = icmp eq float* %12, null
  br i1 %13, label %16, label %14

14:                                               ; preds = %10
  %15 = bitcast float* %12 to i8*
  tail call void @_ZdaPv(i8* %15) #6
  br label %16

16:                                               ; preds = %10, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc7WPDNode6UpdateEPKfm(%"class.webrtc::WPDNode"* nocapture readonly, float*, i64) local_unnamed_addr #0 align 2 {
  %4 = icmp eq float* %1, null
  br i1 %4, label %105, label %5

5:                                                ; preds = %3
  %6 = lshr i64 %2, 1
  %7 = getelementptr inbounds %"class.webrtc::WPDNode", %"class.webrtc::WPDNode"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %6, %8
  br i1 %9, label %10, label %105

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.webrtc::WPDNode", %"class.webrtc::WPDNode"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %12 = load %"class.webrtc::FIRFilter"*, %"class.webrtc::FIRFilter"** %11, align 8
  %13 = getelementptr inbounds %"class.webrtc::WPDNode", %"class.webrtc::WPDNode"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %14 = load float*, float** %13, align 8
  %15 = bitcast %"class.webrtc::FIRFilter"* %12 to void (%"class.webrtc::FIRFilter"*, float*, i64, float*)***
  %16 = load void (%"class.webrtc::FIRFilter"*, float*, i64, float*)**, void (%"class.webrtc::FIRFilter"*, float*, i64, float*)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.webrtc::FIRFilter"*, float*, i64, float*)*, void (%"class.webrtc::FIRFilter"*, float*, i64, float*)** %16, i64 2
  %18 = load void (%"class.webrtc::FIRFilter"*, float*, i64, float*)*, void (%"class.webrtc::FIRFilter"*, float*, i64, float*)** %17, align 8
  tail call void %18(%"class.webrtc::FIRFilter"* %12, float* nonnull %1, i64 %2, float* %14) #7
  %19 = load float*, float** %13, align 8
  %20 = load i64, i64* %7, align 8
  %21 = icmp eq float* %19, null
  %22 = icmp eq i64 %2, 0
  %23 = or i1 %22, %21
  %24 = icmp ugt i64 %6, %20
  %25 = or i1 %24, %23
  %26 = xor i1 %25, true
  %27 = icmp ne i64 %6, 0
  %28 = and i1 %27, %26
  br i1 %28, label %29, label %90

29:                                               ; preds = %10
  %30 = add nsw i64 %6, -1
  %31 = and i64 %6, 3
  %32 = icmp ult i64 %30, 3
  br i1 %32, label %72, label %33

33:                                               ; preds = %29
  %34 = sub nsw i64 %6, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %69, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %70, %35 ]
  %38 = shl nuw i64 %36, 1
  %39 = or i64 %38, 1
  %40 = getelementptr inbounds float, float* %19, i64 %39
  %41 = bitcast float* %40 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds float, float* %19, i64 %36
  %44 = bitcast float* %43 to i32*
  store i32 %42, i32* %44, align 4
  %45 = or i64 %36, 1
  %46 = shl nuw i64 %45, 1
  %47 = or i64 %46, 1
  %48 = getelementptr inbounds float, float* %19, i64 %47
  %49 = bitcast float* %48 to i32*
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds float, float* %19, i64 %45
  %52 = bitcast float* %51 to i32*
  store i32 %50, i32* %52, align 4
  %53 = or i64 %36, 2
  %54 = shl nuw i64 %53, 1
  %55 = or i64 %54, 1
  %56 = getelementptr inbounds float, float* %19, i64 %55
  %57 = bitcast float* %56 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds float, float* %19, i64 %53
  %60 = bitcast float* %59 to i32*
  store i32 %58, i32* %60, align 4
  %61 = or i64 %36, 3
  %62 = shl nuw i64 %61, 1
  %63 = or i64 %62, 1
  %64 = getelementptr inbounds float, float* %19, i64 %63
  %65 = bitcast float* %64 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds float, float* %19, i64 %61
  %68 = bitcast float* %67 to i32*
  store i32 %66, i32* %68, align 4
  %69 = add nuw nsw i64 %36, 4
  %70 = add i64 %37, -4
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %35

72:                                               ; preds = %35, %29
  %73 = phi i64 [ 0, %29 ], [ %69, %35 ]
  %74 = icmp eq i64 %31, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %72, %75
  %76 = phi i64 [ %85, %75 ], [ %73, %72 ]
  %77 = phi i64 [ %86, %75 ], [ %31, %72 ]
  %78 = shl nuw i64 %76, 1
  %79 = or i64 %78, 1
  %80 = getelementptr inbounds float, float* %19, i64 %79
  %81 = bitcast float* %80 to i32*
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds float, float* %19, i64 %76
  %84 = bitcast float* %83 to i32*
  store i32 %82, i32* %84, align 4
  %85 = add nuw nsw i64 %76, 1
  %86 = add i64 %77, -1
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %75, !llvm.loop !2

88:                                               ; preds = %75, %72
  %89 = load i64, i64* %7, align 8
  br label %90

90:                                               ; preds = %88, %10
  %91 = phi i64 [ %20, %10 ], [ %89, %88 ]
  %92 = phi i64 [ 0, %10 ], [ %6, %88 ]
  %93 = icmp eq i64 %92, %91
  br i1 %93, label %94, label %105

94:                                               ; preds = %90
  %95 = icmp eq i64 %91, 0
  br i1 %95, label %105, label %96

96:                                               ; preds = %94, %96
  %97 = phi i64 [ %102, %96 ], [ 0, %94 ]
  %98 = load float*, float** %13, align 8
  %99 = getelementptr inbounds float, float* %98, i64 %97
  %100 = load float, float* %99, align 4
  %101 = tail call float @llvm.fabs.f32(float %100) #7
  store float %101, float* %99, align 4
  %102 = add nuw i64 %97, 1
  %103 = load i64, i64* %7, align 8
  %104 = icmp ult i64 %102, %103
  br i1 %104, label %96, label %105

105:                                              ; preds = %96, %94, %90, %3, %5
  %106 = phi i32 [ -1, %5 ], [ -1, %3 ], [ -1, %90 ], [ 0, %94 ], [ 0, %96 ]
  ret i32 %106
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc7WPDNode8set_dataEPKfm(%"class.webrtc::WPDNode"* nocapture readonly, float* readonly, i64) local_unnamed_addr #0 align 2 {
  %4 = icmp eq float* %1, null
  br i1 %4, label %14, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.webrtc::WPDNode", %"class.webrtc::WPDNode"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, %2
  br i1 %8, label %9, label %14

9:                                                ; preds = %5
  %10 = bitcast %"class.webrtc::WPDNode"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = bitcast float* %1 to i8*
  %13 = shl i64 %2, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %11, i8* nonnull align 4 %12, i64 %13, i1 false)
  br label %14

14:                                               ; preds = %3, %5, %9
  %15 = phi i32 [ 0, %9 ], [ -1, %5 ], [ -1, %3 ]
  ret i32 %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
