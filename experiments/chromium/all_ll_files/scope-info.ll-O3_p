; ModuleID = '../../v8/src/objects/scope-info.cc'
source_filename = "../../v8/src/objects/scope-info.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::SoleReadOnlyHeap" = type { %"class.v8::internal::ReadOnlyHeap", [587 x i64] }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.542" }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.140", i64, i64, i8, i64, i64 }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic.20", i64 }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic.20", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic.20", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic.20", i64, i64, %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.30", %"class.std::__1::vector", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.147", %"class.std::__1::unique_ptr.147", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.162", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic.20", i64, i8, %"struct.std::__1::atomic.20", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.166", %"class.std::__1::vector.166", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.173", %"class.std::__1::unique_ptr.179", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.309", %"class.std::__1::unique_ptr.315", %"class.std::__1::unique_ptr.321", %"class.std::__1::unique_ptr.360", %"class.std::__1::unique_ptr.399", %"class.std::__1::unique_ptr.429", %"class.std::__1::unique_ptr.435", %"class.std::__1::unique_ptr.445", %"class.std::__1::unique_ptr.451", %"class.std::__1::unique_ptr.451", %"class.std::__1::unique_ptr.457", %"class.std::__1::unique_ptr.463", %"class.std::__1::unique_ptr.463", %"class.std::__1::unique_ptr.469", %"class.std::__1::unique_ptr.475", %"class.std::__1::shared_ptr.481", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.504", %"class.std::__1::unique_ptr.530", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.536", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.549", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.331", i8, [7 x i8], %"class.std::__1::unordered_map.555", %"class.std::__1::unordered_map.581", %"class.std::__1::unordered_map.555", %"class.std::__1::unordered_map.605", %"class.std::__1::vector.633", i8, %"class.std::__1::unique_ptr.640", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.3", %"class.std::__1::__compressed_pair.10", %"class.std::__1::__compressed_pair.15", %"class.std::__1::__compressed_pair.17", [4 x i8] }>
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5", %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { i64 }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.25", %"struct.std::__1::atomic.25", %"struct.std::__1::atomic.25" }
%"struct.std::__1::atomic.25" = type { %"struct.std::__1::__atomic_base.26" }
%"struct.std::__1::__atomic_base.26" = type { %"struct.std::__1::__atomic_base.27" }
%"struct.std::__1::__atomic_base.27" = type { %"struct.std::__1::__cxx_atomic_impl.28" }
%"struct.std::__1::__cxx_atomic_impl.28" = type { %"struct.std::__1::__cxx_atomic_base_impl.29" }
%"struct.std::__1::__cxx_atomic_base_impl.29" = type { i64 }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.646", %"class.std::__1::unique_ptr.667", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.677", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.816", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.829", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.839", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.850", %"struct.std::__1::atomic.153", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.925", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.970"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.979", i32, i8, i8, i32, i32, %"class.std::__1::vector.985", %"class.std::__1::vector.985", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.992", i64, %"class.std::__1::unordered_map.993", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.542", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.161", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1049", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1087", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1121", %"class.std::__1::vector.1125", %"class.std::__1::vector.1125", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle.0", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle.0" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.646" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.140", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.647", %"class.std::__1::unique_ptr.661" }
%"class.std::__1::unique_ptr.647" = type { %"class.std::__1::__compressed_pair.648" }
%"class.std::__1::__compressed_pair.648" = type { %"struct.std::__1::__compressed_pair_elem.649" }
%"struct.std::__1::__compressed_pair_elem.649" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.650" }
%"class.std::__1::vector.650" = type { %"class.std::__1::__vector_base.651" }
%"class.std::__1::__vector_base.651" = type { %"class.std::__1::unique_ptr.652"*, %"class.std::__1::unique_ptr.652"*, %"class.std::__1::__compressed_pair.653" }
%"class.std::__1::unique_ptr.652" = type { %"class.std::__1::__compressed_pair.1199" }
%"class.std::__1::__compressed_pair.1199" = type { %"struct.std::__1::__compressed_pair_elem.1200" }
%"struct.std::__1::__compressed_pair_elem.1200" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.653" = type { %"struct.std::__1::__compressed_pair_elem.654" }
%"struct.std::__1::__compressed_pair_elem.654" = type { %"class.std::__1::unique_ptr.652"* }
%"class.std::__1::unique_ptr.661" = type { %"class.std::__1::__compressed_pair.662" }
%"class.std::__1::__compressed_pair.662" = type { %"struct.std::__1::__compressed_pair_elem.663" }
%"struct.std::__1::__compressed_pair_elem.663" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::unique_ptr.667" = type { %"class.std::__1::__compressed_pair.668" }
%"class.std::__1::__compressed_pair.668" = type { %"struct.std::__1::__compressed_pair_elem.669" }
%"struct.std::__1::__compressed_pair_elem.669" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.670", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.670" = type { %"struct.std::__1::__atomic_base.671" }
%"struct.std::__1::__atomic_base.671" = type { %"struct.std::__1::__cxx_atomic_impl.672" }
%"struct.std::__1::__cxx_atomic_impl.672" = type { %"struct.std::__1::__cxx_atomic_base_impl.673" }
%"struct.std::__1::__cxx_atomic_base_impl.673" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.677" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.678", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.678" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.679", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.679" = type { %"class.std::__1::__vector_base.680" }
%"class.std::__1::__vector_base.680" = type { %"class.std::__1::unique_ptr.681"*, %"class.std::__1::unique_ptr.681"*, %"class.std::__1::__compressed_pair.682" }
%"class.std::__1::unique_ptr.681" = type opaque
%"class.std::__1::__compressed_pair.682" = type { %"struct.std::__1::__compressed_pair_elem.683" }
%"struct.std::__1::__compressed_pair_elem.683" = type { %"class.std::__1::unique_ptr.681"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.687", %"class.std::__1::unique_ptr.693", %"struct.std::__1::atomic.153", %"class.std::__1::unique_ptr.699", %"class.std::__1::unique_ptr.705", %"class.std::__1::unique_ptr.711", %"class.std::__1::unique_ptr.717", %"class.std::__1::unique_ptr.723", %"class.std::__1::set.729", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.687" = type { %"class.std::__1::__compressed_pair.688" }
%"class.std::__1::__compressed_pair.688" = type { %"struct.std::__1::__compressed_pair_elem.689" }
%"struct.std::__1::__compressed_pair_elem.689" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.693" = type { %"class.std::__1::__compressed_pair.694" }
%"class.std::__1::__compressed_pair.694" = type { %"struct.std::__1::__compressed_pair_elem.695" }
%"struct.std::__1::__compressed_pair_elem.695" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.699" = type { %"class.std::__1::__compressed_pair.700" }
%"class.std::__1::__compressed_pair.700" = type { %"struct.std::__1::__compressed_pair_elem.701" }
%"struct.std::__1::__compressed_pair_elem.701" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.705" = type { %"class.std::__1::__compressed_pair.706" }
%"class.std::__1::__compressed_pair.706" = type { %"struct.std::__1::__compressed_pair_elem.707" }
%"struct.std::__1::__compressed_pair_elem.707" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.711" = type { %"class.std::__1::__compressed_pair.712" }
%"class.std::__1::__compressed_pair.712" = type { %"struct.std::__1::__compressed_pair_elem.713" }
%"struct.std::__1::__compressed_pair_elem.713" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.717" = type { %"class.std::__1::__compressed_pair.718" }
%"class.std::__1::__compressed_pair.718" = type { %"struct.std::__1::__compressed_pair_elem.719" }
%"struct.std::__1::__compressed_pair_elem.719" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.723" = type { %"class.std::__1::__compressed_pair.724" }
%"class.std::__1::__compressed_pair.724" = type { %"struct.std::__1::__compressed_pair_elem.725" }
%"struct.std::__1::__compressed_pair_elem.725" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.729" = type { %"class.std::__1::__tree.730" }
%"class.std::__1::__tree.730" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.731", %"class.std::__1::__compressed_pair.735" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.731" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.735" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.738" }
%"class.v8::internal::TaggedImpl.738" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.737" }
%"class.v8::internal::TaggedImpl.737" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.745", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.745" = type { %"class.std::__1::__compressed_pair.746" }
%"class.std::__1::__compressed_pair.746" = type { %"struct.std::__1::__compressed_pair_elem.747" }
%"struct.std::__1::__compressed_pair_elem.747" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.751", %"class.v8::internal::DetachableVector.752", %"class.v8::internal::DetachableVector.751", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.752" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.751" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.20", %"class.std::__1::unique_ptr.739", %"class.std::__1::unique_ptr.482" }
%"class.std::__1::unique_ptr.739" = type { %"class.std::__1::__compressed_pair.740" }
%"class.std::__1::__compressed_pair.740" = type { %"struct.std::__1::__compressed_pair_elem.741" }
%"struct.std::__1::__compressed_pair_elem.741" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.482" = type { %"class.std::__1::__compressed_pair.483" }
%"class.std::__1::__compressed_pair.483" = type { %"struct.std::__1::__compressed_pair_elem.484" }
%"struct.std::__1::__compressed_pair_elem.484" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set.485", %"class.std::__1::set.493" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set.485" = type { %"class.std::__1::__tree.486" }
%"class.std::__1::__tree.486" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.487", %"class.std::__1::__compressed_pair.491" }
%"class.std::__1::__compressed_pair.487" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"class.std::__1::__compressed_pair.491" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::set.493" = type { %"class.std::__1::__tree.494" }
%"class.std::__1::__tree.494" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.487", %"class.std::__1::__compressed_pair.495" }
%"class.std::__1::__compressed_pair.495" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.753", %"class.std::__1::vector.759", %"class.std::__1::unique_ptr.766", %"class.std::__1::vector.773", %"class.std::__1::unique_ptr.780", i64, %"class.std::__1::vector.786", %"class.std::__1::vector.794", %"class.std::__1::vector.802", i8, i8, i32 }
%"class.std::__1::unique_ptr.753" = type { %"class.std::__1::__compressed_pair.754" }
%"class.std::__1::__compressed_pair.754" = type { %"struct.std::__1::__compressed_pair_elem.755" }
%"struct.std::__1::__compressed_pair_elem.755" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.759" = type { %"class.std::__1::__vector_base.760" }
%"class.std::__1::__vector_base.760" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.761" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.761" = type { %"struct.std::__1::__compressed_pair_elem.762" }
%"struct.std::__1::__compressed_pair_elem.762" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.766" = type { %"class.std::__1::__compressed_pair.767" }
%"class.std::__1::__compressed_pair.767" = type { %"struct.std::__1::__compressed_pair_elem.768" }
%"struct.std::__1::__compressed_pair_elem.768" = type { %"class.v8::internal::GlobalHandles::NodeSpace.769"* }
%"class.v8::internal::GlobalHandles::NodeSpace.769" = type opaque
%"class.std::__1::vector.773" = type { %"class.std::__1::__vector_base.774" }
%"class.std::__1::__vector_base.774" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.775" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.775" = type { %"struct.std::__1::__compressed_pair_elem.776" }
%"struct.std::__1::__compressed_pair_elem.776" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.780" = type { %"class.std::__1::__compressed_pair.781" }
%"class.std::__1::__compressed_pair.781" = type { %"struct.std::__1::__compressed_pair_elem.782" }
%"struct.std::__1::__compressed_pair_elem.782" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.786" = type { %"class.std::__1::__vector_base.787" }
%"class.std::__1::__vector_base.787" = type { %"struct.std::__1::pair.788"*, %"struct.std::__1::pair.788"*, %"class.std::__1::__compressed_pair.789" }
%"struct.std::__1::pair.788" = type opaque
%"class.std::__1::__compressed_pair.789" = type { %"struct.std::__1::__compressed_pair_elem.790" }
%"struct.std::__1::__compressed_pair_elem.790" = type { %"struct.std::__1::pair.788"* }
%"class.std::__1::vector.794" = type { %"class.std::__1::__vector_base.795" }
%"class.std::__1::__vector_base.795" = type { %"struct.std::__1::pair.796"*, %"struct.std::__1::pair.796"*, %"class.std::__1::__compressed_pair.797" }
%"struct.std::__1::pair.796" = type opaque
%"class.std::__1::__compressed_pair.797" = type { %"struct.std::__1::__compressed_pair_elem.798" }
%"struct.std::__1::__compressed_pair_elem.798" = type { %"struct.std::__1::pair.796"* }
%"class.std::__1::vector.802" = type { %"class.std::__1::__vector_base.803" }
%"class.std::__1::__vector_base.803" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.804" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.804" = type { %"struct.std::__1::__compressed_pair_elem.805" }
%"struct.std::__1::__compressed_pair_elem.805" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.809", %"class.std::__1::vector.816" }
%"class.std::__1::vector.809" = type { %"class.std::__1::__vector_base.810" }
%"class.std::__1::__vector_base.810" = type { i64**, i64**, %"class.std::__1::__compressed_pair.811" }
%"class.std::__1::__compressed_pair.811" = type { %"struct.std::__1::__compressed_pair_elem.812" }
%"struct.std::__1::__compressed_pair_elem.812" = type { i64** }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.823" }
%"class.std::__1::unique_ptr.823" = type { %"class.std::__1::__compressed_pair.824" }
%"class.std::__1::__compressed_pair.824" = type { %"struct.std::__1::__compressed_pair_elem.825" }
%"struct.std::__1::__compressed_pair_elem.825" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.816" = type { %"class.std::__1::__vector_base.817" }
%"class.std::__1::__vector_base.817" = type { i32*, i32*, %"class.std::__1::__compressed_pair.818" }
%"class.std::__1::__compressed_pair.818" = type { %"struct.std::__1::__compressed_pair_elem.819" }
%"struct.std::__1::__compressed_pair_elem.819" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"struct.std::__1::atomic.829" = type { %"struct.std::__1::__atomic_base.830" }
%"struct.std::__1::__atomic_base.830" = type { %"struct.std::__1::__cxx_atomic_impl.831" }
%"struct.std::__1::__cxx_atomic_impl.831" = type { %"struct.std::__1::__cxx_atomic_base_impl.832" }
%"struct.std::__1::__cxx_atomic_base_impl.832" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.839" = type { %"struct.std::__1::__atomic_base.840" }
%"struct.std::__1::__atomic_base.840" = type { %"struct.std::__1::__cxx_atomic_impl.841" }
%"struct.std::__1::__cxx_atomic_impl.841" = type { %"struct.std::__1::__cxx_atomic_base_impl.842" }
%"struct.std::__1::__cxx_atomic_base_impl.842" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.844" }
%"class.std::__1::__compressed_pair.844" = type { %"struct.std::__1::__compressed_pair_elem.845" }
%"struct.std::__1::__compressed_pair_elem.845" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.846 }
%union.anon.846 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.850" = type { %"class.std::__1::__hash_table.851" }
%"class.std::__1::__hash_table.851" = type <{ %"class.std::__1::unique_ptr.852", %"class.std::__1::__compressed_pair.862", %"class.std::__1::__compressed_pair.867", %"class.std::__1::__compressed_pair.870", [4 x i8] }>
%"class.std::__1::unique_ptr.852" = type { %"class.std::__1::__compressed_pair.853" }
%"class.std::__1::__compressed_pair.853" = type { %"struct.std::__1::__compressed_pair_elem.854", %"struct.std::__1::__compressed_pair_elem.856" }
%"struct.std::__1::__compressed_pair_elem.854" = type { %"struct.std::__1::__hash_node_base.855"** }
%"struct.std::__1::__hash_node_base.855" = type { %"struct.std::__1::__hash_node_base.855"* }
%"struct.std::__1::__compressed_pair_elem.856" = type { %"class.std::__1::__bucket_list_deallocator.857" }
%"class.std::__1::__bucket_list_deallocator.857" = type { %"class.std::__1::__compressed_pair.858" }
%"class.std::__1::__compressed_pair.858" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.862" = type { %"struct.std::__1::__compressed_pair_elem.863" }
%"struct.std::__1::__compressed_pair_elem.863" = type { %"struct.std::__1::__hash_node_base.855" }
%"class.std::__1::__compressed_pair.867" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.870" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::atomic.153" = type { %"struct.std::__1::__atomic_base.154" }
%"struct.std::__1::__atomic_base.154" = type { %"struct.std::__1::__cxx_atomic_impl.155" }
%"struct.std::__1::__cxx_atomic_impl.155" = type { %"struct.std::__1::__cxx_atomic_base_impl.156" }
%"struct.std::__1::__cxx_atomic_base_impl.156" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.876", %"class.v8::internal::Handle.882", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.883", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.876" = type { %"class.std::__1::__compressed_pair.877" }
%"class.std::__1::__compressed_pair.877" = type { %"struct.std::__1::__compressed_pair_elem.878" }
%"struct.std::__1::__compressed_pair_elem.878" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.882" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.883" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.884", %"class.std::__1::vector.890", %"class.std::__1::unique_ptr.898", %"class.std::__1::unique_ptr.904", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.910", %"class.std::__1::vector.916", %"struct.std::__1::pair.924" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::unique_ptr.884" = type { %"class.std::__1::__compressed_pair.885" }
%"class.std::__1::__compressed_pair.885" = type { %"struct.std::__1::__compressed_pair_elem.886" }
%"struct.std::__1::__compressed_pair_elem.886" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.890" = type { %"class.std::__1::__vector_base.891" }
%"class.std::__1::__vector_base.891" = type { %"class.std::__1::unique_ptr.892"*, %"class.std::__1::unique_ptr.892"*, %"class.std::__1::__compressed_pair.893" }
%"class.std::__1::unique_ptr.892" = type opaque
%"class.std::__1::__compressed_pair.893" = type { %"struct.std::__1::__compressed_pair_elem.894" }
%"struct.std::__1::__compressed_pair_elem.894" = type { %"class.std::__1::unique_ptr.892"* }
%"class.std::__1::unique_ptr.898" = type { %"class.std::__1::__compressed_pair.899" }
%"class.std::__1::__compressed_pair.899" = type { %"struct.std::__1::__compressed_pair_elem.900" }
%"struct.std::__1::__compressed_pair_elem.900" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.904" = type { %"class.std::__1::__compressed_pair.905" }
%"class.std::__1::__compressed_pair.905" = type { %"struct.std::__1::__compressed_pair_elem.906" }
%"struct.std::__1::__compressed_pair_elem.906" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.910" = type { %"class.std::__1::__compressed_pair.911" }
%"class.std::__1::__compressed_pair.911" = type { %"struct.std::__1::__compressed_pair_elem.912" }
%"struct.std::__1::__compressed_pair_elem.912" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.916" = type { %"class.std::__1::__vector_base.917" }
%"class.std::__1::__vector_base.917" = type { %"struct.std::__1::pair.918"*, %"struct.std::__1::pair.918"*, %"class.std::__1::__compressed_pair.919" }
%"struct.std::__1::pair.918" = type opaque
%"class.std::__1::__compressed_pair.919" = type { %"struct.std::__1::__compressed_pair_elem.920" }
%"struct.std::__1::__compressed_pair_elem.920" = type { %"struct.std::__1::pair.918"* }
%"struct.std::__1::pair.924" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.1"*, i16, i8*)*, i8* }
%"class.v8::Local.1" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.925" = type { %"class.std::__1::__compressed_pair.926" }
%"class.std::__1::__compressed_pair.926" = type { %"struct.std::__1::__compressed_pair_elem.927" }
%"struct.std::__1::__compressed_pair_elem.927" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.928", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.928" = type { %"class.std::__1::__hash_table.929" }
%"class.std::__1::__hash_table.929" = type <{ %"class.std::__1::unique_ptr.930", %"class.std::__1::__compressed_pair.940", %"class.std::__1::__compressed_pair.945", %"class.std::__1::__compressed_pair.949", [4 x i8] }>
%"class.std::__1::unique_ptr.930" = type { %"class.std::__1::__compressed_pair.931" }
%"class.std::__1::__compressed_pair.931" = type { %"struct.std::__1::__compressed_pair_elem.932", %"struct.std::__1::__compressed_pair_elem.934" }
%"struct.std::__1::__compressed_pair_elem.932" = type { %"struct.std::__1::__hash_node_base.933"** }
%"struct.std::__1::__hash_node_base.933" = type { %"struct.std::__1::__hash_node_base.933"* }
%"struct.std::__1::__compressed_pair_elem.934" = type { %"class.std::__1::__bucket_list_deallocator.935" }
%"class.std::__1::__bucket_list_deallocator.935" = type { %"class.std::__1::__compressed_pair.936" }
%"class.std::__1::__compressed_pair.936" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.940" = type { %"struct.std::__1::__compressed_pair_elem.941" }
%"struct.std::__1::__compressed_pair_elem.941" = type { %"struct.std::__1::__hash_node_base.933" }
%"class.std::__1::__compressed_pair.945" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.949" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::internal::AstStringConstants" = type { %"class.v8::internal::Zone", %"class.v8::base::TemplateHashMapImpl", i64, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::base::TemplateHashMapImpl" = type { %"struct.v8::base::TemplateHashMapImpl<const v8::internal::AstRawString *, v8::base::NoHashMapValue, v8::internal::AstRawStringMapMatcher, v8::base::DefaultAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<const v8::internal::AstRawString *, v8::base::NoHashMapValue, v8::internal::AstRawStringMapMatcher, v8::base::DefaultAllocationPolicy>::Impl" = type { %"struct.v8::base::TemplateHashMapEntry"*, i32, i32 }
%"struct.v8::base::TemplateHashMapEntry" = type <{ %union.anon.1191, i32, [4 x i8] }>
%union.anon.1191 = type { %"class.v8::internal::AstRawString"* }
%"class.v8::internal::AstRawString" = type <{ %union.anon.957, %"class.v8::internal::Vector", i32, i8, [3 x i8] }>
%union.anon.957 = type { %"class.v8::internal::AstRawString"* }
%"class.v8::internal::Vector" = type { i8*, i64 }
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.965" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.959"**, %"struct.std::__1::pair.959"**, %"struct.std::__1::pair.959"**, %"class.std::__1::__compressed_pair.960" }
%"struct.std::__1::pair.959" = type opaque
%"class.std::__1::__compressed_pair.960" = type { %"struct.std::__1::__compressed_pair_elem.961" }
%"struct.std::__1::__compressed_pair_elem.961" = type { %"struct.std::__1::pair.959"** }
%"class.std::__1::__compressed_pair.965" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.970" = type { %"class.std::__1::__vector_base.971" }
%"class.std::__1::__vector_base.971" = type { %"class.v8::internal::Handle.972"*, %"class.v8::internal::Handle.972"*, %"class.std::__1::__compressed_pair.973" }
%"class.v8::internal::Handle.972" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.973" = type { %"struct.std::__1::__compressed_pair_elem.974" }
%"struct.std::__1::__compressed_pair_elem.974" = type { %"class.v8::internal::Handle.972"* }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector.978", [128 x i8] }
%"class.v8::internal::Vector.978" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.834", i32, %"class.v8::Local.1" }
%"class.v8::Local.834" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.979" = type { %"class.std::__1::__compressed_pair.980" }
%"class.std::__1::__compressed_pair.980" = type { %"struct.std::__1::__compressed_pair_elem.981" }
%"struct.std::__1::__compressed_pair_elem.981" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.809", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.985" = type { %"class.std::__1::__vector_base.986" }
%"class.std::__1::__vector_base.986" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.987" }
%"class.std::__1::__compressed_pair.987" = type { %"struct.std::__1::__compressed_pair_elem.988" }
%"struct.std::__1::__compressed_pair_elem.988" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.992" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.993" = type { %"class.std::__1::__hash_table.994" }
%"class.std::__1::__hash_table.994" = type <{ %"class.std::__1::unique_ptr.995", %"class.std::__1::__compressed_pair.1005", %"class.std::__1::__compressed_pair.1010", %"class.std::__1::__compressed_pair.1013", [4 x i8] }>
%"class.std::__1::unique_ptr.995" = type { %"class.std::__1::__compressed_pair.996" }
%"class.std::__1::__compressed_pair.996" = type { %"struct.std::__1::__compressed_pair_elem.997", %"struct.std::__1::__compressed_pair_elem.999" }
%"struct.std::__1::__compressed_pair_elem.997" = type { %"struct.std::__1::__hash_node_base.998"** }
%"struct.std::__1::__hash_node_base.998" = type { %"struct.std::__1::__hash_node_base.998"* }
%"struct.std::__1::__compressed_pair_elem.999" = type { %"class.std::__1::__bucket_list_deallocator.1000" }
%"class.std::__1::__bucket_list_deallocator.1000" = type { %"class.std::__1::__compressed_pair.1001" }
%"class.std::__1::__compressed_pair.1001" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1005" = type { %"struct.std::__1::__compressed_pair_elem.1006" }
%"struct.std::__1::__compressed_pair_elem.1006" = type { %"struct.std::__1::__hash_node_base.998" }
%"class.std::__1::__compressed_pair.1010" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1013" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.161" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1017", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1046", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1047", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1017" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1042, %union.anon.1044, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1042 = type { i64 }
%union.anon.1044 = type { i64 }
%"class.std::__1::weak_ptr.1046" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic.20", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.161" }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1047" = type { %"class.v8::PersistentBase.1048" }
%"class.v8::PersistentBase.1048" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1018", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1018" = type { %"class.std::__1::__hash_table.1019" }
%"class.std::__1::__hash_table.1019" = type <{ %"class.std::__1::unique_ptr.1020", %"class.std::__1::__compressed_pair.1030", %"class.std::__1::__compressed_pair.1035", %"class.std::__1::__compressed_pair.1038", [4 x i8] }>
%"class.std::__1::unique_ptr.1020" = type { %"class.std::__1::__compressed_pair.1021" }
%"class.std::__1::__compressed_pair.1021" = type { %"struct.std::__1::__compressed_pair_elem.1022", %"struct.std::__1::__compressed_pair_elem.1024" }
%"struct.std::__1::__compressed_pair_elem.1022" = type { %"struct.std::__1::__hash_node_base.1023"** }
%"struct.std::__1::__hash_node_base.1023" = type { %"struct.std::__1::__hash_node_base.1023"* }
%"struct.std::__1::__compressed_pair_elem.1024" = type { %"class.std::__1::__bucket_list_deallocator.1025" }
%"class.std::__1::__bucket_list_deallocator.1025" = type { %"class.std::__1::__compressed_pair.1026" }
%"class.std::__1::__compressed_pair.1026" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1030" = type { %"struct.std::__1::__compressed_pair_elem.1031" }
%"struct.std::__1::__compressed_pair_elem.1031" = type { %"struct.std::__1::__hash_node_base.1023" }
%"class.std::__1::__compressed_pair.1035" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1038" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1049" = type { %"class.std::__1::__compressed_pair.1050" }
%"class.std::__1::__compressed_pair.1050" = type { %"struct.std::__1::__compressed_pair_elem.1051" }
%"struct.std::__1::__compressed_pair_elem.1051" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1078", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.1054", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.1058", %"class.std::__1::unique_ptr.1064", %"class.std::__1::unique_ptr.475", %"class.std::__1::vector.1070", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.1054" = type { %"struct.std::__1::__atomic_base.1055" }
%"struct.std::__1::__atomic_base.1055" = type { %"struct.std::__1::__cxx_atomic_impl.1056" }
%"struct.std::__1::__cxx_atomic_impl.1056" = type { %"struct.std::__1::__cxx_atomic_base_impl.1057" }
%"struct.std::__1::__cxx_atomic_base_impl.1057" = type { i32 }
%"class.std::__1::unique_ptr.1058" = type { %"class.std::__1::__compressed_pair.1059" }
%"class.std::__1::__compressed_pair.1059" = type { %"struct.std::__1::__compressed_pair_elem.1060" }
%"struct.std::__1::__compressed_pair_elem.1060" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.809" }
%"class.std::__1::unique_ptr.1064" = type { %"class.std::__1::__compressed_pair.1065" }
%"class.std::__1::__compressed_pair.1065" = type { %"struct.std::__1::__compressed_pair_elem.1066" }
%"struct.std::__1::__compressed_pair_elem.1066" = type { %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1070" = type { %"class.std::__1::__vector_base.1071" }
%"class.std::__1::__vector_base.1071" = type { %"struct.std::__1::pair.1072"*, %"struct.std::__1::pair.1072"*, %"class.std::__1::__compressed_pair.1073" }
%"struct.std::__1::pair.1072" = type opaque
%"class.std::__1::__compressed_pair.1073" = type { %"struct.std::__1::__compressed_pair_elem.1074" }
%"struct.std::__1::__compressed_pair_elem.1074" = type { %"struct.std::__1::pair.1072"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic.20"*, %"class.std::__1::unique_ptr.98" }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.39", %"class.std::__1::vector.39", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.41" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.46" }
%"class.std::__1::__hash_table.46" = type <{ %"class.std::__1::unique_ptr.47", %"class.std::__1::__compressed_pair.57", %"class.std::__1::__compressed_pair.62", %"class.std::__1::__compressed_pair.64", [4 x i8] }>
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49", %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"struct.std::__1::__hash_node_base.50"** }
%"struct.std::__1::__hash_node_base.50" = type { %"struct.std::__1::__hash_node_base.50"* }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.std::__1::__bucket_list_deallocator.52" }
%"class.std::__1::__bucket_list_deallocator.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"struct.std::__1::__hash_node_base.50" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.25", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.87", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic.20"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.25", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.25", %"struct.std::__1::atomic.69", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.69" = type { %"struct.std::__1::__atomic_base.70" }
%"struct.std::__1::__atomic_base.70" = type { %"struct.std::__1::__cxx_atomic_impl.71" }
%"struct.std::__1::__cxx_atomic_impl.71" = type { %"struct.std::__1::__cxx_atomic_base_impl.72" }
%"struct.std::__1::__cxx_atomic_base_impl.72" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.73" }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.75" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.80", %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::atomic.87" = type { %"struct.std::__1::__atomic_base.88" }
%"struct.std::__1::__atomic_base.88" = type { %"struct.std::__1::__cxx_atomic_impl.89" }
%"struct.std::__1::__cxx_atomic_impl.89" = type { %"struct.std::__1::__cxx_atomic_base_impl.90" }
%"struct.std::__1::__cxx_atomic_base_impl.90" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.91", i8, [7 x i8] }>
%"class.std::__1::vector.91" = type { %"class.std::__1::__vector_base.92" }
%"class.std::__1::__vector_base.92" = type { i64*, i64*, %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic.20", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.std::__1::unique_ptr.1078" = type { %"class.std::__1::__compressed_pair.1079" }
%"class.std::__1::__compressed_pair.1079" = type { %"struct.std::__1::__compressed_pair_elem.1080" }
%"struct.std::__1::__compressed_pair_elem.1080" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1087" = type { %"class.std::__1::__compressed_pair.1088" }
%"class.std::__1::__compressed_pair.1088" = type { %"struct.std::__1::__compressed_pair_elem.1089" }
%"struct.std::__1::__compressed_pair_elem.1089" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.835", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.835" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1095" }
%"class.std::__1::unordered_map.1095" = type { %"class.std::__1::__hash_table.1096" }
%"class.std::__1::__hash_table.1096" = type <{ %"class.std::__1::unique_ptr.1097", %"class.std::__1::__compressed_pair.1107", %"class.std::__1::__compressed_pair.1112", %"class.std::__1::__compressed_pair.1115", [4 x i8] }>
%"class.std::__1::unique_ptr.1097" = type { %"class.std::__1::__compressed_pair.1098" }
%"class.std::__1::__compressed_pair.1098" = type { %"struct.std::__1::__compressed_pair_elem.1099", %"struct.std::__1::__compressed_pair_elem.1101" }
%"struct.std::__1::__compressed_pair_elem.1099" = type { %"struct.std::__1::__hash_node_base.1100"** }
%"struct.std::__1::__hash_node_base.1100" = type { %"struct.std::__1::__hash_node_base.1100"* }
%"struct.std::__1::__compressed_pair_elem.1101" = type { %"class.std::__1::__bucket_list_deallocator.1102" }
%"class.std::__1::__bucket_list_deallocator.1102" = type { %"class.std::__1::__compressed_pair.1103" }
%"class.std::__1::__compressed_pair.1103" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1107" = type { %"struct.std::__1::__compressed_pair_elem.1108" }
%"struct.std::__1::__compressed_pair_elem.1108" = type { %"struct.std::__1::__hash_node_base.1100" }
%"class.std::__1::__compressed_pair.1112" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.1115" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::atomic.1121" = type { %"struct.std::__1::__atomic_base.1122" }
%"struct.std::__1::__atomic_base.1122" = type { %"struct.std::__1::__cxx_atomic_impl.1123" }
%"struct.std::__1::__cxx_atomic_impl.1123" = type { %"struct.std::__1::__cxx_atomic_base_impl.1124" }
%"struct.std::__1::__cxx_atomic_base_impl.1124" = type { %"class.std::__1::vector.1125"* }
%"class.std::__1::vector.1125" = type { %"class.std::__1::__vector_base.1126" }
%"class.std::__1::__vector_base.1126" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1127" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1127" = type { %"struct.std::__1::__compressed_pair_elem.1128" }
%"struct.std::__1::__compressed_pair_elem.1128" = type { %"struct.v8::MemoryRange"* }
%"struct.std::__1::atomic.30" = type { %"struct.std::__1::__atomic_base.31" }
%"struct.std::__1::__atomic_base.31" = type { %"struct.std::__1::__cxx_atomic_impl.32" }
%"struct.std::__1::__cxx_atomic_impl.32" = type { %"struct.std::__1::__cxx_atomic_base_impl.33" }
%"struct.std::__1::__cxx_atomic_base_impl.33" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.34" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.20", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.104" }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.std::__1::vector.104" = type { %"class.std::__1::__vector_base.105" }
%"class.std::__1::__vector_base.105" = type { %"struct.std::__1::pair.106"*, %"struct.std::__1::pair.106"*, %"class.std::__1::__compressed_pair.107" }
%"struct.std::__1::pair.106" = type { i32, i64 }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"struct.std::__1::pair.106"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic.20", i32, %"struct.std::__1::atomic.20", %"class.v8::base::Mutex", %"struct.std::__1::atomic.20" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.112" }
%"class.std::__1::unordered_map.112" = type { %"class.std::__1::__hash_table.113" }
%"class.std::__1::__hash_table.113" = type <{ %"class.std::__1::unique_ptr.114", %"class.std::__1::__compressed_pair.124", %"class.std::__1::__compressed_pair.129", %"class.std::__1::__compressed_pair.134", [4 x i8] }>
%"class.std::__1::unique_ptr.114" = type { %"class.std::__1::__compressed_pair.115" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116", %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.116" = type { %"struct.std::__1::__hash_node_base.117"** }
%"struct.std::__1::__hash_node_base.117" = type { %"struct.std::__1::__hash_node_base.117"* }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"class.std::__1::__bucket_list_deallocator.119" }
%"class.std::__1::__bucket_list_deallocator.119" = type { %"class.std::__1::__compressed_pair.120" }
%"class.std::__1::__compressed_pair.120" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { %"struct.std::__1::__hash_node_base.117" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.147" = type { %"class.std::__1::__compressed_pair.148" }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.153", %"struct.std::__1::atomic.157", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic.20" }
%"struct.std::__1::atomic.157" = type { %"struct.std::__1::__atomic_base.158" }
%"struct.std::__1::__atomic_base.158" = type { %"struct.std::__1::__cxx_atomic_impl.159" }
%"struct.std::__1::__cxx_atomic_impl.159" = type { %"struct.std::__1::__cxx_atomic_base_impl.160" }
%"struct.std::__1::__cxx_atomic_base_impl.160" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"struct.std::__1::atomic.162" = type { %"struct.std::__1::__atomic_base.163" }
%"struct.std::__1::__atomic_base.163" = type { %"struct.std::__1::__cxx_atomic_impl.164" }
%"struct.std::__1::__cxx_atomic_impl.164" = type { %"struct.std::__1::__cxx_atomic_base_impl.165" }
%"struct.std::__1::__cxx_atomic_base_impl.165" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.std::__1::vector.166" = type { %"class.std::__1::__vector_base.167" }
%"class.std::__1::__vector_base.167" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.168" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.173" = type { %"class.std::__1::__compressed_pair.174" }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.179" = type { %"class.std::__1::__compressed_pair.180" }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181" }
%"struct.std::__1::__compressed_pair_elem.181" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.227", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.281", %"class.std::__1::vector.281", %"class.std::__1::vector.281", %"class.std::__1::vector.288", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.182", %"class.std::__1::vector.183", %"class.std::__1::vector.190", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.182" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.183" = type { %"class.std::__1::__vector_base.184" }
%"class.std::__1::__vector_base.184" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.185" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.185" = type { %"struct.std::__1::__compressed_pair_elem.186" }
%"struct.std::__1::__compressed_pair_elem.186" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.190" = type { %"class.std::__1::__vector_base.191" }
%"class.std::__1::__vector_base.191" = type { %"class.std::__1::unique_ptr.192"*, %"class.std::__1::unique_ptr.192"*, %"class.std::__1::__compressed_pair.193" }
%"class.std::__1::unique_ptr.192" = type opaque
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { %"class.std::__1::unique_ptr.192"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.198", %"class.v8::internal::Worklist.200", %"class.v8::internal::Worklist.200", %"class.v8::internal::Worklist.200", %"class.v8::internal::Worklist.202", %"class.v8::internal::Worklist.204", %"class.v8::internal::Worklist.206", %"class.v8::internal::Worklist.208", %"class.v8::internal::Worklist.210", %"class.v8::internal::Worklist.212" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.198" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.200" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.202" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.204" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.206" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.208" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.210" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"class.v8::internal::Worklist.212" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic.20" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.214", i8, i64 }
%"class.std::__1::vector.214" = type { %"class.std::__1::__vector_base.215" }
%"class.std::__1::__vector_base.215" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.216" }
%"class.std::__1::__compressed_pair.216" = type { %"struct.std::__1::__compressed_pair_elem.217" }
%"struct.std::__1::__compressed_pair_elem.217" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.221" = type { %"class.std::__1::__compressed_pair.222" }
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.223" }
%"struct.std::__1::__compressed_pair_elem.223" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.227" = type { %"class.std::__1::__compressed_pair.228" }
%"class.std::__1::__compressed_pair.228" = type { %"struct.std::__1::__compressed_pair_elem.229" }
%"struct.std::__1::__compressed_pair_elem.229" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.230" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.182"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.230" = type { %"class.std::__1::__hash_table.231" }
%"class.std::__1::__hash_table.231" = type <{ %"class.std::__1::unique_ptr.232", %"class.std::__1::__compressed_pair.242", %"class.std::__1::__compressed_pair.247", %"class.std::__1::__compressed_pair.250", [4 x i8] }>
%"class.std::__1::unique_ptr.232" = type { %"class.std::__1::__compressed_pair.233" }
%"class.std::__1::__compressed_pair.233" = type { %"struct.std::__1::__compressed_pair_elem.234", %"struct.std::__1::__compressed_pair_elem.236" }
%"struct.std::__1::__compressed_pair_elem.234" = type { %"struct.std::__1::__hash_node_base.235"** }
%"struct.std::__1::__hash_node_base.235" = type { %"struct.std::__1::__hash_node_base.235"* }
%"struct.std::__1::__compressed_pair_elem.236" = type { %"class.std::__1::__bucket_list_deallocator.237" }
%"class.std::__1::__bucket_list_deallocator.237" = type { %"class.std::__1::__compressed_pair.238" }
%"class.std::__1::__compressed_pair.238" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.242" = type { %"struct.std::__1::__compressed_pair_elem.243" }
%"struct.std::__1::__compressed_pair_elem.243" = type { %"struct.std::__1::__hash_node_base.235" }
%"class.std::__1::__compressed_pair.247" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.250" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.257" }
%"class.std::__1::unordered_map.257" = type { %"class.std::__1::__hash_table.258" }
%"class.std::__1::__hash_table.258" = type <{ %"class.std::__1::unique_ptr.259", %"class.std::__1::__compressed_pair.269", %"class.std::__1::__compressed_pair.274", %"class.std::__1::__compressed_pair.277", [4 x i8] }>
%"class.std::__1::unique_ptr.259" = type { %"class.std::__1::__compressed_pair.260" }
%"class.std::__1::__compressed_pair.260" = type { %"struct.std::__1::__compressed_pair_elem.261", %"struct.std::__1::__compressed_pair_elem.263" }
%"struct.std::__1::__compressed_pair_elem.261" = type { %"struct.std::__1::__hash_node_base.262"** }
%"struct.std::__1::__hash_node_base.262" = type { %"struct.std::__1::__hash_node_base.262"* }
%"struct.std::__1::__compressed_pair_elem.263" = type { %"class.std::__1::__bucket_list_deallocator.264" }
%"class.std::__1::__bucket_list_deallocator.264" = type { %"class.std::__1::__compressed_pair.265" }
%"class.std::__1::__compressed_pair.265" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.270" }
%"struct.std::__1::__compressed_pair_elem.270" = type { %"struct.std::__1::__hash_node_base.262" }
%"class.std::__1::__compressed_pair.274" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.277" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::vector.281" = type { %"class.std::__1::__vector_base.282" }
%"class.std::__1::__vector_base.282" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.283" }
%"class.std::__1::__compressed_pair.283" = type { %"struct.std::__1::__compressed_pair_elem.284" }
%"struct.std::__1::__compressed_pair_elem.284" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.288" = type { %"class.std::__1::__vector_base.289" }
%"class.std::__1::__vector_base.289" = type { %"struct.std::__1::pair.290"*, %"struct.std::__1::pair.290"*, %"class.std::__1::__compressed_pair.291" }
%"struct.std::__1::pair.290" = type opaque
%"class.std::__1::__compressed_pair.291" = type { %"struct.std::__1::__compressed_pair_elem.292" }
%"struct.std::__1::__compressed_pair_elem.292" = type { %"struct.std::__1::pair.290"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.296", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.281"], [3 x %"class.std::__1::vector.281"], i8, %"struct.std::__1::atomic.153", [6 x i8], %"class.std::__1::vector.281", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.296" = type { %"class.std::__1::__compressed_pair.297" }
%"class.std::__1::__compressed_pair.297" = type { %"struct.std::__1::__compressed_pair_elem.298" }
%"struct.std::__1::__compressed_pair_elem.298" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.306"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.281", %"class.std::__1::vector.281", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.306" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.309" = type { %"class.std::__1::__compressed_pair.310" }
%"class.std::__1::__compressed_pair.310" = type { %"struct.std::__1::__compressed_pair_elem.311" }
%"struct.std::__1::__compressed_pair_elem.311" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.315" = type { %"class.std::__1::__compressed_pair.316" }
%"class.std::__1::__compressed_pair.316" = type { %"struct.std::__1::__compressed_pair_elem.317" }
%"struct.std::__1::__compressed_pair_elem.317" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.321" = type { %"class.std::__1::__compressed_pair.322" }
%"class.std::__1::__compressed_pair.322" = type { %"struct.std::__1::__compressed_pair_elem.323" }
%"struct.std::__1::__compressed_pair_elem.323" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.20", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.331", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.324"], %"class.std::__1::unique_ptr.296" }
%"class.std::__1::vector.324" = type { %"class.std::__1::__vector_base.325" }
%"class.std::__1::__vector_base.325" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.326" }
%"class.std::__1::__compressed_pair.326" = type { %"struct.std::__1::__compressed_pair_elem.327" }
%"struct.std::__1::__compressed_pair_elem.327" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.360" = type { %"class.std::__1::__compressed_pair.361" }
%"class.std::__1::__compressed_pair.361" = type { %"struct.std::__1::__compressed_pair_elem.362" }
%"struct.std::__1::__compressed_pair_elem.362" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.363", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.367", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.372" }
%"struct.std::__1::atomic.363" = type { %"struct.std::__1::__atomic_base.364" }
%"struct.std::__1::__atomic_base.364" = type { %"struct.std::__1::__cxx_atomic_impl.365" }
%"struct.std::__1::__cxx_atomic_impl.365" = type { %"struct.std::__1::__cxx_atomic_base_impl.366" }
%"struct.std::__1::__cxx_atomic_base_impl.366" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.367" = type { %"struct.std::__1::__atomic_base.368" }
%"struct.std::__1::__atomic_base.368" = type { %"struct.std::__1::__cxx_atomic_impl.369" }
%"struct.std::__1::__cxx_atomic_impl.369" = type { %"struct.std::__1::__cxx_atomic_base_impl.370" }
%"struct.std::__1::__cxx_atomic_base_impl.370" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.372" = type { %"class.std::__1::__hash_table.373" }
%"class.std::__1::__hash_table.373" = type <{ %"class.std::__1::unique_ptr.374", %"class.std::__1::__compressed_pair.384", %"class.std::__1::__compressed_pair.389", %"class.std::__1::__compressed_pair.392", [4 x i8] }>
%"class.std::__1::unique_ptr.374" = type { %"class.std::__1::__compressed_pair.375" }
%"class.std::__1::__compressed_pair.375" = type { %"struct.std::__1::__compressed_pair_elem.376", %"struct.std::__1::__compressed_pair_elem.378" }
%"struct.std::__1::__compressed_pair_elem.376" = type { %"struct.std::__1::__hash_node_base.377"** }
%"struct.std::__1::__hash_node_base.377" = type { %"struct.std::__1::__hash_node_base.377"* }
%"struct.std::__1::__compressed_pair_elem.378" = type { %"class.std::__1::__bucket_list_deallocator.379" }
%"class.std::__1::__bucket_list_deallocator.379" = type { %"class.std::__1::__compressed_pair.380" }
%"class.std::__1::__compressed_pair.380" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.384" = type { %"struct.std::__1::__compressed_pair_elem.385" }
%"struct.std::__1::__compressed_pair_elem.385" = type { %"struct.std::__1::__hash_node_base.377" }
%"class.std::__1::__compressed_pair.389" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.392" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unique_ptr.399" = type { %"class.std::__1::__compressed_pair.400" }
%"class.std::__1::__compressed_pair.400" = type { %"struct.std::__1::__compressed_pair_elem.401" }
%"struct.std::__1::__compressed_pair_elem.401" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.296", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic.20", %"struct.std::__1::atomic.153", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.402", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.402" = type { %"class.std::__1::__hash_table.403" }
%"class.std::__1::__hash_table.403" = type <{ %"class.std::__1::unique_ptr.404", %"class.std::__1::__compressed_pair.414", %"class.std::__1::__compressed_pair.419", %"class.std::__1::__compressed_pair.422", [4 x i8] }>
%"class.std::__1::unique_ptr.404" = type { %"class.std::__1::__compressed_pair.405" }
%"class.std::__1::__compressed_pair.405" = type { %"struct.std::__1::__compressed_pair_elem.406", %"struct.std::__1::__compressed_pair_elem.408" }
%"struct.std::__1::__compressed_pair_elem.406" = type { %"struct.std::__1::__hash_node_base.407"** }
%"struct.std::__1::__hash_node_base.407" = type { %"struct.std::__1::__hash_node_base.407"* }
%"struct.std::__1::__compressed_pair_elem.408" = type { %"class.std::__1::__bucket_list_deallocator.409" }
%"class.std::__1::__bucket_list_deallocator.409" = type { %"class.std::__1::__compressed_pair.410" }
%"class.std::__1::__compressed_pair.410" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.414" = type { %"struct.std::__1::__compressed_pair_elem.415" }
%"struct.std::__1::__compressed_pair_elem.415" = type { %"struct.std::__1::__hash_node_base.407" }
%"class.std::__1::__compressed_pair.419" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.422" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unique_ptr.429" = type { %"class.std::__1::__compressed_pair.430" }
%"class.std::__1::__compressed_pair.430" = type { %"struct.std::__1::__compressed_pair_elem.431" }
%"struct.std::__1::__compressed_pair_elem.431" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.435" = type { %"class.std::__1::__compressed_pair.436" }
%"class.std::__1::__compressed_pair.436" = type { %"struct.std::__1::__compressed_pair_elem.437" }
%"struct.std::__1::__compressed_pair_elem.437" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.438" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.438" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::unique_ptr.445" = type { %"class.std::__1::__compressed_pair.446" }
%"class.std::__1::__compressed_pair.446" = type { %"struct.std::__1::__compressed_pair_elem.447" }
%"struct.std::__1::__compressed_pair_elem.447" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.451" = type { %"class.std::__1::__compressed_pair.452" }
%"class.std::__1::__compressed_pair.452" = type { %"struct.std::__1::__compressed_pair_elem.453" }
%"struct.std::__1::__compressed_pair_elem.453" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.457" = type { %"class.std::__1::__compressed_pair.458" }
%"class.std::__1::__compressed_pair.458" = type { %"struct.std::__1::__compressed_pair_elem.459" }
%"struct.std::__1::__compressed_pair_elem.459" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.463" = type { %"class.std::__1::__compressed_pair.464" }
%"class.std::__1::__compressed_pair.464" = type { %"struct.std::__1::__compressed_pair_elem.465" }
%"struct.std::__1::__compressed_pair_elem.465" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.469" = type { %"class.std::__1::__compressed_pair.470" }
%"class.std::__1::__compressed_pair.470" = type { %"struct.std::__1::__compressed_pair_elem.471" }
%"struct.std::__1::__compressed_pair_elem.471" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.475" = type { %"class.std::__1::__compressed_pair.476" }
%"class.std::__1::__compressed_pair.476" = type { %"struct.std::__1::__compressed_pair_elem.477" }
%"struct.std::__1::__compressed_pair_elem.477" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.481" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.500", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.482", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.500" = type { %"struct.std::__1::__atomic_base.501" }
%"struct.std::__1::__atomic_base.501" = type { %"struct.std::__1::__cxx_atomic_impl.502" }
%"struct.std::__1::__cxx_atomic_impl.502" = type { %"struct.std::__1::__cxx_atomic_base_impl.503" }
%"struct.std::__1::__cxx_atomic_base_impl.503" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.504" = type { %"class.std::__1::__hash_table.505" }
%"class.std::__1::__hash_table.505" = type <{ %"class.std::__1::unique_ptr.506", %"class.std::__1::__compressed_pair.516", %"class.std::__1::__compressed_pair.521", %"class.std::__1::__compressed_pair.524", [4 x i8] }>
%"class.std::__1::unique_ptr.506" = type { %"class.std::__1::__compressed_pair.507" }
%"class.std::__1::__compressed_pair.507" = type { %"struct.std::__1::__compressed_pair_elem.508", %"struct.std::__1::__compressed_pair_elem.510" }
%"struct.std::__1::__compressed_pair_elem.508" = type { %"struct.std::__1::__hash_node_base.509"** }
%"struct.std::__1::__hash_node_base.509" = type { %"struct.std::__1::__hash_node_base.509"* }
%"struct.std::__1::__compressed_pair_elem.510" = type { %"class.std::__1::__bucket_list_deallocator.511" }
%"class.std::__1::__bucket_list_deallocator.511" = type { %"class.std::__1::__compressed_pair.512" }
%"class.std::__1::__compressed_pair.512" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.516" = type { %"struct.std::__1::__compressed_pair_elem.517" }
%"struct.std::__1::__compressed_pair_elem.517" = type { %"struct.std::__1::__hash_node_base.509" }
%"class.std::__1::__compressed_pair.521" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.524" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unique_ptr.530" = type { %"class.std::__1::__compressed_pair.531" }
%"class.std::__1::__compressed_pair.531" = type { %"struct.std::__1::__compressed_pair_elem.532" }
%"struct.std::__1::__compressed_pair_elem.532" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.536" = type { %"class.std::__1::__compressed_pair.537" }
%"class.std::__1::__compressed_pair.537" = type { %"struct.std::__1::__compressed_pair_elem.538" }
%"struct.std::__1::__compressed_pair_elem.538" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.542", %"class.std::__1::vector.542" }
%"class.std::__1::unique_ptr.549" = type { %"class.std::__1::__compressed_pair.550" }
%"class.std::__1::__compressed_pair.550" = type { %"struct.std::__1::__compressed_pair_elem.551" }
%"struct.std::__1::__compressed_pair_elem.551" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set.331" = type { %"class.std::__1::__hash_table.332" }
%"class.std::__1::__hash_table.332" = type <{ %"class.std::__1::unique_ptr.333", %"class.std::__1::__compressed_pair.343", %"class.std::__1::__compressed_pair.348", %"class.std::__1::__compressed_pair.352", [4 x i8] }>
%"class.std::__1::unique_ptr.333" = type { %"class.std::__1::__compressed_pair.334" }
%"class.std::__1::__compressed_pair.334" = type { %"struct.std::__1::__compressed_pair_elem.335", %"struct.std::__1::__compressed_pair_elem.337" }
%"struct.std::__1::__compressed_pair_elem.335" = type { %"struct.std::__1::__hash_node_base.336"** }
%"struct.std::__1::__hash_node_base.336" = type { %"struct.std::__1::__hash_node_base.336"* }
%"struct.std::__1::__compressed_pair_elem.337" = type { %"class.std::__1::__bucket_list_deallocator.338" }
%"class.std::__1::__bucket_list_deallocator.338" = type { %"class.std::__1::__compressed_pair.339" }
%"class.std::__1::__compressed_pair.339" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.343" = type { %"struct.std::__1::__compressed_pair_elem.344" }
%"struct.std::__1::__compressed_pair_elem.344" = type { %"struct.std::__1::__hash_node_base.336" }
%"class.std::__1::__compressed_pair.348" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.352" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unordered_map.581" = type { %"class.std::__1::__hash_table.582" }
%"class.std::__1::__hash_table.582" = type <{ %"class.std::__1::unique_ptr.583", %"class.std::__1::__compressed_pair.593", %"class.std::__1::__compressed_pair.598", %"class.std::__1::__compressed_pair.601", [4 x i8] }>
%"class.std::__1::unique_ptr.583" = type { %"class.std::__1::__compressed_pair.584" }
%"class.std::__1::__compressed_pair.584" = type { %"struct.std::__1::__compressed_pair_elem.585", %"struct.std::__1::__compressed_pair_elem.587" }
%"struct.std::__1::__compressed_pair_elem.585" = type { %"struct.std::__1::__hash_node_base.586"** }
%"struct.std::__1::__hash_node_base.586" = type { %"struct.std::__1::__hash_node_base.586"* }
%"struct.std::__1::__compressed_pair_elem.587" = type { %"class.std::__1::__bucket_list_deallocator.588" }
%"class.std::__1::__bucket_list_deallocator.588" = type { %"class.std::__1::__compressed_pair.589" }
%"class.std::__1::__compressed_pair.589" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.593" = type { %"struct.std::__1::__compressed_pair_elem.594" }
%"struct.std::__1::__compressed_pair_elem.594" = type { %"struct.std::__1::__hash_node_base.586" }
%"class.std::__1::__compressed_pair.598" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.601" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unordered_map.555" = type { %"class.std::__1::__hash_table.556" }
%"class.std::__1::__hash_table.556" = type <{ %"class.std::__1::unique_ptr.557", %"class.std::__1::__compressed_pair.567", %"class.std::__1::__compressed_pair.572", %"class.std::__1::__compressed_pair.575", [4 x i8] }>
%"class.std::__1::unique_ptr.557" = type { %"class.std::__1::__compressed_pair.558" }
%"class.std::__1::__compressed_pair.558" = type { %"struct.std::__1::__compressed_pair_elem.559", %"struct.std::__1::__compressed_pair_elem.561" }
%"struct.std::__1::__compressed_pair_elem.559" = type { %"struct.std::__1::__hash_node_base.560"** }
%"struct.std::__1::__hash_node_base.560" = type { %"struct.std::__1::__hash_node_base.560"* }
%"struct.std::__1::__compressed_pair_elem.561" = type { %"class.std::__1::__bucket_list_deallocator.562" }
%"class.std::__1::__bucket_list_deallocator.562" = type { %"class.std::__1::__compressed_pair.563" }
%"class.std::__1::__compressed_pair.563" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.567" = type { %"struct.std::__1::__compressed_pair_elem.568" }
%"struct.std::__1::__compressed_pair_elem.568" = type { %"struct.std::__1::__hash_node_base.560" }
%"class.std::__1::__compressed_pair.572" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.575" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::unordered_map.605" = type { %"class.std::__1::__hash_table.606" }
%"class.std::__1::__hash_table.606" = type <{ %"class.std::__1::unique_ptr.607", %"class.std::__1::__compressed_pair.617", %"class.std::__1::__compressed_pair.622", %"class.std::__1::__compressed_pair.627", [4 x i8] }>
%"class.std::__1::unique_ptr.607" = type { %"class.std::__1::__compressed_pair.608" }
%"class.std::__1::__compressed_pair.608" = type { %"struct.std::__1::__compressed_pair_elem.609", %"struct.std::__1::__compressed_pair_elem.611" }
%"struct.std::__1::__compressed_pair_elem.609" = type { %"struct.std::__1::__hash_node_base.610"** }
%"struct.std::__1::__hash_node_base.610" = type { %"struct.std::__1::__hash_node_base.610"* }
%"struct.std::__1::__compressed_pair_elem.611" = type { %"class.std::__1::__bucket_list_deallocator.612" }
%"class.std::__1::__bucket_list_deallocator.612" = type { %"class.std::__1::__compressed_pair.613" }
%"class.std::__1::__compressed_pair.613" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.617" = type { %"struct.std::__1::__compressed_pair_elem.618" }
%"struct.std::__1::__compressed_pair_elem.618" = type { %"struct.std::__1::__hash_node_base.610" }
%"class.std::__1::__compressed_pair.622" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::__compressed_pair.627" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"class.std::__1::vector.633" = type { %"class.std::__1::__vector_base.634" }
%"class.std::__1::__vector_base.634" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.635" }
%"class.std::__1::__compressed_pair.635" = type { %"struct.std::__1::__compressed_pair_elem.636" }
%"struct.std::__1::__compressed_pair_elem.636" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.640" = type { %"class.std::__1::__compressed_pair.641" }
%"class.std::__1::__compressed_pair.641" = type { %"struct.std::__1::__compressed_pair_elem.642" }
%"struct.std::__1::__compressed_pair_elem.642" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"struct.std::__1::atomic.20" = type { %"struct.std::__1::__atomic_base.21" }
%"struct.std::__1::__atomic_base.21" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__cxx_atomic_impl.23" }
%"struct.std::__1::__cxx_atomic_impl.23" = type { %"struct.std::__1::__cxx_atomic_base_impl.24" }
%"struct.std::__1::__cxx_atomic_base_impl.24" = type { i64 }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic.20", i64, %"struct.std::__1::atomic.20" }
%"class.std::__1::vector.140" = type { %"class.std::__1::__vector_base.141" }
%"class.std::__1::__vector_base.141" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.142" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.std::__1::vector.542" = type { %"class.std::__1::__vector_base.543" }
%"class.std::__1::__vector_base.543" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.544" }
%"class.std::__1::__compressed_pair.544" = type { %"struct.std::__1::__compressed_pair_elem.545" }
%"struct.std::__1::__compressed_pair_elem.545" = type { %"class.v8::internal::Object"* }
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.v8::internal::Scope" = type <{ %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"*, %"class.v8::internal::VariableMap", %"class.v8::base::ThreadedListBase", %"class.v8::base::ThreadedListBase.1134", %"class.v8::base::ThreadedListBase.1136", %"class.v8::internal::Handle", i32, i32, i32, i32, i8, i16, [5 x i8] }>
%"class.v8::internal::VariableMap" = type { %"class.v8::base::PointerTemplateHashMapImpl" }
%"class.v8::base::PointerTemplateHashMapImpl" = type { %"class.v8::base::TemplateHashMapImpl.1132" }
%"class.v8::base::TemplateHashMapImpl.1132" = type { %"struct.v8::base::TemplateHashMapImpl<void *, void *, v8::base::KeyEqualityMatcher<void *>, v8::internal::ZoneAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<void *, void *, v8::base::KeyEqualityMatcher<void *>, v8::internal::ZoneAllocationPolicy>::Impl" = type { %"class.v8::internal::ZoneAllocationPolicy", %"struct.v8::base::TemplateHashMapEntry.1133"*, i32, i32 }
%"class.v8::internal::ZoneAllocationPolicy" = type { %"class.v8::internal::Zone"* }
%"struct.v8::base::TemplateHashMapEntry.1133" = type <{ i8*, i8*, i32, [4 x i8] }>
%"class.v8::base::ThreadedListBase" = type { %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** }
%"class.v8::internal::Variable" = type <{ %"class.v8::internal::Scope"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"*, i32, i32, i16, [6 x i8] }>
%"class.v8::base::ThreadedListBase.1134" = type { %"class.v8::internal::VariableProxy"*, %"class.v8::internal::VariableProxy"** }
%"class.v8::internal::VariableProxy" = type { %"class.v8::internal::Expression", %union.anon.1135, %"class.v8::internal::VariableProxy"* }
%"class.v8::internal::Expression" = type { %"class.v8::internal::AstNode" }
%"class.v8::internal::AstNode" = type { i32, i32 }
%union.anon.1135 = type { %"class.v8::internal::AstRawString"* }
%"class.v8::base::ThreadedListBase.1136" = type { %"class.v8::internal::Declaration"*, %"class.v8::internal::Declaration"** }
%"class.v8::internal::Declaration" = type { %"class.v8::internal::AstNode", %"class.v8::internal::Variable"*, %"class.v8::internal::Declaration"* }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DeclarationScope" = type <{ %"class.v8::internal::Scope.base", i16, i8, [2 x i8], i32, [4 x i8], %"class.v8::internal::ZoneList", %"class.v8::base::ThreadedListBase.1137", %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"*, %"class.v8::internal::PreparseDataBuilder"*, %"struct.v8::internal::DeclarationScope::RareData"* }>
%"class.v8::internal::Scope.base" = type <{ %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"*, %"class.v8::internal::VariableMap", %"class.v8::base::ThreadedListBase", %"class.v8::base::ThreadedListBase.1134", %"class.v8::base::ThreadedListBase.1136", %"class.v8::internal::Handle", i32, i32, i32, i32, i8, i16 }>
%"class.v8::internal::ZoneList" = type { %"class.v8::internal::Variable"**, i32, i32 }
%"class.v8::base::ThreadedListBase.1137" = type { %"class.v8::internal::SloppyBlockFunctionStatement"*, %"class.v8::internal::SloppyBlockFunctionStatement"** }
%"class.v8::internal::SloppyBlockFunctionStatement" = type { %"class.v8::internal::Statement", %"class.v8::internal::Variable"*, %"class.v8::internal::Statement"*, %"class.v8::internal::SloppyBlockFunctionStatement"* }
%"class.v8::internal::Statement" = type { %"class.v8::internal::AstNode" }
%"class.v8::internal::PreparseDataBuilder" = type <{ %"class.v8::internal::PreparseDataBuilder"*, %"class.v8::internal::PreparseDataBuilder::ByteData", %union.anon.1148, %"class.v8::internal::DeclarationScope"*, i32, i32, i32, i8, [3 x i8] }>
%"class.v8::internal::PreparseDataBuilder::ByteData" = type <{ %union.anon.1138, i8, [7 x i8] }>
%union.anon.1138 = type { %struct.anon.1139 }
%struct.anon.1139 = type { %"class.std::__1::vector.1140"*, i32 }
%"class.std::__1::vector.1140" = type { %"class.std::__1::__vector_base.1141" }
%"class.std::__1::__vector_base.1141" = type { i8*, i8*, %"class.std::__1::__compressed_pair.1142" }
%"class.std::__1::__compressed_pair.1142" = type { %"struct.std::__1::__compressed_pair_elem.1143" }
%"struct.std::__1::__compressed_pair_elem.1143" = type { i8* }
%union.anon.1148 = type { %"class.v8::internal::ScopedList" }
%"class.v8::internal::ScopedList" = type { %"class.std::__1::vector.1149"*, i64, i64 }
%"class.std::__1::vector.1149" = type { %"class.std::__1::__vector_base.1193" }
%"class.std::__1::__vector_base.1193" = type { i8**, i8**, %"class.std::__1::__compressed_pair.1194" }
%"class.std::__1::__compressed_pair.1194" = type { %"struct.std::__1::__compressed_pair_elem.1195" }
%"struct.std::__1::__compressed_pair_elem.1195" = type { i8** }
%"struct.v8::internal::DeclarationScope::RareData" = type { %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"* }
%"class.v8::internal::ClassScope" = type <{ %"class.v8::internal::Scope.base", [5 x i8], %"class.v8::internal::PointerWithPayload", %"class.v8::internal::Variable"*, i8, i8, i8, i8, [4 x i8] }>
%"class.v8::internal::PointerWithPayload" = type { i64 }
%"struct.v8::internal::ClassScope::RareData" = type { %"class.v8::base::ThreadedListBase.1134", %"class.v8::internal::VariableMap", %"class.v8::internal::Variable"* }
%"class.v8::internal::ModuleScope" = type { %"class.v8::internal::DeclarationScope", %"class.v8::internal::SourceTextModuleDescriptor"* }
%"class.v8::internal::SourceTextModuleDescriptor" = type { %"class.v8::internal::ZoneSet", %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneMultimap", %"class.v8::internal::ZoneMap" }
%"class.v8::internal::ZoneSet" = type { %"class.std::__1::set.1152" }
%"class.std::__1::set.1152" = type { %"class.std::__1::__tree.1153" }
%"class.std::__1::__tree.1153" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1154", %"class.std::__1::__compressed_pair.1156" }
%"class.std::__1::__compressed_pair.1154" = type { %"struct.std::__1::__compressed_pair_elem.81", %"struct.std::__1::__compressed_pair_elem.1155" }
%"struct.std::__1::__compressed_pair_elem.1155" = type { %"class.v8::internal::ZoneAllocator" }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1156" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.v8::internal::ZoneVector" = type { %"class.std::__1::vector.1158" }
%"class.std::__1::vector.1158" = type { %"class.std::__1::__vector_base.1159" }
%"class.std::__1::__vector_base.1159" = type { %"struct.v8::internal::SourceTextModuleDescriptor::Entry"**, %"struct.v8::internal::SourceTextModuleDescriptor::Entry"**, %"class.std::__1::__compressed_pair.1160" }
%"struct.v8::internal::SourceTextModuleDescriptor::Entry" = type { %"struct.v8::internal::Scanner::Location", %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, i32, i32 }
%"struct.v8::internal::Scanner::Location" = type { i32, i32 }
%"class.std::__1::__compressed_pair.1160" = type { %"struct.std::__1::__compressed_pair_elem.1161", %"struct.std::__1::__compressed_pair_elem.1162" }
%"struct.std::__1::__compressed_pair_elem.1161" = type { %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** }
%"struct.std::__1::__compressed_pair_elem.1162" = type { %"class.v8::internal::ZoneAllocator.1163" }
%"class.v8::internal::ZoneAllocator.1163" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneMultimap" = type { %"class.std::__1::multimap" }
%"class.std::__1::multimap" = type { %"class.std::__1::__tree.1164" }
%"class.std::__1::__tree.1164" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1165", %"class.std::__1::__compressed_pair.1168" }
%"class.std::__1::__compressed_pair.1165" = type { %"struct.std::__1::__compressed_pair_elem.81", %"struct.std::__1::__compressed_pair_elem.1166" }
%"struct.std::__1::__compressed_pair_elem.1166" = type { %"class.v8::internal::ZoneAllocator.1167" }
%"class.v8::internal::ZoneAllocator.1167" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1168" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.v8::internal::ZoneMap" = type { %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree.1164" }
%"class.v8::internal::FactoryBase" = type { i8 }
%"class.v8::internal::SourceTextModuleDescriptor::AstModuleRequest" = type { %"class.v8::internal::AstRawString"*, %"class.v8::internal::ImportAssertions"*, i32, i32 }
%"class.v8::internal::ImportAssertions" = type { %"class.v8::internal::ZoneMap.1178" }
%"class.v8::internal::ZoneMap.1178" = type { %"class.std::__1::map.1179" }
%"class.std::__1::map.1179" = type { %"class.std::__1::__tree.1180" }
%"class.std::__1::__tree.1180" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1181", %"class.std::__1::__compressed_pair.1184" }
%"class.std::__1::__compressed_pair.1181" = type { %"struct.std::__1::__compressed_pair_elem.81", %"struct.std::__1::__compressed_pair_elem.1182" }
%"struct.std::__1::__compressed_pair_elem.1182" = type { %"class.v8::internal::ZoneAllocator.1183" }
%"class.v8::internal::ZoneAllocator.1183" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1184" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.v8::internal::ScopeInfo" = type { %"class.v8::internal::TorqueGeneratedScopeInfo" }
%"class.v8::internal::TorqueGeneratedScopeInfo" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::FactoryBase.1052" = type { i8 }
%"class.v8::internal::Handle<v8::internal::ScopeInfo>::ObjectRef" = type { %"class.v8::internal::ScopeInfo" }
%"class.v8::internal::String" = type { %"class.v8::internal::TorqueGeneratedString" }
%"class.v8::internal::TorqueGeneratedString" = type { %"class.v8::internal::Name" }
%"class.v8::internal::StringShape" = type { i32 }
%"struct.v8::internal::VariableLookupResult" = type { i32, i32, i8, i8, i8, i8, i8 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.v8::internal::SourceTextModuleInfo" = type { %"class.v8::internal::FixedArray" }
%"class.v8::internal::ConsString" = type { %"class.v8::internal::TorqueGeneratedConsString" }
%"class.v8::internal::TorqueGeneratedConsString" = type { %"class.v8::internal::String" }
%"class.v8::internal::SlicedString" = type { %"class.v8::internal::TorqueGeneratedSlicedString" }
%"class.v8::internal::TorqueGeneratedSlicedString" = type { %"class.v8::internal::String" }
%"class.v8::internal::ThinString" = type { %"class.v8::internal::TorqueGeneratedThinString" }
%"class.v8::internal::TorqueGeneratedThinString" = type { %"class.v8::internal::String" }
%"class.v8::String::ExternalOneByteStringResource" = type { %"class.v8::String::ExternalStringResourceBase", i8* }
%"class.v8::String::ExternalStringResourceBase" = type { i32 (...)** }
%"class.v8::String::ExternalStringResource" = type { %"class.v8::String::ExternalStringResourceBase", i16* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN2v88internal9ScopeInfo6CreateINS0_7IsolateEEENS0_6HandleIS1_EEPT_PNS0_4ZoneEPNS0_5ScopeENS0_11MaybeHandleIS1_EE = comdat any

$_ZN2v88internal20SourceTextModuleInfo3NewINS0_7IsolateEEENS0_6HandleIS1_EEPT_PNS0_4ZoneEPNS0_26SourceTextModuleDescriptorE = comdat any

$_ZN2v88internal9ScopeInfo6CreateINS0_12LocalIsolateEEENS0_6HandleIS1_EEPT_PNS0_4ZoneEPNS0_5ScopeENS0_11MaybeHandleIS1_EE = comdat any

$_ZN2v88internal20SourceTextModuleInfo3NewINS0_12LocalIsolateEEENS0_6HandleIS1_EEPT_PNS0_4ZoneEPNS0_26SourceTextModuleDescriptorE = comdat any

$_ZN2v88internal13ModuleRequest3NewINS0_7IsolateEEENS0_6HandleIS1_EEPT_NS4_INS0_6StringEEENS4_INS0_10FixedArrayEEEi = comdat any

$_ZN2v88internal13ModuleRequest3NewINS0_12LocalIsolateEEENS0_6HandleIS1_EEPT_NS4_INS0_6StringEEENS4_INS0_10FixedArrayEEEi = comdat any

$_ZN2v88internal25SourceTextModuleInfoEntry3NewINS0_7IsolateEEENS0_6HandleIS1_EEPT_NS4_INS0_19PrimitiveHeapObjectEEES9_S9_iiii = comdat any

$_ZN2v88internal25SourceTextModuleInfoEntry3NewINS0_12LocalIsolateEEENS0_6HandleIS1_EEPT_NS4_INS0_19PrimitiveHeapObjectEEES9_S9_iiii = comdat any

$_ZN2v88internal24TorqueGeneratedScopeInfoINS0_9ScopeInfoENS0_10HeapObjectEE21set_locals_block_listENS0_10FixedArrayENS0_16WriteBarrierModeE = comdat any

$_ZN2v88internal11StringShape33DispatchToSpecificTypeWithoutCastIZNS1_22DispatchToSpecificTypeIZNKS0_6String7GetImplEiE19StringGetDispatchertJRiEEET0_S4_DpOT1_E17CastingDispatchertJRS4_S6_EEES7_SA_ = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

@.str = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"!IsEmpty()\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"NONE\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"STACK\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"CONTEXT\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"UNUSED\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1
@_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E = external local_unnamed_addr global %"class.v8::internal::SoleReadOnlyHeap"*, align 8
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal9ScopeInfo6CreateINS0_7IsolateEEENS0_6HandleIS1_EEPT_PNS0_4ZoneEPNS0_5ScopeENS0_11MaybeHandleIS1_EE(%"class.v8::internal::Isolate"*, %"class.v8::internal::Zone"*, %"class.v8::internal::Scope"*, i64*) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %2, i64 0, i32 4, i32 0
  %6 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %2, i64 0, i32 4, i32 1
  %7 = load %"class.v8::internal::Variable"**, %"class.v8::internal::Variable"*** %6, align 8
  %8 = icmp eq %"class.v8::internal::Variable"** %5, %7
  br i1 %8, label %9, label %16

9:                                                ; preds = %30, %4
  %10 = phi i32 [ 0, %4 ], [ %31, %30 ]
  %11 = phi i32 [ 0, %4 ], [ %32, %30 ]
  %12 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %2, i64 0, i32 13
  %13 = load i16, i16* %12, align 1
  %14 = and i16 %13, 256
  %15 = icmp eq i16 %14, 0
  br i1 %15, label %55, label %35

16:                                               ; preds = %4, %30
  %17 = phi i32 [ %32, %30 ], [ 0, %4 ]
  %18 = phi i32 [ %31, %30 ], [ 0, %4 ]
  %19 = phi %"class.v8::internal::Variable"** [ %33, %30 ], [ %5, %4 ]
  %20 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %20, i64 0, i32 6
  %22 = load i16, i16* %21, align 8
  %23 = lshr i16 %22, 7
  %24 = trunc i16 %23 to i8
  %25 = and i8 %24, 7
  switch i8 %25, label %30 [
    i8 3, label %26
    i8 6, label %26
    i8 5, label %28
  ]

26:                                               ; preds = %16, %16
  %27 = add nsw i32 %17, 1
  br label %30

28:                                               ; preds = %16
  %29 = add nsw i32 %18, 1
  br label %30

30:                                               ; preds = %16, %28, %26
  %31 = phi i32 [ %18, %16 ], [ %29, %28 ], [ %18, %26 ]
  %32 = phi i32 [ %17, %16 ], [ %17, %28 ], [ %27, %26 ]
  %33 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %20, i64 0, i32 3
  %34 = icmp eq %"class.v8::internal::Variable"** %33, %7
  br i1 %34, label %9, label %16

35:                                               ; preds = %9
  %36 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %37 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %36, i64 0, i32 1
  %38 = load i16, i16* %37, align 1
  %39 = and i16 %38, 4096
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %55, label %41

41:                                               ; preds = %35
  %42 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %43 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %42, i64 0, i32 8
  %44 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %43, align 8
  %45 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %44, i64 0, i32 6
  %46 = load i16, i16* %45, align 8
  %47 = and i16 %46, 2048
  %48 = icmp eq i16 %47, 0
  br i1 %48, label %55, label %49

49:                                               ; preds = %41
  %50 = and i16 %46, 896
  %51 = icmp eq i16 %50, 384
  %52 = select i1 %51, i32 2, i32 1
  %53 = zext i1 %51 to i32
  %54 = add nsw i32 %11, %53
  br label %55

55:                                               ; preds = %41, %35, %9, %49
  %56 = phi i32 [ 3, %41 ], [ 0, %35 ], [ 0, %9 ], [ %52, %49 ]
  %57 = phi i32 [ %11, %41 ], [ %11, %35 ], [ %11, %9 ], [ %54, %49 ]
  %58 = load i16, i16* %12, align 1
  %59 = and i16 %58, 256
  %60 = icmp eq i16 %59, 0
  br i1 %60, label %66, label %61

61:                                               ; preds = %55
  %62 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %63 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %62, i64 0, i32 10
  %64 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %63, align 8
  %65 = icmp ne %"class.v8::internal::Variable"* %64, null
  br label %66

66:                                               ; preds = %55, %61
  %67 = phi i1 [ false, %55 ], [ %65, %61 ]
  %68 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %2, i64 0, i32 12
  %69 = load i8, i8* %68, align 8
  %70 = icmp eq i8 %69, 2
  br i1 %70, label %71, label %88

71:                                               ; preds = %66
  %72 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %73 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %72, i64 0, i32 9
  %74 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %73, align 8
  %75 = icmp eq %"class.v8::internal::Variable"* %74, null
  br i1 %75, label %94, label %76

76:                                               ; preds = %71
  %77 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %78 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %77, i64 0, i32 9
  %79 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %78, align 8
  %80 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %79, i64 0, i32 6
  %81 = load i16, i16* %80, align 8
  %82 = and i16 %81, 2048
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %94, label %84

84:                                               ; preds = %76
  %85 = and i16 %81, 896
  %86 = icmp eq i16 %85, 384
  %87 = select i1 %86, i32 2, i32 1
  br label %94

88:                                               ; preds = %66
  %89 = add i8 %69, -3
  %90 = icmp ult i8 %89, 2
  br i1 %90, label %131, label %91

91:                                               ; preds = %88
  %92 = icmp eq i8 %69, 1
  %93 = select i1 %92, i32 3, i32 0
  br label %94

94:                                               ; preds = %76, %91, %71, %84
  %95 = phi i32 [ 3, %76 ], [ %87, %84 ], [ 3, %71 ], [ %93, %91 ]
  %96 = load i8, i8* %68, align 8
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %98, label %131

98:                                               ; preds = %94
  %99 = tail call %"class.v8::internal::ClassScope"* @_ZN2v88internal5Scope12AsClassScopeEv(%"class.v8::internal::Scope"* %2) #9
  %100 = getelementptr inbounds %"class.v8::internal::ClassScope", %"class.v8::internal::ClassScope"* %99, i64 0, i32 2, i32 0
  %101 = load i64, i64* %100, align 8
  %102 = and i64 %101, -2
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %108, label %104

104:                                              ; preds = %98
  %105 = inttoptr i64 %102 to %"struct.v8::internal::ClassScope::RareData"*
  %106 = getelementptr inbounds %"struct.v8::internal::ClassScope::RareData", %"struct.v8::internal::ClassScope::RareData"* %105, i64 0, i32 2
  %107 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %106, align 8
  br label %108

108:                                              ; preds = %104, %98
  %109 = phi %"class.v8::internal::Variable"* [ %107, %104 ], [ null, %98 ]
  %110 = icmp ne %"class.v8::internal::Variable"* %109, null
  %111 = load i8, i8* %68, align 8
  %112 = icmp eq i8 %111, 0
  br i1 %112, label %113, label %131

113:                                              ; preds = %108
  %114 = tail call %"class.v8::internal::ClassScope"* @_ZN2v88internal5Scope12AsClassScopeEv(%"class.v8::internal::Scope"* %2) #9
  %115 = getelementptr inbounds %"class.v8::internal::ClassScope", %"class.v8::internal::ClassScope"* %114, i64 0, i32 7
  %116 = load i8, i8* %115, align 1, !range !2
  %117 = icmp eq i8 %116, 0
  br i1 %117, label %118, label %131

118:                                              ; preds = %113
  %119 = getelementptr inbounds %"class.v8::internal::ClassScope", %"class.v8::internal::ClassScope"* %114, i64 0, i32 5
  %120 = load i8, i8* %119, align 1, !range !2
  %121 = icmp eq i8 %120, 0
  br i1 %121, label %122, label %131

122:                                              ; preds = %118
  %123 = getelementptr inbounds %"class.v8::internal::ClassScope", %"class.v8::internal::ClassScope"* %114, i64 0, i32 4
  %124 = load i8, i8* %123, align 8, !range !2
  %125 = icmp eq i8 %124, 0
  br i1 %125, label %131, label %126

126:                                              ; preds = %122
  %127 = getelementptr inbounds %"class.v8::internal::ClassScope", %"class.v8::internal::ClassScope"* %114, i64 0, i32 0, i32 13
  %128 = load i16, i16* %127, align 1
  %129 = and i16 %128, 64
  %130 = icmp ne i16 %129, 0
  br label %131

131:                                              ; preds = %88, %94, %126, %122, %118, %113, %108
  %132 = phi i1 [ %110, %108 ], [ %110, %113 ], [ %110, %118 ], [ %110, %122 ], [ %110, %126 ], [ false, %94 ], [ false, %88 ]
  %133 = phi i32 [ %95, %108 ], [ %95, %113 ], [ %95, %118 ], [ %95, %122 ], [ %95, %126 ], [ %95, %94 ], [ 3, %88 ]
  %134 = phi i1 [ false, %108 ], [ true, %113 ], [ true, %118 ], [ false, %122 ], [ %130, %126 ], [ false, %94 ], [ false, %88 ]
  %135 = icmp ne i32 %133, 0
  %136 = load i8, i8* %68, align 8
  %137 = add i8 %136, -1
  %138 = icmp ult i8 %137, 4
  %139 = add nsw i32 %56, -1
  %140 = icmp ult i32 %139, 2
  %141 = load i16, i16* %12, align 1
  %142 = and i16 %141, 256
  %143 = icmp eq i16 %142, 0
  br i1 %143, label %149, label %144

144:                                              ; preds = %131
  %145 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %146 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %145, i64 0, i32 4
  %147 = load i32, i32* %146, align 8
  %148 = load i8, i8* %68, align 8
  br label %149

149:                                              ; preds = %131, %144
  %150 = phi i8 [ %148, %144 ], [ %136, %131 ]
  %151 = phi i32 [ %147, %144 ], [ 0, %131 ]
  %152 = icmp eq i64* %3, null
  %153 = xor i1 %152, true
  %154 = icmp eq i8 %150, 3
  br i1 %154, label %155, label %161

155:                                              ; preds = %149
  %156 = tail call %"class.v8::internal::ModuleScope"* @_ZN2v88internal5Scope13AsModuleScopeEv(%"class.v8::internal::Scope"* %2) #9
  %157 = getelementptr inbounds %"class.v8::internal::ModuleScope", %"class.v8::internal::ModuleScope"* %156, i64 0, i32 1
  %158 = load %"class.v8::internal::SourceTextModuleDescriptor"*, %"class.v8::internal::SourceTextModuleDescriptor"** %157, align 8
  %159 = tail call i64* @_ZN2v88internal20SourceTextModuleInfo3NewINS0_7IsolateEEENS0_6HandleIS1_EEPT_PNS0_4ZoneEPNS0_26SourceTextModuleDescriptorE(%"class.v8::internal::Isolate"* %0, %"class.v8::internal::Zone"* %1, %"class.v8::internal::SourceTextModuleDescriptor"* %158)
  %160 = load i8, i8* %68, align 8
  br label %161

161:                                              ; preds = %155, %149
  %162 = phi i8 [ %160, %155 ], [ %150, %149 ]
  %163 = phi i64* [ %159, %155 ], [ null, %149 ]
  %164 = shl i32 %57, 1
  %165 = add nsw i32 %164, 3
  %166 = zext i1 %134 to i32
  %167 = zext i1 %140 to i32
  %168 = select i1 %135, i32 2, i32 0
  %169 = zext i1 %70 to i32
  %170 = select i1 %138, i32 2, i32 0
  %171 = zext i1 %153 to i32
  %172 = icmp eq i8 %162, 3
  %173 = mul nsw i32 %10, 3
  %174 = add nsw i32 %173, 2
  %175 = select i1 %172, i32 %174, i32 0
  %176 = add i32 %165, %171
  %177 = add i32 %176, %167
  %178 = add i32 %177, %169
  %179 = add i32 %178, %166
  %180 = add i32 %179, %168
  %181 = add i32 %180, %170
  %182 = add i32 %181, %175
  %183 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %184 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE12NewScopeInfoEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %183, i32 %182, i8 zeroext 1) #9
  %185 = load i64, i64* %184, align 8
  %186 = and i64 %185, -262144
  %187 = or i64 %186, 8
  %188 = inttoptr i64 %187 to i64*
  %189 = load i64, i64* %188, align 8
  %190 = and i64 %189, 262144
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %192, label %196

192:                                              ; preds = %161
  %193 = and i64 %189, 24
  %194 = icmp eq i64 %193, 0
  %195 = select i1 %194, i32 4, i32 0
  br label %196

196:                                              ; preds = %161, %192
  %197 = phi i32 [ 4, %161 ], [ %195, %192 ]
  %198 = load i8, i8* %68, align 8
  %199 = icmp eq i8 %198, 2
  br i1 %199, label %200, label %208

200:                                              ; preds = %196
  %201 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %202 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %201, i64 0, i32 1
  %203 = load i16, i16* %202, align 1
  %204 = and i16 %203, 1
  %205 = icmp ne i16 %204, 0
  %206 = and i16 %203, 2
  %207 = icmp ne i16 %206, 0
  br label %208

208:                                              ; preds = %200, %196
  %209 = phi i1 [ %207, %200 ], [ false, %196 ]
  %210 = phi i1 [ %205, %200 ], [ false, %196 ]
  %211 = load i16, i16* %12, align 1
  %212 = and i16 %211, 256
  %213 = icmp eq i16 %212, 0
  br i1 %213, label %224, label %214

214:                                              ; preds = %208
  %215 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %216 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %215, i64 0, i32 2
  %217 = load i8, i8* %216, align 1
  %218 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %219 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %218, i64 0, i32 0, i32 13
  %220 = load i16, i16* %219, align 1
  %221 = and i16 %220, 4
  %222 = icmp ne i16 %221, 0
  %223 = load i16, i16* %12, align 1
  br label %224

224:                                              ; preds = %208, %214
  %225 = phi i16 [ %223, %214 ], [ %211, %208 ]
  %226 = phi i8 [ %217, %214 ], [ 0, %208 ]
  %227 = phi i1 [ %222, %214 ], [ false, %208 ]
  %228 = load i8, i8* %68, align 8
  %229 = zext i8 %228 to i32
  %230 = zext i1 %227 to i32
  %231 = shl nuw nsw i32 %230, 4
  %232 = and i16 %225, 1
  %233 = shl nuw nsw i16 %232, 5
  %234 = zext i16 %233 to i32
  %235 = lshr i16 %225, 2
  %236 = and i16 %235, 64
  %237 = zext i16 %236 to i32
  %238 = shl nuw nsw i32 %56, 7
  %239 = zext i1 %132 to i32
  %240 = shl nuw nsw i32 %239, 9
  %241 = shl nuw nsw i32 %166, 10
  %242 = zext i1 %67 to i32
  %243 = shl nuw nsw i32 %242, 11
  %244 = shl i32 %133, 12
  %245 = shl nuw nsw i32 %169, 14
  %246 = zext i1 %209 to i32
  %247 = shl nuw nsw i32 %246, 15
  %248 = zext i1 %210 to i32
  %249 = shl nuw nsw i32 %248, 16
  %250 = zext i8 %226 to i32
  %251 = shl nuw nsw i32 %250, 17
  %252 = shl nuw nsw i32 %171, 22
  %253 = lshr i16 %225, 5
  %254 = and i16 %253, 1
  %255 = zext i16 %254 to i32
  %256 = shl nuw nsw i32 %255, 23
  switch i8 %228, label %257 [
    i8 2, label %266
    i8 4, label %266
  ]

257:                                              ; preds = %224
  %258 = icmp ne i16 %232, 0
  %259 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %2, i64 0, i32 0
  %260 = load %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"** %259, align 8
  %261 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %260, i64 0, i32 13
  %262 = load i16, i16* %261, align 1
  %263 = and i16 %262, 1
  %264 = icmp eq i16 %263, 0
  %265 = and i1 %258, %264
  br label %266

266:                                              ; preds = %224, %224, %257
  %267 = phi i1 [ %265, %257 ], [ false, %224 ], [ false, %224 ]
  %268 = zext i1 %267 to i32
  %269 = shl nuw nsw i32 %268, 24
  %270 = lshr i16 %225, 9
  %271 = and i16 %270, 1
  %272 = zext i16 %271 to i32
  %273 = shl nuw nsw i32 %272, 25
  switch i8 %228, label %274 [
    i8 3, label %277
    i8 7, label %277
  ]

274:                                              ; preds = %266
  %275 = and i16 %225, 4
  %276 = icmp ne i16 %275, 0
  br label %277

277:                                              ; preds = %266, %266, %274
  %278 = phi i1 [ %276, %274 ], [ true, %266 ], [ true, %266 ]
  %279 = zext i1 %278 to i32
  %280 = shl nuw nsw i32 %279, 26
  %281 = lshr i16 %225, 11
  %282 = and i16 %281, 1
  %283 = zext i16 %282 to i32
  %284 = shl nuw nsw i32 %283, 27
  %285 = or i32 %238, %252
  %286 = or i32 %285, %243
  %287 = or i32 %286, %245
  %288 = or i32 %287, %240
  %289 = or i32 %288, %244
  %290 = or i32 %289, %241
  %291 = or i32 %290, %247
  %292 = or i32 %291, %249
  %293 = or i32 %292, %251
  %294 = or i32 %293, %229
  %295 = or i32 %294, %231
  %296 = or i32 %295, %234
  %297 = or i32 %296, %237
  %298 = or i32 %297, %256
  %299 = or i32 %298, %273
  %300 = or i32 %299, %284
  %301 = or i32 %300, %269
  %302 = or i32 %301, %280
  %303 = shl i32 %302, 1
  %304 = add i64 %185, 3
  %305 = inttoptr i64 %304 to i32*
  store atomic volatile i32 %303, i32* %305 monotonic, align 4
  %306 = shl i32 %151, 1
  %307 = add i64 %185, 7
  %308 = inttoptr i64 %307 to i32*
  store atomic volatile i32 %306, i32* %308 monotonic, align 4
  %309 = add i64 %185, 11
  %310 = inttoptr i64 %309 to i32*
  store atomic volatile i32 %164, i32* %310 monotonic, align 4
  %311 = load i8, i8* %68, align 8
  %312 = icmp eq i8 %311, 3
  br i1 %312, label %313, label %360

313:                                              ; preds = %277
  %314 = shl i32 %57, 3
  %315 = add i32 %314, 16
  %316 = load i32, i32* %305, align 4, !noalias !3
  %317 = lshr i32 %316, 9
  %318 = and i32 %317, 4
  %319 = or i32 %318, %315
  %320 = lshr i32 %316, 8
  %321 = and i32 %320, 3
  %322 = add nsw i32 %321, -1
  %323 = icmp ult i32 %322, 2
  %324 = zext i1 %323 to i32
  %325 = and i32 %316, 24576
  %326 = icmp ne i32 %325, 0
  %327 = zext i1 %326 to i32
  %328 = shl nuw nsw i32 %327, 3
  %329 = lshr i32 %316, 13
  %330 = and i32 %329, 4
  %331 = lshr i32 %316, 1
  %332 = and i32 %331, 15
  switch i32 %332, label %333 [
    i32 2, label %337
    i32 4, label %337
    i32 1, label %337
  ]

333:                                              ; preds = %313
  %334 = icmp eq i32 %332, 3
  %335 = zext i1 %334 to i32
  %336 = shl nuw nsw i32 %335, 3
  br label %337

337:                                              ; preds = %313, %313, %313, %333
  %338 = phi i32 [ 8, %313 ], [ %336, %333 ], [ 8, %313 ], [ 8, %313 ]
  %339 = lshr i32 %316, 21
  %340 = and i32 %339, 4
  %341 = lshr i32 %316, 27
  %342 = and i32 %341, 4
  %343 = and i32 %316, 30
  %344 = icmp eq i32 %343, 6
  %345 = zext i1 %344 to i32
  %346 = add nuw nsw i32 %324, %345
  %347 = shl nuw nsw i32 %346, 2
  %348 = add nuw nsw i32 %340, %330
  %349 = add nuw nsw i32 %348, %342
  %350 = add i32 %349, %319
  %351 = add i32 %350, %328
  %352 = add i32 %351, %347
  %353 = add i32 %352, %338
  %354 = shl i32 %10, 1
  %355 = add i64 %185, -1
  %356 = sext i32 %353 to i64
  %357 = add i64 %355, %356
  %358 = inttoptr i64 %357 to i32*
  store atomic volatile i32 %354, i32* %358 monotonic, align 4
  %359 = load i32, i32* %310, align 4, !noalias !14
  br label %360

360:                                              ; preds = %337, %277
  %361 = phi i32 [ %359, %337 ], [ %164, %277 ]
  %362 = add nsw i32 %57, 3
  %363 = lshr i32 %361, 1
  %364 = shl i32 %363, 3
  %365 = add i32 %364, 16
  %366 = load i32, i32* %305, align 4, !noalias !35
  %367 = lshr i32 %366, 9
  %368 = and i32 %367, 4
  %369 = or i32 %365, %368
  %370 = lshr i32 %366, 8
  %371 = and i32 %370, 3
  %372 = add nsw i32 %371, -1
  %373 = icmp ult i32 %372, 2
  %374 = zext i1 %373 to i32
  %375 = and i32 %366, 24576
  %376 = icmp ne i32 %375, 0
  %377 = zext i1 %376 to i32
  %378 = shl nuw nsw i32 %377, 3
  %379 = lshr i32 %366, 13
  %380 = and i32 %379, 4
  %381 = lshr i32 %366, 1
  %382 = and i32 %381, 15
  switch i32 %382, label %383 [
    i32 2, label %387
    i32 4, label %387
    i32 1, label %387
  ]

383:                                              ; preds = %360
  %384 = icmp eq i32 %382, 3
  %385 = zext i1 %384 to i32
  %386 = shl nuw nsw i32 %385, 3
  br label %387

387:                                              ; preds = %360, %360, %360, %383
  %388 = phi i32 [ 8, %360 ], [ %386, %383 ], [ 8, %360 ], [ 8, %360 ]
  %389 = load %"class.v8::internal::Variable"**, %"class.v8::internal::Variable"*** %6, align 8
  %390 = icmp eq %"class.v8::internal::Variable"** %5, %389
  br i1 %390, label %413, label %391

391:                                              ; preds = %387
  %392 = add nsw i32 %380, -4
  %393 = lshr i32 %366, 21
  %394 = and i32 %393, 4
  %395 = add nsw i32 %392, %394
  %396 = lshr i32 %366, 27
  %397 = and i32 %396, 4
  %398 = add nsw i32 %395, %397
  %399 = add i32 %398, %369
  %400 = add i32 %399, %378
  %401 = and i32 %366, 30
  %402 = icmp eq i32 %401, 6
  %403 = zext i1 %402 to i32
  %404 = add nuw nsw i32 %374, %403
  %405 = shl nuw nsw i32 %404, 2
  %406 = add i32 %400, %405
  %407 = add i32 %406, %388
  %408 = sdiv i32 %407, 4
  %409 = add nsw i32 %408, 1
  %410 = icmp eq i32 %197, 0
  %411 = or i64 %186, 16
  %412 = inttoptr i64 %411 to %"class.v8::internal::Heap"**
  br label %422

413:                                              ; preds = %560, %387
  %414 = load i16, i16* %12, align 1
  %415 = and i16 %414, 256
  %416 = icmp eq i16 %415, 0
  br i1 %416, label %686, label %417

417:                                              ; preds = %413
  %418 = icmp sgt i32 %151, 0
  %419 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  br i1 %418, label %420, label %565

420:                                              ; preds = %417
  %421 = zext i32 %151 to i64
  br label %571

422:                                              ; preds = %391, %560
  %423 = phi i32 [ %409, %391 ], [ %561, %560 ]
  %424 = phi %"class.v8::internal::Variable"** [ %5, %391 ], [ %563, %560 ]
  %425 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %424, align 8
  %426 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %425, i64 0, i32 6
  %427 = load i16, i16* %426, align 8
  %428 = lshr i16 %427, 7
  %429 = trunc i16 %428 to i8
  %430 = and i8 %429, 7
  switch i8 %430, label %560 [
    i8 3, label %431
    i8 6, label %431
    i8 5, label %497
  ]

431:                                              ; preds = %422, %422
  %432 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %425, i64 0, i32 4
  %433 = load i32, i32* %432, align 8
  %434 = load i8, i8* %68, align 8
  switch i8 %434, label %435 [
    i8 3, label %439
    i8 7, label %439
  ]

435:                                              ; preds = %431
  %436 = load i16, i16* %12, align 1
  %437 = and i16 %436, 4
  %438 = icmp eq i16 %437, 0
  br i1 %438, label %440, label %439

439:                                              ; preds = %435, %431, %431
  br label %440

440:                                              ; preds = %435, %439
  %441 = phi i32 [ 3, %439 ], [ 2, %435 ]
  %442 = sub nsw i32 %433, %441
  %443 = and i16 %427, 15
  %444 = lshr i16 %427, 8
  %445 = and i16 %444, 16
  %446 = or i16 %445, %443
  %447 = lshr i16 %427, 9
  %448 = and i16 %447, 32
  %449 = or i16 %446, %448
  %450 = zext i16 %449 to i32
  %451 = lshr i16 %427, 15
  %452 = zext i16 %451 to i32
  %453 = shl nuw nsw i32 %452, 22
  %454 = or i32 %453, %450
  %455 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %425, i64 0, i32 1
  %456 = bitcast %"class.v8::internal::AstRawString"** %455 to i64***
  %457 = load i64**, i64*** %456, align 8
  %458 = load i64*, i64** %457, align 8
  %459 = load i64, i64* %458, align 8
  %460 = shl i32 %442, 2
  %461 = add i32 %460, 12
  %462 = or i32 %461, 3
  %463 = sext i32 %462 to i64
  %464 = add i64 %185, %463
  %465 = inttoptr i64 %464 to i32*
  %466 = trunc i64 %459 to i32
  store atomic volatile i32 %466, i32* %465 monotonic, align 4
  %467 = and i64 %459, 1
  %468 = icmp eq i64 %467, 0
  %469 = or i1 %410, %468
  br i1 %469, label %488, label %470

470:                                              ; preds = %440
  %471 = load i64, i64* %188, align 8
  %472 = and i64 %471, 262144
  %473 = icmp eq i64 %472, 0
  br i1 %473, label %476, label %474

474:                                              ; preds = %470
  %475 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %412, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %475, i64 %185, i64 %464, i64 %459) #9
  br label %476

476:                                              ; preds = %470, %474
  %477 = and i64 %459, -262144
  %478 = or i64 %477, 8
  %479 = inttoptr i64 %478 to i64*
  %480 = load i64, i64* %479, align 8
  %481 = and i64 %480, 24
  %482 = icmp eq i64 %481, 0
  br i1 %482, label %488, label %483

483:                                              ; preds = %476
  %484 = load i64, i64* %188, align 8
  %485 = and i64 %484, 24
  %486 = icmp eq i64 %485, 0
  br i1 %486, label %487, label %488

487:                                              ; preds = %483
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %185, i64 %464, i64 %459) #9
  br label %488

488:                                              ; preds = %440, %476, %483, %487
  %489 = add nsw i32 %442, %362
  %490 = shl nuw nsw i32 %454, 1
  %491 = or i32 %490, 8388480
  %492 = shl i32 %489, 2
  %493 = or i32 %492, 3
  %494 = sext i32 %493 to i64
  %495 = add i64 %185, %494
  %496 = inttoptr i64 %495 to i32*
  store atomic volatile i32 %491, i32* %496 monotonic, align 4
  br label %560

497:                                              ; preds = %422
  %498 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %425, i64 0, i32 1
  %499 = bitcast %"class.v8::internal::AstRawString"** %498 to i64***
  %500 = load i64**, i64*** %499, align 8
  %501 = load i64*, i64** %500, align 8
  %502 = load i64, i64* %501, align 8
  %503 = shl i32 %423, 2
  %504 = or i32 %503, 3
  %505 = sext i32 %504 to i64
  %506 = add i64 %185, %505
  %507 = inttoptr i64 %506 to i32*
  %508 = trunc i64 %502 to i32
  store atomic volatile i32 %508, i32* %507 monotonic, align 4
  %509 = and i64 %502, 1
  %510 = icmp eq i64 %509, 0
  %511 = or i1 %410, %510
  br i1 %511, label %530, label %512

512:                                              ; preds = %497
  %513 = load i64, i64* %188, align 8
  %514 = and i64 %513, 262144
  %515 = icmp eq i64 %514, 0
  br i1 %515, label %518, label %516

516:                                              ; preds = %512
  %517 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %412, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %517, i64 %185, i64 %506, i64 %502) #9
  br label %518

518:                                              ; preds = %512, %516
  %519 = and i64 %502, -262144
  %520 = or i64 %519, 8
  %521 = inttoptr i64 %520 to i64*
  %522 = load i64, i64* %521, align 8
  %523 = and i64 %522, 24
  %524 = icmp eq i64 %523, 0
  br i1 %524, label %530, label %525

525:                                              ; preds = %518
  %526 = load i64, i64* %188, align 8
  %527 = and i64 %526, 24
  %528 = icmp eq i64 %527, 0
  br i1 %528, label %529, label %530

529:                                              ; preds = %525
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %185, i64 %506, i64 %502) #9
  br label %530

530:                                              ; preds = %497, %518, %525, %529
  %531 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %425, i64 0, i32 4
  %532 = load i32, i32* %531, align 8
  %533 = shl i32 %532, 1
  %534 = add i32 %503, 4
  %535 = or i32 %534, 3
  %536 = sext i32 %535 to i64
  %537 = add i64 %185, %536
  %538 = inttoptr i64 %537 to i32*
  store atomic volatile i32 %533, i32* %538 monotonic, align 4
  %539 = load i16, i16* %426, align 8
  %540 = and i16 %539, 15
  %541 = lshr i16 %539, 8
  %542 = and i16 %541, 16
  %543 = or i16 %542, %540
  %544 = lshr i16 %539, 9
  %545 = and i16 %544, 32
  %546 = or i16 %543, %545
  %547 = zext i16 %546 to i32
  %548 = lshr i16 %539, 15
  %549 = zext i16 %548 to i32
  %550 = shl nuw nsw i32 %549, 22
  %551 = or i32 %550, %547
  %552 = shl nuw nsw i32 %551, 1
  %553 = or i32 %552, 8388480
  %554 = add i32 %503, 8
  %555 = or i32 %554, 3
  %556 = sext i32 %555 to i64
  %557 = add i64 %185, %556
  %558 = inttoptr i64 %557 to i32*
  store atomic volatile i32 %553, i32* %558 monotonic, align 4
  %559 = add nsw i32 %423, 3
  br label %560

560:                                              ; preds = %422, %530, %488
  %561 = phi i32 [ %423, %422 ], [ %559, %530 ], [ %423, %488 ]
  %562 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %424, align 8
  %563 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %562, i64 0, i32 3
  %564 = icmp eq %"class.v8::internal::Variable"** %563, %389
  br i1 %564, label %413, label %422

565:                                              ; preds = %605, %417
  %566 = phi %"class.v8::internal::DeclarationScope"* [ %419, %417 ], [ %607, %605 ]
  %567 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %566, i64 0, i32 1
  %568 = load i16, i16* %567, align 1
  %569 = and i16 %568, 4096
  %570 = icmp eq i16 %569, 0
  br i1 %570, label %686, label %609

571:                                              ; preds = %605, %420
  %572 = phi i64 [ 0, %420 ], [ %606, %605 ]
  %573 = phi %"class.v8::internal::DeclarationScope"* [ %419, %420 ], [ %607, %605 ]
  %574 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %573, i64 0, i32 6, i32 0
  %575 = load %"class.v8::internal::Variable"**, %"class.v8::internal::Variable"*** %574, align 8
  %576 = getelementptr inbounds %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %575, i64 %572
  %577 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %576, align 8
  %578 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %577, i64 0, i32 6
  %579 = load i16, i16* %578, align 8
  %580 = and i16 %579, 896
  %581 = icmp eq i16 %580, 384
  br i1 %581, label %582, label %605

582:                                              ; preds = %571
  %583 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %577, i64 0, i32 4
  %584 = load i32, i32* %583, align 8
  %585 = load i8, i8* %68, align 8
  switch i8 %585, label %586 [
    i8 3, label %590
    i8 7, label %590
  ]

586:                                              ; preds = %582
  %587 = load i16, i16* %12, align 1
  %588 = and i16 %587, 4
  %589 = icmp eq i16 %588, 0
  br i1 %589, label %591, label %590

590:                                              ; preds = %586, %582, %582
  br label %591

591:                                              ; preds = %586, %590
  %592 = phi i32 [ -3, %590 ], [ -2, %586 ]
  %593 = add i32 %584, %362
  %594 = add i32 %593, %592
  %595 = shl i32 %594, 2
  %596 = or i32 %595, 3
  %597 = sext i32 %596 to i64
  %598 = add i64 %185, %597
  %599 = inttoptr i64 %598 to i32*
  %600 = load atomic i32, i32* %599 monotonic, align 4
  %601 = and i32 %600, -8388482
  %602 = trunc i64 %572 to i32
  %603 = shl i32 %602, 7
  %604 = or i32 %601, %603
  store atomic volatile i32 %604, i32* %599 monotonic, align 4
  br label %605

605:                                              ; preds = %571, %591
  %606 = add nuw nsw i64 %572, 1
  %607 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %608 = icmp eq i64 %606, %421
  br i1 %608, label %565, label %571

609:                                              ; preds = %565
  %610 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %611 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %610, i64 0, i32 8
  %612 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %611, align 8
  %613 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %612, i64 0, i32 6
  %614 = load i16, i16* %613, align 8
  %615 = and i16 %614, 896
  %616 = icmp eq i16 %615, 384
  br i1 %616, label %617, label %686

617:                                              ; preds = %609
  %618 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %612, i64 0, i32 4
  %619 = load i32, i32* %618, align 8
  %620 = load i8, i8* %68, align 8
  switch i8 %620, label %621 [
    i8 3, label %625
    i8 7, label %625
  ]

621:                                              ; preds = %617
  %622 = load i16, i16* %12, align 1
  %623 = and i16 %622, 4
  %624 = icmp eq i16 %623, 0
  br i1 %624, label %626, label %625

625:                                              ; preds = %621, %617, %617
  br label %626

626:                                              ; preds = %621, %625
  %627 = phi i32 [ 3, %625 ], [ 2, %621 ]
  %628 = sub nsw i32 %619, %627
  %629 = and i16 %614, 15
  %630 = lshr i16 %614, 8
  %631 = and i16 %630, 16
  %632 = or i16 %631, %629
  %633 = lshr i16 %614, 9
  %634 = and i16 %633, 32
  %635 = or i16 %632, %634
  %636 = zext i16 %635 to i32
  %637 = lshr i16 %614, 15
  %638 = zext i16 %637 to i32
  %639 = shl nuw nsw i32 %638, 22
  %640 = or i32 %639, %636
  %641 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %612, i64 0, i32 1
  %642 = bitcast %"class.v8::internal::AstRawString"** %641 to i64***
  %643 = load i64**, i64*** %642, align 8
  %644 = load i64*, i64** %643, align 8
  %645 = load i64, i64* %644, align 8
  %646 = shl i32 %628, 2
  %647 = add i32 %646, 12
  %648 = or i32 %647, 3
  %649 = sext i32 %648 to i64
  %650 = add i64 %185, %649
  %651 = inttoptr i64 %650 to i32*
  %652 = trunc i64 %645 to i32
  store atomic volatile i32 %652, i32* %651 monotonic, align 4
  %653 = icmp eq i32 %197, 0
  %654 = and i64 %645, 1
  %655 = icmp eq i64 %654, 0
  %656 = or i1 %653, %655
  br i1 %656, label %677, label %657

657:                                              ; preds = %626
  %658 = load i64, i64* %188, align 8
  %659 = and i64 %658, 262144
  %660 = icmp eq i64 %659, 0
  br i1 %660, label %665, label %661

661:                                              ; preds = %657
  %662 = or i64 %186, 16
  %663 = inttoptr i64 %662 to %"class.v8::internal::Heap"**
  %664 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %663, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %664, i64 %185, i64 %650, i64 %645) #9
  br label %665

665:                                              ; preds = %657, %661
  %666 = and i64 %645, -262144
  %667 = or i64 %666, 8
  %668 = inttoptr i64 %667 to i64*
  %669 = load i64, i64* %668, align 8
  %670 = and i64 %669, 24
  %671 = icmp eq i64 %670, 0
  br i1 %671, label %677, label %672

672:                                              ; preds = %665
  %673 = load i64, i64* %188, align 8
  %674 = and i64 %673, 24
  %675 = icmp eq i64 %674, 0
  br i1 %675, label %676, label %677

676:                                              ; preds = %672
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %185, i64 %650, i64 %645) #9
  br label %677

677:                                              ; preds = %626, %665, %672, %676
  %678 = add nsw i32 %628, %362
  %679 = shl nuw nsw i32 %640, 1
  %680 = or i32 %679, 8388480
  %681 = shl i32 %678, 2
  %682 = or i32 %681, 3
  %683 = sext i32 %682 to i64
  %684 = add i64 %185, %683
  %685 = inttoptr i64 %684 to i32*
  store atomic volatile i32 %680, i32* %685 monotonic, align 4
  br label %686

686:                                              ; preds = %565, %413, %609, %677
  br i1 %134, label %687, label %700

687:                                              ; preds = %686
  %688 = tail call %"class.v8::internal::ClassScope"* @_ZN2v88internal5Scope12AsClassScopeEv(%"class.v8::internal::Scope"* %2) #9
  %689 = getelementptr inbounds %"class.v8::internal::ClassScope", %"class.v8::internal::ClassScope"* %688, i64 0, i32 3
  %690 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %689, align 8
  %691 = add nsw i32 %164, 4
  %692 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %690, i64 0, i32 4
  %693 = load i32, i32* %692, align 8
  %694 = shl i32 %693, 1
  %695 = shl i32 %165, 2
  %696 = or i32 %695, 3
  %697 = sext i32 %696 to i64
  %698 = add i64 %185, %697
  %699 = inttoptr i64 %698 to i32*
  store atomic volatile i32 %694, i32* %699 monotonic, align 4
  br label %700

700:                                              ; preds = %687, %686
  %701 = phi i32 [ %691, %687 ], [ %165, %686 ]
  br i1 %140, label %702, label %715

702:                                              ; preds = %700
  %703 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %704 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %703, i64 0, i32 8
  %705 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %704, align 8
  %706 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %705, i64 0, i32 4
  %707 = load i32, i32* %706, align 8
  %708 = add nsw i32 %701, 1
  %709 = shl i32 %707, 1
  %710 = shl i32 %701, 2
  %711 = or i32 %710, 3
  %712 = sext i32 %711 to i64
  %713 = add i64 %185, %712
  %714 = inttoptr i64 %713 to i32*
  store atomic volatile i32 %709, i32* %714 monotonic, align 4
  br label %715

715:                                              ; preds = %702, %700
  %716 = phi i32 [ %708, %702 ], [ %701, %700 ]
  br i1 %135, label %717, label %771

717:                                              ; preds = %715
  %718 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %719 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %718, i64 0, i32 9
  %720 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %719, align 8
  %721 = icmp eq %"class.v8::internal::Variable"* %720, null
  br i1 %721, label %731, label %722

722:                                              ; preds = %717
  %723 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %720, i64 0, i32 4
  %724 = load i32, i32* %723, align 8
  %725 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %720, i64 0, i32 1
  %726 = bitcast %"class.v8::internal::AstRawString"** %725 to i64***
  %727 = load i64**, i64*** %726, align 8
  %728 = load i64*, i64** %727, align 8
  %729 = load i64, i64* %728, align 8
  %730 = shl i32 %724, 1
  br label %731

731:                                              ; preds = %717, %722
  %732 = phi i32 [ %730, %722 ], [ -2, %717 ]
  %733 = phi i64 [ %729, %722 ], [ 0, %717 ]
  %734 = shl i32 %716, 2
  %735 = or i32 %734, 3
  %736 = sext i32 %735 to i64
  %737 = add i64 %185, %736
  %738 = inttoptr i64 %737 to i32*
  %739 = trunc i64 %733 to i32
  store atomic volatile i32 %739, i32* %738 monotonic, align 4
  %740 = icmp eq i32 %197, 0
  %741 = and i64 %733, 1
  %742 = icmp eq i64 %741, 0
  %743 = or i1 %740, %742
  br i1 %743, label %764, label %744

744:                                              ; preds = %731
  %745 = load i64, i64* %188, align 8
  %746 = and i64 %745, 262144
  %747 = icmp eq i64 %746, 0
  br i1 %747, label %752, label %748

748:                                              ; preds = %744
  %749 = or i64 %186, 16
  %750 = inttoptr i64 %749 to %"class.v8::internal::Heap"**
  %751 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %750, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %751, i64 %185, i64 %737, i64 %733) #9
  br label %752

752:                                              ; preds = %744, %748
  %753 = and i64 %733, -262144
  %754 = or i64 %753, 8
  %755 = inttoptr i64 %754 to i64*
  %756 = load i64, i64* %755, align 8
  %757 = and i64 %756, 24
  %758 = icmp eq i64 %757, 0
  br i1 %758, label %764, label %759

759:                                              ; preds = %752
  %760 = load i64, i64* %188, align 8
  %761 = and i64 %760, 24
  %762 = icmp eq i64 %761, 0
  br i1 %762, label %763, label %764

763:                                              ; preds = %759
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %185, i64 %737, i64 %733) #9
  br label %764

764:                                              ; preds = %731, %752, %759, %763
  %765 = add nsw i32 %716, 2
  %766 = add i32 %734, 4
  %767 = or i32 %766, 3
  %768 = sext i32 %767 to i64
  %769 = add i64 %185, %768
  %770 = inttoptr i64 %769 to i32*
  store atomic volatile i32 %732, i32* %770 monotonic, align 4
  br label %771

771:                                              ; preds = %764, %715
  %772 = phi i32 [ %765, %764 ], [ %716, %715 ]
  %773 = add nsw i32 %772, %169
  br i1 %138, label %774, label %792

774:                                              ; preds = %771
  %775 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %2, i64 0, i32 8
  %776 = load i32, i32* %775, align 8
  %777 = shl i32 %776, 1
  %778 = shl i32 %773, 2
  %779 = or i32 %778, 3
  %780 = sext i32 %779 to i64
  %781 = add i64 %185, %780
  %782 = inttoptr i64 %781 to i32*
  store atomic volatile i32 %777, i32* %782 monotonic, align 4
  %783 = add nsw i32 %773, 2
  %784 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %2, i64 0, i32 9
  %785 = load i32, i32* %784, align 4
  %786 = shl i32 %785, 1
  %787 = add i32 %778, 4
  %788 = or i32 %787, 3
  %789 = sext i32 %788 to i64
  %790 = add i64 %185, %789
  %791 = inttoptr i64 %790 to i32*
  store atomic volatile i32 %786, i32* %791 monotonic, align 4
  br label %792

792:                                              ; preds = %774, %771
  %793 = phi i32 [ %783, %774 ], [ %773, %771 ]
  br i1 %152, label %827, label %794

794:                                              ; preds = %792
  %795 = add nsw i32 %793, 1
  %796 = load i64, i64* %3, align 8
  %797 = shl i32 %793, 2
  %798 = or i32 %797, 3
  %799 = sext i32 %798 to i64
  %800 = add i64 %185, %799
  %801 = inttoptr i64 %800 to i32*
  %802 = trunc i64 %796 to i32
  store atomic volatile i32 %802, i32* %801 monotonic, align 4
  %803 = icmp eq i32 %197, 0
  %804 = and i64 %796, 1
  %805 = icmp eq i64 %804, 0
  %806 = or i1 %803, %805
  br i1 %806, label %827, label %807

807:                                              ; preds = %794
  %808 = load i64, i64* %188, align 8
  %809 = and i64 %808, 262144
  %810 = icmp eq i64 %809, 0
  br i1 %810, label %815, label %811

811:                                              ; preds = %807
  %812 = or i64 %186, 16
  %813 = inttoptr i64 %812 to %"class.v8::internal::Heap"**
  %814 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %813, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %814, i64 %185, i64 %800, i64 %796) #9
  br label %815

815:                                              ; preds = %807, %811
  %816 = and i64 %796, -262144
  %817 = or i64 %816, 8
  %818 = inttoptr i64 %817 to i64*
  %819 = load i64, i64* %818, align 8
  %820 = and i64 %819, 24
  %821 = icmp eq i64 %820, 0
  br i1 %821, label %827, label %822

822:                                              ; preds = %815
  %823 = load i64, i64* %188, align 8
  %824 = and i64 %823, 24
  %825 = icmp eq i64 %824, 0
  br i1 %825, label %826, label %827

826:                                              ; preds = %822
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %185, i64 %800, i64 %796) #9
  br label %827

827:                                              ; preds = %794, %826, %822, %815, %792
  %828 = phi i32 [ %793, %792 ], [ %795, %794 ], [ %795, %815 ], [ %795, %822 ], [ %795, %826 ]
  %829 = load i8, i8* %68, align 8
  %830 = icmp eq i8 %829, 3
  br i1 %830, label %831, label %861

831:                                              ; preds = %827
  %832 = load i64, i64* %163, align 8
  %833 = shl i32 %828, 2
  %834 = or i32 %833, 3
  %835 = sext i32 %834 to i64
  %836 = add i64 %185, %835
  %837 = inttoptr i64 %836 to i32*
  %838 = trunc i64 %832 to i32
  store atomic volatile i32 %838, i32* %837 monotonic, align 4
  %839 = and i64 %832, 1
  %840 = icmp eq i64 %839, 0
  br i1 %840, label %861, label %841

841:                                              ; preds = %831
  %842 = load i64, i64* %188, align 8
  %843 = and i64 %842, 262144
  %844 = icmp eq i64 %843, 0
  br i1 %844, label %849, label %845

845:                                              ; preds = %841
  %846 = or i64 %186, 16
  %847 = inttoptr i64 %846 to %"class.v8::internal::Heap"**
  %848 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %847, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %848, i64 %185, i64 %836, i64 %832) #9
  br label %849

849:                                              ; preds = %845, %841
  %850 = and i64 %832, -262144
  %851 = or i64 %850, 8
  %852 = inttoptr i64 %851 to i64*
  %853 = load i64, i64* %852, align 8
  %854 = and i64 %853, 24
  %855 = icmp eq i64 %854, 0
  br i1 %855, label %861, label %856

856:                                              ; preds = %849
  %857 = load i64, i64* %188, align 8
  %858 = and i64 %857, 24
  %859 = icmp eq i64 %858, 0
  br i1 %859, label %860, label %861

860:                                              ; preds = %856
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %185, i64 %836, i64 %832) #9
  br label %861

861:                                              ; preds = %860, %856, %849, %831, %827
  ret i64* %184
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"*) local_unnamed_addr #2

declare %"class.v8::internal::ClassScope"* @_ZN2v88internal5Scope12AsClassScopeEv(%"class.v8::internal::Scope"*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN2v88internal9ScopeInfo17NeedsPositionInfoENS0_9ScopeTypeE(i8 zeroext) local_unnamed_addr #3 align 2 {
  %2 = add i8 %0, -1
  %3 = icmp ult i8 %2, 4
  ret i1 %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal20SourceTextModuleInfo3NewINS0_7IsolateEEENS0_6HandleIS1_EEPT_PNS0_4ZoneEPNS0_26SourceTextModuleDescriptorE(%"class.v8::internal::Isolate"*, %"class.v8::internal::Zone"*, %"class.v8::internal::SourceTextModuleDescriptor"*) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor", %"class.v8::internal::SourceTextModuleDescriptor"* %2, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i32
  %7 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %8 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %7, i32 %6, i8 zeroext 0) #9
  %9 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor", %"class.v8::internal::SourceTextModuleDescriptor"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor", %"class.v8::internal::SourceTextModuleDescriptor"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %12 = icmp eq %"class.std::__1::__tree_end_node"* %10, %11
  br i1 %12, label %13, label %28

13:                                               ; preds = %98, %3
  %14 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor", %"class.v8::internal::SourceTextModuleDescriptor"* %2, i64 0, i32 1, i32 0
  %15 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor", %"class.v8::internal::SourceTextModuleDescriptor"* %2, i64 0, i32 1, i32 0, i32 0, i32 1
  %16 = bitcast %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.std::__1::vector.1158"* %14 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %17, %19
  %21 = lshr exact i64 %20, 3
  %22 = trunc i64 %21 to i32
  %23 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %7, i32 %22, i8 zeroext 0) #9
  %24 = getelementptr inbounds %"class.std::__1::vector.1158", %"class.std::__1::vector.1158"* %14, i64 0, i32 0, i32 0
  %25 = load %"struct.v8::internal::SourceTextModuleDescriptor::Entry"**, %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*** %24, align 8
  %26 = load %"struct.v8::internal::SourceTextModuleDescriptor::Entry"**, %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*** %15, align 8
  %27 = icmp eq %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** %25, %26
  br i1 %27, label %101, label %116

28:                                               ; preds = %3, %98
  %29 = phi %"class.std::__1::__tree_end_node"* [ %99, %98 ], [ %10, %3 ]
  %30 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %29, i64 4
  %31 = bitcast %"class.std::__1::__tree_end_node"* %30 to %"class.v8::internal::SourceTextModuleDescriptor::AstModuleRequest"**
  %32 = load %"class.v8::internal::SourceTextModuleDescriptor::AstModuleRequest"*, %"class.v8::internal::SourceTextModuleDescriptor::AstModuleRequest"** %31, align 8
  %33 = tail call i64* @_ZNK2v88internal26SourceTextModuleDescriptor16AstModuleRequest9SerializeINS0_7IsolateEEENS0_6HandleINS0_13ModuleRequestEEEPT_(%"class.v8::internal::SourceTextModuleDescriptor::AstModuleRequest"* %32, %"class.v8::internal::Isolate"* %0) #9
  %34 = load i64, i64* %8, align 8
  %35 = load %"class.v8::internal::SourceTextModuleDescriptor::AstModuleRequest"*, %"class.v8::internal::SourceTextModuleDescriptor::AstModuleRequest"** %31, align 8
  %36 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor::AstModuleRequest", %"class.v8::internal::SourceTextModuleDescriptor::AstModuleRequest"* %35, i64 0, i32 3
  %37 = load i32, i32* %36, align 4
  %38 = load i64, i64* %33, align 8
  %39 = shl i32 %37, 2
  %40 = sext i32 %39 to i64
  %41 = add i64 %34, 7
  %42 = add i64 %41, %40
  %43 = inttoptr i64 %42 to i32*
  %44 = trunc i64 %38 to i32
  store atomic volatile i32 %44, i32* %43 monotonic, align 4
  %45 = and i64 %38, 1
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %70, label %47

47:                                               ; preds = %28
  %48 = and i64 %34, -262144
  %49 = or i64 %48, 8
  %50 = inttoptr i64 %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = and i64 %51, 262144
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %58, label %54

54:                                               ; preds = %47
  %55 = or i64 %48, 16
  %56 = inttoptr i64 %55 to %"class.v8::internal::Heap"**
  %57 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %56, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %57, i64 %34, i64 %42, i64 %38) #9
  br label %58

58:                                               ; preds = %54, %47
  %59 = and i64 %38, -262144
  %60 = or i64 %59, 8
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = and i64 %62, 24
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %70, label %65

65:                                               ; preds = %58
  %66 = load i64, i64* %50, align 8
  %67 = and i64 %66, 24
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %65
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %34, i64 %42, i64 %38) #9
  br label %70

70:                                               ; preds = %28, %58, %65, %69
  %71 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %29, i64 1, i32 0
  %72 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %71, align 8
  %73 = icmp eq %"class.std::__1::__tree_node_base"* %72, null
  br i1 %73, label %74, label %82

74:                                               ; preds = %70
  %75 = bitcast %"class.std::__1::__tree_end_node"* %29 to %"class.std::__1::__tree_node_base"*
  %76 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %29, i64 2
  %77 = bitcast %"class.std::__1::__tree_end_node"* %76 to %"class.std::__1::__tree_end_node"**
  %78 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %77, align 8
  %79 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %78, i64 0, i32 0
  %80 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %79, align 8
  %81 = icmp eq %"class.std::__1::__tree_node_base"* %80, %75
  br i1 %81, label %98, label %89

82:                                               ; preds = %70, %82
  %83 = phi %"class.std::__1::__tree_node_base"* [ %85, %82 ], [ %72, %70 ]
  %84 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %83, i64 0, i32 0, i32 0
  %85 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %84, align 8
  %86 = icmp eq %"class.std::__1::__tree_node_base"* %85, null
  br i1 %86, label %87, label %82

87:                                               ; preds = %82
  %88 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %83, i64 0, i32 0
  br label %98

89:                                               ; preds = %74, %89
  %90 = phi %"class.std::__1::__tree_end_node"** [ %93, %89 ], [ %77, %74 ]
  %91 = bitcast %"class.std::__1::__tree_end_node"** %90 to %"class.std::__1::__tree_node_base"**
  %92 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %92, i64 0, i32 2
  %94 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %93, align 8
  %95 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %94, i64 0, i32 0
  %96 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %95, align 8
  %97 = icmp eq %"class.std::__1::__tree_node_base"* %96, %92
  br i1 %97, label %98, label %89

98:                                               ; preds = %89, %74, %87
  %99 = phi %"class.std::__1::__tree_end_node"* [ %88, %87 ], [ %78, %74 ], [ %94, %89 ]
  %100 = icmp eq %"class.std::__1::__tree_end_node"* %99, %11
  br i1 %100, label %13, label %28

101:                                              ; preds = %156, %13
  %102 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor", %"class.v8::internal::SourceTextModuleDescriptor"* %2, i64 0, i32 2, i32 0
  %103 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor", %"class.v8::internal::SourceTextModuleDescriptor"* %2, i64 0, i32 2, i32 0, i32 0, i32 1
  %104 = bitcast %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*** %103 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = bitcast %"class.std::__1::vector.1158"* %102 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = sub i64 %105, %107
  %109 = lshr exact i64 %108, 3
  %110 = trunc i64 %109 to i32
  %111 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %7, i32 %110, i8 zeroext 0) #9
  %112 = getelementptr inbounds %"class.std::__1::vector.1158", %"class.std::__1::vector.1158"* %102, i64 0, i32 0, i32 0
  %113 = load %"struct.v8::internal::SourceTextModuleDescriptor::Entry"**, %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*** %112, align 8
  %114 = load %"struct.v8::internal::SourceTextModuleDescriptor::Entry"**, %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*** %103, align 8
  %115 = icmp eq %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** %113, %114
  br i1 %115, label %159, label %169

116:                                              ; preds = %13, %156
  %117 = phi i64 [ %122, %156 ], [ 0, %13 ]
  %118 = phi %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** [ %157, %156 ], [ %25, %13 ]
  %119 = load %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*, %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** %118, align 8
  %120 = tail call i64* @_ZNK2v88internal26SourceTextModuleDescriptor5Entry9SerializeINS0_7IsolateEEENS0_6HandleINS0_25SourceTextModuleInfoEntryEEEPT_(%"struct.v8::internal::SourceTextModuleDescriptor::Entry"* %119, %"class.v8::internal::Isolate"* %0) #9
  %121 = load i64, i64* %23, align 8
  %122 = add nuw i64 %117, 1
  %123 = load i64, i64* %120, align 8
  %124 = trunc i64 %117 to i32
  %125 = shl i32 %124, 2
  %126 = sext i32 %125 to i64
  %127 = add nsw i64 %126, 7
  %128 = add i64 %127, %121
  %129 = inttoptr i64 %128 to i32*
  %130 = trunc i64 %123 to i32
  store atomic volatile i32 %130, i32* %129 monotonic, align 4
  %131 = and i64 %123, 1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %156, label %133

133:                                              ; preds = %116
  %134 = and i64 %121, -262144
  %135 = or i64 %134, 8
  %136 = inttoptr i64 %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = and i64 %137, 262144
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %144, label %140

140:                                              ; preds = %133
  %141 = or i64 %134, 16
  %142 = inttoptr i64 %141 to %"class.v8::internal::Heap"**
  %143 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %142, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %143, i64 %121, i64 %128, i64 %123) #9
  br label %144

144:                                              ; preds = %140, %133
  %145 = and i64 %123, -262144
  %146 = or i64 %145, 8
  %147 = inttoptr i64 %146 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = and i64 %148, 24
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %156, label %151

151:                                              ; preds = %144
  %152 = load i64, i64* %136, align 8
  %153 = and i64 %152, 24
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %156

155:                                              ; preds = %151
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %121, i64 %128, i64 %123) #9
  br label %156

156:                                              ; preds = %116, %144, %151, %155
  %157 = getelementptr inbounds %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*, %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** %118, i64 1
  %158 = icmp eq %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** %157, %26
  br i1 %158, label %101, label %116

159:                                              ; preds = %209, %101
  %160 = tail call i64* @_ZNK2v88internal26SourceTextModuleDescriptor23SerializeRegularExportsINS0_7IsolateEEENS0_6HandleINS0_10FixedArrayEEEPT_PNS0_4ZoneE(%"class.v8::internal::SourceTextModuleDescriptor"* %2, %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Zone"* %1) #9
  %161 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor", %"class.v8::internal::SourceTextModuleDescriptor"* %2, i64 0, i32 4, i32 0, i32 0, i32 2, i32 0, i32 0
  %162 = load i64, i64* %161, align 8
  %163 = trunc i64 %162 to i32
  %164 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %7, i32 %163, i8 zeroext 0) #9
  %165 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor", %"class.v8::internal::SourceTextModuleDescriptor"* %2, i64 0, i32 4, i32 0, i32 0, i32 0
  %166 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %165, align 8
  %167 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor", %"class.v8::internal::SourceTextModuleDescriptor"* %2, i64 0, i32 4, i32 0, i32 0, i32 1, i32 0, i32 0
  %168 = icmp eq %"class.std::__1::__tree_end_node"* %166, %167
  br i1 %168, label %212, label %369

169:                                              ; preds = %101, %209
  %170 = phi i64 [ %175, %209 ], [ 0, %101 ]
  %171 = phi %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** [ %210, %209 ], [ %113, %101 ]
  %172 = load %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*, %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** %171, align 8
  %173 = tail call i64* @_ZNK2v88internal26SourceTextModuleDescriptor5Entry9SerializeINS0_7IsolateEEENS0_6HandleINS0_25SourceTextModuleInfoEntryEEEPT_(%"struct.v8::internal::SourceTextModuleDescriptor::Entry"* %172, %"class.v8::internal::Isolate"* %0) #9
  %174 = load i64, i64* %111, align 8
  %175 = add nuw i64 %170, 1
  %176 = load i64, i64* %173, align 8
  %177 = trunc i64 %170 to i32
  %178 = shl i32 %177, 2
  %179 = sext i32 %178 to i64
  %180 = add nsw i64 %179, 7
  %181 = add i64 %180, %174
  %182 = inttoptr i64 %181 to i32*
  %183 = trunc i64 %176 to i32
  store atomic volatile i32 %183, i32* %182 monotonic, align 4
  %184 = and i64 %176, 1
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %209, label %186

186:                                              ; preds = %169
  %187 = and i64 %174, -262144
  %188 = or i64 %187, 8
  %189 = inttoptr i64 %188 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = and i64 %190, 262144
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %197, label %193

193:                                              ; preds = %186
  %194 = or i64 %187, 16
  %195 = inttoptr i64 %194 to %"class.v8::internal::Heap"**
  %196 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %195, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %196, i64 %174, i64 %181, i64 %176) #9
  br label %197

197:                                              ; preds = %193, %186
  %198 = and i64 %176, -262144
  %199 = or i64 %198, 8
  %200 = inttoptr i64 %199 to i64*
  %201 = load i64, i64* %200, align 8
  %202 = and i64 %201, 24
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %209, label %204

204:                                              ; preds = %197
  %205 = load i64, i64* %189, align 8
  %206 = and i64 %205, 24
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %208, label %209

208:                                              ; preds = %204
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %174, i64 %181, i64 %176) #9
  br label %209

209:                                              ; preds = %169, %197, %204, %208
  %210 = getelementptr inbounds %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*, %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** %171, i64 1
  %211 = icmp eq %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** %210, %114
  br i1 %211, label %159, label %169

212:                                              ; preds = %439, %159
  %213 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE23NewSourceTextModuleInfoEv(%"class.v8::internal::FactoryBase"* %7) #9
  %214 = load i64, i64* %213, align 8
  %215 = load i64, i64* %8, align 8
  %216 = add i64 %214, 7
  %217 = inttoptr i64 %216 to i32*
  %218 = trunc i64 %215 to i32
  store atomic volatile i32 %218, i32* %217 monotonic, align 4
  %219 = and i64 %215, 1
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %244, label %221

221:                                              ; preds = %212
  %222 = and i64 %214, -262144
  %223 = or i64 %222, 8
  %224 = inttoptr i64 %223 to i64*
  %225 = load i64, i64* %224, align 8
  %226 = and i64 %225, 262144
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %232, label %228

228:                                              ; preds = %221
  %229 = or i64 %222, 16
  %230 = inttoptr i64 %229 to %"class.v8::internal::Heap"**
  %231 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %230, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %231, i64 %214, i64 %216, i64 %215) #9
  br label %232

232:                                              ; preds = %228, %221
  %233 = and i64 %215, -262144
  %234 = or i64 %233, 8
  %235 = inttoptr i64 %234 to i64*
  %236 = load i64, i64* %235, align 8
  %237 = and i64 %236, 24
  %238 = icmp eq i64 %237, 0
  br i1 %238, label %244, label %239

239:                                              ; preds = %232
  %240 = load i64, i64* %224, align 8
  %241 = and i64 %240, 24
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %244

243:                                              ; preds = %239
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %214, i64 %216, i64 %215) #9
  br label %244

244:                                              ; preds = %212, %232, %239, %243
  %245 = load i64, i64* %213, align 8
  %246 = load i64, i64* %23, align 8
  %247 = add i64 %245, 11
  %248 = inttoptr i64 %247 to i32*
  %249 = trunc i64 %246 to i32
  store atomic volatile i32 %249, i32* %248 monotonic, align 4
  %250 = and i64 %246, 1
  %251 = icmp eq i64 %250, 0
  br i1 %251, label %275, label %252

252:                                              ; preds = %244
  %253 = and i64 %245, -262144
  %254 = or i64 %253, 8
  %255 = inttoptr i64 %254 to i64*
  %256 = load i64, i64* %255, align 8
  %257 = and i64 %256, 262144
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %263, label %259

259:                                              ; preds = %252
  %260 = or i64 %253, 16
  %261 = inttoptr i64 %260 to %"class.v8::internal::Heap"**
  %262 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %261, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %262, i64 %245, i64 %247, i64 %246) #9
  br label %263

263:                                              ; preds = %259, %252
  %264 = and i64 %246, -262144
  %265 = or i64 %264, 8
  %266 = inttoptr i64 %265 to i64*
  %267 = load i64, i64* %266, align 8
  %268 = and i64 %267, 24
  %269 = icmp eq i64 %268, 0
  br i1 %269, label %275, label %270

270:                                              ; preds = %263
  %271 = load i64, i64* %255, align 8
  %272 = and i64 %271, 24
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %275

274:                                              ; preds = %270
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %245, i64 %247, i64 %246) #9
  br label %275

275:                                              ; preds = %244, %263, %270, %274
  %276 = load i64, i64* %213, align 8
  %277 = load i64, i64* %160, align 8
  %278 = add i64 %276, 15
  %279 = inttoptr i64 %278 to i32*
  %280 = trunc i64 %277 to i32
  store atomic volatile i32 %280, i32* %279 monotonic, align 4
  %281 = and i64 %277, 1
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %306, label %283

283:                                              ; preds = %275
  %284 = and i64 %276, -262144
  %285 = or i64 %284, 8
  %286 = inttoptr i64 %285 to i64*
  %287 = load i64, i64* %286, align 8
  %288 = and i64 %287, 262144
  %289 = icmp eq i64 %288, 0
  br i1 %289, label %294, label %290

290:                                              ; preds = %283
  %291 = or i64 %284, 16
  %292 = inttoptr i64 %291 to %"class.v8::internal::Heap"**
  %293 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %292, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %293, i64 %276, i64 %278, i64 %277) #9
  br label %294

294:                                              ; preds = %290, %283
  %295 = and i64 %277, -262144
  %296 = or i64 %295, 8
  %297 = inttoptr i64 %296 to i64*
  %298 = load i64, i64* %297, align 8
  %299 = and i64 %298, 24
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %306, label %301

301:                                              ; preds = %294
  %302 = load i64, i64* %286, align 8
  %303 = and i64 %302, 24
  %304 = icmp eq i64 %303, 0
  br i1 %304, label %305, label %306

305:                                              ; preds = %301
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %276, i64 %278, i64 %277) #9
  br label %306

306:                                              ; preds = %275, %294, %301, %305
  %307 = load i64, i64* %213, align 8
  %308 = load i64, i64* %111, align 8
  %309 = add i64 %307, 19
  %310 = inttoptr i64 %309 to i32*
  %311 = trunc i64 %308 to i32
  store atomic volatile i32 %311, i32* %310 monotonic, align 4
  %312 = and i64 %308, 1
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %337, label %314

314:                                              ; preds = %306
  %315 = and i64 %307, -262144
  %316 = or i64 %315, 8
  %317 = inttoptr i64 %316 to i64*
  %318 = load i64, i64* %317, align 8
  %319 = and i64 %318, 262144
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %325, label %321

321:                                              ; preds = %314
  %322 = or i64 %315, 16
  %323 = inttoptr i64 %322 to %"class.v8::internal::Heap"**
  %324 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %323, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %324, i64 %307, i64 %309, i64 %308) #9
  br label %325

325:                                              ; preds = %321, %314
  %326 = and i64 %308, -262144
  %327 = or i64 %326, 8
  %328 = inttoptr i64 %327 to i64*
  %329 = load i64, i64* %328, align 8
  %330 = and i64 %329, 24
  %331 = icmp eq i64 %330, 0
  br i1 %331, label %337, label %332

332:                                              ; preds = %325
  %333 = load i64, i64* %317, align 8
  %334 = and i64 %333, 24
  %335 = icmp eq i64 %334, 0
  br i1 %335, label %336, label %337

336:                                              ; preds = %332
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %307, i64 %309, i64 %308) #9
  br label %337

337:                                              ; preds = %306, %325, %332, %336
  %338 = load i64, i64* %213, align 8
  %339 = load i64, i64* %164, align 8
  %340 = add i64 %338, 23
  %341 = inttoptr i64 %340 to i32*
  %342 = trunc i64 %339 to i32
  store atomic volatile i32 %342, i32* %341 monotonic, align 4
  %343 = and i64 %339, 1
  %344 = icmp eq i64 %343, 0
  br i1 %344, label %368, label %345

345:                                              ; preds = %337
  %346 = and i64 %338, -262144
  %347 = or i64 %346, 8
  %348 = inttoptr i64 %347 to i64*
  %349 = load i64, i64* %348, align 8
  %350 = and i64 %349, 262144
  %351 = icmp eq i64 %350, 0
  br i1 %351, label %356, label %352

352:                                              ; preds = %345
  %353 = or i64 %346, 16
  %354 = inttoptr i64 %353 to %"class.v8::internal::Heap"**
  %355 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %354, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %355, i64 %338, i64 %340, i64 %339) #9
  br label %356

356:                                              ; preds = %352, %345
  %357 = and i64 %339, -262144
  %358 = or i64 %357, 8
  %359 = inttoptr i64 %358 to i64*
  %360 = load i64, i64* %359, align 8
  %361 = and i64 %360, 24
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %368, label %363

363:                                              ; preds = %356
  %364 = load i64, i64* %348, align 8
  %365 = and i64 %364, 24
  %366 = icmp eq i64 %365, 0
  br i1 %366, label %367, label %368

367:                                              ; preds = %363
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %338, i64 %340, i64 %339) #9
  br label %368

368:                                              ; preds = %337, %356, %363, %367
  ret i64* %213

369:                                              ; preds = %159, %439
  %370 = phi i64 [ %377, %439 ], [ 0, %159 ]
  %371 = phi %"class.std::__1::__tree_end_node"* [ %440, %439 ], [ %166, %159 ]
  %372 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %371, i64 5
  %373 = bitcast %"class.std::__1::__tree_end_node"* %372 to %"struct.v8::internal::SourceTextModuleDescriptor::Entry"**
  %374 = load %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*, %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** %373, align 8
  %375 = tail call i64* @_ZNK2v88internal26SourceTextModuleDescriptor5Entry9SerializeINS0_7IsolateEEENS0_6HandleINS0_25SourceTextModuleInfoEntryEEEPT_(%"struct.v8::internal::SourceTextModuleDescriptor::Entry"* %374, %"class.v8::internal::Isolate"* %0) #9
  %376 = load i64, i64* %164, align 8
  %377 = add nuw i64 %370, 1
  %378 = load i64, i64* %375, align 8
  %379 = trunc i64 %370 to i32
  %380 = shl i32 %379, 2
  %381 = sext i32 %380 to i64
  %382 = add nsw i64 %381, 7
  %383 = add i64 %382, %376
  %384 = inttoptr i64 %383 to i32*
  %385 = trunc i64 %378 to i32
  store atomic volatile i32 %385, i32* %384 monotonic, align 4
  %386 = and i64 %378, 1
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %411, label %388

388:                                              ; preds = %369
  %389 = and i64 %376, -262144
  %390 = or i64 %389, 8
  %391 = inttoptr i64 %390 to i64*
  %392 = load i64, i64* %391, align 8
  %393 = and i64 %392, 262144
  %394 = icmp eq i64 %393, 0
  br i1 %394, label %399, label %395

395:                                              ; preds = %388
  %396 = or i64 %389, 16
  %397 = inttoptr i64 %396 to %"class.v8::internal::Heap"**
  %398 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %397, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %398, i64 %376, i64 %383, i64 %378) #9
  br label %399

399:                                              ; preds = %395, %388
  %400 = and i64 %378, -262144
  %401 = or i64 %400, 8
  %402 = inttoptr i64 %401 to i64*
  %403 = load i64, i64* %402, align 8
  %404 = and i64 %403, 24
  %405 = icmp eq i64 %404, 0
  br i1 %405, label %411, label %406

406:                                              ; preds = %399
  %407 = load i64, i64* %391, align 8
  %408 = and i64 %407, 24
  %409 = icmp eq i64 %408, 0
  br i1 %409, label %410, label %411

410:                                              ; preds = %406
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %376, i64 %383, i64 %378) #9
  br label %411

411:                                              ; preds = %369, %399, %406, %410
  %412 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %371, i64 1, i32 0
  %413 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %412, align 8
  %414 = icmp eq %"class.std::__1::__tree_node_base"* %413, null
  br i1 %414, label %415, label %423

415:                                              ; preds = %411
  %416 = bitcast %"class.std::__1::__tree_end_node"* %371 to %"class.std::__1::__tree_node_base"*
  %417 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %371, i64 2
  %418 = bitcast %"class.std::__1::__tree_end_node"* %417 to %"class.std::__1::__tree_end_node"**
  %419 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %418, align 8
  %420 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %419, i64 0, i32 0
  %421 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %420, align 8
  %422 = icmp eq %"class.std::__1::__tree_node_base"* %421, %416
  br i1 %422, label %439, label %430

423:                                              ; preds = %411, %423
  %424 = phi %"class.std::__1::__tree_node_base"* [ %426, %423 ], [ %413, %411 ]
  %425 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %424, i64 0, i32 0, i32 0
  %426 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %425, align 8
  %427 = icmp eq %"class.std::__1::__tree_node_base"* %426, null
  br i1 %427, label %428, label %423

428:                                              ; preds = %423
  %429 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %424, i64 0, i32 0
  br label %439

430:                                              ; preds = %415, %430
  %431 = phi %"class.std::__1::__tree_end_node"** [ %434, %430 ], [ %418, %415 ]
  %432 = bitcast %"class.std::__1::__tree_end_node"** %431 to %"class.std::__1::__tree_node_base"**
  %433 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %432, align 8
  %434 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %433, i64 0, i32 2
  %435 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %434, align 8
  %436 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %435, i64 0, i32 0
  %437 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %436, align 8
  %438 = icmp eq %"class.std::__1::__tree_node_base"* %437, %433
  br i1 %438, label %439, label %430

439:                                              ; preds = %430, %415, %428
  %440 = phi %"class.std::__1::__tree_end_node"* [ %429, %428 ], [ %419, %415 ], [ %435, %430 ]
  %441 = icmp eq %"class.std::__1::__tree_end_node"* %440, %167
  br i1 %441, label %212, label %369
}

declare %"class.v8::internal::ModuleScope"* @_ZN2v88internal5Scope13AsModuleScopeEv(%"class.v8::internal::Scope"*) local_unnamed_addr #2

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE12NewScopeInfoEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"*, i32, i8 zeroext) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo24ModuleVariableCountIndexEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4, !noalias !36
  %7 = lshr i32 %6, 1
  %8 = shl i32 %7, 3
  %9 = add i32 %8, 16
  %10 = add i64 %3, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4, !noalias !57
  %13 = lshr i32 %12, 9
  %14 = and i32 %13, 4
  %15 = or i32 %9, %14
  %16 = lshr i32 %12, 8
  %17 = and i32 %16, 3
  %18 = add nsw i32 %17, -1
  %19 = icmp ult i32 %18, 2
  %20 = zext i1 %19 to i32
  %21 = and i32 %12, 24576
  %22 = icmp ne i32 %21, 0
  %23 = zext i1 %22 to i32
  %24 = shl nuw nsw i32 %23, 3
  %25 = lshr i32 %12, 13
  %26 = and i32 %25, 4
  %27 = lshr i32 %12, 1
  %28 = and i32 %27, 15
  switch i32 %28, label %29 [
    i32 2, label %33
    i32 4, label %33
    i32 1, label %33
  ]

29:                                               ; preds = %1
  %30 = icmp eq i32 %28, 3
  %31 = zext i1 %30 to i32
  %32 = shl nuw nsw i32 %31, 3
  br label %33

33:                                               ; preds = %1, %1, %1, %29
  %34 = phi i32 [ 8, %1 ], [ %32, %29 ], [ 8, %1 ], [ 8, %1 ]
  %35 = lshr i32 %12, 21
  %36 = and i32 %35, 4
  %37 = lshr i32 %12, 27
  %38 = and i32 %37, 4
  %39 = and i32 %12, 30
  %40 = icmp eq i32 %39, 6
  %41 = zext i1 %40 to i32
  %42 = add nuw nsw i32 %20, %41
  %43 = shl nuw nsw i32 %42, 2
  %44 = add nsw i32 %26, -4
  %45 = add nsw i32 %44, %36
  %46 = add nsw i32 %45, %38
  %47 = add i32 %46, %15
  %48 = add i32 %47, %24
  %49 = add i32 %48, %43
  %50 = add i32 %49, %34
  %51 = sdiv i32 %50, 4
  ret i32 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9ScopeInfo3setEiNS0_6ObjectENS0_16WriteBarrierModeE(%"class.v8::internal::ScopeInfo"* nocapture readonly, i32, i64, i32) local_unnamed_addr #0 align 2 {
  %5 = shl i32 %1, 2
  %6 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = or i32 %5, 3
  %9 = sext i32 %8 to i64
  %10 = add i64 %7, %9
  %11 = inttoptr i64 %10 to i32*
  %12 = trunc i64 %2 to i32
  store atomic volatile i32 %12, i32* %11 monotonic, align 4
  switch i32 %3, label %29 [
    i32 0, label %49
    i32 4, label %13
  ]

13:                                               ; preds = %4
  %14 = load i64, i64* %6, align 8
  %15 = add i64 %14, %9
  %16 = and i64 %2, 1
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %49, label %18

18:                                               ; preds = %13
  %19 = and i64 %14, -262144
  %20 = or i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = and i64 %22, 262144
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %18
  %26 = or i64 %19, 16
  %27 = inttoptr i64 %26 to %"class.v8::internal::Heap"**
  %28 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %27, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %28, i64 %14, i64 %15, i64 %2) #9
  br label %32

29:                                               ; preds = %4
  %30 = and i64 %2, 1
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %49, label %32

32:                                               ; preds = %18, %25, %29
  %33 = load i64, i64* %6, align 8
  %34 = add i64 %33, %9
  %35 = and i64 %2, -262144
  %36 = or i64 %35, 8
  %37 = inttoptr i64 %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = and i64 %38, 24
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %32
  %42 = and i64 %33, -262144
  %43 = or i64 %42, 8
  %44 = inttoptr i64 %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = and i64 %45, 24
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %41
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %33, i64 %34, i64 %2) #9
  br label %49

49:                                               ; preds = %13, %48, %41, %32, %29, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal9ScopeInfo3setEiNS0_3SmiE(%"class.v8::internal::ScopeInfo"* nocapture readonly, i32, i64) local_unnamed_addr #5 align 2 {
  %4 = shl i32 %1, 2
  %5 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = or i32 %4, 3
  %8 = sext i32 %7 to i64
  %9 = add i64 %6, %8
  %10 = inttoptr i64 %9 to i32*
  %11 = trunc i64 %2 to i32
  store atomic volatile i32 %11, i32* %10 monotonic, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal9ScopeInfo3getEi(%"class.v8::internal::ScopeInfo"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = shl i32 %1, 2
  %7 = or i32 %6, 3
  %8 = sext i32 %7 to i64
  %9 = add i64 %4, %8
  %10 = inttoptr i64 %9 to i32*
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = zext i32 %11 to i64
  %13 = or i64 %5, %12
  ret i64 %13
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal9ScopeInfo6CreateINS0_12LocalIsolateEEENS0_6HandleIS1_EEPT_PNS0_4ZoneEPNS0_5ScopeENS0_11MaybeHandleIS1_EE(%"class.v8::internal::LocalIsolate"*, %"class.v8::internal::Zone"*, %"class.v8::internal::Scope"*, i64*) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %2, i64 0, i32 4, i32 0
  %6 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %2, i64 0, i32 4, i32 1
  %7 = load %"class.v8::internal::Variable"**, %"class.v8::internal::Variable"*** %6, align 8
  %8 = icmp eq %"class.v8::internal::Variable"** %5, %7
  br i1 %8, label %9, label %16

9:                                                ; preds = %30, %4
  %10 = phi i32 [ 0, %4 ], [ %31, %30 ]
  %11 = phi i32 [ 0, %4 ], [ %32, %30 ]
  %12 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %2, i64 0, i32 13
  %13 = load i16, i16* %12, align 1
  %14 = and i16 %13, 256
  %15 = icmp eq i16 %14, 0
  br i1 %15, label %55, label %35

16:                                               ; preds = %4, %30
  %17 = phi i32 [ %32, %30 ], [ 0, %4 ]
  %18 = phi i32 [ %31, %30 ], [ 0, %4 ]
  %19 = phi %"class.v8::internal::Variable"** [ %33, %30 ], [ %5, %4 ]
  %20 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %20, i64 0, i32 6
  %22 = load i16, i16* %21, align 8
  %23 = lshr i16 %22, 7
  %24 = trunc i16 %23 to i8
  %25 = and i8 %24, 7
  switch i8 %25, label %30 [
    i8 3, label %26
    i8 6, label %26
    i8 5, label %28
  ]

26:                                               ; preds = %16, %16
  %27 = add nsw i32 %17, 1
  br label %30

28:                                               ; preds = %16
  %29 = add nsw i32 %18, 1
  br label %30

30:                                               ; preds = %16, %28, %26
  %31 = phi i32 [ %18, %16 ], [ %29, %28 ], [ %18, %26 ]
  %32 = phi i32 [ %17, %16 ], [ %17, %28 ], [ %27, %26 ]
  %33 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %20, i64 0, i32 3
  %34 = icmp eq %"class.v8::internal::Variable"** %33, %7
  br i1 %34, label %9, label %16

35:                                               ; preds = %9
  %36 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %37 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %36, i64 0, i32 1
  %38 = load i16, i16* %37, align 1
  %39 = and i16 %38, 4096
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %55, label %41

41:                                               ; preds = %35
  %42 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %43 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %42, i64 0, i32 8
  %44 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %43, align 8
  %45 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %44, i64 0, i32 6
  %46 = load i16, i16* %45, align 8
  %47 = and i16 %46, 2048
  %48 = icmp eq i16 %47, 0
  br i1 %48, label %55, label %49

49:                                               ; preds = %41
  %50 = and i16 %46, 896
  %51 = icmp eq i16 %50, 384
  %52 = select i1 %51, i32 2, i32 1
  %53 = zext i1 %51 to i32
  %54 = add nsw i32 %11, %53
  br label %55

55:                                               ; preds = %41, %35, %9, %49
  %56 = phi i32 [ 3, %41 ], [ 0, %35 ], [ 0, %9 ], [ %52, %49 ]
  %57 = phi i32 [ %11, %41 ], [ %11, %35 ], [ %11, %9 ], [ %54, %49 ]
  %58 = load i16, i16* %12, align 1
  %59 = and i16 %58, 256
  %60 = icmp eq i16 %59, 0
  br i1 %60, label %66, label %61

61:                                               ; preds = %55
  %62 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %63 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %62, i64 0, i32 10
  %64 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %63, align 8
  %65 = icmp ne %"class.v8::internal::Variable"* %64, null
  br label %66

66:                                               ; preds = %55, %61
  %67 = phi i1 [ false, %55 ], [ %65, %61 ]
  %68 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %2, i64 0, i32 12
  %69 = load i8, i8* %68, align 8
  %70 = icmp eq i8 %69, 2
  br i1 %70, label %71, label %88

71:                                               ; preds = %66
  %72 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %73 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %72, i64 0, i32 9
  %74 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %73, align 8
  %75 = icmp eq %"class.v8::internal::Variable"* %74, null
  br i1 %75, label %94, label %76

76:                                               ; preds = %71
  %77 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %78 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %77, i64 0, i32 9
  %79 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %78, align 8
  %80 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %79, i64 0, i32 6
  %81 = load i16, i16* %80, align 8
  %82 = and i16 %81, 2048
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %94, label %84

84:                                               ; preds = %76
  %85 = and i16 %81, 896
  %86 = icmp eq i16 %85, 384
  %87 = select i1 %86, i32 2, i32 1
  br label %94

88:                                               ; preds = %66
  %89 = add i8 %69, -3
  %90 = icmp ult i8 %89, 2
  br i1 %90, label %131, label %91

91:                                               ; preds = %88
  %92 = icmp eq i8 %69, 1
  %93 = select i1 %92, i32 3, i32 0
  br label %94

94:                                               ; preds = %76, %91, %71, %84
  %95 = phi i32 [ 3, %76 ], [ %87, %84 ], [ 3, %71 ], [ %93, %91 ]
  %96 = load i8, i8* %68, align 8
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %98, label %131

98:                                               ; preds = %94
  %99 = tail call %"class.v8::internal::ClassScope"* @_ZN2v88internal5Scope12AsClassScopeEv(%"class.v8::internal::Scope"* %2) #9
  %100 = getelementptr inbounds %"class.v8::internal::ClassScope", %"class.v8::internal::ClassScope"* %99, i64 0, i32 2, i32 0
  %101 = load i64, i64* %100, align 8
  %102 = and i64 %101, -2
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %108, label %104

104:                                              ; preds = %98
  %105 = inttoptr i64 %102 to %"struct.v8::internal::ClassScope::RareData"*
  %106 = getelementptr inbounds %"struct.v8::internal::ClassScope::RareData", %"struct.v8::internal::ClassScope::RareData"* %105, i64 0, i32 2
  %107 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %106, align 8
  br label %108

108:                                              ; preds = %104, %98
  %109 = phi %"class.v8::internal::Variable"* [ %107, %104 ], [ null, %98 ]
  %110 = icmp ne %"class.v8::internal::Variable"* %109, null
  %111 = load i8, i8* %68, align 8
  %112 = icmp eq i8 %111, 0
  br i1 %112, label %113, label %131

113:                                              ; preds = %108
  %114 = tail call %"class.v8::internal::ClassScope"* @_ZN2v88internal5Scope12AsClassScopeEv(%"class.v8::internal::Scope"* %2) #9
  %115 = getelementptr inbounds %"class.v8::internal::ClassScope", %"class.v8::internal::ClassScope"* %114, i64 0, i32 7
  %116 = load i8, i8* %115, align 1, !range !2
  %117 = icmp eq i8 %116, 0
  br i1 %117, label %118, label %131

118:                                              ; preds = %113
  %119 = getelementptr inbounds %"class.v8::internal::ClassScope", %"class.v8::internal::ClassScope"* %114, i64 0, i32 5
  %120 = load i8, i8* %119, align 1, !range !2
  %121 = icmp eq i8 %120, 0
  br i1 %121, label %122, label %131

122:                                              ; preds = %118
  %123 = getelementptr inbounds %"class.v8::internal::ClassScope", %"class.v8::internal::ClassScope"* %114, i64 0, i32 4
  %124 = load i8, i8* %123, align 8, !range !2
  %125 = icmp eq i8 %124, 0
  br i1 %125, label %131, label %126

126:                                              ; preds = %122
  %127 = getelementptr inbounds %"class.v8::internal::ClassScope", %"class.v8::internal::ClassScope"* %114, i64 0, i32 0, i32 13
  %128 = load i16, i16* %127, align 1
  %129 = and i16 %128, 64
  %130 = icmp ne i16 %129, 0
  br label %131

131:                                              ; preds = %88, %94, %126, %122, %118, %113, %108
  %132 = phi i1 [ %110, %108 ], [ %110, %113 ], [ %110, %118 ], [ %110, %122 ], [ %110, %126 ], [ false, %94 ], [ false, %88 ]
  %133 = phi i32 [ %95, %108 ], [ %95, %113 ], [ %95, %118 ], [ %95, %122 ], [ %95, %126 ], [ %95, %94 ], [ 3, %88 ]
  %134 = phi i1 [ false, %108 ], [ true, %113 ], [ true, %118 ], [ false, %122 ], [ %130, %126 ], [ false, %94 ], [ false, %88 ]
  %135 = icmp ne i32 %133, 0
  %136 = load i8, i8* %68, align 8
  %137 = add i8 %136, -1
  %138 = icmp ult i8 %137, 4
  %139 = add nsw i32 %56, -1
  %140 = icmp ult i32 %139, 2
  %141 = load i16, i16* %12, align 1
  %142 = and i16 %141, 256
  %143 = icmp eq i16 %142, 0
  br i1 %143, label %149, label %144

144:                                              ; preds = %131
  %145 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %146 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %145, i64 0, i32 4
  %147 = load i32, i32* %146, align 8
  %148 = load i8, i8* %68, align 8
  br label %149

149:                                              ; preds = %131, %144
  %150 = phi i8 [ %148, %144 ], [ %136, %131 ]
  %151 = phi i32 [ %147, %144 ], [ 0, %131 ]
  %152 = icmp eq i64* %3, null
  %153 = xor i1 %152, true
  %154 = icmp eq i8 %150, 3
  br i1 %154, label %155, label %161

155:                                              ; preds = %149
  %156 = tail call %"class.v8::internal::ModuleScope"* @_ZN2v88internal5Scope13AsModuleScopeEv(%"class.v8::internal::Scope"* %2) #9
  %157 = getelementptr inbounds %"class.v8::internal::ModuleScope", %"class.v8::internal::ModuleScope"* %156, i64 0, i32 1
  %158 = load %"class.v8::internal::SourceTextModuleDescriptor"*, %"class.v8::internal::SourceTextModuleDescriptor"** %157, align 8
  %159 = tail call i64* @_ZN2v88internal20SourceTextModuleInfo3NewINS0_12LocalIsolateEEENS0_6HandleIS1_EEPT_PNS0_4ZoneEPNS0_26SourceTextModuleDescriptorE(%"class.v8::internal::LocalIsolate"* %0, %"class.v8::internal::Zone"* %1, %"class.v8::internal::SourceTextModuleDescriptor"* %158)
  %160 = load i8, i8* %68, align 8
  br label %161

161:                                              ; preds = %155, %149
  %162 = phi i8 [ %160, %155 ], [ %150, %149 ]
  %163 = phi i64* [ %159, %155 ], [ null, %149 ]
  %164 = shl i32 %57, 1
  %165 = add nsw i32 %164, 3
  %166 = zext i1 %134 to i32
  %167 = zext i1 %140 to i32
  %168 = select i1 %135, i32 2, i32 0
  %169 = zext i1 %70 to i32
  %170 = select i1 %138, i32 2, i32 0
  %171 = zext i1 %153 to i32
  %172 = icmp eq i8 %162, 3
  %173 = mul nsw i32 %10, 3
  %174 = add nsw i32 %173, 2
  %175 = select i1 %172, i32 %174, i32 0
  %176 = add i32 %165, %171
  %177 = add i32 %176, %167
  %178 = add i32 %177, %169
  %179 = add i32 %178, %166
  %180 = add i32 %179, %168
  %181 = add i32 %180, %170
  %182 = add i32 %181, %175
  %183 = bitcast %"class.v8::internal::LocalIsolate"* %0 to %"class.v8::internal::FactoryBase.1052"*
  %184 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE12NewScopeInfoEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1052"* %183, i32 %182, i8 zeroext 1) #9
  %185 = load i64, i64* %184, align 8
  %186 = and i64 %185, -262144
  %187 = or i64 %186, 8
  %188 = inttoptr i64 %187 to i64*
  %189 = load i64, i64* %188, align 8
  %190 = and i64 %189, 262144
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %192, label %196

192:                                              ; preds = %161
  %193 = and i64 %189, 24
  %194 = icmp eq i64 %193, 0
  %195 = select i1 %194, i32 4, i32 0
  br label %196

196:                                              ; preds = %161, %192
  %197 = phi i32 [ 4, %161 ], [ %195, %192 ]
  %198 = load i8, i8* %68, align 8
  %199 = icmp eq i8 %198, 2
  br i1 %199, label %200, label %208

200:                                              ; preds = %196
  %201 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %202 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %201, i64 0, i32 1
  %203 = load i16, i16* %202, align 1
  %204 = and i16 %203, 1
  %205 = icmp ne i16 %204, 0
  %206 = and i16 %203, 2
  %207 = icmp ne i16 %206, 0
  br label %208

208:                                              ; preds = %200, %196
  %209 = phi i1 [ %207, %200 ], [ false, %196 ]
  %210 = phi i1 [ %205, %200 ], [ false, %196 ]
  %211 = load i16, i16* %12, align 1
  %212 = and i16 %211, 256
  %213 = icmp eq i16 %212, 0
  br i1 %213, label %224, label %214

214:                                              ; preds = %208
  %215 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %216 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %215, i64 0, i32 2
  %217 = load i8, i8* %216, align 1
  %218 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %219 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %218, i64 0, i32 0, i32 13
  %220 = load i16, i16* %219, align 1
  %221 = and i16 %220, 4
  %222 = icmp ne i16 %221, 0
  %223 = load i16, i16* %12, align 1
  br label %224

224:                                              ; preds = %208, %214
  %225 = phi i16 [ %223, %214 ], [ %211, %208 ]
  %226 = phi i8 [ %217, %214 ], [ 0, %208 ]
  %227 = phi i1 [ %222, %214 ], [ false, %208 ]
  %228 = load i8, i8* %68, align 8
  %229 = zext i8 %228 to i32
  %230 = zext i1 %227 to i32
  %231 = shl nuw nsw i32 %230, 4
  %232 = and i16 %225, 1
  %233 = shl nuw nsw i16 %232, 5
  %234 = zext i16 %233 to i32
  %235 = lshr i16 %225, 2
  %236 = and i16 %235, 64
  %237 = zext i16 %236 to i32
  %238 = shl nuw nsw i32 %56, 7
  %239 = zext i1 %132 to i32
  %240 = shl nuw nsw i32 %239, 9
  %241 = shl nuw nsw i32 %166, 10
  %242 = zext i1 %67 to i32
  %243 = shl nuw nsw i32 %242, 11
  %244 = shl i32 %133, 12
  %245 = shl nuw nsw i32 %169, 14
  %246 = zext i1 %209 to i32
  %247 = shl nuw nsw i32 %246, 15
  %248 = zext i1 %210 to i32
  %249 = shl nuw nsw i32 %248, 16
  %250 = zext i8 %226 to i32
  %251 = shl nuw nsw i32 %250, 17
  %252 = shl nuw nsw i32 %171, 22
  %253 = lshr i16 %225, 5
  %254 = and i16 %253, 1
  %255 = zext i16 %254 to i32
  %256 = shl nuw nsw i32 %255, 23
  switch i8 %228, label %257 [
    i8 2, label %266
    i8 4, label %266
  ]

257:                                              ; preds = %224
  %258 = icmp ne i16 %232, 0
  %259 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %2, i64 0, i32 0
  %260 = load %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"** %259, align 8
  %261 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %260, i64 0, i32 13
  %262 = load i16, i16* %261, align 1
  %263 = and i16 %262, 1
  %264 = icmp eq i16 %263, 0
  %265 = and i1 %258, %264
  br label %266

266:                                              ; preds = %224, %224, %257
  %267 = phi i1 [ %265, %257 ], [ false, %224 ], [ false, %224 ]
  %268 = zext i1 %267 to i32
  %269 = shl nuw nsw i32 %268, 24
  %270 = lshr i16 %225, 9
  %271 = and i16 %270, 1
  %272 = zext i16 %271 to i32
  %273 = shl nuw nsw i32 %272, 25
  switch i8 %228, label %274 [
    i8 3, label %277
    i8 7, label %277
  ]

274:                                              ; preds = %266
  %275 = and i16 %225, 4
  %276 = icmp ne i16 %275, 0
  br label %277

277:                                              ; preds = %266, %266, %274
  %278 = phi i1 [ %276, %274 ], [ true, %266 ], [ true, %266 ]
  %279 = zext i1 %278 to i32
  %280 = shl nuw nsw i32 %279, 26
  %281 = lshr i16 %225, 11
  %282 = and i16 %281, 1
  %283 = zext i16 %282 to i32
  %284 = shl nuw nsw i32 %283, 27
  %285 = or i32 %238, %252
  %286 = or i32 %285, %243
  %287 = or i32 %286, %245
  %288 = or i32 %287, %240
  %289 = or i32 %288, %244
  %290 = or i32 %289, %241
  %291 = or i32 %290, %247
  %292 = or i32 %291, %249
  %293 = or i32 %292, %251
  %294 = or i32 %293, %229
  %295 = or i32 %294, %231
  %296 = or i32 %295, %234
  %297 = or i32 %296, %237
  %298 = or i32 %297, %256
  %299 = or i32 %298, %273
  %300 = or i32 %299, %284
  %301 = or i32 %300, %269
  %302 = or i32 %301, %280
  %303 = shl i32 %302, 1
  %304 = add i64 %185, 3
  %305 = inttoptr i64 %304 to i32*
  store atomic volatile i32 %303, i32* %305 monotonic, align 4
  %306 = shl i32 %151, 1
  %307 = add i64 %185, 7
  %308 = inttoptr i64 %307 to i32*
  store atomic volatile i32 %306, i32* %308 monotonic, align 4
  %309 = add i64 %185, 11
  %310 = inttoptr i64 %309 to i32*
  store atomic volatile i32 %164, i32* %310 monotonic, align 4
  %311 = load i8, i8* %68, align 8
  %312 = icmp eq i8 %311, 3
  br i1 %312, label %313, label %360

313:                                              ; preds = %277
  %314 = shl i32 %57, 3
  %315 = add i32 %314, 16
  %316 = load i32, i32* %305, align 4, !noalias !58
  %317 = lshr i32 %316, 9
  %318 = and i32 %317, 4
  %319 = or i32 %318, %315
  %320 = lshr i32 %316, 8
  %321 = and i32 %320, 3
  %322 = add nsw i32 %321, -1
  %323 = icmp ult i32 %322, 2
  %324 = zext i1 %323 to i32
  %325 = and i32 %316, 24576
  %326 = icmp ne i32 %325, 0
  %327 = zext i1 %326 to i32
  %328 = shl nuw nsw i32 %327, 3
  %329 = lshr i32 %316, 13
  %330 = and i32 %329, 4
  %331 = lshr i32 %316, 1
  %332 = and i32 %331, 15
  switch i32 %332, label %333 [
    i32 2, label %337
    i32 4, label %337
    i32 1, label %337
  ]

333:                                              ; preds = %313
  %334 = icmp eq i32 %332, 3
  %335 = zext i1 %334 to i32
  %336 = shl nuw nsw i32 %335, 3
  br label %337

337:                                              ; preds = %313, %313, %313, %333
  %338 = phi i32 [ 8, %313 ], [ %336, %333 ], [ 8, %313 ], [ 8, %313 ]
  %339 = lshr i32 %316, 21
  %340 = and i32 %339, 4
  %341 = lshr i32 %316, 27
  %342 = and i32 %341, 4
  %343 = and i32 %316, 30
  %344 = icmp eq i32 %343, 6
  %345 = zext i1 %344 to i32
  %346 = add nuw nsw i32 %324, %345
  %347 = shl nuw nsw i32 %346, 2
  %348 = add nuw nsw i32 %340, %330
  %349 = add nuw nsw i32 %348, %342
  %350 = add i32 %349, %319
  %351 = add i32 %350, %328
  %352 = add i32 %351, %347
  %353 = add i32 %352, %338
  %354 = shl i32 %10, 1
  %355 = add i64 %185, -1
  %356 = sext i32 %353 to i64
  %357 = add i64 %355, %356
  %358 = inttoptr i64 %357 to i32*
  store atomic volatile i32 %354, i32* %358 monotonic, align 4
  %359 = load i32, i32* %310, align 4, !noalias !69
  br label %360

360:                                              ; preds = %337, %277
  %361 = phi i32 [ %359, %337 ], [ %164, %277 ]
  %362 = add nsw i32 %57, 3
  %363 = lshr i32 %361, 1
  %364 = shl i32 %363, 3
  %365 = add i32 %364, 16
  %366 = load i32, i32* %305, align 4, !noalias !90
  %367 = lshr i32 %366, 9
  %368 = and i32 %367, 4
  %369 = or i32 %365, %368
  %370 = lshr i32 %366, 8
  %371 = and i32 %370, 3
  %372 = add nsw i32 %371, -1
  %373 = icmp ult i32 %372, 2
  %374 = zext i1 %373 to i32
  %375 = and i32 %366, 24576
  %376 = icmp ne i32 %375, 0
  %377 = zext i1 %376 to i32
  %378 = shl nuw nsw i32 %377, 3
  %379 = lshr i32 %366, 13
  %380 = and i32 %379, 4
  %381 = lshr i32 %366, 1
  %382 = and i32 %381, 15
  switch i32 %382, label %383 [
    i32 2, label %387
    i32 4, label %387
    i32 1, label %387
  ]

383:                                              ; preds = %360
  %384 = icmp eq i32 %382, 3
  %385 = zext i1 %384 to i32
  %386 = shl nuw nsw i32 %385, 3
  br label %387

387:                                              ; preds = %360, %360, %360, %383
  %388 = phi i32 [ 8, %360 ], [ %386, %383 ], [ 8, %360 ], [ 8, %360 ]
  %389 = load %"class.v8::internal::Variable"**, %"class.v8::internal::Variable"*** %6, align 8
  %390 = icmp eq %"class.v8::internal::Variable"** %5, %389
  br i1 %390, label %413, label %391

391:                                              ; preds = %387
  %392 = add nsw i32 %380, -4
  %393 = lshr i32 %366, 21
  %394 = and i32 %393, 4
  %395 = add nsw i32 %392, %394
  %396 = lshr i32 %366, 27
  %397 = and i32 %396, 4
  %398 = add nsw i32 %395, %397
  %399 = add i32 %398, %369
  %400 = add i32 %399, %378
  %401 = and i32 %366, 30
  %402 = icmp eq i32 %401, 6
  %403 = zext i1 %402 to i32
  %404 = add nuw nsw i32 %374, %403
  %405 = shl nuw nsw i32 %404, 2
  %406 = add i32 %400, %405
  %407 = add i32 %406, %388
  %408 = sdiv i32 %407, 4
  %409 = add nsw i32 %408, 1
  %410 = icmp eq i32 %197, 0
  %411 = or i64 %186, 16
  %412 = inttoptr i64 %411 to %"class.v8::internal::Heap"**
  br label %422

413:                                              ; preds = %560, %387
  %414 = load i16, i16* %12, align 1
  %415 = and i16 %414, 256
  %416 = icmp eq i16 %415, 0
  br i1 %416, label %686, label %417

417:                                              ; preds = %413
  %418 = icmp sgt i32 %151, 0
  %419 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  br i1 %418, label %420, label %565

420:                                              ; preds = %417
  %421 = zext i32 %151 to i64
  br label %571

422:                                              ; preds = %391, %560
  %423 = phi i32 [ %409, %391 ], [ %561, %560 ]
  %424 = phi %"class.v8::internal::Variable"** [ %5, %391 ], [ %563, %560 ]
  %425 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %424, align 8
  %426 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %425, i64 0, i32 6
  %427 = load i16, i16* %426, align 8
  %428 = lshr i16 %427, 7
  %429 = trunc i16 %428 to i8
  %430 = and i8 %429, 7
  switch i8 %430, label %560 [
    i8 3, label %431
    i8 6, label %431
    i8 5, label %497
  ]

431:                                              ; preds = %422, %422
  %432 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %425, i64 0, i32 4
  %433 = load i32, i32* %432, align 8
  %434 = load i8, i8* %68, align 8
  switch i8 %434, label %435 [
    i8 3, label %439
    i8 7, label %439
  ]

435:                                              ; preds = %431
  %436 = load i16, i16* %12, align 1
  %437 = and i16 %436, 4
  %438 = icmp eq i16 %437, 0
  br i1 %438, label %440, label %439

439:                                              ; preds = %435, %431, %431
  br label %440

440:                                              ; preds = %435, %439
  %441 = phi i32 [ 3, %439 ], [ 2, %435 ]
  %442 = sub nsw i32 %433, %441
  %443 = and i16 %427, 15
  %444 = lshr i16 %427, 8
  %445 = and i16 %444, 16
  %446 = or i16 %445, %443
  %447 = lshr i16 %427, 9
  %448 = and i16 %447, 32
  %449 = or i16 %446, %448
  %450 = zext i16 %449 to i32
  %451 = lshr i16 %427, 15
  %452 = zext i16 %451 to i32
  %453 = shl nuw nsw i32 %452, 22
  %454 = or i32 %453, %450
  %455 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %425, i64 0, i32 1
  %456 = bitcast %"class.v8::internal::AstRawString"** %455 to i64***
  %457 = load i64**, i64*** %456, align 8
  %458 = load i64*, i64** %457, align 8
  %459 = load i64, i64* %458, align 8
  %460 = shl i32 %442, 2
  %461 = add i32 %460, 12
  %462 = or i32 %461, 3
  %463 = sext i32 %462 to i64
  %464 = add i64 %185, %463
  %465 = inttoptr i64 %464 to i32*
  %466 = trunc i64 %459 to i32
  store atomic volatile i32 %466, i32* %465 monotonic, align 4
  %467 = and i64 %459, 1
  %468 = icmp eq i64 %467, 0
  %469 = or i1 %410, %468
  br i1 %469, label %488, label %470

470:                                              ; preds = %440
  %471 = load i64, i64* %188, align 8
  %472 = and i64 %471, 262144
  %473 = icmp eq i64 %472, 0
  br i1 %473, label %476, label %474

474:                                              ; preds = %470
  %475 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %412, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %475, i64 %185, i64 %464, i64 %459) #9
  br label %476

476:                                              ; preds = %470, %474
  %477 = and i64 %459, -262144
  %478 = or i64 %477, 8
  %479 = inttoptr i64 %478 to i64*
  %480 = load i64, i64* %479, align 8
  %481 = and i64 %480, 24
  %482 = icmp eq i64 %481, 0
  br i1 %482, label %488, label %483

483:                                              ; preds = %476
  %484 = load i64, i64* %188, align 8
  %485 = and i64 %484, 24
  %486 = icmp eq i64 %485, 0
  br i1 %486, label %487, label %488

487:                                              ; preds = %483
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %185, i64 %464, i64 %459) #9
  br label %488

488:                                              ; preds = %440, %476, %483, %487
  %489 = add nsw i32 %442, %362
  %490 = shl nuw nsw i32 %454, 1
  %491 = or i32 %490, 8388480
  %492 = shl i32 %489, 2
  %493 = or i32 %492, 3
  %494 = sext i32 %493 to i64
  %495 = add i64 %185, %494
  %496 = inttoptr i64 %495 to i32*
  store atomic volatile i32 %491, i32* %496 monotonic, align 4
  br label %560

497:                                              ; preds = %422
  %498 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %425, i64 0, i32 1
  %499 = bitcast %"class.v8::internal::AstRawString"** %498 to i64***
  %500 = load i64**, i64*** %499, align 8
  %501 = load i64*, i64** %500, align 8
  %502 = load i64, i64* %501, align 8
  %503 = shl i32 %423, 2
  %504 = or i32 %503, 3
  %505 = sext i32 %504 to i64
  %506 = add i64 %185, %505
  %507 = inttoptr i64 %506 to i32*
  %508 = trunc i64 %502 to i32
  store atomic volatile i32 %508, i32* %507 monotonic, align 4
  %509 = and i64 %502, 1
  %510 = icmp eq i64 %509, 0
  %511 = or i1 %410, %510
  br i1 %511, label %530, label %512

512:                                              ; preds = %497
  %513 = load i64, i64* %188, align 8
  %514 = and i64 %513, 262144
  %515 = icmp eq i64 %514, 0
  br i1 %515, label %518, label %516

516:                                              ; preds = %512
  %517 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %412, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %517, i64 %185, i64 %506, i64 %502) #9
  br label %518

518:                                              ; preds = %512, %516
  %519 = and i64 %502, -262144
  %520 = or i64 %519, 8
  %521 = inttoptr i64 %520 to i64*
  %522 = load i64, i64* %521, align 8
  %523 = and i64 %522, 24
  %524 = icmp eq i64 %523, 0
  br i1 %524, label %530, label %525

525:                                              ; preds = %518
  %526 = load i64, i64* %188, align 8
  %527 = and i64 %526, 24
  %528 = icmp eq i64 %527, 0
  br i1 %528, label %529, label %530

529:                                              ; preds = %525
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %185, i64 %506, i64 %502) #9
  br label %530

530:                                              ; preds = %497, %518, %525, %529
  %531 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %425, i64 0, i32 4
  %532 = load i32, i32* %531, align 8
  %533 = shl i32 %532, 1
  %534 = add i32 %503, 4
  %535 = or i32 %534, 3
  %536 = sext i32 %535 to i64
  %537 = add i64 %185, %536
  %538 = inttoptr i64 %537 to i32*
  store atomic volatile i32 %533, i32* %538 monotonic, align 4
  %539 = load i16, i16* %426, align 8
  %540 = and i16 %539, 15
  %541 = lshr i16 %539, 8
  %542 = and i16 %541, 16
  %543 = or i16 %542, %540
  %544 = lshr i16 %539, 9
  %545 = and i16 %544, 32
  %546 = or i16 %543, %545
  %547 = zext i16 %546 to i32
  %548 = lshr i16 %539, 15
  %549 = zext i16 %548 to i32
  %550 = shl nuw nsw i32 %549, 22
  %551 = or i32 %550, %547
  %552 = shl nuw nsw i32 %551, 1
  %553 = or i32 %552, 8388480
  %554 = add i32 %503, 8
  %555 = or i32 %554, 3
  %556 = sext i32 %555 to i64
  %557 = add i64 %185, %556
  %558 = inttoptr i64 %557 to i32*
  store atomic volatile i32 %553, i32* %558 monotonic, align 4
  %559 = add nsw i32 %423, 3
  br label %560

560:                                              ; preds = %422, %530, %488
  %561 = phi i32 [ %423, %422 ], [ %559, %530 ], [ %423, %488 ]
  %562 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %424, align 8
  %563 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %562, i64 0, i32 3
  %564 = icmp eq %"class.v8::internal::Variable"** %563, %389
  br i1 %564, label %413, label %422

565:                                              ; preds = %605, %417
  %566 = phi %"class.v8::internal::DeclarationScope"* [ %419, %417 ], [ %607, %605 ]
  %567 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %566, i64 0, i32 1
  %568 = load i16, i16* %567, align 1
  %569 = and i16 %568, 4096
  %570 = icmp eq i16 %569, 0
  br i1 %570, label %686, label %609

571:                                              ; preds = %605, %420
  %572 = phi i64 [ 0, %420 ], [ %606, %605 ]
  %573 = phi %"class.v8::internal::DeclarationScope"* [ %419, %420 ], [ %607, %605 ]
  %574 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %573, i64 0, i32 6, i32 0
  %575 = load %"class.v8::internal::Variable"**, %"class.v8::internal::Variable"*** %574, align 8
  %576 = getelementptr inbounds %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %575, i64 %572
  %577 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %576, align 8
  %578 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %577, i64 0, i32 6
  %579 = load i16, i16* %578, align 8
  %580 = and i16 %579, 896
  %581 = icmp eq i16 %580, 384
  br i1 %581, label %582, label %605

582:                                              ; preds = %571
  %583 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %577, i64 0, i32 4
  %584 = load i32, i32* %583, align 8
  %585 = load i8, i8* %68, align 8
  switch i8 %585, label %586 [
    i8 3, label %590
    i8 7, label %590
  ]

586:                                              ; preds = %582
  %587 = load i16, i16* %12, align 1
  %588 = and i16 %587, 4
  %589 = icmp eq i16 %588, 0
  br i1 %589, label %591, label %590

590:                                              ; preds = %586, %582, %582
  br label %591

591:                                              ; preds = %586, %590
  %592 = phi i32 [ -3, %590 ], [ -2, %586 ]
  %593 = add i32 %584, %362
  %594 = add i32 %593, %592
  %595 = shl i32 %594, 2
  %596 = or i32 %595, 3
  %597 = sext i32 %596 to i64
  %598 = add i64 %185, %597
  %599 = inttoptr i64 %598 to i32*
  %600 = load atomic i32, i32* %599 monotonic, align 4
  %601 = and i32 %600, -8388482
  %602 = trunc i64 %572 to i32
  %603 = shl i32 %602, 7
  %604 = or i32 %601, %603
  store atomic volatile i32 %604, i32* %599 monotonic, align 4
  br label %605

605:                                              ; preds = %571, %591
  %606 = add nuw nsw i64 %572, 1
  %607 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %608 = icmp eq i64 %606, %421
  br i1 %608, label %565, label %571

609:                                              ; preds = %565
  %610 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %611 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %610, i64 0, i32 8
  %612 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %611, align 8
  %613 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %612, i64 0, i32 6
  %614 = load i16, i16* %613, align 8
  %615 = and i16 %614, 896
  %616 = icmp eq i16 %615, 384
  br i1 %616, label %617, label %686

617:                                              ; preds = %609
  %618 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %612, i64 0, i32 4
  %619 = load i32, i32* %618, align 8
  %620 = load i8, i8* %68, align 8
  switch i8 %620, label %621 [
    i8 3, label %625
    i8 7, label %625
  ]

621:                                              ; preds = %617
  %622 = load i16, i16* %12, align 1
  %623 = and i16 %622, 4
  %624 = icmp eq i16 %623, 0
  br i1 %624, label %626, label %625

625:                                              ; preds = %621, %617, %617
  br label %626

626:                                              ; preds = %621, %625
  %627 = phi i32 [ 3, %625 ], [ 2, %621 ]
  %628 = sub nsw i32 %619, %627
  %629 = and i16 %614, 15
  %630 = lshr i16 %614, 8
  %631 = and i16 %630, 16
  %632 = or i16 %631, %629
  %633 = lshr i16 %614, 9
  %634 = and i16 %633, 32
  %635 = or i16 %632, %634
  %636 = zext i16 %635 to i32
  %637 = lshr i16 %614, 15
  %638 = zext i16 %637 to i32
  %639 = shl nuw nsw i32 %638, 22
  %640 = or i32 %639, %636
  %641 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %612, i64 0, i32 1
  %642 = bitcast %"class.v8::internal::AstRawString"** %641 to i64***
  %643 = load i64**, i64*** %642, align 8
  %644 = load i64*, i64** %643, align 8
  %645 = load i64, i64* %644, align 8
  %646 = shl i32 %628, 2
  %647 = add i32 %646, 12
  %648 = or i32 %647, 3
  %649 = sext i32 %648 to i64
  %650 = add i64 %185, %649
  %651 = inttoptr i64 %650 to i32*
  %652 = trunc i64 %645 to i32
  store atomic volatile i32 %652, i32* %651 monotonic, align 4
  %653 = icmp eq i32 %197, 0
  %654 = and i64 %645, 1
  %655 = icmp eq i64 %654, 0
  %656 = or i1 %653, %655
  br i1 %656, label %677, label %657

657:                                              ; preds = %626
  %658 = load i64, i64* %188, align 8
  %659 = and i64 %658, 262144
  %660 = icmp eq i64 %659, 0
  br i1 %660, label %665, label %661

661:                                              ; preds = %657
  %662 = or i64 %186, 16
  %663 = inttoptr i64 %662 to %"class.v8::internal::Heap"**
  %664 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %663, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %664, i64 %185, i64 %650, i64 %645) #9
  br label %665

665:                                              ; preds = %657, %661
  %666 = and i64 %645, -262144
  %667 = or i64 %666, 8
  %668 = inttoptr i64 %667 to i64*
  %669 = load i64, i64* %668, align 8
  %670 = and i64 %669, 24
  %671 = icmp eq i64 %670, 0
  br i1 %671, label %677, label %672

672:                                              ; preds = %665
  %673 = load i64, i64* %188, align 8
  %674 = and i64 %673, 24
  %675 = icmp eq i64 %674, 0
  br i1 %675, label %676, label %677

676:                                              ; preds = %672
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %185, i64 %650, i64 %645) #9
  br label %677

677:                                              ; preds = %626, %665, %672, %676
  %678 = add nsw i32 %628, %362
  %679 = shl nuw nsw i32 %640, 1
  %680 = or i32 %679, 8388480
  %681 = shl i32 %678, 2
  %682 = or i32 %681, 3
  %683 = sext i32 %682 to i64
  %684 = add i64 %185, %683
  %685 = inttoptr i64 %684 to i32*
  store atomic volatile i32 %680, i32* %685 monotonic, align 4
  br label %686

686:                                              ; preds = %565, %413, %609, %677
  br i1 %134, label %687, label %700

687:                                              ; preds = %686
  %688 = tail call %"class.v8::internal::ClassScope"* @_ZN2v88internal5Scope12AsClassScopeEv(%"class.v8::internal::Scope"* %2) #9
  %689 = getelementptr inbounds %"class.v8::internal::ClassScope", %"class.v8::internal::ClassScope"* %688, i64 0, i32 3
  %690 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %689, align 8
  %691 = add nsw i32 %164, 4
  %692 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %690, i64 0, i32 4
  %693 = load i32, i32* %692, align 8
  %694 = shl i32 %693, 1
  %695 = shl i32 %165, 2
  %696 = or i32 %695, 3
  %697 = sext i32 %696 to i64
  %698 = add i64 %185, %697
  %699 = inttoptr i64 %698 to i32*
  store atomic volatile i32 %694, i32* %699 monotonic, align 4
  br label %700

700:                                              ; preds = %687, %686
  %701 = phi i32 [ %691, %687 ], [ %165, %686 ]
  br i1 %140, label %702, label %715

702:                                              ; preds = %700
  %703 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %704 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %703, i64 0, i32 8
  %705 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %704, align 8
  %706 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %705, i64 0, i32 4
  %707 = load i32, i32* %706, align 8
  %708 = add nsw i32 %701, 1
  %709 = shl i32 %707, 1
  %710 = shl i32 %701, 2
  %711 = or i32 %710, 3
  %712 = sext i32 %711 to i64
  %713 = add i64 %185, %712
  %714 = inttoptr i64 %713 to i32*
  store atomic volatile i32 %709, i32* %714 monotonic, align 4
  br label %715

715:                                              ; preds = %702, %700
  %716 = phi i32 [ %708, %702 ], [ %701, %700 ]
  br i1 %135, label %717, label %771

717:                                              ; preds = %715
  %718 = tail call %"class.v8::internal::DeclarationScope"* @_ZN2v88internal5Scope18AsDeclarationScopeEv(%"class.v8::internal::Scope"* %2) #9
  %719 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %718, i64 0, i32 9
  %720 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %719, align 8
  %721 = icmp eq %"class.v8::internal::Variable"* %720, null
  br i1 %721, label %731, label %722

722:                                              ; preds = %717
  %723 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %720, i64 0, i32 4
  %724 = load i32, i32* %723, align 8
  %725 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %720, i64 0, i32 1
  %726 = bitcast %"class.v8::internal::AstRawString"** %725 to i64***
  %727 = load i64**, i64*** %726, align 8
  %728 = load i64*, i64** %727, align 8
  %729 = load i64, i64* %728, align 8
  %730 = shl i32 %724, 1
  br label %731

731:                                              ; preds = %717, %722
  %732 = phi i32 [ %730, %722 ], [ -2, %717 ]
  %733 = phi i64 [ %729, %722 ], [ 0, %717 ]
  %734 = shl i32 %716, 2
  %735 = or i32 %734, 3
  %736 = sext i32 %735 to i64
  %737 = add i64 %185, %736
  %738 = inttoptr i64 %737 to i32*
  %739 = trunc i64 %733 to i32
  store atomic volatile i32 %739, i32* %738 monotonic, align 4
  %740 = icmp eq i32 %197, 0
  %741 = and i64 %733, 1
  %742 = icmp eq i64 %741, 0
  %743 = or i1 %740, %742
  br i1 %743, label %764, label %744

744:                                              ; preds = %731
  %745 = load i64, i64* %188, align 8
  %746 = and i64 %745, 262144
  %747 = icmp eq i64 %746, 0
  br i1 %747, label %752, label %748

748:                                              ; preds = %744
  %749 = or i64 %186, 16
  %750 = inttoptr i64 %749 to %"class.v8::internal::Heap"**
  %751 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %750, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %751, i64 %185, i64 %737, i64 %733) #9
  br label %752

752:                                              ; preds = %744, %748
  %753 = and i64 %733, -262144
  %754 = or i64 %753, 8
  %755 = inttoptr i64 %754 to i64*
  %756 = load i64, i64* %755, align 8
  %757 = and i64 %756, 24
  %758 = icmp eq i64 %757, 0
  br i1 %758, label %764, label %759

759:                                              ; preds = %752
  %760 = load i64, i64* %188, align 8
  %761 = and i64 %760, 24
  %762 = icmp eq i64 %761, 0
  br i1 %762, label %763, label %764

763:                                              ; preds = %759
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %185, i64 %737, i64 %733) #9
  br label %764

764:                                              ; preds = %731, %752, %759, %763
  %765 = add nsw i32 %716, 2
  %766 = add i32 %734, 4
  %767 = or i32 %766, 3
  %768 = sext i32 %767 to i64
  %769 = add i64 %185, %768
  %770 = inttoptr i64 %769 to i32*
  store atomic volatile i32 %732, i32* %770 monotonic, align 4
  br label %771

771:                                              ; preds = %764, %715
  %772 = phi i32 [ %765, %764 ], [ %716, %715 ]
  %773 = add nsw i32 %772, %169
  br i1 %138, label %774, label %792

774:                                              ; preds = %771
  %775 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %2, i64 0, i32 8
  %776 = load i32, i32* %775, align 8
  %777 = shl i32 %776, 1
  %778 = shl i32 %773, 2
  %779 = or i32 %778, 3
  %780 = sext i32 %779 to i64
  %781 = add i64 %185, %780
  %782 = inttoptr i64 %781 to i32*
  store atomic volatile i32 %777, i32* %782 monotonic, align 4
  %783 = add nsw i32 %773, 2
  %784 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %2, i64 0, i32 9
  %785 = load i32, i32* %784, align 4
  %786 = shl i32 %785, 1
  %787 = add i32 %778, 4
  %788 = or i32 %787, 3
  %789 = sext i32 %788 to i64
  %790 = add i64 %185, %789
  %791 = inttoptr i64 %790 to i32*
  store atomic volatile i32 %786, i32* %791 monotonic, align 4
  br label %792

792:                                              ; preds = %774, %771
  %793 = phi i32 [ %783, %774 ], [ %773, %771 ]
  br i1 %152, label %827, label %794

794:                                              ; preds = %792
  %795 = add nsw i32 %793, 1
  %796 = load i64, i64* %3, align 8
  %797 = shl i32 %793, 2
  %798 = or i32 %797, 3
  %799 = sext i32 %798 to i64
  %800 = add i64 %185, %799
  %801 = inttoptr i64 %800 to i32*
  %802 = trunc i64 %796 to i32
  store atomic volatile i32 %802, i32* %801 monotonic, align 4
  %803 = icmp eq i32 %197, 0
  %804 = and i64 %796, 1
  %805 = icmp eq i64 %804, 0
  %806 = or i1 %803, %805
  br i1 %806, label %827, label %807

807:                                              ; preds = %794
  %808 = load i64, i64* %188, align 8
  %809 = and i64 %808, 262144
  %810 = icmp eq i64 %809, 0
  br i1 %810, label %815, label %811

811:                                              ; preds = %807
  %812 = or i64 %186, 16
  %813 = inttoptr i64 %812 to %"class.v8::internal::Heap"**
  %814 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %813, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %814, i64 %185, i64 %800, i64 %796) #9
  br label %815

815:                                              ; preds = %807, %811
  %816 = and i64 %796, -262144
  %817 = or i64 %816, 8
  %818 = inttoptr i64 %817 to i64*
  %819 = load i64, i64* %818, align 8
  %820 = and i64 %819, 24
  %821 = icmp eq i64 %820, 0
  br i1 %821, label %827, label %822

822:                                              ; preds = %815
  %823 = load i64, i64* %188, align 8
  %824 = and i64 %823, 24
  %825 = icmp eq i64 %824, 0
  br i1 %825, label %826, label %827

826:                                              ; preds = %822
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %185, i64 %800, i64 %796) #9
  br label %827

827:                                              ; preds = %794, %826, %822, %815, %792
  %828 = phi i32 [ %793, %792 ], [ %795, %794 ], [ %795, %815 ], [ %795, %822 ], [ %795, %826 ]
  %829 = load i8, i8* %68, align 8
  %830 = icmp eq i8 %829, 3
  br i1 %830, label %831, label %861

831:                                              ; preds = %827
  %832 = load i64, i64* %163, align 8
  %833 = shl i32 %828, 2
  %834 = or i32 %833, 3
  %835 = sext i32 %834 to i64
  %836 = add i64 %185, %835
  %837 = inttoptr i64 %836 to i32*
  %838 = trunc i64 %832 to i32
  store atomic volatile i32 %838, i32* %837 monotonic, align 4
  %839 = and i64 %832, 1
  %840 = icmp eq i64 %839, 0
  br i1 %840, label %861, label %841

841:                                              ; preds = %831
  %842 = load i64, i64* %188, align 8
  %843 = and i64 %842, 262144
  %844 = icmp eq i64 %843, 0
  br i1 %844, label %849, label %845

845:                                              ; preds = %841
  %846 = or i64 %186, 16
  %847 = inttoptr i64 %846 to %"class.v8::internal::Heap"**
  %848 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %847, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %848, i64 %185, i64 %836, i64 %832) #9
  br label %849

849:                                              ; preds = %845, %841
  %850 = and i64 %832, -262144
  %851 = or i64 %850, 8
  %852 = inttoptr i64 %851 to i64*
  %853 = load i64, i64* %852, align 8
  %854 = and i64 %853, 24
  %855 = icmp eq i64 %854, 0
  br i1 %855, label %861, label %856

856:                                              ; preds = %849
  %857 = load i64, i64* %188, align 8
  %858 = and i64 %857, 24
  %859 = icmp eq i64 %858, 0
  br i1 %859, label %860, label %861

860:                                              ; preds = %856
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %185, i64 %836, i64 %832) #9
  br label %861

861:                                              ; preds = %860, %856, %849, %831, %827
  ret i64* %184
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal20SourceTextModuleInfo3NewINS0_12LocalIsolateEEENS0_6HandleIS1_EEPT_PNS0_4ZoneEPNS0_26SourceTextModuleDescriptorE(%"class.v8::internal::LocalIsolate"*, %"class.v8::internal::Zone"*, %"class.v8::internal::SourceTextModuleDescriptor"*) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor", %"class.v8::internal::SourceTextModuleDescriptor"* %2, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i32
  %7 = bitcast %"class.v8::internal::LocalIsolate"* %0 to %"class.v8::internal::FactoryBase.1052"*
  %8 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE13NewFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1052"* %7, i32 %6, i8 zeroext 0) #9
  %9 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor", %"class.v8::internal::SourceTextModuleDescriptor"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor", %"class.v8::internal::SourceTextModuleDescriptor"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %12 = icmp eq %"class.std::__1::__tree_end_node"* %10, %11
  br i1 %12, label %13, label %28

13:                                               ; preds = %98, %3
  %14 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor", %"class.v8::internal::SourceTextModuleDescriptor"* %2, i64 0, i32 1, i32 0
  %15 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor", %"class.v8::internal::SourceTextModuleDescriptor"* %2, i64 0, i32 1, i32 0, i32 0, i32 1
  %16 = bitcast %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.std::__1::vector.1158"* %14 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %17, %19
  %21 = lshr exact i64 %20, 3
  %22 = trunc i64 %21 to i32
  %23 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE13NewFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1052"* %7, i32 %22, i8 zeroext 0) #9
  %24 = getelementptr inbounds %"class.std::__1::vector.1158", %"class.std::__1::vector.1158"* %14, i64 0, i32 0, i32 0
  %25 = load %"struct.v8::internal::SourceTextModuleDescriptor::Entry"**, %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*** %24, align 8
  %26 = load %"struct.v8::internal::SourceTextModuleDescriptor::Entry"**, %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*** %15, align 8
  %27 = icmp eq %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** %25, %26
  br i1 %27, label %101, label %116

28:                                               ; preds = %3, %98
  %29 = phi %"class.std::__1::__tree_end_node"* [ %99, %98 ], [ %10, %3 ]
  %30 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %29, i64 4
  %31 = bitcast %"class.std::__1::__tree_end_node"* %30 to %"class.v8::internal::SourceTextModuleDescriptor::AstModuleRequest"**
  %32 = load %"class.v8::internal::SourceTextModuleDescriptor::AstModuleRequest"*, %"class.v8::internal::SourceTextModuleDescriptor::AstModuleRequest"** %31, align 8
  %33 = tail call i64* @_ZNK2v88internal26SourceTextModuleDescriptor16AstModuleRequest9SerializeINS0_12LocalIsolateEEENS0_6HandleINS0_13ModuleRequestEEEPT_(%"class.v8::internal::SourceTextModuleDescriptor::AstModuleRequest"* %32, %"class.v8::internal::LocalIsolate"* %0) #9
  %34 = load i64, i64* %8, align 8
  %35 = load %"class.v8::internal::SourceTextModuleDescriptor::AstModuleRequest"*, %"class.v8::internal::SourceTextModuleDescriptor::AstModuleRequest"** %31, align 8
  %36 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor::AstModuleRequest", %"class.v8::internal::SourceTextModuleDescriptor::AstModuleRequest"* %35, i64 0, i32 3
  %37 = load i32, i32* %36, align 4
  %38 = load i64, i64* %33, align 8
  %39 = shl i32 %37, 2
  %40 = sext i32 %39 to i64
  %41 = add i64 %34, 7
  %42 = add i64 %41, %40
  %43 = inttoptr i64 %42 to i32*
  %44 = trunc i64 %38 to i32
  store atomic volatile i32 %44, i32* %43 monotonic, align 4
  %45 = and i64 %38, 1
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %70, label %47

47:                                               ; preds = %28
  %48 = and i64 %34, -262144
  %49 = or i64 %48, 8
  %50 = inttoptr i64 %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = and i64 %51, 262144
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %58, label %54

54:                                               ; preds = %47
  %55 = or i64 %48, 16
  %56 = inttoptr i64 %55 to %"class.v8::internal::Heap"**
  %57 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %56, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %57, i64 %34, i64 %42, i64 %38) #9
  br label %58

58:                                               ; preds = %54, %47
  %59 = and i64 %38, -262144
  %60 = or i64 %59, 8
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = and i64 %62, 24
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %70, label %65

65:                                               ; preds = %58
  %66 = load i64, i64* %50, align 8
  %67 = and i64 %66, 24
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %65
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %34, i64 %42, i64 %38) #9
  br label %70

70:                                               ; preds = %28, %58, %65, %69
  %71 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %29, i64 1, i32 0
  %72 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %71, align 8
  %73 = icmp eq %"class.std::__1::__tree_node_base"* %72, null
  br i1 %73, label %74, label %82

74:                                               ; preds = %70
  %75 = bitcast %"class.std::__1::__tree_end_node"* %29 to %"class.std::__1::__tree_node_base"*
  %76 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %29, i64 2
  %77 = bitcast %"class.std::__1::__tree_end_node"* %76 to %"class.std::__1::__tree_end_node"**
  %78 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %77, align 8
  %79 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %78, i64 0, i32 0
  %80 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %79, align 8
  %81 = icmp eq %"class.std::__1::__tree_node_base"* %80, %75
  br i1 %81, label %98, label %89

82:                                               ; preds = %70, %82
  %83 = phi %"class.std::__1::__tree_node_base"* [ %85, %82 ], [ %72, %70 ]
  %84 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %83, i64 0, i32 0, i32 0
  %85 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %84, align 8
  %86 = icmp eq %"class.std::__1::__tree_node_base"* %85, null
  br i1 %86, label %87, label %82

87:                                               ; preds = %82
  %88 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %83, i64 0, i32 0
  br label %98

89:                                               ; preds = %74, %89
  %90 = phi %"class.std::__1::__tree_end_node"** [ %93, %89 ], [ %77, %74 ]
  %91 = bitcast %"class.std::__1::__tree_end_node"** %90 to %"class.std::__1::__tree_node_base"**
  %92 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %92, i64 0, i32 2
  %94 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %93, align 8
  %95 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %94, i64 0, i32 0
  %96 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %95, align 8
  %97 = icmp eq %"class.std::__1::__tree_node_base"* %96, %92
  br i1 %97, label %98, label %89

98:                                               ; preds = %89, %74, %87
  %99 = phi %"class.std::__1::__tree_end_node"* [ %88, %87 ], [ %78, %74 ], [ %94, %89 ]
  %100 = icmp eq %"class.std::__1::__tree_end_node"* %99, %11
  br i1 %100, label %13, label %28

101:                                              ; preds = %156, %13
  %102 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor", %"class.v8::internal::SourceTextModuleDescriptor"* %2, i64 0, i32 2, i32 0
  %103 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor", %"class.v8::internal::SourceTextModuleDescriptor"* %2, i64 0, i32 2, i32 0, i32 0, i32 1
  %104 = bitcast %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*** %103 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = bitcast %"class.std::__1::vector.1158"* %102 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = sub i64 %105, %107
  %109 = lshr exact i64 %108, 3
  %110 = trunc i64 %109 to i32
  %111 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE13NewFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1052"* %7, i32 %110, i8 zeroext 0) #9
  %112 = getelementptr inbounds %"class.std::__1::vector.1158", %"class.std::__1::vector.1158"* %102, i64 0, i32 0, i32 0
  %113 = load %"struct.v8::internal::SourceTextModuleDescriptor::Entry"**, %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*** %112, align 8
  %114 = load %"struct.v8::internal::SourceTextModuleDescriptor::Entry"**, %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*** %103, align 8
  %115 = icmp eq %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** %113, %114
  br i1 %115, label %159, label %169

116:                                              ; preds = %13, %156
  %117 = phi i64 [ %122, %156 ], [ 0, %13 ]
  %118 = phi %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** [ %157, %156 ], [ %25, %13 ]
  %119 = load %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*, %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** %118, align 8
  %120 = tail call i64* @_ZNK2v88internal26SourceTextModuleDescriptor5Entry9SerializeINS0_12LocalIsolateEEENS0_6HandleINS0_25SourceTextModuleInfoEntryEEEPT_(%"struct.v8::internal::SourceTextModuleDescriptor::Entry"* %119, %"class.v8::internal::LocalIsolate"* %0) #9
  %121 = load i64, i64* %23, align 8
  %122 = add nuw i64 %117, 1
  %123 = load i64, i64* %120, align 8
  %124 = trunc i64 %117 to i32
  %125 = shl i32 %124, 2
  %126 = sext i32 %125 to i64
  %127 = add nsw i64 %126, 7
  %128 = add i64 %127, %121
  %129 = inttoptr i64 %128 to i32*
  %130 = trunc i64 %123 to i32
  store atomic volatile i32 %130, i32* %129 monotonic, align 4
  %131 = and i64 %123, 1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %156, label %133

133:                                              ; preds = %116
  %134 = and i64 %121, -262144
  %135 = or i64 %134, 8
  %136 = inttoptr i64 %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = and i64 %137, 262144
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %144, label %140

140:                                              ; preds = %133
  %141 = or i64 %134, 16
  %142 = inttoptr i64 %141 to %"class.v8::internal::Heap"**
  %143 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %142, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %143, i64 %121, i64 %128, i64 %123) #9
  br label %144

144:                                              ; preds = %140, %133
  %145 = and i64 %123, -262144
  %146 = or i64 %145, 8
  %147 = inttoptr i64 %146 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = and i64 %148, 24
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %156, label %151

151:                                              ; preds = %144
  %152 = load i64, i64* %136, align 8
  %153 = and i64 %152, 24
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %156

155:                                              ; preds = %151
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %121, i64 %128, i64 %123) #9
  br label %156

156:                                              ; preds = %116, %144, %151, %155
  %157 = getelementptr inbounds %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*, %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** %118, i64 1
  %158 = icmp eq %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** %157, %26
  br i1 %158, label %101, label %116

159:                                              ; preds = %209, %101
  %160 = tail call i64* @_ZNK2v88internal26SourceTextModuleDescriptor23SerializeRegularExportsINS0_12LocalIsolateEEENS0_6HandleINS0_10FixedArrayEEEPT_PNS0_4ZoneE(%"class.v8::internal::SourceTextModuleDescriptor"* %2, %"class.v8::internal::LocalIsolate"* %0, %"class.v8::internal::Zone"* %1) #9
  %161 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor", %"class.v8::internal::SourceTextModuleDescriptor"* %2, i64 0, i32 4, i32 0, i32 0, i32 2, i32 0, i32 0
  %162 = load i64, i64* %161, align 8
  %163 = trunc i64 %162 to i32
  %164 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE13NewFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1052"* %7, i32 %163, i8 zeroext 0) #9
  %165 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor", %"class.v8::internal::SourceTextModuleDescriptor"* %2, i64 0, i32 4, i32 0, i32 0, i32 0
  %166 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %165, align 8
  %167 = getelementptr inbounds %"class.v8::internal::SourceTextModuleDescriptor", %"class.v8::internal::SourceTextModuleDescriptor"* %2, i64 0, i32 4, i32 0, i32 0, i32 1, i32 0, i32 0
  %168 = icmp eq %"class.std::__1::__tree_end_node"* %166, %167
  br i1 %168, label %212, label %369

169:                                              ; preds = %101, %209
  %170 = phi i64 [ %175, %209 ], [ 0, %101 ]
  %171 = phi %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** [ %210, %209 ], [ %113, %101 ]
  %172 = load %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*, %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** %171, align 8
  %173 = tail call i64* @_ZNK2v88internal26SourceTextModuleDescriptor5Entry9SerializeINS0_12LocalIsolateEEENS0_6HandleINS0_25SourceTextModuleInfoEntryEEEPT_(%"struct.v8::internal::SourceTextModuleDescriptor::Entry"* %172, %"class.v8::internal::LocalIsolate"* %0) #9
  %174 = load i64, i64* %111, align 8
  %175 = add nuw i64 %170, 1
  %176 = load i64, i64* %173, align 8
  %177 = trunc i64 %170 to i32
  %178 = shl i32 %177, 2
  %179 = sext i32 %178 to i64
  %180 = add nsw i64 %179, 7
  %181 = add i64 %180, %174
  %182 = inttoptr i64 %181 to i32*
  %183 = trunc i64 %176 to i32
  store atomic volatile i32 %183, i32* %182 monotonic, align 4
  %184 = and i64 %176, 1
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %209, label %186

186:                                              ; preds = %169
  %187 = and i64 %174, -262144
  %188 = or i64 %187, 8
  %189 = inttoptr i64 %188 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = and i64 %190, 262144
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %197, label %193

193:                                              ; preds = %186
  %194 = or i64 %187, 16
  %195 = inttoptr i64 %194 to %"class.v8::internal::Heap"**
  %196 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %195, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %196, i64 %174, i64 %181, i64 %176) #9
  br label %197

197:                                              ; preds = %193, %186
  %198 = and i64 %176, -262144
  %199 = or i64 %198, 8
  %200 = inttoptr i64 %199 to i64*
  %201 = load i64, i64* %200, align 8
  %202 = and i64 %201, 24
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %209, label %204

204:                                              ; preds = %197
  %205 = load i64, i64* %189, align 8
  %206 = and i64 %205, 24
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %208, label %209

208:                                              ; preds = %204
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %174, i64 %181, i64 %176) #9
  br label %209

209:                                              ; preds = %169, %197, %204, %208
  %210 = getelementptr inbounds %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*, %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** %171, i64 1
  %211 = icmp eq %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** %210, %114
  br i1 %211, label %159, label %169

212:                                              ; preds = %439, %159
  %213 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE23NewSourceTextModuleInfoEv(%"class.v8::internal::FactoryBase.1052"* %7) #9
  %214 = load i64, i64* %213, align 8
  %215 = load i64, i64* %8, align 8
  %216 = add i64 %214, 7
  %217 = inttoptr i64 %216 to i32*
  %218 = trunc i64 %215 to i32
  store atomic volatile i32 %218, i32* %217 monotonic, align 4
  %219 = and i64 %215, 1
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %244, label %221

221:                                              ; preds = %212
  %222 = and i64 %214, -262144
  %223 = or i64 %222, 8
  %224 = inttoptr i64 %223 to i64*
  %225 = load i64, i64* %224, align 8
  %226 = and i64 %225, 262144
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %232, label %228

228:                                              ; preds = %221
  %229 = or i64 %222, 16
  %230 = inttoptr i64 %229 to %"class.v8::internal::Heap"**
  %231 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %230, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %231, i64 %214, i64 %216, i64 %215) #9
  br label %232

232:                                              ; preds = %228, %221
  %233 = and i64 %215, -262144
  %234 = or i64 %233, 8
  %235 = inttoptr i64 %234 to i64*
  %236 = load i64, i64* %235, align 8
  %237 = and i64 %236, 24
  %238 = icmp eq i64 %237, 0
  br i1 %238, label %244, label %239

239:                                              ; preds = %232
  %240 = load i64, i64* %224, align 8
  %241 = and i64 %240, 24
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %244

243:                                              ; preds = %239
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %214, i64 %216, i64 %215) #9
  br label %244

244:                                              ; preds = %212, %232, %239, %243
  %245 = load i64, i64* %213, align 8
  %246 = load i64, i64* %23, align 8
  %247 = add i64 %245, 11
  %248 = inttoptr i64 %247 to i32*
  %249 = trunc i64 %246 to i32
  store atomic volatile i32 %249, i32* %248 monotonic, align 4
  %250 = and i64 %246, 1
  %251 = icmp eq i64 %250, 0
  br i1 %251, label %275, label %252

252:                                              ; preds = %244
  %253 = and i64 %245, -262144
  %254 = or i64 %253, 8
  %255 = inttoptr i64 %254 to i64*
  %256 = load i64, i64* %255, align 8
  %257 = and i64 %256, 262144
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %263, label %259

259:                                              ; preds = %252
  %260 = or i64 %253, 16
  %261 = inttoptr i64 %260 to %"class.v8::internal::Heap"**
  %262 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %261, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %262, i64 %245, i64 %247, i64 %246) #9
  br label %263

263:                                              ; preds = %259, %252
  %264 = and i64 %246, -262144
  %265 = or i64 %264, 8
  %266 = inttoptr i64 %265 to i64*
  %267 = load i64, i64* %266, align 8
  %268 = and i64 %267, 24
  %269 = icmp eq i64 %268, 0
  br i1 %269, label %275, label %270

270:                                              ; preds = %263
  %271 = load i64, i64* %255, align 8
  %272 = and i64 %271, 24
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %275

274:                                              ; preds = %270
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %245, i64 %247, i64 %246) #9
  br label %275

275:                                              ; preds = %244, %263, %270, %274
  %276 = load i64, i64* %213, align 8
  %277 = load i64, i64* %160, align 8
  %278 = add i64 %276, 15
  %279 = inttoptr i64 %278 to i32*
  %280 = trunc i64 %277 to i32
  store atomic volatile i32 %280, i32* %279 monotonic, align 4
  %281 = and i64 %277, 1
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %306, label %283

283:                                              ; preds = %275
  %284 = and i64 %276, -262144
  %285 = or i64 %284, 8
  %286 = inttoptr i64 %285 to i64*
  %287 = load i64, i64* %286, align 8
  %288 = and i64 %287, 262144
  %289 = icmp eq i64 %288, 0
  br i1 %289, label %294, label %290

290:                                              ; preds = %283
  %291 = or i64 %284, 16
  %292 = inttoptr i64 %291 to %"class.v8::internal::Heap"**
  %293 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %292, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %293, i64 %276, i64 %278, i64 %277) #9
  br label %294

294:                                              ; preds = %290, %283
  %295 = and i64 %277, -262144
  %296 = or i64 %295, 8
  %297 = inttoptr i64 %296 to i64*
  %298 = load i64, i64* %297, align 8
  %299 = and i64 %298, 24
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %306, label %301

301:                                              ; preds = %294
  %302 = load i64, i64* %286, align 8
  %303 = and i64 %302, 24
  %304 = icmp eq i64 %303, 0
  br i1 %304, label %305, label %306

305:                                              ; preds = %301
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %276, i64 %278, i64 %277) #9
  br label %306

306:                                              ; preds = %275, %294, %301, %305
  %307 = load i64, i64* %213, align 8
  %308 = load i64, i64* %111, align 8
  %309 = add i64 %307, 19
  %310 = inttoptr i64 %309 to i32*
  %311 = trunc i64 %308 to i32
  store atomic volatile i32 %311, i32* %310 monotonic, align 4
  %312 = and i64 %308, 1
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %337, label %314

314:                                              ; preds = %306
  %315 = and i64 %307, -262144
  %316 = or i64 %315, 8
  %317 = inttoptr i64 %316 to i64*
  %318 = load i64, i64* %317, align 8
  %319 = and i64 %318, 262144
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %325, label %321

321:                                              ; preds = %314
  %322 = or i64 %315, 16
  %323 = inttoptr i64 %322 to %"class.v8::internal::Heap"**
  %324 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %323, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %324, i64 %307, i64 %309, i64 %308) #9
  br label %325

325:                                              ; preds = %321, %314
  %326 = and i64 %308, -262144
  %327 = or i64 %326, 8
  %328 = inttoptr i64 %327 to i64*
  %329 = load i64, i64* %328, align 8
  %330 = and i64 %329, 24
  %331 = icmp eq i64 %330, 0
  br i1 %331, label %337, label %332

332:                                              ; preds = %325
  %333 = load i64, i64* %317, align 8
  %334 = and i64 %333, 24
  %335 = icmp eq i64 %334, 0
  br i1 %335, label %336, label %337

336:                                              ; preds = %332
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %307, i64 %309, i64 %308) #9
  br label %337

337:                                              ; preds = %306, %325, %332, %336
  %338 = load i64, i64* %213, align 8
  %339 = load i64, i64* %164, align 8
  %340 = add i64 %338, 23
  %341 = inttoptr i64 %340 to i32*
  %342 = trunc i64 %339 to i32
  store atomic volatile i32 %342, i32* %341 monotonic, align 4
  %343 = and i64 %339, 1
  %344 = icmp eq i64 %343, 0
  br i1 %344, label %368, label %345

345:                                              ; preds = %337
  %346 = and i64 %338, -262144
  %347 = or i64 %346, 8
  %348 = inttoptr i64 %347 to i64*
  %349 = load i64, i64* %348, align 8
  %350 = and i64 %349, 262144
  %351 = icmp eq i64 %350, 0
  br i1 %351, label %356, label %352

352:                                              ; preds = %345
  %353 = or i64 %346, 16
  %354 = inttoptr i64 %353 to %"class.v8::internal::Heap"**
  %355 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %354, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %355, i64 %338, i64 %340, i64 %339) #9
  br label %356

356:                                              ; preds = %352, %345
  %357 = and i64 %339, -262144
  %358 = or i64 %357, 8
  %359 = inttoptr i64 %358 to i64*
  %360 = load i64, i64* %359, align 8
  %361 = and i64 %360, 24
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %368, label %363

363:                                              ; preds = %356
  %364 = load i64, i64* %348, align 8
  %365 = and i64 %364, 24
  %366 = icmp eq i64 %365, 0
  br i1 %366, label %367, label %368

367:                                              ; preds = %363
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %338, i64 %340, i64 %339) #9
  br label %368

368:                                              ; preds = %337, %356, %363, %367
  ret i64* %213

369:                                              ; preds = %159, %439
  %370 = phi i64 [ %377, %439 ], [ 0, %159 ]
  %371 = phi %"class.std::__1::__tree_end_node"* [ %440, %439 ], [ %166, %159 ]
  %372 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %371, i64 5
  %373 = bitcast %"class.std::__1::__tree_end_node"* %372 to %"struct.v8::internal::SourceTextModuleDescriptor::Entry"**
  %374 = load %"struct.v8::internal::SourceTextModuleDescriptor::Entry"*, %"struct.v8::internal::SourceTextModuleDescriptor::Entry"** %373, align 8
  %375 = tail call i64* @_ZNK2v88internal26SourceTextModuleDescriptor5Entry9SerializeINS0_12LocalIsolateEEENS0_6HandleINS0_25SourceTextModuleInfoEntryEEEPT_(%"struct.v8::internal::SourceTextModuleDescriptor::Entry"* %374, %"class.v8::internal::LocalIsolate"* %0) #9
  %376 = load i64, i64* %164, align 8
  %377 = add nuw i64 %370, 1
  %378 = load i64, i64* %375, align 8
  %379 = trunc i64 %370 to i32
  %380 = shl i32 %379, 2
  %381 = sext i32 %380 to i64
  %382 = add nsw i64 %381, 7
  %383 = add i64 %382, %376
  %384 = inttoptr i64 %383 to i32*
  %385 = trunc i64 %378 to i32
  store atomic volatile i32 %385, i32* %384 monotonic, align 4
  %386 = and i64 %378, 1
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %411, label %388

388:                                              ; preds = %369
  %389 = and i64 %376, -262144
  %390 = or i64 %389, 8
  %391 = inttoptr i64 %390 to i64*
  %392 = load i64, i64* %391, align 8
  %393 = and i64 %392, 262144
  %394 = icmp eq i64 %393, 0
  br i1 %394, label %399, label %395

395:                                              ; preds = %388
  %396 = or i64 %389, 16
  %397 = inttoptr i64 %396 to %"class.v8::internal::Heap"**
  %398 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %397, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %398, i64 %376, i64 %383, i64 %378) #9
  br label %399

399:                                              ; preds = %395, %388
  %400 = and i64 %378, -262144
  %401 = or i64 %400, 8
  %402 = inttoptr i64 %401 to i64*
  %403 = load i64, i64* %402, align 8
  %404 = and i64 %403, 24
  %405 = icmp eq i64 %404, 0
  br i1 %405, label %411, label %406

406:                                              ; preds = %399
  %407 = load i64, i64* %391, align 8
  %408 = and i64 %407, 24
  %409 = icmp eq i64 %408, 0
  br i1 %409, label %410, label %411

410:                                              ; preds = %406
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %376, i64 %383, i64 %378) #9
  br label %411

411:                                              ; preds = %369, %399, %406, %410
  %412 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %371, i64 1, i32 0
  %413 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %412, align 8
  %414 = icmp eq %"class.std::__1::__tree_node_base"* %413, null
  br i1 %414, label %415, label %423

415:                                              ; preds = %411
  %416 = bitcast %"class.std::__1::__tree_end_node"* %371 to %"class.std::__1::__tree_node_base"*
  %417 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %371, i64 2
  %418 = bitcast %"class.std::__1::__tree_end_node"* %417 to %"class.std::__1::__tree_end_node"**
  %419 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %418, align 8
  %420 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %419, i64 0, i32 0
  %421 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %420, align 8
  %422 = icmp eq %"class.std::__1::__tree_node_base"* %421, %416
  br i1 %422, label %439, label %430

423:                                              ; preds = %411, %423
  %424 = phi %"class.std::__1::__tree_node_base"* [ %426, %423 ], [ %413, %411 ]
  %425 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %424, i64 0, i32 0, i32 0
  %426 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %425, align 8
  %427 = icmp eq %"class.std::__1::__tree_node_base"* %426, null
  br i1 %427, label %428, label %423

428:                                              ; preds = %423
  %429 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %424, i64 0, i32 0
  br label %439

430:                                              ; preds = %415, %430
  %431 = phi %"class.std::__1::__tree_end_node"** [ %434, %430 ], [ %418, %415 ]
  %432 = bitcast %"class.std::__1::__tree_end_node"** %431 to %"class.std::__1::__tree_node_base"**
  %433 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %432, align 8
  %434 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %433, i64 0, i32 2
  %435 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %434, align 8
  %436 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %435, i64 0, i32 0
  %437 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %436, align 8
  %438 = icmp eq %"class.std::__1::__tree_node_base"* %437, %433
  br i1 %438, label %439, label %430

439:                                              ; preds = %430, %415, %428
  %440 = phi %"class.std::__1::__tree_end_node"* [ %429, %428 ], [ %419, %415 ], [ %435, %430 ]
  %441 = icmp eq %"class.std::__1::__tree_end_node"* %440, %167
  br i1 %441, label %212, label %369
}

declare i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE12NewScopeInfoEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1052"*, i32, i8 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal13ModuleRequest3NewINS0_7IsolateEEENS0_6HandleIS1_EEPT_NS4_INS0_6StringEEENS4_INS0_10FixedArrayEEEi(%"class.v8::internal::Isolate"*, i64*, i64*, i32) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %6 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewStructENS0_12InstanceTypeENS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %5, i16 zeroext 106, i8 zeroext 1) #9
  %7 = load i64, i64* %6, align 8
  %8 = load i64, i64* %1, align 8
  %9 = add i64 %7, 3
  %10 = inttoptr i64 %9 to i32*
  %11 = trunc i64 %8 to i32
  store atomic volatile i32 %11, i32* %10 monotonic, align 4
  %12 = and i64 %8, 1
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %25, label %14

14:                                               ; preds = %4
  %15 = and i64 %7, -262144
  %16 = or i64 %15, 8
  %17 = inttoptr i64 %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = and i64 %18, 262144
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %14
  %22 = or i64 %15, 16
  %23 = inttoptr i64 %22 to %"class.v8::internal::Heap"**
  %24 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %23, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %24, i64 %7, i64 %9, i64 %8) #9
  br label %25

25:                                               ; preds = %21, %14, %4
  %26 = and i64 %8, -262144
  %27 = or i64 %26, 8
  %28 = inttoptr i64 %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = and i64 %29, 24
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %40, label %32

32:                                               ; preds = %25
  %33 = and i64 %7, -262144
  %34 = or i64 %33, 8
  %35 = inttoptr i64 %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = and i64 %36, 24
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %32
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %7, i64 %9, i64 %8) #9
  br label %40

40:                                               ; preds = %25, %32, %39
  %41 = load i64, i64* %6, align 8
  %42 = load i64, i64* %2, align 8
  %43 = add i64 %41, 7
  %44 = inttoptr i64 %43 to i32*
  %45 = trunc i64 %42 to i32
  store atomic volatile i32 %45, i32* %44 monotonic, align 4
  %46 = and i64 %42, 1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %59, label %48

48:                                               ; preds = %40
  %49 = and i64 %41, -262144
  %50 = or i64 %49, 8
  %51 = inttoptr i64 %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = and i64 %52, 262144
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %59, label %55

55:                                               ; preds = %48
  %56 = or i64 %49, 16
  %57 = inttoptr i64 %56 to %"class.v8::internal::Heap"**
  %58 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %57, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %58, i64 %41, i64 %43, i64 %42) #9
  br label %59

59:                                               ; preds = %55, %48, %40
  %60 = and i64 %42, -262144
  %61 = or i64 %60, 8
  %62 = inttoptr i64 %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = and i64 %63, 24
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %74, label %66

66:                                               ; preds = %59
  %67 = and i64 %41, -262144
  %68 = or i64 %67, 8
  %69 = inttoptr i64 %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = and i64 %70, 24
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %74

73:                                               ; preds = %66
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %41, i64 %43, i64 %42) #9
  br label %74

74:                                               ; preds = %59, %66, %73
  %75 = load i64, i64* %6, align 8
  %76 = shl i32 %3, 1
  %77 = add i64 %75, 11
  %78 = inttoptr i64 %77 to i32*
  store atomic volatile i32 %76, i32* %78 monotonic, align 4
  ret i64* %6
}

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewStructENS0_12InstanceTypeENS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"*, i16 zeroext, i8 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal13ModuleRequest3NewINS0_12LocalIsolateEEENS0_6HandleIS1_EEPT_NS4_INS0_6StringEEENS4_INS0_10FixedArrayEEEi(%"class.v8::internal::LocalIsolate"*, i64*, i64*, i32) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast %"class.v8::internal::LocalIsolate"* %0 to %"class.v8::internal::FactoryBase.1052"*
  %6 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE9NewStructENS0_12InstanceTypeENS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1052"* %5, i16 zeroext 106, i8 zeroext 1) #9
  %7 = load i64, i64* %6, align 8
  %8 = load i64, i64* %1, align 8
  %9 = add i64 %7, 3
  %10 = inttoptr i64 %9 to i32*
  %11 = trunc i64 %8 to i32
  store atomic volatile i32 %11, i32* %10 monotonic, align 4
  %12 = and i64 %8, 1
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %25, label %14

14:                                               ; preds = %4
  %15 = and i64 %7, -262144
  %16 = or i64 %15, 8
  %17 = inttoptr i64 %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = and i64 %18, 262144
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %14
  %22 = or i64 %15, 16
  %23 = inttoptr i64 %22 to %"class.v8::internal::Heap"**
  %24 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %23, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %24, i64 %7, i64 %9, i64 %8) #9
  br label %25

25:                                               ; preds = %21, %14, %4
  %26 = and i64 %8, -262144
  %27 = or i64 %26, 8
  %28 = inttoptr i64 %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = and i64 %29, 24
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %40, label %32

32:                                               ; preds = %25
  %33 = and i64 %7, -262144
  %34 = or i64 %33, 8
  %35 = inttoptr i64 %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = and i64 %36, 24
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %32
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %7, i64 %9, i64 %8) #9
  br label %40

40:                                               ; preds = %25, %32, %39
  %41 = load i64, i64* %6, align 8
  %42 = load i64, i64* %2, align 8
  %43 = add i64 %41, 7
  %44 = inttoptr i64 %43 to i32*
  %45 = trunc i64 %42 to i32
  store atomic volatile i32 %45, i32* %44 monotonic, align 4
  %46 = and i64 %42, 1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %59, label %48

48:                                               ; preds = %40
  %49 = and i64 %41, -262144
  %50 = or i64 %49, 8
  %51 = inttoptr i64 %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = and i64 %52, 262144
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %59, label %55

55:                                               ; preds = %48
  %56 = or i64 %49, 16
  %57 = inttoptr i64 %56 to %"class.v8::internal::Heap"**
  %58 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %57, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %58, i64 %41, i64 %43, i64 %42) #9
  br label %59

59:                                               ; preds = %55, %48, %40
  %60 = and i64 %42, -262144
  %61 = or i64 %60, 8
  %62 = inttoptr i64 %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = and i64 %63, 24
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %74, label %66

66:                                               ; preds = %59
  %67 = and i64 %41, -262144
  %68 = or i64 %67, 8
  %69 = inttoptr i64 %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = and i64 %70, 24
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %74

73:                                               ; preds = %66
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %41, i64 %43, i64 %42) #9
  br label %74

74:                                               ; preds = %59, %66, %73
  %75 = load i64, i64* %6, align 8
  %76 = shl i32 %3, 1
  %77 = add i64 %75, 11
  %78 = inttoptr i64 %77 to i32*
  store atomic volatile i32 %76, i32* %78 monotonic, align 4
  ret i64* %6
}

declare i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE9NewStructENS0_12InstanceTypeENS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1052"*, i16 zeroext, i8 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal25SourceTextModuleInfoEntry3NewINS0_7IsolateEEENS0_6HandleIS1_EEPT_NS4_INS0_19PrimitiveHeapObjectEEES9_S9_iiii(%"class.v8::internal::Isolate"*, i64*, i64*, i64*, i32, i32, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %9 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %10 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE9NewStructENS0_12InstanceTypeENS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %9, i16 zeroext 113, i8 zeroext 1) #9
  %11 = load i64, i64* %10, align 8
  %12 = load i64, i64* %1, align 8
  %13 = add i64 %11, 3
  %14 = inttoptr i64 %13 to i32*
  %15 = trunc i64 %12 to i32
  store atomic volatile i32 %15, i32* %14 monotonic, align 4
  %16 = and i64 %12, 1
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %29, label %18

18:                                               ; preds = %8
  %19 = and i64 %11, -262144
  %20 = or i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = and i64 %22, 262144
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %29, label %25

25:                                               ; preds = %18
  %26 = or i64 %19, 16
  %27 = inttoptr i64 %26 to %"class.v8::internal::Heap"**
  %28 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %27, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %28, i64 %11, i64 %13, i64 %12) #9
  br label %29

29:                                               ; preds = %25, %18, %8
  %30 = and i64 %12, -262144
  %31 = or i64 %30, 8
  %32 = inttoptr i64 %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = and i64 %33, 24
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %44, label %36

36:                                               ; preds = %29
  %37 = and i64 %11, -262144
  %38 = or i64 %37, 8
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = and i64 %40, 24
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %36
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %11, i64 %13, i64 %12) #9
  br label %44

44:                                               ; preds = %29, %36, %43
  %45 = load i64, i64* %10, align 8
  %46 = load i64, i64* %2, align 8
  %47 = add i64 %45, 7
  %48 = inttoptr i64 %47 to i32*
  %49 = trunc i64 %46 to i32
  store atomic volatile i32 %49, i32* %48 monotonic, align 4
  %50 = and i64 %46, 1
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %63, label %52

52:                                               ; preds = %44
  %53 = and i64 %45, -262144
  %54 = or i64 %53, 8
  %55 = inttoptr i64 %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = and i64 %56, 262144
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %63, label %59

59:                                               ; preds = %52
  %60 = or i64 %53, 16
  %61 = inttoptr i64 %60 to %"class.v8::internal::Heap"**
  %62 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %61, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %62, i64 %45, i64 %47, i64 %46) #9
  br label %63

63:                                               ; preds = %59, %52, %44
  %64 = and i64 %46, -262144
  %65 = or i64 %64, 8
  %66 = inttoptr i64 %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = and i64 %67, 24
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %78, label %70

70:                                               ; preds = %63
  %71 = and i64 %45, -262144
  %72 = or i64 %71, 8
  %73 = inttoptr i64 %72 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = and i64 %74, 24
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %78

77:                                               ; preds = %70
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %45, i64 %47, i64 %46) #9
  br label %78

78:                                               ; preds = %63, %70, %77
  %79 = load i64, i64* %10, align 8
  %80 = load i64, i64* %3, align 8
  %81 = add i64 %79, 11
  %82 = inttoptr i64 %81 to i32*
  %83 = trunc i64 %80 to i32
  store atomic volatile i32 %83, i32* %82 monotonic, align 4
  %84 = and i64 %80, 1
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %97, label %86

86:                                               ; preds = %78
  %87 = and i64 %79, -262144
  %88 = or i64 %87, 8
  %89 = inttoptr i64 %88 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = and i64 %90, 262144
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %97, label %93

93:                                               ; preds = %86
  %94 = or i64 %87, 16
  %95 = inttoptr i64 %94 to %"class.v8::internal::Heap"**
  %96 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %95, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %96, i64 %79, i64 %81, i64 %80) #9
  br label %97

97:                                               ; preds = %93, %86, %78
  %98 = and i64 %80, -262144
  %99 = or i64 %98, 8
  %100 = inttoptr i64 %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = and i64 %101, 24
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %112, label %104

104:                                              ; preds = %97
  %105 = and i64 %79, -262144
  %106 = or i64 %105, 8
  %107 = inttoptr i64 %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = and i64 %108, 24
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %112

111:                                              ; preds = %104
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %79, i64 %81, i64 %80) #9
  br label %112

112:                                              ; preds = %97, %104, %111
  %113 = load i64, i64* %10, align 8
  %114 = shl i32 %4, 1
  %115 = add i64 %113, 15
  %116 = inttoptr i64 %115 to i32*
  store atomic volatile i32 %114, i32* %116 monotonic, align 4
  %117 = load i64, i64* %10, align 8
  %118 = shl i32 %5, 1
  %119 = add i64 %117, 19
  %120 = inttoptr i64 %119 to i32*
  store atomic volatile i32 %118, i32* %120 monotonic, align 4
  %121 = load i64, i64* %10, align 8
  %122 = shl i32 %6, 1
  %123 = add i64 %121, 23
  %124 = inttoptr i64 %123 to i32*
  store atomic volatile i32 %122, i32* %124 monotonic, align 4
  %125 = load i64, i64* %10, align 8
  %126 = shl i32 %7, 1
  %127 = add i64 %125, 27
  %128 = inttoptr i64 %127 to i32*
  store atomic volatile i32 %126, i32* %128 monotonic, align 4
  ret i64* %10
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal25SourceTextModuleInfoEntry3NewINS0_12LocalIsolateEEENS0_6HandleIS1_EEPT_NS4_INS0_19PrimitiveHeapObjectEEES9_S9_iiii(%"class.v8::internal::LocalIsolate"*, i64*, i64*, i64*, i32, i32, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %9 = bitcast %"class.v8::internal::LocalIsolate"* %0 to %"class.v8::internal::FactoryBase.1052"*
  %10 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE9NewStructENS0_12InstanceTypeENS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1052"* %9, i16 zeroext 113, i8 zeroext 1) #9
  %11 = load i64, i64* %10, align 8
  %12 = load i64, i64* %1, align 8
  %13 = add i64 %11, 3
  %14 = inttoptr i64 %13 to i32*
  %15 = trunc i64 %12 to i32
  store atomic volatile i32 %15, i32* %14 monotonic, align 4
  %16 = and i64 %12, 1
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %29, label %18

18:                                               ; preds = %8
  %19 = and i64 %11, -262144
  %20 = or i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = and i64 %22, 262144
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %29, label %25

25:                                               ; preds = %18
  %26 = or i64 %19, 16
  %27 = inttoptr i64 %26 to %"class.v8::internal::Heap"**
  %28 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %27, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %28, i64 %11, i64 %13, i64 %12) #9
  br label %29

29:                                               ; preds = %25, %18, %8
  %30 = and i64 %12, -262144
  %31 = or i64 %30, 8
  %32 = inttoptr i64 %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = and i64 %33, 24
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %44, label %36

36:                                               ; preds = %29
  %37 = and i64 %11, -262144
  %38 = or i64 %37, 8
  %39 = inttoptr i64 %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = and i64 %40, 24
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %36
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %11, i64 %13, i64 %12) #9
  br label %44

44:                                               ; preds = %29, %36, %43
  %45 = load i64, i64* %10, align 8
  %46 = load i64, i64* %2, align 8
  %47 = add i64 %45, 7
  %48 = inttoptr i64 %47 to i32*
  %49 = trunc i64 %46 to i32
  store atomic volatile i32 %49, i32* %48 monotonic, align 4
  %50 = and i64 %46, 1
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %63, label %52

52:                                               ; preds = %44
  %53 = and i64 %45, -262144
  %54 = or i64 %53, 8
  %55 = inttoptr i64 %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = and i64 %56, 262144
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %63, label %59

59:                                               ; preds = %52
  %60 = or i64 %53, 16
  %61 = inttoptr i64 %60 to %"class.v8::internal::Heap"**
  %62 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %61, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %62, i64 %45, i64 %47, i64 %46) #9
  br label %63

63:                                               ; preds = %59, %52, %44
  %64 = and i64 %46, -262144
  %65 = or i64 %64, 8
  %66 = inttoptr i64 %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = and i64 %67, 24
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %78, label %70

70:                                               ; preds = %63
  %71 = and i64 %45, -262144
  %72 = or i64 %71, 8
  %73 = inttoptr i64 %72 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = and i64 %74, 24
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %78

77:                                               ; preds = %70
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %45, i64 %47, i64 %46) #9
  br label %78

78:                                               ; preds = %63, %70, %77
  %79 = load i64, i64* %10, align 8
  %80 = load i64, i64* %3, align 8
  %81 = add i64 %79, 11
  %82 = inttoptr i64 %81 to i32*
  %83 = trunc i64 %80 to i32
  store atomic volatile i32 %83, i32* %82 monotonic, align 4
  %84 = and i64 %80, 1
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %97, label %86

86:                                               ; preds = %78
  %87 = and i64 %79, -262144
  %88 = or i64 %87, 8
  %89 = inttoptr i64 %88 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = and i64 %90, 262144
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %97, label %93

93:                                               ; preds = %86
  %94 = or i64 %87, 16
  %95 = inttoptr i64 %94 to %"class.v8::internal::Heap"**
  %96 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %95, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %96, i64 %79, i64 %81, i64 %80) #9
  br label %97

97:                                               ; preds = %93, %86, %78
  %98 = and i64 %80, -262144
  %99 = or i64 %98, 8
  %100 = inttoptr i64 %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = and i64 %101, 24
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %112, label %104

104:                                              ; preds = %97
  %105 = and i64 %79, -262144
  %106 = or i64 %105, 8
  %107 = inttoptr i64 %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = and i64 %108, 24
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %112

111:                                              ; preds = %104
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %79, i64 %81, i64 %80) #9
  br label %112

112:                                              ; preds = %97, %104, %111
  %113 = load i64, i64* %10, align 8
  %114 = shl i32 %4, 1
  %115 = add i64 %113, 15
  %116 = inttoptr i64 %115 to i32*
  store atomic volatile i32 %114, i32* %116 monotonic, align 4
  %117 = load i64, i64* %10, align 8
  %118 = shl i32 %5, 1
  %119 = add i64 %117, 19
  %120 = inttoptr i64 %119 to i32*
  store atomic volatile i32 %118, i32* %120 monotonic, align 4
  %121 = load i64, i64* %10, align 8
  %122 = shl i32 %6, 1
  %123 = add i64 %121, 23
  %124 = inttoptr i64 %123 to i32*
  store atomic volatile i32 %122, i32* %124 monotonic, align 4
  %125 = load i64, i64* %10, align 8
  %126 = shl i32 %7, 1
  %127 = add i64 %125, 27
  %128 = inttoptr i64 %127 to i32*
  store atomic volatile i32 %126, i32* %128 monotonic, align 4
  ret i64* %10
}

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"*, i32, i8 zeroext) local_unnamed_addr #2

declare i64* @_ZNK2v88internal26SourceTextModuleDescriptor16AstModuleRequest9SerializeINS0_7IsolateEEENS0_6HandleINS0_13ModuleRequestEEEPT_(%"class.v8::internal::SourceTextModuleDescriptor::AstModuleRequest"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #2

declare i64* @_ZNK2v88internal26SourceTextModuleDescriptor5Entry9SerializeINS0_7IsolateEEENS0_6HandleINS0_25SourceTextModuleInfoEntryEEEPT_(%"struct.v8::internal::SourceTextModuleDescriptor::Entry"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #2

declare i64* @_ZNK2v88internal26SourceTextModuleDescriptor23SerializeRegularExportsINS0_7IsolateEEENS0_6HandleINS0_10FixedArrayEEEPT_PNS0_4ZoneE(%"class.v8::internal::SourceTextModuleDescriptor"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Zone"*) local_unnamed_addr #2

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE23NewSourceTextModuleInfoEv(%"class.v8::internal::FactoryBase"*) local_unnamed_addr #2

declare i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE13NewFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1052"*, i32, i8 zeroext) local_unnamed_addr #2

declare i64* @_ZNK2v88internal26SourceTextModuleDescriptor16AstModuleRequest9SerializeINS0_12LocalIsolateEEENS0_6HandleINS0_13ModuleRequestEEEPT_(%"class.v8::internal::SourceTextModuleDescriptor::AstModuleRequest"*, %"class.v8::internal::LocalIsolate"*) local_unnamed_addr #2

declare i64* @_ZNK2v88internal26SourceTextModuleDescriptor5Entry9SerializeINS0_12LocalIsolateEEENS0_6HandleINS0_25SourceTextModuleInfoEntryEEEPT_(%"struct.v8::internal::SourceTextModuleDescriptor::Entry"*, %"class.v8::internal::LocalIsolate"*) local_unnamed_addr #2

declare i64* @_ZNK2v88internal26SourceTextModuleDescriptor23SerializeRegularExportsINS0_12LocalIsolateEEENS0_6HandleINS0_10FixedArrayEEEPT_PNS0_4ZoneE(%"class.v8::internal::SourceTextModuleDescriptor"*, %"class.v8::internal::LocalIsolate"*, %"class.v8::internal::Zone"*) local_unnamed_addr #2

declare i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE23NewSourceTextModuleInfoEv(%"class.v8::internal::FactoryBase.1052"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal9ScopeInfo18CreateForWithScopeEPNS0_7IsolateENS0_11MaybeHandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = icmp eq i64* %1, null
  %4 = xor i1 %3, true
  %5 = select i1 %3, i32 3, i32 4
  %6 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %7 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE12NewScopeInfoEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %6, i32 %5, i8 zeroext 1) #9
  %8 = zext i1 %4 to i32
  %9 = load i64, i64* %7, align 8
  %10 = shl nuw nsw i32 %8, 23
  %11 = or i32 %10, 134348814
  %12 = add i64 %9, 3
  %13 = inttoptr i64 %12 to i32*
  store atomic volatile i32 %11, i32* %13 monotonic, align 4
  %14 = load i64, i64* %7, align 8
  %15 = add i64 %14, 7
  %16 = inttoptr i64 %15 to i32*
  store atomic volatile i32 0, i32* %16 monotonic, align 4
  %17 = load i64, i64* %7, align 8
  %18 = add i64 %17, 11
  %19 = inttoptr i64 %18 to i32*
  store atomic volatile i32 0, i32* %19 monotonic, align 4
  br i1 %3, label %51, label %20

20:                                               ; preds = %2
  %21 = load i64, i64* %7, align 8
  %22 = load i64, i64* %1, align 8
  %23 = add i64 %21, 15
  %24 = inttoptr i64 %23 to i32*
  %25 = trunc i64 %22 to i32
  store atomic volatile i32 %25, i32* %24 monotonic, align 4
  %26 = and i64 %22, 1
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %51, label %28

28:                                               ; preds = %20
  %29 = and i64 %21, -262144
  %30 = or i64 %29, 8
  %31 = inttoptr i64 %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = and i64 %32, 262144
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %28
  %36 = or i64 %29, 16
  %37 = inttoptr i64 %36 to %"class.v8::internal::Heap"**
  %38 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %37, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %38, i64 %21, i64 %23, i64 %22) #9
  br label %39

39:                                               ; preds = %35, %28
  %40 = and i64 %22, -262144
  %41 = or i64 %40, 8
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = and i64 %43, 24
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %51, label %46

46:                                               ; preds = %39
  %47 = load i64, i64* %31, align 8
  %48 = and i64 %47, 24
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %46
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %21, i64 %23, i64 %22) #9
  br label %51

51:                                               ; preds = %50, %46, %39, %20, %2
  ret i64* %7
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal9ScopeInfo23CreateGlobalThisBindingEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %2 = tail call i64* @_ZN2v88internal9ScopeInfo22CreateForBootstrappingEPNS0_7IsolateENS1_17BootstrappingTypeE(%"class.v8::internal::Isolate"* %0, i32 0)
  ret i64* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal9ScopeInfo22CreateForBootstrappingEPNS0_7IsolateENS1_17BootstrappingTypeE(%"class.v8::internal::Isolate"*, i32) local_unnamed_addr #0 align 2 {
  %3 = icmp eq i32 %1, 1
  %4 = icmp eq i32 %1, 2
  %5 = icmp eq i32 %1, 0
  %6 = add i32 %1, -1
  %7 = icmp ugt i32 %6, 1
  %8 = zext i1 %7 to i32
  %9 = shl nuw nsw i32 %8, 1
  %10 = select i1 %3, i32 2, i32 0
  %11 = zext i1 %3 to i32
  %12 = select i1 %5, i32 6, i32 5
  %13 = add nuw nsw i32 %12, %10
  %14 = add nuw nsw i32 %13, %11
  %15 = add nuw nsw i32 %14, %9
  %16 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %17 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE12NewScopeInfoEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %16, i32 %15, i8 zeroext 4) #9
  %18 = select i1 %3, i32 132, i32 136
  %19 = select i1 %3, i32 24576, i32 0
  %20 = shl nuw nsw i32 %11, 15
  %21 = zext i1 %4 to i32
  %22 = shl nuw nsw i32 %21, 27
  %23 = select i1 %5, i32 131584, i32 131840
  %24 = or i32 %23, %18
  %25 = or i32 %24, %19
  %26 = or i32 %25, %20
  %27 = or i32 %26, %22
  %28 = load i64, i64* %17, align 8
  %29 = add i64 %28, 3
  %30 = inttoptr i64 %29 to i32*
  store atomic volatile i32 %27, i32* %30 monotonic, align 4
  %31 = load i64, i64* %17, align 8
  %32 = add i64 %31, 7
  %33 = inttoptr i64 %32 to i32*
  store atomic volatile i32 0, i32* %33 monotonic, align 4
  %34 = load i64, i64* %17, align 8
  %35 = add i64 %34, 11
  %36 = inttoptr i64 %35 to i32*
  store atomic volatile i32 %9, i32* %36 monotonic, align 4
  br i1 %7, label %37, label %73

37:                                               ; preds = %2
  %38 = load i64, i64* %17, align 8
  %39 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 449
  %40 = load i64, i64* %39, align 8
  %41 = add i64 %38, 15
  %42 = inttoptr i64 %41 to i32*
  %43 = trunc i64 %40 to i32
  store atomic volatile i32 %43, i32* %42 monotonic, align 4
  %44 = and i64 %40, 1
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %69, label %46

46:                                               ; preds = %37
  %47 = and i64 %38, -262144
  %48 = or i64 %47, 8
  %49 = inttoptr i64 %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = and i64 %50, 262144
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %57, label %53

53:                                               ; preds = %46
  %54 = or i64 %47, 16
  %55 = inttoptr i64 %54 to %"class.v8::internal::Heap"**
  %56 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %55, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %56, i64 %38, i64 %41, i64 %40) #9
  br label %57

57:                                               ; preds = %53, %46
  %58 = and i64 %40, -262144
  %59 = or i64 %58, 8
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = and i64 %61, 24
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %69, label %64

64:                                               ; preds = %57
  %65 = load i64, i64* %49, align 8
  %66 = and i64 %65, 24
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %69

68:                                               ; preds = %64
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %38, i64 %41, i64 %40) #9
  br label %69

69:                                               ; preds = %68, %64, %57, %37
  %70 = load i64, i64* %17, align 8
  %71 = add i64 %70, 19
  %72 = inttoptr i64 %71 to i32*
  store atomic volatile i32 8388514, i32* %72 monotonic, align 4
  br label %73

73:                                               ; preds = %2, %69
  %74 = phi i32 [ 5, %69 ], [ 3, %2 ]
  br i1 %5, label %75, label %89

75:                                               ; preds = %73
  %76 = load i64, i64* %17, align 8
  %77 = add i64 %76, 3
  %78 = inttoptr i64 %77 to i32*
  %79 = load i32, i32* %78, align 4
  %80 = and i32 %79, 134217728
  %81 = icmp eq i32 %80, 0
  %82 = add nuw nsw i32 %74, 1
  %83 = shl nuw nsw i32 %74, 2
  %84 = or i32 %83, 3
  %85 = zext i32 %84 to i64
  %86 = add i64 %76, %85
  %87 = inttoptr i64 %86 to i32*
  %88 = select i1 %81, i32 4, i32 6
  store atomic volatile i32 %88, i32* %87 monotonic, align 4
  br label %89

89:                                               ; preds = %75, %73
  %90 = phi i32 [ %82, %75 ], [ %74, %73 ]
  br i1 %3, label %91, label %167

91:                                               ; preds = %89
  %92 = load i64, i64* %17, align 8
  %93 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 9
  %94 = load i64, i64* %93, align 8
  %95 = shl nsw i32 %90, 2
  %96 = or i32 %95, 3
  %97 = sext i32 %96 to i64
  %98 = add i64 %92, %97
  %99 = inttoptr i64 %98 to i32*
  %100 = trunc i64 %94 to i32
  store atomic volatile i32 %100, i32* %99 monotonic, align 4
  %101 = and i64 %94, 1
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %126, label %103

103:                                              ; preds = %91
  %104 = and i64 %92, -262144
  %105 = or i64 %104, 8
  %106 = inttoptr i64 %105 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = and i64 %107, 262144
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %114, label %110

110:                                              ; preds = %103
  %111 = or i64 %104, 16
  %112 = inttoptr i64 %111 to %"class.v8::internal::Heap"**
  %113 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %112, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %113, i64 %92, i64 %98, i64 %94) #9
  br label %114

114:                                              ; preds = %110, %103
  %115 = and i64 %94, -262144
  %116 = or i64 %115, 8
  %117 = inttoptr i64 %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = and i64 %118, 24
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %126, label %121

121:                                              ; preds = %114
  %122 = load i64, i64* %106, align 8
  %123 = and i64 %122, 24
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %126

125:                                              ; preds = %121
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %92, i64 %98, i64 %94) #9
  br label %126

126:                                              ; preds = %125, %121, %114, %91
  %127 = load i64, i64* %17, align 8
  %128 = add nuw nsw i32 %95, 4
  %129 = or i32 %128, 3
  %130 = sext i32 %129 to i64
  %131 = add i64 %127, %130
  %132 = inttoptr i64 %131 to i32*
  store atomic volatile i32 0, i32* %132 monotonic, align 4
  %133 = load i64, i64* %17, align 8
  %134 = add nuw nsw i32 %90, 3
  %135 = load i64, i64* %93, align 8
  %136 = add nuw nsw i32 %95, 8
  %137 = or i32 %136, 3
  %138 = sext i32 %137 to i64
  %139 = add i64 %133, %138
  %140 = inttoptr i64 %139 to i32*
  %141 = trunc i64 %135 to i32
  store atomic volatile i32 %141, i32* %140 monotonic, align 4
  %142 = and i64 %135, 1
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %167, label %144

144:                                              ; preds = %126
  %145 = and i64 %133, -262144
  %146 = or i64 %145, 8
  %147 = inttoptr i64 %146 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = and i64 %148, 262144
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %155, label %151

151:                                              ; preds = %144
  %152 = or i64 %145, 16
  %153 = inttoptr i64 %152 to %"class.v8::internal::Heap"**
  %154 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %153, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %154, i64 %133, i64 %139, i64 %135) #9
  br label %155

155:                                              ; preds = %151, %144
  %156 = and i64 %135, -262144
  %157 = or i64 %156, 8
  %158 = inttoptr i64 %157 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = and i64 %159, 24
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %167, label %162

162:                                              ; preds = %155
  %163 = load i64, i64* %147, align 8
  %164 = and i64 %163, 24
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %162
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %133, i64 %139, i64 %135) #9
  br label %167

167:                                              ; preds = %166, %162, %155, %126, %89
  %168 = phi i32 [ %90, %89 ], [ %134, %126 ], [ %134, %155 ], [ %134, %162 ], [ %134, %166 ]
  %169 = load i64, i64* %17, align 8
  %170 = shl i32 %168, 2
  %171 = or i32 %170, 3
  %172 = sext i32 %171 to i64
  %173 = add i64 %169, %172
  %174 = inttoptr i64 %173 to i32*
  store atomic volatile i32 0, i32* %174 monotonic, align 4
  %175 = load i64, i64* %17, align 8
  %176 = add nuw nsw i32 %170, 4
  %177 = or i32 %176, 3
  %178 = sext i32 %177 to i64
  %179 = add i64 %175, %178
  %180 = inttoptr i64 %179 to i32*
  store atomic volatile i32 0, i32* %180 monotonic, align 4
  ret i64* %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal9ScopeInfo22CreateForEmptyFunctionEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %2 = tail call i64* @_ZN2v88internal9ScopeInfo22CreateForBootstrappingEPNS0_7IsolateENS1_17BootstrappingTypeE(%"class.v8::internal::Isolate"* %0, i32 1)
  ret i64* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal9ScopeInfo22CreateForNativeContextEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %3 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE12NewScopeInfoEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %2, i32 5, i8 zeroext 4) #9
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 3
  %6 = inttoptr i64 %5 to i32*
  store atomic volatile i32 134349704, i32* %6 monotonic, align 4
  %7 = load i64, i64* %3, align 8
  %8 = add i64 %7, 7
  %9 = inttoptr i64 %8 to i32*
  store atomic volatile i32 0, i32* %9 monotonic, align 4
  %10 = load i64, i64* %3, align 8
  %11 = add i64 %10, 11
  %12 = inttoptr i64 %11 to i32*
  store atomic volatile i32 0, i32* %12 monotonic, align 4
  %13 = load i64, i64* %3, align 8
  %14 = add i64 %13, 15
  %15 = inttoptr i64 %14 to i32*
  store atomic volatile i32 0, i32* %15 monotonic, align 4
  %16 = load i64, i64* %3, align 8
  %17 = add i64 %16, 19
  %18 = inttoptr i64 %17 to i32*
  store atomic volatile i32 0, i32* %18 monotonic, align 4
  ret i64* %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo19ContextHeaderLengthEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 134217728
  %8 = icmp eq i32 %7, 0
  %9 = select i1 %8, i32 2, i32 3
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal9ScopeInfo3getENS0_16PtrComprCageBaseEi(%"class.v8::internal::ScopeInfo"* nocapture readonly, i64, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = shl i32 %2, 2
  %7 = or i32 %6, 3
  %8 = sext i32 %7 to i64
  %9 = add i64 %5, %8
  %10 = inttoptr i64 %9 to i32*
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i64 %1, 4294967295
  %13 = icmp eq i64 %12, 0
  tail call void @llvm.assume(i1 %13) #9
  %14 = zext i32 %11 to i64
  %15 = or i64 %14, %1
  ret i64 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9ScopeInfo12CopyElementsEPNS0_7IsolateEiS1_iiNS0_16WriteBarrierModeE(%"class.v8::internal::ScopeInfo"* nocapture readonly, %"class.v8::internal::Isolate"*, i32, i64, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %8 = icmp eq i32 %5, 0
  br i1 %8, label %21, label %9

9:                                                ; preds = %7
  %10 = shl i32 %2, 2
  %11 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = or i32 %10, 3
  %14 = sext i32 %13 to i64
  %15 = add i64 %12, %14
  %16 = shl i32 %4, 2
  %17 = or i32 %16, 3
  %18 = sext i32 %17 to i64
  %19 = add i64 %18, %3
  %20 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 2
  tail call void @_ZN2v88internal4Heap9CopyRangeINS0_20CompressedObjectSlotEEEvNS0_10HeapObjectET_S5_iNS0_16WriteBarrierModeE(%"class.v8::internal::Heap"* %20, i64 %12, i64 %15, i64 %19, i32 %5, i32 %6) #9
  br label %21

21:                                               ; preds = %7, %9
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN2v88internal9ScopeInfo19RawFieldOfElementAtEi(%"class.v8::internal::ScopeInfo"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = shl i32 %1, 2
  %4 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = or i32 %3, 3
  %7 = sext i32 %6 to i64
  %8 = add i64 %5, %7
  ret i64 %8
}

declare void @_ZN2v88internal4Heap9CopyRangeINS0_20CompressedObjectSlotEEEvNS0_10HeapObjectET_S5_iNS0_16WriteBarrierModeE(%"class.v8::internal::Heap"*, i64, i64, i64, i32, i32) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo6lengthEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4, !noalias !91
  %7 = ashr i32 %6, 1
  %8 = sext i32 %7 to i64
  %9 = shl nsw i64 %8, 3
  %10 = add nsw i64 %9, 16
  %11 = add i64 %3, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4, !noalias !114
  %14 = lshr i32 %13, 9
  %15 = and i32 %14, 4
  %16 = zext i32 %15 to i64
  %17 = or i64 %10, %16
  %18 = lshr i32 %13, 8
  %19 = and i32 %18, 3
  %20 = add nsw i32 %19, -1
  %21 = icmp ult i32 %20, 2
  %22 = zext i1 %21 to i64
  %23 = and i32 %13, 24576
  %24 = icmp ne i32 %23, 0
  %25 = zext i1 %24 to i64
  %26 = shl nuw nsw i64 %25, 3
  %27 = lshr i32 %13, 13
  %28 = and i32 %27, 4
  %29 = lshr i32 %13, 1
  %30 = and i32 %29, 15
  switch i32 %30, label %31 [
    i32 2, label %35
    i32 4, label %35
    i32 1, label %35
  ]

31:                                               ; preds = %1
  %32 = icmp eq i32 %30, 3
  %33 = zext i1 %32 to i64
  %34 = shl nuw nsw i64 %33, 3
  br label %35

35:                                               ; preds = %31, %1, %1, %1
  %36 = phi i64 [ 8, %1 ], [ %34, %31 ], [ 8, %1 ], [ 8, %1 ]
  %37 = lshr i32 %13, 21
  %38 = and i32 %37, 4
  %39 = add nuw nsw i32 %38, %28
  %40 = lshr i32 %13, 27
  %41 = and i32 %40, 4
  %42 = add nuw nsw i32 %39, %41
  %43 = zext i32 %42 to i64
  %44 = and i32 %13, 30
  %45 = icmp eq i32 %44, 6
  %46 = zext i1 %45 to i64
  %47 = add nuw nsw i64 %22, %46
  %48 = shl nuw nsw i64 %47, 2
  %49 = add nsw i64 %26, %17
  %50 = add nsw i64 %49, %43
  %51 = add nsw i64 %50, %48
  %52 = shl nuw nsw i64 %46, 2
  %53 = add i64 %51, %52
  %54 = add i64 %53, %36
  br i1 %45, label %55, label %71

55:                                               ; preds = %35
  switch i32 %30, label %56 [
    i32 2, label %60
    i32 4, label %60
    i32 1, label %60
  ]

56:                                               ; preds = %55
  %57 = icmp eq i32 %30, 3
  %58 = zext i1 %57 to i64
  %59 = shl nuw nsw i64 %58, 3
  br label %60

60:                                               ; preds = %56, %55, %55, %55
  %61 = phi i64 [ 8, %55 ], [ %59, %56 ], [ 8, %55 ], [ 8, %55 ]
  %62 = add i64 %61, %51
  %63 = add i64 %3, -1
  %64 = shl i64 %62, 32
  %65 = ashr exact i64 %64, 32
  %66 = add i64 %63, %65
  %67 = inttoptr i64 %66 to i32*
  %68 = load i32, i32* %67, align 4, !noalias !115
  %69 = ashr i32 %68, 1
  %70 = mul i32 %69, 12
  br label %71

71:                                               ; preds = %35, %60
  %72 = phi i32 [ %70, %60 ], [ 0, %35 ]
  %73 = trunc i64 %54 to i32
  %74 = add i32 %73, -4
  %75 = add i32 %74, %72
  %76 = sdiv i32 %75, 4
  ret i32 %76
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal9ScopeInfo21RecreateWithBlockListEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_9StringSetEEE(%"class.v8::internal::Isolate"*, i64*, i64*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::Handle<v8::internal::ScopeInfo>::ObjectRef", align 8
  %5 = alloca %"class.v8::internal::Handle<v8::internal::ScopeInfo>::ObjectRef", align 8
  %6 = load i64, i64* %1, align 8
  %7 = add i64 %6, 3
  %8 = inttoptr i64 %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = and i32 %9, 536870912
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %157

12:                                               ; preds = %3
  %13 = bitcast %"class.v8::internal::Handle<v8::internal::ScopeInfo>::ObjectRef"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #9
  %14 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::ScopeInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::ScopeInfo>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %6, i64* %14, align 8
  %15 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::ScopeInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::ScopeInfo>::ObjectRef"* %4, i64 0, i32 0
  %16 = call i32 @_ZNK2v88internal9ScopeInfo6lengthEv(%"class.v8::internal::ScopeInfo"* nonnull %15)
  %17 = add nsw i32 %16, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #9
  %18 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %19 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE12NewScopeInfoEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %18, i32 %17, i8 zeroext 1) #9
  %20 = load i64, i64* %19, align 8
  %21 = load i64, i64* %1, align 8
  %22 = add i64 %20, 3
  %23 = add i64 %21, 3
  %24 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 2
  tail call void @_ZN2v88internal4Heap9CopyRangeINS0_20CompressedObjectSlotEEEvNS0_10HeapObjectET_S5_iNS0_16WriteBarrierModeE(%"class.v8::internal::Heap"* %24, i64 %20, i64 %22, i64 %23, i32 3, i32 4) #9
  %25 = load i64, i64* %19, align 8
  %26 = add i64 %25, 3
  %27 = inttoptr i64 %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = and i32 %28, -536870914
  %30 = or i32 %29, 536870912
  store atomic volatile i32 %30, i32* %27 monotonic, align 4
  %31 = load i64, i64* %19, align 8
  %32 = load i64, i64* %1, align 8
  %33 = add i64 %31, 11
  %34 = inttoptr i64 %33 to i32*
  %35 = load i32, i32* %34, align 4, !noalias !116
  %36 = lshr i32 %35, 1
  %37 = shl i32 %36, 3
  %38 = add i32 %37, 16
  %39 = add i64 %31, 3
  %40 = inttoptr i64 %39 to i32*
  %41 = load i32, i32* %40, align 4, !noalias !133
  %42 = lshr i32 %41, 9
  %43 = and i32 %42, 4
  %44 = or i32 %38, %43
  %45 = lshr i32 %41, 8
  %46 = and i32 %45, 3
  %47 = add nsw i32 %46, -1
  %48 = icmp ult i32 %47, 2
  %49 = zext i1 %48 to i32
  %50 = shl nuw nsw i32 %49, 2
  %51 = and i32 %41, 24576
  %52 = icmp ne i32 %51, 0
  %53 = zext i1 %52 to i32
  %54 = shl nuw nsw i32 %53, 3
  %55 = lshr i32 %41, 13
  %56 = and i32 %55, 4
  %57 = lshr i32 %41, 1
  %58 = and i32 %57, 15
  switch i32 %58, label %59 [
    i32 2, label %63
    i32 4, label %63
    i32 1, label %63
  ]

59:                                               ; preds = %12
  %60 = icmp eq i32 %58, 3
  %61 = zext i1 %60 to i32
  %62 = shl nuw nsw i32 %61, 3
  br label %63

63:                                               ; preds = %12, %12, %12, %59
  %64 = phi i32 [ 8, %12 ], [ %62, %59 ], [ 8, %12 ], [ 8, %12 ]
  %65 = lshr i32 %41, 21
  %66 = and i32 %65, 4
  %67 = add nsw i32 %56, -4
  %68 = add nsw i32 %67, %66
  %69 = add i32 %68, %44
  %70 = add i32 %69, %54
  %71 = add i32 %70, %50
  %72 = add i32 %71, %64
  %73 = sdiv i32 %72, 4
  %74 = add nsw i32 %73, -3
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %80, label %76

76:                                               ; preds = %63
  %77 = add i64 %31, 15
  %78 = add i64 %32, 15
  tail call void @_ZN2v88internal4Heap9CopyRangeINS0_20CompressedObjectSlotEEEvNS0_10HeapObjectET_S5_iNS0_16WriteBarrierModeE(%"class.v8::internal::Heap"* %24, i64 %31, i64 %77, i64 %78, i32 %74, i32 4) #9
  %79 = load i64, i64* %19, align 8
  br label %80

80:                                               ; preds = %63, %76
  %81 = phi i64 [ %31, %63 ], [ %79, %76 ]
  %82 = bitcast %"class.v8::internal::Handle<v8::internal::ScopeInfo>::ObjectRef"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %82) #9
  %83 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::ScopeInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::ScopeInfo>::ObjectRef"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %81, i64* %83, align 8
  %84 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::ScopeInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::ScopeInfo>::ObjectRef"* %5, i64 0, i32 0, i32 0
  %85 = load i64, i64* %2, align 8
  call void @_ZN2v88internal24TorqueGeneratedScopeInfoINS0_9ScopeInfoENS0_10HeapObjectEE21set_locals_block_listENS0_10FixedArrayENS0_16WriteBarrierModeE(%"class.v8::internal::TorqueGeneratedScopeInfo"* nonnull %84, i64 %85, i32 4)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %82) #9
  %86 = load i64, i64* %19, align 8
  %87 = add i64 %86, 11
  %88 = inttoptr i64 %87 to i32*
  %89 = load i32, i32* %88, align 4, !noalias !134
  %90 = lshr i32 %89, 1
  %91 = shl i32 %90, 3
  %92 = add i32 %91, 16
  %93 = add i64 %86, 3
  %94 = inttoptr i64 %93 to i32*
  %95 = load i32, i32* %94, align 4, !noalias !151
  %96 = lshr i32 %95, 9
  %97 = and i32 %96, 4
  %98 = or i32 %92, %97
  %99 = lshr i32 %95, 8
  %100 = and i32 %99, 3
  %101 = add nsw i32 %100, -1
  %102 = icmp ult i32 %101, 2
  %103 = zext i1 %102 to i32
  %104 = shl nuw nsw i32 %103, 2
  %105 = and i32 %95, 24576
  %106 = icmp ne i32 %105, 0
  %107 = zext i1 %106 to i32
  %108 = shl nuw nsw i32 %107, 3
  %109 = lshr i32 %95, 13
  %110 = and i32 %109, 4
  %111 = lshr i32 %95, 1
  %112 = and i32 %111, 15
  switch i32 %112, label %113 [
    i32 2, label %117
    i32 4, label %117
    i32 1, label %117
  ]

113:                                              ; preds = %80
  %114 = icmp eq i32 %112, 3
  %115 = zext i1 %114 to i32
  %116 = shl nuw nsw i32 %115, 3
  br label %117

117:                                              ; preds = %80, %80, %80, %113
  %118 = phi i32 [ 8, %80 ], [ %116, %113 ], [ 8, %80 ], [ 8, %80 ]
  %119 = lshr i32 %95, 21
  %120 = and i32 %119, 4
  %121 = add nsw i32 %110, -4
  %122 = add nsw i32 %121, %120
  %123 = add i32 %122, %98
  %124 = add i32 %123, %108
  %125 = add i32 %124, %104
  %126 = add i32 %118, %125
  %127 = sdiv i32 %126, 4
  %128 = load i64, i64* %1, align 8
  switch i32 %112, label %129 [
    i32 2, label %133
    i32 4, label %133
    i32 1, label %133
  ]

129:                                              ; preds = %117
  %130 = icmp eq i32 %112, 3
  %131 = zext i1 %130 to i32
  %132 = shl nuw nsw i32 %131, 3
  br label %133

133:                                              ; preds = %117, %117, %117, %129
  %134 = phi i32 [ 8, %117 ], [ %132, %129 ], [ 8, %117 ], [ 8, %117 ]
  %135 = add i32 %134, %125
  %136 = sdiv i32 %135, 4
  switch i32 %112, label %137 [
    i32 2, label %141
    i32 4, label %141
    i32 1, label %141
  ]

137:                                              ; preds = %133
  %138 = icmp eq i32 %112, 3
  %139 = zext i1 %138 to i32
  %140 = shl nuw nsw i32 %139, 3
  br label %141

141:                                              ; preds = %133, %133, %133, %137
  %142 = phi i32 [ 8, %133 ], [ %140, %137 ], [ 8, %133 ], [ 8, %133 ]
  %143 = add i32 %142, %125
  %144 = sdiv i32 %143, 4
  %145 = sub i32 %16, %144
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %157, label %147

147:                                              ; preds = %141
  %148 = shl nsw i32 %127, 2
  %149 = add i32 %148, 4
  %150 = or i32 %149, 3
  %151 = sext i32 %150 to i64
  %152 = add i64 %86, %151
  %153 = shl nsw i32 %136, 2
  %154 = or i32 %153, 3
  %155 = sext i32 %154 to i64
  %156 = add i64 %128, %155
  call void @_ZN2v88internal4Heap9CopyRangeINS0_20CompressedObjectSlotEEEvNS0_10HeapObjectET_S5_iNS0_16WriteBarrierModeE(%"class.v8::internal::Heap"* %24, i64 %86, i64 %152, i64 %156, i32 %145, i32 4) #9
  br label %157

157:                                              ; preds = %3, %147, %141
  %158 = phi i64* [ %1, %3 ], [ %19, %141 ], [ %19, %147 ]
  ret i64* %158
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo18HasLocalsBlockListEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 536870912
  %8 = icmp ne i32 %7, 0
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo20LocalsBlockListIndexEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4, !noalias !152
  %7 = lshr i32 %6, 1
  %8 = shl i32 %7, 3
  %9 = add i32 %8, 16
  %10 = add i64 %3, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4, !noalias !169
  %13 = lshr i32 %12, 9
  %14 = and i32 %13, 4
  %15 = or i32 %9, %14
  %16 = lshr i32 %12, 8
  %17 = and i32 %16, 3
  %18 = add nsw i32 %17, -1
  %19 = icmp ult i32 %18, 2
  %20 = zext i1 %19 to i32
  %21 = shl nuw nsw i32 %20, 2
  %22 = and i32 %12, 24576
  %23 = icmp ne i32 %22, 0
  %24 = zext i1 %23 to i32
  %25 = shl nuw nsw i32 %24, 3
  %26 = lshr i32 %12, 13
  %27 = and i32 %26, 4
  %28 = lshr i32 %12, 1
  %29 = and i32 %28, 15
  switch i32 %29, label %30 [
    i32 2, label %34
    i32 4, label %34
    i32 1, label %34
  ]

30:                                               ; preds = %1
  %31 = icmp eq i32 %29, 3
  %32 = zext i1 %31 to i32
  %33 = shl nuw nsw i32 %32, 3
  br label %34

34:                                               ; preds = %1, %1, %1, %30
  %35 = phi i32 [ 8, %1 ], [ %33, %30 ], [ 8, %1 ], [ 8, %1 ]
  %36 = lshr i32 %12, 21
  %37 = and i32 %36, 4
  %38 = add nsw i32 %27, -4
  %39 = add nsw i32 %38, %37
  %40 = add i32 %39, %15
  %41 = add i32 %40, %25
  %42 = add i32 %41, %21
  %43 = add i32 %42, %35
  %44 = sdiv i32 %43, 4
  ret i32 %44
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal24TorqueGeneratedScopeInfoINS0_9ScopeInfoENS0_10HeapObjectEE21set_locals_block_listENS0_10FixedArrayENS0_16WriteBarrierModeE(%"class.v8::internal::TorqueGeneratedScopeInfo"*, i64, i32) local_unnamed_addr #6 comdat align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::TorqueGeneratedScopeInfo", %"class.v8::internal::TorqueGeneratedScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 11
  %7 = inttoptr i64 %6 to i32*
  %8 = load i32, i32* %7, align 4, !noalias !170
  %9 = lshr i32 %8, 1
  %10 = shl i32 %9, 3
  %11 = add i32 %10, 16
  %12 = add i64 %5, 3
  %13 = inttoptr i64 %12 to i32*
  %14 = load i32, i32* %13, align 4, !noalias !187
  %15 = lshr i32 %14, 9
  %16 = and i32 %15, 4
  %17 = or i32 %11, %16
  %18 = lshr i32 %14, 8
  %19 = and i32 %18, 3
  %20 = add nsw i32 %19, -1
  %21 = icmp ult i32 %20, 2
  %22 = zext i1 %21 to i32
  %23 = shl nuw nsw i32 %22, 2
  %24 = and i32 %14, 24576
  %25 = icmp ne i32 %24, 0
  %26 = zext i1 %25 to i32
  %27 = shl nuw nsw i32 %26, 3
  %28 = lshr i32 %14, 13
  %29 = and i32 %28, 4
  %30 = lshr i32 %14, 1
  %31 = and i32 %30, 15
  switch i32 %31, label %32 [
    i32 2, label %36
    i32 4, label %36
    i32 1, label %36
  ]

32:                                               ; preds = %3
  %33 = icmp eq i32 %31, 3
  %34 = zext i1 %33 to i32
  %35 = shl nuw nsw i32 %34, 3
  br label %36

36:                                               ; preds = %3, %3, %3, %32
  %37 = phi i32 [ 8, %3 ], [ %35, %32 ], [ 8, %3 ], [ 8, %3 ]
  %38 = lshr i32 %14, 21
  %39 = and i32 %38, 4
  %40 = add nuw nsw i32 %39, %29
  %41 = add i32 %40, %17
  %42 = add i32 %41, %27
  %43 = add i32 %42, %23
  %44 = add i32 %43, %37
  %45 = sext i32 %44 to i64
  %46 = add nsw i64 %45, -1
  %47 = add i64 %46, %5
  %48 = inttoptr i64 %47 to i32*
  %49 = trunc i64 %1 to i32
  store atomic volatile i32 %49, i32* %48 monotonic, align 4
  switch i32 %2, label %66 [
    i32 0, label %83
    i32 4, label %50
  ]

50:                                               ; preds = %36
  %51 = load i64, i64* %4, align 8
  %52 = add i64 %46, %51
  %53 = and i64 %1, 1
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %66, label %55

55:                                               ; preds = %50
  %56 = and i64 %51, -262144
  %57 = or i64 %56, 8
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = and i64 %59, 262144
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %66, label %62

62:                                               ; preds = %55
  %63 = or i64 %56, 16
  %64 = inttoptr i64 %63 to %"class.v8::internal::Heap"**
  %65 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %64, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %65, i64 %51, i64 %52, i64 %1) #9
  br label %66

66:                                               ; preds = %62, %55, %50, %36
  %67 = load i64, i64* %4, align 8
  %68 = add i64 %46, %67
  %69 = and i64 %1, -262144
  %70 = or i64 %69, 8
  %71 = inttoptr i64 %70 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = and i64 %72, 24
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %83, label %75

75:                                               ; preds = %66
  %76 = and i64 %67, -262144
  %77 = or i64 %76, 8
  %78 = inttoptr i64 %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = and i64 %79, 24
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %83

82:                                               ; preds = %75
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %67, i64 %68, i64 %1) #9
  br label %83

83:                                               ; preds = %82, %75, %66, %36
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN2v88internal9ScopeInfo5EmptyEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 28
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo7IsEmptyEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1073741824
  %8 = icmp ne i32 %7, 0
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZNK2v88internal9ScopeInfo10scope_typeEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = lshr i32 %6, 1
  %8 = trunc i32 %7 to i8
  %9 = and i8 %8, 15
  ret i8 %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo15is_script_scopeEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1073741854
  %8 = icmp eq i32 %7, 8
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo23SloppyEvalCanExtendVarsEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 32
  %8 = icmp ne i32 %7, 0
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo13language_modeEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 64
  %8 = icmp ne i32 %7, 0
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo20is_declaration_scopeEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = trunc i32 %6 to i8
  %8 = icmp slt i8 %7, 0
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo13ContextLengthEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1073741824
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %41

9:                                                ; preds = %1
  %10 = add i64 %3, 11
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = ashr i32 %12, 1
  %14 = and i32 %6, 24576
  %15 = icmp eq i32 %14, 16384
  %16 = and i32 %6, 33554432
  %17 = icmp ne i32 %16, 0
  %18 = icmp sgt i32 %12, 1
  %19 = or i1 %17, %18
  %20 = or i1 %15, %19
  br i1 %20, label %34, label %21

21:                                               ; preds = %9
  %22 = lshr i32 %6, 1
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 15
  switch i8 %24, label %41 [
    i8 7, label %34
    i8 0, label %34
    i8 6, label %25
    i8 2, label %28
    i8 3, label %34
  ]

25:                                               ; preds = %21
  %26 = and i32 %6, 160
  %27 = icmp eq i32 %26, 160
  br i1 %27, label %34, label %41

28:                                               ; preds = %21
  %29 = and i32 %6, 32
  %30 = icmp ne i32 %29, 0
  %31 = trunc i32 %22 to i16
  %32 = icmp slt i16 %31, 0
  %33 = or i1 %30, %32
  br i1 %33, label %34, label %41

34:                                               ; preds = %21, %21, %21, %25, %28, %9
  %35 = and i32 %6, 134217728
  %36 = icmp eq i32 %35, 0
  %37 = select i1 %36, i32 2, i32 3
  %38 = zext i1 %15 to i32
  %39 = add nuw nsw i32 %37, %38
  %40 = add nsw i32 %39, %13
  br label %41

41:                                               ; preds = %1, %21, %28, %25, %34
  %42 = phi i32 [ %40, %34 ], [ 0, %1 ], [ 0, %25 ], [ 0, %28 ], [ 0, %21 ]
  ret i32 %42
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo23HasContextExtensionSlotEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 134217728
  %8 = icmp ne i32 %7, 0
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo11HasReceiverEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 768
  %8 = icmp ne i32 %7, 0
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo20HasAllocatedReceiverEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = lshr i32 %6, 8
  %8 = and i32 %7, 3
  %9 = add nsw i32 %8, -1
  %10 = icmp ult i32 %9, 2
  ret i1 %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo13HasClassBrandEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1024
  %8 = icmp ne i32 %7, 0
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo26HasSavedClassVariableIndexEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 2048
  %8 = icmp ne i32 %7, 0
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo12HasNewTargetEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 4096
  %8 = icmp ne i32 %7, 0
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo15HasFunctionNameEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 24576
  %8 = icmp ne i32 %7, 0
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo23HasInferredFunctionNameEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = trunc i32 %6 to i16
  %8 = icmp slt i16 %7, 0
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo15HasPositionInfoEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1073741824
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %15

9:                                                ; preds = %1
  %10 = lshr i32 %6, 1
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 15
  %13 = add nsw i8 %12, -1
  %14 = icmp ult i8 %13, 4
  br label %15

15:                                               ; preds = %1, %9
  %16 = phi i1 [ %14, %9 ], [ false, %1 ]
  ret i1 %16
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo21HasSharedFunctionNameEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4, !noalias !188
  %7 = lshr i32 %6, 1
  %8 = shl i32 %7, 3
  %9 = add i32 %8, 16
  %10 = add i64 %3, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4, !noalias !197
  %13 = lshr i32 %12, 9
  %14 = and i32 %13, 4
  %15 = or i32 %9, %14
  %16 = lshr i32 %12, 8
  %17 = and i32 %16, 3
  %18 = add nsw i32 %17, -1
  %19 = icmp ult i32 %18, 2
  %20 = zext i1 %19 to i32
  %21 = shl nuw nsw i32 %20, 2
  %22 = add i32 %21, %15
  %23 = add i64 %3, -1
  %24 = sext i32 %22 to i64
  %25 = add i64 %23, %24
  %26 = inttoptr i64 %25 to i32*
  %27 = load i32, i32* %26, align 4
  %28 = icmp ne i32 %27, 0
  ret i1 %28
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2v88internal9ScopeInfo12FunctionNameEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 11
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4, !noalias !198
  %8 = lshr i32 %7, 1
  %9 = shl i32 %8, 3
  %10 = add i32 %9, 16
  %11 = add i64 %3, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4, !noalias !207
  %14 = lshr i32 %13, 9
  %15 = and i32 %14, 4
  %16 = or i32 %10, %15
  %17 = lshr i32 %13, 8
  %18 = and i32 %17, 3
  %19 = add nsw i32 %18, -1
  %20 = icmp ult i32 %19, 2
  %21 = zext i1 %20 to i32
  %22 = shl nuw nsw i32 %21, 2
  %23 = add i32 %22, %16
  %24 = add i64 %3, -1
  %25 = sext i32 %23 to i64
  %26 = add i64 %24, %25
  %27 = inttoptr i64 %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = zext i32 %28 to i64
  %30 = or i64 %4, %29
  ret i64 %30
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9ScopeInfo15SetFunctionNameENS0_6ObjectE(%"class.v8::internal::ScopeInfo"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 11
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4, !noalias !208
  %8 = lshr i32 %7, 1
  %9 = shl i32 %8, 3
  %10 = add i32 %9, 16
  %11 = add i64 %4, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4, !noalias !217
  %14 = lshr i32 %13, 9
  %15 = and i32 %14, 4
  %16 = or i32 %10, %15
  %17 = lshr i32 %13, 8
  %18 = and i32 %17, 3
  %19 = add nsw i32 %18, -1
  %20 = icmp ult i32 %19, 2
  %21 = zext i1 %20 to i32
  %22 = shl nuw nsw i32 %21, 2
  %23 = add i32 %22, %16
  %24 = sext i32 %23 to i64
  %25 = add nsw i64 %24, -1
  %26 = add i64 %25, %4
  %27 = inttoptr i64 %26 to i32*
  %28 = trunc i64 %1 to i32
  store atomic volatile i32 %28, i32* %27 monotonic, align 4
  %29 = load i64, i64* %3, align 8
  %30 = add i64 %25, %29
  %31 = and i64 %1, 1
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %63, label %33

33:                                               ; preds = %2
  %34 = and i64 %29, -262144
  %35 = or i64 %34, 8
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = and i64 %37, 262144
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %46, label %40

40:                                               ; preds = %33
  %41 = or i64 %34, 16
  %42 = inttoptr i64 %41 to %"class.v8::internal::Heap"**
  %43 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %42, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %43, i64 %29, i64 %30, i64 %1) #9
  %44 = load i64, i64* %3, align 8
  %45 = add i64 %44, %25
  br label %46

46:                                               ; preds = %40, %33
  %47 = phi i64 [ %45, %40 ], [ %30, %33 ]
  %48 = phi i64 [ %44, %40 ], [ %29, %33 ]
  %49 = and i64 %1, -262144
  %50 = or i64 %49, 8
  %51 = inttoptr i64 %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = and i64 %52, 24
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %63, label %55

55:                                               ; preds = %46
  %56 = and i64 %48, -262144
  %57 = or i64 %56, 8
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = and i64 %59, 24
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %55
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %48, i64 %47, i64 %1) #9
  br label %63

63:                                               ; preds = %2, %46, %55, %62
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9ScopeInfo23SetInferredFunctionNameENS0_6StringE(%"class.v8::internal::ScopeInfo"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 11
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4, !noalias !218
  %8 = lshr i32 %7, 1
  %9 = shl i32 %8, 3
  %10 = add i32 %9, 16
  %11 = add i64 %4, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4, !noalias !229
  %14 = lshr i32 %13, 9
  %15 = and i32 %14, 4
  %16 = or i32 %10, %15
  %17 = lshr i32 %13, 8
  %18 = and i32 %17, 3
  %19 = add nsw i32 %18, -1
  %20 = icmp ult i32 %19, 2
  %21 = zext i1 %20 to i32
  %22 = shl nuw nsw i32 %21, 2
  %23 = and i32 %13, 24576
  %24 = icmp ne i32 %23, 0
  %25 = zext i1 %24 to i32
  %26 = shl nuw nsw i32 %25, 3
  %27 = add i32 %26, %16
  %28 = add i32 %27, %22
  %29 = sext i32 %28 to i64
  %30 = add nsw i64 %29, -1
  %31 = add i64 %30, %4
  %32 = inttoptr i64 %31 to i32*
  %33 = trunc i64 %1 to i32
  store atomic volatile i32 %33, i32* %32 monotonic, align 4
  %34 = load i64, i64* %3, align 8
  %35 = add i64 %30, %34
  %36 = and i64 %1, 1
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %51, label %38

38:                                               ; preds = %2
  %39 = and i64 %34, -262144
  %40 = or i64 %39, 8
  %41 = inttoptr i64 %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = and i64 %42, 262144
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %51, label %45

45:                                               ; preds = %38
  %46 = or i64 %39, 16
  %47 = inttoptr i64 %46 to %"class.v8::internal::Heap"**
  %48 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %47, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %48, i64 %34, i64 %35, i64 %1) #9
  %49 = load i64, i64* %3, align 8
  %50 = add i64 %49, %30
  br label %51

51:                                               ; preds = %45, %38, %2
  %52 = phi i64 [ %50, %45 ], [ %35, %38 ], [ %35, %2 ]
  %53 = phi i64 [ %49, %45 ], [ %34, %38 ], [ %34, %2 ]
  %54 = and i64 %1, -262144
  %55 = or i64 %54, 8
  %56 = inttoptr i64 %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = and i64 %57, 24
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %68, label %60

60:                                               ; preds = %51
  %61 = and i64 %53, -262144
  %62 = or i64 %61, 8
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = and i64 %64, 24
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %68

67:                                               ; preds = %60
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %53, i64 %52, i64 %1) #9
  br label %68

68:                                               ; preds = %51, %60, %67
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo17HasOuterScopeInfoEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 8388608
  %8 = icmp ne i32 %7, 0
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo20IsDebugEvaluateScopeEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 16777216
  %8 = icmp ne i32 %7, 0
  ret i1 %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal9ScopeInfo23SetIsDebugEvaluateScopeEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1073741824
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9, !prof !230

9:                                                ; preds = %1
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0)) #13
  unreachable

10:                                               ; preds = %1
  %11 = and i32 %6, -16777218
  %12 = or i32 %11, 16777216
  store atomic volatile i32 %12, i32* %5 monotonic, align 4
  ret void
}

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #8

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo32PrivateNameLookupSkipsOuterClassEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 67108864
  %8 = icmp ne i32 %7, 0
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo15IsReplModeScopeEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 268435456
  %8 = icmp ne i32 %7, 0
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2v88internal9ScopeInfo15LocalsBlockListEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 11
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4, !noalias !231
  %8 = lshr i32 %7, 1
  %9 = shl i32 %8, 3
  %10 = add i32 %9, 16
  %11 = add i64 %3, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4, !noalias !248
  %14 = lshr i32 %13, 9
  %15 = and i32 %14, 4
  %16 = or i32 %10, %15
  %17 = lshr i32 %13, 8
  %18 = and i32 %17, 3
  %19 = add nsw i32 %18, -1
  %20 = icmp ult i32 %19, 2
  %21 = zext i1 %20 to i32
  %22 = shl nuw nsw i32 %21, 2
  %23 = and i32 %13, 24576
  %24 = icmp ne i32 %23, 0
  %25 = zext i1 %24 to i32
  %26 = shl nuw nsw i32 %25, 3
  %27 = lshr i32 %13, 13
  %28 = and i32 %27, 4
  %29 = lshr i32 %13, 1
  %30 = and i32 %29, 15
  switch i32 %30, label %31 [
    i32 2, label %35
    i32 4, label %35
    i32 1, label %35
  ]

31:                                               ; preds = %1
  %32 = icmp eq i32 %30, 3
  %33 = zext i1 %32 to i32
  %34 = shl nuw nsw i32 %33, 3
  br label %35

35:                                               ; preds = %1, %1, %1, %31
  %36 = phi i32 [ 8, %1 ], [ %34, %31 ], [ 8, %1 ], [ 8, %1 ]
  %37 = lshr i32 %13, 21
  %38 = and i32 %37, 4
  %39 = add nuw nsw i32 %38, %28
  %40 = add i32 %39, %16
  %41 = add i32 %40, %26
  %42 = add i32 %41, %22
  %43 = add i32 %42, %36
  %44 = add i64 %3, -1
  %45 = sext i32 %43 to i64
  %46 = add i64 %44, %45
  %47 = inttoptr i64 %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = zext i32 %48 to i64
  %50 = or i64 %4, %49
  ret i64 %50
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo10HasContextEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1073741824
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %42

9:                                                ; preds = %1
  %10 = add i64 %3, 11
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = ashr i32 %12, 1
  %14 = and i32 %6, 24576
  %15 = icmp eq i32 %14, 16384
  %16 = and i32 %6, 33554432
  %17 = icmp ne i32 %16, 0
  %18 = icmp sgt i32 %12, 1
  %19 = or i1 %17, %18
  %20 = or i1 %15, %19
  br i1 %20, label %34, label %21

21:                                               ; preds = %9
  %22 = lshr i32 %6, 1
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 15
  switch i8 %24, label %42 [
    i8 7, label %34
    i8 0, label %34
    i8 6, label %25
    i8 2, label %28
    i8 3, label %34
  ]

25:                                               ; preds = %21
  %26 = and i32 %6, 160
  %27 = icmp eq i32 %26, 160
  br i1 %27, label %34, label %42

28:                                               ; preds = %21
  %29 = and i32 %6, 32
  %30 = icmp ne i32 %29, 0
  %31 = trunc i32 %22 to i16
  %32 = icmp slt i16 %31, 0
  %33 = or i1 %30, %32
  br i1 %33, label %34, label %42

34:                                               ; preds = %28, %25, %21, %21, %21, %9
  %35 = and i32 %6, 134217728
  %36 = icmp eq i32 %35, 0
  %37 = select i1 %36, i32 2, i32 3
  %38 = zext i1 %15 to i32
  %39 = add nuw nsw i32 %37, %38
  %40 = add nsw i32 %39, %13
  %41 = icmp sgt i32 %40, 0
  br label %42

42:                                               ; preds = %1, %21, %25, %28, %34
  %43 = phi i1 [ %41, %34 ], [ false, %1 ], [ false, %25 ], [ false, %28 ], [ false, %21 ]
  ret i1 %43
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2v88internal9ScopeInfo20InferredFunctionNameEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 11
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4, !noalias !249
  %8 = lshr i32 %7, 1
  %9 = shl i32 %8, 3
  %10 = add i32 %9, 16
  %11 = add i64 %3, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4, !noalias !260
  %14 = lshr i32 %13, 9
  %15 = and i32 %14, 4
  %16 = or i32 %10, %15
  %17 = lshr i32 %13, 8
  %18 = and i32 %17, 3
  %19 = add nsw i32 %18, -1
  %20 = icmp ult i32 %19, 2
  %21 = zext i1 %20 to i32
  %22 = shl nuw nsw i32 %21, 2
  %23 = and i32 %13, 24576
  %24 = icmp ne i32 %23, 0
  %25 = zext i1 %24 to i32
  %26 = shl nuw nsw i32 %25, 3
  %27 = add i32 %26, %16
  %28 = add i32 %27, %22
  %29 = add i64 %3, -1
  %30 = sext i32 %28 to i64
  %31 = add i64 %29, %30
  %32 = inttoptr i64 %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = zext i32 %33 to i64
  %35 = or i64 %4, %34
  ret i64 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal9ScopeInfo17FunctionDebugNameEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 24576
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %30

9:                                                ; preds = %1
  %10 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %11 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %10, null
  br i1 %11, label %18, label %12

12:                                               ; preds = %9
  %13 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %10, i64 0, i32 0, i32 1
  %14 = load i8, i8* %13, align 8, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %10, i64 0, i32 1, i64 0
  br label %26

18:                                               ; preds = %12, %9
  %19 = and i64 %3, -262144
  %20 = or i64 %19, 16
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21, align 16
  %23 = add i64 %22, -41416
  %24 = inttoptr i64 %23 to %"class.v8::internal::Isolate"*
  %25 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %24, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %26

26:                                               ; preds = %16, %18
  %27 = phi i64* [ %25, %18 ], [ %17, %16 ]
  %28 = getelementptr inbounds i64, i64* %27, i64 9
  %29 = load i64, i64* %28, align 8
  br label %116

30:                                               ; preds = %1
  %31 = and i64 %3, -4294967296
  %32 = add i64 %3, 11
  %33 = inttoptr i64 %32 to i32*
  %34 = load i32, i32* %33, align 4, !noalias !261
  %35 = lshr i32 %34, 1
  %36 = shl i32 %35, 3
  %37 = add i32 %36, 16
  %38 = lshr i32 %6, 9
  %39 = and i32 %38, 4
  %40 = or i32 %37, %39
  %41 = lshr i32 %6, 8
  %42 = and i32 %41, 3
  %43 = add nsw i32 %42, -1
  %44 = icmp ult i32 %43, 2
  %45 = zext i1 %44 to i32
  %46 = shl nuw nsw i32 %45, 2
  %47 = add i32 %40, %46
  %48 = add i64 %3, -1
  %49 = sext i32 %47 to i64
  %50 = add i64 %48, %49
  %51 = inttoptr i64 %50 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = zext i32 %52 to i64
  %54 = or i64 %31, %53
  %55 = and i64 %53, 1
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %72, label %57

57:                                               ; preds = %30
  %58 = add i64 %54, -1
  %59 = inttoptr i64 %58 to i32*
  %60 = load atomic i32, i32* %59 monotonic, align 4
  %61 = zext i32 %60 to i64
  %62 = or i64 %31, %61
  %63 = add i64 %62, 7
  %64 = inttoptr i64 %63 to i16*
  %65 = load atomic i16, i16* %64 monotonic, align 2
  %66 = icmp ult i16 %65, 64
  br i1 %66, label %67, label %72

67:                                               ; preds = %57
  %68 = add i64 %54, 7
  %69 = inttoptr i64 %68 to i32*
  %70 = load i32, i32* %69, align 4
  %71 = icmp sgt i32 %70, 0
  br i1 %71, label %116, label %72

72:                                               ; preds = %30, %57, %67
  %73 = trunc i32 %6 to i16
  %74 = icmp slt i16 %73, 0
  br i1 %74, label %75, label %95

75:                                               ; preds = %72
  %76 = add i32 %47, 8
  %77 = sext i32 %76 to i64
  %78 = add i64 %48, %77
  %79 = inttoptr i64 %78 to i32*
  %80 = load i32, i32* %79, align 4
  %81 = zext i32 %80 to i64
  %82 = or i64 %31, %81
  %83 = and i64 %81, 1
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %95, label %85

85:                                               ; preds = %75
  %86 = add i64 %82, -1
  %87 = inttoptr i64 %86 to i32*
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = zext i32 %88 to i64
  %90 = or i64 %31, %89
  %91 = add i64 %90, 7
  %92 = inttoptr i64 %91 to i16*
  %93 = load atomic i16, i16* %92 monotonic, align 2
  %94 = icmp ult i16 %93, 64
  br i1 %94, label %116, label %95

95:                                               ; preds = %75, %85, %72
  %96 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %97 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %96, null
  br i1 %97, label %104, label %98

98:                                               ; preds = %95
  %99 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %96, i64 0, i32 0, i32 1
  %100 = load i8, i8* %99, align 8, !range !2
  %101 = icmp eq i8 %100, 0
  br i1 %101, label %104, label %102

102:                                              ; preds = %98
  %103 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %96, i64 0, i32 1, i64 0
  br label %112

104:                                              ; preds = %98, %95
  %105 = and i64 %3, -262144
  %106 = or i64 %105, 16
  %107 = inttoptr i64 %106 to i64*
  %108 = load i64, i64* %107, align 16
  %109 = add i64 %108, -41416
  %110 = inttoptr i64 %109 to %"class.v8::internal::Isolate"*
  %111 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %110, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %112

112:                                              ; preds = %102, %104
  %113 = phi i64* [ %111, %104 ], [ %103, %102 ]
  %114 = getelementptr inbounds i64, i64* %113, i64 9
  %115 = load i64, i64* %114, align 8
  br label %116

116:                                              ; preds = %112, %67, %85, %26
  %117 = phi i64 [ %29, %26 ], [ %115, %112 ], [ %54, %67 ], [ %82, %85 ]
  ret i64 %117
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo13StartPositionEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4, !noalias !270
  %7 = lshr i32 %6, 1
  %8 = shl i32 %7, 3
  %9 = add i32 %8, 16
  %10 = add i64 %3, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4, !noalias !283
  %13 = lshr i32 %12, 9
  %14 = and i32 %13, 4
  %15 = or i32 %9, %14
  %16 = lshr i32 %12, 8
  %17 = and i32 %16, 3
  %18 = add nsw i32 %17, -1
  %19 = icmp ult i32 %18, 2
  %20 = zext i1 %19 to i32
  %21 = shl nuw nsw i32 %20, 2
  %22 = and i32 %12, 24576
  %23 = icmp ne i32 %22, 0
  %24 = zext i1 %23 to i32
  %25 = shl nuw nsw i32 %24, 3
  %26 = lshr i32 %12, 13
  %27 = and i32 %26, 4
  %28 = add i32 %15, %27
  %29 = add i32 %28, %25
  %30 = add i32 %29, %21
  %31 = add i64 %3, -1
  %32 = sext i32 %30 to i64
  %33 = add i64 %31, %32
  %34 = inttoptr i64 %33 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = ashr i32 %35, 1
  ret i32 %36
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo11EndPositionEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4, !noalias !284
  %7 = lshr i32 %6, 1
  %8 = shl i32 %7, 3
  %9 = add i32 %8, 16
  %10 = add i64 %3, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4, !noalias !297
  %13 = lshr i32 %12, 9
  %14 = and i32 %13, 4
  %15 = or i32 %9, %14
  %16 = lshr i32 %12, 8
  %17 = and i32 %16, 3
  %18 = add nsw i32 %17, -1
  %19 = icmp ult i32 %18, 2
  %20 = zext i1 %19 to i32
  %21 = shl nuw nsw i32 %20, 2
  %22 = and i32 %12, 24576
  %23 = icmp ne i32 %22, 0
  %24 = zext i1 %23 to i32
  %25 = shl nuw nsw i32 %24, 3
  %26 = lshr i32 %12, 13
  %27 = and i32 %26, 4
  %28 = add nuw nsw i32 %27, 4
  %29 = add i32 %28, %15
  %30 = add i32 %29, %25
  %31 = add i32 %30, %21
  %32 = add i64 %3, -1
  %33 = sext i32 %31 to i64
  %34 = add i64 %32, %33
  %35 = inttoptr i64 %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = ashr i32 %36, 1
  ret i32 %37
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal9ScopeInfo15SetPositionInfoEii(%"class.v8::internal::ScopeInfo"* nocapture readonly, i32, i32) local_unnamed_addr #5 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 11
  %7 = inttoptr i64 %6 to i32*
  %8 = load i32, i32* %7, align 4, !noalias !298
  %9 = lshr i32 %8, 1
  %10 = shl i32 %9, 3
  %11 = add i32 %10, 16
  %12 = add i64 %5, 3
  %13 = inttoptr i64 %12 to i32*
  %14 = load i32, i32* %13, align 4, !noalias !311
  %15 = lshr i32 %14, 9
  %16 = and i32 %15, 4
  %17 = or i32 %11, %16
  %18 = lshr i32 %14, 8
  %19 = and i32 %18, 3
  %20 = add nsw i32 %19, -1
  %21 = icmp ult i32 %20, 2
  %22 = zext i1 %21 to i32
  %23 = shl nuw nsw i32 %22, 2
  %24 = and i32 %14, 24576
  %25 = icmp ne i32 %24, 0
  %26 = zext i1 %25 to i32
  %27 = shl nuw nsw i32 %26, 3
  %28 = lshr i32 %14, 13
  %29 = and i32 %28, 4
  %30 = add i32 %17, %29
  %31 = add i32 %30, %27
  %32 = add i32 %31, %23
  %33 = shl i32 %1, 1
  %34 = add i64 %5, -1
  %35 = sext i32 %32 to i64
  %36 = add i64 %34, %35
  %37 = inttoptr i64 %36 to i32*
  store atomic volatile i32 %33, i32* %37 monotonic, align 4
  %38 = load i64, i64* %4, align 8
  %39 = add i64 %38, 11
  %40 = inttoptr i64 %39 to i32*
  %41 = load i32, i32* %40, align 4, !noalias !312
  %42 = lshr i32 %41, 1
  %43 = shl i32 %42, 3
  %44 = add i32 %43, 16
  %45 = add i64 %38, 3
  %46 = inttoptr i64 %45 to i32*
  %47 = load i32, i32* %46, align 4, !noalias !325
  %48 = lshr i32 %47, 9
  %49 = and i32 %48, 4
  %50 = or i32 %44, %49
  %51 = lshr i32 %47, 8
  %52 = and i32 %51, 3
  %53 = add nsw i32 %52, -1
  %54 = icmp ult i32 %53, 2
  %55 = zext i1 %54 to i32
  %56 = shl nuw nsw i32 %55, 2
  %57 = and i32 %47, 24576
  %58 = icmp ne i32 %57, 0
  %59 = zext i1 %58 to i32
  %60 = shl nuw nsw i32 %59, 3
  %61 = lshr i32 %47, 13
  %62 = and i32 %61, 4
  %63 = add nuw nsw i32 %62, 4
  %64 = add i32 %63, %50
  %65 = add i32 %64, %60
  %66 = add i32 %65, %56
  %67 = shl i32 %2, 1
  %68 = add i64 %38, -1
  %69 = sext i32 %66 to i64
  %70 = add i64 %68, %69
  %71 = inttoptr i64 %70 to i32*
  store atomic volatile i32 %67, i32* %71 monotonic, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2v88internal9ScopeInfo14OuterScopeInfoEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 11
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4, !noalias !326
  %8 = lshr i32 %7, 1
  %9 = shl i32 %8, 3
  %10 = add i32 %9, 16
  %11 = add i64 %3, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4, !noalias !341
  %14 = lshr i32 %13, 9
  %15 = and i32 %14, 4
  %16 = or i32 %10, %15
  %17 = lshr i32 %13, 8
  %18 = and i32 %17, 3
  %19 = add nsw i32 %18, -1
  %20 = icmp ult i32 %19, 2
  %21 = zext i1 %20 to i32
  %22 = shl nuw nsw i32 %21, 2
  %23 = and i32 %13, 24576
  %24 = icmp ne i32 %23, 0
  %25 = zext i1 %24 to i32
  %26 = shl nuw nsw i32 %25, 3
  %27 = lshr i32 %13, 13
  %28 = and i32 %27, 4
  %29 = add i32 %16, %28
  %30 = add i32 %29, %26
  %31 = add i32 %30, %22
  %32 = lshr i32 %13, 1
  %33 = and i32 %32, 15
  switch i32 %33, label %34 [
    i32 2, label %38
    i32 4, label %38
    i32 1, label %38
  ]

34:                                               ; preds = %1
  %35 = icmp eq i32 %33, 3
  %36 = zext i1 %35 to i32
  %37 = shl nuw nsw i32 %36, 3
  br label %38

38:                                               ; preds = %1, %1, %1, %34
  %39 = phi i32 [ 8, %1 ], [ %37, %34 ], [ 8, %1 ], [ 8, %1 ]
  %40 = add i32 %31, %39
  %41 = add i64 %3, -1
  %42 = sext i32 %40 to i64
  %43 = add i64 %41, %42
  %44 = inttoptr i64 %43 to i32*
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i64
  %47 = or i64 %4, %46
  ret i64 %47
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2v88internal9ScopeInfo20ModuleDescriptorInfoEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 11
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4, !noalias !342
  %8 = lshr i32 %7, 1
  %9 = shl i32 %8, 3
  %10 = add i32 %9, 16
  %11 = add i64 %3, 3
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4, !noalias !361
  %14 = lshr i32 %13, 9
  %15 = and i32 %14, 4
  %16 = or i32 %10, %15
  %17 = lshr i32 %13, 8
  %18 = and i32 %17, 3
  %19 = add nsw i32 %18, -1
  %20 = icmp ult i32 %19, 2
  %21 = zext i1 %20 to i32
  %22 = shl nuw nsw i32 %21, 2
  %23 = and i32 %13, 24576
  %24 = icmp ne i32 %23, 0
  %25 = zext i1 %24 to i32
  %26 = shl nuw nsw i32 %25, 3
  %27 = lshr i32 %13, 13
  %28 = and i32 %27, 4
  %29 = lshr i32 %13, 1
  %30 = and i32 %29, 15
  switch i32 %30, label %31 [
    i32 2, label %35
    i32 4, label %35
    i32 1, label %35
  ]

31:                                               ; preds = %1
  %32 = icmp eq i32 %30, 3
  %33 = zext i1 %32 to i32
  %34 = shl nuw nsw i32 %33, 3
  br label %35

35:                                               ; preds = %1, %1, %1, %31
  %36 = phi i32 [ 8, %1 ], [ %34, %31 ], [ 8, %1 ], [ 8, %1 ]
  %37 = lshr i32 %13, 21
  %38 = and i32 %37, 4
  %39 = add nuw nsw i32 %38, %28
  %40 = lshr i32 %13, 27
  %41 = and i32 %40, 4
  %42 = add nuw nsw i32 %39, %41
  %43 = add i32 %42, %16
  %44 = add i32 %43, %26
  %45 = add i32 %44, %22
  %46 = add i32 %45, %36
  %47 = add i64 %3, -1
  %48 = sext i32 %46 to i64
  %49 = add i64 %47, %48
  %50 = inttoptr i64 %49 to i32*
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i64
  %53 = or i64 %4, %52
  ret i64 %53
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2v88internal9ScopeInfo16ContextLocalNameEi(%"class.v8::internal::ScopeInfo"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = shl i32 %1, 2
  %7 = sext i32 %6 to i64
  %8 = add nsw i64 %7, 15
  %9 = add i64 %8, %4
  %10 = inttoptr i64 %9 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = or i64 %5, %12
  ret i64 %13
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZNK2v88internal9ScopeInfo16ContextLocalModeEi(%"class.v8::internal::ScopeInfo"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 11
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4, !noalias !362
  %8 = lshr i32 %7, 1
  %9 = add i32 %8, %1
  %10 = shl i32 %9, 2
  %11 = add i32 %10, 16
  %12 = add i64 %4, -1
  %13 = sext i32 %11 to i64
  %14 = add i64 %12, %13
  %15 = inttoptr i64 %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = lshr i32 %16, 1
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 15
  ret i8 %19
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZNK2v88internal9ScopeInfo24ContextLocalIsStaticFlagEi(%"class.v8::internal::ScopeInfo"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 11
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4, !noalias !365
  %8 = lshr i32 %7, 1
  %9 = add i32 %8, %1
  %10 = shl i32 %9, 2
  %11 = add i32 %10, 16
  %12 = add i64 %4, -1
  %13 = sext i32 %11 to i64
  %14 = add i64 %12, %13
  %15 = inttoptr i64 %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = lshr i32 %16, 23
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  ret i8 %19
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZNK2v88internal9ScopeInfo20ContextLocalInitFlagEi(%"class.v8::internal::ScopeInfo"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 11
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4, !noalias !368
  %8 = lshr i32 %7, 1
  %9 = add i32 %8, %1
  %10 = shl i32 %9, 2
  %11 = add i32 %10, 16
  %12 = add i64 %4, -1
  %13 = sext i32 %11 to i64
  %14 = add i64 %12, %13
  %15 = inttoptr i64 %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = lshr i32 %16, 5
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  ret i8 %19
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal9ScopeInfo23ContextLocalIsParameterEi(%"class.v8::internal::ScopeInfo"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 11
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4, !noalias !371
  %8 = lshr i32 %7, 1
  %9 = add i32 %8, %1
  %10 = shl i32 %9, 2
  %11 = add i32 %10, 16
  %12 = add i64 %4, -1
  %13 = sext i32 %11 to i64
  %14 = add i64 %12, %13
  %15 = inttoptr i64 %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = and i32 %16, 8388480
  %18 = icmp ne i32 %17, 8388480
  ret i1 %18
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo27ContextLocalParameterNumberEi(%"class.v8::internal::ScopeInfo"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 11
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4, !noalias !374
  %8 = lshr i32 %7, 1
  %9 = add i32 %8, %1
  %10 = shl i32 %9, 2
  %11 = add i32 %10, 16
  %12 = add i64 %4, -1
  %13 = sext i32 %11 to i64
  %14 = add i64 %12, %13
  %15 = inttoptr i64 %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = lshr i32 %16, 7
  %18 = and i32 %17, 65535
  ret i32 %18
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZNK2v88internal9ScopeInfo29ContextLocalMaybeAssignedFlagEi(%"class.v8::internal::ScopeInfo"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 11
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4, !noalias !377
  %8 = lshr i32 %7, 1
  %9 = add i32 %8, %1
  %10 = shl i32 %9, 2
  %11 = add i32 %10, 16
  %12 = add i64 %4, -1
  %13 = sext i32 %11 to i64
  %14 = add i64 %12, %13
  %15 = inttoptr i64 %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = lshr i32 %16, 6
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  ret i8 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal9ScopeInfo19VariableIsSyntheticENS0_6StringE(i64) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::String", align 8
  %3 = alloca i32, align 4
  %4 = alloca %"class.v8::internal::StringShape", align 4
  %5 = alloca %"class.v8::internal::String", align 8
  %6 = alloca i32, align 4
  %7 = alloca %"class.v8::internal::StringShape", align 4
  %8 = alloca %"class.v8::internal::String", align 8
  %9 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %0, i64* %9, align 8
  %10 = add i64 %0, 7
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %100, label %14

14:                                               ; preds = %1
  %15 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #9
  store i32 0, i32* %6, align 4
  %16 = bitcast %"class.v8::internal::StringShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #9
  %17 = getelementptr inbounds %"class.v8::internal::StringShape", %"class.v8::internal::StringShape"* %7, i64 0, i32 0
  %18 = and i64 %0, -4294967296
  %19 = add i64 %0, -1
  %20 = inttoptr i64 %19 to i32*
  %21 = load atomic i32, i32* %20 acquire, align 4
  %22 = zext i32 %21 to i64
  %23 = or i64 %18, %22
  %24 = add i64 %23, 7
  %25 = inttoptr i64 %24 to i16*
  %26 = load atomic i16, i16* %25 monotonic, align 2
  %27 = zext i16 %26 to i32
  store i32 %27, i32* %17, align 4
  %28 = load i64, i64* %9, align 8
  %29 = bitcast %"class.v8::internal::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #9
  %30 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %28, i64* %30, align 8
  %31 = call zeroext i16 @_ZN2v88internal11StringShape33DispatchToSpecificTypeWithoutCastIZNS1_22DispatchToSpecificTypeIZNKS0_6String7GetImplEiE19StringGetDispatchertJRiEEET0_S4_DpOT1_E17CastingDispatchertJRS4_S6_EEES7_SA_(%"class.v8::internal::StringShape"* nonnull %7, %"class.v8::internal::String"* nonnull dereferenceable(8) %5, i32* nonnull dereferenceable(4) %6) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #9
  %32 = icmp eq i16 %31, 46
  br i1 %32, label %100, label %33

33:                                               ; preds = %14
  %34 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %34) #9
  store i32 0, i32* %3, align 4
  %35 = bitcast %"class.v8::internal::StringShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %35) #9
  %36 = getelementptr inbounds %"class.v8::internal::StringShape", %"class.v8::internal::StringShape"* %4, i64 0, i32 0
  %37 = and i64 %28, -4294967296
  %38 = add i64 %28, -1
  %39 = inttoptr i64 %38 to i32*
  %40 = load atomic i32, i32* %39 acquire, align 4
  %41 = zext i32 %40 to i64
  %42 = or i64 %37, %41
  %43 = add i64 %42, 7
  %44 = inttoptr i64 %43 to i16*
  %45 = load atomic i16, i16* %44 monotonic, align 2
  %46 = zext i16 %45 to i32
  store i32 %46, i32* %36, align 4
  %47 = load i64, i64* %9, align 8
  %48 = bitcast %"class.v8::internal::String"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #9
  %49 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %47, i64* %49, align 8
  %50 = call zeroext i16 @_ZN2v88internal11StringShape33DispatchToSpecificTypeWithoutCastIZNS1_22DispatchToSpecificTypeIZNKS0_6String7GetImplEiE19StringGetDispatchertJRiEEET0_S4_DpOT1_E17CastingDispatchertJRS4_S6_EEES7_SA_(%"class.v8::internal::StringShape"* nonnull %4, %"class.v8::internal::String"* nonnull dereferenceable(8) %2, i32* nonnull dereferenceable(4) %3) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34) #9
  %51 = icmp eq i16 %50, 35
  br i1 %51, label %100, label %52

52:                                               ; preds = %33
  %53 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %54 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %53, null
  br i1 %54, label %61, label %55

55:                                               ; preds = %52
  %56 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %53, i64 0, i32 0, i32 1
  %57 = load i8, i8* %56, align 8, !range !2
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %61, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %53, i64 0, i32 1, i64 0
  br label %69

61:                                               ; preds = %55, %52
  %62 = and i64 %47, -262144
  %63 = or i64 %62, 16
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64, align 16
  %66 = add i64 %65, -41416
  %67 = inttoptr i64 %66 to %"class.v8::internal::Isolate"*
  %68 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %67, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %69

69:                                               ; preds = %59, %61
  %70 = phi i64* [ %68, %61 ], [ %60, %59 ]
  %71 = getelementptr inbounds i64, i64* %70, i64 449
  %72 = load i64, i64* %71, align 8
  %73 = trunc i64 %72 to i32
  %74 = trunc i64 %47 to i32
  %75 = icmp eq i32 %73, %74
  br i1 %75, label %100, label %76

76:                                               ; preds = %69
  %77 = and i64 %47, -4294967296
  %78 = add i64 %47, -1
  %79 = inttoptr i64 %78 to i32*
  %80 = load atomic i32, i32* %79 monotonic, align 4
  %81 = zext i32 %80 to i64
  %82 = or i64 %77, %81
  %83 = add i64 %82, 7
  %84 = inttoptr i64 %83 to i16*
  %85 = load atomic i16, i16* %84 monotonic, align 2
  %86 = icmp ult i16 %85, 32
  br i1 %86, label %87, label %98

87:                                               ; preds = %76
  %88 = and i64 %72, -4294967296
  %89 = add i64 %72, -1
  %90 = inttoptr i64 %89 to i32*
  %91 = load atomic i32, i32* %90 monotonic, align 4
  %92 = zext i32 %91 to i64
  %93 = or i64 %88, %92
  %94 = add i64 %93, 7
  %95 = inttoptr i64 %94 to i16*
  %96 = load atomic i16, i16* %95 monotonic, align 2
  %97 = icmp ult i16 %96, 32
  br i1 %97, label %100, label %98

98:                                               ; preds = %87, %76
  %99 = call zeroext i1 @_ZNK2v88internal6String10SlowEqualsES1_(%"class.v8::internal::String"* nonnull %8, i64 %72) #9
  br label %100

100:                                              ; preds = %98, %87, %69, %33, %14, %1
  %101 = phi i1 [ true, %33 ], [ true, %14 ], [ true, %1 ], [ %99, %98 ], [ true, %69 ], [ false, %87 ]
  ret i1 %101
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo19ModuleVariableCountEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4, !noalias !380
  %7 = lshr i32 %6, 1
  %8 = shl i32 %7, 3
  %9 = add i32 %8, 16
  %10 = add i64 %3, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4, !noalias !401
  %13 = lshr i32 %12, 9
  %14 = and i32 %13, 4
  %15 = or i32 %9, %14
  %16 = lshr i32 %12, 8
  %17 = and i32 %16, 3
  %18 = add nsw i32 %17, -1
  %19 = icmp ult i32 %18, 2
  %20 = zext i1 %19 to i32
  %21 = and i32 %12, 24576
  %22 = icmp ne i32 %21, 0
  %23 = zext i1 %22 to i32
  %24 = shl nuw nsw i32 %23, 3
  %25 = lshr i32 %12, 13
  %26 = and i32 %25, 4
  %27 = lshr i32 %12, 1
  %28 = and i32 %27, 15
  switch i32 %28, label %29 [
    i32 2, label %33
    i32 4, label %33
    i32 1, label %33
  ]

29:                                               ; preds = %1
  %30 = icmp eq i32 %28, 3
  %31 = zext i1 %30 to i32
  %32 = shl nuw nsw i32 %31, 3
  br label %33

33:                                               ; preds = %1, %1, %1, %29
  %34 = phi i32 [ 8, %1 ], [ %32, %29 ], [ 8, %1 ], [ 8, %1 ]
  %35 = lshr i32 %12, 21
  %36 = and i32 %35, 4
  %37 = lshr i32 %12, 27
  %38 = and i32 %37, 4
  %39 = and i32 %12, 30
  %40 = icmp eq i32 %39, 6
  %41 = zext i1 %40 to i32
  %42 = add nuw nsw i32 %20, %41
  %43 = shl nuw nsw i32 %42, 2
  %44 = add nuw nsw i32 %36, %26
  %45 = add nuw nsw i32 %44, %38
  %46 = add i32 %45, %15
  %47 = add i32 %46, %24
  %48 = add i32 %47, %43
  %49 = add i32 %48, %34
  %50 = add i64 %3, -1
  %51 = sext i32 %49 to i64
  %52 = add i64 %50, %51
  %53 = inttoptr i64 %52 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = ashr i32 %54, 1
  ret i32 %55
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal9ScopeInfo11ModuleIndexENS0_6StringEPNS0_12VariableModeEPNS0_18InitializationFlagEPNS0_17MaybeAssignedFlagE(%"class.v8::internal::ScopeInfo"* nocapture readonly, i64, i8*, i8*, i8*) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.v8::internal::String", align 8
  %7 = alloca i32, align 4
  %8 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %1, i64* %8, align 8
  %9 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, 11
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4, !noalias !402
  %14 = lshr i32 %13, 1
  %15 = shl i32 %14, 3
  %16 = add i32 %15, 16
  %17 = add i64 %10, 3
  %18 = inttoptr i64 %17 to i32*
  %19 = load i32, i32* %18, align 4, !noalias !423
  %20 = lshr i32 %19, 9
  %21 = and i32 %20, 4
  %22 = or i32 %16, %21
  %23 = lshr i32 %19, 8
  %24 = and i32 %23, 3
  %25 = add nsw i32 %24, -1
  %26 = icmp ult i32 %25, 2
  %27 = zext i1 %26 to i32
  %28 = and i32 %19, 24576
  %29 = icmp ne i32 %28, 0
  %30 = zext i1 %29 to i32
  %31 = shl nuw nsw i32 %30, 3
  %32 = lshr i32 %19, 13
  %33 = and i32 %32, 4
  %34 = lshr i32 %19, 1
  %35 = and i32 %34, 15
  switch i32 %35, label %36 [
    i32 2, label %40
    i32 4, label %40
    i32 1, label %40
  ]

36:                                               ; preds = %5
  %37 = icmp eq i32 %35, 3
  %38 = zext i1 %37 to i32
  %39 = shl nuw nsw i32 %38, 3
  br label %40

40:                                               ; preds = %5, %5, %5, %36
  %41 = phi i32 [ 8, %5 ], [ %39, %36 ], [ 8, %5 ], [ 8, %5 ]
  %42 = lshr i32 %19, 21
  %43 = and i32 %42, 4
  %44 = lshr i32 %19, 27
  %45 = and i32 %44, 4
  %46 = and i32 %19, 30
  %47 = icmp eq i32 %46, 6
  %48 = zext i1 %47 to i32
  %49 = add nuw nsw i32 %27, %48
  %50 = shl nuw nsw i32 %49, 2
  %51 = add nuw nsw i32 %43, %33
  %52 = add nuw nsw i32 %51, %45
  %53 = add i32 %52, %22
  %54 = add i32 %53, %31
  %55 = add i32 %54, %50
  %56 = add i32 %55, %41
  %57 = add i64 %10, -1
  %58 = sext i32 %56 to i64
  %59 = add i64 %57, %58
  %60 = inttoptr i64 %59 to i32*
  %61 = load i32, i32* %60, align 4
  %62 = ashr i32 %61, 1
  %63 = icmp sgt i32 %61, 1
  br i1 %63, label %64, label %158

64:                                               ; preds = %40, %153
  %65 = phi i64 [ %154, %153 ], [ %10, %40 ]
  %66 = phi i32 [ %151, %153 ], [ 0, %40 ]
  %67 = and i64 %65, -4294967296
  %68 = add i64 %65, 11
  %69 = inttoptr i64 %68 to i32*
  %70 = load i32, i32* %69, align 4, !noalias !424
  %71 = lshr i32 %70, 1
  %72 = shl i32 %71, 3
  %73 = add i32 %72, 16
  %74 = add i64 %65, 3
  %75 = inttoptr i64 %74 to i32*
  %76 = load i32, i32* %75, align 4, !noalias !447
  %77 = lshr i32 %76, 9
  %78 = and i32 %77, 4
  %79 = or i32 %73, %78
  %80 = lshr i32 %76, 8
  %81 = and i32 %80, 3
  %82 = add nsw i32 %81, -1
  %83 = icmp ult i32 %82, 2
  %84 = zext i1 %83 to i32
  %85 = and i32 %76, 24576
  %86 = icmp ne i32 %85, 0
  %87 = zext i1 %86 to i32
  %88 = shl nuw nsw i32 %87, 3
  %89 = lshr i32 %76, 13
  %90 = and i32 %89, 4
  %91 = lshr i32 %76, 1
  %92 = and i32 %91, 15
  switch i32 %92, label %93 [
    i32 2, label %97
    i32 4, label %97
    i32 1, label %97
  ]

93:                                               ; preds = %64
  %94 = icmp eq i32 %92, 3
  %95 = zext i1 %94 to i32
  %96 = shl nuw nsw i32 %95, 3
  br label %97

97:                                               ; preds = %64, %64, %64, %93
  %98 = phi i32 [ 8, %64 ], [ %96, %93 ], [ 8, %64 ], [ 8, %64 ]
  %99 = lshr i32 %76, 21
  %100 = and i32 %99, 4
  %101 = lshr i32 %76, 27
  %102 = and i32 %101, 4
  %103 = and i32 %76, 30
  %104 = icmp eq i32 %103, 6
  %105 = zext i1 %104 to i32
  %106 = shl nuw nsw i32 %105, 1
  %107 = or i32 %106, %84
  %108 = shl nuw nsw i32 %107, 2
  %109 = mul nsw i32 %66, 12
  %110 = add nuw i32 %90, %109
  %111 = add i32 %110, %100
  %112 = add i32 %111, %102
  %113 = add i32 %112, %79
  %114 = add i32 %113, %88
  %115 = add i32 %114, %108
  %116 = add i32 %115, %98
  %117 = add i64 %65, -1
  %118 = sext i32 %116 to i64
  %119 = add i64 %117, %118
  %120 = inttoptr i64 %119 to i32*
  %121 = load i32, i32* %120, align 4
  %122 = zext i32 %121 to i64
  %123 = or i64 %67, %122
  %124 = load i64, i64* %8, align 8
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %121, %125
  br i1 %126, label %155, label %127

127:                                              ; preds = %97
  %128 = and i64 %124, -4294967296
  %129 = add i64 %124, -1
  %130 = inttoptr i64 %129 to i32*
  %131 = load atomic i32, i32* %130 monotonic, align 4
  %132 = zext i32 %131 to i64
  %133 = or i64 %128, %132
  %134 = add i64 %133, 7
  %135 = inttoptr i64 %134 to i16*
  %136 = load atomic i16, i16* %135 monotonic, align 2
  %137 = icmp ult i16 %136, 32
  br i1 %137, label %138, label %148

138:                                              ; preds = %127
  %139 = add i64 %123, -1
  %140 = inttoptr i64 %139 to i32*
  %141 = load atomic i32, i32* %140 monotonic, align 4
  %142 = zext i32 %141 to i64
  %143 = or i64 %67, %142
  %144 = add i64 %143, 7
  %145 = inttoptr i64 %144 to i16*
  %146 = load atomic i16, i16* %145 monotonic, align 2
  %147 = icmp ult i16 %146, 32
  br i1 %147, label %150, label %148

148:                                              ; preds = %127, %138
  %149 = call zeroext i1 @_ZNK2v88internal6String10SlowEqualsES1_(%"class.v8::internal::String"* nonnull %6, i64 %123) #9
  br i1 %149, label %155, label %150

150:                                              ; preds = %138, %148
  %151 = add nuw nsw i32 %66, 1
  %152 = icmp slt i32 %151, %62
  br i1 %152, label %153, label %158

153:                                              ; preds = %150
  %154 = load i64, i64* %9, align 8
  br label %64

155:                                              ; preds = %97, %148
  %156 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %156) #9
  call void @_ZN2v88internal9ScopeInfo14ModuleVariableEiPNS0_6StringEPiPNS0_12VariableModeEPNS0_18InitializationFlagEPNS0_17MaybeAssignedFlagE(%"class.v8::internal::ScopeInfo"* %0, i32 %66, %"class.v8::internal::String"* null, i32* nonnull %7, i8* %2, i8* %3, i8* %4)
  %157 = load i32, i32* %7, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %156) #9
  br label %158

158:                                              ; preds = %150, %40, %155
  %159 = phi i32 [ %157, %155 ], [ 0, %40 ], [ 0, %150 ]
  ret i32 %159
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal9ScopeInfo14ModuleVariableEiPNS0_6StringEPiPNS0_12VariableModeEPNS0_18InitializationFlagEPNS0_17MaybeAssignedFlagE(%"class.v8::internal::ScopeInfo"* nocapture readonly, i32, %"class.v8::internal::String"*, i32*, i8*, i8*, i8*) local_unnamed_addr #5 align 2 {
  %8 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, 11
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4, !noalias !448
  %13 = lshr i32 %12, 1
  %14 = shl i32 %13, 3
  %15 = add i32 %14, 16
  %16 = add i64 %9, 3
  %17 = inttoptr i64 %16 to i32*
  %18 = load i32, i32* %17, align 4, !noalias !471
  %19 = lshr i32 %18, 9
  %20 = and i32 %19, 4
  %21 = or i32 %15, %20
  %22 = lshr i32 %18, 8
  %23 = and i32 %22, 3
  %24 = add nsw i32 %23, -1
  %25 = icmp ult i32 %24, 2
  %26 = zext i1 %25 to i32
  %27 = and i32 %18, 24576
  %28 = icmp ne i32 %27, 0
  %29 = zext i1 %28 to i32
  %30 = shl nuw nsw i32 %29, 3
  %31 = lshr i32 %18, 13
  %32 = and i32 %31, 4
  %33 = lshr i32 %18, 1
  %34 = and i32 %33, 15
  switch i32 %34, label %35 [
    i32 2, label %39
    i32 4, label %39
    i32 1, label %39
  ]

35:                                               ; preds = %7
  %36 = icmp eq i32 %34, 3
  %37 = zext i1 %36 to i32
  %38 = shl nuw nsw i32 %37, 3
  br label %39

39:                                               ; preds = %7, %7, %7, %35
  %40 = phi i32 [ 8, %7 ], [ %38, %35 ], [ 8, %7 ], [ 8, %7 ]
  %41 = lshr i32 %18, 21
  %42 = and i32 %41, 4
  %43 = lshr i32 %18, 27
  %44 = and i32 %43, 4
  %45 = and i32 %18, 30
  %46 = icmp eq i32 %45, 6
  %47 = zext i1 %46 to i32
  %48 = shl nuw nsw i32 %47, 1
  %49 = or i32 %48, %26
  %50 = shl nuw nsw i32 %49, 2
  %51 = mul nsw i32 %1, 12
  %52 = add nuw nsw i32 %32, %44
  %53 = add nuw nsw i32 %52, 8
  %54 = add i32 %53, %51
  %55 = add i32 %54, %42
  %56 = add i32 %55, %21
  %57 = add i32 %56, %30
  %58 = add i32 %57, %50
  %59 = add i32 %58, %40
  %60 = add i64 %9, -1
  %61 = sext i32 %59 to i64
  %62 = add i64 %60, %61
  %63 = inttoptr i64 %62 to i32*
  %64 = load i32, i32* %63, align 4
  %65 = ashr i32 %64, 1
  %66 = icmp eq %"class.v8::internal::String"* %2, null
  br i1 %66, label %88, label %67

67:                                               ; preds = %39
  %68 = and i64 %9, -4294967296
  switch i32 %34, label %69 [
    i32 2, label %73
    i32 4, label %73
    i32 1, label %73
  ]

69:                                               ; preds = %67
  %70 = icmp eq i32 %34, 3
  %71 = zext i1 %70 to i32
  %72 = shl nuw nsw i32 %71, 3
  br label %73

73:                                               ; preds = %67, %67, %67, %69
  %74 = phi i32 [ 8, %67 ], [ %72, %69 ], [ 8, %67 ], [ 8, %67 ]
  %75 = add i32 %52, %51
  %76 = add i32 %75, %42
  %77 = add i32 %76, %21
  %78 = add i32 %77, %30
  %79 = add i32 %78, %50
  %80 = add i32 %79, %74
  %81 = sext i32 %80 to i64
  %82 = add i64 %60, %81
  %83 = inttoptr i64 %82 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = zext i32 %84 to i64
  %86 = or i64 %68, %85
  %87 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %86, i64* %87, align 8
  br label %88

88:                                               ; preds = %39, %73
  %89 = icmp eq i32* %3, null
  br i1 %89, label %147, label %90

90:                                               ; preds = %88
  %91 = load i64, i64* %8, align 8
  %92 = add i64 %91, 11
  %93 = inttoptr i64 %92 to i32*
  %94 = load i32, i32* %93, align 4, !noalias !472
  %95 = lshr i32 %94, 1
  %96 = shl i32 %95, 3
  %97 = add i32 %96, 16
  %98 = add i64 %91, 3
  %99 = inttoptr i64 %98 to i32*
  %100 = load i32, i32* %99, align 4, !noalias !495
  %101 = lshr i32 %100, 9
  %102 = and i32 %101, 4
  %103 = or i32 %97, %102
  %104 = lshr i32 %100, 8
  %105 = and i32 %104, 3
  %106 = add nsw i32 %105, -1
  %107 = icmp ult i32 %106, 2
  %108 = zext i1 %107 to i32
  %109 = and i32 %100, 24576
  %110 = icmp ne i32 %109, 0
  %111 = zext i1 %110 to i32
  %112 = shl nuw nsw i32 %111, 3
  %113 = lshr i32 %100, 13
  %114 = and i32 %113, 4
  %115 = lshr i32 %100, 1
  %116 = and i32 %115, 15
  switch i32 %116, label %117 [
    i32 2, label %121
    i32 4, label %121
    i32 1, label %121
  ]

117:                                              ; preds = %90
  %118 = icmp eq i32 %116, 3
  %119 = zext i1 %118 to i32
  %120 = shl nuw nsw i32 %119, 3
  br label %121

121:                                              ; preds = %90, %90, %90, %117
  %122 = phi i32 [ 8, %90 ], [ %120, %117 ], [ 8, %90 ], [ 8, %90 ]
  %123 = lshr i32 %100, 21
  %124 = and i32 %123, 4
  %125 = lshr i32 %100, 27
  %126 = and i32 %125, 4
  %127 = and i32 %100, 30
  %128 = icmp eq i32 %127, 6
  %129 = zext i1 %128 to i32
  %130 = shl nuw nsw i32 %129, 1
  %131 = or i32 %130, %108
  %132 = shl nuw nsw i32 %131, 2
  %133 = add i32 %51, 4
  %134 = add i32 %133, %114
  %135 = add i32 %134, %124
  %136 = add i32 %135, %126
  %137 = add i32 %136, %103
  %138 = add i32 %137, %112
  %139 = add i32 %138, %132
  %140 = add i32 %139, %122
  %141 = add i64 %91, -1
  %142 = sext i32 %140 to i64
  %143 = add i64 %141, %142
  %144 = inttoptr i64 %143 to i32*
  %145 = load i32, i32* %144, align 4
  %146 = ashr i32 %145, 1
  store i32 %146, i32* %3, align 4
  br label %147

147:                                              ; preds = %88, %121
  %148 = icmp eq i8* %4, null
  br i1 %148, label %152, label %149

149:                                              ; preds = %147
  %150 = trunc i32 %65 to i8
  %151 = and i8 %150, 15
  store i8 %151, i8* %4, align 1
  br label %152

152:                                              ; preds = %147, %149
  %153 = icmp eq i8* %5, null
  br i1 %153, label %158, label %154

154:                                              ; preds = %152
  %155 = lshr i32 %65, 4
  %156 = trunc i32 %155 to i8
  %157 = and i8 %156, 1
  store i8 %157, i8* %5, align 1
  br label %158

158:                                              ; preds = %152, %154
  %159 = icmp eq i8* %6, null
  br i1 %159, label %164, label %160

160:                                              ; preds = %158
  %161 = lshr i32 %65, 5
  %162 = trunc i32 %161 to i8
  %163 = and i8 %162, 1
  store i8 %163, i8* %6, align 1
  br label %164

164:                                              ; preds = %158, %160
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal9ScopeInfo16ContextSlotIndexES1_NS0_6StringEPNS0_20VariableLookupResultE(i64, i64, %"struct.v8::internal::VariableLookupResult"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = add i64 %0, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1073741824
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %95

9:                                                ; preds = %3
  %10 = add i64 %0, 11
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %12, 1
  br i1 %13, label %14, label %95

14:                                               ; preds = %9
  %15 = lshr i32 %12, 1
  %16 = add i64 %0, 15
  %17 = trunc i64 %1 to i32
  %18 = zext i32 %15 to i64
  br label %19

19:                                               ; preds = %14, %28
  %20 = phi i64 [ 0, %14 ], [ %29, %28 ]
  %21 = trunc i64 %20 to i32
  %22 = shl i32 %21, 2
  %23 = sext i32 %22 to i64
  %24 = add i64 %16, %23
  %25 = inttoptr i64 %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, %17
  br i1 %27, label %31, label %28

28:                                               ; preds = %19
  %29 = add nuw nsw i64 %20, 1
  %30 = icmp ult i64 %29, %18
  br i1 %30, label %19, label %95

31:                                               ; preds = %19
  %32 = trunc i64 %20 to i32
  %33 = lshr i32 %12, 1
  %34 = add nuw i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = add i32 %35, 16
  %37 = add i64 %0, -1
  %38 = sext i32 %36 to i64
  %39 = add i64 %37, %38
  %40 = inttoptr i64 %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = lshr i32 %41, 1
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 15
  %45 = getelementptr inbounds %"struct.v8::internal::VariableLookupResult", %"struct.v8::internal::VariableLookupResult"* %2, i64 0, i32 4
  store i8 %44, i8* %45, align 2
  %46 = load i32, i32* %11, align 4, !noalias !496
  %47 = lshr i32 %46, 1
  %48 = add nuw i32 %47, %32
  %49 = shl i32 %48, 2
  %50 = add i32 %49, 16
  %51 = sext i32 %50 to i64
  %52 = add i64 %37, %51
  %53 = inttoptr i64 %52 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = lshr i32 %54, 23
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = getelementptr inbounds %"struct.v8::internal::VariableLookupResult", %"struct.v8::internal::VariableLookupResult"* %2, i64 0, i32 3
  store i8 %57, i8* %58, align 1
  %59 = load i32, i32* %11, align 4, !noalias !499
  %60 = lshr i32 %59, 1
  %61 = add nuw i32 %60, %32
  %62 = shl i32 %61, 2
  %63 = add i32 %62, 16
  %64 = sext i32 %63 to i64
  %65 = add i64 %37, %64
  %66 = inttoptr i64 %65 to i32*
  %67 = load i32, i32* %66, align 4
  %68 = lshr i32 %67, 5
  %69 = trunc i32 %68 to i8
  %70 = and i8 %69, 1
  %71 = getelementptr inbounds %"struct.v8::internal::VariableLookupResult", %"struct.v8::internal::VariableLookupResult"* %2, i64 0, i32 5
  store i8 %70, i8* %71, align 1
  %72 = load i32, i32* %11, align 4, !noalias !502
  %73 = lshr i32 %72, 1
  %74 = add nuw i32 %73, %32
  %75 = shl i32 %74, 2
  %76 = add i32 %75, 16
  %77 = sext i32 %76 to i64
  %78 = add i64 %37, %77
  %79 = inttoptr i64 %78 to i32*
  %80 = load i32, i32* %79, align 4
  %81 = lshr i32 %80, 6
  %82 = trunc i32 %81 to i8
  %83 = and i8 %82, 1
  %84 = getelementptr inbounds %"struct.v8::internal::VariableLookupResult", %"struct.v8::internal::VariableLookupResult"* %2, i64 0, i32 6
  store i8 %83, i8* %84, align 4
  %85 = load i32, i32* %5, align 4
  %86 = getelementptr inbounds %"struct.v8::internal::VariableLookupResult", %"struct.v8::internal::VariableLookupResult"* %2, i64 0, i32 2
  %87 = lshr i32 %85, 28
  %88 = trunc i32 %87 to i8
  %89 = and i8 %88, 1
  store i8 %89, i8* %86, align 4
  %90 = load i32, i32* %5, align 4
  %91 = and i32 %90, 134217728
  %92 = icmp eq i32 %91, 0
  %93 = select i1 %92, i32 2, i32 3
  %94 = add nuw nsw i32 %93, %32
  br label %95

95:                                               ; preds = %28, %9, %3, %31
  %96 = phi i32 [ -1, %3 ], [ %94, %31 ], [ -1, %9 ], [ -1, %28 ]
  ret i32 %96
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo35SavedClassVariableContextLocalIndexEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 2048
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %23, label %9

9:                                                ; preds = %1
  %10 = add i64 %3, 11
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4, !noalias !505
  %13 = lshr i32 %12, 1
  %14 = shl i32 %13, 3
  %15 = add i32 %14, 16
  %16 = add i64 %3, -1
  %17 = sext i32 %15 to i64
  %18 = add i64 %16, %17
  %19 = inttoptr i64 %18 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = ashr i32 %20, 1
  %22 = add nsw i32 %21, -2
  br label %23

23:                                               ; preds = %1, %9
  %24 = phi i32 [ %22, %9 ], [ -1, %1 ]
  ret i32 %24
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo24ReceiverContextSlotIndexEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 768
  %8 = icmp eq i32 %7, 512
  br i1 %8, label %9, label %25

9:                                                ; preds = %1
  %10 = add i64 %3, 11
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4, !noalias !510
  %13 = lshr i32 %12, 1
  %14 = shl i32 %13, 3
  %15 = add i32 %14, 16
  %16 = lshr i32 %6, 9
  %17 = and i32 %16, 4
  %18 = or i32 %15, %17
  %19 = add i64 %3, -1
  %20 = sext i32 %18 to i64
  %21 = add i64 %19, %20
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = ashr i32 %23, 1
  br label %25

25:                                               ; preds = %1, %9
  %26 = phi i32 [ %24, %9 ], [ -1, %1 ]
  ret i32 %26
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo24FunctionContextSlotIndexENS0_6StringE(%"class.v8::internal::ScopeInfo"* nocapture readonly, i64) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 24576
  %9 = icmp eq i32 %8, 16384
  br i1 %9, label %10, label %42

10:                                               ; preds = %2
  %11 = add i64 %4, 11
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4, !noalias !517
  %14 = lshr i32 %13, 1
  %15 = shl i32 %14, 3
  %16 = add i32 %15, 16
  %17 = lshr i32 %7, 9
  %18 = and i32 %17, 4
  %19 = or i32 %16, %18
  %20 = lshr i32 %7, 8
  %21 = and i32 %20, 3
  %22 = add nsw i32 %21, -1
  %23 = icmp ult i32 %22, 2
  %24 = zext i1 %23 to i32
  %25 = shl nuw nsw i32 %24, 2
  %26 = add i32 %19, %25
  %27 = add i64 %4, -1
  %28 = sext i32 %26 to i64
  %29 = add i64 %27, %28
  %30 = inttoptr i64 %29 to i32*
  %31 = load i32, i32* %30, align 4
  %32 = trunc i64 %1 to i32
  %33 = icmp eq i32 %31, %32
  br i1 %33, label %34, label %42

34:                                               ; preds = %10
  %35 = add i32 %19, 4
  %36 = add i32 %35, %25
  %37 = sext i32 %36 to i64
  %38 = add i64 %27, %37
  %39 = inttoptr i64 %38 to i32*
  %40 = load i32, i32* %39, align 4
  %41 = ashr i32 %40, 1
  br label %42

42:                                               ; preds = %2, %10, %34
  %43 = phi i32 [ %41, %34 ], [ -1, %10 ], [ -1, %2 ]
  ret i32 %43
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZNK2v88internal9ScopeInfo13function_kindEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 3
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = lshr i32 %6, 18
  %8 = trunc i32 %7 to i8
  %9 = and i8 %8, 31
  ret i8 %9
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo22ContextLocalNamesIndexEv(%"class.v8::internal::ScopeInfo"* nocapture readnone) local_unnamed_addr #3 align 2 {
  ret i32 3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo22ContextLocalInfosIndexEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4, !noalias !526
  %7 = lshr i32 %6, 1
  %8 = shl i32 %7, 2
  %9 = add i32 %8, 12
  %10 = sdiv i32 %9, 4
  ret i32 %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo27SavedClassVariableInfoIndexEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4, !noalias !529
  %7 = lshr i32 %6, 1
  %8 = shl i32 %7, 3
  %9 = add i32 %8, 12
  %10 = sdiv i32 %9, 4
  ret i32 %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo17ReceiverInfoIndexEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4, !noalias !534
  %7 = lshr i32 %6, 1
  %8 = shl i32 %7, 3
  %9 = add i32 %8, 16
  %10 = add i64 %3, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4, !noalias !541
  %13 = lshr i32 %12, 9
  %14 = and i32 %13, 4
  %15 = or i32 %9, %14
  %16 = add nsw i32 %15, -4
  %17 = sdiv i32 %16, 4
  ret i32 %17
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo25FunctionVariableInfoIndexEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4, !noalias !542
  %7 = lshr i32 %6, 1
  %8 = shl i32 %7, 3
  %9 = add i32 %8, 16
  %10 = add i64 %3, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4, !noalias !551
  %13 = lshr i32 %12, 9
  %14 = and i32 %13, 4
  %15 = or i32 %9, %14
  %16 = lshr i32 %12, 8
  %17 = and i32 %16, 3
  %18 = add nsw i32 %17, -1
  %19 = icmp ult i32 %18, 2
  %20 = zext i1 %19 to i32
  %21 = shl nuw nsw i32 %20, 2
  %22 = add i32 %15, -4
  %23 = add i32 %22, %21
  %24 = sdiv i32 %23, 4
  ret i32 %24
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo25InferredFunctionNameIndexEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4, !noalias !552
  %7 = lshr i32 %6, 1
  %8 = shl i32 %7, 3
  %9 = add i32 %8, 16
  %10 = add i64 %3, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4, !noalias !563
  %13 = lshr i32 %12, 9
  %14 = and i32 %13, 4
  %15 = or i32 %9, %14
  %16 = lshr i32 %12, 8
  %17 = and i32 %16, 3
  %18 = add nsw i32 %17, -1
  %19 = icmp ult i32 %18, 2
  %20 = zext i1 %19 to i32
  %21 = shl nuw nsw i32 %20, 2
  %22 = and i32 %12, 24576
  %23 = icmp ne i32 %22, 0
  %24 = zext i1 %23 to i32
  %25 = shl nuw nsw i32 %24, 3
  %26 = add i32 %15, -4
  %27 = add i32 %26, %25
  %28 = add i32 %27, %21
  %29 = sdiv i32 %28, 4
  ret i32 %29
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo17PositionInfoIndexEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4, !noalias !564
  %7 = lshr i32 %6, 1
  %8 = shl i32 %7, 3
  %9 = add i32 %8, 16
  %10 = add i64 %3, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4, !noalias !577
  %13 = lshr i32 %12, 9
  %14 = and i32 %13, 4
  %15 = or i32 %9, %14
  %16 = lshr i32 %12, 8
  %17 = and i32 %16, 3
  %18 = add nsw i32 %17, -1
  %19 = icmp ult i32 %18, 2
  %20 = zext i1 %19 to i32
  %21 = shl nuw nsw i32 %20, 2
  %22 = and i32 %12, 24576
  %23 = icmp ne i32 %22, 0
  %24 = zext i1 %23 to i32
  %25 = shl nuw nsw i32 %24, 3
  %26 = lshr i32 %12, 13
  %27 = and i32 %26, 4
  %28 = add nsw i32 %27, -4
  %29 = add i32 %28, %15
  %30 = add i32 %29, %25
  %31 = add i32 %30, %21
  %32 = sdiv i32 %31, 4
  ret i32 %32
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo19OuterScopeInfoIndexEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4, !noalias !578
  %7 = lshr i32 %6, 1
  %8 = shl i32 %7, 3
  %9 = add i32 %8, 16
  %10 = add i64 %3, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4, !noalias !593
  %13 = lshr i32 %12, 9
  %14 = and i32 %13, 4
  %15 = or i32 %9, %14
  %16 = lshr i32 %12, 8
  %17 = and i32 %16, 3
  %18 = add nsw i32 %17, -1
  %19 = icmp ult i32 %18, 2
  %20 = zext i1 %19 to i32
  %21 = shl nuw nsw i32 %20, 2
  %22 = and i32 %12, 24576
  %23 = icmp ne i32 %22, 0
  %24 = zext i1 %23 to i32
  %25 = shl nuw nsw i32 %24, 3
  %26 = lshr i32 %12, 13
  %27 = and i32 %26, 4
  %28 = lshr i32 %12, 1
  %29 = and i32 %28, 15
  switch i32 %29, label %30 [
    i32 2, label %34
    i32 4, label %34
    i32 1, label %34
  ]

30:                                               ; preds = %1
  %31 = icmp eq i32 %29, 3
  %32 = zext i1 %31 to i32
  %33 = shl nuw nsw i32 %32, 3
  br label %34

34:                                               ; preds = %1, %1, %1, %30
  %35 = phi i32 [ 8, %1 ], [ %33, %30 ], [ 8, %1 ], [ 8, %1 ]
  %36 = add nsw i32 %27, -4
  %37 = add i32 %36, %15
  %38 = add i32 %37, %25
  %39 = add i32 %38, %21
  %40 = add i32 %39, %35
  %41 = sdiv i32 %40, 4
  ret i32 %41
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo15ModuleInfoIndexEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4, !noalias !594
  %7 = lshr i32 %6, 1
  %8 = shl i32 %7, 3
  %9 = add i32 %8, 16
  %10 = add i64 %3, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4, !noalias !613
  %13 = lshr i32 %12, 9
  %14 = and i32 %13, 4
  %15 = or i32 %9, %14
  %16 = lshr i32 %12, 8
  %17 = and i32 %16, 3
  %18 = add nsw i32 %17, -1
  %19 = icmp ult i32 %18, 2
  %20 = zext i1 %19 to i32
  %21 = shl nuw nsw i32 %20, 2
  %22 = and i32 %12, 24576
  %23 = icmp ne i32 %22, 0
  %24 = zext i1 %23 to i32
  %25 = shl nuw nsw i32 %24, 3
  %26 = lshr i32 %12, 13
  %27 = and i32 %26, 4
  %28 = lshr i32 %12, 1
  %29 = and i32 %28, 15
  switch i32 %29, label %30 [
    i32 2, label %34
    i32 4, label %34
    i32 1, label %34
  ]

30:                                               ; preds = %1
  %31 = icmp eq i32 %29, 3
  %32 = zext i1 %31 to i32
  %33 = shl nuw nsw i32 %32, 3
  br label %34

34:                                               ; preds = %1, %1, %1, %30
  %35 = phi i32 [ 8, %1 ], [ %33, %30 ], [ 8, %1 ], [ 8, %1 ]
  %36 = lshr i32 %12, 21
  %37 = and i32 %36, 4
  %38 = lshr i32 %12, 27
  %39 = and i32 %38, 4
  %40 = add nsw i32 %27, -4
  %41 = add nsw i32 %40, %37
  %42 = add nsw i32 %41, %39
  %43 = add i32 %42, %15
  %44 = add i32 %43, %25
  %45 = add i32 %44, %21
  %46 = add i32 %45, %35
  %47 = sdiv i32 %46, 4
  ret i32 %47
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9ScopeInfo20ModuleVariablesIndexEv(%"class.v8::internal::ScopeInfo"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ScopeInfo", %"class.v8::internal::ScopeInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 11
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4, !noalias !614
  %7 = lshr i32 %6, 1
  %8 = shl i32 %7, 3
  %9 = add i32 %8, 16
  %10 = add i64 %3, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4, !noalias !637
  %13 = lshr i32 %12, 9
  %14 = and i32 %13, 4
  %15 = or i32 %9, %14
  %16 = lshr i32 %12, 8
  %17 = and i32 %16, 3
  %18 = add nsw i32 %17, -1
  %19 = icmp ult i32 %18, 2
  %20 = zext i1 %19 to i32
  %21 = and i32 %12, 24576
  %22 = icmp ne i32 %21, 0
  %23 = zext i1 %22 to i32
  %24 = shl nuw nsw i32 %23, 3
  %25 = lshr i32 %12, 13
  %26 = and i32 %25, 4
  %27 = lshr i32 %12, 1
  %28 = and i32 %27, 15
  switch i32 %28, label %29 [
    i32 2, label %33
    i32 4, label %33
    i32 1, label %33
  ]

29:                                               ; preds = %1
  %30 = icmp eq i32 %28, 3
  %31 = zext i1 %30 to i32
  %32 = shl nuw nsw i32 %31, 3
  br label %33

33:                                               ; preds = %1, %1, %1, %29
  %34 = phi i32 [ 8, %1 ], [ %32, %29 ], [ 8, %1 ], [ 8, %1 ]
  %35 = lshr i32 %12, 21
  %36 = and i32 %35, 4
  %37 = lshr i32 %12, 27
  %38 = and i32 %37, 4
  %39 = and i32 %12, 30
  %40 = icmp eq i32 %39, 6
  %41 = zext i1 %40 to i32
  %42 = shl nuw nsw i32 %41, 1
  %43 = or i32 %42, %20
  %44 = shl nuw nsw i32 %43, 2
  %45 = add nsw i32 %26, -4
  %46 = add nsw i32 %45, %36
  %47 = add nsw i32 %46, %38
  %48 = add i32 %47, %15
  %49 = add i32 %48, %24
  %50 = add i32 %49, %44
  %51 = add i32 %50, %34
  %52 = sdiv i32 %51, 4
  ret i32 %52
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN2v88internallsERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEENS0_22VariableAllocationInfoE(%"class.std::__1::basic_ostream"* dereferenceable(160), i32) local_unnamed_addr #0 {
  switch i32 %1, label %11 [
    i32 0, label %3
    i32 1, label %5
    i32 2, label %7
    i32 3, label %9
  ]

3:                                                ; preds = %2
  %4 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i64 4) #9
  br label %12

5:                                                ; preds = %2
  %6 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i64 5) #9
  br label %12

7:                                                ; preds = %2
  %8 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i64 7) #9
  br label %12

9:                                                ; preds = %2
  %10 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i64 6) #9
  br label %12

11:                                               ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0)) #13
  unreachable

12:                                               ; preds = %9, %7, %5, %3
  %13 = phi %"class.std::__1::basic_ostream"* [ %10, %9 ], [ %8, %7 ], [ %6, %5 ], [ %4, %3 ]
  ret %"class.std::__1::basic_ostream"* %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2v88internal20SourceTextModuleInfo18RegularExportCountEv(%"class.v8::internal::SourceTextModuleInfo"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::SourceTextModuleInfo", %"class.v8::internal::SourceTextModuleInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -4294967296
  %5 = add i64 %3, 15
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = zext i32 %7 to i64
  %9 = or i64 %4, %8
  %10 = add i64 %9, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = ashr i32 %12, 1
  %14 = sdiv i32 %13, 3
  ret i32 %14
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal20SourceTextModuleInfo22RegularExportLocalNameEi(%"class.v8::internal::SourceTextModuleInfo"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::SourceTextModuleInfo", %"class.v8::internal::SourceTextModuleInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, 15
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = mul i32 %1, 12
  %12 = sext i32 %11 to i64
  %13 = add nsw i64 %12, 7
  %14 = add i64 %13, %10
  %15 = inttoptr i64 %14 to i32*
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = zext i32 %16 to i64
  %18 = or i64 %5, %17
  ret i64 %18
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2v88internal20SourceTextModuleInfo22RegularExportCellIndexEi(%"class.v8::internal::SourceTextModuleInfo"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::SourceTextModuleInfo", %"class.v8::internal::SourceTextModuleInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, 15
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = mul i32 %1, 12
  %12 = add i32 %11, 4
  %13 = sext i32 %12 to i64
  %14 = add nsw i64 %13, 7
  %15 = add i64 %14, %10
  %16 = inttoptr i64 %15 to i32*
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = ashr i32 %17, 1
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2v88internal20SourceTextModuleInfo24RegularExportExportNamesEi(%"class.v8::internal::SourceTextModuleInfo"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::SourceTextModuleInfo", %"class.v8::internal::SourceTextModuleInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, 15
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = mul i32 %1, 12
  %12 = add i32 %11, 8
  %13 = sext i32 %12 to i64
  %14 = add nsw i64 %13, 7
  %15 = add i64 %14, %10
  %16 = inttoptr i64 %15 to i32*
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = zext i32 %17 to i64
  %19 = or i64 %5, %18
  ret i64 %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"*, i64, i64, i64) local_unnamed_addr #2

declare void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @llvm.assume(i1) #9

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i16 @_ZN2v88internal11StringShape33DispatchToSpecificTypeWithoutCastIZNS1_22DispatchToSpecificTypeIZNKS0_6String7GetImplEiE19StringGetDispatchertJRiEEET0_S4_DpOT1_E17CastingDispatchertJRS4_S6_EEES7_SA_(%"class.v8::internal::StringShape"*, %"class.v8::internal::String"* dereferenceable(8), i32* dereferenceable(4)) local_unnamed_addr #6 comdat align 2 {
  %4 = alloca %"class.v8::internal::ConsString", align 8
  %5 = alloca %"class.v8::internal::SlicedString", align 8
  %6 = alloca %"class.v8::internal::ThinString", align 8
  %7 = getelementptr inbounds %"class.v8::internal::StringShape", %"class.v8::internal::StringShape"* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 15
  switch i32 %9, label %134 [
    i32 8, label %10
    i32 0, label %20
    i32 9, label %30
    i32 1, label %30
    i32 10, label %37
    i32 2, label %79
    i32 11, label %120
    i32 3, label %120
    i32 13, label %127
    i32 5, label %127
  ]

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = load i32, i32* %2, align 4
  %14 = sext i32 %13 to i64
  %15 = add i64 %12, 11
  %16 = add i64 %15, %14
  %17 = inttoptr i64 %16 to i8*
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i16
  br label %135

20:                                               ; preds = %3
  %21 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = load i32, i32* %2, align 4
  %24 = shl nsw i32 %23, 1
  %25 = sext i32 %24 to i64
  %26 = add i64 %22, 11
  %27 = add i64 %26, %25
  %28 = inttoptr i64 %27 to i16*
  %29 = load i16, i16* %28, align 2
  br label %135

30:                                               ; preds = %3, %3
  %31 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = load i32, i32* %2, align 4
  %34 = bitcast %"class.v8::internal::ConsString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #9
  %35 = getelementptr inbounds %"class.v8::internal::ConsString", %"class.v8::internal::ConsString"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %32, i64* %35, align 8
  %36 = call zeroext i16 @_ZNK2v88internal10ConsString3GetEi(%"class.v8::internal::ConsString"* nonnull %4, i32 %33) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #9
  br label %135

37:                                               ; preds = %3
  %38 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = load i32, i32* %2, align 4
  %41 = and i64 %39, -4294967296
  %42 = add i64 %39, -1
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = zext i32 %44 to i64
  %46 = or i64 %41, %45
  %47 = add i64 %46, 7
  %48 = inttoptr i64 %47 to i16*
  %49 = load atomic i16, i16* %48 monotonic, align 2
  %50 = and i16 %49, 16
  %51 = icmp eq i16 %50, 0
  %52 = add i64 %39, 11
  %53 = inttoptr i64 %52 to %"class.v8::String::ExternalOneByteStringResource"**
  br i1 %51, label %66, label %54

54:                                               ; preds = %37
  %55 = load %"class.v8::String::ExternalOneByteStringResource"*, %"class.v8::String::ExternalOneByteStringResource"** %53, align 1
  %56 = getelementptr inbounds %"class.v8::String::ExternalOneByteStringResource", %"class.v8::String::ExternalOneByteStringResource"* %55, i64 0, i32 0
  %57 = bitcast %"class.v8::String::ExternalOneByteStringResource"* %55 to i1 (%"class.v8::String::ExternalStringResourceBase"*)***
  %58 = load i1 (%"class.v8::String::ExternalStringResourceBase"*)**, i1 (%"class.v8::String::ExternalStringResourceBase"*)*** %57, align 8
  %59 = getelementptr inbounds i1 (%"class.v8::String::ExternalStringResourceBase"*)*, i1 (%"class.v8::String::ExternalStringResourceBase"*)** %58, i64 2
  %60 = load i1 (%"class.v8::String::ExternalStringResourceBase"*)*, i1 (%"class.v8::String::ExternalStringResourceBase"*)** %59, align 8
  %61 = tail call zeroext i1 %60(%"class.v8::String::ExternalStringResourceBase"* %56) #9
  br i1 %61, label %62, label %66

62:                                               ; preds = %54
  %63 = load %"class.v8::String::ExternalOneByteStringResource"*, %"class.v8::String::ExternalOneByteStringResource"** %53, align 1
  tail call void @_ZNK2v86String29ExternalOneByteStringResource25CheckCachedDataInvariantsEv(%"class.v8::String::ExternalOneByteStringResource"* %63) #9
  %64 = getelementptr inbounds %"class.v8::String::ExternalOneByteStringResource", %"class.v8::String::ExternalOneByteStringResource"* %63, i64 0, i32 1
  %65 = load i8*, i8** %64, align 8
  br label %73

66:                                               ; preds = %54, %37
  %67 = load %"class.v8::String::ExternalOneByteStringResource"*, %"class.v8::String::ExternalOneByteStringResource"** %53, align 1
  %68 = bitcast %"class.v8::String::ExternalOneByteStringResource"* %67 to i8* (%"class.v8::String::ExternalOneByteStringResource"*)***
  %69 = load i8* (%"class.v8::String::ExternalOneByteStringResource"*)**, i8* (%"class.v8::String::ExternalOneByteStringResource"*)*** %68, align 8
  %70 = getelementptr inbounds i8* (%"class.v8::String::ExternalOneByteStringResource"*)*, i8* (%"class.v8::String::ExternalOneByteStringResource"*)** %69, i64 6
  %71 = load i8* (%"class.v8::String::ExternalOneByteStringResource"*)*, i8* (%"class.v8::String::ExternalOneByteStringResource"*)** %70, align 8
  %72 = tail call i8* %71(%"class.v8::String::ExternalOneByteStringResource"* %67) #9
  br label %73

73:                                               ; preds = %62, %66
  %74 = phi i8* [ %65, %62 ], [ %72, %66 ]
  %75 = sext i32 %40 to i64
  %76 = getelementptr inbounds i8, i8* %74, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i16
  br label %135

79:                                               ; preds = %3
  %80 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load i64, i64* %80, align 8
  %82 = load i32, i32* %2, align 4
  %83 = and i64 %81, -4294967296
  %84 = add i64 %81, -1
  %85 = inttoptr i64 %84 to i32*
  %86 = load atomic i32, i32* %85 monotonic, align 4
  %87 = zext i32 %86 to i64
  %88 = or i64 %83, %87
  %89 = add i64 %88, 7
  %90 = inttoptr i64 %89 to i16*
  %91 = load atomic i16, i16* %90 monotonic, align 2
  %92 = and i16 %91, 16
  %93 = icmp eq i16 %92, 0
  %94 = add i64 %81, 11
  %95 = inttoptr i64 %94 to %"class.v8::String::ExternalStringResource"**
  br i1 %93, label %108, label %96

96:                                               ; preds = %79
  %97 = load %"class.v8::String::ExternalStringResource"*, %"class.v8::String::ExternalStringResource"** %95, align 1
  %98 = getelementptr inbounds %"class.v8::String::ExternalStringResource", %"class.v8::String::ExternalStringResource"* %97, i64 0, i32 0
  %99 = bitcast %"class.v8::String::ExternalStringResource"* %97 to i1 (%"class.v8::String::ExternalStringResourceBase"*)***
  %100 = load i1 (%"class.v8::String::ExternalStringResourceBase"*)**, i1 (%"class.v8::String::ExternalStringResourceBase"*)*** %99, align 8
  %101 = getelementptr inbounds i1 (%"class.v8::String::ExternalStringResourceBase"*)*, i1 (%"class.v8::String::ExternalStringResourceBase"*)** %100, i64 2
  %102 = load i1 (%"class.v8::String::ExternalStringResourceBase"*)*, i1 (%"class.v8::String::ExternalStringResourceBase"*)** %101, align 8
  %103 = tail call zeroext i1 %102(%"class.v8::String::ExternalStringResourceBase"* %98) #9
  br i1 %103, label %104, label %108

104:                                              ; preds = %96
  %105 = load %"class.v8::String::ExternalStringResource"*, %"class.v8::String::ExternalStringResource"** %95, align 1
  tail call void @_ZNK2v86String22ExternalStringResource25CheckCachedDataInvariantsEv(%"class.v8::String::ExternalStringResource"* %105) #9
  %106 = getelementptr inbounds %"class.v8::String::ExternalStringResource", %"class.v8::String::ExternalStringResource"* %105, i64 0, i32 1
  %107 = load i16*, i16** %106, align 8
  br label %115

108:                                              ; preds = %96, %79
  %109 = load %"class.v8::String::ExternalStringResource"*, %"class.v8::String::ExternalStringResource"** %95, align 1
  %110 = bitcast %"class.v8::String::ExternalStringResource"* %109 to i16* (%"class.v8::String::ExternalStringResource"*)***
  %111 = load i16* (%"class.v8::String::ExternalStringResource"*)**, i16* (%"class.v8::String::ExternalStringResource"*)*** %110, align 8
  %112 = getelementptr inbounds i16* (%"class.v8::String::ExternalStringResource"*)*, i16* (%"class.v8::String::ExternalStringResource"*)** %111, i64 6
  %113 = load i16* (%"class.v8::String::ExternalStringResource"*)*, i16* (%"class.v8::String::ExternalStringResource"*)** %112, align 8
  %114 = tail call i16* %113(%"class.v8::String::ExternalStringResource"* %109) #9
  br label %115

115:                                              ; preds = %104, %108
  %116 = phi i16* [ %107, %104 ], [ %114, %108 ]
  %117 = sext i32 %82 to i64
  %118 = getelementptr inbounds i16, i16* %116, i64 %117
  %119 = load i16, i16* %118, align 2
  br label %135

120:                                              ; preds = %3, %3
  %121 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %122 = load i64, i64* %121, align 8
  %123 = load i32, i32* %2, align 4
  %124 = bitcast %"class.v8::internal::SlicedString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %124) #9
  %125 = getelementptr inbounds %"class.v8::internal::SlicedString", %"class.v8::internal::SlicedString"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %122, i64* %125, align 8
  %126 = call zeroext i16 @_ZNK2v88internal12SlicedString3GetEi(%"class.v8::internal::SlicedString"* nonnull %5, i32 %123) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %124) #9
  br label %135

127:                                              ; preds = %3, %3
  %128 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %129 = load i64, i64* %128, align 8
  %130 = load i32, i32* %2, align 4
  %131 = bitcast %"class.v8::internal::ThinString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %131) #9
  %132 = getelementptr inbounds %"class.v8::internal::ThinString", %"class.v8::internal::ThinString"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %129, i64* %132, align 8
  %133 = call zeroext i16 @_ZNK2v88internal10ThinString3GetEi(%"class.v8::internal::ThinString"* nonnull %6, i32 %130) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %131) #9
  br label %135

134:                                              ; preds = %3
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0)) #13
  unreachable

135:                                              ; preds = %127, %120, %115, %73, %30, %20, %10
  %136 = phi i16 [ %133, %127 ], [ %126, %120 ], [ %119, %115 ], [ %78, %73 ], [ %36, %30 ], [ %29, %20 ], [ %19, %10 ]
  ret i16 %136
}

declare zeroext i16 @_ZNK2v88internal10ConsString3GetEi(%"class.v8::internal::ConsString"*, i32) local_unnamed_addr #2

declare void @_ZNK2v86String29ExternalOneByteStringResource25CheckCachedDataInvariantsEv(%"class.v8::String::ExternalOneByteStringResource"*) local_unnamed_addr #2

declare void @_ZNK2v86String22ExternalStringResource25CheckCachedDataInvariantsEv(%"class.v8::String::ExternalStringResource"*) local_unnamed_addr #2

declare zeroext i16 @_ZNK2v88internal12SlicedString3GetEi(%"class.v8::internal::SlicedString"*, i32) local_unnamed_addr #2

declare zeroext i16 @_ZNK2v88internal10ThinString3GetEi(%"class.v8::internal::ThinString"*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZNK2v88internal6String10SlowEqualsES1_(%"class.v8::internal::String"*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #9
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #9
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #9
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #9
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #9
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #9
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #9
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #9
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #9
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #9
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #9
  %32 = icmp ult i64 %17, 23
  br i1 %32, label %42, label %33

33:                                               ; preds = %30
  %34 = add nuw i64 %17, 16
  %35 = and i64 %34, -16
  %36 = tail call i8* @_Znwm(i64 %35) #14
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %36, i8** %37, align 8
  %38 = or i64 %35, -9223372036854775808
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %38, i64* %39, align 8
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %17, i64* %40, align 8
  %41 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %46

42:                                               ; preds = %30
  %43 = trunc i64 %17 to i8
  %44 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %45 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %44, i64 0, i32 1, i32 0
  store i8 %43, i8* %45, align 1
  br label %46

46:                                               ; preds = %33, %42
  %47 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %41, %33 ], [ %44, %42 ]
  %48 = phi i8* [ %36, %33 ], [ %31, %42 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %48, i8 %5, i64 %17, i1 false) #9
  %49 = getelementptr inbounds i8, i8* %48, i64 %17
  store i8 0, i8* %49, align 1
  %50 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %47, i64 0, i32 1, i32 0
  %51 = load i8, i8* %50, align 1
  %52 = icmp slt i8 %51, 0
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = select i1 %52, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #9
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %50, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %46
  %65 = load i8*, i8** %53, align 8
  call void @_ZdlPv(i8* %65) #14
  br label %66

66:                                               ; preds = %46, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #9
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #9
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #10

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #12

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #10

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noreturn nounwind }
attributes #14 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4, !6, !8, !10, !12}
!4 = distinct !{!4, !5, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!5 = distinct !{!5, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!6 = distinct !{!6, !7, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!7 = distinct !{!7, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!8 = distinct !{!8, !9, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE: argument 0"}
!9 = distinct !{!9, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE"}
!10 = distinct !{!10, !11, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE: argument 0"}
!11 = distinct !{!11, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE"}
!12 = distinct !{!12, !13, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE: argument 0"}
!13 = distinct !{!13, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE"}
!14 = !{!15, !17, !19, !21, !23, !25, !27, !29, !31, !33}
!15 = distinct !{!15, !16, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!16 = distinct !{!16, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!17 = distinct !{!17, !18, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!18 = distinct !{!18, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!19 = distinct !{!19, !20, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!20 = distinct !{!20, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!21 = distinct !{!21, !22, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!22 = distinct !{!22, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!23 = distinct !{!23, !24, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!24 = distinct !{!24, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!25 = distinct !{!25, !26, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!26 = distinct !{!26, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!27 = distinct !{!27, !28, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!28 = distinct !{!28, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!29 = distinct !{!29, !30, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE: argument 0"}
!30 = distinct !{!30, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE"}
!31 = distinct !{!31, !32, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE: argument 0"}
!32 = distinct !{!32, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE"}
!33 = distinct !{!33, !34, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE: argument 0"}
!34 = distinct !{!34, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE"}
!35 = !{!25, !27, !29, !31, !33}
!36 = !{!37, !39, !41, !43, !45, !47, !49, !51, !53, !55}
!37 = distinct !{!37, !38, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!38 = distinct !{!38, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!39 = distinct !{!39, !40, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!40 = distinct !{!40, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!41 = distinct !{!41, !42, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!42 = distinct !{!42, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!43 = distinct !{!43, !44, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!44 = distinct !{!44, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!45 = distinct !{!45, !46, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!46 = distinct !{!46, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!47 = distinct !{!47, !48, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!48 = distinct !{!48, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!49 = distinct !{!49, !50, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!50 = distinct !{!50, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!51 = distinct !{!51, !52, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE: argument 0"}
!52 = distinct !{!52, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE"}
!53 = distinct !{!53, !54, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE: argument 0"}
!54 = distinct !{!54, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE"}
!55 = distinct !{!55, !56, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE: argument 0"}
!56 = distinct !{!56, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE"}
!57 = !{!47, !49, !51, !53, !55}
!58 = !{!59, !61, !63, !65, !67}
!59 = distinct !{!59, !60, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!60 = distinct !{!60, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!61 = distinct !{!61, !62, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!62 = distinct !{!62, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!63 = distinct !{!63, !64, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE: argument 0"}
!64 = distinct !{!64, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE"}
!65 = distinct !{!65, !66, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE: argument 0"}
!66 = distinct !{!66, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE"}
!67 = distinct !{!67, !68, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE: argument 0"}
!68 = distinct !{!68, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE"}
!69 = !{!70, !72, !74, !76, !78, !80, !82, !84, !86, !88}
!70 = distinct !{!70, !71, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!71 = distinct !{!71, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!72 = distinct !{!72, !73, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!73 = distinct !{!73, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!74 = distinct !{!74, !75, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!75 = distinct !{!75, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!76 = distinct !{!76, !77, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!77 = distinct !{!77, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!78 = distinct !{!78, !79, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!79 = distinct !{!79, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!80 = distinct !{!80, !81, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!81 = distinct !{!81, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!82 = distinct !{!82, !83, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!83 = distinct !{!83, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!84 = distinct !{!84, !85, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE: argument 0"}
!85 = distinct !{!85, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE"}
!86 = distinct !{!86, !87, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE: argument 0"}
!87 = distinct !{!87, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE"}
!88 = distinct !{!88, !89, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE: argument 0"}
!89 = distinct !{!89, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE"}
!90 = !{!80, !82, !84, !86, !88}
!91 = !{!92, !94, !96, !98, !100, !102, !104, !106, !108, !110, !112}
!92 = distinct !{!92, !93, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!93 = distinct !{!93, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!94 = distinct !{!94, !95, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!95 = distinct !{!95, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!96 = distinct !{!96, !97, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!97 = distinct !{!97, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!98 = distinct !{!98, !99, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!99 = distinct !{!99, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!100 = distinct !{!100, !101, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!101 = distinct !{!101, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!102 = distinct !{!102, !103, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!103 = distinct !{!103, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!104 = distinct !{!104, !105, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!105 = distinct !{!105, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!106 = distinct !{!106, !107, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE: argument 0"}
!107 = distinct !{!107, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE"}
!108 = distinct !{!108, !109, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE: argument 0"}
!109 = distinct !{!109, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE"}
!110 = distinct !{!110, !111, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE: argument 0"}
!111 = distinct !{!111, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE"}
!112 = distinct !{!112, !113, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoModuleVariablesENS0_9ScopeInfoE: argument 0"}
!113 = distinct !{!113, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoModuleVariablesENS0_9ScopeInfoE"}
!114 = !{!102, !104, !106, !108, !110, !112}
!115 = !{!112}
!116 = !{!117, !119, !121, !123, !125, !127, !129, !131}
!117 = distinct !{!117, !118, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!118 = distinct !{!118, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!119 = distinct !{!119, !120, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!120 = distinct !{!120, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!121 = distinct !{!121, !122, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!122 = distinct !{!122, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!123 = distinct !{!123, !124, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!124 = distinct !{!124, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!125 = distinct !{!125, !126, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!126 = distinct !{!126, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!127 = distinct !{!127, !128, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!128 = distinct !{!128, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!129 = distinct !{!129, !130, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!130 = distinct !{!130, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!131 = distinct !{!131, !132, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE: argument 0"}
!132 = distinct !{!132, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE"}
!133 = !{!127, !129, !131}
!134 = !{!135, !137, !139, !141, !143, !145, !147, !149}
!135 = distinct !{!135, !136, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!136 = distinct !{!136, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!137 = distinct !{!137, !138, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!138 = distinct !{!138, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!139 = distinct !{!139, !140, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!140 = distinct !{!140, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!141 = distinct !{!141, !142, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!142 = distinct !{!142, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!143 = distinct !{!143, !144, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!144 = distinct !{!144, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!145 = distinct !{!145, !146, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!146 = distinct !{!146, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!147 = distinct !{!147, !148, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!148 = distinct !{!148, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!149 = distinct !{!149, !150, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE: argument 0"}
!150 = distinct !{!150, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE"}
!151 = !{!145, !147, !149}
!152 = !{!153, !155, !157, !159, !161, !163, !165, !167}
!153 = distinct !{!153, !154, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!154 = distinct !{!154, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!155 = distinct !{!155, !156, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!156 = distinct !{!156, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!157 = distinct !{!157, !158, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!158 = distinct !{!158, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!159 = distinct !{!159, !160, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!160 = distinct !{!160, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!161 = distinct !{!161, !162, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!162 = distinct !{!162, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!163 = distinct !{!163, !164, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!164 = distinct !{!164, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!165 = distinct !{!165, !166, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!166 = distinct !{!166, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!167 = distinct !{!167, !168, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE: argument 0"}
!168 = distinct !{!168, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE"}
!169 = !{!163, !165, !167}
!170 = !{!171, !173, !175, !177, !179, !181, !183, !185}
!171 = distinct !{!171, !172, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!172 = distinct !{!172, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!173 = distinct !{!173, !174, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!174 = distinct !{!174, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!175 = distinct !{!175, !176, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!176 = distinct !{!176, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!177 = distinct !{!177, !178, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!178 = distinct !{!178, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!179 = distinct !{!179, !180, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!180 = distinct !{!180, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!181 = distinct !{!181, !182, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!182 = distinct !{!182, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!183 = distinct !{!183, !184, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!184 = distinct !{!184, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!185 = distinct !{!185, !186, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE: argument 0"}
!186 = distinct !{!186, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE"}
!187 = !{!181, !183, !185}
!188 = !{!189, !191, !193, !195}
!189 = distinct !{!189, !190, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!190 = distinct !{!190, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!191 = distinct !{!191, !192, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!192 = distinct !{!192, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!193 = distinct !{!193, !194, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!194 = distinct !{!194, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!195 = distinct !{!195, !196, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!196 = distinct !{!196, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!197 = !{!195}
!198 = !{!199, !201, !203, !205}
!199 = distinct !{!199, !200, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!200 = distinct !{!200, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!201 = distinct !{!201, !202, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!202 = distinct !{!202, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!203 = distinct !{!203, !204, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!204 = distinct !{!204, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!205 = distinct !{!205, !206, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!206 = distinct !{!206, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!207 = !{!205}
!208 = !{!209, !211, !213, !215}
!209 = distinct !{!209, !210, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!210 = distinct !{!210, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!211 = distinct !{!211, !212, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!212 = distinct !{!212, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!213 = distinct !{!213, !214, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!214 = distinct !{!214, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!215 = distinct !{!215, !216, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!216 = distinct !{!216, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!217 = !{!215}
!218 = !{!219, !221, !223, !225, !227}
!219 = distinct !{!219, !220, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!220 = distinct !{!220, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!221 = distinct !{!221, !222, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!222 = distinct !{!222, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!223 = distinct !{!223, !224, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!224 = distinct !{!224, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!225 = distinct !{!225, !226, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!226 = distinct !{!226, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!227 = distinct !{!227, !228, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!228 = distinct !{!228, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!229 = !{!227}
!230 = !{!"branch_weights", i32 2000, i32 1}
!231 = !{!232, !234, !236, !238, !240, !242, !244, !246}
!232 = distinct !{!232, !233, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!233 = distinct !{!233, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!234 = distinct !{!234, !235, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!235 = distinct !{!235, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!236 = distinct !{!236, !237, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!237 = distinct !{!237, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!238 = distinct !{!238, !239, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!239 = distinct !{!239, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!240 = distinct !{!240, !241, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!241 = distinct !{!241, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!242 = distinct !{!242, !243, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!243 = distinct !{!243, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!244 = distinct !{!244, !245, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!245 = distinct !{!245, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!246 = distinct !{!246, !247, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE: argument 0"}
!247 = distinct !{!247, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE"}
!248 = !{!242, !244, !246}
!249 = !{!250, !252, !254, !256, !258}
!250 = distinct !{!250, !251, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!251 = distinct !{!251, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!252 = distinct !{!252, !253, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!253 = distinct !{!253, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!254 = distinct !{!254, !255, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!255 = distinct !{!255, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!256 = distinct !{!256, !257, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!257 = distinct !{!257, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!258 = distinct !{!258, !259, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!259 = distinct !{!259, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!260 = !{!258}
!261 = !{!262, !264, !266, !268}
!262 = distinct !{!262, !263, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!263 = distinct !{!263, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!264 = distinct !{!264, !265, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!265 = distinct !{!265, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!266 = distinct !{!266, !267, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!267 = distinct !{!267, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!268 = distinct !{!268, !269, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!269 = distinct !{!269, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!270 = !{!271, !273, !275, !277, !279, !281}
!271 = distinct !{!271, !272, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!272 = distinct !{!272, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!273 = distinct !{!273, !274, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!274 = distinct !{!274, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!275 = distinct !{!275, !276, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!276 = distinct !{!276, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!277 = distinct !{!277, !278, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!278 = distinct !{!278, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!279 = distinct !{!279, !280, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!280 = distinct !{!280, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!281 = distinct !{!281, !282, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!282 = distinct !{!282, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!283 = !{!281}
!284 = !{!285, !287, !289, !291, !293, !295}
!285 = distinct !{!285, !286, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!286 = distinct !{!286, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!287 = distinct !{!287, !288, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!288 = distinct !{!288, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!289 = distinct !{!289, !290, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!290 = distinct !{!290, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!291 = distinct !{!291, !292, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!292 = distinct !{!292, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!293 = distinct !{!293, !294, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!294 = distinct !{!294, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!295 = distinct !{!295, !296, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!296 = distinct !{!296, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!297 = !{!295}
!298 = !{!299, !301, !303, !305, !307, !309}
!299 = distinct !{!299, !300, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!300 = distinct !{!300, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!301 = distinct !{!301, !302, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!302 = distinct !{!302, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!303 = distinct !{!303, !304, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!304 = distinct !{!304, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!305 = distinct !{!305, !306, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!306 = distinct !{!306, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!307 = distinct !{!307, !308, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!308 = distinct !{!308, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!309 = distinct !{!309, !310, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!310 = distinct !{!310, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!311 = !{!309}
!312 = !{!313, !315, !317, !319, !321, !323}
!313 = distinct !{!313, !314, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!314 = distinct !{!314, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!315 = distinct !{!315, !316, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!316 = distinct !{!316, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!317 = distinct !{!317, !318, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!318 = distinct !{!318, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!319 = distinct !{!319, !320, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!320 = distinct !{!320, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!321 = distinct !{!321, !322, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!322 = distinct !{!322, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!323 = distinct !{!323, !324, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!324 = distinct !{!324, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!325 = !{!323}
!326 = !{!327, !329, !331, !333, !335, !337, !339}
!327 = distinct !{!327, !328, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!328 = distinct !{!328, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!329 = distinct !{!329, !330, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!330 = distinct !{!330, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!331 = distinct !{!331, !332, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!332 = distinct !{!332, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!333 = distinct !{!333, !334, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!334 = distinct !{!334, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!335 = distinct !{!335, !336, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!336 = distinct !{!336, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!337 = distinct !{!337, !338, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!338 = distinct !{!338, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!339 = distinct !{!339, !340, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!340 = distinct !{!340, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!341 = !{!337, !339}
!342 = !{!343, !345, !347, !349, !351, !353, !355, !357, !359}
!343 = distinct !{!343, !344, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!344 = distinct !{!344, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!345 = distinct !{!345, !346, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!346 = distinct !{!346, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!347 = distinct !{!347, !348, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!348 = distinct !{!348, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!349 = distinct !{!349, !350, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!350 = distinct !{!350, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!351 = distinct !{!351, !352, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!352 = distinct !{!352, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!353 = distinct !{!353, !354, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!354 = distinct !{!354, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!355 = distinct !{!355, !356, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!356 = distinct !{!356, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!357 = distinct !{!357, !358, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE: argument 0"}
!358 = distinct !{!358, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE"}
!359 = distinct !{!359, !360, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE: argument 0"}
!360 = distinct !{!360, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE"}
!361 = !{!353, !355, !357, !359}
!362 = !{!363}
!363 = distinct !{!363, !364, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!364 = distinct !{!364, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!365 = !{!366}
!366 = distinct !{!366, !367, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!367 = distinct !{!367, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!368 = !{!369}
!369 = distinct !{!369, !370, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!370 = distinct !{!370, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!371 = !{!372}
!372 = distinct !{!372, !373, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!373 = distinct !{!373, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!374 = !{!375}
!375 = distinct !{!375, !376, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!376 = distinct !{!376, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!377 = !{!378}
!378 = distinct !{!378, !379, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!379 = distinct !{!379, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!380 = !{!381, !383, !385, !387, !389, !391, !393, !395, !397, !399}
!381 = distinct !{!381, !382, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!382 = distinct !{!382, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!383 = distinct !{!383, !384, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!384 = distinct !{!384, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!385 = distinct !{!385, !386, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!386 = distinct !{!386, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!387 = distinct !{!387, !388, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!388 = distinct !{!388, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!389 = distinct !{!389, !390, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!390 = distinct !{!390, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!391 = distinct !{!391, !392, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!392 = distinct !{!392, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!393 = distinct !{!393, !394, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!394 = distinct !{!394, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!395 = distinct !{!395, !396, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE: argument 0"}
!396 = distinct !{!396, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE"}
!397 = distinct !{!397, !398, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE: argument 0"}
!398 = distinct !{!398, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE"}
!399 = distinct !{!399, !400, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE: argument 0"}
!400 = distinct !{!400, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE"}
!401 = !{!391, !393, !395, !397, !399}
!402 = !{!403, !405, !407, !409, !411, !413, !415, !417, !419, !421}
!403 = distinct !{!403, !404, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!404 = distinct !{!404, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!405 = distinct !{!405, !406, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!406 = distinct !{!406, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!407 = distinct !{!407, !408, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!408 = distinct !{!408, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!409 = distinct !{!409, !410, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!410 = distinct !{!410, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!411 = distinct !{!411, !412, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!412 = distinct !{!412, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!413 = distinct !{!413, !414, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!414 = distinct !{!414, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!415 = distinct !{!415, !416, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!416 = distinct !{!416, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!417 = distinct !{!417, !418, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE: argument 0"}
!418 = distinct !{!418, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE"}
!419 = distinct !{!419, !420, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE: argument 0"}
!420 = distinct !{!420, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE"}
!421 = distinct !{!421, !422, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE: argument 0"}
!422 = distinct !{!422, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE"}
!423 = !{!413, !415, !417, !419, !421}
!424 = !{!425, !427, !429, !431, !433, !435, !437, !439, !441, !443, !445}
!425 = distinct !{!425, !426, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!426 = distinct !{!426, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!427 = distinct !{!427, !428, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!428 = distinct !{!428, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!429 = distinct !{!429, !430, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!430 = distinct !{!430, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!431 = distinct !{!431, !432, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!432 = distinct !{!432, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!433 = distinct !{!433, !434, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!434 = distinct !{!434, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!435 = distinct !{!435, !436, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!436 = distinct !{!436, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!437 = distinct !{!437, !438, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!438 = distinct !{!438, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!439 = distinct !{!439, !440, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE: argument 0"}
!440 = distinct !{!440, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE"}
!441 = distinct !{!441, !442, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE: argument 0"}
!442 = distinct !{!442, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE"}
!443 = distinct !{!443, !444, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE: argument 0"}
!444 = distinct !{!444, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE"}
!445 = distinct !{!445, !446, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoModuleVariablesENS0_9ScopeInfoE: argument 0"}
!446 = distinct !{!446, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoModuleVariablesENS0_9ScopeInfoE"}
!447 = !{!435, !437, !439, !441, !443, !445}
!448 = !{!449, !451, !453, !455, !457, !459, !461, !463, !465, !467, !469}
!449 = distinct !{!449, !450, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!450 = distinct !{!450, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!451 = distinct !{!451, !452, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!452 = distinct !{!452, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!453 = distinct !{!453, !454, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!454 = distinct !{!454, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!455 = distinct !{!455, !456, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!456 = distinct !{!456, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!457 = distinct !{!457, !458, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!458 = distinct !{!458, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!459 = distinct !{!459, !460, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!460 = distinct !{!460, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!461 = distinct !{!461, !462, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!462 = distinct !{!462, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!463 = distinct !{!463, !464, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE: argument 0"}
!464 = distinct !{!464, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE"}
!465 = distinct !{!465, !466, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE: argument 0"}
!466 = distinct !{!466, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE"}
!467 = distinct !{!467, !468, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE: argument 0"}
!468 = distinct !{!468, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE"}
!469 = distinct !{!469, !470, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoModuleVariablesENS0_9ScopeInfoE: argument 0"}
!470 = distinct !{!470, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoModuleVariablesENS0_9ScopeInfoE"}
!471 = !{!459, !461, !463, !465, !467, !469}
!472 = !{!473, !475, !477, !479, !481, !483, !485, !487, !489, !491, !493}
!473 = distinct !{!473, !474, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!474 = distinct !{!474, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!475 = distinct !{!475, !476, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!476 = distinct !{!476, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!477 = distinct !{!477, !478, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!478 = distinct !{!478, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!479 = distinct !{!479, !480, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!480 = distinct !{!480, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!481 = distinct !{!481, !482, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!482 = distinct !{!482, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!483 = distinct !{!483, !484, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!484 = distinct !{!484, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!485 = distinct !{!485, !486, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!486 = distinct !{!486, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!487 = distinct !{!487, !488, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE: argument 0"}
!488 = distinct !{!488, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE"}
!489 = distinct !{!489, !490, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE: argument 0"}
!490 = distinct !{!490, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE"}
!491 = distinct !{!491, !492, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE: argument 0"}
!492 = distinct !{!492, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE"}
!493 = distinct !{!493, !494, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoModuleVariablesENS0_9ScopeInfoE: argument 0"}
!494 = distinct !{!494, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoModuleVariablesENS0_9ScopeInfoE"}
!495 = !{!483, !485, !487, !489, !491, !493}
!496 = !{!497}
!497 = distinct !{!497, !498, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!498 = distinct !{!498, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!499 = !{!500}
!500 = distinct !{!500, !501, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!501 = distinct !{!501, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!502 = !{!503}
!503 = distinct !{!503, !504, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!504 = distinct !{!504, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!505 = !{!506, !508}
!506 = distinct !{!506, !507, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!507 = distinct !{!507, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!508 = distinct !{!508, !509, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!509 = distinct !{!509, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!510 = !{!511, !513, !515}
!511 = distinct !{!511, !512, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!512 = distinct !{!512, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!513 = distinct !{!513, !514, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!514 = distinct !{!514, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!515 = distinct !{!515, !516, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!516 = distinct !{!516, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!517 = !{!518, !520, !522, !524}
!518 = distinct !{!518, !519, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!519 = distinct !{!519, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!520 = distinct !{!520, !521, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!521 = distinct !{!521, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!522 = distinct !{!522, !523, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!523 = distinct !{!523, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!524 = distinct !{!524, !525, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!525 = distinct !{!525, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!526 = !{!527}
!527 = distinct !{!527, !528, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!528 = distinct !{!528, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!529 = !{!530, !532}
!530 = distinct !{!530, !531, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!531 = distinct !{!531, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!532 = distinct !{!532, !533, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!533 = distinct !{!533, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!534 = !{!535, !537, !539}
!535 = distinct !{!535, !536, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!536 = distinct !{!536, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!537 = distinct !{!537, !538, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!538 = distinct !{!538, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!539 = distinct !{!539, !540, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!540 = distinct !{!540, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!541 = !{!539}
!542 = !{!543, !545, !547, !549}
!543 = distinct !{!543, !544, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!544 = distinct !{!544, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!545 = distinct !{!545, !546, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!546 = distinct !{!546, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!547 = distinct !{!547, !548, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!548 = distinct !{!548, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!549 = distinct !{!549, !550, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!550 = distinct !{!550, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!551 = !{!549}
!552 = !{!553, !555, !557, !559, !561}
!553 = distinct !{!553, !554, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!554 = distinct !{!554, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!555 = distinct !{!555, !556, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!556 = distinct !{!556, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!557 = distinct !{!557, !558, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!558 = distinct !{!558, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!559 = distinct !{!559, !560, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!560 = distinct !{!560, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!561 = distinct !{!561, !562, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!562 = distinct !{!562, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!563 = !{!561}
!564 = !{!565, !567, !569, !571, !573, !575}
!565 = distinct !{!565, !566, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!566 = distinct !{!566, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!567 = distinct !{!567, !568, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!568 = distinct !{!568, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!569 = distinct !{!569, !570, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!570 = distinct !{!570, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!571 = distinct !{!571, !572, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!572 = distinct !{!572, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!573 = distinct !{!573, !574, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!574 = distinct !{!574, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!575 = distinct !{!575, !576, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!576 = distinct !{!576, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!577 = !{!575}
!578 = !{!579, !581, !583, !585, !587, !589, !591}
!579 = distinct !{!579, !580, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!580 = distinct !{!580, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!581 = distinct !{!581, !582, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!582 = distinct !{!582, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!583 = distinct !{!583, !584, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!584 = distinct !{!584, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!585 = distinct !{!585, !586, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!586 = distinct !{!586, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!587 = distinct !{!587, !588, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!588 = distinct !{!588, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!589 = distinct !{!589, !590, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!590 = distinct !{!590, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!591 = distinct !{!591, !592, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!592 = distinct !{!592, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!593 = !{!589, !591}
!594 = !{!595, !597, !599, !601, !603, !605, !607, !609, !611}
!595 = distinct !{!595, !596, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!596 = distinct !{!596, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!597 = distinct !{!597, !598, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!598 = distinct !{!598, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!599 = distinct !{!599, !600, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!600 = distinct !{!600, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!601 = distinct !{!601, !602, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!602 = distinct !{!602, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!603 = distinct !{!603, !604, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!604 = distinct !{!604, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!605 = distinct !{!605, !606, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!606 = distinct !{!606, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!607 = distinct !{!607, !608, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!608 = distinct !{!608, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!609 = distinct !{!609, !610, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE: argument 0"}
!610 = distinct !{!610, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE"}
!611 = distinct !{!611, !612, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE: argument 0"}
!612 = distinct !{!612, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE"}
!613 = !{!605, !607, !609, !611}
!614 = !{!615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !635}
!615 = distinct !{!615, !616, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE: argument 0"}
!616 = distinct !{!616, !"_ZN2v88internal45TqRuntimeFieldSliceScopeInfoContextLocalInfosENS0_9ScopeInfoE"}
!617 = distinct !{!617, !618, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE: argument 0"}
!618 = distinct !{!618, !"_ZN2v88internal50TqRuntimeFieldSliceScopeInfoSavedClassVariableInfoENS0_9ScopeInfoE"}
!619 = distinct !{!619, !620, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE: argument 0"}
!620 = distinct !{!620, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoReceiverInfoENS0_9ScopeInfoE"}
!621 = distinct !{!621, !622, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE: argument 0"}
!622 = distinct !{!622, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoFunctionVariableInfoENS0_9ScopeInfoE"}
!623 = distinct !{!623, !624, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE: argument 0"}
!624 = distinct !{!624, !"_ZN2v88internal48TqRuntimeFieldSliceScopeInfoInferredFunctionNameENS0_9ScopeInfoE"}
!625 = distinct !{!625, !626, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE: argument 0"}
!626 = distinct !{!626, !"_ZN2v88internal40TqRuntimeFieldSliceScopeInfoPositionInfoENS0_9ScopeInfoE"}
!627 = distinct !{!627, !628, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE: argument 0"}
!628 = distinct !{!628, !"_ZN2v88internal42TqRuntimeFieldSliceScopeInfoOuterScopeInfoENS0_9ScopeInfoE"}
!629 = distinct !{!629, !630, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE: argument 0"}
!630 = distinct !{!630, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoLocalsBlockListENS0_9ScopeInfoE"}
!631 = distinct !{!631, !632, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE: argument 0"}
!632 = distinct !{!632, !"_ZN2v88internal38TqRuntimeFieldSliceScopeInfoModuleInfoENS0_9ScopeInfoE"}
!633 = distinct !{!633, !634, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE: argument 0"}
!634 = distinct !{!634, !"_ZN2v88internal47TqRuntimeFieldSliceScopeInfoModuleVariableCountENS0_9ScopeInfoE"}
!635 = distinct !{!635, !636, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoModuleVariablesENS0_9ScopeInfoE: argument 0"}
!636 = distinct !{!636, !"_ZN2v88internal43TqRuntimeFieldSliceScopeInfoModuleVariablesENS0_9ScopeInfoE"}
!637 = !{!625, !627, !629, !631, !633, !635}
