; ModuleID = '../../cc/trees/occlusion.cc'
source_filename = "../../cc/trees/occlusion.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.cc::Occlusion" = type { %"class.gfx::Transform", %"class.cc::SimpleEnclosedRegion", %"class.cc::SimpleEnclosedRegion" }
%"class.cc::SimpleEnclosedRegion" = type { %"class.gfx::Rect" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@__const._ZNK2cc9Occlusion24GetUnoccludedContentRectERKN3gfx4RectE.inverse_draw_transform = private unnamed_addr constant %"class.gfx::Transform" { %class.SkMatrix44 <{ [4 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], i8 -86, [3 x i8] c"\AA\AA\AA" }> }, align 4
@.str = private unnamed_addr constant [9 x i8] c"outside(\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c") inside(\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c")\00", align 1
@constinit = private unnamed_addr constant [4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00]], align 4

@_ZN2cc9OcclusionC1Ev = hidden unnamed_addr alias void (%"class.cc::Occlusion"*), void (%"class.cc::Occlusion"*)* @_ZN2cc9OcclusionC2Ev
@_ZN2cc9OcclusionC1ERKN3gfx9TransformERKNS_20SimpleEnclosedRegionES7_ = hidden unnamed_addr alias void (%"class.cc::Occlusion"*, %"class.gfx::Transform"*, %"class.cc::SimpleEnclosedRegion"*, %"class.cc::SimpleEnclosedRegion"*), void (%"class.cc::Occlusion"*, %"class.gfx::Transform"*, %"class.cc::SimpleEnclosedRegion"*, %"class.cc::SimpleEnclosedRegion"*)* @_ZN2cc9OcclusionC2ERKN3gfx9TransformERKNS_20SimpleEnclosedRegionES7_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc9OcclusionC2Ev(%"class.cc::Occlusion"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.cc::Occlusion"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #5
  %3 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 0, i32 0, i32 1
  store i8 0, i8* %3, align 4
  %4 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 1
  %5 = bitcast %"class.cc::SimpleEnclosedRegion"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc9OcclusionC2ERKN3gfx9TransformERKNS_20SimpleEnclosedRegionES7_(%"class.cc::Occlusion"* nocapture, %"class.gfx::Transform"* nocapture readonly dereferenceable(68), %"class.cc::SimpleEnclosedRegion"* nocapture readonly dereferenceable(16), %"class.cc::SimpleEnclosedRegion"* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %5 = bitcast %"class.cc::Occlusion"* %0 to i8*
  %6 = bitcast %"class.gfx::Transform"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %6, i64 68, i1 false) #5
  %7 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 1
  %8 = bitcast %"class.cc::SimpleEnclosedRegion"* %7 to i8*
  %9 = bitcast %"class.cc::SimpleEnclosedRegion"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 4 %9, i64 16, i1 false) #5
  %10 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 2
  %11 = bitcast %"class.cc::SimpleEnclosedRegion"* %10 to i8*
  %12 = bitcast %"class.cc::SimpleEnclosedRegion"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %11, i8* align 4 %12, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2cc9Occlusion34GetOcclusionWithGivenDrawTransformERKN3gfx9TransformE(%"class.cc::Occlusion"* noalias nocapture sret, %"class.cc::Occlusion"* nocapture readonly, %"class.gfx::Transform"* nocapture readonly dereferenceable(68)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %1, i64 0, i32 1
  %5 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %1, i64 0, i32 2
  %6 = bitcast %"class.cc::Occlusion"* %0 to i8*
  %7 = bitcast %"class.gfx::Transform"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %7, i64 68, i1 false) #5
  %8 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 1
  %9 = bitcast %"class.cc::SimpleEnclosedRegion"* %8 to i8*
  %10 = bitcast %"class.cc::SimpleEnclosedRegion"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 4 %10, i64 16, i1 false) #5
  %11 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 2
  %12 = bitcast %"class.cc::SimpleEnclosedRegion"* %11 to i8*
  %13 = bitcast %"class.cc::SimpleEnclosedRegion"* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %12, i8* align 4 %13, i64 16, i1 false) #5
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc9Occlusion12HasOcclusionEv(%"class.cc::Occlusion"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 2, i32 0, i32 1, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 2, i32 0, i32 1, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %17

9:                                                ; preds = %1, %5
  %10 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 1, i32 0, i32 1, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %17, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 1, i32 0, i32 1, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp ne i32 %15, 0
  br label %17

17:                                               ; preds = %13, %9, %5
  %18 = phi i1 [ true, %5 ], [ false, %9 ], [ %16, %13 ]
  ret i1 %18
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2cc9Occlusion10IsOccludedERKN3gfx4RectE(%"class.cc::Occlusion"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca { i64, i64 }, align 8
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %53, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %53, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 2, i32 0, i32 1, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 2, i32 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %29

21:                                               ; preds = %17, %13
  %22 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 1, i32 0, i32 1, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %53, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 1, i32 0, i32 1, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %53, label %29

29:                                               ; preds = %25, %17
  %30 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %30)
  %31 = bitcast { i64, i64 }* %3 to %"class.gfx::Rect"*
  %32 = bitcast <2 x i64>* %4 to %"class.gfx::Rect"*
  %33 = bitcast <2 x i64>* %5 to %"class.gfx::Rect"*
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %35 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 0
  %36 = tail call { i64, i64 } @_ZN2cc8MathUtil23MapEnclosingClippedRectERKN3gfx9TransformERKNS1_4RectE(%"class.gfx::Transform"* dereferenceable(68) %35, %"class.gfx::Rect"* dereferenceable(16) %1) #5
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %38 = extractvalue { i64, i64 } %36, 0
  store i64 %38, i64* %37, align 8
  %39 = extractvalue { i64, i64 } %36, 1
  store i64 %39, i64* %34, align 8
  %40 = bitcast <2 x i64>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %40) #5
  %41 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 2
  %42 = bitcast %"class.cc::SimpleEnclosedRegion"* %41 to <2 x i64>*
  %43 = load <2 x i64>, <2 x i64>* %42, align 4
  store <2 x i64> %43, <2 x i64>* %4, align 16
  call void @_ZN3gfx4Rect8SubtractERKS0_(%"class.gfx::Rect"* nonnull %31, %"class.gfx::Rect"* nonnull dereferenceable(16) %32) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %40) #5
  %44 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44) #5
  %45 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 1
  %46 = bitcast %"class.cc::SimpleEnclosedRegion"* %45 to <2 x i64>*
  %47 = load <2 x i64>, <2 x i64>* %46, align 4
  store <2 x i64> %47, <2 x i64>* %5, align 16
  call void @_ZN3gfx4Rect8SubtractERKS0_(%"class.gfx::Rect"* nonnull %31, %"class.gfx::Rect"* nonnull dereferenceable(16) %33) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %44) #5
  %48 = load i64, i64* %34, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %30)
  %49 = trunc i64 %48 to i32
  %50 = icmp eq i32 %49, 0
  %51 = icmp ult i64 %48, 4294967296
  %52 = or i1 %50, %51
  ret i1 %52

53:                                               ; preds = %25, %21, %2, %9
  %54 = phi i1 [ true, %9 ], [ false, %25 ], [ true, %2 ], [ false, %21 ]
  ret i1 %54
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK2cc9Occlusion32GetUnoccludedRectInTargetSurfaceERKN3gfx4RectE(%"class.cc::Occlusion"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca { i64, i64 }, align 8
  %4 = bitcast { i64, i64 }* %3 to %"class.gfx::Rect"*
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to %"class.gfx::Rect"*
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to %"class.gfx::Rect"*
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %10 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 0
  %11 = tail call { i64, i64 } @_ZN2cc8MathUtil23MapEnclosingClippedRectERKN3gfx9TransformERKNS1_4RectE(%"class.gfx::Transform"* dereferenceable(68) %10, %"class.gfx::Rect"* dereferenceable(16) %1) #5
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %13 = extractvalue { i64, i64 } %11, 0
  store i64 %13, i64* %12, align 8
  %14 = extractvalue { i64, i64 } %11, 1
  store i64 %14, i64* %9, align 8
  %15 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #5
  %16 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 2
  %17 = bitcast %"class.cc::SimpleEnclosedRegion"* %16 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 4
  store <2 x i64> %18, <2 x i64>* %5, align 16
  call void @_ZN3gfx4Rect8SubtractERKS0_(%"class.gfx::Rect"* nonnull %4, %"class.gfx::Rect"* nonnull dereferenceable(16) %6) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #5
  %19 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #5
  %20 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 1
  %21 = bitcast %"class.cc::SimpleEnclosedRegion"* %20 to <2 x i64>*
  %22 = load <2 x i64>, <2 x i64>* %21, align 4
  store <2 x i64> %22, <2 x i64>* %7, align 16
  call void @_ZN3gfx4Rect8SubtractERKS0_(%"class.gfx::Rect"* nonnull %4, %"class.gfx::Rect"* nonnull dereferenceable(16) %8) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #5
  %23 = load i64, i64* %12, align 8
  %24 = insertvalue { i64, i64 } undef, i64 %23, 0
  %25 = load i64, i64* %9, align 8
  %26 = insertvalue { i64, i64 } %24, i64 %25, 1
  ret { i64, i64 } %26
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK2cc9Occlusion24GetUnoccludedContentRectERKN3gfx4RectE(%"class.cc::Occlusion"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca <2 x i64>, align 16
  %4 = bitcast <2 x i64>* %3 to { i64, i64 }*
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to %"class.gfx::Rect"*
  %9 = alloca %"class.gfx::Transform", align 4
  %10 = alloca <2 x i64>, align 16
  %11 = bitcast <2 x i64>* %10 to { i64, i64 }*
  %12 = bitcast <2 x i64>* %10 to %"class.gfx::Rect"*
  %13 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %2, %16
  %21 = bitcast %"class.gfx::Rect"* %1 to <2 x i64>*
  %22 = load <2 x i64>, <2 x i64>* %21, align 4
  br label %86

23:                                               ; preds = %16
  %24 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 2, i32 0, i32 1, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 2, i32 0, i32 1, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %42

31:                                               ; preds = %27, %23
  %32 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 1, i32 0, i32 1, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 1, i32 0, i32 1, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %35, %31
  %40 = bitcast %"class.gfx::Rect"* %1 to <2 x i64>*
  %41 = load <2 x i64>, <2 x i64>* %40, align 4
  br label %86

42:                                               ; preds = %35, %27
  %43 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %43) #5
  %44 = bitcast <2 x i64>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44)
  %45 = bitcast <2 x i64>* %3 to %"class.gfx::Rect"*
  %46 = bitcast <2 x i64>* %5 to %"class.gfx::Rect"*
  %47 = bitcast <2 x i64>* %6 to %"class.gfx::Rect"*
  %48 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 1
  %49 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 0
  %50 = tail call { i64, i64 } @_ZN2cc8MathUtil23MapEnclosingClippedRectERKN3gfx9TransformERKNS1_4RectE(%"class.gfx::Transform"* dereferenceable(68) %49, %"class.gfx::Rect"* dereferenceable(16) %1) #5
  %51 = getelementptr inbounds <2 x i64>, <2 x i64>* %3, i64 0, i64 0
  %52 = extractvalue { i64, i64 } %50, 0
  store i64 %52, i64* %51, align 16
  %53 = extractvalue { i64, i64 } %50, 1
  store i64 %53, i64* %48, align 8
  %54 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %54) #5
  %55 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 2
  %56 = bitcast %"class.cc::SimpleEnclosedRegion"* %55 to <2 x i64>*
  %57 = load <2 x i64>, <2 x i64>* %56, align 4
  store <2 x i64> %57, <2 x i64>* %5, align 16
  call void @_ZN3gfx4Rect8SubtractERKS0_(%"class.gfx::Rect"* nonnull %45, %"class.gfx::Rect"* nonnull dereferenceable(16) %46) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %54) #5
  %58 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %58) #5
  %59 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 1
  %60 = bitcast %"class.cc::SimpleEnclosedRegion"* %59 to <2 x i64>*
  %61 = load <2 x i64>, <2 x i64>* %60, align 4
  store <2 x i64> %61, <2 x i64>* %6, align 16
  call void @_ZN3gfx4Rect8SubtractERKS0_(%"class.gfx::Rect"* nonnull %45, %"class.gfx::Rect"* nonnull dereferenceable(16) %47) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %58) #5
  %62 = load <2 x i64>, <2 x i64>* %3, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %44)
  store <2 x i64> %62, <2 x i64>* %7, align 16
  %63 = extractelement <2 x i64> %62, i32 1
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 0
  %66 = icmp ult i64 %63, 4294967296
  %67 = or i1 %65, %66
  br i1 %67, label %84, label %68

68:                                               ; preds = %42
  %69 = bitcast %"class.gfx::Transform"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %69) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %69, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZNK2cc9Occlusion24GetUnoccludedContentRectERKN3gfx4RectE.inverse_draw_transform to i8*), i64 68, i1 false)
  %70 = call zeroext i1 @_ZNK3gfx9Transform10GetInverseEPS0_(%"class.gfx::Transform"* %49, %"class.gfx::Transform"* nonnull %9) #5
  br i1 %70, label %74, label %71

71:                                               ; preds = %68
  %72 = bitcast %"class.gfx::Rect"* %1 to <2 x i64>*
  %73 = load <2 x i64>, <2 x i64>* %72, align 4
  br label %82

74:                                               ; preds = %68
  %75 = bitcast <2 x i64>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %75) #5
  %76 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i64 0, i32 1
  %77 = call { i64, i64 } @_ZN2cc8MathUtil27ProjectEnclosingClippedRectERKN3gfx9TransformERKNS1_4RectE(%"class.gfx::Transform"* nonnull dereferenceable(68) %9, %"class.gfx::Rect"* nonnull dereferenceable(16) %8) #5
  %78 = getelementptr inbounds <2 x i64>, <2 x i64>* %10, i64 0, i64 0
  %79 = extractvalue { i64, i64 } %77, 0
  store i64 %79, i64* %78, align 16
  %80 = extractvalue { i64, i64 } %77, 1
  store i64 %80, i64* %76, align 8
  call void @_ZN3gfx4Rect9IntersectERKS0_(%"class.gfx::Rect"* nonnull %12, %"class.gfx::Rect"* dereferenceable(16) %1) #5
  %81 = load <2 x i64>, <2 x i64>* %10, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %75) #5
  br label %82

82:                                               ; preds = %74, %71
  %83 = phi <2 x i64> [ %81, %74 ], [ %73, %71 ]
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %69) #5
  br label %84

84:                                               ; preds = %42, %82
  %85 = phi <2 x i64> [ %83, %82 ], [ zeroinitializer, %42 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %43) #5
  br label %86

86:                                               ; preds = %84, %39, %20
  %87 = phi <2 x i64> [ %22, %20 ], [ %85, %84 ], [ %41, %39 ]
  %88 = extractelement <2 x i64> %87, i32 0
  %89 = insertvalue { i64, i64 } undef, i64 %88, 0
  %90 = extractelement <2 x i64> %87, i32 1
  %91 = insertvalue { i64, i64 } %89, i64 %90, 1
  ret { i64, i64 } %91
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare zeroext i1 @_ZNK3gfx9Transform10GetInverseEPS0_(%"class.gfx::Transform"*, %"class.gfx::Transform"*) local_unnamed_addr #3

declare { i64, i64 } @_ZN2cc8MathUtil27ProjectEnclosingClippedRectERKN3gfx9TransformERKNS1_4RectE(%"class.gfx::Transform"* dereferenceable(68), %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #3

declare void @_ZN3gfx4Rect9IntersectERKS0_(%"class.gfx::Rect"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #3

declare { i64, i64 } @_ZN2cc8MathUtil23MapEnclosingClippedRectERKN3gfx9TransformERKNS1_4RectE(%"class.gfx::Transform"* dereferenceable(68), %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #3

declare void @_ZN3gfx4Rect8SubtractERKS0_(%"class.gfx::Rect"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2cc9Occlusion7IsEqualERKS0_(%"class.cc::Occlusion"*, %"class.cc::Occlusion"* dereferenceable(100)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %1, i64 0, i32 0, i32 0
  %5 = tail call zeroext i1 @_ZNK10SkMatrix44eqERKS_(%class.SkMatrix44* %3, %class.SkMatrix44* dereferenceable(68) %4) #5
  br i1 %5, label %6, label %82

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 2, i32 0, i32 1, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %14, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 2, i32 0, i32 1, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %22

14:                                               ; preds = %10, %6
  %15 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %1, i64 0, i32 2, i32 0, i32 1, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %44, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %1, i64 0, i32 2, i32 0, i32 1, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %44, label %22

22:                                               ; preds = %18, %10
  %23 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %24, %26
  br i1 %27, label %28, label %82

28:                                               ; preds = %22
  %29 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %1, i64 0, i32 2, i32 0, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %30, %32
  br i1 %33, label %34, label %82

34:                                               ; preds = %28
  %35 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %1, i64 0, i32 2, i32 0, i32 1, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %8, %36
  br i1 %37, label %38, label %82

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 2, i32 0, i32 1, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %1, i64 0, i32 2, i32 0, i32 1, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %40, %42
  br i1 %43, label %44, label %82

44:                                               ; preds = %14, %18, %38
  %45 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 1, i32 0, i32 1, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %52, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 1, i32 0, i32 1, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %60

52:                                               ; preds = %48, %44
  %53 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %1, i64 0, i32 1, i32 0, i32 1, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %82, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %1, i64 0, i32 1, i32 0, i32 1, i32 1
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %82, label %60

60:                                               ; preds = %56, %48
  %61 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %62, %64
  br i1 %65, label %66, label %82

66:                                               ; preds = %60
  %67 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %1, i64 0, i32 1, i32 0, i32 0, i32 1
  %70 = load i32, i32* %69, align 4
  %71 = icmp eq i32 %68, %70
  br i1 %71, label %72, label %82

72:                                               ; preds = %66
  %73 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %1, i64 0, i32 1, i32 0, i32 1, i32 0
  %74 = load i32, i32* %73, align 4
  %75 = icmp eq i32 %46, %74
  br i1 %75, label %76, label %82

76:                                               ; preds = %72
  %77 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %0, i64 0, i32 1, i32 0, i32 1, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %1, i64 0, i32 1, i32 0, i32 1, i32 1
  %80 = load i32, i32* %79, align 4
  %81 = icmp eq i32 %78, %80
  br label %82

82:                                               ; preds = %22, %34, %28, %76, %72, %66, %60, %56, %52, %38, %2
  %83 = phi i1 [ false, %38 ], [ false, %2 ], [ true, %56 ], [ false, %66 ], [ false, %72 ], [ %81, %76 ], [ false, %60 ], [ true, %52 ], [ false, %28 ], [ false, %34 ], [ false, %22 ]
  ret i1 %83
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2cc9Occlusion8ToStringEv(%"class.std::__1::basic_string"* noalias nocapture sret, %"class.cc::Occlusion"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = alloca %"class.std::__1::basic_string", align 8
  %10 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #5
  %11 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #5
  %12 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #5
  %13 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #5
  %14 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #5
  %15 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %1, i64 0, i32 0
  call void @_ZNK3gfx9Transform8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %7, %"class.gfx::Transform"* %15) #5
  %16 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %7, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0)) #5, !noalias !2
  %17 = bitcast %"class.std::__1::basic_string"* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %13, i8* align 8 %17, i64 24, i1 false) #5
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 24, i1 false) #5, !noalias !2
  %18 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #5
  %19 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %1, i64 0, i32 1, i32 0
  call void @_ZNK3gfx4Rect8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %8, %"class.gfx::Rect"* %19) #5
  %20 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  %22 = load i8, i8* %21, align 1, !noalias !5
  %23 = icmp slt i8 %22, 0
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8, !noalias !5
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %27 = load i64, i64* %26, align 8, !noalias !5
  %28 = zext i8 %22 to i64
  %29 = select i1 %23, i8* %25, i8* %18
  %30 = select i1 %23, i64 %27, i64 %28
  %31 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %6, i8* %29, i64 %30) #5, !noalias !5
  %32 = bitcast %"class.std::__1::basic_string"* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 8 %32, i64 24, i1 false) #5
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #5, !noalias !5
  %33 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %5, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0)) #5, !noalias !8
  %34 = bitcast %"class.std::__1::basic_string"* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* align 8 %34, i64 24, i1 false) #5
  call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 24, i1 false) #5, !noalias !8
  %35 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %35) #5
  %36 = getelementptr inbounds %"class.cc::Occlusion", %"class.cc::Occlusion"* %1, i64 0, i32 2, i32 0
  call void @_ZNK3gfx4Rect8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %9, %"class.gfx::Rect"* %36) #5
  %37 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %37, i64 0, i32 1, i32 0
  %39 = load i8, i8* %38, align 1, !noalias !11
  %40 = icmp slt i8 %39, 0
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8, !noalias !11
  %43 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %44 = load i64, i64* %43, align 8, !noalias !11
  %45 = zext i8 %39 to i64
  %46 = select i1 %40, i8* %42, i8* %35
  %47 = select i1 %40, i64 %44, i64 %45
  %48 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* %46, i64 %47) #5, !noalias !11
  %49 = bitcast %"class.std::__1::basic_string"* %48 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %10, i8* align 8 %49, i64 24, i1 false) #5
  call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #5, !noalias !11
  %50 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #5, !noalias !14
  %51 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %52 = bitcast %"class.std::__1::basic_string"* %50 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %52, i64 24, i1 false) #5
  call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 24, i1 false) #5, !noalias !14
  %53 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %54 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %53, i64 0, i32 1, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = icmp slt i8 %55, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %2
  %58 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  call void @_ZdlPv(i8* %59) #6
  br label %60

60:                                               ; preds = %2, %57
  %61 = load i8, i8* %38, align 1
  %62 = icmp slt i8 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %60
  %64 = load i8*, i8** %41, align 8
  call void @_ZdlPv(i8* %64) #6
  br label %65

65:                                               ; preds = %60, %63
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %35) #5
  %66 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %67 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %66, i64 0, i32 1, i32 0
  %68 = load i8, i8* %67, align 1
  %69 = icmp slt i8 %68, 0
  br i1 %69, label %70, label %73

70:                                               ; preds = %65
  %71 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  call void @_ZdlPv(i8* %72) #6
  br label %73

73:                                               ; preds = %65, %70
  %74 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %75 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %74, i64 0, i32 1, i32 0
  %76 = load i8, i8* %75, align 1
  %77 = icmp slt i8 %76, 0
  br i1 %77, label %78, label %81

78:                                               ; preds = %73
  %79 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = load i8*, i8** %79, align 8
  call void @_ZdlPv(i8* %80) #6
  br label %81

81:                                               ; preds = %73, %78
  %82 = load i8, i8* %21, align 1
  %83 = icmp slt i8 %82, 0
  br i1 %83, label %84, label %86

84:                                               ; preds = %81
  %85 = load i8*, i8** %24, align 8
  call void @_ZdlPv(i8* %85) #6
  br label %86

86:                                               ; preds = %81, %84
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #5
  %87 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %88 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %87, i64 0, i32 1, i32 0
  %89 = load i8, i8* %88, align 1
  %90 = icmp slt i8 %89, 0
  br i1 %90, label %91, label %94

91:                                               ; preds = %86
  %92 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %93 = load i8*, i8** %92, align 8
  call void @_ZdlPv(i8* %93) #6
  br label %94

94:                                               ; preds = %86, %91
  %95 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %96 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %95, i64 0, i32 1, i32 0
  %97 = load i8, i8* %96, align 1
  %98 = icmp slt i8 %97, 0
  br i1 %98, label %99, label %102

99:                                               ; preds = %94
  %100 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %101 = load i8*, i8** %100, align 8
  call void @_ZdlPv(i8* %101) #6
  br label %102

102:                                              ; preds = %94, %99
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #5
  ret void
}

declare void @_ZNK3gfx9Transform8ToStringEv(%"class.std::__1::basic_string"* sret, %"class.gfx::Transform"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK10SkMatrix44eqERKS_(%class.SkMatrix44*, %class.SkMatrix44* dereferenceable(68)) local_unnamed_addr #3

declare void @_ZNK3gfx4Rect8ToStringEv(%"class.std::__1::basic_string"* sret, %"class.gfx::Rect"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #3

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_SA_: argument 0"}
!7 = distinct !{!7, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_SA_"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_: argument 0"}
!10 = distinct !{!10, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_SA_: argument 0"}
!13 = distinct !{!13, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_SA_"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_: argument 0"}
!16 = distinct !{!16, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_"}
