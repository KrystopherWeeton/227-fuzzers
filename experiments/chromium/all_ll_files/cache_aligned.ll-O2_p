; ModuleID = '../../third_party/libjxl/src/lib/jxl/base/cache_aligned.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/base/cache_aligned.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.jxl::(anonymous namespace)::AllocationHeader" = type { i8*, i64, [64 x i8] }

@_ZN3jxl12CacheAligned12kPointerSizeE = hidden local_unnamed_addr constant i64 8, align 8
@_ZN3jxl12CacheAligned14kCacheLineSizeE = hidden local_unnamed_addr constant i64 64, align 8
@_ZN3jxl12CacheAligned10kAlignmentE = hidden local_unnamed_addr constant i64 128, align 8
@_ZN3jxl12CacheAligned6kAliasE = hidden local_unnamed_addr constant i64 2048, align 8
@.str = private unnamed_addr constant [41 x i8] c"Allocations: %zu (max bytes in use: %E)\0A\00", align 1
@_ZZN3jxl12CacheAligned10NextOffsetEvE4next = internal global { { i32 } } zeroinitializer, align 4
@.str.1 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [59 x i8] c"../../third_party/libjxl/src/lib/jxl/base/cache_aligned.cc\00", align 1
@.str.3 = private unnamed_addr constant [55 x i8] c"payload_size <= std::numeric_limits<size_t>::max() / 2\00", align 1
@.str.4 = private unnamed_addr constant [47 x i8] c"(offset % kAlignment == 0) && offset <= kAlias\00", align 1
@.str.5 = private unnamed_addr constant [26 x i8] c"payload % kAlignment == 0\00", align 1
@_ZN3jxl12_GLOBAL__N_115num_allocationsE = internal global { { i64 } } zeroinitializer, align 8
@_ZN3jxl12_GLOBAL__N_116max_bytes_in_useE = internal global { { i64 } } zeroinitializer, align 8
@_ZN3jxl12_GLOBAL__N_112bytes_in_useE = internal global { { i64 } } zeroinitializer, align 8

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN3jxl12CacheAligned10PrintStatsEv() local_unnamed_addr #0 align 2 {
  %1 = load atomic i64, i64* getelementptr inbounds ({ { i64 } }, { { i64 } }* @_ZN3jxl12_GLOBAL__N_115num_allocationsE, i64 0, i32 0, i32 0) monotonic, align 8
  %2 = load atomic i64, i64* getelementptr inbounds ({ { i64 } }, { { i64 } }* @_ZN3jxl12_GLOBAL__N_116max_bytes_in_useE, i64 0, i32 0, i32 0) monotonic, align 8
  %3 = uitofp i64 %2 to double
  %4 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0), i64 %1, double %3)
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @_ZN3jxl12CacheAligned10NextOffsetEv() local_unnamed_addr #2 align 2 {
  %1 = atomicrmw add i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN3jxl12CacheAligned10NextOffsetEvE4next, i64 0, i32 0, i32 0), i32 1 monotonic
  %2 = shl i32 %1, 7
  %3 = and i32 %2, 1920
  %4 = zext i32 %3 to i64
  ret i64 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN3jxl12CacheAligned8AllocateEmm(i64, i64) local_unnamed_addr #3 align 2 {
  %3 = icmp slt i64 %0, 0
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.2, i64 0, i64 0), i32 71, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0)) #6
  %6 = tail call zeroext i1 @_ZN3jxl5AbortEv() #8
  unreachable

7:                                                ; preds = %2
  %8 = and i64 %1, 127
  %9 = icmp eq i64 %8, 0
  %10 = icmp ult i64 %1, 2049
  %11 = and i1 %10, %9
  br i1 %11, label %15, label %12

12:                                               ; preds = %7
  %13 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.2, i64 0, i64 0), i32 72, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.4, i64 0, i64 0)) #6
  %14 = tail call zeroext i1 @_ZN3jxl5AbortEv() #8
  unreachable

15:                                               ; preds = %7
  %16 = icmp eq i64 %1, 0
  %17 = select i1 %16, i64 128, i64 %1
  %18 = add nuw i64 %0, 2048
  %19 = add nuw i64 %18, %17
  %20 = tail call noalias i8* @malloc(i64 %19) #6
  %21 = icmp eq i8* %20, null
  br i1 %21, label %49, label %22

22:                                               ; preds = %15
  %23 = ptrtoint i8* %20 to i64
  %24 = add i64 %23, 2048
  %25 = and i64 %24, -2048
  %26 = atomicrmw add i64* getelementptr inbounds ({ { i64 } }, { { i64 } }* @_ZN3jxl12_GLOBAL__N_115num_allocationsE, i64 0, i32 0, i32 0), i64 1 monotonic
  %27 = atomicrmw add i64* getelementptr inbounds ({ { i64 } }, { { i64 } }* @_ZN3jxl12_GLOBAL__N_112bytes_in_useE, i64 0, i32 0, i32 0), i64 %19 acq_rel
  %28 = load atomic i64, i64* getelementptr inbounds ({ { i64 } }, { { i64 } }* @_ZN3jxl12_GLOBAL__N_116max_bytes_in_useE, i64 0, i32 0, i32 0) acquire, align 8
  %29 = add i64 %27, %19
  %30 = icmp ult i64 %28, %29
  %31 = select i1 %30, i64 %29, i64 %28
  %32 = cmpxchg i64* getelementptr inbounds ({ { i64 } }, { { i64 } }* @_ZN3jxl12_GLOBAL__N_116max_bytes_in_useE, i64 0, i32 0, i32 0), i64 %28, i64 %31 acq_rel monotonic
  %33 = extractvalue { i64, i1 } %32, 1
  br i1 %33, label %41, label %34

34:                                               ; preds = %22, %34
  %35 = phi { i64, i1 } [ %39, %34 ], [ %32, %22 ]
  %36 = extractvalue { i64, i1 } %35, 0
  %37 = icmp ult i64 %36, %29
  %38 = select i1 %37, i64 %29, i64 %36
  %39 = cmpxchg i64* getelementptr inbounds ({ { i64 } }, { { i64 } }* @_ZN3jxl12_GLOBAL__N_116max_bytes_in_useE, i64 0, i32 0, i32 0), i64 %36, i64 %38 acq_rel monotonic
  %40 = extractvalue { i64, i1 } %39, 1
  br i1 %40, label %41, label %34

41:                                               ; preds = %34, %22
  %42 = add i64 %25, %17
  %43 = inttoptr i64 %42 to %"struct.jxl::(anonymous namespace)::AllocationHeader"*
  %44 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::AllocationHeader", %"struct.jxl::(anonymous namespace)::AllocationHeader"* %43, i64 -1, i32 0
  store i8* %20, i8** %44, align 1
  %45 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::AllocationHeader", %"struct.jxl::(anonymous namespace)::AllocationHeader"* %43, i64 -1, i32 1
  store i64 %19, i64* %45, align 8
  %46 = inttoptr i64 %42 to i8*
  %47 = and i64 %42, 63
  %48 = icmp eq i64 %47, 0
  tail call void @llvm.assume(i1 %48)
  br label %49

49:                                               ; preds = %15, %41
  %50 = phi i8* [ %46, %41 ], [ null, %15 ]
  ret i8* %50
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #4

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @llvm.assume(i1) #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #3 align 2 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %19, label %3

3:                                                ; preds = %1
  %4 = ptrtoint i8* %0 to i64
  %5 = and i64 %4, 127
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %3
  %8 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.2, i64 0, i64 0), i32 148, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0)) #6
  %9 = tail call zeroext i1 @_ZN3jxl5AbortEv() #8
  unreachable

10:                                               ; preds = %3
  %11 = getelementptr inbounds i8, i8* %0, i64 -80
  %12 = getelementptr inbounds i8, i8* %0, i64 -72
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = sub i64 0, %14
  %16 = atomicrmw add i64* getelementptr inbounds ({ { i64 } }, { { i64 } }* @_ZN3jxl12_GLOBAL__N_112bytes_in_useE, i64 0, i32 0, i32 0), i64 %15 acq_rel
  %17 = bitcast i8* %11 to i8**
  %18 = load i8*, i8** %17, align 1
  tail call void @free(i8* %18) #6
  br label %19

19:                                               ; preds = %1, %10
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #7

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
