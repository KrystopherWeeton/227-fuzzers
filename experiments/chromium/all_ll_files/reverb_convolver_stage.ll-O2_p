; ModuleID = '../../third_party/blink/renderer/platform/audio/reverb_convolver_stage.cc'
source_filename = "../../third_party/blink/renderer/platform/audio/reverb_convolver_stage.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::ReverbConvolverStage" = type { %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.1", %"class.blink::AudioArray", %"class.blink::ReverbAccumulationBuffer"*, i32, i32, i64, i64, i64, i64, %"class.blink::AudioArray", i8, %"class.std::__1::unique_ptr.7" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::FFTFrame"* }
%"class.blink::FFTFrame" = type { i32, i32, %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.blink::FFTConvolver"* }
%"class.blink::FFTConvolver" = type { %"class.blink::FFTFrame", i64, %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray" }
%"class.blink::AudioArray" = type <{ float*, float*, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.blink::DirectConvolver"* }
%"class.blink::DirectConvolver" = type { i64, %"class.blink::AudioArray", %"class.std::__1::unique_ptr.10", %"class.blink::AudioArray" }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.blink::AudioArray"* }
%"class.blink::ReverbAccumulationBuffer" = type { %"class.blink::AudioArray", i64, i64 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::ReverbConvolver" = type { %"class.WTF::Vector", %"class.WTF::Vector", i64, %"class.blink::ReverbAccumulationBuffer", %"class.blink::ReverbInputBuffer", i64, i64, i64, %"class.std::__1::unique_ptr.21" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.std::__1::unique_ptr.19"*, i32, i32 }
%"class.std::__1::unique_ptr.19" = type opaque
%"class.blink::ReverbInputBuffer" = type { %"class.blink::AudioArray", %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.20" }
%"struct.std::__1::__atomic_base.20" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.blink::Thread"* }
%"class.blink::Thread" = type { i32 (...)** }

$_ZN5blink10AudioArrayIfE8AllocateEm = comdat any

@.str = private unnamed_addr constant [54 x i8] c"n <= std::numeric_limits<unsigned>::max() / sizeof(T)\00", align 1
@.str.1 = private unnamed_addr constant [62 x i8] c"../../third_party/blink/renderer/platform/audio/audio_array.h\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"allocation_\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10AudioArrayIfEEEEPKcv = private unnamed_addr constant [72 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::AudioArray<float>]\00", align 1

@_ZN5blink20ReverbConvolverStageC1EPKfmmmmmmmPNS_24ReverbAccumulationBufferEfb = hidden unnamed_addr alias void (%"class.blink::ReverbConvolverStage"*, float*, i64, i64, i64, i64, i64, i64, i64, %"class.blink::ReverbAccumulationBuffer"*, float, i1), void (%"class.blink::ReverbConvolverStage"*, float*, i64, i64, i64, i64, i64, i64, i64, %"class.blink::ReverbAccumulationBuffer"*, float, i1)* @_ZN5blink20ReverbConvolverStageC2EPKfmmmmmmmPNS_24ReverbAccumulationBufferEfb

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20ReverbConvolverStageC2EPKfmmmmmmmPNS_24ReverbAccumulationBufferEfb(%"class.blink::ReverbConvolverStage"*, float*, i64, i64, i64, i64, i64, i64, i64, %"class.blink::ReverbAccumulationBuffer"*, float, i1 zeroext) unnamed_addr #0 align 2 {
  %13 = alloca float, align 4
  store float %10, float* %13, align 4
  %14 = zext i1 %11 to i8
  %15 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 1
  %16 = bitcast %"class.std::__1::unique_ptr.1"* %15 to i64*
  %17 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 2
  %18 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 3
  %19 = bitcast %"class.blink::ReverbConvolverStage"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 36, i1 false)
  store %"class.blink::ReverbAccumulationBuffer"* %9, %"class.blink::ReverbAccumulationBuffer"** %18, align 8
  %20 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 4
  store i32 0, i32* %20, align 8
  %21 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 5
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 10
  %23 = bitcast %"class.blink::AudioArray"* %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 20, i1 false) #7
  %24 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 11
  store i8 %14, i8* %24, align 8
  %25 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 12
  %26 = bitcast %"class.std::__1::unique_ptr.7"* %25 to i64*
  store i64 0, i64* %26, align 8
  br i1 %11, label %65, label %27

27:                                               ; preds = %12
  %28 = bitcast %"class.blink::ReverbConvolverStage"* %0 to i64*
  %29 = tail call noalias i8* @malloc(i64 104) #7
  %30 = bitcast i8* %29 to %"class.blink::FFTFrame"*
  %31 = trunc i64 %6 to i32
  tail call void @_ZN5blink8FFTFrameC1Ej(%"class.blink::FFTFrame"* %30, i32 %31) #7
  %32 = ptrtoint i8* %29 to i64
  %33 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %34 = load %"class.blink::FFTFrame"*, %"class.blink::FFTFrame"** %33, align 8
  store i64 %32, i64* %28, align 8
  %35 = icmp eq %"class.blink::FFTFrame"* %34, null
  %36 = bitcast i8* %29 to %"class.blink::FFTFrame"*
  br i1 %35, label %40, label %37

37:                                               ; preds = %27
  tail call void @_ZN5blink8FFTFrameD1Ev(%"class.blink::FFTFrame"* nonnull %34) #7
  %38 = bitcast %"class.blink::FFTFrame"* %34 to i8*
  tail call void @free(i8* %38) #7
  %39 = load %"class.blink::FFTFrame"*, %"class.blink::FFTFrame"** %33, align 8
  br label %40

40:                                               ; preds = %37, %27
  %41 = phi %"class.blink::FFTFrame"* [ %39, %37 ], [ %36, %27 ]
  %42 = getelementptr inbounds float, float* %1, i64 %4
  tail call void @_ZN5blink8FFTFrame11DoPaddedFFTEPKfm(%"class.blink::FFTFrame"* %41, float* %42, i64 %5) #7
  %43 = fcmp une float %10, 1.000000e+00
  br i1 %43, label %44, label %46

44:                                               ; preds = %40
  %45 = load %"class.blink::FFTFrame"*, %"class.blink::FFTFrame"** %33, align 8
  tail call void @_ZN5blink8FFTFrame8ScaleFFTEf(%"class.blink::FFTFrame"* %45, float %10) #7
  br label %46

46:                                               ; preds = %44, %40
  %47 = tail call noalias i8* @malloc(i64 184) #7
  %48 = bitcast i8* %47 to %"class.blink::FFTConvolver"*
  tail call void @_ZN5blink12FFTConvolverC1Em(%"class.blink::FFTConvolver"* %48, i64 %6) #7
  %49 = ptrtoint i8* %47 to i64
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %15, i64 0, i32 0, i32 0, i32 0
  %51 = load %"class.blink::FFTConvolver"*, %"class.blink::FFTConvolver"** %50, align 8
  store i64 %49, i64* %16, align 8
  %52 = icmp eq %"class.blink::FFTConvolver"* %51, null
  br i1 %52, label %110, label %53

53:                                               ; preds = %46
  %54 = getelementptr inbounds %"class.blink::FFTConvolver", %"class.blink::FFTConvolver"* %51, i64 0, i32 4
  %55 = bitcast %"class.blink::AudioArray"* %54 to i8**
  %56 = load i8*, i8** %55, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %56) #7
  %57 = getelementptr inbounds %"class.blink::FFTConvolver", %"class.blink::FFTConvolver"* %51, i64 0, i32 3
  %58 = bitcast %"class.blink::AudioArray"* %57 to i8**
  %59 = load i8*, i8** %58, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %59) #7
  %60 = getelementptr inbounds %"class.blink::FFTConvolver", %"class.blink::FFTConvolver"* %51, i64 0, i32 2
  %61 = bitcast %"class.blink::AudioArray"* %60 to i8**
  %62 = load i8*, i8** %61, align 8
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %62) #7
  %63 = getelementptr inbounds %"class.blink::FFTConvolver", %"class.blink::FFTConvolver"* %51, i64 0, i32 0
  tail call void @_ZN5blink8FFTFrameD1Ev(%"class.blink::FFTFrame"* %63) #7
  %64 = bitcast %"class.blink::FFTConvolver"* %51 to i8*
  tail call void @free(i8* %64) #7
  br label %110

65:                                               ; preds = %12
  %66 = lshr i64 %6, 1
  %67 = tail call noalias i8* @malloc(i64 24) #7
  %68 = bitcast i8* %67 to %"class.blink::AudioArray"*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %67, i8 0, i64 20, i1 false) #7
  tail call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"* %68, i64 %66) #7
  %69 = trunc i64 %5 to i32
  %70 = getelementptr inbounds i8, i8* %67, i64 16
  %71 = bitcast i8* %70 to i32*
  %72 = load i32, i32* %71, align 8
  %73 = icmp ult i32 %72, %69
  br i1 %73, label %81, label %74

74:                                               ; preds = %65
  %75 = getelementptr inbounds i8, i8* %67, i64 8
  %76 = bitcast i8* %75 to i8**
  %77 = load i8*, i8** %76, align 8
  %78 = bitcast float* %1 to i8*
  %79 = shl i64 %5, 2
  %80 = and i64 %79, 17179869180
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %77, i8* align 4 %78, i64 %80, i1 false) #7
  br label %81

81:                                               ; preds = %65, %74
  %82 = fcmp une float %10, 1.000000e+00
  br i1 %82, label %83, label %87

83:                                               ; preds = %81
  %84 = getelementptr inbounds i8, i8* %67, i64 8
  %85 = bitcast i8* %84 to float**
  %86 = load float*, float** %85, align 8
  call void @_ZN5blink11vector_math5VsmulEPKfiS2_Pfij(float* %86, i32 1, float* nonnull %13, float* %86, i32 1, i32 %69) #7
  br label %87

87:                                               ; preds = %83, %81
  %88 = call noalias i8* @malloc(i64 64) #7
  %89 = bitcast i8* %88 to %"class.blink::DirectConvolver"*
  call void @_ZN5blink15DirectConvolverC1EmNSt3__110unique_ptrINS_10AudioArrayIfEENS1_14default_deleteIS4_EEEE(%"class.blink::DirectConvolver"* %89, i64 %8, %"class.blink::AudioArray"* %68) #7
  %90 = ptrtoint i8* %88 to i64
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr.7", %"class.std::__1::unique_ptr.7"* %25, i64 0, i32 0, i32 0, i32 0
  %92 = load %"class.blink::DirectConvolver"*, %"class.blink::DirectConvolver"** %91, align 8
  store i64 %90, i64* %26, align 8
  %93 = icmp eq %"class.blink::DirectConvolver"* %92, null
  br i1 %93, label %110, label %94

94:                                               ; preds = %87
  %95 = getelementptr inbounds %"class.blink::DirectConvolver", %"class.blink::DirectConvolver"* %92, i64 0, i32 3
  %96 = bitcast %"class.blink::AudioArray"* %95 to i8**
  %97 = load i8*, i8** %96, align 8
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %97) #7
  %98 = getelementptr inbounds %"class.blink::DirectConvolver", %"class.blink::DirectConvolver"* %92, i64 0, i32 2, i32 0, i32 0, i32 0
  %99 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %98, align 8
  store %"class.blink::AudioArray"* null, %"class.blink::AudioArray"** %98, align 8
  %100 = icmp eq %"class.blink::AudioArray"* %99, null
  br i1 %100, label %105, label %101

101:                                              ; preds = %94
  %102 = bitcast %"class.blink::AudioArray"* %99 to i8**
  %103 = load i8*, i8** %102, align 8
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %103) #7
  %104 = bitcast %"class.blink::AudioArray"* %99 to i8*
  call void @free(i8* %104) #7
  br label %105

105:                                              ; preds = %101, %94
  %106 = getelementptr inbounds %"class.blink::DirectConvolver", %"class.blink::DirectConvolver"* %92, i64 0, i32 1
  %107 = bitcast %"class.blink::AudioArray"* %106 to i8**
  %108 = load i8*, i8** %107, align 8
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %108) #7
  %109 = bitcast %"class.blink::DirectConvolver"* %92 to i8*
  call void @free(i8* %109) #7
  br label %110

110:                                              ; preds = %105, %87, %46, %53
  call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"* %22, i64 %8)
  %111 = add i64 %4, %3
  %112 = lshr i64 %6, 1
  %113 = load i8, i8* %24, align 8, !range !2
  %114 = icmp ne i8 %113, 0
  %115 = icmp ult i64 %111, %112
  %116 = or i1 %115, %114
  %117 = select i1 %116, i64 0, i64 %112
  %118 = sub i64 %111, %117
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %126, label %120

120:                                              ; preds = %110
  %121 = icmp ult i64 %118, %112
  %122 = select i1 %121, i64 %118, i64 %112
  %123 = shl i64 %122, 32
  %124 = ashr exact i64 %123, 32
  %125 = urem i64 %7, %124
  br label %126

126:                                              ; preds = %110, %120
  %127 = phi i64 [ %125, %120 ], [ 0, %110 ]
  %128 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 6
  %129 = icmp ugt i64 %127, %118
  %130 = select i1 %129, i64 0, i64 %127
  store i64 %130, i64* %128, align 8
  %131 = sub i64 %118, %130
  %132 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 7
  store i64 %131, i64* %132, align 8
  %133 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 8
  %134 = icmp ult i64 %130, %6
  %135 = select i1 %134, i64 %6, i64 %130
  %136 = icmp ult i64 %135, %8
  %137 = select i1 %136, i64 %8, i64 %135
  %138 = bitcast i64* %133 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %138, i8 0, i64 16, i1 false)
  call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"* %17, i64 %137)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN5blink8FFTFrame11DoPaddedFFTEPKfm(%"class.blink::FFTFrame"*, float*, i64) local_unnamed_addr #2

declare void @_ZN5blink8FFTFrame8ScaleFFTEf(%"class.blink::FFTFrame"*, float) local_unnamed_addr #2

declare void @_ZN5blink11vector_math5VsmulEPKfiS2_Pfij(float*, i32, float*, float*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #7
  %8 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %8, align 8
  %9 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  %10 = icmp ugt i64 %1, 1073741823
  br i1 %10, label %12, label %11

11:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* null, i8** %8, align 8
  br label %21

12:                                               ; preds = %2
  %13 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #7
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1073741823) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0), i8* %13, i8* %14) #7
  %15 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* %16, i8** %8, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 63, %"class.logging::CheckOpResult"* nonnull %4) #7
  %20 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #7
  br label %21

21:                                               ; preds = %11, %12, %18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #7
  %22 = trunc i64 %1 to i32
  %23 = shl i32 %22, 2
  %24 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 0
  %25 = load float*, float** %24, align 8
  %26 = icmp eq float* %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %21
  %28 = bitcast float* %25 to i8*
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %28) #7
  br label %29

29:                                               ; preds = %21, %27
  %30 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %23, i32 32) #7
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %32, label %33, !prof !3

32:                                               ; preds = %29
  call void @llvm.trap() #7
  unreachable

33:                                               ; preds = %29
  %34 = extractvalue { i32, i1 } %30, 0
  %35 = zext i32 %34 to i64
  %36 = call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 %35, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10AudioArrayIfEEEEPKcv, i64 0, i64 0)) #7
  %37 = bitcast %"class.blink::AudioArray"* %0 to i8**
  store i8* %36, i8** %37, align 8
  %38 = icmp eq i8* %36, null
  br i1 %38, label %41, label %39

39:                                               ; preds = %33
  %40 = ptrtoint i8* %36 to i64
  br label %46

41:                                               ; preds = %33
  %42 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #7
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 84, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0)) #7
  %43 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #7
  %44 = bitcast %"class.blink::AudioArray"* %0 to i64*
  %45 = load i64, i64* %44, align 8
  br label %46

46:                                               ; preds = %39, %41
  %47 = phi i64 [ %40, %39 ], [ %45, %41 ]
  %48 = add i64 %47, 31
  %49 = and i64 %48, -32
  %50 = inttoptr i64 %49 to float*
  %51 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 1
  store float* %50, float** %51, align 8
  %52 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 2
  store i32 %22, i32* %52, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20ReverbConvolverStage19ProcessInBackgroundEPNS_15ReverbConvolverEj(%"class.blink::ReverbConvolverStage"*, %"class.blink::ReverbConvolver"*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::ReverbConvolver", %"class.blink::ReverbConvolver"* %1, i64 0, i32 4
  %5 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 5
  %6 = zext i32 %2 to i64
  %7 = tail call float* @_ZN5blink17ReverbInputBuffer14DirectReadFromEPim(%"class.blink::ReverbInputBuffer"* %4, i32* %5, i64 %6) #7
  tail call void @_ZN5blink20ReverbConvolverStage7ProcessEPKfj(%"class.blink::ReverbConvolverStage"* %0, float* %7, i32 %2)
  ret void
}

declare float* @_ZN5blink17ReverbInputBuffer14DirectReadFromEPim(%"class.blink::ReverbInputBuffer"*, i32*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20ReverbConvolverStage7ProcessEPKfj(%"class.blink::ReverbConvolverStage"*, float*, i32) local_unnamed_addr #0 align 2 {
  %4 = icmp eq float* %1, null
  br i1 %4, label %84, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 6
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %18, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 8
  %11 = load i64, i64* %10, align 8
  %12 = zext i32 %2 to i64
  %13 = add i64 %11, %12
  %14 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 2, i32 2
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  %17 = icmp ugt i64 %13, %16
  br i1 %17, label %84, label %23

18:                                               ; preds = %5
  %19 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 2, i32 1
  %20 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 2, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = icmp ult i32 %21, %2
  br i1 %22, label %84, label %31

23:                                               ; preds = %9
  %24 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 10, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = icmp ult i32 %25, %2
  %27 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 2, i32 1
  %28 = load float*, float** %27, align 8
  %29 = getelementptr inbounds float, float* %28, i64 %11
  %30 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 10, i32 1
  br i1 %26, label %84, label %31

31:                                               ; preds = %18, %23
  %32 = phi float* [ %1, %18 ], [ %29, %23 ]
  %33 = phi float** [ %19, %18 ], [ %30, %23 ]
  %34 = phi float* [ null, %18 ], [ %29, %23 ]
  %35 = load float*, float** %33, align 8
  %36 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 9
  %37 = load i64, i64* %36, align 8
  %38 = icmp ult i64 %37, %7
  br i1 %38, label %39, label %44

39:                                               ; preds = %31
  %40 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 3
  %41 = load %"class.blink::ReverbAccumulationBuffer"*, %"class.blink::ReverbAccumulationBuffer"** %40, align 8
  %42 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 4
  %43 = zext i32 %2 to i64
  tail call void @_ZNK5blink24ReverbAccumulationBuffer15UpdateReadIndexEPim(%"class.blink::ReverbAccumulationBuffer"* %41, i32* %42, i64 %43) #7
  br label %64

44:                                               ; preds = %31
  %45 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 11
  %46 = load i8, i8* %45, align 8, !range !2
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %53

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %50 = load %"class.blink::FFTConvolver"*, %"class.blink::FFTConvolver"** %49, align 8
  %51 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %52 = load %"class.blink::FFTFrame"*, %"class.blink::FFTFrame"** %51, align 8
  tail call void @_ZN5blink12FFTConvolver7ProcessEPKNS_8FFTFrameEPKfPfj(%"class.blink::FFTConvolver"* %50, %"class.blink::FFTFrame"* %52, float* %32, float* %35, i32 %2) #7
  br label %56

53:                                               ; preds = %44
  %54 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 12, i32 0, i32 0, i32 0
  %55 = load %"class.blink::DirectConvolver"*, %"class.blink::DirectConvolver"** %54, align 8
  tail call void @_ZN5blink15DirectConvolver7ProcessEPKfPfj(%"class.blink::DirectConvolver"* %55, float* %32, float* %35, i32 %2) #7
  br label %56

56:                                               ; preds = %53, %48
  %57 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 3
  %58 = load %"class.blink::ReverbAccumulationBuffer"*, %"class.blink::ReverbAccumulationBuffer"** %57, align 8
  %59 = zext i32 %2 to i64
  %60 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 4
  %61 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 7
  %62 = load i64, i64* %61, align 8
  %63 = tail call i32 @_ZN5blink24ReverbAccumulationBuffer10AccumulateEPfmPim(%"class.blink::ReverbAccumulationBuffer"* %58, float* %35, i64 %59, i32* %60, i64 %62) #7
  br label %64

64:                                               ; preds = %56, %39
  %65 = load i64, i64* %6, align 8
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %69

67:                                               ; preds = %64
  %68 = zext i32 %2 to i64
  br label %80

69:                                               ; preds = %64
  %70 = bitcast float* %34 to i8*
  %71 = bitcast float* %1 to i8*
  %72 = zext i32 %2 to i64
  %73 = shl nuw nsw i64 %72, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %70, i8* nonnull align 4 %71, i64 %73, i1 false)
  %74 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, %72
  %77 = load i64, i64* %6, align 8
  %78 = icmp ult i64 %76, %77
  %79 = select i1 %78, i64 %76, i64 0
  store i64 %79, i64* %74, align 8
  br label %80

80:                                               ; preds = %67, %69
  %81 = phi i64 [ %68, %67 ], [ %72, %69 ]
  %82 = load i64, i64* %36, align 8
  %83 = add i64 %82, %81
  store i64 %83, i64* %36, align 8
  br label %84

84:                                               ; preds = %18, %23, %9, %80, %3
  ret void
}

declare void @_ZNK5blink24ReverbAccumulationBuffer15UpdateReadIndexEPim(%"class.blink::ReverbAccumulationBuffer"*, i32*, i64) local_unnamed_addr #2

declare void @_ZN5blink12FFTConvolver7ProcessEPKNS_8FFTFrameEPKfPfj(%"class.blink::FFTConvolver"*, %"class.blink::FFTFrame"*, float*, float*, i32) local_unnamed_addr #2

declare void @_ZN5blink15DirectConvolver7ProcessEPKfPfj(%"class.blink::DirectConvolver"*, float*, float*, i32) local_unnamed_addr #2

declare i32 @_ZN5blink24ReverbAccumulationBuffer10AccumulateEPfmPim(%"class.blink::ReverbAccumulationBuffer"*, float*, i64, i32*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20ReverbConvolverStage5ResetEv(%"class.blink::ReverbConvolverStage"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 11
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %7 = load %"class.blink::FFTConvolver"*, %"class.blink::FFTConvolver"** %6, align 8
  tail call void @_ZN5blink12FFTConvolver5ResetEv(%"class.blink::FFTConvolver"* %7) #7
  br label %11

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 12, i32 0, i32 0, i32 0
  %10 = load %"class.blink::DirectConvolver"*, %"class.blink::DirectConvolver"** %9, align 8
  tail call void @_ZN5blink15DirectConvolver5ResetEv(%"class.blink::DirectConvolver"* %10) #7
  br label %11

11:                                               ; preds = %8, %5
  %12 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 2, i32 1
  %13 = bitcast float** %12 to i8**
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 2, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  %18 = shl nuw nsw i64 %17, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %14, i8 0, i64 %18, i1 false) #7
  %19 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 4
  store i32 0, i32* %19, align 8
  %20 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 5
  store i32 0, i32* %20, align 4
  %21 = getelementptr inbounds %"class.blink::ReverbConvolverStage", %"class.blink::ReverbConvolverStage"* %0, i64 0, i32 9
  store i64 0, i64* %21, align 8
  ret void
}

declare void @_ZN5blink12FFTConvolver5ResetEv(%"class.blink::FFTConvolver"*) local_unnamed_addr #2

declare void @_ZN5blink15DirectConvolver5ResetEv(%"class.blink::DirectConvolver"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5blink8FFTFrameD1Ev(%"class.blink::FFTFrame"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

declare void @_ZN3WTF10Partitions8FastFreeEPv(i8*) local_unnamed_addr #2

declare void @_ZN5blink8FFTFrameC1Ej(%"class.blink::FFTFrame"*, i32) unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

declare void @_ZN5blink12FFTConvolverC1Em(%"class.blink::FFTConvolver"*, i64) unnamed_addr #2

declare void @_ZN5blink15DirectConvolverC1EmNSt3__110unique_ptrINS_10AudioArrayIfEENS1_14default_deleteIS4_EEEE(%"class.blink::DirectConvolver"*, i64, %"class.blink::AudioArray"*) unnamed_addr #2

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
