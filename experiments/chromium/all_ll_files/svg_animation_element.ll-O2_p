; ModuleID = '../../third_party/blink/renderer/core/svg/svg_animation_element.cc'
source_filename = "../../third_party/blink/renderer/core/svg/svg_animation_element.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::QualifiedName" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.6 }
%class.scoped_refptr.6 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::StaticSingleton" = type { %"class.WTF::StaticSingleton<const WTF::AtomicString>::InstanceStorage" }
%"class.WTF::StaticSingleton<const WTF::AtomicString>::InstanceStorage" = type { [8 x i8] }
%"struct.blink::WrapperTypeInfo" = type { i16, void (%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Template"*)*, void (%"class.v8::Context"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Template"*, i64)*, i8*, %"struct.blink::WrapperTypeInfo"*, i8 }
%"class.v8::Isolate" = type { i8 }
%"class.blink::DOMWrapperWorld" = type opaque
%"class.v8::Template" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::Object" = type { i8 }
%"class.blink::SVGQualifiedName" = type { %"class.blink::QualifiedName" }
%"class.blink::SVGAnimationElement" = type { %"class.blink::SVGSMILElement.base", i8, i8, i8, %"class.WTF::Vector.57", %"class.WTF::Vector.62", %"class.WTF::Vector.62", %"class.WTF::Vector.62", %"class.WTF::Vector.67", %"class.WTF::String", %"class.WTF::String", i32, i32 }
%"class.blink::SVGSMILElement.base" = type <{ %"class.blink::SVGElement", %"class.blink::SVGTests", %"class.blink::Member.32", %"class.blink::Member.34", %"class.blink::HeapVector", i8, i8, i8, i8, [4 x i8], %"class.blink::HeapHashSet.43", %"class.blink::SMILInstanceTimeList", %"class.blink::SMILInstanceTimeList", %"struct.blink::SMILInterval", %"struct.blink::SMILInterval", i8, [3 x i8], %"struct.blink::SVGSMILElement::ProgressState", [4 x i8], %"class.blink::Member.55", i32, i32, %"class.blink::SMILTime", %"class.blink::SMILTime", %"class.blink::SMILRepeatCount", %"class.blink::SMILTime", %"class.blink::SMILTime", i8, i8, i8 }>
%"class.blink::SVGElement" = type { %"class.blink::Element", %"class.blink::HeapHashSet", %"class.blink::HeapHashMap", %"class.blink::Member.26", %"class.blink::Member.28" }
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.8" }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member", %"class.blink::Member" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member", %"class.blink::Member.0", %"class.blink::Member", %"class.blink::Member", %"class.blink::Member.2" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Member.0" = type { %"class.blink::MemberBase.1" }
%"class.blink::MemberBase.1" = type { %"class.blink::TreeScope"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.72", %"class.blink::Member.74", %"class.blink::Member.0", %"class.blink::Member.76", %"class.blink::Member.76", %"class.blink::Member.100", %"class.blink::Member.102", %"class.blink::Member.104", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.109", %"class.blink::HeapVector.111" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.72" = type { %"class.blink::MemberBase.73" }
%"class.blink::MemberBase.73" = type { %"class.blink::ContainerNode"* }
%"class.blink::Member.74" = type { %"class.blink::MemberBase.75" }
%"class.blink::MemberBase.75" = type { %"class.blink::Document"* }
%"class.blink::Member.76" = type { %"class.blink::MemberBase.77" }
%"class.blink::MemberBase.77" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap.80" }
%"class.blink::HeapHashMap.80" = type { %"class.WTF::HashMap.83" }
%"class.WTF::HashMap.83" = type { %"class.WTF::HashTable.84" }
%"class.WTF::HashTable.84" = type <{ %"struct.WTF::KeyValuePair.86"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.86" = type { %"class.WTF::AtomicString", %"class.blink::Member.87" }
%"class.blink::Member.87" = type { %"class.blink::MemberBase.88" }
%"class.blink::MemberBase.88" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.91", i32, %"class.blink::HeapVector.93" }
%"class.blink::Member.91" = type { %"class.blink::MemberBase.92" }
%"class.blink::MemberBase.92" = type { %"class.blink::Element"* }
%"class.blink::HeapVector.93" = type { %"class.WTF::Vector.96" }
%"class.WTF::Vector.96" = type { %"class.WTF::VectorBuffer.97" }
%"class.WTF::VectorBuffer.97" = type { %"class.WTF::VectorBufferBase.98" }
%"class.WTF::VectorBufferBase.98" = type { %"class.blink::Member.91"*, i32, i32 }
%"class.blink::Member.100" = type { %"class.blink::MemberBase.101" }
%"class.blink::MemberBase.101" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.102" = type { %"class.blink::MemberBase.103" }
%"class.blink::MemberBase.103" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.104" = type { %"class.blink::MemberBase.105" }
%"class.blink::MemberBase.105" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.106" }
%"class.blink::Member.106" = type { %"class.blink::MemberBase.107" }
%"class.blink::MemberBase.107" = type { %"class.blink::HeapHashMap.108"* }
%"class.blink::HeapHashMap.108" = type opaque
%"class.blink::Member.109" = type { %"class.blink::MemberBase.110" }
%"class.blink::MemberBase.110" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.111" = type { %"class.WTF::Vector.114" }
%"class.WTF::Vector.114" = type { %"class.WTF::VectorBuffer.115" }
%"class.WTF::VectorBuffer.115" = type { %"class.WTF::VectorBufferBase.116" }
%"class.WTF::VectorBufferBase.116" = type { %"class.blink::Member.117"*, i32, i32 }
%"class.blink::Member.117" = type { %"class.blink::MemberBase.118" }
%"class.blink::MemberBase.118" = type { %"class.blink::CSSStyleSheet"* }
%"class.blink::CSSStyleSheet" = type opaque
%"class.blink::Member.2" = type { %"class.blink::MemberBase.3" }
%"class.blink::MemberBase.3" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::Node"* }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::Member.8" = type { %"class.blink::MemberBase.9" }
%"class.blink::MemberBase.9" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.12", %"class.blink::Member.14", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.12" = type { %"class.WTF::SingleThreadedBitField.13" }
%"class.WTF::SingleThreadedBitField.13" = type { i32 }
%"class.blink::Member.14" = type { %"class.blink::MemberBase.15" }
%"class.blink::MemberBase.15" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type opaque
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr.16 }
%class.scoped_refptr.16 = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted.17", %"class.WTF::AtomicString", %"class.WTF::Vector" }
%"class.WTF::RefCounted.17" = type { %"class.base::RefCounted.18" }
%"class.base::RefCounted.18" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [32 x i8] }
%"class.WTF::VectorBufferBase" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"class.blink::WeakMember"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember" = type opaque
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable.24" }
%"class.WTF::HashTable.24" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.blink::Member.26" = type { %"class.blink::MemberBase.27" }
%"class.blink::MemberBase.27" = type { %"class.blink::SVGElementRareData"* }
%"class.blink::SVGElementRareData" = type opaque
%"class.blink::Member.28" = type { %"class.blink::MemberBase.29" }
%"class.blink::MemberBase.29" = type { %"class.blink::SVGAnimatedString"* }
%"class.blink::SVGAnimatedString" = type opaque
%"class.blink::SVGTests" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.30", %"class.blink::Member.30" }
%"class.blink::Member.30" = type { %"class.blink::MemberBase.31" }
%"class.blink::MemberBase.31" = type { %"class.blink::SVGStaticStringList"* }
%"class.blink::SVGStaticStringList" = type opaque
%"class.blink::Member.32" = type { %"class.blink::MemberBase.33" }
%"class.blink::MemberBase.33" = type { %"class.blink::SVGElement"* }
%"class.blink::Member.34" = type { %"class.blink::MemberBase.35" }
%"class.blink::MemberBase.35" = type { %"class.blink::IdTargetObserver"* }
%"class.blink::IdTargetObserver" = type opaque
%"class.blink::HeapVector" = type { %"class.WTF::Vector.38" }
%"class.WTF::Vector.38" = type { %"class.WTF::VectorBuffer.39" }
%"class.WTF::VectorBuffer.39" = type { %"class.WTF::VectorBufferBase.40" }
%"class.WTF::VectorBufferBase.40" = type { %"class.blink::Member.41"*, i32, i32 }
%"class.blink::Member.41" = type opaque
%"class.blink::HeapHashSet.43" = type { %"class.WTF::HashSet.46" }
%"class.WTF::HashSet.46" = type { %"class.WTF::HashTable.47" }
%"class.WTF::HashTable.47" = type <{ %"class.blink::Member.49"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.49" = type opaque
%"class.blink::SMILInstanceTimeList" = type <{ %"class.WTF::Vector.50", i32, [4 x i8] }>
%"class.WTF::Vector.50" = type { %"class.WTF::VectorBuffer.51" }
%"class.WTF::VectorBuffer.51" = type { %"class.WTF::VectorBufferBase.52" }
%"class.WTF::VectorBufferBase.52" = type { %"class.blink::SMILTimeWithOrigin"*, i32, i32 }
%"class.blink::SMILTimeWithOrigin" = type <{ %"class.blink::SMILTime", i32, [4 x i8] }>
%"struct.blink::SMILInterval" = type { %"class.blink::SMILTime", %"class.blink::SMILTime" }
%"struct.blink::SVGSMILElement::ProgressState" = type { float, i32 }
%"class.blink::Member.55" = type { %"class.blink::MemberBase.56" }
%"class.blink::MemberBase.56" = type { %"class.blink::SMILTimeContainer"* }
%"class.blink::SMILTimeContainer" = type opaque
%"class.blink::SMILRepeatCount" = type { double }
%"class.blink::SMILTime" = type { %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.WTF::Vector.57" = type { %"class.WTF::VectorBuffer.58" }
%"class.WTF::VectorBuffer.58" = type { %"class.WTF::VectorBufferBase.59" }
%"class.WTF::VectorBufferBase.59" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::Vector.62" = type { %"class.WTF::VectorBuffer.63" }
%"class.WTF::VectorBuffer.63" = type { %"class.WTF::VectorBufferBase.64" }
%"class.WTF::VectorBufferBase.64" = type { float*, i32, i32 }
%"class.WTF::Vector.67" = type { %"class.WTF::VectorBuffer.68" }
%"class.WTF::VectorBuffer.68" = type { %"class.WTF::VectorBufferBase.69" }
%"class.WTF::VectorBufferBase.69" = type { %"class.gfx::CubicBezier"*, i32, i32 }
%"class.gfx::CubicBezier" = type { double, double, double, double, double, double, double, double, double, double, [11 x double] }
%"class.blink::Document" = type { %"class.blink::ContainerNode", %"class.blink::TreeScope", %"class.blink::UseCounter", %"class.blink::Supplementable", i32, %"class.blink::DocumentLifecycle", i8, i8, %"class.WTF::Vector.127", %"class.WTF::Vector.127", i8, i32, %"class.blink::Member.138", %"class.blink::Member.140", %"class.blink::Member.142", %"class.blink::Member.144", %"class.blink::Member.146", %"class.blink::Member.148", i8, %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.std::__1::unique_ptr.151", %"class.blink::KURL", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.157", %"class.blink::Member.159", %"class.blink::Member.117", i32, i32, i32, i8, %"class.blink::TaskHandle", %"class.blink::TaskHandle", %"class.WTF::Vector.162", i8, i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapVector.93", %"class.blink::Member.91", %"class.blink::Member.178", %"class.blink::Member.91", %"class.blink::Member.91", %"class.blink::Member.91", %"class.blink::UserActionElementSet", %"class.blink::Member.187", double, double, i64, i64, %"class.blink::HeapHashSet.189", %"class.blink::HeapHashSet.196", i16, i8, %"class.blink::Member.203", %"class.blink::Member.205", %"class.blink::Member.207", %"class.blink::Member.209", %"class.blink::TextLinkColors", %"class.blink::Member.211", i8, [7 x i8], %"class.blink::HeapHashMap.213", i32, i32, i8, i8, i8, i32, i32, i32, i8, %"class.WTF::String", %"class.WTF::String", %"class.blink::Member.91", %"class.WTF::Vector.220", %"class.blink::Member.225", %"class.blink::Member.227", i8, %"class.blink::Member.91", i8, i32, i8, %"class.base::ElapsedTimer", %"class.blink::Member.229", %"class.blink::HeapVector.231", %"class.std::__1::unique_ptr.239", %"class.WTF::String", %"class.WTF::String", i8, %"class.WTF::AtomicString", %"class.blink::DocumentEncodingData", i8, i8, [6 x i8], %"class.blink::HeapHashSet.245", %"class.blink::LiveNodeListRegistry", %"class.blink::Member.257", %"class.WTF::Vector.259", i8, i8, %"class.std::__1::unique_ptr.264", %"class.blink::NthIndexCache"*, i8, i8, i8, i8, i8, i8, %"class.blink::LayoutView"*, %"class.blink::HeapVector.93", %"class.blink::HeapVector.270", i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::DocumentTiming", %"class.blink::Member.278", i8, i32, %"class.blink::Member.280", %"class.blink::Member.282", %"class.blink::Member.284", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.286", %"class.WTF::HashMap.288", %"class.blink::Member.293", %"class.blink::Member.295", %"class.blink::Member.297", %"class.blink::Member.299", %"class.blink::Member.74", %"class.blink::Member.74", %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapHashSet.301", i8, i32, %"class.blink::Member.308", %"class.blink::Member.310", i32, %"class.blink::Member.312", %"class.blink::Member.314", %"class.blink::Member.316", %"class.std::__1::unique_ptr.318", i64, %"class.std::__1::unique_ptr.324", i32, i32, %"class.blink::Member.330", %"class.blink::Member.332", %"class.blink::Member.334", i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.blink::Member.336", %"class.WTF::Vector.338", %"class.WTF::AtomicString", %"class.blink::HeapHashMap.343", %"class.blink::Member.350", %"class.std::__1::unique_ptr.352", %"class.blink::Member.358", i8, i8, %"class.WTF::String", %"class.blink::Member.360", i8, [7 x i8], %"class.blink::HeapHashMap.362", %"class.blink::HeapObserverSet", %"class.blink::Member.376", i8, i8, i8, i8, i8, i8, i8, %"class.blink::Member.378", i32, i8, i8, %"class.blink::WeakMember.380", %"class.blink::Member.381" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.120" }
%"class.blink::HeapHashMap.120" = type { %"class.WTF::HashMap.123" }
%"class.WTF::HashMap.123" = type { %"class.WTF::HashTable.124" }
%"class.WTF::HashTable.124" = type <{ %"struct.WTF::KeyValuePair.126"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.126" = type opaque
%"class.blink::DocumentLifecycle" = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.WTF::Vector.127" = type { %"class.WTF::VectorBuffer.128" }
%"class.WTF::VectorBuffer.128" = type { %"class.WTF::VectorBufferBase.129" }
%"class.WTF::VectorBufferBase.129" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.130 }
%class.scoped_refptr.130 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.131" }
%"struct.std::__1::atomic.131" = type { %"struct.std::__1::__atomic_base.132" }
%"struct.std::__1::__atomic_base.132" = type { %"struct.std::__1::__atomic_base.133" }
%"struct.std::__1::__atomic_base.133" = type { %"struct.std::__1::__cxx_atomic_impl.134" }
%"struct.std::__1::__cxx_atomic_impl.134" = type { %"struct.std::__1::__cxx_atomic_base_impl.135" }
%"struct.std::__1::__cxx_atomic_base_impl.135" = type { i32 }
%"class.blink::Member.138" = type { %"class.blink::MemberBase.139" }
%"class.blink::MemberBase.139" = type { %"class.blink::LocalDOMWindow"* }
%"class.blink::LocalDOMWindow" = type opaque
%"class.blink::Member.140" = type { %"class.blink::MemberBase.141" }
%"class.blink::MemberBase.141" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type opaque
%"class.blink::Member.142" = type { %"class.blink::MemberBase.143" }
%"class.blink::MemberBase.143" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type opaque
%"class.blink::Member.144" = type { %"class.blink::MemberBase.145" }
%"class.blink::MemberBase.145" = type { %"class.blink::DocumentParser"* }
%"class.blink::DocumentParser" = type opaque
%"class.blink::Member.146" = type { %"class.blink::MemberBase.147" }
%"class.blink::MemberBase.147" = type { %"class.blink::ContextFeatures"* }
%"class.blink::ContextFeatures" = type opaque
%"class.blink::Member.148" = type { %"class.blink::MemberBase.149" }
%"class.blink::MemberBase.149" = type { %"class.blink::HttpRefreshScheduler"* }
%"class.blink::HttpRefreshScheduler" = type opaque
%"class.std::__1::unique_ptr.151" = type { %"class.std::__1::__compressed_pair.152" }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153" }
%"struct.std::__1::__compressed_pair_elem.153" = type { %"class.blink::OriginAccessEntry"* }
%"class.blink::OriginAccessEntry" = type opaque
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::KURL"* }
%"class.blink::Member.157" = type { %"class.blink::MemberBase.158" }
%"class.blink::MemberBase.158" = type { %"class.blink::DocumentType"* }
%"class.blink::DocumentType" = type opaque
%"class.blink::Member.159" = type { %"class.blink::MemberBase.160" }
%"class.blink::MemberBase.160" = type { %"class.blink::DOMImplementation"* }
%"class.blink::DOMImplementation" = type opaque
%"class.blink::TaskHandle" = type { %class.scoped_refptr.161 }
%class.scoped_refptr.161 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.WTF::Vector.162" = type { %"class.WTF::VectorBuffer.163" }
%"class.WTF::VectorBuffer.163" = type { %"class.WTF::VectorBufferBase.164" }
%"class.WTF::VectorBufferBase.164" = type { %"struct.blink::Document::PendingJavascriptUrl"*, i32, i32 }
%"struct.blink::Document::PendingJavascriptUrl" = type { %"class.blink::KURL", %class.scoped_refptr.165 }
%class.scoped_refptr.165 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::Member.178" = type { %"class.blink::MemberBase.179" }
%"class.blink::MemberBase.179" = type { %"class.blink::Range"* }
%"class.blink::Range" = type opaque
%"class.blink::UserActionElementSet" = type { %"class.blink::HeapHashMap.180" }
%"class.blink::HeapHashMap.180" = type { %"class.WTF::HashMap.183" }
%"class.WTF::HashMap.183" = type { %"class.WTF::HashTable.184" }
%"class.WTF::HashTable.184" = type <{ %"struct.WTF::KeyValuePair.186"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.186" = type opaque
%"class.blink::Member.187" = type { %"class.blink::MemberBase.188" }
%"class.blink::MemberBase.188" = type { %"class.blink::RootScrollerController"* }
%"class.blink::RootScrollerController" = type opaque
%"class.blink::HeapHashSet.189" = type { %"class.WTF::HashSet.192" }
%"class.WTF::HashSet.192" = type { %"class.WTF::HashTable.193" }
%"class.WTF::HashTable.193" = type <{ %"class.blink::WeakMember.195"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.195" = type opaque
%"class.blink::HeapHashSet.196" = type { %"class.WTF::HashSet.199" }
%"class.WTF::HashSet.199" = type { %"class.WTF::HashTable.200" }
%"class.WTF::HashTable.200" = type <{ %"class.blink::WeakMember.202"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.202" = type opaque
%"class.blink::Member.203" = type { %"class.blink::MemberBase.204" }
%"class.blink::MemberBase.204" = type { %"class.blink::ElementIntersectionObserverData"* }
%"class.blink::ElementIntersectionObserverData" = type opaque
%"class.blink::Member.205" = type { %"class.blink::MemberBase.206" }
%"class.blink::MemberBase.206" = type { %"class.blink::StyleEngine"* }
%"class.blink::StyleEngine" = type opaque
%"class.blink::Member.207" = type { %"class.blink::MemberBase.208" }
%"class.blink::MemberBase.208" = type { %"class.blink::StyleSheetList"* }
%"class.blink::StyleSheetList" = type opaque
%"class.blink::Member.209" = type { %"class.blink::MemberBase.210" }
%"class.blink::MemberBase.210" = type { %"class.blink::FormController"* }
%"class.blink::FormController" = type opaque
%"class.blink::TextLinkColors" = type { %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, i8, i8 }
%"class.blink::Color" = type { i32 }
%"class.blink::Member.211" = type { %"class.blink::MemberBase.212" }
%"class.blink::MemberBase.212" = type { %"class.blink::VisitedLinkState"* }
%"class.blink::VisitedLinkState" = type opaque
%"class.blink::HeapHashMap.213" = type { %"class.WTF::HashMap.216" }
%"class.WTF::HashMap.216" = type { %"class.WTF::HashTable.217" }
%"class.WTF::HashTable.217" = type <{ %"struct.WTF::KeyValuePair.219"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.219" = type opaque
%"class.WTF::Vector.220" = type { %"class.WTF::VectorBuffer.221" }
%"class.WTF::VectorBuffer.221" = type { %"class.WTF::VectorBufferBase.222" }
%"class.WTF::VectorBufferBase.222" = type { %"class.blink::AXContext"**, i32, i32 }
%"class.blink::AXContext" = type opaque
%"class.blink::Member.225" = type { %"class.blink::MemberBase.226" }
%"class.blink::MemberBase.226" = type { %"class.blink::AXObjectCache"* }
%"class.blink::AXObjectCache" = type opaque
%"class.blink::Member.227" = type { %"class.blink::MemberBase.228" }
%"class.blink::MemberBase.228" = type { %"class.blink::DocumentMarkerController"* }
%"class.blink::DocumentMarkerController" = type opaque
%"class.base::ElapsedTimer" = type { %"class.base::TimeTicks" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.blink::Member.229" = type { %"class.blink::MemberBase.230" }
%"class.blink::MemberBase.230" = type { %"class.blink::ScriptRunner"* }
%"class.blink::ScriptRunner" = type opaque
%"class.blink::HeapVector.231" = type { %"class.WTF::Vector.234" }
%"class.WTF::Vector.234" = type { %"class.WTF::VectorBuffer.235" }
%"class.WTF::VectorBuffer.235" = type { %"class.WTF::VectorBufferBase.236" }
%"class.WTF::VectorBufferBase.236" = type { %"class.blink::Member.237"*, i32, i32 }
%"class.blink::Member.237" = type opaque
%"class.std::__1::unique_ptr.239" = type { %"class.std::__1::__compressed_pair.240" }
%"class.std::__1::__compressed_pair.240" = type { %"struct.std::__1::__compressed_pair_elem.241" }
%"struct.std::__1::__compressed_pair_elem.241" = type { %"class.blink::TransformSource"* }
%"class.blink::TransformSource" = type opaque
%"class.blink::DocumentEncodingData" = type <{ %"class.WTF::TextEncoding", i8, i8, [6 x i8] }>
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::HeapHashSet.245" = type { %"class.WTF::HashSet.248" }
%"class.WTF::HashSet.248" = type { %"class.WTF::HashTable.249" }
%"class.WTF::HashTable.249" = type <{ %"class.blink::WeakMember.251"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.251" = type opaque
%"class.blink::LiveNodeListRegistry" = type <{ %"class.WTF::Vector.252", i32, [4 x i8] }>
%"class.WTF::Vector.252" = type { %"class.WTF::VectorBuffer.253" }
%"class.WTF::VectorBuffer.253" = type { %"class.WTF::VectorBufferBase.254" }
%"class.WTF::VectorBufferBase.254" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type opaque
%"class.blink::Member.257" = type { %"class.blink::MemberBase.258" }
%"class.blink::MemberBase.258" = type { %"class.blink::SVGDocumentExtensions"* }
%"class.blink::SVGDocumentExtensions" = type opaque
%"class.WTF::Vector.259" = type { %"class.WTF::VectorBuffer.260" }
%"class.WTF::VectorBuffer.260" = type { %"class.WTF::VectorBufferBase.261" }
%"class.WTF::VectorBufferBase.261" = type { %"struct.blink::AnnotatedRegionValue"*, i32, i32 }
%"struct.blink::AnnotatedRegionValue" = type opaque
%"class.std::__1::unique_ptr.264" = type { %"class.std::__1::__compressed_pair.265" }
%"class.std::__1::__compressed_pair.265" = type { %"struct.std::__1::__compressed_pair_elem.266" }
%"struct.std::__1::__compressed_pair_elem.266" = type { %"class.blink::SelectorQueryCache"* }
%"class.blink::SelectorQueryCache" = type opaque
%"class.blink::NthIndexCache" = type opaque
%"class.blink::LayoutView" = type opaque
%"class.blink::HeapVector.270" = type { %"class.WTF::Vector.273" }
%"class.WTF::Vector.273" = type { %"class.WTF::VectorBuffer.274" }
%"class.WTF::VectorBuffer.274" = type { %"class.WTF::VectorBufferBase.275" }
%"class.WTF::VectorBufferBase.275" = type { %"class.blink::Member.276"*, i32, i32 }
%"class.blink::Member.276" = type opaque
%"class.blink::DocumentTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.blink::Member.74" }
%"class.blink::Member.278" = type { %"class.blink::MemberBase.279" }
%"class.blink::MemberBase.279" = type { %"class.blink::MediaQueryMatcher"* }
%"class.blink::MediaQueryMatcher" = type opaque
%"class.blink::Member.280" = type { %"class.blink::MemberBase.281" }
%"class.blink::MemberBase.281" = type { %"class.blink::ScriptedAnimationController"* }
%"class.blink::ScriptedAnimationController" = type opaque
%"class.blink::Member.282" = type { %"class.blink::MemberBase.283" }
%"class.blink::MemberBase.283" = type { %"class.blink::ScriptedIdleTaskController"* }
%"class.blink::ScriptedIdleTaskController" = type opaque
%"class.blink::Member.284" = type { %"class.blink::MemberBase.285" }
%"class.blink::MemberBase.285" = type { %"class.blink::TextAutosizer"* }
%"class.blink::TextAutosizer" = type opaque
%"class.blink::Member.286" = type { %"class.blink::MemberBase.287" }
%"class.blink::MemberBase.287" = type { %"class.blink::ElementDataCache"* }
%"class.blink::ElementDataCache" = type opaque
%"class.WTF::HashMap.288" = type { %"class.WTF::HashTable.289" }
%"class.WTF::HashTable.289" = type <{ %"struct.WTF::KeyValuePair.292"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.292" = type opaque
%"class.blink::Member.293" = type { %"class.blink::MemberBase.294" }
%"class.blink::MemberBase.294" = type { %"class.blink::DocumentAnimations"* }
%"class.blink::DocumentAnimations" = type opaque
%"class.blink::Member.295" = type { %"class.blink::MemberBase.296" }
%"class.blink::MemberBase.296" = type { %"class.blink::DocumentTimeline"* }
%"class.blink::DocumentTimeline" = type opaque
%"class.blink::Member.297" = type { %"class.blink::MemberBase.298" }
%"class.blink::MemberBase.298" = type { %"class.blink::PendingAnimations"* }
%"class.blink::PendingAnimations" = type opaque
%"class.blink::Member.299" = type { %"class.blink::MemberBase.300" }
%"class.blink::MemberBase.300" = type { %"class.blink::WorkletAnimationController"* }
%"class.blink::WorkletAnimationController" = type opaque
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.177", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.168, %"class.base::WeakPtrFactory" }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%class.scoped_refptr.168 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.169" }>
%"class.base::RefCountedThreadSafe.169" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.170 }
%class.scoped_refptr.170 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.171", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.171" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.172" }
%"struct.std::__1::atomic.172" = type { %"struct.std::__1::__atomic_base.173" }
%"struct.std::__1::__atomic_base.173" = type { %"struct.std::__1::__atomic_base.174" }
%"struct.std::__1::__atomic_base.174" = type { %"struct.std::__1::__cxx_atomic_impl.175" }
%"struct.std::__1::__cxx_atomic_impl.175" = type { %"struct.std::__1::__cxx_atomic_base_impl.176" }
%"struct.std::__1::__cxx_atomic_base_impl.176" = type { i8 }
%"class.blink::WeakMember.177" = type { %"class.blink::MemberBase.75" }
%"class.blink::HeapHashSet.301" = type { %"class.WTF::HashSet.304" }
%"class.WTF::HashSet.304" = type { %"class.WTF::HashTable.305" }
%"class.WTF::HashTable.305" = type <{ %"class.blink::Member.307"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.307" = type opaque
%"class.blink::Member.308" = type { %"class.blink::MemberBase.309" }
%"class.blink::MemberBase.309" = type { %"class.blink::CanvasFontCache"* }
%"class.blink::CanvasFontCache" = type opaque
%"class.blink::Member.310" = type { %"class.blink::MemberBase.311" }
%"class.blink::MemberBase.311" = type { %"class.blink::IntersectionObserverController"* }
%"class.blink::IntersectionObserverController" = type opaque
%"class.blink::Member.312" = type { %"class.blink::MemberBase.313" }
%"class.blink::MemberBase.313" = type { %"class.blink::SnapCoordinator"* }
%"class.blink::SnapCoordinator" = type opaque
%"class.blink::Member.314" = type { %"class.blink::MemberBase.315" }
%"class.blink::MemberBase.315" = type { %"class.blink::PropertyRegistry"* }
%"class.blink::PropertyRegistry" = type opaque
%"class.blink::Member.316" = type { %"class.blink::MemberBase.317" }
%"class.blink::MemberBase.317" = type { %"class.blink::Document::NetworkStateObserver"* }
%"class.blink::Document::NetworkStateObserver" = type opaque
%"class.std::__1::unique_ptr.318" = type { %"class.std::__1::__compressed_pair.319" }
%"class.std::__1::__compressed_pair.319" = type { %"struct.std::__1::__compressed_pair_elem.320" }
%"struct.std::__1::__compressed_pair_elem.320" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.324" = type { %"class.std::__1::__compressed_pair.325" }
%"class.std::__1::__compressed_pair.325" = type { %"struct.std::__1::__compressed_pair_elem.326" }
%"struct.std::__1::__compressed_pair_elem.326" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type opaque
%"class.blink::Member.330" = type { %"class.blink::MemberBase.331" }
%"class.blink::MemberBase.331" = type { %"class.blink::DOMFeaturePolicy"* }
%"class.blink::DOMFeaturePolicy" = type opaque
%"class.blink::Member.332" = type { %"class.blink::MemberBase.333" }
%"class.blink::MemberBase.333" = type { %"class.blink::SlotAssignmentEngine"* }
%"class.blink::SlotAssignmentEngine" = type opaque
%"class.blink::Member.334" = type { %"class.blink::MemberBase.335" }
%"class.blink::MemberBase.335" = type { %"class.blink::ViewportData"* }
%"class.blink::ViewportData" = type opaque
%"class.blink::Member.336" = type { %"class.blink::MemberBase.337" }
%"class.blink::MemberBase.337" = type { %"class.blink::LazyLoadImageObserver"* }
%"class.blink::LazyLoadImageObserver" = type opaque
%"class.WTF::Vector.338" = type { %"class.WTF::VectorBuffer.339" }
%"class.WTF::VectorBuffer.339" = type { %"class.WTF::VectorBufferBase.340" }
%"class.WTF::VectorBufferBase.340" = type { i8*, i32, i32 }
%"class.blink::HeapHashMap.343" = type { %"class.WTF::HashMap.346" }
%"class.WTF::HashMap.346" = type { %"class.WTF::HashTable.347" }
%"class.WTF::HashTable.347" = type <{ %"struct.WTF::KeyValuePair.349"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.349" = type opaque
%"class.blink::Member.350" = type { %"class.blink::MemberBase.351" }
%"class.blink::MemberBase.351" = type { %"class.blink::BeforeUnloadEventListener"* }
%"class.blink::BeforeUnloadEventListener" = type opaque
%"class.std::__1::unique_ptr.352" = type { %"class.std::__1::__compressed_pair.353" }
%"class.std::__1::__compressed_pair.353" = type { %"struct.std::__1::__compressed_pair_elem.354" }
%"struct.std::__1::__compressed_pair_elem.354" = type { %"class.blink::DocumentResourceCoordinator"* }
%"class.blink::DocumentResourceCoordinator" = type opaque
%"class.blink::Member.358" = type { %"class.blink::MemberBase.359" }
%"class.blink::MemberBase.359" = type { %"class.blink::CookieJar"* }
%"class.blink::CookieJar" = type opaque
%"class.blink::Member.360" = type { %"class.blink::MemberBase.361" }
%"class.blink::MemberBase.361" = type { %"class.blink::FragmentDirective"* }
%"class.blink::FragmentDirective" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.362" = type { %"class.WTF::HashMap.365" }
%"class.WTF::HashMap.365" = type { %"class.WTF::HashTable.366" }
%"class.WTF::HashTable.366" = type <{ %"struct.WTF::KeyValuePair.368"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.368" = type opaque
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet.369" }
%"class.blink::HeapHashSet.369" = type { %"class.WTF::HashSet.372" }
%"class.WTF::HashSet.372" = type { %"class.WTF::HashTable.373" }
%"class.WTF::HashTable.373" = type <{ %"class.blink::WeakMember.375"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.375" = type opaque
%"class.blink::Member.376" = type { %"class.blink::MemberBase.377" }
%"class.blink::MemberBase.377" = type { %"class.blink::DisplayLockDocumentState"* }
%"class.blink::DisplayLockDocumentState" = type opaque
%"class.blink::Member.378" = type { %"class.blink::MemberBase.379" }
%"class.blink::MemberBase.379" = type { %"class.blink::FontPreloadManager"* }
%"class.blink::FontPreloadManager" = type <{ %"class.blink::Member.74", %"class.blink::HeapHashSet.385", i32, [4 x i8], %"class.blink::HeapTaskRunnerTimer.392", %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.blink::HeapHashSet.385" = type { %"class.WTF::HashSet.388" }
%"class.WTF::HashSet.388" = type { %"class.WTF::HashTable.389" }
%"class.WTF::HashTable.389" = type <{ %"class.blink::Member.391"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.391" = type opaque
%"class.blink::HeapTaskRunnerTimer.392" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.393", { i64, i64 } }
%"class.blink::WeakMember.393" = type { %"class.blink::MemberBase.379" }
%"class.blink::WeakMember.380" = type { %"class.blink::MemberBase" }
%"class.blink::Member.381" = type { %"class.blink::MemberBase.382" }
%"class.blink::MemberBase.382" = type { %"class.blink::DocumentData"* }
%"class.blink::DocumentData" = type opaque
%"class.blink::SVGSMILElement" = type <{ %"class.blink::SVGElement", %"class.blink::SVGTests", %"class.blink::Member.32", %"class.blink::Member.34", %"class.blink::HeapVector", i8, i8, i8, i8, [4 x i8], %"class.blink::HeapHashSet.43", %"class.blink::SMILInstanceTimeList", %"class.blink::SMILInstanceTimeList", %"struct.blink::SMILInterval", %"struct.blink::SMILInterval", i8, [3 x i8], %"struct.blink::SVGSMILElement::ProgressState", [4 x i8], %"class.blink::Member.55", i32, i32, %"class.blink::SMILTime", %"class.blink::SMILTime", %"class.blink::SMILRepeatCount", %"class.blink::SMILTime", %"class.blink::SMILTime", i8, i8, i8, [5 x i8] }>
%"struct.blink::Element::AttributeModificationParams" = type <{ %"class.blink::QualifiedName"*, %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*, i32, [4 x i8] }>
%"class.blink::ElementSMILAnimations" = type { %"class.blink::HeapHashMap.396" }
%"class.blink::HeapHashMap.396" = type { %"class.WTF::HashMap.399" }
%"class.WTF::HashMap.399" = type { %"class.WTF::HashTable.400" }
%"class.WTF::HashTable.400" = type <{ %"struct.WTF::KeyValuePair.402"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.402" = type opaque
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference.403" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference.403" = type { %"class.v8::TracedReference.404" }
%"class.v8::TracedReference.404" = type { %"class.v8::BasicTracedReference.405" }
%"class.v8::BasicTracedReference.405" = type { %"class.v8::TracedReferenceBase" }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.653" }
%"class.std::__1::__compressed_pair.653" = type { %"struct.std::__1::__compressed_pair_elem.654" }
%"struct.std::__1::__compressed_pair_elem.654" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::UniqueElementData" = type { %"class.blink::ElementData", %"class.blink::Member.14", %"class.WTF::Vector.663" }
%"class.WTF::Vector.663" = type { %"class.WTF::VectorBuffer.664" }
%"class.WTF::VectorBuffer.664" = type { %"class.WTF::VectorBufferBase.665", [64 x i8] }
%"class.WTF::VectorBufferBase.665" = type { %"class.blink::Attribute"*, i32, i32 }
%"class.blink::Attribute" = type { %"class.blink::QualifiedName", %"class.WTF::AtomicString" }
%"class.blink::SVGAnimateElement" = type <{ %"class.blink::SVGAnimationElement", %"class.blink::Member.428", %"class.blink::Member.428", %"class.blink::Member.428", %"class.blink::Member.430", %"class.blink::QualifiedName", i32, i32, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.428" = type { %"class.blink::MemberBase.429" }
%"class.blink::MemberBase.429" = type { %"class.blink::SVGPropertyBase"* }
%"class.blink::SVGPropertyBase" = type opaque
%"class.blink::Member.430" = type { %"class.blink::MemberBase.431" }
%"class.blink::MemberBase.431" = type { %"class.blink::SVGAnimatedPropertyBase"* }
%"class.blink::SVGAnimatedPropertyBase" = type opaque
%"struct.blink::SMILAnimationValue" = type opaque
%"class.blink::EventTargetData" = type { %"class.blink::EventListenerMap", %"class.std::__1::unique_ptr.637" }
%"class.blink::EventListenerMap" = type { %"class.blink::HeapVector.625" }
%"class.blink::HeapVector.625" = type { %"class.WTF::Vector.628" }
%"class.WTF::Vector.628" = type { %"class.WTF::VectorBuffer.629" }
%"class.WTF::VectorBuffer.629" = type { %"class.WTF::VectorBufferBase.630", [32 x i8] }
%"class.WTF::VectorBufferBase.630" = type { %"struct.std::__1::pair.631"*, i32, i32 }
%"struct.std::__1::pair.631" = type { %"class.WTF::AtomicString", %"class.blink::Member.632" }
%"class.blink::Member.632" = type { %"class.blink::MemberBase.633" }
%"class.blink::MemberBase.633" = type { %"class.blink::HeapVector.634"* }
%"class.blink::HeapVector.634" = type opaque
%"class.std::__1::unique_ptr.637" = type { %"class.std::__1::__compressed_pair.638" }
%"class.std::__1::__compressed_pair.638" = type { %"struct.std::__1::__compressed_pair_elem.639" }
%"struct.std::__1::__compressed_pair_elem.639" = type { %"class.WTF::Vector.640"* }
%"class.WTF::Vector.640" = type opaque
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.432", i32, [4 x i8], %"class.std::__1::unique_ptr.568", %"class.std::__1::unique_ptr.568", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.579", %"class.std::__1::unique_ptr.585", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.597", %"class.std::__1::unique_ptr.603", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.610", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.432" = type { %"class.std::__1::__compressed_pair.433" }
%"class.std::__1::__compressed_pair.433" = type { %"struct.std::__1::__compressed_pair_elem.434" }
%"struct.std::__1::__compressed_pair_elem.434" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.435", %"class.std::__1::unique_ptr.441", %"class.std::__1::unique_ptr.447", %"class.std::__1::unique_ptr.453", %"class.std::__1::unique_ptr.459", %"class.std::__1::unique_ptr.465", %"class.std::__1::unique_ptr.476", %"class.std::__1::unique_ptr.483", %"class.std::__1::unique_ptr.483", %"class.std::__1::unique_ptr.490", %"class.std::__1::unique_ptr.497", %"class.std::__1::unique_ptr.504", %"class.std::__1::unique_ptr.504", %"class.std::__1::unique_ptr.511", %"class.std::__1::unique_ptr.518", %"class.std::__1::unique_ptr.525", %"class.std::__1::unique_ptr.548", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.435" = type { %"class.std::__1::__compressed_pair.436" }
%"class.std::__1::__compressed_pair.436" = type { %"struct.std::__1::__compressed_pair_elem.437" }
%"struct.std::__1::__compressed_pair_elem.437" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.441" = type { %"class.std::__1::__compressed_pair.442" }
%"class.std::__1::__compressed_pair.442" = type { %"struct.std::__1::__compressed_pair_elem.443" }
%"struct.std::__1::__compressed_pair_elem.443" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.447" = type { %"class.std::__1::__compressed_pair.448" }
%"class.std::__1::__compressed_pair.448" = type { %"struct.std::__1::__compressed_pair_elem.449" }
%"struct.std::__1::__compressed_pair_elem.449" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.453" = type { %"class.std::__1::__compressed_pair.454" }
%"class.std::__1::__compressed_pair.454" = type { %"struct.std::__1::__compressed_pair_elem.455" }
%"struct.std::__1::__compressed_pair_elem.455" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.459" = type { %"class.std::__1::__compressed_pair.460" }
%"class.std::__1::__compressed_pair.460" = type { %"struct.std::__1::__compressed_pair_elem.461" }
%"struct.std::__1::__compressed_pair_elem.461" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.465" = type { %"class.std::__1::__compressed_pair.466" }
%"class.std::__1::__compressed_pair.466" = type { %"struct.std::__1::__compressed_pair_elem.467" }
%"struct.std::__1::__compressed_pair_elem.467" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.468" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.468" = type { %"struct.std::__1::__atomic_base.469" }
%"struct.std::__1::__atomic_base.469" = type { %"struct.std::__1::__atomic_base.470" }
%"struct.std::__1::__atomic_base.470" = type { %"struct.std::__1::__cxx_atomic_impl.471" }
%"struct.std::__1::__cxx_atomic_impl.471" = type { %"struct.std::__1::__cxx_atomic_base_impl.472" }
%"struct.std::__1::__cxx_atomic_base_impl.472" = type { i64 }
%"class.std::__1::unique_ptr.476" = type { %"class.std::__1::__compressed_pair.477" }
%"class.std::__1::__compressed_pair.477" = type { %"struct.std::__1::__compressed_pair_elem.478" }
%"struct.std::__1::__compressed_pair_elem.478" = type { %"class.blink::Worklist.479"* }
%"class.blink::Worklist.479" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.468" }
%"class.std::__1::unique_ptr.483" = type { %"class.std::__1::__compressed_pair.484" }
%"class.std::__1::__compressed_pair.484" = type { %"struct.std::__1::__compressed_pair_elem.485" }
%"struct.std::__1::__compressed_pair_elem.485" = type { %"class.blink::Worklist.486"* }
%"class.blink::Worklist.486" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.468" }
%"class.std::__1::unique_ptr.490" = type { %"class.std::__1::__compressed_pair.491" }
%"class.std::__1::__compressed_pair.491" = type { %"struct.std::__1::__compressed_pair_elem.492" }
%"struct.std::__1::__compressed_pair_elem.492" = type { %"class.blink::Worklist.493"* }
%"class.blink::Worklist.493" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.468" }
%"class.std::__1::unique_ptr.497" = type { %"class.std::__1::__compressed_pair.498" }
%"class.std::__1::__compressed_pair.498" = type { %"struct.std::__1::__compressed_pair_elem.499" }
%"struct.std::__1::__compressed_pair_elem.499" = type { %"class.blink::Worklist.500"* }
%"class.blink::Worklist.500" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.468" }
%"class.std::__1::unique_ptr.504" = type { %"class.std::__1::__compressed_pair.505" }
%"class.std::__1::__compressed_pair.505" = type { %"struct.std::__1::__compressed_pair_elem.506" }
%"struct.std::__1::__compressed_pair_elem.506" = type { %"class.blink::Worklist.507"* }
%"class.blink::Worklist.507" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.468" }
%"class.std::__1::unique_ptr.511" = type { %"class.std::__1::__compressed_pair.512" }
%"class.std::__1::__compressed_pair.512" = type { %"struct.std::__1::__compressed_pair_elem.513" }
%"struct.std::__1::__compressed_pair_elem.513" = type { %"class.blink::Worklist.514"* }
%"class.blink::Worklist.514" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.468" }
%"class.std::__1::unique_ptr.518" = type { %"class.std::__1::__compressed_pair.519" }
%"class.std::__1::__compressed_pair.519" = type { %"struct.std::__1::__compressed_pair_elem.520" }
%"struct.std::__1::__compressed_pair_elem.520" = type { %"class.blink::Worklist.521"* }
%"class.blink::Worklist.521" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.468" }
%"class.std::__1::unique_ptr.525" = type { %"class.std::__1::__compressed_pair.526" }
%"class.std::__1::__compressed_pair.526" = type { %"struct.std::__1::__compressed_pair_elem.527" }
%"struct.std::__1::__compressed_pair_elem.527" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.528", %"class.std::__1::__compressed_pair.535", %"class.std::__1::__compressed_pair.540", %"class.std::__1::__compressed_pair.542", [4 x i8] }>
%"class.std::__1::unique_ptr.528" = type { %"class.std::__1::__compressed_pair.529" }
%"class.std::__1::__compressed_pair.529" = type { %"struct.std::__1::__compressed_pair_elem.530", %"struct.std::__1::__compressed_pair_elem.531" }
%"struct.std::__1::__compressed_pair_elem.530" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.531" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.532" }
%"class.std::__1::__compressed_pair.532" = type { %"struct.std::__1::__compressed_pair_elem.533" }
%"struct.std::__1::__compressed_pair_elem.533" = type { i64 }
%"class.std::__1::__compressed_pair.535" = type { %"struct.std::__1::__compressed_pair_elem.536" }
%"struct.std::__1::__compressed_pair_elem.536" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.540" = type { %"struct.std::__1::__compressed_pair_elem.533" }
%"class.std::__1::__compressed_pair.542" = type { %"struct.std::__1::__compressed_pair_elem.543" }
%"struct.std::__1::__compressed_pair_elem.543" = type { float }
%"class.std::__1::unique_ptr.548" = type { %"class.std::__1::__compressed_pair.549" }
%"class.std::__1::__compressed_pair.549" = type { %"struct.std::__1::__compressed_pair_elem.550" }
%"struct.std::__1::__compressed_pair_elem.550" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.551", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.551" = type { %"class.std::__1::__compressed_pair.552" }
%"class.std::__1::__compressed_pair.552" = type { %"struct.std::__1::__compressed_pair_elem.553" }
%"struct.std::__1::__compressed_pair_elem.553" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.560" }
%"class.WTF::Vector.560" = type { %"class.WTF::VectorBuffer.561" }
%"class.WTF::VectorBuffer.561" = type { %"class.WTF::VectorBufferBase.562" }
%"class.WTF::VectorBufferBase.562" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.568" = type { %"class.std::__1::__compressed_pair.569" }
%"class.std::__1::__compressed_pair.569" = type { %"struct.std::__1::__compressed_pair_elem.570" }
%"struct.std::__1::__compressed_pair_elem.570" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.576" }
%"class.WTF::VectorBuffer.576" = type { %"class.WTF::VectorBufferBase.577" }
%"class.WTF::VectorBufferBase.577" = type { %"struct.std::__1::pair.578"*, i32, i32 }
%"struct.std::__1::pair.578" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.579" = type { %"class.std::__1::__compressed_pair.580" }
%"class.std::__1::__compressed_pair.580" = type { %"struct.std::__1::__compressed_pair_elem.581" }
%"struct.std::__1::__compressed_pair_elem.581" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.585" = type { %"class.std::__1::__compressed_pair.586" }
%"class.std::__1::__compressed_pair.586" = type { %"struct.std::__1::__compressed_pair_elem.587" }
%"struct.std::__1::__compressed_pair_elem.587" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.591" }
%"class.std::__1::unique_ptr.591" = type { %"class.std::__1::__compressed_pair.592" }
%"class.std::__1::__compressed_pair.592" = type { %"struct.std::__1::__compressed_pair_elem.593" }
%"struct.std::__1::__compressed_pair_elem.593" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.479"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.486"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.493"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.500"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.507"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.614" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.614" = type { %"struct.std::__1::__compressed_pair_elem.615" }
%"struct.std::__1::__compressed_pair_elem.615" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.597" = type { %"class.std::__1::__compressed_pair.598" }
%"class.std::__1::__compressed_pair.598" = type { %"struct.std::__1::__compressed_pair_elem.599" }
%"struct.std::__1::__compressed_pair_elem.599" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.603" = type { %"class.std::__1::__compressed_pair.604" }
%"class.std::__1::__compressed_pair.604" = type { %"struct.std::__1::__compressed_pair_elem.605" }
%"struct.std::__1::__compressed_pair_elem.605" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.609 }
%class.scoped_refptr.609 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.610" = type { %"struct.std::__1::__atomic_base.611" }
%"struct.std::__1::__atomic_base.611" = type { %"struct.std::__1::__cxx_atomic_impl.612" }
%"struct.std::__1::__cxx_atomic_impl.612" = type { %"struct.std::__1::__cxx_atomic_base_impl.613" }
%"struct.std::__1::__cxx_atomic_base_impl.613" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.blink::ScriptState" = type opaque
%"class.blink::DOMWindow" = type opaque
%"class.blink::MessagePort" = type opaque
%"class.blink::ServiceWorker" = type opaque
%"class.blink::PortalHost" = type opaque
%"class.blink::Event" = type opaque
%"class.blink::EventListener" = type opaque
%"class.blink::AddEventListenerOptionsResolved" = type opaque
%"class.blink::RegisteredEventListener" = type <{ %"class.blink::Member.621", i8, [7 x i8] }>
%"class.blink::Member.621" = type { %"class.blink::MemberBase.622" }
%"class.blink::MemberBase.622" = type { %"class.blink::EventListener"* }
%"class.blink::V8UnionStringOrTrustedScript" = type opaque
%"struct.blink::Node::AttachContext" = type <{ %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"*, i8, i8, i8, i8, [4 x i8] }>
%"class.blink::LayoutObject" = type opaque
%"class.blink::EventDispatchHandlingState" = type opaque
%"class.blink::LayoutBox" = type opaque
%"class.blink::ComputedStyle" = type opaque
%"struct.blink::ContainerNode::ChildrenChange" = type { i8, i8, %"class.blink::Node"*, %"class.blink::Node"*, %"class.blink::Node"*, %"class.blink::HeapVector.644", %"class.WTF::String"* }
%"class.blink::HeapVector.644" = type { %"class.WTF::Vector.647" }
%"class.WTF::Vector.647" = type { %"class.WTF::VectorBuffer.648" }
%"class.WTF::VectorBuffer.648" = type { %"class.WTF::VectorBufferBase.649" }
%"class.WTF::VectorBufferBase.649" = type { %"class.blink::Member"*, i32, i32 }
%"class.WTF::HashMap.651" = type opaque
%"class.blink::MutableCSSPropertyValueSet" = type opaque
%"class.blink::Image" = type opaque
%"struct.blink::FocusParams" = type opaque
%"class.blink::FocusOptions" = type opaque
%"class.blink::InputDeviceCapabilities" = type opaque
%"class.blink::ShadowRoot" = type opaque
%"struct.blink::SVGElement::SvgAttributeChangedParams" = type <{ %"class.blink::QualifiedName"*, i32, [4 x i8] }>
%"class.blink::AffineTransform" = type opaque
%"class.logging::CheckOpResult" = type { i8* }

$_ZN5blink11IsHTMLSpaceIDsEEbT_ = comdat any

$_ZNK5blink19SVGAnimationElement7IsValidEv = comdat any

$_ZN5blink19SVGAnimationElementD2Ev = comdat any

$_ZN5blink19SVGAnimationElementD0Ev = comdat any

$_ZNK5blink15ScriptWrappable18HasPendingActivityEv = comdat any

$_ZNK5blink11EventTarget17HasEventListenersEv = comdat any

$_ZNK5blink19SVGAnimationElement18GetWrapperTypeInfoEv = comdat any

$_ZNK5blink11EventTarget15KeepEventInNodeERKNS_5EventE = comdat any

$_ZNK5blink11EventTarget27IsWindowOrWorkerGlobalScopeEv = comdat any

$_ZNK5blink4Node11GetPseudoIdEv = comdat any

$_ZNK5blink4Node21IsMediaControlElementEv = comdat any

$_ZNK5blink4Node15IsMediaControlsEv = comdat any

$_ZNK5blink4Node14IsMediaElementEv = comdat any

$_ZNK5blink4Node20IsTextTrackContainerEv = comdat any

$_ZNK5blink4Node12IsVTTElementEv = comdat any

$_ZNK5blink4Node15IsAttributeNodeEv = comdat any

$_ZNK5blink4Node19IsCharacterDataNodeEv = comdat any

$_ZNK5blink4Node19IsFrameOwnerElementEv = comdat any

$_ZNK5blink4Node27IsMediaRemotingInterstitialEv = comdat any

$_ZNK5blink4Node30IsPictureInPictureInterstitialEv = comdat any

$_ZNK5blink7Element23CanContainRangeEndPointEv = comdat any

$_ZN5blink4Node11SheetLoadedEv = comdat any

$_ZN5blink4Node43NotifyLoadedSheetAndAllCriticalSubresourcesENS0_22LoadedSheetErrorStatusE = comdat any

$_ZN5blink4Node24StartLoadingDynamicSheetEv = comdat any

$_ZN5blink4Node36DidNotifySubtreeInsertionsToDocumentEv = comdat any

$_ZN5blink4Node23PreDispatchEventHandlerERNS_5EventE = comdat any

$_ZN5blink4Node24PostDispatchEventHandlerERNS_5EventEPNS_26EventDispatchHandlingStateE = comdat any

$_ZN5blink7Element26VirtualEnsureComputedStyleENS_8PseudoIdERKN3WTF12AtomicStringE = comdat any

$_ZNK5blink13ContainerNode20ChildrenCanHaveStyleEv = comdat any

$_ZN5blink7Element36AdditionalPresentationAttributeStyleEv = comdat any

$_ZNK5blink7Element37HasExtraStyleForPresentationAttributeEv = comdat any

$_ZN5blink7Element31CloneNonAttributePropertiesFromERKS0_NS_17CloneChildrenFlagE = comdat any

$_ZNK5blink14SVGSMILElement20LayoutObjectIsNeededERKNS_13ComputedStyleE = comdat any

$_ZNK5blink7Element14IsURLAttributeERKNS_9AttributeE = comdat any

$_ZNK5blink7Element22IsHTMLContentAttributeERKNS_9AttributeE = comdat any

$_ZNK5blink7Element43IsSVGAnimationAttributeSettingJavaScriptURLERKNS_9AttributeE = comdat any

$_ZNK5blink7Element10IsLiveLinkEv = comdat any

$_ZN5blink7Element13ImageContentsEv = comdat any

$_ZNK5blink10SVGElement13SupportsFocusEv = comdat any

$_ZNK5blink7Element14DefaultToolTipEv = comdat any

$_ZN5blink7Element20BeginParsingChildrenEv = comdat any

$_ZNK5blink7Element25MatchesDefaultPseudoClassEv = comdat any

$_ZNK5blink7Element25MatchesEnabledPseudoClassEv = comdat any

$_ZNK5blink7Element26MatchesReadOnlyPseudoClassEv = comdat any

$_ZNK5blink7Element27MatchesReadWritePseudoClassEv = comdat any

$_ZNK5blink7Element28MatchesValidityPseudoClassesEv = comdat any

$_ZNK5blink7Element25ShouldAppearIndeterminateEv = comdat any

$_ZNK5blink7Element21IsDateTimeEditElementEv = comdat any

$_ZNK5blink7Element22IsDateTimeFieldElementEv = comdat any

$_ZNK5blink7Element24IsPickerIndicatorElementEv = comdat any

$_ZNK5blink7Element20IsFormControlElementEv = comdat any

$_ZNK5blink7Element19IsSpinButtonElementEv = comdat any

$_ZNK5blink7Element13IsTextControlEv = comdat any

$_ZNK5blink7Element21IsOptionalFormControlEv = comdat any

$_ZNK5blink7Element21IsRequiredFormControlEv = comdat any

$_ZNK5blink7Element12willValidateEv = comdat any

$_ZN5blink7Element14IsValidElementEv = comdat any

$_ZNK5blink7Element9IsInRangeEv = comdat any

$_ZNK5blink7Element12IsOutOfRangeEv = comdat any

$_ZNK5blink7Element20IsClearButtonElementEv = comdat any

$_ZNK5blink7Element15IsScriptElementEv = comdat any

$_ZNK5blink7Element21IsVTTCueBackgroundBoxEv = comdat any

$_ZNK5blink7Element20IsSliderThumbElementEv = comdat any

$_ZNK5blink7Element25HasNonInBodyInsertionModeEv = comdat any

$_ZNK5blink7Element21IsDisabledFormControlEv = comdat any

$_ZNK5blink7Element11IsAdRelatedEv = comdat any

$_ZNK5blink7Element16GetNamedItemTypeEv = comdat any

$_ZN5blink7Element22ParserDidSetAttributesEv = comdat any

$_ZNK5blink7Element23AreAuthorShadowsAllowedEv = comdat any

$_ZN5blink7Element25DidAddUserAgentShadowRootERNS_10ShadowRootE = comdat any

$_ZNK5blink7Element31AlwaysCreateUserAgentShadowRootEv = comdat any

$_ZNK5blink7Element27TypeShouldForceLegacyLayoutEv = comdat any

$_ZNK5blink10SVGElement20IsSVGGeometryElementEv = comdat any

$_ZNK5blink10SVGElement20IsSVGGraphicsElementEv = comdat any

$_ZNK5blink10SVGElement14IsFilterEffectEv = comdat any

$_ZNK5blink10SVGElement13IsTextContentEv = comdat any

$_ZNK5blink10SVGElement17IsTextPositioningEv = comdat any

$_ZNK5blink10SVGElement22IsStructurallyExternalEv = comdat any

$_ZN5blink10SVGElement22AnimateMotionTransformEv = comdat any

$_ZNK5blink10SVGElement22SelfHasRelativeLengthsEv = comdat any

$_ZN5blink19SVGAnimationElement17CalculateDistanceERKN3WTF6StringES4_ = comdat any

$_ZN3WTF6VectorIN3gfx11CubicBezierELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN3gfx11CubicBezierEEEmm = comdat any

$_ZN3WTF6VectorIN3gfx11CubicBezierELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS1_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIfEEmm = comdat any

$_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRfEEvOT_ = comdat any

$_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIiEEvOT_ = comdat any

$_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZNK3WTF6VectorIN3gfx11CubicBezierELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj = comdat any

@_ZTVN5blink19SVGAnimationElementE = hidden unnamed_addr constant { [181 x i8*], [3 x i8*], [3 x i8*] } { [181 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv to i8*), i8* bitcast (void (%"class.blink::SVGAnimationElement"*)* @_ZN5blink19SVGAnimationElementD2Ev to i8*), i8* bitcast (void (%"class.blink::SVGAnimationElement"*)* @_ZN5blink19SVGAnimationElementD0Ev to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18HasPendingActivityEv to i8*), i8* bitcast (i1 (%"class.blink::EventTarget"*)* @_ZNK5blink11EventTarget17HasEventListenersEv to i8*), i8* bitcast (void (%"class.blink::SVGSMILElement"*, %"class.blink::Visitor"*)* @_ZNK5blink14SVGSMILElement5TraceEPNS_7VisitorE to i8*), i8* bitcast (%"struct.blink::WrapperTypeInfo"* (%"class.blink::SVGAnimationElement"*)* @_ZNK5blink19SVGAnimationElement18GetWrapperTypeInfoEv to i8*), i8* bitcast (%"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE to i8*), i8* bitcast (%"class.v8::Object"* (%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*)* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE to i8*), i8* bitcast (%"class.WTF::AtomicString"* (%"class.blink::Node"*)* @_ZNK5blink4Node13InterfaceNameEv to i8*), i8* bitcast (%"class.blink::ExecutionContext"* (%"class.blink::Node"*)* @_ZNK5blink4Node19GetExecutionContextEv to i8*), i8* bitcast (%"class.blink::Node"* (%"class.blink::Node"*)* @_ZN5blink4Node6ToNodeEv to i8*), i8* bitcast (%"class.blink::DOMWindow"* (%"class.blink::EventTarget"*)* @_ZNK5blink11EventTarget11ToDOMWindowEv to i8*), i8* bitcast (%"class.blink::LocalDOMWindow"* (%"class.blink::EventTarget"*)* @_ZNK5blink11EventTarget16ToLocalDOMWindowEv to i8*), i8* bitcast (%"class.blink::LocalDOMWindow"* (%"class.blink::EventTarget"*)* @_ZN5blink11EventTarget16ToLocalDOMWindowEv to i8*), i8* bitcast (%"class.blink::MessagePort"* (%"class.blink::EventTarget"*)* @_ZN5blink11EventTarget13ToMessagePortEv to i8*), i8* bitcast (%"class.blink::ServiceWorker"* (%"class.blink::EventTarget"*)* @_ZN5blink11EventTarget15ToServiceWorkerEv to i8*), i8* bitcast (%"class.blink::PortalHost"* (%"class.blink::EventTarget"*)* @_ZN5blink11EventTarget12ToPortalHostEv to i8*), i8* bitcast (void (%"class.blink::Node"*)* @_ZN5blink4Node23RemoveAllEventListenersEv to i8*), i8* bitcast (i1 (%"class.blink::EventTarget"*, %"class.blink::Event"*)* @_ZNK5blink11EventTarget15KeepEventInNodeERKNS_5EventE to i8*), i8* bitcast (i1 (%"class.blink::EventTarget"*)* @_ZNK5blink11EventTarget27IsWindowOrWorkerGlobalScopeEv to i8*), i8* bitcast (i1 (%"class.blink::EventTarget"*, %"class.WTF::AtomicString"*, %"class.blink::EventListener"*, %"class.blink::AddEventListenerOptionsResolved"*)* @_ZN5blink11EventTarget24AddEventListenerInternalERKN3WTF12AtomicStringEPNS_13EventListenerEPKNS_31AddEventListenerOptionsResolvedE to i8*), i8* bitcast (void (%"class.blink::SVGSMILElement"*, %"class.WTF::AtomicString"*, %"class.blink::RegisteredEventListener"*)* @_ZN5blink14SVGSMILElement18AddedEventListenerERKN3WTF12AtomicStringERNS_23RegisteredEventListenerE to i8*), i8* bitcast (void (%"class.blink::SVGElement"*, %"class.WTF::AtomicString"*, %"class.blink::RegisteredEventListener"*)* @_ZN5blink10SVGElement20RemovedEventListenerERKN3WTF12AtomicStringERKNS_23RegisteredEventListenerE to i8*), i8* bitcast (i32 (%"class.blink::Node"*, %"class.blink::Event"*)* @_ZN5blink4Node21DispatchEventInternalERNS_5EventE to i8*), i8* bitcast (%"class.blink::EventTargetData"* (%"class.blink::Node"*)* @_ZN5blink4Node18GetEventTargetDataEv to i8*), i8* bitcast (%"class.blink::EventTargetData"* (%"class.blink::Node"*)* @_ZN5blink4Node21EnsureEventTargetDataEv to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::Element"*)* @_ZNK5blink7Element8nodeNameEv to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::Node"*)* @_ZNK5blink4Node9nodeValueEv to i8*), i8* bitcast (void (%"class.blink::Node"*, %"class.WTF::String"*)* @_ZN5blink4Node12setNodeValueERKN3WTF6StringE to i8*), i8* bitcast (i32 (%"class.blink::Element"*)* @_ZNK5blink7Element11getNodeTypeEv to i8*), i8* bitcast (%"class.blink::Node"* (%"class.blink::Element"*, %"class.blink::Document"*, i32)* @_ZNK5blink7Element5CloneERNS_8DocumentENS_17CloneChildrenFlagE to i8*), i8* bitcast (void (%"class.blink::Node"*, %"class.WTF::String"*)* @_ZN5blink4Node14setTextContentERKN3WTF6StringE to i8*), i8* bitcast (void (%"class.blink::Node"*, %"class.blink::V8UnionStringOrTrustedScript"*, %"class.blink::ExceptionState"*)* @_ZN5blink4Node24setTextContentForBindingEPKNS_28V8UnionStringOrTrustedScriptERNS_14ExceptionStateE to i8*), i8* bitcast (i8 (%"class.blink::Node"*)* @_ZNK5blink4Node11GetPseudoIdEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node21IsMediaControlElementEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node15IsMediaControlsEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node14IsMediaElementEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node20IsTextTrackContainerEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node12IsVTTElementEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node15IsAttributeNodeEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node19IsCharacterDataNodeEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node19IsFrameOwnerElementEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node27IsMediaRemotingInterstitialEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node30IsPictureInPictureInterstitialEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element23CanContainRangeEndPointEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZN5blink4Node11SheetLoadedEv to i8*), i8* bitcast (void (%"class.blink::Node"*, i32)* @_ZN5blink4Node43NotifyLoadedSheetAndAllCriticalSubresourcesENS0_22LoadedSheetErrorStatusE to i8*), i8* bitcast (void (%"class.blink::Node"*)* @_ZN5blink4Node24StartLoadingDynamicSheetEv to i8*), i8* bitcast (void (%"class.blink::ContainerNode"*, i1, i32)* @_ZN5blink13ContainerNode10SetFocusedEbNS_5mojom9FocusTypeE to i8*), i8* bitcast (void (%"class.blink::ContainerNode"*, i1)* @_ZN5blink13ContainerNode10SetDraggedEb to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node25ShouldHaveFocusAppearanceEv to i8*), i8* bitcast (void ()* @_ZNK5blink13ContainerNode11BoundingBoxEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*, i32)* @_ZNK5blink7Element16ChildTypeAllowedENS_4Node8NodeTypeE to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node17CanStartSelectionEv to i8*), i8* bitcast (void (%"class.blink::Element"*, %"struct.blink::Node::AttachContext"*)* @_ZN5blink7Element16AttachLayoutTreeERNS_4Node13AttachContextE to i8*), i8* bitcast (void (%"class.blink::SVGElement"*, i1)* @_ZN5blink10SVGElement16DetachLayoutTreeEb to i8*), i8* bitcast (i32 (%"class.blink::SVGSMILElement"*, %"class.blink::ContainerNode"*)* @_ZN5blink14SVGSMILElement12InsertedIntoERNS_13ContainerNodeE to i8*), i8* bitcast (void (%"class.blink::Node"*)* @_ZN5blink4Node36DidNotifySubtreeInsertionsToDocumentEv to i8*), i8* bitcast (void (%"class.blink::SVGSMILElement"*, %"class.blink::ContainerNode"*)* @_ZN5blink14SVGSMILElement11RemovedFromERNS_13ContainerNodeE to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZN5blink4Node28WillRespondToMouseMoveEventsEv to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZN5blink4Node29WillRespondToMouseClickEventsEv to i8*), i8* bitcast (%"class.blink::EventDispatchHandlingState"* (%"class.blink::Node"*, %"class.blink::Event"*)* @_ZN5blink4Node23PreDispatchEventHandlerERNS_5EventE to i8*), i8* bitcast (void (%"class.blink::Node"*, %"class.blink::Event"*, %"class.blink::EventDispatchHandlingState"*)* @_ZN5blink4Node24PostDispatchEventHandlerERNS_5EventEPNS_26EventDispatchHandlingStateE to i8*), i8* bitcast (void (%"class.blink::Node"*, %"class.blink::Event"*)* @_ZN5blink4Node17HandleLocalEventsERNS_5EventE to i8*), i8* bitcast (void (%"class.blink::Node"*, %"class.blink::Event"*)* @_ZN5blink4Node19DefaultEventHandlerERNS_5EventE to i8*), i8* bitcast (i1 (%"class.blink::Node"*)* @_ZNK5blink4Node21HasActivationBehaviorEv to i8*), i8* bitcast (%"class.blink::LayoutBox"* (%"class.blink::Node"*)* @_ZN5blink4Node13AutoscrollBoxEv to i8*), i8* bitcast (void (%"class.blink::Node"*)* @_ZN5blink4Node14StopAutoscrollEv to i8*), i8* bitcast (void (%"class.blink::Element"*, %"class.blink::Document"*)* @_ZN5blink7Element20DidMoveToNewDocumentERNS_8DocumentE to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::Node"*)* @_ZNK5blink4Node13DebugNodeNameEv to i8*), i8* bitcast (%"class.blink::ComputedStyle"* (%"class.blink::Element"*, i8, %"class.WTF::AtomicString"*)* @_ZN5blink7Element26VirtualEnsureComputedStyleENS_8PseudoIdERKN3WTF12AtomicStringE to i8*), i8* bitcast (void (%"class.blink::SVGElement"*, %"struct.blink::ContainerNode::ChildrenChange"*)* @_ZN5blink10SVGElement15ChildrenChangedERKNS_13ContainerNode14ChildrenChangeE to i8*), i8* bitcast (i1 (%"class.blink::ContainerNode"*)* @_ZNK5blink13ContainerNode42ChildrenChangedAllChildrenRemovedNeedsListEv to i8*), i8* bitcast (i1 (%"class.blink::ContainerNode"*)* @_ZNK5blink13ContainerNode20ChildrenCanHaveStyleEv to i8*), i8* bitcast (%"class.blink::LayoutBox"* (%"class.blink::Element"*)* @_ZNK5blink7Element24GetLayoutBoxForScrollingEv to i8*), i8* bitcast (%"class.blink::Element"* (%"class.blink::Element"*)* @_ZN5blink7Element18GetAnimationTargetEv to i8*), i8* bitcast (%"class.WTF::HashMap.651"* (%"class.blink::Element"*)* @_ZNK5blink7Element24GetCheckedAttributeTypesEv to i8*), i8* bitcast (i32 (%"class.blink::Element"*)* @_ZN5blink7Element11scrollWidthEv to i8*), i8* bitcast (i32 (%"class.blink::Element"*)* @_ZN5blink7Element12scrollHeightEv to i8*), i8* bitcast (%"class.blink::CSSPropertyValueSet"* (%"class.blink::Element"*)* @_ZN5blink7Element36AdditionalPresentationAttributeStyleEv to i8*), i8* bitcast (i1 (%"class.blink::SVGSMILElement"*, %"class.blink::QualifiedName"*)* @_ZNK5blink14SVGSMILElement23IsPresentationAttributeERKNS_13QualifiedNameE to i8*), i8* bitcast (void (%"class.blink::SVGElement"*, %"class.blink::QualifiedName"*, %"class.WTF::AtomicString"*, %"class.blink::MutableCSSPropertyValueSet"*)* @_ZN5blink10SVGElement36CollectStyleForPresentationAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringEPNS_26MutableCSSPropertyValueSetE to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element37HasExtraStyleForPresentationAttributeEv to i8*), i8* bitcast (void (%"class.blink::SVGElement"*, %"class.blink::MutableCSSPropertyValueSet"*)* @_ZN5blink10SVGElement41CollectExtraStyleForPresentationAttributeEPNS_26MutableCSSPropertyValueSetE to i8*), i8* bitcast (void (%"class.blink::SVGElement"*, %"struct.blink::Element::AttributeModificationParams"*)* @_ZN5blink10SVGElement16AttributeChangedERKNS_7Element27AttributeModificationParamsE to i8*), i8* bitcast (void (%"class.blink::SVGAnimationElement"*, %"struct.blink::Element::AttributeModificationParams"*)* @_ZN5blink19SVGAnimationElement14ParseAttributeERKNS_7Element27AttributeModificationParamsE to i8*), i8* bitcast (i1 (%"class.blink::Element"*, %"class.blink::QualifiedName"*)* @_ZNK5blink7Element21HasLegalLinkAttributeERKNS_13QualifiedNameE to i8*), i8* bitcast (%"class.blink::QualifiedName"* (%"class.blink::Element"*)* @_ZNK5blink7Element24SubResourceAttributeNameEv to i8*), i8* bitcast (void (%"class.blink::Element"*, %"class.blink::Element"*, i32)* @_ZN5blink7Element31CloneNonAttributePropertiesFromERKS0_NS_17CloneChildrenFlagE to i8*), i8* bitcast (%"class.blink::LayoutObject"* (%"class.blink::Element"*, %"class.blink::ComputedStyle"*, i32)* @_ZN5blink7Element18CreateLayoutObjectERKNS_13ComputedStyleENS_12LegacyLayoutE to i8*), i8* bitcast (i1 (%"class.blink::SVGSMILElement"*, %"class.blink::ComputedStyle"*)* @_ZNK5blink14SVGSMILElement20LayoutObjectIsNeededERKNS_13ComputedStyleE to i8*), i8* bitcast (void (%"class.blink::SVGElement"*, i32)* @_ZN5blink10SVGElement15AccessKeyActionENS_27SimulatedClickCreationScopeE to i8*), i8* bitcast (i1 (%"class.blink::Element"*, %"class.blink::Attribute"*)* @_ZNK5blink7Element14IsURLAttributeERKNS_9AttributeE to i8*), i8* bitcast (i1 (%"class.blink::Element"*, %"class.blink::Attribute"*)* @_ZNK5blink7Element22IsHTMLContentAttributeERKNS_9AttributeE to i8*), i8* bitcast (i1 (%"class.blink::Element"*, %"class.blink::Attribute"*)* @_ZNK5blink7Element43IsSVGAnimationAttributeSettingJavaScriptURLERKNS_9AttributeE to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element10IsLiveLinkEv to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::Element"*)* @_ZNK5blink7Element14ImageSourceURLEv to i8*), i8* bitcast (%"class.blink::Image"* (%"class.blink::Element"*)* @_ZN5blink7Element13ImageContentsEv to i8*), i8* bitcast (void (%"class.blink::Element"*, %"struct.blink::FocusParams"*)* @_ZN5blink7Element5focusERKNS_11FocusParamsE to i8*), i8* bitcast (void (%"class.blink::Element"*, i32, %"class.blink::FocusOptions"*)* @_ZN5blink7Element32UpdateFocusAppearanceWithOptionsENS_24SelectionBehaviorOnFocusEPKNS_12FocusOptionsE to i8*), i8* bitcast (void (%"class.blink::Element"*)* @_ZN5blink7Element4blurEv to i8*), i8* bitcast (i1 (%"class.blink::SVGElement"*)* @_ZNK5blink10SVGElement13SupportsFocusEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element19IsKeyboardFocusableEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element16IsMouseFocusableEv to i8*), i8* bitcast (void (%"class.blink::Element"*, %"class.blink::Element"*, i32, %"class.blink::InputDeviceCapabilities"*)* @_ZN5blink7Element18DispatchFocusEventEPS0_NS_5mojom9FocusTypeEPNS_23InputDeviceCapabilitiesE to i8*), i8* bitcast (void (%"class.blink::Element"*, %"class.blink::Element"*, i32, %"class.blink::InputDeviceCapabilities"*)* @_ZN5blink7Element17DispatchBlurEventEPS0_NS_5mojom9FocusTypeEPNS_23InputDeviceCapabilitiesE to i8*), i8* bitcast (void (%"class.blink::Element"*, %"class.WTF::AtomicString"*, %"class.blink::Element"*, i32, %"class.blink::InputDeviceCapabilities"*)* @_ZN5blink7Element20DispatchFocusInEventERKN3WTF12AtomicStringEPS0_NS_5mojom9FocusTypeEPNS_23InputDeviceCapabilitiesE to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::SVGElement"*)* @_ZNK5blink10SVGElement5titleEv to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::Element"*)* @_ZNK5blink7Element14DefaultToolTipEv to i8*), i8* bitcast (%"class.WTF::AtomicString"* (%"class.blink::Element"*)* @_ZNK5blink7Element14ShadowPseudoIdEv to i8*), i8* bitcast (void (%"class.blink::Element"*)* @_ZN5blink7Element21FinishParsingChildrenEv to i8*), i8* bitcast (void (%"class.blink::Element"*)* @_ZN5blink7Element20BeginParsingChildrenEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*, i8)* @_ZNK5blink7Element24CanGeneratePseudoElementENS_8PseudoIdE to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element25MatchesDefaultPseudoClassEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element25MatchesEnabledPseudoClassEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element26MatchesReadOnlyPseudoClassEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element27MatchesReadWritePseudoClassEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element28MatchesValidityPseudoClassesEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element25MayTriggerVirtualKeyboardEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element25ShouldAppearIndeterminateEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element21IsDateTimeEditElementEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element22IsDateTimeFieldElementEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element24IsPickerIndicatorElementEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element20IsFormControlElementEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element19IsSpinButtonElementEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element13IsTextControlEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element21IsOptionalFormControlEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element21IsRequiredFormControlEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element12willValidateEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZN5blink7Element14IsValidElementEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element9IsInRangeEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element12IsOutOfRangeEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element20IsClearButtonElementEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element15IsScriptElementEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element21IsVTTCueBackgroundBoxEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element20IsSliderThumbElementEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element25HasNonInBodyInsertionModeEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element21IsDisabledFormControlEv to i8*), i8* bitcast (void (%"class.blink::SVGSMILElement"*)* @_ZN5blink14SVGSMILElement20BuildPendingResourceEv to i8*), i8* bitcast (void (%"class.blink::Element"*, i1)* @_ZN5blink7Element9SetActiveEb to i8*), i8* bitcast (void (%"class.blink::Element"*, i1)* @_ZN5blink7Element10SetHoveredEb to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element11IsAdRelatedEv to i8*), i8* bitcast (void (%"class.blink::SVGElement"*, i64)* @_ZN5blink10SVGElement15WillRecalcStyleENS_17StyleRecalcChangeE to i8*), i8* bitcast (void (%"class.blink::Element"*, i64)* @_ZN5blink7Element14DidRecalcStyleENS_17StyleRecalcChangeE to i8*), i8* bitcast (void ()* @_ZN5blink10SVGElement26CustomStyleForLayoutObjectERKNS_18StyleRecalcContextE to i8*), i8* bitcast (i32 (%"class.blink::Element"*)* @_ZNK5blink7Element16GetNamedItemTypeEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element16IsFocusableStyleEv to i8*), i8* bitcast (void (%"class.blink::Element"*)* @_ZN5blink7Element22ParserDidSetAttributesEv to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element23AreAuthorShadowsAllowedEv to i8*), i8* bitcast (void (%"class.blink::Element"*, %"class.blink::ShadowRoot"*)* @_ZN5blink7Element25DidAddUserAgentShadowRootERNS_10ShadowRootE to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element31AlwaysCreateUserAgentShadowRootEv to i8*), i8* bitcast (i32 (%"class.blink::Element"*)* @_ZNK5blink7Element15DefaultTabIndexEv to i8*), i8* bitcast (%"class.blink::Element"* (%"class.blink::Element"*, %"class.blink::Document"*)* @_ZNK5blink7Element33CloneWithoutAttributesAndChildrenERNS_8DocumentE to i8*), i8* bitcast (i1 (%"class.blink::Element"*)* @_ZNK5blink7Element27TypeShouldForceLegacyLayoutEv to i8*), i8* bitcast (void ()* @_ZNK5blink10SVGElement29LocalCoordinateSpaceTransformENS0_8CTMScopeE to i8*), i8* bitcast (i1 (%"class.blink::SVGElement"*)* @_ZNK5blink10SVGElement20IsSVGGeometryElementEv to i8*), i8* bitcast (i1 (%"class.blink::SVGElement"*)* @_ZNK5blink10SVGElement20IsSVGGraphicsElementEv to i8*), i8* bitcast (i1 (%"class.blink::SVGElement"*)* @_ZNK5blink10SVGElement14IsFilterEffectEv to i8*), i8* bitcast (i1 (%"class.blink::SVGElement"*)* @_ZNK5blink10SVGElement13IsTextContentEv to i8*), i8* bitcast (i1 (%"class.blink::SVGElement"*)* @_ZNK5blink10SVGElement17IsTextPositioningEv to i8*), i8* bitcast (i1 (%"class.blink::SVGElement"*)* @_ZNK5blink10SVGElement22IsStructurallyExternalEv to i8*), i8* bitcast (i1 (%"class.blink::SVGAnimationElement"*)* @_ZNK5blink19SVGAnimationElement7IsValidEv to i8*), i8* bitcast (void (%"class.blink::SVGSMILElement"*, %"struct.blink::SVGElement::SvgAttributeChangedParams"*)* @_ZN5blink14SVGSMILElement19SvgAttributeChangedERKNS_10SVGElement25SvgAttributeChangedParamsE to i8*), i8* bitcast (%"class.blink::AffineTransform"* (%"class.blink::SVGElement"*)* @_ZN5blink10SVGElement22AnimateMotionTransformEv to i8*), i8* bitcast (i1 (%"class.blink::SVGElement"*)* @_ZN5blink10SVGElement27HaveLoadedRequiredResourcesEv to i8*), i8* bitcast (i1 (%"class.blink::SVGElement"*)* @_ZNK5blink10SVGElement22SelfHasRelativeLengthsEv to i8*), i8* bitcast (void (%"class.blink::SVGAnimationElement"*)* @_ZN5blink19SVGAnimationElement25WillChangeAnimationTargetEv to i8*), i8* bitcast (void (%"class.blink::SVGSMILElement"*)* @_ZN5blink14SVGSMILElement24DidChangeAnimationTargetEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.blink::SVGAnimationElement"*)* @_ZN5blink19SVGAnimationElement19UpdateAnimationModeEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (float (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)* @_ZN5blink19SVGAnimationElement17CalculateDistanceERKN3WTF6StringES4_ to i8*)], [3 x i8*] [i8* inttoptr (i64 -80 to i8*), i8* null, i8* bitcast (%"class.blink::Element"* (%"class.blink::Element"*)* @_ZThn80_N5blink7Element18GetAnimationTargetEv to i8*)], [3 x i8*] [i8* inttoptr (i64 -168 to i8*), i8* null, i8* bitcast (void (%"class.blink::SVGSMILElement"*, %"class.blink::Visitor"*)* @_ZThn168_NK5blink14SVGSMILElement5TraceEPNS_7VisitorE to i8*)] }, align 8
@_ZN5blink9svg_names11kValuesAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink9svg_names13kKeyTimesAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink9svg_names14kKeyPointsAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink9svg_names15kKeySplinesAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink9svg_names13kCalcModeAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink9svg_names9kFromAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink9svg_names7kToAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink9svg_names7kByAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@.str = private unnamed_addr constant [21 x i8] c"No current interval.\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"No simple duration defined.\00", align 1
@_ZZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE10s_discrete = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE10s_discrete = internal global i64 0, align 8
@_ZZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE8s_linear = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE8s_linear = internal global i64 0, align 8
@_ZZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE7s_paced = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE7s_paced = internal global i64 0, align 8
@_ZZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE8s_spline = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE8s_spline = internal global i64 0, align 8
@_ZZNK5blink19SVGAnimationElement10IsAdditiveEvE5s_sum = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZNK5blink19SVGAnimationElement10IsAdditiveEvE5s_sum = internal global i64 0, align 8
@_ZN5blink9svg_names13kAdditiveAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZZNK5blink19SVGAnimationElement13IsAccumulatedEvE5s_sum = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZNK5blink19SVGAnimationElement13IsAccumulatedEvE5s_sum = internal global i64 0, align 8
@_ZN5blink9svg_names15kAccumulateAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN3WTF14g_empty_stringE = external local_unnamed_addr constant %"class.WTF::String"*, align 8
@.str.2 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.3 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN3gfx11CubicBezierEEEPKcv = private unnamed_addr constant [64 x i8] c"const char *WTF::GetStringWithTypeName() [T = gfx::CubicBezier]\00", align 1
@.str.4 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@.str.8 = private unnamed_addr constant [38 x i8] c"!is_inf() || (delta_ == other.delta_)\00", align 1
@_ZN3WTF11g_null_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink19SVGAnimationElement18wrapper_type_info_E = external local_unnamed_addr constant %"struct.blink::WrapperTypeInfo"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIfEEPKcv = private unnamed_addr constant [53 x i8] c"const char *WTF::GetStringWithTypeName() [T = float]\00", align 1
@_ZN5blink9svg_names17kAnimateMotionTagE = external local_unnamed_addr constant %"class.blink::SVGQualifiedName"*, align 8
@.str.10 = private unnamed_addr constant [9 x i8] c"discrete\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"linear\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"paced\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"spline\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"sum\00", align 1
@_ZN5blink9svg_names11kAnimateTagE = external local_unnamed_addr constant %"class.blink::SVGQualifiedName"*, align 8
@_ZN5blink9svg_names20kAnimateTransformTagE = external local_unnamed_addr constant %"class.blink::SVGQualifiedName"*, align 8
@_ZN5blink9svg_names7kSetTagE = external local_unnamed_addr constant %"class.blink::SVGQualifiedName"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19SVGAnimationElementC2ERKNS_13QualifiedNameERNS_8DocumentE(%"class.blink::SVGAnimationElement"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.blink::Document"* dereferenceable(2848)) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.blink::SVGAnimationElement"* %0 to %"class.blink::SVGSMILElement"*
  tail call void @_ZN5blink14SVGSMILElementC2ERKNS_13QualifiedNameERNS_8DocumentE(%"class.blink::SVGSMILElement"* %4, %"class.blink::QualifiedName"* dereferenceable(8) %1, %"class.blink::Document"* dereferenceable(2848) %2) #9
  %5 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [181 x i8*], [3 x i8*], [3 x i8*] }, { [181 x i8*], [3 x i8*], [3 x i8*] }* @_ZTVN5blink19SVGAnimationElementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [181 x i8*], [3 x i8*], [3 x i8*] }, { [181 x i8*], [3 x i8*], [3 x i8*] }* @_ZTVN5blink19SVGAnimationElementE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [181 x i8*], [3 x i8*], [3 x i8*] }, { [181 x i8*], [3 x i8*], [3 x i8*] }* @_ZTVN5blink19SVGAnimationElementE, i64 0, inrange i32 2, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 1
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 2
  store i8 0, i8* %9, align 4
  %10 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 4
  %11 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 11
  %12 = bitcast %"class.WTF::Vector.57"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 96, i1 false)
  store i32 1, i32* %11, align 8
  %13 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 12
  store i32 0, i32* %13, align 4
  %14 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %2, i64 0, i32 2
  %15 = bitcast %"class.blink::UseCounter"* %14 to void (%"class.blink::UseCounter"*, i32)***
  %16 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %16, i64 3
  %18 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %17, align 8
  tail call void %18(%"class.blink::UseCounter"* %14, i32 90) #9
  ret void
}

declare void @_ZN5blink14SVGSMILElementC2ERKNS_13QualifiedNameERNS_8DocumentE(%"class.blink::SVGSMILElement"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.blink::Document"* dereferenceable(2848)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink19SVGAnimationElement11ParseValuesERKN3WTF6StringERNS1_6VectorIS2_Lj0ENS1_18PartitionAllocatorEEE(%"class.WTF::String"* dereferenceable(8), %"class.WTF::Vector.57"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::Vector.57", align 8
  %4 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %1, i64 0, i32 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %42, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %1, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %38, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %1, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.WTF::String"*, %"class.WTF::String"** %12, align 8
  %14 = zext i32 %9 to i64
  %15 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %13, i64 %14
  br label %16

16:                                               ; preds = %34, %11
  %17 = phi %"class.WTF::String"* [ %35, %34 ], [ %13, %11 ]
  %18 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %17, i64 0, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %34, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  br i1 %25, label %28, label %30

28:                                               ; preds = %21
  %29 = add i32 %27, -1
  store i32 %29, i32* %26, align 4
  br label %30

30:                                               ; preds = %28, %21
  %31 = phi i32 [ %29, %28 ], [ %27, %21 ]
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %30
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %19) #9
  br label %34

34:                                               ; preds = %33, %30, %16
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %17, i64 1
  %36 = icmp eq %"class.WTF::String"* %35, %15
  br i1 %36, label %37, label %16

37:                                               ; preds = %34
  store i32 0, i32* %8, align 4
  br label %38

38:                                               ; preds = %37, %7
  %39 = bitcast %"class.WTF::Vector.57"* %1 to i8**
  %40 = load i8*, i8** %39, align 8
  %41 = bitcast %"class.WTF::Vector.57"* %1 to i64*
  store atomic i64 0, i64* %41 monotonic, align 8
  store i32 0, i32* %4, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %40) #9
  br label %42

42:                                               ; preds = %2, %38
  %43 = bitcast %"class.WTF::Vector.57"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %43) #9
  %44 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %3, i64 0, i32 0, i32 0, i32 0
  %45 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %3, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %43, i8 0, i64 16, i1 false) #9
  call void @_ZNK3WTF6String5SplitEDsbRNS_6VectorIS0_Lj0ENS_18PartitionAllocatorEEE(%"class.WTF::String"* %0, i16 zeroext 59, i1 zeroext true, %"class.WTF::Vector.57"* nonnull dereferenceable(16) %3) #9
  %46 = load i32, i32* %45, align 4
  %47 = add i32 %46, -1
  %48 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %1, i64 0, i32 0, i32 0, i32 2
  %49 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %1, i64 0, i32 0, i32 0, i32 0
  br label %50

50:                                               ; preds = %42, %117
  %51 = phi i32 [ 0, %42 ], [ %118, %117 ]
  %52 = call dereferenceable(8) %"class.WTF::String"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.57"* nonnull %3, i32 %51) #9
  %53 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String15StripWhiteSpaceEPFbDsE(%"class.WTF::String"* %52, i1 (i16)* nonnull @_ZN5blink11IsHTMLSpaceIDsEEbT_) #9
  %54 = ptrtoint %"class.WTF::StringImpl"* %53 to i64
  %55 = call dereferenceable(8) %"class.WTF::String"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.57"* nonnull %3, i32 %51) #9
  %56 = bitcast %"class.WTF::String"* %55 to i64*
  %57 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %55, i64 0, i32 0, i32 0
  %58 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %57, align 8
  store i64 %54, i64* %56, align 8
  %59 = icmp eq %"class.WTF::StringImpl"* %58, null
  br i1 %59, label %73, label %60

60:                                               ; preds = %50
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %58, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load atomic i32, i32* %61 monotonic, align 4
  %63 = and i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %58, i64 0, i32 0
  %66 = load i32, i32* %65, align 4
  br i1 %64, label %67, label %69

67:                                               ; preds = %60
  %68 = add i32 %66, -1
  store i32 %68, i32* %65, align 4
  br label %69

69:                                               ; preds = %67, %60
  %70 = phi i32 [ %68, %67 ], [ %66, %60 ]
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %73

72:                                               ; preds = %69
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %58) #9
  br label %73

73:                                               ; preds = %72, %69, %50
  %74 = call dereferenceable(8) %"class.WTF::String"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.57"* nonnull %3, i32 %51) #9
  %75 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %74, i64 0, i32 0, i32 0
  %76 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %75, align 8
  %77 = icmp eq %"class.WTF::StringImpl"* %76, null
  br i1 %77, label %82, label %78

78:                                               ; preds = %73
  %79 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %76, i64 0, i32 1
  %80 = load i32, i32* %79, align 4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %84

82:                                               ; preds = %73, %78
  %83 = icmp ult i32 %51, %47
  br i1 %83, label %120, label %117

84:                                               ; preds = %78
  %85 = call dereferenceable(8) %"class.WTF::String"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.57"* nonnull %3, i32 %51) #9
  %86 = load i32, i32* %48, align 4
  %87 = load i32, i32* %4, align 8
  %88 = icmp eq i32 %86, %87
  br i1 %88, label %116, label %89, !prof !2

89:                                               ; preds = %84
  %90 = load %"class.WTF::String"*, %"class.WTF::String"** %49, align 8
  %91 = zext i32 %86 to i64
  %92 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %85, i64 0, i32 0, i32 0
  %93 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %92, align 8
  %94 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %90, i64 %91, i32 0, i32 0
  store %"class.WTF::StringImpl"* %93, %"class.WTF::StringImpl"** %94, align 8
  %95 = icmp eq %"class.WTF::StringImpl"* %93, null
  br i1 %95, label %113, label %96

96:                                               ; preds = %89
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %93, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %98 = load atomic i32, i32* %97 monotonic, align 4
  %99 = and i32 %98, 2
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %113

101:                                              ; preds = %96
  %102 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %93, i64 0, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = zext i32 %103 to i33
  %105 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %104, i33 1) #9
  %106 = extractvalue { i33, i1 } %105, 1
  %107 = extractvalue { i33, i1 } %105, 0
  %108 = icmp slt i33 %107, 0
  %109 = or i1 %106, %108
  br i1 %109, label %110, label %111, !prof !2

110:                                              ; preds = %101
  call void @llvm.trap() #9
  unreachable

111:                                              ; preds = %101
  %112 = trunc i33 %107 to i32
  store i32 %112, i32* %102, align 4
  br label %113

113:                                              ; preds = %111, %96, %89
  %114 = load i32, i32* %48, align 4
  %115 = add i32 %114, 1
  store i32 %115, i32* %48, align 4
  br label %117

116:                                              ; preds = %84
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS1_EEvOT_(%"class.WTF::Vector.57"* %1, %"class.WTF::String"* dereferenceable(8) %85) #9
  br label %117

117:                                              ; preds = %116, %113, %82
  %118 = add i32 %51, 1
  %119 = icmp ugt i32 %118, %47
  br i1 %119, label %156, label %50

120:                                              ; preds = %82
  %121 = load i32, i32* %4, align 8
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %156, label %123

123:                                              ; preds = %120
  %124 = load i32, i32* %48, align 4
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %152, label %126

126:                                              ; preds = %123
  %127 = load %"class.WTF::String"*, %"class.WTF::String"** %49, align 8
  %128 = zext i32 %124 to i64
  %129 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %127, i64 %128
  br label %130

130:                                              ; preds = %148, %126
  %131 = phi %"class.WTF::String"* [ %149, %148 ], [ %127, %126 ]
  %132 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %131, i64 0, i32 0, i32 0
  %133 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %132, align 8
  %134 = icmp eq %"class.WTF::StringImpl"* %133, null
  br i1 %134, label %148, label %135

135:                                              ; preds = %130
  %136 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %133, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %137 = load atomic i32, i32* %136 monotonic, align 4
  %138 = and i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %133, i64 0, i32 0
  %141 = load i32, i32* %140, align 4
  br i1 %139, label %142, label %144

142:                                              ; preds = %135
  %143 = add i32 %141, -1
  store i32 %143, i32* %140, align 4
  br label %144

144:                                              ; preds = %142, %135
  %145 = phi i32 [ %143, %142 ], [ %141, %135 ]
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %148

147:                                              ; preds = %144
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %133) #9
  br label %148

148:                                              ; preds = %147, %144, %130
  %149 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %131, i64 1
  %150 = icmp eq %"class.WTF::String"* %149, %129
  br i1 %150, label %151, label %130

151:                                              ; preds = %148
  store i32 0, i32* %48, align 4
  br label %152

152:                                              ; preds = %151, %123
  %153 = bitcast %"class.WTF::Vector.57"* %1 to i8**
  %154 = load i8*, i8** %153, align 8
  %155 = bitcast %"class.WTF::Vector.57"* %1 to i64*
  store atomic i64 0, i64* %155 monotonic, align 8
  store i32 0, i32* %4, align 8
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %154) #9
  br label %156

156:                                              ; preds = %117, %152, %120
  %157 = phi i1 [ false, %120 ], [ false, %152 ], [ true, %117 ]
  %158 = load %"class.WTF::String"*, %"class.WTF::String"** %44, align 8
  %159 = icmp eq %"class.WTF::String"* %158, null
  br i1 %159, label %193, label %160, !prof !3

160:                                              ; preds = %156
  %161 = bitcast %"class.WTF::String"* %158 to i8*
  %162 = load i32, i32* %45, align 4
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %191, label %164, !prof !2

164:                                              ; preds = %160
  %165 = zext i32 %162 to i64
  %166 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %158, i64 %165
  br label %167

167:                                              ; preds = %185, %164
  %168 = phi %"class.WTF::String"* [ %186, %185 ], [ %158, %164 ]
  %169 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %168, i64 0, i32 0, i32 0
  %170 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %169, align 8
  %171 = icmp eq %"class.WTF::StringImpl"* %170, null
  br i1 %171, label %185, label %172

172:                                              ; preds = %167
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %170, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %174 = load atomic i32, i32* %173 monotonic, align 4
  %175 = and i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %170, i64 0, i32 0
  %178 = load i32, i32* %177, align 4
  br i1 %176, label %179, label %181

179:                                              ; preds = %172
  %180 = add i32 %178, -1
  store i32 %180, i32* %177, align 4
  br label %181

181:                                              ; preds = %179, %172
  %182 = phi i32 [ %180, %179 ], [ %178, %172 ]
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %185

184:                                              ; preds = %181
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %170) #9
  br label %185

185:                                              ; preds = %184, %181, %167
  %186 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %168, i64 1
  %187 = icmp eq %"class.WTF::String"* %186, %166
  br i1 %187, label %188, label %167

188:                                              ; preds = %185
  store i32 0, i32* %45, align 4
  %189 = bitcast %"class.WTF::Vector.57"* %3 to i8**
  %190 = load i8*, i8** %189, align 8
  br label %191

191:                                              ; preds = %188, %160
  %192 = phi i8* [ %190, %188 ], [ %161, %160 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %192) #9
  store %"class.WTF::String"* null, %"class.WTF::String"** %44, align 8
  br label %193

193:                                              ; preds = %156, %191
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %43) #9
  ret i1 %157
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZNK3WTF6String5SplitEDsbRNS_6VectorIS0_Lj0ENS_18PartitionAllocatorEEE(%"class.WTF::String"*, i16 zeroext, i1 zeroext, %"class.WTF::Vector.57"* dereferenceable(16)) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String15StripWhiteSpaceEPFbDsE(%"class.WTF::String"*, i1 (i16)*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink11IsHTMLSpaceIDsEEbT_(i16 zeroext) #3 comdat {
  %2 = icmp ult i16 %0, 33
  br i1 %2, label %3, label %11

3:                                                ; preds = %1
  %4 = add i16 %0, -9
  %5 = icmp ult i16 %4, 24
  br i1 %5, label %6, label %11

6:                                                ; preds = %3
  %7 = zext i16 %4 to i24
  %8 = lshr i24 -8388581, %7
  %9 = and i24 %8, 1
  %10 = icmp ne i24 %9, 0
  ret i1 %10

11:                                               ; preds = %3, %1
  ret i1 false
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19SVGAnimationElement14ParseAttributeERKNS_7Element27AttributeModificationParamsE(%"class.blink::SVGAnimationElement"*, %"struct.blink::Element::AttributeModificationParams"* dereferenceable(32)) unnamed_addr #0 align 2 {
  %3 = alloca i8*, align 8
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca %"class.gfx::CubicBezier", align 8
  %9 = alloca i16*, align 8
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca %"class.gfx::CubicBezier", align 8
  %15 = getelementptr inbounds %"struct.blink::Element::AttributeModificationParams", %"struct.blink::Element::AttributeModificationParams"* %1, i64 0, i32 0
  %16 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** %15, align 8
  %17 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names11kValuesAttrE, align 8
  %18 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %16, i64 0, i32 0, i32 0
  %19 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %18, align 8
  %20 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %17, i64 0, i32 0, i32 0
  %21 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %20, align 8
  %22 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %19, %21
  br i1 %22, label %23, label %75

23:                                               ; preds = %2
  %24 = getelementptr inbounds %"struct.blink::Element::AttributeModificationParams", %"struct.blink::Element::AttributeModificationParams"* %1, i64 0, i32 2
  %25 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %24, align 8
  %26 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %25, i64 0, i32 0
  %27 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 4
  %28 = tail call zeroext i1 @_ZN5blink19SVGAnimationElement11ParseValuesERKN3WTF6StringERNS1_6VectorIS2_Lj0ENS1_18PartitionAllocatorEEE(%"class.WTF::String"* dereferenceable(8) %26, %"class.WTF::Vector.57"* dereferenceable(16) %27)
  br i1 %28, label %32, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0
  %31 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %24, align 8
  tail call void @_ZN5blink10SVGElement27ReportAttributeParsingErrorENS_15SVGParsingErrorERKNS_13QualifiedNameERKN3WTF12AtomicStringE(%"class.blink::SVGElement"* %30, i32 17, %"class.blink::QualifiedName"* dereferenceable(8) %16, %"class.WTF::AtomicString"* dereferenceable(8) %31) #9
  br label %32

32:                                               ; preds = %29, %23
  %33 = bitcast %"class.blink::SVGAnimationElement"* %0 to void (%"class.blink::SVGAnimationElement"*)***
  %34 = load void (%"class.blink::SVGAnimationElement"*)**, void (%"class.blink::SVGAnimationElement"*)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.blink::SVGAnimationElement"*)*, void (%"class.blink::SVGAnimationElement"*)** %34, i64 172
  %36 = load void (%"class.blink::SVGAnimationElement"*)*, void (%"class.blink::SVGAnimationElement"*)** %35, align 8
  tail call void %36(%"class.blink::SVGAnimationElement"* %0) #9
  %37 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 1
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 9
  %39 = bitcast %"class.WTF::String"* %38 to i64*
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %38, i64 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  store i64 0, i64* %39, align 8
  %42 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %42, label %56, label %43

43:                                               ; preds = %32
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load atomic i32, i32* %44 monotonic, align 4
  %46 = and i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %49 = load i32, i32* %48, align 4
  br i1 %47, label %50, label %52

50:                                               ; preds = %43
  %51 = add i32 %49, -1
  store i32 %51, i32* %48, align 4
  br label %52

52:                                               ; preds = %50, %43
  %53 = phi i32 [ %51, %50 ], [ %49, %43 ]
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %56

55:                                               ; preds = %52
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %41) #9
  br label %56

56:                                               ; preds = %55, %52, %32
  %57 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 10
  %58 = bitcast %"class.WTF::String"* %57 to i64*
  %59 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %57, i64 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  store i64 0, i64* %58, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %620, label %62

62:                                               ; preds = %56
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %68 = load i32, i32* %67, align 4
  br i1 %66, label %69, label %71

69:                                               ; preds = %62
  %70 = add i32 %68, -1
  store i32 %70, i32* %67, align 4
  br label %71

71:                                               ; preds = %69, %62
  %72 = phi i32 [ %70, %69 ], [ %68, %62 ]
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %620

74:                                               ; preds = %71
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #9
  br label %620

75:                                               ; preds = %2
  %76 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names13kKeyTimesAttrE, align 8
  %77 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %76, i64 0, i32 0, i32 0
  %78 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %77, align 8
  %79 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %19, %78
  br i1 %79, label %80, label %128

80:                                               ; preds = %75
  %81 = getelementptr inbounds %"struct.blink::Element::AttributeModificationParams", %"struct.blink::Element::AttributeModificationParams"* %1, i64 0, i32 2
  %82 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %81, align 8
  %83 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %82, i64 0, i32 0
  %84 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 5
  %85 = tail call fastcc zeroext i1 @_ZN5blinkL13ParseKeyTimesERKN3WTF6StringERNS0_6VectorIfLj0ENS0_18PartitionAllocatorEEEb(%"class.WTF::String"* dereferenceable(8) %83, %"class.WTF::Vector.62"* dereferenceable(16) %84, i1 zeroext true)
  br i1 %85, label %89, label %86

86:                                               ; preds = %80
  %87 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0
  %88 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %81, align 8
  tail call void @_ZN5blink10SVGElement27ReportAttributeParsingErrorENS_15SVGParsingErrorERKNS_13QualifiedNameERKN3WTF12AtomicStringE(%"class.blink::SVGElement"* %87, i32 17, %"class.blink::QualifiedName"* dereferenceable(8) %16, %"class.WTF::AtomicString"* dereferenceable(8) %88) #9
  br label %89

89:                                               ; preds = %86, %80
  %90 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 1
  store i8 0, i8* %90, align 1
  %91 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 9
  %92 = bitcast %"class.WTF::String"* %91 to i64*
  %93 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %91, i64 0, i32 0, i32 0
  %94 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %93, align 8
  store i64 0, i64* %92, align 8
  %95 = icmp eq %"class.WTF::StringImpl"* %94, null
  br i1 %95, label %109, label %96

96:                                               ; preds = %89
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %94, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %98 = load atomic i32, i32* %97 monotonic, align 4
  %99 = and i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %94, i64 0, i32 0
  %102 = load i32, i32* %101, align 4
  br i1 %100, label %103, label %105

103:                                              ; preds = %96
  %104 = add i32 %102, -1
  store i32 %104, i32* %101, align 4
  br label %105

105:                                              ; preds = %103, %96
  %106 = phi i32 [ %104, %103 ], [ %102, %96 ]
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %109

108:                                              ; preds = %105
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %94) #9
  br label %109

109:                                              ; preds = %108, %105, %89
  %110 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 10
  %111 = bitcast %"class.WTF::String"* %110 to i64*
  %112 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %110, i64 0, i32 0, i32 0
  %113 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %112, align 8
  store i64 0, i64* %111, align 8
  %114 = icmp eq %"class.WTF::StringImpl"* %113, null
  br i1 %114, label %620, label %115

115:                                              ; preds = %109
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %117 = load atomic i32, i32* %116 monotonic, align 4
  %118 = and i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 0
  %121 = load i32, i32* %120, align 4
  br i1 %119, label %122, label %124

122:                                              ; preds = %115
  %123 = add i32 %121, -1
  store i32 %123, i32* %120, align 4
  br label %124

124:                                              ; preds = %122, %115
  %125 = phi i32 [ %123, %122 ], [ %121, %115 ]
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %620

127:                                              ; preds = %124
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %113) #9
  br label %620

128:                                              ; preds = %75
  %129 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names14kKeyPointsAttrE, align 8
  %130 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %130, align 8
  %132 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %19, %131
  br i1 %132, label %133, label %201

133:                                              ; preds = %128
  %134 = load %"class.blink::SVGQualifiedName"*, %"class.blink::SVGQualifiedName"** @_ZN5blink9svg_names17kAnimateMotionTagE, align 8
  %135 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %136 = icmp eq %"class.blink::SVGAnimationElement"* %0, null
  br i1 %136, label %162, label %137

137:                                              ; preds = %133
  %138 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %139 = load i32, i32* %138, align 8
  %140 = and i32 %139, 48
  %141 = icmp eq i32 %140, 32
  br i1 %141, label %142, label %162

142:                                              ; preds = %137
  %143 = getelementptr inbounds %"class.blink::SVGQualifiedName", %"class.blink::SVGQualifiedName"* %134, i64 0, i32 0, i32 0, i32 0
  %144 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %143, align 8
  %145 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %135, i64 1, i32 2
  %146 = bitcast %"class.blink::Member"* %145 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %147 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %146, align 8
  %148 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %147, i64 0, i32 3, i32 0, i32 0, i32 0
  %149 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %148, align 8
  %150 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %144, i64 0, i32 3, i32 0, i32 0, i32 0
  %151 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %150, align 8
  %152 = icmp eq %"class.WTF::StringImpl"* %149, %151
  br i1 %152, label %153, label %162

153:                                              ; preds = %142
  %154 = getelementptr inbounds %"struct.blink::Element::AttributeModificationParams", %"struct.blink::Element::AttributeModificationParams"* %1, i64 0, i32 2
  %155 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %154, align 8
  %156 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %155, i64 0, i32 0
  %157 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 7
  %158 = tail call fastcc zeroext i1 @_ZN5blinkL13ParseKeyTimesERKN3WTF6StringERNS0_6VectorIfLj0ENS0_18PartitionAllocatorEEEb(%"class.WTF::String"* dereferenceable(8) %156, %"class.WTF::Vector.62"* dereferenceable(16) %157, i1 zeroext false)
  br i1 %158, label %162, label %159

159:                                              ; preds = %153
  %160 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0
  %161 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %154, align 8
  tail call void @_ZN5blink10SVGElement27ReportAttributeParsingErrorENS_15SVGParsingErrorERKNS_13QualifiedNameERKN3WTF12AtomicStringE(%"class.blink::SVGElement"* %160, i32 17, %"class.blink::QualifiedName"* dereferenceable(8) %16, %"class.WTF::AtomicString"* dereferenceable(8) %161) #9
  br label %162

162:                                              ; preds = %133, %137, %153, %159, %142
  %163 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 1
  store i8 0, i8* %163, align 1
  %164 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 9
  %165 = bitcast %"class.WTF::String"* %164 to i64*
  %166 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %164, i64 0, i32 0, i32 0
  %167 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %166, align 8
  store i64 0, i64* %165, align 8
  %168 = icmp eq %"class.WTF::StringImpl"* %167, null
  br i1 %168, label %182, label %169

169:                                              ; preds = %162
  %170 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %167, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %171 = load atomic i32, i32* %170 monotonic, align 4
  %172 = and i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %167, i64 0, i32 0
  %175 = load i32, i32* %174, align 4
  br i1 %173, label %176, label %178

176:                                              ; preds = %169
  %177 = add i32 %175, -1
  store i32 %177, i32* %174, align 4
  br label %178

178:                                              ; preds = %176, %169
  %179 = phi i32 [ %177, %176 ], [ %175, %169 ]
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %181, label %182

181:                                              ; preds = %178
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %167) #9
  br label %182

182:                                              ; preds = %181, %178, %162
  %183 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 10
  %184 = bitcast %"class.WTF::String"* %183 to i64*
  %185 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %183, i64 0, i32 0, i32 0
  %186 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %185, align 8
  store i64 0, i64* %184, align 8
  %187 = icmp eq %"class.WTF::StringImpl"* %186, null
  br i1 %187, label %620, label %188

188:                                              ; preds = %182
  %189 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %186, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %190 = load atomic i32, i32* %189 monotonic, align 4
  %191 = and i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %186, i64 0, i32 0
  %194 = load i32, i32* %193, align 4
  br i1 %192, label %195, label %197

195:                                              ; preds = %188
  %196 = add i32 %194, -1
  store i32 %196, i32* %193, align 4
  br label %197

197:                                              ; preds = %195, %188
  %198 = phi i32 [ %196, %195 ], [ %194, %188 ]
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %620

200:                                              ; preds = %197
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %186) #9
  br label %620

201:                                              ; preds = %128
  %202 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names15kKeySplinesAttrE, align 8
  %203 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %202, i64 0, i32 0, i32 0
  %204 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %203, align 8
  %205 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %19, %204
  br i1 %205, label %206, label %514

206:                                              ; preds = %201
  %207 = getelementptr inbounds %"struct.blink::Element::AttributeModificationParams", %"struct.blink::Element::AttributeModificationParams"* %1, i64 0, i32 2
  %208 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %207, align 8
  %209 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 8
  %210 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 8, i32 0, i32 0, i32 1
  %211 = load i32, i32* %210, align 8
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %222, label %213

213:                                              ; preds = %206
  %214 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 8, i32 0, i32 0, i32 2
  %215 = load i32, i32* %214, align 4
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %218, label %217

217:                                              ; preds = %213
  store i32 0, i32* %214, align 4
  br label %218

218:                                              ; preds = %217, %213
  %219 = bitcast %"class.WTF::Vector.67"* %209 to i8**
  %220 = load i8*, i8** %219, align 8
  %221 = bitcast %"class.WTF::Vector.67"* %209 to i64*
  store atomic i64 0, i64* %221 monotonic, align 8
  store i32 0, i32* %210, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %220) #9
  br label %222

222:                                              ; preds = %218, %206
  %223 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %208, i64 0, i32 0, i32 0, i32 0
  %224 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %223, align 8
  %225 = icmp eq %"class.WTF::StringImpl"* %224, null
  br i1 %225, label %475, label %226

226:                                              ; preds = %222
  %227 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %224, i64 0, i32 1
  %228 = load i32, i32* %227, align 4
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %475, label %230

230:                                              ; preds = %226
  %231 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %224, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %232 = load atomic i32, i32* %231 monotonic, align 4
  %233 = and i32 %232, 1
  %234 = icmp eq i32 %233, 0
  %235 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %224, i64 1
  br i1 %234, label %348, label %236

236:                                              ; preds = %230
  %237 = bitcast %"class.WTF::StringImpl"* %235 to i8*
  %238 = zext i32 %228 to i64
  %239 = getelementptr inbounds i8, i8* %237, i64 %238
  %240 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %240) #9
  %241 = bitcast i8** %3 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %235, %"class.WTF::StringImpl"** %241, align 8
  br label %242

242:                                              ; preds = %247, %236
  %243 = phi i8* [ %248, %247 ], [ %237, %236 ]
  %244 = load i8, i8* %243, align 1
  %245 = icmp ult i8 %244, 33
  br i1 %245, label %246, label %251

246:                                              ; preds = %242
  switch i8 %244, label %251 [
    i8 32, label %247
    i8 10, label %247
    i8 9, label %247
    i8 13, label %247
    i8 12, label %247
  ]

247:                                              ; preds = %246, %246, %246, %246, %246
  %248 = getelementptr inbounds i8, i8* %243, i64 1
  store i8* %248, i8** %3, align 8
  %249 = icmp eq i8* %248, %239
  br i1 %249, label %250, label %242

250:                                              ; preds = %247
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %240) #9
  br label %475

251:                                              ; preds = %246, %242
  %252 = bitcast float* %4 to i8*
  %253 = bitcast float* %5 to i8*
  %254 = bitcast float* %6 to i8*
  %255 = bitcast float* %7 to i8*
  %256 = bitcast %"class.gfx::CubicBezier"* %8 to i8*
  %257 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 8, i32 0, i32 0, i32 2
  %258 = getelementptr inbounds %"class.WTF::Vector.67", %"class.WTF::Vector.67"* %209, i64 0, i32 0, i32 0, i32 0
  %259 = icmp ult i8* %243, %239
  br i1 %259, label %260, label %345

260:                                              ; preds = %251, %340
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %252) #9
  store float 0.000000e+00, float* %4, align 4
  %261 = call zeroext i1 @_ZN5blink11ParseNumberERPKhS1_RfNS_14WhitespaceModeE(i8** nonnull dereferenceable(8) %3, i8* %239, float* nonnull dereferenceable(4) %4, i32 3) #9
  br i1 %261, label %262, label %343

262:                                              ; preds = %260
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %253) #9
  store float 0.000000e+00, float* %5, align 4
  %263 = call zeroext i1 @_ZN5blink11ParseNumberERPKhS1_RfNS_14WhitespaceModeE(i8** nonnull dereferenceable(8) %3, i8* %239, float* nonnull dereferenceable(4) %5, i32 3) #9
  br i1 %263, label %265, label %264

264:                                              ; preds = %262
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %253) #9
  br label %343

265:                                              ; preds = %262
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %254) #9
  store float 0.000000e+00, float* %6, align 4
  %266 = call zeroext i1 @_ZN5blink11ParseNumberERPKhS1_RfNS_14WhitespaceModeE(i8** nonnull dereferenceable(8) %3, i8* %239, float* nonnull dereferenceable(4) %6, i32 3) #9
  br i1 %266, label %267, label %337

267:                                              ; preds = %265
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %255) #9
  store float 0.000000e+00, float* %7, align 4
  %268 = call zeroext i1 @_ZN5blink11ParseNumberERPKhS1_RfNS_14WhitespaceModeE(i8** nonnull dereferenceable(8) %3, i8* %239, float* nonnull dereferenceable(4) %7, i32 0) #9
  br i1 %268, label %269, label %335

269:                                              ; preds = %267
  %270 = load i8*, i8** %3, align 8
  %271 = icmp ult i8* %270, %239
  br i1 %271, label %272, label %280

272:                                              ; preds = %269, %277
  %273 = phi i8* [ %278, %277 ], [ %270, %269 ]
  %274 = load i8, i8* %273, align 1
  %275 = icmp ult i8 %274, 33
  br i1 %275, label %276, label %280

276:                                              ; preds = %272
  switch i8 %274, label %280 [
    i8 32, label %277
    i8 10, label %277
    i8 9, label %277
    i8 13, label %277
    i8 12, label %277
  ]

277:                                              ; preds = %276, %276, %276, %276, %276
  %278 = getelementptr inbounds i8, i8* %273, i64 1
  store i8* %278, i8** %3, align 8
  %279 = icmp eq i8* %278, %239
  br i1 %279, label %299, label %272

280:                                              ; preds = %276, %272, %269
  %281 = phi i8* [ %270, %269 ], [ %273, %272 ], [ %273, %276 ]
  %282 = icmp ult i8* %281, %239
  br i1 %282, label %283, label %288

283:                                              ; preds = %280
  %284 = load i8, i8* %281, align 1
  %285 = icmp eq i8 %284, 59
  br i1 %285, label %286, label %288

286:                                              ; preds = %283
  %287 = getelementptr inbounds i8, i8* %281, i64 1
  store i8* %287, i8** %3, align 8
  br label %288

288:                                              ; preds = %286, %283, %280
  %289 = phi i8* [ %287, %286 ], [ %281, %283 ], [ %281, %280 ]
  %290 = icmp ult i8* %289, %239
  br i1 %290, label %291, label %299

291:                                              ; preds = %288, %296
  %292 = phi i8* [ %297, %296 ], [ %289, %288 ]
  %293 = load i8, i8* %292, align 1
  %294 = icmp ult i8 %293, 33
  br i1 %294, label %295, label %299

295:                                              ; preds = %291
  switch i8 %293, label %299 [
    i8 32, label %296
    i8 10, label %296
    i8 9, label %296
    i8 13, label %296
    i8 12, label %296
  ]

296:                                              ; preds = %295, %295, %295, %295, %295
  %297 = getelementptr inbounds i8, i8* %292, i64 1
  store i8* %297, i8** %3, align 8
  %298 = icmp eq i8* %297, %239
  br i1 %298, label %299, label %291

299:                                              ; preds = %277, %296, %295, %291, %288
  %300 = load float, float* %4, align 4
  %301 = fcmp oge float %300, 0.000000e+00
  %302 = fcmp ole float %300, 1.000000e+00
  %303 = and i1 %301, %302
  br i1 %303, label %304, label %335

304:                                              ; preds = %299
  %305 = load float, float* %5, align 4
  %306 = fcmp oge float %305, 0.000000e+00
  %307 = fcmp ole float %305, 1.000000e+00
  %308 = and i1 %306, %307
  br i1 %308, label %309, label %335

309:                                              ; preds = %304
  %310 = load float, float* %6, align 4
  %311 = fcmp oge float %310, 0.000000e+00
  %312 = fcmp ole float %310, 1.000000e+00
  %313 = and i1 %311, %312
  br i1 %313, label %314, label %335

314:                                              ; preds = %309
  %315 = load float, float* %7, align 4
  %316 = fcmp oge float %315, 0.000000e+00
  %317 = fcmp ole float %315, 1.000000e+00
  %318 = and i1 %316, %317
  br i1 %318, label %319, label %335

319:                                              ; preds = %314
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %256) #9
  %320 = fpext float %300 to double
  %321 = fpext float %305 to double
  %322 = fpext float %310 to double
  %323 = fpext float %315 to double
  call void @_ZN3gfx11CubicBezierC1Edddd(%"class.gfx::CubicBezier"* nonnull %8, double %320, double %321, double %322, double %323) #9
  %324 = load i32, i32* %257, align 4
  %325 = load i32, i32* %210, align 8
  %326 = icmp eq i32 %324, %325
  br i1 %326, label %333, label %327, !prof !2

327:                                              ; preds = %319
  %328 = load %"class.gfx::CubicBezier"*, %"class.gfx::CubicBezier"** %258, align 8
  %329 = zext i32 %324 to i64
  %330 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %328, i64 %329
  call void @_ZN3gfx11CubicBezierC1ERKS0_(%"class.gfx::CubicBezier"* %330, %"class.gfx::CubicBezier"* nonnull dereferenceable(168) %8) #9
  %331 = load i32, i32* %257, align 4
  %332 = add i32 %331, 1
  store i32 %332, i32* %257, align 4
  br label %334

333:                                              ; preds = %319
  call void @_ZN3WTF6VectorIN3gfx11CubicBezierELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector.67"* %209, %"class.gfx::CubicBezier"* nonnull dereferenceable(168) %8) #9
  br label %334

334:                                              ; preds = %333, %327
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %256) #9
  br label %335

335:                                              ; preds = %334, %314, %309, %304, %299, %267
  %336 = phi i32 [ 0, %334 ], [ 1, %267 ], [ 1, %314 ], [ 1, %309 ], [ 1, %304 ], [ 1, %299 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %255) #9
  br label %337

337:                                              ; preds = %335, %265
  %338 = phi i32 [ %336, %335 ], [ 1, %265 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %254) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %253) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %252) #9
  %339 = icmp eq i32 %338, 0
  br i1 %339, label %340, label %344

340:                                              ; preds = %337
  %341 = load i8*, i8** %3, align 8
  %342 = icmp ult i8* %341, %239
  br i1 %342, label %260, label %345

343:                                              ; preds = %260, %264
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %252) #9
  br label %344

344:                                              ; preds = %337, %343
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %240) #9
  br label %460

345:                                              ; preds = %340, %251
  %346 = phi i8* [ %243, %251 ], [ %341, %340 ]
  %347 = icmp eq i8* %346, %239
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %240) #9
  br i1 %347, label %475, label %460

348:                                              ; preds = %230
  %349 = bitcast %"class.WTF::StringImpl"* %235 to i16*
  %350 = zext i32 %228 to i64
  %351 = getelementptr inbounds i16, i16* %349, i64 %350
  %352 = bitcast i16** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %352) #9
  %353 = bitcast i16** %9 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %235, %"class.WTF::StringImpl"** %353, align 8
  br label %354

354:                                              ; preds = %359, %348
  %355 = phi i16* [ %360, %359 ], [ %349, %348 ]
  %356 = load i16, i16* %355, align 2
  %357 = icmp ult i16 %356, 33
  br i1 %357, label %358, label %362

358:                                              ; preds = %354
  switch i16 %356, label %362 [
    i16 32, label %359
    i16 10, label %359
    i16 9, label %359
    i16 13, label %359
    i16 12, label %359
  ]

359:                                              ; preds = %358, %358, %358, %358, %358
  %360 = getelementptr inbounds i16, i16* %355, i64 1
  store i16* %360, i16** %9, align 8
  %361 = icmp ult i16* %360, %351
  br i1 %361, label %354, label %362

362:                                              ; preds = %359, %358, %354
  %363 = phi i16* [ %355, %354 ], [ %355, %358 ], [ %360, %359 ]
  %364 = bitcast float* %10 to i8*
  %365 = bitcast float* %11 to i8*
  %366 = bitcast float* %12 to i8*
  %367 = bitcast float* %13 to i8*
  %368 = bitcast %"class.gfx::CubicBezier"* %14 to i8*
  %369 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 8, i32 0, i32 0, i32 2
  %370 = getelementptr inbounds %"class.WTF::Vector.67", %"class.WTF::Vector.67"* %209, i64 0, i32 0, i32 0, i32 0
  %371 = icmp ult i16* %363, %351
  br i1 %371, label %372, label %457

372:                                              ; preds = %362, %452
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %364) #9
  store float 0.000000e+00, float* %10, align 4
  %373 = call zeroext i1 @_ZN5blink11ParseNumberERPKDsS1_RfNS_14WhitespaceModeE(i16** nonnull dereferenceable(8) %9, i16* %351, float* nonnull dereferenceable(4) %10, i32 3) #9
  br i1 %373, label %374, label %455

374:                                              ; preds = %372
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %365) #9
  store float 0.000000e+00, float* %11, align 4
  %375 = call zeroext i1 @_ZN5blink11ParseNumberERPKDsS1_RfNS_14WhitespaceModeE(i16** nonnull dereferenceable(8) %9, i16* %351, float* nonnull dereferenceable(4) %11, i32 3) #9
  br i1 %375, label %377, label %376

376:                                              ; preds = %374
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %365) #9
  br label %455

377:                                              ; preds = %374
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %366) #9
  store float 0.000000e+00, float* %12, align 4
  %378 = call zeroext i1 @_ZN5blink11ParseNumberERPKDsS1_RfNS_14WhitespaceModeE(i16** nonnull dereferenceable(8) %9, i16* %351, float* nonnull dereferenceable(4) %12, i32 3) #9
  br i1 %378, label %379, label %449

379:                                              ; preds = %377
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %367) #9
  store float 0.000000e+00, float* %13, align 4
  %380 = call zeroext i1 @_ZN5blink11ParseNumberERPKDsS1_RfNS_14WhitespaceModeE(i16** nonnull dereferenceable(8) %9, i16* %351, float* nonnull dereferenceable(4) %13, i32 0) #9
  br i1 %380, label %381, label %447

381:                                              ; preds = %379
  %382 = load i16*, i16** %9, align 8
  %383 = icmp ult i16* %382, %351
  br i1 %383, label %384, label %392

384:                                              ; preds = %381, %389
  %385 = phi i16* [ %390, %389 ], [ %382, %381 ]
  %386 = load i16, i16* %385, align 2
  %387 = icmp ult i16 %386, 33
  br i1 %387, label %388, label %392

388:                                              ; preds = %384
  switch i16 %386, label %392 [
    i16 32, label %389
    i16 10, label %389
    i16 9, label %389
    i16 13, label %389
    i16 12, label %389
  ]

389:                                              ; preds = %388, %388, %388, %388, %388
  %390 = getelementptr inbounds i16, i16* %385, i64 1
  store i16* %390, i16** %9, align 8
  %391 = icmp ult i16* %390, %351
  br i1 %391, label %384, label %392

392:                                              ; preds = %389, %388, %384, %381
  %393 = phi i16* [ %382, %381 ], [ %385, %384 ], [ %385, %388 ], [ %390, %389 ]
  %394 = icmp ult i16* %393, %351
  br i1 %394, label %395, label %400

395:                                              ; preds = %392
  %396 = load i16, i16* %393, align 2
  %397 = icmp eq i16 %396, 59
  br i1 %397, label %398, label %400

398:                                              ; preds = %395
  %399 = getelementptr inbounds i16, i16* %393, i64 1
  store i16* %399, i16** %9, align 8
  br label %400

400:                                              ; preds = %398, %395, %392
  %401 = phi i16* [ %399, %398 ], [ %393, %395 ], [ %393, %392 ]
  %402 = icmp ult i16* %401, %351
  br i1 %402, label %403, label %411

403:                                              ; preds = %400, %408
  %404 = phi i16* [ %409, %408 ], [ %401, %400 ]
  %405 = load i16, i16* %404, align 2
  %406 = icmp ult i16 %405, 33
  br i1 %406, label %407, label %411

407:                                              ; preds = %403
  switch i16 %405, label %411 [
    i16 32, label %408
    i16 10, label %408
    i16 9, label %408
    i16 13, label %408
    i16 12, label %408
  ]

408:                                              ; preds = %407, %407, %407, %407, %407
  %409 = getelementptr inbounds i16, i16* %404, i64 1
  store i16* %409, i16** %9, align 8
  %410 = icmp ult i16* %409, %351
  br i1 %410, label %403, label %411

411:                                              ; preds = %408, %407, %403, %400
  %412 = load float, float* %10, align 4
  %413 = fcmp oge float %412, 0.000000e+00
  %414 = fcmp ole float %412, 1.000000e+00
  %415 = and i1 %413, %414
  br i1 %415, label %416, label %447

416:                                              ; preds = %411
  %417 = load float, float* %11, align 4
  %418 = fcmp oge float %417, 0.000000e+00
  %419 = fcmp ole float %417, 1.000000e+00
  %420 = and i1 %418, %419
  br i1 %420, label %421, label %447

421:                                              ; preds = %416
  %422 = load float, float* %12, align 4
  %423 = fcmp oge float %422, 0.000000e+00
  %424 = fcmp ole float %422, 1.000000e+00
  %425 = and i1 %423, %424
  br i1 %425, label %426, label %447

426:                                              ; preds = %421
  %427 = load float, float* %13, align 4
  %428 = fcmp oge float %427, 0.000000e+00
  %429 = fcmp ole float %427, 1.000000e+00
  %430 = and i1 %428, %429
  br i1 %430, label %431, label %447

431:                                              ; preds = %426
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %368) #9
  %432 = fpext float %412 to double
  %433 = fpext float %417 to double
  %434 = fpext float %422 to double
  %435 = fpext float %427 to double
  call void @_ZN3gfx11CubicBezierC1Edddd(%"class.gfx::CubicBezier"* nonnull %14, double %432, double %433, double %434, double %435) #9
  %436 = load i32, i32* %369, align 4
  %437 = load i32, i32* %210, align 8
  %438 = icmp eq i32 %436, %437
  br i1 %438, label %445, label %439, !prof !2

439:                                              ; preds = %431
  %440 = load %"class.gfx::CubicBezier"*, %"class.gfx::CubicBezier"** %370, align 8
  %441 = zext i32 %436 to i64
  %442 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %440, i64 %441
  call void @_ZN3gfx11CubicBezierC1ERKS0_(%"class.gfx::CubicBezier"* %442, %"class.gfx::CubicBezier"* nonnull dereferenceable(168) %14) #9
  %443 = load i32, i32* %369, align 4
  %444 = add i32 %443, 1
  store i32 %444, i32* %369, align 4
  br label %446

445:                                              ; preds = %431
  call void @_ZN3WTF6VectorIN3gfx11CubicBezierELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector.67"* %209, %"class.gfx::CubicBezier"* nonnull dereferenceable(168) %14) #9
  br label %446

446:                                              ; preds = %445, %439
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %368) #9
  br label %447

447:                                              ; preds = %446, %426, %421, %416, %411, %379
  %448 = phi i32 [ 0, %446 ], [ 1, %379 ], [ 1, %426 ], [ 1, %421 ], [ 1, %416 ], [ 1, %411 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %367) #9
  br label %449

449:                                              ; preds = %447, %377
  %450 = phi i32 [ %448, %447 ], [ 1, %377 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %366) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %365) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %364) #9
  %451 = icmp eq i32 %450, 0
  br i1 %451, label %452, label %456

452:                                              ; preds = %449
  %453 = load i16*, i16** %9, align 8
  %454 = icmp ult i16* %453, %351
  br i1 %454, label %372, label %457

455:                                              ; preds = %372, %376
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %364) #9
  br label %456

456:                                              ; preds = %449, %455
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %352) #9
  br label %460

457:                                              ; preds = %452, %362
  %458 = phi i16* [ %363, %362 ], [ %453, %452 ]
  %459 = icmp eq i16* %458, %351
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %352) #9
  br i1 %459, label %475, label %460

460:                                              ; preds = %457, %456, %345, %344
  %461 = load i32, i32* %210, align 8
  %462 = icmp eq i32 %461, 0
  br i1 %462, label %472, label %463

463:                                              ; preds = %460
  %464 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 8, i32 0, i32 0, i32 2
  %465 = load i32, i32* %464, align 4
  %466 = icmp eq i32 %465, 0
  br i1 %466, label %468, label %467

467:                                              ; preds = %463
  store i32 0, i32* %464, align 4
  br label %468

468:                                              ; preds = %467, %463
  %469 = bitcast %"class.WTF::Vector.67"* %209 to i8**
  %470 = load i8*, i8** %469, align 8
  %471 = bitcast %"class.WTF::Vector.67"* %209 to i64*
  store atomic i64 0, i64* %471 monotonic, align 8
  store i32 0, i32* %210, align 8
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %470) #9
  br label %472

472:                                              ; preds = %468, %460
  %473 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0
  %474 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %207, align 8
  call void @_ZN5blink10SVGElement27ReportAttributeParsingErrorENS_15SVGParsingErrorERKNS_13QualifiedNameERKN3WTF12AtomicStringE(%"class.blink::SVGElement"* %473, i32 17, %"class.blink::QualifiedName"* dereferenceable(8) %16, %"class.WTF::AtomicString"* dereferenceable(8) %474) #9
  br label %475

475:                                              ; preds = %250, %222, %345, %457, %226, %472
  %476 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 1
  store i8 0, i8* %476, align 1
  %477 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 9
  %478 = bitcast %"class.WTF::String"* %477 to i64*
  %479 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %477, i64 0, i32 0, i32 0
  %480 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %479, align 8
  store i64 0, i64* %478, align 8
  %481 = icmp eq %"class.WTF::StringImpl"* %480, null
  br i1 %481, label %495, label %482

482:                                              ; preds = %475
  %483 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %480, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %484 = load atomic i32, i32* %483 monotonic, align 4
  %485 = and i32 %484, 2
  %486 = icmp eq i32 %485, 0
  %487 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %480, i64 0, i32 0
  %488 = load i32, i32* %487, align 4
  br i1 %486, label %489, label %491

489:                                              ; preds = %482
  %490 = add i32 %488, -1
  store i32 %490, i32* %487, align 4
  br label %491

491:                                              ; preds = %489, %482
  %492 = phi i32 [ %490, %489 ], [ %488, %482 ]
  %493 = icmp eq i32 %492, 0
  br i1 %493, label %494, label %495

494:                                              ; preds = %491
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %480) #9
  br label %495

495:                                              ; preds = %494, %491, %475
  %496 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 10
  %497 = bitcast %"class.WTF::String"* %496 to i64*
  %498 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %496, i64 0, i32 0, i32 0
  %499 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %498, align 8
  store i64 0, i64* %497, align 8
  %500 = icmp eq %"class.WTF::StringImpl"* %499, null
  br i1 %500, label %620, label %501

501:                                              ; preds = %495
  %502 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %499, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %503 = load atomic i32, i32* %502 monotonic, align 4
  %504 = and i32 %503, 2
  %505 = icmp eq i32 %504, 0
  %506 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %499, i64 0, i32 0
  %507 = load i32, i32* %506, align 4
  br i1 %505, label %508, label %510

508:                                              ; preds = %501
  %509 = add i32 %507, -1
  store i32 %509, i32* %506, align 4
  br label %510

510:                                              ; preds = %508, %501
  %511 = phi i32 [ %509, %508 ], [ %507, %501 ]
  %512 = icmp eq i32 %511, 0
  br i1 %512, label %513, label %620

513:                                              ; preds = %510
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %499) #9
  br label %620

514:                                              ; preds = %201
  %515 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names13kCalcModeAttrE, align 8
  %516 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %515, i64 0, i32 0, i32 0
  %517 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %516, align 8
  %518 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %19, %517
  br i1 %518, label %519, label %560

519:                                              ; preds = %514
  %520 = getelementptr inbounds %"struct.blink::Element::AttributeModificationParams", %"struct.blink::Element::AttributeModificationParams"* %1, i64 0, i32 2
  %521 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %520, align 8
  tail call void @_ZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringE(%"class.blink::SVGAnimationElement"* %0, %"class.WTF::AtomicString"* dereferenceable(8) %521)
  %522 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 1
  store i8 0, i8* %522, align 1
  %523 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 9
  %524 = bitcast %"class.WTF::String"* %523 to i64*
  %525 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %523, i64 0, i32 0, i32 0
  %526 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %525, align 8
  store i64 0, i64* %524, align 8
  %527 = icmp eq %"class.WTF::StringImpl"* %526, null
  br i1 %527, label %541, label %528

528:                                              ; preds = %519
  %529 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %526, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %530 = load atomic i32, i32* %529 monotonic, align 4
  %531 = and i32 %530, 2
  %532 = icmp eq i32 %531, 0
  %533 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %526, i64 0, i32 0
  %534 = load i32, i32* %533, align 4
  br i1 %532, label %535, label %537

535:                                              ; preds = %528
  %536 = add i32 %534, -1
  store i32 %536, i32* %533, align 4
  br label %537

537:                                              ; preds = %535, %528
  %538 = phi i32 [ %536, %535 ], [ %534, %528 ]
  %539 = icmp eq i32 %538, 0
  br i1 %539, label %540, label %541

540:                                              ; preds = %537
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %526) #9
  br label %541

541:                                              ; preds = %540, %537, %519
  %542 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 10
  %543 = bitcast %"class.WTF::String"* %542 to i64*
  %544 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %542, i64 0, i32 0, i32 0
  %545 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %544, align 8
  store i64 0, i64* %543, align 8
  %546 = icmp eq %"class.WTF::StringImpl"* %545, null
  br i1 %546, label %620, label %547

547:                                              ; preds = %541
  %548 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %545, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %549 = load atomic i32, i32* %548 monotonic, align 4
  %550 = and i32 %549, 2
  %551 = icmp eq i32 %550, 0
  %552 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %545, i64 0, i32 0
  %553 = load i32, i32* %552, align 4
  br i1 %551, label %554, label %556

554:                                              ; preds = %547
  %555 = add i32 %553, -1
  store i32 %555, i32* %552, align 4
  br label %556

556:                                              ; preds = %554, %547
  %557 = phi i32 [ %555, %554 ], [ %553, %547 ]
  %558 = icmp eq i32 %557, 0
  br i1 %558, label %559, label %620

559:                                              ; preds = %556
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %545) #9
  br label %620

560:                                              ; preds = %514
  %561 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names9kFromAttrE, align 8
  %562 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %561, i64 0, i32 0, i32 0
  %563 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %562, align 8
  %564 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %19, %563
  br i1 %564, label %575, label %565

565:                                              ; preds = %560
  %566 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names7kToAttrE, align 8
  %567 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %566, i64 0, i32 0, i32 0
  %568 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %567, align 8
  %569 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %19, %568
  br i1 %569, label %575, label %570

570:                                              ; preds = %565
  %571 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names7kByAttrE, align 8
  %572 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %571, i64 0, i32 0, i32 0
  %573 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %572, align 8
  %574 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %19, %573
  br i1 %574, label %575, label %618

575:                                              ; preds = %570, %565, %560
  %576 = bitcast %"class.blink::SVGAnimationElement"* %0 to void (%"class.blink::SVGAnimationElement"*)***
  %577 = load void (%"class.blink::SVGAnimationElement"*)**, void (%"class.blink::SVGAnimationElement"*)*** %576, align 8
  %578 = getelementptr inbounds void (%"class.blink::SVGAnimationElement"*)*, void (%"class.blink::SVGAnimationElement"*)** %577, i64 172
  %579 = load void (%"class.blink::SVGAnimationElement"*)*, void (%"class.blink::SVGAnimationElement"*)** %578, align 8
  tail call void %579(%"class.blink::SVGAnimationElement"* %0) #9
  %580 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 1
  store i8 0, i8* %580, align 1
  %581 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 9
  %582 = bitcast %"class.WTF::String"* %581 to i64*
  %583 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %581, i64 0, i32 0, i32 0
  %584 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %583, align 8
  store i64 0, i64* %582, align 8
  %585 = icmp eq %"class.WTF::StringImpl"* %584, null
  br i1 %585, label %599, label %586

586:                                              ; preds = %575
  %587 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %584, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %588 = load atomic i32, i32* %587 monotonic, align 4
  %589 = and i32 %588, 2
  %590 = icmp eq i32 %589, 0
  %591 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %584, i64 0, i32 0
  %592 = load i32, i32* %591, align 4
  br i1 %590, label %593, label %595

593:                                              ; preds = %586
  %594 = add i32 %592, -1
  store i32 %594, i32* %591, align 4
  br label %595

595:                                              ; preds = %593, %586
  %596 = phi i32 [ %594, %593 ], [ %592, %586 ]
  %597 = icmp eq i32 %596, 0
  br i1 %597, label %598, label %599

598:                                              ; preds = %595
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %584) #9
  br label %599

599:                                              ; preds = %598, %595, %575
  %600 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 10
  %601 = bitcast %"class.WTF::String"* %600 to i64*
  %602 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %600, i64 0, i32 0, i32 0
  %603 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %602, align 8
  store i64 0, i64* %601, align 8
  %604 = icmp eq %"class.WTF::StringImpl"* %603, null
  br i1 %604, label %620, label %605

605:                                              ; preds = %599
  %606 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %603, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %607 = load atomic i32, i32* %606 monotonic, align 4
  %608 = and i32 %607, 2
  %609 = icmp eq i32 %608, 0
  %610 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %603, i64 0, i32 0
  %611 = load i32, i32* %610, align 4
  br i1 %609, label %612, label %614

612:                                              ; preds = %605
  %613 = add i32 %611, -1
  store i32 %613, i32* %610, align 4
  br label %614

614:                                              ; preds = %612, %605
  %615 = phi i32 [ %613, %612 ], [ %611, %605 ]
  %616 = icmp eq i32 %615, 0
  br i1 %616, label %617, label %620

617:                                              ; preds = %614
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %603) #9
  br label %620

618:                                              ; preds = %570
  %619 = bitcast %"class.blink::SVGAnimationElement"* %0 to %"class.blink::SVGSMILElement"*
  tail call void @_ZN5blink14SVGSMILElement14ParseAttributeERKNS_7Element27AttributeModificationParamsE(%"class.blink::SVGSMILElement"* %619, %"struct.blink::Element::AttributeModificationParams"* dereferenceable(32) %1) #9
  br label %620

620:                                              ; preds = %617, %614, %599, %559, %556, %541, %513, %510, %495, %200, %197, %182, %127, %124, %109, %74, %71, %56, %618
  ret void
}

declare void @_ZN5blink10SVGElement27ReportAttributeParsingErrorENS_15SVGParsingErrorERKNS_13QualifiedNameERKN3WTF12AtomicStringE(%"class.blink::SVGElement"*, i32, %"class.blink::QualifiedName"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19SVGAnimationElement25AnimationAttributeChangedEv(%"class.blink::SVGAnimationElement"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 1
  store i8 0, i8* %2, align 1
  %3 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 9
  %4 = bitcast %"class.WTF::String"* %3 to i64*
  %5 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  store i64 0, i64* %4, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %21, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  br i1 %12, label %15, label %17

15:                                               ; preds = %8
  %16 = add i32 %14, -1
  store i32 %16, i32* %13, align 4
  br label %17

17:                                               ; preds = %15, %8
  %18 = phi i32 [ %16, %15 ], [ %14, %8 ]
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %17
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %6) #9
  br label %21

21:                                               ; preds = %20, %17, %1
  %22 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 10
  %23 = bitcast %"class.WTF::String"* %22 to i64*
  %24 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %22, i64 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  store i64 0, i64* %23, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %40, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = and i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 0
  %33 = load i32, i32* %32, align 4
  br i1 %31, label %34, label %36

34:                                               ; preds = %27
  %35 = add i32 %33, -1
  store i32 %35, i32* %32, align 4
  br label %36

36:                                               ; preds = %34, %27
  %37 = phi i32 [ %35, %34 ], [ %33, %27 ]
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %36
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %25) #9
  br label %40

40:                                               ; preds = %39, %36, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN5blinkL13ParseKeyTimesERKN3WTF6StringERNS0_6VectorIfLj0ENS0_18PartitionAllocatorEEEb(%"class.WTF::String"* dereferenceable(8), %"class.WTF::Vector.62"* dereferenceable(16), i1 zeroext) unnamed_addr #0 {
  %4 = alloca %"class.WTF::Vector.57", align 8
  %5 = alloca %"class.WTF::String", align 8
  %6 = alloca i8, align 1
  %7 = alloca float, align 4
  %8 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %1, i64 0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %20, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %1, i64 0, i32 0, i32 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15

15:                                               ; preds = %11
  store i32 0, i32* %12, align 4
  br label %16

16:                                               ; preds = %15, %11
  %17 = bitcast %"class.WTF::Vector.62"* %1 to i8**
  %18 = load i8*, i8** %17, align 8
  %19 = bitcast %"class.WTF::Vector.62"* %1 to i64*
  store atomic i64 0, i64* %19 monotonic, align 8
  store i32 0, i32* %8, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %18) #9
  br label %20

20:                                               ; preds = %3, %16
  %21 = bitcast %"class.WTF::Vector.57"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %21) #9
  %22 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %4, i64 0, i32 0, i32 0, i32 0
  %23 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %4, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 0, i64 16, i1 false) #9
  call void @_ZNK3WTF6String5SplitEDsbRNS_6VectorIS0_Lj0ENS_18PartitionAllocatorEEE(%"class.WTF::String"* %0, i16 zeroext 59, i1 zeroext true, %"class.WTF::Vector.57"* nonnull dereferenceable(16) %4) #9
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %101, label %26

26:                                               ; preds = %20
  %27 = bitcast %"class.WTF::String"* %5 to i8*
  %28 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  %29 = bitcast float* %7 to i8*
  %30 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %1, i64 0, i32 0, i32 0, i32 2
  %31 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %1, i64 0, i32 0, i32 0, i32 0
  %32 = bitcast float* %7 to i32*
  br label %33

33:                                               ; preds = %26, %86
  %34 = phi i32 [ 0, %26 ], [ %87, %86 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #9
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %28, align 8
  %35 = call dereferenceable(8) %"class.WTF::String"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.57"* nonnull %4, i32 %34) #9
  %36 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String15StripWhiteSpaceEv(%"class.WTF::String"* %35) #9
  store %"class.WTF::StringImpl"* %36, %"class.WTF::StringImpl"** %28, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #9
  store i8 -86, i8* %6, align 1
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29) #9
  store float 0xFFFFFFFFE0000000, float* %7, align 4
  %37 = call float @_ZNK3WTF6String7ToFloatEPb(%"class.WTF::String"* nonnull %5, i8* nonnull %6) #9
  store float %37, float* %7, align 4
  %38 = load i8, i8* %6, align 1, !range !4
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %68, label %40

40:                                               ; preds = %33
  %41 = fcmp oge float %37, 0.000000e+00
  %42 = fcmp ole float %37, 1.000000e+00
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %68

44:                                               ; preds = %40
  br i1 %2, label %45, label %55

45:                                               ; preds = %44
  %46 = icmp eq i32 %34, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = fcmp une float %37, 0.000000e+00
  br i1 %48, label %68, label %55

49:                                               ; preds = %45
  %50 = load i32, i32* %30, align 4
  %51 = add i32 %50, -1
  %52 = call dereferenceable(4) float* @_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* %1, i32 %51) #9
  %53 = load float, float* %52, align 4
  %54 = fcmp olt float %37, %53
  br i1 %54, label %68, label %55

55:                                               ; preds = %47, %49, %44
  %56 = load i32, i32* %30, align 4
  %57 = load i32, i32* %8, align 8
  %58 = icmp eq i32 %56, %57
  br i1 %58, label %67, label %59, !prof !2

59:                                               ; preds = %55
  %60 = load float*, float** %31, align 8
  %61 = zext i32 %56 to i64
  %62 = getelementptr inbounds float, float* %60, i64 %61
  %63 = load i32, i32* %32, align 4
  %64 = bitcast float* %62 to i32*
  store i32 %63, i32* %64, align 4
  %65 = load i32, i32* %30, align 4
  %66 = add i32 %65, 1
  store i32 %66, i32* %30, align 4
  br label %68

67:                                               ; preds = %55
  call void @_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRfEEvOT_(%"class.WTF::Vector.62"* %1, float* nonnull dereferenceable(4) %7) #9
  br label %68

68:                                               ; preds = %67, %59, %49, %47, %40, %33
  %69 = phi i32 [ 5, %33 ], [ 5, %40 ], [ 5, %47 ], [ 5, %49 ], [ 0, %59 ], [ 0, %67 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %29) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #9
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %28, align 8
  %71 = icmp eq %"class.WTF::StringImpl"* %70, null
  br i1 %71, label %85, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %70, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load atomic i32, i32* %73 monotonic, align 4
  %75 = and i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %70, i64 0, i32 0
  %78 = load i32, i32* %77, align 4
  br i1 %76, label %79, label %81

79:                                               ; preds = %72
  %80 = add i32 %78, -1
  store i32 %80, i32* %77, align 4
  br label %81

81:                                               ; preds = %79, %72
  %82 = phi i32 [ %80, %79 ], [ %78, %72 ]
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %85

84:                                               ; preds = %81
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %70) #9
  br label %85

85:                                               ; preds = %68, %81, %84
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #9
  switch i32 %69, label %101 [
    i32 0, label %86
    i32 5, label %90
  ]

86:                                               ; preds = %85
  %87 = add nuw i32 %34, 1
  %88 = load i32, i32* %23, align 4
  %89 = icmp ult i32 %87, %88
  br i1 %89, label %33, label %101

90:                                               ; preds = %85
  %91 = load i32, i32* %8, align 8
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %101, label %93

93:                                               ; preds = %90
  %94 = load i32, i32* %30, align 4
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %97, label %96

96:                                               ; preds = %93
  store i32 0, i32* %30, align 4
  br label %97

97:                                               ; preds = %96, %93
  %98 = bitcast %"class.WTF::Vector.62"* %1 to i8**
  %99 = load i8*, i8** %98, align 8
  %100 = bitcast %"class.WTF::Vector.62"* %1 to i64*
  store atomic i64 0, i64* %100 monotonic, align 8
  store i32 0, i32* %8, align 8
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %99) #9
  br label %101

101:                                              ; preds = %86, %85, %20, %97, %90
  %102 = phi i1 [ false, %90 ], [ false, %97 ], [ true, %20 ], [ true, %85 ], [ true, %86 ]
  %103 = load %"class.WTF::String"*, %"class.WTF::String"** %22, align 8
  %104 = icmp eq %"class.WTF::String"* %103, null
  br i1 %104, label %138, label %105, !prof !3

105:                                              ; preds = %101
  %106 = bitcast %"class.WTF::String"* %103 to i8*
  %107 = load i32, i32* %23, align 4
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %136, label %109, !prof !2

109:                                              ; preds = %105
  %110 = zext i32 %107 to i64
  %111 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %103, i64 %110
  br label %112

112:                                              ; preds = %130, %109
  %113 = phi %"class.WTF::String"* [ %131, %130 ], [ %103, %109 ]
  %114 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %113, i64 0, i32 0, i32 0
  %115 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %114, align 8
  %116 = icmp eq %"class.WTF::StringImpl"* %115, null
  br i1 %116, label %130, label %117

117:                                              ; preds = %112
  %118 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %115, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %119 = load atomic i32, i32* %118 monotonic, align 4
  %120 = and i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %115, i64 0, i32 0
  %123 = load i32, i32* %122, align 4
  br i1 %121, label %124, label %126

124:                                              ; preds = %117
  %125 = add i32 %123, -1
  store i32 %125, i32* %122, align 4
  br label %126

126:                                              ; preds = %124, %117
  %127 = phi i32 [ %125, %124 ], [ %123, %117 ]
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %130

129:                                              ; preds = %126
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %115) #9
  br label %130

130:                                              ; preds = %129, %126, %112
  %131 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %113, i64 1
  %132 = icmp eq %"class.WTF::String"* %131, %111
  br i1 %132, label %133, label %112

133:                                              ; preds = %130
  store i32 0, i32* %23, align 4
  %134 = bitcast %"class.WTF::Vector.57"* %4 to i8**
  %135 = load i8*, i8** %134, align 8
  br label %136

136:                                              ; preds = %133, %105
  %137 = phi i8* [ %135, %133 ], [ %106, %105 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %137) #9
  store %"class.WTF::String"* null, %"class.WTF::String"** %22, align 8
  br label %138

138:                                              ; preds = %101, %136
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #9
  ret i1 %102
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringE(%"class.blink::SVGAnimationElement"*, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE10s_discrete to i8*) acquire, align 8
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %9, !prof !5

5:                                                ; preds = %2
  %6 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE10s_discrete) #9
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %9, label %8

8:                                                ; preds = %5
  tail call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE10s_discrete to %"class.WTF::AtomicString"*), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i64 0, i64 0), i64 8) #9
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE10s_discrete) #9
  br label %9

9:                                                ; preds = %5, %8, %2
  %10 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE8s_linear to i8*) acquire, align 8
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %16, !prof !5

12:                                               ; preds = %9
  %13 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE8s_linear) #9
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15

15:                                               ; preds = %12
  tail call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE8s_linear to %"class.WTF::AtomicString"*), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i64 0, i64 0), i64 6) #9
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE8s_linear) #9
  br label %16

16:                                               ; preds = %12, %15, %9
  %17 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE7s_paced to i8*) acquire, align 8
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %23, !prof !5

19:                                               ; preds = %16
  %20 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE7s_paced) #9
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  tail call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE7s_paced to %"class.WTF::AtomicString"*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), i64 5) #9
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE7s_paced) #9
  br label %23

23:                                               ; preds = %19, %22, %16
  %24 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE8s_spline to i8*) acquire, align 8
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %30, !prof !5

26:                                               ; preds = %23
  %27 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE8s_spline) #9
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %30, label %29

29:                                               ; preds = %26
  tail call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE8s_spline to %"class.WTF::AtomicString"*), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i64 0, i64 0), i64 6) #9
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE8s_spline) #9
  br label %30

30:                                               ; preds = %26, %29, %23
  %31 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE10s_discrete to %"class.WTF::StringImpl"**), align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %32, %33
  br i1 %34, label %35, label %45

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %37 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %36, align 8
  %38 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %37, i64 0, i32 2, i32 0, i32 0
  %39 = load %"class.blink::Document"*, %"class.blink::Document"** %38, align 8
  %40 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %39, i64 0, i32 2
  %41 = bitcast %"class.blink::UseCounter"* %40 to void (%"class.blink::UseCounter"*, i32)***
  %42 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %41, align 8
  %43 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %42, i64 3
  %44 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %43, align 8
  tail call void %44(%"class.blink::UseCounter"* %40, i32 1287) #9
  br label %145

45:                                               ; preds = %30
  %46 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE8s_linear to %"class.WTF::StringImpl"**), align 8
  %47 = icmp eq %"class.WTF::StringImpl"* %32, %46
  br i1 %47, label %48, label %78

48:                                               ; preds = %45
  %49 = load %"class.blink::SVGQualifiedName"*, %"class.blink::SVGQualifiedName"** @_ZN5blink9svg_names17kAnimateMotionTagE, align 8
  %50 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = icmp eq %"class.blink::SVGAnimationElement"* %0, null
  br i1 %51, label %145, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %54 = load i32, i32* %53, align 8
  %55 = and i32 %54, 48
  %56 = icmp eq i32 %55, 32
  br i1 %56, label %57, label %145

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.blink::SVGQualifiedName", %"class.blink::SVGQualifiedName"* %49, i64 0, i32 0, i32 0, i32 0
  %59 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %58, align 8
  %60 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %50, i64 1, i32 2
  %61 = bitcast %"class.blink::Member"* %60 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %62 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %61, align 8
  %63 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %62, i64 0, i32 3, i32 0, i32 0, i32 0
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %63, align 8
  %65 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %59, i64 0, i32 3, i32 0, i32 0, i32 0
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %65, align 8
  %67 = icmp eq %"class.WTF::StringImpl"* %64, %66
  br i1 %67, label %68, label %145

68:                                               ; preds = %57
  %69 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %70 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %69, align 8
  %71 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %70, i64 0, i32 2, i32 0, i32 0
  %72 = load %"class.blink::Document"*, %"class.blink::Document"** %71, align 8
  %73 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %72, i64 0, i32 2
  %74 = bitcast %"class.blink::UseCounter"* %73 to void (%"class.blink::UseCounter"*, i32)***
  %75 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %74, align 8
  %76 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %75, i64 3
  %77 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %76, align 8
  tail call void %77(%"class.blink::UseCounter"* %73, i32 1288) #9
  br label %145

78:                                               ; preds = %45
  %79 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE7s_paced to %"class.WTF::StringImpl"**), align 8
  %80 = icmp eq %"class.WTF::StringImpl"* %32, %79
  br i1 %80, label %81, label %111

81:                                               ; preds = %78
  %82 = load %"class.blink::SVGQualifiedName"*, %"class.blink::SVGQualifiedName"** @_ZN5blink9svg_names17kAnimateMotionTagE, align 8
  %83 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = icmp eq %"class.blink::SVGAnimationElement"* %0, null
  br i1 %84, label %101, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %87 = load i32, i32* %86, align 8
  %88 = and i32 %87, 48
  %89 = icmp eq i32 %88, 32
  br i1 %89, label %90, label %101

90:                                               ; preds = %85
  %91 = getelementptr inbounds %"class.blink::SVGQualifiedName", %"class.blink::SVGQualifiedName"* %82, i64 0, i32 0, i32 0, i32 0
  %92 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %91, align 8
  %93 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %83, i64 1, i32 2
  %94 = bitcast %"class.blink::Member"* %93 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %95 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %94, align 8
  %96 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %95, i64 0, i32 3, i32 0, i32 0, i32 0
  %97 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %96, align 8
  %98 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %92, i64 0, i32 3, i32 0, i32 0, i32 0
  %99 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %98, align 8
  %100 = icmp eq %"class.WTF::StringImpl"* %97, %99
  br i1 %100, label %145, label %101

101:                                              ; preds = %81, %85, %90
  %102 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %103 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %102, align 8
  %104 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %103, i64 0, i32 2, i32 0, i32 0
  %105 = load %"class.blink::Document"*, %"class.blink::Document"** %104, align 8
  %106 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %105, i64 0, i32 2
  %107 = bitcast %"class.blink::UseCounter"* %106 to void (%"class.blink::UseCounter"*, i32)***
  %108 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %107, align 8
  %109 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %108, i64 3
  %110 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %109, align 8
  tail call void %110(%"class.blink::UseCounter"* %106, i32 1289) #9
  br label %145

111:                                              ; preds = %78
  %112 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink19SVGAnimationElement11SetCalcModeERKN3WTF12AtomicStringEE8s_spline to %"class.WTF::StringImpl"**), align 8
  %113 = icmp eq %"class.WTF::StringImpl"* %32, %112
  br i1 %113, label %114, label %124

114:                                              ; preds = %111
  %115 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %116 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %115, align 8
  %117 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %116, i64 0, i32 2, i32 0, i32 0
  %118 = load %"class.blink::Document"*, %"class.blink::Document"** %117, align 8
  %119 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %118, i64 0, i32 2
  %120 = bitcast %"class.blink::UseCounter"* %119 to void (%"class.blink::UseCounter"*, i32)***
  %121 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %120, align 8
  %122 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %121, i64 3
  %123 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %122, align 8
  tail call void %123(%"class.blink::UseCounter"* %119, i32 1290) #9
  br label %145

124:                                              ; preds = %111
  %125 = load %"class.blink::SVGQualifiedName"*, %"class.blink::SVGQualifiedName"** @_ZN5blink9svg_names17kAnimateMotionTagE, align 8
  %126 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %127 = icmp eq %"class.blink::SVGAnimationElement"* %0, null
  br i1 %127, label %145, label %128

128:                                              ; preds = %124
  %129 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %130 = load i32, i32* %129, align 8
  %131 = and i32 %130, 48
  %132 = icmp eq i32 %131, 32
  br i1 %132, label %133, label %145

133:                                              ; preds = %128
  %134 = getelementptr inbounds %"class.blink::SVGQualifiedName", %"class.blink::SVGQualifiedName"* %125, i64 0, i32 0, i32 0, i32 0
  %135 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %134, align 8
  %136 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %126, i64 1, i32 2
  %137 = bitcast %"class.blink::Member"* %136 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %138 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %137, align 8
  %139 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %138, i64 0, i32 3, i32 0, i32 0, i32 0
  %140 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %139, align 8
  %141 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %135, i64 0, i32 3, i32 0, i32 0, i32 0
  %142 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %141, align 8
  %143 = icmp eq %"class.WTF::StringImpl"* %140, %142
  %144 = select i1 %143, i32 2, i32 1
  br label %145

145:                                              ; preds = %128, %124, %133, %90, %101, %57, %68, %52, %48, %114, %35
  %146 = phi i32 [ 3, %114 ], [ 0, %35 ], [ 1, %48 ], [ 1, %52 ], [ 1, %68 ], [ 1, %57 ], [ 2, %101 ], [ 2, %90 ], [ 1, %128 ], [ 1, %124 ], [ %144, %133 ]
  %147 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 3
  store i8 0, i8* %147, align 1
  %148 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 11
  store i32 %146, i32* %148, align 8
  ret void
}

declare void @_ZN5blink14SVGSMILElement14ParseAttributeERKNS_7Element27AttributeModificationParamsE(%"class.blink::SVGSMILElement"*, %"struct.blink::Element::AttributeModificationParams"* dereferenceable(32)) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19SVGAnimationElement19UnregisterAnimationERKNS_13QualifiedNameE(%"class.blink::SVGAnimationElement"*, %"class.blink::QualifiedName"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 2
  %4 = load i8, i8* %3, align 4, !range !4
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %13, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %8 = load %"class.blink::SVGElement"*, %"class.blink::SVGElement"** %7, align 8
  %9 = tail call %"class.blink::ElementSMILAnimations"* @_ZNK5blink10SVGElement17GetSMILAnimationsEv(%"class.blink::SVGElement"* %8) #9
  %10 = icmp eq %"class.blink::ElementSMILAnimations"* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %6
  tail call void @_ZN5blink21ElementSMILAnimations15RemoveAnimationERKNS_13QualifiedNameEPNS_19SVGAnimationElementE(%"class.blink::ElementSMILAnimations"* nonnull %9, %"class.blink::QualifiedName"* dereferenceable(8) %1, %"class.blink::SVGAnimationElement"* %0) #9
  br label %12

12:                                               ; preds = %6, %11
  store i8 0, i8* %3, align 4
  br label %13

13:                                               ; preds = %2, %12
  ret void
}

declare %"class.blink::ElementSMILAnimations"* @_ZNK5blink10SVGElement17GetSMILAnimationsEv(%"class.blink::SVGElement"*) local_unnamed_addr #1

declare void @_ZN5blink21ElementSMILAnimations15RemoveAnimationERKNS_13QualifiedNameEPNS_19SVGAnimationElementE(%"class.blink::ElementSMILAnimations"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.blink::SVGAnimationElement"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19SVGAnimationElement17RegisterAnimationERKNS_13QualifiedNameE(%"class.blink::SVGAnimationElement"*, %"class.blink::QualifiedName"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::SVGAnimationElement"* %0 to %"class.blink::SVGSMILElement"*
  %4 = tail call zeroext i1 @_ZNK5blink14SVGSMILElement14HasValidTargetEv(%"class.blink::SVGSMILElement"* %3) #9
  br i1 %4, label %5, label %16

5:                                                ; preds = %2
  %6 = bitcast %"class.blink::SVGAnimationElement"* %0 to i1 (%"class.blink::SVGAnimationElement"*)***
  %7 = load i1 (%"class.blink::SVGAnimationElement"*)**, i1 (%"class.blink::SVGAnimationElement"*)*** %6, align 8
  %8 = getelementptr inbounds i1 (%"class.blink::SVGAnimationElement"*)*, i1 (%"class.blink::SVGAnimationElement"*)** %7, i64 173
  %9 = load i1 (%"class.blink::SVGAnimationElement"*)*, i1 (%"class.blink::SVGAnimationElement"*)** %8, align 8
  %10 = tail call zeroext i1 %9(%"class.blink::SVGAnimationElement"* %0) #9
  br i1 %10, label %11, label %16

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = load %"class.blink::SVGElement"*, %"class.blink::SVGElement"** %12, align 8
  %14 = tail call dereferenceable(24) %"class.blink::ElementSMILAnimations"* @_ZN5blink10SVGElement20EnsureSMILAnimationsEv(%"class.blink::SVGElement"* %13) #9
  tail call void @_ZN5blink21ElementSMILAnimations12AddAnimationERKNS_13QualifiedNameEPNS_19SVGAnimationElementE(%"class.blink::ElementSMILAnimations"* %14, %"class.blink::QualifiedName"* dereferenceable(8) %1, %"class.blink::SVGAnimationElement"* %0) #9
  %15 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 2
  store i8 1, i8* %15, align 4
  br label %16

16:                                               ; preds = %2, %5, %11
  ret void
}

declare zeroext i1 @_ZNK5blink14SVGSMILElement14HasValidTargetEv(%"class.blink::SVGSMILElement"*) local_unnamed_addr #1

declare dereferenceable(24) %"class.blink::ElementSMILAnimations"* @_ZN5blink10SVGElement20EnsureSMILAnimationsEv(%"class.blink::SVGElement"*) local_unnamed_addr #1

declare void @_ZN5blink21ElementSMILAnimations12AddAnimationERKNS_13QualifiedNameEPNS_19SVGAnimationElementE(%"class.blink::ElementSMILAnimations"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.blink::SVGAnimationElement"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19SVGAnimationElement25WillChangeAnimationTargetEv(%"class.blink::SVGAnimationElement"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.blink::SVGAnimationElement"* %0 to %"class.blink::SVGSMILElement"*
  tail call void @_ZN5blink14SVGSMILElement25WillChangeAnimationTargetEv(%"class.blink::SVGSMILElement"* %2) #9
  %3 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 1
  store i8 0, i8* %3, align 1
  %4 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 9
  %5 = bitcast %"class.WTF::String"* %4 to i64*
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  store i64 0, i64* %5, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %8, label %22, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  br i1 %13, label %16, label %18

16:                                               ; preds = %9
  %17 = add i32 %15, -1
  store i32 %17, i32* %14, align 4
  br label %18

18:                                               ; preds = %16, %9
  %19 = phi i32 [ %17, %16 ], [ %15, %9 ]
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %18
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %7) #9
  br label %22

22:                                               ; preds = %21, %18, %1
  %23 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 10
  %24 = bitcast %"class.WTF::String"* %23 to i64*
  %25 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %23, i64 0, i32 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  store i64 0, i64* %24, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, null
  br i1 %27, label %41, label %28

28:                                               ; preds = %22
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  br i1 %32, label %35, label %37

35:                                               ; preds = %28
  %36 = add i32 %34, -1
  store i32 %36, i32* %33, align 4
  br label %37

37:                                               ; preds = %35, %28
  %38 = phi i32 [ %36, %35 ], [ %34, %28 ]
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %37
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #9
  br label %41

41:                                               ; preds = %22, %37, %40
  ret void
}

declare void @_ZN5blink14SVGSMILElement25WillChangeAnimationTargetEv(%"class.blink::SVGSMILElement"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK5blink19SVGAnimationElement12getStartTimeERNS_14ExceptionStateE(%"class.blink::SVGAnimationElement"* nocapture readonly, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 13, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp slt i64 %4, 9223372036854775806
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"* %1, i32 11, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0)) #9
  br label %19

7:                                                ; preds = %2
  %8 = add i64 %4, -9223372036854775807
  %9 = icmp ult i64 %8, 2
  br i1 %9, label %14, label %10

10:                                               ; preds = %7
  %11 = sitofp i64 %4 to double
  %12 = fdiv double %11, 1.000000e+06
  %13 = fcmp ult double %12, 0x47EFFFFFE0000000
  br i1 %13, label %14, label %19

14:                                               ; preds = %7, %10
  %15 = phi double [ %12, %10 ], [ 0xFFF0000000000000, %7 ]
  %16 = fcmp ole double %15, 0xC7EFFFFFE0000000
  %17 = select i1 %16, double 0xC7EFFFFFE0000000, double %15
  %18 = fptrunc double %17 to float
  br label %19

19:                                               ; preds = %14, %10, %6
  %20 = phi float [ 0.000000e+00, %6 ], [ %18, %14 ], [ 0x47EFFFFFE0000000, %10 ]
  ret float %20
}

declare void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"*, i32, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK5blink19SVGAnimationElement14getCurrentTimeEv(%"class.blink::SVGAnimationElement"*) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.blink::SVGAnimationElement"* %0 to %"class.blink::SVGSMILElement"*
  %3 = tail call i64 @_ZNK5blink14SVGSMILElement7ElapsedEv(%"class.blink::SVGSMILElement"* %2) #9
  %4 = add i64 %3, -9223372036854775807
  %5 = icmp ult i64 %4, 2
  br i1 %5, label %6, label %8

6:                                                ; preds = %1
  %7 = icmp slt i64 %3, 0
  br i1 %7, label %12, label %17

8:                                                ; preds = %1
  %9 = sitofp i64 %3 to double
  %10 = fdiv double %9, 1.000000e+06
  %11 = fcmp ult double %10, 0x47EFFFFFE0000000
  br i1 %11, label %12, label %17

12:                                               ; preds = %6, %8
  %13 = phi double [ %10, %8 ], [ 0xFFF0000000000000, %6 ]
  %14 = fcmp ole double %13, 0xC7EFFFFFE0000000
  %15 = select i1 %14, double 0xC7EFFFFFE0000000, double %13
  %16 = fptrunc double %15 to float
  br label %17

17:                                               ; preds = %6, %8, %12
  %18 = phi float [ %16, %12 ], [ 0x47EFFFFFE0000000, %8 ], [ 0x47EFFFFFE0000000, %6 ]
  ret float %18
}

declare i64 @_ZNK5blink14SVGSMILElement7ElapsedEv(%"class.blink::SVGSMILElement"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK5blink19SVGAnimationElement17getSimpleDurationERNS_14ExceptionStateE(%"class.blink::SVGAnimationElement"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::SVGAnimationElement"* %0 to %"class.blink::SVGSMILElement"*
  %4 = tail call i64 @_ZNK5blink14SVGSMILElement14SimpleDurationEv(%"class.blink::SVGSMILElement"* %3) #9
  %5 = icmp slt i64 %4, 9223372036854775806
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @_ZN5blink14ExceptionState17ThrowDOMExceptionENS_16DOMExceptionCodeEPKc(%"class.blink::ExceptionState"* %1, i32 9, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0)) #9
  br label %19

7:                                                ; preds = %2
  %8 = add i64 %4, -9223372036854775807
  %9 = icmp ult i64 %8, 2
  br i1 %9, label %14, label %10

10:                                               ; preds = %7
  %11 = sitofp i64 %4 to double
  %12 = fdiv double %11, 1.000000e+06
  %13 = fcmp ult double %12, 0x47EFFFFFE0000000
  br i1 %13, label %14, label %19

14:                                               ; preds = %7, %10
  %15 = phi double [ %12, %10 ], [ 0xFFF0000000000000, %7 ]
  %16 = fcmp ole double %15, 0xC7EFFFFFE0000000
  %17 = select i1 %16, double 0xC7EFFFFFE0000000, double %15
  %18 = fptrunc double %17 to float
  br label %19

19:                                               ; preds = %14, %10, %6
  %20 = phi float [ 0.000000e+00, %6 ], [ %18, %14 ], [ 0x47EFFFFFE0000000, %10 ]
  ret float %20
}

declare i64 @_ZNK5blink14SVGSMILElement14SimpleDurationEv(%"class.blink::SVGSMILElement"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19SVGAnimationElement14beginElementAtEf(%"class.blink::SVGAnimationElement"*, float) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = bitcast %"class.blink::SVGAnimationElement"* %0 to %"class.blink::SVGSMILElement"*
  %5 = tail call i64 @_ZNK5blink14SVGSMILElement7ElapsedEv(%"class.blink::SVGSMILElement"* %4) #9
  %6 = fpext float %1 to double
  %7 = fmul double %6, 1.000000e+06
  %8 = fcmp ult double %7, 0xC3E0000000000000
  %9 = fcmp ugt double %7, 0x43DFFFFFFFFFFFFF
  %10 = fcmp ogt double %7, 0xC3E0000000000000
  %11 = select i1 %10, double %7, double 0xC3E0000000000000
  %12 = fptosi double %11 to i64
  %13 = select i1 %8, i64 0, i64 9223372036854775807
  %14 = select i1 %9, i64 %13, i64 %12
  %15 = icmp slt i64 %14, 9223372036854775805
  %16 = select i1 %15, i64 %14, i64 9223372036854775805
  %17 = icmp slt i64 %5, 9223372036854775806
  br i1 %17, label %18, label %38

18:                                               ; preds = %2
  %19 = add i64 %16, -9223372036854775807
  %20 = icmp ult i64 %19, 2
  br i1 %20, label %21, label %29

21:                                               ; preds = %18
  %22 = add i64 %5, -9223372036854775807
  %23 = icmp ugt i64 %22, 1
  %24 = icmp eq i64 %5, %16
  %25 = or i1 %24, %23
  br i1 %25, label %38, label %26

26:                                               ; preds = %21
  %27 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0)) #9
  %28 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #9
  br label %38

29:                                               ; preds = %18
  %30 = icmp slt i64 %16, 0
  %31 = select i1 %30, i64 -9223372036854775808, i64 9223372036854775807
  %32 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %5, i64 %16) #9
  %33 = extractvalue { i64, i1 } %32, 1
  %34 = extractvalue { i64, i1 } %32, 0
  %35 = select i1 %33, i64 %31, i64 %34, !prof !2
  %36 = icmp slt i64 %35, 9223372036854775805
  %37 = select i1 %36, i64 %35, i64 9223372036854775805
  br label %38

38:                                               ; preds = %2, %21, %26, %29
  %39 = phi i64 [ %37, %29 ], [ %5, %2 ], [ -9223372036854775808, %21 ], [ -9223372036854775808, %26 ]
  call void @_ZN5blink14SVGSMILElement24AddInstanceTimeAndUpdateENS0_10BeginOrEndENS_8SMILTimeENS_14SMILTimeOriginE(%"class.blink::SVGSMILElement"* %4, i32 0, i64 %39, i32 1) #9
  ret void
}

declare void @_ZN5blink14SVGSMILElement24AddInstanceTimeAndUpdateENS0_10BeginOrEndENS_8SMILTimeENS_14SMILTimeOriginE(%"class.blink::SVGSMILElement"*, i32, i64, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19SVGAnimationElement12endElementAtEf(%"class.blink::SVGAnimationElement"*, float) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = bitcast %"class.blink::SVGAnimationElement"* %0 to %"class.blink::SVGSMILElement"*
  %5 = tail call i64 @_ZNK5blink14SVGSMILElement7ElapsedEv(%"class.blink::SVGSMILElement"* %4) #9
  %6 = fpext float %1 to double
  %7 = fmul double %6, 1.000000e+06
  %8 = fcmp ult double %7, 0xC3E0000000000000
  %9 = fcmp ugt double %7, 0x43DFFFFFFFFFFFFF
  %10 = fcmp ogt double %7, 0xC3E0000000000000
  %11 = select i1 %10, double %7, double 0xC3E0000000000000
  %12 = fptosi double %11 to i64
  %13 = select i1 %8, i64 0, i64 9223372036854775807
  %14 = select i1 %9, i64 %13, i64 %12
  %15 = icmp slt i64 %14, 9223372036854775805
  %16 = select i1 %15, i64 %14, i64 9223372036854775805
  %17 = icmp slt i64 %5, 9223372036854775806
  br i1 %17, label %18, label %38

18:                                               ; preds = %2
  %19 = add i64 %16, -9223372036854775807
  %20 = icmp ult i64 %19, 2
  br i1 %20, label %21, label %29

21:                                               ; preds = %18
  %22 = add i64 %5, -9223372036854775807
  %23 = icmp ugt i64 %22, 1
  %24 = icmp eq i64 %5, %16
  %25 = or i1 %24, %23
  br i1 %25, label %38, label %26

26:                                               ; preds = %21
  %27 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0)) #9
  %28 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #9
  br label %38

29:                                               ; preds = %18
  %30 = icmp slt i64 %16, 0
  %31 = select i1 %30, i64 -9223372036854775808, i64 9223372036854775807
  %32 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %5, i64 %16) #9
  %33 = extractvalue { i64, i1 } %32, 1
  %34 = extractvalue { i64, i1 } %32, 0
  %35 = select i1 %33, i64 %31, i64 %34, !prof !2
  %36 = icmp slt i64 %35, 9223372036854775805
  %37 = select i1 %36, i64 %35, i64 9223372036854775805
  br label %38

38:                                               ; preds = %2, %21, %26, %29
  %39 = phi i64 [ %37, %29 ], [ %5, %2 ], [ -9223372036854775808, %21 ], [ -9223372036854775808, %26 ]
  call void @_ZN5blink14SVGSMILElement24AddInstanceTimeAndUpdateENS0_10BeginOrEndENS_8SMILTimeENS_14SMILTimeOriginE(%"class.blink::SVGSMILElement"* %4, i32 1, i64 %39, i32 1) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19SVGAnimationElement19UpdateAnimationModeEv(%"class.blink::SVGAnimationElement"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names11kValuesAttrE, align 8
  %4 = tail call zeroext i1 @_ZNK5blink7Element12hasAttributeERKNS_13QualifiedNameE(%"class.blink::Element"* %2, %"class.blink::QualifiedName"* dereferenceable(8) %3) #9
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 12
  store i32 5, i32* %6, align 4
  br label %392

7:                                                ; preds = %1
  %8 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names7kToAttrE, align 8
  %9 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %10 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %9, align 8
  %11 = icmp eq %"class.blink::ElementData"* %10, null
  br i1 %11, label %62, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %10, i64 0, i32 0, i32 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %24, label %17

17:                                               ; preds = %12
  %18 = bitcast %"class.blink::ElementData"* %10 to %"class.blink::UniqueElementData"*
  %19 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %10, i64 1, i32 1
  %20 = bitcast %"class.blink::Member.14"* %19 to %"class.blink::Attribute"**
  %21 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %20, align 8
  %22 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %18, i64 0, i32 2, i32 0, i32 0, i32 2
  %23 = load i32, i32* %22, align 4
  br label %29

24:                                               ; preds = %12
  %25 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %10, i64 1
  %26 = bitcast %"class.blink::ElementData"* %25 to %"class.blink::Attribute"*
  %27 = lshr i32 %14, 1
  %28 = and i32 %27, 268435455
  br label %29

29:                                               ; preds = %24, %17
  %30 = phi %"class.blink::Attribute"* [ %26, %24 ], [ %21, %17 ]
  %31 = phi i32 [ %28, %24 ], [ %23, %17 ]
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %30, i64 %32
  %34 = icmp eq i32 %31, 0
  br i1 %34, label %62, label %35

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %8, i64 0, i32 0, i32 0
  %37 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %36, align 8
  %38 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %37, i64 0, i32 3, i32 0, i32 0, i32 0
  %39 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %37, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %40

40:                                               ; preds = %55, %35
  %41 = phi %"class.blink::Attribute"* [ %30, %35 ], [ %56, %55 ]
  %42 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %41, i64 0, i32 0, i32 0, i32 0
  %43 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %42, align 8
  %44 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %43, %37
  br i1 %44, label %58, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %43, i64 0, i32 3, i32 0, i32 0, i32 0
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %46, align 8
  %48 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  %49 = icmp eq %"class.WTF::StringImpl"* %47, %48
  br i1 %49, label %50, label %55

50:                                               ; preds = %45
  %51 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %43, i64 0, i32 4, i32 0, i32 0, i32 0
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  %54 = icmp eq %"class.WTF::StringImpl"* %52, %53
  br i1 %54, label %58, label %55

55:                                               ; preds = %50, %45
  %56 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %41, i64 1
  %57 = icmp eq %"class.blink::Attribute"* %56, %33
  br i1 %57, label %62, label %40

58:                                               ; preds = %50, %40
  %59 = icmp eq %"class.blink::Attribute"* %41, null
  br i1 %59, label %62, label %60

60:                                               ; preds = %58
  %61 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %41, i64 0, i32 1
  br label %64

62:                                               ; preds = %55, %58, %29, %7
  %63 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %64

64:                                               ; preds = %62, %60
  %65 = phi %"class.WTF::AtomicString"* [ %63, %62 ], [ %61, %60 ]
  %66 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %65, i64 0, i32 0, i32 0, i32 0
  %67 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %66, align 8
  %68 = icmp eq %"class.WTF::StringImpl"* %67, null
  br i1 %68, label %199, label %69

69:                                               ; preds = %64
  %70 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %71 = load atomic i32, i32* %70 monotonic, align 4
  %72 = and i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 0
  %75 = load i32, i32* %74, align 4
  br i1 %73, label %76, label %86

76:                                               ; preds = %69
  %77 = zext i32 %75 to i33
  %78 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %77, i33 1) #9
  %79 = extractvalue { i33, i1 } %78, 1
  %80 = extractvalue { i33, i1 } %78, 0
  %81 = icmp slt i33 %80, 0
  %82 = or i1 %79, %81
  br i1 %82, label %83, label %84, !prof !2

83:                                               ; preds = %76
  tail call void @llvm.trap() #9
  unreachable

84:                                               ; preds = %76
  %85 = trunc i33 %80 to i32
  store i32 %85, i32* %74, align 4
  br label %86

86:                                               ; preds = %69, %84
  %87 = phi i32 [ %85, %84 ], [ %75, %69 ]
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = icmp eq i32 %89, 0
  %91 = load atomic i32, i32* %70 monotonic, align 4
  %92 = and i32 %91, 2
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %97

94:                                               ; preds = %86
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 0
  %96 = add i32 %87, -1
  store i32 %96, i32* %95, align 4
  br label %97

97:                                               ; preds = %94, %86
  %98 = phi i32 [ %96, %94 ], [ %87, %86 ]
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %101

100:                                              ; preds = %97
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %67) #9
  br i1 %90, label %199, label %102

101:                                              ; preds = %97
  br i1 %90, label %199, label %102

102:                                              ; preds = %100, %101
  %103 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names9kFromAttrE, align 8
  %104 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %9, align 8
  %105 = icmp eq %"class.blink::ElementData"* %104, null
  br i1 %105, label %156, label %106

106:                                              ; preds = %102
  %107 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %104, i64 0, i32 0, i32 0, i32 0
  %108 = load i32, i32* %107, align 4
  %109 = and i32 %108, 1
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %118, label %111

111:                                              ; preds = %106
  %112 = bitcast %"class.blink::ElementData"* %104 to %"class.blink::UniqueElementData"*
  %113 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %104, i64 1, i32 1
  %114 = bitcast %"class.blink::Member.14"* %113 to %"class.blink::Attribute"**
  %115 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %114, align 8
  %116 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %112, i64 0, i32 2, i32 0, i32 0, i32 2
  %117 = load i32, i32* %116, align 4
  br label %123

118:                                              ; preds = %106
  %119 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %104, i64 1
  %120 = bitcast %"class.blink::ElementData"* %119 to %"class.blink::Attribute"*
  %121 = lshr i32 %108, 1
  %122 = and i32 %121, 268435455
  br label %123

123:                                              ; preds = %118, %111
  %124 = phi %"class.blink::Attribute"* [ %120, %118 ], [ %115, %111 ]
  %125 = phi i32 [ %122, %118 ], [ %117, %111 ]
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %124, i64 %126
  %128 = icmp eq i32 %125, 0
  br i1 %128, label %156, label %129

129:                                              ; preds = %123
  %130 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %103, i64 0, i32 0, i32 0
  %131 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %130, align 8
  %132 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %131, i64 0, i32 3, i32 0, i32 0, i32 0
  %133 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %131, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %134

134:                                              ; preds = %149, %129
  %135 = phi %"class.blink::Attribute"* [ %124, %129 ], [ %150, %149 ]
  %136 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %135, i64 0, i32 0, i32 0, i32 0
  %137 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %136, align 8
  %138 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %137, %131
  br i1 %138, label %152, label %139

139:                                              ; preds = %134
  %140 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %137, i64 0, i32 3, i32 0, i32 0, i32 0
  %141 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %140, align 8
  %142 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %132, align 8
  %143 = icmp eq %"class.WTF::StringImpl"* %141, %142
  br i1 %143, label %144, label %149

144:                                              ; preds = %139
  %145 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %137, i64 0, i32 4, i32 0, i32 0, i32 0
  %146 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %145, align 8
  %147 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %133, align 8
  %148 = icmp eq %"class.WTF::StringImpl"* %146, %147
  br i1 %148, label %152, label %149

149:                                              ; preds = %144, %139
  %150 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %135, i64 1
  %151 = icmp eq %"class.blink::Attribute"* %150, %127
  br i1 %151, label %156, label %134

152:                                              ; preds = %144, %134
  %153 = icmp eq %"class.blink::Attribute"* %135, null
  br i1 %153, label %156, label %154

154:                                              ; preds = %152
  %155 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %135, i64 0, i32 1
  br label %158

156:                                              ; preds = %149, %152, %123, %102
  %157 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %158

158:                                              ; preds = %156, %154
  %159 = phi %"class.WTF::AtomicString"* [ %157, %156 ], [ %155, %154 ]
  %160 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %159, i64 0, i32 0, i32 0, i32 0
  %161 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %160, align 8
  %162 = icmp eq %"class.WTF::StringImpl"* %161, null
  br i1 %162, label %163, label %165

163:                                              ; preds = %158
  %164 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 12
  store i32 3, i32* %164, align 4
  br label %392

165:                                              ; preds = %158
  %166 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %161, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %167 = load atomic i32, i32* %166 monotonic, align 4
  %168 = and i32 %167, 2
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %170, label %182

170:                                              ; preds = %165
  %171 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %161, i64 0, i32 0
  %172 = load i32, i32* %171, align 4
  %173 = zext i32 %172 to i33
  %174 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %173, i33 1) #9
  %175 = extractvalue { i33, i1 } %174, 1
  %176 = extractvalue { i33, i1 } %174, 0
  %177 = icmp slt i33 %176, 0
  %178 = or i1 %175, %177
  br i1 %178, label %179, label %180, !prof !2

179:                                              ; preds = %170
  tail call void @llvm.trap() #9
  unreachable

180:                                              ; preds = %170
  %181 = trunc i33 %176 to i32
  store i32 %181, i32* %171, align 4
  br label %182

182:                                              ; preds = %180, %165
  %183 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %161, i64 0, i32 1
  %184 = load i32, i32* %183, align 4
  %185 = icmp eq i32 %184, 0
  %186 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 12
  %187 = select i1 %185, i32 3, i32 1
  store i32 %187, i32* %186, align 4
  %188 = load atomic i32, i32* %166 monotonic, align 4
  %189 = and i32 %188, 2
  %190 = icmp eq i32 %189, 0
  %191 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %161, i64 0, i32 0
  %192 = load i32, i32* %191, align 4
  br i1 %190, label %193, label %195

193:                                              ; preds = %182
  %194 = add i32 %192, -1
  store i32 %194, i32* %191, align 4
  br label %195

195:                                              ; preds = %193, %182
  %196 = phi i32 [ %194, %193 ], [ %192, %182 ]
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %392

198:                                              ; preds = %195
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %161) #9
  br label %392

199:                                              ; preds = %64, %100, %101
  %200 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names7kByAttrE, align 8
  %201 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %9, align 8
  %202 = icmp eq %"class.blink::ElementData"* %201, null
  br i1 %202, label %253, label %203

203:                                              ; preds = %199
  %204 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %201, i64 0, i32 0, i32 0, i32 0
  %205 = load i32, i32* %204, align 4
  %206 = and i32 %205, 1
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %215, label %208

208:                                              ; preds = %203
  %209 = bitcast %"class.blink::ElementData"* %201 to %"class.blink::UniqueElementData"*
  %210 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %201, i64 1, i32 1
  %211 = bitcast %"class.blink::Member.14"* %210 to %"class.blink::Attribute"**
  %212 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %211, align 8
  %213 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %209, i64 0, i32 2, i32 0, i32 0, i32 2
  %214 = load i32, i32* %213, align 4
  br label %220

215:                                              ; preds = %203
  %216 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %201, i64 1
  %217 = bitcast %"class.blink::ElementData"* %216 to %"class.blink::Attribute"*
  %218 = lshr i32 %205, 1
  %219 = and i32 %218, 268435455
  br label %220

220:                                              ; preds = %215, %208
  %221 = phi %"class.blink::Attribute"* [ %217, %215 ], [ %212, %208 ]
  %222 = phi i32 [ %219, %215 ], [ %214, %208 ]
  %223 = zext i32 %222 to i64
  %224 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %221, i64 %223
  %225 = icmp eq i32 %222, 0
  br i1 %225, label %253, label %226

226:                                              ; preds = %220
  %227 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %200, i64 0, i32 0, i32 0
  %228 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %227, align 8
  %229 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %228, i64 0, i32 3, i32 0, i32 0, i32 0
  %230 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %228, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %231

231:                                              ; preds = %246, %226
  %232 = phi %"class.blink::Attribute"* [ %221, %226 ], [ %247, %246 ]
  %233 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %232, i64 0, i32 0, i32 0, i32 0
  %234 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %233, align 8
  %235 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %234, %228
  br i1 %235, label %249, label %236

236:                                              ; preds = %231
  %237 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %234, i64 0, i32 3, i32 0, i32 0, i32 0
  %238 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %237, align 8
  %239 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %229, align 8
  %240 = icmp eq %"class.WTF::StringImpl"* %238, %239
  br i1 %240, label %241, label %246

241:                                              ; preds = %236
  %242 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %234, i64 0, i32 4, i32 0, i32 0, i32 0
  %243 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %242, align 8
  %244 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %230, align 8
  %245 = icmp eq %"class.WTF::StringImpl"* %243, %244
  br i1 %245, label %249, label %246

246:                                              ; preds = %241, %236
  %247 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %232, i64 1
  %248 = icmp eq %"class.blink::Attribute"* %247, %224
  br i1 %248, label %253, label %231

249:                                              ; preds = %241, %231
  %250 = icmp eq %"class.blink::Attribute"* %232, null
  br i1 %250, label %253, label %251

251:                                              ; preds = %249
  %252 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %232, i64 0, i32 1
  br label %255

253:                                              ; preds = %246, %249, %220, %199
  %254 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %255

255:                                              ; preds = %253, %251
  %256 = phi %"class.WTF::AtomicString"* [ %254, %253 ], [ %252, %251 ]
  %257 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %256, i64 0, i32 0, i32 0, i32 0
  %258 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %257, align 8
  %259 = icmp eq %"class.WTF::StringImpl"* %258, null
  br i1 %259, label %390, label %260

260:                                              ; preds = %255
  %261 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %258, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %262 = load atomic i32, i32* %261 monotonic, align 4
  %263 = and i32 %262, 2
  %264 = icmp eq i32 %263, 0
  %265 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %258, i64 0, i32 0
  %266 = load i32, i32* %265, align 4
  br i1 %264, label %267, label %277

267:                                              ; preds = %260
  %268 = zext i32 %266 to i33
  %269 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %268, i33 1) #9
  %270 = extractvalue { i33, i1 } %269, 1
  %271 = extractvalue { i33, i1 } %269, 0
  %272 = icmp slt i33 %271, 0
  %273 = or i1 %270, %272
  br i1 %273, label %274, label %275, !prof !2

274:                                              ; preds = %267
  tail call void @llvm.trap() #9
  unreachable

275:                                              ; preds = %267
  %276 = trunc i33 %271 to i32
  store i32 %276, i32* %265, align 4
  br label %277

277:                                              ; preds = %260, %275
  %278 = phi i32 [ %276, %275 ], [ %266, %260 ]
  %279 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %258, i64 0, i32 1
  %280 = load i32, i32* %279, align 4
  %281 = icmp eq i32 %280, 0
  %282 = load atomic i32, i32* %261 monotonic, align 4
  %283 = and i32 %282, 2
  %284 = icmp eq i32 %283, 0
  br i1 %284, label %285, label %288

285:                                              ; preds = %277
  %286 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %258, i64 0, i32 0
  %287 = add i32 %278, -1
  store i32 %287, i32* %286, align 4
  br label %288

288:                                              ; preds = %285, %277
  %289 = phi i32 [ %287, %285 ], [ %278, %277 ]
  %290 = icmp eq i32 %289, 0
  br i1 %290, label %291, label %292

291:                                              ; preds = %288
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %258) #9
  br i1 %281, label %390, label %293

292:                                              ; preds = %288
  br i1 %281, label %390, label %293

293:                                              ; preds = %291, %292
  %294 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names9kFromAttrE, align 8
  %295 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %9, align 8
  %296 = icmp eq %"class.blink::ElementData"* %295, null
  br i1 %296, label %347, label %297

297:                                              ; preds = %293
  %298 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %295, i64 0, i32 0, i32 0, i32 0
  %299 = load i32, i32* %298, align 4
  %300 = and i32 %299, 1
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %309, label %302

302:                                              ; preds = %297
  %303 = bitcast %"class.blink::ElementData"* %295 to %"class.blink::UniqueElementData"*
  %304 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %295, i64 1, i32 1
  %305 = bitcast %"class.blink::Member.14"* %304 to %"class.blink::Attribute"**
  %306 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %305, align 8
  %307 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %303, i64 0, i32 2, i32 0, i32 0, i32 2
  %308 = load i32, i32* %307, align 4
  br label %314

309:                                              ; preds = %297
  %310 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %295, i64 1
  %311 = bitcast %"class.blink::ElementData"* %310 to %"class.blink::Attribute"*
  %312 = lshr i32 %299, 1
  %313 = and i32 %312, 268435455
  br label %314

314:                                              ; preds = %309, %302
  %315 = phi %"class.blink::Attribute"* [ %311, %309 ], [ %306, %302 ]
  %316 = phi i32 [ %313, %309 ], [ %308, %302 ]
  %317 = zext i32 %316 to i64
  %318 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %315, i64 %317
  %319 = icmp eq i32 %316, 0
  br i1 %319, label %347, label %320

320:                                              ; preds = %314
  %321 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %294, i64 0, i32 0, i32 0
  %322 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %321, align 8
  %323 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %322, i64 0, i32 3, i32 0, i32 0, i32 0
  %324 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %322, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %325

325:                                              ; preds = %340, %320
  %326 = phi %"class.blink::Attribute"* [ %315, %320 ], [ %341, %340 ]
  %327 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %326, i64 0, i32 0, i32 0, i32 0
  %328 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %327, align 8
  %329 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %328, %322
  br i1 %329, label %343, label %330

330:                                              ; preds = %325
  %331 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %328, i64 0, i32 3, i32 0, i32 0, i32 0
  %332 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %331, align 8
  %333 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %323, align 8
  %334 = icmp eq %"class.WTF::StringImpl"* %332, %333
  br i1 %334, label %335, label %340

335:                                              ; preds = %330
  %336 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %328, i64 0, i32 4, i32 0, i32 0, i32 0
  %337 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %336, align 8
  %338 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %324, align 8
  %339 = icmp eq %"class.WTF::StringImpl"* %337, %338
  br i1 %339, label %343, label %340

340:                                              ; preds = %335, %330
  %341 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %326, i64 1
  %342 = icmp eq %"class.blink::Attribute"* %341, %318
  br i1 %342, label %347, label %325

343:                                              ; preds = %335, %325
  %344 = icmp eq %"class.blink::Attribute"* %326, null
  br i1 %344, label %347, label %345

345:                                              ; preds = %343
  %346 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %326, i64 0, i32 1
  br label %349

347:                                              ; preds = %340, %343, %314, %293
  %348 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %349

349:                                              ; preds = %347, %345
  %350 = phi %"class.WTF::AtomicString"* [ %348, %347 ], [ %346, %345 ]
  %351 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %350, i64 0, i32 0, i32 0, i32 0
  %352 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %351, align 8
  %353 = icmp eq %"class.WTF::StringImpl"* %352, null
  br i1 %353, label %354, label %356

354:                                              ; preds = %349
  %355 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 12
  store i32 4, i32* %355, align 4
  br label %392

356:                                              ; preds = %349
  %357 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %352, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %358 = load atomic i32, i32* %357 monotonic, align 4
  %359 = and i32 %358, 2
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %361, label %373

361:                                              ; preds = %356
  %362 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %352, i64 0, i32 0
  %363 = load i32, i32* %362, align 4
  %364 = zext i32 %363 to i33
  %365 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %364, i33 1) #9
  %366 = extractvalue { i33, i1 } %365, 1
  %367 = extractvalue { i33, i1 } %365, 0
  %368 = icmp slt i33 %367, 0
  %369 = or i1 %366, %368
  br i1 %369, label %370, label %371, !prof !2

370:                                              ; preds = %361
  tail call void @llvm.trap() #9
  unreachable

371:                                              ; preds = %361
  %372 = trunc i33 %367 to i32
  store i32 %372, i32* %362, align 4
  br label %373

373:                                              ; preds = %371, %356
  %374 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %352, i64 0, i32 1
  %375 = load i32, i32* %374, align 4
  %376 = icmp eq i32 %375, 0
  %377 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 12
  %378 = select i1 %376, i32 4, i32 2
  store i32 %378, i32* %377, align 4
  %379 = load atomic i32, i32* %357 monotonic, align 4
  %380 = and i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %352, i64 0, i32 0
  %383 = load i32, i32* %382, align 4
  br i1 %381, label %384, label %386

384:                                              ; preds = %373
  %385 = add i32 %383, -1
  store i32 %385, i32* %382, align 4
  br label %386

386:                                              ; preds = %384, %373
  %387 = phi i32 [ %385, %384 ], [ %383, %373 ]
  %388 = icmp eq i32 %387, 0
  br i1 %388, label %389, label %392

389:                                              ; preds = %386
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %352) #9
  br label %392

390:                                              ; preds = %255, %291, %292
  %391 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 12
  store i32 0, i32* %391, align 4
  br label %392

392:                                              ; preds = %389, %386, %354, %198, %195, %163, %390, %5
  ret void
}

declare zeroext i1 @_ZNK5blink7Element12hasAttributeERKNS_13QualifiedNameE(%"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink19SVGAnimationElement7ToValueEv(%"class.blink::SVGAnimationElement"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names7kToAttrE, align 8
  %3 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %4 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %3, align 8
  %5 = icmp eq %"class.blink::ElementData"* %4, null
  br i1 %5, label %56, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %4, i64 0, i32 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %18, label %11

11:                                               ; preds = %6
  %12 = bitcast %"class.blink::ElementData"* %4 to %"class.blink::UniqueElementData"*
  %13 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %4, i64 1, i32 1
  %14 = bitcast %"class.blink::Member.14"* %13 to %"class.blink::Attribute"**
  %15 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %12, i64 0, i32 2, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  br label %23

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %4, i64 1
  %20 = bitcast %"class.blink::ElementData"* %19 to %"class.blink::Attribute"*
  %21 = lshr i32 %8, 1
  %22 = and i32 %21, 268435455
  br label %23

23:                                               ; preds = %18, %11
  %24 = phi %"class.blink::Attribute"* [ %20, %18 ], [ %15, %11 ]
  %25 = phi i32 [ %22, %18 ], [ %17, %11 ]
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %24, i64 %26
  %28 = icmp eq i32 %25, 0
  br i1 %28, label %56, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %2, i64 0, i32 0, i32 0
  %31 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %31, i64 0, i32 3, i32 0, i32 0, i32 0
  %33 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %31, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %34

34:                                               ; preds = %49, %29
  %35 = phi %"class.blink::Attribute"* [ %24, %29 ], [ %50, %49 ]
  %36 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %35, i64 0, i32 0, i32 0, i32 0
  %37 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %36, align 8
  %38 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %37, %31
  br i1 %38, label %52, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %37, i64 0, i32 3, i32 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, %42
  br i1 %43, label %44, label %49

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %37, i64 0, i32 4, i32 0, i32 0, i32 0
  %46 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %45, align 8
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %46, %47
  br i1 %48, label %52, label %49

49:                                               ; preds = %44, %39
  %50 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %35, i64 1
  %51 = icmp eq %"class.blink::Attribute"* %50, %27
  br i1 %51, label %56, label %34

52:                                               ; preds = %44, %34
  %53 = icmp eq %"class.blink::Attribute"* %35, null
  br i1 %53, label %56, label %54

54:                                               ; preds = %52
  %55 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %35, i64 0, i32 1
  br label %58

56:                                               ; preds = %49, %52, %23, %1
  %57 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %58

58:                                               ; preds = %54, %56
  %59 = phi %"class.WTF::AtomicString"* [ %57, %56 ], [ %55, %54 ]
  %60 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %59, i64 0, i32 0, i32 0, i32 0
  %61 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %60, align 8
  %62 = icmp eq %"class.WTF::StringImpl"* %61, null
  br i1 %62, label %80, label %63

63:                                               ; preds = %58
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %61, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %80

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %61, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = zext i32 %70 to i33
  %72 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %71, i33 1) #9
  %73 = extractvalue { i33, i1 } %72, 1
  %74 = extractvalue { i33, i1 } %72, 0
  %75 = icmp slt i33 %74, 0
  %76 = or i1 %73, %75
  br i1 %76, label %77, label %78, !prof !2

77:                                               ; preds = %68
  tail call void @llvm.trap() #9
  unreachable

78:                                               ; preds = %68
  %79 = trunc i33 %74 to i32
  store i32 %79, i32* %69, align 4
  br label %80

80:                                               ; preds = %58, %63, %78
  ret %"class.WTF::StringImpl"* %61
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink19SVGAnimationElement9FromValueEv(%"class.blink::SVGAnimationElement"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names9kFromAttrE, align 8
  %3 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %4 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %3, align 8
  %5 = icmp eq %"class.blink::ElementData"* %4, null
  br i1 %5, label %56, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %4, i64 0, i32 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %18, label %11

11:                                               ; preds = %6
  %12 = bitcast %"class.blink::ElementData"* %4 to %"class.blink::UniqueElementData"*
  %13 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %4, i64 1, i32 1
  %14 = bitcast %"class.blink::Member.14"* %13 to %"class.blink::Attribute"**
  %15 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %12, i64 0, i32 2, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  br label %23

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %4, i64 1
  %20 = bitcast %"class.blink::ElementData"* %19 to %"class.blink::Attribute"*
  %21 = lshr i32 %8, 1
  %22 = and i32 %21, 268435455
  br label %23

23:                                               ; preds = %18, %11
  %24 = phi %"class.blink::Attribute"* [ %20, %18 ], [ %15, %11 ]
  %25 = phi i32 [ %22, %18 ], [ %17, %11 ]
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %24, i64 %26
  %28 = icmp eq i32 %25, 0
  br i1 %28, label %56, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %2, i64 0, i32 0, i32 0
  %31 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %31, i64 0, i32 3, i32 0, i32 0, i32 0
  %33 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %31, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %34

34:                                               ; preds = %49, %29
  %35 = phi %"class.blink::Attribute"* [ %24, %29 ], [ %50, %49 ]
  %36 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %35, i64 0, i32 0, i32 0, i32 0
  %37 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %36, align 8
  %38 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %37, %31
  br i1 %38, label %52, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %37, i64 0, i32 3, i32 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, %42
  br i1 %43, label %44, label %49

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %37, i64 0, i32 4, i32 0, i32 0, i32 0
  %46 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %45, align 8
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %46, %47
  br i1 %48, label %52, label %49

49:                                               ; preds = %44, %39
  %50 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %35, i64 1
  %51 = icmp eq %"class.blink::Attribute"* %50, %27
  br i1 %51, label %56, label %34

52:                                               ; preds = %44, %34
  %53 = icmp eq %"class.blink::Attribute"* %35, null
  br i1 %53, label %56, label %54

54:                                               ; preds = %52
  %55 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %35, i64 0, i32 1
  br label %58

56:                                               ; preds = %49, %52, %23, %1
  %57 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %58

58:                                               ; preds = %54, %56
  %59 = phi %"class.WTF::AtomicString"* [ %57, %56 ], [ %55, %54 ]
  %60 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %59, i64 0, i32 0, i32 0, i32 0
  %61 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %60, align 8
  %62 = icmp eq %"class.WTF::StringImpl"* %61, null
  br i1 %62, label %80, label %63

63:                                               ; preds = %58
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %61, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %80

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %61, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = zext i32 %70 to i33
  %72 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %71, i33 1) #9
  %73 = extractvalue { i33, i1 } %72, 1
  %74 = extractvalue { i33, i1 } %72, 0
  %75 = icmp slt i33 %74, 0
  %76 = or i1 %73, %75
  br i1 %76, label %77, label %78, !prof !2

77:                                               ; preds = %68
  tail call void @llvm.trap() #9
  unreachable

78:                                               ; preds = %68
  %79 = trunc i33 %74 to i32
  store i32 %79, i32* %69, align 4
  br label %80

80:                                               ; preds = %58, %63, %78
  ret %"class.WTF::StringImpl"* %61
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink19SVGAnimationElement7ByValueEv(%"class.blink::SVGAnimationElement"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names7kByAttrE, align 8
  %3 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %4 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %3, align 8
  %5 = icmp eq %"class.blink::ElementData"* %4, null
  br i1 %5, label %56, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %4, i64 0, i32 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %18, label %11

11:                                               ; preds = %6
  %12 = bitcast %"class.blink::ElementData"* %4 to %"class.blink::UniqueElementData"*
  %13 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %4, i64 1, i32 1
  %14 = bitcast %"class.blink::Member.14"* %13 to %"class.blink::Attribute"**
  %15 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %12, i64 0, i32 2, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  br label %23

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %4, i64 1
  %20 = bitcast %"class.blink::ElementData"* %19 to %"class.blink::Attribute"*
  %21 = lshr i32 %8, 1
  %22 = and i32 %21, 268435455
  br label %23

23:                                               ; preds = %18, %11
  %24 = phi %"class.blink::Attribute"* [ %20, %18 ], [ %15, %11 ]
  %25 = phi i32 [ %22, %18 ], [ %17, %11 ]
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %24, i64 %26
  %28 = icmp eq i32 %25, 0
  br i1 %28, label %56, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %2, i64 0, i32 0, i32 0
  %31 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %31, i64 0, i32 3, i32 0, i32 0, i32 0
  %33 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %31, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %34

34:                                               ; preds = %49, %29
  %35 = phi %"class.blink::Attribute"* [ %24, %29 ], [ %50, %49 ]
  %36 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %35, i64 0, i32 0, i32 0, i32 0
  %37 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %36, align 8
  %38 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %37, %31
  br i1 %38, label %52, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %37, i64 0, i32 3, i32 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %41, %42
  br i1 %43, label %44, label %49

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %37, i64 0, i32 4, i32 0, i32 0, i32 0
  %46 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %45, align 8
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %46, %47
  br i1 %48, label %52, label %49

49:                                               ; preds = %44, %39
  %50 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %35, i64 1
  %51 = icmp eq %"class.blink::Attribute"* %50, %27
  br i1 %51, label %56, label %34

52:                                               ; preds = %44, %34
  %53 = icmp eq %"class.blink::Attribute"* %35, null
  br i1 %53, label %56, label %54

54:                                               ; preds = %52
  %55 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %35, i64 0, i32 1
  br label %58

56:                                               ; preds = %49, %52, %23, %1
  %57 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %58

58:                                               ; preds = %54, %56
  %59 = phi %"class.WTF::AtomicString"* [ %57, %56 ], [ %55, %54 ]
  %60 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %59, i64 0, i32 0, i32 0, i32 0
  %61 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %60, align 8
  %62 = icmp eq %"class.WTF::StringImpl"* %61, null
  br i1 %62, label %80, label %63

63:                                               ; preds = %58
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %61, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %80

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %61, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = zext i32 %70 to i33
  %72 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %71, i33 1) #9
  %73 = extractvalue { i33, i1 } %72, 1
  %74 = extractvalue { i33, i1 } %72, 0
  %75 = icmp slt i33 %74, 0
  %76 = or i1 %73, %75
  br i1 %76, label %77, label %78, !prof !2

77:                                               ; preds = %68
  tail call void @llvm.trap() #9
  unreachable

78:                                               ; preds = %68
  %79 = trunc i33 %74 to i32
  store i32 %79, i32* %69, align 4
  br label %80

80:                                               ; preds = %58, %63, %78
  ret %"class.WTF::StringImpl"* %61
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink19SVGAnimationElement10IsAdditiveEv(%"class.blink::SVGAnimationElement"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = load atomic i8, i8* bitcast (i64* @_ZGVZNK5blink19SVGAnimationElement10IsAdditiveEvE5s_sum to i8*) acquire, align 8
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %8, !prof !5

4:                                                ; preds = %1
  %5 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZNK5blink19SVGAnimationElement10IsAdditiveEvE5s_sum) #9
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %4
  tail call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* bitcast (%"class.WTF::StaticSingleton"* @_ZZNK5blink19SVGAnimationElement10IsAdditiveEvE5s_sum to %"class.WTF::AtomicString"*), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0), i64 3) #9
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZNK5blink19SVGAnimationElement10IsAdditiveEvE5s_sum) #9
  br label %8

8:                                                ; preds = %4, %7, %1
  %9 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names13kAdditiveAttrE, align 8
  %10 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %11 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %10, align 8
  %12 = icmp eq %"class.blink::ElementData"* %11, null
  br i1 %12, label %63, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %11, i64 0, i32 0, i32 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = and i32 %15, 1
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %25, label %18

18:                                               ; preds = %13
  %19 = bitcast %"class.blink::ElementData"* %11 to %"class.blink::UniqueElementData"*
  %20 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %11, i64 1, i32 1
  %21 = bitcast %"class.blink::Member.14"* %20 to %"class.blink::Attribute"**
  %22 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %21, align 8
  %23 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %19, i64 0, i32 2, i32 0, i32 0, i32 2
  %24 = load i32, i32* %23, align 4
  br label %30

25:                                               ; preds = %13
  %26 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %11, i64 1
  %27 = bitcast %"class.blink::ElementData"* %26 to %"class.blink::Attribute"*
  %28 = lshr i32 %15, 1
  %29 = and i32 %28, 268435455
  br label %30

30:                                               ; preds = %25, %18
  %31 = phi %"class.blink::Attribute"* [ %27, %25 ], [ %22, %18 ]
  %32 = phi i32 [ %29, %25 ], [ %24, %18 ]
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %31, i64 %33
  %35 = icmp eq i32 %32, 0
  br i1 %35, label %63, label %36

36:                                               ; preds = %30
  %37 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %9, i64 0, i32 0, i32 0
  %38 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %37, align 8
  %39 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %38, i64 0, i32 3, i32 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %38, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %41

41:                                               ; preds = %56, %36
  %42 = phi %"class.blink::Attribute"* [ %31, %36 ], [ %57, %56 ]
  %43 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %42, i64 0, i32 0, i32 0, i32 0
  %44 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %43, align 8
  %45 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %44, %38
  br i1 %45, label %59, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %44, i64 0, i32 3, i32 0, i32 0, i32 0
  %48 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %47, align 8
  %49 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  %50 = icmp eq %"class.WTF::StringImpl"* %48, %49
  br i1 %50, label %51, label %56

51:                                               ; preds = %46
  %52 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %44, i64 0, i32 4, i32 0, i32 0, i32 0
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %52, align 8
  %54 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %55 = icmp eq %"class.WTF::StringImpl"* %53, %54
  br i1 %55, label %59, label %56

56:                                               ; preds = %51, %46
  %57 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %42, i64 1
  %58 = icmp eq %"class.blink::Attribute"* %57, %34
  br i1 %58, label %63, label %41

59:                                               ; preds = %51, %41
  %60 = icmp eq %"class.blink::Attribute"* %42, null
  br i1 %60, label %63, label %61

61:                                               ; preds = %59
  %62 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %42, i64 0, i32 1
  br label %65

63:                                               ; preds = %56, %59, %30, %8
  %64 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %65

65:                                               ; preds = %61, %63
  %66 = phi %"class.WTF::AtomicString"* [ %64, %63 ], [ %62, %61 ]
  %67 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %66, i64 0, i32 0, i32 0, i32 0
  %68 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %67, align 8
  %69 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** bitcast (%"class.WTF::StaticSingleton"* @_ZZNK5blink19SVGAnimationElement10IsAdditiveEvE5s_sum to %"class.WTF::StringImpl"**), align 8
  %70 = icmp eq %"class.WTF::StringImpl"* %68, %69
  ret i1 %70
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink19SVGAnimationElement13IsAccumulatedEv(%"class.blink::SVGAnimationElement"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = load atomic i8, i8* bitcast (i64* @_ZGVZNK5blink19SVGAnimationElement13IsAccumulatedEvE5s_sum to i8*) acquire, align 8
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %8, !prof !5

4:                                                ; preds = %1
  %5 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZNK5blink19SVGAnimationElement13IsAccumulatedEvE5s_sum) #9
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %4
  tail call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* bitcast (%"class.WTF::StaticSingleton"* @_ZZNK5blink19SVGAnimationElement13IsAccumulatedEvE5s_sum to %"class.WTF::AtomicString"*), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0), i64 3) #9
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZNK5blink19SVGAnimationElement13IsAccumulatedEvE5s_sum) #9
  br label %8

8:                                                ; preds = %4, %7, %1
  %9 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names15kAccumulateAttrE, align 8
  %10 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %11 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %10, align 8
  %12 = icmp eq %"class.blink::ElementData"* %11, null
  br i1 %12, label %63, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %11, i64 0, i32 0, i32 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = and i32 %15, 1
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %25, label %18

18:                                               ; preds = %13
  %19 = bitcast %"class.blink::ElementData"* %11 to %"class.blink::UniqueElementData"*
  %20 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %11, i64 1, i32 1
  %21 = bitcast %"class.blink::Member.14"* %20 to %"class.blink::Attribute"**
  %22 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %21, align 8
  %23 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %19, i64 0, i32 2, i32 0, i32 0, i32 2
  %24 = load i32, i32* %23, align 4
  br label %30

25:                                               ; preds = %13
  %26 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %11, i64 1
  %27 = bitcast %"class.blink::ElementData"* %26 to %"class.blink::Attribute"*
  %28 = lshr i32 %15, 1
  %29 = and i32 %28, 268435455
  br label %30

30:                                               ; preds = %25, %18
  %31 = phi %"class.blink::Attribute"* [ %27, %25 ], [ %22, %18 ]
  %32 = phi i32 [ %29, %25 ], [ %24, %18 ]
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %31, i64 %33
  %35 = icmp eq i32 %32, 0
  br i1 %35, label %63, label %36

36:                                               ; preds = %30
  %37 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %9, i64 0, i32 0, i32 0
  %38 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %37, align 8
  %39 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %38, i64 0, i32 3, i32 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %38, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %41

41:                                               ; preds = %56, %36
  %42 = phi %"class.blink::Attribute"* [ %31, %36 ], [ %57, %56 ]
  %43 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %42, i64 0, i32 0, i32 0, i32 0
  %44 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %43, align 8
  %45 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %44, %38
  br i1 %45, label %59, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %44, i64 0, i32 3, i32 0, i32 0, i32 0
  %48 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %47, align 8
  %49 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  %50 = icmp eq %"class.WTF::StringImpl"* %48, %49
  br i1 %50, label %51, label %56

51:                                               ; preds = %46
  %52 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %44, i64 0, i32 4, i32 0, i32 0, i32 0
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %52, align 8
  %54 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %55 = icmp eq %"class.WTF::StringImpl"* %53, %54
  br i1 %55, label %59, label %56

56:                                               ; preds = %51, %46
  %57 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %42, i64 1
  %58 = icmp eq %"class.blink::Attribute"* %57, %34
  br i1 %58, label %63, label %41

59:                                               ; preds = %51, %41
  %60 = icmp eq %"class.blink::Attribute"* %42, null
  br i1 %60, label %63, label %61

61:                                               ; preds = %59
  %62 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %42, i64 0, i32 1
  br label %65

63:                                               ; preds = %56, %59, %30, %8
  %64 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %65

65:                                               ; preds = %61, %63
  %66 = phi %"class.WTF::AtomicString"* [ %64, %63 ], [ %62, %61 ]
  %67 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %66, i64 0, i32 0, i32 0, i32 0
  %68 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %67, align 8
  %69 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** bitcast (%"class.WTF::StaticSingleton"* @_ZZNK5blink19SVGAnimationElement13IsAccumulatedEvE5s_sum to %"class.WTF::StringImpl"**), align 8
  %70 = icmp eq %"class.WTF::StringImpl"* %68, %69
  ret i1 %70
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19SVGAnimationElement33CalculateKeyTimesForCalcModePacedEv(%"class.blink::SVGAnimationElement"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::Vector.62", align 8
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  %5 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 4
  %6 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 1
  %9 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 3
  br i1 %8, label %10, label %11

10:                                               ; preds = %1
  store i8 0, i8* %9, align 1
  br label %102

11:                                               ; preds = %1
  store i8 1, i8* %9, align 1
  %12 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 6
  %13 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 6, i32 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %25, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 6, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %21, label %20

20:                                               ; preds = %16
  store i32 0, i32* %17, align 4
  br label %21

21:                                               ; preds = %20, %16
  %22 = bitcast %"class.WTF::Vector.62"* %12 to i8**
  %23 = load i8*, i8** %22, align 8
  %24 = bitcast %"class.WTF::Vector.62"* %12 to i64*
  store atomic i64 0, i64* %24 monotonic, align 8
  store i32 0, i32* %13, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %23) #9
  br label %25

25:                                               ; preds = %21, %11
  %26 = bitcast %"class.WTF::Vector.62"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #9
  %27 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %2, i64 0, i32 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %2, i64 0, i32 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %2, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 0, i64 16, i1 false) #9
  %30 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #9
  store i32 0, i32* %3, align 4
  call void @_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIiEEvOT_(%"class.WTF::Vector.62"* nonnull %2, i32* nonnull dereferenceable(4) %3) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #9
  %31 = add i32 %7, -1
  %32 = bitcast float* %4 to i8*
  %33 = bitcast %"class.blink::SVGAnimationElement"* %0 to float (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)***
  br label %34

34:                                               ; preds = %58, %25
  %35 = phi i32 [ 0, %25 ], [ %38, %58 ]
  %36 = phi float [ 0.000000e+00, %25 ], [ %47, %58 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #9
  store float 0xFFFFFFFFE0000000, float* %4, align 4
  %37 = call dereferenceable(8) %"class.WTF::String"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.57"* %5, i32 %35) #9
  %38 = add nuw i32 %35, 1
  %39 = call dereferenceable(8) %"class.WTF::String"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.57"* %5, i32 %38) #9
  %40 = load float (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)**, float (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)*** %33, align 8
  %41 = getelementptr inbounds float (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)*, float (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)** %40, i64 178
  %42 = load float (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)*, float (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)** %41, align 8
  %43 = call float %42(%"class.blink::SVGAnimationElement"* %0, %"class.WTF::String"* dereferenceable(8) %37, %"class.WTF::String"* dereferenceable(8) %39) #9
  store float %43, float* %4, align 4
  %44 = fcmp olt float %43, 0.000000e+00
  br i1 %44, label %45, label %46

45:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #9
  br label %92

46:                                               ; preds = %34
  %47 = fadd float %36, %43
  %48 = load i32, i32* %29, align 4
  %49 = load i32, i32* %28, align 8
  %50 = icmp eq i32 %48, %49
  br i1 %50, label %57, label %51, !prof !2

51:                                               ; preds = %46
  %52 = load float*, float** %27, align 8
  %53 = zext i32 %48 to i64
  %54 = getelementptr inbounds float, float* %52, i64 %53
  store float %43, float* %54, align 4
  %55 = load i32, i32* %29, align 4
  %56 = add i32 %55, 1
  store i32 %56, i32* %29, align 4
  br label %58

57:                                               ; preds = %46
  call void @_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRfEEvOT_(%"class.WTF::Vector.62"* nonnull %2, float* nonnull dereferenceable(4) %4) #9
  br label %58

58:                                               ; preds = %57, %51
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #9
  %59 = icmp eq i32 %38, %31
  br i1 %59, label %60, label %34

60:                                               ; preds = %58
  %61 = fcmp une float %47, 0.000000e+00
  br i1 %61, label %62, label %92

62:                                               ; preds = %60
  %63 = load i32, i32* %29, align 4
  %64 = add i32 %63, -1
  %65 = icmp ugt i32 %64, 1
  br i1 %65, label %78, label %66

66:                                               ; preds = %78, %62
  %67 = phi i32 [ %64, %62 ], [ %90, %78 ]
  %68 = call dereferenceable(4) float* @_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* nonnull %2, i32 %67) #9
  store float 1.000000e+00, float* %68, align 4
  %69 = bitcast %"class.WTF::Vector.62"* %2 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = bitcast %"class.WTF::Vector.62"* %12 to i64*
  %72 = load i64, i64* %71, align 8
  store atomic i64 %72, i64* %69 monotonic, align 8
  store atomic i64 %70, i64* %71 monotonic, align 8
  %73 = load i32, i32* %13, align 4
  %74 = load i32, i32* %28, align 8
  store i32 %74, i32* %13, align 4
  store i32 %73, i32* %28, align 8
  %75 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 6, i32 0, i32 0, i32 2
  %76 = load i32, i32* %75, align 4
  %77 = load i32, i32* %29, align 4
  store i32 %77, i32* %75, align 4
  store i32 %76, i32* %29, align 4
  br label %92

78:                                               ; preds = %62, %78
  %79 = phi i32 [ %88, %78 ], [ 1, %62 ]
  %80 = add i32 %79, -1
  %81 = call dereferenceable(4) float* @_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* nonnull %2, i32 %80) #9
  %82 = load float, float* %81, align 4
  %83 = call dereferenceable(4) float* @_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* nonnull %2, i32 %79) #9
  %84 = load float, float* %83, align 4
  %85 = fdiv float %84, %47
  %86 = fadd float %82, %85
  %87 = call dereferenceable(4) float* @_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* nonnull %2, i32 %79) #9
  store float %86, float* %87, align 4
  %88 = add nuw i32 %79, 1
  %89 = load i32, i32* %29, align 4
  %90 = add i32 %89, -1
  %91 = icmp ult i32 %88, %90
  br i1 %91, label %78, label %66

92:                                               ; preds = %45, %60, %66
  %93 = load float*, float** %27, align 8
  %94 = icmp eq float* %93, null
  %95 = bitcast float* %93 to i8*
  br i1 %94, label %101, label %96, !prof !3

96:                                               ; preds = %92
  %97 = load i32, i32* %29, align 4
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %100, label %99, !prof !2

99:                                               ; preds = %96
  store i32 0, i32* %29, align 4
  br label %100

100:                                              ; preds = %99, %96
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %95) #9
  store float* null, float** %27, align 8
  br label %101

101:                                              ; preds = %92, %100
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #9
  br label %102

102:                                              ; preds = %101, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink19SVGAnimationElement22CalculateKeyTimesIndexEf(%"class.blink::SVGAnimationElement"*, float) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 3
  %4 = load i8, i8* %3, align 1, !range !4
  %5 = icmp eq i8 %4, 0
  %6 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 6
  %7 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 5
  %8 = select i1 %5, %"class.WTF::Vector.62"* %7, %"class.WTF::Vector.62"* %6
  %9 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %8, i64 0, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %36, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 11
  %14 = load i32, i32* %13, align 8
  %15 = icmp ne i32 %14, 0
  %16 = zext i1 %15 to i32
  %17 = sub nuw i32 %10, %16
  %18 = icmp ugt i32 %17, 1
  br i1 %18, label %19, label %36

19:                                               ; preds = %12
  %20 = icmp eq i8 %4, 0
  %21 = select i1 %20, %"class.WTF::Vector.62"* %7, %"class.WTF::Vector.62"* %6
  %22 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* %21, i32 1) #9
  %23 = load float, float* %22, align 4
  %24 = fcmp ogt float %23, %1
  br i1 %24, label %36, label %25

25:                                               ; preds = %19, %29
  %26 = phi i32 [ %27, %29 ], [ 1, %19 ]
  %27 = add nuw i32 %26, 1
  %28 = icmp eq i32 %27, %17
  br i1 %28, label %36, label %29

29:                                               ; preds = %25
  %30 = load i8, i8* %3, align 1, !range !4
  %31 = icmp eq i8 %30, 0
  %32 = select i1 %31, %"class.WTF::Vector.62"* %7, %"class.WTF::Vector.62"* %6
  %33 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* %32, i32 %27) #9
  %34 = load float, float* %33, align 4
  %35 = fcmp ogt float %34, %1
  br i1 %35, label %36, label %25

36:                                               ; preds = %25, %29, %19, %2, %12
  %37 = phi i32 [ 1, %12 ], [ 1, %2 ], [ 1, %19 ], [ %27, %29 ], [ %17, %25 ]
  %38 = add i32 %37, -1
  ret i32 %38
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK5blink19SVGAnimationElement25CalculatePercentForSplineEfj(%"class.blink::SVGAnimationElement"*, float, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.gfx::CubicBezier", align 8
  %5 = bitcast %"class.gfx::CubicBezier"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %5) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -1, i64 168, i1 false)
  %6 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 8
  %7 = tail call dereferenceable(168) %"class.gfx::CubicBezier"* @_ZNK3WTF6VectorIN3gfx11CubicBezierELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.67"* %6, i32 %2) #9
  call void @_ZN3gfx11CubicBezierC1ERKS0_(%"class.gfx::CubicBezier"* nonnull %4, %"class.gfx::CubicBezier"* dereferenceable(168) %7) #9
  %8 = bitcast %"class.blink::SVGAnimationElement"* %0 to %"class.blink::SVGSMILElement"*
  %9 = call i64 @_ZNK5blink14SVGSMILElement14SimpleDurationEv(%"class.blink::SVGSMILElement"* %8) #9
  %10 = icmp slt i64 %9, 9223372036854775806
  %11 = fpext float %1 to double
  br i1 %10, label %12, label %15

12:                                               ; preds = %3
  %13 = add i64 %9, -9223372036854775807
  %14 = icmp ult i64 %13, 2
  br i1 %14, label %20, label %15

15:                                               ; preds = %3, %12
  %16 = phi i64 [ %9, %12 ], [ 100000000, %3 ]
  %17 = sitofp i64 %16 to double
  %18 = fdiv double %17, 1.000000e+06
  %19 = fmul double %18, 2.000000e+02
  br label %20

20:                                               ; preds = %12, %15
  %21 = phi double [ %19, %15 ], [ 0xFFF0000000000000, %12 ]
  %22 = fdiv double 1.000000e+00, %21
  %23 = fcmp olt float %1, 0.000000e+00
  br i1 %23, label %24, label %29

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %4, i64 0, i32 6
  %26 = load double, double* %25, align 8
  %27 = fmul double %26, %11
  %28 = fadd double %27, 0.000000e+00
  br label %50

29:                                               ; preds = %20
  %30 = fcmp ogt float %1, 1.000000e+00
  br i1 %30, label %31, label %37

31:                                               ; preds = %29
  %32 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %4, i64 0, i32 7
  %33 = load double, double* %32, align 8
  %34 = fadd double %11, -1.000000e+00
  %35 = fmul double %34, %33
  %36 = fadd double %35, 1.000000e+00
  br label %50

37:                                               ; preds = %29
  %38 = call double @_ZNK3gfx11CubicBezier11SolveCurveXEdd(%"class.gfx::CubicBezier"* nonnull %4, double %11, double %22) #9
  %39 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %4, i64 0, i32 3
  %40 = load double, double* %39, align 8
  %41 = fmul double %38, %40
  %42 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %4, i64 0, i32 4
  %43 = load double, double* %42, align 8
  %44 = fadd double %41, %43
  %45 = fmul double %38, %44
  %46 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %4, i64 0, i32 5
  %47 = load double, double* %46, align 8
  %48 = fadd double %47, %45
  %49 = fmul double %38, %48
  br label %50

50:                                               ; preds = %24, %31, %37
  %51 = phi double [ %28, %24 ], [ %36, %31 ], [ %49, %37 ]
  %52 = fcmp ult double %51, 0x47EFFFFFE0000000
  br i1 %52, label %53, label %57

53:                                               ; preds = %50
  %54 = fcmp ole double %51, 0xC7EFFFFFE0000000
  %55 = select i1 %54, double 0xC7EFFFFFE0000000, double %51
  %56 = fptrunc double %55 to float
  br label %57

57:                                               ; preds = %50, %53
  %58 = phi float [ %56, %53 ], [ 0x47EFFFFFE0000000, %50 ]
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %5) #9
  ret float %58
}

declare void @_ZN3gfx11CubicBezierC1ERKS0_(%"class.gfx::CubicBezier"*, %"class.gfx::CubicBezier"* dereferenceable(168)) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK5blink19SVGAnimationElement29CalculatePercentFromKeyPointsEf(%"class.blink::SVGAnimationElement"*, float) local_unnamed_addr #0 align 2 {
  %3 = fcmp oeq float %1, 1.000000e+00
  br i1 %3, label %4, label %11

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 7
  %6 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 7, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = add i32 %7, -1
  %9 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* %5, i32 %8) #9
  %10 = load float, float* %9, align 4
  br label %77

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 3
  %13 = load i8, i8* %12, align 1, !range !4
  %14 = icmp eq i8 %13, 0
  %15 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 6
  %16 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 5
  %17 = select i1 %14, %"class.WTF::Vector.62"* %16, %"class.WTF::Vector.62"* %15
  %18 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %17, i64 0, i32 0, i32 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %43, label %21

21:                                               ; preds = %11
  %22 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 11
  %23 = load i32, i32* %22, align 8
  %24 = icmp ne i32 %23, 0
  %25 = zext i1 %24 to i32
  %26 = sub nuw i32 %19, %25
  %27 = icmp ugt i32 %26, 1
  br i1 %27, label %28, label %43

28:                                               ; preds = %21
  %29 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* %17, i32 1) #9
  %30 = load float, float* %29, align 4
  %31 = fcmp ogt float %30, %1
  br i1 %31, label %43, label %32

32:                                               ; preds = %28, %36
  %33 = phi i32 [ %34, %36 ], [ 1, %28 ]
  %34 = add nuw i32 %33, 1
  %35 = icmp eq i32 %34, %26
  br i1 %35, label %43, label %36

36:                                               ; preds = %32
  %37 = load i8, i8* %12, align 1, !range !4
  %38 = icmp eq i8 %37, 0
  %39 = select i1 %38, %"class.WTF::Vector.62"* %16, %"class.WTF::Vector.62"* %15
  %40 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* %39, i32 %34) #9
  %41 = load float, float* %40, align 4
  %42 = fcmp ogt float %41, %1
  br i1 %42, label %43, label %32

43:                                               ; preds = %32, %36, %28, %11, %21
  %44 = phi i32 [ 1, %21 ], [ 1, %11 ], [ 1, %28 ], [ %26, %32 ], [ %34, %36 ]
  %45 = add i32 %44, -1
  %46 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 7
  %47 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* %46, i32 %45) #9
  %48 = load float, float* %47, align 4
  %49 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 11
  %50 = load i32, i32* %49, align 8
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %77, label %52

52:                                               ; preds = %43
  %53 = load i8, i8* %12, align 1, !range !4
  %54 = icmp eq i8 %53, 0
  %55 = select i1 %54, %"class.WTF::Vector.62"* %16, %"class.WTF::Vector.62"* %15
  %56 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* %55, i32 %45) #9
  %57 = load float, float* %56, align 4
  %58 = load i8, i8* %12, align 1, !range !4
  %59 = icmp eq i8 %58, 0
  %60 = select i1 %59, %"class.WTF::Vector.62"* %16, %"class.WTF::Vector.62"* %15
  %61 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* %60, i32 %44) #9
  %62 = load float, float* %61, align 4
  %63 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* %46, i32 %44) #9
  %64 = load float, float* %63, align 4
  %65 = fsub float %1, %57
  %66 = fsub float %62, %57
  %67 = fdiv float %65, %66
  %68 = load i32, i32* %49, align 8
  %69 = icmp eq i32 %68, 3
  br i1 %69, label %70, label %72

70:                                               ; preds = %52
  %71 = tail call float @_ZNK5blink19SVGAnimationElement25CalculatePercentForSplineEfj(%"class.blink::SVGAnimationElement"* %0, float %67, i32 %45)
  br label %72

72:                                               ; preds = %70, %52
  %73 = phi float [ %71, %70 ], [ %67, %52 ]
  %74 = fsub float %64, %48
  %75 = fmul float %74, %73
  %76 = fadd float %48, %75
  br label %77

77:                                               ; preds = %72, %43, %4
  %78 = phi float [ %10, %4 ], [ %76, %72 ], [ %48, %43 ]
  ret float %78
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK5blink19SVGAnimationElement25CalculatePercentForFromToEf(%"class.blink::SVGAnimationElement"*, float) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 11
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %21

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 3
  %8 = load i8, i8* %7, align 1, !range !4
  %9 = icmp eq i8 %8, 0
  %10 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 6
  %11 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 5
  %12 = select i1 %9, %"class.WTF::Vector.62"* %11, %"class.WTF::Vector.62"* %10
  %13 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %12, i64 0, i32 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 2
  br i1 %15, label %16, label %21

16:                                               ; preds = %6
  %17 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* %12, i32 1) #9
  %18 = load float, float* %17, align 4
  %19 = fcmp olt float %18, %1
  %20 = uitofp i1 %19 to float
  br label %21

21:                                               ; preds = %2, %6, %16
  %22 = phi float [ %20, %16 ], [ %1, %6 ], [ %1, %2 ]
  ret float %22
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK5blink19SVGAnimationElement26CurrentValuesFromKeyPointsEfRN3WTF6StringES3_(%"class.blink::SVGAnimationElement"*, float, %"class.WTF::String"* nocapture dereferenceable(8), %"class.WTF::String"* nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %5 = tail call float @_ZNK5blink19SVGAnimationElement29CalculatePercentFromKeyPointsEf(%"class.blink::SVGAnimationElement"* %0, float %1)
  %6 = fcmp oeq float %5, 1.000000e+00
  %7 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 4
  %8 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  br i1 %6, label %10, label %12

10:                                               ; preds = %4
  %11 = add i32 %9, -2
  br label %17

12:                                               ; preds = %4
  %13 = add i32 %9, -1
  %14 = uitofp i32 %13 to float
  %15 = fmul float %5, %14
  %16 = fptoui float %15 to i32
  br label %17

17:                                               ; preds = %12, %10
  %18 = phi i32 [ %11, %10 ], [ %16, %12 ]
  %19 = tail call dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.57"* %7, i32 %18) #9
  %20 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %19, i64 0, i32 0, i32 0
  %21 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %20, align 8
  %22 = icmp eq %"class.WTF::StringImpl"* %21, null
  br i1 %22, label %40, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = and i32 %25, 2
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %40

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = zext i32 %30 to i33
  %32 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %31, i33 1) #9
  %33 = extractvalue { i33, i1 } %32, 1
  %34 = extractvalue { i33, i1 } %32, 0
  %35 = icmp slt i33 %34, 0
  %36 = or i1 %33, %35
  br i1 %36, label %37, label %38, !prof !2

37:                                               ; preds = %28
  tail call void @llvm.trap() #9
  unreachable

38:                                               ; preds = %28
  %39 = trunc i33 %34 to i32
  store i32 %39, i32* %29, align 4
  br label %40

40:                                               ; preds = %38, %23, %17
  %41 = ptrtoint %"class.WTF::StringImpl"* %21 to i64
  %42 = bitcast %"class.WTF::String"* %2 to i64*
  %43 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %44 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %43, align 8
  store i64 %41, i64* %42, align 8
  %45 = icmp eq %"class.WTF::StringImpl"* %44, null
  br i1 %45, label %59, label %46

46:                                               ; preds = %40
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load atomic i32, i32* %47 monotonic, align 4
  %49 = and i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 0
  %52 = load i32, i32* %51, align 4
  br i1 %50, label %53, label %55

53:                                               ; preds = %46
  %54 = add i32 %52, -1
  store i32 %54, i32* %51, align 4
  br label %55

55:                                               ; preds = %53, %46
  %56 = phi i32 [ %54, %53 ], [ %52, %46 ]
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %55
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %44) #9
  br label %59

59:                                               ; preds = %40, %55, %58
  %60 = add i32 %18, 1
  %61 = tail call dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.57"* %7, i32 %60) #9
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %61, i64 0, i32 0, i32 0
  %63 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %62, align 8
  %64 = icmp eq %"class.WTF::StringImpl"* %63, null
  br i1 %64, label %82, label %65

65:                                               ; preds = %59
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %63, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = load atomic i32, i32* %66 monotonic, align 4
  %68 = and i32 %67, 2
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %82

70:                                               ; preds = %65
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %63, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  %73 = zext i32 %72 to i33
  %74 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %73, i33 1) #9
  %75 = extractvalue { i33, i1 } %74, 1
  %76 = extractvalue { i33, i1 } %74, 0
  %77 = icmp slt i33 %76, 0
  %78 = or i1 %75, %77
  br i1 %78, label %79, label %80, !prof !2

79:                                               ; preds = %70
  tail call void @llvm.trap() #9
  unreachable

80:                                               ; preds = %70
  %81 = trunc i33 %76 to i32
  store i32 %81, i32* %71, align 4
  br label %82

82:                                               ; preds = %80, %65, %59
  %83 = ptrtoint %"class.WTF::StringImpl"* %63 to i64
  %84 = bitcast %"class.WTF::String"* %3 to i64*
  %85 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %86 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %85, align 8
  store i64 %83, i64* %84, align 8
  %87 = icmp eq %"class.WTF::StringImpl"* %86, null
  br i1 %87, label %101, label %88

88:                                               ; preds = %82
  %89 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = load atomic i32, i32* %89 monotonic, align 4
  %91 = and i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 0
  %94 = load i32, i32* %93, align 4
  br i1 %92, label %95, label %97

95:                                               ; preds = %88
  %96 = add i32 %94, -1
  store i32 %96, i32* %93, align 4
  br label %97

97:                                               ; preds = %95, %88
  %98 = phi i32 [ %96, %95 ], [ %94, %88 ]
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %101

100:                                              ; preds = %97
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %86) #9
  br label %101

101:                                              ; preds = %82, %97, %100
  ret float %5
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK5blink19SVGAnimationElement31CurrentValuesForValuesAnimationEfRN3WTF6StringES3_(%"class.blink::SVGAnimationElement"*, float, %"class.WTF::String"* nocapture dereferenceable(8), %"class.WTF::String"* nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 4
  %6 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = fcmp oeq float %1, 1.000000e+00
  %9 = icmp eq i32 %7, 1
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %94

11:                                               ; preds = %4
  %12 = add i32 %7, -1
  %13 = tail call dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.57"* %5, i32 %12) #9
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %13, i64 0, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %34, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = and i32 %19, 2
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %34

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i33
  %26 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %25, i33 1) #9
  %27 = extractvalue { i33, i1 } %26, 1
  %28 = extractvalue { i33, i1 } %26, 0
  %29 = icmp slt i33 %28, 0
  %30 = or i1 %27, %29
  br i1 %30, label %31, label %32, !prof !2

31:                                               ; preds = %22
  tail call void @llvm.trap() #9
  unreachable

32:                                               ; preds = %22
  %33 = trunc i33 %28 to i32
  store i32 %33, i32* %23, align 4
  br label %34

34:                                               ; preds = %32, %17, %11
  %35 = ptrtoint %"class.WTF::StringImpl"* %15 to i64
  %36 = bitcast %"class.WTF::String"* %2 to i64*
  %37 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %38 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %37, align 8
  store i64 %35, i64* %36, align 8
  %39 = icmp eq %"class.WTF::StringImpl"* %38, null
  br i1 %39, label %53, label %40

40:                                               ; preds = %34
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = and i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  br i1 %44, label %47, label %49

47:                                               ; preds = %40
  %48 = add i32 %46, -1
  store i32 %48, i32* %45, align 4
  br label %49

49:                                               ; preds = %47, %40
  %50 = phi i32 [ %48, %47 ], [ %46, %40 ]
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %53

52:                                               ; preds = %49
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %38) #9
  br label %53

53:                                               ; preds = %34, %49, %52
  %54 = tail call dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.57"* %5, i32 %12) #9
  %55 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %54, i64 0, i32 0, i32 0
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %55, align 8
  %57 = icmp eq %"class.WTF::StringImpl"* %56, null
  br i1 %57, label %75, label %58

58:                                               ; preds = %53
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %56, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %60 = load atomic i32, i32* %59 monotonic, align 4
  %61 = and i32 %60, 2
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %75

63:                                               ; preds = %58
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %56, i64 0, i32 0
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i33
  %67 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %66, i33 1) #9
  %68 = extractvalue { i33, i1 } %67, 1
  %69 = extractvalue { i33, i1 } %67, 0
  %70 = icmp slt i33 %69, 0
  %71 = or i1 %68, %70
  br i1 %71, label %72, label %73, !prof !2

72:                                               ; preds = %63
  tail call void @llvm.trap() #9
  unreachable

73:                                               ; preds = %63
  %74 = trunc i33 %69 to i32
  store i32 %74, i32* %64, align 4
  br label %75

75:                                               ; preds = %73, %58, %53
  %76 = ptrtoint %"class.WTF::StringImpl"* %56 to i64
  %77 = bitcast %"class.WTF::String"* %3 to i64*
  %78 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %79 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %78, align 8
  store i64 %76, i64* %77, align 8
  %80 = icmp eq %"class.WTF::StringImpl"* %79, null
  br i1 %80, label %387, label %81

81:                                               ; preds = %75
  %82 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %79, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %83 = load atomic i32, i32* %82 monotonic, align 4
  %84 = and i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %79, i64 0, i32 0
  %87 = load i32, i32* %86, align 4
  br i1 %85, label %88, label %90

88:                                               ; preds = %81
  %89 = add i32 %87, -1
  store i32 %89, i32* %86, align 4
  br label %90

90:                                               ; preds = %88, %81
  %91 = phi i32 [ %89, %88 ], [ %87, %81 ]
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %387

93:                                               ; preds = %90
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %79) #9
  br label %387

94:                                               ; preds = %4
  %95 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 11
  %96 = load i32, i32* %95, align 8
  %97 = icmp eq %"class.blink::SVGAnimationElement"* %0, null
  br i1 %97, label %134, label %98

98:                                               ; preds = %94
  %99 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %100 = load i32, i32* %99, align 8
  %101 = and i32 %100, 48
  %102 = icmp eq i32 %101, 32
  br i1 %102, label %103, label %134

103:                                              ; preds = %98
  %104 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %105 = load %"class.blink::SVGQualifiedName"*, %"class.blink::SVGQualifiedName"** @_ZN5blink9svg_names11kAnimateTagE, align 8
  %106 = getelementptr inbounds %"class.blink::SVGQualifiedName", %"class.blink::SVGQualifiedName"* %105, i64 0, i32 0, i32 0, i32 0
  %107 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %106, align 8
  %108 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %104, i64 1, i32 2
  %109 = bitcast %"class.blink::Member"* %108 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %110 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %109, align 8
  %111 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %110, i64 0, i32 3, i32 0, i32 0, i32 0
  %112 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %111, align 8
  %113 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %107, i64 0, i32 3, i32 0, i32 0, i32 0
  %114 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %113, align 8
  %115 = icmp eq %"class.WTF::StringImpl"* %112, %114
  br i1 %115, label %130, label %116

116:                                              ; preds = %103
  %117 = load %"class.blink::SVGQualifiedName"*, %"class.blink::SVGQualifiedName"** @_ZN5blink9svg_names20kAnimateTransformTagE, align 8
  %118 = getelementptr inbounds %"class.blink::SVGQualifiedName", %"class.blink::SVGQualifiedName"* %117, i64 0, i32 0, i32 0, i32 0
  %119 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %118, align 8
  %120 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %119, i64 0, i32 3, i32 0, i32 0, i32 0
  %121 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %120, align 8
  %122 = icmp eq %"class.WTF::StringImpl"* %112, %121
  br i1 %122, label %130, label %123

123:                                              ; preds = %116
  %124 = load %"class.blink::SVGQualifiedName"*, %"class.blink::SVGQualifiedName"** @_ZN5blink9svg_names7kSetTagE, align 8
  %125 = getelementptr inbounds %"class.blink::SVGQualifiedName", %"class.blink::SVGQualifiedName"* %124, i64 0, i32 0, i32 0, i32 0
  %126 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %125, align 8
  %127 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %126, i64 0, i32 3, i32 0, i32 0, i32 0
  %128 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %127, align 8
  %129 = icmp eq %"class.WTF::StringImpl"* %112, %128
  br i1 %129, label %130, label %134

130:                                              ; preds = %123, %116, %103
  %131 = bitcast %"class.blink::SVGAnimationElement"* %0 to %"class.blink::SVGAnimateElement"*
  %132 = tail call zeroext i1 @_ZNK5blink17SVGAnimateElement36AnimatedPropertyTypeSupportsAdditionEv(%"class.blink::SVGAnimateElement"* nonnull %131) #9
  %133 = select i1 %132, i32 %96, i32 0
  br label %134

134:                                              ; preds = %98, %94, %123, %130
  %135 = phi i32 [ %133, %130 ], [ %96, %123 ], [ %96, %94 ], [ %96, %98 ]
  %136 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 7, i32 0, i32 0, i32 2
  %137 = load i32, i32* %136, align 4
  %138 = icmp ne i32 %137, 0
  %139 = icmp ne i32 %135, 2
  %140 = and i1 %139, %138
  br i1 %140, label %141, label %143

141:                                              ; preds = %134
  %142 = tail call float @_ZNK5blink19SVGAnimationElement26CurrentValuesFromKeyPointsEfRN3WTF6StringES3_(%"class.blink::SVGAnimationElement"* %0, float %1, %"class.WTF::String"* dereferenceable(8) %2, %"class.WTF::String"* dereferenceable(8) %3)
  br label %387

143:                                              ; preds = %134
  %144 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 3
  %145 = load i8, i8* %144, align 1, !range !4
  %146 = icmp eq i8 %145, 0
  %147 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 6
  %148 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 5
  %149 = select i1 %146, %"class.WTF::Vector.62"* %148, %"class.WTF::Vector.62"* %147
  %150 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %149, i64 0, i32 0, i32 0, i32 2
  %151 = load i32, i32* %150, align 4
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %174, label %153

153:                                              ; preds = %143
  %154 = load i32, i32* %95, align 8
  %155 = icmp ne i32 %154, 0
  %156 = zext i1 %155 to i32
  %157 = sub nuw i32 %151, %156
  %158 = icmp ugt i32 %157, 1
  br i1 %158, label %159, label %174

159:                                              ; preds = %153
  %160 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* %149, i32 1) #9
  %161 = load float, float* %160, align 4
  %162 = fcmp ogt float %161, %1
  br i1 %162, label %174, label %163

163:                                              ; preds = %159, %167
  %164 = phi i32 [ %165, %167 ], [ 1, %159 ]
  %165 = add nuw i32 %164, 1
  %166 = icmp eq i32 %165, %157
  br i1 %166, label %174, label %167

167:                                              ; preds = %163
  %168 = load i8, i8* %144, align 1, !range !4
  %169 = icmp eq i8 %168, 0
  %170 = select i1 %169, %"class.WTF::Vector.62"* %148, %"class.WTF::Vector.62"* %147
  %171 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* %170, i32 %165) #9
  %172 = load float, float* %171, align 4
  %173 = fcmp ogt float %172, %1
  br i1 %173, label %174, label %163

174:                                              ; preds = %163, %167, %159, %143, %153
  %175 = phi i32 [ 1, %153 ], [ 1, %143 ], [ 1, %159 ], [ %157, %163 ], [ %165, %167 ]
  %176 = add i32 %175, -1
  %177 = icmp eq i32 %135, 0
  br i1 %177, label %178, label %266

178:                                              ; preds = %174
  br i1 %152, label %179, label %183

179:                                              ; preds = %178
  %180 = uitofp i32 %7 to float
  %181 = fmul float %180, %1
  %182 = fptoui float %181 to i32
  br label %183

183:                                              ; preds = %178, %179
  %184 = phi i32 [ %176, %178 ], [ %182, %179 ]
  %185 = tail call dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.57"* %5, i32 %184) #9
  %186 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %185, i64 0, i32 0, i32 0
  %187 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %186, align 8
  %188 = icmp eq %"class.WTF::StringImpl"* %187, null
  br i1 %188, label %206, label %189

189:                                              ; preds = %183
  %190 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %187, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %191 = load atomic i32, i32* %190 monotonic, align 4
  %192 = and i32 %191, 2
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %194, label %206

194:                                              ; preds = %189
  %195 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %187, i64 0, i32 0
  %196 = load i32, i32* %195, align 4
  %197 = zext i32 %196 to i33
  %198 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %197, i33 1) #9
  %199 = extractvalue { i33, i1 } %198, 1
  %200 = extractvalue { i33, i1 } %198, 0
  %201 = icmp slt i33 %200, 0
  %202 = or i1 %199, %201
  br i1 %202, label %203, label %204, !prof !2

203:                                              ; preds = %194
  tail call void @llvm.trap() #9
  unreachable

204:                                              ; preds = %194
  %205 = trunc i33 %200 to i32
  store i32 %205, i32* %195, align 4
  br label %206

206:                                              ; preds = %204, %189, %183
  %207 = ptrtoint %"class.WTF::StringImpl"* %187 to i64
  %208 = bitcast %"class.WTF::String"* %2 to i64*
  %209 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %210 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %209, align 8
  store i64 %207, i64* %208, align 8
  %211 = icmp eq %"class.WTF::StringImpl"* %210, null
  br i1 %211, label %225, label %212

212:                                              ; preds = %206
  %213 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %210, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %214 = load atomic i32, i32* %213 monotonic, align 4
  %215 = and i32 %214, 2
  %216 = icmp eq i32 %215, 0
  %217 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %210, i64 0, i32 0
  %218 = load i32, i32* %217, align 4
  br i1 %216, label %219, label %221

219:                                              ; preds = %212
  %220 = add i32 %218, -1
  store i32 %220, i32* %217, align 4
  br label %221

221:                                              ; preds = %219, %212
  %222 = phi i32 [ %220, %219 ], [ %218, %212 ]
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %224, label %225

224:                                              ; preds = %221
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %210) #9
  br label %225

225:                                              ; preds = %206, %221, %224
  %226 = tail call dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.57"* %5, i32 %184) #9
  %227 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %226, i64 0, i32 0, i32 0
  %228 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %227, align 8
  %229 = icmp eq %"class.WTF::StringImpl"* %228, null
  br i1 %229, label %247, label %230

230:                                              ; preds = %225
  %231 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %228, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %232 = load atomic i32, i32* %231 monotonic, align 4
  %233 = and i32 %232, 2
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %235, label %247

235:                                              ; preds = %230
  %236 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %228, i64 0, i32 0
  %237 = load i32, i32* %236, align 4
  %238 = zext i32 %237 to i33
  %239 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %238, i33 1) #9
  %240 = extractvalue { i33, i1 } %239, 1
  %241 = extractvalue { i33, i1 } %239, 0
  %242 = icmp slt i33 %241, 0
  %243 = or i1 %240, %242
  br i1 %243, label %244, label %245, !prof !2

244:                                              ; preds = %235
  tail call void @llvm.trap() #9
  unreachable

245:                                              ; preds = %235
  %246 = trunc i33 %241 to i32
  store i32 %246, i32* %236, align 4
  br label %247

247:                                              ; preds = %245, %230, %225
  %248 = ptrtoint %"class.WTF::StringImpl"* %228 to i64
  %249 = bitcast %"class.WTF::String"* %3 to i64*
  %250 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %251 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %250, align 8
  store i64 %248, i64* %249, align 8
  %252 = icmp eq %"class.WTF::StringImpl"* %251, null
  br i1 %252, label %387, label %253

253:                                              ; preds = %247
  %254 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %251, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %255 = load atomic i32, i32* %254 monotonic, align 4
  %256 = and i32 %255, 2
  %257 = icmp eq i32 %256, 0
  %258 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %251, i64 0, i32 0
  %259 = load i32, i32* %258, align 4
  br i1 %257, label %260, label %262

260:                                              ; preds = %253
  %261 = add i32 %259, -1
  store i32 %261, i32* %258, align 4
  br label %262

262:                                              ; preds = %260, %253
  %263 = phi i32 [ %261, %260 ], [ %259, %253 ]
  %264 = icmp eq i32 %263, 0
  br i1 %264, label %265, label %387

265:                                              ; preds = %262
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %251) #9
  br label %387

266:                                              ; preds = %174
  br i1 %152, label %279, label %267

267:                                              ; preds = %266
  %268 = load i8, i8* %144, align 1, !range !4
  %269 = icmp eq i8 %268, 0
  %270 = select i1 %269, %"class.WTF::Vector.62"* %148, %"class.WTF::Vector.62"* %147
  %271 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* %270, i32 %176) #9
  %272 = load float, float* %271, align 4
  %273 = load i8, i8* %144, align 1, !range !4
  %274 = icmp eq i8 %273, 0
  %275 = select i1 %274, %"class.WTF::Vector.62"* %148, %"class.WTF::Vector.62"* %147
  %276 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* %275, i32 %175) #9
  %277 = load float, float* %276, align 4
  %278 = add i32 %7, -1
  br label %290

279:                                              ; preds = %266
  %280 = add i32 %7, -1
  %281 = uitofp i32 %280 to float
  %282 = fmul float %281, %1
  %283 = tail call float @llvm.floor.f32(float %282)
  %284 = fptoui float %283 to i32
  %285 = uitofp i32 %284 to float
  %286 = fdiv float %285, %281
  %287 = add i32 %284, 1
  %288 = uitofp i32 %287 to float
  %289 = fdiv float %288, %281
  br label %290

290:                                              ; preds = %279, %267
  %291 = phi i32 [ %280, %279 ], [ %278, %267 ]
  %292 = phi i32 [ %284, %279 ], [ %176, %267 ]
  %293 = phi float [ %286, %279 ], [ %272, %267 ]
  %294 = phi float [ %289, %279 ], [ %277, %267 ]
  %295 = icmp eq i32 %292, %291
  %296 = zext i1 %295 to i32
  %297 = sub i32 %292, %296
  %298 = tail call dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.57"* %5, i32 %297) #9
  %299 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %298, i64 0, i32 0, i32 0
  %300 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %299, align 8
  %301 = icmp eq %"class.WTF::StringImpl"* %300, null
  br i1 %301, label %319, label %302

302:                                              ; preds = %290
  %303 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %300, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %304 = load atomic i32, i32* %303 monotonic, align 4
  %305 = and i32 %304, 2
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %307, label %319

307:                                              ; preds = %302
  %308 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %300, i64 0, i32 0
  %309 = load i32, i32* %308, align 4
  %310 = zext i32 %309 to i33
  %311 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %310, i33 1) #9
  %312 = extractvalue { i33, i1 } %311, 1
  %313 = extractvalue { i33, i1 } %311, 0
  %314 = icmp slt i33 %313, 0
  %315 = or i1 %312, %314
  br i1 %315, label %316, label %317, !prof !2

316:                                              ; preds = %307
  tail call void @llvm.trap() #9
  unreachable

317:                                              ; preds = %307
  %318 = trunc i33 %313 to i32
  store i32 %318, i32* %308, align 4
  br label %319

319:                                              ; preds = %317, %302, %290
  %320 = ptrtoint %"class.WTF::StringImpl"* %300 to i64
  %321 = bitcast %"class.WTF::String"* %2 to i64*
  %322 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %323 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %322, align 8
  store i64 %320, i64* %321, align 8
  %324 = icmp eq %"class.WTF::StringImpl"* %323, null
  br i1 %324, label %338, label %325

325:                                              ; preds = %319
  %326 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %323, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %327 = load atomic i32, i32* %326 monotonic, align 4
  %328 = and i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %323, i64 0, i32 0
  %331 = load i32, i32* %330, align 4
  br i1 %329, label %332, label %334

332:                                              ; preds = %325
  %333 = add i32 %331, -1
  store i32 %333, i32* %330, align 4
  br label %334

334:                                              ; preds = %332, %325
  %335 = phi i32 [ %333, %332 ], [ %331, %325 ]
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %337, label %338

337:                                              ; preds = %334
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %323) #9
  br label %338

338:                                              ; preds = %319, %334, %337
  %339 = add i32 %297, 1
  %340 = tail call dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.57"* %5, i32 %339) #9
  %341 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %340, i64 0, i32 0, i32 0
  %342 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %341, align 8
  %343 = icmp eq %"class.WTF::StringImpl"* %342, null
  br i1 %343, label %361, label %344

344:                                              ; preds = %338
  %345 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %342, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %346 = load atomic i32, i32* %345 monotonic, align 4
  %347 = and i32 %346, 2
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %349, label %361

349:                                              ; preds = %344
  %350 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %342, i64 0, i32 0
  %351 = load i32, i32* %350, align 4
  %352 = zext i32 %351 to i33
  %353 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %352, i33 1) #9
  %354 = extractvalue { i33, i1 } %353, 1
  %355 = extractvalue { i33, i1 } %353, 0
  %356 = icmp slt i33 %355, 0
  %357 = or i1 %354, %356
  br i1 %357, label %358, label %359, !prof !2

358:                                              ; preds = %349
  tail call void @llvm.trap() #9
  unreachable

359:                                              ; preds = %349
  %360 = trunc i33 %355 to i32
  store i32 %360, i32* %350, align 4
  br label %361

361:                                              ; preds = %359, %344, %338
  %362 = ptrtoint %"class.WTF::StringImpl"* %342 to i64
  %363 = bitcast %"class.WTF::String"* %3 to i64*
  %364 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %365 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %364, align 8
  store i64 %362, i64* %363, align 8
  %366 = icmp eq %"class.WTF::StringImpl"* %365, null
  br i1 %366, label %380, label %367

367:                                              ; preds = %361
  %368 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %365, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %369 = load atomic i32, i32* %368 monotonic, align 4
  %370 = and i32 %369, 2
  %371 = icmp eq i32 %370, 0
  %372 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %365, i64 0, i32 0
  %373 = load i32, i32* %372, align 4
  br i1 %371, label %374, label %376

374:                                              ; preds = %367
  %375 = add i32 %373, -1
  store i32 %375, i32* %372, align 4
  br label %376

376:                                              ; preds = %374, %367
  %377 = phi i32 [ %375, %374 ], [ %373, %367 ]
  %378 = icmp eq i32 %377, 0
  br i1 %378, label %379, label %380

379:                                              ; preds = %376
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %365) #9
  br label %380

380:                                              ; preds = %361, %376, %379
  %381 = fsub float %1, %293
  %382 = fsub float %294, %293
  %383 = fdiv float %381, %382
  %384 = icmp eq i32 %135, 3
  br i1 %384, label %385, label %387

385:                                              ; preds = %380
  %386 = tail call float @_ZNK5blink19SVGAnimationElement25CalculatePercentForSplineEfj(%"class.blink::SVGAnimationElement"* %0, float %383, i32 %297)
  br label %387

387:                                              ; preds = %265, %262, %247, %93, %90, %75, %141, %380, %385
  %388 = phi float [ %142, %141 ], [ %386, %385 ], [ %383, %380 ], [ 1.000000e+00, %75 ], [ 1.000000e+00, %90 ], [ 1.000000e+00, %93 ], [ 0.000000e+00, %247 ], [ 0.000000e+00, %262 ], [ 0.000000e+00, %265 ]
  ret float %388
}

declare zeroext i1 @_ZNK5blink17SVGAnimateElement36AnimatedPropertyTypeSupportsAdditionEv(%"class.blink::SVGAnimateElement"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink19SVGAnimationElement24CalculateValuesAnimationEv(%"class.blink::SVGAnimationElement"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 4
  %3 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %234, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 11
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 2
  br i1 %9, label %124, label %10

10:                                               ; preds = %6
  %11 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names14kKeyPointsAttrE, align 8
  %12 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %13 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %12, align 8
  %14 = icmp eq %"class.blink::ElementData"* %13, null
  br i1 %14, label %122, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %13, i64 0, i32 0, i32 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %15
  %21 = bitcast %"class.blink::ElementData"* %13 to %"class.blink::UniqueElementData"*
  %22 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %13, i64 1, i32 1
  %23 = bitcast %"class.blink::Member.14"* %22 to %"class.blink::Attribute"**
  %24 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %21, i64 0, i32 2, i32 0, i32 0, i32 2
  %26 = load i32, i32* %25, align 4
  br label %32

27:                                               ; preds = %15
  %28 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %13, i64 1
  %29 = bitcast %"class.blink::ElementData"* %28 to %"class.blink::Attribute"*
  %30 = lshr i32 %17, 1
  %31 = and i32 %30, 268435455
  br label %32

32:                                               ; preds = %27, %20
  %33 = phi %"class.blink::Attribute"* [ %29, %27 ], [ %24, %20 ]
  %34 = phi i32 [ %31, %27 ], [ %26, %20 ]
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %33, i64 %35
  %37 = icmp eq i32 %34, 0
  br i1 %37, label %65, label %38

38:                                               ; preds = %32
  %39 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %11, i64 0, i32 0, i32 0
  %40 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %39, align 8
  %41 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %40, i64 0, i32 3, i32 0, i32 0, i32 0
  %42 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %40, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %43

43:                                               ; preds = %59, %38
  %44 = phi %"class.blink::Attribute"* [ %33, %38 ], [ %60, %59 ]
  %45 = phi i32 [ 0, %38 ], [ %61, %59 ]
  %46 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %44, i64 0, i32 0, i32 0, i32 0
  %47 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %46, align 8
  %48 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %47, %40
  br i1 %48, label %63, label %49

49:                                               ; preds = %43
  %50 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %47, i64 0, i32 3, i32 0, i32 0, i32 0
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %51, %52
  br i1 %53, label %54, label %59

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %47, i64 0, i32 4, i32 0, i32 0, i32 0
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %55, align 8
  %57 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %42, align 8
  %58 = icmp eq %"class.WTF::StringImpl"* %56, %57
  br i1 %58, label %63, label %59

59:                                               ; preds = %54, %49
  %60 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %44, i64 1
  %61 = add i32 %45, 1
  %62 = icmp eq %"class.blink::Attribute"* %60, %36
  br i1 %62, label %65, label %43

63:                                               ; preds = %43, %54
  %64 = icmp eq i32 %45, -1
  br i1 %64, label %65, label %122

65:                                               ; preds = %59, %63, %32
  %66 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names13kKeyTimesAttrE, align 8
  br i1 %19, label %74, label %67

67:                                               ; preds = %65
  %68 = bitcast %"class.blink::ElementData"* %13 to %"class.blink::UniqueElementData"*
  %69 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %13, i64 1, i32 1
  %70 = bitcast %"class.blink::Member.14"* %69 to %"class.blink::Attribute"**
  %71 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %70, align 8
  %72 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %68, i64 0, i32 2, i32 0, i32 0, i32 2
  %73 = load i32, i32* %72, align 4
  br label %79

74:                                               ; preds = %65
  %75 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %13, i64 1
  %76 = bitcast %"class.blink::ElementData"* %75 to %"class.blink::Attribute"*
  %77 = lshr i32 %17, 1
  %78 = and i32 %77, 268435455
  br label %79

79:                                               ; preds = %74, %67
  %80 = phi %"class.blink::Attribute"* [ %76, %74 ], [ %71, %67 ]
  %81 = phi i32 [ %78, %74 ], [ %73, %67 ]
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %80, i64 %82
  %84 = icmp eq i32 %81, 0
  br i1 %84, label %122, label %85

85:                                               ; preds = %79
  %86 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %66, i64 0, i32 0, i32 0
  %87 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %86, align 8
  %88 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %87, i64 0, i32 3, i32 0, i32 0, i32 0
  %89 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %87, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %90

90:                                               ; preds = %106, %85
  %91 = phi %"class.blink::Attribute"* [ %80, %85 ], [ %107, %106 ]
  %92 = phi i32 [ 0, %85 ], [ %108, %106 ]
  %93 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %91, i64 0, i32 0, i32 0, i32 0
  %94 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %93, align 8
  %95 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %94, %87
  br i1 %95, label %110, label %96

96:                                               ; preds = %90
  %97 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %94, i64 0, i32 3, i32 0, i32 0, i32 0
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  %99 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %88, align 8
  %100 = icmp eq %"class.WTF::StringImpl"* %98, %99
  br i1 %100, label %101, label %106

101:                                              ; preds = %96
  %102 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %94, i64 0, i32 4, i32 0, i32 0, i32 0
  %103 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %102, align 8
  %104 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %89, align 8
  %105 = icmp eq %"class.WTF::StringImpl"* %103, %104
  br i1 %105, label %110, label %106

106:                                              ; preds = %101, %96
  %107 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %91, i64 1
  %108 = add i32 %92, 1
  %109 = icmp eq %"class.blink::Attribute"* %107, %83
  br i1 %109, label %122, label %90

110:                                              ; preds = %90, %101
  %111 = icmp eq i32 %92, -1
  br i1 %111, label %122, label %112

112:                                              ; preds = %110
  %113 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 3
  %114 = load i8, i8* %113, align 1, !range !4
  %115 = icmp eq i8 %114, 0
  %116 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 6
  %117 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 5
  %118 = select i1 %115, %"class.WTF::Vector.62"* %117, %"class.WTF::Vector.62"* %116
  %119 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %118, i64 0, i32 0, i32 0, i32 2
  %120 = load i32, i32* %119, align 4
  %121 = icmp eq i32 %4, %120
  br i1 %121, label %122, label %234

122:                                              ; preds = %106, %63, %110, %79, %10, %112
  %123 = icmp eq i32 %8, 0
  br i1 %123, label %154, label %124

124:                                              ; preds = %122, %6
  %125 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 3
  %126 = load i8, i8* %125, align 1, !range !4
  %127 = icmp eq i8 %126, 0
  %128 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 6
  %129 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 5
  %130 = select i1 %127, %"class.WTF::Vector.62"* %129, %"class.WTF::Vector.62"* %128
  %131 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %130, i64 0, i32 0, i32 0, i32 2
  %132 = load i32, i32* %131, align 4
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %139, label %134

134:                                              ; preds = %124
  %135 = add i32 %132, -1
  %136 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* %130, i32 %135) #9
  %137 = load float, float* %136, align 4
  %138 = fcmp une float %137, 1.000000e+00
  br i1 %138, label %234, label %139

139:                                              ; preds = %134, %124
  %140 = icmp eq i32 %8, 3
  br i1 %140, label %141, label %154

141:                                              ; preds = %139
  %142 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 8, i32 0, i32 0, i32 2
  %143 = load i32, i32* %142, align 4
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %149, label %145

145:                                              ; preds = %141
  %146 = load i32, i32* %3, align 4
  %147 = add i32 %146, -1
  %148 = icmp eq i32 %143, %147
  br i1 %148, label %154, label %149

149:                                              ; preds = %145, %141
  %150 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 7, i32 0, i32 0, i32 2
  %151 = load i32, i32* %150, align 4
  %152 = add i32 %151, -1
  %153 = icmp eq i32 %143, %152
  br i1 %153, label %154, label %234

154:                                              ; preds = %122, %149, %145, %139
  %155 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names14kKeyPointsAttrE, align 8
  %156 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %157 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %156, align 8
  %158 = icmp eq %"class.blink::ElementData"* %157, null
  br i1 %158, label %223, label %159

159:                                              ; preds = %154
  %160 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %157, i64 0, i32 0, i32 0, i32 0
  %161 = load i32, i32* %160, align 4
  %162 = and i32 %161, 1
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %171, label %164

164:                                              ; preds = %159
  %165 = bitcast %"class.blink::ElementData"* %157 to %"class.blink::UniqueElementData"*
  %166 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %157, i64 1, i32 1
  %167 = bitcast %"class.blink::Member.14"* %166 to %"class.blink::Attribute"**
  %168 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %167, align 8
  %169 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %165, i64 0, i32 2, i32 0, i32 0, i32 2
  %170 = load i32, i32* %169, align 4
  br label %176

171:                                              ; preds = %159
  %172 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %157, i64 1
  %173 = bitcast %"class.blink::ElementData"* %172 to %"class.blink::Attribute"*
  %174 = lshr i32 %161, 1
  %175 = and i32 %174, 268435455
  br label %176

176:                                              ; preds = %171, %164
  %177 = phi %"class.blink::Attribute"* [ %173, %171 ], [ %168, %164 ]
  %178 = phi i32 [ %175, %171 ], [ %170, %164 ]
  %179 = zext i32 %178 to i64
  %180 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %177, i64 %179
  %181 = icmp eq i32 %178, 0
  br i1 %181, label %223, label %182

182:                                              ; preds = %176
  %183 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %155, i64 0, i32 0, i32 0
  %184 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %183, align 8
  %185 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %184, i64 0, i32 3, i32 0, i32 0, i32 0
  %186 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %184, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %187

187:                                              ; preds = %203, %182
  %188 = phi %"class.blink::Attribute"* [ %177, %182 ], [ %204, %203 ]
  %189 = phi i32 [ 0, %182 ], [ %205, %203 ]
  %190 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %188, i64 0, i32 0, i32 0, i32 0
  %191 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %190, align 8
  %192 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %191, %184
  br i1 %192, label %207, label %193

193:                                              ; preds = %187
  %194 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %191, i64 0, i32 3, i32 0, i32 0, i32 0
  %195 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %194, align 8
  %196 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %185, align 8
  %197 = icmp eq %"class.WTF::StringImpl"* %195, %196
  br i1 %197, label %198, label %203

198:                                              ; preds = %193
  %199 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %191, i64 0, i32 4, i32 0, i32 0, i32 0
  %200 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %199, align 8
  %201 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %186, align 8
  %202 = icmp eq %"class.WTF::StringImpl"* %200, %201
  br i1 %202, label %207, label %203

203:                                              ; preds = %198, %193
  %204 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %188, i64 1
  %205 = add i32 %189, 1
  %206 = icmp eq %"class.blink::Attribute"* %204, %180
  br i1 %206, label %223, label %187

207:                                              ; preds = %187, %198
  %208 = icmp eq i32 %189, -1
  br i1 %208, label %223, label %209

209:                                              ; preds = %207
  %210 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 3
  %211 = load i8, i8* %210, align 1, !range !4
  %212 = icmp eq i8 %211, 0
  %213 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 6
  %214 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 5
  %215 = select i1 %212, %"class.WTF::Vector.62"* %214, %"class.WTF::Vector.62"* %213
  %216 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %215, i64 0, i32 0, i32 0, i32 2
  %217 = load i32, i32* %216, align 4
  %218 = icmp ult i32 %217, 2
  br i1 %218, label %234, label %219

219:                                              ; preds = %209
  %220 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 7, i32 0, i32 0, i32 2
  %221 = load i32, i32* %220, align 4
  %222 = icmp eq i32 %217, %221
  br i1 %222, label %223, label %234

223:                                              ; preds = %203, %207, %176, %154, %219
  %224 = load i32, i32* %3, align 4
  %225 = add i32 %224, -1
  %226 = tail call dereferenceable(8) %"class.WTF::String"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.57"* %2, i32 %225) #9
  %227 = bitcast %"class.blink::SVGAnimationElement"* %0 to i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*)***
  %228 = load i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*)**, i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*)*** %227, align 8
  %229 = getelementptr inbounds i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*)*, i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*)** %228, i64 174
  %230 = load i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*)*, i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*)** %229, align 8
  %231 = tail call zeroext i1 %230(%"class.blink::SVGAnimationElement"* %0, %"class.WTF::String"* dereferenceable(8) %226) #9
  %232 = and i1 %9, %231
  br i1 %232, label %233, label %234

233:                                              ; preds = %223
  tail call void @_ZN5blink19SVGAnimationElement33CalculateKeyTimesForCalcModePacedEv(%"class.blink::SVGAnimationElement"* %0)
  br label %234

234:                                              ; preds = %223, %112, %134, %149, %219, %209, %233, %1
  %235 = phi i1 [ false, %1 ], [ false, %112 ], [ false, %134 ], [ false, %149 ], [ false, %219 ], [ false, %209 ], [ %231, %223 ], [ true, %233 ]
  ret i1 %235
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink19SVGAnimationElement24CheckAnimationParametersEv(%"class.blink::SVGAnimationElement"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::String", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"class.WTF::String", align 8
  %5 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 1
  %6 = tail call zeroext i1 @_ZNK5blink8SVGTests7IsValidEv(%"class.blink::SVGTests"* %5) #9
  br i1 %6, label %7, label %729

7:                                                ; preds = %1
  %8 = bitcast %"class.blink::SVGAnimationElement"* %0 to %"class.blink::SVGSMILElement"*
  %9 = tail call zeroext i1 @_ZNK5blink14SVGSMILElement14HasValidTargetEv(%"class.blink::SVGSMILElement"* %8) #9
  br i1 %9, label %10, label %729

10:                                               ; preds = %7
  %11 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 12
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %729, label %14

14:                                               ; preds = %10
  %15 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names14kKeyPointsAttrE, align 8
  %16 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %17 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %16, align 8
  %18 = icmp eq %"class.blink::ElementData"* %17, null
  br i1 %18, label %81, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %17, i64 0, i32 0, i32 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %31, label %24

24:                                               ; preds = %19
  %25 = bitcast %"class.blink::ElementData"* %17 to %"class.blink::UniqueElementData"*
  %26 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %17, i64 1, i32 1
  %27 = bitcast %"class.blink::Member.14"* %26 to %"class.blink::Attribute"**
  %28 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %27, align 8
  %29 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %25, i64 0, i32 2, i32 0, i32 0, i32 2
  %30 = load i32, i32* %29, align 4
  br label %36

31:                                               ; preds = %19
  %32 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %17, i64 1
  %33 = bitcast %"class.blink::ElementData"* %32 to %"class.blink::Attribute"*
  %34 = lshr i32 %21, 1
  %35 = and i32 %34, 268435455
  br label %36

36:                                               ; preds = %31, %24
  %37 = phi %"class.blink::Attribute"* [ %33, %31 ], [ %28, %24 ]
  %38 = phi i32 [ %35, %31 ], [ %30, %24 ]
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %37, i64 %39
  %41 = icmp eq i32 %38, 0
  br i1 %41, label %81, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %15, i64 0, i32 0, i32 0
  %44 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %43, align 8
  %45 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %44, i64 0, i32 3, i32 0, i32 0, i32 0
  %46 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %44, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %47

47:                                               ; preds = %63, %42
  %48 = phi %"class.blink::Attribute"* [ %37, %42 ], [ %64, %63 ]
  %49 = phi i32 [ 0, %42 ], [ %65, %63 ]
  %50 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %48, i64 0, i32 0, i32 0, i32 0
  %51 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %50, align 8
  %52 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %51, %44
  br i1 %52, label %67, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %51, i64 0, i32 3, i32 0, i32 0, i32 0
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %45, align 8
  %57 = icmp eq %"class.WTF::StringImpl"* %55, %56
  br i1 %57, label %58, label %63

58:                                               ; preds = %53
  %59 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %51, i64 0, i32 4, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %46, align 8
  %62 = icmp eq %"class.WTF::StringImpl"* %60, %61
  br i1 %62, label %67, label %63

63:                                               ; preds = %58, %53
  %64 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %48, i64 1
  %65 = add i32 %49, 1
  %66 = icmp eq %"class.blink::Attribute"* %64, %40
  br i1 %66, label %81, label %47

67:                                               ; preds = %47, %58
  %68 = icmp eq i32 %49, -1
  br i1 %68, label %81, label %69

69:                                               ; preds = %67
  %70 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 3
  %71 = load i8, i8* %70, align 1, !range !4
  %72 = icmp eq i8 %71, 0
  %73 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 6
  %74 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 5
  %75 = select i1 %72, %"class.WTF::Vector.62"* %74, %"class.WTF::Vector.62"* %73
  %76 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %75, i64 0, i32 0, i32 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 7, i32 0, i32 0, i32 2
  %79 = load i32, i32* %78, align 4
  %80 = icmp eq i32 %77, %79
  br i1 %80, label %81, label %729

81:                                               ; preds = %63, %67, %36, %14, %69
  %82 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 11
  %83 = load i32, i32* %82, align 8
  %84 = icmp eq i32 %83, 3
  br i1 %84, label %85, label %215

85:                                               ; preds = %81
  %86 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 8, i32 0, i32 0, i32 2
  %87 = load i32, i32* %86, align 4
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %729, label %89

89:                                               ; preds = %85
  br i1 %18, label %145, label %90

90:                                               ; preds = %89
  %91 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %17, i64 0, i32 0, i32 0, i32 0
  %92 = load i32, i32* %91, align 4
  %93 = and i32 %92, 1
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %102, label %95

95:                                               ; preds = %90
  %96 = bitcast %"class.blink::ElementData"* %17 to %"class.blink::UniqueElementData"*
  %97 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %17, i64 1, i32 1
  %98 = bitcast %"class.blink::Member.14"* %97 to %"class.blink::Attribute"**
  %99 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %98, align 8
  %100 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %96, i64 0, i32 2, i32 0, i32 0, i32 2
  %101 = load i32, i32* %100, align 4
  br label %107

102:                                              ; preds = %90
  %103 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %17, i64 1
  %104 = bitcast %"class.blink::ElementData"* %103 to %"class.blink::Attribute"*
  %105 = lshr i32 %92, 1
  %106 = and i32 %105, 268435455
  br label %107

107:                                              ; preds = %102, %95
  %108 = phi %"class.blink::Attribute"* [ %104, %102 ], [ %99, %95 ]
  %109 = phi i32 [ %106, %102 ], [ %101, %95 ]
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %108, i64 %110
  %112 = icmp eq i32 %109, 0
  br i1 %112, label %145, label %113

113:                                              ; preds = %107
  %114 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %15, i64 0, i32 0, i32 0
  %115 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %114, align 8
  %116 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %115, i64 0, i32 3, i32 0, i32 0, i32 0
  %117 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %115, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %118

118:                                              ; preds = %134, %113
  %119 = phi %"class.blink::Attribute"* [ %108, %113 ], [ %135, %134 ]
  %120 = phi i32 [ 0, %113 ], [ %136, %134 ]
  %121 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %119, i64 0, i32 0, i32 0, i32 0
  %122 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %121, align 8
  %123 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %122, %115
  br i1 %123, label %138, label %124

124:                                              ; preds = %118
  %125 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %122, i64 0, i32 3, i32 0, i32 0, i32 0
  %126 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %125, align 8
  %127 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %116, align 8
  %128 = icmp eq %"class.WTF::StringImpl"* %126, %127
  br i1 %128, label %129, label %134

129:                                              ; preds = %124
  %130 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %122, i64 0, i32 4, i32 0, i32 0, i32 0
  %131 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %130, align 8
  %132 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %117, align 8
  %133 = icmp eq %"class.WTF::StringImpl"* %131, %132
  br i1 %133, label %138, label %134

134:                                              ; preds = %129, %124
  %135 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %119, i64 1
  %136 = add i32 %120, 1
  %137 = icmp eq %"class.blink::Attribute"* %135, %111
  br i1 %137, label %145, label %118

138:                                              ; preds = %118, %129
  %139 = icmp eq i32 %120, -1
  br i1 %139, label %145, label %140

140:                                              ; preds = %138
  %141 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 7, i32 0, i32 0, i32 2
  %142 = load i32, i32* %141, align 4
  %143 = add i32 %142, -1
  %144 = icmp eq i32 %87, %143
  br i1 %144, label %145, label %729

145:                                              ; preds = %134, %138, %107, %89, %140
  %146 = icmp eq i32 %12, 5
  br i1 %146, label %147, label %152

147:                                              ; preds = %145
  %148 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %149 = load i32, i32* %148, align 4
  %150 = add i32 %149, -1
  %151 = icmp eq i32 %87, %150
  br i1 %151, label %152, label %729

152:                                              ; preds = %147, %145
  %153 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names13kKeyTimesAttrE, align 8
  br i1 %18, label %215, label %154

154:                                              ; preds = %152
  %155 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %17, i64 0, i32 0, i32 0, i32 0
  %156 = load i32, i32* %155, align 4
  %157 = and i32 %156, 1
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %166, label %159

159:                                              ; preds = %154
  %160 = bitcast %"class.blink::ElementData"* %17 to %"class.blink::UniqueElementData"*
  %161 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %17, i64 1, i32 1
  %162 = bitcast %"class.blink::Member.14"* %161 to %"class.blink::Attribute"**
  %163 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %162, align 8
  %164 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %160, i64 0, i32 2, i32 0, i32 0, i32 2
  %165 = load i32, i32* %164, align 4
  br label %171

166:                                              ; preds = %154
  %167 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %17, i64 1
  %168 = bitcast %"class.blink::ElementData"* %167 to %"class.blink::Attribute"*
  %169 = lshr i32 %156, 1
  %170 = and i32 %169, 268435455
  br label %171

171:                                              ; preds = %166, %159
  %172 = phi %"class.blink::Attribute"* [ %168, %166 ], [ %163, %159 ]
  %173 = phi i32 [ %170, %166 ], [ %165, %159 ]
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %172, i64 %174
  %176 = icmp eq i32 %173, 0
  br i1 %176, label %215, label %177

177:                                              ; preds = %171
  %178 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %153, i64 0, i32 0, i32 0
  %179 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %178, align 8
  %180 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %179, i64 0, i32 3, i32 0, i32 0, i32 0
  %181 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %179, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %182

182:                                              ; preds = %198, %177
  %183 = phi %"class.blink::Attribute"* [ %172, %177 ], [ %199, %198 ]
  %184 = phi i32 [ 0, %177 ], [ %200, %198 ]
  %185 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %183, i64 0, i32 0, i32 0, i32 0
  %186 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %185, align 8
  %187 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %186, %179
  br i1 %187, label %202, label %188

188:                                              ; preds = %182
  %189 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %186, i64 0, i32 3, i32 0, i32 0, i32 0
  %190 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %189, align 8
  %191 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %180, align 8
  %192 = icmp eq %"class.WTF::StringImpl"* %190, %191
  br i1 %192, label %193, label %198

193:                                              ; preds = %188
  %194 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %186, i64 0, i32 4, i32 0, i32 0, i32 0
  %195 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %194, align 8
  %196 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %181, align 8
  %197 = icmp eq %"class.WTF::StringImpl"* %195, %196
  br i1 %197, label %202, label %198

198:                                              ; preds = %193, %188
  %199 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %183, i64 1
  %200 = add i32 %184, 1
  %201 = icmp eq %"class.blink::Attribute"* %199, %175
  br i1 %201, label %215, label %182

202:                                              ; preds = %182, %193
  %203 = icmp eq i32 %184, -1
  br i1 %203, label %215, label %204

204:                                              ; preds = %202
  %205 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 3
  %206 = load i8, i8* %205, align 1, !range !4
  %207 = icmp eq i8 %206, 0
  %208 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 6
  %209 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 5
  %210 = select i1 %207, %"class.WTF::Vector.62"* %209, %"class.WTF::Vector.62"* %208
  %211 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %210, i64 0, i32 0, i32 0, i32 2
  %212 = load i32, i32* %211, align 4
  %213 = add i32 %212, -1
  %214 = icmp eq i32 %87, %213
  br i1 %214, label %215, label %729

215:                                              ; preds = %198, %202, %171, %152, %204, %81
  %216 = add i32 %12, -1
  %217 = icmp ult i32 %216, 4
  br i1 %217, label %218, label %334

218:                                              ; preds = %215
  %219 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names13kKeyTimesAttrE, align 8
  br i1 %18, label %220, label %222

220:                                              ; preds = %218
  %221 = bitcast %"class.WTF::String"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %221) #9
  br label %388

222:                                              ; preds = %218
  %223 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %17, i64 0, i32 0, i32 0, i32 0
  %224 = load i32, i32* %223, align 4
  %225 = and i32 %224, 1
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %234, label %227

227:                                              ; preds = %222
  %228 = bitcast %"class.blink::ElementData"* %17 to %"class.blink::UniqueElementData"*
  %229 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %17, i64 1, i32 1
  %230 = bitcast %"class.blink::Member.14"* %229 to %"class.blink::Attribute"**
  %231 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %230, align 8
  %232 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %228, i64 0, i32 2, i32 0, i32 0, i32 2
  %233 = load i32, i32* %232, align 4
  br label %239

234:                                              ; preds = %222
  %235 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %17, i64 1
  %236 = bitcast %"class.blink::ElementData"* %235 to %"class.blink::Attribute"*
  %237 = lshr i32 %224, 1
  %238 = and i32 %237, 268435455
  br label %239

239:                                              ; preds = %234, %227
  %240 = phi %"class.blink::Attribute"* [ %236, %234 ], [ %231, %227 ]
  %241 = phi i32 [ %238, %234 ], [ %233, %227 ]
  %242 = zext i32 %241 to i64
  %243 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %240, i64 %242
  %244 = icmp eq i32 %241, 0
  br i1 %244, label %245, label %247

245:                                              ; preds = %239
  %246 = bitcast %"class.WTF::String"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %246) #9
  br label %336

247:                                              ; preds = %239
  %248 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %219, i64 0, i32 0, i32 0
  %249 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %248, align 8
  %250 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %249, i64 0, i32 3, i32 0, i32 0, i32 0
  %251 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %249, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %252

252:                                              ; preds = %268, %247
  %253 = phi %"class.blink::Attribute"* [ %240, %247 ], [ %269, %268 ]
  %254 = phi i32 [ 0, %247 ], [ %270, %268 ]
  %255 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %253, i64 0, i32 0, i32 0, i32 0
  %256 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %255, align 8
  %257 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %256, %249
  br i1 %257, label %272, label %258

258:                                              ; preds = %252
  %259 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %256, i64 0, i32 3, i32 0, i32 0, i32 0
  %260 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %259, align 8
  %261 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %250, align 8
  %262 = icmp eq %"class.WTF::StringImpl"* %260, %261
  br i1 %262, label %263, label %268

263:                                              ; preds = %258
  %264 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %256, i64 0, i32 4, i32 0, i32 0, i32 0
  %265 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %264, align 8
  %266 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %251, align 8
  %267 = icmp eq %"class.WTF::StringImpl"* %265, %266
  br i1 %267, label %272, label %268

268:                                              ; preds = %263, %258
  %269 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %253, i64 1
  %270 = add i32 %254, 1
  %271 = icmp eq %"class.blink::Attribute"* %269, %243
  br i1 %271, label %334, label %252

272:                                              ; preds = %252, %263
  %273 = icmp eq i32 %254, -1
  br i1 %273, label %334, label %274

274:                                              ; preds = %272
  br i1 %226, label %282, label %275

275:                                              ; preds = %274
  %276 = bitcast %"class.blink::ElementData"* %17 to %"class.blink::UniqueElementData"*
  %277 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %17, i64 1, i32 1
  %278 = bitcast %"class.blink::Member.14"* %277 to %"class.blink::Attribute"**
  %279 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %278, align 8
  %280 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %276, i64 0, i32 2, i32 0, i32 0, i32 2
  %281 = load i32, i32* %280, align 4
  br label %287

282:                                              ; preds = %274
  %283 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %17, i64 1
  %284 = bitcast %"class.blink::ElementData"* %283 to %"class.blink::Attribute"*
  %285 = lshr i32 %224, 1
  %286 = and i32 %285, 268435455
  br label %287

287:                                              ; preds = %282, %275
  %288 = phi %"class.blink::Attribute"* [ %284, %282 ], [ %279, %275 ]
  %289 = phi i32 [ %286, %282 ], [ %281, %275 ]
  %290 = zext i32 %289 to i64
  %291 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %288, i64 %290
  %292 = icmp eq i32 %289, 0
  br i1 %292, label %334, label %293

293:                                              ; preds = %287
  %294 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %15, i64 0, i32 0, i32 0
  %295 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %294, align 8
  %296 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %295, i64 0, i32 3, i32 0, i32 0, i32 0
  %297 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %295, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %298

298:                                              ; preds = %314, %293
  %299 = phi %"class.blink::Attribute"* [ %288, %293 ], [ %315, %314 ]
  %300 = phi i32 [ 0, %293 ], [ %316, %314 ]
  %301 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %299, i64 0, i32 0, i32 0, i32 0
  %302 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %301, align 8
  %303 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %302, %295
  br i1 %303, label %318, label %304

304:                                              ; preds = %298
  %305 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %302, i64 0, i32 3, i32 0, i32 0, i32 0
  %306 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %305, align 8
  %307 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %296, align 8
  %308 = icmp eq %"class.WTF::StringImpl"* %306, %307
  br i1 %308, label %309, label %314

309:                                              ; preds = %304
  %310 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %302, i64 0, i32 4, i32 0, i32 0, i32 0
  %311 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %310, align 8
  %312 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %297, align 8
  %313 = icmp eq %"class.WTF::StringImpl"* %311, %312
  br i1 %313, label %318, label %314

314:                                              ; preds = %309, %304
  %315 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %299, i64 1
  %316 = add i32 %300, 1
  %317 = icmp eq %"class.blink::Attribute"* %315, %291
  br i1 %317, label %334, label %298

318:                                              ; preds = %298, %309
  %319 = icmp eq i32 %300, -1
  br i1 %319, label %334, label %320

320:                                              ; preds = %318
  %321 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 3
  %322 = load i8, i8* %321, align 1, !range !4
  %323 = icmp eq i8 %322, 0
  %324 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 6
  %325 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 5
  %326 = select i1 %323, %"class.WTF::Vector.62"* %325, %"class.WTF::Vector.62"* %324
  %327 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %326, i64 0, i32 0, i32 0, i32 2
  %328 = load i32, i32* %327, align 4
  %329 = icmp ult i32 %328, 2
  br i1 %329, label %729, label %330

330:                                              ; preds = %320
  %331 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 7, i32 0, i32 0, i32 2
  %332 = load i32, i32* %331, align 4
  %333 = icmp eq i32 %328, %332
  br i1 %333, label %334, label %729

334:                                              ; preds = %268, %314, %318, %272, %287, %330, %215
  %335 = bitcast %"class.WTF::String"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %335) #9
  br i1 %18, label %388, label %336

336:                                              ; preds = %245, %334
  %337 = phi i8* [ %246, %245 ], [ %335, %334 ]
  %338 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names9kFromAttrE, align 8
  %339 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %17, i64 0, i32 0, i32 0, i32 0
  %340 = load i32, i32* %339, align 4
  %341 = and i32 %340, 1
  %342 = icmp eq i32 %341, 0
  br i1 %342, label %350, label %343

343:                                              ; preds = %336
  %344 = bitcast %"class.blink::ElementData"* %17 to %"class.blink::UniqueElementData"*
  %345 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %17, i64 1, i32 1
  %346 = bitcast %"class.blink::Member.14"* %345 to %"class.blink::Attribute"**
  %347 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %346, align 8
  %348 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %344, i64 0, i32 2, i32 0, i32 0, i32 2
  %349 = load i32, i32* %348, align 4
  br label %355

350:                                              ; preds = %336
  %351 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %17, i64 1
  %352 = bitcast %"class.blink::ElementData"* %351 to %"class.blink::Attribute"*
  %353 = lshr i32 %340, 1
  %354 = and i32 %353, 268435455
  br label %355

355:                                              ; preds = %350, %343
  %356 = phi %"class.blink::Attribute"* [ %352, %350 ], [ %347, %343 ]
  %357 = phi i32 [ %354, %350 ], [ %349, %343 ]
  %358 = zext i32 %357 to i64
  %359 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %356, i64 %358
  %360 = icmp eq i32 %357, 0
  br i1 %360, label %388, label %361

361:                                              ; preds = %355
  %362 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %338, i64 0, i32 0, i32 0
  %363 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %362, align 8
  %364 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %363, i64 0, i32 3, i32 0, i32 0, i32 0
  %365 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %363, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %366

366:                                              ; preds = %381, %361
  %367 = phi %"class.blink::Attribute"* [ %356, %361 ], [ %382, %381 ]
  %368 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %367, i64 0, i32 0, i32 0, i32 0
  %369 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %368, align 8
  %370 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %369, %363
  br i1 %370, label %384, label %371

371:                                              ; preds = %366
  %372 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %369, i64 0, i32 3, i32 0, i32 0, i32 0
  %373 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %372, align 8
  %374 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %364, align 8
  %375 = icmp eq %"class.WTF::StringImpl"* %373, %374
  br i1 %375, label %376, label %381

376:                                              ; preds = %371
  %377 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %369, i64 0, i32 4, i32 0, i32 0, i32 0
  %378 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %377, align 8
  %379 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %365, align 8
  %380 = icmp eq %"class.WTF::StringImpl"* %378, %379
  br i1 %380, label %384, label %381

381:                                              ; preds = %376, %371
  %382 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %367, i64 1
  %383 = icmp eq %"class.blink::Attribute"* %382, %359
  br i1 %383, label %388, label %366

384:                                              ; preds = %376, %366
  %385 = icmp eq %"class.blink::Attribute"* %367, null
  br i1 %385, label %388, label %386

386:                                              ; preds = %384
  %387 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %367, i64 0, i32 1
  br label %391

388:                                              ; preds = %381, %220, %384, %355, %334
  %389 = phi i8* [ %221, %220 ], [ %337, %384 ], [ %337, %355 ], [ %335, %334 ], [ %337, %381 ]
  %390 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %391

391:                                              ; preds = %388, %386
  %392 = phi i8* [ %389, %388 ], [ %337, %386 ]
  %393 = phi %"class.WTF::AtomicString"* [ %390, %388 ], [ %387, %386 ]
  %394 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %393, i64 0, i32 0, i32 0, i32 0
  %395 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %394, align 8
  %396 = icmp eq %"class.WTF::StringImpl"* %395, null
  br i1 %396, label %415, label %397

397:                                              ; preds = %391
  %398 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %395, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %399 = load atomic i32, i32* %398 monotonic, align 4
  %400 = and i32 %399, 2
  %401 = icmp eq i32 %400, 0
  br i1 %401, label %402, label %415

402:                                              ; preds = %397
  %403 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %395, i64 0, i32 0
  %404 = load i32, i32* %403, align 4
  %405 = zext i32 %404 to i33
  %406 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %405, i33 1) #9
  %407 = extractvalue { i33, i1 } %406, 1
  %408 = extractvalue { i33, i1 } %406, 0
  %409 = icmp slt i33 %408, 0
  %410 = or i1 %407, %409
  br i1 %410, label %411, label %412, !prof !2

411:                                              ; preds = %402
  tail call void @llvm.trap() #9
  unreachable

412:                                              ; preds = %402
  %413 = trunc i33 %408 to i32
  store i32 %413, i32* %403, align 4
  %414 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %16, align 8
  br label %415

415:                                              ; preds = %391, %397, %412
  %416 = phi %"class.blink::ElementData"* [ %17, %391 ], [ %17, %397 ], [ %414, %412 ]
  %417 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %395, %"class.WTF::StringImpl"** %417, align 8
  %418 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %418) #9
  %419 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names7kToAttrE, align 8
  %420 = icmp eq %"class.blink::ElementData"* %416, null
  br i1 %420, label %471, label %421

421:                                              ; preds = %415
  %422 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %416, i64 0, i32 0, i32 0, i32 0
  %423 = load i32, i32* %422, align 4
  %424 = and i32 %423, 1
  %425 = icmp eq i32 %424, 0
  br i1 %425, label %433, label %426

426:                                              ; preds = %421
  %427 = bitcast %"class.blink::ElementData"* %416 to %"class.blink::UniqueElementData"*
  %428 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %416, i64 1, i32 1
  %429 = bitcast %"class.blink::Member.14"* %428 to %"class.blink::Attribute"**
  %430 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %429, align 8
  %431 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %427, i64 0, i32 2, i32 0, i32 0, i32 2
  %432 = load i32, i32* %431, align 4
  br label %438

433:                                              ; preds = %421
  %434 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %416, i64 1
  %435 = bitcast %"class.blink::ElementData"* %434 to %"class.blink::Attribute"*
  %436 = lshr i32 %423, 1
  %437 = and i32 %436, 268435455
  br label %438

438:                                              ; preds = %433, %426
  %439 = phi %"class.blink::Attribute"* [ %435, %433 ], [ %430, %426 ]
  %440 = phi i32 [ %437, %433 ], [ %432, %426 ]
  %441 = zext i32 %440 to i64
  %442 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %439, i64 %441
  %443 = icmp eq i32 %440, 0
  br i1 %443, label %471, label %444

444:                                              ; preds = %438
  %445 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %419, i64 0, i32 0, i32 0
  %446 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %445, align 8
  %447 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %446, i64 0, i32 3, i32 0, i32 0, i32 0
  %448 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %446, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %449

449:                                              ; preds = %464, %444
  %450 = phi %"class.blink::Attribute"* [ %439, %444 ], [ %465, %464 ]
  %451 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %450, i64 0, i32 0, i32 0, i32 0
  %452 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %451, align 8
  %453 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %452, %446
  br i1 %453, label %467, label %454

454:                                              ; preds = %449
  %455 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %452, i64 0, i32 3, i32 0, i32 0, i32 0
  %456 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %455, align 8
  %457 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %447, align 8
  %458 = icmp eq %"class.WTF::StringImpl"* %456, %457
  br i1 %458, label %459, label %464

459:                                              ; preds = %454
  %460 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %452, i64 0, i32 4, i32 0, i32 0, i32 0
  %461 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %460, align 8
  %462 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %448, align 8
  %463 = icmp eq %"class.WTF::StringImpl"* %461, %462
  br i1 %463, label %467, label %464

464:                                              ; preds = %459, %454
  %465 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %450, i64 1
  %466 = icmp eq %"class.blink::Attribute"* %465, %442
  br i1 %466, label %471, label %449

467:                                              ; preds = %459, %449
  %468 = icmp eq %"class.blink::Attribute"* %450, null
  br i1 %468, label %471, label %469

469:                                              ; preds = %467
  %470 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %450, i64 0, i32 1
  br label %473

471:                                              ; preds = %464, %467, %438, %415
  %472 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %473

473:                                              ; preds = %471, %469
  %474 = phi %"class.WTF::AtomicString"* [ %472, %471 ], [ %470, %469 ]
  %475 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %474, i64 0, i32 0, i32 0, i32 0
  %476 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %475, align 8
  %477 = icmp eq %"class.WTF::StringImpl"* %476, null
  br i1 %477, label %496, label %478

478:                                              ; preds = %473
  %479 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %476, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %480 = load atomic i32, i32* %479 monotonic, align 4
  %481 = and i32 %480, 2
  %482 = icmp eq i32 %481, 0
  br i1 %482, label %483, label %496

483:                                              ; preds = %478
  %484 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %476, i64 0, i32 0
  %485 = load i32, i32* %484, align 4
  %486 = zext i32 %485 to i33
  %487 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %486, i33 1) #9
  %488 = extractvalue { i33, i1 } %487, 1
  %489 = extractvalue { i33, i1 } %487, 0
  %490 = icmp slt i33 %489, 0
  %491 = or i1 %488, %490
  br i1 %491, label %492, label %493, !prof !2

492:                                              ; preds = %483
  tail call void @llvm.trap() #9
  unreachable

493:                                              ; preds = %483
  %494 = trunc i33 %489 to i32
  store i32 %494, i32* %484, align 4
  %495 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %16, align 8
  br label %496

496:                                              ; preds = %473, %478, %493
  %497 = phi %"class.blink::ElementData"* [ %416, %473 ], [ %416, %478 ], [ %495, %493 ]
  %498 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %476, %"class.WTF::StringImpl"** %498, align 8
  %499 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %499) #9
  %500 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink9svg_names7kByAttrE, align 8
  %501 = icmp eq %"class.blink::ElementData"* %497, null
  br i1 %501, label %552, label %502

502:                                              ; preds = %496
  %503 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %497, i64 0, i32 0, i32 0, i32 0
  %504 = load i32, i32* %503, align 4
  %505 = and i32 %504, 1
  %506 = icmp eq i32 %505, 0
  br i1 %506, label %514, label %507

507:                                              ; preds = %502
  %508 = bitcast %"class.blink::ElementData"* %497 to %"class.blink::UniqueElementData"*
  %509 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %497, i64 1, i32 1
  %510 = bitcast %"class.blink::Member.14"* %509 to %"class.blink::Attribute"**
  %511 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %510, align 8
  %512 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %508, i64 0, i32 2, i32 0, i32 0, i32 2
  %513 = load i32, i32* %512, align 4
  br label %519

514:                                              ; preds = %502
  %515 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %497, i64 1
  %516 = bitcast %"class.blink::ElementData"* %515 to %"class.blink::Attribute"*
  %517 = lshr i32 %504, 1
  %518 = and i32 %517, 268435455
  br label %519

519:                                              ; preds = %514, %507
  %520 = phi %"class.blink::Attribute"* [ %516, %514 ], [ %511, %507 ]
  %521 = phi i32 [ %518, %514 ], [ %513, %507 ]
  %522 = zext i32 %521 to i64
  %523 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %520, i64 %522
  %524 = icmp eq i32 %521, 0
  br i1 %524, label %552, label %525

525:                                              ; preds = %519
  %526 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %500, i64 0, i32 0, i32 0
  %527 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %526, align 8
  %528 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %527, i64 0, i32 3, i32 0, i32 0, i32 0
  %529 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %527, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %530

530:                                              ; preds = %545, %525
  %531 = phi %"class.blink::Attribute"* [ %520, %525 ], [ %546, %545 ]
  %532 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %531, i64 0, i32 0, i32 0, i32 0
  %533 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %532, align 8
  %534 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %533, %527
  br i1 %534, label %548, label %535

535:                                              ; preds = %530
  %536 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %533, i64 0, i32 3, i32 0, i32 0, i32 0
  %537 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %536, align 8
  %538 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %528, align 8
  %539 = icmp eq %"class.WTF::StringImpl"* %537, %538
  br i1 %539, label %540, label %545

540:                                              ; preds = %535
  %541 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %533, i64 0, i32 4, i32 0, i32 0, i32 0
  %542 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %541, align 8
  %543 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %529, align 8
  %544 = icmp eq %"class.WTF::StringImpl"* %542, %543
  br i1 %544, label %548, label %545

545:                                              ; preds = %540, %535
  %546 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %531, i64 1
  %547 = icmp eq %"class.blink::Attribute"* %546, %523
  br i1 %547, label %552, label %530

548:                                              ; preds = %540, %530
  %549 = icmp eq %"class.blink::Attribute"* %531, null
  br i1 %549, label %552, label %550

550:                                              ; preds = %548
  %551 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %531, i64 0, i32 1
  br label %554

552:                                              ; preds = %545, %548, %519, %496
  %553 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %554

554:                                              ; preds = %552, %550
  %555 = phi %"class.WTF::AtomicString"* [ %553, %552 ], [ %551, %550 ]
  %556 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %555, i64 0, i32 0, i32 0, i32 0
  %557 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %556, align 8
  %558 = icmp eq %"class.WTF::StringImpl"* %557, null
  br i1 %558, label %576, label %559

559:                                              ; preds = %554
  %560 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %557, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %561 = load atomic i32, i32* %560 monotonic, align 4
  %562 = and i32 %561, 2
  %563 = icmp eq i32 %562, 0
  br i1 %563, label %564, label %576

564:                                              ; preds = %559
  %565 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %557, i64 0, i32 0
  %566 = load i32, i32* %565, align 4
  %567 = zext i32 %566 to i33
  %568 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %567, i33 1) #9
  %569 = extractvalue { i33, i1 } %568, 1
  %570 = extractvalue { i33, i1 } %568, 0
  %571 = icmp slt i33 %570, 0
  %572 = or i1 %569, %571
  br i1 %572, label %573, label %574, !prof !2

573:                                              ; preds = %564
  tail call void @llvm.trap() #9
  unreachable

574:                                              ; preds = %564
  %575 = trunc i33 %570 to i32
  store i32 %575, i32* %565, align 4
  br label %576

576:                                              ; preds = %554, %559, %574
  %577 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %557, %"class.WTF::StringImpl"** %577, align 8
  switch i32 %12, label %679 [
    i32 1, label %578
    i32 3, label %584
    i32 2, label %591
    i32 4, label %597
    i32 5, label %604
    i32 6, label %606
  ]

578:                                              ; preds = %576
  %579 = bitcast %"class.blink::SVGAnimationElement"* %0 to i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)***
  %580 = load i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)**, i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)*** %579, align 8
  %581 = getelementptr inbounds i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)** %580, i64 175
  %582 = load i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)** %581, align 8
  %583 = call zeroext i1 %582(%"class.blink::SVGAnimationElement"* %0, %"class.WTF::String"* nonnull dereferenceable(8) %2, %"class.WTF::String"* nonnull dereferenceable(8) %3) #9
  br label %676

584:                                              ; preds = %576
  %585 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %586 = bitcast %"class.blink::SVGAnimationElement"* %0 to i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)***
  %587 = load i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)**, i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)*** %586, align 8
  %588 = getelementptr inbounds i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)** %587, i64 175
  %589 = load i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)** %588, align 8
  %590 = call zeroext i1 %589(%"class.blink::SVGAnimationElement"* %0, %"class.WTF::String"* dereferenceable(8) %585, %"class.WTF::String"* nonnull dereferenceable(8) %3) #9
  br label %676

591:                                              ; preds = %576
  %592 = bitcast %"class.blink::SVGAnimationElement"* %0 to i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)***
  %593 = load i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)**, i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)*** %592, align 8
  %594 = getelementptr inbounds i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)** %593, i64 176
  %595 = load i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)** %594, align 8
  %596 = call zeroext i1 %595(%"class.blink::SVGAnimationElement"* %0, %"class.WTF::String"* nonnull dereferenceable(8) %2, %"class.WTF::String"* nonnull dereferenceable(8) %4) #9
  br label %676

597:                                              ; preds = %576
  %598 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %599 = bitcast %"class.blink::SVGAnimationElement"* %0 to i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)***
  %600 = load i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)**, i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)*** %599, align 8
  %601 = getelementptr inbounds i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)** %600, i64 176
  %602 = load i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)** %601, align 8
  %603 = call zeroext i1 %602(%"class.blink::SVGAnimationElement"* %0, %"class.WTF::String"* dereferenceable(8) %598, %"class.WTF::String"* nonnull dereferenceable(8) %4) #9
  br label %676

604:                                              ; preds = %576
  %605 = tail call zeroext i1 @_ZN5blink19SVGAnimationElement24CalculateValuesAnimationEv(%"class.blink::SVGAnimationElement"* %0)
  br label %676

606:                                              ; preds = %576
  %607 = icmp eq i32 %83, 2
  br i1 %607, label %679, label %608

608:                                              ; preds = %606
  %609 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %16, align 8
  %610 = icmp eq %"class.blink::ElementData"* %609, null
  br i1 %610, label %675, label %611

611:                                              ; preds = %608
  %612 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %609, i64 0, i32 0, i32 0, i32 0
  %613 = load i32, i32* %612, align 4
  %614 = and i32 %613, 1
  %615 = icmp eq i32 %614, 0
  br i1 %615, label %623, label %616

616:                                              ; preds = %611
  %617 = bitcast %"class.blink::ElementData"* %609 to %"class.blink::UniqueElementData"*
  %618 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %609, i64 1, i32 1
  %619 = bitcast %"class.blink::Member.14"* %618 to %"class.blink::Attribute"**
  %620 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %619, align 8
  %621 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %617, i64 0, i32 2, i32 0, i32 0, i32 2
  %622 = load i32, i32* %621, align 4
  br label %628

623:                                              ; preds = %611
  %624 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %609, i64 1
  %625 = bitcast %"class.blink::ElementData"* %624 to %"class.blink::Attribute"*
  %626 = lshr i32 %613, 1
  %627 = and i32 %626, 268435455
  br label %628

628:                                              ; preds = %623, %616
  %629 = phi %"class.blink::Attribute"* [ %625, %623 ], [ %620, %616 ]
  %630 = phi i32 [ %627, %623 ], [ %622, %616 ]
  %631 = zext i32 %630 to i64
  %632 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %629, i64 %631
  %633 = icmp eq i32 %630, 0
  br i1 %633, label %675, label %634

634:                                              ; preds = %628
  %635 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %15, i64 0, i32 0, i32 0
  %636 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %635, align 8
  %637 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %636, i64 0, i32 3, i32 0, i32 0, i32 0
  %638 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %636, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %639

639:                                              ; preds = %655, %634
  %640 = phi %"class.blink::Attribute"* [ %629, %634 ], [ %656, %655 ]
  %641 = phi i32 [ 0, %634 ], [ %657, %655 ]
  %642 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %640, i64 0, i32 0, i32 0, i32 0
  %643 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %642, align 8
  %644 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %643, %636
  br i1 %644, label %659, label %645

645:                                              ; preds = %639
  %646 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %643, i64 0, i32 3, i32 0, i32 0, i32 0
  %647 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %646, align 8
  %648 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %637, align 8
  %649 = icmp eq %"class.WTF::StringImpl"* %647, %648
  br i1 %649, label %650, label %655

650:                                              ; preds = %645
  %651 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %643, i64 0, i32 4, i32 0, i32 0, i32 0
  %652 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %651, align 8
  %653 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %638, align 8
  %654 = icmp eq %"class.WTF::StringImpl"* %652, %653
  br i1 %654, label %659, label %655

655:                                              ; preds = %650, %645
  %656 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %640, i64 1
  %657 = add i32 %641, 1
  %658 = icmp eq %"class.blink::Attribute"* %656, %632
  br i1 %658, label %675, label %639

659:                                              ; preds = %639, %650
  %660 = icmp eq i32 %641, -1
  br i1 %660, label %675, label %661

661:                                              ; preds = %659
  %662 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 3
  %663 = load i8, i8* %662, align 1, !range !4
  %664 = icmp eq i8 %663, 0
  %665 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 6
  %666 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 5
  %667 = select i1 %664, %"class.WTF::Vector.62"* %666, %"class.WTF::Vector.62"* %665
  %668 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %667, i64 0, i32 0, i32 0, i32 2
  %669 = load i32, i32* %668, align 4
  %670 = icmp ult i32 %669, 2
  br i1 %670, label %676, label %671

671:                                              ; preds = %661
  %672 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 7, i32 0, i32 0, i32 2
  %673 = load i32, i32* %672, align 4
  %674 = icmp eq i32 %669, %673
  br i1 %674, label %675, label %676

675:                                              ; preds = %655, %659, %628, %608, %671
  br label %676

676:                                              ; preds = %578, %584, %591, %597, %604, %675, %671, %661
  %677 = phi i1 [ false, %661 ], [ false, %671 ], [ true, %675 ], [ %605, %604 ], [ %603, %597 ], [ %596, %591 ], [ %590, %584 ], [ %583, %578 ]
  %678 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %577, align 8
  br label %679

679:                                              ; preds = %676, %576, %606
  %680 = phi %"class.WTF::StringImpl"* [ %678, %676 ], [ %557, %576 ], [ %557, %606 ]
  %681 = phi i1 [ %677, %676 ], [ false, %576 ], [ true, %606 ]
  %682 = icmp eq %"class.WTF::StringImpl"* %680, null
  br i1 %682, label %696, label %683

683:                                              ; preds = %679
  %684 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %680, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %685 = load atomic i32, i32* %684 monotonic, align 4
  %686 = and i32 %685, 2
  %687 = icmp eq i32 %686, 0
  %688 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %680, i64 0, i32 0
  %689 = load i32, i32* %688, align 4
  br i1 %687, label %690, label %692

690:                                              ; preds = %683
  %691 = add i32 %689, -1
  store i32 %691, i32* %688, align 4
  br label %692

692:                                              ; preds = %690, %683
  %693 = phi i32 [ %691, %690 ], [ %689, %683 ]
  %694 = icmp eq i32 %693, 0
  br i1 %694, label %695, label %696

695:                                              ; preds = %692
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %680) #9
  br label %696

696:                                              ; preds = %679, %692, %695
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %499) #9
  %697 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %498, align 8
  %698 = icmp eq %"class.WTF::StringImpl"* %697, null
  br i1 %698, label %712, label %699

699:                                              ; preds = %696
  %700 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %697, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %701 = load atomic i32, i32* %700 monotonic, align 4
  %702 = and i32 %701, 2
  %703 = icmp eq i32 %702, 0
  %704 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %697, i64 0, i32 0
  %705 = load i32, i32* %704, align 4
  br i1 %703, label %706, label %708

706:                                              ; preds = %699
  %707 = add i32 %705, -1
  store i32 %707, i32* %704, align 4
  br label %708

708:                                              ; preds = %706, %699
  %709 = phi i32 [ %707, %706 ], [ %705, %699 ]
  %710 = icmp eq i32 %709, 0
  br i1 %710, label %711, label %712

711:                                              ; preds = %708
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %697) #9
  br label %712

712:                                              ; preds = %696, %708, %711
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %418) #9
  %713 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %417, align 8
  %714 = icmp eq %"class.WTF::StringImpl"* %713, null
  br i1 %714, label %728, label %715

715:                                              ; preds = %712
  %716 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %713, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %717 = load atomic i32, i32* %716 monotonic, align 4
  %718 = and i32 %717, 2
  %719 = icmp eq i32 %718, 0
  %720 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %713, i64 0, i32 0
  %721 = load i32, i32* %720, align 4
  br i1 %719, label %722, label %724

722:                                              ; preds = %715
  %723 = add i32 %721, -1
  store i32 %723, i32* %720, align 4
  br label %724

724:                                              ; preds = %722, %715
  %725 = phi i32 [ %723, %722 ], [ %721, %715 ]
  %726 = icmp eq i32 %725, 0
  br i1 %726, label %727, label %728

727:                                              ; preds = %724
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %713) #9
  br label %728

728:                                              ; preds = %712, %724, %727
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %392) #9
  br label %729

729:                                              ; preds = %10, %69, %320, %330, %85, %204, %147, %140, %728, %1, %7
  %730 = phi i1 [ false, %7 ], [ false, %1 ], [ false, %10 ], [ false, %69 ], [ %681, %728 ], [ false, %140 ], [ false, %147 ], [ false, %204 ], [ false, %85 ], [ false, %330 ], [ false, %320 ]
  ret i1 %730
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink19SVGAnimationElement7IsValidEv(%"class.blink::SVGAnimationElement"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 1
  %3 = tail call zeroext i1 @_ZNK5blink8SVGTests7IsValidEv(%"class.blink::SVGTests"* %2) #9
  ret i1 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i24 @_ZNK5blink19SVGAnimationElement23ComputeEffectParametersEv(%"class.blink::SVGAnimationElement"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 11
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  %5 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 12
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 3
  br i1 %7, label %19, label %8

8:                                                ; preds = %1
  %9 = tail call zeroext i1 @_ZNK5blink19SVGAnimationElement10IsAdditiveEv(%"class.blink::SVGAnimationElement"* %0)
  br i1 %9, label %14, label %10

10:                                               ; preds = %8
  %11 = load i32, i32* %5, align 4
  %12 = icmp eq i32 %11, 4
  %13 = zext i1 %12 to i8
  br label %14

14:                                               ; preds = %10, %8
  %15 = phi i8 [ 1, %8 ], [ %13, %10 ]
  %16 = tail call zeroext i1 @_ZNK5blink19SVGAnimationElement13IsAccumulatedEv(%"class.blink::SVGAnimationElement"* %0)
  %17 = zext i1 %16 to i24
  %18 = shl nuw nsw i24 %17, 16
  br label %19

19:                                               ; preds = %1, %14
  %20 = phi i24 [ 0, %1 ], [ %18, %14 ]
  %21 = phi i8 [ 0, %1 ], [ %15, %14 ]
  %22 = zext i8 %21 to i24
  %23 = shl nuw nsw i24 %22, 8
  %24 = zext i1 %4 to i24
  %25 = or i24 %20, %24
  %26 = or i24 %25, %23
  ret i24 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19SVGAnimationElement14ApplyAnimationERNS_18SMILAnimationValueE(%"class.blink::SVGAnimationElement"*, %"struct.blink::SMILAnimationValue"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"class.WTF::String", align 8
  %5 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %38

8:                                                ; preds = %2
  %9 = tail call zeroext i1 @_ZN5blink19SVGAnimationElement24CheckAnimationParametersEv(%"class.blink::SVGAnimationElement"* %0)
  br i1 %9, label %10, label %35

10:                                               ; preds = %8
  store i8 1, i8* %5, align 1
  %11 = tail call zeroext i1 @_ZNK5blink19SVGAnimationElement10IsAdditiveEv(%"class.blink::SVGAnimationElement"* %0)
  br i1 %11, label %21, label %12

12:                                               ; preds = %10
  %13 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 12
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 4
  br i1 %15, label %21, label %16

16:                                               ; preds = %12
  %17 = tail call zeroext i1 @_ZNK5blink19SVGAnimationElement13IsAccumulatedEv(%"class.blink::SVGAnimationElement"* %0)
  br i1 %17, label %18, label %36

18:                                               ; preds = %16
  %19 = load i32, i32* %13, align 4
  %20 = icmp eq i32 %19, 3
  br i1 %20, label %36, label %21

21:                                               ; preds = %18, %12, %10
  %22 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %23 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %22, align 8
  %24 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %23, i64 0, i32 2, i32 0, i32 0
  %25 = load %"class.blink::Document"*, %"class.blink::Document"** %24, align 8
  %26 = icmp eq %"class.blink::Document"* %25, null
  %27 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %25, i64 0, i32 2
  %28 = icmp eq %"class.blink::UseCounter"* %27, null
  %29 = or i1 %26, %28
  br i1 %29, label %36, label %30

30:                                               ; preds = %21
  %31 = bitcast %"class.blink::UseCounter"* %27 to void (%"class.blink::UseCounter"*, i32)***
  %32 = load void (%"class.blink::UseCounter"*, i32)**, void (%"class.blink::UseCounter"*, i32)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %32, i64 3
  %34 = load void (%"class.blink::UseCounter"*, i32)*, void (%"class.blink::UseCounter"*, i32)** %33, align 8
  tail call void %34(%"class.blink::UseCounter"* nonnull %27, i32 1484) #9
  br label %36

35:                                               ; preds = %8
  store i8 2, i8* %5, align 1
  br label %291

36:                                               ; preds = %16, %18, %21, %30
  %37 = load i8, i8* %5, align 1
  br label %38

38:                                               ; preds = %36, %2
  %39 = phi i8 [ %37, %36 ], [ %6, %2 ]
  %40 = icmp eq i8 %39, 1
  br i1 %40, label %41, label %291

41:                                               ; preds = %38
  %42 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %43 = load %"class.blink::SVGElement"*, %"class.blink::SVGElement"** %42, align 8
  %44 = icmp eq %"class.blink::SVGElement"* %43, null
  br i1 %44, label %291, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 17, i32 0
  %47 = load float, float* %46, align 4
  %48 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 11
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 12
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 5
  br i1 %52, label %53, label %221

53:                                               ; preds = %45
  %54 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %54) #9
  %55 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %55, align 8
  %56 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #9
  %57 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %57, align 8
  %58 = call float @_ZNK5blink19SVGAnimationElement31CurrentValuesForValuesAnimationEfRN3WTF6StringES3_(%"class.blink::SVGAnimationElement"* %0, float %47, %"class.WTF::String"* nonnull dereferenceable(8) %3, %"class.WTF::String"* nonnull dereferenceable(8) %4)
  %59 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 9
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %55, align 8
  %61 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %59, i64 0, i32 0, i32 0
  %62 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %61, align 8
  %63 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %60, %"class.WTF::StringImpl"* %62) #9
  br i1 %63, label %64, label %69

64:                                               ; preds = %53
  %65 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %57, align 8
  %66 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 10, i32 0, i32 0
  %67 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %66, align 8
  %68 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %65, %"class.WTF::StringImpl"* %67) #9
  br i1 %68, label %188, label %69

69:                                               ; preds = %64, %53
  %70 = bitcast %"class.blink::SVGAnimationElement"* %0 to i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)***
  %71 = load i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)**, i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)*** %70, align 8
  %72 = getelementptr inbounds i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)** %71, i64 175
  %73 = load i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.blink::SVGAnimationElement"*, %"class.WTF::String"*, %"class.WTF::String"*)** %72, align 8
  %74 = call zeroext i1 %73(%"class.blink::SVGAnimationElement"* %0, %"class.WTF::String"* nonnull dereferenceable(8) %3, %"class.WTF::String"* nonnull dereferenceable(8) %4) #9
  br i1 %74, label %108, label %75

75:                                               ; preds = %69
  store i8 2, i8* %5, align 1
  %76 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %57, align 8
  %77 = icmp eq %"class.WTF::StringImpl"* %76, null
  br i1 %77, label %91, label %78

78:                                               ; preds = %75
  %79 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %76, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = load atomic i32, i32* %79 monotonic, align 4
  %81 = and i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %76, i64 0, i32 0
  %84 = load i32, i32* %83, align 4
  br i1 %82, label %85, label %87

85:                                               ; preds = %78
  %86 = add i32 %84, -1
  store i32 %86, i32* %83, align 4
  br label %87

87:                                               ; preds = %85, %78
  %88 = phi i32 [ %86, %85 ], [ %84, %78 ]
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %91

90:                                               ; preds = %87
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %76) #9
  br label %91

91:                                               ; preds = %75, %87, %90
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #9
  %92 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %55, align 8
  %93 = icmp eq %"class.WTF::StringImpl"* %92, null
  br i1 %93, label %107, label %94

94:                                               ; preds = %91
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %92, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %96 = load atomic i32, i32* %95 monotonic, align 4
  %97 = and i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %92, i64 0, i32 0
  %100 = load i32, i32* %99, align 4
  br i1 %98, label %101, label %103

101:                                              ; preds = %94
  %102 = add i32 %100, -1
  store i32 %102, i32* %99, align 4
  br label %103

103:                                              ; preds = %101, %94
  %104 = phi i32 [ %102, %101 ], [ %100, %94 ]
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %107

106:                                              ; preds = %103
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %92) #9
  br label %107

107:                                              ; preds = %91, %103, %106
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %54) #9
  br label %291

108:                                              ; preds = %69
  %109 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %55, align 8
  %110 = icmp eq %"class.WTF::StringImpl"* %109, null
  br i1 %110, label %128, label %111

111:                                              ; preds = %108
  %112 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %109, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %113 = load atomic i32, i32* %112 monotonic, align 4
  %114 = and i32 %113, 2
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %128

116:                                              ; preds = %111
  %117 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %109, i64 0, i32 0
  %118 = load i32, i32* %117, align 4
  %119 = zext i32 %118 to i33
  %120 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %119, i33 1) #9
  %121 = extractvalue { i33, i1 } %120, 1
  %122 = extractvalue { i33, i1 } %120, 0
  %123 = icmp slt i33 %122, 0
  %124 = or i1 %121, %123
  br i1 %124, label %125, label %126, !prof !2

125:                                              ; preds = %116
  call void @llvm.trap() #9
  unreachable

126:                                              ; preds = %116
  %127 = trunc i33 %122 to i32
  store i32 %127, i32* %117, align 4
  br label %128

128:                                              ; preds = %126, %111, %108
  %129 = ptrtoint %"class.WTF::StringImpl"* %109 to i64
  %130 = bitcast %"class.WTF::String"* %59 to i64*
  %131 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %61, align 8
  store i64 %129, i64* %130, align 8
  %132 = icmp eq %"class.WTF::StringImpl"* %131, null
  br i1 %132, label %146, label %133

133:                                              ; preds = %128
  %134 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %131, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = load atomic i32, i32* %134 monotonic, align 4
  %136 = and i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %131, i64 0, i32 0
  %139 = load i32, i32* %138, align 4
  br i1 %137, label %140, label %142

140:                                              ; preds = %133
  %141 = add i32 %139, -1
  store i32 %141, i32* %138, align 4
  br label %142

142:                                              ; preds = %140, %133
  %143 = phi i32 [ %141, %140 ], [ %139, %133 ]
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %146

145:                                              ; preds = %142
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %131) #9
  br label %146

146:                                              ; preds = %128, %142, %145
  %147 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 10
  %148 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %57, align 8
  %149 = icmp eq %"class.WTF::StringImpl"* %148, null
  br i1 %149, label %167, label %150

150:                                              ; preds = %146
  %151 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %148, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %152 = load atomic i32, i32* %151 monotonic, align 4
  %153 = and i32 %152, 2
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %167

155:                                              ; preds = %150
  %156 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %148, i64 0, i32 0
  %157 = load i32, i32* %156, align 4
  %158 = zext i32 %157 to i33
  %159 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %158, i33 1) #9
  %160 = extractvalue { i33, i1 } %159, 1
  %161 = extractvalue { i33, i1 } %159, 0
  %162 = icmp slt i33 %161, 0
  %163 = or i1 %160, %162
  br i1 %163, label %164, label %165, !prof !2

164:                                              ; preds = %155
  call void @llvm.trap() #9
  unreachable

165:                                              ; preds = %155
  %166 = trunc i33 %161 to i32
  store i32 %166, i32* %156, align 4
  br label %167

167:                                              ; preds = %165, %150, %146
  %168 = ptrtoint %"class.WTF::StringImpl"* %148 to i64
  %169 = bitcast %"class.WTF::String"* %147 to i64*
  %170 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %147, i64 0, i32 0, i32 0
  %171 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %170, align 8
  store i64 %168, i64* %169, align 8
  %172 = icmp eq %"class.WTF::StringImpl"* %171, null
  br i1 %172, label %186, label %173

173:                                              ; preds = %167
  %174 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %171, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %175 = load atomic i32, i32* %174 monotonic, align 4
  %176 = and i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %171, i64 0, i32 0
  %179 = load i32, i32* %178, align 4
  br i1 %177, label %180, label %182

180:                                              ; preds = %173
  %181 = add i32 %179, -1
  store i32 %181, i32* %178, align 4
  br label %182

182:                                              ; preds = %180, %173
  %183 = phi i32 [ %181, %180 ], [ %179, %173 ]
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %186

185:                                              ; preds = %182
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %171) #9
  br label %186

186:                                              ; preds = %167, %182, %185
  %187 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %57, align 8
  br label %188

188:                                              ; preds = %186, %64
  %189 = phi %"class.WTF::StringImpl"* [ %187, %186 ], [ %65, %64 ]
  %190 = icmp eq %"class.WTF::StringImpl"* %189, null
  br i1 %190, label %204, label %191

191:                                              ; preds = %188
  %192 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %189, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %193 = load atomic i32, i32* %192 monotonic, align 4
  %194 = and i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %189, i64 0, i32 0
  %197 = load i32, i32* %196, align 4
  br i1 %195, label %198, label %200

198:                                              ; preds = %191
  %199 = add i32 %197, -1
  store i32 %199, i32* %196, align 4
  br label %200

200:                                              ; preds = %198, %191
  %201 = phi i32 [ %199, %198 ], [ %197, %191 ]
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %203, label %204

203:                                              ; preds = %200
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %189) #9
  br label %204

204:                                              ; preds = %188, %200, %203
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #9
  %205 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %55, align 8
  %206 = icmp eq %"class.WTF::StringImpl"* %205, null
  br i1 %206, label %220, label %207

207:                                              ; preds = %204
  %208 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %205, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %209 = load atomic i32, i32* %208 monotonic, align 4
  %210 = and i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %205, i64 0, i32 0
  %213 = load i32, i32* %212, align 4
  br i1 %211, label %214, label %216

214:                                              ; preds = %207
  %215 = add i32 %213, -1
  store i32 %215, i32* %212, align 4
  br label %216

216:                                              ; preds = %214, %207
  %217 = phi i32 [ %215, %214 ], [ %213, %207 ]
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %219, label %220

219:                                              ; preds = %216
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %205) #9
  br label %220

220:                                              ; preds = %204, %216, %219
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %54) #9
  br label %283

221:                                              ; preds = %45
  %222 = icmp eq i32 %49, 2
  br i1 %222, label %283, label %223

223:                                              ; preds = %221
  %224 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 7, i32 0, i32 0, i32 2
  %225 = load i32, i32* %224, align 4
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %229, label %227

227:                                              ; preds = %223
  %228 = tail call float @_ZNK5blink19SVGAnimationElement29CalculatePercentFromKeyPointsEf(%"class.blink::SVGAnimationElement"* %0, float %47)
  br label %283

229:                                              ; preds = %223
  %230 = icmp eq i32 %49, 3
  br i1 %230, label %231, label %263

231:                                              ; preds = %229
  %232 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 3
  %233 = load i8, i8* %232, align 1, !range !4
  %234 = icmp eq i8 %233, 0
  %235 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 6
  %236 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 5
  %237 = select i1 %234, %"class.WTF::Vector.62"* %236, %"class.WTF::Vector.62"* %235
  %238 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %237, i64 0, i32 0, i32 0, i32 2
  %239 = load i32, i32* %238, align 4
  %240 = icmp ugt i32 %239, 1
  br i1 %240, label %241, label %283

241:                                              ; preds = %231
  %242 = add i32 %239, -1
  %243 = icmp ugt i32 %242, 1
  br i1 %243, label %244, label %259

244:                                              ; preds = %241
  %245 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* %237, i32 1) #9
  %246 = load float, float* %245, align 4
  %247 = fcmp ogt float %246, %47
  br i1 %247, label %259, label %248

248:                                              ; preds = %244, %252
  %249 = phi i32 [ %250, %252 ], [ 1, %244 ]
  %250 = add nuw i32 %249, 1
  %251 = icmp eq i32 %250, %242
  br i1 %251, label %259, label %252

252:                                              ; preds = %248
  %253 = load i8, i8* %232, align 1, !range !4
  %254 = icmp eq i8 %253, 0
  %255 = select i1 %254, %"class.WTF::Vector.62"* %236, %"class.WTF::Vector.62"* %235
  %256 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* %255, i32 %250) #9
  %257 = load float, float* %256, align 4
  %258 = fcmp ogt float %257, %47
  br i1 %258, label %259, label %248

259:                                              ; preds = %248, %252, %244, %241
  %260 = phi i32 [ 1, %241 ], [ 1, %244 ], [ %242, %248 ], [ %250, %252 ]
  %261 = add i32 %260, -1
  %262 = tail call float @_ZNK5blink19SVGAnimationElement25CalculatePercentForSplineEfj(%"class.blink::SVGAnimationElement"* %0, float %47, i32 %261)
  br label %283

263:                                              ; preds = %229
  %264 = or i32 %51, 2
  %265 = icmp eq i32 %264, 3
  %266 = icmp eq i32 %49, 0
  %267 = and i1 %266, %265
  br i1 %267, label %268, label %283

268:                                              ; preds = %263
  %269 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 3
  %270 = load i8, i8* %269, align 1, !range !4
  %271 = icmp eq i8 %270, 0
  %272 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 6
  %273 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 5
  %274 = select i1 %271, %"class.WTF::Vector.62"* %273, %"class.WTF::Vector.62"* %272
  %275 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %274, i64 0, i32 0, i32 0, i32 2
  %276 = load i32, i32* %275, align 4
  %277 = icmp eq i32 %276, 2
  br i1 %277, label %278, label %283

278:                                              ; preds = %268
  %279 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"* %274, i32 1) #9
  %280 = load float, float* %279, align 4
  %281 = fcmp olt float %280, %47
  %282 = uitofp i1 %281 to float
  br label %283

283:                                              ; preds = %231, %221, %278, %268, %263, %220, %227, %259
  %284 = phi float [ %58, %220 ], [ %262, %259 ], [ %228, %227 ], [ %47, %263 ], [ %282, %278 ], [ %47, %268 ], [ %47, %221 ], [ %47, %231 ]
  %285 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 17, i32 1
  %286 = load i32, i32* %285, align 4
  %287 = bitcast %"class.blink::SVGAnimationElement"* %0 to void (%"class.blink::SVGAnimationElement"*, %"struct.blink::SMILAnimationValue"*, float, i32)***
  %288 = load void (%"class.blink::SVGAnimationElement"*, %"struct.blink::SMILAnimationValue"*, float, i32)**, void (%"class.blink::SVGAnimationElement"*, %"struct.blink::SMILAnimationValue"*, float, i32)*** %287, align 8
  %289 = getelementptr inbounds void (%"class.blink::SVGAnimationElement"*, %"struct.blink::SMILAnimationValue"*, float, i32)*, void (%"class.blink::SVGAnimationElement"*, %"struct.blink::SMILAnimationValue"*, float, i32)** %288, i64 177
  %290 = load void (%"class.blink::SVGAnimationElement"*, %"struct.blink::SMILAnimationValue"*, float, i32)*, void (%"class.blink::SVGAnimationElement"*, %"struct.blink::SMILAnimationValue"*, float, i32)** %289, align 8
  call void %290(%"class.blink::SVGAnimationElement"* %0, %"struct.blink::SMILAnimationValue"* %1, float %284, i32 %286) #9
  br label %291

291:                                              ; preds = %35, %283, %107, %41, %38
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink19SVGAnimationElement34OverwritesUnderlyingAnimationValueEv(%"class.blink::SVGAnimationElement"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call zeroext i1 @_ZNK5blink19SVGAnimationElement10IsAdditiveEv(%"class.blink::SVGAnimationElement"* %0)
  br i1 %2, label %12, label %3

3:                                                ; preds = %1
  %4 = tail call zeroext i1 @_ZNK5blink19SVGAnimationElement13IsAccumulatedEv(%"class.blink::SVGAnimationElement"* %0)
  br i1 %4, label %12, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 12
  %7 = load i32, i32* %6, align 4
  %8 = add i32 %7, -3
  %9 = icmp ugt i32 %8, 1
  %10 = icmp ne i32 %7, 0
  %11 = and i1 %10, %9
  ret i1 %11

12:                                               ; preds = %3, %1
  ret i1 false
}

declare i8* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv(%"class.blink::ScriptWrappable"*) unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink19SVGAnimationElementD2Ev(%"class.blink::SVGAnimationElement"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [181 x i8*], [3 x i8*], [3 x i8*] }, { [181 x i8*], [3 x i8*], [3 x i8*] }* @_ZTVN5blink19SVGAnimationElementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [181 x i8*], [3 x i8*], [3 x i8*] }, { [181 x i8*], [3 x i8*], [3 x i8*] }* @_ZTVN5blink19SVGAnimationElementE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [181 x i8*], [3 x i8*], [3 x i8*] }, { [181 x i8*], [3 x i8*], [3 x i8*] }* @_ZTVN5blink19SVGAnimationElementE, i64 0, inrange i32 2, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 10, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %21, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  br i1 %12, label %15, label %17

15:                                               ; preds = %8
  %16 = add i32 %14, -1
  store i32 %16, i32* %13, align 4
  br label %17

17:                                               ; preds = %15, %8
  %18 = phi i32 [ %16, %15 ], [ %14, %8 ]
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %17
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %6) #9
  br label %21

21:                                               ; preds = %1, %17, %20
  %22 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 9, i32 0, i32 0
  %23 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %22, align 8
  %24 = icmp eq %"class.WTF::StringImpl"* %23, null
  br i1 %24, label %38, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %23, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load atomic i32, i32* %26 monotonic, align 4
  %28 = and i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %23, i64 0, i32 0
  %31 = load i32, i32* %30, align 4
  br i1 %29, label %32, label %34

32:                                               ; preds = %25
  %33 = add i32 %31, -1
  store i32 %33, i32* %30, align 4
  br label %34

34:                                               ; preds = %32, %25
  %35 = phi i32 [ %33, %32 ], [ %31, %25 ]
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %34
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %23) #9
  br label %38

38:                                               ; preds = %21, %34, %37
  %39 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  %40 = load %"class.gfx::CubicBezier"*, %"class.gfx::CubicBezier"** %39, align 8
  %41 = icmp eq %"class.gfx::CubicBezier"* %40, null
  %42 = bitcast %"class.gfx::CubicBezier"* %40 to i8*
  br i1 %41, label %49, label %43, !prof !3

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 8, i32 0, i32 0, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %48, label %47, !prof !2

47:                                               ; preds = %43
  store i32 0, i32* %44, align 4
  br label %48

48:                                               ; preds = %47, %43
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %42) #9
  store %"class.gfx::CubicBezier"* null, %"class.gfx::CubicBezier"** %39, align 8
  br label %49

49:                                               ; preds = %38, %48
  %50 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 7, i32 0, i32 0, i32 0
  %51 = load float*, float** %50, align 8
  %52 = icmp eq float* %51, null
  %53 = bitcast float* %51 to i8*
  br i1 %52, label %60, label %54, !prof !3

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 7, i32 0, i32 0, i32 2
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %59, label %58, !prof !2

58:                                               ; preds = %54
  store i32 0, i32* %55, align 4
  br label %59

59:                                               ; preds = %58, %54
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %53) #9
  store float* null, float** %50, align 8
  br label %60

60:                                               ; preds = %49, %59
  %61 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %62 = load float*, float** %61, align 8
  %63 = icmp eq float* %62, null
  %64 = bitcast float* %62 to i8*
  br i1 %63, label %71, label %65, !prof !3

65:                                               ; preds = %60
  %66 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 6, i32 0, i32 0, i32 2
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %70, label %69, !prof !2

69:                                               ; preds = %65
  store i32 0, i32* %66, align 4
  br label %70

70:                                               ; preds = %69, %65
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %64) #9
  store float* null, float** %61, align 8
  br label %71

71:                                               ; preds = %60, %70
  %72 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %73 = load float*, float** %72, align 8
  %74 = icmp eq float* %73, null
  %75 = bitcast float* %73 to i8*
  br i1 %74, label %82, label %76, !prof !3

76:                                               ; preds = %71
  %77 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 5, i32 0, i32 0, i32 2
  %78 = load i32, i32* %77, align 4
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %81, label %80, !prof !2

80:                                               ; preds = %76
  store i32 0, i32* %77, align 4
  br label %81

81:                                               ; preds = %80, %76
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %75) #9
  store float* null, float** %72, align 8
  br label %82

82:                                               ; preds = %71, %81
  %83 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 4
  %84 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %83, i64 0, i32 0, i32 0, i32 0
  %85 = load %"class.WTF::String"*, %"class.WTF::String"** %84, align 8
  %86 = icmp eq %"class.WTF::String"* %85, null
  br i1 %86, label %121, label %87, !prof !3

87:                                               ; preds = %82
  %88 = bitcast %"class.WTF::String"* %85 to i8*
  %89 = getelementptr inbounds %"class.blink::SVGAnimationElement", %"class.blink::SVGAnimationElement"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %90 = load i32, i32* %89, align 4
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %119, label %92, !prof !2

92:                                               ; preds = %87
  %93 = zext i32 %90 to i64
  %94 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %85, i64 %93
  br label %95

95:                                               ; preds = %113, %92
  %96 = phi %"class.WTF::String"* [ %114, %113 ], [ %85, %92 ]
  %97 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %96, i64 0, i32 0, i32 0
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %113, label %100

100:                                              ; preds = %95
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  br i1 %104, label %107, label %109

107:                                              ; preds = %100
  %108 = add i32 %106, -1
  store i32 %108, i32* %105, align 4
  br label %109

109:                                              ; preds = %107, %100
  %110 = phi i32 [ %108, %107 ], [ %106, %100 ]
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %98) #9
  br label %113

113:                                              ; preds = %112, %109, %95
  %114 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %96, i64 1
  %115 = icmp eq %"class.WTF::String"* %114, %94
  br i1 %115, label %116, label %95

116:                                              ; preds = %113
  store i32 0, i32* %89, align 4
  %117 = bitcast %"class.WTF::Vector.57"* %83 to i8**
  %118 = load i8*, i8** %117, align 8
  br label %119

119:                                              ; preds = %116, %87
  %120 = phi i8* [ %118, %116 ], [ %88, %87 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %120) #9
  store %"class.WTF::String"* null, %"class.WTF::String"** %84, align 8
  br label %121

121:                                              ; preds = %82, %119
  %122 = bitcast %"class.blink::SVGAnimationElement"* %0 to %"class.blink::SVGSMILElement"*
  tail call void @_ZN5blink14SVGSMILElementD2Ev(%"class.blink::SVGSMILElement"* %122) #9
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink19SVGAnimationElementD0Ev(%"class.blink::SVGAnimationElement"*) unnamed_addr #3 comdat align 2 {
  tail call void @llvm.trap() #10
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable18HasPendingActivityEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink11EventTarget17HasEventListenersEv(%"class.blink::EventTarget"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.blink::EventTarget"* %0 to %"class.blink::EventTargetData"* (%"class.blink::EventTarget"*)***
  %3 = load %"class.blink::EventTargetData"* (%"class.blink::EventTarget"*)**, %"class.blink::EventTargetData"* (%"class.blink::EventTarget"*)*** %2, align 8
  %4 = getelementptr inbounds %"class.blink::EventTargetData"* (%"class.blink::EventTarget"*)*, %"class.blink::EventTargetData"* (%"class.blink::EventTarget"*)** %3, i64 25
  %5 = load %"class.blink::EventTargetData"* (%"class.blink::EventTarget"*)*, %"class.blink::EventTargetData"* (%"class.blink::EventTarget"*)** %4, align 8
  %6 = tail call %"class.blink::EventTargetData"* %5(%"class.blink::EventTarget"* %0) #9
  %7 = icmp eq %"class.blink::EventTargetData"* %6, null
  br i1 %7, label %12, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.blink::EventTargetData", %"class.blink::EventTargetData"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp ne i32 %10, 0
  br label %12

12:                                               ; preds = %1, %8
  %13 = phi i1 [ %11, %8 ], [ false, %1 ]
  ret i1 %13
}

declare void @_ZNK5blink14SVGSMILElement5TraceEPNS_7VisitorE(%"class.blink::SVGSMILElement"*, %"class.blink::Visitor"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.blink::WrapperTypeInfo"* @_ZNK5blink19SVGAnimationElement18GetWrapperTypeInfoEv(%"class.blink::SVGAnimationElement"*) unnamed_addr #0 comdat align 2 {
  %2 = load %"struct.blink::WrapperTypeInfo"*, %"struct.blink::WrapperTypeInfo"** @_ZN5blink19SVGAnimationElement18wrapper_type_info_E, align 8
  ret %"struct.blink::WrapperTypeInfo"* %2
}

declare %"class.v8::Value"* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE(%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*) unnamed_addr #1

declare %"class.v8::Object"* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE(%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*) unnamed_addr #1

declare dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink4Node13InterfaceNameEv(%"class.blink::Node"*) unnamed_addr #1

declare %"class.blink::ExecutionContext"* @_ZNK5blink4Node19GetExecutionContextEv(%"class.blink::Node"*) unnamed_addr #1

declare %"class.blink::Node"* @_ZN5blink4Node6ToNodeEv(%"class.blink::Node"*) unnamed_addr #1

declare %"class.blink::DOMWindow"* @_ZNK5blink11EventTarget11ToDOMWindowEv(%"class.blink::EventTarget"*) unnamed_addr #1

declare %"class.blink::LocalDOMWindow"* @_ZNK5blink11EventTarget16ToLocalDOMWindowEv(%"class.blink::EventTarget"*) unnamed_addr #1

declare %"class.blink::LocalDOMWindow"* @_ZN5blink11EventTarget16ToLocalDOMWindowEv(%"class.blink::EventTarget"*) unnamed_addr #1

declare %"class.blink::MessagePort"* @_ZN5blink11EventTarget13ToMessagePortEv(%"class.blink::EventTarget"*) unnamed_addr #1

declare %"class.blink::ServiceWorker"* @_ZN5blink11EventTarget15ToServiceWorkerEv(%"class.blink::EventTarget"*) unnamed_addr #1

declare %"class.blink::PortalHost"* @_ZN5blink11EventTarget12ToPortalHostEv(%"class.blink::EventTarget"*) unnamed_addr #1

declare void @_ZN5blink4Node23RemoveAllEventListenersEv(%"class.blink::Node"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink11EventTarget15KeepEventInNodeERKNS_5EventE(%"class.blink::EventTarget"*, %"class.blink::Event"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink11EventTarget27IsWindowOrWorkerGlobalScopeEv(%"class.blink::EventTarget"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare zeroext i1 @_ZN5blink11EventTarget24AddEventListenerInternalERKN3WTF12AtomicStringEPNS_13EventListenerEPKNS_31AddEventListenerOptionsResolvedE(%"class.blink::EventTarget"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::EventListener"*, %"class.blink::AddEventListenerOptionsResolved"*) unnamed_addr #1

declare void @_ZN5blink14SVGSMILElement18AddedEventListenerERKN3WTF12AtomicStringERNS_23RegisteredEventListenerE(%"class.blink::SVGSMILElement"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::RegisteredEventListener"* dereferenceable(16)) unnamed_addr #1

declare void @_ZN5blink10SVGElement20RemovedEventListenerERKN3WTF12AtomicStringERKNS_23RegisteredEventListenerE(%"class.blink::SVGElement"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::RegisteredEventListener"* dereferenceable(16)) unnamed_addr #1

declare i32 @_ZN5blink4Node21DispatchEventInternalERNS_5EventE(%"class.blink::Node"*, %"class.blink::Event"*) unnamed_addr #1

declare %"class.blink::EventTargetData"* @_ZN5blink4Node18GetEventTargetDataEv(%"class.blink::Node"*) unnamed_addr #1

declare dereferenceable(56) %"class.blink::EventTargetData"* @_ZN5blink4Node21EnsureEventTargetDataEv(%"class.blink::Node"*) unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZNK5blink7Element8nodeNameEv(%"class.blink::Element"*) unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZNK5blink4Node9nodeValueEv(%"class.blink::Node"*) unnamed_addr #1

declare void @_ZN5blink4Node12setNodeValueERKN3WTF6StringE(%"class.blink::Node"*, %"class.WTF::String"* dereferenceable(8)) unnamed_addr #1

declare i32 @_ZNK5blink7Element11getNodeTypeEv(%"class.blink::Element"*) unnamed_addr #1

declare %"class.blink::Node"* @_ZNK5blink7Element5CloneERNS_8DocumentENS_17CloneChildrenFlagE(%"class.blink::Element"*, %"class.blink::Document"* dereferenceable(2848), i32) unnamed_addr #1

declare void @_ZN5blink4Node14setTextContentERKN3WTF6StringE(%"class.blink::Node"*, %"class.WTF::String"* dereferenceable(8)) unnamed_addr #1

declare void @_ZN5blink4Node24setTextContentForBindingEPKNS_28V8UnionStringOrTrustedScriptERNS_14ExceptionStateE(%"class.blink::Node"*, %"class.blink::V8UnionStringOrTrustedScript"*, %"class.blink::ExceptionState"* dereferenceable(72)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i8 @_ZNK5blink4Node11GetPseudoIdEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i8 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink4Node21IsMediaControlElementEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink4Node15IsMediaControlsEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink4Node14IsMediaElementEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink4Node20IsTextTrackContainerEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink4Node12IsVTTElementEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink4Node15IsAttributeNodeEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink4Node19IsCharacterDataNodeEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink4Node19IsFrameOwnerElementEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink4Node27IsMediaRemotingInterstitialEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink4Node30IsPictureInPictureInterstitialEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element23CanContainRangeEndPointEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink4Node11SheetLoadedEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink4Node43NotifyLoadedSheetAndAllCriticalSubresourcesENS0_22LoadedSheetErrorStatusE(%"class.blink::Node"*, i32) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink4Node24StartLoadingDynamicSheetEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN5blink13ContainerNode10SetFocusedEbNS_5mojom9FocusTypeE(%"class.blink::ContainerNode"*, i1 zeroext, i32) unnamed_addr #1

declare void @_ZN5blink13ContainerNode10SetDraggedEb(%"class.blink::ContainerNode"*, i1 zeroext) unnamed_addr #1

declare zeroext i1 @_ZNK5blink4Node25ShouldHaveFocusAppearanceEv(%"class.blink::Node"*) unnamed_addr #1

declare void @_ZNK5blink13ContainerNode11BoundingBoxEv() unnamed_addr

declare zeroext i1 @_ZNK5blink7Element16ChildTypeAllowedENS_4Node8NodeTypeE(%"class.blink::Element"*, i32) unnamed_addr #1

declare zeroext i1 @_ZNK5blink4Node17CanStartSelectionEv(%"class.blink::Node"*) unnamed_addr #1

declare void @_ZN5blink7Element16AttachLayoutTreeERNS_4Node13AttachContextE(%"class.blink::Element"*, %"struct.blink::Node::AttachContext"* dereferenceable(32)) unnamed_addr #1

declare void @_ZN5blink10SVGElement16DetachLayoutTreeEb(%"class.blink::SVGElement"*, i1 zeroext) unnamed_addr #1

declare i32 @_ZN5blink14SVGSMILElement12InsertedIntoERNS_13ContainerNodeE(%"class.blink::SVGSMILElement"*, %"class.blink::ContainerNode"* dereferenceable(80)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink4Node36DidNotifySubtreeInsertionsToDocumentEv(%"class.blink::Node"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN5blink14SVGSMILElement11RemovedFromERNS_13ContainerNodeE(%"class.blink::SVGSMILElement"*, %"class.blink::ContainerNode"* dereferenceable(80)) unnamed_addr #1

declare zeroext i1 @_ZN5blink4Node28WillRespondToMouseMoveEventsEv(%"class.blink::Node"*) unnamed_addr #1

declare zeroext i1 @_ZN5blink4Node29WillRespondToMouseClickEventsEv(%"class.blink::Node"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::EventDispatchHandlingState"* @_ZN5blink4Node23PreDispatchEventHandlerERNS_5EventE(%"class.blink::Node"*, %"class.blink::Event"*) unnamed_addr #0 comdat align 2 {
  ret %"class.blink::EventDispatchHandlingState"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink4Node24PostDispatchEventHandlerERNS_5EventEPNS_26EventDispatchHandlingStateE(%"class.blink::Node"*, %"class.blink::Event"*, %"class.blink::EventDispatchHandlingState"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN5blink4Node17HandleLocalEventsERNS_5EventE(%"class.blink::Node"*, %"class.blink::Event"*) unnamed_addr #1

declare void @_ZN5blink4Node19DefaultEventHandlerERNS_5EventE(%"class.blink::Node"*, %"class.blink::Event"*) unnamed_addr #1

declare zeroext i1 @_ZNK5blink4Node21HasActivationBehaviorEv(%"class.blink::Node"*) unnamed_addr #1

declare %"class.blink::LayoutBox"* @_ZN5blink4Node13AutoscrollBoxEv(%"class.blink::Node"*) unnamed_addr #1

declare void @_ZN5blink4Node14StopAutoscrollEv(%"class.blink::Node"*) unnamed_addr #1

declare void @_ZN5blink7Element20DidMoveToNewDocumentERNS_8DocumentE(%"class.blink::Element"*, %"class.blink::Document"* dereferenceable(2848)) unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZNK5blink4Node13DebugNodeNameEv(%"class.blink::Node"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::ComputedStyle"* @_ZN5blink7Element26VirtualEnsureComputedStyleENS_8PseudoIdERKN3WTF12AtomicStringE(%"class.blink::Element"*, i8 zeroext, %"class.WTF::AtomicString"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  %4 = tail call %"class.blink::ComputedStyle"* @_ZN5blink7Element19EnsureComputedStyleENS_8PseudoIdERKN3WTF12AtomicStringE(%"class.blink::Element"* %0, i8 zeroext %1, %"class.WTF::AtomicString"* dereferenceable(8) %2) #9
  ret %"class.blink::ComputedStyle"* %4
}

declare void @_ZN5blink10SVGElement15ChildrenChangedERKNS_13ContainerNode14ChildrenChangeE(%"class.blink::SVGElement"*, %"struct.blink::ContainerNode::ChildrenChange"* dereferenceable(56)) unnamed_addr #1

declare zeroext i1 @_ZNK5blink13ContainerNode42ChildrenChangedAllChildrenRemovedNeedsListEv(%"class.blink::ContainerNode"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink13ContainerNode20ChildrenCanHaveStyleEv(%"class.blink::ContainerNode"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

declare %"class.blink::LayoutBox"* @_ZNK5blink7Element24GetLayoutBoxForScrollingEv(%"class.blink::Element"*) unnamed_addr #1

declare %"class.blink::Element"* @_ZN5blink7Element18GetAnimationTargetEv(%"class.blink::Element"*) unnamed_addr #1

declare %"class.WTF::HashMap.651"* @_ZNK5blink7Element24GetCheckedAttributeTypesEv(%"class.blink::Element"*) unnamed_addr #1

declare i32 @_ZN5blink7Element11scrollWidthEv(%"class.blink::Element"*) unnamed_addr #1

declare i32 @_ZN5blink7Element12scrollHeightEv(%"class.blink::Element"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::CSSPropertyValueSet"* @_ZN5blink7Element36AdditionalPresentationAttributeStyleEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret %"class.blink::CSSPropertyValueSet"* null
}

declare zeroext i1 @_ZNK5blink14SVGSMILElement23IsPresentationAttributeERKNS_13QualifiedNameE(%"class.blink::SVGSMILElement"*, %"class.blink::QualifiedName"* dereferenceable(8)) unnamed_addr #1

declare void @_ZN5blink10SVGElement36CollectStyleForPresentationAttributeERKNS_13QualifiedNameERKN3WTF12AtomicStringEPNS_26MutableCSSPropertyValueSetE(%"class.blink::SVGElement"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::MutableCSSPropertyValueSet"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element37HasExtraStyleForPresentationAttributeEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare void @_ZN5blink10SVGElement41CollectExtraStyleForPresentationAttributeEPNS_26MutableCSSPropertyValueSetE(%"class.blink::SVGElement"*, %"class.blink::MutableCSSPropertyValueSet"*) unnamed_addr #1

declare void @_ZN5blink10SVGElement16AttributeChangedERKNS_7Element27AttributeModificationParamsE(%"class.blink::SVGElement"*, %"struct.blink::Element::AttributeModificationParams"* dereferenceable(32)) unnamed_addr #1

declare zeroext i1 @_ZNK5blink7Element21HasLegalLinkAttributeERKNS_13QualifiedNameE(%"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8)) unnamed_addr #1

declare dereferenceable(8) %"class.blink::QualifiedName"* @_ZNK5blink7Element24SubResourceAttributeNameEv(%"class.blink::Element"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink7Element31CloneNonAttributePropertiesFromERKS0_NS_17CloneChildrenFlagE(%"class.blink::Element"*, %"class.blink::Element"* dereferenceable(104), i32) unnamed_addr #0 comdat align 2 {
  ret void
}

declare %"class.blink::LayoutObject"* @_ZN5blink7Element18CreateLayoutObjectERKNS_13ComputedStyleENS_12LegacyLayoutE(%"class.blink::Element"*, %"class.blink::ComputedStyle"*, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink14SVGSMILElement20LayoutObjectIsNeededERKNS_13ComputedStyleE(%"class.blink::SVGSMILElement"*, %"class.blink::ComputedStyle"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare void @_ZN5blink10SVGElement15AccessKeyActionENS_27SimulatedClickCreationScopeE(%"class.blink::SVGElement"*, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element14IsURLAttributeERKNS_9AttributeE(%"class.blink::Element"*, %"class.blink::Attribute"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element22IsHTMLContentAttributeERKNS_9AttributeE(%"class.blink::Element"*, %"class.blink::Attribute"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element43IsSVGAnimationAttributeSettingJavaScriptURLERKNS_9AttributeE(%"class.blink::Element"*, %"class.blink::Attribute"* dereferenceable(16)) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element10IsLiveLinkEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare %"class.WTF::StringImpl"* @_ZNK5blink7Element14ImageSourceURLEv(%"class.blink::Element"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::Image"* @_ZN5blink7Element13ImageContentsEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret %"class.blink::Image"* null
}

declare void @_ZN5blink7Element5focusERKNS_11FocusParamsE(%"class.blink::Element"*, %"struct.blink::FocusParams"*) unnamed_addr #1

declare void @_ZN5blink7Element32UpdateFocusAppearanceWithOptionsENS_24SelectionBehaviorOnFocusEPKNS_12FocusOptionsE(%"class.blink::Element"*, i32, %"class.blink::FocusOptions"*) unnamed_addr #1

declare void @_ZN5blink7Element4blurEv(%"class.blink::Element"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink10SVGElement13SupportsFocusEv(%"class.blink::SVGElement"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare zeroext i1 @_ZNK5blink7Element19IsKeyboardFocusableEv(%"class.blink::Element"*) unnamed_addr #1

declare zeroext i1 @_ZNK5blink7Element16IsMouseFocusableEv(%"class.blink::Element"*) unnamed_addr #1

declare void @_ZN5blink7Element18DispatchFocusEventEPS0_NS_5mojom9FocusTypeEPNS_23InputDeviceCapabilitiesE(%"class.blink::Element"*, %"class.blink::Element"*, i32, %"class.blink::InputDeviceCapabilities"*) unnamed_addr #1

declare void @_ZN5blink7Element17DispatchBlurEventEPS0_NS_5mojom9FocusTypeEPNS_23InputDeviceCapabilitiesE(%"class.blink::Element"*, %"class.blink::Element"*, i32, %"class.blink::InputDeviceCapabilities"*) unnamed_addr #1

declare void @_ZN5blink7Element20DispatchFocusInEventERKN3WTF12AtomicStringEPS0_NS_5mojom9FocusTypeEPNS_23InputDeviceCapabilitiesE(%"class.blink::Element"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::Element"*, i32, %"class.blink::InputDeviceCapabilities"*) unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZNK5blink10SVGElement5titleEv(%"class.blink::SVGElement"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK5blink7Element14DefaultToolTipEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret %"class.WTF::StringImpl"* null
}

declare dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink7Element14ShadowPseudoIdEv(%"class.blink::Element"*) unnamed_addr #1

declare void @_ZN5blink7Element21FinishParsingChildrenEv(%"class.blink::Element"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink7Element20BeginParsingChildrenEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, -1025
  store i32 %4, i32* %2, align 8
  ret void
}

declare zeroext i1 @_ZNK5blink7Element24CanGeneratePseudoElementENS_8PseudoIdE(%"class.blink::Element"*, i8 zeroext) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element25MatchesDefaultPseudoClassEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element25MatchesEnabledPseudoClassEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element26MatchesReadOnlyPseudoClassEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element27MatchesReadWritePseudoClassEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element28MatchesValidityPseudoClassesEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare zeroext i1 @_ZNK5blink7Element25MayTriggerVirtualKeyboardEv(%"class.blink::Element"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element25ShouldAppearIndeterminateEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element21IsDateTimeEditElementEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element22IsDateTimeFieldElementEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element24IsPickerIndicatorElementEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element20IsFormControlElementEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element19IsSpinButtonElementEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element13IsTextControlEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element21IsOptionalFormControlEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element21IsRequiredFormControlEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element12willValidateEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink7Element14IsValidElementEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element9IsInRangeEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element12IsOutOfRangeEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element20IsClearButtonElementEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element15IsScriptElementEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element21IsVTTCueBackgroundBoxEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element20IsSliderThumbElementEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element25HasNonInBodyInsertionModeEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element21IsDisabledFormControlEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare void @_ZN5blink14SVGSMILElement20BuildPendingResourceEv(%"class.blink::SVGSMILElement"*) unnamed_addr #1

declare void @_ZN5blink7Element9SetActiveEb(%"class.blink::Element"*, i1 zeroext) unnamed_addr #1

declare void @_ZN5blink7Element10SetHoveredEb(%"class.blink::Element"*, i1 zeroext) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element11IsAdRelatedEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare void @_ZN5blink10SVGElement15WillRecalcStyleENS_17StyleRecalcChangeE(%"class.blink::SVGElement"*, i64) unnamed_addr #1

declare void @_ZN5blink7Element14DidRecalcStyleENS_17StyleRecalcChangeE(%"class.blink::Element"*, i64) unnamed_addr #1

declare void @_ZN5blink10SVGElement26CustomStyleForLayoutObjectERKNS_18StyleRecalcContextE() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink7Element16GetNamedItemTypeEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i32 0
}

declare zeroext i1 @_ZNK5blink7Element16IsFocusableStyleEv(%"class.blink::Element"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink7Element22ParserDidSetAttributesEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element23AreAuthorShadowsAllowedEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink7Element25DidAddUserAgentShadowRootERNS_10ShadowRootE(%"class.blink::Element"*, %"class.blink::ShadowRoot"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element31AlwaysCreateUserAgentShadowRootEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare i32 @_ZNK5blink7Element15DefaultTabIndexEv(%"class.blink::Element"*) unnamed_addr #1

declare dereferenceable(104) %"class.blink::Element"* @_ZNK5blink7Element33CloneWithoutAttributesAndChildrenERNS_8DocumentE(%"class.blink::Element"*, %"class.blink::Document"* dereferenceable(2848)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink7Element27TypeShouldForceLegacyLayoutEv(%"class.blink::Element"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare void @_ZNK5blink10SVGElement29LocalCoordinateSpaceTransformENS0_8CTMScopeE() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink10SVGElement20IsSVGGeometryElementEv(%"class.blink::SVGElement"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink10SVGElement20IsSVGGraphicsElementEv(%"class.blink::SVGElement"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink10SVGElement14IsFilterEffectEv(%"class.blink::SVGElement"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink10SVGElement13IsTextContentEv(%"class.blink::SVGElement"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink10SVGElement17IsTextPositioningEv(%"class.blink::SVGElement"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink10SVGElement22IsStructurallyExternalEv(%"class.blink::SVGElement"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare void @_ZN5blink14SVGSMILElement19SvgAttributeChangedERKNS_10SVGElement25SvgAttributeChangedParamsE(%"class.blink::SVGSMILElement"*, %"struct.blink::SVGElement::SvgAttributeChangedParams"* dereferenceable(16)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::AffineTransform"* @_ZN5blink10SVGElement22AnimateMotionTransformEv(%"class.blink::SVGElement"*) unnamed_addr #0 comdat align 2 {
  ret %"class.blink::AffineTransform"* null
}

declare zeroext i1 @_ZN5blink10SVGElement27HaveLoadedRequiredResourcesEv(%"class.blink::SVGElement"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink10SVGElement22SelfHasRelativeLengthsEv(%"class.blink::SVGElement"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare void @_ZN5blink14SVGSMILElement24DidChangeAnimationTargetEv(%"class.blink::SVGSMILElement"*) unnamed_addr #1

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float @_ZN5blink19SVGAnimationElement17CalculateDistanceERKN3WTF6StringES4_(%"class.blink::SVGAnimationElement"*, %"class.WTF::String"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  ret float -1.000000e+00
}

; Function Attrs: nounwind ssp uwtable
declare %"class.blink::Element"* @_ZThn80_N5blink7Element18GetAnimationTargetEv(%"class.blink::Element"*) unnamed_addr #0 align 2

; Function Attrs: nounwind ssp uwtable
declare void @_ZThn168_NK5blink14SVGSMILElement5TraceEPNS_7VisitorE(%"class.blink::SVGSMILElement"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String15StripWhiteSpaceEv(%"class.WTF::String"*) local_unnamed_addr #1

declare float @_ZNK3WTF6String7ToFloatEPb(%"class.WTF::String"*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN3gfx11CubicBezierELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.67"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %22

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.67", %"class.WTF::Vector.67"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.gfx::CubicBezier"*, %"class.gfx::CubicBezier"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.67", %"class.WTF::Vector.67"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %6, i64 %9
  %11 = bitcast %"class.WTF::Vector.67"* %0 to i64*
  store atomic i64 0, i64* %11 monotonic, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector.67", %"class.WTF::Vector.67"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %8, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %4, %14
  %15 = phi %"class.gfx::CubicBezier"* [ %18, %14 ], [ %6, %4 ]
  %16 = phi %"class.gfx::CubicBezier"* [ %17, %14 ], [ null, %4 ]
  tail call void @_ZN3gfx11CubicBezierC1ERKS0_(%"class.gfx::CubicBezier"* %16, %"class.gfx::CubicBezier"* dereferenceable(168) %15) #9
  %17 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %16, i64 1
  %18 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %15, i64 1
  %19 = icmp eq %"class.gfx::CubicBezier"* %18, %10
  br i1 %19, label %20, label %14

20:                                               ; preds = %14, %4
  %21 = bitcast %"class.gfx::CubicBezier"* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %21) #9
  br label %53

22:                                               ; preds = %2
  %23 = zext i32 %1 to i64
  %24 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN3gfx11CubicBezierEEEmm(i64 %23) #9
  %25 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %24, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN3gfx11CubicBezierEEEPKcv, i64 0, i64 0)) #9
  %26 = udiv i64 %24, 168
  %27 = ptrtoint i8* %25 to i64
  %28 = getelementptr inbounds %"class.WTF::Vector.67", %"class.WTF::Vector.67"* %0, i64 0, i32 0, i32 0, i32 0
  %29 = load %"class.gfx::CubicBezier"*, %"class.gfx::CubicBezier"** %28, align 8
  %30 = getelementptr inbounds %"class.WTF::Vector.67", %"class.WTF::Vector.67"* %0, i64 0, i32 0, i32 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %29, i64 %32
  %34 = icmp eq i32 %31, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %22
  %36 = bitcast %"class.gfx::CubicBezier"* %29 to i8*
  br label %48

37:                                               ; preds = %22
  %38 = bitcast i8* %25 to %"class.gfx::CubicBezier"*
  br label %39

39:                                               ; preds = %37, %39
  %40 = phi %"class.gfx::CubicBezier"* [ %43, %39 ], [ %29, %37 ]
  %41 = phi %"class.gfx::CubicBezier"* [ %42, %39 ], [ %38, %37 ]
  tail call void @_ZN3gfx11CubicBezierC1ERKS0_(%"class.gfx::CubicBezier"* %41, %"class.gfx::CubicBezier"* dereferenceable(168) %40) #9
  %42 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %41, i64 1
  %43 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %40, i64 1
  %44 = icmp eq %"class.gfx::CubicBezier"* %43, %33
  br i1 %44, label %45, label %39

45:                                               ; preds = %39
  %46 = bitcast %"class.WTF::Vector.67"* %0 to i8**
  %47 = load i8*, i8** %46, align 8
  br label %48

48:                                               ; preds = %35, %45
  %49 = phi i8* [ %47, %45 ], [ %36, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %49) #9
  %50 = bitcast %"class.WTF::Vector.67"* %0 to i64*
  store atomic i64 %27, i64* %50 monotonic, align 8
  %51 = trunc i64 %26 to i32
  %52 = getelementptr inbounds %"class.WTF::Vector.67", %"class.WTF::Vector.67"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %51, i32* %52, align 8
  br label %53

53:                                               ; preds = %48, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN3gfx11CubicBezierEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 12770157
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 12770157) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = mul i64 %0, 168
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #1

declare zeroext i1 @_ZN5blink11ParseNumberERPKhS1_RfNS_14WhitespaceModeE(i8** dereferenceable(8), i8*, float* dereferenceable(4), i32) local_unnamed_addr #1

declare void @_ZN3gfx11CubicBezierC1Edddd(%"class.gfx::CubicBezier"*, double, double, double, double) unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN3gfx11CubicBezierELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector.67"*, %"class.gfx::CubicBezier"* dereferenceable(168)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.67", %"class.WTF::Vector.67"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.67", %"class.WTF::Vector.67"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.gfx::CubicBezier"*, %"class.gfx::CubicBezier"** %6, align 8
  %8 = icmp ugt %"class.gfx::CubicBezier"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %7, i64 %10
  %12 = icmp ugt %"class.gfx::CubicBezier"* %11, %1
  br i1 %12, label %37, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.67", %"class.WTF::Vector.67"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %68, !prof !3

24:                                               ; preds = %13
  %25 = icmp eq %"class.gfx::CubicBezier"* %7, null
  br i1 %25, label %26, label %35

26:                                               ; preds = %24
  %27 = zext i32 %22 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN3gfx11CubicBezierEEEmm(i64 %27) #9
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN3gfx11CubicBezierEEEPKcv, i64 0, i64 0)) #9
  %30 = ptrtoint i8* %29 to i64
  %31 = bitcast %"class.WTF::Vector.67"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = udiv i64 %28, 168
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %29 to %"class.gfx::CubicBezier"*
  br label %68

35:                                               ; preds = %24
  tail call void @_ZN3WTF6VectorIN3gfx11CubicBezierELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.67"* %0, i32 %22) #9
  %36 = load %"class.gfx::CubicBezier"*, %"class.gfx::CubicBezier"** %6, align 8
  br label %68

37:                                               ; preds = %9
  %38 = ptrtoint %"class.gfx::CubicBezier"* %1 to i64
  %39 = ptrtoint %"class.gfx::CubicBezier"* %7 to i64
  %40 = sub i64 %38, %39
  %41 = sdiv exact i64 %40, 168
  %42 = getelementptr inbounds %"class.WTF::Vector.67", %"class.WTF::Vector.67"* %0, i64 0, i32 0, i32 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = lshr i32 %43, 2
  %45 = add i32 %43, 1
  %46 = add i32 %45, %44
  %47 = icmp ugt i32 %46, 4
  %48 = select i1 %47, i32 %46, i32 4
  %49 = icmp ugt i32 %48, %5
  %50 = select i1 %49, i32 %48, i32 %5
  %51 = icmp ult i32 %43, %50
  br i1 %51, label %52, label %65, !prof !3

52:                                               ; preds = %37
  %53 = icmp eq %"class.gfx::CubicBezier"* %7, null
  br i1 %53, label %54, label %63

54:                                               ; preds = %52
  %55 = zext i32 %50 to i64
  %56 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN3gfx11CubicBezierEEEmm(i64 %55) #9
  %57 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %56, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN3gfx11CubicBezierEEEPKcv, i64 0, i64 0)) #9
  %58 = ptrtoint i8* %57 to i64
  %59 = bitcast %"class.WTF::Vector.67"* %0 to i64*
  store atomic i64 %58, i64* %59 monotonic, align 8
  %60 = udiv i64 %56, 168
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %42, align 8
  %62 = bitcast i8* %57 to %"class.gfx::CubicBezier"*
  br label %65

63:                                               ; preds = %52
  tail call void @_ZN3WTF6VectorIN3gfx11CubicBezierELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.67"* %0, i32 %50) #9
  %64 = load %"class.gfx::CubicBezier"*, %"class.gfx::CubicBezier"** %6, align 8
  br label %65

65:                                               ; preds = %37, %54, %63
  %66 = phi %"class.gfx::CubicBezier"* [ %7, %37 ], [ %62, %54 ], [ %64, %63 ]
  %67 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %66, i64 %41
  br label %68

68:                                               ; preds = %35, %26, %13, %65
  %69 = phi %"class.gfx::CubicBezier"* [ %66, %65 ], [ %7, %13 ], [ %34, %26 ], [ %36, %35 ]
  %70 = phi %"class.gfx::CubicBezier"* [ %67, %65 ], [ %1, %13 ], [ %1, %26 ], [ %1, %35 ]
  %71 = load i32, i32* %3, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %69, i64 %72
  tail call void @_ZN3gfx11CubicBezierC1ERKS0_(%"class.gfx::CubicBezier"* %73, %"class.gfx::CubicBezier"* dereferenceable(168) %70) #9
  %74 = load i32, i32* %3, align 4
  %75 = add i32 %74, 1
  store i32 %75, i32* %3, align 4
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

declare zeroext i1 @_ZN5blink11ParseNumberERPKDsS1_RfNS_14WhitespaceModeE(i16** dereferenceable(8), i16*, float* dereferenceable(4), i32) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

declare double @_ZNK3gfx11CubicBezier11SolveCurveXEdd(%"class.gfx::CubicBezier"*, double, double) local_unnamed_addr #1

declare zeroext i1 @_ZNK5blink8SVGTests7IsValidEv(%"class.blink::SVGTests"*) local_unnamed_addr #1

declare zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5blink14SVGSMILElementD2Ev(%"class.blink::SVGSMILElement"*) unnamed_addr #6

declare %"class.blink::ComputedStyle"* @_ZN5blink7Element19EnsureComputedStyleENS_8PseudoIdERKN3WTF12AtomicStringE(%"class.blink::Element"*, i8 zeroext, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.WTF::String"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.57"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::String"*, %"class.WTF::String"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %24, i64 %25
  ret %"class.WTF::String"* %26
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS1_EEvOT_(%"class.WTF::Vector.57"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %8 = icmp ugt %"class.WTF::String"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 %10
  %12 = icmp ugt %"class.WTF::String"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !3

24:                                               ; preds = %13
  %25 = icmp eq %"class.WTF::String"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %26) #9
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.57"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.WTF::String"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"class.WTF::String"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !3

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #9
  %47 = bitcast %"class.WTF::Vector.57"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #9
  %51 = bitcast %"class.WTF::Vector.57"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.WTF::String"* %1 to i64
  %56 = ptrtoint %"class.WTF::String"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !3

69:                                               ; preds = %54
  %70 = icmp eq %"class.WTF::String"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %71) #9
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.57"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.WTF::String"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"class.WTF::String"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !3

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #9
  %87 = bitcast %"class.WTF::Vector.57"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #9
  %91 = bitcast %"class.WTF::Vector.57"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.WTF::String"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.WTF::String"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"class.WTF::String"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"class.WTF::String"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %101, i64 0, i32 0, i32 0
  %105 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %104, align 8
  %106 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %100, i64 %103, i32 0, i32 0
  store %"class.WTF::StringImpl"* %105, %"class.WTF::StringImpl"** %106, align 8
  %107 = icmp eq %"class.WTF::StringImpl"* %105, null
  br i1 %107, label %125, label %108

108:                                              ; preds = %99
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load atomic i32, i32* %109 monotonic, align 4
  %111 = and i32 %110, 2
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %125

113:                                              ; preds = %108
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  %116 = zext i32 %115 to i33
  %117 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %116, i33 1) #9
  %118 = extractvalue { i33, i1 } %117, 1
  %119 = extractvalue { i33, i1 } %117, 0
  %120 = icmp slt i33 %119, 0
  %121 = or i1 %118, %120
  br i1 %121, label %122, label %123, !prof !2

122:                                              ; preds = %113
  tail call void @llvm.trap() #9
  unreachable

123:                                              ; preds = %113
  %124 = trunc i33 %119 to i32
  store i32 %124, i32* %114, align 4
  br label %125

125:                                              ; preds = %99, %108, %123
  %126 = load i32, i32* %3, align 4
  %127 = add i32 %126, 1
  store i32 %127, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIfEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 536346624
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 536346624) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 2
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) float* @_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load float*, float** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds float, float* %24, i64 %25
  ret float* %26
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRfEEvOT_(%"class.WTF::Vector.62"*, float* dereferenceable(4)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load float*, float** %6, align 8
  %8 = icmp ugt float* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds float, float* %7, i64 %10
  %12 = icmp ugt float* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !3

24:                                               ; preds = %13
  %25 = icmp eq float* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIfEEmm(i64 %26) #9
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIfEEPKcv, i64 0, i64 0)) #9
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.62"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 2
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to float*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 2
  %37 = ptrtoint i8* %28 to i64
  %38 = load float*, float** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne float* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast float* %38 to i8*
  br i1 %41, label %43, label %49, !prof !3

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %28, i8* nonnull align 4 %42, i64 %46, i1 false) #9
  %47 = bitcast %"class.WTF::Vector.62"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #9
  %51 = bitcast %"class.WTF::Vector.62"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to float*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint float* %1 to i64
  %56 = ptrtoint float* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 2
  %59 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !3

69:                                               ; preds = %54
  %70 = icmp eq float* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIfEEmm(i64 %71) #9
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIfEEPKcv, i64 0, i64 0)) #9
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.62"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load float*, float** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne float* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast float* %78 to i8*
  br i1 %81, label %83, label %89, !prof !3

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %73, i8* nonnull align 4 %82, i64 %86, i1 false) #9
  %87 = bitcast %"class.WTF::Vector.62"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #9
  %91 = bitcast %"class.WTF::Vector.62"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 2
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to float*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi float* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds float, float* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi float* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi float* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds float, float* %100, i64 %103
  %105 = bitcast float* %101 to i32*
  %106 = load i32, i32* %105, align 4
  %107 = bitcast float* %104 to i32*
  store i32 %106, i32* %107, align 4
  %108 = load i32, i32* %3, align 4
  %109 = add i32 %108, 1
  store i32 %109, i32* %3, align 4
  ret void
}

declare void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"*, i8*, i64) unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIiEEvOT_(%"class.WTF::Vector.62"*, i32* dereferenceable(4)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = lshr i32 %7, 2
  %9 = add i32 %7, 1
  %10 = add i32 %9, %8
  %11 = icmp ugt i32 %10, 4
  %12 = select i1 %11, i32 %10, i32 4
  %13 = icmp ugt i32 %12, %5
  %14 = select i1 %13, i32 %12, i32 %5
  %15 = icmp ult i32 %7, %14
  %16 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %0, i64 0, i32 0, i32 0, i32 0
  %17 = load float*, float** %16, align 8
  br i1 %15, label %18, label %45, !prof !3

18:                                               ; preds = %2
  %19 = icmp eq float* %17, null
  %20 = zext i32 %14 to i64
  %21 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIfEEmm(i64 %20) #9
  %22 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %21, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIfEEPKcv, i64 0, i64 0)) #9
  %23 = ptrtoint i8* %22 to i64
  br i1 %19, label %24, label %26

24:                                               ; preds = %18
  %25 = bitcast %"class.WTF::Vector.62"* %0 to i64*
  store atomic i64 %23, i64* %25 monotonic, align 8
  br label %41

26:                                               ; preds = %18
  %27 = load float*, float** %16, align 8
  %28 = icmp ne i8* %22, null
  %29 = icmp ne float* %27, null
  %30 = and i1 %28, %29
  %31 = bitcast float* %27 to i8*
  br i1 %30, label %32, label %38, !prof !3

32:                                               ; preds = %26
  %33 = load i32, i32* %3, align 4
  %34 = zext i32 %33 to i64
  %35 = shl nuw nsw i64 %34, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %22, i8* nonnull align 4 %31, i64 %35, i1 false) #9
  %36 = bitcast %"class.WTF::Vector.62"* %0 to i8**
  %37 = load i8*, i8** %36, align 8
  br label %38

38:                                               ; preds = %32, %26
  %39 = phi i8* [ %37, %32 ], [ %31, %26 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %39) #9
  %40 = bitcast %"class.WTF::Vector.62"* %0 to i64*
  store atomic i64 %23, i64* %40 monotonic, align 8
  br label %41

41:                                               ; preds = %38, %24
  %42 = lshr i64 %21, 2
  %43 = trunc i64 %42 to i32
  store i32 %43, i32* %6, align 8
  %44 = bitcast i8* %22 to float*
  br label %45

45:                                               ; preds = %41, %2
  %46 = phi float* [ %17, %2 ], [ %44, %41 ]
  %47 = load i32, i32* %3, align 4
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds float, float* %46, i64 %48
  %50 = load i32, i32* %1, align 4
  %51 = sitofp i32 %50 to float
  store float %51, float* %49, align 4
  %52 = load i32, i32* %3, align 4
  %53 = add i32 %52, 1
  store i32 %53, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.62"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector.62", %"class.WTF::Vector.62"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load float*, float** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds float, float* %24, i64 %25
  ret float* %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(168) %"class.gfx::CubicBezier"* @_ZNK3WTF6VectorIN3gfx11CubicBezierELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.67"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.67", %"class.WTF::Vector.67"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector.67", %"class.WTF::Vector.67"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.gfx::CubicBezier"*, %"class.gfx::CubicBezier"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %24, i64 %25
  ret %"class.gfx::CubicBezier"* %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.57"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector.57", %"class.WTF::Vector.57"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::String"*, %"class.WTF::String"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %24, i64 %25
  ret %"class.WTF::String"* %26
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i8 0, i8 2}
!5 = !{!"branch_weights", i32 1, i32 1048575}
