; ModuleID = '../../third_party/zlib/adler32_simd.c'
source_filename = "../../third_party/zlib/adler32_simd.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @Cr_z_adler32_simd_(i32, i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %4 = and i32 %0, 65535
  %5 = lshr i32 %0, 16
  %6 = lshr i64 %2, 5
  %7 = and i64 %2, 31
  %8 = icmp eq i64 %6, 0
  br i1 %8, label %70, label %9

9:                                                ; preds = %3, %50
  %10 = phi i8* [ %53, %50 ], [ %1, %3 ]
  %11 = phi i32 [ %67, %50 ], [ %4, %3 ]
  %12 = phi i32 [ %68, %50 ], [ %5, %3 ]
  %13 = phi i64 [ %51, %50 ], [ %6, %3 ]
  %14 = icmp ult i64 %13, 173
  %15 = select i1 %14, i64 %13, i64 173
  %16 = trunc i64 %15 to i32
  %17 = mul nuw nsw i32 %11, %16
  %18 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %17, i32 0
  %19 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %12, i32 0
  %20 = shl nuw nsw i64 %15, 5
  %21 = add nuw nsw i64 %20, 137438953440
  %22 = and i64 %21, 137438953440
  br label %23

23:                                               ; preds = %23, %9
  %24 = phi i32 [ %16, %9 ], [ %48, %23 ]
  %25 = phi <4 x i32> [ %18, %9 ], [ %34, %23 ]
  %26 = phi <4 x i32> [ %19, %9 ], [ %46, %23 ]
  %27 = phi <4 x i32> [ zeroinitializer, %9 ], [ %43, %23 ]
  %28 = phi i8* [ %10, %9 ], [ %47, %23 ]
  %29 = bitcast i8* %28 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 1
  %31 = getelementptr inbounds i8, i8* %28, i64 16
  %32 = bitcast i8* %31 to <16 x i8>*
  %33 = load <16 x i8>, <16 x i8>* %32, align 1
  %34 = add <4 x i32> %27, %25
  %35 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %30, <16 x i8> zeroinitializer) #2
  %36 = bitcast <2 x i64> %35 to <4 x i32>
  %37 = add <4 x i32> %27, %36
  %38 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %30, <16 x i8> <i8 32, i8 31, i8 30, i8 29, i8 28, i8 27, i8 26, i8 25, i8 24, i8 23, i8 22, i8 21, i8 20, i8 19, i8 18, i8 17>) #2
  %39 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %38, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %40 = add <4 x i32> %39, %26
  %41 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %33, <16 x i8> zeroinitializer) #2
  %42 = bitcast <2 x i64> %41 to <4 x i32>
  %43 = add <4 x i32> %37, %42
  %44 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %33, <16 x i8> <i8 16, i8 15, i8 14, i8 13, i8 12, i8 11, i8 10, i8 9, i8 8, i8 7, i8 6, i8 5, i8 4, i8 3, i8 2, i8 1>) #2
  %45 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %44, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #2
  %46 = add <4 x i32> %40, %45
  %47 = getelementptr inbounds i8, i8* %28, i64 32
  %48 = add i32 %24, -1
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %23

50:                                               ; preds = %23
  %51 = sub i64 %13, %15
  %52 = getelementptr i8, i8* %10, i64 32
  %53 = getelementptr i8, i8* %52, i64 %22
  %54 = shl <4 x i32> %34, <i32 5, i32 5, i32 5, i32 5>
  %55 = add <4 x i32> %46, %54
  %56 = shufflevector <4 x i32> %43, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %57 = add <4 x i32> %56, %43
  %58 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 2, i32 undef, i32 undef, i32 undef>
  %59 = add <4 x i32> %58, %57
  %60 = extractelement <4 x i32> %59, i32 0
  %61 = add i32 %60, %11
  %62 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %63 = add <4 x i32> %62, %55
  %64 = shufflevector <4 x i32> %63, <4 x i32> undef, <4 x i32> <i32 2, i32 undef, i32 undef, i32 undef>
  %65 = add <4 x i32> %64, %63
  %66 = extractelement <4 x i32> %65, i32 0
  %67 = urem i32 %61, 65521
  %68 = urem i32 %66, 65521
  %69 = icmp eq i64 %51, 0
  br i1 %69, label %70, label %9

70:                                               ; preds = %50, %3
  %71 = phi i32 [ %5, %3 ], [ %68, %50 ]
  %72 = phi i32 [ %4, %3 ], [ %67, %50 ]
  %73 = phi i8* [ %1, %3 ], [ %53, %50 ]
  %74 = icmp eq i64 %7, 0
  br i1 %74, label %224, label %75

75:                                               ; preds = %70
  %76 = icmp ugt i64 %7, 15
  br i1 %76, label %77, label %160

77:                                               ; preds = %75
  %78 = getelementptr inbounds i8, i8* %73, i64 1
  %79 = load i8, i8* %73, align 1
  %80 = zext i8 %79 to i32
  %81 = add nuw nsw i32 %72, %80
  %82 = add nuw nsw i32 %81, %71
  %83 = getelementptr inbounds i8, i8* %73, i64 2
  %84 = load i8, i8* %78, align 1
  %85 = zext i8 %84 to i32
  %86 = add nuw nsw i32 %81, %85
  %87 = add nuw nsw i32 %82, %86
  %88 = getelementptr inbounds i8, i8* %73, i64 3
  %89 = load i8, i8* %83, align 1
  %90 = zext i8 %89 to i32
  %91 = add nuw nsw i32 %86, %90
  %92 = add nuw nsw i32 %87, %91
  %93 = getelementptr inbounds i8, i8* %73, i64 4
  %94 = load i8, i8* %88, align 1
  %95 = zext i8 %94 to i32
  %96 = add nuw nsw i32 %91, %95
  %97 = add nuw nsw i32 %92, %96
  %98 = getelementptr inbounds i8, i8* %73, i64 5
  %99 = load i8, i8* %93, align 1
  %100 = zext i8 %99 to i32
  %101 = add nuw nsw i32 %96, %100
  %102 = add nuw nsw i32 %97, %101
  %103 = getelementptr inbounds i8, i8* %73, i64 6
  %104 = load i8, i8* %98, align 1
  %105 = zext i8 %104 to i32
  %106 = add nuw nsw i32 %101, %105
  %107 = add nuw nsw i32 %102, %106
  %108 = getelementptr inbounds i8, i8* %73, i64 7
  %109 = load i8, i8* %103, align 1
  %110 = zext i8 %109 to i32
  %111 = add nuw nsw i32 %106, %110
  %112 = add nuw nsw i32 %107, %111
  %113 = getelementptr inbounds i8, i8* %73, i64 8
  %114 = load i8, i8* %108, align 1
  %115 = zext i8 %114 to i32
  %116 = add nuw nsw i32 %111, %115
  %117 = add nuw nsw i32 %112, %116
  %118 = getelementptr inbounds i8, i8* %73, i64 9
  %119 = load i8, i8* %113, align 1
  %120 = zext i8 %119 to i32
  %121 = add nuw nsw i32 %116, %120
  %122 = add nuw nsw i32 %117, %121
  %123 = getelementptr inbounds i8, i8* %73, i64 10
  %124 = load i8, i8* %118, align 1
  %125 = zext i8 %124 to i32
  %126 = add nuw nsw i32 %121, %125
  %127 = add nuw nsw i32 %122, %126
  %128 = getelementptr inbounds i8, i8* %73, i64 11
  %129 = load i8, i8* %123, align 1
  %130 = zext i8 %129 to i32
  %131 = add nuw nsw i32 %126, %130
  %132 = add nuw nsw i32 %127, %131
  %133 = getelementptr inbounds i8, i8* %73, i64 12
  %134 = load i8, i8* %128, align 1
  %135 = zext i8 %134 to i32
  %136 = add nuw nsw i32 %131, %135
  %137 = add nuw nsw i32 %132, %136
  %138 = getelementptr inbounds i8, i8* %73, i64 13
  %139 = load i8, i8* %133, align 1
  %140 = zext i8 %139 to i32
  %141 = add nuw nsw i32 %136, %140
  %142 = add nuw nsw i32 %137, %141
  %143 = getelementptr inbounds i8, i8* %73, i64 14
  %144 = load i8, i8* %138, align 1
  %145 = zext i8 %144 to i32
  %146 = add nuw nsw i32 %141, %145
  %147 = add nuw nsw i32 %142, %146
  %148 = getelementptr inbounds i8, i8* %73, i64 15
  %149 = load i8, i8* %143, align 1
  %150 = zext i8 %149 to i32
  %151 = add nuw nsw i32 %146, %150
  %152 = add nuw nsw i32 %147, %151
  %153 = getelementptr inbounds i8, i8* %73, i64 16
  %154 = load i8, i8* %148, align 1
  %155 = zext i8 %154 to i32
  %156 = add nuw nsw i32 %151, %155
  %157 = add nuw nsw i32 %152, %156
  %158 = add nsw i64 %7, -16
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %217, label %160

160:                                              ; preds = %75, %77
  %161 = phi i8* [ %73, %75 ], [ %153, %77 ]
  %162 = phi i64 [ %7, %75 ], [ %158, %77 ]
  %163 = phi i32 [ %72, %75 ], [ %156, %77 ]
  %164 = phi i32 [ %71, %75 ], [ %157, %77 ]
  %165 = add nsw i64 %162, -1
  %166 = and i64 %162, 3
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %182, label %168

168:                                              ; preds = %160, %168
  %169 = phi i8* [ %175, %168 ], [ %161, %160 ]
  %170 = phi i64 [ %174, %168 ], [ %162, %160 ]
  %171 = phi i32 [ %178, %168 ], [ %163, %160 ]
  %172 = phi i32 [ %179, %168 ], [ %164, %160 ]
  %173 = phi i64 [ %180, %168 ], [ %166, %160 ]
  %174 = add i64 %170, -1
  %175 = getelementptr inbounds i8, i8* %169, i64 1
  %176 = load i8, i8* %169, align 1
  %177 = zext i8 %176 to i32
  %178 = add i32 %171, %177
  %179 = add i32 %178, %172
  %180 = add i64 %173, -1
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %182, label %168, !llvm.loop !2

182:                                              ; preds = %168, %160
  %183 = phi i32 [ undef, %160 ], [ %178, %168 ]
  %184 = phi i32 [ undef, %160 ], [ %179, %168 ]
  %185 = phi i8* [ %161, %160 ], [ %175, %168 ]
  %186 = phi i64 [ %162, %160 ], [ %174, %168 ]
  %187 = phi i32 [ %163, %160 ], [ %178, %168 ]
  %188 = phi i32 [ %164, %160 ], [ %179, %168 ]
  %189 = icmp ult i64 %165, 3
  br i1 %189, label %217, label %190

190:                                              ; preds = %182, %190
  %191 = phi i8* [ %211, %190 ], [ %185, %182 ]
  %192 = phi i64 [ %210, %190 ], [ %186, %182 ]
  %193 = phi i32 [ %214, %190 ], [ %187, %182 ]
  %194 = phi i32 [ %215, %190 ], [ %188, %182 ]
  %195 = getelementptr inbounds i8, i8* %191, i64 1
  %196 = load i8, i8* %191, align 1
  %197 = zext i8 %196 to i32
  %198 = add i32 %193, %197
  %199 = add i32 %198, %194
  %200 = getelementptr inbounds i8, i8* %191, i64 2
  %201 = load i8, i8* %195, align 1
  %202 = zext i8 %201 to i32
  %203 = add i32 %198, %202
  %204 = add i32 %203, %199
  %205 = getelementptr inbounds i8, i8* %191, i64 3
  %206 = load i8, i8* %200, align 1
  %207 = zext i8 %206 to i32
  %208 = add i32 %203, %207
  %209 = add i32 %208, %204
  %210 = add i64 %192, -4
  %211 = getelementptr inbounds i8, i8* %191, i64 4
  %212 = load i8, i8* %205, align 1
  %213 = zext i8 %212 to i32
  %214 = add i32 %208, %213
  %215 = add i32 %214, %209
  %216 = icmp eq i64 %210, 0
  br i1 %216, label %217, label %190

217:                                              ; preds = %182, %190, %77
  %218 = phi i32 [ %157, %77 ], [ %184, %182 ], [ %215, %190 ]
  %219 = phi i32 [ %156, %77 ], [ %183, %182 ], [ %214, %190 ]
  %220 = icmp ugt i32 %219, 65520
  %221 = add i32 %219, -65521
  %222 = select i1 %220, i32 %221, i32 %219
  %223 = urem i32 %218, 65521
  br label %224

224:                                              ; preds = %70, %217
  %225 = phi i32 [ %223, %217 ], [ %71, %70 ]
  %226 = phi i32 [ %222, %217 ], [ %72, %70 ]
  %227 = shl i32 %225, 16
  %228 = or i32 %226, %227
  ret i32 %228
}

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8>, <16 x i8>) #1

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8>, <16 x i8>) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #1

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
