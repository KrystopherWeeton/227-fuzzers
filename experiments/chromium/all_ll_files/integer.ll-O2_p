; ModuleID = '../../third_party/ffmpeg/libavutil/integer.c'
source_filename = "../../third_party/ffmpeg/libavutil/integer.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVInteger = type { [8 x i16] }

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden { i64, i64 } @av_add_i(i64, i64, i64, i64) local_unnamed_addr #0 {
  %5 = alloca { i64, i64 }, align 8
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  %8 = bitcast { i64, i64 }* %5 to [8 x i16]*
  %9 = bitcast { i64, i64 }* %5 to i16*
  %10 = trunc i64 %0 to i32
  %11 = and i32 %10, 65535
  %12 = trunc i64 %2 to i32
  %13 = and i32 %12, 65535
  %14 = add nuw nsw i32 %11, %13
  %15 = trunc i32 %14 to i16
  store i16 %15, i16* %9, align 8
  %16 = lshr i32 %14, 16
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 1
  %18 = lshr i64 %0, 16
  %19 = trunc i64 %18 to i32
  %20 = and i32 %19, 65535
  %21 = add nuw nsw i32 %16, %20
  %22 = lshr i64 %2, 16
  %23 = trunc i64 %22 to i32
  %24 = and i32 %23, 65535
  %25 = add nuw nsw i32 %21, %24
  %26 = trunc i32 %25 to i16
  store i16 %26, i16* %17, align 2
  %27 = lshr i32 %25, 16
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 2
  %29 = lshr i64 %0, 32
  %30 = trunc i64 %29 to i32
  %31 = and i32 %30, 65535
  %32 = add nuw nsw i32 %27, %31
  %33 = lshr i64 %2, 32
  %34 = trunc i64 %33 to i32
  %35 = and i32 %34, 65535
  %36 = add nuw nsw i32 %32, %35
  %37 = trunc i32 %36 to i16
  store i16 %37, i16* %28, align 4
  %38 = lshr i32 %36, 16
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 3
  %40 = lshr i64 %0, 48
  %41 = trunc i64 %40 to i32
  %42 = add nuw nsw i32 %38, %41
  %43 = lshr i64 %2, 48
  %44 = trunc i64 %43 to i32
  %45 = add nuw nsw i32 %42, %44
  %46 = trunc i32 %45 to i16
  store i16 %46, i16* %39, align 2
  %47 = lshr i32 %45, 16
  %48 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  %49 = bitcast i64* %48 to i16*
  %50 = trunc i64 %1 to i32
  %51 = and i32 %50, 65535
  %52 = add nuw nsw i32 %47, %51
  %53 = trunc i64 %3 to i32
  %54 = and i32 %53, 65535
  %55 = add nuw nsw i32 %52, %54
  %56 = trunc i32 %55 to i16
  store i16 %56, i16* %49, align 8
  %57 = lshr i32 %55, 16
  %58 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 5
  %59 = lshr i64 %1, 16
  %60 = trunc i64 %59 to i32
  %61 = and i32 %60, 65535
  %62 = add nuw nsw i32 %57, %61
  %63 = lshr i64 %3, 16
  %64 = trunc i64 %63 to i32
  %65 = and i32 %64, 65535
  %66 = add nuw nsw i32 %62, %65
  %67 = trunc i32 %66 to i16
  store i16 %67, i16* %58, align 2
  %68 = lshr i32 %66, 16
  %69 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 6
  %70 = lshr i64 %1, 32
  %71 = trunc i64 %70 to i32
  %72 = and i32 %71, 65535
  %73 = add nuw nsw i32 %68, %72
  %74 = lshr i64 %3, 32
  %75 = trunc i64 %74 to i32
  %76 = and i32 %75, 65535
  %77 = add nuw nsw i32 %73, %76
  %78 = trunc i32 %77 to i16
  store i16 %78, i16* %69, align 4
  %79 = lshr i32 %77, 16
  %80 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 7
  %81 = lshr i64 %1, 48
  %82 = trunc i64 %81 to i32
  %83 = add nuw nsw i32 %79, %82
  %84 = lshr i64 %3, 48
  %85 = trunc i64 %84 to i32
  %86 = add nuw nsw i32 %83, %85
  %87 = trunc i32 %86 to i16
  store i16 %87, i16* %80, align 2
  %88 = load i64, i64* %6, align 8
  %89 = load i64, i64* %7, align 8
  %90 = insertvalue { i64, i64 } undef, i64 %88, 0
  %91 = insertvalue { i64, i64 } %90, i64 %89, 1
  ret { i64, i64 } %91
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden { i64, i64 } @av_sub_i(i64, i64, i64, i64) local_unnamed_addr #0 {
  %5 = alloca { i64, i64 }, align 8
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  %8 = bitcast { i64, i64 }* %5 to [8 x i16]*
  %9 = bitcast { i64, i64 }* %5 to i16*
  %10 = trunc i64 %0 to i32
  %11 = and i32 %10, 65535
  %12 = trunc i64 %2 to i32
  %13 = and i32 %12, 65535
  %14 = sub nsw i32 %11, %13
  %15 = trunc i32 %14 to i16
  store i16 %15, i16* %9, align 8
  %16 = ashr i32 %14, 16
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 1
  %18 = lshr i64 %0, 16
  %19 = trunc i64 %18 to i32
  %20 = and i32 %19, 65535
  %21 = add nsw i32 %16, %20
  %22 = lshr i64 %2, 16
  %23 = trunc i64 %22 to i32
  %24 = and i32 %23, 65535
  %25 = sub nsw i32 %21, %24
  %26 = trunc i32 %25 to i16
  store i16 %26, i16* %17, align 2
  %27 = ashr i32 %25, 16
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 2
  %29 = lshr i64 %0, 32
  %30 = trunc i64 %29 to i32
  %31 = and i32 %30, 65535
  %32 = add nsw i32 %27, %31
  %33 = lshr i64 %2, 32
  %34 = trunc i64 %33 to i32
  %35 = and i32 %34, 65535
  %36 = sub nsw i32 %32, %35
  %37 = trunc i32 %36 to i16
  store i16 %37, i16* %28, align 4
  %38 = ashr i32 %36, 16
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 3
  %40 = lshr i64 %0, 48
  %41 = trunc i64 %40 to i32
  %42 = add nsw i32 %38, %41
  %43 = lshr i64 %2, 48
  %44 = trunc i64 %43 to i32
  %45 = sub nsw i32 %42, %44
  %46 = trunc i32 %45 to i16
  store i16 %46, i16* %39, align 2
  %47 = ashr i32 %45, 16
  %48 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  %49 = bitcast i64* %48 to i16*
  %50 = trunc i64 %1 to i32
  %51 = and i32 %50, 65535
  %52 = add nsw i32 %47, %51
  %53 = trunc i64 %3 to i32
  %54 = and i32 %53, 65535
  %55 = sub nsw i32 %52, %54
  %56 = trunc i32 %55 to i16
  store i16 %56, i16* %49, align 8
  %57 = ashr i32 %55, 16
  %58 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 5
  %59 = lshr i64 %1, 16
  %60 = trunc i64 %59 to i32
  %61 = and i32 %60, 65535
  %62 = add nsw i32 %57, %61
  %63 = lshr i64 %3, 16
  %64 = trunc i64 %63 to i32
  %65 = and i32 %64, 65535
  %66 = sub nsw i32 %62, %65
  %67 = trunc i32 %66 to i16
  store i16 %67, i16* %58, align 2
  %68 = ashr i32 %66, 16
  %69 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 6
  %70 = lshr i64 %1, 32
  %71 = trunc i64 %70 to i32
  %72 = and i32 %71, 65535
  %73 = add nsw i32 %68, %72
  %74 = lshr i64 %3, 32
  %75 = trunc i64 %74 to i32
  %76 = and i32 %75, 65535
  %77 = sub nsw i32 %73, %76
  %78 = trunc i32 %77 to i16
  store i16 %78, i16* %69, align 4
  %79 = lshr i32 %77, 16
  %80 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 7
  %81 = lshr i64 %1, 48
  %82 = trunc i64 %81 to i32
  %83 = add nuw nsw i32 %79, %82
  %84 = lshr i64 %3, 48
  %85 = trunc i64 %84 to i32
  %86 = sub nsw i32 %83, %85
  %87 = trunc i32 %86 to i16
  store i16 %87, i16* %80, align 2
  %88 = load i64, i64* %6, align 8
  %89 = load i64, i64* %7, align 8
  %90 = insertvalue { i64, i64 } undef, i64 %88, 0
  %91 = insertvalue { i64, i64 } %90, i64 %89, 1
  ret { i64, i64 } %91
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @av_log2_i(i64, i64) local_unnamed_addr #2 {
  %3 = lshr i64 %1, 48
  %4 = trunc i64 %3 to i16
  %5 = icmp eq i16 %4, 0
  %6 = lshr i64 %1, 32
  %7 = trunc i64 %6 to i16
  %8 = lshr i64 %1, 16
  %9 = trunc i64 %8 to i16
  %10 = trunc i64 %1 to i16
  %11 = lshr i64 %0, 48
  %12 = trunc i64 %11 to i16
  %13 = lshr i64 %0, 32
  %14 = trunc i64 %13 to i16
  %15 = lshr i64 %0, 16
  %16 = trunc i64 %15 to i16
  %17 = trunc i64 %0 to i16
  br i1 %5, label %26, label %18

18:                                               ; preds = %40, %38, %36, %34, %32, %30, %26, %2
  %19 = phi i32 [ 112, %2 ], [ 96, %26 ], [ 80, %30 ], [ 64, %32 ], [ 48, %34 ], [ 32, %36 ], [ 16, %38 ], [ 0, %40 ]
  %20 = phi i16 [ %4, %2 ], [ %7, %26 ], [ %9, %30 ], [ %10, %32 ], [ %12, %34 ], [ %14, %36 ], [ %16, %38 ], [ %17, %40 ]
  %21 = or i16 %20, 1
  %22 = zext i16 %21 to i32
  %23 = tail call i32 @llvm.ctlz.i32(i32 %22, i1 true), !range !2
  %24 = xor i32 %23, 31
  %25 = or i32 %24, %19
  br label %28

26:                                               ; preds = %2
  %27 = icmp eq i16 %7, 0
  br i1 %27, label %30, label %18

28:                                               ; preds = %40, %18
  %29 = phi i32 [ %25, %18 ], [ -1, %40 ]
  ret i32 %29

30:                                               ; preds = %26
  %31 = icmp eq i16 %9, 0
  br i1 %31, label %32, label %18

32:                                               ; preds = %30
  %33 = icmp eq i16 %10, 0
  br i1 %33, label %34, label %18

34:                                               ; preds = %32
  %35 = icmp eq i16 %12, 0
  br i1 %35, label %36, label %18

36:                                               ; preds = %34
  %37 = icmp eq i16 %14, 0
  br i1 %37, label %38, label %18

38:                                               ; preds = %36
  %39 = icmp eq i16 %16, 0
  br i1 %39, label %40, label %18

40:                                               ; preds = %38
  %41 = icmp eq i16 %17, 0
  br i1 %41, label %28, label %18
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #3

; Function Attrs: nounwind readnone ssp uwtable
define hidden { i64, i64 } @av_mul_i(i64, i64, i64, i64) local_unnamed_addr #2 {
  %5 = alloca { i64, i64 }, align 8
  %6 = alloca { i64, i64 }, align 8
  %7 = alloca { i64, i64 }, align 8
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 0
  store i64 %0, i64* %8, align 8
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  store i64 %1, i64* %9, align 8
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 0
  store i64 %2, i64* %10, align 8
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  store i64 %3, i64* %11, align 8
  %12 = bitcast { i64, i64 }* %5 to [8 x i16]*
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  %14 = lshr i64 %1, 48
  %15 = trunc i64 %14 to i16
  %16 = icmp eq i16 %15, 0
  %17 = lshr i64 %1, 32
  %18 = trunc i64 %17 to i16
  %19 = lshr i64 %1, 16
  %20 = trunc i64 %19 to i16
  %21 = trunc i64 %1 to i16
  %22 = lshr i64 %0, 48
  %23 = trunc i64 %22 to i16
  %24 = lshr i64 %0, 32
  %25 = trunc i64 %24 to i16
  %26 = lshr i64 %0, 16
  %27 = trunc i64 %26 to i16
  %28 = trunc i64 %0 to i16
  %29 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 -86, i64 16, i1 false)
  br i1 %16, label %40, label %30

30:                                               ; preds = %52, %50, %48, %46, %44, %42, %40, %4
  %31 = phi i32 [ 112, %4 ], [ 96, %40 ], [ 80, %42 ], [ 64, %44 ], [ 48, %46 ], [ 32, %48 ], [ 16, %50 ], [ 0, %52 ]
  %32 = phi i16 [ %15, %4 ], [ %18, %40 ], [ %20, %42 ], [ %21, %44 ], [ %23, %46 ], [ %25, %48 ], [ %27, %50 ], [ %28, %52 ]
  %33 = or i16 %32, 1
  %34 = zext i16 %33 to i32
  %35 = tail call i32 @llvm.ctlz.i32(i32 %34, i1 true) #5, !range !2
  %36 = xor i32 %35, 31
  %37 = or i32 %36, %31
  %38 = add nuw nsw i32 %37, 16
  %39 = lshr i32 %38, 4
  br label %54

40:                                               ; preds = %4
  %41 = icmp eq i16 %18, 0
  br i1 %41, label %42, label %30

42:                                               ; preds = %40
  %43 = icmp eq i16 %20, 0
  br i1 %43, label %44, label %30

44:                                               ; preds = %42
  %45 = icmp eq i16 %21, 0
  br i1 %45, label %46, label %30

46:                                               ; preds = %44
  %47 = icmp eq i16 %23, 0
  br i1 %47, label %48, label %30

48:                                               ; preds = %46
  %49 = icmp eq i16 %25, 0
  br i1 %49, label %50, label %30

50:                                               ; preds = %48
  %51 = icmp eq i16 %27, 0
  br i1 %51, label %52, label %30

52:                                               ; preds = %50
  %53 = icmp eq i16 %28, 0
  br i1 %53, label %54, label %30

54:                                               ; preds = %30, %52
  %55 = phi i32 [ %39, %30 ], [ 0, %52 ]
  %56 = lshr i64 %3, 48
  %57 = trunc i64 %56 to i16
  %58 = icmp eq i16 %57, 0
  %59 = lshr i64 %3, 32
  %60 = trunc i64 %59 to i16
  %61 = lshr i64 %3, 16
  %62 = trunc i64 %61 to i16
  %63 = trunc i64 %3 to i16
  %64 = lshr i64 %2, 48
  %65 = trunc i64 %64 to i16
  %66 = lshr i64 %2, 32
  %67 = trunc i64 %66 to i16
  %68 = lshr i64 %2, 16
  %69 = trunc i64 %68 to i16
  %70 = trunc i64 %2 to i16
  br i1 %58, label %83, label %71

71:                                               ; preds = %95, %93, %91, %89, %87, %85, %83, %54
  %72 = phi i32 [ 112, %54 ], [ 96, %83 ], [ 80, %85 ], [ 64, %87 ], [ 48, %89 ], [ 32, %91 ], [ 16, %93 ], [ 0, %95 ]
  %73 = phi i16 [ %57, %54 ], [ %60, %83 ], [ %62, %85 ], [ %63, %87 ], [ %65, %89 ], [ %67, %91 ], [ %69, %93 ], [ %70, %95 ]
  %74 = or i16 %73, 1
  %75 = zext i16 %74 to i32
  %76 = tail call i32 @llvm.ctlz.i32(i32 %75, i1 true) #5, !range !2
  %77 = xor i32 %76, 31
  %78 = or i32 %77, %72
  %79 = add nuw nsw i32 %78, 16
  %80 = lshr i32 %79, 4
  %81 = add nuw nsw i32 %80, 1
  %82 = zext i32 %81 to i64
  br label %97

83:                                               ; preds = %54
  %84 = icmp eq i16 %60, 0
  br i1 %84, label %85, label %71

85:                                               ; preds = %83
  %86 = icmp eq i16 %62, 0
  br i1 %86, label %87, label %71

87:                                               ; preds = %85
  %88 = icmp eq i16 %63, 0
  br i1 %88, label %89, label %71

89:                                               ; preds = %87
  %90 = icmp eq i16 %65, 0
  br i1 %90, label %91, label %71

91:                                               ; preds = %89
  %92 = icmp eq i16 %67, 0
  br i1 %92, label %93, label %71

93:                                               ; preds = %91
  %94 = icmp eq i16 %69, 0
  br i1 %94, label %95, label %71

95:                                               ; preds = %93
  %96 = icmp eq i16 %70, 0
  br i1 %96, label %97, label %71

97:                                               ; preds = %71, %95
  %98 = phi i64 [ %82, %71 ], [ 1, %95 ]
  %99 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %99, i8 0, i64 16, i1 false)
  %100 = icmp eq i32 %55, 0
  br i1 %100, label %158, label %101

101:                                              ; preds = %97
  %102 = bitcast { i64, i64 }* %6 to [8 x i16]*
  %103 = bitcast { i64, i64 }* %7 to [8 x i16]*
  %104 = zext i32 %55 to i64
  %105 = bitcast { i64, i64 }* %7 to i16*
  %106 = load i16, i16* %105, align 8
  %107 = zext i16 %106 to i32
  %108 = getelementptr inbounds [8 x i16], [8 x i16]* %103, i64 0, i64 1
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = getelementptr inbounds [8 x i16], [8 x i16]* %103, i64 0, i64 2
  %112 = load i16, i16* %111, align 4
  %113 = zext i16 %112 to i32
  %114 = getelementptr inbounds [8 x i16], [8 x i16]* %103, i64 0, i64 3
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i32
  %117 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %118 = bitcast i64* %117 to i16*
  %119 = load i16, i16* %118, align 8
  %120 = zext i16 %119 to i32
  %121 = getelementptr inbounds [8 x i16], [8 x i16]* %103, i64 0, i64 5
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %122 to i32
  %124 = getelementptr inbounds [8 x i16], [8 x i16]* %103, i64 0, i64 6
  %125 = load i16, i16* %124, align 4
  %126 = zext i16 %125 to i32
  %127 = getelementptr inbounds [8 x i16], [8 x i16]* %103, i64 0, i64 7
  %128 = load i16, i16* %127, align 2
  %129 = zext i16 %128 to i32
  br label %130

130:                                              ; preds = %150, %101
  %131 = phi i64 [ %98, %101 ], [ %152, %150 ]
  %132 = phi i64 [ 0, %101 ], [ %151, %150 ]
  %133 = getelementptr inbounds [8 x i16], [8 x i16]* %102, i64 0, i64 %132
  %134 = load i16, i16* %133, align 2
  %135 = icmp eq i16 %134, 0
  br i1 %135, label %150, label %136

136:                                              ; preds = %130
  %137 = zext i16 %134 to i32
  %138 = icmp eq i64 %132, %131
  br i1 %138, label %150, label %139

139:                                              ; preds = %136
  %140 = getelementptr inbounds [8 x i16], [8 x i16]* %12, i64 0, i64 %132
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = mul nuw i32 %107, %137
  %144 = add nuw i32 %143, %142
  %145 = trunc i32 %144 to i16
  store i16 %145, i16* %140, align 2
  %146 = add nuw nsw i64 %132, 1
  %147 = icmp eq i64 %146, 8
  %148 = icmp eq i64 %146, %131
  %149 = or i1 %147, %148
  br i1 %149, label %150, label %163

150:                                              ; preds = %136, %139, %163, %176, %189, %202, %215, %228, %241, %130
  %151 = add nuw nsw i64 %132, 1
  %152 = add i64 %131, 1
  %153 = icmp eq i64 %151, %104
  br i1 %153, label %154, label %130

154:                                              ; preds = %150
  %155 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  %156 = load i64, i64* %155, align 8
  %157 = load i64, i64* %13, align 8
  br label %158

158:                                              ; preds = %154, %97
  %159 = phi i64 [ %157, %154 ], [ 0, %97 ]
  %160 = phi i64 [ %156, %154 ], [ 0, %97 ]
  %161 = insertvalue { i64, i64 } undef, i64 %160, 0
  %162 = insertvalue { i64, i64 } %161, i64 %159, 1
  ret { i64, i64 } %162

163:                                              ; preds = %139
  %164 = lshr i32 %144, 16
  %165 = getelementptr inbounds [8 x i16], [8 x i16]* %12, i64 0, i64 %146
  %166 = load i16, i16* %165, align 2
  %167 = zext i16 %166 to i32
  %168 = add nuw nsw i32 %164, %167
  %169 = mul nuw i32 %110, %137
  %170 = add nuw i32 %168, %169
  %171 = trunc i32 %170 to i16
  store i16 %171, i16* %165, align 2
  %172 = add nuw nsw i64 %132, 2
  %173 = icmp eq i64 %172, 8
  %174 = icmp eq i64 %172, %131
  %175 = or i1 %173, %174
  br i1 %175, label %150, label %176

176:                                              ; preds = %163
  %177 = lshr i32 %170, 16
  %178 = getelementptr inbounds [8 x i16], [8 x i16]* %12, i64 0, i64 %172
  %179 = load i16, i16* %178, align 2
  %180 = zext i16 %179 to i32
  %181 = add nuw nsw i32 %177, %180
  %182 = mul nuw i32 %113, %137
  %183 = add nuw i32 %181, %182
  %184 = trunc i32 %183 to i16
  store i16 %184, i16* %178, align 2
  %185 = add nuw nsw i64 %132, 3
  %186 = icmp eq i64 %185, 8
  %187 = icmp eq i64 %185, %131
  %188 = or i1 %186, %187
  br i1 %188, label %150, label %189

189:                                              ; preds = %176
  %190 = lshr i32 %183, 16
  %191 = getelementptr inbounds [8 x i16], [8 x i16]* %12, i64 0, i64 %185
  %192 = load i16, i16* %191, align 2
  %193 = zext i16 %192 to i32
  %194 = add nuw nsw i32 %190, %193
  %195 = mul nuw i32 %116, %137
  %196 = add nuw i32 %194, %195
  %197 = trunc i32 %196 to i16
  store i16 %197, i16* %191, align 2
  %198 = add nuw nsw i64 %132, 4
  %199 = icmp eq i64 %198, 8
  %200 = icmp eq i64 %198, %131
  %201 = or i1 %199, %200
  br i1 %201, label %150, label %202

202:                                              ; preds = %189
  %203 = lshr i32 %196, 16
  %204 = getelementptr inbounds [8 x i16], [8 x i16]* %12, i64 0, i64 %198
  %205 = load i16, i16* %204, align 2
  %206 = zext i16 %205 to i32
  %207 = add nuw nsw i32 %203, %206
  %208 = mul nuw i32 %120, %137
  %209 = add nuw i32 %207, %208
  %210 = trunc i32 %209 to i16
  store i16 %210, i16* %204, align 2
  %211 = add nuw nsw i64 %132, 5
  %212 = icmp eq i64 %211, 8
  %213 = icmp eq i64 %211, %131
  %214 = or i1 %212, %213
  br i1 %214, label %150, label %215

215:                                              ; preds = %202
  %216 = lshr i32 %209, 16
  %217 = getelementptr inbounds [8 x i16], [8 x i16]* %12, i64 0, i64 %211
  %218 = load i16, i16* %217, align 2
  %219 = zext i16 %218 to i32
  %220 = add nuw nsw i32 %216, %219
  %221 = mul nuw i32 %123, %137
  %222 = add nuw i32 %220, %221
  %223 = trunc i32 %222 to i16
  store i16 %223, i16* %217, align 2
  %224 = add nuw nsw i64 %132, 6
  %225 = icmp eq i64 %224, 8
  %226 = icmp eq i64 %224, %131
  %227 = or i1 %225, %226
  br i1 %227, label %150, label %228

228:                                              ; preds = %215
  %229 = lshr i32 %222, 16
  %230 = getelementptr inbounds [8 x i16], [8 x i16]* %12, i64 0, i64 %224
  %231 = load i16, i16* %230, align 2
  %232 = zext i16 %231 to i32
  %233 = add nuw nsw i32 %229, %232
  %234 = mul nuw i32 %126, %137
  %235 = add nuw i32 %233, %234
  %236 = trunc i32 %235 to i16
  store i16 %236, i16* %230, align 2
  %237 = add nuw nsw i64 %132, 7
  %238 = icmp eq i64 %237, 8
  %239 = icmp eq i64 %237, %131
  %240 = or i1 %238, %239
  br i1 %240, label %150, label %241

241:                                              ; preds = %228
  %242 = lshr i32 %235, 16
  %243 = getelementptr inbounds [8 x i16], [8 x i16]* %12, i64 0, i64 %237
  %244 = load i16, i16* %243, align 2
  %245 = zext i16 %244 to i32
  %246 = add nuw nsw i32 %242, %245
  %247 = mul nuw i32 %129, %137
  %248 = add nuw i32 %246, %247
  %249 = trunc i32 %248 to i16
  store i16 %249, i16* %243, align 2
  br label %150
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @av_cmp_i(i64, i64, i64, i64) local_unnamed_addr #0 {
  %5 = lshr i64 %1, 48
  %6 = shl nuw nsw i64 %5, 16
  %7 = trunc i64 %6 to i32
  %8 = ashr exact i32 %7, 16
  %9 = lshr i64 %3, 48
  %10 = shl nuw nsw i64 %9, 16
  %11 = trunc i64 %10 to i32
  %12 = ashr exact i32 %11, 16
  %13 = sub nsw i32 %8, %12
  %14 = icmp eq i32 %13, 0
  %15 = lshr i64 %1, 16
  %16 = trunc i64 %15 to i32
  %17 = lshr i64 %3, 16
  %18 = trunc i64 %17 to i32
  %19 = trunc i64 %1 to i32
  %20 = trunc i64 %3 to i32
  %21 = lshr i64 %0, 48
  %22 = trunc i64 %21 to i32
  %23 = lshr i64 %2, 48
  %24 = trunc i64 %23 to i32
  %25 = lshr i64 %0, 32
  %26 = trunc i64 %25 to i32
  %27 = lshr i64 %2, 32
  %28 = trunc i64 %27 to i32
  %29 = lshr i64 %0, 16
  %30 = trunc i64 %29 to i32
  %31 = lshr i64 %2, 16
  %32 = trunc i64 %31 to i32
  %33 = trunc i64 %0 to i32
  %34 = trunc i64 %2 to i32
  br i1 %14, label %35, label %49

35:                                               ; preds = %4
  %36 = lshr i64 %3, 32
  %37 = trunc i64 %36 to i32
  %38 = lshr i64 %1, 32
  %39 = trunc i64 %38 to i32
  %40 = and i32 %39, 65535
  %41 = and i32 %37, 65535
  %42 = sub nsw i32 %40, %41
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %49

44:                                               ; preds = %35
  %45 = and i32 %16, 65535
  %46 = and i32 %18, 65535
  %47 = sub nsw i32 %45, %46
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %4, %35, %44, %53, %58, %61, %66
  %50 = phi i32 [ %42, %35 ], [ %47, %44 ], [ %56, %53 ], [ %59, %58 ], [ %64, %61 ], [ %69, %66 ], [ %13, %4 ]
  %51 = ashr i32 %50, 16
  %52 = or i32 %51, 1
  ret i32 %52

53:                                               ; preds = %44
  %54 = and i32 %19, 65535
  %55 = and i32 %20, 65535
  %56 = sub nsw i32 %54, %55
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %49

58:                                               ; preds = %53
  %59 = sub nsw i32 %22, %24
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %49

61:                                               ; preds = %58
  %62 = and i32 %26, 65535
  %63 = and i32 %28, 65535
  %64 = sub nsw i32 %62, %63
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %49

66:                                               ; preds = %61
  %67 = and i32 %30, 65535
  %68 = and i32 %32, 65535
  %69 = sub nsw i32 %67, %68
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %49

71:                                               ; preds = %66
  %72 = and i32 %33, 65535
  %73 = and i32 %34, 65535
  %74 = sub nsw i32 %72, %73
  %75 = icmp eq i32 %74, 0
  %76 = ashr i32 %74, 16
  %77 = or i32 %76, 1
  %78 = select i1 %75, i32 0, i32 %77
  ret i32 %78
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden { i64, i64 } @av_shr_i(i64, i64, i32) local_unnamed_addr #0 {
  %4 = alloca { i64, i64 }, align 8
  %5 = alloca { i64, i64 }, align 8
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  store i64 %0, i64* %6, align 8
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  store i64 %1, i64* %7, align 8
  %8 = bitcast { i64, i64 }* %4 to [8 x i16]*
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 1
  %10 = ashr i32 %2, 4
  %11 = bitcast { i64, i64 }* %5 to [8 x i16]*
  %12 = and i32 %2, 15
  %13 = add nsw i32 %10, 1
  %14 = sext i32 %13 to i64
  %15 = icmp ult i32 %13, 8
  %16 = bitcast { i64, i64 }* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 16, i1 false)
  br i1 %15, label %17, label %23

17:                                               ; preds = %3
  %18 = and i64 %14, 4294967295
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 %18
  %20 = load i16, i16* %19, align 2
  %21 = zext i16 %20 to i32
  %22 = shl nuw i32 %21, 16
  br label %23

23:                                               ; preds = %17, %3
  %24 = phi i32 [ %22, %17 ], [ 0, %3 ]
  %25 = icmp ult i32 %10, 8
  br i1 %25, label %26, label %32

26:                                               ; preds = %23
  %27 = zext i32 %10 to i64
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 %27
  %29 = load i16, i16* %28, align 2
  %30 = zext i16 %29 to i32
  %31 = or i32 %24, %30
  br label %32

32:                                               ; preds = %26, %23
  %33 = phi i32 [ %31, %26 ], [ %24, %23 ]
  %34 = lshr i32 %33, %12
  %35 = trunc i32 %34 to i16
  %36 = bitcast { i64, i64 }* %4 to i16*
  store i16 %35, i16* %36, align 8
  %37 = add nsw i32 %10, 2
  %38 = icmp ult i32 %37, 8
  br i1 %38, label %39, label %45

39:                                               ; preds = %32
  %40 = zext i32 %37 to i64
  %41 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 %40
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i32
  %44 = shl nuw i32 %43, 16
  br label %45

45:                                               ; preds = %39, %32
  %46 = phi i32 [ %44, %39 ], [ 0, %32 ]
  br i1 %15, label %47, label %53

47:                                               ; preds = %45
  %48 = and i64 %14, 4294967295
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = or i32 %46, %51
  br label %53

53:                                               ; preds = %47, %45
  %54 = phi i32 [ %52, %47 ], [ %46, %45 ]
  %55 = lshr i32 %54, %12
  %56 = trunc i32 %55 to i16
  %57 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 1
  store i16 %56, i16* %57, align 2
  %58 = add nsw i32 %10, 2
  %59 = add nsw i32 %10, 3
  %60 = icmp ult i32 %59, 8
  br i1 %60, label %61, label %67

61:                                               ; preds = %53
  %62 = zext i32 %59 to i64
  %63 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 %62
  %64 = load i16, i16* %63, align 2
  %65 = zext i16 %64 to i32
  %66 = shl nuw i32 %65, 16
  br label %67

67:                                               ; preds = %61, %53
  %68 = phi i32 [ %66, %61 ], [ 0, %53 ]
  %69 = icmp ult i32 %58, 8
  br i1 %69, label %70, label %76

70:                                               ; preds = %67
  %71 = zext i32 %58 to i64
  %72 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 %71
  %73 = load i16, i16* %72, align 2
  %74 = zext i16 %73 to i32
  %75 = or i32 %68, %74
  br label %76

76:                                               ; preds = %70, %67
  %77 = phi i32 [ %75, %70 ], [ %68, %67 ]
  %78 = lshr i32 %77, %12
  %79 = trunc i32 %78 to i16
  %80 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 2
  store i16 %79, i16* %80, align 4
  %81 = add nsw i32 %10, 3
  %82 = add nsw i32 %10, 4
  %83 = icmp ult i32 %82, 8
  br i1 %83, label %84, label %90

84:                                               ; preds = %76
  %85 = zext i32 %82 to i64
  %86 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 %85
  %87 = load i16, i16* %86, align 2
  %88 = zext i16 %87 to i32
  %89 = shl nuw i32 %88, 16
  br label %90

90:                                               ; preds = %84, %76
  %91 = phi i32 [ %89, %84 ], [ 0, %76 ]
  %92 = icmp ult i32 %81, 8
  br i1 %92, label %93, label %99

93:                                               ; preds = %90
  %94 = zext i32 %81 to i64
  %95 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 %94
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = or i32 %91, %97
  br label %99

99:                                               ; preds = %93, %90
  %100 = phi i32 [ %98, %93 ], [ %91, %90 ]
  %101 = lshr i32 %100, %12
  %102 = trunc i32 %101 to i16
  %103 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 3
  store i16 %102, i16* %103, align 2
  %104 = add nsw i32 %10, 4
  %105 = add nsw i32 %10, 5
  %106 = icmp ult i32 %105, 8
  br i1 %106, label %107, label %113

107:                                              ; preds = %99
  %108 = zext i32 %105 to i64
  %109 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 %108
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = shl nuw i32 %111, 16
  br label %113

113:                                              ; preds = %107, %99
  %114 = phi i32 [ %112, %107 ], [ 0, %99 ]
  %115 = icmp ult i32 %104, 8
  br i1 %115, label %116, label %122

116:                                              ; preds = %113
  %117 = zext i32 %104 to i64
  %118 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 %117
  %119 = load i16, i16* %118, align 2
  %120 = zext i16 %119 to i32
  %121 = or i32 %114, %120
  br label %122

122:                                              ; preds = %116, %113
  %123 = phi i32 [ %121, %116 ], [ %114, %113 ]
  %124 = lshr i32 %123, %12
  %125 = trunc i32 %124 to i16
  %126 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 1
  %127 = bitcast i64* %126 to i16*
  store i16 %125, i16* %127, align 8
  %128 = add nsw i32 %10, 5
  %129 = add nsw i32 %10, 6
  %130 = icmp ult i32 %129, 8
  br i1 %130, label %131, label %137

131:                                              ; preds = %122
  %132 = zext i32 %129 to i64
  %133 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 %132
  %134 = load i16, i16* %133, align 2
  %135 = zext i16 %134 to i32
  %136 = shl nuw i32 %135, 16
  br label %137

137:                                              ; preds = %131, %122
  %138 = phi i32 [ %136, %131 ], [ 0, %122 ]
  %139 = icmp ult i32 %128, 8
  br i1 %139, label %140, label %146

140:                                              ; preds = %137
  %141 = zext i32 %128 to i64
  %142 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 %141
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = or i32 %138, %144
  br label %146

146:                                              ; preds = %140, %137
  %147 = phi i32 [ %145, %140 ], [ %138, %137 ]
  %148 = lshr i32 %147, %12
  %149 = trunc i32 %148 to i16
  %150 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 5
  store i16 %149, i16* %150, align 2
  %151 = add nsw i32 %10, 6
  %152 = add nsw i32 %10, 7
  %153 = icmp ult i32 %152, 8
  br i1 %153, label %154, label %160

154:                                              ; preds = %146
  %155 = zext i32 %152 to i64
  %156 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 %155
  %157 = load i16, i16* %156, align 2
  %158 = zext i16 %157 to i32
  %159 = shl nuw i32 %158, 16
  br label %160

160:                                              ; preds = %154, %146
  %161 = phi i32 [ %159, %154 ], [ 0, %146 ]
  %162 = icmp ult i32 %151, 8
  br i1 %162, label %163, label %169

163:                                              ; preds = %160
  %164 = zext i32 %151 to i64
  %165 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 %164
  %166 = load i16, i16* %165, align 2
  %167 = zext i16 %166 to i32
  %168 = or i32 %161, %167
  br label %169

169:                                              ; preds = %163, %160
  %170 = phi i32 [ %168, %163 ], [ %161, %160 ]
  %171 = lshr i32 %170, %12
  %172 = trunc i32 %171 to i16
  %173 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 6
  store i16 %172, i16* %173, align 4
  %174 = add nsw i32 %10, 7
  %175 = add nsw i32 %10, 8
  %176 = icmp ult i32 %175, 8
  br i1 %176, label %177, label %183

177:                                              ; preds = %169
  %178 = zext i32 %175 to i64
  %179 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 %178
  %180 = load i16, i16* %179, align 2
  %181 = zext i16 %180 to i32
  %182 = shl nuw i32 %181, 16
  br label %183

183:                                              ; preds = %177, %169
  %184 = phi i32 [ %182, %177 ], [ 0, %169 ]
  %185 = icmp ult i32 %174, 8
  br i1 %185, label %186, label %192

186:                                              ; preds = %183
  %187 = zext i32 %174 to i64
  %188 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 %187
  %189 = load i16, i16* %188, align 2
  %190 = zext i16 %189 to i32
  %191 = or i32 %184, %190
  br label %192

192:                                              ; preds = %186, %183
  %193 = phi i32 [ %191, %186 ], [ %184, %183 ]
  %194 = lshr i32 %193, %12
  %195 = trunc i32 %194 to i16
  %196 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 7
  store i16 %195, i16* %196, align 2
  %197 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 0
  %198 = load i64, i64* %197, align 8
  %199 = insertvalue { i64, i64 } undef, i64 %198, 0
  %200 = load i64, i64* %9, align 8
  %201 = insertvalue { i64, i64 } %199, i64 %200, 1
  ret { i64, i64 } %201
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @av_mod_i(%struct.AVInteger*, i64, i64, i64, i64) local_unnamed_addr #4 {
  %6 = alloca %struct.AVInteger, align 2
  %7 = lshr i64 %2, 48
  %8 = trunc i64 %7 to i16
  %9 = icmp eq i16 %8, 0
  %10 = lshr i64 %2, 32
  %11 = trunc i64 %10 to i16
  %12 = lshr i64 %2, 16
  %13 = trunc i64 %12 to i16
  %14 = trunc i64 %2 to i16
  %15 = lshr i64 %1, 48
  %16 = trunc i64 %15 to i16
  %17 = lshr i64 %1, 32
  %18 = trunc i64 %17 to i16
  %19 = lshr i64 %1, 16
  %20 = trunc i64 %19 to i16
  %21 = trunc i64 %1 to i16
  br i1 %9, label %30, label %22

22:                                               ; preds = %42, %40, %38, %36, %34, %32, %30, %5
  %23 = phi i32 [ 112, %5 ], [ 96, %30 ], [ 80, %32 ], [ 64, %34 ], [ 48, %36 ], [ 32, %38 ], [ 16, %40 ], [ 0, %42 ]
  %24 = phi i16 [ %8, %5 ], [ %11, %30 ], [ %13, %32 ], [ %14, %34 ], [ %16, %36 ], [ %18, %38 ], [ %20, %40 ], [ %21, %42 ]
  %25 = or i16 %24, 1
  %26 = zext i16 %25 to i32
  %27 = tail call i32 @llvm.ctlz.i32(i32 %26, i1 true) #5, !range !2
  %28 = xor i32 %27, 31
  %29 = or i32 %28, %23
  br label %44

30:                                               ; preds = %5
  %31 = icmp eq i16 %11, 0
  br i1 %31, label %32, label %22

32:                                               ; preds = %30
  %33 = icmp eq i16 %13, 0
  br i1 %33, label %34, label %22

34:                                               ; preds = %32
  %35 = icmp eq i16 %14, 0
  br i1 %35, label %36, label %22

36:                                               ; preds = %34
  %37 = icmp eq i16 %16, 0
  br i1 %37, label %38, label %22

38:                                               ; preds = %36
  %39 = icmp eq i16 %18, 0
  br i1 %39, label %40, label %22

40:                                               ; preds = %38
  %41 = icmp eq i16 %20, 0
  br i1 %41, label %42, label %22

42:                                               ; preds = %40
  %43 = icmp eq i16 %21, 0
  br i1 %43, label %44, label %22

44:                                               ; preds = %22, %42
  %45 = phi i32 [ %29, %22 ], [ -1, %42 ]
  %46 = lshr i64 %4, 48
  %47 = trunc i64 %46 to i16
  %48 = icmp eq i16 %47, 0
  %49 = lshr i64 %4, 32
  %50 = trunc i64 %49 to i16
  %51 = lshr i64 %4, 16
  %52 = trunc i64 %51 to i16
  %53 = trunc i64 %4 to i16
  %54 = lshr i64 %3, 48
  %55 = trunc i64 %54 to i16
  %56 = lshr i64 %3, 32
  %57 = trunc i64 %56 to i16
  %58 = lshr i64 %3, 16
  %59 = trunc i64 %58 to i16
  %60 = trunc i64 %3 to i16
  br i1 %48, label %69, label %61

61:                                               ; preds = %81, %79, %77, %75, %73, %71, %69, %44
  %62 = phi i32 [ 112, %44 ], [ 96, %69 ], [ 80, %71 ], [ 64, %73 ], [ 48, %75 ], [ 32, %77 ], [ 16, %79 ], [ 0, %81 ]
  %63 = phi i16 [ %47, %44 ], [ %50, %69 ], [ %52, %71 ], [ %53, %73 ], [ %55, %75 ], [ %57, %77 ], [ %59, %79 ], [ %60, %81 ]
  %64 = or i16 %63, 1
  %65 = zext i16 %64 to i32
  %66 = tail call i32 @llvm.ctlz.i32(i32 %65, i1 true) #5, !range !2
  %67 = xor i32 %66, 31
  %68 = or i32 %67, %62
  br label %83

69:                                               ; preds = %44
  %70 = icmp eq i16 %50, 0
  br i1 %70, label %71, label %61

71:                                               ; preds = %69
  %72 = icmp eq i16 %52, 0
  br i1 %72, label %73, label %61

73:                                               ; preds = %71
  %74 = icmp eq i16 %53, 0
  br i1 %74, label %75, label %61

75:                                               ; preds = %73
  %76 = icmp eq i16 %55, 0
  br i1 %76, label %77, label %61

77:                                               ; preds = %75
  %78 = icmp eq i16 %57, 0
  br i1 %78, label %79, label %61

79:                                               ; preds = %77
  %80 = icmp eq i16 %59, 0
  br i1 %80, label %81, label %61

81:                                               ; preds = %79
  %82 = icmp eq i16 %60, 0
  br i1 %82, label %83, label %61

83:                                               ; preds = %61, %81
  %84 = phi i32 [ %68, %61 ], [ -1, %81 ]
  %85 = sub nsw i32 %45, %84
  %86 = bitcast %struct.AVInteger* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %86) #5
  %87 = icmp eq %struct.AVInteger* %0, null
  %88 = select i1 %87, %struct.AVInteger* %6, %struct.AVInteger* %0
  %89 = trunc i64 %10 to i32
  %90 = icmp slt i32 %89, 0
  %91 = bitcast %struct.AVInteger* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %91, i8 -86, i64 16, i1 false)
  br i1 %90, label %92, label %265

92:                                               ; preds = %83
  %93 = trunc i64 %1 to i32
  %94 = and i32 %93, 65535
  %95 = sub nsw i32 0, %94
  %96 = ashr i32 %95, 16
  %97 = trunc i64 %19 to i32
  %98 = and i32 %97, 65535
  %99 = sub nsw i32 %96, %98
  %100 = ashr i32 %99, 16
  %101 = trunc i64 %17 to i32
  %102 = and i32 %101, 65535
  %103 = sub nsw i32 %100, %102
  %104 = ashr i32 %103, 16
  %105 = trunc i64 %15 to i32
  %106 = sub nsw i32 %104, %105
  %107 = ashr i32 %106, 16
  %108 = trunc i64 %2 to i32
  %109 = and i32 %108, 65535
  %110 = sub nsw i32 %107, %109
  %111 = ashr i32 %110, 16
  %112 = trunc i64 %12 to i32
  %113 = and i32 %112, 65535
  %114 = sub nsw i32 %111, %113
  %115 = shl i32 %114, 16
  %116 = and i32 %110, 65535
  %117 = or i32 %115, %116
  %118 = zext i32 %117 to i64
  %119 = ashr i32 %114, 16
  %120 = and i32 %89, 65535
  %121 = sub nsw i32 %119, %120
  %122 = and i32 %121, 65535
  %123 = zext i32 %122 to i64
  %124 = shl nuw nsw i64 %123, 32
  %125 = or i64 %124, %118
  %126 = lshr i32 %121, 16
  %127 = trunc i64 %7 to i32
  %128 = sub nsw i32 %126, %127
  %129 = zext i32 %128 to i64
  %130 = shl i64 %129, 48
  %131 = or i64 %125, %130
  %132 = zext i32 %106 to i64
  %133 = shl i64 %132, 48
  %134 = and i32 %103, 65535
  %135 = zext i32 %134 to i64
  %136 = shl nuw nsw i64 %135, 32
  %137 = shl i32 %99, 16
  %138 = and i32 %95, 65535
  %139 = or i32 %137, %138
  %140 = zext i32 %139 to i64
  %141 = or i64 %136, %140
  %142 = or i64 %141, %133
  %143 = call { i64, i64 } @av_mod_i(%struct.AVInteger* %88, i64 %142, i64 %131, i64 %3, i64 %4)
  %144 = extractvalue { i64, i64 } %143, 0
  %145 = extractvalue { i64, i64 } %143, 1
  %146 = bitcast %struct.AVInteger* %88 to i64*
  %147 = load i64, i64* %146, align 2
  %148 = getelementptr inbounds %struct.AVInteger, %struct.AVInteger* %88, i64 0, i32 0, i64 4
  %149 = bitcast i16* %148 to i64*
  %150 = load i64, i64* %149, align 2
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 65535
  %153 = sub nsw i32 0, %152
  %154 = ashr i32 %153, 16
  %155 = lshr i64 %147, 16
  %156 = trunc i64 %155 to i32
  %157 = and i32 %156, 65535
  %158 = sub nsw i32 %154, %157
  %159 = ashr i32 %158, 16
  %160 = lshr i64 %147, 32
  %161 = trunc i64 %160 to i32
  %162 = and i32 %161, 65535
  %163 = sub nsw i32 %159, %162
  %164 = ashr i32 %163, 16
  %165 = lshr i64 %147, 48
  %166 = trunc i64 %165 to i32
  %167 = sub nsw i32 %164, %166
  %168 = ashr i32 %167, 16
  %169 = trunc i64 %150 to i32
  %170 = and i32 %169, 65535
  %171 = sub nsw i32 %168, %170
  %172 = ashr i32 %171, 16
  %173 = lshr i64 %150, 16
  %174 = trunc i64 %173 to i32
  %175 = and i32 %174, 65535
  %176 = sub nsw i32 %172, %175
  %177 = shl i32 %176, 16
  %178 = and i32 %171, 65535
  %179 = or i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = ashr i32 %176, 16
  %182 = lshr i64 %150, 32
  %183 = trunc i64 %182 to i32
  %184 = and i32 %183, 65535
  %185 = sub nsw i32 %181, %184
  %186 = and i32 %185, 65535
  %187 = zext i32 %186 to i64
  %188 = shl nuw nsw i64 %187, 32
  %189 = or i64 %188, %180
  %190 = lshr i32 %185, 16
  %191 = lshr i64 %150, 48
  %192 = trunc i64 %191 to i32
  %193 = sub nsw i32 %190, %192
  %194 = zext i32 %193 to i64
  %195 = shl i64 %194, 48
  %196 = or i64 %189, %195
  %197 = zext i32 %167 to i64
  %198 = shl i64 %197, 48
  %199 = and i32 %163, 65535
  %200 = zext i32 %199 to i64
  %201 = shl nuw nsw i64 %200, 32
  %202 = shl i32 %158, 16
  %203 = and i32 %153, 65535
  %204 = or i32 %202, %203
  %205 = zext i32 %204 to i64
  %206 = or i64 %201, %205
  %207 = or i64 %206, %198
  store i64 %207, i64* %146, align 2
  store i64 %196, i64* %149, align 2
  %208 = trunc i64 %144 to i32
  %209 = and i32 %208, 65535
  %210 = sub nsw i32 0, %209
  %211 = ashr i32 %210, 16
  %212 = lshr i64 %144, 16
  %213 = trunc i64 %212 to i32
  %214 = and i32 %213, 65535
  %215 = sub nsw i32 %211, %214
  %216 = ashr i32 %215, 16
  %217 = lshr i64 %144, 32
  %218 = trunc i64 %217 to i32
  %219 = and i32 %218, 65535
  %220 = sub nsw i32 %216, %219
  %221 = ashr i32 %220, 16
  %222 = lshr i64 %144, 48
  %223 = trunc i64 %222 to i32
  %224 = sub nsw i32 %221, %223
  %225 = ashr i32 %224, 16
  %226 = trunc i64 %145 to i32
  %227 = and i32 %226, 65535
  %228 = sub nsw i32 %225, %227
  %229 = ashr i32 %228, 16
  %230 = lshr i64 %145, 16
  %231 = trunc i64 %230 to i32
  %232 = and i32 %231, 65535
  %233 = sub nsw i32 %229, %232
  %234 = shl i32 %233, 16
  %235 = and i32 %228, 65535
  %236 = or i32 %234, %235
  %237 = zext i32 %236 to i64
  %238 = ashr i32 %233, 16
  %239 = lshr i64 %145, 32
  %240 = trunc i64 %239 to i32
  %241 = and i32 %240, 65535
  %242 = sub nsw i32 %238, %241
  %243 = and i32 %242, 65535
  %244 = zext i32 %243 to i64
  %245 = shl nuw nsw i64 %244, 32
  %246 = or i64 %245, %237
  %247 = lshr i32 %242, 16
  %248 = lshr i64 %145, 48
  %249 = trunc i64 %248 to i32
  %250 = sub nsw i32 %247, %249
  %251 = zext i32 %250 to i64
  %252 = shl i64 %251, 48
  %253 = or i64 %246, %252
  %254 = zext i32 %224 to i64
  %255 = shl i64 %254, 48
  %256 = and i32 %220, 65535
  %257 = zext i32 %256 to i64
  %258 = shl nuw nsw i64 %257, 32
  %259 = shl i32 %215, 16
  %260 = and i32 %210, 65535
  %261 = or i32 %259, %260
  %262 = zext i32 %261 to i64
  %263 = or i64 %258, %262
  %264 = or i64 %263, %255
  br label %520

265:                                              ; preds = %83
  %266 = icmp sgt i32 %85, 0
  br i1 %266, label %267, label %273

267:                                              ; preds = %265
  %268 = sub nsw i32 0, %85
  %269 = tail call { i64, i64 } @av_shr_i(i64 %3, i64 %4, i32 %268) #6
  %270 = extractvalue { i64, i64 } %269, 0
  %271 = extractvalue { i64, i64 } %269, 1
  %272 = bitcast %struct.AVInteger* %88 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 2 %272, i8 0, i64 16, i1 false)
  br label %276

273:                                              ; preds = %265
  %274 = bitcast %struct.AVInteger* %88 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 2 %274, i8 0, i64 16, i1 false)
  %275 = icmp sgt i32 %85, -1
  br i1 %275, label %276, label %520

276:                                              ; preds = %267, %273
  %277 = phi i64 [ %271, %267 ], [ %4, %273 ]
  %278 = phi i64 [ %270, %267 ], [ %3, %273 ]
  %279 = bitcast %struct.AVInteger* %88 to i64*
  %280 = getelementptr inbounds %struct.AVInteger, %struct.AVInteger* %88, i64 0, i32 0, i64 4
  %281 = bitcast i16* %280 to i64*
  %282 = getelementptr inbounds %struct.AVInteger, %struct.AVInteger* %88, i64 0, i32 0, i64 0
  br label %283

283:                                              ; preds = %470, %276
  %284 = phi i64 [ 0, %276 ], [ %518, %470 ]
  %285 = phi i64 [ 0, %276 ], [ %337, %470 ]
  %286 = phi i32 [ %85, %276 ], [ %291, %470 ]
  %287 = phi i64 [ %2, %276 ], [ %468, %470 ]
  %288 = phi i64 [ %1, %276 ], [ %467, %470 ]
  %289 = phi i64 [ %277, %276 ], [ %517, %470 ]
  %290 = phi i64 [ %278, %276 ], [ %496, %470 ]
  %291 = add nsw i32 %286, -1
  %292 = trunc i64 %284 to i32
  %293 = lshr i64 %284, 16
  %294 = trunc i64 %293 to i32
  %295 = lshr i64 %284, 32
  %296 = trunc i64 %295 to i32
  %297 = lshr i64 %284, 48
  %298 = trunc i64 %297 to i32
  %299 = and i32 %292, 32768
  %300 = shl i64 %284, 1
  %301 = and i32 %294, 65535
  %302 = shl nuw i32 %301, 16
  %303 = or i32 %302, %299
  %304 = and i32 %296, 65535
  %305 = shl nuw i32 %304, 16
  %306 = or i32 %305, %301
  %307 = lshr i32 %306, 15
  %308 = shl nuw nsw i64 %297, 16
  %309 = trunc i64 %308 to i32
  %310 = or i32 %304, %309
  %311 = lshr i32 %310, 15
  %312 = trunc i64 %285 to i32
  %313 = and i32 %312, 65535
  %314 = shl nuw i32 %313, 16
  %315 = or i32 %314, %298
  %316 = lshr i32 %315, 15
  %317 = lshr i64 %285, 16
  %318 = trunc i64 %317 to i32
  %319 = and i32 %318, 65535
  %320 = shl nuw i32 %319, 16
  %321 = or i32 %320, %313
  %322 = lshr i32 %321, 15
  %323 = shl i32 %322, 16
  %324 = and i32 %316, 65535
  %325 = or i32 %323, %324
  %326 = zext i32 %325 to i64
  %327 = lshr i64 %285, 16
  %328 = trunc i64 %327 to i32
  %329 = and i32 %328, 2147418112
  %330 = or i32 %329, %319
  %331 = lshr i32 %330, 15
  %332 = zext i32 %331 to i64
  %333 = shl nuw nsw i64 %332, 32
  %334 = lshr i64 %285, 47
  %335 = shl i64 %334, 48
  %336 = or i64 %335, %326
  %337 = or i64 %336, %333
  %338 = zext i32 %311 to i64
  %339 = shl i64 %338, 48
  %340 = and i32 %307, 65535
  %341 = zext i32 %340 to i64
  %342 = shl nuw nsw i64 %341, 32
  %343 = shl i32 %303, 1
  %344 = zext i32 %343 to i64
  %345 = and i64 %300, 65534
  %346 = or i64 %339, %345
  %347 = or i64 %346, %344
  %348 = or i64 %347, %342
  store i64 %348, i64* %279, align 2
  %349 = tail call i32 @av_cmp_i(i64 %288, i64 %287, i64 %290, i64 %289) #6
  %350 = icmp sgt i32 %349, -1
  br i1 %350, label %370, label %351

351:                                              ; preds = %283
  %352 = trunc i64 %290 to i32
  %353 = lshr i64 %290, 16
  %354 = trunc i64 %353 to i32
  %355 = lshr i64 %290, 32
  %356 = trunc i64 %355 to i32
  %357 = lshr i64 %290, 48
  %358 = trunc i64 %357 to i32
  %359 = and i32 %354, 65535
  %360 = and i32 %356, 65535
  %361 = trunc i64 %289 to i32
  %362 = and i32 %361, 65535
  %363 = lshr i64 %289, 16
  %364 = trunc i64 %363 to i32
  %365 = and i32 %364, 65535
  %366 = lshr i64 %289, 32
  %367 = trunc i64 %366 to i32
  %368 = and i32 %367, 65535
  %369 = lshr i64 %289, 48
  br label %457

370:                                              ; preds = %283
  %371 = trunc i64 %300 to i16
  %372 = trunc i64 %288 to i32
  %373 = and i32 %372, 65535
  %374 = trunc i64 %290 to i32
  %375 = and i32 %374, 65535
  %376 = sub nsw i32 %373, %375
  %377 = ashr i32 %376, 16
  %378 = lshr i64 %288, 16
  %379 = trunc i64 %378 to i32
  %380 = and i32 %379, 65535
  %381 = lshr i64 %290, 16
  %382 = trunc i64 %381 to i32
  %383 = and i32 %382, 65535
  %384 = sub nsw i32 %380, %383
  %385 = add nsw i32 %384, %377
  %386 = ashr i32 %385, 16
  %387 = lshr i64 %288, 32
  %388 = trunc i64 %387 to i32
  %389 = and i32 %388, 65535
  %390 = lshr i64 %290, 32
  %391 = trunc i64 %390 to i32
  %392 = and i32 %391, 65535
  %393 = sub nsw i32 %389, %392
  %394 = add nsw i32 %393, %386
  %395 = ashr i32 %394, 16
  %396 = lshr i64 %288, 48
  %397 = trunc i64 %396 to i32
  %398 = lshr i64 %290, 48
  %399 = trunc i64 %398 to i32
  %400 = sub nsw i32 %397, %399
  %401 = add nsw i32 %400, %395
  %402 = ashr i32 %401, 16
  %403 = trunc i64 %287 to i32
  %404 = and i32 %403, 65535
  %405 = trunc i64 %289 to i32
  %406 = and i32 %405, 65535
  %407 = sub nsw i32 %404, %406
  %408 = add nsw i32 %407, %402
  %409 = ashr i32 %408, 16
  %410 = lshr i64 %287, 16
  %411 = trunc i64 %410 to i32
  %412 = and i32 %411, 65535
  %413 = lshr i64 %289, 16
  %414 = trunc i64 %413 to i32
  %415 = and i32 %414, 65535
  %416 = sub nsw i32 %412, %415
  %417 = add nsw i32 %416, %409
  %418 = shl i32 %417, 16
  %419 = and i32 %408, 65535
  %420 = or i32 %418, %419
  %421 = zext i32 %420 to i64
  %422 = ashr i32 %417, 16
  %423 = lshr i64 %287, 32
  %424 = trunc i64 %423 to i32
  %425 = and i32 %424, 65535
  %426 = lshr i64 %289, 32
  %427 = trunc i64 %426 to i32
  %428 = and i32 %427, 65535
  %429 = sub nsw i32 %425, %428
  %430 = add nsw i32 %429, %422
  %431 = and i32 %430, 65535
  %432 = zext i32 %431 to i64
  %433 = shl nuw nsw i64 %432, 32
  %434 = or i64 %433, %421
  %435 = lshr i32 %430, 16
  %436 = lshr i64 %287, 48
  %437 = trunc i64 %436 to i32
  %438 = lshr i64 %289, 48
  %439 = trunc i64 %438 to i32
  %440 = sub nsw i32 %437, %439
  %441 = add nsw i32 %440, %435
  %442 = zext i32 %441 to i64
  %443 = shl i64 %442, 48
  %444 = or i64 %434, %443
  %445 = zext i32 %401 to i64
  %446 = shl i64 %445, 48
  %447 = and i32 %394, 65535
  %448 = zext i32 %447 to i64
  %449 = shl nuw nsw i64 %448, 32
  %450 = shl i32 %385, 16
  %451 = and i32 %376, 65535
  %452 = or i32 %450, %451
  %453 = zext i32 %452 to i64
  %454 = or i64 %449, %453
  %455 = or i64 %454, %446
  %456 = or i16 %371, 1
  store i16 %456, i16* %282, align 2
  br label %457

457:                                              ; preds = %351, %370
  %458 = phi i64 [ %369, %351 ], [ %438, %370 ]
  %459 = phi i32 [ %368, %351 ], [ %428, %370 ]
  %460 = phi i32 [ %365, %351 ], [ %415, %370 ]
  %461 = phi i32 [ %362, %351 ], [ %406, %370 ]
  %462 = phi i32 [ %360, %351 ], [ %392, %370 ]
  %463 = phi i32 [ %359, %351 ], [ %383, %370 ]
  %464 = phi i32 [ %358, %351 ], [ %399, %370 ]
  %465 = phi i64 [ %357, %351 ], [ %398, %370 ]
  %466 = phi i32 [ %352, %351 ], [ %374, %370 ]
  %467 = phi i64 [ %288, %351 ], [ %455, %370 ]
  %468 = phi i64 [ %287, %351 ], [ %444, %370 ]
  %469 = icmp sgt i32 %286, 0
  br i1 %469, label %470, label %519

470:                                              ; preds = %457
  %471 = shl nuw i32 %461, 16
  %472 = or i32 %471, %464
  %473 = lshr i32 %472, 1
  %474 = zext i32 %473 to i64
  %475 = shl i64 %474, 48
  %476 = trunc i64 %465 to i32
  %477 = shl nuw i32 %476, 16
  %478 = or i32 %462, %477
  %479 = lshr i32 %478, 1
  %480 = and i32 %479, 65535
  %481 = zext i32 %480 to i64
  %482 = shl nuw nsw i64 %481, 32
  %483 = or i64 %475, %482
  %484 = shl nuw i32 %462, 16
  %485 = or i32 %484, %463
  %486 = lshr i32 %485, 1
  %487 = shl i32 %486, 16
  %488 = zext i32 %487 to i64
  %489 = or i64 %483, %488
  %490 = shl nuw i32 %463, 16
  %491 = and i32 %466, 65534
  %492 = or i32 %490, %491
  %493 = lshr exact i32 %492, 1
  %494 = and i32 %493, 65535
  %495 = zext i32 %494 to i64
  %496 = or i64 %489, %495
  %497 = trunc i64 %458 to i32
  %498 = shl nuw i32 %497, 16
  %499 = or i32 %459, %498
  %500 = lshr i32 %499, 1
  %501 = and i32 %500, 65535
  %502 = zext i32 %501 to i64
  %503 = shl nuw nsw i64 %502, 32
  %504 = lshr i64 %289, 49
  %505 = shl nuw nsw i64 %504, 48
  %506 = or i64 %503, %505
  %507 = shl nuw i32 %460, 16
  %508 = or i32 %507, %461
  %509 = lshr i32 %508, 1
  %510 = and i32 %509, 65535
  %511 = shl nuw i32 %459, 16
  %512 = or i32 %511, %460
  %513 = lshr i32 %512, 1
  %514 = shl i32 %513, 16
  %515 = or i32 %510, %514
  %516 = zext i32 %515 to i64
  %517 = or i64 %506, %516
  %518 = load i64, i64* %279, align 2
  br label %283

519:                                              ; preds = %457
  store i64 %337, i64* %281, align 2
  br label %520

520:                                              ; preds = %273, %519, %92
  %521 = phi i64 [ %264, %92 ], [ %467, %519 ], [ %1, %273 ]
  %522 = phi i64 [ %253, %92 ], [ %468, %519 ], [ %2, %273 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %86) #5
  %523 = insertvalue { i64, i64 } undef, i64 %521, 0
  %524 = insertvalue { i64, i64 } %523, i64 %522, 1
  ret { i64, i64 } %524
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden { i64, i64 } @av_div_i(i64, i64, i64, i64) local_unnamed_addr #2 {
  %5 = alloca { i64, i64 }, align 8
  %6 = bitcast { i64, i64 }* %5 to %struct.AVInteger*
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  %8 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  %9 = call { i64, i64 } @av_mod_i(%struct.AVInteger* nonnull %6, i64 %0, i64 %1, i64 %2, i64 %3)
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = insertvalue { i64, i64 } undef, i64 %11, 0
  %13 = load i64, i64* %7, align 8
  %14 = insertvalue { i64, i64 } %12, i64 %13, 1
  ret { i64, i64 } %14
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden { i64, i64 } @av_int2i(i64) local_unnamed_addr #0 {
  %2 = alloca { i64, i64 }, align 8
  %3 = bitcast { i64, i64 }* %2 to [8 x i16]*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i64 0, i32 1
  %5 = trunc i64 %0 to i16
  %6 = bitcast { i64, i64 }* %2 to i16*
  store i16 %5, i16* %6, align 8
  %7 = lshr i64 %0, 16
  %8 = trunc i64 %7 to i16
  %9 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  store i16 %8, i16* %9, align 2
  %10 = lshr i64 %0, 32
  %11 = trunc i64 %10 to i16
  %12 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  store i16 %11, i16* %12, align 4
  %13 = lshr i64 %0, 48
  %14 = trunc i64 %13 to i16
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  store i16 %14, i16* %15, align 2
  %16 = ashr i64 %0, 63
  %17 = trunc i64 %16 to i16
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i64 0, i32 1
  %19 = bitcast i64* %18 to i16*
  store i16 %17, i16* %19, align 8
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  store i16 %17, i16* %20, align 2
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  store i16 %17, i16* %21, align 4
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  store i16 %17, i16* %22, align 2
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i64 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = load i64, i64* %4, align 8
  %27 = insertvalue { i64, i64 } %25, i64 %26, 1
  ret { i64, i64 } %27
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @av_i2int(i64, i64) local_unnamed_addr #0 {
  ret i64 %0
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 16, i32 32}
