; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/common/x86/vp9_highbd_iht4x4_add_sse4.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/common/x86/vp9_highbd_iht4x4_add_sse4.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_highbd_iht4x4_16_add_sse4_1(i32* nocapture readonly, i16* nocapture, i32, i32, i32) local_unnamed_addr #0 {
  %6 = alloca [2 x <2 x i64>], align 16
  %7 = bitcast i32* %0 to <2 x i64>*
  %8 = load <2 x i64>, <2 x i64>* %7, align 16
  %9 = getelementptr inbounds i32, i32* %0, i64 4
  %10 = bitcast i32* %9 to <2 x i64>*
  %11 = load <2 x i64>, <2 x i64>* %10, align 16
  %12 = getelementptr inbounds i32, i32* %0, i64 8
  %13 = bitcast i32* %12 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 16
  %15 = getelementptr inbounds i32, i32* %0, i64 12
  %16 = bitcast i32* %15 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 16
  %18 = icmp eq i32 %4, 8
  br i1 %18, label %19, label %46

19:                                               ; preds = %5
  %20 = bitcast [2 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #5
  %21 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %6, i64 0, i64 0
  %22 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %6, i64 0, i64 1
  %23 = bitcast <2 x i64> %8 to <4 x i32>
  %24 = bitcast <2 x i64> %11 to <4 x i32>
  %25 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %23, <4 x i32> %24) #5
  %26 = bitcast [2 x <2 x i64>]* %6 to <8 x i16>*
  store <8 x i16> %25, <8 x i16>* %26, align 16
  %27 = bitcast <2 x i64> %14 to <4 x i32>
  %28 = bitcast <2 x i64> %17 to <4 x i32>
  %29 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %27, <4 x i32> %28) #5
  %30 = bitcast <2 x i64>* %22 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %30, align 16
  %31 = icmp ult i32 %3, 2
  br i1 %31, label %32, label %33

32:                                               ; preds = %19
  call void @idct4_sse2(<2 x i64>* nonnull %21) #5
  br label %34

33:                                               ; preds = %19
  call void @iadst4_sse2(<2 x i64>* nonnull %21) #5
  br label %34

34:                                               ; preds = %33, %32
  %35 = and i32 %3, -3
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %34
  call void @idct4_sse2(<2 x i64>* nonnull %21) #5
  br label %39

38:                                               ; preds = %34
  call void @iadst4_sse2(<2 x i64>* nonnull %21) #5
  br label %39

39:                                               ; preds = %38, %37
  %40 = load <8 x i16>, <8 x i16>* %26, align 16
  %41 = add <8 x i16> %40, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  store <8 x i16> %41, <8 x i16>* %26, align 16
  %42 = load <8 x i16>, <8 x i16>* %30, align 16
  %43 = add <8 x i16> %42, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %44 = ashr <8 x i16> %41, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %45 = ashr <8 x i16> %43, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #5
  br label %544

46:                                               ; preds = %5
  %47 = icmp ult i32 %3, 2
  %48 = bitcast <2 x i64> %8 to <4 x i32>
  %49 = bitcast <2 x i64> %11 to <4 x i32>
  %50 = shufflevector <4 x i32> %48, <4 x i32> %49, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %51 = bitcast <4 x i32> %50 to <2 x i64>
  %52 = bitcast <2 x i64> %14 to <4 x i32>
  %53 = bitcast <2 x i64> %17 to <4 x i32>
  %54 = shufflevector <4 x i32> %52, <4 x i32> %53, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %55 = bitcast <4 x i32> %54 to <2 x i64>
  %56 = shufflevector <4 x i32> %48, <4 x i32> %49, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %57 = bitcast <4 x i32> %56 to <2 x i64>
  %58 = shufflevector <4 x i32> %52, <4 x i32> %53, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %59 = bitcast <4 x i32> %58 to <2 x i64>
  %60 = shufflevector <2 x i64> %51, <2 x i64> %55, <2 x i32> <i32 0, i32 2>
  %61 = shufflevector <2 x i64> %51, <2 x i64> %55, <2 x i32> <i32 1, i32 3>
  %62 = shufflevector <2 x i64> %57, <2 x i64> %59, <2 x i32> <i32 0, i32 2>
  %63 = shufflevector <2 x i64> %57, <2 x i64> %59, <2 x i32> <i32 1, i32 3>
  %64 = bitcast <2 x i64> %60 to <4 x i32>
  br i1 %47, label %65, label %167

65:                                               ; preds = %46
  %66 = bitcast <2 x i64> %62 to <4 x i32>
  %67 = add <4 x i32> %66, %64
  %68 = shufflevector <4 x i32> %67, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %69 = bitcast <4 x i32> %68 to <2 x i64>
  %70 = shufflevector <4 x i32> %67, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %71 = bitcast <4 x i32> %70 to <2 x i64>
  %72 = shl <2 x i64> %69, <i64 32, i64 32>
  %73 = ashr exact <2 x i64> %72, <i64 32, i64 32>
  %74 = mul nsw <2 x i64> %73, <i64 46340, i64 46340>
  %75 = shl <2 x i64> %71, <i64 32, i64 32>
  %76 = ashr exact <2 x i64> %75, <i64 32, i64 32>
  %77 = mul nsw <2 x i64> %76, <i64 46340, i64 46340>
  %78 = add nsw <2 x i64> %74, <i64 32768, i64 32768>
  %79 = bitcast <2 x i64> %78 to <16 x i8>
  %80 = shufflevector <16 x i8> %79, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %81 = add nsw <2 x i64> %77, <i64 32768, i64 32768>
  %82 = bitcast <2 x i64> %81 to <16 x i8>
  %83 = shufflevector <16 x i8> %82, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %84 = bitcast <16 x i8> %80 to <4 x i32>
  %85 = bitcast <16 x i8> %83 to <4 x i32>
  %86 = shufflevector <4 x i32> %84, <4 x i32> %85, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %87 = shufflevector <4 x i32> %84, <4 x i32> %85, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %88 = shufflevector <4 x i32> %86, <4 x i32> %87, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %89 = sub <4 x i32> %64, %66
  %90 = shufflevector <4 x i32> %89, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %91 = bitcast <4 x i32> %90 to <2 x i64>
  %92 = shufflevector <4 x i32> %89, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %93 = bitcast <4 x i32> %92 to <2 x i64>
  %94 = shl <2 x i64> %91, <i64 32, i64 32>
  %95 = ashr exact <2 x i64> %94, <i64 32, i64 32>
  %96 = mul nsw <2 x i64> %95, <i64 46340, i64 46340>
  %97 = shl <2 x i64> %93, <i64 32, i64 32>
  %98 = ashr exact <2 x i64> %97, <i64 32, i64 32>
  %99 = mul nsw <2 x i64> %98, <i64 46340, i64 46340>
  %100 = add nsw <2 x i64> %96, <i64 32768, i64 32768>
  %101 = bitcast <2 x i64> %100 to <16 x i8>
  %102 = shufflevector <16 x i8> %101, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %103 = add nsw <2 x i64> %99, <i64 32768, i64 32768>
  %104 = bitcast <2 x i64> %103 to <16 x i8>
  %105 = shufflevector <16 x i8> %104, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %106 = bitcast <16 x i8> %102 to <4 x i32>
  %107 = bitcast <16 x i8> %105 to <4 x i32>
  %108 = shufflevector <4 x i32> %106, <4 x i32> %107, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %109 = shufflevector <4 x i32> %106, <4 x i32> %107, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %110 = shufflevector <4 x i32> %108, <4 x i32> %109, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %111 = bitcast <2 x i64> %61 to <4 x i32>
  %112 = shufflevector <4 x i32> %111, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %113 = bitcast <4 x i32> %112 to <2 x i64>
  %114 = shufflevector <4 x i32> %111, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %115 = bitcast <4 x i32> %114 to <2 x i64>
  %116 = bitcast <2 x i64> %63 to <4 x i32>
  %117 = shufflevector <4 x i32> %116, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %118 = bitcast <4 x i32> %117 to <2 x i64>
  %119 = shufflevector <4 x i32> %116, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %120 = bitcast <4 x i32> %119 to <2 x i64>
  %121 = shl <2 x i64> %113, <i64 32, i64 32>
  %122 = ashr exact <2 x i64> %121, <i64 32, i64 32>
  %123 = mul nsw <2 x i64> %122, <i64 60548, i64 60548>
  %124 = shl <2 x i64> %115, <i64 32, i64 32>
  %125 = ashr exact <2 x i64> %124, <i64 32, i64 32>
  %126 = mul nsw <2 x i64> %125, <i64 60548, i64 60548>
  %127 = mul nsw <2 x i64> %122, <i64 25080, i64 25080>
  %128 = mul nsw <2 x i64> %125, <i64 25080, i64 25080>
  %129 = shl <2 x i64> %118, <i64 32, i64 32>
  %130 = ashr exact <2 x i64> %129, <i64 32, i64 32>
  %131 = mul nsw <2 x i64> %130, <i64 25080, i64 25080>
  %132 = shl <2 x i64> %120, <i64 32, i64 32>
  %133 = ashr exact <2 x i64> %132, <i64 32, i64 32>
  %134 = mul nsw <2 x i64> %133, <i64 25080, i64 25080>
  %135 = mul nsw <2 x i64> %130, <i64 -60548, i64 -60548>
  %136 = mul nsw <2 x i64> %133, <i64 -60548, i64 -60548>
  %137 = add nsw <2 x i64> %127, <i64 32768, i64 32768>
  %138 = add nsw <2 x i64> %137, %135
  %139 = bitcast <2 x i64> %138 to <16 x i8>
  %140 = shufflevector <16 x i8> %139, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %141 = add nsw <2 x i64> %128, <i64 32768, i64 32768>
  %142 = add nsw <2 x i64> %141, %136
  %143 = bitcast <2 x i64> %142 to <16 x i8>
  %144 = shufflevector <16 x i8> %143, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %145 = add nsw <2 x i64> %123, <i64 32768, i64 32768>
  %146 = add nsw <2 x i64> %145, %131
  %147 = bitcast <2 x i64> %146 to <16 x i8>
  %148 = shufflevector <16 x i8> %147, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %149 = add nsw <2 x i64> %126, <i64 32768, i64 32768>
  %150 = add nsw <2 x i64> %149, %134
  %151 = bitcast <2 x i64> %150 to <16 x i8>
  %152 = shufflevector <16 x i8> %151, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %153 = bitcast <16 x i8> %140 to <4 x i32>
  %154 = bitcast <16 x i8> %144 to <4 x i32>
  %155 = shufflevector <4 x i32> %153, <4 x i32> %154, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %156 = shufflevector <4 x i32> %153, <4 x i32> %154, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %157 = shufflevector <4 x i32> %155, <4 x i32> %156, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %158 = bitcast <16 x i8> %148 to <4 x i32>
  %159 = bitcast <16 x i8> %152 to <4 x i32>
  %160 = shufflevector <4 x i32> %158, <4 x i32> %159, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %161 = shufflevector <4 x i32> %158, <4 x i32> %159, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %162 = shufflevector <4 x i32> %160, <4 x i32> %161, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %163 = add <4 x i32> %162, %88
  %164 = add <4 x i32> %157, %110
  %165 = sub <4 x i32> %110, %157
  %166 = sub <4 x i32> %88, %162
  br label %287

167:                                              ; preds = %46
  %168 = shufflevector <4 x i32> %64, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %169 = bitcast <4 x i32> %168 to <2 x i64>
  %170 = shufflevector <4 x i32> %64, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %171 = bitcast <4 x i32> %170 to <2 x i64>
  %172 = shl <2 x i64> %169, <i64 32, i64 32>
  %173 = ashr exact <2 x i64> %172, <i64 32, i64 32>
  %174 = mul nsw <2 x i64> %173, <i64 21132, i64 21132>
  %175 = shl <2 x i64> %171, <i64 32, i64 32>
  %176 = ashr exact <2 x i64> %175, <i64 32, i64 32>
  %177 = mul nsw <2 x i64> %176, <i64 21132, i64 21132>
  %178 = mul nsw <2 x i64> %173, <i64 39716, i64 39716>
  %179 = mul nsw <2 x i64> %176, <i64 39716, i64 39716>
  %180 = bitcast <2 x i64> %61 to <4 x i32>
  %181 = shufflevector <4 x i32> %180, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %182 = bitcast <4 x i32> %181 to <2 x i64>
  %183 = shufflevector <4 x i32> %180, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %184 = bitcast <4 x i32> %183 to <2 x i64>
  %185 = shl <2 x i64> %182, <i64 32, i64 32>
  %186 = ashr exact <2 x i64> %185, <i64 32, i64 32>
  %187 = mul nsw <2 x i64> %186, <i64 53508, i64 53508>
  %188 = shl <2 x i64> %184, <i64 32, i64 32>
  %189 = ashr exact <2 x i64> %188, <i64 32, i64 32>
  %190 = mul nsw <2 x i64> %189, <i64 53508, i64 53508>
  %191 = bitcast <2 x i64> %62 to <4 x i32>
  %192 = shufflevector <4 x i32> %191, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %193 = bitcast <4 x i32> %192 to <2 x i64>
  %194 = shufflevector <4 x i32> %191, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %195 = bitcast <4 x i32> %194 to <2 x i64>
  %196 = shl <2 x i64> %193, <i64 32, i64 32>
  %197 = ashr exact <2 x i64> %196, <i64 32, i64 32>
  %198 = mul nsw <2 x i64> %197, <i64 60848, i64 60848>
  %199 = shl <2 x i64> %195, <i64 32, i64 32>
  %200 = ashr exact <2 x i64> %199, <i64 32, i64 32>
  %201 = mul nsw <2 x i64> %200, <i64 60848, i64 60848>
  %202 = bitcast <2 x i64> %63 to <4 x i32>
  %203 = shufflevector <4 x i32> %202, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %204 = bitcast <4 x i32> %203 to <2 x i64>
  %205 = shufflevector <4 x i32> %202, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %206 = bitcast <4 x i32> %205 to <2 x i64>
  %207 = shl <2 x i64> %204, <i64 32, i64 32>
  %208 = ashr exact <2 x i64> %207, <i64 32, i64 32>
  %209 = mul nsw <2 x i64> %208, <i64 39716, i64 39716>
  %210 = shl <2 x i64> %206, <i64 32, i64 32>
  %211 = ashr exact <2 x i64> %210, <i64 32, i64 32>
  %212 = mul nsw <2 x i64> %211, <i64 39716, i64 39716>
  %213 = add nsw <2 x i64> %198, %174
  %214 = add nsw <2 x i64> %201, %177
  %215 = add nsw <2 x i64> %213, %209
  %216 = add nsw <2 x i64> %214, %212
  %217 = mul nsw <2 x i64> %197, <i64 -21132, i64 -21132>
  %218 = add nsw <2 x i64> %178, %217
  %219 = mul nsw <2 x i64> %200, <i64 -21132, i64 -21132>
  %220 = add nsw <2 x i64> %179, %219
  %221 = mul nsw <2 x i64> %208, <i64 -60848, i64 -60848>
  %222 = add nsw <2 x i64> %218, %221
  %223 = mul nsw <2 x i64> %211, <i64 -60848, i64 -60848>
  %224 = add nsw <2 x i64> %220, %223
  %225 = sub <4 x i32> %64, %191
  %226 = add <4 x i32> %225, %202
  %227 = shufflevector <4 x i32> %226, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %228 = bitcast <4 x i32> %227 to <2 x i64>
  %229 = shufflevector <4 x i32> %226, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %230 = bitcast <4 x i32> %229 to <2 x i64>
  %231 = shl <2 x i64> %228, <i64 32, i64 32>
  %232 = ashr exact <2 x i64> %231, <i64 32, i64 32>
  %233 = mul nsw <2 x i64> %232, <i64 53508, i64 53508>
  %234 = shl <2 x i64> %230, <i64 32, i64 32>
  %235 = ashr exact <2 x i64> %234, <i64 32, i64 32>
  %236 = mul nsw <2 x i64> %235, <i64 53508, i64 53508>
  %237 = add nsw <2 x i64> %187, <i64 32768, i64 32768>
  %238 = add nsw <2 x i64> %215, %237
  %239 = bitcast <2 x i64> %238 to <16 x i8>
  %240 = shufflevector <16 x i8> %239, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %241 = add nsw <2 x i64> %190, <i64 32768, i64 32768>
  %242 = add nsw <2 x i64> %216, %241
  %243 = bitcast <2 x i64> %242 to <16 x i8>
  %244 = shufflevector <16 x i8> %243, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %245 = add nsw <2 x i64> %222, %237
  %246 = bitcast <2 x i64> %245 to <16 x i8>
  %247 = shufflevector <16 x i8> %246, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %248 = add nsw <2 x i64> %224, %241
  %249 = bitcast <2 x i64> %248 to <16 x i8>
  %250 = shufflevector <16 x i8> %249, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %251 = add nsw <2 x i64> %233, <i64 32768, i64 32768>
  %252 = bitcast <2 x i64> %251 to <16 x i8>
  %253 = shufflevector <16 x i8> %252, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %254 = add nsw <2 x i64> %236, <i64 32768, i64 32768>
  %255 = bitcast <2 x i64> %254 to <16 x i8>
  %256 = shufflevector <16 x i8> %255, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %257 = sub nsw <2 x i64> <i64 32768, i64 32768>, %187
  %258 = add nsw <2 x i64> %257, %215
  %259 = add nsw <2 x i64> %258, %222
  %260 = bitcast <2 x i64> %259 to <16 x i8>
  %261 = shufflevector <16 x i8> %260, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %262 = sub nsw <2 x i64> <i64 32768, i64 32768>, %190
  %263 = add nsw <2 x i64> %262, %216
  %264 = add nsw <2 x i64> %263, %224
  %265 = bitcast <2 x i64> %264 to <16 x i8>
  %266 = shufflevector <16 x i8> %265, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %267 = bitcast <16 x i8> %240 to <4 x i32>
  %268 = bitcast <16 x i8> %244 to <4 x i32>
  %269 = shufflevector <4 x i32> %267, <4 x i32> %268, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %270 = shufflevector <4 x i32> %267, <4 x i32> %268, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %271 = shufflevector <4 x i32> %269, <4 x i32> %270, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %272 = bitcast <16 x i8> %247 to <4 x i32>
  %273 = bitcast <16 x i8> %250 to <4 x i32>
  %274 = shufflevector <4 x i32> %272, <4 x i32> %273, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %275 = shufflevector <4 x i32> %272, <4 x i32> %273, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %276 = shufflevector <4 x i32> %274, <4 x i32> %275, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %277 = bitcast <16 x i8> %253 to <4 x i32>
  %278 = bitcast <16 x i8> %256 to <4 x i32>
  %279 = shufflevector <4 x i32> %277, <4 x i32> %278, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %280 = shufflevector <4 x i32> %277, <4 x i32> %278, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %281 = shufflevector <4 x i32> %279, <4 x i32> %280, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %282 = bitcast <16 x i8> %261 to <4 x i32>
  %283 = bitcast <16 x i8> %266 to <4 x i32>
  %284 = shufflevector <4 x i32> %282, <4 x i32> %283, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %285 = shufflevector <4 x i32> %282, <4 x i32> %283, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %286 = shufflevector <4 x i32> %284, <4 x i32> %285, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  br label %287

287:                                              ; preds = %167, %65
  %288 = phi <4 x i32> [ %166, %65 ], [ %286, %167 ]
  %289 = phi <4 x i32> [ %165, %65 ], [ %281, %167 ]
  %290 = phi <4 x i32> [ %164, %65 ], [ %276, %167 ]
  %291 = phi <4 x i32> [ %163, %65 ], [ %271, %167 ]
  %292 = and i32 %3, -3
  %293 = icmp eq i32 %292, 0
  %294 = shufflevector <4 x i32> %291, <4 x i32> %290, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %295 = bitcast <4 x i32> %294 to <2 x i64>
  %296 = shufflevector <4 x i32> %289, <4 x i32> %288, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %297 = bitcast <4 x i32> %296 to <2 x i64>
  %298 = shufflevector <4 x i32> %291, <4 x i32> %290, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %299 = bitcast <4 x i32> %298 to <2 x i64>
  %300 = shufflevector <4 x i32> %289, <4 x i32> %288, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %301 = bitcast <4 x i32> %300 to <2 x i64>
  %302 = shufflevector <2 x i64> %295, <2 x i64> %297, <2 x i32> <i32 0, i32 2>
  %303 = shufflevector <2 x i64> %295, <2 x i64> %297, <2 x i32> <i32 1, i32 3>
  %304 = shufflevector <2 x i64> %299, <2 x i64> %301, <2 x i32> <i32 0, i32 2>
  %305 = shufflevector <2 x i64> %299, <2 x i64> %301, <2 x i32> <i32 1, i32 3>
  %306 = bitcast <2 x i64> %302 to <4 x i32>
  br i1 %293, label %307, label %409

307:                                              ; preds = %287
  %308 = bitcast <2 x i64> %304 to <4 x i32>
  %309 = add <4 x i32> %308, %306
  %310 = shufflevector <4 x i32> %309, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %311 = bitcast <4 x i32> %310 to <2 x i64>
  %312 = shufflevector <4 x i32> %309, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %313 = bitcast <4 x i32> %312 to <2 x i64>
  %314 = shl <2 x i64> %311, <i64 32, i64 32>
  %315 = ashr exact <2 x i64> %314, <i64 32, i64 32>
  %316 = mul nsw <2 x i64> %315, <i64 46340, i64 46340>
  %317 = shl <2 x i64> %313, <i64 32, i64 32>
  %318 = ashr exact <2 x i64> %317, <i64 32, i64 32>
  %319 = mul nsw <2 x i64> %318, <i64 46340, i64 46340>
  %320 = add nsw <2 x i64> %316, <i64 32768, i64 32768>
  %321 = bitcast <2 x i64> %320 to <16 x i8>
  %322 = shufflevector <16 x i8> %321, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %323 = add nsw <2 x i64> %319, <i64 32768, i64 32768>
  %324 = bitcast <2 x i64> %323 to <16 x i8>
  %325 = shufflevector <16 x i8> %324, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %326 = bitcast <16 x i8> %322 to <4 x i32>
  %327 = bitcast <16 x i8> %325 to <4 x i32>
  %328 = shufflevector <4 x i32> %326, <4 x i32> %327, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %329 = shufflevector <4 x i32> %326, <4 x i32> %327, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %330 = shufflevector <4 x i32> %328, <4 x i32> %329, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %331 = sub <4 x i32> %306, %308
  %332 = shufflevector <4 x i32> %331, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %333 = bitcast <4 x i32> %332 to <2 x i64>
  %334 = shufflevector <4 x i32> %331, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %335 = bitcast <4 x i32> %334 to <2 x i64>
  %336 = shl <2 x i64> %333, <i64 32, i64 32>
  %337 = ashr exact <2 x i64> %336, <i64 32, i64 32>
  %338 = mul nsw <2 x i64> %337, <i64 46340, i64 46340>
  %339 = shl <2 x i64> %335, <i64 32, i64 32>
  %340 = ashr exact <2 x i64> %339, <i64 32, i64 32>
  %341 = mul nsw <2 x i64> %340, <i64 46340, i64 46340>
  %342 = add nsw <2 x i64> %338, <i64 32768, i64 32768>
  %343 = bitcast <2 x i64> %342 to <16 x i8>
  %344 = shufflevector <16 x i8> %343, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %345 = add nsw <2 x i64> %341, <i64 32768, i64 32768>
  %346 = bitcast <2 x i64> %345 to <16 x i8>
  %347 = shufflevector <16 x i8> %346, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %348 = bitcast <16 x i8> %344 to <4 x i32>
  %349 = bitcast <16 x i8> %347 to <4 x i32>
  %350 = shufflevector <4 x i32> %348, <4 x i32> %349, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %351 = shufflevector <4 x i32> %348, <4 x i32> %349, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %352 = shufflevector <4 x i32> %350, <4 x i32> %351, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %353 = bitcast <2 x i64> %303 to <4 x i32>
  %354 = shufflevector <4 x i32> %353, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %355 = bitcast <4 x i32> %354 to <2 x i64>
  %356 = shufflevector <4 x i32> %353, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %357 = bitcast <4 x i32> %356 to <2 x i64>
  %358 = bitcast <2 x i64> %305 to <4 x i32>
  %359 = shufflevector <4 x i32> %358, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %360 = bitcast <4 x i32> %359 to <2 x i64>
  %361 = shufflevector <4 x i32> %358, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %362 = bitcast <4 x i32> %361 to <2 x i64>
  %363 = shl <2 x i64> %355, <i64 32, i64 32>
  %364 = ashr exact <2 x i64> %363, <i64 32, i64 32>
  %365 = mul nsw <2 x i64> %364, <i64 60548, i64 60548>
  %366 = shl <2 x i64> %357, <i64 32, i64 32>
  %367 = ashr exact <2 x i64> %366, <i64 32, i64 32>
  %368 = mul nsw <2 x i64> %367, <i64 60548, i64 60548>
  %369 = mul nsw <2 x i64> %364, <i64 25080, i64 25080>
  %370 = mul nsw <2 x i64> %367, <i64 25080, i64 25080>
  %371 = shl <2 x i64> %360, <i64 32, i64 32>
  %372 = ashr exact <2 x i64> %371, <i64 32, i64 32>
  %373 = mul nsw <2 x i64> %372, <i64 25080, i64 25080>
  %374 = shl <2 x i64> %362, <i64 32, i64 32>
  %375 = ashr exact <2 x i64> %374, <i64 32, i64 32>
  %376 = mul nsw <2 x i64> %375, <i64 25080, i64 25080>
  %377 = mul nsw <2 x i64> %372, <i64 -60548, i64 -60548>
  %378 = mul nsw <2 x i64> %375, <i64 -60548, i64 -60548>
  %379 = add nsw <2 x i64> %369, <i64 32768, i64 32768>
  %380 = add nsw <2 x i64> %379, %377
  %381 = bitcast <2 x i64> %380 to <16 x i8>
  %382 = shufflevector <16 x i8> %381, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %383 = add nsw <2 x i64> %370, <i64 32768, i64 32768>
  %384 = add nsw <2 x i64> %383, %378
  %385 = bitcast <2 x i64> %384 to <16 x i8>
  %386 = shufflevector <16 x i8> %385, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %387 = add nsw <2 x i64> %365, <i64 32768, i64 32768>
  %388 = add nsw <2 x i64> %387, %373
  %389 = bitcast <2 x i64> %388 to <16 x i8>
  %390 = shufflevector <16 x i8> %389, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %391 = add nsw <2 x i64> %368, <i64 32768, i64 32768>
  %392 = add nsw <2 x i64> %391, %376
  %393 = bitcast <2 x i64> %392 to <16 x i8>
  %394 = shufflevector <16 x i8> %393, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %395 = bitcast <16 x i8> %382 to <4 x i32>
  %396 = bitcast <16 x i8> %386 to <4 x i32>
  %397 = shufflevector <4 x i32> %395, <4 x i32> %396, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %398 = shufflevector <4 x i32> %395, <4 x i32> %396, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %399 = shufflevector <4 x i32> %397, <4 x i32> %398, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %400 = bitcast <16 x i8> %390 to <4 x i32>
  %401 = bitcast <16 x i8> %394 to <4 x i32>
  %402 = shufflevector <4 x i32> %400, <4 x i32> %401, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %403 = shufflevector <4 x i32> %400, <4 x i32> %401, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %404 = shufflevector <4 x i32> %402, <4 x i32> %403, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %405 = add <4 x i32> %404, %330
  %406 = add <4 x i32> %399, %352
  %407 = sub <4 x i32> %352, %399
  %408 = sub <4 x i32> %330, %404
  br label %529

409:                                              ; preds = %287
  %410 = shufflevector <4 x i32> %306, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %411 = bitcast <4 x i32> %410 to <2 x i64>
  %412 = shufflevector <4 x i32> %306, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %413 = bitcast <4 x i32> %412 to <2 x i64>
  %414 = shl <2 x i64> %411, <i64 32, i64 32>
  %415 = ashr exact <2 x i64> %414, <i64 32, i64 32>
  %416 = mul nsw <2 x i64> %415, <i64 21132, i64 21132>
  %417 = shl <2 x i64> %413, <i64 32, i64 32>
  %418 = ashr exact <2 x i64> %417, <i64 32, i64 32>
  %419 = mul nsw <2 x i64> %418, <i64 21132, i64 21132>
  %420 = mul nsw <2 x i64> %415, <i64 39716, i64 39716>
  %421 = mul nsw <2 x i64> %418, <i64 39716, i64 39716>
  %422 = bitcast <2 x i64> %303 to <4 x i32>
  %423 = shufflevector <4 x i32> %422, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %424 = bitcast <4 x i32> %423 to <2 x i64>
  %425 = shufflevector <4 x i32> %422, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %426 = bitcast <4 x i32> %425 to <2 x i64>
  %427 = shl <2 x i64> %424, <i64 32, i64 32>
  %428 = ashr exact <2 x i64> %427, <i64 32, i64 32>
  %429 = mul nsw <2 x i64> %428, <i64 53508, i64 53508>
  %430 = shl <2 x i64> %426, <i64 32, i64 32>
  %431 = ashr exact <2 x i64> %430, <i64 32, i64 32>
  %432 = mul nsw <2 x i64> %431, <i64 53508, i64 53508>
  %433 = bitcast <2 x i64> %304 to <4 x i32>
  %434 = shufflevector <4 x i32> %433, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %435 = bitcast <4 x i32> %434 to <2 x i64>
  %436 = shufflevector <4 x i32> %433, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %437 = bitcast <4 x i32> %436 to <2 x i64>
  %438 = shl <2 x i64> %435, <i64 32, i64 32>
  %439 = ashr exact <2 x i64> %438, <i64 32, i64 32>
  %440 = mul nsw <2 x i64> %439, <i64 60848, i64 60848>
  %441 = shl <2 x i64> %437, <i64 32, i64 32>
  %442 = ashr exact <2 x i64> %441, <i64 32, i64 32>
  %443 = mul nsw <2 x i64> %442, <i64 60848, i64 60848>
  %444 = bitcast <2 x i64> %305 to <4 x i32>
  %445 = shufflevector <4 x i32> %444, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %446 = bitcast <4 x i32> %445 to <2 x i64>
  %447 = shufflevector <4 x i32> %444, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %448 = bitcast <4 x i32> %447 to <2 x i64>
  %449 = shl <2 x i64> %446, <i64 32, i64 32>
  %450 = ashr exact <2 x i64> %449, <i64 32, i64 32>
  %451 = mul nsw <2 x i64> %450, <i64 39716, i64 39716>
  %452 = shl <2 x i64> %448, <i64 32, i64 32>
  %453 = ashr exact <2 x i64> %452, <i64 32, i64 32>
  %454 = mul nsw <2 x i64> %453, <i64 39716, i64 39716>
  %455 = add nsw <2 x i64> %440, %416
  %456 = add nsw <2 x i64> %443, %419
  %457 = add nsw <2 x i64> %455, %451
  %458 = add nsw <2 x i64> %456, %454
  %459 = mul nsw <2 x i64> %439, <i64 -21132, i64 -21132>
  %460 = add nsw <2 x i64> %420, %459
  %461 = mul nsw <2 x i64> %442, <i64 -21132, i64 -21132>
  %462 = add nsw <2 x i64> %421, %461
  %463 = mul nsw <2 x i64> %450, <i64 -60848, i64 -60848>
  %464 = add nsw <2 x i64> %460, %463
  %465 = mul nsw <2 x i64> %453, <i64 -60848, i64 -60848>
  %466 = add nsw <2 x i64> %462, %465
  %467 = sub <4 x i32> %306, %433
  %468 = add <4 x i32> %467, %444
  %469 = shufflevector <4 x i32> %468, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %470 = bitcast <4 x i32> %469 to <2 x i64>
  %471 = shufflevector <4 x i32> %468, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %472 = bitcast <4 x i32> %471 to <2 x i64>
  %473 = shl <2 x i64> %470, <i64 32, i64 32>
  %474 = ashr exact <2 x i64> %473, <i64 32, i64 32>
  %475 = mul nsw <2 x i64> %474, <i64 53508, i64 53508>
  %476 = shl <2 x i64> %472, <i64 32, i64 32>
  %477 = ashr exact <2 x i64> %476, <i64 32, i64 32>
  %478 = mul nsw <2 x i64> %477, <i64 53508, i64 53508>
  %479 = add nsw <2 x i64> %429, <i64 32768, i64 32768>
  %480 = add nsw <2 x i64> %457, %479
  %481 = bitcast <2 x i64> %480 to <16 x i8>
  %482 = shufflevector <16 x i8> %481, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %483 = add nsw <2 x i64> %432, <i64 32768, i64 32768>
  %484 = add nsw <2 x i64> %458, %483
  %485 = bitcast <2 x i64> %484 to <16 x i8>
  %486 = shufflevector <16 x i8> %485, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %487 = add nsw <2 x i64> %464, %479
  %488 = bitcast <2 x i64> %487 to <16 x i8>
  %489 = shufflevector <16 x i8> %488, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %490 = add nsw <2 x i64> %466, %483
  %491 = bitcast <2 x i64> %490 to <16 x i8>
  %492 = shufflevector <16 x i8> %491, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %493 = add nsw <2 x i64> %475, <i64 32768, i64 32768>
  %494 = bitcast <2 x i64> %493 to <16 x i8>
  %495 = shufflevector <16 x i8> %494, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %496 = add nsw <2 x i64> %478, <i64 32768, i64 32768>
  %497 = bitcast <2 x i64> %496 to <16 x i8>
  %498 = shufflevector <16 x i8> %497, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %499 = sub nsw <2 x i64> <i64 32768, i64 32768>, %429
  %500 = add nsw <2 x i64> %499, %457
  %501 = add nsw <2 x i64> %500, %464
  %502 = bitcast <2 x i64> %501 to <16 x i8>
  %503 = shufflevector <16 x i8> %502, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %504 = sub nsw <2 x i64> <i64 32768, i64 32768>, %432
  %505 = add nsw <2 x i64> %504, %458
  %506 = add nsw <2 x i64> %505, %466
  %507 = bitcast <2 x i64> %506 to <16 x i8>
  %508 = shufflevector <16 x i8> %507, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %509 = bitcast <16 x i8> %482 to <4 x i32>
  %510 = bitcast <16 x i8> %486 to <4 x i32>
  %511 = shufflevector <4 x i32> %509, <4 x i32> %510, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %512 = shufflevector <4 x i32> %509, <4 x i32> %510, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %513 = shufflevector <4 x i32> %511, <4 x i32> %512, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %514 = bitcast <16 x i8> %489 to <4 x i32>
  %515 = bitcast <16 x i8> %492 to <4 x i32>
  %516 = shufflevector <4 x i32> %514, <4 x i32> %515, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %517 = shufflevector <4 x i32> %514, <4 x i32> %515, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %518 = shufflevector <4 x i32> %516, <4 x i32> %517, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %519 = bitcast <16 x i8> %495 to <4 x i32>
  %520 = bitcast <16 x i8> %498 to <4 x i32>
  %521 = shufflevector <4 x i32> %519, <4 x i32> %520, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %522 = shufflevector <4 x i32> %519, <4 x i32> %520, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %523 = shufflevector <4 x i32> %521, <4 x i32> %522, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %524 = bitcast <16 x i8> %503 to <4 x i32>
  %525 = bitcast <16 x i8> %508 to <4 x i32>
  %526 = shufflevector <4 x i32> %524, <4 x i32> %525, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %527 = shufflevector <4 x i32> %524, <4 x i32> %525, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %528 = shufflevector <4 x i32> %526, <4 x i32> %527, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  br label %529

529:                                              ; preds = %409, %307
  %530 = phi <4 x i32> [ %408, %307 ], [ %528, %409 ]
  %531 = phi <4 x i32> [ %407, %307 ], [ %523, %409 ]
  %532 = phi <4 x i32> [ %406, %307 ], [ %518, %409 ]
  %533 = phi <4 x i32> [ %405, %307 ], [ %513, %409 ]
  %534 = add <4 x i32> %533, <i32 8, i32 8, i32 8, i32 8>
  %535 = add <4 x i32> %532, <i32 8, i32 8, i32 8, i32 8>
  %536 = ashr <4 x i32> %534, <i32 4, i32 4, i32 4, i32 4>
  %537 = ashr <4 x i32> %535, <i32 4, i32 4, i32 4, i32 4>
  %538 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %536, <4 x i32> %537) #5
  %539 = add <4 x i32> %531, <i32 8, i32 8, i32 8, i32 8>
  %540 = add <4 x i32> %530, <i32 8, i32 8, i32 8, i32 8>
  %541 = ashr <4 x i32> %539, <i32 4, i32 4, i32 4, i32 4>
  %542 = ashr <4 x i32> %540, <i32 4, i32 4, i32 4, i32 4>
  %543 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %541, <4 x i32> %542) #5
  br label %544

544:                                              ; preds = %529, %39
  %545 = phi <8 x i16> [ %45, %39 ], [ %543, %529 ]
  %546 = phi <8 x i16> [ %44, %39 ], [ %538, %529 ]
  %547 = bitcast i16* %1 to i64*
  %548 = load i64, i64* %547, align 1
  %549 = insertelement <2 x i64> undef, i64 %548, i32 0
  %550 = bitcast <2 x i64> %549 to <4 x float>
  %551 = sext i32 %2 to i64
  %552 = getelementptr inbounds i16, i16* %1, i64 %551
  %553 = bitcast i16* %552 to <2 x float>*
  %554 = load <2 x float>, <2 x float>* %553, align 1
  %555 = shufflevector <2 x float> %554, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %556 = shufflevector <4 x float> %550, <4 x float> %555, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %557 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, i32 %4) #5
  %558 = add <8 x i16> %557, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %559 = bitcast <4 x float> %556 to <8 x i16>
  %560 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %559, <8 x i16> %546) #5
  %561 = icmp sgt <8 x i16> %560, zeroinitializer
  %562 = select <8 x i1> %561, <8 x i16> %560, <8 x i16> zeroinitializer
  %563 = icmp slt <8 x i16> %562, %558
  %564 = select <8 x i1> %563, <8 x i16> %562, <8 x i16> %558
  %565 = bitcast <8 x i16> %564 to <2 x i64>
  %566 = extractelement <2 x i64> %565, i32 0
  store i64 %566, i64* %547, align 1
  %567 = bitcast <8 x i16> %564 to <4 x float>
  %568 = shufflevector <4 x float> %567, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %568, <2 x float>* %553, align 1
  %569 = shl nsw i32 %2, 1
  %570 = sext i32 %569 to i64
  %571 = getelementptr inbounds i16, i16* %1, i64 %570
  %572 = bitcast i16* %571 to i64*
  %573 = load i64, i64* %572, align 1
  %574 = insertelement <2 x i64> undef, i64 %573, i32 0
  %575 = bitcast <2 x i64> %574 to <4 x float>
  %576 = getelementptr inbounds i16, i16* %571, i64 %551
  %577 = bitcast i16* %576 to <2 x float>*
  %578 = load <2 x float>, <2 x float>* %577, align 1
  %579 = shufflevector <2 x float> %578, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %580 = shufflevector <4 x float> %575, <4 x float> %579, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %581 = bitcast <4 x float> %580 to <8 x i16>
  %582 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %581, <8 x i16> %545) #5
  %583 = icmp sgt <8 x i16> %582, zeroinitializer
  %584 = select <8 x i1> %583, <8 x i16> %582, <8 x i16> zeroinitializer
  %585 = icmp slt <8 x i16> %584, %558
  %586 = select <8 x i1> %585, <8 x i16> %584, <8 x i16> %558
  %587 = bitcast <8 x i16> %586 to <2 x i64>
  %588 = extractelement <2 x i64> %587, i32 0
  store i64 %588, i64* %572, align 1
  %589 = bitcast <8 x i16> %586 to <4 x float>
  %590 = shufflevector <4 x float> %589, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %590, <2 x float>* %577, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @idct4_sse2(<2 x i64>*) local_unnamed_addr #2

declare void @iadst4_sse2(<2 x i64>*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16>, i32) #3

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
