; ModuleID = '../../net/base/backoff_entry.cc'
source_filename = "../../net/base/backoff_entry.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::BackoffEntry" = type { i32 (...)**, %"class.base::TimeTicks", i32, %"struct.net::BackoffEntry::Policy"*, %"class.base::TickClock"* }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::TickClock" = type { i32 (...)** }
%"struct.net::BackoffEntry::Policy" = type { i32, i32, double, double, i64, i64, i8 }
%"class.base::TimeDelta" = type { i64 }

@_ZTVN3net12BackoffEntryE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::BackoffEntry"*)* @_ZN3net12BackoffEntryD2Ev to i8*), i8* bitcast (void (%"class.net::BackoffEntry"*)* @_ZN3net12BackoffEntryD0Ev to i8*)] }, align 8

@_ZN3net12BackoffEntryC1EPKNS0_6PolicyE = hidden unnamed_addr alias void (%"class.net::BackoffEntry"*, %"struct.net::BackoffEntry::Policy"*), void (%"class.net::BackoffEntry"*, %"struct.net::BackoffEntry::Policy"*)* @_ZN3net12BackoffEntryC2EPKNS0_6PolicyE
@_ZN3net12BackoffEntryC1EPKNS0_6PolicyEPKN4base9TickClockE = hidden unnamed_addr alias void (%"class.net::BackoffEntry"*, %"struct.net::BackoffEntry::Policy"*, %"class.base::TickClock"*), void (%"class.net::BackoffEntry"*, %"struct.net::BackoffEntry::Policy"*, %"class.base::TickClock"*)* @_ZN3net12BackoffEntryC2EPKNS0_6PolicyEPKN4base9TickClockE
@_ZN3net12BackoffEntryD1Ev = hidden unnamed_addr alias void (%"class.net::BackoffEntry"*), void (%"class.net::BackoffEntry"*)* @_ZN3net12BackoffEntryD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net12BackoffEntryC2EPKNS0_6PolicyE(%"class.net::BackoffEntry"* nocapture, %"struct.net::BackoffEntry::Policy"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3net12BackoffEntryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 3
  store %"struct.net::BackoffEntry::Policy"* %1, %"struct.net::BackoffEntry::Policy"** %5, align 8
  %6 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 4
  store %"class.base::TickClock"* null, %"class.base::TickClock"** %6, align 8
  %7 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 2
  store i32 0, i32* %7, align 8
  store i64 0, i64* %4, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net12BackoffEntryC2EPKNS0_6PolicyEPKN4base9TickClockE(%"class.net::BackoffEntry"* nocapture, %"struct.net::BackoffEntry::Policy"*, %"class.base::TickClock"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3net12BackoffEntryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 3
  store %"struct.net::BackoffEntry::Policy"* %1, %"struct.net::BackoffEntry::Policy"** %6, align 8
  %7 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 4
  store %"class.base::TickClock"* %2, %"class.base::TickClock"** %7, align 8
  %8 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 2
  store i32 0, i32* %8, align 8
  store i64 0, i64* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN3net12BackoffEntry5ResetEv(%"class.net::BackoffEntry"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 2
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 0, i64* %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3net12BackoffEntryD2Ev(%"class.net::BackoffEntry"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net12BackoffEntryD0Ev(%"class.net::BackoffEntry"*) unnamed_addr #3 align 2 {
  %2 = bitcast %"class.net::BackoffEntry"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net12BackoffEntry15InformOfRequestEb(%"class.net::BackoffEntry"* nocapture, i1 zeroext) local_unnamed_addr #3 align 2 {
  %3 = alloca i64, align 8
  %4 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  br i1 %1, label %10, label %6

6:                                                ; preds = %2
  %7 = add nsw i32 %5, 1
  store i32 %7, i32* %4, align 8
  %8 = tail call i64 @_ZNK3net12BackoffEntry20CalculateReleaseTimeEv(%"class.net::BackoffEntry"* %0)
  %9 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 %8, i64* %9, align 8
  br label %55

10:                                               ; preds = %2
  %11 = icmp sgt i32 %5, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %10
  %13 = add nsw i32 %5, -1
  store i32 %13, i32* %4, align 8
  br label %14

14:                                               ; preds = %12, %10
  %15 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 3
  %16 = load %"struct.net::BackoffEntry::Policy"*, %"struct.net::BackoffEntry::Policy"** %15, align 8
  %17 = getelementptr inbounds %"struct.net::BackoffEntry::Policy", %"struct.net::BackoffEntry::Policy"* %16, i64 0, i32 6
  %18 = load i8, i8* %17, align 8, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"struct.net::BackoffEntry::Policy", %"struct.net::BackoffEntry::Policy"* %16, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = sext i32 %22 to i64
  %24 = mul nsw i64 %23, 1000
  br label %25

25:                                               ; preds = %14, %20
  %26 = phi i64 [ 0, %14 ], [ %24, %20 ]
  %27 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27)
  %28 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 4
  %29 = load %"class.base::TickClock"*, %"class.base::TickClock"** %28, align 8
  %30 = icmp eq %"class.base::TickClock"* %29, null
  br i1 %30, label %37, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.base::TickClock"* %29 to i64 (%"class.base::TickClock"*)***
  %33 = load i64 (%"class.base::TickClock"*)**, i64 (%"class.base::TickClock"*)*** %32, align 8
  %34 = getelementptr inbounds i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %33, i64 2
  %35 = load i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %34, align 8
  %36 = tail call i64 %35(%"class.base::TickClock"* nonnull %29) #12
  br label %39

37:                                               ; preds = %25
  %38 = tail call i64 @_ZN4base9TimeTicks3NowEv() #12
  br label %39

39:                                               ; preds = %31, %37
  %40 = phi i64 [ %36, %31 ], [ %38, %37 ]
  %41 = icmp slt i64 %26, 0
  %42 = select i1 %41, i64 -9223372036854775808, i64 9223372036854775807
  %43 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %40, i64 %26) #12
  %44 = extractvalue { i64, i1 } %43, 1
  %45 = extractvalue { i64, i1 } %43, 0
  %46 = select i1 %44, i64 %42, i64 %45, !prof !3
  store i64 %46, i64* %3, align 8
  %47 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 1
  %48 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %47, i64 0, i32 0, i32 0
  %49 = load i64, i64* %48, align 8
  %50 = icmp slt i64 %46, %49
  %51 = bitcast i64* %3 to %"class.base::TimeTicks"*
  %52 = select i1 %50, %"class.base::TimeTicks"* %47, %"class.base::TimeTicks"* %51
  %53 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %52, i64 0, i32 0, i32 0
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %48, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  br label %55

55:                                               ; preds = %39, %6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK3net12BackoffEntry20CalculateReleaseTimeEv(%"class.net::BackoffEntry"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 3
  %7 = load %"struct.net::BackoffEntry::Policy"*, %"struct.net::BackoffEntry::Policy"** %6, align 8
  %8 = getelementptr inbounds %"struct.net::BackoffEntry::Policy", %"struct.net::BackoffEntry::Policy"* %7, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp sgt i32 %9, -1
  %11 = select i1 %10, i32 -2147483648, i32 2147483647
  %12 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %5, i32 %9) #12
  %13 = extractvalue { i32, i1 } %12, 1
  %14 = extractvalue { i32, i1 } %12, 0
  %15 = select i1 %13, i32 %11, i32 %14, !prof !3
  %16 = icmp sgt i32 %15, 0
  %17 = select i1 %16, i32 %15, i32 0
  %18 = getelementptr inbounds %"struct.net::BackoffEntry::Policy", %"struct.net::BackoffEntry::Policy"* %7, i64 0, i32 6
  %19 = load i8, i8* %18, align 8, !range !2
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %1
  %22 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %17, i32 1) #12
  %23 = extractvalue { i32, i1 } %22, 1
  %24 = extractvalue { i32, i1 } %22, 0
  br i1 %23, label %43, label %25

25:                                               ; preds = %21, %1
  %26 = phi i32 [ %17, %1 ], [ %24, %21 ]
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %43

28:                                               ; preds = %25
  %29 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29)
  %30 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 4
  %31 = load %"class.base::TickClock"*, %"class.base::TickClock"** %30, align 8
  %32 = icmp eq %"class.base::TickClock"* %31, null
  br i1 %32, label %39, label %33

33:                                               ; preds = %28
  %34 = bitcast %"class.base::TickClock"* %31 to i64 (%"class.base::TickClock"*)***
  %35 = load i64 (%"class.base::TickClock"*)**, i64 (%"class.base::TickClock"*)*** %34, align 8
  %36 = getelementptr inbounds i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %35, i64 2
  %37 = load i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %36, align 8
  %38 = tail call i64 %37(%"class.base::TickClock"* nonnull %31) #12
  br label %41

39:                                               ; preds = %28
  %40 = tail call i64 @_ZN4base9TimeTicks3NowEv() #12
  br label %41

41:                                               ; preds = %33, %39
  %42 = phi i64 [ %38, %33 ], [ %40, %39 ]
  store i64 %42, i64* %2, align 8
  br label %111

43:                                               ; preds = %21, %25
  %44 = phi i32 [ %26, %25 ], [ 2147483647, %21 ]
  %45 = getelementptr inbounds %"struct.net::BackoffEntry::Policy", %"struct.net::BackoffEntry::Policy"* %7, i64 0, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = sitofp i32 %46 to double
  %48 = getelementptr inbounds %"struct.net::BackoffEntry::Policy", %"struct.net::BackoffEntry::Policy"* %7, i64 0, i32 2
  %49 = load double, double* %48, align 8
  %50 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %44, i32 -1)
  %51 = extractvalue { i32, i1 } %50, 1
  %52 = extractvalue { i32, i1 } %50, 0
  %53 = sitofp i32 %52 to double
  %54 = select i1 %51, double 0xC1E0000000000000, double %53, !prof !3
  %55 = tail call double @pow(double %49, double %54) #12
  %56 = fmul double %55, %47
  %57 = tail call double @_ZN4base10RandDoubleEv() #12
  %58 = load %"struct.net::BackoffEntry::Policy"*, %"struct.net::BackoffEntry::Policy"** %6, align 8
  %59 = getelementptr inbounds %"struct.net::BackoffEntry::Policy", %"struct.net::BackoffEntry::Policy"* %58, i64 0, i32 3
  %60 = load double, double* %59, align 8
  %61 = fmul double %57, %60
  %62 = fmul double %56, %61
  %63 = fsub double %56, %62
  %64 = fadd double %63, 5.000000e-01
  %65 = fcmp oge double %64, 0xC3E0000000000000
  %66 = fcmp ole double %64, 0x43DFFFFFFFFFFFFF
  %67 = and i1 %66, %65
  br i1 %67, label %68, label %74

68:                                               ; preds = %43
  %69 = fptosi double %64 to i64
  %70 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %69, i64 1000) #12
  %71 = extractvalue { i64, i1 } %70, 1
  %72 = extractvalue { i64, i1 } %70, 0
  %73 = select i1 %71, i64 9223372036854775807, i64 %72, !prof !3
  br label %74

74:                                               ; preds = %43, %68
  %75 = phi i64 [ 9223372036854775807, %43 ], [ %73, %68 ]
  %76 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %76)
  store i64 -6148914691236517206, i64* %3, align 8
  %77 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 4
  %78 = load %"class.base::TickClock"*, %"class.base::TickClock"** %77, align 8
  %79 = icmp eq %"class.base::TickClock"* %78, null
  br i1 %79, label %86, label %80

80:                                               ; preds = %74
  %81 = bitcast %"class.base::TickClock"* %78 to i64 (%"class.base::TickClock"*)***
  %82 = load i64 (%"class.base::TickClock"*)**, i64 (%"class.base::TickClock"*)*** %81, align 8
  %83 = getelementptr inbounds i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %82, i64 2
  %84 = load i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %83, align 8
  %85 = tail call i64 %84(%"class.base::TickClock"* nonnull %78) #12
  br label %88

86:                                               ; preds = %74
  %87 = tail call i64 @_ZN4base9TimeTicks3NowEv() #12
  br label %88

88:                                               ; preds = %86, %80
  %89 = phi i64 [ %85, %80 ], [ %87, %86 ]
  %90 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %75, i64 %89) #12
  %91 = extractvalue { i64, i1 } %90, 1
  %92 = extractvalue { i64, i1 } %90, 0
  %93 = load %"struct.net::BackoffEntry::Policy"*, %"struct.net::BackoffEntry::Policy"** %6, align 8
  %94 = getelementptr inbounds %"struct.net::BackoffEntry::Policy", %"struct.net::BackoffEntry::Policy"* %93, i64 0, i32 4
  %95 = load i64, i64* %94, align 8
  %96 = icmp sgt i64 %95, -1
  br i1 %96, label %97, label %106

97:                                               ; preds = %88
  %98 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %95, i64 1000) #12
  %99 = extractvalue { i64, i1 } %98, 1
  br i1 %99, label %106, label %100

100:                                              ; preds = %97
  %101 = extractvalue { i64, i1 } %98, 0
  %102 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %101, i64 %89) #12
  %103 = extractvalue { i64, i1 } %102, 1
  %104 = extractvalue { i64, i1 } %102, 0
  %105 = select i1 %103, i64 9223372036854775807, i64 %104
  br label %106

106:                                              ; preds = %88, %97, %100
  %107 = phi i64 [ 9223372036854775807, %88 ], [ %105, %100 ], [ 9223372036854775807, %97 ]
  %108 = select i1 %91, i64 9223372036854775807, i64 %92, !prof !3
  %109 = icmp slt i64 %107, %108
  %110 = select i1 %109, i64 %107, i64 %108
  store i64 %110, i64* %3, align 8
  br label %111

111:                                              ; preds = %106, %41
  %112 = phi i64 [ %110, %106 ], [ %42, %41 ]
  %113 = phi i64* [ %3, %106 ], [ %2, %41 ]
  %114 = phi i8* [ %76, %106 ], [ %29, %41 ]
  %115 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 1
  %116 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %115, i64 0, i32 0, i32 0
  %117 = load i64, i64* %116, align 8
  %118 = icmp slt i64 %112, %117
  %119 = bitcast i64* %113 to %"class.base::TimeTicks"*
  %120 = select i1 %118, %"class.base::TimeTicks"* %115, %"class.base::TimeTicks"* %119
  %121 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %120, i64 0, i32 0, i32 0
  %122 = load i64, i64* %121, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %114)
  ret i64 %122
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK3net12BackoffEntry15GetTimeTicksNowEv(%"class.net::BackoffEntry"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 4
  %3 = load %"class.base::TickClock"*, %"class.base::TickClock"** %2, align 8
  %4 = icmp eq %"class.base::TickClock"* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.base::TickClock"* %3 to i64 (%"class.base::TickClock"*)***
  %7 = load i64 (%"class.base::TickClock"*)**, i64 (%"class.base::TickClock"*)*** %6, align 8
  %8 = getelementptr inbounds i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %7, i64 2
  %9 = load i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %8, align 8
  %10 = tail call i64 %9(%"class.base::TickClock"* nonnull %3) #12
  br label %13

11:                                               ; preds = %1
  %12 = tail call i64 @_ZN4base9TimeTicks3NowEv() #12
  br label %13

13:                                               ; preds = %11, %5
  %14 = phi i64 [ %10, %5 ], [ %12, %11 ]
  ret i64 %14
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3net12BackoffEntry19ShouldRejectRequestEv(%"class.net::BackoffEntry"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 4
  %3 = load %"class.base::TickClock"*, %"class.base::TickClock"** %2, align 8
  %4 = icmp eq %"class.base::TickClock"* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.base::TickClock"* %3 to i64 (%"class.base::TickClock"*)***
  %7 = load i64 (%"class.base::TickClock"*)**, i64 (%"class.base::TickClock"*)*** %6, align 8
  %8 = getelementptr inbounds i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %7, i64 2
  %9 = load i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %8, align 8
  %10 = tail call i64 %9(%"class.base::TickClock"* nonnull %3) #12
  br label %13

11:                                               ; preds = %1
  %12 = tail call i64 @_ZN4base9TimeTicks3NowEv() #12
  br label %13

13:                                               ; preds = %5, %11
  %14 = phi i64 [ %10, %5 ], [ %12, %11 ]
  %15 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 1, i32 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = icmp sgt i64 %16, %14
  ret i1 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK3net12BackoffEntry19GetTimeUntilReleaseEv(%"class.net::BackoffEntry"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 4
  %3 = load %"class.base::TickClock"*, %"class.base::TickClock"** %2, align 8
  %4 = icmp eq %"class.base::TickClock"* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.base::TickClock"* %3 to i64 (%"class.base::TickClock"*)***
  %7 = load i64 (%"class.base::TickClock"*)**, i64 (%"class.base::TickClock"*)*** %6, align 8
  %8 = getelementptr inbounds i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %7, i64 2
  %9 = load i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %8, align 8
  %10 = tail call i64 %9(%"class.base::TickClock"* nonnull %3) #12
  br label %13

11:                                               ; preds = %1
  %12 = tail call i64 @_ZN4base9TimeTicks3NowEv() #12
  br label %13

13:                                               ; preds = %5, %11
  %14 = phi i64 [ %10, %5 ], [ %12, %11 ]
  %15 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 1, i32 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = icmp sgt i64 %16, %14
  %18 = sub nsw i64 %16, %14
  %19 = select i1 %17, i64 %18, i64 0
  ret i64 %19
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK3net12BackoffEntry14GetReleaseTimeEv(%"class.net::BackoffEntry"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3net12BackoffEntry20SetCustomReleaseTimeERKN4base9TimeTicksE(%"class.net::BackoffEntry"* nocapture, %"class.base::TimeTicks"* nocapture readonly dereferenceable(8)) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %1, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = load i64, i64* %3, align 8
  store i64 %5, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3net12BackoffEntry10CanDiscardEv(%"class.net::BackoffEntry"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = alloca %"class.base::TimeDelta", align 8
  %3 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 3
  %4 = load %"struct.net::BackoffEntry::Policy"*, %"struct.net::BackoffEntry::Policy"** %3, align 8
  %5 = getelementptr inbounds %"struct.net::BackoffEntry::Policy", %"struct.net::BackoffEntry::Policy"* %4, i64 0, i32 5
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, -1
  br i1 %7, label %46, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 4
  %10 = load %"class.base::TickClock"*, %"class.base::TickClock"** %9, align 8
  %11 = icmp eq %"class.base::TickClock"* %10, null
  br i1 %11, label %18, label %12

12:                                               ; preds = %8
  %13 = bitcast %"class.base::TickClock"* %10 to i64 (%"class.base::TickClock"*)***
  %14 = load i64 (%"class.base::TickClock"*)**, i64 (%"class.base::TickClock"*)*** %13, align 8
  %15 = getelementptr inbounds i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %14, i64 2
  %16 = load i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %15, align 8
  %17 = tail call i64 %16(%"class.base::TickClock"* nonnull %10) #12
  br label %20

18:                                               ; preds = %8
  %19 = tail call i64 @_ZN4base9TimeTicks3NowEv() #12
  br label %20

20:                                               ; preds = %12, %18
  %21 = phi i64 [ %17, %12 ], [ %19, %18 ]
  %22 = bitcast %"class.base::TimeDelta"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #12
  %23 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 1, i32 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = sub nsw i64 %21, %24
  %26 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %2, i64 0, i32 0
  store i64 %25, i64* %26, align 8
  %27 = call i64 @_ZNK4base9TimeDelta14InMillisecondsEv(%"class.base::TimeDelta"* nonnull %2) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #12
  %28 = icmp slt i64 %27, 0
  br i1 %28, label %46, label %29

29:                                               ; preds = %20
  %30 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 2
  %31 = load i32, i32* %30, align 8
  %32 = icmp sgt i32 %31, 0
  %33 = load %"struct.net::BackoffEntry::Policy"*, %"struct.net::BackoffEntry::Policy"** %3, align 8
  br i1 %32, label %34, label %42

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"struct.net::BackoffEntry::Policy", %"struct.net::BackoffEntry::Policy"* %33, i64 0, i32 4
  %36 = getelementptr inbounds %"struct.net::BackoffEntry::Policy", %"struct.net::BackoffEntry::Policy"* %33, i64 0, i32 5
  %37 = load i64, i64* %35, align 8
  %38 = load i64, i64* %36, align 8
  %39 = icmp slt i64 %37, %38
  %40 = select i1 %39, i64 %38, i64 %37
  %41 = icmp sge i64 %27, %40
  br label %46

42:                                               ; preds = %29
  %43 = getelementptr inbounds %"struct.net::BackoffEntry::Policy", %"struct.net::BackoffEntry::Policy"* %33, i64 0, i32 5
  %44 = load i64, i64* %43, align 8
  %45 = icmp sge i64 %27, %44
  br label %46

46:                                               ; preds = %34, %42, %20, %1
  %47 = phi i1 [ false, %1 ], [ %41, %34 ], [ %45, %42 ], [ false, %20 ]
  ret i1 %47
}

declare i64 @_ZNK4base9TimeDelta14InMillisecondsEv(%"class.base::TimeDelta"*) local_unnamed_addr #8

declare i64 @_ZN4base9TimeTicks3NowEv() local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #9

declare double @_ZN4base10RandDoubleEv() local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK3net12BackoffEntry28BackoffDurationToReleaseTimeEN4base9TimeDeltaE(%"class.net::BackoffEntry"* nocapture readonly, i64) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 4
  %4 = load %"class.base::TickClock"*, %"class.base::TickClock"** %3, align 8
  %5 = icmp eq %"class.base::TickClock"* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = bitcast %"class.base::TickClock"* %4 to i64 (%"class.base::TickClock"*)***
  %8 = load i64 (%"class.base::TickClock"*)**, i64 (%"class.base::TickClock"*)*** %7, align 8
  %9 = getelementptr inbounds i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %8, i64 2
  %10 = load i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %9, align 8
  %11 = tail call i64 %10(%"class.base::TickClock"* nonnull %4) #12
  br label %14

12:                                               ; preds = %2
  %13 = tail call i64 @_ZN4base9TimeTicks3NowEv() #12
  br label %14

14:                                               ; preds = %6, %12
  %15 = phi i64 [ %11, %6 ], [ %13, %12 ]
  %16 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %1, i64 %15) #12
  %17 = extractvalue { i64, i1 } %16, 1
  %18 = extractvalue { i64, i1 } %16, 0
  %19 = getelementptr inbounds %"class.net::BackoffEntry", %"class.net::BackoffEntry"* %0, i64 0, i32 3
  %20 = load %"struct.net::BackoffEntry::Policy"*, %"struct.net::BackoffEntry::Policy"** %19, align 8
  %21 = getelementptr inbounds %"struct.net::BackoffEntry::Policy", %"struct.net::BackoffEntry::Policy"* %20, i64 0, i32 4
  %22 = load i64, i64* %21, align 8
  %23 = icmp sgt i64 %22, -1
  br i1 %23, label %24, label %33

24:                                               ; preds = %14
  %25 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %22, i64 1000) #12
  %26 = extractvalue { i64, i1 } %25, 1
  br i1 %26, label %33, label %27

27:                                               ; preds = %24
  %28 = extractvalue { i64, i1 } %25, 0
  %29 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %28, i64 %15) #12
  %30 = extractvalue { i64, i1 } %29, 1
  %31 = extractvalue { i64, i1 } %29, 0
  %32 = select i1 %30, i64 9223372036854775807, i64 %31
  br label %33

33:                                               ; preds = %27, %24, %14
  %34 = phi i64 [ 9223372036854775807, %14 ], [ %32, %27 ], [ 9223372036854775807, %24 ]
  %35 = select i1 %17, i64 9223372036854775807, i64 %18, !prof !3
  %36 = icmp slt i64 %34, %35
  %37 = select i1 %36, i64 %34, i64 %35
  ret i64 %37
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #10

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #10

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #10

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #10

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { builtin nounwind }
attributes #12 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
