; ModuleID = '../../third_party/libaom/source/libaom/av1/common/x86/jnt_convolve_ssse3.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/x86/jnt_convolve_ssse3.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.InterpFilterParams = type { i16*, i16, i8 }
%struct.ConvolveParams = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_dist_wtd_convolve_2d_ssse3(i8* nocapture readonly, i32, i8* nocapture, i32, i32, i32, %struct.InterpFilterParams* nocapture readonly, %struct.InterpFilterParams* nocapture readonly, i32, i32, %struct.ConvolveParams* nocapture readonly) local_unnamed_addr #0 {
  %12 = alloca [17792 x i16], align 16
  %13 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 1
  %14 = load i16*, i16** %13, align 8
  %15 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = bitcast [17792 x i16]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 35584, i8* nonnull %17) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 35584, i1 false)
  %18 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %7, i64 0, i32 1
  %19 = load i16, i16* %18, align 8
  %20 = zext i16 %19 to i32
  %21 = add i32 %5, -1
  %22 = add i32 %21, %20
  %23 = lshr i32 %20, 1
  %24 = add nsw i32 %23, -1
  %25 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %26 = load i16, i16* %25, align 8
  %27 = lshr i16 %26, 1
  %28 = zext i16 %27 to i64
  %29 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 7
  %32 = load i32, i32* %31, align 4
  %33 = mul nsw i32 %24, %1
  %34 = sext i32 %33 to i64
  %35 = sub nsw i64 0, %34
  %36 = getelementptr inbounds i8, i8* %0, i64 %35
  %37 = sub nsw i64 1, %28
  %38 = getelementptr inbounds i8, i8* %36, i64 %37
  %39 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 8
  %40 = load i32, i32* %39, align 8
  %41 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 9
  %42 = load i32, i32* %41, align 4
  %43 = trunc i32 %40 to i16
  %44 = insertelement <8 x i16> undef, i16 %43, i32 0
  %45 = shufflevector <8 x i16> %44, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = trunc i32 %42 to i16
  %47 = insertelement <8 x i16> undef, i16 %46, i32 0
  %48 = shufflevector <8 x i16> %47, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = shufflevector <8 x i16> %45, <8 x i16> %48, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %50 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 3
  %51 = load i32, i32* %50, align 4
  %52 = sub nsw i32 22, %51
  %53 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 4
  %54 = load i32, i32* %53, align 8
  %55 = sub i32 %52, %54
  %56 = shl i32 1, %55
  %57 = add nsw i32 %55, -1
  %58 = shl i32 1, %57
  %59 = add nsw i32 %58, %56
  %60 = trunc i32 %59 to i16
  %61 = insertelement <8 x i16> undef, i16 %60, i32 0
  %62 = shufflevector <8 x i16> %61, <8 x i16> undef, <8 x i32> zeroinitializer
  %63 = sub nsw i32 14, %51
  %64 = sub i32 %63, %54
  %65 = shl i32 1, %64
  %66 = lshr i32 %65, 1
  %67 = trunc i32 %66 to i16
  %68 = insertelement <8 x i16> undef, i16 %67, i32 0
  %69 = and i32 %8, 15
  %70 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %71 = load i16*, i16** %70, align 8
  %72 = zext i16 %26 to i32
  %73 = mul nuw nsw i32 %69, %72
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds i16, i16* %71, i64 %74
  %76 = bitcast i16* %75 to <4 x i32>*
  %77 = load <4 x i32>, <4 x i32>* %76, align 1
  %78 = shufflevector <4 x i32> %77, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %79 = bitcast <4 x i32> %78 to <2 x i64>
  %80 = shufflevector <4 x i32> %77, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %81 = bitcast <4 x i32> %80 to <2 x i64>
  %82 = shl i32 1, %51
  %83 = ashr i32 %82, 1
  %84 = add nsw i32 %83, 16384
  %85 = insertelement <4 x i32> undef, i32 %84, i32 0
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> zeroinitializer
  %87 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %51, i32 0
  %88 = icmp sgt i32 %22, 0
  br i1 %88, label %89, label %158

89:                                               ; preds = %11
  %90 = shufflevector <2 x i64> %81, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %91 = shufflevector <2 x i64> %81, <2 x i64> undef, <2 x i32> zeroinitializer
  %92 = shufflevector <2 x i64> %79, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %93 = shufflevector <2 x i64> %79, <2 x i64> undef, <2 x i32> zeroinitializer
  %94 = icmp sgt i32 %4, 0
  %95 = bitcast <2 x i64> %93 to <8 x i16>
  %96 = bitcast <2 x i64> %92 to <8 x i16>
  %97 = bitcast <2 x i64> %91 to <8 x i16>
  %98 = bitcast <2 x i64> %90 to <8 x i16>
  %99 = sext i32 %4 to i64
  %100 = sext i32 %1 to i64
  %101 = zext i32 %22 to i64
  br label %102

102:                                              ; preds = %155, %89
  %103 = phi i64 [ 0, %89 ], [ %156, %155 ]
  br i1 %94, label %104, label %155

104:                                              ; preds = %102
  %105 = mul nsw i64 %103, %100
  %106 = shl i64 %103, 7
  %107 = and i64 %106, 4294967168
  br label %108

108:                                              ; preds = %104, %108
  %109 = phi i64 [ 0, %104 ], [ %153, %108 ]
  %110 = add nsw i64 %109, %105
  %111 = getelementptr inbounds i8, i8* %38, i64 %110
  %112 = bitcast i8* %111 to <16 x i8>*
  %113 = load <16 x i8>, <16 x i8>* %112, align 1
  %114 = shufflevector <16 x i8> %113, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %115 = shufflevector <16 x i8> %113, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %116 = bitcast <16 x i8> %114 to <8 x i16>
  %117 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %116, <8 x i16> %95) #3
  %118 = shufflevector <16 x i8> %114, <16 x i8> %115, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %119 = bitcast <16 x i8> %118 to <8 x i16>
  %120 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> %96) #3
  %121 = shufflevector <16 x i8> %114, <16 x i8> %115, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %122 = bitcast <16 x i8> %121 to <8 x i16>
  %123 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %122, <8 x i16> %97) #3
  %124 = shufflevector <16 x i8> %114, <16 x i8> %115, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %125 = bitcast <16 x i8> %124 to <8 x i16>
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %125, <8 x i16> %98) #3
  %127 = add <4 x i32> %117, %86
  %128 = add <4 x i32> %127, %120
  %129 = add <4 x i32> %128, %123
  %130 = add <4 x i32> %129, %126
  %131 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %130, <4 x i32> %87) #3
  %132 = shufflevector <16 x i8> %114, <16 x i8> %115, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %133 = bitcast <16 x i8> %132 to <8 x i16>
  %134 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %133, <8 x i16> %95) #3
  %135 = shufflevector <16 x i8> %114, <16 x i8> %115, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %136 = bitcast <16 x i8> %135 to <8 x i16>
  %137 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %136, <8 x i16> %96) #3
  %138 = shufflevector <16 x i8> %114, <16 x i8> %115, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %139 = bitcast <16 x i8> %138 to <8 x i16>
  %140 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %139, <8 x i16> %97) #3
  %141 = shufflevector <16 x i8> %114, <16 x i8> %115, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %142 = bitcast <16 x i8> %141 to <8 x i16>
  %143 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %142, <8 x i16> %98) #3
  %144 = add <4 x i32> %134, %86
  %145 = add <4 x i32> %144, %137
  %146 = add <4 x i32> %145, %140
  %147 = add <4 x i32> %146, %143
  %148 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %147, <4 x i32> %87) #3
  %149 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %131, <4 x i32> %148) #3
  %150 = add nuw nsw i64 %109, %107
  %151 = getelementptr inbounds [17792 x i16], [17792 x i16]* %12, i64 0, i64 %150
  %152 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %152, align 16
  %153 = add nuw nsw i64 %109, 8
  %154 = icmp slt i64 %153, %99
  br i1 %154, label %108, label %155

155:                                              ; preds = %108, %102
  %156 = add nuw nsw i64 %103, 1
  %157 = icmp eq i64 %156, %101
  br i1 %157, label %158, label %102

158:                                              ; preds = %155, %11
  %159 = and i32 %9, 15
  %160 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %7, i64 0, i32 0
  %161 = load i16*, i16** %160, align 8
  %162 = mul nuw nsw i32 %159, %20
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds i16, i16* %161, i64 %163
  %165 = bitcast i16* %164 to <4 x i32>*
  %166 = load <4 x i32>, <4 x i32>* %165, align 1
  %167 = shufflevector <4 x i32> %166, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %168 = bitcast <4 x i32> %167 to <2 x i64>
  %169 = shufflevector <4 x i32> %166, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %170 = bitcast <4 x i32> %169 to <2 x i64>
  %171 = shl i32 1, %54
  %172 = ashr i32 %171, 1
  %173 = sub i32 21, %51
  %174 = shl i32 1, %173
  %175 = sub nsw i32 %172, %174
  %176 = insertelement <4 x i32> undef, i32 %175, i32 0
  %177 = shufflevector <4 x i32> %176, <4 x i32> undef, <4 x i32> zeroinitializer
  %178 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %54, i32 0
  %179 = icmp sgt i32 %5, 0
  br i1 %179, label %180, label %303

180:                                              ; preds = %158
  %181 = shufflevector <2 x i64> %170, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %182 = shufflevector <2 x i64> %170, <2 x i64> undef, <2 x i32> zeroinitializer
  %183 = shufflevector <2 x i64> %168, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %184 = shufflevector <2 x i64> %168, <2 x i64> undef, <2 x i32> zeroinitializer
  %185 = icmp sgt i32 %4, 0
  %186 = bitcast <2 x i64> %184 to <8 x i16>
  %187 = bitcast <2 x i64> %183 to <8 x i16>
  %188 = bitcast <2 x i64> %182 to <8 x i16>
  %189 = bitcast <2 x i64> %181 to <8 x i16>
  %190 = icmp eq i32 %30, 0
  %191 = icmp eq i32 %32, 0
  %192 = sub <8 x i16> %68, %61
  %193 = shufflevector <8 x i16> %192, <8 x i16> undef, <8 x i32> zeroinitializer
  %194 = icmp sgt i32 %4, 4
  %195 = sext i32 %4 to i64
  %196 = sext i32 %3 to i64
  %197 = sext i32 %16 to i64
  %198 = zext i32 %5 to i64
  br label %199

199:                                              ; preds = %300, %180
  %200 = phi i64 [ 0, %180 ], [ %301, %300 ]
  br i1 %185, label %201, label %300

201:                                              ; preds = %199
  %202 = shl i64 %200, 7
  %203 = mul nsw i64 %200, %197
  %204 = mul nsw i64 %200, %196
  br label %205

205:                                              ; preds = %201, %297
  %206 = phi i64 [ 0, %201 ], [ %298, %297 ]
  %207 = add i64 %202, %206
  %208 = and i64 %207, 4294967288
  %209 = getelementptr inbounds [17792 x i16], [17792 x i16]* %12, i64 0, i64 %208
  %210 = bitcast i16* %209 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 16
  %212 = getelementptr inbounds i16, i16* %209, i64 128
  %213 = bitcast i16* %212 to <8 x i16>*
  %214 = load <8 x i16>, <8 x i16>* %213, align 16
  %215 = shufflevector <8 x i16> %211, <8 x i16> %214, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %216 = getelementptr inbounds i16, i16* %209, i64 256
  %217 = bitcast i16* %216 to <8 x i16>*
  %218 = load <8 x i16>, <8 x i16>* %217, align 16
  %219 = getelementptr inbounds i16, i16* %209, i64 384
  %220 = bitcast i16* %219 to <8 x i16>*
  %221 = load <8 x i16>, <8 x i16>* %220, align 16
  %222 = shufflevector <8 x i16> %218, <8 x i16> %221, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %223 = getelementptr inbounds i16, i16* %209, i64 512
  %224 = bitcast i16* %223 to <8 x i16>*
  %225 = load <8 x i16>, <8 x i16>* %224, align 16
  %226 = getelementptr inbounds i16, i16* %209, i64 640
  %227 = bitcast i16* %226 to <8 x i16>*
  %228 = load <8 x i16>, <8 x i16>* %227, align 16
  %229 = shufflevector <8 x i16> %225, <8 x i16> %228, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %230 = getelementptr inbounds i16, i16* %209, i64 768
  %231 = bitcast i16* %230 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 16
  %233 = getelementptr inbounds i16, i16* %209, i64 896
  %234 = bitcast i16* %233 to <8 x i16>*
  %235 = load <8 x i16>, <8 x i16>* %234, align 16
  %236 = shufflevector <8 x i16> %232, <8 x i16> %235, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %237 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %215, <8 x i16> %186) #3
  %238 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %222, <8 x i16> %187) #3
  %239 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %229, <8 x i16> %188) #3
  %240 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %236, <8 x i16> %189) #3
  %241 = add <4 x i32> %238, %237
  %242 = add <4 x i32> %241, %239
  %243 = add <4 x i32> %242, %240
  %244 = shufflevector <8 x i16> %211, <8 x i16> %214, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %245 = shufflevector <8 x i16> %218, <8 x i16> %221, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %246 = shufflevector <8 x i16> %225, <8 x i16> %228, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %247 = shufflevector <8 x i16> %232, <8 x i16> %235, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %248 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %244, <8 x i16> %186) #3
  %249 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %245, <8 x i16> %187) #3
  %250 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %246, <8 x i16> %188) #3
  %251 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %247, <8 x i16> %189) #3
  %252 = add <4 x i32> %249, %248
  %253 = add <4 x i32> %252, %250
  %254 = add <4 x i32> %253, %251
  %255 = shufflevector <4 x i32> %243, <4 x i32> %254, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %256 = shufflevector <4 x i32> %243, <4 x i32> %254, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %257 = add <4 x i32> %255, %177
  %258 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %257, <4 x i32> %178) #3
  %259 = add <4 x i32> %256, %177
  %260 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %259, <4 x i32> %178) #3
  %261 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %258, <4 x i32> %260) #3
  %262 = add <8 x i16> %261, %62
  %263 = add nsw i64 %206, %203
  %264 = getelementptr inbounds i16, i16* %14, i64 %263
  %265 = bitcast i16* %264 to <8 x i16>*
  br i1 %190, label %296, label %266

266:                                              ; preds = %205
  %267 = load <8 x i16>, <8 x i16>* %265, align 1
  br i1 %191, label %276, label %268

268:                                              ; preds = %266
  %269 = shufflevector <8 x i16> %267, <8 x i16> %262, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %270 = shufflevector <8 x i16> %267, <8 x i16> %262, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %271 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %269, <8 x i16> %49) #3
  %272 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %270, <8 x i16> %49) #3
  %273 = ashr <4 x i32> %271, <i32 4, i32 4, i32 4, i32 4>
  %274 = ashr <4 x i32> %272, <i32 4, i32 4, i32 4, i32 4>
  %275 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %273, <4 x i32> %274) #3
  br label %279

276:                                              ; preds = %266
  %277 = add <8 x i16> %267, %262
  %278 = ashr <8 x i16> %277, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %279

279:                                              ; preds = %268, %276
  %280 = phi <8 x i16> [ %275, %268 ], [ %278, %276 ]
  %281 = add <8 x i16> %193, %280
  %282 = tail call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %281, i32 %64) #3
  %283 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %282, <8 x i16> %282) #3
  br i1 %194, label %284, label %290

284:                                              ; preds = %279
  %285 = bitcast <16 x i8> %283 to <2 x i64>
  %286 = add nsw i64 %206, %204
  %287 = getelementptr inbounds i8, i8* %2, i64 %286
  %288 = extractelement <2 x i64> %285, i32 0
  %289 = bitcast i8* %287 to i64*
  store i64 %288, i64* %289, align 1
  br label %297

290:                                              ; preds = %279
  %291 = bitcast <16 x i8> %283 to <4 x i32>
  %292 = extractelement <4 x i32> %291, i32 0
  %293 = add nsw i64 %206, %204
  %294 = getelementptr inbounds i8, i8* %2, i64 %293
  %295 = bitcast i8* %294 to i32*
  store i32 %292, i32* %295, align 4
  br label %297

296:                                              ; preds = %205
  store <8 x i16> %262, <8 x i16>* %265, align 16
  br label %297

297:                                              ; preds = %284, %290, %296
  %298 = add nuw nsw i64 %206, 8
  %299 = icmp slt i64 %298, %195
  br i1 %299, label %205, label %300

300:                                              ; preds = %297, %199
  %301 = add nuw nsw i64 %200, 1
  %302 = icmp eq i64 %301, %198
  br i1 %302, label %303, label %199

303:                                              ; preds = %300, %158
  call void @llvm.lifetime.end.p0i8(i64 35584, i8* nonnull %17) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16>, i32) #2

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
