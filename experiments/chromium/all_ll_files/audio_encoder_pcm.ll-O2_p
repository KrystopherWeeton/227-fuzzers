; ModuleID = '../../third_party/webrtc/modules/audio_coding/codecs/g711/audio_encoder_pcm.cc'
source_filename = "../../third_party/webrtc/modules/audio_coding/codecs/g711/audio_encoder_pcm.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::AudioEncoderPcm" = type <{ %"class.webrtc::AudioEncoder", i32, [4 x i8], i64, i32, [4 x i8], i64, i64, %"class.std::__1::vector", i32, [4 x i8] }>
%"class.webrtc::AudioEncoder" = type { i32 (...)** }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i16*, i16*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i16* }
%"struct.webrtc::AudioEncoderPcm::Config" = type <{ i32, [4 x i8], i64, i32, [4 x i8] }>
%"struct.webrtc::AudioEncoder::EncodedInfo" = type { %"struct.webrtc::AudioEncoder::EncodedInfoLeaf", %"class.std::__1::vector.8" }
%"struct.webrtc::AudioEncoder::EncodedInfoLeaf" = type { i64, i32, i32, i8, i8, i32 }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.webrtc::AudioEncoder::EncodedInfoLeaf"*, %"struct.webrtc::AudioEncoder::EncodedInfoLeaf"*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.webrtc::AudioEncoder::EncodedInfoLeaf"* }
%"class.rtc::BufferT" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { i8* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"class.webrtc::TimeDelta", %"class.webrtc::TimeDelta" }
%"class.webrtc::TimeDelta" = type { %"class.webrtc::rtc_units_impl::RelativeUnit" }
%"class.webrtc::rtc_units_impl::RelativeUnit" = type { %"class.webrtc::rtc_units_impl::UnitBase" }
%"class.webrtc::rtc_units_impl::UnitBase" = type { i64 }
%"class.webrtc::AudioEncoderPcmA" = type { %"class.webrtc::AudioEncoderPcm.base", [4 x i8] }
%"class.webrtc::AudioEncoderPcm.base" = type <{ %"class.webrtc::AudioEncoder", i32, [4 x i8], i64, i32, [4 x i8], i64, i64, %"class.std::__1::vector", i32 }>
%"class.webrtc::AudioEncoderPcmU" = type { %"class.webrtc::AudioEncoderPcm.base", [4 x i8] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.21 }
%union.anon.21 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.webrtc::RtcEventLog" = type opaque
%"struct.webrtc::BitrateAllocationUpdate" = type { %"class.webrtc::DataRate", %"class.webrtc::DataRate", double, %"class.webrtc::TimeDelta", %"class.webrtc::TimeDelta", double }
%"class.webrtc::DataRate" = type { %"class.webrtc::rtc_units_impl::RelativeUnit.25" }
%"class.webrtc::rtc_units_impl::RelativeUnit.25" = type { %"class.webrtc::rtc_units_impl::UnitBase.26" }
%"class.webrtc::rtc_units_impl::UnitBase.26" = type { i64 }
%"struct.webrtc::ANAStats" = type { %"class.absl::optional.27", %"class.absl::optional.27", %"class.absl::optional.27", %"class.absl::optional.27", %"class.absl::optional.27", %"class.absl::optional.27", %"class.absl::optional.32" }
%"class.absl::optional.27" = type { %"class.absl::optional_internal::optional_data.28" }
%"class.absl::optional_internal::optional_data.28" = type { %"class.absl::optional_internal::optional_data_base.29" }
%"class.absl::optional_internal::optional_data_base.29" = type { %"class.absl::optional_internal::optional_data_dtor_base.30" }
%"class.absl::optional_internal::optional_data_dtor_base.30" = type { i8, %union.anon.31 }
%union.anon.31 = type { i32 }
%"class.absl::optional.32" = type { %"class.absl::optional_internal::optional_data.33" }
%"class.absl::optional_internal::optional_data.33" = type { %"class.absl::optional_internal::optional_data_base.34" }
%"class.absl::optional_internal::optional_data_base.34" = type { %"class.absl::optional_internal::optional_data_dtor_base.35" }
%"class.absl::optional_internal::optional_data_dtor_base.35" = type { i8, %union.anon.36 }
%union.anon.36 = type { float }

$_ZNSt3__16vectorIsNS_9allocatorIsEEE6insertIPKsEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIsNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPsEEE4typeENSC_IS6_EES8_S8_ = comdat any

$_ZN6webrtc16AudioEncoderPcmAD0Ev = comdat any

$_ZN6webrtc16AudioEncoderPcmUD0Ev = comdat any

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_NS4_ILS5_9EPKcEEEEEvS8_iS8_DpRKT_E1t = comdat any

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE5EmEES6_EEEvPKciS8_DpRKT_E1t = comdat any

@_ZTVN6webrtc15AudioEncoderPcmE = hidden unnamed_addr constant { [34 x i8*] } { [34 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::AudioEncoderPcm"*)* @_ZN6webrtc15AudioEncoderPcmD2Ev to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoderPcm"*)* @_ZN6webrtc15AudioEncoderPcmD0Ev to i8*), i8* bitcast (i32 (%"class.webrtc::AudioEncoderPcm"*)* @_ZNK6webrtc15AudioEncoderPcm12SampleRateHzEv to i8*), i8* bitcast (i64 (%"class.webrtc::AudioEncoderPcm"*)* @_ZNK6webrtc15AudioEncoderPcm11NumChannelsEv to i8*), i8* bitcast (i32 (%"class.webrtc::AudioEncoder"*)* @_ZNK6webrtc12AudioEncoder18RtpTimestampRateHzEv to i8*), i8* bitcast (i64 (%"class.webrtc::AudioEncoderPcm"*)* @_ZNK6webrtc15AudioEncoderPcm25Num10MsFramesInNextPacketEv to i8*), i8* bitcast (i64 (%"class.webrtc::AudioEncoderPcm"*)* @_ZNK6webrtc15AudioEncoderPcm22Max10MsFramesInAPacketEv to i8*), i8* bitcast (i32 (%"class.webrtc::AudioEncoderPcm"*)* @_ZNK6webrtc15AudioEncoderPcm16GetTargetBitrateEv to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoderPcm"*)* @_ZN6webrtc15AudioEncoderPcm5ResetEv to i8*), i8* bitcast (i1 (%"class.webrtc::AudioEncoder"*, i1)* @_ZN6webrtc12AudioEncoder6SetFecEb to i8*), i8* bitcast (i1 (%"class.webrtc::AudioEncoder"*, i1)* @_ZN6webrtc12AudioEncoder6SetDtxEb to i8*), i8* bitcast (i1 (%"class.webrtc::AudioEncoder"*)* @_ZNK6webrtc12AudioEncoder6GetDtxEv to i8*), i8* bitcast (i1 (%"class.webrtc::AudioEncoder"*, i32)* @_ZN6webrtc12AudioEncoder14SetApplicationENS0_11ApplicationE to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, i32)* @_ZN6webrtc12AudioEncoder18SetMaxPlaybackRateEi to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, i32)* @_ZN6webrtc12AudioEncoder16SetTargetBitrateEi to i8*), i8* bitcast (void ()* @_ZN6webrtc12AudioEncoder24ReclaimContainedEncodersEv to i8*), i8* bitcast (i1 (%"class.webrtc::AudioEncoder"*, %"class.std::__1::basic_string"*, %"class.webrtc::RtcEventLog"*)* @_ZN6webrtc12AudioEncoder25EnableAudioNetworkAdaptorERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPNS_11RtcEventLogE to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*)* @_ZN6webrtc12AudioEncoder26DisableAudioNetworkAdaptorEv to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, float)* @_ZN6webrtc12AudioEncoder34OnReceivedUplinkPacketLossFractionEf to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, float)* @_ZN6webrtc12AudioEncoder45OnReceivedUplinkRecoverablePacketLossFractionEf to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, i32)* @_ZN6webrtc12AudioEncoder28OnReceivedTargetAudioBitrateEi to i8*), i8* bitcast (void ()* @_ZN6webrtc12AudioEncoder25OnReceivedUplinkBandwidthEiN4absl8optionalIlEE to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, %"struct.webrtc::BitrateAllocationUpdate"*)* @_ZN6webrtc12AudioEncoder26OnReceivedUplinkAllocationENS_23BitrateAllocationUpdateE to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, i32)* @_ZN6webrtc12AudioEncoder13OnReceivedRttEi to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, i64)* @_ZN6webrtc12AudioEncoder18OnReceivedOverheadEm to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, i32, i32)* @_ZN6webrtc12AudioEncoder27SetReceiverFrameLengthRangeEii to i8*), i8* bitcast (void (%"struct.webrtc::ANAStats"*, %"class.webrtc::AudioEncoder"*)* @_ZNK6webrtc12AudioEncoder11GetANAStatsEv to i8*), i8* bitcast (void (%"class.absl::optional"*, %"class.webrtc::AudioEncoderPcm"*)* @_ZNK6webrtc15AudioEncoderPcm19GetFrameLengthRangeEv to i8*), i8* bitcast (void (%"struct.webrtc::AudioEncoder::EncodedInfo"*, %"class.webrtc::AudioEncoderPcm"*, i32, i16*, i64, %"class.rtc::BufferT"*)* @_ZN6webrtc15AudioEncoderPcm10EncodeImplEjN3rtc9ArrayViewIKsLln4711EEEPNS1_7BufferTIhLb0EEE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@.str = private unnamed_addr constant [79 x i8] c"../../third_party/webrtc/modules/audio_coding/codecs/g711/audio_encoder_pcm.cc\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"sample_rate_hz > 0\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"Sample rate must be larger than 0 Hz\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"config.frame_size_ms % 10 == 0\00", align 1
@.str.4 = private unnamed_addr constant [49 x i8] c"Frame size must be an integer multiple of 10 ms.\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c"speech_buffer_.size() == full_frame_samples_\00", align 1
@_ZTVN6webrtc16AudioEncoderPcmAE = hidden unnamed_addr constant { [34 x i8*] } { [34 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::AudioEncoderPcm"*)* @_ZN6webrtc15AudioEncoderPcmD2Ev to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoderPcmA"*)* @_ZN6webrtc16AudioEncoderPcmAD0Ev to i8*), i8* bitcast (i32 (%"class.webrtc::AudioEncoderPcm"*)* @_ZNK6webrtc15AudioEncoderPcm12SampleRateHzEv to i8*), i8* bitcast (i64 (%"class.webrtc::AudioEncoderPcm"*)* @_ZNK6webrtc15AudioEncoderPcm11NumChannelsEv to i8*), i8* bitcast (i32 (%"class.webrtc::AudioEncoder"*)* @_ZNK6webrtc12AudioEncoder18RtpTimestampRateHzEv to i8*), i8* bitcast (i64 (%"class.webrtc::AudioEncoderPcm"*)* @_ZNK6webrtc15AudioEncoderPcm25Num10MsFramesInNextPacketEv to i8*), i8* bitcast (i64 (%"class.webrtc::AudioEncoderPcm"*)* @_ZNK6webrtc15AudioEncoderPcm22Max10MsFramesInAPacketEv to i8*), i8* bitcast (i32 (%"class.webrtc::AudioEncoderPcm"*)* @_ZNK6webrtc15AudioEncoderPcm16GetTargetBitrateEv to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoderPcm"*)* @_ZN6webrtc15AudioEncoderPcm5ResetEv to i8*), i8* bitcast (i1 (%"class.webrtc::AudioEncoder"*, i1)* @_ZN6webrtc12AudioEncoder6SetFecEb to i8*), i8* bitcast (i1 (%"class.webrtc::AudioEncoder"*, i1)* @_ZN6webrtc12AudioEncoder6SetDtxEb to i8*), i8* bitcast (i1 (%"class.webrtc::AudioEncoder"*)* @_ZNK6webrtc12AudioEncoder6GetDtxEv to i8*), i8* bitcast (i1 (%"class.webrtc::AudioEncoder"*, i32)* @_ZN6webrtc12AudioEncoder14SetApplicationENS0_11ApplicationE to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, i32)* @_ZN6webrtc12AudioEncoder18SetMaxPlaybackRateEi to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, i32)* @_ZN6webrtc12AudioEncoder16SetTargetBitrateEi to i8*), i8* bitcast (void ()* @_ZN6webrtc12AudioEncoder24ReclaimContainedEncodersEv to i8*), i8* bitcast (i1 (%"class.webrtc::AudioEncoder"*, %"class.std::__1::basic_string"*, %"class.webrtc::RtcEventLog"*)* @_ZN6webrtc12AudioEncoder25EnableAudioNetworkAdaptorERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPNS_11RtcEventLogE to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*)* @_ZN6webrtc12AudioEncoder26DisableAudioNetworkAdaptorEv to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, float)* @_ZN6webrtc12AudioEncoder34OnReceivedUplinkPacketLossFractionEf to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, float)* @_ZN6webrtc12AudioEncoder45OnReceivedUplinkRecoverablePacketLossFractionEf to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, i32)* @_ZN6webrtc12AudioEncoder28OnReceivedTargetAudioBitrateEi to i8*), i8* bitcast (void ()* @_ZN6webrtc12AudioEncoder25OnReceivedUplinkBandwidthEiN4absl8optionalIlEE to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, %"struct.webrtc::BitrateAllocationUpdate"*)* @_ZN6webrtc12AudioEncoder26OnReceivedUplinkAllocationENS_23BitrateAllocationUpdateE to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, i32)* @_ZN6webrtc12AudioEncoder13OnReceivedRttEi to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, i64)* @_ZN6webrtc12AudioEncoder18OnReceivedOverheadEm to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, i32, i32)* @_ZN6webrtc12AudioEncoder27SetReceiverFrameLengthRangeEii to i8*), i8* bitcast (void (%"struct.webrtc::ANAStats"*, %"class.webrtc::AudioEncoder"*)* @_ZNK6webrtc12AudioEncoder11GetANAStatsEv to i8*), i8* bitcast (void (%"class.absl::optional"*, %"class.webrtc::AudioEncoderPcm"*)* @_ZNK6webrtc15AudioEncoderPcm19GetFrameLengthRangeEv to i8*), i8* bitcast (void (%"struct.webrtc::AudioEncoder::EncodedInfo"*, %"class.webrtc::AudioEncoderPcm"*, i32, i16*, i64, %"class.rtc::BufferT"*)* @_ZN6webrtc15AudioEncoderPcm10EncodeImplEjN3rtc9ArrayViewIKsLln4711EEEPNS1_7BufferTIhLb0EEE to i8*), i8* bitcast (i64 (%"class.webrtc::AudioEncoderPcmA"*, i16*, i64, i8*)* @_ZN6webrtc16AudioEncoderPcmA10EncodeCallEPKsmPh to i8*), i8* bitcast (i64 (%"class.webrtc::AudioEncoderPcmA"*)* @_ZNK6webrtc16AudioEncoderPcmA14BytesPerSampleEv to i8*), i8* bitcast (i32 (%"class.webrtc::AudioEncoderPcmA"*)* @_ZNK6webrtc16AudioEncoderPcmA12GetCodecTypeEv to i8*)] }, align 8
@_ZTVN6webrtc16AudioEncoderPcmUE = hidden unnamed_addr constant { [34 x i8*] } { [34 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::AudioEncoderPcm"*)* @_ZN6webrtc15AudioEncoderPcmD2Ev to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoderPcmU"*)* @_ZN6webrtc16AudioEncoderPcmUD0Ev to i8*), i8* bitcast (i32 (%"class.webrtc::AudioEncoderPcm"*)* @_ZNK6webrtc15AudioEncoderPcm12SampleRateHzEv to i8*), i8* bitcast (i64 (%"class.webrtc::AudioEncoderPcm"*)* @_ZNK6webrtc15AudioEncoderPcm11NumChannelsEv to i8*), i8* bitcast (i32 (%"class.webrtc::AudioEncoder"*)* @_ZNK6webrtc12AudioEncoder18RtpTimestampRateHzEv to i8*), i8* bitcast (i64 (%"class.webrtc::AudioEncoderPcm"*)* @_ZNK6webrtc15AudioEncoderPcm25Num10MsFramesInNextPacketEv to i8*), i8* bitcast (i64 (%"class.webrtc::AudioEncoderPcm"*)* @_ZNK6webrtc15AudioEncoderPcm22Max10MsFramesInAPacketEv to i8*), i8* bitcast (i32 (%"class.webrtc::AudioEncoderPcm"*)* @_ZNK6webrtc15AudioEncoderPcm16GetTargetBitrateEv to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoderPcm"*)* @_ZN6webrtc15AudioEncoderPcm5ResetEv to i8*), i8* bitcast (i1 (%"class.webrtc::AudioEncoder"*, i1)* @_ZN6webrtc12AudioEncoder6SetFecEb to i8*), i8* bitcast (i1 (%"class.webrtc::AudioEncoder"*, i1)* @_ZN6webrtc12AudioEncoder6SetDtxEb to i8*), i8* bitcast (i1 (%"class.webrtc::AudioEncoder"*)* @_ZNK6webrtc12AudioEncoder6GetDtxEv to i8*), i8* bitcast (i1 (%"class.webrtc::AudioEncoder"*, i32)* @_ZN6webrtc12AudioEncoder14SetApplicationENS0_11ApplicationE to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, i32)* @_ZN6webrtc12AudioEncoder18SetMaxPlaybackRateEi to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, i32)* @_ZN6webrtc12AudioEncoder16SetTargetBitrateEi to i8*), i8* bitcast (void ()* @_ZN6webrtc12AudioEncoder24ReclaimContainedEncodersEv to i8*), i8* bitcast (i1 (%"class.webrtc::AudioEncoder"*, %"class.std::__1::basic_string"*, %"class.webrtc::RtcEventLog"*)* @_ZN6webrtc12AudioEncoder25EnableAudioNetworkAdaptorERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPNS_11RtcEventLogE to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*)* @_ZN6webrtc12AudioEncoder26DisableAudioNetworkAdaptorEv to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, float)* @_ZN6webrtc12AudioEncoder34OnReceivedUplinkPacketLossFractionEf to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, float)* @_ZN6webrtc12AudioEncoder45OnReceivedUplinkRecoverablePacketLossFractionEf to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, i32)* @_ZN6webrtc12AudioEncoder28OnReceivedTargetAudioBitrateEi to i8*), i8* bitcast (void ()* @_ZN6webrtc12AudioEncoder25OnReceivedUplinkBandwidthEiN4absl8optionalIlEE to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, %"struct.webrtc::BitrateAllocationUpdate"*)* @_ZN6webrtc12AudioEncoder26OnReceivedUplinkAllocationENS_23BitrateAllocationUpdateE to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, i32)* @_ZN6webrtc12AudioEncoder13OnReceivedRttEi to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, i64)* @_ZN6webrtc12AudioEncoder18OnReceivedOverheadEm to i8*), i8* bitcast (void (%"class.webrtc::AudioEncoder"*, i32, i32)* @_ZN6webrtc12AudioEncoder27SetReceiverFrameLengthRangeEii to i8*), i8* bitcast (void (%"struct.webrtc::ANAStats"*, %"class.webrtc::AudioEncoder"*)* @_ZNK6webrtc12AudioEncoder11GetANAStatsEv to i8*), i8* bitcast (void (%"class.absl::optional"*, %"class.webrtc::AudioEncoderPcm"*)* @_ZNK6webrtc15AudioEncoderPcm19GetFrameLengthRangeEv to i8*), i8* bitcast (void (%"struct.webrtc::AudioEncoder::EncodedInfo"*, %"class.webrtc::AudioEncoderPcm"*, i32, i16*, i64, %"class.rtc::BufferT"*)* @_ZN6webrtc15AudioEncoderPcm10EncodeImplEjN3rtc9ArrayViewIKsLln4711EEEPNS1_7BufferTIhLb0EEE to i8*), i8* bitcast (i64 (%"class.webrtc::AudioEncoderPcmU"*, i16*, i64, i8*)* @_ZN6webrtc16AudioEncoderPcmU10EncodeCallEPKsmPh to i8*), i8* bitcast (i64 (%"class.webrtc::AudioEncoderPcmU"*)* @_ZNK6webrtc16AudioEncoderPcmU14BytesPerSampleEv to i8*), i8* bitcast (i32 (%"class.webrtc::AudioEncoderPcmU"*)* @_ZNK6webrtc16AudioEncoderPcmU12GetCodecTypeEv to i8*)] }, align 8
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_NS4_ILS5_9EPKcEEEEEvS8_iS8_DpRKT_E1t = linkonce_odr hidden constant [5 x i8] c"\0D\01\01\09\00", comdat, align 1
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE5EmEES6_EEEvPKciS8_DpRKT_E1t = linkonce_odr hidden constant [4 x i8] c"\0D\05\05\00", comdat, align 1
@.str.7 = private unnamed_addr constant [43 x i8] c"../../third_party/webrtc/rtc_base/buffer.h\00", align 1
@.str.8 = private unnamed_addr constant [33 x i8] c"written_elements <= max_elements\00", align 1

@_ZN6webrtc15AudioEncoderPcmD1Ev = hidden unnamed_addr alias void (%"class.webrtc::AudioEncoderPcm"*), void (%"class.webrtc::AudioEncoderPcm"*)* @_ZN6webrtc15AudioEncoderPcmD2Ev

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK6webrtc15AudioEncoderPcm6Config4IsOkEv(%"struct.webrtc::AudioEncoderPcm::Config"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.webrtc::AudioEncoderPcm::Config", %"struct.webrtc::AudioEncoderPcm::Config"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = srem i32 %3, 10
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %10

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"struct.webrtc::AudioEncoderPcm::Config", %"struct.webrtc::AudioEncoderPcm::Config"* %0, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = icmp ne i64 %8, 0
  br label %10

10:                                               ; preds = %6, %1
  %11 = phi i1 [ false, %1 ], [ %9, %6 ]
  ret i1 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15AudioEncoderPcmC2ERKNS0_6ConfigEi(%"class.webrtc::AudioEncoderPcm"* nocapture, %"struct.webrtc::AudioEncoderPcm::Config"* nocapture readonly dereferenceable(24), i32) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN6webrtc15AudioEncoderPcmE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %0, i64 0, i32 1
  store i32 %2, i32* %5, align 8
  %6 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %0, i64 0, i32 3
  %7 = getelementptr inbounds %"struct.webrtc::AudioEncoderPcm::Config", %"struct.webrtc::AudioEncoderPcm::Config"* %1, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %6, align 8
  %9 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %0, i64 0, i32 4
  %10 = getelementptr inbounds %"struct.webrtc::AudioEncoderPcm::Config", %"struct.webrtc::AudioEncoderPcm::Config"* %1, i64 0, i32 3
  %11 = load i32, i32* %10, align 8
  store i32 %11, i32* %9, align 8
  %12 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %0, i64 0, i32 6
  %13 = getelementptr inbounds %"struct.webrtc::AudioEncoderPcm::Config", %"struct.webrtc::AudioEncoderPcm::Config"* %1, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = sdiv i32 %14, 10
  %16 = sext i32 %15 to i64
  store i64 %16, i64* %12, align 8
  %17 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %0, i64 0, i32 7
  %18 = load i64, i64* %7, align 8
  %19 = load i32, i32* %13, align 8
  %20 = sext i32 %19 to i64
  %21 = sext i32 %2 to i64
  %22 = mul i64 %18, %21
  %23 = mul i64 %22, %20
  %24 = udiv i64 %23, 1000
  store i64 %24, i64* %17, align 8
  %25 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %0, i64 0, i32 8
  %26 = icmp sgt i32 %2, 0
  %27 = bitcast %"class.std::__1::vector"* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 28, i1 false)
  br i1 %26, label %29, label %28

28:                                               ; preds = %3
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str, i64 0, i64 0), i32 33, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_NS4_ILS5_9EPKcEEEEEvS8_iS8_DpRKT_E1t, i64 0, i64 0), i32 %2, i32 0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0)) #14
  unreachable

29:                                               ; preds = %3
  %30 = load i32, i32* %13, align 8
  %31 = srem i32 %30, 10
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %34, label %33

33:                                               ; preds = %29
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str, i64 0, i64 0), i32 34, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_NS4_ILS5_9EPKcEEEEEvS8_iS8_DpRKT_E1t, i64 0, i64 0), i32 %31, i32 0, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.4, i64 0, i64 0)) #14
  unreachable

34:                                               ; preds = %29
  %35 = icmp ugt i64 %23, 999
  br i1 %35, label %36, label %48

36:                                               ; preds = %34
  %37 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %0, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  %38 = bitcast i16** %37 to i64*
  %39 = shl nuw nsw i64 %24, 1
  %40 = tail call i8* @_Znwm(i64 %39) #15
  %41 = bitcast i8* %40 to i16*
  %42 = getelementptr inbounds i16, i16* %41, i64 %24
  %43 = ptrtoint i16* %42 to i64
  %44 = insertelement <2 x i8*> undef, i8* %40, i32 0
  %45 = shufflevector <2 x i8*> %44, <2 x i8*> undef, <2 x i32> zeroinitializer
  %46 = ptrtoint <2 x i8*> %45 to <2 x i64>
  %47 = bitcast %"class.std::__1::vector"* %25 to <2 x i64>*
  store <2 x i64> %46, <2 x i64>* %47, align 8
  store i64 %43, i64* %38, align 8
  br label %48

48:                                               ; preds = %36, %34
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN6webrtc15AudioEncoderPcmD0Ev(%"class.webrtc::AudioEncoderPcm"* nocapture readnone) unnamed_addr #3 align 2 {
  tail call void @llvm.trap() #14
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK6webrtc15AudioEncoderPcm12SampleRateHzEv(%"class.webrtc::AudioEncoderPcm"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK6webrtc15AudioEncoderPcm11NumChannelsEv(%"class.webrtc::AudioEncoderPcm"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %0, i64 0, i32 3
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK6webrtc15AudioEncoderPcm25Num10MsFramesInNextPacketEv(%"class.webrtc::AudioEncoderPcm"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %0, i64 0, i32 6
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK6webrtc15AudioEncoderPcm22Max10MsFramesInAPacketEv(%"class.webrtc::AudioEncoderPcm"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %0, i64 0, i32 6
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK6webrtc15AudioEncoderPcm16GetTargetBitrateEv(%"class.webrtc::AudioEncoderPcm"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.webrtc::AudioEncoderPcm"* %0 to i64 (%"class.webrtc::AudioEncoderPcm"*)***
  %3 = load i64 (%"class.webrtc::AudioEncoderPcm"*)**, i64 (%"class.webrtc::AudioEncoderPcm"*)*** %2, align 8
  %4 = getelementptr inbounds i64 (%"class.webrtc::AudioEncoderPcm"*)*, i64 (%"class.webrtc::AudioEncoderPcm"*)** %3, i64 30
  %5 = load i64 (%"class.webrtc::AudioEncoderPcm"*)*, i64 (%"class.webrtc::AudioEncoderPcm"*)** %4, align 8
  %6 = tail call i64 %5(%"class.webrtc::AudioEncoderPcm"* %0) #16
  %7 = shl i64 %6, 3
  %8 = bitcast %"class.webrtc::AudioEncoderPcm"* %0 to i32 (%"class.webrtc::AudioEncoderPcm"*)***
  %9 = load i32 (%"class.webrtc::AudioEncoderPcm"*)**, i32 (%"class.webrtc::AudioEncoderPcm"*)*** %8, align 8
  %10 = getelementptr inbounds i32 (%"class.webrtc::AudioEncoderPcm"*)*, i32 (%"class.webrtc::AudioEncoderPcm"*)** %9, i64 2
  %11 = load i32 (%"class.webrtc::AudioEncoderPcm"*)*, i32 (%"class.webrtc::AudioEncoderPcm"*)** %10, align 8
  %12 = tail call i32 %11(%"class.webrtc::AudioEncoderPcm"* %0) #16
  %13 = sext i32 %12 to i64
  %14 = mul i64 %7, %13
  %15 = load i64 (%"class.webrtc::AudioEncoderPcm"*)**, i64 (%"class.webrtc::AudioEncoderPcm"*)*** %2, align 8
  %16 = getelementptr inbounds i64 (%"class.webrtc::AudioEncoderPcm"*)*, i64 (%"class.webrtc::AudioEncoderPcm"*)** %15, i64 3
  %17 = load i64 (%"class.webrtc::AudioEncoderPcm"*)*, i64 (%"class.webrtc::AudioEncoderPcm"*)** %16, align 8
  %18 = tail call i64 %17(%"class.webrtc::AudioEncoderPcm"* %0) #16
  %19 = mul i64 %14, %18
  %20 = trunc i64 %19 to i32
  ret i32 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15AudioEncoderPcm10EncodeImplEjN3rtc9ArrayViewIKsLln4711EEEPNS1_7BufferTIhLb0EEE(%"struct.webrtc::AudioEncoder::EncodedInfo"* noalias sret, %"class.webrtc::AudioEncoderPcm"*, i32, i16*, i64, %"class.rtc::BufferT"* nocapture) unnamed_addr #1 align 2 {
  %7 = alloca %"struct.webrtc::AudioEncoder::EncodedInfo", align 8
  %8 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %1, i64 0, i32 8
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 0
  %10 = load i16*, i16** %9, align 8
  %11 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %1, i64 0, i32 8, i32 0, i32 1
  %12 = load i16*, i16** %11, align 8
  %13 = icmp eq i16* %10, %12
  br i1 %13, label %14, label %16

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %1, i64 0, i32 9
  store i32 %2, i32* %15, align 8
  br label %16

16:                                               ; preds = %14, %6
  %17 = getelementptr inbounds i16, i16* %3, i64 %4
  %18 = tail call i16* @_ZNSt3__16vectorIsNS_9allocatorIsEEE6insertIPKsEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIsNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPsEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector"* %8, i16* %12, i16* %3, i16* %17)
  %19 = bitcast i16** %11 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"class.std::__1::vector"* %8 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %20, %22
  %24 = ashr exact i64 %23, 1
  %25 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %1, i64 0, i32 7
  %26 = load i64, i64* %25, align 8
  %27 = icmp ult i64 %24, %26
  br i1 %27, label %28, label %29

28:                                               ; preds = %16
  tail call void @_ZN6webrtc12AudioEncoder11EncodedInfoC1Ev(%"struct.webrtc::AudioEncoder::EncodedInfo"* %0) #16
  br label %95

29:                                               ; preds = %16
  %30 = icmp eq i64 %24, %26
  br i1 %30, label %32, label %31

31:                                               ; preds = %29
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str, i64 0, i64 0), i32 73, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE5EmEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), i64 %24, i64 %26) #14
  unreachable

32:                                               ; preds = %29
  %33 = bitcast %"struct.webrtc::AudioEncoder::EncodedInfo"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %33) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 -86, i64 48, i1 false)
  call void @_ZN6webrtc12AudioEncoder11EncodedInfoC1Ev(%"struct.webrtc::AudioEncoder::EncodedInfo"* nonnull %7) #16
  %34 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %1, i64 0, i32 9
  %35 = load i32, i32* %34, align 8
  %36 = getelementptr inbounds %"struct.webrtc::AudioEncoder::EncodedInfo", %"struct.webrtc::AudioEncoder::EncodedInfo"* %7, i64 0, i32 0, i32 1
  store i32 %35, i32* %36, align 8
  %37 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %1, i64 0, i32 4
  %38 = load i32, i32* %37, align 8
  %39 = getelementptr inbounds %"struct.webrtc::AudioEncoder::EncodedInfo", %"struct.webrtc::AudioEncoder::EncodedInfo"* %7, i64 0, i32 0, i32 2
  store i32 %38, i32* %39, align 4
  %40 = load i64, i64* %25, align 8
  %41 = bitcast %"class.webrtc::AudioEncoderPcm"* %1 to i64 (%"class.webrtc::AudioEncoderPcm"*)***
  %42 = load i64 (%"class.webrtc::AudioEncoderPcm"*)**, i64 (%"class.webrtc::AudioEncoderPcm"*)*** %41, align 8
  %43 = getelementptr inbounds i64 (%"class.webrtc::AudioEncoderPcm"*)*, i64 (%"class.webrtc::AudioEncoderPcm"*)** %42, i64 30
  %44 = load i64 (%"class.webrtc::AudioEncoderPcm"*)*, i64 (%"class.webrtc::AudioEncoderPcm"*)** %43, align 8
  %45 = call i64 %44(%"class.webrtc::AudioEncoderPcm"* %1) #16
  %46 = mul i64 %45, %40
  %47 = getelementptr inbounds %"class.rtc::BufferT", %"class.rtc::BufferT"* %5, i64 0, i32 0
  %48 = load i64, i64* %47, align 8
  %49 = add i64 %48, %46
  %50 = getelementptr inbounds %"class.rtc::BufferT", %"class.rtc::BufferT"* %5, i64 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = icmp ult i64 %51, %49
  br i1 %52, label %53, label %69

53:                                               ; preds = %32
  %54 = lshr i64 %51, 1
  %55 = add i64 %54, %51
  %56 = icmp ugt i64 %55, %49
  %57 = select i1 %56, i64 %55, i64 %49
  %58 = call i8* @_Znam(i64 %57) #15
  %59 = ptrtoint i8* %58 to i64
  %60 = getelementptr inbounds %"class.rtc::BufferT", %"class.rtc::BufferT"* %5, i64 0, i32 2
  %61 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %60, i64 0, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  %63 = icmp eq i8* %62, null
  br i1 %63, label %64, label %66

64:                                               ; preds = %53
  %65 = bitcast %"class.std::__1::unique_ptr"* %60 to i64*
  store i64 %59, i64* %65, align 8
  br label %68

66:                                               ; preds = %53
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %58, i8* nonnull align 1 %62, i64 %48, i1 false) #16
  %67 = bitcast %"class.std::__1::unique_ptr"* %60 to i64*
  store i64 %59, i64* %67, align 8
  call void @_ZdaPv(i8* nonnull %62) #15
  br label %68

68:                                               ; preds = %66, %64
  store i64 %57, i64* %50, align 8
  br label %69

69:                                               ; preds = %68, %32
  store i64 %49, i64* %47, align 8
  %70 = getelementptr inbounds %"class.rtc::BufferT", %"class.rtc::BufferT"* %5, i64 0, i32 2, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 %48
  %73 = icmp eq i64 %46, 0
  %74 = select i1 %73, i8* null, i8* %72
  %75 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %1, i64 0, i32 8, i32 0, i32 0
  %76 = load i16*, i16** %75, align 8
  %77 = load i64, i64* %25, align 8
  %78 = bitcast %"class.webrtc::AudioEncoderPcm"* %1 to i64 (%"class.webrtc::AudioEncoderPcm"*, i16*, i64, i8*)***
  %79 = load i64 (%"class.webrtc::AudioEncoderPcm"*, i16*, i64, i8*)**, i64 (%"class.webrtc::AudioEncoderPcm"*, i16*, i64, i8*)*** %78, align 8
  %80 = getelementptr inbounds i64 (%"class.webrtc::AudioEncoderPcm"*, i16*, i64, i8*)*, i64 (%"class.webrtc::AudioEncoderPcm"*, i16*, i64, i8*)** %79, i64 29
  %81 = load i64 (%"class.webrtc::AudioEncoderPcm"*, i16*, i64, i8*)*, i64 (%"class.webrtc::AudioEncoderPcm"*, i16*, i64, i8*)** %80, align 8
  %82 = call i64 %81(%"class.webrtc::AudioEncoderPcm"* %1, i16* %76, i64 %77, i8* %74) #16
  %83 = icmp ugt i64 %82, %46
  br i1 %83, label %84, label %85

84:                                               ; preds = %69
  call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.7, i64 0, i64 0), i32 313, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE5EmEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), i64 %82, i64 %46) #14
  unreachable

85:                                               ; preds = %69
  %86 = add i64 %82, %48
  store i64 %86, i64* %47, align 8
  %87 = getelementptr inbounds %"struct.webrtc::AudioEncoder::EncodedInfo", %"struct.webrtc::AudioEncoder::EncodedInfo"* %7, i64 0, i32 0, i32 0
  store i64 %82, i64* %87, align 8
  %88 = load i64, i64* %21, align 8
  store i64 %88, i64* %19, align 8
  %89 = bitcast %"class.webrtc::AudioEncoderPcm"* %1 to i32 (%"class.webrtc::AudioEncoderPcm"*)***
  %90 = load i32 (%"class.webrtc::AudioEncoderPcm"*)**, i32 (%"class.webrtc::AudioEncoderPcm"*)*** %89, align 8
  %91 = getelementptr inbounds i32 (%"class.webrtc::AudioEncoderPcm"*)*, i32 (%"class.webrtc::AudioEncoderPcm"*)** %90, i64 31
  %92 = load i32 (%"class.webrtc::AudioEncoderPcm"*)*, i32 (%"class.webrtc::AudioEncoderPcm"*)** %91, align 8
  %93 = call i32 %92(%"class.webrtc::AudioEncoderPcm"* %1) #16
  %94 = getelementptr inbounds %"struct.webrtc::AudioEncoder::EncodedInfo", %"struct.webrtc::AudioEncoder::EncodedInfo"* %7, i64 0, i32 0, i32 5
  store i32 %93, i32* %94, align 4
  call void @_ZN6webrtc12AudioEncoder11EncodedInfoC1EOS1_(%"struct.webrtc::AudioEncoder::EncodedInfo"* %0, %"struct.webrtc::AudioEncoder::EncodedInfo"* nonnull dereferenceable(48) %7) #16
  call void @_ZN6webrtc12AudioEncoder11EncodedInfoD1Ev(%"struct.webrtc::AudioEncoder::EncodedInfo"* nonnull %7) #16
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %33) #16
  br label %95

95:                                               ; preds = %85, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16* @_ZNSt3__16vectorIsNS_9allocatorIsEEE6insertIPKsEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIsNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPsEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector"*, i16*, i16*, i16*) local_unnamed_addr #1 comdat align 2 {
  %5 = bitcast i16* %2 to i8*
  %6 = bitcast i16* %1 to i8*
  %7 = ptrtoint i16* %1 to i64
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %9 = ptrtoint i16* %3 to i64
  %10 = ptrtoint i16* %2 to i64
  %11 = sub i64 %9, %10
  %12 = ashr exact i64 %11, 1
  %13 = icmp sgt i64 %11, 0
  br i1 %13, label %14, label %547

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast i16** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = load i16*, i16** %18, align 8
  %20 = ptrtoint i16* %19 to i64
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 1
  %23 = icmp sgt i64 %12, %22
  %24 = bitcast i16** %18 to i64*
  br i1 %23, label %188, label %25

25:                                               ; preds = %14
  %26 = sub i64 %20, %7
  %27 = ashr exact i64 %26, 1
  %28 = icmp sgt i64 %12, %27
  br i1 %28, label %29, label %45

29:                                               ; preds = %25
  %30 = getelementptr inbounds i16, i16* %2, i64 %27
  %31 = ptrtoint i16* %30 to i64
  %32 = sub i64 %9, %31
  %33 = icmp sgt i64 %32, 0
  br i1 %33, label %34, label %40

34:                                               ; preds = %29
  %35 = lshr exact i64 %32, 1
  %36 = bitcast i16* %19 to i8*
  %37 = bitcast i16* %30 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %36, i8* align 2 %37, i64 %32, i1 false) #16
  %38 = getelementptr inbounds i16, i16* %19, i64 %35
  %39 = ptrtoint i16* %38 to i64
  br label %40

40:                                               ; preds = %34, %29
  %41 = phi i64 [ %39, %34 ], [ %20, %29 ]
  store i64 %41, i64* %24, align 8
  %42 = icmp sgt i64 %26, 0
  br i1 %42, label %43, label %547

43:                                               ; preds = %40
  %44 = inttoptr i64 %41 to i16*
  br label %45

45:                                               ; preds = %43, %25
  %46 = phi i64 [ %41, %43 ], [ %20, %25 ]
  %47 = phi i16* [ %44, %43 ], [ %19, %25 ]
  %48 = phi i16* [ %30, %43 ], [ %3, %25 ]
  %49 = getelementptr inbounds i16, i16* %1, i64 %12
  %50 = ptrtoint i16* %49 to i64
  %51 = sub i64 %46, %50
  %52 = ashr exact i64 %51, 1
  %53 = getelementptr inbounds i16, i16* %1, i64 %52
  %54 = icmp ult i16* %53, %19
  br i1 %54, label %55, label %168

55:                                               ; preds = %45
  %56 = sub nsw i64 0, %52
  %57 = getelementptr i16, i16* %19, i64 %56
  %58 = bitcast i16* %57 to i8*
  %59 = xor i64 %7, -1
  %60 = getelementptr i8, i8* %58, i64 %59
  %61 = ptrtoint i8* %60 to i64
  %62 = lshr i64 %61, 1
  %63 = add nuw i64 %62, 1
  %64 = icmp ult i64 %63, 16
  br i1 %64, label %65, label %68

65:                                               ; preds = %163, %68, %55
  %66 = phi i16* [ %47, %68 ], [ %47, %55 ], [ %86, %163 ]
  %67 = phi i16* [ %53, %68 ], [ %53, %55 ], [ %87, %163 ]
  br label %176

68:                                               ; preds = %55
  %69 = sub nsw i64 0, %52
  %70 = getelementptr i16, i16* %19, i64 %69
  %71 = bitcast i16* %70 to i8*
  %72 = xor i64 %7, -1
  %73 = getelementptr i8, i8* %71, i64 %72
  %74 = ptrtoint i8* %73 to i64
  %75 = lshr i64 %74, 1
  %76 = add nuw i64 %75, 1
  %77 = getelementptr i16, i16* %47, i64 %76
  %78 = add i64 %52, %75
  %79 = add i64 %78, 1
  %80 = getelementptr i16, i16* %1, i64 %79
  %81 = icmp ult i16* %47, %80
  %82 = icmp ult i16* %53, %77
  %83 = and i1 %81, %82
  br i1 %83, label %65, label %84

84:                                               ; preds = %68
  %85 = and i64 %63, -16
  %86 = getelementptr i16, i16* %47, i64 %85
  %87 = getelementptr i16, i16* %53, i64 %85
  %88 = add i64 %85, -16
  %89 = lshr exact i64 %88, 4
  %90 = add nuw nsw i64 %89, 1
  %91 = and i64 %90, 3
  %92 = icmp ult i64 %88, 48
  br i1 %92, label %144, label %93

93:                                               ; preds = %84
  %94 = sub nsw i64 %90, %91
  br label %95

95:                                               ; preds = %95, %93
  %96 = phi i64 [ 0, %93 ], [ %141, %95 ]
  %97 = phi i64 [ %94, %93 ], [ %142, %95 ]
  %98 = getelementptr i16, i16* %47, i64 %96
  %99 = getelementptr i16, i16* %53, i64 %96
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !2
  %102 = getelementptr i16, i16* %99, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !2
  %105 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %105, align 2, !alias.scope !5, !noalias !2
  %106 = getelementptr i16, i16* %98, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %107, align 2, !alias.scope !5, !noalias !2
  %108 = or i64 %96, 16
  %109 = getelementptr i16, i16* %47, i64 %108
  %110 = getelementptr i16, i16* %53, i64 %108
  %111 = bitcast i16* %110 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2, !alias.scope !2
  %113 = getelementptr i16, i16* %110, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2, !alias.scope !2
  %116 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %116, align 2, !alias.scope !5, !noalias !2
  %117 = getelementptr i16, i16* %109, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %118, align 2, !alias.scope !5, !noalias !2
  %119 = or i64 %96, 32
  %120 = getelementptr i16, i16* %47, i64 %119
  %121 = getelementptr i16, i16* %53, i64 %119
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !2
  %124 = getelementptr i16, i16* %121, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 2, !alias.scope !2
  %127 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %127, align 2, !alias.scope !5, !noalias !2
  %128 = getelementptr i16, i16* %120, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %129, align 2, !alias.scope !5, !noalias !2
  %130 = or i64 %96, 48
  %131 = getelementptr i16, i16* %47, i64 %130
  %132 = getelementptr i16, i16* %53, i64 %130
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2, !alias.scope !2
  %135 = getelementptr i16, i16* %132, i64 8
  %136 = bitcast i16* %135 to <8 x i16>*
  %137 = load <8 x i16>, <8 x i16>* %136, align 2, !alias.scope !2
  %138 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %138, align 2, !alias.scope !5, !noalias !2
  %139 = getelementptr i16, i16* %131, i64 8
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %137, <8 x i16>* %140, align 2, !alias.scope !5, !noalias !2
  %141 = add i64 %96, 64
  %142 = add i64 %97, -4
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %144, label %95, !llvm.loop !7

144:                                              ; preds = %95, %84
  %145 = phi i64 [ 0, %84 ], [ %141, %95 ]
  %146 = icmp eq i64 %91, 0
  br i1 %146, label %163, label %147

147:                                              ; preds = %144, %147
  %148 = phi i64 [ %160, %147 ], [ %145, %144 ]
  %149 = phi i64 [ %161, %147 ], [ %91, %144 ]
  %150 = getelementptr i16, i16* %47, i64 %148
  %151 = getelementptr i16, i16* %53, i64 %148
  %152 = bitcast i16* %151 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 2, !alias.scope !2
  %154 = getelementptr i16, i16* %151, i64 8
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 2, !alias.scope !2
  %157 = bitcast i16* %150 to <8 x i16>*
  store <8 x i16> %153, <8 x i16>* %157, align 2, !alias.scope !5, !noalias !2
  %158 = getelementptr i16, i16* %150, i64 8
  %159 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %159, align 2, !alias.scope !5, !noalias !2
  %160 = add i64 %148, 16
  %161 = add i64 %149, -1
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %163, label %147, !llvm.loop !9

163:                                              ; preds = %147, %144
  %164 = icmp eq i64 %63, %85
  br i1 %164, label %165, label %65

165:                                              ; preds = %176, %163
  %166 = phi i16* [ %86, %163 ], [ %181, %176 ]
  %167 = ptrtoint i16* %166 to i64
  br label %168

168:                                              ; preds = %165, %45
  %169 = phi i64 [ %167, %165 ], [ %46, %45 ]
  store i64 %169, i64* %24, align 8
  %170 = icmp eq i64 %51, 0
  br i1 %170, label %183, label %171

171:                                              ; preds = %168
  %172 = sub nsw i64 0, %52
  %173 = getelementptr inbounds i16, i16* %47, i64 %172
  %174 = bitcast i16* %173 to i8*
  %175 = bitcast i16* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %174, i8* align 2 %175, i64 %51, i1 false) #16
  br label %183

176:                                              ; preds = %65, %176
  %177 = phi i16* [ %181, %176 ], [ %66, %65 ]
  %178 = phi i16* [ %180, %176 ], [ %67, %65 ]
  %179 = load i16, i16* %178, align 2
  store i16 %179, i16* %177, align 2
  %180 = getelementptr inbounds i16, i16* %178, i64 1
  %181 = getelementptr inbounds i16, i16* %177, i64 1
  %182 = icmp ult i16* %180, %19
  br i1 %182, label %176, label %165, !llvm.loop !11

183:                                              ; preds = %168, %171
  %184 = ptrtoint i16* %48 to i64
  %185 = sub i64 %184, %10
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %547, label %187

187:                                              ; preds = %183
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %6, i8* align 2 %5, i64 %185, i1 false) #16
  br label %547

188:                                              ; preds = %14
  %189 = bitcast %"class.std::__1::vector"* %0 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = sub i64 %20, %190
  %192 = ashr exact i64 %191, 1
  %193 = add nsw i64 %192, %12
  %194 = icmp slt i64 %193, 0
  br i1 %194, label %195, label %197

195:                                              ; preds = %188
  %196 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %196) #14
  unreachable

197:                                              ; preds = %188
  %198 = sub i64 %17, %190
  %199 = ashr exact i64 %198, 1
  %200 = icmp ult i64 %199, 4611686018427387903
  %201 = icmp ult i64 %198, %193
  %202 = select i1 %201, i64 %193, i64 %198
  %203 = select i1 %200, i64 %202, i64 9223372036854775807
  %204 = sub i64 %7, %190
  %205 = ashr exact i64 %204, 1
  %206 = icmp eq i64 %203, 0
  br i1 %206, label %214, label %207

207:                                              ; preds = %197
  %208 = icmp slt i64 %203, 0
  br i1 %208, label %209, label %210

209:                                              ; preds = %207
  tail call void @abort() #14
  unreachable

210:                                              ; preds = %207
  %211 = shl i64 %203, 1
  %212 = tail call i8* @_Znwm(i64 %211) #15
  %213 = bitcast i8* %212 to i16*
  br label %214

214:                                              ; preds = %210, %197
  %215 = phi i16* [ %213, %210 ], [ null, %197 ]
  %216 = getelementptr inbounds i16, i16* %215, i64 %205
  %217 = getelementptr inbounds i16, i16* %215, i64 %203
  %218 = ptrtoint i16* %217 to i64
  %219 = getelementptr inbounds i16, i16* %216, i64 %12
  %220 = add i64 %11, -2
  %221 = lshr i64 %220, 1
  %222 = add nuw i64 %221, 1
  %223 = icmp ult i64 %222, 16
  br i1 %223, label %316, label %224

224:                                              ; preds = %214
  %225 = add i64 %11, -2
  %226 = lshr i64 %225, 1
  %227 = add i64 %205, %226
  %228 = add i64 %227, 1
  %229 = getelementptr i16, i16* %215, i64 %228
  %230 = add nuw i64 %226, 1
  %231 = getelementptr i16, i16* %2, i64 %230
  %232 = icmp ult i16* %216, %231
  %233 = icmp ugt i16* %229, %2
  %234 = and i1 %232, %233
  br i1 %234, label %316, label %235

235:                                              ; preds = %224
  %236 = and i64 %222, -16
  %237 = getelementptr i16, i16* %216, i64 %236
  %238 = getelementptr i16, i16* %2, i64 %236
  %239 = add i64 %236, -16
  %240 = lshr exact i64 %239, 4
  %241 = add nuw nsw i64 %240, 1
  %242 = and i64 %241, 3
  %243 = icmp ult i64 %239, 48
  br i1 %243, label %295, label %244

244:                                              ; preds = %235
  %245 = sub nsw i64 %241, %242
  br label %246

246:                                              ; preds = %246, %244
  %247 = phi i64 [ 0, %244 ], [ %292, %246 ]
  %248 = phi i64 [ %245, %244 ], [ %293, %246 ]
  %249 = getelementptr i16, i16* %216, i64 %247
  %250 = getelementptr i16, i16* %2, i64 %247
  %251 = bitcast i16* %250 to <8 x i16>*
  %252 = load <8 x i16>, <8 x i16>* %251, align 2, !alias.scope !12
  %253 = getelementptr i16, i16* %250, i64 8
  %254 = bitcast i16* %253 to <8 x i16>*
  %255 = load <8 x i16>, <8 x i16>* %254, align 2, !alias.scope !12
  %256 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %256, align 2, !alias.scope !15, !noalias !12
  %257 = getelementptr i16, i16* %249, i64 8
  %258 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %258, align 2, !alias.scope !15, !noalias !12
  %259 = or i64 %247, 16
  %260 = getelementptr i16, i16* %216, i64 %259
  %261 = getelementptr i16, i16* %2, i64 %259
  %262 = bitcast i16* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 2, !alias.scope !12
  %264 = getelementptr i16, i16* %261, i64 8
  %265 = bitcast i16* %264 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 2, !alias.scope !12
  %267 = bitcast i16* %260 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %267, align 2, !alias.scope !15, !noalias !12
  %268 = getelementptr i16, i16* %260, i64 8
  %269 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %266, <8 x i16>* %269, align 2, !alias.scope !15, !noalias !12
  %270 = or i64 %247, 32
  %271 = getelementptr i16, i16* %216, i64 %270
  %272 = getelementptr i16, i16* %2, i64 %270
  %273 = bitcast i16* %272 to <8 x i16>*
  %274 = load <8 x i16>, <8 x i16>* %273, align 2, !alias.scope !12
  %275 = getelementptr i16, i16* %272, i64 8
  %276 = bitcast i16* %275 to <8 x i16>*
  %277 = load <8 x i16>, <8 x i16>* %276, align 2, !alias.scope !12
  %278 = bitcast i16* %271 to <8 x i16>*
  store <8 x i16> %274, <8 x i16>* %278, align 2, !alias.scope !15, !noalias !12
  %279 = getelementptr i16, i16* %271, i64 8
  %280 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %277, <8 x i16>* %280, align 2, !alias.scope !15, !noalias !12
  %281 = or i64 %247, 48
  %282 = getelementptr i16, i16* %216, i64 %281
  %283 = getelementptr i16, i16* %2, i64 %281
  %284 = bitcast i16* %283 to <8 x i16>*
  %285 = load <8 x i16>, <8 x i16>* %284, align 2, !alias.scope !12
  %286 = getelementptr i16, i16* %283, i64 8
  %287 = bitcast i16* %286 to <8 x i16>*
  %288 = load <8 x i16>, <8 x i16>* %287, align 2, !alias.scope !12
  %289 = bitcast i16* %282 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %289, align 2, !alias.scope !15, !noalias !12
  %290 = getelementptr i16, i16* %282, i64 8
  %291 = bitcast i16* %290 to <8 x i16>*
  store <8 x i16> %288, <8 x i16>* %291, align 2, !alias.scope !15, !noalias !12
  %292 = add i64 %247, 64
  %293 = add i64 %248, -4
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %295, label %246, !llvm.loop !17

295:                                              ; preds = %246, %235
  %296 = phi i64 [ 0, %235 ], [ %292, %246 ]
  %297 = icmp eq i64 %242, 0
  br i1 %297, label %314, label %298

298:                                              ; preds = %295, %298
  %299 = phi i64 [ %311, %298 ], [ %296, %295 ]
  %300 = phi i64 [ %312, %298 ], [ %242, %295 ]
  %301 = getelementptr i16, i16* %216, i64 %299
  %302 = getelementptr i16, i16* %2, i64 %299
  %303 = bitcast i16* %302 to <8 x i16>*
  %304 = load <8 x i16>, <8 x i16>* %303, align 2, !alias.scope !12
  %305 = getelementptr i16, i16* %302, i64 8
  %306 = bitcast i16* %305 to <8 x i16>*
  %307 = load <8 x i16>, <8 x i16>* %306, align 2, !alias.scope !12
  %308 = bitcast i16* %301 to <8 x i16>*
  store <8 x i16> %304, <8 x i16>* %308, align 2, !alias.scope !15, !noalias !12
  %309 = getelementptr i16, i16* %301, i64 8
  %310 = bitcast i16* %309 to <8 x i16>*
  store <8 x i16> %307, <8 x i16>* %310, align 2, !alias.scope !15, !noalias !12
  %311 = add i64 %299, 16
  %312 = add i64 %300, -1
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %314, label %298, !llvm.loop !18

314:                                              ; preds = %298, %295
  %315 = icmp eq i64 %222, %236
  br i1 %315, label %370, label %316

316:                                              ; preds = %314, %224, %214
  %317 = phi i16* [ %216, %224 ], [ %216, %214 ], [ %237, %314 ]
  %318 = phi i16* [ %2, %224 ], [ %2, %214 ], [ %238, %314 ]
  %319 = ptrtoint i16* %317 to i64
  %320 = add nsw i64 %12, %205
  %321 = add i64 %320, -1
  %322 = getelementptr i16, i16* %215, i64 %321
  %323 = ptrtoint i16* %322 to i64
  %324 = sub i64 %323, %319
  %325 = lshr i64 %324, 1
  %326 = add nuw i64 %325, 1
  %327 = and i64 %326, 7
  %328 = icmp eq i64 %327, 0
  br i1 %328, label %338, label %329

329:                                              ; preds = %316, %329
  %330 = phi i16* [ %334, %329 ], [ %317, %316 ]
  %331 = phi i16* [ %335, %329 ], [ %318, %316 ]
  %332 = phi i64 [ %336, %329 ], [ %327, %316 ]
  %333 = load i16, i16* %331, align 2
  store i16 %333, i16* %330, align 2
  %334 = getelementptr inbounds i16, i16* %330, i64 1
  %335 = getelementptr inbounds i16, i16* %331, i64 1
  %336 = add i64 %332, -1
  %337 = icmp eq i64 %336, 0
  br i1 %337, label %338, label %329, !llvm.loop !19

338:                                              ; preds = %329, %316
  %339 = phi i16* [ %317, %316 ], [ %334, %329 ]
  %340 = phi i16* [ %318, %316 ], [ %335, %329 ]
  %341 = icmp ult i64 %324, 14
  br i1 %341, label %370, label %342

342:                                              ; preds = %338, %342
  %343 = phi i16* [ %367, %342 ], [ %339, %338 ]
  %344 = phi i16* [ %368, %342 ], [ %340, %338 ]
  %345 = load i16, i16* %344, align 2
  store i16 %345, i16* %343, align 2
  %346 = getelementptr inbounds i16, i16* %343, i64 1
  %347 = getelementptr inbounds i16, i16* %344, i64 1
  %348 = load i16, i16* %347, align 2
  store i16 %348, i16* %346, align 2
  %349 = getelementptr inbounds i16, i16* %343, i64 2
  %350 = getelementptr inbounds i16, i16* %344, i64 2
  %351 = load i16, i16* %350, align 2
  store i16 %351, i16* %349, align 2
  %352 = getelementptr inbounds i16, i16* %343, i64 3
  %353 = getelementptr inbounds i16, i16* %344, i64 3
  %354 = load i16, i16* %353, align 2
  store i16 %354, i16* %352, align 2
  %355 = getelementptr inbounds i16, i16* %343, i64 4
  %356 = getelementptr inbounds i16, i16* %344, i64 4
  %357 = load i16, i16* %356, align 2
  store i16 %357, i16* %355, align 2
  %358 = getelementptr inbounds i16, i16* %343, i64 5
  %359 = getelementptr inbounds i16, i16* %344, i64 5
  %360 = load i16, i16* %359, align 2
  store i16 %360, i16* %358, align 2
  %361 = getelementptr inbounds i16, i16* %343, i64 6
  %362 = getelementptr inbounds i16, i16* %344, i64 6
  %363 = load i16, i16* %362, align 2
  store i16 %363, i16* %361, align 2
  %364 = getelementptr inbounds i16, i16* %343, i64 7
  %365 = getelementptr inbounds i16, i16* %344, i64 7
  %366 = load i16, i16* %365, align 2
  store i16 %366, i16* %364, align 2
  %367 = getelementptr inbounds i16, i16* %343, i64 8
  %368 = getelementptr inbounds i16, i16* %344, i64 8
  %369 = icmp eq i16* %219, %367
  br i1 %369, label %370, label %342, !llvm.loop !20

370:                                              ; preds = %338, %342, %314
  %371 = load i16*, i16** %8, align 8
  %372 = ptrtoint i16* %371 to i64
  %373 = sub i64 %7, %372
  %374 = ashr exact i64 %373, 1
  %375 = sub nsw i64 0, %374
  %376 = getelementptr inbounds i16, i16* %216, i64 %375
  %377 = ptrtoint i16* %376 to i64
  %378 = icmp sgt i64 %373, 0
  br i1 %378, label %379, label %382

379:                                              ; preds = %370
  %380 = bitcast i16* %376 to i8*
  %381 = bitcast i16* %371 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %380, i8* align 2 %381, i64 %373, i1 false) #16
  br label %382

382:                                              ; preds = %379, %370
  %383 = load i16*, i16** %18, align 8
  %384 = icmp eq i16* %383, %1
  br i1 %384, label %540, label %385

385:                                              ; preds = %382
  %386 = getelementptr i16, i16* %383, i64 -1
  %387 = ptrtoint i16* %386 to i64
  %388 = sub i64 %387, %7
  %389 = lshr i64 %388, 1
  %390 = add nuw i64 %389, 1
  %391 = icmp ult i64 %390, 16
  br i1 %391, label %487, label %392

392:                                              ; preds = %385
  %393 = add nsw i64 %12, %205
  %394 = getelementptr i16, i16* %383, i64 -1
  %395 = ptrtoint i16* %394 to i64
  %396 = sub i64 %395, %7
  %397 = lshr i64 %396, 1
  %398 = add i64 %393, %397
  %399 = add i64 %398, 1
  %400 = getelementptr i16, i16* %215, i64 %399
  %401 = add nuw i64 %397, 1
  %402 = getelementptr i16, i16* %1, i64 %401
  %403 = icmp ult i16* %219, %402
  %404 = icmp ugt i16* %400, %1
  %405 = and i1 %403, %404
  br i1 %405, label %487, label %406

406:                                              ; preds = %392
  %407 = and i64 %390, -16
  %408 = getelementptr i16, i16* %219, i64 %407
  %409 = getelementptr i16, i16* %1, i64 %407
  %410 = add i64 %407, -16
  %411 = lshr exact i64 %410, 4
  %412 = add nuw nsw i64 %411, 1
  %413 = and i64 %412, 3
  %414 = icmp ult i64 %410, 48
  br i1 %414, label %466, label %415

415:                                              ; preds = %406
  %416 = sub nsw i64 %412, %413
  br label %417

417:                                              ; preds = %417, %415
  %418 = phi i64 [ 0, %415 ], [ %463, %417 ]
  %419 = phi i64 [ %416, %415 ], [ %464, %417 ]
  %420 = getelementptr i16, i16* %219, i64 %418
  %421 = getelementptr i16, i16* %1, i64 %418
  %422 = bitcast i16* %421 to <8 x i16>*
  %423 = load <8 x i16>, <8 x i16>* %422, align 2, !alias.scope !21
  %424 = getelementptr i16, i16* %421, i64 8
  %425 = bitcast i16* %424 to <8 x i16>*
  %426 = load <8 x i16>, <8 x i16>* %425, align 2, !alias.scope !21
  %427 = bitcast i16* %420 to <8 x i16>*
  store <8 x i16> %423, <8 x i16>* %427, align 2, !alias.scope !24, !noalias !21
  %428 = getelementptr i16, i16* %420, i64 8
  %429 = bitcast i16* %428 to <8 x i16>*
  store <8 x i16> %426, <8 x i16>* %429, align 2, !alias.scope !24, !noalias !21
  %430 = or i64 %418, 16
  %431 = getelementptr i16, i16* %219, i64 %430
  %432 = getelementptr i16, i16* %1, i64 %430
  %433 = bitcast i16* %432 to <8 x i16>*
  %434 = load <8 x i16>, <8 x i16>* %433, align 2, !alias.scope !21
  %435 = getelementptr i16, i16* %432, i64 8
  %436 = bitcast i16* %435 to <8 x i16>*
  %437 = load <8 x i16>, <8 x i16>* %436, align 2, !alias.scope !21
  %438 = bitcast i16* %431 to <8 x i16>*
  store <8 x i16> %434, <8 x i16>* %438, align 2, !alias.scope !24, !noalias !21
  %439 = getelementptr i16, i16* %431, i64 8
  %440 = bitcast i16* %439 to <8 x i16>*
  store <8 x i16> %437, <8 x i16>* %440, align 2, !alias.scope !24, !noalias !21
  %441 = or i64 %418, 32
  %442 = getelementptr i16, i16* %219, i64 %441
  %443 = getelementptr i16, i16* %1, i64 %441
  %444 = bitcast i16* %443 to <8 x i16>*
  %445 = load <8 x i16>, <8 x i16>* %444, align 2, !alias.scope !21
  %446 = getelementptr i16, i16* %443, i64 8
  %447 = bitcast i16* %446 to <8 x i16>*
  %448 = load <8 x i16>, <8 x i16>* %447, align 2, !alias.scope !21
  %449 = bitcast i16* %442 to <8 x i16>*
  store <8 x i16> %445, <8 x i16>* %449, align 2, !alias.scope !24, !noalias !21
  %450 = getelementptr i16, i16* %442, i64 8
  %451 = bitcast i16* %450 to <8 x i16>*
  store <8 x i16> %448, <8 x i16>* %451, align 2, !alias.scope !24, !noalias !21
  %452 = or i64 %418, 48
  %453 = getelementptr i16, i16* %219, i64 %452
  %454 = getelementptr i16, i16* %1, i64 %452
  %455 = bitcast i16* %454 to <8 x i16>*
  %456 = load <8 x i16>, <8 x i16>* %455, align 2, !alias.scope !21
  %457 = getelementptr i16, i16* %454, i64 8
  %458 = bitcast i16* %457 to <8 x i16>*
  %459 = load <8 x i16>, <8 x i16>* %458, align 2, !alias.scope !21
  %460 = bitcast i16* %453 to <8 x i16>*
  store <8 x i16> %456, <8 x i16>* %460, align 2, !alias.scope !24, !noalias !21
  %461 = getelementptr i16, i16* %453, i64 8
  %462 = bitcast i16* %461 to <8 x i16>*
  store <8 x i16> %459, <8 x i16>* %462, align 2, !alias.scope !24, !noalias !21
  %463 = add i64 %418, 64
  %464 = add i64 %419, -4
  %465 = icmp eq i64 %464, 0
  br i1 %465, label %466, label %417, !llvm.loop !26

466:                                              ; preds = %417, %406
  %467 = phi i64 [ 0, %406 ], [ %463, %417 ]
  %468 = icmp eq i64 %413, 0
  br i1 %468, label %485, label %469

469:                                              ; preds = %466, %469
  %470 = phi i64 [ %482, %469 ], [ %467, %466 ]
  %471 = phi i64 [ %483, %469 ], [ %413, %466 ]
  %472 = getelementptr i16, i16* %219, i64 %470
  %473 = getelementptr i16, i16* %1, i64 %470
  %474 = bitcast i16* %473 to <8 x i16>*
  %475 = load <8 x i16>, <8 x i16>* %474, align 2, !alias.scope !21
  %476 = getelementptr i16, i16* %473, i64 8
  %477 = bitcast i16* %476 to <8 x i16>*
  %478 = load <8 x i16>, <8 x i16>* %477, align 2, !alias.scope !21
  %479 = bitcast i16* %472 to <8 x i16>*
  store <8 x i16> %475, <8 x i16>* %479, align 2, !alias.scope !24, !noalias !21
  %480 = getelementptr i16, i16* %472, i64 8
  %481 = bitcast i16* %480 to <8 x i16>*
  store <8 x i16> %478, <8 x i16>* %481, align 2, !alias.scope !24, !noalias !21
  %482 = add i64 %470, 16
  %483 = add i64 %471, -1
  %484 = icmp eq i64 %483, 0
  br i1 %484, label %485, label %469, !llvm.loop !27

485:                                              ; preds = %469, %466
  %486 = icmp eq i64 %390, %407
  br i1 %486, label %540, label %487

487:                                              ; preds = %485, %392, %385
  %488 = phi i16* [ %219, %392 ], [ %219, %385 ], [ %408, %485 ]
  %489 = phi i16* [ %1, %392 ], [ %1, %385 ], [ %409, %485 ]
  %490 = ptrtoint i16* %489 to i64
  %491 = getelementptr i16, i16* %383, i64 -1
  %492 = ptrtoint i16* %491 to i64
  %493 = sub i64 %492, %490
  %494 = lshr i64 %493, 1
  %495 = add nuw i64 %494, 1
  %496 = and i64 %495, 7
  %497 = icmp eq i64 %496, 0
  br i1 %497, label %507, label %498

498:                                              ; preds = %487, %498
  %499 = phi i16* [ %504, %498 ], [ %488, %487 ]
  %500 = phi i16* [ %503, %498 ], [ %489, %487 ]
  %501 = phi i64 [ %505, %498 ], [ %496, %487 ]
  %502 = load i16, i16* %500, align 2
  store i16 %502, i16* %499, align 2
  %503 = getelementptr inbounds i16, i16* %500, i64 1
  %504 = getelementptr inbounds i16, i16* %499, i64 1
  %505 = add i64 %501, -1
  %506 = icmp eq i64 %505, 0
  br i1 %506, label %507, label %498, !llvm.loop !28

507:                                              ; preds = %498, %487
  %508 = phi i16* [ undef, %487 ], [ %504, %498 ]
  %509 = phi i16* [ %488, %487 ], [ %504, %498 ]
  %510 = phi i16* [ %489, %487 ], [ %503, %498 ]
  %511 = icmp ult i64 %493, 14
  br i1 %511, label %540, label %512

512:                                              ; preds = %507, %512
  %513 = phi i16* [ %538, %512 ], [ %509, %507 ]
  %514 = phi i16* [ %537, %512 ], [ %510, %507 ]
  %515 = load i16, i16* %514, align 2
  store i16 %515, i16* %513, align 2
  %516 = getelementptr inbounds i16, i16* %514, i64 1
  %517 = getelementptr inbounds i16, i16* %513, i64 1
  %518 = load i16, i16* %516, align 2
  store i16 %518, i16* %517, align 2
  %519 = getelementptr inbounds i16, i16* %514, i64 2
  %520 = getelementptr inbounds i16, i16* %513, i64 2
  %521 = load i16, i16* %519, align 2
  store i16 %521, i16* %520, align 2
  %522 = getelementptr inbounds i16, i16* %514, i64 3
  %523 = getelementptr inbounds i16, i16* %513, i64 3
  %524 = load i16, i16* %522, align 2
  store i16 %524, i16* %523, align 2
  %525 = getelementptr inbounds i16, i16* %514, i64 4
  %526 = getelementptr inbounds i16, i16* %513, i64 4
  %527 = load i16, i16* %525, align 2
  store i16 %527, i16* %526, align 2
  %528 = getelementptr inbounds i16, i16* %514, i64 5
  %529 = getelementptr inbounds i16, i16* %513, i64 5
  %530 = load i16, i16* %528, align 2
  store i16 %530, i16* %529, align 2
  %531 = getelementptr inbounds i16, i16* %514, i64 6
  %532 = getelementptr inbounds i16, i16* %513, i64 6
  %533 = load i16, i16* %531, align 2
  store i16 %533, i16* %532, align 2
  %534 = getelementptr inbounds i16, i16* %514, i64 7
  %535 = getelementptr inbounds i16, i16* %513, i64 7
  %536 = load i16, i16* %534, align 2
  store i16 %536, i16* %535, align 2
  %537 = getelementptr inbounds i16, i16* %514, i64 8
  %538 = getelementptr inbounds i16, i16* %513, i64 8
  %539 = icmp eq i16* %537, %383
  br i1 %539, label %540, label %512, !llvm.loop !29

540:                                              ; preds = %507, %512, %485, %382
  %541 = phi i16* [ %219, %382 ], [ %408, %485 ], [ %508, %507 ], [ %538, %512 ]
  %542 = ptrtoint i16* %541 to i64
  %543 = load i16*, i16** %8, align 8
  store i64 %377, i64* %189, align 8
  store i64 %542, i64* %24, align 8
  store i64 %218, i64* %16, align 8
  %544 = icmp eq i16* %543, null
  br i1 %544, label %547, label %545

545:                                              ; preds = %540
  %546 = bitcast i16* %543 to i8*
  tail call void @_ZdlPv(i8* %546) #15
  br label %547

547:                                              ; preds = %545, %540, %40, %183, %187, %4
  %548 = phi i16* [ %1, %4 ], [ %1, %187 ], [ %1, %183 ], [ %1, %40 ], [ %216, %540 ], [ %216, %545 ]
  ret i16* %548
}

declare void @_ZN6webrtc12AudioEncoder11EncodedInfoC1Ev(%"struct.webrtc::AudioEncoder::EncodedInfo"*) unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN6webrtc12AudioEncoder11EncodedInfoC1EOS1_(%"struct.webrtc::AudioEncoder::EncodedInfo"*, %"struct.webrtc::AudioEncoder::EncodedInfo"* dereferenceable(48)) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN6webrtc12AudioEncoder11EncodedInfoD1Ev(%"struct.webrtc::AudioEncoder::EncodedInfo"*) unnamed_addr #6

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc15AudioEncoderPcm5ResetEv(%"class.webrtc::AudioEncoderPcm"* nocapture) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %0, i64 0, i32 8
  %3 = bitcast %"class.std::__1::vector"* %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %0, i64 0, i32 8, i32 0, i32 1
  %6 = bitcast i16** %5 to i64*
  store i64 %4, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6webrtc15AudioEncoderPcm19GetFrameLengthRangeEv(%"class.absl::optional"* noalias nocapture sret, %"class.webrtc::AudioEncoderPcm"* nocapture readonly) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %1, i64 0, i32 6
  %4 = load i64, i64* %3, align 8
  %5 = mul i64 %4, 10000
  %6 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %6, align 8
  %7 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %5, i64* %7, align 8
  %8 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0
  store i64 %5, i64* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN6webrtc16AudioEncoderPcmA10EncodeCallEPKsmPh(%"class.webrtc::AudioEncoderPcmA"* nocapture readnone, i16*, i64, i8*) unnamed_addr #1 align 2 {
  %5 = tail call i64 @WebRtcG711_EncodeA(i16* %1, i64 %2, i8* %3) #16
  ret i64 %5
}

declare i64 @WebRtcG711_EncodeA(i16*, i64, i8*) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK6webrtc16AudioEncoderPcmA14BytesPerSampleEv(%"class.webrtc::AudioEncoderPcmA"* nocapture readnone) unnamed_addr #8 align 2 {
  ret i64 1
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK6webrtc16AudioEncoderPcmA12GetCodecTypeEv(%"class.webrtc::AudioEncoderPcmA"* nocapture readnone) unnamed_addr #8 align 2 {
  ret i32 3
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN6webrtc16AudioEncoderPcmU10EncodeCallEPKsmPh(%"class.webrtc::AudioEncoderPcmU"* nocapture readnone, i16*, i64, i8*) unnamed_addr #1 align 2 {
  %5 = tail call i64 @WebRtcG711_EncodeU(i16* %1, i64 %2, i8* %3) #16
  ret i64 %5
}

declare i64 @WebRtcG711_EncodeU(i16*, i64, i8*) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK6webrtc16AudioEncoderPcmU14BytesPerSampleEv(%"class.webrtc::AudioEncoderPcmU"* nocapture readnone) unnamed_addr #8 align 2 {
  ret i64 1
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK6webrtc16AudioEncoderPcmU12GetCodecTypeEv(%"class.webrtc::AudioEncoderPcmU"* nocapture readnone) unnamed_addr #8 align 2 {
  ret i32 4
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6webrtc16AudioEncoderPcmAD0Ev(%"class.webrtc::AudioEncoderPcmA"*) unnamed_addr #9 comdat align 2 {
  %2 = getelementptr inbounds %"class.webrtc::AudioEncoderPcmA", %"class.webrtc::AudioEncoderPcmA"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN6webrtc15AudioEncoderPcmE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::AudioEncoderPcmA", %"class.webrtc::AudioEncoderPcmA"* %0, i64 0, i32 0, i32 8, i32 0, i32 0
  %4 = load i16*, i16** %3, align 8
  %5 = icmp eq i16* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i16* %4 to i64
  %8 = getelementptr inbounds %"class.webrtc::AudioEncoderPcmA", %"class.webrtc::AudioEncoderPcmA"* %0, i64 0, i32 0, i32 8, i32 0, i32 1
  %9 = bitcast i16** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i16* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #15
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.webrtc::AudioEncoderPcmA"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #15
  ret void
}

declare i32 @_ZNK6webrtc12AudioEncoder18RtpTimestampRateHzEv(%"class.webrtc::AudioEncoder"*) unnamed_addr #5

declare zeroext i1 @_ZN6webrtc12AudioEncoder6SetFecEb(%"class.webrtc::AudioEncoder"*, i1 zeroext) unnamed_addr #5

declare zeroext i1 @_ZN6webrtc12AudioEncoder6SetDtxEb(%"class.webrtc::AudioEncoder"*, i1 zeroext) unnamed_addr #5

declare zeroext i1 @_ZNK6webrtc12AudioEncoder6GetDtxEv(%"class.webrtc::AudioEncoder"*) unnamed_addr #5

declare zeroext i1 @_ZN6webrtc12AudioEncoder14SetApplicationENS0_11ApplicationE(%"class.webrtc::AudioEncoder"*, i32) unnamed_addr #5

declare void @_ZN6webrtc12AudioEncoder18SetMaxPlaybackRateEi(%"class.webrtc::AudioEncoder"*, i32) unnamed_addr #5

declare void @_ZN6webrtc12AudioEncoder16SetTargetBitrateEi(%"class.webrtc::AudioEncoder"*, i32) unnamed_addr #5

declare void @_ZN6webrtc12AudioEncoder24ReclaimContainedEncodersEv() unnamed_addr

declare zeroext i1 @_ZN6webrtc12AudioEncoder25EnableAudioNetworkAdaptorERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPNS_11RtcEventLogE(%"class.webrtc::AudioEncoder"*, %"class.std::__1::basic_string"* dereferenceable(24), %"class.webrtc::RtcEventLog"*) unnamed_addr #5

declare void @_ZN6webrtc12AudioEncoder26DisableAudioNetworkAdaptorEv(%"class.webrtc::AudioEncoder"*) unnamed_addr #5

declare void @_ZN6webrtc12AudioEncoder34OnReceivedUplinkPacketLossFractionEf(%"class.webrtc::AudioEncoder"*, float) unnamed_addr #5

declare void @_ZN6webrtc12AudioEncoder45OnReceivedUplinkRecoverablePacketLossFractionEf(%"class.webrtc::AudioEncoder"*, float) unnamed_addr #5

declare void @_ZN6webrtc12AudioEncoder28OnReceivedTargetAudioBitrateEi(%"class.webrtc::AudioEncoder"*, i32) unnamed_addr #5

declare void @_ZN6webrtc12AudioEncoder25OnReceivedUplinkBandwidthEiN4absl8optionalIlEE() unnamed_addr

declare void @_ZN6webrtc12AudioEncoder26OnReceivedUplinkAllocationENS_23BitrateAllocationUpdateE(%"class.webrtc::AudioEncoder"*, %"struct.webrtc::BitrateAllocationUpdate"* byval(%"struct.webrtc::BitrateAllocationUpdate") align 8) unnamed_addr #5

declare void @_ZN6webrtc12AudioEncoder13OnReceivedRttEi(%"class.webrtc::AudioEncoder"*, i32) unnamed_addr #5

declare void @_ZN6webrtc12AudioEncoder18OnReceivedOverheadEm(%"class.webrtc::AudioEncoder"*, i64) unnamed_addr #5

declare void @_ZN6webrtc12AudioEncoder27SetReceiverFrameLengthRangeEii(%"class.webrtc::AudioEncoder"*, i32, i32) unnamed_addr #5

declare void @_ZNK6webrtc12AudioEncoder11GetANAStatsEv(%"struct.webrtc::ANAStats"* sret, %"class.webrtc::AudioEncoder"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15AudioEncoderPcmD2Ev(%"class.webrtc::AudioEncoderPcm"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN6webrtc15AudioEncoderPcmE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %0, i64 0, i32 8, i32 0, i32 0
  %4 = load i16*, i16** %3, align 8
  %5 = icmp eq i16* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i16* %4 to i64
  %8 = getelementptr inbounds %"class.webrtc::AudioEncoderPcm", %"class.webrtc::AudioEncoderPcm"* %0, i64 0, i32 8, i32 0, i32 1
  %9 = bitcast i16** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i16* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #15
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6webrtc16AudioEncoderPcmUD0Ev(%"class.webrtc::AudioEncoderPcmU"*) unnamed_addr #9 comdat align 2 {
  %2 = getelementptr inbounds %"class.webrtc::AudioEncoderPcmU", %"class.webrtc::AudioEncoderPcmU"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN6webrtc15AudioEncoderPcmE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::AudioEncoderPcmU", %"class.webrtc::AudioEncoderPcmU"* %0, i64 0, i32 0, i32 8, i32 0, i32 0
  %4 = load i16*, i16** %3, align 8
  %5 = icmp eq i16* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i16* %4 to i64
  %8 = getelementptr inbounds %"class.webrtc::AudioEncoderPcmU", %"class.webrtc::AudioEncoderPcmU"* %0, i64 0, i32 0, i32 8, i32 0, i32 1
  %9 = bitcast i16** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i16* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #15
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.webrtc::AudioEncoderPcmU"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #15
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #10

; Function Attrs: noreturn
declare void @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8*, i32, i8*, i8*, ...) local_unnamed_addr #11

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #12

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #13

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #13

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #10

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn nounwind }
attributes #15 = { builtin nounwind }
attributes #16 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !8}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !8}
!27 = distinct !{!27, !10}
!28 = distinct !{!28, !10}
!29 = distinct !{!29, !8}
