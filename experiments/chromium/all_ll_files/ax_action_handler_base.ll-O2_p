; ModuleID = '../../ui/accessibility/ax_action_handler_base.cc'
source_filename = "../../ui/accessibility/ax_action_handler_base.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.ui::AXActionHandlerBase" = type { i32 (...)**, %"class.ui::AXTreeID" }
%"class.ui::AXTreeID" = type { i32, %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.ui::AXActionHandlerRegistry" = type { i32 (...)**, %"class.std::__1::map", %"class.std::__1::map.4", %"class.std::__1::map.15", %"class.base::ObserverList" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::map.4" = type { %"class.std::__1::__tree.5" }
%"class.std::__1::__tree.5" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::map.15" = type { %"class.std::__1::__tree.16" }
%"class.std::__1::__tree.16" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.17", %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::CheckedObserverAdapter"*, %"class.base::internal::CheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.30" }
%"class.base::internal::CheckedObserverAdapter" = type { %"class.base::WeakPtr" }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.24" }
%"struct.std::__1::__atomic_base.24" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.25" }
%"struct.std::__1::atomic.25" = type { %"struct.std::__1::__atomic_base.26" }
%"struct.std::__1::__atomic_base.26" = type { %"struct.std::__1::__atomic_base.27" }
%"struct.std::__1::__atomic_base.27" = type { %"struct.std::__1::__cxx_atomic_impl.28" }
%"struct.std::__1::__cxx_atomic_impl.28" = type { %"struct.std::__1::__cxx_atomic_base_impl.29" }
%"struct.std::__1::__cxx_atomic_base_impl.29" = type { i8 }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.base::internal::CheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }

@_ZTVN2ui19AXActionHandlerBaseE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.ui::AXActionHandlerBase"*)* @_ZN2ui19AXActionHandlerBaseD2Ev to i8*), i8* bitcast (void (%"class.ui::AXActionHandlerBase"*)* @_ZN2ui19AXActionHandlerBaseD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i1 (%"class.ui::AXActionHandlerBase"*)* @_ZNK2ui19AXActionHandlerBase34RequiresPerformActionPointInPixelsEv to i8*)] }, align 8

@_ZN2ui19AXActionHandlerBaseD1Ev = hidden unnamed_addr alias void (%"class.ui::AXActionHandlerBase"*), void (%"class.ui::AXActionHandlerBase"*)* @_ZN2ui19AXActionHandlerBaseD2Ev

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK2ui19AXActionHandlerBase34RequiresPerformActionPointInPixelsEv(%"class.ui::AXActionHandlerBase"* nocapture readnone) unnamed_addr #0 align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui19AXActionHandlerBaseC2Ev(%"class.ui::AXActionHandlerBase"*) unnamed_addr #1 align 2 {
  %2 = tail call dereferenceable(32) %"class.ui::AXTreeID"* @_ZN2ui15AXTreeIDUnknownEv() #5
  %3 = getelementptr inbounds %"class.ui::AXActionHandlerBase", %"class.ui::AXActionHandlerBase"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2ui19AXActionHandlerBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.ui::AXActionHandlerBase", %"class.ui::AXActionHandlerBase"* %0, i64 0, i32 1
  tail call void @_ZN2ui8AXTreeIDC1ERKS0_(%"class.ui::AXTreeID"* %4, %"class.ui::AXTreeID"* dereferenceable(32) %2) #5
  ret void
}

declare dereferenceable(32) %"class.ui::AXTreeID"* @_ZN2ui15AXTreeIDUnknownEv() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui19AXActionHandlerBaseC2ERKNS_8AXTreeIDE(%"class.ui::AXActionHandlerBase"*, %"class.ui::AXTreeID"* dereferenceable(32)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.ui::AXActionHandlerBase", %"class.ui::AXActionHandlerBase"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2ui19AXActionHandlerBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.ui::AXActionHandlerBase", %"class.ui::AXActionHandlerBase"* %0, i64 0, i32 1
  tail call void @_ZN2ui8AXTreeIDC1ERKS0_(%"class.ui::AXTreeID"* %4, %"class.ui::AXTreeID"* dereferenceable(32) %1) #5
  ret void
}

declare void @_ZN2ui8AXTreeIDC1ERKS0_(%"class.ui::AXTreeID"*, %"class.ui::AXTreeID"* dereferenceable(32)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui19AXActionHandlerBaseD2Ev(%"class.ui::AXActionHandlerBase"*) unnamed_addr #1 align 2 {
  %2 = alloca %"class.ui::AXTreeID", align 8
  %3 = getelementptr inbounds %"class.ui::AXActionHandlerBase", %"class.ui::AXActionHandlerBase"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2ui19AXActionHandlerBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = tail call %"class.ui::AXActionHandlerRegistry"* @_ZN2ui23AXActionHandlerRegistry11GetInstanceEv() #5
  %5 = getelementptr inbounds %"class.ui::AXActionHandlerBase", %"class.ui::AXActionHandlerBase"* %0, i64 0, i32 1
  call void @_ZN2ui8AXTreeIDC1ERKS0_(%"class.ui::AXTreeID"* nonnull %2, %"class.ui::AXTreeID"* dereferenceable(32) %5) #5
  call void @_ZN2ui23AXActionHandlerRegistry14RemoveAXTreeIDENS_8AXTreeIDE(%"class.ui::AXActionHandlerRegistry"* %4, %"class.ui::AXTreeID"* nonnull %2) #5
  ret void
}

declare %"class.ui::AXActionHandlerRegistry"* @_ZN2ui23AXActionHandlerRegistry11GetInstanceEv() local_unnamed_addr #2

declare void @_ZN2ui23AXActionHandlerRegistry14RemoveAXTreeIDENS_8AXTreeIDE(%"class.ui::AXActionHandlerRegistry"*, %"class.ui::AXTreeID"*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN2ui19AXActionHandlerBaseD0Ev(%"class.ui::AXActionHandlerBase"* nocapture readnone) unnamed_addr #3 align 2 {
  tail call void @llvm.trap() #6
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui19AXActionHandlerBase11SetAXTreeIDENS_8AXTreeIDE(%"class.ui::AXActionHandlerBase"*, %"class.ui::AXTreeID"*) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.ui::AXTreeID", align 8
  %4 = tail call %"class.ui::AXActionHandlerRegistry"* @_ZN2ui23AXActionHandlerRegistry11GetInstanceEv() #5
  %5 = getelementptr inbounds %"class.ui::AXActionHandlerBase", %"class.ui::AXActionHandlerBase"* %0, i64 0, i32 1
  call void @_ZN2ui8AXTreeIDC1ERKS0_(%"class.ui::AXTreeID"* nonnull %3, %"class.ui::AXTreeID"* dereferenceable(32) %5) #5
  call void @_ZN2ui23AXActionHandlerRegistry14RemoveAXTreeIDENS_8AXTreeIDE(%"class.ui::AXActionHandlerRegistry"* %4, %"class.ui::AXTreeID"* nonnull %3) #5
  %6 = call dereferenceable(32) %"class.ui::AXTreeID"* @_ZN2ui8AXTreeIDaSERKS0_(%"class.ui::AXTreeID"* %5, %"class.ui::AXTreeID"* dereferenceable(32) %1) #5
  %7 = call %"class.ui::AXActionHandlerRegistry"* @_ZN2ui23AXActionHandlerRegistry11GetInstanceEv() #5
  call void @_ZN2ui23AXActionHandlerRegistry11SetAXTreeIDERKNS_8AXTreeIDEPNS_19AXActionHandlerBaseE(%"class.ui::AXActionHandlerRegistry"* %7, %"class.ui::AXTreeID"* dereferenceable(32) %5, %"class.ui::AXActionHandlerBase"* %0) #5
  ret void
}

declare dereferenceable(32) %"class.ui::AXTreeID"* @_ZN2ui8AXTreeIDaSERKS0_(%"class.ui::AXTreeID"*, %"class.ui::AXTreeID"* dereferenceable(32)) local_unnamed_addr #2

declare void @_ZN2ui23AXActionHandlerRegistry11SetAXTreeIDERKNS_8AXTreeIDEPNS_19AXActionHandlerBaseE(%"class.ui::AXActionHandlerRegistry"*, %"class.ui::AXTreeID"* dereferenceable(32), %"class.ui::AXActionHandlerBase"*) local_unnamed_addr #2

declare void @__cxa_pure_virtual() unnamed_addr

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
