; ModuleID = '../../third_party/pdfium/fxjs/fx_date_helpers.cpp'
source_filename = "../../third_party/pdfium/fxjs/fx_date_helpers.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i32* }

@.str = private unnamed_addr constant [4 x i32] [i32 74, i32 97, i32 110, i32 0], align 4
@.str.1 = private unnamed_addr constant [4 x i32] [i32 70, i32 101, i32 98, i32 0], align 4
@.str.2 = private unnamed_addr constant [4 x i32] [i32 77, i32 97, i32 114, i32 0], align 4
@.str.3 = private unnamed_addr constant [4 x i32] [i32 65, i32 112, i32 114, i32 0], align 4
@.str.4 = private unnamed_addr constant [4 x i32] [i32 77, i32 97, i32 121, i32 0], align 4
@.str.5 = private unnamed_addr constant [4 x i32] [i32 74, i32 117, i32 110, i32 0], align 4
@.str.6 = private unnamed_addr constant [4 x i32] [i32 74, i32 117, i32 108, i32 0], align 4
@.str.7 = private unnamed_addr constant [4 x i32] [i32 65, i32 117, i32 103, i32 0], align 4
@.str.8 = private unnamed_addr constant [4 x i32] [i32 83, i32 101, i32 112, i32 0], align 4
@.str.9 = private unnamed_addr constant [4 x i32] [i32 79, i32 99, i32 116, i32 0], align 4
@.str.10 = private unnamed_addr constant [4 x i32] [i32 78, i32 111, i32 118, i32 0], align 4
@.str.11 = private unnamed_addr constant [4 x i32] [i32 68, i32 101, i32 99, i32 0], align 4
@_ZN4fxjs7kMonthsE = hidden local_unnamed_addr constant [12 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.1, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.2, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.3, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.4, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.5, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.6, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.7, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.8, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.9, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.10, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.11, i32 0, i32 0)], align 16
@.str.12 = private unnamed_addr constant [8 x i32] [i32 74, i32 97, i32 110, i32 117, i32 97, i32 114, i32 121, i32 0], align 4
@.str.13 = private unnamed_addr constant [9 x i32] [i32 70, i32 101, i32 98, i32 114, i32 117, i32 97, i32 114, i32 121, i32 0], align 4
@.str.14 = private unnamed_addr constant [6 x i32] [i32 77, i32 97, i32 114, i32 99, i32 104, i32 0], align 4
@.str.15 = private unnamed_addr constant [6 x i32] [i32 65, i32 112, i32 114, i32 105, i32 108, i32 0], align 4
@.str.16 = private unnamed_addr constant [5 x i32] [i32 74, i32 117, i32 110, i32 101, i32 0], align 4
@.str.17 = private unnamed_addr constant [5 x i32] [i32 74, i32 117, i32 108, i32 121, i32 0], align 4
@.str.18 = private unnamed_addr constant [7 x i32] [i32 65, i32 117, i32 103, i32 117, i32 115, i32 116, i32 0], align 4
@.str.19 = private unnamed_addr constant [10 x i32] [i32 83, i32 101, i32 112, i32 116, i32 101, i32 109, i32 98, i32 101, i32 114, i32 0], align 4
@.str.20 = private unnamed_addr constant [8 x i32] [i32 79, i32 99, i32 116, i32 111, i32 98, i32 101, i32 114, i32 0], align 4
@.str.21 = private unnamed_addr constant [9 x i32] [i32 78, i32 111, i32 118, i32 101, i32 109, i32 98, i32 101, i32 114, i32 0], align 4
@.str.22 = private unnamed_addr constant [9 x i32] [i32 68, i32 101, i32 99, i32 101, i32 109, i32 98, i32 101, i32 114, i32 0], align 4
@_ZN4fxjs11kFullMonthsE = hidden local_unnamed_addr constant [12 x i32*] [i32* getelementptr inbounds ([8 x i32], [8 x i32]* @.str.12, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.13, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32], [6 x i32]* @.str.14, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32], [6 x i32]* @.str.15, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.4, i32 0, i32 0), i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.16, i32 0, i32 0), i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.17, i32 0, i32 0), i32* getelementptr inbounds ([7 x i32], [7 x i32]* @.str.18, i32 0, i32 0), i32* getelementptr inbounds ([10 x i32], [10 x i32]* @.str.19, i32 0, i32 0), i32* getelementptr inbounds ([8 x i32], [8 x i32]* @.str.20, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.21, i32 0, i32 0), i32* getelementptr inbounds ([9 x i32], [9 x i32]* @.str.22, i32 0, i32 0)], align 16
@.str.23 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZZN4fxjs12_GLOBAL__N_113MonthFromTimeEdE23kCumulativeDaysInMonths = internal unnamed_addr constant [11 x i32] [i32 59, i32 90, i32 120, i32 151, i32 181, i32 212, i32 243, i32 273, i32 304, i32 334, i32 365], align 16
@timezone = external local_unnamed_addr global i64, align 8
@_ZN4fxjs12_GLOBAL__N_113leapDaysMonthE = internal unnamed_addr constant [12 x i16] [i16 0, i16 31, i16 60, i16 91, i16 121, i16 152, i16 182, i16 213, i16 244, i16 274, i16 305, i16 335], align 16
@_ZN4fxjs12_GLOBAL__N_19daysMonthE = internal unnamed_addr constant [12 x i16] [i16 0, i16 31, i16 59, i16 90, i16 120, i16 151, i16 181, i16 212, i16 243, i16 273, i16 304, i16 334], align 16
@.str.24 = private unnamed_addr constant [1 x i32] zeroinitializer, align 4

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN4fxjs14FX_GetDateTimeEv() local_unnamed_addr #0 {
  %1 = alloca i64, align 8
  %2 = tail call i32 @_Z25IsPDFSandboxPolicyEnabledm(i64 0) #12
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %49, label %4

4:                                                ; preds = %0
  %5 = bitcast i64* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  %6 = tail call i64 @_Z10FXSYS_timePl(i64* null) #12
  store i64 %6, i64* %1, align 8
  %7 = call %struct.tm* @_Z15FXSYS_localtimePKl(i64* nonnull %1) #12
  %8 = getelementptr inbounds %struct.tm, %struct.tm* %7, i64 0, i32 5
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 1900
  %11 = sitofp i32 %10 to double
  %12 = fadd double %11, -1.970000e+03
  %13 = fmul double %12, 3.650000e+02
  %14 = fadd double %11, -1.969000e+03
  %15 = fmul double %14, 2.500000e-01
  %16 = call double @llvm.floor.f64(double %15) #12
  %17 = fadd double %13, %16
  %18 = fadd double %11, -1.901000e+03
  %19 = fdiv double %18, 1.000000e+02
  %20 = call double @llvm.floor.f64(double %19) #12
  %21 = fsub double %17, %20
  %22 = fadd double %11, -1.601000e+03
  %23 = fdiv double %22, 4.000000e+02
  %24 = call double @llvm.floor.f64(double %23) #12
  %25 = fadd double %24, %21
  %26 = fptosi double %25 to i32
  %27 = sitofp i32 %26 to double
  %28 = fmul double %27, 8.640000e+07
  %29 = getelementptr inbounds %struct.tm, %struct.tm* %7, i64 0, i32 7
  %30 = load i32, i32* %29, align 4
  %31 = sitofp i32 %30 to double
  %32 = fmul double %31, 8.640000e+07
  %33 = fadd double %32, %28
  %34 = getelementptr inbounds %struct.tm, %struct.tm* %7, i64 0, i32 2
  %35 = load i32, i32* %34, align 8
  %36 = sitofp i32 %35 to double
  %37 = fmul double %36, 3.600000e+06
  %38 = fadd double %37, %33
  %39 = getelementptr inbounds %struct.tm, %struct.tm* %7, i64 0, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = sitofp i32 %40 to double
  %42 = fmul double %41, 6.000000e+04
  %43 = fadd double %42, %38
  %44 = getelementptr inbounds %struct.tm, %struct.tm* %7, i64 0, i32 0
  %45 = load i32, i32* %44, align 8
  %46 = sitofp i32 %45 to double
  %47 = fmul double %46, 1.000000e+03
  %48 = fadd double %47, %43
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  br label %49

49:                                               ; preds = %0, %4
  %50 = phi double [ %48, %4 ], [ 0.000000e+00, %0 ]
  ret double %50
}

declare i32 @_Z25IsPDFSandboxPolicyEnabledm(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i64 @_Z10FXSYS_timePl(i64*) local_unnamed_addr #1

declare %struct.tm* @_Z15FXSYS_localtimePKl(i64*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @_ZN4fxjs18FX_GetYearFromTimeEd(double) local_unnamed_addr #3 {
  %2 = fdiv double %0, 0x421D63C37F000000
  %3 = fptosi double %2 to i32
  %4 = add nsw i32 %3, 1970
  %5 = sitofp i32 %4 to double
  %6 = fadd double %5, -1.970000e+03
  %7 = fmul double %6, 3.650000e+02
  %8 = fadd double %5, -1.969000e+03
  %9 = fmul double %8, 2.500000e-01
  %10 = tail call double @llvm.floor.f64(double %9) #12
  %11 = fadd double %7, %10
  %12 = fadd double %5, -1.901000e+03
  %13 = fdiv double %12, 1.000000e+02
  %14 = tail call double @llvm.floor.f64(double %13) #12
  %15 = fsub double %11, %14
  %16 = fadd double %5, -1.601000e+03
  %17 = fdiv double %16, 4.000000e+02
  %18 = tail call double @llvm.floor.f64(double %17) #12
  %19 = fadd double %18, %15
  %20 = fptosi double %19 to i32
  %21 = sitofp i32 %20 to double
  %22 = fmul double %21, 8.640000e+07
  %23 = fcmp ugt double %22, %0
  br i1 %23, label %46, label %24

24:                                               ; preds = %1, %24
  %25 = phi i32 [ %26, %24 ], [ %4, %1 ]
  %26 = add nsw i32 %25, 1
  %27 = sitofp i32 %26 to double
  %28 = fadd double %27, -1.970000e+03
  %29 = fmul double %28, 3.650000e+02
  %30 = fadd double %27, -1.969000e+03
  %31 = fmul double %30, 2.500000e-01
  %32 = tail call double @llvm.floor.f64(double %31) #12
  %33 = fadd double %29, %32
  %34 = fadd double %27, -1.901000e+03
  %35 = fdiv double %34, 1.000000e+02
  %36 = tail call double @llvm.floor.f64(double %35) #12
  %37 = fsub double %33, %36
  %38 = fadd double %27, -1.601000e+03
  %39 = fdiv double %38, 4.000000e+02
  %40 = tail call double @llvm.floor.f64(double %39) #12
  %41 = fadd double %40, %37
  %42 = fptosi double %41 to i32
  %43 = sitofp i32 %42 to double
  %44 = fmul double %43, 8.640000e+07
  %45 = fcmp ugt double %44, %0
  br i1 %45, label %68, label %24

46:                                               ; preds = %1, %46
  %47 = phi i32 [ %67, %46 ], [ %4, %1 ]
  %48 = sitofp i32 %47 to double
  %49 = fadd double %48, -1.970000e+03
  %50 = fmul double %49, 3.650000e+02
  %51 = fadd double %48, -1.969000e+03
  %52 = fmul double %51, 2.500000e-01
  %53 = tail call double @llvm.floor.f64(double %52) #12
  %54 = fadd double %50, %53
  %55 = fadd double %48, -1.901000e+03
  %56 = fdiv double %55, 1.000000e+02
  %57 = tail call double @llvm.floor.f64(double %56) #12
  %58 = fsub double %54, %57
  %59 = fadd double %48, -1.601000e+03
  %60 = fdiv double %59, 4.000000e+02
  %61 = tail call double @llvm.floor.f64(double %60) #12
  %62 = fadd double %61, %58
  %63 = fptosi double %62 to i32
  %64 = sitofp i32 %63 to double
  %65 = fmul double %64, 8.640000e+07
  %66 = fcmp ogt double %65, %0
  %67 = add nsw i32 %47, -1
  br i1 %66, label %46, label %68

68:                                               ; preds = %24, %46
  %69 = phi i32 [ %47, %46 ], [ %25, %24 ]
  ret i32 %69
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @_ZN4fxjs19FX_GetMonthFromTimeEd(double) local_unnamed_addr #3 {
  %2 = tail call fastcc i32 @_ZN4fxjs12_GLOBAL__N_113DayWithinYearEd(double %0) #12
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %96, label %4

4:                                                ; preds = %1
  %5 = icmp slt i32 %2, 31
  br i1 %5, label %96, label %6

6:                                                ; preds = %4
  %7 = fdiv double %0, 0x421D63C37F000000
  %8 = fptosi double %7 to i32
  %9 = add nsw i32 %8, 1970
  %10 = sitofp i32 %9 to double
  %11 = fadd double %10, -1.970000e+03
  %12 = fmul double %11, 3.650000e+02
  %13 = fadd double %10, -1.969000e+03
  %14 = fmul double %13, 2.500000e-01
  %15 = tail call double @llvm.floor.f64(double %14) #12
  %16 = fadd double %12, %15
  %17 = fadd double %10, -1.901000e+03
  %18 = fdiv double %17, 1.000000e+02
  %19 = tail call double @llvm.floor.f64(double %18) #12
  %20 = fsub double %16, %19
  %21 = fadd double %10, -1.601000e+03
  %22 = fdiv double %21, 4.000000e+02
  %23 = tail call double @llvm.floor.f64(double %22) #12
  %24 = fadd double %23, %20
  %25 = fptosi double %24 to i32
  %26 = sitofp i32 %25 to double
  %27 = fmul double %26, 8.640000e+07
  %28 = fcmp ugt double %27, %0
  br i1 %28, label %51, label %29

29:                                               ; preds = %6, %29
  %30 = phi i32 [ %31, %29 ], [ %9, %6 ]
  %31 = add nsw i32 %30, 1
  %32 = sitofp i32 %31 to double
  %33 = fadd double %32, -1.970000e+03
  %34 = fmul double %33, 3.650000e+02
  %35 = fadd double %32, -1.969000e+03
  %36 = fmul double %35, 2.500000e-01
  %37 = tail call double @llvm.floor.f64(double %36) #12
  %38 = fadd double %34, %37
  %39 = fadd double %32, -1.901000e+03
  %40 = fdiv double %39, 1.000000e+02
  %41 = tail call double @llvm.floor.f64(double %40) #12
  %42 = fsub double %38, %41
  %43 = fadd double %32, -1.601000e+03
  %44 = fdiv double %43, 4.000000e+02
  %45 = tail call double @llvm.floor.f64(double %44) #12
  %46 = fadd double %45, %42
  %47 = fptosi double %46 to i32
  %48 = sitofp i32 %47 to double
  %49 = fmul double %48, 8.640000e+07
  %50 = fcmp ugt double %49, %0
  br i1 %50, label %73, label %29

51:                                               ; preds = %6, %51
  %52 = phi i32 [ %72, %51 ], [ %9, %6 ]
  %53 = sitofp i32 %52 to double
  %54 = fadd double %53, -1.970000e+03
  %55 = fmul double %54, 3.650000e+02
  %56 = fadd double %53, -1.969000e+03
  %57 = fmul double %56, 2.500000e-01
  %58 = tail call double @llvm.floor.f64(double %57) #12
  %59 = fadd double %55, %58
  %60 = fadd double %53, -1.901000e+03
  %61 = fdiv double %60, 1.000000e+02
  %62 = tail call double @llvm.floor.f64(double %61) #12
  %63 = fsub double %59, %62
  %64 = fadd double %53, -1.601000e+03
  %65 = fdiv double %64, 4.000000e+02
  %66 = tail call double @llvm.floor.f64(double %65) #12
  %67 = fadd double %66, %63
  %68 = fptosi double %67 to i32
  %69 = sitofp i32 %68 to double
  %70 = fmul double %69, 8.640000e+07
  %71 = fcmp ogt double %70, %0
  %72 = add nsw i32 %52, -1
  br i1 %71, label %51, label %73

73:                                               ; preds = %29, %51
  %74 = phi i32 [ %52, %51 ], [ %30, %29 ]
  %75 = and i32 %74, 3
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %84

77:                                               ; preds = %73
  %78 = srem i32 %74, 100
  %79 = srem i32 %74, 400
  %80 = or i32 %78, %79
  %81 = icmp ne i32 %80, 0
  %82 = zext i1 %81 to i32
  %83 = sub nuw nsw i32 %2, %82
  br label %84

84:                                               ; preds = %77, %73
  %85 = phi i32 [ %2, %73 ], [ %83, %77 ]
  br label %86

86:                                               ; preds = %89, %84
  %87 = phi i64 [ 0, %84 ], [ %93, %89 ]
  %88 = icmp eq i64 %87, 11
  br i1 %88, label %96, label %89

89:                                               ; preds = %86
  %90 = getelementptr inbounds [11 x i32], [11 x i32]* @_ZZN4fxjs12_GLOBAL__N_113MonthFromTimeEdE23kCumulativeDaysInMonths, i64 0, i64 %87
  %91 = load i32, i32* %90, align 4
  %92 = icmp slt i32 %85, %91
  %93 = add nuw nsw i64 %87, 1
  br i1 %92, label %94, label %86

94:                                               ; preds = %89
  %95 = trunc i64 %93 to i32
  br label %96

96:                                               ; preds = %86, %1, %4, %94
  %97 = phi i32 [ %95, %94 ], [ -1, %1 ], [ 0, %4 ], [ -1, %86 ]
  ret i32 %97
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @_ZN4fxjs17FX_GetDayFromTimeEd(double) local_unnamed_addr #3 {
  %2 = tail call fastcc i32 @_ZN4fxjs12_GLOBAL__N_112DateFromTimeEd(double %0)
  ret i32 %2
}

; Function Attrs: nounwind readnone ssp uwtable
define internal fastcc i32 @_ZN4fxjs12_GLOBAL__N_112DateFromTimeEd(double) unnamed_addr #3 {
  %2 = tail call fastcc i32 @_ZN4fxjs12_GLOBAL__N_113DayWithinYearEd(double %0)
  %3 = fdiv double %0, 0x421D63C37F000000
  %4 = fptosi double %3 to i32
  %5 = add nsw i32 %4, 1970
  %6 = sitofp i32 %5 to double
  %7 = fadd double %6, -1.970000e+03
  %8 = fmul double %7, 3.650000e+02
  %9 = fadd double %6, -1.969000e+03
  %10 = fmul double %9, 2.500000e-01
  %11 = tail call double @llvm.floor.f64(double %10) #12
  %12 = fadd double %8, %11
  %13 = fadd double %6, -1.901000e+03
  %14 = fdiv double %13, 1.000000e+02
  %15 = tail call double @llvm.floor.f64(double %14) #12
  %16 = fsub double %12, %15
  %17 = fadd double %6, -1.601000e+03
  %18 = fdiv double %17, 4.000000e+02
  %19 = tail call double @llvm.floor.f64(double %18) #12
  %20 = fadd double %19, %16
  %21 = fptosi double %20 to i32
  %22 = sitofp i32 %21 to double
  %23 = fmul double %22, 8.640000e+07
  %24 = fcmp ugt double %23, %0
  br i1 %24, label %47, label %25

25:                                               ; preds = %1, %25
  %26 = phi i32 [ %27, %25 ], [ %5, %1 ]
  %27 = add nsw i32 %26, 1
  %28 = sitofp i32 %27 to double
  %29 = fadd double %28, -1.970000e+03
  %30 = fmul double %29, 3.650000e+02
  %31 = fadd double %28, -1.969000e+03
  %32 = fmul double %31, 2.500000e-01
  %33 = tail call double @llvm.floor.f64(double %32) #12
  %34 = fadd double %30, %33
  %35 = fadd double %28, -1.901000e+03
  %36 = fdiv double %35, 1.000000e+02
  %37 = tail call double @llvm.floor.f64(double %36) #12
  %38 = fsub double %34, %37
  %39 = fadd double %28, -1.601000e+03
  %40 = fdiv double %39, 4.000000e+02
  %41 = tail call double @llvm.floor.f64(double %40) #12
  %42 = fadd double %41, %38
  %43 = fptosi double %42 to i32
  %44 = sitofp i32 %43 to double
  %45 = fmul double %44, 8.640000e+07
  %46 = fcmp ugt double %45, %0
  br i1 %46, label %69, label %25

47:                                               ; preds = %1, %47
  %48 = phi i32 [ %68, %47 ], [ %5, %1 ]
  %49 = sitofp i32 %48 to double
  %50 = fadd double %49, -1.970000e+03
  %51 = fmul double %50, 3.650000e+02
  %52 = fadd double %49, -1.969000e+03
  %53 = fmul double %52, 2.500000e-01
  %54 = tail call double @llvm.floor.f64(double %53) #12
  %55 = fadd double %51, %54
  %56 = fadd double %49, -1.901000e+03
  %57 = fdiv double %56, 1.000000e+02
  %58 = tail call double @llvm.floor.f64(double %57) #12
  %59 = fsub double %55, %58
  %60 = fadd double %49, -1.601000e+03
  %61 = fdiv double %60, 4.000000e+02
  %62 = tail call double @llvm.floor.f64(double %61) #12
  %63 = fadd double %62, %59
  %64 = fptosi double %63 to i32
  %65 = sitofp i32 %64 to double
  %66 = fmul double %65, 8.640000e+07
  %67 = fcmp ogt double %66, %0
  %68 = add nsw i32 %48, -1
  br i1 %67, label %47, label %69

69:                                               ; preds = %25, %47
  %70 = phi i32 [ %48, %47 ], [ %26, %25 ]
  %71 = and i32 %70, 3
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %80

73:                                               ; preds = %69
  %74 = srem i32 %70, 100
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %80

76:                                               ; preds = %73
  %77 = srem i32 %70, 400
  %78 = icmp ne i32 %77, 0
  %79 = sext i1 %78 to i32
  br label %80

80:                                               ; preds = %69, %73, %76
  %81 = phi i32 [ 0, %69 ], [ -1, %73 ], [ %79, %76 ]
  %82 = icmp slt i32 %2, 0
  br i1 %82, label %187, label %83

83:                                               ; preds = %80
  %84 = icmp slt i32 %2, 31
  br i1 %84, label %153, label %85

85:                                               ; preds = %83
  br i1 %24, label %108, label %86

86:                                               ; preds = %85, %86
  %87 = phi i32 [ %88, %86 ], [ %5, %85 ]
  %88 = add nsw i32 %87, 1
  %89 = sitofp i32 %88 to double
  %90 = fadd double %89, -1.970000e+03
  %91 = fmul double %90, 3.650000e+02
  %92 = fadd double %89, -1.969000e+03
  %93 = fmul double %92, 2.500000e-01
  %94 = tail call double @llvm.floor.f64(double %93) #12
  %95 = fadd double %91, %94
  %96 = fadd double %89, -1.901000e+03
  %97 = fdiv double %96, 1.000000e+02
  %98 = tail call double @llvm.floor.f64(double %97) #12
  %99 = fsub double %95, %98
  %100 = fadd double %89, -1.601000e+03
  %101 = fdiv double %100, 4.000000e+02
  %102 = tail call double @llvm.floor.f64(double %101) #12
  %103 = fadd double %102, %99
  %104 = fptosi double %103 to i32
  %105 = sitofp i32 %104 to double
  %106 = fmul double %105, 8.640000e+07
  %107 = fcmp ugt double %106, %0
  br i1 %107, label %130, label %86

108:                                              ; preds = %85, %108
  %109 = phi i32 [ %129, %108 ], [ %5, %85 ]
  %110 = sitofp i32 %109 to double
  %111 = fadd double %110, -1.970000e+03
  %112 = fmul double %111, 3.650000e+02
  %113 = fadd double %110, -1.969000e+03
  %114 = fmul double %113, 2.500000e-01
  %115 = tail call double @llvm.floor.f64(double %114) #12
  %116 = fadd double %112, %115
  %117 = fadd double %110, -1.901000e+03
  %118 = fdiv double %117, 1.000000e+02
  %119 = tail call double @llvm.floor.f64(double %118) #12
  %120 = fsub double %116, %119
  %121 = fadd double %110, -1.601000e+03
  %122 = fdiv double %121, 4.000000e+02
  %123 = tail call double @llvm.floor.f64(double %122) #12
  %124 = fadd double %123, %120
  %125 = fptosi double %124 to i32
  %126 = sitofp i32 %125 to double
  %127 = fmul double %126, 8.640000e+07
  %128 = fcmp ogt double %127, %0
  %129 = add nsw i32 %109, -1
  br i1 %128, label %108, label %130

130:                                              ; preds = %86, %108
  %131 = phi i32 [ %109, %108 ], [ %87, %86 ]
  %132 = and i32 %131, 3
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %141

134:                                              ; preds = %130
  %135 = srem i32 %131, 100
  %136 = srem i32 %131, 400
  %137 = or i32 %135, %136
  %138 = icmp ne i32 %137, 0
  %139 = zext i1 %138 to i32
  %140 = sub nuw nsw i32 %2, %139
  br label %141

141:                                              ; preds = %134, %130
  %142 = phi i32 [ %2, %130 ], [ %140, %134 ]
  br label %143

143:                                              ; preds = %146, %141
  %144 = phi i64 [ 0, %141 ], [ %150, %146 ]
  %145 = icmp eq i64 %144, 11
  br i1 %145, label %187, label %146

146:                                              ; preds = %143
  %147 = getelementptr inbounds [11 x i32], [11 x i32]* @_ZZN4fxjs12_GLOBAL__N_113MonthFromTimeEdE23kCumulativeDaysInMonths, i64 0, i64 %144
  %148 = load i32, i32* %147, align 4
  %149 = icmp slt i32 %142, %148
  %150 = add nuw nsw i64 %144, 1
  br i1 %149, label %151, label %143

151:                                              ; preds = %146
  %152 = trunc i64 %150 to i32
  switch i32 %152, label %187 [
    i32 0, label %153
    i32 1, label %155
    i32 2, label %157
    i32 3, label %160
    i32 4, label %163
    i32 5, label %166
    i32 6, label %169
    i32 7, label %172
    i32 8, label %175
    i32 9, label %178
    i32 10, label %181
    i32 11, label %184
  ]

153:                                              ; preds = %83, %151
  %154 = add nsw i32 %2, 1
  br label %187

155:                                              ; preds = %151
  %156 = add nsw i32 %2, -30
  br label %187

157:                                              ; preds = %151
  %158 = add nsw i32 %2, -58
  %159 = add i32 %158, %81
  br label %187

160:                                              ; preds = %151
  %161 = add nsw i32 %2, -89
  %162 = add i32 %161, %81
  br label %187

163:                                              ; preds = %151
  %164 = add nsw i32 %2, -119
  %165 = add i32 %164, %81
  br label %187

166:                                              ; preds = %151
  %167 = add nsw i32 %2, -150
  %168 = add i32 %167, %81
  br label %187

169:                                              ; preds = %151
  %170 = add nsw i32 %2, -180
  %171 = add i32 %170, %81
  br label %187

172:                                              ; preds = %151
  %173 = add nsw i32 %2, -211
  %174 = add i32 %173, %81
  br label %187

175:                                              ; preds = %151
  %176 = add nsw i32 %2, -242
  %177 = add i32 %176, %81
  br label %187

178:                                              ; preds = %151
  %179 = add nsw i32 %2, -272
  %180 = add i32 %179, %81
  br label %187

181:                                              ; preds = %151
  %182 = add nsw i32 %2, -303
  %183 = add i32 %182, %81
  br label %187

184:                                              ; preds = %151
  %185 = add nsw i32 %2, -333
  %186 = add i32 %185, %81
  br label %187

187:                                              ; preds = %143, %80, %151, %184, %181, %178, %175, %172, %169, %166, %163, %160, %157, %155, %153
  %188 = phi i32 [ %186, %184 ], [ %183, %181 ], [ %180, %178 ], [ %177, %175 ], [ %174, %172 ], [ %171, %169 ], [ %168, %166 ], [ %165, %163 ], [ %162, %160 ], [ %159, %157 ], [ %156, %155 ], [ %154, %153 ], [ 0, %151 ], [ 0, %80 ], [ 0, %143 ]
  ret i32 %188
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @_ZN4fxjs18FX_GetHourFromTimeEd(double) local_unnamed_addr #4 {
  %2 = fdiv double %0, 3.600000e+06
  %3 = tail call double @llvm.floor.f64(double %2)
  %4 = tail call double @fmod(double %3, double 2.400000e+01) #12
  %5 = fcmp olt double %4, 0.000000e+00
  %6 = fadd double %4, 2.400000e+01
  %7 = select i1 %5, double %6, double %4
  %8 = fptosi double %7 to i32
  ret i32 %8
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #5

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @_ZN4fxjs17FX_GetMinFromTimeEd(double) local_unnamed_addr #4 {
  %2 = fdiv double %0, 6.000000e+04
  %3 = tail call double @llvm.floor.f64(double %2)
  %4 = tail call double @fmod(double %3, double 6.000000e+01) #12
  %5 = fcmp olt double %4, 0.000000e+00
  %6 = fadd double %4, 6.000000e+01
  %7 = select i1 %5, double %6, double %4
  %8 = fptosi double %7 to i32
  ret i32 %8
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @_ZN4fxjs17FX_GetSecFromTimeEd(double) local_unnamed_addr #4 {
  %2 = fdiv double %0, 1.000000e+03
  %3 = tail call double @llvm.floor.f64(double %2)
  %4 = tail call double @fmod(double %3, double 6.000000e+01) #12
  %5 = fcmp olt double %4, 0.000000e+00
  %6 = fadd double %4, 6.000000e+01
  %7 = select i1 %5, double %6, double %4
  %8 = fptosi double %7 to i32
  ret i32 %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN4fxjs15FX_IsValidMonthEi(i32) local_unnamed_addr #6 {
  %2 = add i32 %0, -1
  %3 = icmp ult i32 %2, 12
  ret i1 %3
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN4fxjs13FX_IsValidDayEi(i32) local_unnamed_addr #6 {
  %2 = add i32 %0, -1
  %3 = icmp ult i32 %2, 31
  ret i1 %3
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN4fxjs16FX_IsValid24HourEi(i32) local_unnamed_addr #6 {
  %2 = icmp ult i32 %0, 25
  ret i1 %2
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN4fxjs16FX_IsValidMinuteEi(i32) local_unnamed_addr #6 {
  %2 = icmp ult i32 %0, 61
  ret i1 %2
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN4fxjs16FX_IsValidSecondEi(i32) local_unnamed_addr #6 {
  %2 = icmp ult i32 %0, 61
  ret i1 %2
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN4fxjs12FX_LocalTimeEd(double) local_unnamed_addr #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = tail call i32 @_Z25IsPDFSandboxPolicyEnabledm(i64 0) #12
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %13, label %6

6:                                                ; preds = %1
  %7 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #12
  store i64 0, i64* %3, align 8
  %8 = call i64 @_Z10FXSYS_timePl(i64* nonnull %3) #12
  %9 = call %struct.tm* @_Z15FXSYS_localtimePKl(i64* nonnull %3) #12
  %10 = load i64, i64* @timezone, align 8
  %11 = mul i64 %10, -1000
  %12 = sitofp i64 %11 to double
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #12
  br label %13

13:                                               ; preds = %1, %6
  %14 = phi double [ %12, %6 ], [ 0.000000e+00, %1 ]
  %15 = fadd double %14, %0
  %16 = call i32 @_Z25IsPDFSandboxPolicyEnabledm(i64 0) #12
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %31, label %18

18:                                               ; preds = %13
  %19 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #12
  %20 = fdiv double %0, 1.000000e+03
  %21 = fptosi double %20 to i64
  store i64 %21, i64* %2, align 8
  %22 = call %struct.tm* @_Z15FXSYS_localtimePKl(i64* nonnull %2) #12
  %23 = icmp eq %struct.tm* %22, null
  br i1 %23, label %29, label %24

24:                                               ; preds = %18
  %25 = getelementptr inbounds %struct.tm, %struct.tm* %22, i64 0, i32 8
  %26 = load i32, i32* %25, align 8
  %27 = icmp sgt i32 %26, 0
  %28 = select i1 %27, i32 3600000, i32 0
  br label %29

29:                                               ; preds = %24, %18
  %30 = phi i32 [ 0, %18 ], [ %28, %24 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #12
  br label %31

31:                                               ; preds = %13, %29
  %32 = phi i32 [ %30, %29 ], [ 0, %13 ]
  %33 = sitofp i32 %32 to double
  %34 = fadd double %15, %33
  ret double %34
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @_ZN4fxjs10FX_MakeDayEiii(i32, i32, i32) local_unnamed_addr #4 {
  %4 = sitofp i32 %0 to double
  %5 = sitofp i32 %1 to double
  %6 = sitofp i32 %2 to double
  %7 = fdiv double %5, 1.200000e+01
  %8 = tail call double @llvm.floor.f64(double %7)
  %9 = fadd double %8, %4
  %10 = tail call double @fmod(double %5, double 1.200000e+01) #12
  %11 = fcmp olt double %10, 0.000000e+00
  %12 = fadd double %10, 1.200000e+01
  %13 = select i1 %11, double %12, double %10
  %14 = fptosi double %9 to i32
  %15 = fptosi double %13 to i32
  %16 = and i32 %14, 3
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %24

18:                                               ; preds = %3
  %19 = srem i32 %14, 100
  %20 = srem i32 %14, 400
  %21 = or i32 %19, %20
  %22 = icmp eq i32 %21, 0
  %23 = select i1 %22, [12 x i16]* @_ZN4fxjs12_GLOBAL__N_19daysMonthE, [12 x i16]* @_ZN4fxjs12_GLOBAL__N_113leapDaysMonthE
  br label %24

24:                                               ; preds = %3, %18
  %25 = phi [12 x i16]* [ @_ZN4fxjs12_GLOBAL__N_19daysMonthE, %3 ], [ %23, %18 ]
  %26 = sitofp i32 %14 to double
  %27 = fadd double %26, -1.970000e+03
  %28 = fmul double %27, 3.650000e+02
  %29 = fadd double %26, -1.969000e+03
  %30 = fmul double %29, 2.500000e-01
  %31 = tail call double @llvm.floor.f64(double %30) #12
  %32 = fadd double %28, %31
  %33 = fadd double %26, -1.901000e+03
  %34 = fdiv double %33, 1.000000e+02
  %35 = tail call double @llvm.floor.f64(double %34) #12
  %36 = fsub double %32, %35
  %37 = fadd double %26, -1.601000e+03
  %38 = fdiv double %37, 4.000000e+02
  %39 = tail call double @llvm.floor.f64(double %38) #12
  %40 = fadd double %39, %36
  %41 = fptosi double %40 to i32
  %42 = sitofp i32 %41 to double
  %43 = fmul double %42, 8.640000e+07
  %44 = sext i32 %15 to i64
  %45 = getelementptr inbounds [12 x i16], [12 x i16]* %25, i64 0, i64 %44
  %46 = load i16, i16* %45, align 2
  %47 = uitofp i16 %46 to double
  %48 = fmul double %47, 8.640000e+07
  %49 = fadd double %43, %48
  %50 = fdiv double %49, 0x421D63C37F000000
  %51 = fptosi double %50 to i32
  %52 = add nsw i32 %51, 1970
  %53 = sitofp i32 %52 to double
  %54 = fadd double %53, -1.970000e+03
  %55 = fmul double %54, 3.650000e+02
  %56 = fadd double %53, -1.969000e+03
  %57 = fmul double %56, 2.500000e-01
  %58 = tail call double @llvm.floor.f64(double %57) #12
  %59 = fadd double %55, %58
  %60 = fadd double %53, -1.901000e+03
  %61 = fdiv double %60, 1.000000e+02
  %62 = tail call double @llvm.floor.f64(double %61) #12
  %63 = fsub double %59, %62
  %64 = fadd double %53, -1.601000e+03
  %65 = fdiv double %64, 4.000000e+02
  %66 = tail call double @llvm.floor.f64(double %65) #12
  %67 = fadd double %66, %63
  %68 = fptosi double %67 to i32
  %69 = sitofp i32 %68 to double
  %70 = fmul double %69, 8.640000e+07
  %71 = fcmp ugt double %70, %49
  br i1 %71, label %94, label %72

72:                                               ; preds = %24, %72
  %73 = phi i32 [ %74, %72 ], [ %52, %24 ]
  %74 = add nsw i32 %73, 1
  %75 = sitofp i32 %74 to double
  %76 = fadd double %75, -1.970000e+03
  %77 = fmul double %76, 3.650000e+02
  %78 = fadd double %75, -1.969000e+03
  %79 = fmul double %78, 2.500000e-01
  %80 = tail call double @llvm.floor.f64(double %79) #12
  %81 = fadd double %77, %80
  %82 = fadd double %75, -1.901000e+03
  %83 = fdiv double %82, 1.000000e+02
  %84 = tail call double @llvm.floor.f64(double %83) #12
  %85 = fsub double %81, %84
  %86 = fadd double %75, -1.601000e+03
  %87 = fdiv double %86, 4.000000e+02
  %88 = tail call double @llvm.floor.f64(double %87) #12
  %89 = fadd double %88, %85
  %90 = fptosi double %89 to i32
  %91 = sitofp i32 %90 to double
  %92 = fmul double %91, 8.640000e+07
  %93 = fcmp ugt double %92, %49
  br i1 %93, label %116, label %72

94:                                               ; preds = %24, %94
  %95 = phi i32 [ %115, %94 ], [ %52, %24 ]
  %96 = sitofp i32 %95 to double
  %97 = fadd double %96, -1.970000e+03
  %98 = fmul double %97, 3.650000e+02
  %99 = fadd double %96, -1.969000e+03
  %100 = fmul double %99, 2.500000e-01
  %101 = tail call double @llvm.floor.f64(double %100) #12
  %102 = fadd double %98, %101
  %103 = fadd double %96, -1.901000e+03
  %104 = fdiv double %103, 1.000000e+02
  %105 = tail call double @llvm.floor.f64(double %104) #12
  %106 = fsub double %102, %105
  %107 = fadd double %96, -1.601000e+03
  %108 = fdiv double %107, 4.000000e+02
  %109 = tail call double @llvm.floor.f64(double %108) #12
  %110 = fadd double %109, %106
  %111 = fptosi double %110 to i32
  %112 = sitofp i32 %111 to double
  %113 = fmul double %112, 8.640000e+07
  %114 = fcmp ogt double %113, %49
  %115 = add nsw i32 %95, -1
  br i1 %114, label %94, label %118

116:                                              ; preds = %72
  %117 = sitofp i32 %73 to double
  br label %118

118:                                              ; preds = %94, %116
  %119 = phi double [ %117, %116 ], [ %96, %94 ]
  %120 = fcmp une double %9, %119
  br i1 %120, label %201, label %121

121:                                              ; preds = %118
  %122 = tail call fastcc i32 @_ZN4fxjs12_GLOBAL__N_113DayWithinYearEd(double %49) #12
  %123 = icmp slt i32 %122, 0
  br i1 %123, label %195, label %124

124:                                              ; preds = %121
  %125 = icmp slt i32 %122, 31
  br i1 %125, label %195, label %126

126:                                              ; preds = %124
  br i1 %71, label %149, label %127

127:                                              ; preds = %126, %127
  %128 = phi i32 [ %129, %127 ], [ %52, %126 ]
  %129 = add nsw i32 %128, 1
  %130 = sitofp i32 %129 to double
  %131 = fadd double %130, -1.970000e+03
  %132 = fmul double %131, 3.650000e+02
  %133 = fadd double %130, -1.969000e+03
  %134 = fmul double %133, 2.500000e-01
  %135 = tail call double @llvm.floor.f64(double %134) #12
  %136 = fadd double %132, %135
  %137 = fadd double %130, -1.901000e+03
  %138 = fdiv double %137, 1.000000e+02
  %139 = tail call double @llvm.floor.f64(double %138) #12
  %140 = fsub double %136, %139
  %141 = fadd double %130, -1.601000e+03
  %142 = fdiv double %141, 4.000000e+02
  %143 = tail call double @llvm.floor.f64(double %142) #12
  %144 = fadd double %143, %140
  %145 = fptosi double %144 to i32
  %146 = sitofp i32 %145 to double
  %147 = fmul double %146, 8.640000e+07
  %148 = fcmp ugt double %147, %49
  br i1 %148, label %171, label %127

149:                                              ; preds = %126, %149
  %150 = phi i32 [ %170, %149 ], [ %52, %126 ]
  %151 = sitofp i32 %150 to double
  %152 = fadd double %151, -1.970000e+03
  %153 = fmul double %152, 3.650000e+02
  %154 = fadd double %151, -1.969000e+03
  %155 = fmul double %154, 2.500000e-01
  %156 = tail call double @llvm.floor.f64(double %155) #12
  %157 = fadd double %153, %156
  %158 = fadd double %151, -1.901000e+03
  %159 = fdiv double %158, 1.000000e+02
  %160 = tail call double @llvm.floor.f64(double %159) #12
  %161 = fsub double %157, %160
  %162 = fadd double %151, -1.601000e+03
  %163 = fdiv double %162, 4.000000e+02
  %164 = tail call double @llvm.floor.f64(double %163) #12
  %165 = fadd double %164, %161
  %166 = fptosi double %165 to i32
  %167 = sitofp i32 %166 to double
  %168 = fmul double %167, 8.640000e+07
  %169 = fcmp ogt double %168, %49
  %170 = add nsw i32 %150, -1
  br i1 %169, label %149, label %171

171:                                              ; preds = %127, %149
  %172 = phi i32 [ %150, %149 ], [ %128, %127 ]
  %173 = and i32 %172, 3
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %182

175:                                              ; preds = %171
  %176 = srem i32 %172, 100
  %177 = srem i32 %172, 400
  %178 = or i32 %176, %177
  %179 = icmp ne i32 %178, 0
  %180 = zext i1 %179 to i32
  %181 = sub nuw nsw i32 %122, %180
  br label %182

182:                                              ; preds = %175, %171
  %183 = phi i32 [ %122, %171 ], [ %181, %175 ]
  br label %184

184:                                              ; preds = %187, %182
  %185 = phi i64 [ 0, %182 ], [ %191, %187 ]
  %186 = icmp eq i64 %185, 11
  br i1 %186, label %195, label %187

187:                                              ; preds = %184
  %188 = getelementptr inbounds [11 x i32], [11 x i32]* @_ZZN4fxjs12_GLOBAL__N_113MonthFromTimeEdE23kCumulativeDaysInMonths, i64 0, i64 %185
  %189 = load i32, i32* %188, align 4
  %190 = icmp slt i32 %183, %189
  %191 = add nuw nsw i64 %185, 1
  br i1 %190, label %192, label %184

192:                                              ; preds = %187
  %193 = trunc i64 %191 to i32
  %194 = sitofp i32 %193 to double
  br label %195

195:                                              ; preds = %184, %121, %124, %192
  %196 = phi double [ %194, %192 ], [ -1.000000e+00, %121 ], [ 0.000000e+00, %124 ], [ -1.000000e+00, %184 ]
  %197 = fcmp une double %13, %196
  br i1 %197, label %201, label %198

198:                                              ; preds = %195
  %199 = tail call fastcc i32 @_ZN4fxjs12_GLOBAL__N_112DateFromTimeEd(double %49)
  %200 = icmp eq i32 %199, 1
  br i1 %200, label %203, label %201

201:                                              ; preds = %198, %195, %118
  %202 = tail call double @nan(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.23, i64 0, i64 0)) #13
  br label %210

203:                                              ; preds = %198
  %204 = fdiv double %49, 8.640000e+07
  %205 = tail call double @llvm.floor.f64(double %204) #12
  %206 = fptosi double %205 to i32
  %207 = sitofp i32 %206 to double
  %208 = fadd double %6, %207
  %209 = fadd double %208, -1.000000e+00
  br label %210

210:                                              ; preds = %203, %201
  %211 = phi double [ %202, %201 ], [ %209, %203 ]
  ret double %211
}

; Function Attrs: nounwind readonly
declare double @nan(i8*) local_unnamed_addr #7

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden double @_ZN4fxjs11FX_MakeTimeEiiii(i32, i32, i32, i32) local_unnamed_addr #6 {
  %5 = sitofp i32 %0 to double
  %6 = sitofp i32 %1 to double
  %7 = sitofp i32 %2 to double
  %8 = sitofp i32 %3 to double
  %9 = fmul double %5, 3.600000e+06
  %10 = fmul double %6, 6.000000e+04
  %11 = fadd double %9, %10
  %12 = fmul double %7, 1.000000e+03
  %13 = fadd double %11, %12
  %14 = fadd double %13, %8
  ret double %14
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden double @_ZN4fxjs11FX_MakeDateEdd(double, double) local_unnamed_addr #8 {
  %3 = tail call double @llvm.fabs.f64(double %0) #14
  %4 = fcmp one double %3, 0x7FF0000000000000
  %5 = tail call double @llvm.fabs.f64(double %1) #14
  %6 = fcmp one double %5, 0x7FF0000000000000
  %7 = and i1 %4, %6
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = tail call double @nan(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.23, i64 0, i64 0)) #13
  br label %13

10:                                               ; preds = %2
  %11 = fmul double %0, 8.640000e+07
  %12 = fadd double %11, %1
  br label %13

13:                                               ; preds = %10, %8
  %14 = phi double [ %12, %10 ], [ %9, %8 ]
  ret double %14
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4fxjs21FX_ParseStringIntegerERKN5fxcrt10WideStringEmPmm(%"class.fxcrt::WideString"* nocapture readonly dereferenceable(8), i64, i64* nocapture, i64) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %6

6:                                                ; preds = %34, %4
  %7 = phi i32 [ 0, %4 ], [ %40, %34 ]
  %8 = phi i64 [ 0, %4 ], [ %41, %34 ]
  %9 = phi i64 [ %1, %4 ], [ %43, %34 ]
  %10 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %5, align 8
  %11 = icmp eq %"class.fxcrt::StringDataTemplate"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %10, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  br label %15

15:                                               ; preds = %6, %12
  %16 = phi i64 [ %14, %12 ], [ 0, %6 ]
  %17 = icmp uge i64 %9, %16
  %18 = sub nuw i64 %9, %1
  %19 = icmp ugt i64 %18, 10
  %20 = or i1 %19, %17
  br i1 %20, label %44, label %21

21:                                               ; preds = %15
  br i1 %11, label %26, label %22

22:                                               ; preds = %21
  %23 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %10, i64 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = icmp ugt i64 %24, %9
  br i1 %25, label %27, label %26, !prof !2

26:                                               ; preds = %22, %21
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %10, i64 0, i32 3, i64 %9
  %29 = load i32, i32* %28, align 4
  %30 = icmp ugt i32 %29, 127
  br i1 %30, label %44, label %31

31:                                               ; preds = %27
  %32 = tail call i32 @iswdigit(i32 %29) #12
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %44, label %34

34:                                               ; preds = %31
  %35 = mul nsw i32 %7, 10
  %36 = tail call i32 @iswdigit(i32 %29) #12
  %37 = icmp eq i32 %36, 0
  %38 = add nsw i32 %29, -48
  %39 = select i1 %37, i32 0, i32 %38
  %40 = add nsw i32 %39, %35
  %41 = add nuw nsw i64 %8, 1
  %42 = icmp ult i64 %41, %3
  %43 = add nuw i64 %9, 1
  br i1 %42, label %6, label %44

44:                                               ; preds = %31, %27, %15, %34
  %45 = phi i32 [ %40, %34 ], [ %7, %15 ], [ %7, %31 ], [ %7, %27 ]
  %46 = phi i64 [ %41, %34 ], [ %8, %15 ], [ %8, %31 ], [ %8, %27 ]
  store i64 %46, i64* %2, align 8
  ret i32 %45
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4fxjs23FX_ParseDateUsingFormatERKN5fxcrt10WideStringES3_Pd(%"class.fxcrt::WideString"* dereferenceable(8), %"class.fxcrt::WideString"* nocapture readonly dereferenceable(8), double* nocapture) local_unnamed_addr #0 {
  %4 = alloca %"class.fxcrt::StringViewTemplate", align 8
  %5 = alloca %"class.fxcrt::WideString", align 8
  %6 = alloca %"class.fxcrt::WideString", align 8
  %7 = alloca %"class.fxcrt::WideString", align 8
  %8 = tail call double @_ZN4fxjs14FX_GetDateTimeEv()
  %9 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %9, align 8
  %11 = icmp eq %"class.fxcrt::StringDataTemplate"* %10, null
  br i1 %11, label %24, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %10, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %24, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %19 = icmp eq %"class.fxcrt::StringDataTemplate"* %18, null
  br i1 %19, label %24, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %18, i64 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %16, %3, %20, %12
  store double %8, double* %2, align 8
  br label %950

25:                                               ; preds = %20
  %26 = tail call i32 @_ZN4fxjs18FX_GetYearFromTimeEd(double %8)
  %27 = tail call i32 @_ZN4fxjs19FX_GetMonthFromTimeEd(double %8)
  %28 = add nsw i32 %27, 1
  %29 = tail call fastcc i32 @_ZN4fxjs12_GLOBAL__N_112DateFromTimeEd(double %8) #12
  %30 = fdiv double %8, 3.600000e+06
  %31 = tail call double @llvm.floor.f64(double %30) #12
  %32 = tail call double @fmod(double %31, double 2.400000e+01) #12
  %33 = fcmp olt double %32, 0.000000e+00
  %34 = fadd double %32, 2.400000e+01
  %35 = select i1 %33, double %34, double %32
  %36 = fptosi double %35 to i32
  %37 = fdiv double %8, 6.000000e+04
  %38 = tail call double @llvm.floor.f64(double %37) #12
  %39 = tail call double @fmod(double %38, double 6.000000e+01) #12
  %40 = fcmp olt double %39, 0.000000e+00
  %41 = fadd double %39, 6.000000e+01
  %42 = select i1 %40, double %41, double %39
  %43 = fptosi double %42 to i32
  %44 = fdiv double %8, 1.000000e+03
  %45 = tail call double @llvm.floor.f64(double %44) #12
  %46 = tail call double @fmod(double %45, double 6.000000e+01) #12
  %47 = fcmp olt double %46, 0.000000e+00
  %48 = fadd double %46, 6.000000e+01
  %49 = select i1 %47, double %48, double %46
  %50 = fptosi double %49 to i32
  %51 = bitcast %"class.fxcrt::WideString"* %6 to i8*
  %52 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = bitcast %"class.fxcrt::WideString"* %7 to i8*
  %54 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = bitcast %"class.fxcrt::StringViewTemplate"* %4 to i8*
  %56 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %4, i64 0, i32 0, i32 0, i32 0
  %57 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %4, i64 0, i32 0, i32 1
  %58 = bitcast %"class.fxcrt::WideString"* %5 to i8*
  %59 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %60

60:                                               ; preds = %873, %25
  %61 = phi i32 [ %874, %873 ], [ %26, %25 ]
  %62 = phi i32 [ %875, %873 ], [ %28, %25 ]
  %63 = phi i32 [ %876, %873 ], [ %29, %25 ]
  %64 = phi i32 [ %877, %873 ], [ %36, %25 ]
  %65 = phi i32 [ %878, %873 ], [ %43, %25 ]
  %66 = phi i32 [ %879, %873 ], [ %50, %25 ]
  %67 = phi i8 [ %880, %873 ], [ 0, %25 ]
  %68 = phi i8 [ %886, %873 ], [ 0, %25 ]
  %69 = phi i8 [ %887, %873 ], [ 0, %25 ]
  %70 = phi i64 [ %883, %873 ], [ 0, %25 ]
  %71 = phi i64 [ %884, %873 ], [ 0, %25 ]
  %72 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %9, align 8
  %73 = icmp eq %"class.fxcrt::StringDataTemplate"* %72, null
  %74 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %72, i64 0, i32 1
  %75 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %72, i64 0, i32 1
  %76 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %77 = icmp eq %"class.fxcrt::StringDataTemplate"* %76, null
  %78 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %76, i64 0, i32 1
  br label %79

79:                                               ; preds = %60, %898
  %80 = phi i8 [ %68, %60 ], [ %899, %898 ]
  %81 = phi i8 [ %69, %60 ], [ %900, %898 ]
  %82 = phi i64 [ %70, %60 ], [ %901, %898 ]
  %83 = phi i64 [ %71, %60 ], [ %902, %898 ]
  %84 = and i8 %80, 1
  %85 = icmp eq i8 %84, 0
  br label %86

86:                                               ; preds = %79, %103
  %87 = phi i64 [ %104, %103 ], [ %82, %79 ]
  %88 = phi i64 [ %105, %103 ], [ %83, %79 ]
  br i1 %73, label %91, label %89

89:                                               ; preds = %86
  %90 = load i64, i64* %74, align 8
  br label %91

91:                                               ; preds = %86, %89
  %92 = phi i64 [ %90, %89 ], [ 0, %86 ]
  %93 = icmp ult i64 %87, %92
  %94 = and i1 %85, %93
  br i1 %94, label %95, label %903

95:                                               ; preds = %91
  br i1 %73, label %99, label %96

96:                                               ; preds = %95
  %97 = load i64, i64* %75, align 8
  %98 = icmp ugt i64 %97, %87
  br i1 %98, label %100, label %99, !prof !2

99:                                               ; preds = %96, %95
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

100:                                              ; preds = %96
  %101 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %72, i64 0, i32 3, i64 %87
  %102 = load i32, i32* %101, align 4
  switch i32 %102, label %888 [
    i32 58, label %103
    i32 46, label %103
    i32 45, label %103
    i32 92, label %103
    i32 47, label %103
    i32 121, label %106
    i32 109, label %106
    i32 100, label %106
    i32 72, label %106
    i32 104, label %106
    i32 77, label %106
    i32 115, label %106
    i32 116, label %106
  ]

103:                                              ; preds = %100, %100, %100, %100, %100
  %104 = add nuw i64 %87, 1
  %105 = add i64 %88, 1
  br label %86

106:                                              ; preds = %100, %100, %100, %100, %100, %100, %100, %100
  %107 = xor i64 %87, -1
  %108 = add i64 %97, %107
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %118, label %110

110:                                              ; preds = %106
  %111 = add nuw i64 %87, 1
  %112 = icmp ugt i64 %97, %111
  br i1 %112, label %114, label %113, !prof !2

113:                                              ; preds = %110
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

114:                                              ; preds = %110
  %115 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %72, i64 0, i32 3, i64 %111
  %116 = load i32, i32* %115, align 4
  %117 = icmp eq i32 %116, %102
  br i1 %117, label %356, label %118

118:                                              ; preds = %114, %106
  switch i32 %102, label %873 [
    i32 121, label %137
    i32 109, label %134
    i32 100, label %131
    i32 72, label %128
    i32 104, label %125
    i32 77, label %122
    i32 115, label %119
    i32 116, label %332
  ]

119:                                              ; preds = %118
  %120 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %121 = icmp eq %"class.fxcrt::StringDataTemplate"* %120, null
  br i1 %121, label %303, label %300

122:                                              ; preds = %118
  %123 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %124 = icmp eq %"class.fxcrt::StringDataTemplate"* %123, null
  br i1 %124, label %271, label %268

125:                                              ; preds = %118
  %126 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %127 = icmp eq %"class.fxcrt::StringDataTemplate"* %126, null
  br i1 %127, label %239, label %236

128:                                              ; preds = %118
  %129 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %130 = icmp eq %"class.fxcrt::StringDataTemplate"* %129, null
  br i1 %130, label %207, label %204

131:                                              ; preds = %118
  %132 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %133 = icmp eq %"class.fxcrt::StringDataTemplate"* %132, null
  br i1 %133, label %175, label %172

134:                                              ; preds = %118
  %135 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %136 = icmp eq %"class.fxcrt::StringDataTemplate"* %135, null
  br i1 %136, label %143, label %140

137:                                              ; preds = %118
  %138 = add nuw i64 %87, 1
  %139 = add i64 %88, 1
  br label %873

140:                                              ; preds = %134
  %141 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %135, i64 0, i32 1
  %142 = load i64, i64* %141, align 8
  br label %143

143:                                              ; preds = %140, %134
  %144 = phi i64 [ %142, %140 ], [ 0, %134 ]
  %145 = icmp ult i64 %88, %144
  br i1 %145, label %146, label %167

146:                                              ; preds = %143
  br i1 %136, label %151, label %147

147:                                              ; preds = %146
  %148 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %135, i64 0, i32 1
  %149 = load i64, i64* %148, align 8
  %150 = icmp ugt i64 %149, %88
  br i1 %150, label %152, label %151, !prof !2

151:                                              ; preds = %147, %146
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

152:                                              ; preds = %147
  %153 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %135, i64 0, i32 3, i64 %88
  %154 = load i32, i32* %153, align 4
  %155 = icmp ugt i32 %154, 127
  br i1 %155, label %167, label %156

156:                                              ; preds = %152
  %157 = call i32 @iswdigit(i32 %154) #12
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %167, label %159

159:                                              ; preds = %156
  %160 = call i32 @iswdigit(i32 %154) #12
  %161 = icmp eq i32 %160, 0
  %162 = add nsw i32 %154, -48
  %163 = select i1 %161, i32 0, i32 %162
  %164 = add nuw i64 %88, 1
  %165 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %166 = icmp eq %"class.fxcrt::StringDataTemplate"* %165, null
  br i1 %166, label %167, label %1327

167:                                              ; preds = %159, %1327, %143, %1338, %1335, %1331, %152, %156
  %168 = phi i32 [ 0, %143 ], [ 0, %156 ], [ 0, %152 ], [ %163, %1327 ], [ %163, %1331 ], [ %163, %1335 ], [ %1344, %1338 ], [ %163, %159 ]
  %169 = phi i64 [ 0, %143 ], [ 0, %156 ], [ 0, %152 ], [ 1, %1327 ], [ 1, %1331 ], [ 1, %1335 ], [ 2, %1338 ], [ 1, %159 ]
  %170 = add nuw i64 %87, 1
  %171 = add i64 %169, %88
  br label %873

172:                                              ; preds = %131
  %173 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %132, i64 0, i32 1
  %174 = load i64, i64* %173, align 8
  br label %175

175:                                              ; preds = %172, %131
  %176 = phi i64 [ %174, %172 ], [ 0, %131 ]
  %177 = icmp ult i64 %88, %176
  br i1 %177, label %178, label %199

178:                                              ; preds = %175
  br i1 %133, label %183, label %179

179:                                              ; preds = %178
  %180 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %132, i64 0, i32 1
  %181 = load i64, i64* %180, align 8
  %182 = icmp ugt i64 %181, %88
  br i1 %182, label %184, label %183, !prof !2

183:                                              ; preds = %179, %178
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

184:                                              ; preds = %179
  %185 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %132, i64 0, i32 3, i64 %88
  %186 = load i32, i32* %185, align 4
  %187 = icmp ugt i32 %186, 127
  br i1 %187, label %199, label %188

188:                                              ; preds = %184
  %189 = call i32 @iswdigit(i32 %186) #12
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %199, label %191

191:                                              ; preds = %188
  %192 = call i32 @iswdigit(i32 %186) #12
  %193 = icmp eq i32 %192, 0
  %194 = add nsw i32 %186, -48
  %195 = select i1 %193, i32 0, i32 %194
  %196 = add nuw i64 %88, 1
  %197 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %198 = icmp eq %"class.fxcrt::StringDataTemplate"* %197, null
  br i1 %198, label %199, label %1309

199:                                              ; preds = %191, %1309, %175, %1320, %1317, %1313, %184, %188
  %200 = phi i32 [ 0, %175 ], [ 0, %188 ], [ 0, %184 ], [ %195, %1309 ], [ %195, %1313 ], [ %195, %1317 ], [ %1326, %1320 ], [ %195, %191 ]
  %201 = phi i64 [ 0, %175 ], [ 0, %188 ], [ 0, %184 ], [ 1, %1309 ], [ 1, %1313 ], [ 1, %1317 ], [ 2, %1320 ], [ 1, %191 ]
  %202 = add nuw i64 %87, 1
  %203 = add i64 %201, %88
  br label %873

204:                                              ; preds = %128
  %205 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %129, i64 0, i32 1
  %206 = load i64, i64* %205, align 8
  br label %207

207:                                              ; preds = %204, %128
  %208 = phi i64 [ %206, %204 ], [ 0, %128 ]
  %209 = icmp ult i64 %88, %208
  br i1 %209, label %210, label %231

210:                                              ; preds = %207
  br i1 %130, label %215, label %211

211:                                              ; preds = %210
  %212 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %129, i64 0, i32 1
  %213 = load i64, i64* %212, align 8
  %214 = icmp ugt i64 %213, %88
  br i1 %214, label %216, label %215, !prof !2

215:                                              ; preds = %211, %210
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

216:                                              ; preds = %211
  %217 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %129, i64 0, i32 3, i64 %88
  %218 = load i32, i32* %217, align 4
  %219 = icmp ugt i32 %218, 127
  br i1 %219, label %231, label %220

220:                                              ; preds = %216
  %221 = call i32 @iswdigit(i32 %218) #12
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %231, label %223

223:                                              ; preds = %220
  %224 = call i32 @iswdigit(i32 %218) #12
  %225 = icmp eq i32 %224, 0
  %226 = add nsw i32 %218, -48
  %227 = select i1 %225, i32 0, i32 %226
  %228 = add nuw i64 %88, 1
  %229 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %230 = icmp eq %"class.fxcrt::StringDataTemplate"* %229, null
  br i1 %230, label %231, label %1291

231:                                              ; preds = %223, %1291, %207, %1302, %1299, %1295, %216, %220
  %232 = phi i32 [ 0, %207 ], [ 0, %220 ], [ 0, %216 ], [ %227, %1291 ], [ %227, %1295 ], [ %227, %1299 ], [ %1308, %1302 ], [ %227, %223 ]
  %233 = phi i64 [ 0, %207 ], [ 0, %220 ], [ 0, %216 ], [ 1, %1291 ], [ 1, %1295 ], [ 1, %1299 ], [ 2, %1302 ], [ 1, %223 ]
  %234 = add nuw i64 %87, 1
  %235 = add i64 %233, %88
  br label %873

236:                                              ; preds = %125
  %237 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %126, i64 0, i32 1
  %238 = load i64, i64* %237, align 8
  br label %239

239:                                              ; preds = %236, %125
  %240 = phi i64 [ %238, %236 ], [ 0, %125 ]
  %241 = icmp ult i64 %88, %240
  br i1 %241, label %242, label %263

242:                                              ; preds = %239
  br i1 %127, label %247, label %243

243:                                              ; preds = %242
  %244 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %126, i64 0, i32 1
  %245 = load i64, i64* %244, align 8
  %246 = icmp ugt i64 %245, %88
  br i1 %246, label %248, label %247, !prof !2

247:                                              ; preds = %243, %242
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

248:                                              ; preds = %243
  %249 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %126, i64 0, i32 3, i64 %88
  %250 = load i32, i32* %249, align 4
  %251 = icmp ugt i32 %250, 127
  br i1 %251, label %263, label %252

252:                                              ; preds = %248
  %253 = call i32 @iswdigit(i32 %250) #12
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %263, label %255

255:                                              ; preds = %252
  %256 = call i32 @iswdigit(i32 %250) #12
  %257 = icmp eq i32 %256, 0
  %258 = add nsw i32 %250, -48
  %259 = select i1 %257, i32 0, i32 %258
  %260 = add nuw i64 %88, 1
  %261 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %262 = icmp eq %"class.fxcrt::StringDataTemplate"* %261, null
  br i1 %262, label %263, label %1273

263:                                              ; preds = %255, %1273, %239, %1284, %1281, %1277, %248, %252
  %264 = phi i32 [ 0, %239 ], [ 0, %252 ], [ 0, %248 ], [ %259, %1273 ], [ %259, %1277 ], [ %259, %1281 ], [ %1290, %1284 ], [ %259, %255 ]
  %265 = phi i64 [ 0, %239 ], [ 0, %252 ], [ 0, %248 ], [ 1, %1273 ], [ 1, %1277 ], [ 1, %1281 ], [ 2, %1284 ], [ 1, %255 ]
  %266 = add nuw i64 %87, 1
  %267 = add i64 %265, %88
  br label %873

268:                                              ; preds = %122
  %269 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %123, i64 0, i32 1
  %270 = load i64, i64* %269, align 8
  br label %271

271:                                              ; preds = %268, %122
  %272 = phi i64 [ %270, %268 ], [ 0, %122 ]
  %273 = icmp ult i64 %88, %272
  br i1 %273, label %274, label %295

274:                                              ; preds = %271
  br i1 %124, label %279, label %275

275:                                              ; preds = %274
  %276 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %123, i64 0, i32 1
  %277 = load i64, i64* %276, align 8
  %278 = icmp ugt i64 %277, %88
  br i1 %278, label %280, label %279, !prof !2

279:                                              ; preds = %275, %274
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

280:                                              ; preds = %275
  %281 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %123, i64 0, i32 3, i64 %88
  %282 = load i32, i32* %281, align 4
  %283 = icmp ugt i32 %282, 127
  br i1 %283, label %295, label %284

284:                                              ; preds = %280
  %285 = call i32 @iswdigit(i32 %282) #12
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %295, label %287

287:                                              ; preds = %284
  %288 = call i32 @iswdigit(i32 %282) #12
  %289 = icmp eq i32 %288, 0
  %290 = add nsw i32 %282, -48
  %291 = select i1 %289, i32 0, i32 %290
  %292 = add nuw i64 %88, 1
  %293 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %294 = icmp eq %"class.fxcrt::StringDataTemplate"* %293, null
  br i1 %294, label %295, label %1255

295:                                              ; preds = %287, %1255, %271, %1266, %1263, %1259, %280, %284
  %296 = phi i32 [ 0, %271 ], [ 0, %284 ], [ 0, %280 ], [ %291, %1255 ], [ %291, %1259 ], [ %291, %1263 ], [ %1272, %1266 ], [ %291, %287 ]
  %297 = phi i64 [ 0, %271 ], [ 0, %284 ], [ 0, %280 ], [ 1, %1255 ], [ 1, %1259 ], [ 1, %1263 ], [ 2, %1266 ], [ 1, %287 ]
  %298 = add nuw i64 %87, 1
  %299 = add i64 %297, %88
  br label %873

300:                                              ; preds = %119
  %301 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %120, i64 0, i32 1
  %302 = load i64, i64* %301, align 8
  br label %303

303:                                              ; preds = %300, %119
  %304 = phi i64 [ %302, %300 ], [ 0, %119 ]
  %305 = icmp ult i64 %88, %304
  br i1 %305, label %306, label %327

306:                                              ; preds = %303
  br i1 %121, label %311, label %307

307:                                              ; preds = %306
  %308 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %120, i64 0, i32 1
  %309 = load i64, i64* %308, align 8
  %310 = icmp ugt i64 %309, %88
  br i1 %310, label %312, label %311, !prof !2

311:                                              ; preds = %307, %306
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

312:                                              ; preds = %307
  %313 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %120, i64 0, i32 3, i64 %88
  %314 = load i32, i32* %313, align 4
  %315 = icmp ugt i32 %314, 127
  br i1 %315, label %327, label %316

316:                                              ; preds = %312
  %317 = call i32 @iswdigit(i32 %314) #12
  %318 = icmp eq i32 %317, 0
  br i1 %318, label %327, label %319

319:                                              ; preds = %316
  %320 = call i32 @iswdigit(i32 %314) #12
  %321 = icmp eq i32 %320, 0
  %322 = add nsw i32 %314, -48
  %323 = select i1 %321, i32 0, i32 %322
  %324 = add nuw i64 %88, 1
  %325 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %326 = icmp eq %"class.fxcrt::StringDataTemplate"* %325, null
  br i1 %326, label %327, label %1237

327:                                              ; preds = %319, %1237, %303, %1248, %1245, %1241, %312, %316
  %328 = phi i32 [ 0, %303 ], [ 0, %316 ], [ 0, %312 ], [ %323, %1237 ], [ %323, %1241 ], [ %323, %1245 ], [ %1254, %1248 ], [ %323, %319 ]
  %329 = phi i64 [ 0, %303 ], [ 0, %316 ], [ 0, %312 ], [ 1, %1237 ], [ 1, %1241 ], [ 1, %1245 ], [ 2, %1248 ], [ 1, %319 ]
  %330 = add nuw i64 %87, 1
  %331 = add i64 %329, %88
  br label %873

332:                                              ; preds = %118
  %333 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %334 = icmp eq %"class.fxcrt::StringDataTemplate"* %333, null
  br i1 %334, label %338, label %335

335:                                              ; preds = %332
  %336 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %333, i64 0, i32 1
  %337 = load i64, i64* %336, align 8
  br label %338

338:                                              ; preds = %332, %335
  %339 = phi i64 [ %337, %335 ], [ 0, %332 ]
  %340 = icmp ult i64 %88, %339
  br i1 %340, label %341, label %351

341:                                              ; preds = %338
  br i1 %334, label %346, label %342

342:                                              ; preds = %341
  %343 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %333, i64 0, i32 1
  %344 = load i64, i64* %343, align 8
  %345 = icmp ugt i64 %344, %88
  br i1 %345, label %347, label %346, !prof !2

346:                                              ; preds = %342, %341
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

347:                                              ; preds = %342
  %348 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %333, i64 0, i32 3, i64 %88
  %349 = load i32, i32* %348, align 4
  %350 = icmp eq i32 %349, 112
  br label %351

351:                                              ; preds = %347, %338
  %352 = phi i1 [ false, %338 ], [ %350, %347 ]
  %353 = zext i1 %352 to i8
  %354 = add nuw i64 %87, 1
  %355 = add i64 %88, 1
  br label %873

356:                                              ; preds = %114
  %357 = icmp eq i64 %108, 1
  br i1 %357, label %366, label %358

358:                                              ; preds = %356
  %359 = add nuw i64 %87, 2
  %360 = icmp ugt i64 %97, %359
  br i1 %360, label %362, label %361, !prof !2

361:                                              ; preds = %358
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

362:                                              ; preds = %358
  %363 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %72, i64 0, i32 3, i64 %359
  %364 = load i32, i32* %363, align 4
  %365 = icmp eq i32 %364, %102
  br i1 %365, label %636, label %366

366:                                              ; preds = %362, %356
  switch i32 %102, label %873 [
    i32 121, label %385
    i32 109, label %382
    i32 100, label %379
    i32 72, label %376
    i32 104, label %373
    i32 77, label %370
    i32 115, label %367
    i32 116, label %612
  ]

367:                                              ; preds = %366
  %368 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %369 = icmp eq %"class.fxcrt::StringDataTemplate"* %368, null
  br i1 %369, label %583, label %580

370:                                              ; preds = %366
  %371 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %372 = icmp eq %"class.fxcrt::StringDataTemplate"* %371, null
  br i1 %372, label %551, label %548

373:                                              ; preds = %366
  %374 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %375 = icmp eq %"class.fxcrt::StringDataTemplate"* %374, null
  br i1 %375, label %519, label %516

376:                                              ; preds = %366
  %377 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %378 = icmp eq %"class.fxcrt::StringDataTemplate"* %377, null
  br i1 %378, label %487, label %484

379:                                              ; preds = %366
  %380 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %381 = icmp eq %"class.fxcrt::StringDataTemplate"* %380, null
  br i1 %381, label %455, label %452

382:                                              ; preds = %366
  %383 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %384 = icmp eq %"class.fxcrt::StringDataTemplate"* %383, null
  br i1 %384, label %423, label %420

385:                                              ; preds = %366
  %386 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %387 = icmp eq %"class.fxcrt::StringDataTemplate"* %386, null
  br i1 %387, label %391, label %388

388:                                              ; preds = %385
  %389 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %386, i64 0, i32 1
  %390 = load i64, i64* %389, align 8
  br label %391

391:                                              ; preds = %388, %385
  %392 = phi i64 [ %390, %388 ], [ 0, %385 ]
  %393 = icmp ult i64 %88, %392
  br i1 %393, label %394, label %415

394:                                              ; preds = %391
  br i1 %387, label %399, label %395

395:                                              ; preds = %394
  %396 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %386, i64 0, i32 1
  %397 = load i64, i64* %396, align 8
  %398 = icmp ugt i64 %397, %88
  br i1 %398, label %400, label %399, !prof !2

399:                                              ; preds = %395, %394
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

400:                                              ; preds = %395
  %401 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %386, i64 0, i32 3, i64 %88
  %402 = load i32, i32* %401, align 4
  %403 = icmp ugt i32 %402, 127
  br i1 %403, label %415, label %404

404:                                              ; preds = %400
  %405 = call i32 @iswdigit(i32 %402) #12
  %406 = icmp eq i32 %405, 0
  br i1 %406, label %415, label %407

407:                                              ; preds = %404
  %408 = call i32 @iswdigit(i32 %402) #12
  %409 = icmp eq i32 %408, 0
  %410 = add nsw i32 %402, -48
  %411 = select i1 %409, i32 0, i32 %410
  %412 = add nuw i64 %88, 1
  %413 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %414 = icmp eq %"class.fxcrt::StringDataTemplate"* %413, null
  br i1 %414, label %415, label %1219

415:                                              ; preds = %407, %1219, %391, %1230, %1227, %1223, %400, %404
  %416 = phi i32 [ 0, %391 ], [ 0, %404 ], [ 0, %400 ], [ %411, %1219 ], [ %411, %1223 ], [ %411, %1227 ], [ %1236, %1230 ], [ %411, %407 ]
  %417 = phi i64 [ 0, %391 ], [ 0, %404 ], [ 0, %400 ], [ 1, %1219 ], [ 1, %1223 ], [ 1, %1227 ], [ 2, %1230 ], [ 1, %407 ]
  %418 = add nuw i64 %87, 2
  %419 = add i64 %417, %88
  br label %873

420:                                              ; preds = %382
  %421 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %383, i64 0, i32 1
  %422 = load i64, i64* %421, align 8
  br label %423

423:                                              ; preds = %420, %382
  %424 = phi i64 [ %422, %420 ], [ 0, %382 ]
  %425 = icmp ult i64 %88, %424
  br i1 %425, label %426, label %447

426:                                              ; preds = %423
  br i1 %384, label %431, label %427

427:                                              ; preds = %426
  %428 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %383, i64 0, i32 1
  %429 = load i64, i64* %428, align 8
  %430 = icmp ugt i64 %429, %88
  br i1 %430, label %432, label %431, !prof !2

431:                                              ; preds = %427, %426
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

432:                                              ; preds = %427
  %433 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %383, i64 0, i32 3, i64 %88
  %434 = load i32, i32* %433, align 4
  %435 = icmp ugt i32 %434, 127
  br i1 %435, label %447, label %436

436:                                              ; preds = %432
  %437 = call i32 @iswdigit(i32 %434) #12
  %438 = icmp eq i32 %437, 0
  br i1 %438, label %447, label %439

439:                                              ; preds = %436
  %440 = call i32 @iswdigit(i32 %434) #12
  %441 = icmp eq i32 %440, 0
  %442 = add nsw i32 %434, -48
  %443 = select i1 %441, i32 0, i32 %442
  %444 = add nuw i64 %88, 1
  %445 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %446 = icmp eq %"class.fxcrt::StringDataTemplate"* %445, null
  br i1 %446, label %447, label %1201

447:                                              ; preds = %439, %1201, %423, %1212, %1209, %1205, %432, %436
  %448 = phi i32 [ 0, %423 ], [ 0, %436 ], [ 0, %432 ], [ %443, %1201 ], [ %443, %1205 ], [ %443, %1209 ], [ %1218, %1212 ], [ %443, %439 ]
  %449 = phi i64 [ 0, %423 ], [ 0, %436 ], [ 0, %432 ], [ 1, %1201 ], [ 1, %1205 ], [ 1, %1209 ], [ 2, %1212 ], [ 1, %439 ]
  %450 = add nuw i64 %87, 2
  %451 = add i64 %449, %88
  br label %873

452:                                              ; preds = %379
  %453 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %380, i64 0, i32 1
  %454 = load i64, i64* %453, align 8
  br label %455

455:                                              ; preds = %452, %379
  %456 = phi i64 [ %454, %452 ], [ 0, %379 ]
  %457 = icmp ult i64 %88, %456
  br i1 %457, label %458, label %479

458:                                              ; preds = %455
  br i1 %381, label %463, label %459

459:                                              ; preds = %458
  %460 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %380, i64 0, i32 1
  %461 = load i64, i64* %460, align 8
  %462 = icmp ugt i64 %461, %88
  br i1 %462, label %464, label %463, !prof !2

463:                                              ; preds = %459, %458
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

464:                                              ; preds = %459
  %465 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %380, i64 0, i32 3, i64 %88
  %466 = load i32, i32* %465, align 4
  %467 = icmp ugt i32 %466, 127
  br i1 %467, label %479, label %468

468:                                              ; preds = %464
  %469 = call i32 @iswdigit(i32 %466) #12
  %470 = icmp eq i32 %469, 0
  br i1 %470, label %479, label %471

471:                                              ; preds = %468
  %472 = call i32 @iswdigit(i32 %466) #12
  %473 = icmp eq i32 %472, 0
  %474 = add nsw i32 %466, -48
  %475 = select i1 %473, i32 0, i32 %474
  %476 = add nuw i64 %88, 1
  %477 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %478 = icmp eq %"class.fxcrt::StringDataTemplate"* %477, null
  br i1 %478, label %479, label %1183

479:                                              ; preds = %471, %1183, %455, %1194, %1191, %1187, %464, %468
  %480 = phi i32 [ 0, %455 ], [ 0, %468 ], [ 0, %464 ], [ %475, %1183 ], [ %475, %1187 ], [ %475, %1191 ], [ %1200, %1194 ], [ %475, %471 ]
  %481 = phi i64 [ 0, %455 ], [ 0, %468 ], [ 0, %464 ], [ 1, %1183 ], [ 1, %1187 ], [ 1, %1191 ], [ 2, %1194 ], [ 1, %471 ]
  %482 = add nuw i64 %87, 2
  %483 = add i64 %481, %88
  br label %873

484:                                              ; preds = %376
  %485 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %377, i64 0, i32 1
  %486 = load i64, i64* %485, align 8
  br label %487

487:                                              ; preds = %484, %376
  %488 = phi i64 [ %486, %484 ], [ 0, %376 ]
  %489 = icmp ult i64 %88, %488
  br i1 %489, label %490, label %511

490:                                              ; preds = %487
  br i1 %378, label %495, label %491

491:                                              ; preds = %490
  %492 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %377, i64 0, i32 1
  %493 = load i64, i64* %492, align 8
  %494 = icmp ugt i64 %493, %88
  br i1 %494, label %496, label %495, !prof !2

495:                                              ; preds = %491, %490
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

496:                                              ; preds = %491
  %497 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %377, i64 0, i32 3, i64 %88
  %498 = load i32, i32* %497, align 4
  %499 = icmp ugt i32 %498, 127
  br i1 %499, label %511, label %500

500:                                              ; preds = %496
  %501 = call i32 @iswdigit(i32 %498) #12
  %502 = icmp eq i32 %501, 0
  br i1 %502, label %511, label %503

503:                                              ; preds = %500
  %504 = call i32 @iswdigit(i32 %498) #12
  %505 = icmp eq i32 %504, 0
  %506 = add nsw i32 %498, -48
  %507 = select i1 %505, i32 0, i32 %506
  %508 = add nuw i64 %88, 1
  %509 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %510 = icmp eq %"class.fxcrt::StringDataTemplate"* %509, null
  br i1 %510, label %511, label %1165

511:                                              ; preds = %503, %1165, %487, %1176, %1173, %1169, %496, %500
  %512 = phi i32 [ 0, %487 ], [ 0, %500 ], [ 0, %496 ], [ %507, %1165 ], [ %507, %1169 ], [ %507, %1173 ], [ %1182, %1176 ], [ %507, %503 ]
  %513 = phi i64 [ 0, %487 ], [ 0, %500 ], [ 0, %496 ], [ 1, %1165 ], [ 1, %1169 ], [ 1, %1173 ], [ 2, %1176 ], [ 1, %503 ]
  %514 = add nuw i64 %87, 2
  %515 = add i64 %513, %88
  br label %873

516:                                              ; preds = %373
  %517 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %374, i64 0, i32 1
  %518 = load i64, i64* %517, align 8
  br label %519

519:                                              ; preds = %516, %373
  %520 = phi i64 [ %518, %516 ], [ 0, %373 ]
  %521 = icmp ult i64 %88, %520
  br i1 %521, label %522, label %543

522:                                              ; preds = %519
  br i1 %375, label %527, label %523

523:                                              ; preds = %522
  %524 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %374, i64 0, i32 1
  %525 = load i64, i64* %524, align 8
  %526 = icmp ugt i64 %525, %88
  br i1 %526, label %528, label %527, !prof !2

527:                                              ; preds = %523, %522
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

528:                                              ; preds = %523
  %529 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %374, i64 0, i32 3, i64 %88
  %530 = load i32, i32* %529, align 4
  %531 = icmp ugt i32 %530, 127
  br i1 %531, label %543, label %532

532:                                              ; preds = %528
  %533 = call i32 @iswdigit(i32 %530) #12
  %534 = icmp eq i32 %533, 0
  br i1 %534, label %543, label %535

535:                                              ; preds = %532
  %536 = call i32 @iswdigit(i32 %530) #12
  %537 = icmp eq i32 %536, 0
  %538 = add nsw i32 %530, -48
  %539 = select i1 %537, i32 0, i32 %538
  %540 = add nuw i64 %88, 1
  %541 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %542 = icmp eq %"class.fxcrt::StringDataTemplate"* %541, null
  br i1 %542, label %543, label %1147

543:                                              ; preds = %535, %1147, %519, %1158, %1155, %1151, %528, %532
  %544 = phi i32 [ 0, %519 ], [ 0, %532 ], [ 0, %528 ], [ %539, %1147 ], [ %539, %1151 ], [ %539, %1155 ], [ %1164, %1158 ], [ %539, %535 ]
  %545 = phi i64 [ 0, %519 ], [ 0, %532 ], [ 0, %528 ], [ 1, %1147 ], [ 1, %1151 ], [ 1, %1155 ], [ 2, %1158 ], [ 1, %535 ]
  %546 = add nuw i64 %87, 2
  %547 = add i64 %545, %88
  br label %873

548:                                              ; preds = %370
  %549 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %371, i64 0, i32 1
  %550 = load i64, i64* %549, align 8
  br label %551

551:                                              ; preds = %548, %370
  %552 = phi i64 [ %550, %548 ], [ 0, %370 ]
  %553 = icmp ult i64 %88, %552
  br i1 %553, label %554, label %575

554:                                              ; preds = %551
  br i1 %372, label %559, label %555

555:                                              ; preds = %554
  %556 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %371, i64 0, i32 1
  %557 = load i64, i64* %556, align 8
  %558 = icmp ugt i64 %557, %88
  br i1 %558, label %560, label %559, !prof !2

559:                                              ; preds = %555, %554
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

560:                                              ; preds = %555
  %561 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %371, i64 0, i32 3, i64 %88
  %562 = load i32, i32* %561, align 4
  %563 = icmp ugt i32 %562, 127
  br i1 %563, label %575, label %564

564:                                              ; preds = %560
  %565 = call i32 @iswdigit(i32 %562) #12
  %566 = icmp eq i32 %565, 0
  br i1 %566, label %575, label %567

567:                                              ; preds = %564
  %568 = call i32 @iswdigit(i32 %562) #12
  %569 = icmp eq i32 %568, 0
  %570 = add nsw i32 %562, -48
  %571 = select i1 %569, i32 0, i32 %570
  %572 = add nuw i64 %88, 1
  %573 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %574 = icmp eq %"class.fxcrt::StringDataTemplate"* %573, null
  br i1 %574, label %575, label %1129

575:                                              ; preds = %567, %1129, %551, %1140, %1137, %1133, %560, %564
  %576 = phi i32 [ 0, %551 ], [ 0, %564 ], [ 0, %560 ], [ %571, %1129 ], [ %571, %1133 ], [ %571, %1137 ], [ %1146, %1140 ], [ %571, %567 ]
  %577 = phi i64 [ 0, %551 ], [ 0, %564 ], [ 0, %560 ], [ 1, %1129 ], [ 1, %1133 ], [ 1, %1137 ], [ 2, %1140 ], [ 1, %567 ]
  %578 = add nuw i64 %87, 2
  %579 = add i64 %577, %88
  br label %873

580:                                              ; preds = %367
  %581 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %368, i64 0, i32 1
  %582 = load i64, i64* %581, align 8
  br label %583

583:                                              ; preds = %580, %367
  %584 = phi i64 [ %582, %580 ], [ 0, %367 ]
  %585 = icmp ult i64 %88, %584
  br i1 %585, label %586, label %607

586:                                              ; preds = %583
  br i1 %369, label %591, label %587

587:                                              ; preds = %586
  %588 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %368, i64 0, i32 1
  %589 = load i64, i64* %588, align 8
  %590 = icmp ugt i64 %589, %88
  br i1 %590, label %592, label %591, !prof !2

591:                                              ; preds = %587, %586
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

592:                                              ; preds = %587
  %593 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %368, i64 0, i32 3, i64 %88
  %594 = load i32, i32* %593, align 4
  %595 = icmp ugt i32 %594, 127
  br i1 %595, label %607, label %596

596:                                              ; preds = %592
  %597 = call i32 @iswdigit(i32 %594) #12
  %598 = icmp eq i32 %597, 0
  br i1 %598, label %607, label %599

599:                                              ; preds = %596
  %600 = call i32 @iswdigit(i32 %594) #12
  %601 = icmp eq i32 %600, 0
  %602 = add nsw i32 %594, -48
  %603 = select i1 %601, i32 0, i32 %602
  %604 = add nuw i64 %88, 1
  %605 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %606 = icmp eq %"class.fxcrt::StringDataTemplate"* %605, null
  br i1 %606, label %607, label %1111

607:                                              ; preds = %599, %1111, %583, %1122, %1119, %1115, %592, %596
  %608 = phi i32 [ 0, %583 ], [ 0, %596 ], [ 0, %592 ], [ %603, %1111 ], [ %603, %1115 ], [ %603, %1119 ], [ %1128, %1122 ], [ %603, %599 ]
  %609 = phi i64 [ 0, %583 ], [ 0, %596 ], [ 0, %592 ], [ 1, %1111 ], [ 1, %1115 ], [ 1, %1119 ], [ 2, %1122 ], [ 1, %599 ]
  %610 = add nuw i64 %87, 2
  %611 = add i64 %609, %88
  br label %873

612:                                              ; preds = %366
  %613 = add i64 %88, 1
  %614 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %615 = icmp eq %"class.fxcrt::StringDataTemplate"* %614, null
  br i1 %615, label %631, label %616

616:                                              ; preds = %612
  %617 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %614, i64 0, i32 1
  %618 = load i64, i64* %617, align 8
  %619 = icmp ult i64 %613, %618
  br i1 %619, label %620, label %631

620:                                              ; preds = %616
  %621 = icmp ugt i64 %618, %88
  br i1 %621, label %623, label %622, !prof !2

622:                                              ; preds = %620
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

623:                                              ; preds = %620
  %624 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %614, i64 0, i32 3, i64 %88
  %625 = load i32, i32* %624, align 4
  %626 = icmp eq i32 %625, 112
  br i1 %626, label %627, label %631

627:                                              ; preds = %623
  %628 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %614, i64 0, i32 3, i64 %613
  %629 = load i32, i32* %628, align 4
  %630 = icmp eq i32 %629, 109
  br label %631

631:                                              ; preds = %612, %627, %623, %616
  %632 = phi i1 [ false, %623 ], [ false, %616 ], [ %630, %627 ], [ false, %612 ]
  %633 = zext i1 %632 to i8
  %634 = add nuw i64 %87, 2
  %635 = add i64 %88, 2
  br label %873

636:                                              ; preds = %362
  %637 = icmp eq i64 %108, 2
  br i1 %637, label %646, label %638

638:                                              ; preds = %636
  %639 = add nuw i64 %87, 3
  %640 = icmp ugt i64 %97, %639
  br i1 %640, label %642, label %641, !prof !2

641:                                              ; preds = %638
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

642:                                              ; preds = %638
  %643 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %72, i64 0, i32 3, i64 %639
  %644 = load i32, i32* %643, align 4
  %645 = icmp eq i32 %644, %102
  br i1 %645, label %719, label %646

646:                                              ; preds = %642, %636
  switch i32 %102, label %716 [
    i32 109, label %647
    i32 121, label %873
  ]

647:                                              ; preds = %646
  %648 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8, !noalias !5
  %649 = icmp eq %"class.fxcrt::StringDataTemplate"* %648, null
  br i1 %649, label %663, label %650

650:                                              ; preds = %647
  %651 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %648, i64 0, i32 1
  %652 = load i64, i64* %651, align 8, !noalias !5
  %653 = icmp ugt i64 %652, %88
  br i1 %653, label %654, label %663

654:                                              ; preds = %650, %660
  %655 = phi i64 [ %661, %660 ], [ %88, %650 ]
  %656 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %648, i64 0, i32 3, i64 %655
  %657 = load i32, i32* %656, align 4
  %658 = call i32 @iswalnum(i32 %657) #12
  %659 = icmp eq i32 %658, 0
  br i1 %659, label %663, label %660

660:                                              ; preds = %654
  %661 = add i64 %655, 1
  %662 = icmp eq i64 %661, %652
  br i1 %662, label %663, label %654

663:                                              ; preds = %654, %660, %647, %650
  %664 = phi i64 [ %88, %650 ], [ %88, %647 ], [ %655, %654 ], [ %652, %660 ]
  %665 = sub i64 %664, %88
  %666 = icmp eq i64 %665, 3
  br i1 %666, label %667, label %681

667:                                              ; preds = %663
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #12
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %59, align 8
  call void @_ZNK5fxcrt10WideString6SubstrEmm(%"class.fxcrt::WideString"* nonnull sret %5, %"class.fxcrt::WideString"* %0, i64 %88, i64 3) #12
  br label %668

668:                                              ; preds = %671, %667
  %669 = phi i64 [ 0, %667 ], [ %676, %671 ]
  %670 = icmp eq i64 %669, 12
  br i1 %670, label %680, label %671

671:                                              ; preds = %668
  %672 = getelementptr inbounds [12 x i32*], [12 x i32*]* @_ZN4fxjs7kMonthsE, i64 0, i64 %669
  %673 = load i32*, i32** %672, align 8
  %674 = call i32 @_ZNK5fxcrt10WideString13CompareNoCaseEPKw(%"class.fxcrt::WideString"* nonnull %5, i32* %673) #12
  %675 = icmp eq i32 %674, 0
  %676 = add nuw nsw i64 %669, 1
  br i1 %675, label %677, label %668

677:                                              ; preds = %671
  %678 = trunc i64 %676 to i32
  %679 = add i64 %87, 3
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %58) #12
  br label %873

680:                                              ; preds = %668
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %58) #12
  br label %681

681:                                              ; preds = %663, %680
  %682 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %683 = icmp eq %"class.fxcrt::StringDataTemplate"* %682, null
  br i1 %683, label %687, label %684

684:                                              ; preds = %681
  %685 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %682, i64 0, i32 1
  %686 = load i64, i64* %685, align 8
  br label %687

687:                                              ; preds = %684, %681
  %688 = phi i64 [ %686, %684 ], [ 0, %681 ]
  %689 = icmp ult i64 %88, %688
  br i1 %689, label %690, label %711

690:                                              ; preds = %687
  br i1 %683, label %695, label %691

691:                                              ; preds = %690
  %692 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %682, i64 0, i32 1
  %693 = load i64, i64* %692, align 8
  %694 = icmp ugt i64 %693, %88
  br i1 %694, label %696, label %695, !prof !2

695:                                              ; preds = %691, %690
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

696:                                              ; preds = %691
  %697 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %682, i64 0, i32 3, i64 %88
  %698 = load i32, i32* %697, align 4
  %699 = icmp ugt i32 %698, 127
  br i1 %699, label %711, label %700

700:                                              ; preds = %696
  %701 = call i32 @iswdigit(i32 %698) #12
  %702 = icmp eq i32 %701, 0
  br i1 %702, label %711, label %703

703:                                              ; preds = %700
  %704 = call i32 @iswdigit(i32 %698) #12
  %705 = icmp eq i32 %704, 0
  %706 = add nsw i32 %698, -48
  %707 = select i1 %705, i32 0, i32 %706
  %708 = add nuw i64 %88, 1
  %709 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %710 = icmp eq %"class.fxcrt::StringDataTemplate"* %709, null
  br i1 %710, label %711, label %1072

711:                                              ; preds = %1083, %703, %1093, %1072, %687, %1104, %1101, %1097, %1080, %1076, %696, %700
  %712 = phi i32 [ 0, %687 ], [ 0, %700 ], [ 0, %696 ], [ %707, %1072 ], [ %707, %1076 ], [ %707, %1080 ], [ %1089, %1093 ], [ %1089, %1097 ], [ %1089, %1101 ], [ %1110, %1104 ], [ %707, %703 ], [ %1089, %1083 ]
  %713 = phi i64 [ 0, %687 ], [ 0, %700 ], [ 0, %696 ], [ 1, %1072 ], [ 1, %1076 ], [ 1, %1080 ], [ 2, %1093 ], [ 2, %1097 ], [ 2, %1101 ], [ 3, %1104 ], [ 1, %703 ], [ 2, %1083 ]
  %714 = add i64 %87, 3
  %715 = add i64 %713, %88
  br label %873

716:                                              ; preds = %646
  %717 = add nuw i64 %87, 3
  %718 = add i64 %88, 3
  br label %873

719:                                              ; preds = %642
  %720 = icmp eq i64 %108, 3
  br i1 %720, label %729, label %721

721:                                              ; preds = %719
  %722 = add nuw i64 %87, 4
  %723 = icmp ugt i64 %97, %722
  br i1 %723, label %725, label %724, !prof !2

724:                                              ; preds = %721
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

725:                                              ; preds = %721
  %726 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %72, i64 0, i32 3, i64 %722
  %727 = load i32, i32* %726, align 4
  %728 = icmp eq i32 %727, %102
  br i1 %728, label %849, label %729

729:                                              ; preds = %725, %719
  switch i32 %102, label %846 [
    i32 121, label %730
    i32 109, label %765
  ]

730:                                              ; preds = %729
  %731 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %732 = icmp eq %"class.fxcrt::StringDataTemplate"* %731, null
  br i1 %732, label %736, label %733

733:                                              ; preds = %730
  %734 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %731, i64 0, i32 1
  %735 = load i64, i64* %734, align 8
  br label %736

736:                                              ; preds = %733, %730
  %737 = phi i64 [ %735, %733 ], [ 0, %730 ]
  %738 = icmp ult i64 %88, %737
  br i1 %738, label %739, label %760

739:                                              ; preds = %736
  br i1 %732, label %744, label %740

740:                                              ; preds = %739
  %741 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %731, i64 0, i32 1
  %742 = load i64, i64* %741, align 8
  %743 = icmp ugt i64 %742, %88
  br i1 %743, label %745, label %744, !prof !2

744:                                              ; preds = %740, %739
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

745:                                              ; preds = %740
  %746 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %731, i64 0, i32 3, i64 %88
  %747 = load i32, i32* %746, align 4
  %748 = icmp ugt i32 %747, 127
  br i1 %748, label %760, label %749

749:                                              ; preds = %745
  %750 = call i32 @iswdigit(i32 %747) #12
  %751 = icmp eq i32 %750, 0
  br i1 %751, label %760, label %752

752:                                              ; preds = %749
  %753 = call i32 @iswdigit(i32 %747) #12
  %754 = icmp eq i32 %753, 0
  %755 = add nsw i32 %747, -48
  %756 = select i1 %754, i32 0, i32 %755
  %757 = add nuw i64 %88, 1
  %758 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %759 = icmp eq %"class.fxcrt::StringDataTemplate"* %758, null
  br i1 %759, label %760, label %1012

760:                                              ; preds = %1044, %1023, %752, %1054, %1033, %1012, %736, %1065, %1062, %1058, %1041, %1037, %1020, %1016, %745, %749
  %761 = phi i32 [ 0, %736 ], [ 0, %749 ], [ 0, %745 ], [ %756, %1012 ], [ %756, %1016 ], [ %756, %1020 ], [ %1029, %1033 ], [ %1029, %1037 ], [ %1029, %1041 ], [ %1050, %1054 ], [ %1050, %1058 ], [ %1050, %1062 ], [ %1071, %1065 ], [ %756, %752 ], [ %1029, %1023 ], [ %1050, %1044 ]
  %762 = phi i64 [ 0, %736 ], [ 0, %749 ], [ 0, %745 ], [ 1, %1012 ], [ 1, %1016 ], [ 1, %1020 ], [ 2, %1033 ], [ 2, %1037 ], [ 2, %1041 ], [ 3, %1054 ], [ 3, %1058 ], [ 3, %1062 ], [ 4, %1065 ], [ 1, %752 ], [ 2, %1023 ], [ 3, %1044 ]
  %763 = add i64 %762, %88
  %764 = add nuw i64 %87, 4
  br label %873

765:                                              ; preds = %729
  %766 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8, !noalias !8
  %767 = icmp eq %"class.fxcrt::StringDataTemplate"* %766, null
  br i1 %767, label %781, label %768

768:                                              ; preds = %765
  %769 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %766, i64 0, i32 1
  %770 = load i64, i64* %769, align 8, !noalias !8
  %771 = icmp ugt i64 %770, %88
  br i1 %771, label %772, label %781

772:                                              ; preds = %768, %778
  %773 = phi i64 [ %779, %778 ], [ %88, %768 ]
  %774 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %766, i64 0, i32 3, i64 %773
  %775 = load i32, i32* %774, align 4
  %776 = call i32 @iswalnum(i32 %775) #12
  %777 = icmp eq i32 %776, 0
  br i1 %777, label %781, label %778

778:                                              ; preds = %772
  %779 = add i64 %773, 1
  %780 = icmp eq i64 %779, %770
  br i1 %780, label %781, label %772

781:                                              ; preds = %772, %778, %765, %768
  %782 = phi i64 [ %88, %768 ], [ %88, %765 ], [ %773, %772 ], [ %770, %778 ]
  %783 = sub i64 %782, %88
  %784 = icmp ult i64 %783, 10
  br i1 %784, label %785, label %811

785:                                              ; preds = %781
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #12
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %52, align 8
  call void @_ZNK5fxcrt10WideString6SubstrEmm(%"class.fxcrt::WideString"* nonnull sret %6, %"class.fxcrt::WideString"* %0, i64 %88, i64 %783) #12
  call void @_ZN5fxcrt10WideString9MakeLowerEv(%"class.fxcrt::WideString"* nonnull %6) #12
  br label %786

786:                                              ; preds = %803, %785
  %787 = phi i64 [ 0, %785 ], [ %804, %803 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %53) #12
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %54, align 8
  %788 = getelementptr inbounds [12 x i32*], [12 x i32*]* @_ZN4fxjs11kFullMonthsE, i64 0, i64 %787
  %789 = load i32*, i32** %788, align 8
  call void @_ZN5fxcrt10WideStringC1EPKw(%"class.fxcrt::WideString"* nonnull %7, i32* %789) #12
  call void @_ZN5fxcrt10WideString9MakeLowerEv(%"class.fxcrt::WideString"* nonnull %7) #12
  %790 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %52, align 8
  %791 = icmp eq %"class.fxcrt::StringDataTemplate"* %790, null
  %792 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %790, i64 0, i32 3
  %793 = select i1 %791, [1 x i32]* @.str.24, [1 x i32]* %792
  %794 = getelementptr inbounds [1 x i32], [1 x i32]* %793, i64 0, i64 0
  %795 = icmp eq [1 x i32]* %793, null
  br i1 %795, label %798, label %796

796:                                              ; preds = %786
  %797 = call i64 @wcslen(i32* nonnull %794) #13
  br label %798

798:                                              ; preds = %786, %796
  %799 = phi i64 [ %797, %796 ], [ 0, %786 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %55)
  store i32* %794, i32** %56, align 8
  store i64 %799, i64* %57, align 8
  %800 = call { i8, i64 } @_ZNK5fxcrt10WideString4FindENS_18StringViewTemplateIwEEm(%"class.fxcrt::WideString"* nonnull %7, %"class.fxcrt::StringViewTemplate"* nonnull %4, i64 0) #12
  %801 = extractvalue { i8, i64 } %800, 0
  %802 = icmp eq i8 %801, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %55)
  br i1 %802, label %803, label %807

803:                                              ; preds = %798
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %53) #12
  %804 = add nuw nsw i64 %787, 1
  %805 = icmp eq i64 %804, 12
  br i1 %805, label %806, label %786

806:                                              ; preds = %803
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #12
  br label %811

807:                                              ; preds = %798
  %808 = trunc i64 %787 to i32
  %809 = add nuw nsw i32 %808, 1
  %810 = add i64 %87, 4
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %53) #12
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #12
  br label %873

811:                                              ; preds = %806, %781
  %812 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %813 = icmp eq %"class.fxcrt::StringDataTemplate"* %812, null
  br i1 %813, label %817, label %814

814:                                              ; preds = %811
  %815 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %812, i64 0, i32 1
  %816 = load i64, i64* %815, align 8
  br label %817

817:                                              ; preds = %814, %811
  %818 = phi i64 [ %816, %814 ], [ 0, %811 ]
  %819 = icmp ult i64 %88, %818
  br i1 %819, label %820, label %841

820:                                              ; preds = %817
  br i1 %813, label %825, label %821

821:                                              ; preds = %820
  %822 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %812, i64 0, i32 1
  %823 = load i64, i64* %822, align 8
  %824 = icmp ugt i64 %823, %88
  br i1 %824, label %826, label %825, !prof !2

825:                                              ; preds = %821, %820
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

826:                                              ; preds = %821
  %827 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %812, i64 0, i32 3, i64 %88
  %828 = load i32, i32* %827, align 4
  %829 = icmp ugt i32 %828, 127
  br i1 %829, label %841, label %830

830:                                              ; preds = %826
  %831 = call i32 @iswdigit(i32 %828) #12
  %832 = icmp eq i32 %831, 0
  br i1 %832, label %841, label %833

833:                                              ; preds = %830
  %834 = call i32 @iswdigit(i32 %828) #12
  %835 = icmp eq i32 %834, 0
  %836 = add nsw i32 %828, -48
  %837 = select i1 %835, i32 0, i32 %836
  %838 = add nuw i64 %88, 1
  %839 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %840 = icmp eq %"class.fxcrt::StringDataTemplate"* %839, null
  br i1 %840, label %841, label %952

841:                                              ; preds = %984, %963, %833, %994, %973, %952, %817, %1005, %1002, %998, %981, %977, %960, %956, %826, %830
  %842 = phi i32 [ 0, %817 ], [ 0, %830 ], [ 0, %826 ], [ %837, %952 ], [ %837, %956 ], [ %837, %960 ], [ %969, %973 ], [ %969, %977 ], [ %969, %981 ], [ %990, %994 ], [ %990, %998 ], [ %990, %1002 ], [ %1011, %1005 ], [ %837, %833 ], [ %969, %963 ], [ %990, %984 ]
  %843 = phi i64 [ 0, %817 ], [ 0, %830 ], [ 0, %826 ], [ 1, %952 ], [ 1, %956 ], [ 1, %960 ], [ 2, %973 ], [ 2, %977 ], [ 2, %981 ], [ 3, %994 ], [ 3, %998 ], [ 3, %1002 ], [ 4, %1005 ], [ 1, %833 ], [ 2, %963 ], [ 3, %984 ]
  %844 = add i64 %87, 4
  %845 = add i64 %843, %88
  br label %873

846:                                              ; preds = %729
  %847 = add nuw i64 %87, 4
  %848 = add i64 %88, 4
  br label %873

849:                                              ; preds = %725
  %850 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %851 = icmp eq %"class.fxcrt::StringDataTemplate"* %850, null
  br i1 %851, label %855, label %852

852:                                              ; preds = %849
  %853 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %850, i64 0, i32 1
  %854 = load i64, i64* %853, align 8
  br label %855

855:                                              ; preds = %849, %852
  %856 = phi i64 [ %854, %852 ], [ 0, %849 ]
  %857 = icmp ult i64 %88, %856
  br i1 %857, label %858, label %868

858:                                              ; preds = %855
  br i1 %851, label %863, label %859

859:                                              ; preds = %858
  %860 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %850, i64 0, i32 1
  %861 = load i64, i64* %860, align 8
  %862 = icmp ugt i64 %861, %88
  br i1 %862, label %864, label %863, !prof !2

863:                                              ; preds = %859, %858
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !4
  unreachable

864:                                              ; preds = %859
  %865 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %850, i64 0, i32 3, i64 %88
  %866 = load i32, i32* %865, align 4
  %867 = icmp eq i32 %102, %866
  br i1 %867, label %869, label %868

868:                                              ; preds = %864, %855
  br label %869

869:                                              ; preds = %864, %868
  %870 = phi i8 [ 1, %868 ], [ %80, %864 ]
  %871 = phi i8 [ 1, %868 ], [ %81, %864 ]
  %872 = add i64 %88, 1
  br label %873

873:                                              ; preds = %807, %677, %841, %711, %366, %631, %607, %575, %543, %511, %479, %447, %415, %869, %846, %760, %646, %716, %137, %167, %199, %231, %263, %295, %327, %351, %118
  %874 = phi i32 [ %61, %118 ], [ %61, %351 ], [ %61, %327 ], [ %61, %295 ], [ %61, %263 ], [ %61, %231 ], [ %61, %199 ], [ %61, %167 ], [ %61, %137 ], [ %61, %366 ], [ %61, %631 ], [ %61, %607 ], [ %61, %575 ], [ %61, %543 ], [ %61, %511 ], [ %61, %479 ], [ %61, %447 ], [ %416, %415 ], [ %61, %716 ], [ %61, %646 ], [ %61, %846 ], [ %761, %760 ], [ %61, %869 ], [ %61, %711 ], [ %61, %807 ], [ %61, %841 ], [ %61, %677 ]
  %875 = phi i32 [ %62, %118 ], [ %62, %351 ], [ %62, %327 ], [ %62, %295 ], [ %62, %263 ], [ %62, %231 ], [ %62, %199 ], [ %168, %167 ], [ %62, %137 ], [ %62, %366 ], [ %62, %631 ], [ %62, %607 ], [ %62, %575 ], [ %62, %543 ], [ %62, %511 ], [ %62, %479 ], [ %448, %447 ], [ %62, %415 ], [ %62, %716 ], [ %62, %646 ], [ %62, %846 ], [ %62, %760 ], [ %62, %869 ], [ %712, %711 ], [ %809, %807 ], [ %842, %841 ], [ %678, %677 ]
  %876 = phi i32 [ %63, %118 ], [ %63, %351 ], [ %63, %327 ], [ %63, %295 ], [ %63, %263 ], [ %63, %231 ], [ %200, %199 ], [ %63, %167 ], [ %63, %137 ], [ %63, %366 ], [ %63, %631 ], [ %63, %607 ], [ %63, %575 ], [ %63, %543 ], [ %63, %511 ], [ %480, %479 ], [ %63, %447 ], [ %63, %415 ], [ %63, %716 ], [ %63, %646 ], [ %63, %846 ], [ %63, %760 ], [ %63, %869 ], [ %63, %711 ], [ %63, %807 ], [ %63, %841 ], [ %63, %677 ]
  %877 = phi i32 [ %64, %118 ], [ %64, %351 ], [ %64, %327 ], [ %64, %295 ], [ %264, %263 ], [ %232, %231 ], [ %64, %199 ], [ %64, %167 ], [ %64, %137 ], [ %64, %366 ], [ %64, %631 ], [ %64, %607 ], [ %64, %575 ], [ %544, %543 ], [ %512, %511 ], [ %64, %479 ], [ %64, %447 ], [ %64, %415 ], [ %64, %716 ], [ %64, %646 ], [ %64, %846 ], [ %64, %760 ], [ %64, %869 ], [ %64, %711 ], [ %64, %807 ], [ %64, %841 ], [ %64, %677 ]
  %878 = phi i32 [ %65, %118 ], [ %65, %351 ], [ %65, %327 ], [ %296, %295 ], [ %65, %263 ], [ %65, %231 ], [ %65, %199 ], [ %65, %167 ], [ %65, %137 ], [ %65, %366 ], [ %65, %631 ], [ %65, %607 ], [ %576, %575 ], [ %65, %543 ], [ %65, %511 ], [ %65, %479 ], [ %65, %447 ], [ %65, %415 ], [ %65, %716 ], [ %65, %646 ], [ %65, %846 ], [ %65, %760 ], [ %65, %869 ], [ %65, %711 ], [ %65, %807 ], [ %65, %841 ], [ %65, %677 ]
  %879 = phi i32 [ %66, %118 ], [ %66, %351 ], [ %328, %327 ], [ %66, %295 ], [ %66, %263 ], [ %66, %231 ], [ %66, %199 ], [ %66, %167 ], [ %66, %137 ], [ %66, %366 ], [ %66, %631 ], [ %608, %607 ], [ %66, %575 ], [ %66, %543 ], [ %66, %511 ], [ %66, %479 ], [ %66, %447 ], [ %66, %415 ], [ %66, %716 ], [ %66, %646 ], [ %66, %846 ], [ %66, %760 ], [ %66, %869 ], [ %66, %711 ], [ %66, %807 ], [ %66, %841 ], [ %66, %677 ]
  %880 = phi i8 [ %67, %118 ], [ %353, %351 ], [ %67, %327 ], [ %67, %295 ], [ %67, %263 ], [ %67, %231 ], [ %67, %199 ], [ %67, %167 ], [ %67, %137 ], [ %67, %366 ], [ %633, %631 ], [ %67, %607 ], [ %67, %575 ], [ %67, %543 ], [ %67, %511 ], [ %67, %479 ], [ %67, %447 ], [ %67, %415 ], [ %67, %716 ], [ %67, %646 ], [ %67, %846 ], [ %67, %760 ], [ %67, %869 ], [ %67, %711 ], [ %67, %807 ], [ %67, %841 ], [ %67, %677 ]
  %881 = phi i8 [ %80, %118 ], [ %80, %351 ], [ %80, %327 ], [ %80, %295 ], [ %80, %263 ], [ %80, %231 ], [ %80, %199 ], [ %80, %167 ], [ %80, %137 ], [ %80, %366 ], [ %80, %631 ], [ %80, %607 ], [ %80, %575 ], [ %80, %543 ], [ %80, %511 ], [ %80, %479 ], [ %80, %447 ], [ %80, %415 ], [ %80, %716 ], [ %80, %646 ], [ %80, %846 ], [ %80, %760 ], [ %870, %869 ], [ %80, %711 ], [ %80, %807 ], [ %80, %841 ], [ %80, %677 ]
  %882 = phi i8 [ %81, %118 ], [ %81, %351 ], [ %81, %327 ], [ %81, %295 ], [ %81, %263 ], [ %81, %231 ], [ %81, %199 ], [ %81, %167 ], [ %81, %137 ], [ %81, %366 ], [ %81, %631 ], [ %81, %607 ], [ %81, %575 ], [ %81, %543 ], [ %81, %511 ], [ %81, %479 ], [ %81, %447 ], [ %81, %415 ], [ %81, %716 ], [ %81, %646 ], [ %81, %846 ], [ %81, %760 ], [ %871, %869 ], [ %81, %711 ], [ %81, %807 ], [ %81, %841 ], [ %81, %677 ]
  %883 = phi i64 [ %87, %118 ], [ %354, %351 ], [ %330, %327 ], [ %298, %295 ], [ %266, %263 ], [ %234, %231 ], [ %202, %199 ], [ %170, %167 ], [ %138, %137 ], [ %87, %366 ], [ %634, %631 ], [ %610, %607 ], [ %578, %575 ], [ %546, %543 ], [ %514, %511 ], [ %482, %479 ], [ %450, %447 ], [ %418, %415 ], [ %717, %716 ], [ %87, %646 ], [ %847, %846 ], [ %764, %760 ], [ %111, %869 ], [ %714, %711 ], [ %810, %807 ], [ %844, %841 ], [ %679, %677 ]
  %884 = phi i64 [ %88, %118 ], [ %355, %351 ], [ %331, %327 ], [ %299, %295 ], [ %267, %263 ], [ %235, %231 ], [ %203, %199 ], [ %171, %167 ], [ %139, %137 ], [ %88, %366 ], [ %635, %631 ], [ %611, %607 ], [ %579, %575 ], [ %547, %543 ], [ %515, %511 ], [ %483, %479 ], [ %451, %447 ], [ %419, %415 ], [ %718, %716 ], [ %88, %646 ], [ %848, %846 ], [ %763, %760 ], [ %872, %869 ], [ %715, %711 ], [ %782, %807 ], [ %845, %841 ], [ %664, %677 ]
  %885 = icmp eq i64 %88, %884
  %886 = select i1 %885, i8 1, i8 %881
  %887 = select i1 %885, i8 1, i8 %882
  br label %60

888:                                              ; preds = %100
  br i1 %77, label %898, label %889

889:                                              ; preds = %888
  %890 = load i64, i64* %78, align 8
  %891 = icmp ugt i64 %890, %88
  br i1 %891, label %892, label %898

892:                                              ; preds = %889
  %893 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %76, i64 0, i32 3, i64 %88
  %894 = load i32, i32* %893, align 4
  %895 = icmp eq i32 %102, %894
  %896 = select i1 %895, i8 %80, i8 1
  %897 = select i1 %895, i8 %81, i8 1
  br label %898

898:                                              ; preds = %888, %892, %889
  %899 = phi i8 [ 1, %889 ], [ %896, %892 ], [ 1, %888 ]
  %900 = phi i8 [ %81, %889 ], [ %897, %892 ], [ %81, %888 ]
  %901 = add nuw i64 %87, 1
  %902 = add i64 %88, 1
  br label %79

903:                                              ; preds = %91
  %904 = and i8 %81, 1
  %905 = icmp eq i8 %904, 0
  br i1 %905, label %906, label %950

906:                                              ; preds = %903
  %907 = and i8 %67, 1
  %908 = icmp eq i8 %907, 0
  %909 = add nsw i32 %64, 12
  %910 = select i1 %908, i32 %64, i32 %909
  %911 = add i32 %62, -1
  %912 = icmp ult i32 %911, 12
  %913 = add i32 %63, -1
  %914 = icmp ult i32 %913, 31
  %915 = and i1 %912, %914
  %916 = icmp ult i32 %910, 25
  %917 = and i1 %915, %916
  %918 = icmp ult i32 %65, 61
  %919 = and i1 %918, %917
  %920 = icmp ult i32 %66, 61
  %921 = and i1 %920, %919
  br i1 %921, label %922, label %950

922:                                              ; preds = %906
  %923 = icmp ult i32 %61, 100
  %924 = add nsw i32 %61, 2000
  %925 = select i1 %923, i32 %924, i32 %61
  %926 = call double @_ZN4fxjs10FX_MakeDayEiii(i32 %925, i32 %911, i32 %63)
  %927 = sitofp i32 %910 to double
  %928 = sitofp i32 %65 to double
  %929 = sitofp i32 %66 to double
  %930 = fmul double %927, 3.600000e+06
  %931 = fmul double %928, 6.000000e+04
  %932 = fadd double %931, %930
  %933 = fmul double %929, 1.000000e+03
  %934 = fadd double %933, %932
  %935 = fadd double %934, 0.000000e+00
  %936 = call double @llvm.fabs.f64(double %926) #14
  %937 = fcmp one double %936, 0x7FF0000000000000
  %938 = call double @llvm.fabs.f64(double %935) #14
  %939 = fcmp one double %938, 0x7FF0000000000000
  %940 = and i1 %939, %937
  br i1 %940, label %943, label %941

941:                                              ; preds = %922
  %942 = call double @nan(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.23, i64 0, i64 0)) #13
  br label %946

943:                                              ; preds = %922
  %944 = fmul double %926, 8.640000e+07
  %945 = fadd double %935, %944
  br label %946

946:                                              ; preds = %941, %943
  %947 = phi double [ %945, %943 ], [ %942, %941 ]
  %948 = fcmp uno double %947, 0.000000e+00
  br i1 %948, label %950, label %949

949:                                              ; preds = %946
  store double %947, double* %2, align 8
  br label %950

950:                                              ; preds = %949, %903, %906, %946, %24
  %951 = phi i32 [ 0, %24 ], [ 0, %949 ], [ 1, %903 ], [ 2, %906 ], [ 2, %946 ]
  ret i32 %951

952:                                              ; preds = %833
  %953 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %839, i64 0, i32 1
  %954 = load i64, i64* %953, align 8
  %955 = icmp ult i64 %838, %954
  br i1 %955, label %956, label %841

956:                                              ; preds = %952
  %957 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %839, i64 0, i32 3, i64 %838
  %958 = load i32, i32* %957, align 4
  %959 = icmp ugt i32 %958, 127
  br i1 %959, label %841, label %960

960:                                              ; preds = %956
  %961 = call i32 @iswdigit(i32 %958) #12
  %962 = icmp eq i32 %961, 0
  br i1 %962, label %841, label %963

963:                                              ; preds = %960
  %964 = mul nsw i32 %837, 10
  %965 = call i32 @iswdigit(i32 %958) #12
  %966 = icmp eq i32 %965, 0
  %967 = add nsw i32 %958, -48
  %968 = select i1 %966, i32 0, i32 %967
  %969 = add nsw i32 %968, %964
  %970 = add nuw i64 %88, 2
  %971 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %972 = icmp eq %"class.fxcrt::StringDataTemplate"* %971, null
  br i1 %972, label %841, label %973

973:                                              ; preds = %963
  %974 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %971, i64 0, i32 1
  %975 = load i64, i64* %974, align 8
  %976 = icmp ult i64 %970, %975
  br i1 %976, label %977, label %841

977:                                              ; preds = %973
  %978 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %971, i64 0, i32 3, i64 %970
  %979 = load i32, i32* %978, align 4
  %980 = icmp ugt i32 %979, 127
  br i1 %980, label %841, label %981

981:                                              ; preds = %977
  %982 = call i32 @iswdigit(i32 %979) #12
  %983 = icmp eq i32 %982, 0
  br i1 %983, label %841, label %984

984:                                              ; preds = %981
  %985 = mul nsw i32 %969, 10
  %986 = call i32 @iswdigit(i32 %979) #12
  %987 = icmp eq i32 %986, 0
  %988 = add nsw i32 %979, -48
  %989 = select i1 %987, i32 0, i32 %988
  %990 = add nsw i32 %989, %985
  %991 = add nuw i64 %88, 3
  %992 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %993 = icmp eq %"class.fxcrt::StringDataTemplate"* %992, null
  br i1 %993, label %841, label %994

994:                                              ; preds = %984
  %995 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %992, i64 0, i32 1
  %996 = load i64, i64* %995, align 8
  %997 = icmp ult i64 %991, %996
  br i1 %997, label %998, label %841

998:                                              ; preds = %994
  %999 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %992, i64 0, i32 3, i64 %991
  %1000 = load i32, i32* %999, align 4
  %1001 = icmp ugt i32 %1000, 127
  br i1 %1001, label %841, label %1002

1002:                                             ; preds = %998
  %1003 = call i32 @iswdigit(i32 %1000) #12
  %1004 = icmp eq i32 %1003, 0
  br i1 %1004, label %841, label %1005

1005:                                             ; preds = %1002
  %1006 = mul nsw i32 %990, 10
  %1007 = call i32 @iswdigit(i32 %1000) #12
  %1008 = icmp eq i32 %1007, 0
  %1009 = add nsw i32 %1000, -48
  %1010 = select i1 %1008, i32 0, i32 %1009
  %1011 = add nsw i32 %1010, %1006
  br label %841

1012:                                             ; preds = %752
  %1013 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %758, i64 0, i32 1
  %1014 = load i64, i64* %1013, align 8
  %1015 = icmp ult i64 %757, %1014
  br i1 %1015, label %1016, label %760

1016:                                             ; preds = %1012
  %1017 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %758, i64 0, i32 3, i64 %757
  %1018 = load i32, i32* %1017, align 4
  %1019 = icmp ugt i32 %1018, 127
  br i1 %1019, label %760, label %1020

1020:                                             ; preds = %1016
  %1021 = call i32 @iswdigit(i32 %1018) #12
  %1022 = icmp eq i32 %1021, 0
  br i1 %1022, label %760, label %1023

1023:                                             ; preds = %1020
  %1024 = mul nsw i32 %756, 10
  %1025 = call i32 @iswdigit(i32 %1018) #12
  %1026 = icmp eq i32 %1025, 0
  %1027 = add nsw i32 %1018, -48
  %1028 = select i1 %1026, i32 0, i32 %1027
  %1029 = add nsw i32 %1028, %1024
  %1030 = add nuw i64 %88, 2
  %1031 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %1032 = icmp eq %"class.fxcrt::StringDataTemplate"* %1031, null
  br i1 %1032, label %760, label %1033

1033:                                             ; preds = %1023
  %1034 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %1031, i64 0, i32 1
  %1035 = load i64, i64* %1034, align 8
  %1036 = icmp ult i64 %1030, %1035
  br i1 %1036, label %1037, label %760

1037:                                             ; preds = %1033
  %1038 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %1031, i64 0, i32 3, i64 %1030
  %1039 = load i32, i32* %1038, align 4
  %1040 = icmp ugt i32 %1039, 127
  br i1 %1040, label %760, label %1041

1041:                                             ; preds = %1037
  %1042 = call i32 @iswdigit(i32 %1039) #12
  %1043 = icmp eq i32 %1042, 0
  br i1 %1043, label %760, label %1044

1044:                                             ; preds = %1041
  %1045 = mul nsw i32 %1029, 10
  %1046 = call i32 @iswdigit(i32 %1039) #12
  %1047 = icmp eq i32 %1046, 0
  %1048 = add nsw i32 %1039, -48
  %1049 = select i1 %1047, i32 0, i32 %1048
  %1050 = add nsw i32 %1049, %1045
  %1051 = add nuw i64 %88, 3
  %1052 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %1053 = icmp eq %"class.fxcrt::StringDataTemplate"* %1052, null
  br i1 %1053, label %760, label %1054

1054:                                             ; preds = %1044
  %1055 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %1052, i64 0, i32 1
  %1056 = load i64, i64* %1055, align 8
  %1057 = icmp ult i64 %1051, %1056
  br i1 %1057, label %1058, label %760

1058:                                             ; preds = %1054
  %1059 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %1052, i64 0, i32 3, i64 %1051
  %1060 = load i32, i32* %1059, align 4
  %1061 = icmp ugt i32 %1060, 127
  br i1 %1061, label %760, label %1062

1062:                                             ; preds = %1058
  %1063 = call i32 @iswdigit(i32 %1060) #12
  %1064 = icmp eq i32 %1063, 0
  br i1 %1064, label %760, label %1065

1065:                                             ; preds = %1062
  %1066 = mul nsw i32 %1050, 10
  %1067 = call i32 @iswdigit(i32 %1060) #12
  %1068 = icmp eq i32 %1067, 0
  %1069 = add nsw i32 %1060, -48
  %1070 = select i1 %1068, i32 0, i32 %1069
  %1071 = add nsw i32 %1070, %1066
  br label %760

1072:                                             ; preds = %703
  %1073 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %709, i64 0, i32 1
  %1074 = load i64, i64* %1073, align 8
  %1075 = icmp ult i64 %708, %1074
  br i1 %1075, label %1076, label %711

1076:                                             ; preds = %1072
  %1077 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %709, i64 0, i32 3, i64 %708
  %1078 = load i32, i32* %1077, align 4
  %1079 = icmp ugt i32 %1078, 127
  br i1 %1079, label %711, label %1080

1080:                                             ; preds = %1076
  %1081 = call i32 @iswdigit(i32 %1078) #12
  %1082 = icmp eq i32 %1081, 0
  br i1 %1082, label %711, label %1083

1083:                                             ; preds = %1080
  %1084 = mul nsw i32 %707, 10
  %1085 = call i32 @iswdigit(i32 %1078) #12
  %1086 = icmp eq i32 %1085, 0
  %1087 = add nsw i32 %1078, -48
  %1088 = select i1 %1086, i32 0, i32 %1087
  %1089 = add nsw i32 %1088, %1084
  %1090 = add nuw i64 %88, 2
  %1091 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %17, align 8
  %1092 = icmp eq %"class.fxcrt::StringDataTemplate"* %1091, null
  br i1 %1092, label %711, label %1093

1093:                                             ; preds = %1083
  %1094 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %1091, i64 0, i32 1
  %1095 = load i64, i64* %1094, align 8
  %1096 = icmp ult i64 %1090, %1095
  br i1 %1096, label %1097, label %711

1097:                                             ; preds = %1093
  %1098 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %1091, i64 0, i32 3, i64 %1090
  %1099 = load i32, i32* %1098, align 4
  %1100 = icmp ugt i32 %1099, 127
  br i1 %1100, label %711, label %1101

1101:                                             ; preds = %1097
  %1102 = call i32 @iswdigit(i32 %1099) #12
  %1103 = icmp eq i32 %1102, 0
  br i1 %1103, label %711, label %1104

1104:                                             ; preds = %1101
  %1105 = mul nsw i32 %1089, 10
  %1106 = call i32 @iswdigit(i32 %1099) #12
  %1107 = icmp eq i32 %1106, 0
  %1108 = add nsw i32 %1099, -48
  %1109 = select i1 %1107, i32 0, i32 %1108
  %1110 = add nsw i32 %1109, %1105
  br label %711

1111:                                             ; preds = %599
  %1112 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %605, i64 0, i32 1
  %1113 = load i64, i64* %1112, align 8
  %1114 = icmp ult i64 %604, %1113
  br i1 %1114, label %1115, label %607

1115:                                             ; preds = %1111
  %1116 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %605, i64 0, i32 3, i64 %604
  %1117 = load i32, i32* %1116, align 4
  %1118 = icmp ugt i32 %1117, 127
  br i1 %1118, label %607, label %1119

1119:                                             ; preds = %1115
  %1120 = call i32 @iswdigit(i32 %1117) #12
  %1121 = icmp eq i32 %1120, 0
  br i1 %1121, label %607, label %1122

1122:                                             ; preds = %1119
  %1123 = mul nsw i32 %603, 10
  %1124 = call i32 @iswdigit(i32 %1117) #12
  %1125 = icmp eq i32 %1124, 0
  %1126 = add nsw i32 %1117, -48
  %1127 = select i1 %1125, i32 0, i32 %1126
  %1128 = add nsw i32 %1127, %1123
  br label %607

1129:                                             ; preds = %567
  %1130 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %573, i64 0, i32 1
  %1131 = load i64, i64* %1130, align 8
  %1132 = icmp ult i64 %572, %1131
  br i1 %1132, label %1133, label %575

1133:                                             ; preds = %1129
  %1134 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %573, i64 0, i32 3, i64 %572
  %1135 = load i32, i32* %1134, align 4
  %1136 = icmp ugt i32 %1135, 127
  br i1 %1136, label %575, label %1137

1137:                                             ; preds = %1133
  %1138 = call i32 @iswdigit(i32 %1135) #12
  %1139 = icmp eq i32 %1138, 0
  br i1 %1139, label %575, label %1140

1140:                                             ; preds = %1137
  %1141 = mul nsw i32 %571, 10
  %1142 = call i32 @iswdigit(i32 %1135) #12
  %1143 = icmp eq i32 %1142, 0
  %1144 = add nsw i32 %1135, -48
  %1145 = select i1 %1143, i32 0, i32 %1144
  %1146 = add nsw i32 %1145, %1141
  br label %575

1147:                                             ; preds = %535
  %1148 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %541, i64 0, i32 1
  %1149 = load i64, i64* %1148, align 8
  %1150 = icmp ult i64 %540, %1149
  br i1 %1150, label %1151, label %543

1151:                                             ; preds = %1147
  %1152 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %541, i64 0, i32 3, i64 %540
  %1153 = load i32, i32* %1152, align 4
  %1154 = icmp ugt i32 %1153, 127
  br i1 %1154, label %543, label %1155

1155:                                             ; preds = %1151
  %1156 = call i32 @iswdigit(i32 %1153) #12
  %1157 = icmp eq i32 %1156, 0
  br i1 %1157, label %543, label %1158

1158:                                             ; preds = %1155
  %1159 = mul nsw i32 %539, 10
  %1160 = call i32 @iswdigit(i32 %1153) #12
  %1161 = icmp eq i32 %1160, 0
  %1162 = add nsw i32 %1153, -48
  %1163 = select i1 %1161, i32 0, i32 %1162
  %1164 = add nsw i32 %1163, %1159
  br label %543

1165:                                             ; preds = %503
  %1166 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %509, i64 0, i32 1
  %1167 = load i64, i64* %1166, align 8
  %1168 = icmp ult i64 %508, %1167
  br i1 %1168, label %1169, label %511

1169:                                             ; preds = %1165
  %1170 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %509, i64 0, i32 3, i64 %508
  %1171 = load i32, i32* %1170, align 4
  %1172 = icmp ugt i32 %1171, 127
  br i1 %1172, label %511, label %1173

1173:                                             ; preds = %1169
  %1174 = call i32 @iswdigit(i32 %1171) #12
  %1175 = icmp eq i32 %1174, 0
  br i1 %1175, label %511, label %1176

1176:                                             ; preds = %1173
  %1177 = mul nsw i32 %507, 10
  %1178 = call i32 @iswdigit(i32 %1171) #12
  %1179 = icmp eq i32 %1178, 0
  %1180 = add nsw i32 %1171, -48
  %1181 = select i1 %1179, i32 0, i32 %1180
  %1182 = add nsw i32 %1181, %1177
  br label %511

1183:                                             ; preds = %471
  %1184 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %477, i64 0, i32 1
  %1185 = load i64, i64* %1184, align 8
  %1186 = icmp ult i64 %476, %1185
  br i1 %1186, label %1187, label %479

1187:                                             ; preds = %1183
  %1188 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %477, i64 0, i32 3, i64 %476
  %1189 = load i32, i32* %1188, align 4
  %1190 = icmp ugt i32 %1189, 127
  br i1 %1190, label %479, label %1191

1191:                                             ; preds = %1187
  %1192 = call i32 @iswdigit(i32 %1189) #12
  %1193 = icmp eq i32 %1192, 0
  br i1 %1193, label %479, label %1194

1194:                                             ; preds = %1191
  %1195 = mul nsw i32 %475, 10
  %1196 = call i32 @iswdigit(i32 %1189) #12
  %1197 = icmp eq i32 %1196, 0
  %1198 = add nsw i32 %1189, -48
  %1199 = select i1 %1197, i32 0, i32 %1198
  %1200 = add nsw i32 %1199, %1195
  br label %479

1201:                                             ; preds = %439
  %1202 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %445, i64 0, i32 1
  %1203 = load i64, i64* %1202, align 8
  %1204 = icmp ult i64 %444, %1203
  br i1 %1204, label %1205, label %447

1205:                                             ; preds = %1201
  %1206 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %445, i64 0, i32 3, i64 %444
  %1207 = load i32, i32* %1206, align 4
  %1208 = icmp ugt i32 %1207, 127
  br i1 %1208, label %447, label %1209

1209:                                             ; preds = %1205
  %1210 = call i32 @iswdigit(i32 %1207) #12
  %1211 = icmp eq i32 %1210, 0
  br i1 %1211, label %447, label %1212

1212:                                             ; preds = %1209
  %1213 = mul nsw i32 %443, 10
  %1214 = call i32 @iswdigit(i32 %1207) #12
  %1215 = icmp eq i32 %1214, 0
  %1216 = add nsw i32 %1207, -48
  %1217 = select i1 %1215, i32 0, i32 %1216
  %1218 = add nsw i32 %1217, %1213
  br label %447

1219:                                             ; preds = %407
  %1220 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %413, i64 0, i32 1
  %1221 = load i64, i64* %1220, align 8
  %1222 = icmp ult i64 %412, %1221
  br i1 %1222, label %1223, label %415

1223:                                             ; preds = %1219
  %1224 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %413, i64 0, i32 3, i64 %412
  %1225 = load i32, i32* %1224, align 4
  %1226 = icmp ugt i32 %1225, 127
  br i1 %1226, label %415, label %1227

1227:                                             ; preds = %1223
  %1228 = call i32 @iswdigit(i32 %1225) #12
  %1229 = icmp eq i32 %1228, 0
  br i1 %1229, label %415, label %1230

1230:                                             ; preds = %1227
  %1231 = mul nsw i32 %411, 10
  %1232 = call i32 @iswdigit(i32 %1225) #12
  %1233 = icmp eq i32 %1232, 0
  %1234 = add nsw i32 %1225, -48
  %1235 = select i1 %1233, i32 0, i32 %1234
  %1236 = add nsw i32 %1235, %1231
  br label %415

1237:                                             ; preds = %319
  %1238 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %325, i64 0, i32 1
  %1239 = load i64, i64* %1238, align 8
  %1240 = icmp ult i64 %324, %1239
  br i1 %1240, label %1241, label %327

1241:                                             ; preds = %1237
  %1242 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %325, i64 0, i32 3, i64 %324
  %1243 = load i32, i32* %1242, align 4
  %1244 = icmp ugt i32 %1243, 127
  br i1 %1244, label %327, label %1245

1245:                                             ; preds = %1241
  %1246 = call i32 @iswdigit(i32 %1243) #12
  %1247 = icmp eq i32 %1246, 0
  br i1 %1247, label %327, label %1248

1248:                                             ; preds = %1245
  %1249 = mul nsw i32 %323, 10
  %1250 = call i32 @iswdigit(i32 %1243) #12
  %1251 = icmp eq i32 %1250, 0
  %1252 = add nsw i32 %1243, -48
  %1253 = select i1 %1251, i32 0, i32 %1252
  %1254 = add nsw i32 %1253, %1249
  br label %327

1255:                                             ; preds = %287
  %1256 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %293, i64 0, i32 1
  %1257 = load i64, i64* %1256, align 8
  %1258 = icmp ult i64 %292, %1257
  br i1 %1258, label %1259, label %295

1259:                                             ; preds = %1255
  %1260 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %293, i64 0, i32 3, i64 %292
  %1261 = load i32, i32* %1260, align 4
  %1262 = icmp ugt i32 %1261, 127
  br i1 %1262, label %295, label %1263

1263:                                             ; preds = %1259
  %1264 = call i32 @iswdigit(i32 %1261) #12
  %1265 = icmp eq i32 %1264, 0
  br i1 %1265, label %295, label %1266

1266:                                             ; preds = %1263
  %1267 = mul nsw i32 %291, 10
  %1268 = call i32 @iswdigit(i32 %1261) #12
  %1269 = icmp eq i32 %1268, 0
  %1270 = add nsw i32 %1261, -48
  %1271 = select i1 %1269, i32 0, i32 %1270
  %1272 = add nsw i32 %1271, %1267
  br label %295

1273:                                             ; preds = %255
  %1274 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %261, i64 0, i32 1
  %1275 = load i64, i64* %1274, align 8
  %1276 = icmp ult i64 %260, %1275
  br i1 %1276, label %1277, label %263

1277:                                             ; preds = %1273
  %1278 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %261, i64 0, i32 3, i64 %260
  %1279 = load i32, i32* %1278, align 4
  %1280 = icmp ugt i32 %1279, 127
  br i1 %1280, label %263, label %1281

1281:                                             ; preds = %1277
  %1282 = call i32 @iswdigit(i32 %1279) #12
  %1283 = icmp eq i32 %1282, 0
  br i1 %1283, label %263, label %1284

1284:                                             ; preds = %1281
  %1285 = mul nsw i32 %259, 10
  %1286 = call i32 @iswdigit(i32 %1279) #12
  %1287 = icmp eq i32 %1286, 0
  %1288 = add nsw i32 %1279, -48
  %1289 = select i1 %1287, i32 0, i32 %1288
  %1290 = add nsw i32 %1289, %1285
  br label %263

1291:                                             ; preds = %223
  %1292 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %229, i64 0, i32 1
  %1293 = load i64, i64* %1292, align 8
  %1294 = icmp ult i64 %228, %1293
  br i1 %1294, label %1295, label %231

1295:                                             ; preds = %1291
  %1296 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %229, i64 0, i32 3, i64 %228
  %1297 = load i32, i32* %1296, align 4
  %1298 = icmp ugt i32 %1297, 127
  br i1 %1298, label %231, label %1299

1299:                                             ; preds = %1295
  %1300 = call i32 @iswdigit(i32 %1297) #12
  %1301 = icmp eq i32 %1300, 0
  br i1 %1301, label %231, label %1302

1302:                                             ; preds = %1299
  %1303 = mul nsw i32 %227, 10
  %1304 = call i32 @iswdigit(i32 %1297) #12
  %1305 = icmp eq i32 %1304, 0
  %1306 = add nsw i32 %1297, -48
  %1307 = select i1 %1305, i32 0, i32 %1306
  %1308 = add nsw i32 %1307, %1303
  br label %231

1309:                                             ; preds = %191
  %1310 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %197, i64 0, i32 1
  %1311 = load i64, i64* %1310, align 8
  %1312 = icmp ult i64 %196, %1311
  br i1 %1312, label %1313, label %199

1313:                                             ; preds = %1309
  %1314 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %197, i64 0, i32 3, i64 %196
  %1315 = load i32, i32* %1314, align 4
  %1316 = icmp ugt i32 %1315, 127
  br i1 %1316, label %199, label %1317

1317:                                             ; preds = %1313
  %1318 = call i32 @iswdigit(i32 %1315) #12
  %1319 = icmp eq i32 %1318, 0
  br i1 %1319, label %199, label %1320

1320:                                             ; preds = %1317
  %1321 = mul nsw i32 %195, 10
  %1322 = call i32 @iswdigit(i32 %1315) #12
  %1323 = icmp eq i32 %1322, 0
  %1324 = add nsw i32 %1315, -48
  %1325 = select i1 %1323, i32 0, i32 %1324
  %1326 = add nsw i32 %1325, %1321
  br label %199

1327:                                             ; preds = %159
  %1328 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %165, i64 0, i32 1
  %1329 = load i64, i64* %1328, align 8
  %1330 = icmp ult i64 %164, %1329
  br i1 %1330, label %1331, label %167

1331:                                             ; preds = %1327
  %1332 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %165, i64 0, i32 3, i64 %164
  %1333 = load i32, i32* %1332, align 4
  %1334 = icmp ugt i32 %1333, 127
  br i1 %1334, label %167, label %1335

1335:                                             ; preds = %1331
  %1336 = call i32 @iswdigit(i32 %1333) #12
  %1337 = icmp eq i32 %1336, 0
  br i1 %1337, label %167, label %1338

1338:                                             ; preds = %1335
  %1339 = mul nsw i32 %163, 10
  %1340 = call i32 @iswdigit(i32 %1333) #12
  %1341 = icmp eq i32 %1340, 0
  %1342 = add nsw i32 %1333, -48
  %1343 = select i1 %1341, i32 0, i32 %1342
  %1344 = add nsw i32 %1343, %1339
  br label %167
}

declare void @_ZNK5fxcrt10WideString6SubstrEmm(%"class.fxcrt::WideString"* sret, %"class.fxcrt::WideString"*, i64, i64) local_unnamed_addr #1

declare i32 @_ZNK5fxcrt10WideString13CompareNoCaseEPKw(%"class.fxcrt::WideString"*, i32*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"*) unnamed_addr #9

declare void @_ZN5fxcrt10WideString9MakeLowerEv(%"class.fxcrt::WideString"*) local_unnamed_addr #1

declare void @_ZN5fxcrt10WideStringC1EPKw(%"class.fxcrt::WideString"*, i32*) unnamed_addr #1

; Function Attrs: nounwind readnone ssp uwtable
define internal fastcc i32 @_ZN4fxjs12_GLOBAL__N_113DayWithinYearEd(double) unnamed_addr #3 {
  %2 = fdiv double %0, 0x421D63C37F000000
  %3 = fptosi double %2 to i32
  %4 = add nsw i32 %3, 1970
  %5 = sitofp i32 %4 to double
  %6 = fadd double %5, -1.970000e+03
  %7 = fmul double %6, 3.650000e+02
  %8 = fadd double %5, -1.969000e+03
  %9 = fmul double %8, 2.500000e-01
  %10 = tail call double @llvm.floor.f64(double %9) #12
  %11 = fadd double %7, %10
  %12 = fadd double %5, -1.901000e+03
  %13 = fdiv double %12, 1.000000e+02
  %14 = tail call double @llvm.floor.f64(double %13) #12
  %15 = fsub double %11, %14
  %16 = fadd double %5, -1.601000e+03
  %17 = fdiv double %16, 4.000000e+02
  %18 = tail call double @llvm.floor.f64(double %17) #12
  %19 = fadd double %18, %15
  %20 = fptosi double %19 to i32
  %21 = sitofp i32 %20 to double
  %22 = fmul double %21, 8.640000e+07
  %23 = fcmp ugt double %22, %0
  br i1 %23, label %46, label %24

24:                                               ; preds = %1, %24
  %25 = phi i32 [ %26, %24 ], [ %4, %1 ]
  %26 = add nsw i32 %25, 1
  %27 = sitofp i32 %26 to double
  %28 = fadd double %27, -1.970000e+03
  %29 = fmul double %28, 3.650000e+02
  %30 = fadd double %27, -1.969000e+03
  %31 = fmul double %30, 2.500000e-01
  %32 = tail call double @llvm.floor.f64(double %31) #12
  %33 = fadd double %29, %32
  %34 = fadd double %27, -1.901000e+03
  %35 = fdiv double %34, 1.000000e+02
  %36 = tail call double @llvm.floor.f64(double %35) #12
  %37 = fsub double %33, %36
  %38 = fadd double %27, -1.601000e+03
  %39 = fdiv double %38, 4.000000e+02
  %40 = tail call double @llvm.floor.f64(double %39) #12
  %41 = fadd double %40, %37
  %42 = fptosi double %41 to i32
  %43 = sitofp i32 %42 to double
  %44 = fmul double %43, 8.640000e+07
  %45 = fcmp ugt double %44, %0
  br i1 %45, label %68, label %24

46:                                               ; preds = %1, %46
  %47 = phi i32 [ %67, %46 ], [ %4, %1 ]
  %48 = sitofp i32 %47 to double
  %49 = fadd double %48, -1.970000e+03
  %50 = fmul double %49, 3.650000e+02
  %51 = fadd double %48, -1.969000e+03
  %52 = fmul double %51, 2.500000e-01
  %53 = tail call double @llvm.floor.f64(double %52) #12
  %54 = fadd double %50, %53
  %55 = fadd double %48, -1.901000e+03
  %56 = fdiv double %55, 1.000000e+02
  %57 = tail call double @llvm.floor.f64(double %56) #12
  %58 = fsub double %54, %57
  %59 = fadd double %48, -1.601000e+03
  %60 = fdiv double %59, 4.000000e+02
  %61 = tail call double @llvm.floor.f64(double %60) #12
  %62 = fadd double %61, %58
  %63 = fptosi double %62 to i32
  %64 = sitofp i32 %63 to double
  %65 = fmul double %64, 8.640000e+07
  %66 = fcmp ogt double %65, %0
  %67 = add nsw i32 %47, -1
  br i1 %66, label %46, label %85

68:                                               ; preds = %24
  %69 = sitofp i32 %25 to double
  %70 = fadd double %69, -1.970000e+03
  %71 = fmul double %70, 3.650000e+02
  %72 = fadd double %69, -1.969000e+03
  %73 = fmul double %72, 2.500000e-01
  %74 = tail call double @llvm.floor.f64(double %73) #12
  %75 = fadd double %71, %74
  %76 = fadd double %69, -1.901000e+03
  %77 = fdiv double %76, 1.000000e+02
  %78 = tail call double @llvm.floor.f64(double %77) #12
  %79 = fsub double %75, %78
  %80 = fadd double %69, -1.601000e+03
  %81 = fdiv double %80, 4.000000e+02
  %82 = tail call double @llvm.floor.f64(double %81) #12
  %83 = fadd double %82, %79
  %84 = fptosi double %83 to i32
  br label %85

85:                                               ; preds = %46, %68
  %86 = phi i32 [ %84, %68 ], [ %63, %46 ]
  %87 = fdiv double %0, 8.640000e+07
  %88 = tail call double @llvm.floor.f64(double %87) #12
  %89 = fptosi double %88 to i32
  %90 = sub nsw i32 %89, %86
  ret i32 %90
}

; Function Attrs: nofree nounwind
declare double @fmod(double, double) local_unnamed_addr #10

; Function Attrs: nounwind
declare i32 @iswdigit(i32) local_unnamed_addr #9

; Function Attrs: nounwind
declare i32 @iswalnum(i32) local_unnamed_addr #9

declare { i8, i64 } @_ZNK5fxcrt10WideString4FindENS_18StringViewTemplateIwEEm(%"class.fxcrt::WideString"*, %"class.fxcrt::StringViewTemplate"*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @wcslen(i32* nocapture) local_unnamed_addr #11

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i32 -2143820028}
!4 = !{i32 -2143820007}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK5fxcrt10WideString4spanEv: argument 0"}
!7 = distinct !{!7, !"_ZNK5fxcrt10WideString4spanEv"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNK5fxcrt10WideString4spanEv: argument 0"}
!10 = distinct !{!10, !"_ZNK5fxcrt10WideString4spanEv"}
