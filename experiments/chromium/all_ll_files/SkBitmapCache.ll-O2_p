; ModuleID = '../../third_party/skia/src/core/SkBitmapCache.cpp'
source_filename = "../../third_party/skia/src/core/SkBitmapCache.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkBitmapCacheDesc = type { i32, %struct.SkIRect }
%struct.SkIRect = type { i32, i32, i32, i32 }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.SkPixelRef = type <{ %class.SkRefCnt.base, i32, i32, [4 x i8], i8*, i64, %"struct.std::__1::atomic.6", [4 x i8], %"class.SkIDChangeListener::List", %"struct.std::__1::atomic.11", i8, [6 x i8] }>
%"struct.std::__1::atomic.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__cxx_atomic_impl.9" }
%"struct.std::__1::__cxx_atomic_impl.9" = type { %"struct.std::__1::__cxx_atomic_base_impl.10" }
%"struct.std::__1::__cxx_atomic_base_impl.10" = type { i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.11", [3 x i8] }
%"struct.std::__1::atomic.11" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl.13" }
%"struct.std::__1::__cxx_atomic_impl.13" = type { %"struct.std::__1::__cxx_atomic_base_impl.14" }
%"struct.std::__1::__cxx_atomic_base_impl.14" = type { i8 }
%"class.SkBitmapCache::Rec" = type <{ %"struct.SkResourceCache::Rec", %"struct.(anonymous namespace)::BitmapKey", %class.SkMutex, %"class.std::__1::unique_ptr", i8*, %struct.SkImageInfo, i64, i32, i32, i8, [7 x i8] }>
%"struct.SkResourceCache::Rec" = type { i32 (...)**, %"struct.SkResourceCache::Rec"*, %"struct.SkResourceCache::Rec"* }
%"struct.(anonymous namespace)::BitmapKey" = type <{ %"struct.SkResourceCache::Key", %struct.SkBitmapCacheDesc, [4 x i8] }>
%"struct.SkResourceCache::Key" = type { i32, i32, i32, i32, i8* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkDiscardableMemory* }
%class.SkDiscardableMemory = type { i32 (...)** }
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%class.SkBitmap = type { %class.sk_sp.20, %class.SkPixmap, %class.sk_sp.21 }
%class.sk_sp.20 = type { %class.SkPixelRef* }
%class.sk_sp.21 = type { %class.SkMipmap* }
%class.SkMipmap = type <{ %class.SkCachedData.base, [6 x i8], %class.sk_sp, %"struct.SkMipmap::Level"*, i32, [4 x i8] }>
%class.SkCachedData.base = type <{ i32 (...)**, %class.SkMutex, %union.anon, i8*, i64, i32, i32, i8, i8 }>
%union.anon = type { %class.SkDiscardableMemory* }
%"struct.SkMipmap::Level" = type { %class.SkPixmap, %struct.SkSize }
%struct.SkSize = type { float, float }
%class.SkResourceCache = type { %"struct.SkResourceCache::Rec"*, %"struct.SkResourceCache::Rec"*, %"class.SkResourceCache::Hash"*, %class.SkDiscardableMemory* (i64)*, i64, i64, i64, i32, [4 x i8], %"class.SkMessageBus<SkResourceCache::PurgeSharedIDMessage, unsigned int, true>::Inbox" }
%"class.SkResourceCache::Hash" = type opaque
%"class.SkMessageBus<SkResourceCache::PurgeSharedIDMessage, unsigned int, true>::Inbox" = type <{ %class.SkTArray, %class.SkMutex, i32, [4 x i8] }>
%class.SkTArray = type { %"struct.SkResourceCache::PurgeSharedIDMessage"*, i64 }
%"struct.SkResourceCache::PurgeSharedIDMessage" = type { i64 }
%"struct.(anonymous namespace)::MipMapKey" = type <{ %"struct.SkResourceCache::Key", %struct.SkBitmapCacheDesc, [4 x i8] }>
%class.SkCachedData = type <{ i32 (...)**, %class.SkMutex, %union.anon, i8*, i64, i32, i32, i8, i8, [6 x i8] }>
%class.SkImage_Base = type { %class.SkImage.base, %"struct.std::__1::atomic.11", [3 x i8] }
%class.SkImage.base = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32 }>
%class.GrDirectContext = type { %class.GrRecordingContext, %"class.GrDirectContext::DirectContextID", %"class.std::__1::unique_ptr.54", %"class.std::__1::unique_ptr.60", %class.sk_sp.66, %"class.std::__1::unique_ptr.67", %"class.std::__1::unique_ptr.104", i8, i8, %"class.GrContextOptions::PersistentCache"*, %"class.GrContextOptions::ShaderErrorHandler"*, %"class.std::__1::unique_ptr.113", %"class.std::__1::unique_ptr.119", %"class.std::__1::unique_ptr.125" }
%class.GrRecordingContext = type { %class.GrImageContext.base, %"class.GrRecordingContext::Stats", %"class.std::__1::unique_ptr.23", %"class.GrRecordingContext::OwnedArenas", %"class.std::__1::unique_ptr.42", %"class.std::__1::unique_ptr.48" }
%class.GrImageContext.base = type <{ %class.GrContext_Base, %class.GrSingleOwner }>
%class.GrContext_Base = type { %class.SkRefCnt.base, %class.sk_sp.22 }
%class.sk_sp.22 = type { %class.GrContextThreadSafeProxy* }
%class.GrContextThreadSafeProxy = type opaque
%class.GrSingleOwner = type { i8 }
%"class.GrRecordingContext::Stats" = type { i8 }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %class.GrAuditTrail* }
%class.GrAuditTrail = type opaque
%"class.GrRecordingContext::OwnedArenas" = type { i8, %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.35" }
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %class.SkArenaAlloc* }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %class.GrSubRunAllocator* }
%class.GrSubRunAllocator = type { %class.GrBagOfBytes }
%class.GrBagOfBytes = type { i8*, i32, %class.SkFibBlockSizes.38 }
%class.SkFibBlockSizes.38 = type { i32 }
%"class.std::__1::unique_ptr.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %class.GrDrawingManager* }
%class.GrDrawingManager = type opaque
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %class.GrProxyProvider* }
%class.GrProxyProvider = type opaque
%"class.GrDirectContext::DirectContextID" = type { i32 }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %class.SkTaskGroup* }
%class.SkTaskGroup = type opaque
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %class.GrStrikeCache* }
%class.GrStrikeCache = type opaque
%class.sk_sp.66 = type { %class.GrGpu* }
%class.GrGpu = type opaque
%"class.std::__1::unique_ptr.67" = type { %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %class.GrResourceCache* }
%class.GrResourceCache = type { %class.GrProxyProvider*, %class.GrThreadSafeCache*, i32, %class.SkTDPQueue, %class.SkTDArray.70, %class.SkTMultiMap, %class.SkTDynamicHash.80, i64, i64, i32, i64, i64, i32, [4 x i8], %"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox", %"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox", %class.SkTHashMap, %"class.GrDirectContext::DirectContextID", i32, %class.GrSingleOwner* }
%class.GrThreadSafeCache = type opaque
%class.SkTDPQueue = type { %class.SkTDArray.70 }
%class.SkTDArray.70 = type { %class.GrGpuResource**, i32, i32 }
%class.GrGpuResource = type { i32 (...)**, %class.GrIORef, i32, i32, %"class.std::__1::chrono::time_point", %class.GrScratchKey, %class.GrUniqueKey, %class.GrGpu*, i64, i8, i8, %"class.GrGpuResource::UniqueID" }
%class.GrIORef = type { %"struct.std::__1::atomic", %"struct.std::__1::atomic" }
%"class.std::__1::chrono::time_point" = type { %"class.std::__1::chrono::duration" }
%"class.std::__1::chrono::duration" = type { i64 }
%class.GrScratchKey = type { %class.GrResourceKey }
%class.GrResourceKey = type { %class.SkAutoSTMalloc }
%class.SkAutoSTMalloc = type <{ i32*, %union.anon.71, [4 x i8] }>
%union.anon.71 = type { [7 x i32] }
%class.GrUniqueKey = type { %class.GrResourceKey, %class.sk_sp.72, i8* }
%class.sk_sp.72 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.73, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.73 = type { %"struct.std::__1::atomic" }
%"class.GrGpuResource::UniqueID" = type { i32 }
%class.SkTMultiMap = type <{ %class.SkTDynamicHash, i32, [4 x i8] }>
%class.SkTDynamicHash = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.74" }
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.80 = type { %class.SkTHashTable.81 }
%class.SkTHashTable.81 = type { i32, i32, %class.SkAutoTArray.82 }
%class.SkAutoTArray.82 = type { %"class.std::__1::unique_ptr.83" }
%"class.std::__1::unique_ptr.83" = type { %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot" = type <{ %class.GrGpuResource*, i32, [4 x i8] }>
%"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox" = type <{ %class.SkTArray.89, %class.SkMutex, i32, [4 x i8] }>
%class.SkTArray.89 = type { %class.GrUniqueKeyInvalidatedMessage*, i64 }
%class.GrUniqueKeyInvalidatedMessage = type <{ %class.GrUniqueKey, i32, i8, [3 x i8] }>
%"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox" = type <{ %class.SkTArray.90, %class.SkMutex, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.SkTArray.90 = type { %struct.GrTextureFreedMessage*, i64 }
%struct.GrTextureFreedMessage = type <{ %class.GrTexture*, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.GrTexture = type <{ i32 (...)**, i32, i32, i32, [4 x i8], %class.GrSurface }>
%class.GrSurface = type { %class.GrGpuResource, %struct.SkISize, i32, i8, %class.sk_sp.91 }
%class.sk_sp.91 = type { %class.GrRefCntedCallback* }
%class.GrRefCntedCallback = type { %class.SkNVRefCnt.92, void (i8*)*, i8* }
%class.SkNVRefCnt.92 = type { %"struct.std::__1::atomic" }
%class.SkTHashMap = type { %class.SkTHashTable.93 }
%class.SkTHashTable.93 = type { i32, i32, %class.SkAutoTArray.94 }
%class.SkAutoTArray.94 = type { %"class.std::__1::unique_ptr.95" }
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot" = type opaque
%"class.std::__1::unique_ptr.104" = type { %"class.std::__1::__compressed_pair.105" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %class.GrResourceProvider* }
%class.GrResourceProvider = type { %class.GrResourceCache*, %class.GrGpu*, %class.sk_sp.107, %class.sk_sp.109, %class.sk_sp.109 }
%class.sk_sp.107 = type { %class.GrCaps* }
%class.GrCaps = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp.108, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8, i8 }>
%class.sk_sp.108 = type { %class.GrShaderCaps* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.GrDriverBugWorkarounds = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%class.sk_sp.109 = type { %class.GrGpuBuffer* }
%class.GrGpuBuffer = type { %class.GrGpuResource, %class.GrBuffer, i8*, i64, i32, i32 }
%class.GrBuffer = type { i32 (...)** }
%"class.GrContextOptions::PersistentCache" = type { i32 (...)** }
%"class.GrContextOptions::ShaderErrorHandler" = type { i32 (...)** }
%"class.std::__1::unique_ptr.113" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %class.GrClientMappedBufferManager* }
%class.GrClientMappedBufferManager = type opaque
%"class.std::__1::unique_ptr.119" = type { %"class.std::__1::__compressed_pair.120" }
%"class.std::__1::__compressed_pair.120" = type { %"struct.std::__1::__compressed_pair_elem.121" }
%"struct.std::__1::__compressed_pair_elem.121" = type { %class.GrAtlasManager* }
%class.GrAtlasManager = type opaque
%"class.std::__1::unique_ptr.125" = type { %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %class.GrSmallPathAtlasMgr* }
%class.GrSmallPathAtlasMgr = type opaque
%"struct.(anonymous namespace)::MipMapRec" = type { %"struct.SkResourceCache::Rec", %"struct.(anonymous namespace)::MipMapKey", %class.SkMipmap* }

$_ZN13SkBitmapCache3Rec6FinderERKN15SkResourceCache3RecEPv = comdat any

$_ZN13SkBitmapCache3RecD2Ev = comdat any

$_ZN13SkBitmapCache3RecD0Ev = comdat any

$_ZNK13SkBitmapCache3Rec6getKeyEv = comdat any

$_ZNK13SkBitmapCache3Rec9bytesUsedEv = comdat any

$_ZN13SkBitmapCache3Rec11canBePurgedEv = comdat any

$_ZN13SkBitmapCache3Rec14postAddInstallEPv = comdat any

$_ZNK13SkBitmapCache3Rec11getCategoryEv = comdat any

$_ZNK13SkBitmapCache3Rec30diagnostic_only_getDiscardableEv = comdat any

$_ZN15SkResourceCache3Rec11canBePurgedEv = comdat any

$_ZN15SkResourceCache3Rec14postAddInstallEPv = comdat any

$_ZN13SkBitmapCache3Rec7installEP8SkBitmap = comdat any

$_ZN13SkBitmapCache3Rec11ReleaseProcEPvS1_ = comdat any

$_ZTVN13SkBitmapCache3RecE = comdat any

@_ZTVN13SkBitmapCache3RecE = linkonce_odr hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkBitmapCache::Rec"*)* @_ZN13SkBitmapCache3RecD2Ev to i8*), i8* bitcast (void (%"class.SkBitmapCache::Rec"*)* @_ZN13SkBitmapCache3RecD0Ev to i8*), i8* bitcast (%"struct.SkResourceCache::Key"* (%"class.SkBitmapCache::Rec"*)* @_ZNK13SkBitmapCache3Rec6getKeyEv to i8*), i8* bitcast (i64 (%"class.SkBitmapCache::Rec"*)* @_ZNK13SkBitmapCache3Rec9bytesUsedEv to i8*), i8* bitcast (i1 (%"class.SkBitmapCache::Rec"*)* @_ZN13SkBitmapCache3Rec11canBePurgedEv to i8*), i8* bitcast (void (%"class.SkBitmapCache::Rec"*, i8*)* @_ZN13SkBitmapCache3Rec14postAddInstallEPv to i8*), i8* bitcast (i8* (%"class.SkBitmapCache::Rec"*)* @_ZNK13SkBitmapCache3Rec11getCategoryEv to i8*), i8* bitcast (%class.SkDiscardableMemory* (%"class.SkBitmapCache::Rec"*)* @_ZNK13SkBitmapCache3Rec30diagnostic_only_getDiscardableEv to i8*)] }, comdat, align 8
@.str = private unnamed_addr constant [7 x i8] c"bitmap\00", align 1
@_ZN12_GLOBAL__N_124gBitmapKeyNamespaceLabelE = internal global i32 0, align 4
@_ZN12_GLOBAL__N_124gMipMapKeyNamespaceLabelE = internal global i32 0, align 4
@_ZTVN12_GLOBAL__N_19MipMapRecE = internal unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.(anonymous namespace)::MipMapRec"*)* @_ZN12_GLOBAL__N_19MipMapRecD2Ev to i8*), i8* bitcast (void (%"struct.(anonymous namespace)::MipMapRec"*)* @_ZN12_GLOBAL__N_19MipMapRecD0Ev to i8*), i8* bitcast (%"struct.SkResourceCache::Key"* (%"struct.(anonymous namespace)::MipMapRec"*)* @_ZNK12_GLOBAL__N_19MipMapRec6getKeyEv to i8*), i8* bitcast (i64 (%"struct.(anonymous namespace)::MipMapRec"*)* @_ZNK12_GLOBAL__N_19MipMapRec9bytesUsedEv to i8*), i8* bitcast (i1 (%"struct.SkResourceCache::Rec"*)* @_ZN15SkResourceCache3Rec11canBePurgedEv to i8*), i8* bitcast (void (%"struct.SkResourceCache::Rec"*, i8*)* @_ZN15SkResourceCache3Rec14postAddInstallEPv to i8*), i8* bitcast (i8* (%"struct.(anonymous namespace)::MipMapRec"*)* @_ZNK12_GLOBAL__N_19MipMapRec11getCategoryEv to i8*), i8* bitcast (%class.SkDiscardableMemory* (%"struct.(anonymous namespace)::MipMapRec"*)* @_ZNK12_GLOBAL__N_19MipMapRec30diagnostic_only_getDiscardableEv to i8*)] }, align 8
@.str.1 = private unnamed_addr constant [7 x i8] c"mipmap\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_Z36SkMakeResourceCacheSharedIDForBitmapj(i32) local_unnamed_addr #0 {
  %2 = zext i32 %0 to i64
  %3 = or i64 %2, 7092432121842630656
  ret i64 %3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z26SkNotifyBitmapGenIDIsStalej(i32) local_unnamed_addr #2 {
  %2 = zext i32 %0 to i64
  %3 = or i64 %2, 7092432121842630656
  tail call void @_ZN15SkResourceCache17PostPurgeSharedIDEm(i64 %3) #8
  ret void
}

declare void @_ZN15SkResourceCache17PostPurgeSharedIDEm(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17SkBitmapCacheDesc4MakeEjRK7SkIRect(%struct.SkBitmapCacheDesc* noalias nocapture sret, i32, %struct.SkIRect* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %struct.SkBitmapCacheDesc, %struct.SkBitmapCacheDesc* %0, i64 0, i32 0
  store i32 %1, i32* %4, align 4
  %5 = getelementptr inbounds %struct.SkBitmapCacheDesc, %struct.SkBitmapCacheDesc* %0, i64 0, i32 1
  %6 = bitcast %struct.SkIRect* %5 to i8*
  %7 = bitcast %struct.SkIRect* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %7, i64 16, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17SkBitmapCacheDesc4MakeEPK7SkImage(%struct.SkBitmapCacheDesc* noalias nocapture sret, %class.SkImage* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.SkImage, %class.SkImage* %1, i64 0, i32 2, i32 1, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %class.SkImage, %class.SkImage* %1, i64 0, i32 2, i32 1, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = zext i32 %6 to i64
  %8 = shl nuw i64 %7, 32
  %9 = zext i32 %4 to i64
  %10 = or i64 %8, %9
  %11 = getelementptr inbounds %class.SkImage, %class.SkImage* %1, i64 0, i32 3
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.SkBitmapCacheDesc, %struct.SkBitmapCacheDesc* %0, i64 0, i32 0
  store i32 %12, i32* %13, align 4, !alias.scope !2
  %14 = getelementptr inbounds %struct.SkBitmapCacheDesc, %struct.SkBitmapCacheDesc* %0, i64 0, i32 1
  %15 = bitcast %struct.SkIRect* %14 to i64*
  store i64 0, i64* %15, align 4
  %16 = getelementptr inbounds %struct.SkBitmapCacheDesc, %struct.SkBitmapCacheDesc* %0, i64 0, i32 1, i32 2
  %17 = bitcast i32* %16 to i64*
  store i64 %10, i64* %17, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z32SkBitmapCache_setImmutableWithIDP10SkPixelRefj(%class.SkPixelRef*, i32) local_unnamed_addr #2 {
  tail call void @_ZN10SkPixelRef18setImmutableWithIDEj(%class.SkPixelRef* %0, i32 %1) #8
  ret void
}

declare void @_ZN10SkPixelRef18setImmutableWithIDEj(%class.SkPixelRef*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13SkBitmapCache16PrivateDeleteRecEPNS_3RecE(%"class.SkBitmapCache::Rec"*) local_unnamed_addr #2 align 2 {
  %2 = icmp eq %"class.SkBitmapCache::Rec"* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.SkBitmapCache::Rec"* %0 to void (%"class.SkBitmapCache::Rec"*)***
  %5 = load void (%"class.SkBitmapCache::Rec"*)**, void (%"class.SkBitmapCache::Rec"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.SkBitmapCache::Rec"*)*, void (%"class.SkBitmapCache::Rec"*)** %5, i64 1
  %7 = load void (%"class.SkBitmapCache::Rec"*)*, void (%"class.SkBitmapCache::Rec"*)** %6, align 8
  tail call void %7(%"class.SkBitmapCache::Rec"* nonnull %0) #8
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkBitmapCache::Rec"* @_ZN13SkBitmapCache5AllocERK17SkBitmapCacheDescRK11SkImageInfoP8SkPixmap(%struct.SkBitmapCacheDesc* nocapture readonly dereferenceable(20), %struct.SkImageInfo* dereferenceable(24), %class.SkPixmap* nocapture) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 1, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 0
  %8 = tail call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* %7) #8
  %9 = sext i32 %8 to i64
  %10 = mul nsw i64 %9, %6
  %11 = icmp ult i64 %10, 2147483648
  %12 = select i1 %11, i64 %10, i64 0
  %13 = tail call i64 @_ZNK11SkImageInfo15computeByteSizeEm(%struct.SkImageInfo* %1, i64 %12) #8
  %14 = icmp eq i64 %13, -1
  br i1 %14, label %106, label %15

15:                                               ; preds = %3
  %16 = tail call %class.SkDiscardableMemory* (i64)* @_ZN15SkResourceCache21GetDiscardableFactoryEv() #8
  %17 = icmp eq %class.SkDiscardableMemory* (i64)* %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %15
  %19 = tail call %class.SkDiscardableMemory* %16(i64 %13) #8
  %20 = ptrtoint %class.SkDiscardableMemory* %19 to i64
  br label %23

21:                                               ; preds = %15
  %22 = tail call i8* @_Z15sk_malloc_flagsmj(i64 %13, i32 0) #8
  br label %23

23:                                               ; preds = %21, %18
  %24 = phi i64 [ 0, %21 ], [ %20, %18 ]
  %25 = phi i8* [ %22, %21 ], [ null, %18 ]
  %26 = inttoptr i64 %24 to %class.SkDiscardableMemory*
  %27 = icmp ne i64 %24, 0
  %28 = icmp ne i8* %25, null
  %29 = or i1 %27, %28
  br i1 %29, label %30, label %106

30:                                               ; preds = %23
  br i1 %27, label %31, label %37

31:                                               ; preds = %30
  %32 = inttoptr i64 %24 to i8* (%class.SkDiscardableMemory*)***
  %33 = load i8* (%class.SkDiscardableMemory*)**, i8* (%class.SkDiscardableMemory*)*** %32, align 8
  %34 = getelementptr inbounds i8* (%class.SkDiscardableMemory*)*, i8* (%class.SkDiscardableMemory*)** %33, i64 3
  %35 = load i8* (%class.SkDiscardableMemory*)*, i8* (%class.SkDiscardableMemory*)** %34, align 8
  %36 = tail call i8* %35(%class.SkDiscardableMemory* nonnull %26) #8
  br label %37

37:                                               ; preds = %30, %31
  %38 = phi i8* [ %36, %31 ], [ %25, %30 ]
  %39 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 0, i32 0, i32 0
  %40 = load %class.SkColorSpace*, %class.SkColorSpace** %39, align 8
  %41 = icmp eq %class.SkColorSpace* %40, null
  br i1 %41, label %45, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %40, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = atomicrmw add i32* %43, i32 1 monotonic
  br label %45

45:                                               ; preds = %37, %42
  %46 = ptrtoint %class.SkColorSpace* %40 to i64
  %47 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 0, i32 1
  %48 = bitcast i32* %47 to <2 x i64>*
  %49 = load <2 x i64>, <2 x i64>* %48, align 8
  %50 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %2, i64 0, i32 0
  store i8* %38, i8** %50, align 8
  %51 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %2, i64 0, i32 1
  store i64 %12, i64* %51, align 8
  %52 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %2, i64 0, i32 2
  %53 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %52, i64 0, i32 0, i32 0, i32 0
  %54 = load %class.SkColorSpace*, %class.SkColorSpace** %53, align 8
  %55 = bitcast %struct.SkImageInfo* %52 to i64*
  store i64 %46, i64* %55, align 8
  %56 = icmp eq %class.SkColorSpace* %54, null
  br i1 %56, label %63, label %57

57:                                               ; preds = %45
  %58 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %54, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = atomicrmw add i32* %58, i32 -1 acq_rel
  %60 = icmp eq i32 %59, 1
  br i1 %60, label %61, label %63

61:                                               ; preds = %57
  %62 = bitcast %class.SkColorSpace* %54 to i8*
  tail call void @_ZdlPv(i8* %62) #9
  br label %63

63:                                               ; preds = %61, %57, %45
  %64 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %2, i64 0, i32 2, i32 0, i32 1
  %65 = bitcast i32* %64 to <2 x i64>*
  store <2 x i64> %49, <2 x i64>* %65, align 8
  %66 = tail call i8* @_Znwm(i64 152) #9
  %67 = bitcast i8* %66 to %"class.SkBitmapCache::Rec"*
  %68 = bitcast i8* %66 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN13SkBitmapCache3RecE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %68, align 8
  %69 = getelementptr inbounds i8, i8* %66, i64 48
  %70 = bitcast %struct.SkBitmapCacheDesc* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* align 4 %70, i64 20, i1 false) #8
  %71 = getelementptr inbounds i8, i8* %66, i64 24
  %72 = bitcast i8* %71 to %"struct.SkResourceCache::Key"*
  %73 = bitcast i8* %69 to i32*
  %74 = load i32, i32* %73, align 8
  %75 = zext i32 %74 to i64
  %76 = or i64 %75, 7092432121842630656
  tail call void @_ZN15SkResourceCache3Key4initEPvmm(%"struct.SkResourceCache::Key"* %72, i8* bitcast (i32* @_ZN12_GLOBAL__N_124gBitmapKeyNamespaceLabelE to i8*), i64 %76, i64 20) #8
  %77 = getelementptr inbounds i8, i8* %66, i64 72
  %78 = bitcast i8* %77 to i32*
  store i32 1, i32* %78, align 4
  %79 = getelementptr inbounds i8, i8* %66, i64 76
  store i8 0, i8* %79, align 1
  %80 = getelementptr inbounds i8, i8* %66, i64 80
  %81 = bitcast i8* %80 to %"struct.SkSemaphore::OSSemaphore"**
  store %"struct.SkSemaphore::OSSemaphore"* null, %"struct.SkSemaphore::OSSemaphore"** %81, align 8
  %82 = getelementptr inbounds i8, i8* %66, i64 88
  %83 = bitcast i8* %82 to i64*
  store i64 %24, i64* %83, align 8
  %84 = getelementptr inbounds i8, i8* %66, i64 96
  %85 = bitcast i8* %84 to i8**
  store i8* %25, i8** %85, align 8
  %86 = getelementptr inbounds i8, i8* %66, i64 104
  %87 = bitcast i8* %86 to %class.SkColorSpace**
  %88 = load %class.SkColorSpace*, %class.SkColorSpace** %39, align 8
  %89 = icmp eq %class.SkColorSpace* %88, null
  br i1 %89, label %93, label %90

90:                                               ; preds = %63
  %91 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %88, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = atomicrmw add i32* %91, i32 1 monotonic
  br label %93

93:                                               ; preds = %90, %63
  store %class.SkColorSpace* %88, %class.SkColorSpace** %87, align 8
  %94 = getelementptr inbounds i8, i8* %66, i64 112
  %95 = bitcast i32* %47 to <2 x i64>*
  %96 = load <2 x i64>, <2 x i64>* %95, align 8
  %97 = bitcast i8* %94 to <2 x i64>*
  store <2 x i64> %96, <2 x i64>* %97, align 8
  %98 = getelementptr inbounds i8, i8* %66, i64 128
  %99 = bitcast i8* %98 to i64*
  store i64 %12, i64* %99, align 8
  %100 = getelementptr inbounds i8, i8* %66, i64 140
  %101 = bitcast i8* %100 to i32*
  store i32 0, i32* %101, align 4
  %102 = getelementptr inbounds i8, i8* %66, i64 144
  store i8 1, i8* %102, align 8
  %103 = tail call i32 @_ZN8SkNextID7ImageIDEv() #8
  %104 = getelementptr inbounds i8, i8* %66, i64 136
  %105 = bitcast i8* %104 to i32*
  store i32 %103, i32* %105, align 8
  br label %106

106:                                              ; preds = %23, %93, %3
  %107 = phi %"class.SkBitmapCache::Rec"* [ null, %3 ], [ %67, %93 ], [ null, %23 ]
  ret %"class.SkBitmapCache::Rec"* %107
}

declare i64 @_ZNK11SkImageInfo15computeByteSizeEm(%struct.SkImageInfo*, i64) local_unnamed_addr #3

declare %class.SkDiscardableMemory* (i64)* @_ZN15SkResourceCache21GetDiscardableFactoryEv() local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13SkBitmapCache3AddENSt3__110unique_ptrINS_3RecENS_10RecDeleterEEEP8SkBitmap(%"class.SkBitmapCache::Rec"*, %class.SkBitmap*) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 0
  %4 = bitcast %class.SkBitmap* %1 to i8*
  tail call void @_ZN15SkResourceCache3AddEPNS_3RecEPv(%"struct.SkResourceCache::Rec"* %3, i8* %4) #8
  ret void
}

declare void @_ZN15SkResourceCache3AddEPNS_3RecEPv(%"struct.SkResourceCache::Rec"*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN13SkBitmapCache4FindERK17SkBitmapCacheDescP8SkBitmap(%struct.SkBitmapCacheDesc* nocapture readonly dereferenceable(20), %class.SkBitmap*) local_unnamed_addr #2 align 2 {
  %3 = alloca %"struct.(anonymous namespace)::BitmapKey", align 8
  %4 = bitcast %"struct.(anonymous namespace)::BitmapKey"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %4) #8
  %5 = getelementptr inbounds %"struct.(anonymous namespace)::BitmapKey", %"struct.(anonymous namespace)::BitmapKey"* %3, i64 0, i32 1
  %6 = bitcast %struct.SkBitmapCacheDesc* %5 to i8*
  %7 = bitcast %struct.SkBitmapCacheDesc* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 4 %7, i64 20, i1 false) #8
  %8 = getelementptr inbounds %"struct.(anonymous namespace)::BitmapKey", %"struct.(anonymous namespace)::BitmapKey"* %3, i64 0, i32 0
  %9 = getelementptr inbounds %struct.SkBitmapCacheDesc, %struct.SkBitmapCacheDesc* %5, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = zext i32 %10 to i64
  %12 = or i64 %11, 7092432121842630656
  call void @_ZN15SkResourceCache3Key4initEPvmm(%"struct.SkResourceCache::Key"* nonnull %8, i8* bitcast (i32* @_ZN12_GLOBAL__N_124gBitmapKeyNamespaceLabelE to i8*), i64 %12, i64 20) #8
  %13 = bitcast %class.SkBitmap* %1 to i8*
  %14 = call zeroext i1 @_ZN15SkResourceCache4FindERKNS_3KeyEPFbRKNS_3RecEPvES6_(%"struct.SkResourceCache::Key"* nonnull dereferenceable(24) %8, i1 (%"struct.SkResourceCache::Rec"*, i8*)* nonnull @_ZN13SkBitmapCache3Rec6FinderERKN15SkResourceCache3RecEPv, i8* %13) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %4) #8
  ret i1 %14
}

declare zeroext i1 @_ZN15SkResourceCache4FindERKNS_3KeyEPFbRKNS_3RecEPvES6_(%"struct.SkResourceCache::Key"* dereferenceable(24), i1 (%"struct.SkResourceCache::Rec"*, i8*)*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN13SkBitmapCache3Rec6FinderERKN15SkResourceCache3RecEPv(%"struct.SkResourceCache::Rec"* dereferenceable(24), i8*) #2 comdat align 2 {
  %3 = bitcast %"struct.SkResourceCache::Rec"* %0 to %"class.SkBitmapCache::Rec"*
  %4 = bitcast i8* %1 to %class.SkBitmap*
  %5 = tail call zeroext i1 @_ZN13SkBitmapCache3Rec7installEP8SkBitmap(%"class.SkBitmapCache::Rec"* %3, %class.SkBitmap* %4)
  ret i1 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkMipmap* @_ZN13SkMipmapCache10FindAndRefERK17SkBitmapCacheDescP15SkResourceCache(%struct.SkBitmapCacheDesc* nocapture readonly dereferenceable(20), %class.SkResourceCache*) local_unnamed_addr #2 align 2 {
  %3 = alloca %"struct.(anonymous namespace)::MipMapKey", align 8
  %4 = alloca %class.SkMipmap*, align 8
  %5 = bitcast %"struct.(anonymous namespace)::MipMapKey"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %5) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 48, i1 false)
  %6 = getelementptr inbounds %"struct.(anonymous namespace)::MipMapKey", %"struct.(anonymous namespace)::MipMapKey"* %3, i64 0, i32 1
  %7 = bitcast %struct.SkBitmapCacheDesc* %6 to i8*
  %8 = bitcast %struct.SkBitmapCacheDesc* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 4 %8, i64 20, i1 false) #8
  %9 = getelementptr inbounds %"struct.(anonymous namespace)::MipMapKey", %"struct.(anonymous namespace)::MipMapKey"* %3, i64 0, i32 0
  %10 = getelementptr inbounds %struct.SkBitmapCacheDesc, %struct.SkBitmapCacheDesc* %6, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = zext i32 %11 to i64
  %13 = or i64 %12, 7092432121842630656
  call void @_ZN15SkResourceCache3Key4initEPvmm(%"struct.SkResourceCache::Key"* nonnull %9, i8* bitcast (i32* @_ZN12_GLOBAL__N_124gMipMapKeyNamespaceLabelE to i8*), i64 %13, i64 20) #8
  %14 = bitcast %class.SkMipmap** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #8
  store %class.SkMipmap* inttoptr (i64 -6148914691236517206 to %class.SkMipmap*), %class.SkMipmap** %4, align 8
  %15 = icmp eq %class.SkResourceCache* %1, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %2
  %17 = call zeroext i1 @_ZN15SkResourceCache4findERKNS_3KeyEPFbRKNS_3RecEPvES6_(%class.SkResourceCache* nonnull %1, %"struct.SkResourceCache::Key"* nonnull dereferenceable(24) %9, i1 (%"struct.SkResourceCache::Rec"*, i8*)* nonnull @_ZN12_GLOBAL__N_19MipMapRec6FinderERKN15SkResourceCache3RecEPv, i8* nonnull %14) #8
  br i1 %17, label %21, label %20

18:                                               ; preds = %2
  %19 = call zeroext i1 @_ZN15SkResourceCache4FindERKNS_3KeyEPFbRKNS_3RecEPvES6_(%"struct.SkResourceCache::Key"* nonnull dereferenceable(24) %9, i1 (%"struct.SkResourceCache::Rec"*, i8*)* nonnull @_ZN12_GLOBAL__N_19MipMapRec6FinderERKN15SkResourceCache3RecEPv, i8* nonnull %14) #8
  br i1 %19, label %21, label %20

20:                                               ; preds = %18, %16
  store %class.SkMipmap* null, %class.SkMipmap** %4, align 8
  br label %21

21:                                               ; preds = %20, %18, %16
  %22 = load %class.SkMipmap*, %class.SkMipmap** %4, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %5) #8
  ret %class.SkMipmap* %22
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZN15SkResourceCache4findERKNS_3KeyEPFbRKNS_3RecEPvES6_(%class.SkResourceCache*, %"struct.SkResourceCache::Key"* dereferenceable(24), i1 (%"struct.SkResourceCache::Rec"*, i8*)*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN12_GLOBAL__N_19MipMapRec6FinderERKN15SkResourceCache3RecEPv(%"struct.SkResourceCache::Rec"* nocapture readonly dereferenceable(24), i8* nocapture) #2 align 2 {
  %3 = getelementptr inbounds %"struct.SkResourceCache::Rec", %"struct.SkResourceCache::Rec"* %0, i64 3
  %4 = bitcast %"struct.SkResourceCache::Rec"* %3 to %class.SkMipmap**
  %5 = load %class.SkMipmap*, %class.SkMipmap** %4, align 8
  %6 = bitcast %class.SkMipmap* %5 to %class.SkCachedData*
  tail call void @_ZNK12SkCachedData11internalRefEb(%class.SkCachedData* %6, i1 zeroext false) #8
  %7 = getelementptr inbounds %class.SkMipmap, %class.SkMipmap* %5, i64 0, i32 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %2
  tail call void @_ZNK12SkCachedData13internalUnrefEb(%class.SkCachedData* %6, i1 zeroext false) #8
  br label %13

11:                                               ; preds = %2
  %12 = bitcast i8* %1 to %class.SkMipmap**
  store %class.SkMipmap* %5, %class.SkMipmap** %12, align 8
  br label %13

13:                                               ; preds = %11, %10
  %14 = phi i1 [ false, %10 ], [ true, %11 ]
  ret i1 %14
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkMipmap* @_ZN13SkMipmapCache9AddAndRefEPK12SkImage_BaseP15SkResourceCache(%class.SkImage_Base*, %class.SkResourceCache*) local_unnamed_addr #2 align 2 {
  %3 = alloca %class.SkBitmap, align 8
  %4 = bitcast %class.SkBitmap* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %4) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 56, i1 false)
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %3) #8
  %5 = bitcast %class.SkImage_Base* %0 to i1 (%class.SkImage_Base*, %class.GrDirectContext*, %class.SkBitmap*, i32)***
  %6 = load i1 (%class.SkImage_Base*, %class.GrDirectContext*, %class.SkBitmap*, i32)**, i1 (%class.SkImage_Base*, %class.GrDirectContext*, %class.SkBitmap*, i32)*** %5, align 8
  %7 = getelementptr inbounds i1 (%class.SkImage_Base*, %class.GrDirectContext*, %class.SkBitmap*, i32)*, i1 (%class.SkImage_Base*, %class.GrDirectContext*, %class.SkBitmap*, i32)** %6, i64 18
  %8 = load i1 (%class.SkImage_Base*, %class.GrDirectContext*, %class.SkBitmap*, i32)*, i1 (%class.SkImage_Base*, %class.GrDirectContext*, %class.SkBitmap*, i32)** %7, align 8
  %9 = call zeroext i1 %8(%class.SkImage_Base* %0, %class.GrDirectContext* null, %class.SkBitmap* nonnull %3, i32 0) #8
  br i1 %9, label %10, label %55

10:                                               ; preds = %2
  %11 = icmp eq %class.SkResourceCache* %1, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %10
  %13 = getelementptr inbounds %class.SkResourceCache, %class.SkResourceCache* %1, i64 0, i32 3
  %14 = load %class.SkDiscardableMemory* (i64)*, %class.SkDiscardableMemory* (i64)** %13, align 8
  br label %17

15:                                               ; preds = %10
  %16 = call %class.SkDiscardableMemory* (i64)* @_ZN15SkResourceCache21GetDiscardableFactoryEv() #8
  br label %17

17:                                               ; preds = %12, %15
  %18 = phi %class.SkDiscardableMemory* (i64)* [ %14, %12 ], [ %16, %15 ]
  %19 = call %class.SkMipmap* @_ZN8SkMipmap5BuildERK8SkBitmapPFP19SkDiscardableMemorymE(%class.SkBitmap* nonnull dereferenceable(56) %3, %class.SkDiscardableMemory* (i64)* %18) #8
  %20 = icmp eq %class.SkMipmap* %19, null
  br i1 %20, label %55, label %21

21:                                               ; preds = %17
  %22 = call i8* @_Znwm(i64 80) #9
  %23 = getelementptr inbounds %class.SkImage_Base, %class.SkImage_Base* %0, i64 0, i32 0, i32 2, i32 1, i32 0
  %24 = load i32, i32* %23, align 4, !noalias !5
  %25 = getelementptr inbounds %class.SkImage_Base, %class.SkImage_Base* %0, i64 0, i32 0, i32 2, i32 1, i32 1
  %26 = load i32, i32* %25, align 4, !noalias !5
  %27 = zext i32 %26 to i64
  %28 = shl nuw i64 %27, 32
  %29 = zext i32 %24 to i64
  %30 = or i64 %28, %29
  %31 = getelementptr inbounds %class.SkImage_Base, %class.SkImage_Base* %0, i64 0, i32 0, i32 3
  %32 = load i32, i32* %31, align 8
  %33 = bitcast i8* %22 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN12_GLOBAL__N_19MipMapRecE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %33, align 8
  %34 = getelementptr inbounds i8, i8* %22, i64 48
  %35 = bitcast i8* %34 to i32*
  store i32 %32, i32* %35, align 8
  %36 = getelementptr inbounds i8, i8* %22, i64 52
  %37 = bitcast i8* %36 to i64*
  store i64 0, i64* %37, align 4
  %38 = getelementptr inbounds i8, i8* %22, i64 60
  %39 = bitcast i8* %38 to i64*
  store i64 %30, i64* %39, align 4
  %40 = getelementptr inbounds i8, i8* %22, i64 24
  %41 = bitcast i8* %40 to %"struct.SkResourceCache::Key"*
  %42 = zext i32 %32 to i64
  %43 = or i64 %42, 7092432121842630656
  call void @_ZN15SkResourceCache3Key4initEPvmm(%"struct.SkResourceCache::Key"* %41, i8* bitcast (i32* @_ZN12_GLOBAL__N_124gMipMapKeyNamespaceLabelE to i8*), i64 %43, i64 20) #8
  %44 = getelementptr inbounds i8, i8* %22, i64 72
  %45 = bitcast i8* %44 to %class.SkMipmap**
  store %class.SkMipmap* %19, %class.SkMipmap** %45, align 8
  %46 = bitcast %class.SkMipmap* %19 to %class.SkCachedData*
  call void @_ZNK12SkCachedData11internalRefEb(%class.SkCachedData* nonnull %46, i1 zeroext true) #8
  %47 = bitcast i8* %22 to %"struct.SkResourceCache::Rec"*
  br i1 %11, label %49, label %48

48:                                               ; preds = %21
  call void @_ZN15SkResourceCache3addEPNS_3RecEPv(%class.SkResourceCache* nonnull %1, %"struct.SkResourceCache::Rec"* nonnull %47, i8* null) #8
  br label %50

49:                                               ; preds = %21
  call void @_ZN15SkResourceCache3AddEPNS_3RecEPv(%"struct.SkResourceCache::Rec"* nonnull %47, i8* null) #8
  br label %50

50:                                               ; preds = %49, %48
  %51 = bitcast %class.SkImage_Base* %0 to void (%class.SkImage_Base*)***
  %52 = load void (%class.SkImage_Base*)**, void (%class.SkImage_Base*)*** %51, align 8
  %53 = getelementptr inbounds void (%class.SkImage_Base*)*, void (%class.SkImage_Base*)** %52, i64 25
  %54 = load void (%class.SkImage_Base*)*, void (%class.SkImage_Base*)** %53, align 8
  call void %54(%class.SkImage_Base* %0) #8
  br label %55

55:                                               ; preds = %50, %17, %2
  %56 = phi %class.SkMipmap* [ null, %2 ], [ null, %17 ], [ %19, %50 ]
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %4) #8
  ret %class.SkMipmap* %56
}

declare void @_ZN8SkBitmapC1Ev(%class.SkBitmap*) unnamed_addr #3

declare %class.SkMipmap* @_ZN8SkMipmap5BuildERK8SkBitmapPFP19SkDiscardableMemorymE(%class.SkBitmap* dereferenceable(56), %class.SkDiscardableMemory* (i64)*) local_unnamed_addr #3

declare void @_ZN15SkResourceCache3addEPNS_3RecEPv(%class.SkResourceCache*, %"struct.SkResourceCache::Rec"*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #5

declare i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo*) local_unnamed_addr #3

declare i8* @_Z15sk_malloc_flagsmj(i64, i32) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare i32 @_ZN8SkNextID7ImageIDEv() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN13SkBitmapCache3RecD2Ev(%"class.SkBitmapCache::Rec"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN13SkBitmapCache3RecE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %class.SkDiscardableMemory*, %class.SkDiscardableMemory** %3, align 8
  %5 = icmp eq %class.SkDiscardableMemory* %4, null
  br i1 %5, label %15, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 9
  %8 = load i8, i8* %7, align 8, !range !8
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %6
  %11 = bitcast %class.SkDiscardableMemory* %4 to void (%class.SkDiscardableMemory*)***
  %12 = load void (%class.SkDiscardableMemory*)**, void (%class.SkDiscardableMemory*)*** %11, align 8
  %13 = getelementptr inbounds void (%class.SkDiscardableMemory*)*, void (%class.SkDiscardableMemory*)** %12, i64 4
  %14 = load void (%class.SkDiscardableMemory*)*, void (%class.SkDiscardableMemory*)** %13, align 8
  tail call void %14(%class.SkDiscardableMemory* nonnull %4) #8
  br label %15

15:                                               ; preds = %1, %6, %10
  %16 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 4
  %17 = load i8*, i8** %16, align 8
  tail call void @_Z7sk_freePv(i8* %17) #8
  %18 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %19 = load %class.SkColorSpace*, %class.SkColorSpace** %18, align 8
  %20 = icmp eq %class.SkColorSpace* %19, null
  br i1 %20, label %27, label %21

21:                                               ; preds = %15
  %22 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = atomicrmw add i32* %22, i32 -1 acq_rel
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %27

25:                                               ; preds = %21
  %26 = bitcast %class.SkColorSpace* %19 to i8*
  tail call void @_ZdlPv(i8* %26) #9
  br label %27

27:                                               ; preds = %15, %21, %25
  %28 = load %class.SkDiscardableMemory*, %class.SkDiscardableMemory** %3, align 8
  store %class.SkDiscardableMemory* null, %class.SkDiscardableMemory** %3, align 8
  %29 = icmp eq %class.SkDiscardableMemory* %28, null
  br i1 %29, label %35, label %30

30:                                               ; preds = %27
  %31 = bitcast %class.SkDiscardableMemory* %28 to void (%class.SkDiscardableMemory*)***
  %32 = load void (%class.SkDiscardableMemory*)**, void (%class.SkDiscardableMemory*)*** %31, align 8
  %33 = getelementptr inbounds void (%class.SkDiscardableMemory*)*, void (%class.SkDiscardableMemory*)** %32, i64 1
  %34 = load void (%class.SkDiscardableMemory*)*, void (%class.SkDiscardableMemory*)** %33, align 8
  tail call void %34(%class.SkDiscardableMemory* nonnull %28) #8
  br label %35

35:                                               ; preds = %27, %30
  %36 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 2, i32 0
  tail call void @_ZN11SkSemaphoreD1Ev(%class.SkSemaphore* %36) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN13SkBitmapCache3RecD0Ev(%"class.SkBitmapCache::Rec"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN13SkBitmapCache3RecE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %class.SkDiscardableMemory*, %class.SkDiscardableMemory** %3, align 8
  %5 = icmp eq %class.SkDiscardableMemory* %4, null
  br i1 %5, label %15, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 9
  %8 = load i8, i8* %7, align 8, !range !8
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %6
  %11 = bitcast %class.SkDiscardableMemory* %4 to void (%class.SkDiscardableMemory*)***
  %12 = load void (%class.SkDiscardableMemory*)**, void (%class.SkDiscardableMemory*)*** %11, align 8
  %13 = getelementptr inbounds void (%class.SkDiscardableMemory*)*, void (%class.SkDiscardableMemory*)** %12, i64 4
  %14 = load void (%class.SkDiscardableMemory*)*, void (%class.SkDiscardableMemory*)** %13, align 8
  tail call void %14(%class.SkDiscardableMemory* nonnull %4) #8
  br label %15

15:                                               ; preds = %10, %6, %1
  %16 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 4
  %17 = load i8*, i8** %16, align 8
  tail call void @_Z7sk_freePv(i8* %17) #8
  %18 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %19 = load %class.SkColorSpace*, %class.SkColorSpace** %18, align 8
  %20 = icmp eq %class.SkColorSpace* %19, null
  br i1 %20, label %27, label %21

21:                                               ; preds = %15
  %22 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = atomicrmw add i32* %22, i32 -1 acq_rel
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %27

25:                                               ; preds = %21
  %26 = bitcast %class.SkColorSpace* %19 to i8*
  tail call void @_ZdlPv(i8* %26) #9
  br label %27

27:                                               ; preds = %25, %21, %15
  %28 = load %class.SkDiscardableMemory*, %class.SkDiscardableMemory** %3, align 8
  store %class.SkDiscardableMemory* null, %class.SkDiscardableMemory** %3, align 8
  %29 = icmp eq %class.SkDiscardableMemory* %28, null
  br i1 %29, label %35, label %30

30:                                               ; preds = %27
  %31 = bitcast %class.SkDiscardableMemory* %28 to void (%class.SkDiscardableMemory*)***
  %32 = load void (%class.SkDiscardableMemory*)**, void (%class.SkDiscardableMemory*)*** %31, align 8
  %33 = getelementptr inbounds void (%class.SkDiscardableMemory*)*, void (%class.SkDiscardableMemory*)** %32, i64 1
  %34 = load void (%class.SkDiscardableMemory*)*, void (%class.SkDiscardableMemory*)** %33, align 8
  tail call void %34(%class.SkDiscardableMemory* nonnull %28) #8
  br label %35

35:                                               ; preds = %27, %30
  %36 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 2, i32 0
  tail call void @_ZN11SkSemaphoreD1Ev(%class.SkSemaphore* %36) #8
  %37 = bitcast %"class.SkBitmapCache::Rec"* %0 to i8*
  tail call void @_ZdlPv(i8* %37) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"struct.SkResourceCache::Key"* @_ZNK13SkBitmapCache3Rec6getKeyEv(%"class.SkBitmapCache::Rec"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 1, i32 0
  ret %"struct.SkResourceCache::Key"* %2
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK13SkBitmapCache3Rec9bytesUsedEv(%"class.SkBitmapCache::Rec"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 5
  %3 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 6
  %4 = load i64, i64* %3, align 8
  %5 = tail call i64 @_ZNK11SkImageInfo15computeByteSizeEm(%struct.SkImageInfo* %2, i64 %4) #8
  %6 = add i64 %5, 48
  ret i64 %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN13SkBitmapCache3Rec11canBePurgedEv(%"class.SkBitmapCache::Rec"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = atomicrmw sub i32* %3, i32 1 acquire
  %5 = icmp slt i32 %4, 1
  br i1 %5, label %6, label %8

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %2, i64 0, i32 0
  tail call void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore* %7) #8
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 8
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  %12 = atomicrmw add i32* %3, i32 1 release
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %8
  %15 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %2, i64 0, i32 0
  tail call void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore* %15, i32 1) #8
  br label %16

16:                                               ; preds = %8, %14
  ret i1 %11
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN13SkBitmapCache3Rec14postAddInstallEPv(%"class.SkBitmapCache::Rec"*, i8*) unnamed_addr #2 comdat align 2 {
  %3 = bitcast i8* %1 to %class.SkBitmap*
  %4 = tail call zeroext i1 @_ZN13SkBitmapCache3Rec7installEP8SkBitmap(%"class.SkBitmapCache::Rec"* %0, %class.SkBitmap* %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK13SkBitmapCache3Rec11getCategoryEv(%"class.SkBitmapCache::Rec"*) unnamed_addr #2 comdat align 2 {
  ret i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkDiscardableMemory* @_ZNK13SkBitmapCache3Rec30diagnostic_only_getDiscardableEv(%"class.SkBitmapCache::Rec"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %3 = load %class.SkDiscardableMemory*, %class.SkDiscardableMemory** %2, align 8
  ret %class.SkDiscardableMemory* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN15SkResourceCache3Rec11canBePurgedEv(%"struct.SkResourceCache::Rec"*) unnamed_addr #2 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN15SkResourceCache3Rec14postAddInstallEPv(%"struct.SkResourceCache::Rec"*, i8*) unnamed_addr #2 comdat align 2 {
  ret void
}

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN11SkSemaphoreD1Ev(%class.SkSemaphore*) unnamed_addr #5

declare void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore*) local_unnamed_addr #3

declare void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN13SkBitmapCache3Rec7installEP8SkBitmap(%"class.SkBitmapCache::Rec"*, %class.SkBitmap*) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = atomicrmw sub i32* %4, i32 1 acquire
  %6 = icmp slt i32 %5, 1
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %3, i64 0, i32 0
  tail call void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore* %8) #8
  br label %9

9:                                                ; preds = %2, %7
  %10 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %11 = load %class.SkDiscardableMemory*, %class.SkDiscardableMemory** %10, align 8
  %12 = icmp eq %class.SkDiscardableMemory* %11, null
  br i1 %12, label %13, label %19

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 4
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %69, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 5
  br label %51

19:                                               ; preds = %9
  %20 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 9
  %21 = load i8, i8* %20, align 8, !range !8
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %25, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 5
  br label %43

25:                                               ; preds = %19
  %26 = bitcast %class.SkDiscardableMemory* %11 to i1 (%class.SkDiscardableMemory*)***
  %27 = load i1 (%class.SkDiscardableMemory*)**, i1 (%class.SkDiscardableMemory*)*** %26, align 8
  %28 = getelementptr inbounds i1 (%class.SkDiscardableMemory*)*, i1 (%class.SkDiscardableMemory*)** %27, i64 2
  %29 = load i1 (%class.SkDiscardableMemory*)*, i1 (%class.SkDiscardableMemory*)** %28, align 8
  %30 = tail call zeroext i1 %29(%class.SkDiscardableMemory* nonnull %11) #8
  br i1 %30, label %39, label %31

31:                                               ; preds = %25
  %32 = load %class.SkDiscardableMemory*, %class.SkDiscardableMemory** %10, align 8
  store %class.SkDiscardableMemory* null, %class.SkDiscardableMemory** %10, align 8
  %33 = icmp eq %class.SkDiscardableMemory* %32, null
  br i1 %33, label %69, label %34

34:                                               ; preds = %31
  %35 = bitcast %class.SkDiscardableMemory* %32 to void (%class.SkDiscardableMemory*)***
  %36 = load void (%class.SkDiscardableMemory*)**, void (%class.SkDiscardableMemory*)*** %35, align 8
  %37 = getelementptr inbounds void (%class.SkDiscardableMemory*)*, void (%class.SkDiscardableMemory*)** %36, i64 1
  %38 = load void (%class.SkDiscardableMemory*)*, void (%class.SkDiscardableMemory*)** %37, align 8
  tail call void %38(%class.SkDiscardableMemory* nonnull %32) #8
  br label %69

39:                                               ; preds = %25
  store i8 1, i8* %20, align 8
  %40 = load %class.SkDiscardableMemory*, %class.SkDiscardableMemory** %10, align 8
  %41 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 5
  %42 = icmp eq %class.SkDiscardableMemory* %40, null
  br i1 %42, label %51, label %43

43:                                               ; preds = %23, %39
  %44 = phi %struct.SkImageInfo* [ %24, %23 ], [ %41, %39 ]
  %45 = phi %class.SkDiscardableMemory* [ %11, %23 ], [ %40, %39 ]
  %46 = bitcast %class.SkDiscardableMemory* %45 to i8* (%class.SkDiscardableMemory*)***
  %47 = load i8* (%class.SkDiscardableMemory*)**, i8* (%class.SkDiscardableMemory*)*** %46, align 8
  %48 = getelementptr inbounds i8* (%class.SkDiscardableMemory*)*, i8* (%class.SkDiscardableMemory*)** %47, i64 3
  %49 = load i8* (%class.SkDiscardableMemory*)*, i8* (%class.SkDiscardableMemory*)** %48, align 8
  %50 = tail call i8* %49(%class.SkDiscardableMemory* nonnull %45) #8
  br label %55

51:                                               ; preds = %17, %39
  %52 = phi %struct.SkImageInfo* [ %18, %17 ], [ %41, %39 ]
  %53 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 4
  %54 = load i8*, i8** %53, align 8
  br label %55

55:                                               ; preds = %51, %43
  %56 = phi %struct.SkImageInfo* [ %44, %43 ], [ %52, %51 ]
  %57 = phi i8* [ %50, %43 ], [ %54, %51 ]
  %58 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 6
  %59 = load i64, i64* %58, align 8
  %60 = bitcast %"class.SkBitmapCache::Rec"* %0 to i8*
  %61 = tail call zeroext i1 @_ZN8SkBitmap13installPixelsERK11SkImageInfoPvmPFvS3_S3_ES3_(%class.SkBitmap* %1, %struct.SkImageInfo* dereferenceable(24) %56, i8* %57, i64 %59, void (i8*, i8*)* nonnull @_ZN13SkBitmapCache3Rec11ReleaseProcEPvS1_, i8* %60) #8
  %62 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %1, i64 0, i32 0, i32 0
  %63 = load %class.SkPixelRef*, %class.SkPixelRef** %62, align 8
  %64 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 7
  %65 = load i32, i32* %64, align 8
  tail call void @_ZN10SkPixelRef18setImmutableWithIDEj(%class.SkPixelRef* %63, i32 %65) #8
  %66 = getelementptr inbounds %"class.SkBitmapCache::Rec", %"class.SkBitmapCache::Rec"* %0, i64 0, i32 8
  %67 = load i32, i32* %66, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %66, align 4
  br label %69

69:                                               ; preds = %34, %31, %13, %55
  %70 = phi i1 [ true, %55 ], [ false, %13 ], [ false, %31 ], [ false, %34 ]
  %71 = atomicrmw add i32* %4, i32 1 release
  %72 = icmp slt i32 %71, 0
  br i1 %72, label %73, label %75

73:                                               ; preds = %69
  %74 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %3, i64 0, i32 0
  tail call void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore* %74, i32 1) #8
  br label %75

75:                                               ; preds = %69, %73
  ret i1 %70
}

declare zeroext i1 @_ZN8SkBitmap13installPixelsERK11SkImageInfoPvmPFvS3_S3_ES3_(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24), i8*, i64, void (i8*, i8*)*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN13SkBitmapCache3Rec11ReleaseProcEPvS1_(i8*, i8*) #2 comdat align 2 {
  %3 = getelementptr inbounds i8, i8* %1, i64 72
  %4 = bitcast i8* %3 to i32*
  %5 = atomicrmw sub i32* %4, i32 1 acquire
  %6 = icmp slt i32 %5, 1
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = bitcast i8* %3 to %class.SkSemaphore*
  tail call void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore* %8) #8
  br label %9

9:                                                ; preds = %2, %7
  %10 = getelementptr inbounds i8, i8* %1, i64 140
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = add nsw i32 %12, -1
  store i32 %13, i32* %11, align 4
  %14 = getelementptr inbounds i8, i8* %1, i64 88
  %15 = bitcast i8* %14 to %class.SkDiscardableMemory**
  %16 = load %class.SkDiscardableMemory*, %class.SkDiscardableMemory** %15, align 8
  %17 = icmp ne %class.SkDiscardableMemory* %16, null
  %18 = icmp eq i32 %13, 0
  %19 = and i1 %18, %17
  br i1 %19, label %20, label %26

20:                                               ; preds = %9
  %21 = bitcast %class.SkDiscardableMemory* %16 to void (%class.SkDiscardableMemory*)***
  %22 = load void (%class.SkDiscardableMemory*)**, void (%class.SkDiscardableMemory*)*** %21, align 8
  %23 = getelementptr inbounds void (%class.SkDiscardableMemory*)*, void (%class.SkDiscardableMemory*)** %22, i64 4
  %24 = load void (%class.SkDiscardableMemory*)*, void (%class.SkDiscardableMemory*)** %23, align 8
  tail call void %24(%class.SkDiscardableMemory* nonnull %16) #8
  %25 = getelementptr inbounds i8, i8* %1, i64 144
  store i8 0, i8* %25, align 8
  br label %26

26:                                               ; preds = %9, %20
  %27 = atomicrmw add i32* %4, i32 1 release
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %26
  %30 = bitcast i8* %3 to %class.SkSemaphore*
  tail call void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore* %30, i32 1) #8
  br label %31

31:                                               ; preds = %26, %29
  ret void
}

declare void @_ZN15SkResourceCache3Key4initEPvmm(%"struct.SkResourceCache::Key"*, i8*, i64, i64) local_unnamed_addr #3

declare void @_ZNK12SkCachedData11internalRefEb(%class.SkCachedData*, i1 zeroext) local_unnamed_addr #3

declare void @_ZNK12SkCachedData13internalUnrefEb(%class.SkCachedData*, i1 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_19MipMapRecD2Ev(%"struct.(anonymous namespace)::MipMapRec"* nocapture) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"struct.(anonymous namespace)::MipMapRec", %"struct.(anonymous namespace)::MipMapRec"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN12_GLOBAL__N_19MipMapRecE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.(anonymous namespace)::MipMapRec", %"struct.(anonymous namespace)::MipMapRec"* %0, i64 0, i32 2
  %4 = bitcast %class.SkMipmap** %3 to %class.SkCachedData**
  %5 = load %class.SkCachedData*, %class.SkCachedData** %4, align 8
  tail call void @_ZNK12SkCachedData13internalUnrefEb(%class.SkCachedData* %5, i1 zeroext true) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_19MipMapRecD0Ev(%"struct.(anonymous namespace)::MipMapRec"*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"struct.(anonymous namespace)::MipMapRec", %"struct.(anonymous namespace)::MipMapRec"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN12_GLOBAL__N_19MipMapRecE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.(anonymous namespace)::MipMapRec", %"struct.(anonymous namespace)::MipMapRec"* %0, i64 0, i32 2
  %4 = bitcast %class.SkMipmap** %3 to %class.SkCachedData**
  %5 = load %class.SkCachedData*, %class.SkCachedData** %4, align 8
  tail call void @_ZNK12SkCachedData13internalUnrefEb(%class.SkCachedData* %5, i1 zeroext true) #8
  %6 = bitcast %"struct.(anonymous namespace)::MipMapRec"* %0 to i8*
  tail call void @_ZdlPv(i8* %6) #9
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal dereferenceable(24) %"struct.SkResourceCache::Key"* @_ZNK12_GLOBAL__N_19MipMapRec6getKeyEv(%"struct.(anonymous namespace)::MipMapRec"* readnone) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.(anonymous namespace)::MipMapRec", %"struct.(anonymous namespace)::MipMapRec"* %0, i64 0, i32 1, i32 0
  ret %"struct.SkResourceCache::Key"* %2
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i64 @_ZNK12_GLOBAL__N_19MipMapRec9bytesUsedEv(%"struct.(anonymous namespace)::MipMapRec"* nocapture readonly) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"struct.(anonymous namespace)::MipMapRec", %"struct.(anonymous namespace)::MipMapRec"* %0, i64 0, i32 2
  %3 = bitcast %class.SkMipmap** %2 to %class.SkCachedData**
  %4 = load %class.SkCachedData*, %class.SkCachedData** %3, align 8
  %5 = getelementptr inbounds %class.SkCachedData, %class.SkCachedData* %4, i64 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 48
  ret i64 %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i8* @_ZNK12_GLOBAL__N_19MipMapRec11getCategoryEv(%"struct.(anonymous namespace)::MipMapRec"* nocapture readnone) unnamed_addr #0 align 2 {
  ret i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal %class.SkDiscardableMemory* @_ZNK12_GLOBAL__N_19MipMapRec30diagnostic_only_getDiscardableEv(%"struct.(anonymous namespace)::MipMapRec"* nocapture readonly) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"struct.(anonymous namespace)::MipMapRec", %"struct.(anonymous namespace)::MipMapRec"* %0, i64 0, i32 2
  %3 = bitcast %class.SkMipmap** %2 to %class.SkCachedData**
  %4 = load %class.SkCachedData*, %class.SkCachedData** %3, align 8
  %5 = getelementptr inbounds %class.SkCachedData, %class.SkCachedData* %4, i64 0, i32 6
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.SkCachedData, %class.SkCachedData* %4, i64 0, i32 2, i32 0
  %10 = load %class.SkDiscardableMemory*, %class.SkDiscardableMemory** %9, align 8
  br label %11

11:                                               ; preds = %1, %8
  %12 = phi %class.SkDiscardableMemory* [ %10, %8 ], [ null, %1 ]
  ret %class.SkDiscardableMemory* %12
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN17SkBitmapCacheDesc4MakeEjRK7SkIRect: argument 0"}
!4 = distinct !{!4, !"_ZN17SkBitmapCacheDesc4MakeEjRK7SkIRect"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN17SkBitmapCacheDesc4MakeEPK7SkImage: argument 0"}
!7 = distinct !{!7, !"_ZN17SkBitmapCacheDesc4MakeEPK7SkImage"}
!8 = !{i8 0, i8 2}
