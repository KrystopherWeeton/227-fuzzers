; ModuleID = '../../third_party/libzip/src/lib/zip_source_compress.c'
source_filename = "../../third_party/libzip/src/lib/zip_source_compress.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip_compression_algorithm = type { i8* (i16, i32, %struct.zip_error*)*, void (i8*)*, i16 (i8*)*, i8, i1 (i8*)*, i1 (i8*)*, i1 (i8*, i8*, i64)*, void (i8*)*, i32 (i8*, i8*, i64*)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }

@zip_algorithm_deflate_compress = external global %struct.zip_compression_algorithm, align 8
@zip_algorithm_deflate_decompress = external global %struct.zip_compression_algorithm, align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @zip_compression_method_supported(i32, i32) local_unnamed_addr #0 {
  %3 = icmp eq i32 %0, 0
  br i1 %3, label %10, label %4

4:                                                ; preds = %2
  %5 = icmp ugt i32 %0, -3
  %6 = and i32 %0, 65535
  %7 = icmp eq i32 %6, 8
  %8 = or i1 %5, %7
  %9 = zext i1 %8 to i32
  br label %10

10:                                               ; preds = %2, %4
  %11 = phi i32 [ %9, %4 ], [ 1, %2 ]
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_source* @zip_source_compress(%struct.zip*, %struct.zip_source*, i32, i32) local_unnamed_addr #1 {
  %5 = tail call fastcc %struct.zip_source* @compression_source_new(%struct.zip* %0, %struct.zip_source* %1, i32 %2, i1 zeroext true, i32 %3)
  ret %struct.zip_source* %5
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %struct.zip_source* @compression_source_new(%struct.zip*, %struct.zip_source*, i32, i1 zeroext, i32) unnamed_addr #1 {
  %6 = icmp eq %struct.zip_source* %1, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %5
  %8 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %8, i32 18, i32 0) #6
  br label %53

9:                                                ; preds = %5
  %10 = icmp ugt i32 %2, -3
  %11 = and i32 %2, 65535
  %12 = icmp eq i32 %11, 8
  %13 = or i1 %10, %12
  %14 = select i1 %3, %struct.zip_compression_algorithm* @zip_algorithm_deflate_compress, %struct.zip_compression_algorithm* @zip_algorithm_deflate_decompress
  br i1 %13, label %17, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %16, i32 16, i32 0) #6
  br label %53

17:                                               ; preds = %9
  %18 = tail call noalias i8* @malloc(i64 8256) #6
  %19 = icmp eq i8* %18, null
  br i1 %19, label %43, label %20

20:                                               ; preds = %17
  %21 = zext i1 %3 to i8
  %22 = bitcast i8* %18 to %struct.zip_error*
  tail call void @zip_error_init(%struct.zip_error* nonnull %22) #6
  %23 = and i1 %10, %3
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds i8, i8* %18, i64 18
  store i8 %24, i8* %25, align 2
  %26 = getelementptr inbounds i8, i8* %18, i64 8240
  %27 = bitcast i8* %26 to %struct.zip_compression_algorithm**
  store %struct.zip_compression_algorithm* %14, %struct.zip_compression_algorithm** %27, align 8
  %28 = getelementptr inbounds i8, i8* %18, i64 24
  %29 = bitcast i8* %28 to i32*
  store i32 %2, i32* %29, align 8
  %30 = getelementptr inbounds i8, i8* %18, i64 20
  store i8 %21, i8* %30, align 4
  %31 = getelementptr inbounds i8, i8* %18, i64 16
  store i8 0, i8* %31, align 8
  %32 = getelementptr inbounds i8, i8* %18, i64 17
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds i8, i8* %18, i64 19
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.zip_compression_algorithm, %struct.zip_compression_algorithm* %14, i64 0, i32 0
  %35 = load i8* (i16, i32, %struct.zip_error*)*, i8* (i16, i32, %struct.zip_error*)** %34, align 8
  %36 = select i1 %10, i32 8, i32 %2
  %37 = trunc i32 %36 to i16
  %38 = tail call i8* %35(i16 zeroext %37, i32 %4, %struct.zip_error* nonnull %22) #6
  %39 = getelementptr inbounds i8, i8* %18, i64 8248
  %40 = bitcast i8* %39 to i8**
  store i8* %38, i8** %40, align 8
  %41 = icmp eq i8* %38, null
  br i1 %41, label %42, label %45

42:                                               ; preds = %20
  tail call void @zip_error_fini(%struct.zip_error* nonnull %22) #6
  tail call void @free(i8* nonnull %18) #6
  br label %43

43:                                               ; preds = %17, %42
  %44 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %44, i32 14, i32 0) #6
  br label %53

45:                                               ; preds = %20
  %46 = tail call %struct.zip_source* @zip_source_layered(%struct.zip* %0, %struct.zip_source* nonnull %1, i64 (%struct.zip_source*, i8*, i8*, i64, i32)* nonnull @compress_callback, i8* nonnull %18) #6
  %47 = icmp eq %struct.zip_source* %46, null
  br i1 %47, label %48, label %53

48:                                               ; preds = %45
  %49 = load %struct.zip_compression_algorithm*, %struct.zip_compression_algorithm** %27, align 8
  %50 = getelementptr inbounds %struct.zip_compression_algorithm, %struct.zip_compression_algorithm* %49, i64 0, i32 1
  %51 = load void (i8*)*, void (i8*)** %50, align 8
  %52 = load i8*, i8** %40, align 8
  tail call void %51(i8* %52) #6
  tail call void @zip_error_fini(%struct.zip_error* nonnull %22) #6
  tail call void @free(i8* nonnull %18) #6
  br label %53

53:                                               ; preds = %45, %48, %43, %15, %7
  %54 = phi %struct.zip_source* [ null, %7 ], [ null, %15 ], [ null, %43 ], [ null, %48 ], [ %46, %45 ]
  ret %struct.zip_source* %54
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_source* @zip_source_decompress(%struct.zip*, %struct.zip_source*, i32) local_unnamed_addr #1 {
  %4 = tail call fastcc %struct.zip_source* @compression_source_new(%struct.zip* %0, %struct.zip_source* %1, i32 %2, i1 zeroext false, i32 0)
  ret %struct.zip_source* %4
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #3

declare %struct.zip_source* @zip_source_layered(%struct.zip*, %struct.zip_source*, i64 (%struct.zip_source*, i8*, i8*, i64, i32)*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal i64 @compress_callback(%struct.zip_source*, i8*, i8*, i64, i32) #1 {
  %6 = alloca i64, align 8
  switch i32 %4, label %233 [
    i32 0, label %7
    i32 1, label %24
    i32 2, label %119
    i32 3, label %131
    i32 4, label %184
    i32 5, label %187
    i32 19, label %199
    i32 14, label %230
  ]

7:                                                ; preds = %5
  %8 = getelementptr inbounds i8, i8* %1, i64 32
  %9 = getelementptr inbounds i8, i8* %1, i64 16
  store i8 0, i8* %9, align 8
  %10 = getelementptr inbounds i8, i8* %1, i64 17
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds i8, i8* %1, i64 19
  store i8 0, i8* %11, align 1
  %12 = bitcast i8* %8 to <2 x i64>*
  store <2 x i64> <i64 0, i64 -1>, <2 x i64>* %12, align 8
  %13 = getelementptr inbounds i8, i8* %1, i64 8240
  %14 = bitcast i8* %13 to %struct.zip_compression_algorithm**
  %15 = load %struct.zip_compression_algorithm*, %struct.zip_compression_algorithm** %14, align 8
  %16 = getelementptr inbounds %struct.zip_compression_algorithm, %struct.zip_compression_algorithm* %15, i64 0, i32 4
  %17 = load i1 (i8*)*, i1 (i8*)** %16, align 8
  %18 = getelementptr inbounds i8, i8* %1, i64 8248
  %19 = bitcast i8* %18 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = tail call zeroext i1 %17(i8* %20) #6
  %22 = xor i1 %21, true
  %23 = sext i1 %22 to i64
  br label %235

24:                                               ; preds = %5
  %25 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #6
  store i64 -6148914691236517206, i64* %6, align 8
  %26 = bitcast i8* %1 to %struct.zip_error*
  %27 = tail call i32 @zip_error_code_zip(%struct.zip_error* %26) #6
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %117

29:                                               ; preds = %24
  %30 = icmp eq i64 %3, 0
  br i1 %30, label %117, label %31

31:                                               ; preds = %29
  %32 = getelementptr inbounds i8, i8* %1, i64 17
  %33 = load i8, i8* %32, align 1, !range !2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %117

35:                                               ; preds = %31
  %36 = getelementptr inbounds i8, i8* %1, i64 8240
  %37 = bitcast i8* %36 to %struct.zip_compression_algorithm**
  %38 = getelementptr inbounds i8, i8* %1, i64 8248
  %39 = bitcast i8* %38 to i8**
  %40 = getelementptr inbounds i8, i8* %1, i64 16
  %41 = getelementptr inbounds i8, i8* %1, i64 48
  %42 = getelementptr inbounds i8, i8* %1, i64 40
  %43 = bitcast i8* %42 to i64*
  %44 = getelementptr inbounds i8, i8* %1, i64 18
  br label %45

45:                                               ; preds = %104, %35
  %46 = phi i64 [ 0, %35 ], [ %57, %104 ]
  %47 = sub i64 %3, %46
  store i64 %47, i64* %6, align 8
  %48 = load %struct.zip_compression_algorithm*, %struct.zip_compression_algorithm** %37, align 8
  %49 = getelementptr inbounds %struct.zip_compression_algorithm, %struct.zip_compression_algorithm* %48, i64 0, i32 8
  %50 = load i32 (i8*, i8*, i64*)*, i32 (i8*, i8*, i64*)** %49, align 8
  %51 = load i8*, i8** %39, align 8
  %52 = getelementptr inbounds i8, i8* %2, i64 %46
  %53 = call i32 %50(i8* %51, i8* %52, i64* nonnull %6) #6
  %54 = icmp eq i32 %53, 2
  %55 = load i64, i64* %6, align 8
  %56 = select i1 %54, i64 0, i64 %55
  %57 = add i64 %56, %46
  switch i32 %53, label %104 [
    i32 1, label %58
    i32 2, label %100
    i32 3, label %72
  ]

58:                                               ; preds = %45
  store i8 1, i8* %32, align 1
  %59 = load i64, i64* %43, align 8
  %60 = icmp slt i64 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  call void @zip_error_set(%struct.zip_error* %26, i32 20, i32 0) #6
  br label %106

62:                                               ; preds = %58
  %63 = load i8, i8* %44, align 2, !range !2
  %64 = icmp eq i8 %63, 0
  %65 = icmp ugt i64 %59, %57
  %66 = or i1 %65, %64
  br i1 %66, label %106, label %67

67:                                               ; preds = %62
  %68 = getelementptr inbounds i8, i8* %1, i64 19
  store i8 1, i8* %68, align 1
  %69 = getelementptr inbounds i8, i8* %1, i64 32
  %70 = bitcast i8* %69 to i64*
  store i64 %59, i64* %70, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 8 %41, i64 %59, i1 false) #6
  %71 = load i64, i64* %70, align 8
  br label %117

72:                                               ; preds = %45
  %73 = load i8, i8* %40, align 8, !range !2
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %75, label %106

75:                                               ; preds = %72
  %76 = call i64 @zip_source_read(%struct.zip_source* %0, i8* %41, i64 8192) #6
  %77 = icmp slt i64 %76, 0
  br i1 %77, label %78, label %79

78:                                               ; preds = %75
  call void @_zip_error_set_from_source(%struct.zip_error* %26, %struct.zip_source* %0) #6
  br label %106

79:                                               ; preds = %75
  %80 = icmp eq i64 %76, 0
  br i1 %80, label %81, label %89

81:                                               ; preds = %79
  store i8 1, i8* %40, align 8
  %82 = load %struct.zip_compression_algorithm*, %struct.zip_compression_algorithm** %37, align 8
  %83 = getelementptr inbounds %struct.zip_compression_algorithm, %struct.zip_compression_algorithm* %82, i64 0, i32 7
  %84 = load void (i8*)*, void (i8*)** %83, align 8
  %85 = load i8*, i8** %39, align 8
  call void %84(i8* %85) #6
  %86 = load i64, i64* %43, align 8
  %87 = icmp slt i64 %86, 0
  br i1 %87, label %88, label %104

88:                                               ; preds = %81
  store i64 0, i64* %43, align 8
  br label %104

89:                                               ; preds = %79
  %90 = load i64, i64* %43, align 8
  %91 = icmp sgt i64 %90, -1
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  store i8 0, i8* %44, align 2
  br label %94

93:                                               ; preds = %89
  store i64 %76, i64* %43, align 8
  br label %94

94:                                               ; preds = %93, %92
  %95 = load %struct.zip_compression_algorithm*, %struct.zip_compression_algorithm** %37, align 8
  %96 = getelementptr inbounds %struct.zip_compression_algorithm, %struct.zip_compression_algorithm* %95, i64 0, i32 6
  %97 = load i1 (i8*, i8*, i64)*, i1 (i8*, i8*, i64)** %96, align 8
  %98 = load i8*, i8** %39, align 8
  %99 = call zeroext i1 %97(i8* %98, i8* %41, i64 %76) #6
  br label %104

100:                                              ; preds = %45
  %101 = call i32 @zip_error_code_zip(%struct.zip_error* %26) #6
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %106

103:                                              ; preds = %100
  call void @zip_error_set(%struct.zip_error* %26, i32 20, i32 0) #6
  br label %106

104:                                              ; preds = %94, %88, %81, %45
  %105 = icmp ult i64 %57, %3
  br i1 %105, label %45, label %106

106:                                              ; preds = %104, %72, %103, %100, %78, %62, %61
  %107 = icmp eq i64 %57, 0
  br i1 %107, label %113, label %108

108:                                              ; preds = %106
  store i8 0, i8* %44, align 2
  %109 = getelementptr inbounds i8, i8* %1, i64 32
  %110 = bitcast i8* %109 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = add i64 %111, %57
  store i64 %112, i64* %110, align 8
  br label %117

113:                                              ; preds = %106
  %114 = call i32 @zip_error_code_zip(%struct.zip_error* %26) #6
  %115 = icmp ne i32 %114, 0
  %116 = sext i1 %115 to i64
  br label %117

117:                                              ; preds = %24, %29, %31, %67, %108, %113
  %118 = phi i64 [ %57, %108 ], [ %116, %113 ], [ %71, %67 ], [ -1, %24 ], [ 0, %31 ], [ 0, %29 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #6
  br label %235

119:                                              ; preds = %5
  %120 = getelementptr inbounds i8, i8* %1, i64 8240
  %121 = bitcast i8* %120 to %struct.zip_compression_algorithm**
  %122 = load %struct.zip_compression_algorithm*, %struct.zip_compression_algorithm** %121, align 8
  %123 = getelementptr inbounds %struct.zip_compression_algorithm, %struct.zip_compression_algorithm* %122, i64 0, i32 5
  %124 = load i1 (i8*)*, i1 (i8*)** %123, align 8
  %125 = getelementptr inbounds i8, i8* %1, i64 8248
  %126 = bitcast i8* %125 to i8**
  %127 = load i8*, i8** %126, align 8
  %128 = tail call zeroext i1 %124(i8* %127) #6
  %129 = xor i1 %128, true
  %130 = sext i1 %129 to i64
  br label %235

131:                                              ; preds = %5
  %132 = getelementptr inbounds i8, i8* %1, i64 20
  %133 = load i8, i8* %132, align 4, !range !2
  %134 = icmp eq i8 %133, 0
  br i1 %134, label %166, label %135

135:                                              ; preds = %131
  %136 = getelementptr inbounds i8, i8* %1, i64 17
  %137 = load i8, i8* %136, align 1, !range !2
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %162, label %139

139:                                              ; preds = %135
  %140 = getelementptr inbounds i8, i8* %1, i64 19
  %141 = load i8, i8* %140, align 1, !range !2
  %142 = icmp eq i8 %141, 0
  br i1 %142, label %143, label %150

143:                                              ; preds = %139
  %144 = getelementptr inbounds i8, i8* %1, i64 24
  %145 = bitcast i8* %144 to i32*
  %146 = load i32, i32* %145, align 8
  %147 = icmp ugt i32 %146, -3
  %148 = select i1 %147, i32 8, i32 %146
  %149 = trunc i32 %148 to i16
  br label %150

150:                                              ; preds = %143, %139
  %151 = phi i16 [ 0, %139 ], [ %149, %143 ]
  %152 = getelementptr inbounds i8, i8* %2, i64 52
  %153 = bitcast i8* %152 to i16*
  store i16 %151, i16* %153, align 4
  %154 = getelementptr inbounds i8, i8* %1, i64 32
  %155 = bitcast i8* %154 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = getelementptr inbounds i8, i8* %2, i64 32
  %158 = bitcast i8* %157 to i64*
  store i64 %156, i64* %158, align 8
  %159 = bitcast i8* %2 to i64*
  %160 = load i64, i64* %159, align 8
  %161 = or i64 %160, 72
  store i64 %161, i64* %159, align 8
  br label %235

162:                                              ; preds = %135
  %163 = bitcast i8* %2 to i64*
  %164 = load i64, i64* %163, align 8
  %165 = and i64 %164, 4294967223
  store i64 %165, i64* %163, align 8
  br label %235

166:                                              ; preds = %131
  %167 = getelementptr inbounds i8, i8* %2, i64 52
  %168 = bitcast i8* %167 to i16*
  store i16 0, i16* %168, align 4
  %169 = bitcast i8* %2 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = or i64 %170, 64
  store i64 %171, i64* %169, align 8
  %172 = getelementptr inbounds i8, i8* %1, i64 17
  %173 = load i8, i8* %172, align 1, !range !2
  %174 = icmp eq i8 %173, 0
  br i1 %174, label %182, label %175

175:                                              ; preds = %166
  %176 = getelementptr inbounds i8, i8* %1, i64 32
  %177 = bitcast i8* %176 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = getelementptr inbounds i8, i8* %2, i64 24
  %180 = bitcast i8* %179 to i64*
  store i64 %178, i64* %180, align 8
  %181 = or i64 %170, 68
  store i64 %181, i64* %169, align 8
  br label %235

182:                                              ; preds = %166
  %183 = and i64 %171, 4294967291
  store i64 %183, i64* %169, align 8
  br label %235

184:                                              ; preds = %5
  %185 = bitcast i8* %1 to %struct.zip_error*
  %186 = tail call i64 @zip_error_to_data(%struct.zip_error* %185, i8* %2, i64 %3) #6
  br label %235

187:                                              ; preds = %5
  %188 = icmp eq i8* %1, null
  br i1 %188, label %235, label %189

189:                                              ; preds = %187
  %190 = getelementptr inbounds i8, i8* %1, i64 8240
  %191 = bitcast i8* %190 to %struct.zip_compression_algorithm**
  %192 = load %struct.zip_compression_algorithm*, %struct.zip_compression_algorithm** %191, align 8
  %193 = getelementptr inbounds %struct.zip_compression_algorithm, %struct.zip_compression_algorithm* %192, i64 0, i32 1
  %194 = load void (i8*)*, void (i8*)** %193, align 8
  %195 = getelementptr inbounds i8, i8* %1, i64 8248
  %196 = bitcast i8* %195 to i8**
  %197 = load i8*, i8** %196, align 8
  tail call void %194(i8* %197) #6
  %198 = bitcast i8* %1 to %struct.zip_error*
  tail call void @zip_error_fini(%struct.zip_error* nonnull %198) #6
  tail call void @free(i8* nonnull %1) #6
  br label %235

199:                                              ; preds = %5
  %200 = icmp ult i64 %3, 24
  br i1 %200, label %201, label %203

201:                                              ; preds = %199
  %202 = bitcast i8* %1 to %struct.zip_error*
  tail call void @zip_error_set(%struct.zip_error* %202, i32 18, i32 0) #6
  br label %235

203:                                              ; preds = %199
  %204 = bitcast i8* %2 to i64*
  %205 = load i64, i64* %204, align 8
  %206 = or i64 %205, 20
  store i64 %206, i64* %204, align 8
  %207 = getelementptr inbounds i8, i8* %1, i64 8240
  %208 = bitcast i8* %207 to %struct.zip_compression_algorithm**
  %209 = load %struct.zip_compression_algorithm*, %struct.zip_compression_algorithm** %208, align 8
  %210 = getelementptr inbounds %struct.zip_compression_algorithm, %struct.zip_compression_algorithm* %209, i64 0, i32 3
  %211 = load i8, i8* %210, align 8
  %212 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %211, i8* %212, align 1
  %213 = getelementptr inbounds i8, i8* %2, i64 18
  %214 = bitcast i8* %213 to i16*
  store i16 2102, i16* %214, align 2
  %215 = getelementptr inbounds i8, i8* %1, i64 19
  %216 = load i8, i8* %215, align 1, !range !2
  %217 = icmp eq i8 %216, 0
  br i1 %217, label %218, label %226

218:                                              ; preds = %203
  %219 = load %struct.zip_compression_algorithm*, %struct.zip_compression_algorithm** %208, align 8
  %220 = getelementptr inbounds %struct.zip_compression_algorithm, %struct.zip_compression_algorithm* %219, i64 0, i32 2
  %221 = load i16 (i8*)*, i16 (i8*)** %220, align 8
  %222 = getelementptr inbounds i8, i8* %1, i64 8248
  %223 = bitcast i8* %222 to i8**
  %224 = load i8*, i8** %223, align 8
  %225 = tail call zeroext i16 %221(i8* %224) #6
  br label %226

226:                                              ; preds = %203, %218
  %227 = phi i16 [ %225, %218 ], [ 0, %203 ]
  %228 = getelementptr inbounds i8, i8* %2, i64 16
  %229 = bitcast i8* %228 to i16*
  store i16 %227, i16* %229, align 8
  br label %235

230:                                              ; preds = %5
  %231 = tail call i64 (i32, ...) @zip_source_make_command_bitmap(i32 19, i32 -1) #6
  %232 = or i64 %231, 63
  br label %235

233:                                              ; preds = %5
  %234 = bitcast i8* %1 to %struct.zip_error*
  tail call void @zip_error_set(%struct.zip_error* %234, i32 20, i32 0) #6
  br label %235

235:                                              ; preds = %189, %187, %201, %226, %162, %150, %182, %175, %119, %7, %233, %230, %184, %117
  %236 = phi i64 [ -1, %233 ], [ %232, %230 ], [ %186, %184 ], [ %118, %117 ], [ %23, %7 ], [ %130, %119 ], [ 0, %175 ], [ 0, %182 ], [ 0, %150 ], [ 0, %162 ], [ -1, %201 ], [ 24, %226 ], [ 0, %187 ], [ 0, %189 ]
  ret i64 %236
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

declare void @zip_error_init(%struct.zip_error*) local_unnamed_addr #3

declare void @zip_error_fini(%struct.zip_error*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

declare i64 @zip_error_to_data(%struct.zip_error*, i8*, i64) local_unnamed_addr #3

declare i64 @zip_source_make_command_bitmap(i32, ...) local_unnamed_addr #3

declare i32 @zip_error_code_zip(%struct.zip_error*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare i64 @zip_source_read(%struct.zip_source*, i8*, i64) local_unnamed_addr #3

declare void @_zip_error_set_from_source(%struct.zip_error*, %struct.zip_source*) local_unnamed_addr #3

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
