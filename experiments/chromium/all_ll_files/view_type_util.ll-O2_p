; ModuleID = '../../extensions/common/view_type_util.cc'
source_filename = "../../extensions/common/view_type_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.anon.1 = type { i32, %"class.base::BasicStringPiece" }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZZN10extensions21GetViewTypeFromStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPNS_5mojom8ViewTypeEE8kTypeMap = internal unnamed_addr constant [5 x %struct.anon.1] [%struct.anon.1 { i32 1, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i64 10 } }, %struct.anon.1 { i32 4, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0), i64 10 } }, %struct.anon.1 { i32 5, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0), i64 16 } }, %struct.anon.1 { i32 7, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i64 5 } }, %struct.anon.1 { i32 9, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i64 3 } }], align 16
@.str = private unnamed_addr constant [11 x i8] c"APP_WINDOW\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"BACKGROUND\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"EXTENSION_DIALOG\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"POPUP\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"TAB\00", align 1

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZN10extensions21GetViewTypeFromStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPNS_5mojom8ViewTypeE(%"class.std::__1::basic_string"* dereferenceable(24), i32* nocapture) local_unnamed_addr #0 {
  %3 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = zext i8 %5 to i64
  %10 = select i1 %6, i64 %8, i64 %9
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %14 = select i1 %6, i8* %12, i8* %13
  switch i64 %10, label %22 [
    i64 10, label %15
    i64 16, label %27
    i64 5, label %30
    i64 3, label %33
  ]

15:                                               ; preds = %2
  %16 = tail call i32 @bcmp(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i64 10) #2
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %24

18:                                               ; preds = %33, %30, %27, %24, %15
  %19 = phi %struct.anon.1* [ getelementptr inbounds ([5 x %struct.anon.1], [5 x %struct.anon.1]* @_ZZN10extensions21GetViewTypeFromStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPNS_5mojom8ViewTypeEE8kTypeMap, i64 0, i64 0), %15 ], [ getelementptr inbounds ([5 x %struct.anon.1], [5 x %struct.anon.1]* @_ZZN10extensions21GetViewTypeFromStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPNS_5mojom8ViewTypeEE8kTypeMap, i64 0, i64 1), %24 ], [ getelementptr inbounds ([5 x %struct.anon.1], [5 x %struct.anon.1]* @_ZZN10extensions21GetViewTypeFromStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPNS_5mojom8ViewTypeEE8kTypeMap, i64 0, i64 2), %27 ], [ getelementptr inbounds ([5 x %struct.anon.1], [5 x %struct.anon.1]* @_ZZN10extensions21GetViewTypeFromStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPNS_5mojom8ViewTypeEE8kTypeMap, i64 0, i64 3), %30 ], [ getelementptr inbounds ([5 x %struct.anon.1], [5 x %struct.anon.1]* @_ZZN10extensions21GetViewTypeFromStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPNS_5mojom8ViewTypeEE8kTypeMap, i64 0, i64 4), %33 ]
  %20 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %19, i64 0, i32 0
  %21 = load i32, i32* %20, align 8
  store i32 %21, i32* %1, align 4
  br label %22

22:                                               ; preds = %2, %24, %27, %30, %33, %18
  %23 = phi i1 [ true, %18 ], [ false, %33 ], [ false, %30 ], [ false, %27 ], [ false, %24 ], [ false, %2 ]
  ret i1 %23

24:                                               ; preds = %15
  %25 = tail call i32 @bcmp(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* %14, i64 10) #2
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %18, label %22

27:                                               ; preds = %2
  %28 = tail call i32 @bcmp(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0), i8* %14, i64 16) #2
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %18, label %22

30:                                               ; preds = %2
  %31 = tail call i32 @bcmp(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i8* %14, i64 5) #2
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %18, label %22

33:                                               ; preds = %2
  %34 = tail call i32 @bcmp(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i8* %14, i64 3) #2
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %18, label %22
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #1

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind readonly }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
