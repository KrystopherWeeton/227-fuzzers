; ModuleID = '../../third_party/libjpeg_turbo/jidctflt.c'
source_filename = "../../third_party/libjpeg_turbo/jidctflt.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32, i32, [10 x i32], [10 x i32], i32, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)*, i32, i32 }
%struct.jpeg_marker_reader = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)*, i32 }
%struct.jpeg_inverse_dct = type { void (%struct.jpeg_decompress_struct*)*, [10 x {}*] }
%struct.jpeg_upsampler = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }

; Function Attrs: nounwind ssp uwtable
define hidden void @jpeg_idct_float(%struct.jpeg_decompress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i16* nocapture readonly, i8** nocapture readonly, i32) local_unnamed_addr #0 {
  %6 = alloca [64 x float], align 16
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 65
  %8 = load i8*, i8** %7, align 8
  %9 = bitcast [64 x float]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %9) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -1, i64 256, i1 false)
  %10 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 20
  %11 = bitcast i8** %10 to float**
  %12 = load float*, float** %11, align 8
  %13 = getelementptr inbounds [64 x float], [64 x float]* %6, i64 0, i64 0
  br label %16

14:                                               ; preds = %151
  %15 = zext i32 %4 to i64
  br label %160

16:                                               ; preds = %151, %5
  %17 = phi i32 [ 8, %5 ], [ %158, %151 ]
  %18 = phi float* [ %13, %5 ], [ %155, %151 ]
  %19 = phi float* [ %12, %5 ], [ %156, %151 ]
  %20 = phi i16* [ %2, %5 ], [ %157, %151 ]
  %21 = getelementptr inbounds i16, i16* %20, i64 8
  %22 = load i16, i16* %21, align 2
  %23 = getelementptr inbounds i16, i16* %20, i64 16
  %24 = load i16, i16* %23, align 2
  %25 = or i16 %22, %24
  %26 = icmp eq i16 %25, 0
  br i1 %26, label %27, label %59

27:                                               ; preds = %16
  %28 = getelementptr inbounds i16, i16* %20, i64 24
  %29 = load i16, i16* %28, align 2
  %30 = icmp eq i16 %29, 0
  br i1 %30, label %31, label %59

31:                                               ; preds = %27
  %32 = getelementptr inbounds i16, i16* %20, i64 32
  %33 = load i16, i16* %32, align 2
  %34 = icmp eq i16 %33, 0
  br i1 %34, label %35, label %59

35:                                               ; preds = %31
  %36 = getelementptr inbounds i16, i16* %20, i64 40
  %37 = load i16, i16* %36, align 2
  %38 = icmp eq i16 %37, 0
  br i1 %38, label %39, label %59

39:                                               ; preds = %35
  %40 = getelementptr inbounds i16, i16* %20, i64 48
  %41 = load i16, i16* %40, align 2
  %42 = icmp eq i16 %41, 0
  br i1 %42, label %43, label %59

43:                                               ; preds = %39
  %44 = getelementptr inbounds i16, i16* %20, i64 56
  %45 = load i16, i16* %44, align 2
  %46 = icmp eq i16 %45, 0
  br i1 %46, label %47, label %59

47:                                               ; preds = %43
  %48 = load i16, i16* %20, align 2
  %49 = sitofp i16 %48 to float
  %50 = load float, float* %19, align 4
  %51 = fmul float %50, 1.250000e-01
  %52 = fmul float %51, %49
  store float %52, float* %18, align 4
  %53 = getelementptr inbounds float, float* %18, i64 8
  store float %52, float* %53, align 4
  %54 = getelementptr inbounds float, float* %18, i64 16
  store float %52, float* %54, align 4
  %55 = getelementptr inbounds float, float* %18, i64 24
  store float %52, float* %55, align 4
  %56 = getelementptr inbounds float, float* %18, i64 32
  store float %52, float* %56, align 4
  %57 = getelementptr inbounds float, float* %18, i64 40
  store float %52, float* %57, align 4
  %58 = getelementptr inbounds float, float* %18, i64 48
  store float %52, float* %58, align 4
  br label %151

59:                                               ; preds = %16, %43, %39, %35, %31, %27
  %60 = phi i16 [ 0, %43 ], [ 0, %39 ], [ 0, %35 ], [ 0, %31 ], [ 0, %27 ], [ %24, %16 ]
  %61 = load i16, i16* %20, align 2
  %62 = sitofp i16 %61 to float
  %63 = load float, float* %19, align 4
  %64 = fmul float %63, 1.250000e-01
  %65 = fmul float %64, %62
  %66 = sitofp i16 %60 to float
  %67 = getelementptr inbounds float, float* %19, i64 16
  %68 = load float, float* %67, align 4
  %69 = fmul float %68, 1.250000e-01
  %70 = fmul float %69, %66
  %71 = getelementptr inbounds i16, i16* %20, i64 32
  %72 = load i16, i16* %71, align 2
  %73 = sitofp i16 %72 to float
  %74 = getelementptr inbounds float, float* %19, i64 32
  %75 = load float, float* %74, align 4
  %76 = fmul float %75, 1.250000e-01
  %77 = fmul float %76, %73
  %78 = getelementptr inbounds i16, i16* %20, i64 48
  %79 = load i16, i16* %78, align 2
  %80 = sitofp i16 %79 to float
  %81 = getelementptr inbounds float, float* %19, i64 48
  %82 = load float, float* %81, align 4
  %83 = fmul float %82, 1.250000e-01
  %84 = fmul float %83, %80
  %85 = fadd float %65, %77
  %86 = fsub float %65, %77
  %87 = fadd float %70, %84
  %88 = fsub float %70, %84
  %89 = fmul float %88, 0x3FF6A09E60000000
  %90 = fsub float %89, %87
  %91 = fadd float %85, %87
  %92 = fsub float %85, %87
  %93 = fadd float %86, %90
  %94 = fsub float %86, %90
  %95 = sitofp i16 %22 to float
  %96 = getelementptr inbounds float, float* %19, i64 8
  %97 = load float, float* %96, align 4
  %98 = fmul float %97, 1.250000e-01
  %99 = fmul float %98, %95
  %100 = getelementptr inbounds i16, i16* %20, i64 24
  %101 = load i16, i16* %100, align 2
  %102 = sitofp i16 %101 to float
  %103 = getelementptr inbounds float, float* %19, i64 24
  %104 = load float, float* %103, align 4
  %105 = fmul float %104, 1.250000e-01
  %106 = fmul float %105, %102
  %107 = getelementptr inbounds i16, i16* %20, i64 40
  %108 = load i16, i16* %107, align 2
  %109 = sitofp i16 %108 to float
  %110 = getelementptr inbounds float, float* %19, i64 40
  %111 = load float, float* %110, align 4
  %112 = fmul float %111, 1.250000e-01
  %113 = fmul float %112, %109
  %114 = getelementptr inbounds i16, i16* %20, i64 56
  %115 = load i16, i16* %114, align 2
  %116 = sitofp i16 %115 to float
  %117 = getelementptr inbounds float, float* %19, i64 56
  %118 = load float, float* %117, align 4
  %119 = fmul float %118, 1.250000e-01
  %120 = fmul float %119, %116
  %121 = fadd float %106, %113
  %122 = fsub float %113, %106
  %123 = fadd float %99, %120
  %124 = fsub float %99, %120
  %125 = fadd float %121, %123
  %126 = fsub float %123, %121
  %127 = fmul float %126, 0x3FF6A09E60000000
  %128 = fadd float %122, %124
  %129 = fmul float %128, 0x3FFD906BC0000000
  %130 = fmul float %124, 0x3FF1517A80000000
  %131 = fsub float %129, %130
  %132 = fmul float %122, 0x4004E7AEA0000000
  %133 = fsub float %129, %132
  %134 = fsub float %133, %125
  %135 = fsub float %127, %134
  %136 = fsub float %131, %135
  %137 = fadd float %91, %125
  store float %137, float* %18, align 4
  %138 = fsub float %91, %125
  %139 = getelementptr inbounds float, float* %18, i64 56
  store float %138, float* %139, align 4
  %140 = fadd float %93, %134
  %141 = getelementptr inbounds float, float* %18, i64 8
  store float %140, float* %141, align 4
  %142 = fsub float %93, %134
  %143 = getelementptr inbounds float, float* %18, i64 48
  store float %142, float* %143, align 4
  %144 = fadd float %94, %135
  %145 = getelementptr inbounds float, float* %18, i64 16
  store float %144, float* %145, align 4
  %146 = fsub float %94, %135
  %147 = getelementptr inbounds float, float* %18, i64 40
  store float %146, float* %147, align 4
  %148 = fadd float %92, %136
  %149 = getelementptr inbounds float, float* %18, i64 24
  store float %148, float* %149, align 4
  %150 = fsub float %92, %136
  br label %151

151:                                              ; preds = %59, %47
  %152 = phi i64 [ 32, %59 ], [ 56, %47 ]
  %153 = phi float [ %150, %59 ], [ %52, %47 ]
  %154 = getelementptr inbounds float, float* %18, i64 %152
  store float %153, float* %154, align 4
  %155 = getelementptr inbounds float, float* %18, i64 1
  %156 = getelementptr inbounds float, float* %19, i64 1
  %157 = getelementptr inbounds i16, i16* %20, i64 1
  %158 = add nsw i32 %17, -1
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %14, label %16

160:                                              ; preds = %160, %14
  %161 = phi i64 [ 0, %14 ], [ %264, %160 ]
  %162 = phi float* [ %13, %14 ], [ %263, %160 ]
  %163 = getelementptr inbounds i8*, i8** %3, i64 %161
  %164 = load i8*, i8** %163, align 8
  %165 = getelementptr inbounds i8, i8* %164, i64 %15
  %166 = load float, float* %162, align 4
  %167 = fadd float %166, 1.285000e+02
  %168 = getelementptr inbounds float, float* %162, i64 4
  %169 = load float, float* %168, align 4
  %170 = fadd float %167, %169
  %171 = fsub float %167, %169
  %172 = getelementptr inbounds float, float* %162, i64 2
  %173 = load float, float* %172, align 4
  %174 = getelementptr inbounds float, float* %162, i64 6
  %175 = load float, float* %174, align 4
  %176 = fadd float %173, %175
  %177 = fsub float %173, %175
  %178 = fmul float %177, 0x3FF6A09E60000000
  %179 = fsub float %178, %176
  %180 = fadd float %170, %176
  %181 = fsub float %170, %176
  %182 = fadd float %171, %179
  %183 = fsub float %171, %179
  %184 = getelementptr inbounds float, float* %162, i64 5
  %185 = load float, float* %184, align 4
  %186 = getelementptr inbounds float, float* %162, i64 3
  %187 = load float, float* %186, align 4
  %188 = fadd float %185, %187
  %189 = fsub float %185, %187
  %190 = getelementptr inbounds float, float* %162, i64 1
  %191 = load float, float* %190, align 4
  %192 = getelementptr inbounds float, float* %162, i64 7
  %193 = load float, float* %192, align 4
  %194 = fadd float %191, %193
  %195 = fsub float %191, %193
  %196 = fadd float %188, %194
  %197 = fsub float %194, %188
  %198 = fmul float %197, 0x3FF6A09E60000000
  %199 = fadd float %189, %195
  %200 = fmul float %199, 0x3FFD906BC0000000
  %201 = fmul float %195, 0x3FF1517A80000000
  %202 = fsub float %200, %201
  %203 = fmul float %189, 0x4004E7AEA0000000
  %204 = fsub float %200, %203
  %205 = fsub float %204, %196
  %206 = fsub float %198, %205
  %207 = fsub float %202, %206
  %208 = fadd float %180, %196
  %209 = fptosi float %208 to i32
  %210 = and i32 %209, 1023
  %211 = zext i32 %210 to i64
  %212 = getelementptr inbounds i8, i8* %8, i64 %211
  %213 = load i8, i8* %212, align 1
  store i8 %213, i8* %165, align 1
  %214 = fsub float %180, %196
  %215 = fptosi float %214 to i32
  %216 = and i32 %215, 1023
  %217 = zext i32 %216 to i64
  %218 = getelementptr inbounds i8, i8* %8, i64 %217
  %219 = load i8, i8* %218, align 1
  %220 = getelementptr inbounds i8, i8* %165, i64 7
  store i8 %219, i8* %220, align 1
  %221 = fadd float %182, %205
  %222 = fptosi float %221 to i32
  %223 = and i32 %222, 1023
  %224 = zext i32 %223 to i64
  %225 = getelementptr inbounds i8, i8* %8, i64 %224
  %226 = load i8, i8* %225, align 1
  %227 = getelementptr inbounds i8, i8* %165, i64 1
  store i8 %226, i8* %227, align 1
  %228 = fsub float %182, %205
  %229 = fptosi float %228 to i32
  %230 = and i32 %229, 1023
  %231 = zext i32 %230 to i64
  %232 = getelementptr inbounds i8, i8* %8, i64 %231
  %233 = load i8, i8* %232, align 1
  %234 = getelementptr inbounds i8, i8* %165, i64 6
  store i8 %233, i8* %234, align 1
  %235 = fadd float %183, %206
  %236 = fptosi float %235 to i32
  %237 = and i32 %236, 1023
  %238 = zext i32 %237 to i64
  %239 = getelementptr inbounds i8, i8* %8, i64 %238
  %240 = load i8, i8* %239, align 1
  %241 = getelementptr inbounds i8, i8* %165, i64 2
  store i8 %240, i8* %241, align 1
  %242 = fsub float %183, %206
  %243 = fptosi float %242 to i32
  %244 = and i32 %243, 1023
  %245 = zext i32 %244 to i64
  %246 = getelementptr inbounds i8, i8* %8, i64 %245
  %247 = load i8, i8* %246, align 1
  %248 = getelementptr inbounds i8, i8* %165, i64 5
  store i8 %247, i8* %248, align 1
  %249 = fadd float %181, %207
  %250 = fptosi float %249 to i32
  %251 = and i32 %250, 1023
  %252 = zext i32 %251 to i64
  %253 = getelementptr inbounds i8, i8* %8, i64 %252
  %254 = load i8, i8* %253, align 1
  %255 = getelementptr inbounds i8, i8* %165, i64 3
  store i8 %254, i8* %255, align 1
  %256 = fsub float %181, %207
  %257 = fptosi float %256 to i32
  %258 = and i32 %257, 1023
  %259 = zext i32 %258 to i64
  %260 = getelementptr inbounds i8, i8* %8, i64 %259
  %261 = load i8, i8* %260, align 1
  %262 = getelementptr inbounds i8, i8* %165, i64 4
  store i8 %261, i8* %262, align 1
  %263 = getelementptr inbounds float, float* %162, i64 8
  %264 = add nuw nsw i64 %161, 1
  %265 = icmp eq i64 %264, 8
  br i1 %265, label %266, label %160

266:                                              ; preds = %160
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %9) #2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
