; ModuleID = '../../third_party/skia/src/utils/SkDashPath.cpp'
source_filename = "../../third_party/skia/src/utils/SkDashPath.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%class.SkStrokeRec = type { float, float, float, i32 }
%"class.SkPath::Iter" = type <{ %struct.SkPoint*, i8*, i8*, float*, %struct.SkPoint, %struct.SkPoint, i8, i8, i8, [5 x i8] }>
%class.SkPathMeasure = type { %class.SkContourMeasureIter, %class.sk_sp.14 }
%class.SkContourMeasureIter = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.SkContourMeasureIter::Impl"* }
%"class.SkContourMeasureIter::Impl" = type opaque
%class.sk_sp.14 = type { %class.SkContourMeasure* }
%class.SkContourMeasure = type <{ %class.SkRefCnt.base, [4 x i8], %class.SkTDArray.15, %class.SkTDArray, float, i8, [3 x i8] }>
%class.SkTDArray.15 = type { %"struct.SkContourMeasure::Segment"*, i32, i32 }
%"struct.SkContourMeasure::Segment" = type { float, i32, i32 }
%class.SpecialLineRec = type { [2 x %struct.SkPoint], %struct.SkPoint, %struct.SkPoint, float }
%"struct.SkPathEffect::DashInfo" = type { float*, i32, float }

$_ZN14SpecialLineRec4initERK6SkPathPS0_P11SkStrokeRecif = comdat any

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN10SkDashPath18CalcDashParametersEfPKfiPfPiS2_S2_(float, float* nocapture readonly, i32, float* nocapture, i32* nocapture, float* nocapture, float*) local_unnamed_addr #0 {
  %8 = icmp sgt i32 %2, 0
  br i1 %8, label %9, label %31

9:                                                ; preds = %7
  %10 = zext i32 %2 to i64
  %11 = add nsw i64 %10, -1
  %12 = and i64 %10, 7
  %13 = icmp ult i64 %11, 7
  br i1 %13, label %16, label %14

14:                                               ; preds = %9
  %15 = sub nsw i64 %10, %12
  br label %34

16:                                               ; preds = %34, %9
  %17 = phi float [ undef, %9 ], [ %68, %34 ]
  %18 = phi i64 [ 0, %9 ], [ %69, %34 ]
  %19 = phi float [ 0.000000e+00, %9 ], [ %68, %34 ]
  %20 = icmp eq i64 %12, 0
  br i1 %20, label %31, label %21

21:                                               ; preds = %16, %21
  %22 = phi i64 [ %28, %21 ], [ %18, %16 ]
  %23 = phi float [ %27, %21 ], [ %19, %16 ]
  %24 = phi i64 [ %29, %21 ], [ %12, %16 ]
  %25 = getelementptr inbounds float, float* %1, i64 %22
  %26 = load float, float* %25, align 4
  %27 = fadd float %23, %26
  %28 = add nuw nsw i64 %22, 1
  %29 = add i64 %24, -1
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %31, label %21, !llvm.loop !2

31:                                               ; preds = %16, %21, %7
  %32 = phi float [ 0.000000e+00, %7 ], [ %17, %16 ], [ %27, %21 ]
  store float %32, float* %5, align 4
  %33 = icmp eq float* %6, null
  br i1 %33, label %90, label %72

34:                                               ; preds = %34, %14
  %35 = phi i64 [ 0, %14 ], [ %69, %34 ]
  %36 = phi float [ 0.000000e+00, %14 ], [ %68, %34 ]
  %37 = phi i64 [ %15, %14 ], [ %70, %34 ]
  %38 = getelementptr inbounds float, float* %1, i64 %35
  %39 = load float, float* %38, align 4
  %40 = fadd float %36, %39
  %41 = or i64 %35, 1
  %42 = getelementptr inbounds float, float* %1, i64 %41
  %43 = load float, float* %42, align 4
  %44 = fadd float %40, %43
  %45 = or i64 %35, 2
  %46 = getelementptr inbounds float, float* %1, i64 %45
  %47 = load float, float* %46, align 4
  %48 = fadd float %44, %47
  %49 = or i64 %35, 3
  %50 = getelementptr inbounds float, float* %1, i64 %49
  %51 = load float, float* %50, align 4
  %52 = fadd float %48, %51
  %53 = or i64 %35, 4
  %54 = getelementptr inbounds float, float* %1, i64 %53
  %55 = load float, float* %54, align 4
  %56 = fadd float %52, %55
  %57 = or i64 %35, 5
  %58 = getelementptr inbounds float, float* %1, i64 %57
  %59 = load float, float* %58, align 4
  %60 = fadd float %56, %59
  %61 = or i64 %35, 6
  %62 = getelementptr inbounds float, float* %1, i64 %61
  %63 = load float, float* %62, align 4
  %64 = fadd float %60, %63
  %65 = or i64 %35, 7
  %66 = getelementptr inbounds float, float* %1, i64 %65
  %67 = load float, float* %66, align 4
  %68 = fadd float %64, %67
  %69 = add nuw nsw i64 %35, 8
  %70 = add i64 %37, -8
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %16, label %34

72:                                               ; preds = %31
  %73 = fcmp olt float %0, 0.000000e+00
  br i1 %73, label %74, label %84

74:                                               ; preds = %72
  %75 = fsub float -0.000000e+00, %0
  %76 = fcmp olt float %32, %75
  br i1 %76, label %77, label %79

77:                                               ; preds = %74
  %78 = tail call float @fmodf(float %75, float %32) #9
  br label %79

79:                                               ; preds = %77, %74
  %80 = phi float [ %78, %77 ], [ %75, %74 ]
  %81 = fsub float %32, %80
  %82 = fcmp oeq float %81, %32
  br i1 %82, label %83, label %88

83:                                               ; preds = %79
  br label %88

84:                                               ; preds = %72
  %85 = fcmp ugt float %32, %0
  br i1 %85, label %88, label %86

86:                                               ; preds = %84
  %87 = tail call float @fmodf(float %0, float %32) #9
  br label %88

88:                                               ; preds = %84, %86, %79, %83
  %89 = phi float [ 0.000000e+00, %83 ], [ %81, %79 ], [ %87, %86 ], [ %0, %84 ]
  store float %89, float* %6, align 4
  br label %90

90:                                               ; preds = %31, %88
  %91 = phi float [ %89, %88 ], [ %0, %31 ]
  br i1 %8, label %92, label %111

92:                                               ; preds = %90
  %93 = zext i32 %2 to i64
  br label %94

94:                                               ; preds = %104, %92
  %95 = phi i64 [ 0, %92 ], [ %106, %104 ]
  %96 = phi float [ %91, %92 ], [ %105, %104 ]
  %97 = getelementptr inbounds float, float* %1, i64 %95
  %98 = load float, float* %97, align 4
  %99 = fcmp ogt float %96, %98
  br i1 %99, label %104, label %100

100:                                              ; preds = %94
  %101 = fcmp oeq float %96, %98
  %102 = fcmp une float %98, 0.000000e+00
  %103 = and i1 %101, %102
  br i1 %103, label %104, label %108

104:                                              ; preds = %100, %94
  %105 = fsub float %96, %98
  %106 = add nuw nsw i64 %95, 1
  %107 = icmp eq i64 %106, %93
  br i1 %107, label %111, label %94

108:                                              ; preds = %100
  %109 = trunc i64 %95 to i32
  store i32 %109, i32* %4, align 4
  %110 = fsub float %98, %96
  br label %113

111:                                              ; preds = %104, %90
  store i32 0, i32* %4, align 4
  %112 = load float, float* %1, align 4
  br label %113

113:                                              ; preds = %108, %111
  %114 = phi float [ %112, %111 ], [ %110, %108 ]
  store float %114, float* %3, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare float @fmodf(float, float) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN10SkDashPath14InternalFilterEP6SkPathRKS0_P11SkStrokeRecPK6SkRectPKfififNS_20StrokeRecApplicationE(%class.SkPath*, %class.SkPath* dereferenceable(16), %class.SkStrokeRec*, %struct.SkRect* readonly, float* nocapture readonly, i32, float, i32, float, i32) local_unnamed_addr #3 {
  %11 = alloca [2 x %struct.SkPoint], align 16
  %12 = alloca <4 x float>, align 16
  %13 = bitcast <4 x float>* %12 to %struct.SkRect*
  %14 = alloca [2 x %struct.SkPoint], align 16
  %15 = alloca %"class.SkPath::Iter", align 8
  %16 = alloca [4 x %struct.SkPoint], align 16
  %17 = alloca %struct.SkPoint, align 4
  %18 = alloca %class.SkPath, align 8
  %19 = alloca %class.SkPathMeasure, align 8
  %20 = alloca %class.SpecialLineRec, align 8
  %21 = alloca %class.SkPathMeasure, align 8
  %22 = tail call i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec* %2) #9
  %23 = or i32 %22, 2
  %24 = icmp eq i32 %23, 3
  br i1 %24, label %421, label %25

25:                                               ; preds = %10
  %26 = bitcast %class.SkPath* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #9
  %27 = getelementptr inbounds %class.SkPath, %class.SkPath* %18, i64 0, i32 0, i32 0
  %28 = bitcast %class.SkPath* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %18) #9
  %29 = icmp eq %struct.SkRect* %3, null
  br i1 %29, label %30, label %46

30:                                               ; preds = %25
  %31 = bitcast [2 x %struct.SkPoint]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #9
  %32 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %11, i64 0, i64 0
  %33 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %11, i64 0, i64 0, i32 1
  %34 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %11, i64 0, i64 1, i32 0
  %35 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %11, i64 0, i64 1, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %31, i8 -1, i64 16, i1 false) #9
  %36 = call zeroext i1 @_ZNK6SkPath6isLineEP7SkPoint(%class.SkPath* %1, %struct.SkPoint* nonnull %32) #9
  br i1 %36, label %37, label %152

37:                                               ; preds = %30
  %38 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %11, i64 0, i64 0, i32 0
  %39 = load float, float* %38, align 16
  %40 = load float, float* %34, align 8
  %41 = fcmp oeq float %39, %40
  br i1 %41, label %42, label %152

42:                                               ; preds = %37
  %43 = load float, float* %33, align 4
  %44 = load float, float* %35, align 4
  %45 = fcmp oeq float %43, %44
  br i1 %45, label %153, label %152

46:                                               ; preds = %25
  %47 = bitcast <4 x float>* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %47) #9
  %48 = bitcast %struct.SkRect* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %47, i8* nonnull align 4 %48, i64 16, i1 false) #9
  %49 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %2, i64 0, i32 1
  %50 = load float, float* %49, align 4
  %51 = fmul float %50, 5.000000e-01
  %52 = fcmp oeq float %51, 0.000000e+00
  %53 = select i1 %52, float 1.000000e+00, float %51
  %54 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %2, i64 0, i32 3
  %55 = load i32, i32* %54, align 4
  %56 = lshr i32 %55, 16
  %57 = trunc i32 %56 to i8
  %58 = icmp eq i8 %57, 0
  %59 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %2, i64 0, i32 2
  %60 = load float, float* %59, align 4
  %61 = fmul float %60, %53
  %62 = select i1 %58, float %61, float %53
  %63 = load <4 x float>, <4 x float>* %12, align 16
  %64 = insertelement <4 x float> undef, float %62, i32 0
  %65 = shufflevector <4 x float> %64, <4 x float> undef, <4 x i32> zeroinitializer
  %66 = fsub <4 x float> %63, %65
  %67 = fadd <4 x float> %63, %65
  %68 = shufflevector <4 x float> %66, <4 x float> %67, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x float> %68, <4 x float>* %12, align 16
  %69 = bitcast [2 x %struct.SkPoint]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %69) #9
  %70 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %14, i64 0, i64 0
  %71 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %14, i64 0, i64 0, i32 0
  %72 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %14, i64 0, i64 0, i32 1
  %73 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %14, i64 0, i64 1, i32 0
  %74 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %14, i64 0, i64 1, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %69, i8 -1, i64 16, i1 false) #9
  %75 = call zeroext i1 @_ZNK6SkPath6isLineEP7SkPoint(%class.SkPath* %1, %struct.SkPoint* nonnull %70) #9
  br i1 %75, label %76, label %85

76:                                               ; preds = %46
  %77 = call fastcc zeroext i1 @_ZL9clip_lineP7SkPointRK6SkRectff(%struct.SkPoint* nonnull %70, %struct.SkRect* nonnull dereferenceable(16) %13, float %8, float 0.000000e+00) #9
  br i1 %77, label %78, label %151

78:                                               ; preds = %76
  %79 = load float, float* %71, align 16
  %80 = load float, float* %72, align 4
  %81 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath* nonnull %18, float %79, float %80) #9
  %82 = load float, float* %73, align 8
  %83 = load float, float* %74, align 4
  %84 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath6lineToEff(%class.SkPath* nonnull %18, float %82, float %83) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %69) #9
  br label %162

85:                                               ; preds = %46
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %69) #9
  %86 = call zeroext i1 @_ZNK6SkPath6isRectEP6SkRectPbP15SkPathDirection(%class.SkPath* %1, %struct.SkRect* null, i8* null, i32* null) #9
  br i1 %86, label %88, label %87

87:                                               ; preds = %85
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %47) #9
  br label %252

88:                                               ; preds = %85
  %89 = bitcast %"class.SkPath::Iter"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %89) #9
  %90 = getelementptr inbounds %"class.SkPath::Iter", %"class.SkPath::Iter"* %15, i64 0, i32 4, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %89, i8 -86, i64 32, i1 false) #9
  %91 = getelementptr inbounds %"class.SkPath::Iter", %"class.SkPath::Iter"* %15, i64 0, i32 6
  %92 = bitcast float* %90 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %92, i8 -1, i64 16, i1 false) #9
  %93 = bitcast i8* %91 to i64*
  store i64 -6148914691236517206, i64* %93, align 8
  call void @_ZN6SkPath4IterC1ERKS_b(%"class.SkPath::Iter"* nonnull %15, %class.SkPath* dereferenceable(16) %1, i1 zeroext false) #9
  %94 = bitcast [4 x %struct.SkPoint]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %94) #9
  %95 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %16, i64 0, i64 0
  %96 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %16, i64 0, i64 0, i32 0
  %97 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %16, i64 0, i64 0, i32 1
  %98 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %16, i64 0, i64 1, i32 0
  %99 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %16, i64 0, i64 1, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %94, i8 -1, i64 32, i1 false) #9
  %100 = call i32 @_ZN6SkPath4Iter4nextEP7SkPoint(%"class.SkPath::Iter"* nonnull %15, %struct.SkPoint* nonnull %95) #9
  %101 = call i32 @_ZN6SkPath4Iter4nextEP7SkPoint(%"class.SkPath::Iter"* nonnull %15, %struct.SkPoint* nonnull %95) #9
  %102 = icmp eq i32 %101, 1
  br i1 %102, label %103, label %146

103:                                              ; preds = %88
  %104 = fpext float %8 to double
  %105 = bitcast %struct.SkPoint* %17 to i8*
  %106 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %17, i64 0, i32 0
  %107 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %17, i64 0, i32 1
  br label %108

108:                                              ; preds = %139, %103
  %109 = phi double [ 0.000000e+00, %103 ], [ %143, %139 ]
  %110 = load float, float* %98, align 8
  %111 = load float, float* %96, align 16
  %112 = fsub float %110, %111
  %113 = load float, float* %99, align 4
  %114 = load float, float* %97, align 4
  %115 = fsub float %113, %114
  %116 = call double @fmod(double %109, double %104) #9
  %117 = fptrunc double %116 to float
  %118 = call fastcc zeroext i1 @_ZL9clip_lineP7SkPointRK6SkRectff(%struct.SkPoint* nonnull %95, %struct.SkRect* nonnull dereferenceable(16) %13, float %8, float %117) #9
  br i1 %118, label %119, label %139

119:                                              ; preds = %108
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %105) #9
  store float 0xFFFFFFFFE0000000, float* %106, align 4
  store float 0xFFFFFFFFE0000000, float* %107, align 4
  %120 = call zeroext i1 @_ZNK6SkPath9getLastPtEP7SkPoint(%class.SkPath* nonnull %18, %struct.SkPoint* nonnull %17) #9
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = load float, float* %96, align 16
  br label %131

123:                                              ; preds = %119
  %124 = load float, float* %106, align 4
  %125 = load float, float* %96, align 16
  %126 = fcmp une float %124, %125
  br i1 %126, label %131, label %127

127:                                              ; preds = %123
  %128 = load float, float* %107, align 4
  %129 = load float, float* %97, align 4
  %130 = fcmp une float %128, %129
  br i1 %130, label %131, label %135

131:                                              ; preds = %127, %123, %121
  %132 = phi float [ %122, %121 ], [ %125, %123 ], [ %125, %127 ]
  %133 = load float, float* %97, align 4
  %134 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath* nonnull %18, float %132, float %133) #9
  br label %135

135:                                              ; preds = %131, %127
  %136 = load float, float* %98, align 8
  %137 = load float, float* %99, align 4
  %138 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath6lineToEff(%class.SkPath* nonnull %18, float %136, float %137) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %105) #9
  br label %139

139:                                              ; preds = %135, %108
  %140 = fadd float %112, %115
  %141 = call float @llvm.fabs.f32(float %140) #9
  %142 = fpext float %141 to double
  %143 = fadd double %109, %142
  %144 = call i32 @_ZN6SkPath4Iter4nextEP7SkPoint(%"class.SkPath::Iter"* nonnull %15, %struct.SkPoint* nonnull %95) #9
  %145 = icmp eq i32 %144, 1
  br i1 %145, label %108, label %146

146:                                              ; preds = %139, %88
  %147 = load %class.SkPathRef*, %class.SkPathRef** %27, align 8
  %148 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %147, i64 0, i32 4, i32 2
  %149 = load i32, i32* %148, align 4
  %150 = icmp eq i32 %149, 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %94) #9
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %89) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %47) #9
  br i1 %150, label %252, label %164

151:                                              ; preds = %76
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %69) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %47) #9
  br label %252

152:                                              ; preds = %42, %30, %37
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #9
  br label %252

153:                                              ; preds = %42
  %154 = fcmp ogt float %40, 0x3FF00418A0000000
  %155 = select i1 %154, float %40, float 0x3FF00418A0000000
  %156 = fmul float %155, 0x3F30000000000000
  %157 = fadd float %40, %156
  store float %157, float* %34, align 8
  %158 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath* nonnull %18, float %39, float %43) #9
  %159 = load float, float* %34, align 8
  %160 = load float, float* %35, align 4
  %161 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath6lineToEff(%class.SkPath* nonnull %18, float %159, float %160) #9
  br label %162

162:                                              ; preds = %153, %78
  %163 = phi i8* [ %47, %78 ], [ %31, %153 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %163) #9
  br label %164

164:                                              ; preds = %162, %146
  %165 = call zeroext i1 @_ZNK6SkPath6isRectEP6SkRectPbP15SkPathDirection(%class.SkPath* %1, %struct.SkRect* null, i8* null, i32* null) #9
  br i1 %165, label %166, label %252

166:                                              ; preds = %164
  %167 = call zeroext i1 @_ZNK6SkPath19isLastContourClosedEv(%class.SkPath* %1) #9
  %168 = and i32 %7, 1
  %169 = icmp eq i32 %168, 0
  %170 = and i1 %169, %167
  br i1 %170, label %171, label %252

171:                                              ; preds = %166
  %172 = bitcast %class.SkPathMeasure* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %172) #9
  %173 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %2, i64 0, i32 0
  %174 = load float, float* %173, align 4
  call void @_ZN13SkPathMeasureC1ERK6SkPathbf(%class.SkPathMeasure* nonnull %19, %class.SkPath* dereferenceable(16) %1, i1 zeroext false, float %174) #9
  %175 = call float @_ZN13SkPathMeasure9getLengthEv(%class.SkPathMeasure* nonnull %19) #9
  call void @_ZN13SkPathMeasureD1Ev(%class.SkPathMeasure* nonnull %19) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %172) #9
  %176 = fadd float %175, %6
  %177 = call float @fmodf(float %176, float %8) #9
  %178 = zext i32 %5 to i64
  br label %179

179:                                              ; preds = %186, %171
  %180 = phi i64 [ %187, %186 ], [ 0, %171 ]
  %181 = phi float [ %189, %186 ], [ %177, %171 ]
  %182 = phi i32 [ %188, %186 ], [ 0, %171 ]
  %183 = getelementptr inbounds float, float* %4, i64 %180
  %184 = load float, float* %183, align 4
  %185 = fcmp ogt float %181, %184
  br i1 %185, label %186, label %191

186:                                              ; preds = %179
  %187 = add nuw nsw i64 %180, 1
  %188 = add nuw nsw i32 %182, 1
  %189 = fsub float %181, %184
  %190 = icmp eq i64 %187, %178
  br i1 %190, label %193, label %179

191:                                              ; preds = %179
  %192 = trunc i64 %180 to i32
  br label %193

193:                                              ; preds = %186, %191
  %194 = phi float [ %181, %191 ], [ 0.000000e+00, %186 ]
  %195 = phi i32 [ %192, %191 ], [ %188, %186 ]
  %196 = and i32 %195, 1
  %197 = xor i32 %196, 1
  %198 = fcmp ogt float %194, 0.000000e+00
  %199 = zext i1 %198 to i32
  %200 = icmp eq i32 %197, %199
  br i1 %200, label %201, label %252

201:                                              ; preds = %193
  %202 = call <2 x float> @_ZNK6SkPath8getPointEi(%class.SkPath* %1, i32 0) #9
  %203 = call i32 @_ZNK6SkPath11countPointsEv(%class.SkPath* %1) #9
  %204 = extractelement <2 x float> %202, i32 1
  %205 = extractelement <2 x float> %202, i32 0
  br label %206

206:                                              ; preds = %206, %201
  %207 = phi i32 [ %203, %201 ], [ %208, %206 ]
  %208 = add nsw i32 %207, -1
  %209 = call <2 x float> @_ZNK6SkPath8getPointEi(%class.SkPath* %1, i32 %208) #9
  %210 = extractelement <2 x float> %209, i32 0
  %211 = fcmp oeq float %205, %210
  %212 = extractelement <2 x float> %209, i32 1
  %213 = fcmp oeq float %204, %212
  %214 = and i1 %211, %213
  br i1 %214, label %206, label %215

215:                                              ; preds = %206
  %216 = call <2 x float> @_ZNK6SkPath8getPointEi(%class.SkPath* %1, i32 1) #9
  %217 = extractelement <2 x float> %216, i32 0
  %218 = fcmp oeq float %205, %217
  br i1 %218, label %219, label %229

219:                                              ; preds = %215, %224
  %220 = phi <2 x float> [ %226, %224 ], [ %216, %215 ]
  %221 = phi i32 [ %225, %224 ], [ 1, %215 ]
  %222 = extractelement <2 x float> %220, i32 1
  %223 = fcmp oeq float %204, %222
  br i1 %223, label %224, label %229

224:                                              ; preds = %219
  %225 = add nuw nsw i32 %221, 1
  %226 = call <2 x float> @_ZNK6SkPath8getPointEi(%class.SkPath* %1, i32 %225) #9
  %227 = extractelement <2 x float> %226, i32 0
  %228 = fcmp oeq float %205, %227
  br i1 %228, label %219, label %229

229:                                              ; preds = %219, %224, %215
  %230 = phi i32 [ 1, %215 ], [ %225, %224 ], [ %221, %219 ]
  %231 = call <2 x float> @_ZNK6SkPath8getPointEi(%class.SkPath* %1, i32 %208) #9
  %232 = extractelement <2 x float> %231, i32 0
  %233 = fsub float %205, %232
  %234 = extractelement <2 x float> %231, i32 1
  %235 = fsub float %204, %234
  %236 = fmul float %233, 0x3F30000000000000
  %237 = fmul float %235, 0x3F30000000000000
  %238 = fsub float %205, %236
  %239 = fsub float %204, %237
  %240 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath* nonnull %18, float %238, float %239) #9
  %241 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath6lineToEff(%class.SkPath* nonnull %18, float %205, float %204) #9
  %242 = call <2 x float> @_ZNK6SkPath8getPointEi(%class.SkPath* %1, i32 %230) #9
  %243 = extractelement <2 x float> %242, i32 0
  %244 = fsub float %205, %243
  %245 = extractelement <2 x float> %242, i32 1
  %246 = fsub float %204, %245
  %247 = fmul float %244, 0x3F30000000000000
  %248 = fmul float %246, 0x3F30000000000000
  %249 = fsub float %205, %247
  %250 = fsub float %204, %248
  %251 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath6lineToEff(%class.SkPath* nonnull %18, float %249, float %250) #9
  br label %252

252:                                              ; preds = %146, %151, %87, %152, %164, %166, %229, %193
  %253 = phi %class.SkPath* [ %18, %193 ], [ %18, %229 ], [ %18, %166 ], [ %18, %164 ], [ %1, %151 ], [ %1, %152 ], [ %1, %87 ], [ %1, %146 ]
  %254 = bitcast %class.SpecialLineRec* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %254) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %254, i8 -1, i64 36, i1 false)
  %255 = icmp eq i32 %9, 1
  %256 = ashr i32 %5, 1
  br i1 %255, label %257, label %259

257:                                              ; preds = %252
  %258 = call zeroext i1 @_ZN14SpecialLineRec4initERK6SkPathPS0_P11SkStrokeRecif(%class.SpecialLineRec* nonnull %20, %class.SkPath* dereferenceable(16) %253, %class.SkPath* %0, %class.SkStrokeRec* %2, i32 %256, float %8)
  br label %259

259:                                              ; preds = %252, %257
  %260 = phi i1 [ %258, %257 ], [ false, %252 ]
  %261 = bitcast %class.SkPathMeasure* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %261) #9
  %262 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %2, i64 0, i32 0
  %263 = bitcast %class.SkPathMeasure* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %263, i8 -86, i64 16, i1 false)
  %264 = load float, float* %262, align 4
  call void @_ZN13SkPathMeasureC1ERK6SkPathbf(%class.SkPathMeasure* nonnull %21, %class.SkPath* dereferenceable(16) %253, i1 zeroext false, float %264) #9
  %265 = sitofp i32 %256 to float
  %266 = getelementptr inbounds %class.SpecialLineRec, %class.SpecialLineRec* %20, i64 0, i32 3
  %267 = getelementptr inbounds %class.SpecialLineRec, %class.SpecialLineRec* %20, i64 0, i32 1, i32 0
  %268 = bitcast [4 x %struct.SkPoint]* %16 to i8*
  %269 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %16, i64 0, i64 0
  %270 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %16, i64 0, i64 2, i32 0
  %271 = getelementptr inbounds %class.SpecialLineRec, %class.SpecialLineRec* %20, i64 0, i32 2, i32 0
  %272 = and i32 %7, 1
  %273 = icmp ne i32 %272, 0
  %274 = fcmp ult float %6, 0.000000e+00
  %275 = or i1 %273, %274
  %276 = fpext float %6 to double
  %277 = and i32 %7, 1
  %278 = icmp ne i32 %277, 0
  %279 = fadd double %276, 0.000000e+00
  %280 = fptrunc double %279 to float
  %281 = bitcast %class.SpecialLineRec* %20 to <2 x float>*
  %282 = bitcast float* %267 to <2 x float>*
  %283 = bitcast float* %271 to <2 x float>*
  %284 = bitcast [4 x %struct.SkPoint]* %16 to <4 x float>*
  %285 = bitcast float* %270 to <4 x float>*
  %286 = fadd double %276, 0.000000e+00
  %287 = add nsw i32 %7, 1
  %288 = icmp eq i32 %287, %5
  %289 = select i1 %288, i32 0, i32 %287
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds float, float* %4, i64 %290
  %292 = bitcast %class.SpecialLineRec* %20 to <2 x float>*
  %293 = bitcast float* %267 to <2 x float>*
  %294 = bitcast float* %271 to <2 x float>*
  %295 = bitcast [4 x %struct.SkPoint]* %16 to <4 x float>*
  %296 = bitcast float* %270 to <4 x float>*
  br label %297

297:                                              ; preds = %413, %259
  %298 = phi float [ 0.000000e+00, %259 ], [ %304, %413 ]
  %299 = phi i32 [ 0, %259 ], [ %414, %413 ]
  %300 = call zeroext i1 @_ZN13SkPathMeasure8isClosedEv(%class.SkPathMeasure* nonnull %21) #9
  %301 = call float @_ZN13SkPathMeasure9getLengthEv(%class.SkPathMeasure* nonnull %21) #9
  %302 = fmul float %301, %265
  %303 = fdiv float %302, %8
  %304 = fadd float %298, %303
  %305 = fcmp ogt float %304, 1.000000e+06
  br i1 %305, label %411, label %306

306:                                              ; preds = %297
  %307 = fpext float %301 to double
  %308 = fcmp ogt float %301, 0.000000e+00
  br i1 %308, label %309, label %401

309:                                              ; preds = %306
  %310 = or i1 %300, %278
  br i1 %310, label %340, label %311

311:                                              ; preds = %309
  %312 = add nsw i32 %299, 1
  br i1 %260, label %315, label %313

313:                                              ; preds = %311
  %314 = call zeroext i1 @_ZN13SkPathMeasure10getSegmentEffP6SkPathb(%class.SkPathMeasure* nonnull %21, float 0.000000e+00, float %280, %class.SkPath* %0, i1 zeroext true) #9
  br label %340

315:                                              ; preds = %311
  %316 = load float, float* %266, align 8
  %317 = fcmp olt float %316, %280
  %318 = select i1 %317, float %316, float %280
  %319 = load <2 x float>, <2 x float>* %281, align 8
  %320 = shufflevector <2 x float> %319, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %321 = load <2 x float>, <2 x float>* %282, align 8
  %322 = shufflevector <2 x float> %321, <2 x float> undef, <4 x i32> <i32 undef, i32 1, i32 undef, i32 undef>
  %323 = extractelement <2 x float> %321, i32 0
  %324 = insertelement <4 x float> undef, float %323, i32 0
  %325 = extractelement <2 x float> %321, i32 1
  %326 = insertelement <4 x float> %324, float %325, i32 1
  %327 = insertelement <4 x float> %326, float %323, i32 2
  %328 = insertelement <4 x float> %327, float %318, i32 3
  %329 = insertelement <4 x float> <float 0.000000e+00, float 0.000000e+00, float undef, float undef>, float %318, i32 2
  %330 = shufflevector <4 x float> %329, <4 x float> %322, <4 x i32> <i32 0, i32 1, i32 2, i32 5>
  %331 = fmul <4 x float> %328, %330
  %332 = fadd <4 x float> %320, %331
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %268) #9
  %333 = load <2 x float>, <2 x float>* %283, align 8
  %334 = shufflevector <2 x float> %333, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %335 = fadd <4 x float> %332, %334
  store <4 x float> %335, <4 x float>* %284, align 16
  %336 = shufflevector <4 x float> %332, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %337 = shufflevector <2 x float> %333, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %338 = fsub <4 x float> %336, %337
  store <4 x float> %338, <4 x float>* %285, align 16
  %339 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath7addPolyEPK7SkPointib(%class.SkPath* %0, %struct.SkPoint* nonnull %269, i32 4, i1 zeroext false) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %268) #9
  br label %340

340:                                              ; preds = %309, %315, %313
  %341 = phi double [ %279, %315 ], [ %279, %313 ], [ %286, %309 ]
  %342 = phi i32 [ %312, %315 ], [ %312, %313 ], [ %299, %309 ]
  %343 = phi i1 [ true, %315 ], [ true, %313 ], [ false, %309 ]
  %344 = load float, float* %291, align 4
  %345 = fcmp olt double %341, %307
  br i1 %345, label %346, label %401

346:                                              ; preds = %340, %390
  %347 = phi float [ %399, %390 ], [ %344, %340 ]
  %348 = phi double [ %391, %390 ], [ %341, %340 ]
  %349 = phi i32 [ %396, %390 ], [ %289, %340 ]
  %350 = phi i32 [ %392, %390 ], [ %342, %340 ]
  %351 = fpext float %347 to double
  %352 = and i32 %349, 1
  %353 = icmp eq i32 %352, 0
  br i1 %353, label %356, label %354

354:                                              ; preds = %346
  %355 = fadd double %348, %351
  br label %390

356:                                              ; preds = %346
  %357 = add nsw i32 %350, 1
  %358 = fptrunc double %348 to float
  %359 = fadd double %348, %351
  %360 = fptrunc double %359 to float
  br i1 %260, label %361, label %388

361:                                              ; preds = %356
  %362 = load float, float* %266, align 8
  %363 = fcmp olt float %362, %360
  %364 = select i1 %363, float %362, float %360
  %365 = load <2 x float>, <2 x float>* %292, align 8
  %366 = shufflevector <2 x float> %365, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %367 = load <2 x float>, <2 x float>* %293, align 8
  %368 = shufflevector <2 x float> %367, <2 x float> undef, <4 x i32> <i32 undef, i32 1, i32 undef, i32 undef>
  %369 = extractelement <2 x float> %367, i32 0
  %370 = insertelement <4 x float> undef, float %369, i32 0
  %371 = extractelement <2 x float> %367, i32 1
  %372 = insertelement <4 x float> %370, float %371, i32 1
  %373 = insertelement <4 x float> %372, float %369, i32 2
  %374 = insertelement <4 x float> %373, float %364, i32 3
  %375 = insertelement <4 x float> undef, float %358, i32 0
  %376 = insertelement <4 x float> %375, float %358, i32 1
  %377 = insertelement <4 x float> %376, float %364, i32 2
  %378 = shufflevector <4 x float> %377, <4 x float> %368, <4 x i32> <i32 0, i32 1, i32 2, i32 5>
  %379 = fmul <4 x float> %374, %378
  %380 = fadd <4 x float> %366, %379
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %268) #9
  %381 = load <2 x float>, <2 x float>* %294, align 8
  %382 = shufflevector <2 x float> %381, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %383 = fadd <4 x float> %380, %382
  store <4 x float> %383, <4 x float>* %295, align 16
  %384 = shufflevector <4 x float> %380, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %385 = shufflevector <2 x float> %381, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %386 = fsub <4 x float> %384, %385
  store <4 x float> %386, <4 x float>* %296, align 16
  %387 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath7addPolyEPK7SkPointib(%class.SkPath* %0, %struct.SkPoint* nonnull %269, i32 4, i1 zeroext false) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %268) #9
  br label %390

388:                                              ; preds = %356
  %389 = call zeroext i1 @_ZN13SkPathMeasure10getSegmentEffP6SkPathb(%class.SkPathMeasure* nonnull %21, float %358, float %360, %class.SkPath* %0, i1 zeroext true) #9
  br label %390

390:                                              ; preds = %354, %361, %388
  %391 = phi double [ %355, %354 ], [ %359, %361 ], [ %359, %388 ]
  %392 = phi i32 [ %350, %354 ], [ %357, %361 ], [ %357, %388 ]
  %393 = phi i1 [ false, %354 ], [ true, %361 ], [ true, %388 ]
  %394 = add nsw i32 %349, 1
  %395 = icmp eq i32 %394, %5
  %396 = select i1 %395, i32 0, i32 %394
  %397 = sext i32 %396 to i64
  %398 = getelementptr inbounds float, float* %4, i64 %397
  %399 = load float, float* %398, align 4
  %400 = fcmp olt double %391, %307
  br i1 %400, label %346, label %401, !llvm.loop !4

401:                                              ; preds = %340, %390, %306
  %402 = phi i32 [ %299, %306 ], [ %342, %340 ], [ %392, %390 ]
  %403 = phi i1 [ false, %306 ], [ %343, %340 ], [ %393, %390 ]
  %404 = call zeroext i1 @_ZN13SkPathMeasure8isClosedEv(%class.SkPathMeasure* nonnull %21) #9
  %405 = xor i1 %404, true
  %406 = or i1 %275, %405
  br i1 %406, label %413, label %407

407:                                              ; preds = %401
  %408 = xor i1 %403, true
  %409 = call zeroext i1 @_ZN13SkPathMeasure10getSegmentEffP6SkPathb(%class.SkPathMeasure* nonnull %21, float 0.000000e+00, float %6, %class.SkPath* %0, i1 zeroext %408) #9
  %410 = add nsw i32 %402, 1
  br label %413

411:                                              ; preds = %297
  %412 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath* %0) #9
  br label %419

413:                                              ; preds = %401, %407
  %414 = phi i32 [ %402, %401 ], [ %410, %407 ]
  %415 = call zeroext i1 @_ZN13SkPathMeasure11nextContourEv(%class.SkPathMeasure* nonnull %21) #9
  br i1 %415, label %297, label %416

416:                                              ; preds = %413
  %417 = icmp sgt i32 %414, 1
  br i1 %417, label %418, label %419

418:                                              ; preds = %416
  call void @_ZNK6SkPath12setConvexityE15SkPathConvexity(%class.SkPath* %0, i32 1) #9
  br label %419

419:                                              ; preds = %411, %416, %418
  %420 = phi i1 [ false, %411 ], [ true, %418 ], [ true, %416 ]
  call void @_ZN13SkPathMeasureD1Ev(%class.SkPathMeasure* nonnull %21) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %261) #9
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %254) #9
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %18) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #9
  br label %421

421:                                              ; preds = %10, %419
  %422 = phi i1 [ %420, %419 ], [ false, %10 ]
  ret i1 %422
}

declare i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec*) local_unnamed_addr #4

declare void @_ZN6SkPathC1Ev(%class.SkPath*) unnamed_addr #4

declare zeroext i1 @_ZNK6SkPath6isRectEP6SkRectPbP15SkPathDirection(%class.SkPath*, %struct.SkRect*, i8*, i32*) local_unnamed_addr #4

declare zeroext i1 @_ZNK6SkPath19isLastContourClosedEv(%class.SkPath*) local_unnamed_addr #4

declare void @_ZN13SkPathMeasureC1ERK6SkPathbf(%class.SkPathMeasure*, %class.SkPath* dereferenceable(16), i1 zeroext, float) unnamed_addr #4

declare float @_ZN13SkPathMeasure9getLengthEv(%class.SkPathMeasure*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN13SkPathMeasureD1Ev(%class.SkPathMeasure*) unnamed_addr #5

declare <2 x float> @_ZNK6SkPath8getPointEi(%class.SkPath*, i32) local_unnamed_addr #4

declare i32 @_ZNK6SkPath11countPointsEv(%class.SkPath*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN14SpecialLineRec4initERK6SkPathPS0_P11SkStrokeRecif(%class.SpecialLineRec*, %class.SkPath* dereferenceable(16), %class.SkPath*, %class.SkStrokeRec*, i32, float) local_unnamed_addr #3 comdat align 2 {
  %7 = tail call i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec* %3) #9
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %68, label %9

9:                                                ; preds = %6
  %10 = getelementptr inbounds %class.SpecialLineRec, %class.SpecialLineRec* %0, i64 0, i32 0, i64 0
  %11 = tail call zeroext i1 @_ZNK6SkPath6isLineEP7SkPoint(%class.SkPath* %1, %struct.SkPoint* %10) #9
  br i1 %11, label %12, label %68

12:                                               ; preds = %9
  %13 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %3, i64 0, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, 65535
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %68

17:                                               ; preds = %12
  %18 = getelementptr inbounds %class.SpecialLineRec, %class.SpecialLineRec* %0, i64 0, i32 0, i64 0, i32 0
  %19 = load float, float* %18, align 4
  %20 = getelementptr inbounds %class.SpecialLineRec, %class.SpecialLineRec* %0, i64 0, i32 0, i64 1, i32 0
  %21 = load float, float* %20, align 4
  %22 = fsub float %19, %21
  %23 = getelementptr inbounds %class.SpecialLineRec, %class.SpecialLineRec* %0, i64 0, i32 0, i64 0, i32 1
  %24 = load float, float* %23, align 4
  %25 = getelementptr inbounds %class.SpecialLineRec, %class.SpecialLineRec* %0, i64 0, i32 0, i64 1, i32 1
  %26 = load float, float* %25, align 4
  %27 = fsub float %24, %26
  %28 = tail call float @_ZN7SkPoint6LengthEff(float %22, float %27) #9
  %29 = bitcast float* %20 to <2 x float>*
  %30 = load <2 x float>, <2 x float>* %29, align 4
  %31 = bitcast %class.SpecialLineRec* %0 to <2 x float>*
  %32 = load <2 x float>, <2 x float>* %31, align 4
  %33 = fsub <2 x float> %30, %32
  %34 = extractelement <2 x float> %33, i32 0
  %35 = extractelement <2 x float> %33, i32 1
  %36 = getelementptr inbounds %class.SpecialLineRec, %class.SpecialLineRec* %0, i64 0, i32 1
  %37 = bitcast %struct.SkPoint* %36 to <2 x float>*
  store <2 x float> %33, <2 x float>* %37, align 4
  %38 = fcmp oeq float %34, 0.000000e+00
  %39 = fcmp oeq float %35, 0.000000e+00
  %40 = and i1 %38, %39
  br i1 %40, label %68, label %41

41:                                               ; preds = %17
  %42 = getelementptr inbounds %class.SpecialLineRec, %class.SpecialLineRec* %0, i64 0, i32 1, i32 1
  %43 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %36, i64 0, i32 0
  %44 = getelementptr inbounds %class.SpecialLineRec, %class.SpecialLineRec* %0, i64 0, i32 3
  store float %28, float* %44, align 4
  %45 = fdiv float 1.000000e+00, %28
  tail call void @_ZNK7SkPoint5scaleEfPS_(%struct.SkPoint* %36, float %45, %struct.SkPoint* %36) #9
  %46 = getelementptr inbounds %class.SpecialLineRec, %class.SpecialLineRec* %0, i64 0, i32 2
  %47 = load float, float* %43, align 4
  %48 = bitcast float* %42 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = bitcast %struct.SkPoint* %46 to i32*
  store i32 %49, i32* %50, align 4
  %51 = fsub float -0.000000e+00, %47
  %52 = getelementptr inbounds %class.SpecialLineRec, %class.SpecialLineRec* %0, i64 0, i32 2, i32 1
  store float %51, float* %52, align 4
  %53 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %3, i64 0, i32 1
  %54 = load float, float* %53, align 4
  %55 = fmul float %54, 5.000000e-01
  tail call void @_ZNK7SkPoint5scaleEfPS_(%struct.SkPoint* %46, float %55, %struct.SkPoint* %46) #9
  %56 = sitofp i32 %4 to float
  %57 = fmul float %28, %56
  %58 = fdiv float %57, %5
  %59 = fcmp ogt float %58, 1.000000e+06
  %60 = select i1 %59, float 1.000000e+06, float %58
  %61 = tail call float @llvm.ceil.f32(float %60)
  %62 = fcmp olt float %61, 0x41DFFFFFE0000000
  %63 = select i1 %62, float %61, float 0x41DFFFFFE0000000
  %64 = fcmp ogt float %63, 0xC1DFFFFFE0000000
  %65 = select i1 %64, float %63, float 0xC1DFFFFFE0000000
  %66 = fptosi float %65 to i32
  %67 = shl i32 %66, 2
  tail call void @_ZN6SkPath10incReserveEi(%class.SkPath* %2, i32 %67) #9
  tail call void @_ZN11SkStrokeRec12setFillStyleEv(%class.SkStrokeRec* %3) #9
  br label %68

68:                                               ; preds = %41, %17, %12, %6, %9
  %69 = phi i1 [ false, %9 ], [ false, %6 ], [ false, %12 ], [ true, %41 ], [ false, %17 ]
  ret i1 %69
}

declare zeroext i1 @_ZN13SkPathMeasure8isClosedEv(%class.SkPathMeasure*) local_unnamed_addr #4

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath*) local_unnamed_addr #4

declare zeroext i1 @_ZN13SkPathMeasure10getSegmentEffP6SkPathb(%class.SkPathMeasure*, float, float, %class.SkPath*, i1 zeroext) local_unnamed_addr #4

declare zeroext i1 @_ZN13SkPathMeasure11nextContourEv(%class.SkPathMeasure*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN6SkPathD1Ev(%class.SkPath*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN10SkDashPath14FilterDashPathEP6SkPathRKS0_P11SkStrokeRecPK6SkRectRKN12SkPathEffect8DashInfoE(%class.SkPath*, %class.SkPath* dereferenceable(16), %class.SkStrokeRec*, %struct.SkRect* readonly, %"struct.SkPathEffect::DashInfo"* nocapture readonly dereferenceable(16)) local_unnamed_addr #6 {
  %6 = getelementptr inbounds %"struct.SkPathEffect::DashInfo", %"struct.SkPathEffect::DashInfo"* %4, i64 0, i32 2
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %"struct.SkPathEffect::DashInfo", %"struct.SkPathEffect::DashInfo"* %4, i64 0, i32 0
  %9 = load float*, float** %8, align 8
  %10 = getelementptr inbounds %"struct.SkPathEffect::DashInfo", %"struct.SkPathEffect::DashInfo"* %4, i64 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp sgt i32 %11, 1
  %13 = and i32 %11, 1
  %14 = icmp eq i32 %13, 0
  %15 = and i1 %12, %14
  br i1 %15, label %16, label %126

16:                                               ; preds = %5
  %17 = zext i32 %11 to i64
  br label %18

18:                                               ; preds = %24, %16
  %19 = phi i64 [ 0, %16 ], [ %26, %24 ]
  %20 = phi float [ 0.000000e+00, %16 ], [ %25, %24 ]
  %21 = getelementptr inbounds float, float* %9, i64 %19
  %22 = load float, float* %21, align 4
  %23 = fcmp olt float %22, 0.000000e+00
  br i1 %23, label %126, label %24

24:                                               ; preds = %18
  %25 = fadd float %20, %22
  %26 = add nuw nsw i64 %19, 1
  %27 = icmp eq i64 %26, %17
  br i1 %27, label %28, label %18

28:                                               ; preds = %24
  %29 = fcmp ogt float %25, 0.000000e+00
  br i1 %29, label %30, label %126

30:                                               ; preds = %28
  %31 = bitcast float %7 to i32
  %32 = and i32 %31, 2139095040
  %33 = icmp eq i32 %32, 2139095040
  br i1 %33, label %126, label %34

34:                                               ; preds = %30
  %35 = bitcast float %25 to i32
  %36 = and i32 %35, 2139095040
  %37 = icmp eq i32 %36, 2139095040
  br i1 %37, label %126, label %38

38:                                               ; preds = %34
  %39 = icmp sgt i32 %11, 0
  br i1 %39, label %40, label %118

40:                                               ; preds = %38
  %41 = add nsw i64 %17, -1
  %42 = and i64 %17, 7
  %43 = icmp ult i64 %41, 7
  br i1 %43, label %84, label %44

44:                                               ; preds = %40
  %45 = sub nsw i64 %17, %42
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i64 [ 0, %44 ], [ %81, %46 ]
  %48 = phi float [ 0.000000e+00, %44 ], [ %80, %46 ]
  %49 = phi i64 [ %45, %44 ], [ %82, %46 ]
  %50 = getelementptr inbounds float, float* %9, i64 %47
  %51 = load float, float* %50, align 4
  %52 = fadd float %48, %51
  %53 = or i64 %47, 1
  %54 = getelementptr inbounds float, float* %9, i64 %53
  %55 = load float, float* %54, align 4
  %56 = fadd float %52, %55
  %57 = or i64 %47, 2
  %58 = getelementptr inbounds float, float* %9, i64 %57
  %59 = load float, float* %58, align 4
  %60 = fadd float %56, %59
  %61 = or i64 %47, 3
  %62 = getelementptr inbounds float, float* %9, i64 %61
  %63 = load float, float* %62, align 4
  %64 = fadd float %60, %63
  %65 = or i64 %47, 4
  %66 = getelementptr inbounds float, float* %9, i64 %65
  %67 = load float, float* %66, align 4
  %68 = fadd float %64, %67
  %69 = or i64 %47, 5
  %70 = getelementptr inbounds float, float* %9, i64 %69
  %71 = load float, float* %70, align 4
  %72 = fadd float %68, %71
  %73 = or i64 %47, 6
  %74 = getelementptr inbounds float, float* %9, i64 %73
  %75 = load float, float* %74, align 4
  %76 = fadd float %72, %75
  %77 = or i64 %47, 7
  %78 = getelementptr inbounds float, float* %9, i64 %77
  %79 = load float, float* %78, align 4
  %80 = fadd float %76, %79
  %81 = add nuw nsw i64 %47, 8
  %82 = add i64 %49, -8
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %84, label %46

84:                                               ; preds = %46, %40
  %85 = phi float [ undef, %40 ], [ %80, %46 ]
  %86 = phi i64 [ 0, %40 ], [ %81, %46 ]
  %87 = phi float [ 0.000000e+00, %40 ], [ %80, %46 ]
  %88 = icmp eq i64 %42, 0
  br i1 %88, label %99, label %89

89:                                               ; preds = %84, %89
  %90 = phi i64 [ %96, %89 ], [ %86, %84 ]
  %91 = phi float [ %95, %89 ], [ %87, %84 ]
  %92 = phi i64 [ %97, %89 ], [ %42, %84 ]
  %93 = getelementptr inbounds float, float* %9, i64 %90
  %94 = load float, float* %93, align 4
  %95 = fadd float %91, %94
  %96 = add nuw nsw i64 %90, 1
  %97 = add i64 %92, -1
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %89, !llvm.loop !5

99:                                               ; preds = %89, %84
  %100 = phi float [ %85, %84 ], [ %95, %89 ]
  br label %101

101:                                              ; preds = %99, %111
  %102 = phi i64 [ %113, %111 ], [ 0, %99 ]
  %103 = phi float [ %112, %111 ], [ %7, %99 ]
  %104 = getelementptr inbounds float, float* %9, i64 %102
  %105 = load float, float* %104, align 4
  %106 = fcmp ogt float %103, %105
  br i1 %106, label %111, label %107

107:                                              ; preds = %101
  %108 = fcmp oeq float %103, %105
  %109 = fcmp une float %105, 0.000000e+00
  %110 = and i1 %108, %109
  br i1 %110, label %111, label %115

111:                                              ; preds = %107, %101
  %112 = fsub float %103, %105
  %113 = add nuw nsw i64 %102, 1
  %114 = icmp eq i64 %113, %17
  br i1 %114, label %118, label %101

115:                                              ; preds = %107
  %116 = trunc i64 %102 to i32
  %117 = fsub float %105, %103
  br label %121

118:                                              ; preds = %111, %38
  %119 = phi float [ 0.000000e+00, %38 ], [ %100, %111 ]
  %120 = load float, float* %9, align 4
  br label %121

121:                                              ; preds = %115, %118
  %122 = phi float [ %119, %118 ], [ %100, %115 ]
  %123 = phi i32 [ 0, %118 ], [ %116, %115 ]
  %124 = phi float [ %120, %118 ], [ %117, %115 ]
  %125 = tail call zeroext i1 @_ZN10SkDashPath14InternalFilterEP6SkPathRKS0_P11SkStrokeRecPK6SkRectPKfififNS_20StrokeRecApplicationE(%class.SkPath* %0, %class.SkPath* dereferenceable(16) %1, %class.SkStrokeRec* %2, %struct.SkRect* %3, float* %9, i32 %11, float %124, i32 %123, float %122, i32 1)
  br label %126

126:                                              ; preds = %18, %34, %28, %30, %5, %121
  %127 = phi i1 [ %125, %121 ], [ false, %34 ], [ false, %5 ], [ false, %30 ], [ false, %28 ], [ false, %18 ]
  ret i1 %127
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN10SkDashPath13ValidDashPathEfPKfi(float, float* nocapture readonly, i32) local_unnamed_addr #7 {
  %4 = icmp sgt i32 %2, 1
  %5 = and i32 %2, 1
  %6 = icmp eq i32 %5, 0
  %7 = and i1 %4, %6
  br i1 %7, label %8, label %30

8:                                                ; preds = %3
  %9 = zext i32 %2 to i64
  br label %10

10:                                               ; preds = %16, %8
  %11 = phi i64 [ 0, %8 ], [ %18, %16 ]
  %12 = phi float [ 0.000000e+00, %8 ], [ %17, %16 ]
  %13 = getelementptr inbounds float, float* %1, i64 %11
  %14 = load float, float* %13, align 4
  %15 = fcmp olt float %14, 0.000000e+00
  br i1 %15, label %30, label %16

16:                                               ; preds = %10
  %17 = fadd float %12, %14
  %18 = add nuw nsw i64 %11, 1
  %19 = icmp eq i64 %18, %9
  br i1 %19, label %20, label %10

20:                                               ; preds = %16
  %21 = fcmp ogt float %17, 0.000000e+00
  br i1 %21, label %22, label %30

22:                                               ; preds = %20
  %23 = bitcast float %0 to i32
  %24 = and i32 %23, 2139095040
  %25 = icmp eq i32 %24, 2139095040
  br i1 %25, label %30, label %26

26:                                               ; preds = %22
  %27 = bitcast float %17 to i32
  %28 = and i32 %27, 2139095040
  %29 = icmp ne i32 %28, 2139095040
  br label %30

30:                                               ; preds = %10, %22, %3, %26, %20
  %31 = phi i1 [ false, %3 ], [ false, %22 ], [ false, %20 ], [ %29, %26 ], [ false, %10 ]
  ret i1 %31
}

declare zeroext i1 @_ZNK6SkPath6isLineEP7SkPoint(%class.SkPath*, %struct.SkPoint*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZL9clip_lineP7SkPointRK6SkRectff(%struct.SkPoint* nocapture, %struct.SkRect* nocapture readonly dereferenceable(16), float, float) unnamed_addr #3 {
  %5 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %6 = bitcast float* %5 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fsub <2 x float> %7, %9
  %11 = fcmp une <2 x float> %10, zeroinitializer
  %12 = extractelement <2 x i1> %11, i32 0
  %13 = extractelement <2 x i1> %11, i32 1
  %14 = and i1 %12, %13
  br i1 %14, label %76, label %15

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %17 = zext i1 %13 to i64
  %18 = getelementptr inbounds float, float* %16, i64 %17
  %19 = bitcast float* %18 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds float, float* %5, i64 %17
  %22 = load float, float* %21, align 4
  %23 = bitcast float %22 to i32
  %24 = bitcast i32 %20 to float
  %25 = fcmp olt float %22, %24
  %26 = select i1 %25, i32 %23, i32 %20
  %27 = select i1 %25, i32 %20, i32 %23
  %28 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 0
  %29 = getelementptr inbounds float, float* %28, i64 %17
  %30 = load float, float* %29, align 4
  %31 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %32 = getelementptr inbounds float, float* %31, i64 %17
  %33 = load float, float* %32, align 4
  %34 = bitcast i32 %27 to float
  %35 = fcmp ogt float %30, %34
  br i1 %35, label %76, label %36

36:                                               ; preds = %15
  %37 = bitcast i32 %26 to float
  %38 = fcmp olt float %33, %37
  br i1 %38, label %76, label %39

39:                                               ; preds = %36
  %40 = fcmp ogt float %30, %37
  br i1 %40, label %41, label %49

41:                                               ; preds = %39
  %42 = fsub float %30, %37
  %43 = tail call float @fmodf(float %42, float %2) #9
  %44 = fsub float %30, %43
  %45 = bitcast float %44 to i32
  br i1 %25, label %49, label %46

46:                                               ; preds = %41
  %47 = fsub float %44, %3
  %48 = bitcast float %47 to i32
  br label %49

49:                                               ; preds = %41, %46, %39
  %50 = phi i32 [ %45, %41 ], [ %48, %46 ], [ %26, %39 ]
  %51 = fcmp olt float %33, %34
  br i1 %51, label %52, label %60

52:                                               ; preds = %49
  %53 = fsub float %34, %33
  %54 = tail call float @fmodf(float %53, float %2) #9
  %55 = fadd float %33, %54
  %56 = bitcast float %55 to i32
  br i1 %25, label %57, label %63

57:                                               ; preds = %52
  %58 = fadd float %55, %3
  %59 = bitcast float %58 to i32
  br label %61

60:                                               ; preds = %49
  br i1 %25, label %61, label %63

61:                                               ; preds = %57, %60
  %62 = phi i32 [ %59, %57 ], [ %20, %60 ]
  br label %63

63:                                               ; preds = %52, %61, %60
  %64 = phi i32 [ %62, %61 ], [ %50, %60 ], [ %50, %52 ]
  %65 = phi i32 [ %50, %61 ], [ %23, %60 ], [ %56, %52 ]
  store i32 %64, i32* %19, align 4
  %66 = bitcast float* %21 to i32*
  store i32 %65, i32* %66, align 4
  %67 = bitcast i32 %64 to float
  %68 = bitcast i32 %65 to float
  %69 = fcmp oeq float %67, %68
  br i1 %69, label %70, label %76

70:                                               ; preds = %63
  %71 = load float, float* %5, align 4
  %72 = fcmp ogt float %71, 0x3FF00418A0000000
  %73 = select i1 %72, float %71, float 0x3FF00418A0000000
  %74 = fmul float %73, 0x3F30000000000000
  %75 = fadd float %71, %74
  store float %75, float* %5, align 4
  br label %76

76:                                               ; preds = %36, %15, %70, %63, %4
  %77 = phi i1 [ false, %4 ], [ false, %36 ], [ false, %15 ], [ true, %70 ], [ true, %63 ]
  ret i1 %77
}

declare void @_ZN6SkPath4IterC1ERKS_b(%"class.SkPath::Iter"*, %class.SkPath* dereferenceable(16), i1 zeroext) unnamed_addr #4

declare i32 @_ZN6SkPath4Iter4nextEP7SkPoint(%"class.SkPath::Iter"*, %struct.SkPoint*) local_unnamed_addr #4

declare zeroext i1 @_ZNK6SkPath9getLastPtEP7SkPoint(%class.SkPath*, %struct.SkPoint*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #8

; Function Attrs: nofree nounwind
declare double @fmod(double, double) local_unnamed_addr #2

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath*, float, float) local_unnamed_addr #4

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath6lineToEff(%class.SkPath*, float, float) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #8

declare void @_ZN6SkPath10incReserveEi(%class.SkPath*, i32) local_unnamed_addr #4

declare void @_ZN11SkStrokeRec12setFillStyleEv(%class.SkStrokeRec*) local_unnamed_addr #4

declare float @_ZN7SkPoint6LengthEff(float, float) local_unnamed_addr #4

declare void @_ZNK7SkPoint5scaleEfPS_(%struct.SkPoint*, float, %struct.SkPoint*) local_unnamed_addr #4

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath7addPolyEPK7SkPointib(%class.SkPath*, %struct.SkPoint*, i32, i1 zeroext) local_unnamed_addr #4

declare void @_ZNK6SkPath12setConvexityE15SkPathConvexity(%class.SkPath*, i32) local_unnamed_addr #4

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
