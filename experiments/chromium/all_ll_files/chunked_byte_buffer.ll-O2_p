; ModuleID = '../../components/speech/chunked_byte_buffer.cc'
source_filename = "../../components/speech/chunked_byte_buffer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.speech::ChunkedByteBuffer" = type { %"class.std::__1::vector", %"class.std::__1::unique_ptr", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.speech::ChunkedByteBuffer::Chunk"* }
%"struct.speech::ChunkedByteBuffer::Chunk" = type { %"class.std::__1::vector.0", %"class.std::__1::unique_ptr.5" }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { i8*, i8*, %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { i8* }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.std::__1::vector.0"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IS6_EES8_S8_ = comdat any

$_ZNSt3__16vectorINS_10unique_ptrIN6speech17ChunkedByteBuffer5ChunkENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE5eraseENS_11__wrap_iterIPKS7_EE = comdat any

$_ZNSt3__16vectorINS_10unique_ptrIN6speech17ChunkedByteBuffer5ChunkENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_ = comdat any

@_ZN6speech17ChunkedByteBufferC1Ev = hidden unnamed_addr alias void (%"class.speech::ChunkedByteBuffer"*), void (%"class.speech::ChunkedByteBuffer"*)* @_ZN6speech17ChunkedByteBufferC2Ev
@_ZN6speech17ChunkedByteBufferD1Ev = hidden unnamed_addr alias void (%"class.speech::ChunkedByteBuffer"*), void (%"class.speech::ChunkedByteBuffer"*)* @_ZN6speech17ChunkedByteBufferD2Ev
@_ZN6speech17ChunkedByteBuffer5ChunkC1Ev = hidden unnamed_addr alias void (%"struct.speech::ChunkedByteBuffer::Chunk"*), void (%"struct.speech::ChunkedByteBuffer::Chunk"*)* @_ZN6speech17ChunkedByteBuffer5ChunkC2Ev
@_ZN6speech17ChunkedByteBuffer5ChunkD1Ev = hidden unnamed_addr alias void (%"struct.speech::ChunkedByteBuffer::Chunk"*), void (%"struct.speech::ChunkedByteBuffer::Chunk"*)* @_ZN6speech17ChunkedByteBuffer5ChunkD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6speech17ChunkedByteBufferC2Ev(%"class.speech::ChunkedByteBuffer"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.speech::ChunkedByteBuffer"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false) #9
  %3 = getelementptr inbounds %"class.speech::ChunkedByteBuffer", %"class.speech::ChunkedByteBuffer"* %0, i64 0, i32 1
  %4 = tail call i8* @_Znwm(i64 32) #10
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 24, i1 false) #9
  %5 = getelementptr inbounds i8, i8* %4, i64 24
  %6 = tail call i8* @_Znwm(i64 24) #10
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false) #9
  %7 = ptrtoint i8* %6 to i64
  %8 = bitcast i8* %5 to i64*
  store i64 %7, i64* %8, align 8
  %9 = ptrtoint i8* %4 to i64
  %10 = bitcast %"class.std::__1::unique_ptr"* %3 to i64*
  store i64 %9, i64* %10, align 8
  %11 = getelementptr inbounds %"class.speech::ChunkedByteBuffer", %"class.speech::ChunkedByteBuffer"* %0, i64 0, i32 2
  store i64 0, i64* %11, align 8
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6speech17ChunkedByteBufferD2Ev(%"class.speech::ChunkedByteBuffer"* nocapture) unnamed_addr #0 align 2 {
  tail call void @_ZN6speech17ChunkedByteBuffer5ClearEv(%"class.speech::ChunkedByteBuffer"* %0)
  %2 = getelementptr inbounds %"class.speech::ChunkedByteBuffer", %"class.speech::ChunkedByteBuffer"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"struct.speech::ChunkedByteBuffer::Chunk"*, %"struct.speech::ChunkedByteBuffer::Chunk"** %2, align 8
  store %"struct.speech::ChunkedByteBuffer::Chunk"* null, %"struct.speech::ChunkedByteBuffer::Chunk"** %2, align 8
  %4 = icmp eq %"struct.speech::ChunkedByteBuffer::Chunk"* %3, null
  br i1 %4, label %29, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %3, i64 0, i32 1, i32 0, i32 0, i32 0
  %7 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %6, align 8
  store %"class.std::__1::vector.0"* null, %"class.std::__1::vector.0"** %6, align 8
  %8 = icmp eq %"class.std::__1::vector.0"* %7, null
  br i1 %8, label %19, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %7, i64 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = icmp eq i8* %11, null
  br i1 %12, label %17, label %13

13:                                               ; preds = %9
  %14 = ptrtoint i8* %11 to i64
  %15 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %7, i64 0, i32 0, i32 1
  %16 = bitcast i8** %15 to i64*
  store i64 %14, i64* %16, align 8
  tail call void @_ZdlPv(i8* nonnull %11) #10
  br label %17

17:                                               ; preds = %13, %9
  %18 = bitcast %"class.std::__1::vector.0"* %7 to i8*
  tail call void @_ZdlPv(i8* %18) #10
  br label %19

19:                                               ; preds = %17, %5
  %20 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %3, i64 0, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = icmp eq i8* %21, null
  br i1 %22, label %27, label %23

23:                                               ; preds = %19
  %24 = ptrtoint i8* %21 to i64
  %25 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %3, i64 0, i32 0, i32 0, i32 1
  %26 = bitcast i8** %25 to i64*
  store i64 %24, i64* %26, align 8
  tail call void @_ZdlPv(i8* nonnull %21) #10
  br label %27

27:                                               ; preds = %23, %19
  %28 = bitcast %"struct.speech::ChunkedByteBuffer::Chunk"* %3 to i8*
  tail call void @_ZdlPv(i8* %28) #10
  br label %29

29:                                               ; preds = %1, %27
  %30 = getelementptr inbounds %"class.speech::ChunkedByteBuffer", %"class.speech::ChunkedByteBuffer"* %0, i64 0, i32 0, i32 0, i32 0
  %31 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %30, align 8
  %32 = icmp eq %"class.std::__1::unique_ptr"* %31, null
  br i1 %32, label %75, label %33

33:                                               ; preds = %29
  %34 = bitcast %"class.std::__1::unique_ptr"* %31 to i8*
  %35 = getelementptr inbounds %"class.speech::ChunkedByteBuffer", %"class.speech::ChunkedByteBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %36 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %35, align 8
  %37 = icmp eq %"class.std::__1::unique_ptr"* %36, %31
  br i1 %37, label %73, label %38

38:                                               ; preds = %33, %68
  %39 = phi %"class.std::__1::unique_ptr"* [ %40, %68 ], [ %36, %33 ]
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %39, i64 -1
  %41 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %40, i64 0, i32 0, i32 0, i32 0
  %42 = load %"struct.speech::ChunkedByteBuffer::Chunk"*, %"struct.speech::ChunkedByteBuffer::Chunk"** %41, align 8
  store %"struct.speech::ChunkedByteBuffer::Chunk"* null, %"struct.speech::ChunkedByteBuffer::Chunk"** %41, align 8
  %43 = icmp eq %"struct.speech::ChunkedByteBuffer::Chunk"* %42, null
  br i1 %43, label %68, label %44

44:                                               ; preds = %38
  %45 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %42, i64 0, i32 1, i32 0, i32 0, i32 0
  %46 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %45, align 8
  store %"class.std::__1::vector.0"* null, %"class.std::__1::vector.0"** %45, align 8
  %47 = icmp eq %"class.std::__1::vector.0"* %46, null
  br i1 %47, label %58, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %46, i64 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = icmp eq i8* %50, null
  br i1 %51, label %56, label %52

52:                                               ; preds = %48
  %53 = ptrtoint i8* %50 to i64
  %54 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %46, i64 0, i32 0, i32 1
  %55 = bitcast i8** %54 to i64*
  store i64 %53, i64* %55, align 8
  tail call void @_ZdlPv(i8* nonnull %50) #10
  br label %56

56:                                               ; preds = %52, %48
  %57 = bitcast %"class.std::__1::vector.0"* %46 to i8*
  tail call void @_ZdlPv(i8* %57) #10
  br label %58

58:                                               ; preds = %56, %44
  %59 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %42, i64 0, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = icmp eq i8* %60, null
  br i1 %61, label %66, label %62

62:                                               ; preds = %58
  %63 = ptrtoint i8* %60 to i64
  %64 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %42, i64 0, i32 0, i32 0, i32 1
  %65 = bitcast i8** %64 to i64*
  store i64 %63, i64* %65, align 8
  tail call void @_ZdlPv(i8* nonnull %60) #10
  br label %66

66:                                               ; preds = %62, %58
  %67 = bitcast %"struct.speech::ChunkedByteBuffer::Chunk"* %42 to i8*
  tail call void @_ZdlPv(i8* %67) #10
  br label %68

68:                                               ; preds = %66, %38
  %69 = icmp eq %"class.std::__1::unique_ptr"* %40, %31
  br i1 %69, label %70, label %38

70:                                               ; preds = %68
  %71 = bitcast %"class.speech::ChunkedByteBuffer"* %0 to i8**
  %72 = load i8*, i8** %71, align 8
  br label %73

73:                                               ; preds = %33, %70
  %74 = phi i8* [ %72, %70 ], [ %34, %33 ]
  store %"class.std::__1::unique_ptr"* %31, %"class.std::__1::unique_ptr"** %35, align 8
  tail call void @_ZdlPv(i8* %74) #10
  br label %75

75:                                               ; preds = %29, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6speech17ChunkedByteBuffer5ClearEv(%"class.speech::ChunkedByteBuffer"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.speech::ChunkedByteBuffer", %"class.speech::ChunkedByteBuffer"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %2, align 8
  %4 = getelementptr inbounds %"class.speech::ChunkedByteBuffer", %"class.speech::ChunkedByteBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %4, align 8
  %6 = icmp eq %"class.std::__1::unique_ptr"* %5, %3
  br i1 %6, label %39, label %7

7:                                                ; preds = %1, %37
  %8 = phi %"class.std::__1::unique_ptr"* [ %9, %37 ], [ %5, %1 ]
  %9 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %8, i64 -1
  %10 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %9, i64 0, i32 0, i32 0, i32 0
  %11 = load %"struct.speech::ChunkedByteBuffer::Chunk"*, %"struct.speech::ChunkedByteBuffer::Chunk"** %10, align 8
  store %"struct.speech::ChunkedByteBuffer::Chunk"* null, %"struct.speech::ChunkedByteBuffer::Chunk"** %10, align 8
  %12 = icmp eq %"struct.speech::ChunkedByteBuffer::Chunk"* %11, null
  br i1 %12, label %37, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %11, i64 0, i32 1, i32 0, i32 0, i32 0
  %15 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %14, align 8
  store %"class.std::__1::vector.0"* null, %"class.std::__1::vector.0"** %14, align 8
  %16 = icmp eq %"class.std::__1::vector.0"* %15, null
  br i1 %16, label %27, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %15, i64 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %25, label %21

21:                                               ; preds = %17
  %22 = ptrtoint i8* %19 to i64
  %23 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %15, i64 0, i32 0, i32 1
  %24 = bitcast i8** %23 to i64*
  store i64 %22, i64* %24, align 8
  tail call void @_ZdlPv(i8* nonnull %19) #10
  br label %25

25:                                               ; preds = %21, %17
  %26 = bitcast %"class.std::__1::vector.0"* %15 to i8*
  tail call void @_ZdlPv(i8* %26) #10
  br label %27

27:                                               ; preds = %25, %13
  %28 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %11, i64 0, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %35, label %31

31:                                               ; preds = %27
  %32 = ptrtoint i8* %29 to i64
  %33 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %11, i64 0, i32 0, i32 0, i32 1
  %34 = bitcast i8** %33 to i64*
  store i64 %32, i64* %34, align 8
  tail call void @_ZdlPv(i8* nonnull %29) #10
  br label %35

35:                                               ; preds = %31, %27
  %36 = bitcast %"struct.speech::ChunkedByteBuffer::Chunk"* %11 to i8*
  tail call void @_ZdlPv(i8* %36) #10
  br label %37

37:                                               ; preds = %35, %7
  %38 = icmp eq %"class.std::__1::unique_ptr"* %9, %3
  br i1 %38, label %39, label %7

39:                                               ; preds = %37, %1
  store %"class.std::__1::unique_ptr"* %3, %"class.std::__1::unique_ptr"** %4, align 8
  %40 = tail call i8* @_Znwm(i64 32) #10
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 0, i64 24, i1 false) #9
  %41 = getelementptr inbounds i8, i8* %40, i64 24
  %42 = tail call i8* @_Znwm(i64 24) #10
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 0, i64 24, i1 false) #9
  %43 = ptrtoint i8* %42 to i64
  %44 = bitcast i8* %41 to i64*
  store i64 %43, i64* %44, align 8
  %45 = ptrtoint i8* %40 to i64
  %46 = getelementptr inbounds %"class.speech::ChunkedByteBuffer", %"class.speech::ChunkedByteBuffer"* %0, i64 0, i32 1
  %47 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %46, i64 0, i32 0, i32 0, i32 0
  %48 = load %"struct.speech::ChunkedByteBuffer::Chunk"*, %"struct.speech::ChunkedByteBuffer::Chunk"** %47, align 8
  %49 = bitcast %"class.std::__1::unique_ptr"* %46 to i64*
  store i64 %45, i64* %49, align 8
  %50 = icmp eq %"struct.speech::ChunkedByteBuffer::Chunk"* %48, null
  br i1 %50, label %75, label %51

51:                                               ; preds = %39
  %52 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %48, i64 0, i32 1, i32 0, i32 0, i32 0
  %53 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %52, align 8
  store %"class.std::__1::vector.0"* null, %"class.std::__1::vector.0"** %52, align 8
  %54 = icmp eq %"class.std::__1::vector.0"* %53, null
  br i1 %54, label %65, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %53, i64 0, i32 0, i32 0
  %57 = load i8*, i8** %56, align 8
  %58 = icmp eq i8* %57, null
  br i1 %58, label %63, label %59

59:                                               ; preds = %55
  %60 = ptrtoint i8* %57 to i64
  %61 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %53, i64 0, i32 0, i32 1
  %62 = bitcast i8** %61 to i64*
  store i64 %60, i64* %62, align 8
  tail call void @_ZdlPv(i8* nonnull %57) #10
  br label %63

63:                                               ; preds = %59, %55
  %64 = bitcast %"class.std::__1::vector.0"* %53 to i8*
  tail call void @_ZdlPv(i8* %64) #10
  br label %65

65:                                               ; preds = %63, %51
  %66 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %48, i64 0, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = icmp eq i8* %67, null
  br i1 %68, label %73, label %69

69:                                               ; preds = %65
  %70 = ptrtoint i8* %67 to i64
  %71 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %48, i64 0, i32 0, i32 0, i32 1
  %72 = bitcast i8** %71 to i64*
  store i64 %70, i64* %72, align 8
  tail call void @_ZdlPv(i8* nonnull %67) #10
  br label %73

73:                                               ; preds = %69, %65
  %74 = bitcast %"struct.speech::ChunkedByteBuffer::Chunk"* %48 to i8*
  tail call void @_ZdlPv(i8* %74) #10
  br label %75

75:                                               ; preds = %73, %39
  %76 = getelementptr inbounds %"class.speech::ChunkedByteBuffer", %"class.speech::ChunkedByteBuffer"* %0, i64 0, i32 2
  store i64 0, i64* %76, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6speech17ChunkedByteBuffer6AppendEPKhm(%"class.speech::ChunkedByteBuffer"*, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %209, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.speech::ChunkedByteBuffer", %"class.speech::ChunkedByteBuffer"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %6, i64 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.speech::ChunkedByteBuffer", %"class.speech::ChunkedByteBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.speech::ChunkedByteBuffer", %"class.speech::ChunkedByteBuffer"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %10 = getelementptr inbounds %"class.speech::ChunkedByteBuffer", %"class.speech::ChunkedByteBuffer"* %0, i64 0, i32 0
  %11 = bitcast %"class.std::__1::unique_ptr"* %6 to i64*
  %12 = bitcast %"class.std::__1::unique_ptr"** %8 to i64*
  br label %13

13:                                               ; preds = %5, %207
  %14 = phi i8* [ %1, %5 ], [ %68, %207 ]
  %15 = phi i64 [ %2, %5 ], [ %70, %207 ]
  %16 = load %"struct.speech::ChunkedByteBuffer::Chunk"*, %"struct.speech::ChunkedByteBuffer::Chunk"** %7, align 8
  %17 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %16, i64 0, i32 0, i32 0, i32 1
  %18 = bitcast i8** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"struct.speech::ChunkedByteBuffer::Chunk"* %16 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = icmp ult i64 %22, 4
  %24 = inttoptr i64 %21 to i8*
  br i1 %23, label %25, label %31

25:                                               ; preds = %13
  %26 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %16, i64 0, i32 0
  %27 = sub nuw nsw i64 4, %22
  %28 = icmp ult i64 %15, %27
  %29 = select i1 %28, i64 %15, i64 %27
  %30 = icmp uge i64 %15, %27
  br label %61

31:                                               ; preds = %13
  %32 = load i8, i8* %24, align 1
  %33 = zext i8 %32 to i64
  %34 = shl nuw nsw i64 %33, 8
  %35 = getelementptr inbounds i8, i8* %24, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = or i64 %34, %37
  %39 = shl nuw nsw i64 %38, 8
  %40 = getelementptr inbounds i8, i8* %24, i64 2
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i64
  %43 = or i64 %39, %42
  %44 = shl nuw nsw i64 %43, 8
  %45 = getelementptr inbounds i8, i8* %24, i64 3
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i64
  %48 = or i64 %44, %47
  %49 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %16, i64 0, i32 1, i32 0, i32 0, i32 0
  %50 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %49, align 8
  %51 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %50, i64 0, i32 0, i32 1
  %52 = bitcast i8** %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = bitcast %"class.std::__1::vector.0"* %50 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = sub i64 %55, %53
  %57 = add i64 %48, %56
  %58 = icmp ult i64 %15, %57
  %59 = select i1 %58, i64 %15, i64 %57
  %60 = icmp uge i64 %15, %57
  br label %61

61:                                               ; preds = %31, %25
  %62 = phi i64 [ %19, %25 ], [ %53, %31 ]
  %63 = phi i64 [ %29, %25 ], [ %59, %31 ]
  %64 = phi i1 [ %30, %25 ], [ false, %31 ]
  %65 = phi i1 [ false, %25 ], [ %60, %31 ]
  %66 = phi %"class.std::__1::vector.0"* [ %26, %25 ], [ %50, %31 ]
  %67 = inttoptr i64 %62 to i8*
  %68 = getelementptr inbounds i8, i8* %14, i64 %63
  %69 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector.0"* %66, i8* %67, i8* %14, i8* %68)
  %70 = sub i64 %15, %63
  br i1 %64, label %71, label %163

71:                                               ; preds = %61
  %72 = load %"struct.speech::ChunkedByteBuffer::Chunk"*, %"struct.speech::ChunkedByteBuffer::Chunk"** %7, align 8
  %73 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %72, i64 0, i32 0, i32 0, i32 0
  %74 = load i8*, i8** %73, align 8
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i64
  %77 = shl nuw nsw i64 %76, 8
  %78 = getelementptr inbounds i8, i8* %74, i64 1
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i64
  %81 = or i64 %77, %80
  %82 = shl nuw nsw i64 %81, 8
  %83 = getelementptr inbounds i8, i8* %74, i64 2
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i64
  %86 = or i64 %82, %85
  %87 = shl nuw nsw i64 %86, 8
  %88 = getelementptr inbounds i8, i8* %74, i64 3
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i64
  %91 = or i64 %87, %90
  %92 = icmp eq i64 %91, 0
  %93 = ptrtoint %"struct.speech::ChunkedByteBuffer::Chunk"* %72 to i64
  br i1 %92, label %94, label %136

94:                                               ; preds = %71
  %95 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %8, align 8
  %96 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %9, align 8
  %97 = icmp ult %"class.std::__1::unique_ptr"* %95, %96
  br i1 %97, label %98, label %102

98:                                               ; preds = %94
  store %"struct.speech::ChunkedByteBuffer::Chunk"* null, %"struct.speech::ChunkedByteBuffer::Chunk"** %7, align 8
  %99 = bitcast %"class.std::__1::unique_ptr"* %95 to i64*
  store i64 %93, i64* %99, align 8
  %100 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %95, i64 1
  %101 = ptrtoint %"class.std::__1::unique_ptr"* %100 to i64
  store i64 %101, i64* %12, align 8
  br label %103

102:                                              ; preds = %94
  tail call void @_ZNSt3__16vectorINS_10unique_ptrIN6speech17ChunkedByteBuffer5ChunkENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_(%"class.std::__1::vector"* %10, %"class.std::__1::unique_ptr"* dereferenceable(8) %6) #9
  br label %103

103:                                              ; preds = %98, %102
  %104 = tail call i8* @_Znwm(i64 32) #10
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %104, i8 0, i64 24, i1 false) #9
  %105 = getelementptr inbounds i8, i8* %104, i64 24
  %106 = tail call i8* @_Znwm(i64 24) #10
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %106, i8 0, i64 24, i1 false) #9
  %107 = ptrtoint i8* %106 to i64
  %108 = bitcast i8* %105 to i64*
  store i64 %107, i64* %108, align 8
  %109 = ptrtoint i8* %104 to i64
  %110 = load %"struct.speech::ChunkedByteBuffer::Chunk"*, %"struct.speech::ChunkedByteBuffer::Chunk"** %7, align 8
  store i64 %109, i64* %11, align 8
  %111 = icmp eq %"struct.speech::ChunkedByteBuffer::Chunk"* %110, null
  br i1 %111, label %207, label %112

112:                                              ; preds = %103
  %113 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %110, i64 0, i32 1, i32 0, i32 0, i32 0
  %114 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %113, align 8
  store %"class.std::__1::vector.0"* null, %"class.std::__1::vector.0"** %113, align 8
  %115 = icmp eq %"class.std::__1::vector.0"* %114, null
  br i1 %115, label %126, label %116

116:                                              ; preds = %112
  %117 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %114, i64 0, i32 0, i32 0
  %118 = load i8*, i8** %117, align 8
  %119 = icmp eq i8* %118, null
  br i1 %119, label %124, label %120

120:                                              ; preds = %116
  %121 = ptrtoint i8* %118 to i64
  %122 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %114, i64 0, i32 0, i32 1
  %123 = bitcast i8** %122 to i64*
  store i64 %121, i64* %123, align 8
  tail call void @_ZdlPv(i8* nonnull %118) #10
  br label %124

124:                                              ; preds = %120, %116
  %125 = bitcast %"class.std::__1::vector.0"* %114 to i8*
  tail call void @_ZdlPv(i8* %125) #10
  br label %126

126:                                              ; preds = %124, %112
  %127 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %110, i64 0, i32 0, i32 0, i32 0
  %128 = load i8*, i8** %127, align 8
  %129 = icmp eq i8* %128, null
  br i1 %129, label %134, label %130

130:                                              ; preds = %126
  %131 = ptrtoint i8* %128 to i64
  %132 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %110, i64 0, i32 0, i32 0, i32 1
  %133 = bitcast i8** %132 to i64*
  store i64 %131, i64* %133, align 8
  tail call void @_ZdlPv(i8* nonnull %128) #10
  br label %134

134:                                              ; preds = %130, %126
  %135 = bitcast %"struct.speech::ChunkedByteBuffer::Chunk"* %110 to i8*
  tail call void @_ZdlPv(i8* %135) #10
  br label %207

136:                                              ; preds = %71
  %137 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %72, i64 0, i32 1, i32 0, i32 0, i32 0
  %138 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %137, align 8
  %139 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %138, i64 0, i32 0, i32 2, i32 0, i32 0
  %140 = bitcast i8** %139 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = bitcast %"class.std::__1::vector.0"* %138 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = sub i64 %141, %143
  %145 = icmp ult i64 %144, %91
  %146 = inttoptr i64 %143 to i8*
  br i1 %145, label %147, label %207

147:                                              ; preds = %136
  %148 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %138, i64 0, i32 0, i32 1
  %149 = bitcast i8** %148 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = sub i64 %150, %143
  %152 = tail call i8* @_Znwm(i64 %91) #10
  %153 = getelementptr inbounds i8, i8* %152, i64 %151
  %154 = ptrtoint i8* %153 to i64
  %155 = getelementptr inbounds i8, i8* %152, i64 %91
  %156 = ptrtoint i8* %155 to i64
  %157 = ptrtoint i8* %152 to i64
  %158 = icmp sgt i64 %151, 0
  br i1 %158, label %159, label %160

159:                                              ; preds = %147
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %152, i8* align 1 %146, i64 %151, i1 false) #9
  br label %160

160:                                              ; preds = %159, %147
  store i64 %157, i64* %142, align 8
  store i64 %154, i64* %149, align 8
  store i64 %156, i64* %140, align 8
  %161 = icmp eq i64 %143, 0
  br i1 %161, label %207, label %162

162:                                              ; preds = %160
  tail call void @_ZdlPv(i8* nonnull %146) #10
  br label %207

163:                                              ; preds = %61
  br i1 %65, label %164, label %207

164:                                              ; preds = %163
  %165 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %8, align 8
  %166 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %9, align 8
  %167 = icmp ult %"class.std::__1::unique_ptr"* %165, %166
  br i1 %167, label %168, label %173

168:                                              ; preds = %164
  %169 = load i64, i64* %11, align 8
  store %"struct.speech::ChunkedByteBuffer::Chunk"* null, %"struct.speech::ChunkedByteBuffer::Chunk"** %7, align 8
  %170 = bitcast %"class.std::__1::unique_ptr"* %165 to i64*
  store i64 %169, i64* %170, align 8
  %171 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %165, i64 1
  %172 = ptrtoint %"class.std::__1::unique_ptr"* %171 to i64
  store i64 %172, i64* %12, align 8
  br label %174

173:                                              ; preds = %164
  tail call void @_ZNSt3__16vectorINS_10unique_ptrIN6speech17ChunkedByteBuffer5ChunkENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_(%"class.std::__1::vector"* %10, %"class.std::__1::unique_ptr"* dereferenceable(8) %6) #9
  br label %174

174:                                              ; preds = %168, %173
  %175 = tail call i8* @_Znwm(i64 32) #10
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %175, i8 0, i64 24, i1 false) #9
  %176 = getelementptr inbounds i8, i8* %175, i64 24
  %177 = tail call i8* @_Znwm(i64 24) #10
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %177, i8 0, i64 24, i1 false) #9
  %178 = ptrtoint i8* %177 to i64
  %179 = bitcast i8* %176 to i64*
  store i64 %178, i64* %179, align 8
  %180 = ptrtoint i8* %175 to i64
  %181 = load %"struct.speech::ChunkedByteBuffer::Chunk"*, %"struct.speech::ChunkedByteBuffer::Chunk"** %7, align 8
  store i64 %180, i64* %11, align 8
  %182 = icmp eq %"struct.speech::ChunkedByteBuffer::Chunk"* %181, null
  br i1 %182, label %207, label %183

183:                                              ; preds = %174
  %184 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %181, i64 0, i32 1, i32 0, i32 0, i32 0
  %185 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %184, align 8
  store %"class.std::__1::vector.0"* null, %"class.std::__1::vector.0"** %184, align 8
  %186 = icmp eq %"class.std::__1::vector.0"* %185, null
  br i1 %186, label %197, label %187

187:                                              ; preds = %183
  %188 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %185, i64 0, i32 0, i32 0
  %189 = load i8*, i8** %188, align 8
  %190 = icmp eq i8* %189, null
  br i1 %190, label %195, label %191

191:                                              ; preds = %187
  %192 = ptrtoint i8* %189 to i64
  %193 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %185, i64 0, i32 0, i32 1
  %194 = bitcast i8** %193 to i64*
  store i64 %192, i64* %194, align 8
  tail call void @_ZdlPv(i8* nonnull %189) #10
  br label %195

195:                                              ; preds = %191, %187
  %196 = bitcast %"class.std::__1::vector.0"* %185 to i8*
  tail call void @_ZdlPv(i8* %196) #10
  br label %197

197:                                              ; preds = %195, %183
  %198 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %181, i64 0, i32 0, i32 0, i32 0
  %199 = load i8*, i8** %198, align 8
  %200 = icmp eq i8* %199, null
  br i1 %200, label %205, label %201

201:                                              ; preds = %197
  %202 = ptrtoint i8* %199 to i64
  %203 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %181, i64 0, i32 0, i32 0, i32 1
  %204 = bitcast i8** %203 to i64*
  store i64 %202, i64* %204, align 8
  tail call void @_ZdlPv(i8* nonnull %199) #10
  br label %205

205:                                              ; preds = %201, %197
  %206 = bitcast %"struct.speech::ChunkedByteBuffer::Chunk"* %181 to i8*
  tail call void @_ZdlPv(i8* %206) #10
  br label %207

207:                                              ; preds = %174, %205, %162, %160, %136, %103, %134, %163
  %208 = icmp eq i64 %70, 0
  br i1 %208, label %209, label %13

209:                                              ; preds = %207, %3
  %210 = getelementptr inbounds %"class.speech::ChunkedByteBuffer", %"class.speech::ChunkedByteBuffer"* %0, i64 0, i32 2
  %211 = load i64, i64* %210, align 8
  %212 = add i64 %211, %2
  store i64 %212, i64* %210, align 8
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZNK6speech17ChunkedByteBuffer5Chunk21ExpectedContentLengthEv(%"struct.speech::ChunkedByteBuffer::Chunk"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i64
  %6 = shl nuw nsw i64 %5, 8
  %7 = getelementptr inbounds i8, i8* %3, i64 1
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  %10 = or i64 %6, %9
  %11 = shl nuw nsw i64 %10, 8
  %12 = getelementptr inbounds i8, i8* %3, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i64
  %15 = or i64 %11, %14
  %16 = shl nuw nsw i64 %15, 8
  %17 = getelementptr inbounds i8, i8* %3, i64 3
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i64
  %20 = or i64 %16, %19
  ret i64 %20
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector.0"*, i8*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 0
  %7 = ptrtoint i8* %3 to i64
  %8 = ptrtoint i8* %2 to i64
  %9 = sub i64 %7, %8
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %414

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %9, %18
  %20 = bitcast i8** %15 to i64*
  br i1 %19, label %164, label %21

21:                                               ; preds = %11
  %22 = sub i64 %17, %5
  %23 = icmp sgt i64 %9, %22
  br i1 %23, label %24, label %37

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %2, i64 %22
  %26 = ptrtoint i8* %25 to i64
  %27 = sub i64 %7, %26
  %28 = icmp sgt i64 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %24
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %25, i64 %27, i1 false) #9
  %30 = getelementptr inbounds i8, i8* %16, i64 %27
  %31 = ptrtoint i8* %30 to i64
  br label %32

32:                                               ; preds = %29, %24
  %33 = phi i64 [ %31, %29 ], [ %17, %24 ]
  store i64 %33, i64* %20, align 8
  %34 = icmp sgt i64 %22, 0
  br i1 %34, label %35, label %414

35:                                               ; preds = %32
  %36 = inttoptr i64 %33 to i8*
  br label %37

37:                                               ; preds = %35, %21
  %38 = phi i64 [ %33, %35 ], [ %17, %21 ]
  %39 = phi i8* [ %36, %35 ], [ %16, %21 ]
  %40 = phi i8* [ %25, %35 ], [ %3, %21 ]
  %41 = getelementptr inbounds i8, i8* %1, i64 %9
  %42 = ptrtoint i8* %41 to i64
  %43 = sub i64 %38, %42
  %44 = getelementptr inbounds i8, i8* %1, i64 %43
  %45 = icmp ult i8* %44, %16
  br i1 %45, label %46, label %146

46:                                               ; preds = %37
  %47 = sub i64 %9, %38
  %48 = getelementptr i8, i8* %16, i64 %47
  %49 = ptrtoint i8* %48 to i64
  %50 = icmp ult i8* %48, inttoptr (i64 32 to i8*)
  br i1 %50, label %51, label %54

51:                                               ; preds = %141, %54, %46
  %52 = phi i8* [ %44, %54 ], [ %44, %46 ], [ %64, %141 ]
  %53 = phi i8* [ %39, %54 ], [ %39, %46 ], [ %65, %141 ]
  br label %152

54:                                               ; preds = %46
  %55 = sub i64 %9, %38
  %56 = getelementptr i8, i8* %16, i64 %55
  %57 = ptrtoint i8* %56 to i64
  %58 = getelementptr i8, i8* %39, i64 %57
  %59 = icmp ult i8* %39, %16
  %60 = icmp ult i8* %44, %58
  %61 = and i1 %59, %60
  br i1 %61, label %51, label %62

62:                                               ; preds = %54
  %63 = and i64 %49, -32
  %64 = getelementptr i8, i8* %44, i64 %63
  %65 = getelementptr i8, i8* %39, i64 %63
  %66 = add i64 %63, -32
  %67 = lshr exact i64 %66, 5
  %68 = add nuw nsw i64 %67, 1
  %69 = and i64 %68, 3
  %70 = icmp ult i64 %66, 96
  br i1 %70, label %122, label %71

71:                                               ; preds = %62
  %72 = sub nsw i64 %68, %69
  br label %73

73:                                               ; preds = %73, %71
  %74 = phi i64 [ 0, %71 ], [ %119, %73 ]
  %75 = phi i64 [ %72, %71 ], [ %120, %73 ]
  %76 = getelementptr i8, i8* %44, i64 %74
  %77 = getelementptr i8, i8* %39, i64 %74
  %78 = bitcast i8* %76 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1, !alias.scope !2
  %80 = getelementptr i8, i8* %76, i64 16
  %81 = bitcast i8* %80 to <16 x i8>*
  %82 = load <16 x i8>, <16 x i8>* %81, align 1, !alias.scope !2
  %83 = bitcast i8* %77 to <16 x i8>*
  store <16 x i8> %79, <16 x i8>* %83, align 1, !alias.scope !5, !noalias !2
  %84 = getelementptr i8, i8* %77, i64 16
  %85 = bitcast i8* %84 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %85, align 1, !alias.scope !5, !noalias !2
  %86 = or i64 %74, 32
  %87 = getelementptr i8, i8* %44, i64 %86
  %88 = getelementptr i8, i8* %39, i64 %86
  %89 = bitcast i8* %87 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 1, !alias.scope !2
  %91 = getelementptr i8, i8* %87, i64 16
  %92 = bitcast i8* %91 to <16 x i8>*
  %93 = load <16 x i8>, <16 x i8>* %92, align 1, !alias.scope !2
  %94 = bitcast i8* %88 to <16 x i8>*
  store <16 x i8> %90, <16 x i8>* %94, align 1, !alias.scope !5, !noalias !2
  %95 = getelementptr i8, i8* %88, i64 16
  %96 = bitcast i8* %95 to <16 x i8>*
  store <16 x i8> %93, <16 x i8>* %96, align 1, !alias.scope !5, !noalias !2
  %97 = or i64 %74, 64
  %98 = getelementptr i8, i8* %44, i64 %97
  %99 = getelementptr i8, i8* %39, i64 %97
  %100 = bitcast i8* %98 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1, !alias.scope !2
  %102 = getelementptr i8, i8* %98, i64 16
  %103 = bitcast i8* %102 to <16 x i8>*
  %104 = load <16 x i8>, <16 x i8>* %103, align 1, !alias.scope !2
  %105 = bitcast i8* %99 to <16 x i8>*
  store <16 x i8> %101, <16 x i8>* %105, align 1, !alias.scope !5, !noalias !2
  %106 = getelementptr i8, i8* %99, i64 16
  %107 = bitcast i8* %106 to <16 x i8>*
  store <16 x i8> %104, <16 x i8>* %107, align 1, !alias.scope !5, !noalias !2
  %108 = or i64 %74, 96
  %109 = getelementptr i8, i8* %44, i64 %108
  %110 = getelementptr i8, i8* %39, i64 %108
  %111 = bitcast i8* %109 to <16 x i8>*
  %112 = load <16 x i8>, <16 x i8>* %111, align 1, !alias.scope !2
  %113 = getelementptr i8, i8* %109, i64 16
  %114 = bitcast i8* %113 to <16 x i8>*
  %115 = load <16 x i8>, <16 x i8>* %114, align 1, !alias.scope !2
  %116 = bitcast i8* %110 to <16 x i8>*
  store <16 x i8> %112, <16 x i8>* %116, align 1, !alias.scope !5, !noalias !2
  %117 = getelementptr i8, i8* %110, i64 16
  %118 = bitcast i8* %117 to <16 x i8>*
  store <16 x i8> %115, <16 x i8>* %118, align 1, !alias.scope !5, !noalias !2
  %119 = add i64 %74, 128
  %120 = add i64 %75, -4
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %73, !llvm.loop !7

122:                                              ; preds = %73, %62
  %123 = phi i64 [ 0, %62 ], [ %119, %73 ]
  %124 = icmp eq i64 %69, 0
  br i1 %124, label %141, label %125

125:                                              ; preds = %122, %125
  %126 = phi i64 [ %138, %125 ], [ %123, %122 ]
  %127 = phi i64 [ %139, %125 ], [ %69, %122 ]
  %128 = getelementptr i8, i8* %44, i64 %126
  %129 = getelementptr i8, i8* %39, i64 %126
  %130 = bitcast i8* %128 to <16 x i8>*
  %131 = load <16 x i8>, <16 x i8>* %130, align 1, !alias.scope !2
  %132 = getelementptr i8, i8* %128, i64 16
  %133 = bitcast i8* %132 to <16 x i8>*
  %134 = load <16 x i8>, <16 x i8>* %133, align 1, !alias.scope !2
  %135 = bitcast i8* %129 to <16 x i8>*
  store <16 x i8> %131, <16 x i8>* %135, align 1, !alias.scope !5, !noalias !2
  %136 = getelementptr i8, i8* %129, i64 16
  %137 = bitcast i8* %136 to <16 x i8>*
  store <16 x i8> %134, <16 x i8>* %137, align 1, !alias.scope !5, !noalias !2
  %138 = add i64 %126, 32
  %139 = add i64 %127, -1
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %125, !llvm.loop !9

141:                                              ; preds = %125, %122
  %142 = icmp eq i64 %63, %49
  br i1 %142, label %143, label %51

143:                                              ; preds = %152, %141
  %144 = phi i8* [ %65, %141 ], [ %157, %152 ]
  %145 = ptrtoint i8* %144 to i64
  br label %146

146:                                              ; preds = %143, %37
  %147 = phi i64 [ %145, %143 ], [ %38, %37 ]
  store i64 %147, i64* %20, align 8
  %148 = icmp eq i64 %43, 0
  br i1 %148, label %159, label %149

149:                                              ; preds = %146
  %150 = sub i64 0, %43
  %151 = getelementptr inbounds i8, i8* %39, i64 %150
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %151, i8* align 1 %1, i64 %43, i1 false) #9
  br label %159

152:                                              ; preds = %51, %152
  %153 = phi i8* [ %156, %152 ], [ %52, %51 ]
  %154 = phi i8* [ %157, %152 ], [ %53, %51 ]
  %155 = load i8, i8* %153, align 1
  store i8 %155, i8* %154, align 1
  %156 = getelementptr inbounds i8, i8* %153, i64 1
  %157 = getelementptr inbounds i8, i8* %154, i64 1
  %158 = icmp eq i8* %156, %16
  br i1 %158, label %143, label %152, !llvm.loop !11

159:                                              ; preds = %146, %149
  %160 = ptrtoint i8* %40 to i64
  %161 = sub i64 %160, %8
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %414, label %163

163:                                              ; preds = %159
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 %161, i1 false) #9
  br label %414

164:                                              ; preds = %11
  %165 = bitcast %"class.std::__1::vector.0"* %0 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = sub i64 %17, %166
  %168 = add i64 %167, %9
  %169 = icmp slt i64 %168, 0
  br i1 %169, label %170, label %172

170:                                              ; preds = %164
  %171 = bitcast %"class.std::__1::vector.0"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %171) #11
  unreachable

172:                                              ; preds = %164
  %173 = sub i64 %14, %166
  %174 = icmp ult i64 %173, 4611686018427387903
  br i1 %174, label %177, label %175

175:                                              ; preds = %172
  %176 = sub i64 %5, %166
  br label %183

177:                                              ; preds = %172
  %178 = shl i64 %173, 1
  %179 = icmp ult i64 %178, %168
  %180 = select i1 %179, i64 %168, i64 %178
  %181 = sub i64 %5, %166
  %182 = icmp eq i64 %180, 0
  br i1 %182, label %187, label %183

183:                                              ; preds = %175, %177
  %184 = phi i64 [ %176, %175 ], [ %181, %177 ]
  %185 = phi i64 [ 9223372036854775807, %175 ], [ %180, %177 ]
  %186 = tail call i8* @_Znwm(i64 %185) #10
  br label %187

187:                                              ; preds = %177, %183
  %188 = phi i64 [ %184, %183 ], [ %181, %177 ]
  %189 = phi i64 [ %185, %183 ], [ 0, %177 ]
  %190 = phi i8* [ %186, %183 ], [ null, %177 ]
  %191 = getelementptr inbounds i8, i8* %190, i64 %188
  %192 = getelementptr inbounds i8, i8* %190, i64 %189
  %193 = getelementptr inbounds i8, i8* %191, i64 %9
  %194 = icmp ult i64 %9, 32
  br i1 %194, label %280, label %195

195:                                              ; preds = %187
  %196 = icmp ult i8* %191, %3
  %197 = icmp ugt i8* %193, %2
  %198 = and i1 %196, %197
  br i1 %198, label %280, label %199

199:                                              ; preds = %195
  %200 = and i64 %9, -32
  %201 = getelementptr i8, i8* %191, i64 %200
  %202 = getelementptr i8, i8* %2, i64 %200
  %203 = add i64 %200, -32
  %204 = lshr exact i64 %203, 5
  %205 = add nuw nsw i64 %204, 1
  %206 = and i64 %205, 3
  %207 = icmp ult i64 %203, 96
  br i1 %207, label %259, label %208

208:                                              ; preds = %199
  %209 = sub nsw i64 %205, %206
  br label %210

210:                                              ; preds = %210, %208
  %211 = phi i64 [ 0, %208 ], [ %256, %210 ]
  %212 = phi i64 [ %209, %208 ], [ %257, %210 ]
  %213 = getelementptr i8, i8* %191, i64 %211
  %214 = getelementptr i8, i8* %2, i64 %211
  %215 = bitcast i8* %214 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !12
  %217 = getelementptr i8, i8* %214, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1, !alias.scope !12
  %220 = bitcast i8* %213 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %220, align 1, !alias.scope !15, !noalias !12
  %221 = getelementptr i8, i8* %213, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %222, align 1, !alias.scope !15, !noalias !12
  %223 = or i64 %211, 32
  %224 = getelementptr i8, i8* %191, i64 %223
  %225 = getelementptr i8, i8* %2, i64 %223
  %226 = bitcast i8* %225 to <16 x i8>*
  %227 = load <16 x i8>, <16 x i8>* %226, align 1, !alias.scope !12
  %228 = getelementptr i8, i8* %225, i64 16
  %229 = bitcast i8* %228 to <16 x i8>*
  %230 = load <16 x i8>, <16 x i8>* %229, align 1, !alias.scope !12
  %231 = bitcast i8* %224 to <16 x i8>*
  store <16 x i8> %227, <16 x i8>* %231, align 1, !alias.scope !15, !noalias !12
  %232 = getelementptr i8, i8* %224, i64 16
  %233 = bitcast i8* %232 to <16 x i8>*
  store <16 x i8> %230, <16 x i8>* %233, align 1, !alias.scope !15, !noalias !12
  %234 = or i64 %211, 64
  %235 = getelementptr i8, i8* %191, i64 %234
  %236 = getelementptr i8, i8* %2, i64 %234
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1, !alias.scope !12
  %239 = getelementptr i8, i8* %236, i64 16
  %240 = bitcast i8* %239 to <16 x i8>*
  %241 = load <16 x i8>, <16 x i8>* %240, align 1, !alias.scope !12
  %242 = bitcast i8* %235 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %242, align 1, !alias.scope !15, !noalias !12
  %243 = getelementptr i8, i8* %235, i64 16
  %244 = bitcast i8* %243 to <16 x i8>*
  store <16 x i8> %241, <16 x i8>* %244, align 1, !alias.scope !15, !noalias !12
  %245 = or i64 %211, 96
  %246 = getelementptr i8, i8* %191, i64 %245
  %247 = getelementptr i8, i8* %2, i64 %245
  %248 = bitcast i8* %247 to <16 x i8>*
  %249 = load <16 x i8>, <16 x i8>* %248, align 1, !alias.scope !12
  %250 = getelementptr i8, i8* %247, i64 16
  %251 = bitcast i8* %250 to <16 x i8>*
  %252 = load <16 x i8>, <16 x i8>* %251, align 1, !alias.scope !12
  %253 = bitcast i8* %246 to <16 x i8>*
  store <16 x i8> %249, <16 x i8>* %253, align 1, !alias.scope !15, !noalias !12
  %254 = getelementptr i8, i8* %246, i64 16
  %255 = bitcast i8* %254 to <16 x i8>*
  store <16 x i8> %252, <16 x i8>* %255, align 1, !alias.scope !15, !noalias !12
  %256 = add i64 %211, 128
  %257 = add i64 %212, -4
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %259, label %210, !llvm.loop !17

259:                                              ; preds = %210, %199
  %260 = phi i64 [ 0, %199 ], [ %256, %210 ]
  %261 = icmp eq i64 %206, 0
  br i1 %261, label %278, label %262

262:                                              ; preds = %259, %262
  %263 = phi i64 [ %275, %262 ], [ %260, %259 ]
  %264 = phi i64 [ %276, %262 ], [ %206, %259 ]
  %265 = getelementptr i8, i8* %191, i64 %263
  %266 = getelementptr i8, i8* %2, i64 %263
  %267 = bitcast i8* %266 to <16 x i8>*
  %268 = load <16 x i8>, <16 x i8>* %267, align 1, !alias.scope !12
  %269 = getelementptr i8, i8* %266, i64 16
  %270 = bitcast i8* %269 to <16 x i8>*
  %271 = load <16 x i8>, <16 x i8>* %270, align 1, !alias.scope !12
  %272 = bitcast i8* %265 to <16 x i8>*
  store <16 x i8> %268, <16 x i8>* %272, align 1, !alias.scope !15, !noalias !12
  %273 = getelementptr i8, i8* %265, i64 16
  %274 = bitcast i8* %273 to <16 x i8>*
  store <16 x i8> %271, <16 x i8>* %274, align 1, !alias.scope !15, !noalias !12
  %275 = add i64 %263, 32
  %276 = add i64 %264, -1
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %278, label %262, !llvm.loop !18

278:                                              ; preds = %262, %259
  %279 = icmp eq i64 %9, %200
  br i1 %279, label %290, label %280

280:                                              ; preds = %278, %195, %187
  %281 = phi i8* [ %191, %195 ], [ %191, %187 ], [ %201, %278 ]
  %282 = phi i8* [ %2, %195 ], [ %2, %187 ], [ %202, %278 ]
  br label %283

283:                                              ; preds = %280, %283
  %284 = phi i8* [ %287, %283 ], [ %281, %280 ]
  %285 = phi i8* [ %288, %283 ], [ %282, %280 ]
  %286 = load i8, i8* %285, align 1
  store i8 %286, i8* %284, align 1
  %287 = getelementptr inbounds i8, i8* %284, i64 1
  %288 = getelementptr inbounds i8, i8* %285, i64 1
  %289 = icmp eq i8* %193, %287
  br i1 %289, label %290, label %283, !llvm.loop !19

290:                                              ; preds = %283, %278
  %291 = ptrtoint i8* %192 to i64
  %292 = load i8*, i8** %6, align 8
  %293 = ptrtoint i8* %292 to i64
  %294 = sub i64 %5, %293
  %295 = sub i64 0, %294
  %296 = getelementptr inbounds i8, i8* %191, i64 %295
  %297 = ptrtoint i8* %296 to i64
  %298 = icmp sgt i64 %294, 0
  br i1 %298, label %299, label %300

299:                                              ; preds = %290
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %296, i8* align 1 %292, i64 %294, i1 false) #9
  br label %300

300:                                              ; preds = %299, %290
  %301 = load i8*, i8** %15, align 8
  %302 = icmp eq i8* %301, %1
  br i1 %302, label %408, label %303

303:                                              ; preds = %300
  %304 = ptrtoint i8* %301 to i64
  %305 = sub i64 %304, %5
  %306 = icmp ult i64 %305, 32
  br i1 %306, label %398, label %307

307:                                              ; preds = %303
  %308 = add i64 %188, %7
  %309 = sub i64 %308, %5
  %310 = sub i64 %309, %8
  %311 = getelementptr i8, i8* %301, i64 %310
  %312 = ptrtoint i8* %311 to i64
  %313 = getelementptr i8, i8* %190, i64 %312
  %314 = icmp ult i8* %193, %301
  %315 = icmp ugt i8* %313, %1
  %316 = and i1 %314, %315
  br i1 %316, label %398, label %317

317:                                              ; preds = %307
  %318 = and i64 %305, -32
  %319 = getelementptr i8, i8* %193, i64 %318
  %320 = getelementptr i8, i8* %1, i64 %318
  %321 = add i64 %318, -32
  %322 = lshr exact i64 %321, 5
  %323 = add nuw nsw i64 %322, 1
  %324 = and i64 %323, 3
  %325 = icmp ult i64 %321, 96
  br i1 %325, label %377, label %326

326:                                              ; preds = %317
  %327 = sub nsw i64 %323, %324
  br label %328

328:                                              ; preds = %328, %326
  %329 = phi i64 [ 0, %326 ], [ %374, %328 ]
  %330 = phi i64 [ %327, %326 ], [ %375, %328 ]
  %331 = getelementptr i8, i8* %193, i64 %329
  %332 = getelementptr i8, i8* %1, i64 %329
  %333 = bitcast i8* %332 to <16 x i8>*
  %334 = load <16 x i8>, <16 x i8>* %333, align 1, !alias.scope !20
  %335 = getelementptr i8, i8* %332, i64 16
  %336 = bitcast i8* %335 to <16 x i8>*
  %337 = load <16 x i8>, <16 x i8>* %336, align 1, !alias.scope !20
  %338 = bitcast i8* %331 to <16 x i8>*
  store <16 x i8> %334, <16 x i8>* %338, align 1, !alias.scope !23, !noalias !20
  %339 = getelementptr i8, i8* %331, i64 16
  %340 = bitcast i8* %339 to <16 x i8>*
  store <16 x i8> %337, <16 x i8>* %340, align 1, !alias.scope !23, !noalias !20
  %341 = or i64 %329, 32
  %342 = getelementptr i8, i8* %193, i64 %341
  %343 = getelementptr i8, i8* %1, i64 %341
  %344 = bitcast i8* %343 to <16 x i8>*
  %345 = load <16 x i8>, <16 x i8>* %344, align 1, !alias.scope !20
  %346 = getelementptr i8, i8* %343, i64 16
  %347 = bitcast i8* %346 to <16 x i8>*
  %348 = load <16 x i8>, <16 x i8>* %347, align 1, !alias.scope !20
  %349 = bitcast i8* %342 to <16 x i8>*
  store <16 x i8> %345, <16 x i8>* %349, align 1, !alias.scope !23, !noalias !20
  %350 = getelementptr i8, i8* %342, i64 16
  %351 = bitcast i8* %350 to <16 x i8>*
  store <16 x i8> %348, <16 x i8>* %351, align 1, !alias.scope !23, !noalias !20
  %352 = or i64 %329, 64
  %353 = getelementptr i8, i8* %193, i64 %352
  %354 = getelementptr i8, i8* %1, i64 %352
  %355 = bitcast i8* %354 to <16 x i8>*
  %356 = load <16 x i8>, <16 x i8>* %355, align 1, !alias.scope !20
  %357 = getelementptr i8, i8* %354, i64 16
  %358 = bitcast i8* %357 to <16 x i8>*
  %359 = load <16 x i8>, <16 x i8>* %358, align 1, !alias.scope !20
  %360 = bitcast i8* %353 to <16 x i8>*
  store <16 x i8> %356, <16 x i8>* %360, align 1, !alias.scope !23, !noalias !20
  %361 = getelementptr i8, i8* %353, i64 16
  %362 = bitcast i8* %361 to <16 x i8>*
  store <16 x i8> %359, <16 x i8>* %362, align 1, !alias.scope !23, !noalias !20
  %363 = or i64 %329, 96
  %364 = getelementptr i8, i8* %193, i64 %363
  %365 = getelementptr i8, i8* %1, i64 %363
  %366 = bitcast i8* %365 to <16 x i8>*
  %367 = load <16 x i8>, <16 x i8>* %366, align 1, !alias.scope !20
  %368 = getelementptr i8, i8* %365, i64 16
  %369 = bitcast i8* %368 to <16 x i8>*
  %370 = load <16 x i8>, <16 x i8>* %369, align 1, !alias.scope !20
  %371 = bitcast i8* %364 to <16 x i8>*
  store <16 x i8> %367, <16 x i8>* %371, align 1, !alias.scope !23, !noalias !20
  %372 = getelementptr i8, i8* %364, i64 16
  %373 = bitcast i8* %372 to <16 x i8>*
  store <16 x i8> %370, <16 x i8>* %373, align 1, !alias.scope !23, !noalias !20
  %374 = add i64 %329, 128
  %375 = add i64 %330, -4
  %376 = icmp eq i64 %375, 0
  br i1 %376, label %377, label %328, !llvm.loop !25

377:                                              ; preds = %328, %317
  %378 = phi i64 [ 0, %317 ], [ %374, %328 ]
  %379 = icmp eq i64 %324, 0
  br i1 %379, label %396, label %380

380:                                              ; preds = %377, %380
  %381 = phi i64 [ %393, %380 ], [ %378, %377 ]
  %382 = phi i64 [ %394, %380 ], [ %324, %377 ]
  %383 = getelementptr i8, i8* %193, i64 %381
  %384 = getelementptr i8, i8* %1, i64 %381
  %385 = bitcast i8* %384 to <16 x i8>*
  %386 = load <16 x i8>, <16 x i8>* %385, align 1, !alias.scope !20
  %387 = getelementptr i8, i8* %384, i64 16
  %388 = bitcast i8* %387 to <16 x i8>*
  %389 = load <16 x i8>, <16 x i8>* %388, align 1, !alias.scope !20
  %390 = bitcast i8* %383 to <16 x i8>*
  store <16 x i8> %386, <16 x i8>* %390, align 1, !alias.scope !23, !noalias !20
  %391 = getelementptr i8, i8* %383, i64 16
  %392 = bitcast i8* %391 to <16 x i8>*
  store <16 x i8> %389, <16 x i8>* %392, align 1, !alias.scope !23, !noalias !20
  %393 = add i64 %381, 32
  %394 = add i64 %382, -1
  %395 = icmp eq i64 %394, 0
  br i1 %395, label %396, label %380, !llvm.loop !26

396:                                              ; preds = %380, %377
  %397 = icmp eq i64 %305, %318
  br i1 %397, label %408, label %398

398:                                              ; preds = %396, %307, %303
  %399 = phi i8* [ %193, %307 ], [ %193, %303 ], [ %319, %396 ]
  %400 = phi i8* [ %1, %307 ], [ %1, %303 ], [ %320, %396 ]
  br label %401

401:                                              ; preds = %398, %401
  %402 = phi i8* [ %406, %401 ], [ %399, %398 ]
  %403 = phi i8* [ %405, %401 ], [ %400, %398 ]
  %404 = load i8, i8* %403, align 1
  store i8 %404, i8* %402, align 1
  %405 = getelementptr inbounds i8, i8* %403, i64 1
  %406 = getelementptr inbounds i8, i8* %402, i64 1
  %407 = icmp eq i8* %405, %301
  br i1 %407, label %408, label %401, !llvm.loop !27

408:                                              ; preds = %401, %396, %300
  %409 = phi i8* [ %193, %300 ], [ %319, %396 ], [ %406, %401 ]
  %410 = ptrtoint i8* %409 to i64
  %411 = load i8*, i8** %6, align 8
  store i64 %297, i64* %165, align 8
  store i64 %410, i64* %20, align 8
  store i64 %291, i64* %13, align 8
  %412 = icmp eq i8* %411, null
  br i1 %412, label %414, label %413

413:                                              ; preds = %408
  tail call void @_ZdlPv(i8* nonnull %411) #10
  br label %414

414:                                              ; preds = %413, %408, %32, %159, %163, %4
  %415 = phi i8* [ %1, %4 ], [ %1, %163 ], [ %1, %159 ], [ %1, %32 ], [ %191, %408 ], [ %191, %413 ]
  ret i8* %415
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6speech17ChunkedByteBuffer6AppendEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.speech::ChunkedByteBuffer"*, i8*, i64) local_unnamed_addr #0 align 2 {
  tail call void @_ZN6speech17ChunkedByteBuffer6AppendEPKhm(%"class.speech::ChunkedByteBuffer"* %0, i8* %1, i64 %2)
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK6speech17ChunkedByteBuffer9HasChunksEv(%"class.speech::ChunkedByteBuffer"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.speech::ChunkedByteBuffer", %"class.speech::ChunkedByteBuffer"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %2, align 8
  %4 = getelementptr inbounds %"class.speech::ChunkedByteBuffer", %"class.speech::ChunkedByteBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %4, align 8
  %6 = icmp ne %"class.std::__1::unique_ptr"* %3, %5
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.std::__1::vector.0"* @_ZN6speech17ChunkedByteBuffer8PopChunkEv(%"class.speech::ChunkedByteBuffer"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.speech::ChunkedByteBuffer", %"class.speech::ChunkedByteBuffer"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %2, align 8
  %4 = getelementptr inbounds %"class.speech::ChunkedByteBuffer", %"class.speech::ChunkedByteBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %4, align 8
  %6 = icmp eq %"class.std::__1::unique_ptr"* %3, %5
  br i1 %6, label %40, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.speech::ChunkedByteBuffer", %"class.speech::ChunkedByteBuffer"* %0, i64 0, i32 0
  %9 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %3, i64 0, i32 0, i32 0, i32 0
  %10 = load %"struct.speech::ChunkedByteBuffer::Chunk"*, %"struct.speech::ChunkedByteBuffer::Chunk"** %9, align 8
  store %"struct.speech::ChunkedByteBuffer::Chunk"* null, %"struct.speech::ChunkedByteBuffer::Chunk"** %9, align 8
  %11 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %2, align 8
  %12 = tail call %"class.std::__1::unique_ptr"* @_ZNSt3__16vectorINS_10unique_ptrIN6speech17ChunkedByteBuffer5ChunkENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE5eraseENS_11__wrap_iterIPKS7_EE(%"class.std::__1::vector"* %8, %"class.std::__1::unique_ptr"* %11)
  %13 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %10, i64 0, i32 1
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr.5", %"class.std::__1::unique_ptr.5"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %15, i64 0, i32 0, i32 1
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.std::__1::vector.0"* %15 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.speech::ChunkedByteBuffer", %"class.speech::ChunkedByteBuffer"* %0, i64 0, i32 2
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 -4, %18
  %24 = add i64 %23, %20
  %25 = add i64 %24, %22
  store i64 %25, i64* %21, align 8
  %26 = bitcast %"class.std::__1::unique_ptr.5"* %13 to i64*
  %27 = load i64, i64* %26, align 8
  store %"class.std::__1::vector.0"* null, %"class.std::__1::vector.0"** %14, align 8
  %28 = icmp eq %"struct.speech::ChunkedByteBuffer::Chunk"* %10, null
  br i1 %28, label %40, label %29

29:                                               ; preds = %7
  %30 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %10, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.std::__1::vector.0"* null, %"class.std::__1::vector.0"** %30, align 8
  %31 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %10, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %38, label %34

34:                                               ; preds = %29
  %35 = ptrtoint i8* %32 to i64
  %36 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %10, i64 0, i32 0, i32 0, i32 1
  %37 = bitcast i8** %36 to i64*
  store i64 %35, i64* %37, align 8
  tail call void @_ZdlPv(i8* nonnull %32) #10
  br label %38

38:                                               ; preds = %34, %29
  %39 = bitcast %"struct.speech::ChunkedByteBuffer::Chunk"* %10 to i8*
  tail call void @_ZdlPv(i8* %39) #10
  br label %40

40:                                               ; preds = %38, %7, %1
  %41 = phi i64 [ 0, %1 ], [ %27, %7 ], [ %27, %38 ]
  %42 = inttoptr i64 %41 to %"class.std::__1::vector.0"*
  ret %"class.std::__1::vector.0"* %42
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::unique_ptr"* @_ZNSt3__16vectorINS_10unique_ptrIN6speech17ChunkedByteBuffer5ChunkENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE5eraseENS_11__wrap_iterIPKS7_EE(%"class.std::__1::vector"*, %"class.std::__1::unique_ptr"*) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1, i64 1
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %5 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %4, align 8
  %6 = icmp eq %"class.std::__1::unique_ptr"* %3, %5
  br i1 %6, label %48, label %7

7:                                                ; preds = %2, %41
  %8 = phi %"class.std::__1::unique_ptr"* [ %43, %41 ], [ %1, %2 ]
  %9 = phi %"class.std::__1::unique_ptr"* [ %42, %41 ], [ %3, %2 ]
  %10 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %9, i64 0, i32 0, i32 0, i32 0
  %11 = bitcast %"class.std::__1::unique_ptr"* %9 to i64*
  %12 = load i64, i64* %11, align 8
  store %"struct.speech::ChunkedByteBuffer::Chunk"* null, %"struct.speech::ChunkedByteBuffer::Chunk"** %10, align 8
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %8, i64 0, i32 0, i32 0, i32 0
  %14 = load %"struct.speech::ChunkedByteBuffer::Chunk"*, %"struct.speech::ChunkedByteBuffer::Chunk"** %13, align 8
  %15 = bitcast %"class.std::__1::unique_ptr"* %8 to i64*
  store i64 %12, i64* %15, align 8
  %16 = icmp eq %"struct.speech::ChunkedByteBuffer::Chunk"* %14, null
  br i1 %16, label %41, label %17

17:                                               ; preds = %7
  %18 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %14, i64 0, i32 1, i32 0, i32 0, i32 0
  %19 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %18, align 8
  store %"class.std::__1::vector.0"* null, %"class.std::__1::vector.0"** %18, align 8
  %20 = icmp eq %"class.std::__1::vector.0"* %19, null
  br i1 %20, label %31, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %19, i64 0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = icmp eq i8* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = ptrtoint i8* %23 to i64
  %27 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %19, i64 0, i32 0, i32 1
  %28 = bitcast i8** %27 to i64*
  store i64 %26, i64* %28, align 8
  tail call void @_ZdlPv(i8* nonnull %23) #10
  br label %29

29:                                               ; preds = %25, %21
  %30 = bitcast %"class.std::__1::vector.0"* %19 to i8*
  tail call void @_ZdlPv(i8* %30) #10
  br label %31

31:                                               ; preds = %29, %17
  %32 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %14, i64 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = ptrtoint i8* %33 to i64
  %37 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %14, i64 0, i32 0, i32 0, i32 1
  %38 = bitcast i8** %37 to i64*
  store i64 %36, i64* %38, align 8
  tail call void @_ZdlPv(i8* nonnull %33) #10
  br label %39

39:                                               ; preds = %35, %31
  %40 = bitcast %"struct.speech::ChunkedByteBuffer::Chunk"* %14 to i8*
  tail call void @_ZdlPv(i8* %40) #10
  br label %41

41:                                               ; preds = %39, %7
  %42 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %9, i64 1
  %43 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %8, i64 1
  %44 = icmp eq %"class.std::__1::unique_ptr"* %42, %5
  br i1 %44, label %45, label %7

45:                                               ; preds = %41
  %46 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %4, align 8
  %47 = icmp eq %"class.std::__1::unique_ptr"* %46, %43
  br i1 %47, label %83, label %48

48:                                               ; preds = %2, %45
  %49 = phi %"class.std::__1::unique_ptr"* [ %43, %45 ], [ %1, %2 ]
  %50 = phi %"class.std::__1::unique_ptr"* [ %46, %45 ], [ %3, %2 ]
  br label %51

51:                                               ; preds = %48, %81
  %52 = phi %"class.std::__1::unique_ptr"* [ %53, %81 ], [ %50, %48 ]
  %53 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %52, i64 -1
  %54 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %53, i64 0, i32 0, i32 0, i32 0
  %55 = load %"struct.speech::ChunkedByteBuffer::Chunk"*, %"struct.speech::ChunkedByteBuffer::Chunk"** %54, align 8
  store %"struct.speech::ChunkedByteBuffer::Chunk"* null, %"struct.speech::ChunkedByteBuffer::Chunk"** %54, align 8
  %56 = icmp eq %"struct.speech::ChunkedByteBuffer::Chunk"* %55, null
  br i1 %56, label %81, label %57

57:                                               ; preds = %51
  %58 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %55, i64 0, i32 1, i32 0, i32 0, i32 0
  %59 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %58, align 8
  store %"class.std::__1::vector.0"* null, %"class.std::__1::vector.0"** %58, align 8
  %60 = icmp eq %"class.std::__1::vector.0"* %59, null
  br i1 %60, label %71, label %61

61:                                               ; preds = %57
  %62 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %59, i64 0, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = icmp eq i8* %63, null
  br i1 %64, label %69, label %65

65:                                               ; preds = %61
  %66 = ptrtoint i8* %63 to i64
  %67 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %59, i64 0, i32 0, i32 1
  %68 = bitcast i8** %67 to i64*
  store i64 %66, i64* %68, align 8
  tail call void @_ZdlPv(i8* nonnull %63) #10
  br label %69

69:                                               ; preds = %65, %61
  %70 = bitcast %"class.std::__1::vector.0"* %59 to i8*
  tail call void @_ZdlPv(i8* %70) #10
  br label %71

71:                                               ; preds = %69, %57
  %72 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %55, i64 0, i32 0, i32 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = icmp eq i8* %73, null
  br i1 %74, label %79, label %75

75:                                               ; preds = %71
  %76 = ptrtoint i8* %73 to i64
  %77 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %55, i64 0, i32 0, i32 0, i32 1
  %78 = bitcast i8** %77 to i64*
  store i64 %76, i64* %78, align 8
  tail call void @_ZdlPv(i8* nonnull %73) #10
  br label %79

79:                                               ; preds = %75, %71
  %80 = bitcast %"struct.speech::ChunkedByteBuffer::Chunk"* %55 to i8*
  tail call void @_ZdlPv(i8* %80) #10
  br label %81

81:                                               ; preds = %79, %51
  %82 = icmp eq %"class.std::__1::unique_ptr"* %53, %49
  br i1 %82, label %83, label %51

83:                                               ; preds = %81, %45
  %84 = phi %"class.std::__1::unique_ptr"* [ %43, %45 ], [ %49, %81 ]
  store %"class.std::__1::unique_ptr"* %84, %"class.std::__1::unique_ptr"** %4, align 8
  ret %"class.std::__1::unique_ptr"* %1
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6speech17ChunkedByteBuffer5ChunkC2Ev(%"struct.speech::ChunkedByteBuffer::Chunk"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"struct.speech::ChunkedByteBuffer::Chunk"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false) #9
  %3 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %0, i64 0, i32 1
  %4 = tail call i8* @_Znwm(i64 24) #10
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 24, i1 false) #9
  %5 = ptrtoint i8* %4 to i64
  %6 = bitcast %"class.std::__1::unique_ptr.5"* %3 to i64*
  store i64 %5, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6speech17ChunkedByteBuffer5ChunkD2Ev(%"struct.speech::ChunkedByteBuffer::Chunk"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %2, align 8
  store %"class.std::__1::vector.0"* null, %"class.std::__1::vector.0"** %2, align 8
  %4 = icmp eq %"class.std::__1::vector.0"* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %3, i64 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %13, label %9

9:                                                ; preds = %5
  %10 = ptrtoint i8* %7 to i64
  %11 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %3, i64 0, i32 0, i32 1
  %12 = bitcast i8** %11 to i64*
  store i64 %10, i64* %12, align 8
  tail call void @_ZdlPv(i8* nonnull %7) #10
  br label %13

13:                                               ; preds = %9, %5
  %14 = bitcast %"class.std::__1::vector.0"* %3 to i8*
  tail call void @_ZdlPv(i8* %14) #10
  br label %15

15:                                               ; preds = %1, %13
  %16 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %0, i64 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %23, label %19

19:                                               ; preds = %15
  %20 = ptrtoint i8* %17 to i64
  %21 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %0, i64 0, i32 0, i32 0, i32 1
  %22 = bitcast i8** %21 to i64*
  store i64 %20, i64* %22, align 8
  tail call void @_ZdlPv(i8* nonnull %17) #10
  br label %23

23:                                               ; preds = %15, %19
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIN6speech17ChunkedByteBuffer5ChunkENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_(%"class.std::__1::vector"*, %"class.std::__1::unique_ptr"* dereferenceable(8)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #11
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::unique_ptr"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #11
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #10
  %33 = bitcast i8* %32 to %"class.std::__1::unique_ptr"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.std::__1::unique_ptr"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 %9
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 %35
  %39 = ptrtoint %"class.std::__1::unique_ptr"* %38 to i64
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"class.std::__1::unique_ptr"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  store %"struct.speech::ChunkedByteBuffer::Chunk"* null, %"struct.speech::ChunkedByteBuffer::Chunk"** %40, align 8
  %43 = bitcast %"class.std::__1::unique_ptr"* %37 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %37, i64 1
  %45 = ptrtoint %"class.std::__1::unique_ptr"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %46, align 8
  %48 = ptrtoint %"class.std::__1::unique_ptr"* %47 to i64
  %49 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %3, align 8
  %50 = icmp eq %"class.std::__1::unique_ptr"* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 -1, i32 0, i32 0, i32 0
  %53 = ptrtoint %"struct.speech::ChunkedByteBuffer::Chunk"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %"class.std::__1::unique_ptr"* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %"class.std::__1::unique_ptr"* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %60, i64 -1
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %61, i64 -1
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store %"struct.speech::ChunkedByteBuffer::Chunk"* null, %"struct.speech::ChunkedByteBuffer::Chunk"** %65, align 8
  %68 = bitcast %"class.std::__1::unique_ptr"* %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !28

71:                                               ; preds = %59, %51
  %72 = phi %"class.std::__1::unique_ptr"* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %"class.std::__1::unique_ptr"* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %"class.std::__1::unique_ptr"* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %"class.std::__1::unique_ptr"* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %"class.std::__1::unique_ptr"* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -1
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  store %"struct.speech::ChunkedByteBuffer::Chunk"* null, %"struct.speech::ChunkedByteBuffer::Chunk"** %81, align 8
  %84 = bitcast %"class.std::__1::unique_ptr"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -2
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -2
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store %"struct.speech::ChunkedByteBuffer::Chunk"* null, %"struct.speech::ChunkedByteBuffer::Chunk"** %87, align 8
  %90 = bitcast %"class.std::__1::unique_ptr"* %85 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -3
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -3
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store %"struct.speech::ChunkedByteBuffer::Chunk"* null, %"struct.speech::ChunkedByteBuffer::Chunk"** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -4
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -4
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.std::__1::unique_ptr"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  store %"struct.speech::ChunkedByteBuffer::Chunk"* null, %"struct.speech::ChunkedByteBuffer::Chunk"** %99, align 8
  %102 = bitcast %"class.std::__1::unique_ptr"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -5
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -5
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store %"struct.speech::ChunkedByteBuffer::Chunk"* null, %"struct.speech::ChunkedByteBuffer::Chunk"** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -6
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -6
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = bitcast %"class.std::__1::unique_ptr"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  store %"struct.speech::ChunkedByteBuffer::Chunk"* null, %"struct.speech::ChunkedByteBuffer::Chunk"** %111, align 8
  %114 = bitcast %"class.std::__1::unique_ptr"* %109 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -7
  %116 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -7
  %117 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.std::__1::unique_ptr"* %116 to i64*
  %119 = load i64, i64* %118, align 8
  store %"struct.speech::ChunkedByteBuffer::Chunk"* null, %"struct.speech::ChunkedByteBuffer::Chunk"** %117, align 8
  %120 = bitcast %"class.std::__1::unique_ptr"* %115 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %77, i64 -8
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 -8
  %123 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.std::__1::unique_ptr"* %122 to i64*
  %125 = load i64, i64* %124, align 8
  store %"struct.speech::ChunkedByteBuffer::Chunk"* null, %"struct.speech::ChunkedByteBuffer::Chunk"** %123, align 8
  %126 = bitcast %"class.std::__1::unique_ptr"* %121 to i64*
  store i64 %125, i64* %126, align 8
  %127 = icmp eq %"class.std::__1::unique_ptr"* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %"class.std::__1::unique_ptr"* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.std::__1::unique_ptr"* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %"class.std::__1::unique_ptr"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %"class.std::__1::unique_ptr"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.std::__1::unique_ptr"*
  %138 = icmp eq %"class.std::__1::unique_ptr"* %133, %137
  br i1 %138, label %171, label %139

139:                                              ; preds = %132, %169
  %140 = phi %"class.std::__1::unique_ptr"* [ %141, %169 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %140, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = load %"struct.speech::ChunkedByteBuffer::Chunk"*, %"struct.speech::ChunkedByteBuffer::Chunk"** %142, align 8
  store %"struct.speech::ChunkedByteBuffer::Chunk"* null, %"struct.speech::ChunkedByteBuffer::Chunk"** %142, align 8
  %144 = icmp eq %"struct.speech::ChunkedByteBuffer::Chunk"* %143, null
  br i1 %144, label %169, label %145

145:                                              ; preds = %139
  %146 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %143, i64 0, i32 1, i32 0, i32 0, i32 0
  %147 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %146, align 8
  store %"class.std::__1::vector.0"* null, %"class.std::__1::vector.0"** %146, align 8
  %148 = icmp eq %"class.std::__1::vector.0"* %147, null
  br i1 %148, label %159, label %149

149:                                              ; preds = %145
  %150 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %147, i64 0, i32 0, i32 0
  %151 = load i8*, i8** %150, align 8
  %152 = icmp eq i8* %151, null
  br i1 %152, label %157, label %153

153:                                              ; preds = %149
  %154 = ptrtoint i8* %151 to i64
  %155 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %147, i64 0, i32 0, i32 1
  %156 = bitcast i8** %155 to i64*
  store i64 %154, i64* %156, align 8
  tail call void @_ZdlPv(i8* nonnull %151) #10
  br label %157

157:                                              ; preds = %153, %149
  %158 = bitcast %"class.std::__1::vector.0"* %147 to i8*
  tail call void @_ZdlPv(i8* %158) #10
  br label %159

159:                                              ; preds = %157, %145
  %160 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %143, i64 0, i32 0, i32 0, i32 0
  %161 = load i8*, i8** %160, align 8
  %162 = icmp eq i8* %161, null
  br i1 %162, label %167, label %163

163:                                              ; preds = %159
  %164 = ptrtoint i8* %161 to i64
  %165 = getelementptr inbounds %"struct.speech::ChunkedByteBuffer::Chunk", %"struct.speech::ChunkedByteBuffer::Chunk"* %143, i64 0, i32 0, i32 0, i32 1
  %166 = bitcast i8** %165 to i64*
  store i64 %164, i64* %166, align 8
  tail call void @_ZdlPv(i8* nonnull %161) #10
  br label %167

167:                                              ; preds = %163, %159
  %168 = bitcast %"struct.speech::ChunkedByteBuffer::Chunk"* %143 to i8*
  tail call void @_ZdlPv(i8* %168) #10
  br label %169

169:                                              ; preds = %167, %139
  %170 = icmp eq %"class.std::__1::unique_ptr"* %141, %137
  br i1 %170, label %171, label %139

171:                                              ; preds = %169, %132
  %172 = icmp eq i64 %135, 0
  br i1 %172, label %175, label %173

173:                                              ; preds = %171
  %174 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %174) #10
  br label %175

175:                                              ; preds = %171, %173
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !8}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !8}
!26 = distinct !{!26, !10}
!27 = distinct !{!27, !8}
!28 = distinct !{!28, !10}
