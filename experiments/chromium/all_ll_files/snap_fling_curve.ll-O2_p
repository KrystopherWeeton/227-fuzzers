; ModuleID = '../../cc/input/snap_fling_curve.cc'
source_filename = "../../cc/input/snap_fling_curve.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::TimeDelta" = type { i64 }
%"class.cc::SnapFlingCurve" = type { i32 (...)**, %"class.gfx::Vector2dF", %"class.gfx::Vector2dF", double, %"class.gfx::Vector2dF", %"class.base::TimeTicks", double, double, %"class.base::TimeDelta", i8, double, double }
%"class.gfx::Vector2dF" = type { float, float }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

$_ZNK4base9TimeDeltadvES0_ = comdat any

@_ZTVN2cc14SnapFlingCurveE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.cc::SnapFlingCurve"*)* @_ZN2cc14SnapFlingCurveD2Ev to i8*), i8* bitcast (void (%"class.cc::SnapFlingCurve"*)* @_ZN2cc14SnapFlingCurveD0Ev to i8*), i8* bitcast (<2 x float> (%"class.cc::SnapFlingCurve"*, i64)* @_ZN2cc14SnapFlingCurve14GetScrollDeltaEN4base9TimeTicksE to i8*), i8* bitcast (i1 (%"class.cc::SnapFlingCurve"*)* @_ZNK2cc14SnapFlingCurve10IsFinishedEv to i8*)] }, align 8
@_ZN2cc12_GLOBAL__N_120kMaximumSnapDurationE = internal unnamed_addr constant %"class.base::TimeDelta" { i64 5000000 }, align 8
@.str = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"!is_zero() || !a.is_zero()\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"!is_inf() || !a.is_inf()\00", align 1

@_ZN2cc14SnapFlingCurveC1ERKN3gfx9Vector2dFES4_N4base9TimeTicksE = hidden unnamed_addr alias void (%"class.cc::SnapFlingCurve"*, %"class.gfx::Vector2dF"*, %"class.gfx::Vector2dF"*, i64), void (%"class.cc::SnapFlingCurve"*, %"class.gfx::Vector2dF"*, %"class.gfx::Vector2dF"*, i64)* @_ZN2cc14SnapFlingCurveC2ERKN3gfx9Vector2dFES4_N4base9TimeTicksE
@_ZN2cc14SnapFlingCurveD1Ev = hidden unnamed_addr alias void (%"class.cc::SnapFlingCurve"*), void (%"class.cc::SnapFlingCurve"*)* @_ZN2cc14SnapFlingCurveD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden <2 x float> @_ZN2cc14SnapFlingCurve20EstimateDisplacementERKN3gfx9Vector2dFE(%"class.gfx::Vector2dF"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %2 = alloca i64, align 8
  %3 = bitcast i64* %2 to %"class.gfx::Vector2dF"*
  %4 = bitcast %"class.gfx::Vector2dF"* %0 to i64*
  %5 = load i64, i64* %4, align 4
  store i64 %5, i64* %2, align 8
  call void @_ZN3gfx9Vector2dF5ScaleEff(%"class.gfx::Vector2dF"* nonnull %3, float 2.500000e+01, float 2.500000e+01) #10
  %6 = bitcast i64* %2 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 8
  ret <2 x float> %7
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc14SnapFlingCurveC2ERKN3gfx9Vector2dFES4_N4base9TimeTicksE(%"class.cc::SnapFlingCurve"* nocapture, %"class.gfx::Vector2dF"* nocapture readonly dereferenceable(8), %"class.gfx::Vector2dF"* nocapture readonly dereferenceable(8), i64) unnamed_addr #0 align 2 {
  %5 = alloca i64, align 8
  %6 = alloca <2 x float>, align 8
  %7 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2cc14SnapFlingCurveE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 1
  %9 = bitcast %"class.gfx::Vector2dF"* %1 to i64*
  %10 = bitcast %"class.gfx::Vector2dF"* %8 to i64*
  %11 = load i64, i64* %9, align 4
  store i64 %11, i64* %10, align 8
  %12 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 2
  %13 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13)
  %14 = bitcast i64* %5 to %"class.gfx::Vector2dF"*
  %15 = bitcast <2 x float>* %6 to %"class.gfx::Vector2dF"*
  %16 = bitcast %"class.gfx::Vector2dF"* %2 to i64*
  %17 = load i64, i64* %16, align 4
  store i64 %17, i64* %5, align 8
  %18 = bitcast <2 x float>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #10
  %19 = bitcast %"class.gfx::Vector2dF"* %1 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %20
  store <2 x float> %21, <2 x float>* %6, align 8
  call void @_ZN3gfx9Vector2dF3AddERKS0_(%"class.gfx::Vector2dF"* nonnull %14, %"class.gfx::Vector2dF"* nonnull dereferenceable(8) %15) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #10
  %22 = bitcast i64* %5 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13)
  %24 = bitcast %"class.gfx::Vector2dF"* %12 to <2 x float>*
  store <2 x float> %23, <2 x float>* %24, align 8
  %25 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 3
  %26 = extractelement <2 x float> %23, i32 0
  %27 = extractelement <2 x float> %23, i32 1
  %28 = call float @hypotf(float %26, float %27) #10
  %29 = fpext float %28 to double
  store double %29, double* %25, align 8
  %30 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 4, i32 0
  store float 0.000000e+00, float* %30, align 4
  %31 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 4, i32 1
  store float 0.000000e+00, float* %31, align 4
  %32 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 5, i32 0, i32 0
  store i64 %3, i64* %32, align 8
  %33 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 6
  %34 = fmul double %29, 0x3FB642C8590B2160
  %35 = fadd double %34, 1.000000e+00
  %36 = call double @log(double %35) #10
  %37 = fdiv double %36, 0x3FB5587F437B2869
  %38 = call double @llvm.ceil.f64(double %37) #10
  store double %38, double* %33, align 8
  %39 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 7
  %40 = load double, double* %25, align 8
  %41 = fmul double %40, 0x3FB47AE147AE1478
  %42 = call double @pow(double 9.200000e-01, double %38) #10
  %43 = fsub double 1.000000e+00, %42
  %44 = fdiv double %41, %43
  store double %44, double* %39, align 8
  %45 = load double, double* %33, align 8
  %46 = fmul double %45, 1.600000e+04
  %47 = fcmp oge double %46, 0xC3E0000000000000
  %48 = fcmp ole double %46, 0x43DFFFFFFFFFFFFF
  %49 = and i1 %48, %47
  %50 = fptosi double %46 to i64
  %51 = fcmp uge double %45, 0.000000e+00
  %52 = select i1 %51, i64 9223372036854775807, i64 -9223372036854775808
  %53 = select i1 %49, i64 %50, i64 %52
  %54 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 8, i32 0
  store i64 %53, i64* %54, align 8
  %55 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 9
  %56 = load double, double* %25, align 8
  %57 = fcmp oeq double %56, 0.000000e+00
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %55, align 8
  br i1 %57, label %68, label %59

59:                                               ; preds = %4
  %60 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 10
  %61 = bitcast %"class.gfx::Vector2dF"* %12 to <2 x float>*
  %62 = load <2 x float>, <2 x float>* %61, align 4
  %63 = fpext <2 x float> %62 to <2 x double>
  %64 = insertelement <2 x double> undef, double %56, i32 0
  %65 = shufflevector <2 x double> %64, <2 x double> undef, <2 x i32> zeroinitializer
  %66 = fdiv <2 x double> %63, %65
  %67 = bitcast double* %60 to <2 x double>*
  store <2 x double> %66, <2 x double>* %67, align 8
  br label %68

68:                                               ; preds = %4, %59
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2cc14SnapFlingCurveD2Ev(%"class.cc::SnapFlingCurve"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc14SnapFlingCurveD0Ev(%"class.cc::SnapFlingCurve"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.cc::SnapFlingCurve"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2cc14SnapFlingCurve23GetCurrentCurveDistanceEN4base9TimeDeltaE(%"class.cc::SnapFlingCurve"* nocapture readonly, i64) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.base::TimeDelta", align 8
  %4 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %3, i64 0, i32 0
  store i64 %1, i64* %4, align 8
  %5 = call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* nonnull %3, i64 16000)
  %6 = fadd double %5, 1.000000e+00
  %7 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 7
  %8 = load double, double* %7, align 8
  %9 = call double @pow(double 9.200000e-01, double %6) #10
  %10 = fsub double 1.000000e+00, %9
  %11 = fmul double %8, %10
  %12 = fdiv double %11, 0x3FB47AE147AE1478
  %13 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 3
  %14 = load double, double* %13, align 8
  %15 = fcmp olt double %14, %12
  %16 = select i1 %15, double %14, double %12
  ret double %16
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = or i64 %6, %1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %2
  %10 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 302, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0)) #10
  %11 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #10
  %12 = load i64, i64* %5, align 8
  br label %13

13:                                               ; preds = %2, %9
  %14 = phi i64 [ %6, %2 ], [ %12, %9 ]
  %15 = add i64 %14, -9223372036854775807
  %16 = add i64 %1, -9223372036854775807
  %17 = or i64 %15, %16
  %18 = icmp ult i64 %17, 2
  br i1 %18, label %19, label %24

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 303, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)) #10
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  %22 = load i64, i64* %5, align 8
  %23 = add i64 %22, -9223372036854775807
  br label %24

24:                                               ; preds = %13, %19
  %25 = phi i64 [ %15, %13 ], [ %23, %19 ]
  %26 = phi i64 [ %14, %13 ], [ %22, %19 ]
  %27 = icmp ult i64 %25, 2
  %28 = icmp slt i64 %26, 0
  %29 = select i1 %28, double 0xFFF0000000000000, double 0x7FF0000000000000
  %30 = sitofp i64 %26 to double
  %31 = select i1 %27, double %29, double %30
  %32 = icmp ult i64 %16, 2
  %33 = icmp slt i64 %1, 0
  %34 = select i1 %33, double 0xFFF0000000000000, double 0x7FF0000000000000
  %35 = sitofp i64 %1 to double
  %36 = select i1 %32, double %34, double %35
  %37 = fdiv double %31, %36
  ret double %37
}

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden <2 x float> @_ZN2cc14SnapFlingCurve14GetScrollDeltaEN4base9TimeTicksE(%"class.cc::SnapFlingCurve"* nocapture, i64) unnamed_addr #0 align 2 {
  %3 = alloca i64, align 8
  %4 = alloca <2 x float>, align 8
  %5 = alloca %"class.base::TimeDelta", align 8
  %6 = alloca i64, align 8
  %7 = alloca <2 x float>, align 8
  %8 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 9
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %100

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 5, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = sub nsw i64 %1, %13
  %15 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 8
  %16 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %15, i64 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = icmp sgt i64 %17, 5000000
  %19 = select i1 %18, %"class.base::TimeDelta"* @_ZN2cc12_GLOBAL__N_120kMaximumSnapDurationE, %"class.base::TimeDelta"* %15
  %20 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %19, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = icmp slt i64 %14, %21
  br i1 %22, label %29, label %23

23:                                               ; preds = %11
  %24 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 2
  %25 = bitcast %"class.gfx::Vector2dF"* %24 to i64*
  %26 = load i64, i64* %25, align 4
  %27 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 4, i32 0
  %28 = load float, float* %27, align 4
  br label %49

29:                                               ; preds = %11
  %30 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 4
  %31 = bitcast %"class.gfx::Vector2dF"* %30 to <2 x float>*
  %32 = load <2 x float>, <2 x float>* %31, align 8
  %33 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 2
  %34 = bitcast %"class.gfx::Vector2dF"* %33 to <2 x float>*
  %35 = load <2 x float>, <2 x float>* %34, align 8
  %36 = extractelement <2 x float> %32, i32 0
  %37 = extractelement <2 x float> %35, i32 0
  %38 = fsub float %36, %37
  %39 = tail call float @llvm.fabs.f32(float %38) #10
  %40 = fcmp olt float %39, 1.000000e+00
  br i1 %40, label %41, label %61

41:                                               ; preds = %29
  %42 = extractelement <2 x float> %32, i32 0
  %43 = bitcast <2 x float> %35 to i64
  %44 = extractelement <2 x float> %32, i32 1
  %45 = extractelement <2 x float> %35, i32 1
  %46 = fsub float %44, %45
  %47 = tail call float @llvm.fabs.f32(float %46) #10
  %48 = fcmp olt float %47, 1.000000e+00
  br i1 %48, label %49, label %61

49:                                               ; preds = %41, %23
  %50 = phi float [ %28, %23 ], [ %42, %41 ]
  %51 = phi i64 [ %26, %23 ], [ %43, %41 ]
  store i8 1, i8* %8, align 8
  %52 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52)
  %53 = bitcast i64* %3 to %"class.gfx::Vector2dF"*
  %54 = bitcast <2 x float>* %4 to %"class.gfx::Vector2dF"*
  store i64 %51, i64* %3, align 8
  %55 = bitcast <2 x float>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %55) #10
  %56 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 4, i32 1
  %57 = load float, float* %56, align 4
  %58 = insertelement <2 x float> undef, float %50, i32 0
  %59 = insertelement <2 x float> %58, float %57, i32 1
  %60 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %59
  store <2 x float> %60, <2 x float>* %4, align 8
  call void @_ZN3gfx9Vector2dF3AddERKS0_(%"class.gfx::Vector2dF"* nonnull %53, %"class.gfx::Vector2dF"* nonnull dereferenceable(8) %54) #10
  br label %94

61:                                               ; preds = %29, %41
  %62 = bitcast %"class.base::TimeDelta"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %62)
  %63 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %5, i64 0, i32 0
  store i64 %14, i64* %63, align 8
  %64 = call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* nonnull %5, i64 16000) #10
  %65 = fadd double %64, 1.000000e+00
  %66 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 7
  %67 = load double, double* %66, align 8
  %68 = call double @pow(double 9.200000e-01, double %65) #10
  %69 = fsub double 1.000000e+00, %68
  %70 = fmul double %67, %69
  %71 = fdiv double %70, 0x3FB47AE147AE1478
  %72 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 3
  %73 = load double, double* %72, align 8
  %74 = fcmp olt double %73, %71
  %75 = select i1 %74, double %73, double %71
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %62)
  %76 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 10
  %77 = load double, double* %76, align 8
  %78 = fmul double %77, %75
  %79 = fptrunc double %78 to float
  %80 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 11
  %81 = load double, double* %80, align 8
  %82 = fmul double %81, %75
  %83 = fptrunc double %82 to float
  %84 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %84)
  %85 = bitcast i64* %6 to %"class.gfx::Vector2dF"*
  %86 = bitcast <2 x float>* %7 to %"class.gfx::Vector2dF"*
  %87 = bitcast i64* %6 to float*
  store float %79, float* %87, align 8
  %88 = getelementptr inbounds i8, i8* %84, i64 4
  %89 = bitcast i8* %88 to float*
  store float %83, float* %89, align 4
  %90 = bitcast <2 x float>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %90) #10
  %91 = bitcast %"class.gfx::Vector2dF"* %30 to <2 x float>*
  %92 = load <2 x float>, <2 x float>* %91, align 4
  %93 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %92
  store <2 x float> %93, <2 x float>* %7, align 8
  call void @_ZN3gfx9Vector2dF3AddERKS0_(%"class.gfx::Vector2dF"* nonnull %85, %"class.gfx::Vector2dF"* nonnull dereferenceable(8) %86) #10
  br label %94

94:                                               ; preds = %61, %49
  %95 = phi i8* [ %55, %49 ], [ %90, %61 ]
  %96 = phi i64* [ %3, %49 ], [ %6, %61 ]
  %97 = phi i8* [ %52, %49 ], [ %84, %61 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %95) #10
  %98 = bitcast i64* %96 to <2 x float>*
  %99 = load <2 x float>, <2 x float>* %98, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %97)
  br label %100

100:                                              ; preds = %94, %2
  %101 = phi <2 x float> [ zeroinitializer, %2 ], [ %99, %94 ]
  ret <2 x float> %101
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc14SnapFlingCurve19UpdateCurrentOffsetERKN3gfx9Vector2dFE(%"class.cc::SnapFlingCurve"* nocapture, %"class.gfx::Vector2dF"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca i64, align 8
  %4 = alloca <2 x float>, align 8
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5)
  %6 = bitcast i64* %3 to %"class.gfx::Vector2dF"*
  %7 = bitcast <2 x float>* %4 to %"class.gfx::Vector2dF"*
  %8 = bitcast %"class.gfx::Vector2dF"* %1 to i64*
  %9 = load i64, i64* %8, align 4
  store i64 %9, i64* %3, align 8
  %10 = bitcast <2 x float>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #10
  %11 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 1, i32 0
  %12 = bitcast float* %11 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %13
  store <2 x float> %14, <2 x float>* %4, align 8
  call void @_ZN3gfx9Vector2dF3AddERKS0_(%"class.gfx::Vector2dF"* nonnull %6, %"class.gfx::Vector2dF"* nonnull dereferenceable(8) %7) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #10
  %15 = load i64, i64* %3, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5)
  %16 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 4
  %17 = bitcast %"class.gfx::Vector2dF"* %16 to i64*
  store i64 %15, i64* %17, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc14SnapFlingCurve10IsFinishedEv(%"class.cc::SnapFlingCurve"* nocapture readonly) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.cc::SnapFlingCurve", %"class.cc::SnapFlingCurve"* %0, i64 0, i32 9
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

declare void @_ZN3gfx9Vector2dF5ScaleEff(%"class.gfx::Vector2dF"*, float, float) local_unnamed_addr #7

declare void @_ZN3gfx9Vector2dF3AddERKS0_(%"class.gfx::Vector2dF"*, %"class.gfx::Vector2dF"* dereferenceable(8)) local_unnamed_addr #7

; Function Attrs: nounwind
declare float @hypotf(float, float) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #9

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #7

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
