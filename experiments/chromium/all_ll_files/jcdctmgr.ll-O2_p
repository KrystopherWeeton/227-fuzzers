; ModuleID = '../../third_party/libjpeg_turbo/jcdctmgr.c'
source_filename = "../../third_party/libjpeg_turbo/jcdctmgr.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_compress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_destination_mgr*, i32, i32, i32, i32, double, i32, i32, i32, %struct.jpeg_component_info*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], [16 x i8], [16 x i8], [16 x i8], i32, %struct.jpeg_scan_info*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, %struct.jpeg_comp_master*, %struct.jpeg_c_main_controller*, %struct.jpeg_c_prep_controller*, %struct.jpeg_c_coef_controller*, %struct.jpeg_marker_writer*, %struct.jpeg_color_converter*, %struct.jpeg_downsampler*, %struct.jpeg_forward_dct*, %struct.jpeg_entropy_encoder*, %struct.jpeg_scan_info*, i32 }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_destination_mgr = type { i8*, i64, {}*, i32 (%struct.jpeg_compress_struct*)*, {}* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_comp_master = type { {}*, {}*, {}*, i32, i32 }
%struct.jpeg_c_main_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32)* }
%struct.jpeg_c_prep_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)* }
%struct.jpeg_c_coef_controller = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, i8***)* }
%struct.jpeg_marker_writer = type { {}*, {}*, {}*, {}*, {}*, void (%struct.jpeg_compress_struct*, i32, i32)*, void (%struct.jpeg_compress_struct*, i32)* }
%struct.jpeg_color_converter = type { {}*, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* }
%struct.jpeg_downsampler = type { {}*, void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)*, i32 }
%struct.jpeg_forward_dct = type { {}*, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)* }
%struct.jpeg_entropy_encoder = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)*, {}* }
%struct.jpeg_scan_info = type { i32, [4 x i32], i32, i32, i32, i32 }
%struct.my_fdct_controller = type { %struct.jpeg_forward_dct, void (i16*)*, void (i8**, i32, i16*)*, void (i16*, i16*, i16*)*, [4 x i16*], i16*, void (float*)*, void (i8**, i32, float*)*, void (i16*, float*, float*)*, [4 x float*], float* }

@start_pass_fdctmgr.aanscales = internal unnamed_addr constant [64 x i16] [i16 16384, i16 22725, i16 21407, i16 19266, i16 16384, i16 12873, i16 8867, i16 4520, i16 22725, i16 31521, i16 29692, i16 26722, i16 22725, i16 17855, i16 12299, i16 6270, i16 21407, i16 29692, i16 27969, i16 25172, i16 21407, i16 16819, i16 11585, i16 5906, i16 19266, i16 26722, i16 25172, i16 22654, i16 19266, i16 15137, i16 10426, i16 5315, i16 16384, i16 22725, i16 21407, i16 19266, i16 16384, i16 12873, i16 8867, i16 4520, i16 12873, i16 17855, i16 16819, i16 15137, i16 12873, i16 10114, i16 6967, i16 3552, i16 8867, i16 12299, i16 11585, i16 10426, i16 8867, i16 6967, i16 4799, i16 2446, i16 4520, i16 6270, i16 5906, i16 5315, i16 4520, i16 3552, i16 2446, i16 1247], align 16
@start_pass_fdctmgr.aanscalefactor = internal unnamed_addr constant [8 x double] [double 1.000000e+00, double 0x3FF63150B14861EF, double 0x3FF4E7AE914D6FCA, double 0x3FF2D062EF6C11AA, double 1.000000e+00, double 0x3FE92469C0A7BF3B, double 0x3FE1517A7BC720BB, double 0x3FD1A855DE72AB5D], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @jinit_forward_dct(%struct.jpeg_compress_struct*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 1
  %3 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %4 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %3, i64 0, i32 0
  %5 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %4, align 8
  %6 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  %7 = tail call i8* %5(%struct.jpeg_common_struct* %6, i32 1, i64 144) #4
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 61
  %9 = bitcast %struct.jpeg_forward_dct** %8 to i8**
  store i8* %7, i8** %9, align 8
  %10 = bitcast i8* %7 to void (%struct.jpeg_compress_struct*)**
  store void (%struct.jpeg_compress_struct*)* @start_pass_fdctmgr, void (%struct.jpeg_compress_struct*)** %10, align 8
  %11 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 29
  %12 = load i32, i32* %11, align 4
  switch i32 %12, label %40 [
    i32 0, label %13
    i32 1, label %22
    i32 2, label %31
  ]

13:                                               ; preds = %1
  %14 = getelementptr inbounds i8, i8* %7, i64 8
  %15 = bitcast i8* %14 to void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)**
  store void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)* @forward_DCT, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)** %15, align 8
  %16 = tail call i32 @jsimd_can_fdct_islow() #4
  %17 = icmp eq i32 %16, 0
  %18 = getelementptr inbounds i8, i8* %7, i64 16
  %19 = bitcast i8* %18 to void (i16*)**
  br i1 %17, label %21, label %20

20:                                               ; preds = %13
  store void (i16*)* @jsimd_fdct_islow, void (i16*)** %19, align 8
  br label %47

21:                                               ; preds = %13
  store void (i16*)* @jpeg_fdct_islow, void (i16*)** %19, align 8
  br label %47

22:                                               ; preds = %1
  %23 = getelementptr inbounds i8, i8* %7, i64 8
  %24 = bitcast i8* %23 to void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)**
  store void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)* @forward_DCT, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)** %24, align 8
  %25 = tail call i32 @jsimd_can_fdct_ifast() #4
  %26 = icmp eq i32 %25, 0
  %27 = getelementptr inbounds i8, i8* %7, i64 16
  %28 = bitcast i8* %27 to void (i16*)**
  br i1 %26, label %30, label %29

29:                                               ; preds = %22
  store void (i16*)* @jsimd_fdct_ifast, void (i16*)** %28, align 8
  br label %47

30:                                               ; preds = %22
  store void (i16*)* @jpeg_fdct_ifast, void (i16*)** %28, align 8
  br label %47

31:                                               ; preds = %1
  %32 = getelementptr inbounds i8, i8* %7, i64 8
  %33 = bitcast i8* %32 to void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)**
  store void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)* @forward_DCT_float, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)** %33, align 8
  %34 = tail call i32 @jsimd_can_fdct_float() #4
  %35 = icmp eq i32 %34, 0
  %36 = getelementptr inbounds i8, i8* %7, i64 80
  %37 = bitcast i8* %36 to void (float*)**
  br i1 %35, label %39, label %38

38:                                               ; preds = %31
  store void (float*)* @jsimd_fdct_float, void (float*)** %37, align 8
  br label %47

39:                                               ; preds = %31
  store void (float*)* @jpeg_fdct_float, void (float*)** %37, align 8
  br label %47

40:                                               ; preds = %1
  %41 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %42 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %41, align 8
  %43 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %42, i64 0, i32 5
  store i32 48, i32* %43, align 8
  %44 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %41, align 8
  %45 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %44, i64 0, i32 0
  %46 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %45, align 8
  tail call void %46(%struct.jpeg_common_struct* %6) #4
  br label %47

47:                                               ; preds = %38, %39, %29, %30, %20, %21, %40
  %48 = load i32, i32* %11, align 4
  switch i32 %48, label %73 [
    i32 0, label %49
    i32 1, label %49
    i32 2, label %61
  ]

49:                                               ; preds = %47, %47
  %50 = tail call i32 @jsimd_can_convsamp() #4
  %51 = icmp eq i32 %50, 0
  %52 = getelementptr inbounds i8, i8* %7, i64 24
  %53 = bitcast i8* %52 to void (i8**, i32, i16*)**
  %54 = select i1 %51, void (i8**, i32, i16*)* @convsamp, void (i8**, i32, i16*)* @jsimd_convsamp
  store void (i8**, i32, i16*)* %54, void (i8**, i32, i16*)** %53, align 8
  %55 = tail call i32 @jsimd_can_quantize() #4
  %56 = icmp eq i32 %55, 0
  %57 = getelementptr inbounds i8, i8* %7, i64 32
  %58 = bitcast i8* %57 to void (i16*, i16*, i16*)**
  br i1 %56, label %60, label %59

59:                                               ; preds = %49
  store void (i16*, i16*, i16*)* @jsimd_quantize, void (i16*, i16*, i16*)** %58, align 8
  br label %80

60:                                               ; preds = %49
  store void (i16*, i16*, i16*)* @quantize, void (i16*, i16*, i16*)** %58, align 8
  br label %80

61:                                               ; preds = %47
  %62 = tail call i32 @jsimd_can_convsamp_float() #4
  %63 = icmp eq i32 %62, 0
  %64 = getelementptr inbounds i8, i8* %7, i64 88
  %65 = bitcast i8* %64 to void (i8**, i32, float*)**
  %66 = select i1 %63, void (i8**, i32, float*)* @convsamp_float, void (i8**, i32, float*)* @jsimd_convsamp_float
  store void (i8**, i32, float*)* %66, void (i8**, i32, float*)** %65, align 8
  %67 = tail call i32 @jsimd_can_quantize_float() #4
  %68 = icmp eq i32 %67, 0
  %69 = getelementptr inbounds i8, i8* %7, i64 96
  %70 = bitcast i8* %69 to void (i16*, float*, float*)**
  br i1 %68, label %72, label %71

71:                                               ; preds = %61
  store void (i16*, float*, float*)* @jsimd_quantize_float, void (i16*, float*, float*)** %70, align 8
  br label %80

72:                                               ; preds = %61
  store void (i16*, float*, float*)* @quantize_float, void (i16*, float*, float*)** %70, align 8
  br label %80

73:                                               ; preds = %47
  %74 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %75 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %74, align 8
  %76 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %75, i64 0, i32 5
  store i32 48, i32* %76, align 8
  %77 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %74, align 8
  %78 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %77, i64 0, i32 0
  %79 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %78, align 8
  tail call void %79(%struct.jpeg_common_struct* %6) #4
  br label %80

80:                                               ; preds = %71, %72, %59, %60, %73
  %81 = load i32, i32* %11, align 4
  %82 = icmp eq i32 %81, 2
  %83 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %84 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %83, i64 0, i32 0
  %85 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %84, align 8
  %86 = select i1 %82, i64 256, i64 128
  %87 = select i1 %82, i64 136, i64 72
  %88 = tail call i8* %85(%struct.jpeg_common_struct* %6, i32 1, i64 %86) #4
  %89 = getelementptr inbounds i8, i8* %7, i64 %87
  %90 = bitcast i8* %89 to i8**
  store i8* %88, i8** %90, align 8
  %91 = getelementptr inbounds i8, i8* %7, i64 40
  %92 = getelementptr inbounds i8, i8* %7, i64 104
  call void @llvm.memset.p0i8.i64(i8* align 8 %91, i8 0, i64 32, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 8 %92, i8 0, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @start_pass_fdctmgr(%struct.jpeg_compress_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 61
  %3 = bitcast %struct.jpeg_forward_dct** %2 to %struct.my_fdct_controller**
  %4 = load %struct.my_fdct_controller*, %struct.my_fdct_controller** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 13
  %6 = load i32, i32* %5, align 4
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %322

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 15
  %10 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %12 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  %13 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 29
  %14 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 1
  %15 = getelementptr inbounds %struct.my_fdct_controller, %struct.my_fdct_controller* %4, i64 0, i32 3
  br label %16

16:                                               ; preds = %8, %317
  %17 = phi %struct.jpeg_component_info* [ %10, %8 ], [ %319, %317 ]
  %18 = phi i32 [ 0, %8 ], [ %318, %317 ]
  %19 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %17, i64 0, i32 4
  %20 = load i32, i32* %19, align 8
  %21 = icmp ugt i32 %20, 3
  %22 = sext i32 %20 to i64
  br i1 %21, label %27, label %23

23:                                               ; preds = %16
  %24 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 16, i64 %22
  %25 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %24, align 8
  %26 = icmp eq %struct.JQUANT_TBL* %25, null
  br i1 %26, label %27, label %37

27:                                               ; preds = %16, %23
  %28 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %11, align 8
  %29 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %28, i64 0, i32 5
  store i32 52, i32* %29, align 8
  %30 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %11, align 8
  %31 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %30, i64 0, i32 6, i32 0, i64 0
  store i32 %20, i32* %31, align 4
  %32 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %11, align 8
  %33 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %32, i64 0, i32 0
  %34 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %33, align 8
  tail call void %34(%struct.jpeg_common_struct* %12) #4
  %35 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 16, i64 %22
  %36 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %35, align 8
  br label %37

37:                                               ; preds = %27, %23
  %38 = phi %struct.JQUANT_TBL* [ %36, %27 ], [ %25, %23 ]
  %39 = load i32, i32* %13, align 4
  switch i32 %39, label %311 [
    i32 0, label %40
    i32 1, label %120
    i32 2, label %213
  ]

40:                                               ; preds = %37
  %41 = getelementptr inbounds %struct.my_fdct_controller, %struct.my_fdct_controller* %4, i64 0, i32 4, i64 %22
  %42 = load i16*, i16** %41, align 8
  %43 = icmp eq i16* %42, null
  br i1 %43, label %44, label %51

44:                                               ; preds = %40
  %45 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %14, align 8
  %46 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %45, i64 0, i32 0
  %47 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %46, align 8
  %48 = tail call i8* %47(%struct.jpeg_common_struct* %12, i32 1, i64 512) #4
  %49 = bitcast i16** %41 to i8**
  store i8* %48, i8** %49, align 8
  %50 = bitcast i8* %48 to i16*
  br label %51

51:                                               ; preds = %44, %40
  %52 = phi i16* [ %50, %44 ], [ %42, %40 ]
  br label %53

53:                                               ; preds = %117, %51
  %54 = phi i64 [ 0, %51 ], [ %118, %117 ]
  %55 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %38, i64 0, i32 0, i64 %54
  %56 = load i16, i16* %55, align 2
  %57 = shl i16 %56, 3
  %58 = getelementptr inbounds i16, i16* %52, i64 %54
  %59 = zext i16 %57 to i32
  %60 = icmp eq i16 %57, 0
  br i1 %60, label %80, label %61

61:                                               ; preds = %53
  %62 = icmp ult i16 %57, 256
  %63 = shl i16 %56, 11
  %64 = select i1 %62, i16 %63, i16 %57
  %65 = select i1 %62, i32 8, i32 16
  %66 = icmp ult i16 %64, 4096
  %67 = add nsw i32 %65, -4
  %68 = shl i16 %64, 4
  %69 = select i1 %66, i16 %68, i16 %64
  %70 = select i1 %66, i32 %67, i32 %65
  %71 = icmp ult i16 %69, 16384
  %72 = add nsw i32 %70, -2
  %73 = shl i16 %69, 2
  %74 = select i1 %71, i16 %73, i16 %69
  %75 = select i1 %71, i32 %72, i32 %70
  %76 = lshr i16 %74, 15
  %77 = xor i16 %76, 1
  %78 = zext i16 %77 to i32
  %79 = sub nsw i32 %75, %78
  br label %80

80:                                               ; preds = %53, %61
  %81 = phi i32 [ %79, %61 ], [ 0, %53 ]
  %82 = add nsw i32 %81, 15
  %83 = shl i32 1, %82
  %84 = udiv i32 %83, %59
  %85 = urem i32 %83, %59
  %86 = shl i16 %56, 2
  %87 = and i16 %86, 32764
  %88 = icmp eq i32 %85, 0
  br i1 %88, label %89, label %92

89:                                               ; preds = %80
  %90 = lshr i32 %84, 1
  %91 = add nsw i32 %81, 14
  br label %99

92:                                               ; preds = %80
  %93 = lshr exact i32 %59, 1
  %94 = icmp ugt i32 %85, %93
  br i1 %94, label %97, label %95

95:                                               ; preds = %92
  %96 = or i16 %87, 1
  br label %99

97:                                               ; preds = %92
  %98 = add i32 %84, 1
  br label %99

99:                                               ; preds = %89, %95, %97
  %100 = phi i32 [ %90, %89 ], [ %84, %95 ], [ %98, %97 ]
  %101 = phi i16 [ %87, %89 ], [ %96, %95 ], [ %87, %97 ]
  %102 = phi i32 [ %91, %89 ], [ %82, %95 ], [ %82, %97 ]
  %103 = trunc i32 %100 to i16
  store i16 %103, i16* %58, align 2
  %104 = getelementptr inbounds i16, i16* %58, i64 64
  store i16 %101, i16* %104, align 2
  %105 = sub nsw i32 32, %102
  %106 = shl i32 1, %105
  %107 = trunc i32 %106 to i16
  %108 = getelementptr inbounds i16, i16* %58, i64 128
  store i16 %107, i16* %108, align 2
  %109 = trunc i32 %102 to i16
  %110 = add i16 %109, -16
  %111 = getelementptr inbounds i16, i16* %58, i64 192
  store i16 %110, i16* %111, align 2
  %112 = icmp slt i32 %102, 17
  br i1 %112, label %113, label %117

113:                                              ; preds = %99
  %114 = load void (i16*, i16*, i16*)*, void (i16*, i16*, i16*)** %15, align 8
  %115 = icmp eq void (i16*, i16*, i16*)* %114, @jsimd_quantize
  br i1 %115, label %116, label %117

116:                                              ; preds = %113
  store void (i16*, i16*, i16*)* @quantize, void (i16*, i16*, i16*)** %15, align 8
  br label %117

117:                                              ; preds = %99, %113, %116
  %118 = add nuw nsw i64 %54, 1
  %119 = icmp eq i64 %118, 64
  br i1 %119, label %317, label %53

120:                                              ; preds = %37
  %121 = getelementptr inbounds %struct.my_fdct_controller, %struct.my_fdct_controller* %4, i64 0, i32 4, i64 %22
  %122 = load i16*, i16** %121, align 8
  %123 = icmp eq i16* %122, null
  br i1 %123, label %124, label %131

124:                                              ; preds = %120
  %125 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %14, align 8
  %126 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %125, i64 0, i32 0
  %127 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %126, align 8
  %128 = tail call i8* %127(%struct.jpeg_common_struct* %12, i32 1, i64 512) #4
  %129 = bitcast i16** %121 to i8**
  store i8* %128, i8** %129, align 8
  %130 = bitcast i8* %128 to i16*
  br label %131

131:                                              ; preds = %124, %120
  %132 = phi i16* [ %130, %124 ], [ %122, %120 ]
  br label %133

133:                                              ; preds = %210, %131
  %134 = phi i64 [ 0, %131 ], [ %211, %210 ]
  %135 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %38, i64 0, i32 0, i64 %134
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i64
  %138 = getelementptr inbounds [64 x i16], [64 x i16]* @start_pass_fdctmgr.aanscales, i64 0, i64 %134
  %139 = load i16, i16* %138, align 2
  %140 = sext i16 %139 to i64
  %141 = mul nsw i64 %140, %137
  %142 = add nsw i64 %141, 1024
  %143 = lshr i64 %142, 11
  %144 = trunc i64 %143 to i16
  %145 = getelementptr inbounds i16, i16* %132, i64 %134
  %146 = trunc i64 %143 to i32
  %147 = and i32 %146, 65535
  switch i16 %144, label %152 [
    i16 1, label %148
    i16 0, label %172
  ]

148:                                              ; preds = %133
  store i16 1, i16* %145, align 2
  %149 = getelementptr inbounds i16, i16* %145, i64 64
  store i16 0, i16* %149, align 2
  %150 = getelementptr inbounds i16, i16* %145, i64 128
  store i16 1, i16* %150, align 2
  %151 = getelementptr inbounds i16, i16* %145, i64 192
  store i16 -16, i16* %151, align 2
  br label %206

152:                                              ; preds = %133
  %153 = icmp ult i16 %144, 256
  %154 = shl nuw nsw i64 %143, 8
  %155 = trunc i64 %154 to i16
  %156 = select i1 %153, i16 %155, i16 %144
  %157 = select i1 %153, i32 8, i32 16
  %158 = icmp ult i16 %156, 4096
  %159 = add nsw i32 %157, -4
  %160 = shl i16 %156, 4
  %161 = select i1 %158, i16 %160, i16 %156
  %162 = select i1 %158, i32 %159, i32 %157
  %163 = icmp ult i16 %161, 16384
  %164 = add nsw i32 %162, -2
  %165 = shl i16 %161, 2
  %166 = select i1 %163, i16 %165, i16 %161
  %167 = select i1 %163, i32 %164, i32 %162
  %168 = lshr i16 %166, 15
  %169 = xor i16 %168, 1
  %170 = zext i16 %169 to i32
  %171 = sub nsw i32 %167, %170
  br label %172

172:                                              ; preds = %152, %133
  %173 = phi i32 [ %171, %152 ], [ 0, %133 ]
  %174 = add nsw i32 %173, 15
  %175 = shl i32 1, %174
  %176 = udiv i32 %175, %147
  %177 = urem i32 %175, %147
  %178 = lshr i64 %142, 12
  %179 = trunc i64 %178 to i16
  %180 = and i16 %179, 32767
  %181 = icmp eq i32 %177, 0
  br i1 %181, label %182, label %185

182:                                              ; preds = %172
  %183 = lshr i32 %176, 1
  %184 = add nsw i32 %173, 14
  br label %192

185:                                              ; preds = %172
  %186 = lshr i32 %147, 1
  %187 = icmp ugt i32 %177, %186
  br i1 %187, label %190, label %188

188:                                              ; preds = %185
  %189 = add nuw i16 %180, 1
  br label %192

190:                                              ; preds = %185
  %191 = add i32 %176, 1
  br label %192

192:                                              ; preds = %182, %188, %190
  %193 = phi i32 [ %183, %182 ], [ %176, %188 ], [ %191, %190 ]
  %194 = phi i16 [ %180, %182 ], [ %189, %188 ], [ %180, %190 ]
  %195 = phi i32 [ %184, %182 ], [ %174, %188 ], [ %174, %190 ]
  %196 = trunc i32 %193 to i16
  store i16 %196, i16* %145, align 2
  %197 = getelementptr inbounds i16, i16* %145, i64 64
  store i16 %194, i16* %197, align 2
  %198 = sub nsw i32 32, %195
  %199 = shl i32 1, %198
  %200 = trunc i32 %199 to i16
  %201 = getelementptr inbounds i16, i16* %145, i64 128
  store i16 %200, i16* %201, align 2
  %202 = trunc i32 %195 to i16
  %203 = add i16 %202, -16
  %204 = getelementptr inbounds i16, i16* %145, i64 192
  store i16 %203, i16* %204, align 2
  %205 = icmp slt i32 %195, 17
  br i1 %205, label %206, label %210

206:                                              ; preds = %148, %192
  %207 = load void (i16*, i16*, i16*)*, void (i16*, i16*, i16*)** %15, align 8
  %208 = icmp eq void (i16*, i16*, i16*)* %207, @jsimd_quantize
  br i1 %208, label %209, label %210

209:                                              ; preds = %206
  store void (i16*, i16*, i16*)* @quantize, void (i16*, i16*, i16*)** %15, align 8
  br label %210

210:                                              ; preds = %192, %206, %209
  %211 = add nuw nsw i64 %134, 1
  %212 = icmp eq i64 %211, 64
  br i1 %212, label %317, label %133

213:                                              ; preds = %37
  %214 = getelementptr inbounds %struct.my_fdct_controller, %struct.my_fdct_controller* %4, i64 0, i32 9, i64 %22
  %215 = load float*, float** %214, align 8
  %216 = icmp eq float* %215, null
  br i1 %216, label %217, label %224

217:                                              ; preds = %213
  %218 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %14, align 8
  %219 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %218, i64 0, i32 0
  %220 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %219, align 8
  %221 = tail call i8* %220(%struct.jpeg_common_struct* %12, i32 1, i64 256) #4
  %222 = bitcast float** %214 to i8**
  store i8* %221, i8** %222, align 8
  %223 = bitcast i8* %221 to float*
  br label %224

224:                                              ; preds = %217, %213
  %225 = phi float* [ %223, %217 ], [ %215, %213 ]
  br label %226

226:                                              ; preds = %226, %224
  %227 = phi i64 [ 0, %224 ], [ %309, %226 ]
  %228 = phi i64 [ 0, %224 ], [ %308, %226 ]
  %229 = getelementptr inbounds [8 x double], [8 x double]* @start_pass_fdctmgr.aanscalefactor, i64 0, i64 %228
  %230 = load double, double* %229, align 8
  %231 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %38, i64 0, i32 0, i64 %227
  %232 = load i16, i16* %231, align 2
  %233 = uitofp i16 %232 to double
  %234 = fmul double %230, %233
  %235 = fmul double %234, 8.000000e+00
  %236 = fdiv double 1.000000e+00, %235
  %237 = fptrunc double %236 to float
  %238 = getelementptr inbounds float, float* %225, i64 %227
  store float %237, float* %238, align 4
  %239 = or i64 %227, 1
  %240 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %38, i64 0, i32 0, i64 %239
  %241 = load i16, i16* %240, align 2
  %242 = uitofp i16 %241 to double
  %243 = fmul double %230, %242
  %244 = fmul double %243, 0x3FF63150B14861EF
  %245 = fmul double %244, 8.000000e+00
  %246 = fdiv double 1.000000e+00, %245
  %247 = fptrunc double %246 to float
  %248 = getelementptr inbounds float, float* %225, i64 %239
  store float %247, float* %248, align 4
  %249 = add nuw nsw i64 %239, 1
  %250 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %38, i64 0, i32 0, i64 %249
  %251 = load i16, i16* %250, align 2
  %252 = uitofp i16 %251 to double
  %253 = fmul double %230, %252
  %254 = fmul double %253, 0x3FF4E7AE914D6FCA
  %255 = fmul double %254, 8.000000e+00
  %256 = fdiv double 1.000000e+00, %255
  %257 = fptrunc double %256 to float
  %258 = getelementptr inbounds float, float* %225, i64 %249
  store float %257, float* %258, align 4
  %259 = or i64 %227, 3
  %260 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %38, i64 0, i32 0, i64 %259
  %261 = load i16, i16* %260, align 2
  %262 = uitofp i16 %261 to double
  %263 = fmul double %230, %262
  %264 = fmul double %263, 0x3FF2D062EF6C11AA
  %265 = fmul double %264, 8.000000e+00
  %266 = fdiv double 1.000000e+00, %265
  %267 = fptrunc double %266 to float
  %268 = getelementptr inbounds float, float* %225, i64 %259
  store float %267, float* %268, align 4
  %269 = add nuw nsw i64 %259, 1
  %270 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %38, i64 0, i32 0, i64 %269
  %271 = load i16, i16* %270, align 2
  %272 = uitofp i16 %271 to double
  %273 = fmul double %230, %272
  %274 = fmul double %273, 8.000000e+00
  %275 = fdiv double 1.000000e+00, %274
  %276 = fptrunc double %275 to float
  %277 = getelementptr inbounds float, float* %225, i64 %269
  store float %276, float* %277, align 4
  %278 = add nuw nsw i64 %259, 2
  %279 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %38, i64 0, i32 0, i64 %278
  %280 = load i16, i16* %279, align 2
  %281 = uitofp i16 %280 to double
  %282 = fmul double %230, %281
  %283 = fmul double %282, 0x3FE92469C0A7BF3B
  %284 = fmul double %283, 8.000000e+00
  %285 = fdiv double 1.000000e+00, %284
  %286 = fptrunc double %285 to float
  %287 = getelementptr inbounds float, float* %225, i64 %278
  store float %286, float* %287, align 4
  %288 = add nuw nsw i64 %259, 3
  %289 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %38, i64 0, i32 0, i64 %288
  %290 = load i16, i16* %289, align 2
  %291 = uitofp i16 %290 to double
  %292 = fmul double %230, %291
  %293 = fmul double %292, 0x3FE1517A7BC720BB
  %294 = fmul double %293, 8.000000e+00
  %295 = fdiv double 1.000000e+00, %294
  %296 = fptrunc double %295 to float
  %297 = getelementptr inbounds float, float* %225, i64 %288
  store float %296, float* %297, align 4
  %298 = or i64 %227, 7
  %299 = getelementptr inbounds %struct.JQUANT_TBL, %struct.JQUANT_TBL* %38, i64 0, i32 0, i64 %298
  %300 = load i16, i16* %299, align 2
  %301 = uitofp i16 %300 to double
  %302 = fmul double %230, %301
  %303 = fmul double %302, 0x3FD1A855DE72AB5D
  %304 = fmul double %303, 8.000000e+00
  %305 = fdiv double 1.000000e+00, %304
  %306 = fptrunc double %305 to float
  %307 = getelementptr inbounds float, float* %225, i64 %298
  store float %306, float* %307, align 4
  %308 = add nuw nsw i64 %228, 1
  %309 = add nuw nsw i64 %227, 8
  %310 = icmp eq i64 %308, 8
  br i1 %310, label %317, label %226

311:                                              ; preds = %37
  %312 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %11, align 8
  %313 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %312, i64 0, i32 5
  store i32 48, i32* %313, align 8
  %314 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %11, align 8
  %315 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %314, i64 0, i32 0
  %316 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %315, align 8
  tail call void %316(%struct.jpeg_common_struct* %12) #4
  br label %317

317:                                              ; preds = %226, %210, %117, %311
  %318 = add nuw nsw i32 %18, 1
  %319 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %17, i64 1
  %320 = load i32, i32* %5, align 4
  %321 = icmp slt i32 %318, %320
  br i1 %321, label %16, label %322

322:                                              ; preds = %317, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @forward_DCT(%struct.jpeg_compress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i8**, [64 x i16]*, i32, i32, i32) #0 {
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 61
  %9 = bitcast %struct.jpeg_forward_dct** %8 to %struct.my_fdct_controller**
  %10 = load %struct.my_fdct_controller*, %struct.my_fdct_controller** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %struct.my_fdct_controller, %struct.my_fdct_controller* %10, i64 0, i32 4, i64 %13
  %15 = load i16*, i16** %14, align 8
  %16 = getelementptr inbounds %struct.my_fdct_controller, %struct.my_fdct_controller* %10, i64 0, i32 1
  %17 = load void (i16*)*, void (i16*)** %16, align 8
  %18 = getelementptr inbounds %struct.my_fdct_controller, %struct.my_fdct_controller* %10, i64 0, i32 2
  %19 = load void (i8**, i32, i16*)*, void (i8**, i32, i16*)** %18, align 8
  %20 = getelementptr inbounds %struct.my_fdct_controller, %struct.my_fdct_controller* %10, i64 0, i32 3
  %21 = load void (i16*, i16*, i16*)*, void (i16*, i16*, i16*)** %20, align 8
  %22 = getelementptr inbounds %struct.my_fdct_controller, %struct.my_fdct_controller* %10, i64 0, i32 5
  %23 = load i16*, i16** %22, align 8
  %24 = zext i32 %4 to i64
  %25 = getelementptr inbounds i8*, i8** %2, i64 %24
  %26 = icmp eq i32 %6, 0
  br i1 %26, label %36, label %27

27:                                               ; preds = %7
  %28 = zext i32 %6 to i64
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %33, %29 ]
  %31 = phi i32 [ %5, %27 ], [ %34, %29 ]
  tail call void %19(i8** %25, i32 %31, i16* %23) #4
  tail call void %17(i16* %23) #4
  %32 = getelementptr inbounds [64 x i16], [64 x i16]* %3, i64 %30, i64 0
  tail call void %21(i16* %32, i16* %15, i16* %23) #4
  %33 = add nuw nsw i64 %30, 1
  %34 = add i32 %31, 8
  %35 = icmp eq i64 %33, %28
  br i1 %35, label %36, label %29

36:                                               ; preds = %29, %7
  ret void
}

declare i32 @jsimd_can_fdct_islow() local_unnamed_addr #1

declare void @jsimd_fdct_islow(i16*) #1

declare void @jpeg_fdct_islow(i16*) #1

declare i32 @jsimd_can_fdct_ifast() local_unnamed_addr #1

declare void @jsimd_fdct_ifast(i16*) #1

declare void @jpeg_fdct_ifast(i16*) #1

; Function Attrs: nounwind ssp uwtable
define internal void @forward_DCT_float(%struct.jpeg_compress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i8**, [64 x i16]*, i32, i32, i32) #0 {
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 61
  %9 = bitcast %struct.jpeg_forward_dct** %8 to %struct.my_fdct_controller**
  %10 = load %struct.my_fdct_controller*, %struct.my_fdct_controller** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %struct.my_fdct_controller, %struct.my_fdct_controller* %10, i64 0, i32 9, i64 %13
  %15 = load float*, float** %14, align 8
  %16 = getelementptr inbounds %struct.my_fdct_controller, %struct.my_fdct_controller* %10, i64 0, i32 6
  %17 = load void (float*)*, void (float*)** %16, align 8
  %18 = getelementptr inbounds %struct.my_fdct_controller, %struct.my_fdct_controller* %10, i64 0, i32 7
  %19 = load void (i8**, i32, float*)*, void (i8**, i32, float*)** %18, align 8
  %20 = getelementptr inbounds %struct.my_fdct_controller, %struct.my_fdct_controller* %10, i64 0, i32 8
  %21 = load void (i16*, float*, float*)*, void (i16*, float*, float*)** %20, align 8
  %22 = getelementptr inbounds %struct.my_fdct_controller, %struct.my_fdct_controller* %10, i64 0, i32 10
  %23 = load float*, float** %22, align 8
  %24 = zext i32 %4 to i64
  %25 = getelementptr inbounds i8*, i8** %2, i64 %24
  %26 = icmp eq i32 %6, 0
  br i1 %26, label %36, label %27

27:                                               ; preds = %7
  %28 = zext i32 %6 to i64
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %33, %29 ]
  %31 = phi i32 [ %5, %27 ], [ %34, %29 ]
  tail call void %19(i8** %25, i32 %31, float* %23) #4
  tail call void %17(float* %23) #4
  %32 = getelementptr inbounds [64 x i16], [64 x i16]* %3, i64 %30, i64 0
  tail call void %21(i16* %32, float* %15, float* %23) #4
  %33 = add nuw nsw i64 %30, 1
  %34 = add i32 %31, 8
  %35 = icmp eq i64 %33, %28
  br i1 %35, label %36, label %29

36:                                               ; preds = %29, %7
  ret void
}

declare i32 @jsimd_can_fdct_float() local_unnamed_addr #1

declare void @jsimd_fdct_float(float*) #1

declare void @jpeg_fdct_float(float*) #1

declare i32 @jsimd_can_convsamp() local_unnamed_addr #1

declare void @jsimd_convsamp(i8**, i32, i16*) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @convsamp(i8** nocapture readonly, i32, i16* nocapture) #2 {
  %4 = zext i32 %1 to i64
  br label %5

5:                                                ; preds = %5, %3
  %6 = phi i64 [ 0, %3 ], [ %50, %5 ]
  %7 = phi i16* [ %2, %3 ], [ %49, %5 ]
  %8 = getelementptr inbounds i8*, i8** %0, i64 %6
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 %4
  %11 = getelementptr inbounds i8, i8* %10, i64 1
  %12 = load i8, i8* %10, align 1
  %13 = zext i8 %12 to i16
  %14 = add nsw i16 %13, -128
  %15 = getelementptr inbounds i16, i16* %7, i64 1
  store i16 %14, i16* %7, align 2
  %16 = getelementptr inbounds i8, i8* %11, i64 1
  %17 = load i8, i8* %11, align 1
  %18 = zext i8 %17 to i16
  %19 = add nsw i16 %18, -128
  %20 = getelementptr inbounds i16, i16* %7, i64 2
  store i16 %19, i16* %15, align 2
  %21 = getelementptr inbounds i8, i8* %16, i64 1
  %22 = load i8, i8* %16, align 1
  %23 = zext i8 %22 to i16
  %24 = add nsw i16 %23, -128
  %25 = getelementptr inbounds i16, i16* %7, i64 3
  store i16 %24, i16* %20, align 2
  %26 = getelementptr inbounds i8, i8* %21, i64 1
  %27 = load i8, i8* %21, align 1
  %28 = zext i8 %27 to i16
  %29 = add nsw i16 %28, -128
  %30 = getelementptr inbounds i16, i16* %7, i64 4
  store i16 %29, i16* %25, align 2
  %31 = getelementptr inbounds i8, i8* %26, i64 1
  %32 = load i8, i8* %26, align 1
  %33 = zext i8 %32 to i16
  %34 = add nsw i16 %33, -128
  %35 = getelementptr inbounds i16, i16* %7, i64 5
  store i16 %34, i16* %30, align 2
  %36 = getelementptr inbounds i8, i8* %31, i64 1
  %37 = load i8, i8* %31, align 1
  %38 = zext i8 %37 to i16
  %39 = add nsw i16 %38, -128
  %40 = getelementptr inbounds i16, i16* %7, i64 6
  store i16 %39, i16* %35, align 2
  %41 = getelementptr inbounds i8, i8* %36, i64 1
  %42 = load i8, i8* %36, align 1
  %43 = zext i8 %42 to i16
  %44 = add nsw i16 %43, -128
  %45 = getelementptr inbounds i16, i16* %7, i64 7
  store i16 %44, i16* %40, align 2
  %46 = load i8, i8* %41, align 1
  %47 = zext i8 %46 to i16
  %48 = add nsw i16 %47, -128
  %49 = getelementptr inbounds i16, i16* %7, i64 8
  store i16 %48, i16* %45, align 2
  %50 = add nuw nsw i64 %6, 1
  %51 = icmp eq i64 %50, 8
  br i1 %51, label %52, label %5

52:                                               ; preds = %5
  ret void
}

declare i32 @jsimd_can_quantize() local_unnamed_addr #1

declare void @jsimd_quantize(i16*, i16*, i16*) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @quantize(i16* nocapture, i16* nocapture readonly, i16* nocapture readonly) #2 {
  br label %4

4:                                                ; preds = %39, %3
  %5 = phi i64 [ 0, %3 ], [ %43, %39 ]
  %6 = getelementptr inbounds i16, i16* %2, i64 %5
  %7 = load i16, i16* %6, align 2
  %8 = getelementptr inbounds i16, i16* %1, i64 %5
  %9 = load i16, i16* %8, align 2
  %10 = add nuw nsw i64 %5, 64
  %11 = getelementptr inbounds i16, i16* %1, i64 %10
  %12 = load i16, i16* %11, align 2
  %13 = add nuw nsw i64 %5, 192
  %14 = getelementptr inbounds i16, i16* %1, i64 %13
  %15 = load i16, i16* %14, align 2
  %16 = icmp slt i16 %7, 0
  br i1 %16, label %17, label %30

17:                                               ; preds = %4
  %18 = sub i16 0, %7
  %19 = sext i16 %18 to i32
  %20 = zext i16 %12 to i32
  %21 = add nsw i32 %20, %19
  %22 = zext i16 %9 to i32
  %23 = mul i32 %21, %22
  %24 = sext i16 %15 to i32
  %25 = add nsw i32 %24, 16
  %26 = lshr i32 %23, %25
  %27 = shl i32 %26, 16
  %28 = ashr exact i32 %27, 16
  %29 = sub nsw i32 0, %28
  br label %39

30:                                               ; preds = %4
  %31 = sext i16 %7 to i32
  %32 = zext i16 %12 to i32
  %33 = add nuw nsw i32 %32, %31
  %34 = zext i16 %9 to i32
  %35 = mul i32 %33, %34
  %36 = sext i16 %15 to i32
  %37 = add nsw i32 %36, 16
  %38 = lshr i32 %35, %37
  br label %39

39:                                               ; preds = %30, %17
  %40 = phi i32 [ %29, %17 ], [ %38, %30 ]
  %41 = trunc i32 %40 to i16
  %42 = getelementptr inbounds i16, i16* %0, i64 %5
  store i16 %41, i16* %42, align 2
  %43 = add nuw nsw i64 %5, 1
  %44 = icmp eq i64 %43, 64
  br i1 %44, label %45, label %4

45:                                               ; preds = %39
  ret void
}

declare i32 @jsimd_can_convsamp_float() local_unnamed_addr #1

declare void @jsimd_convsamp_float(i8**, i32, float*) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @convsamp_float(i8** nocapture readonly, i32, float* nocapture) #2 {
  %4 = zext i32 %1 to i64
  br label %5

5:                                                ; preds = %5, %3
  %6 = phi i64 [ 0, %3 ], [ %58, %5 ]
  %7 = phi float* [ %2, %3 ], [ %57, %5 ]
  %8 = getelementptr inbounds i8*, i8** %0, i64 %6
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 %4
  %11 = getelementptr inbounds i8, i8* %10, i64 1
  %12 = load i8, i8* %10, align 1
  %13 = zext i8 %12 to i32
  %14 = add nsw i32 %13, -128
  %15 = sitofp i32 %14 to float
  %16 = getelementptr inbounds float, float* %7, i64 1
  store float %15, float* %7, align 4
  %17 = getelementptr inbounds i8, i8* %11, i64 1
  %18 = load i8, i8* %11, align 1
  %19 = zext i8 %18 to i32
  %20 = add nsw i32 %19, -128
  %21 = sitofp i32 %20 to float
  %22 = getelementptr inbounds float, float* %7, i64 2
  store float %21, float* %16, align 4
  %23 = getelementptr inbounds i8, i8* %17, i64 1
  %24 = load i8, i8* %17, align 1
  %25 = zext i8 %24 to i32
  %26 = add nsw i32 %25, -128
  %27 = sitofp i32 %26 to float
  %28 = getelementptr inbounds float, float* %7, i64 3
  store float %27, float* %22, align 4
  %29 = getelementptr inbounds i8, i8* %23, i64 1
  %30 = load i8, i8* %23, align 1
  %31 = zext i8 %30 to i32
  %32 = add nsw i32 %31, -128
  %33 = sitofp i32 %32 to float
  %34 = getelementptr inbounds float, float* %7, i64 4
  store float %33, float* %28, align 4
  %35 = getelementptr inbounds i8, i8* %29, i64 1
  %36 = load i8, i8* %29, align 1
  %37 = zext i8 %36 to i32
  %38 = add nsw i32 %37, -128
  %39 = sitofp i32 %38 to float
  %40 = getelementptr inbounds float, float* %7, i64 5
  store float %39, float* %34, align 4
  %41 = getelementptr inbounds i8, i8* %35, i64 1
  %42 = load i8, i8* %35, align 1
  %43 = zext i8 %42 to i32
  %44 = add nsw i32 %43, -128
  %45 = sitofp i32 %44 to float
  %46 = getelementptr inbounds float, float* %7, i64 6
  store float %45, float* %40, align 4
  %47 = getelementptr inbounds i8, i8* %41, i64 1
  %48 = load i8, i8* %41, align 1
  %49 = zext i8 %48 to i32
  %50 = add nsw i32 %49, -128
  %51 = sitofp i32 %50 to float
  %52 = getelementptr inbounds float, float* %7, i64 7
  store float %51, float* %46, align 4
  %53 = load i8, i8* %47, align 1
  %54 = zext i8 %53 to i32
  %55 = add nsw i32 %54, -128
  %56 = sitofp i32 %55 to float
  %57 = getelementptr inbounds float, float* %7, i64 8
  store float %56, float* %52, align 4
  %58 = add nuw nsw i64 %6, 1
  %59 = icmp eq i64 %58, 8
  br i1 %59, label %60, label %5

60:                                               ; preds = %5
  ret void
}

declare i32 @jsimd_can_quantize_float() local_unnamed_addr #1

declare void @jsimd_quantize_float(i16*, float*, float*) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @quantize_float(i16* nocapture, float* nocapture readonly, float* nocapture readonly) #2 {
  %4 = getelementptr i16, i16* %0, i64 64
  %5 = getelementptr float, float* %2, i64 64
  %6 = getelementptr float, float* %1, i64 64
  %7 = bitcast float* %5 to i16*
  %8 = icmp ugt i16* %7, %0
  %9 = bitcast i16* %4 to float*
  %10 = icmp ugt float* %9, %2
  %11 = and i1 %8, %10
  %12 = bitcast float* %6 to i16*
  %13 = icmp ugt i16* %12, %0
  %14 = bitcast i16* %4 to float*
  %15 = icmp ugt float* %14, %1
  %16 = and i1 %13, %15
  %17 = or i1 %11, %16
  br i1 %17, label %224, label %18

18:                                               ; preds = %3
  %19 = bitcast float* %2 to <4 x float>*
  %20 = load <4 x float>, <4 x float>* %19, align 4, !alias.scope !2
  %21 = bitcast float* %1 to <4 x float>*
  %22 = load <4 x float>, <4 x float>* %21, align 4, !alias.scope !5
  %23 = fmul <4 x float> %20, %22
  %24 = fadd <4 x float> %23, <float 1.638450e+04, float 1.638450e+04, float 1.638450e+04, float 1.638450e+04>
  %25 = fptosi <4 x float> %24 to <4 x i32>
  %26 = trunc <4 x i32> %25 to <4 x i16>
  %27 = add <4 x i16> %26, <i16 -16384, i16 -16384, i16 -16384, i16 -16384>
  %28 = bitcast i16* %0 to <4 x i16>*
  store <4 x i16> %27, <4 x i16>* %28, align 2, !alias.scope !7, !noalias !9
  %29 = getelementptr inbounds float, float* %2, i64 4
  %30 = bitcast float* %29 to <4 x float>*
  %31 = load <4 x float>, <4 x float>* %30, align 4, !alias.scope !2
  %32 = getelementptr inbounds float, float* %1, i64 4
  %33 = bitcast float* %32 to <4 x float>*
  %34 = load <4 x float>, <4 x float>* %33, align 4, !alias.scope !5
  %35 = fmul <4 x float> %31, %34
  %36 = fadd <4 x float> %35, <float 1.638450e+04, float 1.638450e+04, float 1.638450e+04, float 1.638450e+04>
  %37 = fptosi <4 x float> %36 to <4 x i32>
  %38 = trunc <4 x i32> %37 to <4 x i16>
  %39 = add <4 x i16> %38, <i16 -16384, i16 -16384, i16 -16384, i16 -16384>
  %40 = getelementptr inbounds i16, i16* %0, i64 4
  %41 = bitcast i16* %40 to <4 x i16>*
  store <4 x i16> %39, <4 x i16>* %41, align 2, !alias.scope !7, !noalias !9
  %42 = getelementptr inbounds float, float* %2, i64 8
  %43 = bitcast float* %42 to <4 x float>*
  %44 = load <4 x float>, <4 x float>* %43, align 4, !alias.scope !2
  %45 = getelementptr inbounds float, float* %1, i64 8
  %46 = bitcast float* %45 to <4 x float>*
  %47 = load <4 x float>, <4 x float>* %46, align 4, !alias.scope !5
  %48 = fmul <4 x float> %44, %47
  %49 = fadd <4 x float> %48, <float 1.638450e+04, float 1.638450e+04, float 1.638450e+04, float 1.638450e+04>
  %50 = fptosi <4 x float> %49 to <4 x i32>
  %51 = trunc <4 x i32> %50 to <4 x i16>
  %52 = add <4 x i16> %51, <i16 -16384, i16 -16384, i16 -16384, i16 -16384>
  %53 = getelementptr inbounds i16, i16* %0, i64 8
  %54 = bitcast i16* %53 to <4 x i16>*
  store <4 x i16> %52, <4 x i16>* %54, align 2, !alias.scope !7, !noalias !9
  %55 = getelementptr inbounds float, float* %2, i64 12
  %56 = bitcast float* %55 to <4 x float>*
  %57 = load <4 x float>, <4 x float>* %56, align 4, !alias.scope !2
  %58 = getelementptr inbounds float, float* %1, i64 12
  %59 = bitcast float* %58 to <4 x float>*
  %60 = load <4 x float>, <4 x float>* %59, align 4, !alias.scope !5
  %61 = fmul <4 x float> %57, %60
  %62 = fadd <4 x float> %61, <float 1.638450e+04, float 1.638450e+04, float 1.638450e+04, float 1.638450e+04>
  %63 = fptosi <4 x float> %62 to <4 x i32>
  %64 = trunc <4 x i32> %63 to <4 x i16>
  %65 = add <4 x i16> %64, <i16 -16384, i16 -16384, i16 -16384, i16 -16384>
  %66 = getelementptr inbounds i16, i16* %0, i64 12
  %67 = bitcast i16* %66 to <4 x i16>*
  store <4 x i16> %65, <4 x i16>* %67, align 2, !alias.scope !7, !noalias !9
  %68 = getelementptr inbounds float, float* %2, i64 16
  %69 = bitcast float* %68 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 4, !alias.scope !2
  %71 = getelementptr inbounds float, float* %1, i64 16
  %72 = bitcast float* %71 to <4 x float>*
  %73 = load <4 x float>, <4 x float>* %72, align 4, !alias.scope !5
  %74 = fmul <4 x float> %70, %73
  %75 = fadd <4 x float> %74, <float 1.638450e+04, float 1.638450e+04, float 1.638450e+04, float 1.638450e+04>
  %76 = fptosi <4 x float> %75 to <4 x i32>
  %77 = trunc <4 x i32> %76 to <4 x i16>
  %78 = add <4 x i16> %77, <i16 -16384, i16 -16384, i16 -16384, i16 -16384>
  %79 = getelementptr inbounds i16, i16* %0, i64 16
  %80 = bitcast i16* %79 to <4 x i16>*
  store <4 x i16> %78, <4 x i16>* %80, align 2, !alias.scope !7, !noalias !9
  %81 = getelementptr inbounds float, float* %2, i64 20
  %82 = bitcast float* %81 to <4 x float>*
  %83 = load <4 x float>, <4 x float>* %82, align 4, !alias.scope !2
  %84 = getelementptr inbounds float, float* %1, i64 20
  %85 = bitcast float* %84 to <4 x float>*
  %86 = load <4 x float>, <4 x float>* %85, align 4, !alias.scope !5
  %87 = fmul <4 x float> %83, %86
  %88 = fadd <4 x float> %87, <float 1.638450e+04, float 1.638450e+04, float 1.638450e+04, float 1.638450e+04>
  %89 = fptosi <4 x float> %88 to <4 x i32>
  %90 = trunc <4 x i32> %89 to <4 x i16>
  %91 = add <4 x i16> %90, <i16 -16384, i16 -16384, i16 -16384, i16 -16384>
  %92 = getelementptr inbounds i16, i16* %0, i64 20
  %93 = bitcast i16* %92 to <4 x i16>*
  store <4 x i16> %91, <4 x i16>* %93, align 2, !alias.scope !7, !noalias !9
  %94 = getelementptr inbounds float, float* %2, i64 24
  %95 = bitcast float* %94 to <4 x float>*
  %96 = load <4 x float>, <4 x float>* %95, align 4, !alias.scope !2
  %97 = getelementptr inbounds float, float* %1, i64 24
  %98 = bitcast float* %97 to <4 x float>*
  %99 = load <4 x float>, <4 x float>* %98, align 4, !alias.scope !5
  %100 = fmul <4 x float> %96, %99
  %101 = fadd <4 x float> %100, <float 1.638450e+04, float 1.638450e+04, float 1.638450e+04, float 1.638450e+04>
  %102 = fptosi <4 x float> %101 to <4 x i32>
  %103 = trunc <4 x i32> %102 to <4 x i16>
  %104 = add <4 x i16> %103, <i16 -16384, i16 -16384, i16 -16384, i16 -16384>
  %105 = getelementptr inbounds i16, i16* %0, i64 24
  %106 = bitcast i16* %105 to <4 x i16>*
  store <4 x i16> %104, <4 x i16>* %106, align 2, !alias.scope !7, !noalias !9
  %107 = getelementptr inbounds float, float* %2, i64 28
  %108 = bitcast float* %107 to <4 x float>*
  %109 = load <4 x float>, <4 x float>* %108, align 4, !alias.scope !2
  %110 = getelementptr inbounds float, float* %1, i64 28
  %111 = bitcast float* %110 to <4 x float>*
  %112 = load <4 x float>, <4 x float>* %111, align 4, !alias.scope !5
  %113 = fmul <4 x float> %109, %112
  %114 = fadd <4 x float> %113, <float 1.638450e+04, float 1.638450e+04, float 1.638450e+04, float 1.638450e+04>
  %115 = fptosi <4 x float> %114 to <4 x i32>
  %116 = trunc <4 x i32> %115 to <4 x i16>
  %117 = add <4 x i16> %116, <i16 -16384, i16 -16384, i16 -16384, i16 -16384>
  %118 = getelementptr inbounds i16, i16* %0, i64 28
  %119 = bitcast i16* %118 to <4 x i16>*
  store <4 x i16> %117, <4 x i16>* %119, align 2, !alias.scope !7, !noalias !9
  %120 = getelementptr inbounds float, float* %2, i64 32
  %121 = bitcast float* %120 to <4 x float>*
  %122 = load <4 x float>, <4 x float>* %121, align 4, !alias.scope !2
  %123 = getelementptr inbounds float, float* %1, i64 32
  %124 = bitcast float* %123 to <4 x float>*
  %125 = load <4 x float>, <4 x float>* %124, align 4, !alias.scope !5
  %126 = fmul <4 x float> %122, %125
  %127 = fadd <4 x float> %126, <float 1.638450e+04, float 1.638450e+04, float 1.638450e+04, float 1.638450e+04>
  %128 = fptosi <4 x float> %127 to <4 x i32>
  %129 = trunc <4 x i32> %128 to <4 x i16>
  %130 = add <4 x i16> %129, <i16 -16384, i16 -16384, i16 -16384, i16 -16384>
  %131 = getelementptr inbounds i16, i16* %0, i64 32
  %132 = bitcast i16* %131 to <4 x i16>*
  store <4 x i16> %130, <4 x i16>* %132, align 2, !alias.scope !7, !noalias !9
  %133 = getelementptr inbounds float, float* %2, i64 36
  %134 = bitcast float* %133 to <4 x float>*
  %135 = load <4 x float>, <4 x float>* %134, align 4, !alias.scope !2
  %136 = getelementptr inbounds float, float* %1, i64 36
  %137 = bitcast float* %136 to <4 x float>*
  %138 = load <4 x float>, <4 x float>* %137, align 4, !alias.scope !5
  %139 = fmul <4 x float> %135, %138
  %140 = fadd <4 x float> %139, <float 1.638450e+04, float 1.638450e+04, float 1.638450e+04, float 1.638450e+04>
  %141 = fptosi <4 x float> %140 to <4 x i32>
  %142 = trunc <4 x i32> %141 to <4 x i16>
  %143 = add <4 x i16> %142, <i16 -16384, i16 -16384, i16 -16384, i16 -16384>
  %144 = getelementptr inbounds i16, i16* %0, i64 36
  %145 = bitcast i16* %144 to <4 x i16>*
  store <4 x i16> %143, <4 x i16>* %145, align 2, !alias.scope !7, !noalias !9
  %146 = getelementptr inbounds float, float* %2, i64 40
  %147 = bitcast float* %146 to <4 x float>*
  %148 = load <4 x float>, <4 x float>* %147, align 4, !alias.scope !2
  %149 = getelementptr inbounds float, float* %1, i64 40
  %150 = bitcast float* %149 to <4 x float>*
  %151 = load <4 x float>, <4 x float>* %150, align 4, !alias.scope !5
  %152 = fmul <4 x float> %148, %151
  %153 = fadd <4 x float> %152, <float 1.638450e+04, float 1.638450e+04, float 1.638450e+04, float 1.638450e+04>
  %154 = fptosi <4 x float> %153 to <4 x i32>
  %155 = trunc <4 x i32> %154 to <4 x i16>
  %156 = add <4 x i16> %155, <i16 -16384, i16 -16384, i16 -16384, i16 -16384>
  %157 = getelementptr inbounds i16, i16* %0, i64 40
  %158 = bitcast i16* %157 to <4 x i16>*
  store <4 x i16> %156, <4 x i16>* %158, align 2, !alias.scope !7, !noalias !9
  %159 = getelementptr inbounds float, float* %2, i64 44
  %160 = bitcast float* %159 to <4 x float>*
  %161 = load <4 x float>, <4 x float>* %160, align 4, !alias.scope !2
  %162 = getelementptr inbounds float, float* %1, i64 44
  %163 = bitcast float* %162 to <4 x float>*
  %164 = load <4 x float>, <4 x float>* %163, align 4, !alias.scope !5
  %165 = fmul <4 x float> %161, %164
  %166 = fadd <4 x float> %165, <float 1.638450e+04, float 1.638450e+04, float 1.638450e+04, float 1.638450e+04>
  %167 = fptosi <4 x float> %166 to <4 x i32>
  %168 = trunc <4 x i32> %167 to <4 x i16>
  %169 = add <4 x i16> %168, <i16 -16384, i16 -16384, i16 -16384, i16 -16384>
  %170 = getelementptr inbounds i16, i16* %0, i64 44
  %171 = bitcast i16* %170 to <4 x i16>*
  store <4 x i16> %169, <4 x i16>* %171, align 2, !alias.scope !7, !noalias !9
  %172 = getelementptr inbounds float, float* %2, i64 48
  %173 = bitcast float* %172 to <4 x float>*
  %174 = load <4 x float>, <4 x float>* %173, align 4, !alias.scope !2
  %175 = getelementptr inbounds float, float* %1, i64 48
  %176 = bitcast float* %175 to <4 x float>*
  %177 = load <4 x float>, <4 x float>* %176, align 4, !alias.scope !5
  %178 = fmul <4 x float> %174, %177
  %179 = fadd <4 x float> %178, <float 1.638450e+04, float 1.638450e+04, float 1.638450e+04, float 1.638450e+04>
  %180 = fptosi <4 x float> %179 to <4 x i32>
  %181 = trunc <4 x i32> %180 to <4 x i16>
  %182 = add <4 x i16> %181, <i16 -16384, i16 -16384, i16 -16384, i16 -16384>
  %183 = getelementptr inbounds i16, i16* %0, i64 48
  %184 = bitcast i16* %183 to <4 x i16>*
  store <4 x i16> %182, <4 x i16>* %184, align 2, !alias.scope !7, !noalias !9
  %185 = getelementptr inbounds float, float* %2, i64 52
  %186 = bitcast float* %185 to <4 x float>*
  %187 = load <4 x float>, <4 x float>* %186, align 4, !alias.scope !2
  %188 = getelementptr inbounds float, float* %1, i64 52
  %189 = bitcast float* %188 to <4 x float>*
  %190 = load <4 x float>, <4 x float>* %189, align 4, !alias.scope !5
  %191 = fmul <4 x float> %187, %190
  %192 = fadd <4 x float> %191, <float 1.638450e+04, float 1.638450e+04, float 1.638450e+04, float 1.638450e+04>
  %193 = fptosi <4 x float> %192 to <4 x i32>
  %194 = trunc <4 x i32> %193 to <4 x i16>
  %195 = add <4 x i16> %194, <i16 -16384, i16 -16384, i16 -16384, i16 -16384>
  %196 = getelementptr inbounds i16, i16* %0, i64 52
  %197 = bitcast i16* %196 to <4 x i16>*
  store <4 x i16> %195, <4 x i16>* %197, align 2, !alias.scope !7, !noalias !9
  %198 = getelementptr inbounds float, float* %2, i64 56
  %199 = bitcast float* %198 to <4 x float>*
  %200 = load <4 x float>, <4 x float>* %199, align 4, !alias.scope !2
  %201 = getelementptr inbounds float, float* %1, i64 56
  %202 = bitcast float* %201 to <4 x float>*
  %203 = load <4 x float>, <4 x float>* %202, align 4, !alias.scope !5
  %204 = fmul <4 x float> %200, %203
  %205 = fadd <4 x float> %204, <float 1.638450e+04, float 1.638450e+04, float 1.638450e+04, float 1.638450e+04>
  %206 = fptosi <4 x float> %205 to <4 x i32>
  %207 = trunc <4 x i32> %206 to <4 x i16>
  %208 = add <4 x i16> %207, <i16 -16384, i16 -16384, i16 -16384, i16 -16384>
  %209 = getelementptr inbounds i16, i16* %0, i64 56
  %210 = bitcast i16* %209 to <4 x i16>*
  store <4 x i16> %208, <4 x i16>* %210, align 2, !alias.scope !7, !noalias !9
  %211 = getelementptr inbounds float, float* %2, i64 60
  %212 = bitcast float* %211 to <4 x float>*
  %213 = load <4 x float>, <4 x float>* %212, align 4, !alias.scope !2
  %214 = getelementptr inbounds float, float* %1, i64 60
  %215 = bitcast float* %214 to <4 x float>*
  %216 = load <4 x float>, <4 x float>* %215, align 4, !alias.scope !5
  %217 = fmul <4 x float> %213, %216
  %218 = fadd <4 x float> %217, <float 1.638450e+04, float 1.638450e+04, float 1.638450e+04, float 1.638450e+04>
  %219 = fptosi <4 x float> %218 to <4 x i32>
  %220 = trunc <4 x i32> %219 to <4 x i16>
  %221 = add <4 x i16> %220, <i16 -16384, i16 -16384, i16 -16384, i16 -16384>
  %222 = getelementptr inbounds i16, i16* %0, i64 60
  %223 = bitcast i16* %222 to <4 x i16>*
  store <4 x i16> %221, <4 x i16>* %223, align 2, !alias.scope !7, !noalias !9
  br label %249

224:                                              ; preds = %3, %224
  %225 = phi i64 [ %247, %224 ], [ 0, %3 ]
  %226 = getelementptr inbounds float, float* %2, i64 %225
  %227 = load float, float* %226, align 4
  %228 = getelementptr inbounds float, float* %1, i64 %225
  %229 = load float, float* %228, align 4
  %230 = fmul float %227, %229
  %231 = fadd float %230, 1.638450e+04
  %232 = fptosi float %231 to i32
  %233 = trunc i32 %232 to i16
  %234 = add i16 %233, -16384
  %235 = getelementptr inbounds i16, i16* %0, i64 %225
  store i16 %234, i16* %235, align 2
  %236 = or i64 %225, 1
  %237 = getelementptr inbounds float, float* %2, i64 %236
  %238 = load float, float* %237, align 4
  %239 = getelementptr inbounds float, float* %1, i64 %236
  %240 = load float, float* %239, align 4
  %241 = fmul float %238, %240
  %242 = fadd float %241, 1.638450e+04
  %243 = fptosi float %242 to i32
  %244 = trunc i32 %243 to i16
  %245 = add i16 %244, -16384
  %246 = getelementptr inbounds i16, i16* %0, i64 %236
  store i16 %245, i16* %246, align 2
  %247 = add nuw nsw i64 %225, 2
  %248 = icmp eq i64 %247, 64
  br i1 %248, label %249, label %224, !llvm.loop !10

249:                                              ; preds = %224, %18
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = !{!3, !6}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
