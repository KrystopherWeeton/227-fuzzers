; ModuleID = '../../net/cookies/cookie_inclusion_status.cc'
source_filename = "../../net/cookies/cookie_inclusion_status.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.net::CookieInclusionStatus" = type { i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %class.GURL* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.12" = type { %"class.std::__1::__vector_base.13" }
%"class.std::__1::__vector_base.13" = type { i32*, i32*, %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i32* }

@.str = private unnamed_addr constant [10 x i8] c"INCLUDE, \00", align 1
@.ref.tmp.2 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i64 9 }], align 8
@.str.3 = private unnamed_addr constant [24 x i8] c"EXCLUDE_UNKNOWN_ERROR, \00", align 1
@.ref.tmp.4 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i32 0, i32 0), i64 23 }], align 8
@.str.5 = private unnamed_addr constant [20 x i8] c"EXCLUDE_HTTP_ONLY, \00", align 1
@.ref.tmp.6 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i64 19 }], align 8
@.str.7 = private unnamed_addr constant [22 x i8] c"EXCLUDE_SECURE_ONLY, \00", align 1
@.ref.tmp.8 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i32 0, i32 0), i64 21 }], align 8
@.str.9 = private unnamed_addr constant [26 x i8] c"EXCLUDE_DOMAIN_MISMATCH, \00", align 1
@.ref.tmp.10 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i32 0, i32 0), i64 25 }], align 8
@.str.11 = private unnamed_addr constant [22 x i8] c"EXCLUDE_NOT_ON_PATH, \00", align 1
@.ref.tmp.12 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.11, i32 0, i32 0), i64 21 }], align 8
@.str.13 = private unnamed_addr constant [26 x i8] c"EXCLUDE_SAMESITE_STRICT, \00", align 1
@.ref.tmp.14 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.13, i32 0, i32 0), i64 25 }], align 8
@.str.15 = private unnamed_addr constant [23 x i8] c"EXCLUDE_SAMESITE_LAX, \00", align 1
@.ref.tmp.16 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.15, i32 0, i32 0), i64 22 }], align 8
@.str.17 = private unnamed_addr constant [46 x i8] c"EXCLUDE_SAMESITE_UNSPECIFIED_TREATED_AS_LAX, \00", align 1
@.ref.tmp.18 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.17, i32 0, i32 0), i64 45 }], align 8
@.str.19 = private unnamed_addr constant [33 x i8] c"EXCLUDE_SAMESITE_NONE_INSECURE, \00", align 1
@.ref.tmp.20 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i32 0, i32 0), i64 32 }], align 8
@.str.21 = private unnamed_addr constant [27 x i8] c"EXCLUDE_USER_PREFERENCES, \00", align 1
@.ref.tmp.22 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.21, i32 0, i32 0), i64 26 }], align 8
@.str.23 = private unnamed_addr constant [40 x i8] c"EXCLUDE_SAMEPARTY_CROSS_PARTY_CONTEXT, \00", align 1
@.ref.tmp.24 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.23, i32 0, i32 0), i64 39 }], align 8
@.str.25 = private unnamed_addr constant [27 x i8] c"EXCLUDE_FAILURE_TO_STORE, \00", align 1
@.ref.tmp.26 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.25, i32 0, i32 0), i64 26 }], align 8
@.str.27 = private unnamed_addr constant [31 x i8] c"EXCLUDE_NONCOOKIEABLE_SCHEME, \00", align 1
@.ref.tmp.28 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.27, i32 0, i32 0), i64 30 }], align 8
@.str.29 = private unnamed_addr constant [27 x i8] c"EXCLUDE_OVERWRITE_SECURE, \00", align 1
@.ref.tmp.30 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.29, i32 0, i32 0), i64 26 }], align 8
@.str.31 = private unnamed_addr constant [30 x i8] c"EXCLUDE_OVERWRITE_HTTP_ONLY, \00", align 1
@.ref.tmp.32 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.31, i32 0, i32 0), i64 29 }], align 8
@.str.33 = private unnamed_addr constant [25 x i8] c"EXCLUDE_INVALID_DOMAIN, \00", align 1
@.ref.tmp.34 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.33, i32 0, i32 0), i64 24 }], align 8
@.str.35 = private unnamed_addr constant [25 x i8] c"EXCLUDE_INVALID_PREFIX, \00", align 1
@.ref.tmp.36 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.35, i32 0, i32 0), i64 24 }], align 8
@.str.37 = private unnamed_addr constant [28 x i8] c"EXCLUDE_INVALID_SAMEPARTY, \00", align 1
@.ref.tmp.38 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.37, i32 0, i32 0), i64 27 }], align 8
@.str.39 = private unnamed_addr constant [12 x i8] c"DO_NOT_WARN\00", align 1
@.ref.tmp.40 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i32 0, i32 0), i64 11 }], align 8
@.str.41 = private unnamed_addr constant [47 x i8] c"WARN_SAMESITE_UNSPECIFIED_CROSS_SITE_CONTEXT, \00", align 1
@.ref.tmp.42 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.41, i32 0, i32 0), i64 46 }], align 8
@.str.43 = private unnamed_addr constant [30 x i8] c"WARN_SAMESITE_NONE_INSECURE, \00", align 1
@.ref.tmp.44 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.43, i32 0, i32 0), i64 29 }], align 8
@.str.45 = private unnamed_addr constant [45 x i8] c"WARN_SAMESITE_UNSPECIFIED_LAX_ALLOW_UNSAFE, \00", align 1
@.ref.tmp.46 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.45, i32 0, i32 0), i64 44 }], align 8
@.str.47 = private unnamed_addr constant [44 x i8] c"WARN_STRICT_LAX_DOWNGRADE_STRICT_SAMESITE, \00", align 1
@.ref.tmp.48 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.47, i32 0, i32 0), i64 43 }], align 8
@.str.49 = private unnamed_addr constant [46 x i8] c"WARN_STRICT_CROSS_DOWNGRADE_STRICT_SAMESITE, \00", align 1
@.ref.tmp.50 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.49, i32 0, i32 0), i64 45 }], align 8
@.str.51 = private unnamed_addr constant [43 x i8] c"WARN_STRICT_CROSS_DOWNGRADE_LAX_SAMESITE, \00", align 1
@.ref.tmp.52 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.51, i32 0, i32 0), i64 42 }], align 8
@.str.53 = private unnamed_addr constant [43 x i8] c"WARN_LAX_CROSS_DOWNGRADE_STRICT_SAMESITE, \00", align 1
@.ref.tmp.54 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.53, i32 0, i32 0), i64 42 }], align 8
@.str.55 = private unnamed_addr constant [40 x i8] c"WARN_LAX_CROSS_DOWNGRADE_LAX_SAMESITE, \00", align 1
@.ref.tmp.56 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.55, i32 0, i32 0), i64 39 }], align 8
@.str.57 = private unnamed_addr constant [47 x i8] c"WARN_SECURE_ACCESS_GRANTED_NON_CRYPTOGRAPHIC, \00", align 1
@.ref.tmp.58 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i32 0, i32 0), i64 46 }], align 8
@.str.59 = private unnamed_addr constant [46 x i8] c"WARN_SAMEPARTY_EXCLUSION_OVERRULED_SAMESITE, \00", align 1
@.ref.tmp.60 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.59, i32 0, i32 0), i64 45 }], align 8
@.str.61 = private unnamed_addr constant [46 x i8] c"WARN_SAMEPARTY_INCLUSION_OVERRULED_SAMESITE, \00", align 1
@.ref.tmp.62 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.61, i32 0, i32 0), i64 45 }], align 8
@.str.63 = private unnamed_addr constant [50 x i8] c"WARN_SAMESITE_LAX_EXCLUDED_AFTER_BUGFIX_1166211, \00", align 1
@.ref.tmp.64 = private constant [1 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.63, i32 0, i32 0), i64 49 }], align 8

@_ZN3net21CookieInclusionStatusC1Ev = hidden unnamed_addr alias void (%"class.net::CookieInclusionStatus"*), void (%"class.net::CookieInclusionStatus"*)* @_ZN3net21CookieInclusionStatusC2Ev
@_ZN3net21CookieInclusionStatusC1ENS0_15ExclusionReasonE = hidden unnamed_addr alias void (%"class.net::CookieInclusionStatus"*, i32), void (%"class.net::CookieInclusionStatus"*, i32)* @_ZN3net21CookieInclusionStatusC2ENS0_15ExclusionReasonE
@_ZN3net21CookieInclusionStatusC1ENS0_15ExclusionReasonENS0_13WarningReasonE = hidden unnamed_addr alias void (%"class.net::CookieInclusionStatus"*, i32, i32), void (%"class.net::CookieInclusionStatus"*, i32, i32)* @_ZN3net21CookieInclusionStatusC2ENS0_15ExclusionReasonENS0_13WarningReasonE

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net21CookieInclusionStatusC2Ev(%"class.net::CookieInclusionStatus"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 0
  store i32 0, i32* %2, align 4
  %3 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 1
  store i32 0, i32* %3, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net21CookieInclusionStatusC2ENS0_15ExclusionReasonE(%"class.net::CookieInclusionStatus"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 0
  %4 = shl i32 1, %1
  store i32 %4, i32* %3, align 4
  %5 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 1
  store i32 0, i32* %5, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net21CookieInclusionStatusC2ENS0_15ExclusionReasonENS0_13WarningReasonE(%"class.net::CookieInclusionStatus"* nocapture, i32, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 0
  %5 = shl i32 1, %1
  store i32 %5, i32* %4, align 4
  %6 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 1
  %7 = shl i32 1, %2
  store i32 %7, i32* %6, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net21CookieInclusionStatuseqERKS0_(%"class.net::CookieInclusionStatus"* nocapture readonly, %"class.net::CookieInclusionStatus"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %10, %12
  br label %14

14:                                               ; preds = %8, %2
  %15 = phi i1 [ false, %2 ], [ %13, %8 ]
  ret i1 %15
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net21CookieInclusionStatusneERKS0_(%"class.net::CookieInclusionStatus"* nocapture readonly, %"class.net::CookieInclusionStatus"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp ne i32 %10, %12
  br label %14

14:                                               ; preds = %2, %8
  %15 = phi i1 [ true, %2 ], [ %13, %8 ]
  ret i1 %15
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net21CookieInclusionStatus9IsIncludeEv(%"class.net::CookieInclusionStatus"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net21CookieInclusionStatus18HasExclusionReasonENS0_15ExclusionReasonE(%"class.net::CookieInclusionStatus"* nocapture readonly, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = shl i32 1, %1
  %6 = and i32 %4, %5
  %7 = icmp ne i32 %6, 0
  ret i1 %7
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net21CookieInclusionStatus22HasOnlyExclusionReasonENS0_15ExclusionReasonE(%"class.net::CookieInclusionStatus"* nocapture readonly, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = shl i32 1, %1
  %6 = icmp eq i32 %4, %5
  ret i1 %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3net21CookieInclusionStatus18AddExclusionReasonENS0_15ExclusionReasonE(%"class.net::CookieInclusionStatus"* nocapture, i32) local_unnamed_addr #2 align 2 {
  %3 = shl i32 1, %1
  %4 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = or i32 %5, %3
  store i32 %6, i32* %4, align 4
  %7 = and i32 %6, -385
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = and i32 %11, -8
  store i32 %12, i32* %10, align 4
  br label %13

13:                                               ; preds = %9, %2
  %14 = and i32 %6, -225
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %13
  %17 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = and i32 %18, -249
  store i32 %19, i32* %17, align 4
  br label %20

20:                                               ; preds = %13, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net21CookieInclusionStatus25MaybeClearSameSiteWarningEv(%"class.net::CookieInclusionStatus"* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, -385
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, -8
  store i32 %9, i32* %7, align 4
  br label %10

10:                                               ; preds = %1, %6
  %11 = load i32, i32* %2, align 4
  %12 = and i32 %11, -225
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = and i32 %16, -249
  store i32 %17, i32* %15, align 4
  br label %18

18:                                               ; preds = %14, %10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3net21CookieInclusionStatus21RemoveExclusionReasonENS0_15ExclusionReasonE(%"class.net::CookieInclusionStatus"* nocapture, i32) local_unnamed_addr #2 align 2 {
  %3 = shl i32 1, %1
  %4 = xor i32 %3, -1
  %5 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, %4
  store i32 %7, i32* %5, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3net21CookieInclusionStatus22RemoveExclusionReasonsERKNSt3__16vectorINS0_15ExclusionReasonENS1_9allocatorIS3_EEEE(%"class.net::CookieInclusionStatus"* nocapture, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %4, %6
  br i1 %7, label %97, label %8

8:                                                ; preds = %2
  %9 = ptrtoint i32* %4 to i64
  %10 = getelementptr i32, i32* %6, i64 -1
  %11 = ptrtoint i32* %10 to i64
  %12 = sub i64 %11, %9
  %13 = lshr i64 %12, 2
  %14 = add nuw nsw i64 %13, 1
  %15 = icmp ult i64 %14, 8
  br i1 %15, label %16, label %19

16:                                               ; preds = %76, %8
  %17 = phi i32 [ 0, %8 ], [ %84, %76 ]
  %18 = phi i32* [ %4, %8 ], [ %21, %76 ]
  br label %89

19:                                               ; preds = %8
  %20 = and i64 %14, 9223372036854775800
  %21 = getelementptr i32, i32* %4, i64 %20
  %22 = add nsw i64 %20, -8
  %23 = lshr exact i64 %22, 3
  %24 = add nuw nsw i64 %23, 1
  %25 = and i64 %24, 1
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %58, label %27

27:                                               ; preds = %19
  %28 = sub nuw nsw i64 %24, %25
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %55, %29 ]
  %31 = phi <4 x i32> [ zeroinitializer, %27 ], [ %53, %29 ]
  %32 = phi <4 x i32> [ zeroinitializer, %27 ], [ %54, %29 ]
  %33 = phi i64 [ %28, %27 ], [ %56, %29 ]
  %34 = getelementptr i32, i32* %4, i64 %30
  %35 = bitcast i32* %34 to <4 x i32>*
  %36 = load <4 x i32>, <4 x i32>* %35, align 4
  %37 = getelementptr i32, i32* %34, i64 4
  %38 = bitcast i32* %37 to <4 x i32>*
  %39 = load <4 x i32>, <4 x i32>* %38, align 4
  %40 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %36
  %41 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %39
  %42 = or <4 x i32> %40, %31
  %43 = or <4 x i32> %41, %32
  %44 = or i64 %30, 8
  %45 = getelementptr i32, i32* %4, i64 %44
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 4
  %48 = getelementptr i32, i32* %45, i64 4
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4
  %51 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %47
  %52 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %50
  %53 = or <4 x i32> %51, %42
  %54 = or <4 x i32> %52, %43
  %55 = add i64 %30, 16
  %56 = add i64 %33, -2
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %29, !llvm.loop !2

58:                                               ; preds = %29, %19
  %59 = phi <4 x i32> [ undef, %19 ], [ %53, %29 ]
  %60 = phi <4 x i32> [ undef, %19 ], [ %54, %29 ]
  %61 = phi i64 [ 0, %19 ], [ %55, %29 ]
  %62 = phi <4 x i32> [ zeroinitializer, %19 ], [ %53, %29 ]
  %63 = phi <4 x i32> [ zeroinitializer, %19 ], [ %54, %29 ]
  %64 = icmp eq i64 %25, 0
  br i1 %64, label %76, label %65

65:                                               ; preds = %58
  %66 = getelementptr i32, i32* %4, i64 %61
  %67 = getelementptr i32, i32* %66, i64 4
  %68 = bitcast i32* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4
  %70 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %69
  %71 = or <4 x i32> %70, %63
  %72 = bitcast i32* %66 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 4
  %74 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %73
  %75 = or <4 x i32> %74, %62
  br label %76

76:                                               ; preds = %58, %65
  %77 = phi <4 x i32> [ %59, %58 ], [ %75, %65 ]
  %78 = phi <4 x i32> [ %60, %58 ], [ %71, %65 ]
  %79 = or <4 x i32> %78, %77
  %80 = shufflevector <4 x i32> %79, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %81 = or <4 x i32> %79, %80
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %83 = or <4 x i32> %81, %82
  %84 = extractelement <4 x i32> %83, i32 0
  %85 = icmp eq i64 %14, %20
  br i1 %85, label %86, label %16

86:                                               ; preds = %89, %76
  %87 = phi i32 [ %84, %76 ], [ %94, %89 ]
  %88 = xor i32 %87, -1
  br label %97

89:                                               ; preds = %16, %89
  %90 = phi i32 [ %94, %89 ], [ %17, %16 ]
  %91 = phi i32* [ %95, %89 ], [ %18, %16 ]
  %92 = load i32, i32* %91, align 4
  %93 = shl i32 1, %92
  %94 = or i32 %93, %90
  %95 = getelementptr inbounds i32, i32* %91, i64 1
  %96 = icmp eq i32* %95, %6
  br i1 %96, label %86, label %89, !llvm.loop !4

97:                                               ; preds = %2, %86
  %98 = phi i32 [ -1, %2 ], [ %88, %86 ]
  %99 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 0
  %100 = load i32, i32* %99, align 4
  %101 = and i32 %100, %98
  store i32 %101, i32* %99, align 4
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZNK3net21CookieInclusionStatus23ExclusionReasonsWithoutERKNSt3__16vectorINS0_15ExclusionReasonENS1_9allocatorIS3_EEEE(%"class.net::CookieInclusionStatus"* nocapture readonly, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %4, %6
  br i1 %7, label %89, label %8

8:                                                ; preds = %2
  %9 = ptrtoint i32* %4 to i64
  %10 = getelementptr i32, i32* %6, i64 -1
  %11 = ptrtoint i32* %10 to i64
  %12 = sub i64 %11, %9
  %13 = lshr i64 %12, 2
  %14 = add nuw nsw i64 %13, 1
  %15 = icmp ult i64 %14, 8
  br i1 %15, label %16, label %19

16:                                               ; preds = %76, %8
  %17 = phi i32 [ 0, %8 ], [ %84, %76 ]
  %18 = phi i32* [ %4, %8 ], [ %21, %76 ]
  br label %94

19:                                               ; preds = %8
  %20 = and i64 %14, 9223372036854775800
  %21 = getelementptr i32, i32* %4, i64 %20
  %22 = add nsw i64 %20, -8
  %23 = lshr exact i64 %22, 3
  %24 = add nuw nsw i64 %23, 1
  %25 = and i64 %24, 1
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %58, label %27

27:                                               ; preds = %19
  %28 = sub nuw nsw i64 %24, %25
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %55, %29 ]
  %31 = phi <4 x i32> [ zeroinitializer, %27 ], [ %53, %29 ]
  %32 = phi <4 x i32> [ zeroinitializer, %27 ], [ %54, %29 ]
  %33 = phi i64 [ %28, %27 ], [ %56, %29 ]
  %34 = getelementptr i32, i32* %4, i64 %30
  %35 = bitcast i32* %34 to <4 x i32>*
  %36 = load <4 x i32>, <4 x i32>* %35, align 4
  %37 = getelementptr i32, i32* %34, i64 4
  %38 = bitcast i32* %37 to <4 x i32>*
  %39 = load <4 x i32>, <4 x i32>* %38, align 4
  %40 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %36
  %41 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %39
  %42 = or <4 x i32> %40, %31
  %43 = or <4 x i32> %41, %32
  %44 = or i64 %30, 8
  %45 = getelementptr i32, i32* %4, i64 %44
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 4
  %48 = getelementptr i32, i32* %45, i64 4
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4
  %51 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %47
  %52 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %50
  %53 = or <4 x i32> %51, %42
  %54 = or <4 x i32> %52, %43
  %55 = add i64 %30, 16
  %56 = add i64 %33, -2
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %29, !llvm.loop !6

58:                                               ; preds = %29, %19
  %59 = phi <4 x i32> [ undef, %19 ], [ %53, %29 ]
  %60 = phi <4 x i32> [ undef, %19 ], [ %54, %29 ]
  %61 = phi i64 [ 0, %19 ], [ %55, %29 ]
  %62 = phi <4 x i32> [ zeroinitializer, %19 ], [ %53, %29 ]
  %63 = phi <4 x i32> [ zeroinitializer, %19 ], [ %54, %29 ]
  %64 = icmp eq i64 %25, 0
  br i1 %64, label %76, label %65

65:                                               ; preds = %58
  %66 = getelementptr i32, i32* %4, i64 %61
  %67 = getelementptr i32, i32* %66, i64 4
  %68 = bitcast i32* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4
  %70 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %69
  %71 = or <4 x i32> %70, %63
  %72 = bitcast i32* %66 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 4
  %74 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %73
  %75 = or <4 x i32> %74, %62
  br label %76

76:                                               ; preds = %58, %65
  %77 = phi <4 x i32> [ %59, %58 ], [ %75, %65 ]
  %78 = phi <4 x i32> [ %60, %58 ], [ %71, %65 ]
  %79 = or <4 x i32> %78, %77
  %80 = shufflevector <4 x i32> %79, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %81 = or <4 x i32> %79, %80
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %83 = or <4 x i32> %81, %82
  %84 = extractelement <4 x i32> %83, i32 0
  %85 = icmp eq i64 %14, %20
  br i1 %85, label %86, label %16

86:                                               ; preds = %94, %76
  %87 = phi i32 [ %84, %76 ], [ %99, %94 ]
  %88 = xor i32 %87, -1
  br label %89

89:                                               ; preds = %86, %2
  %90 = phi i32 [ -1, %2 ], [ %88, %86 ]
  %91 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 0
  %92 = load i32, i32* %91, align 4
  %93 = and i32 %92, %90
  ret i32 %93

94:                                               ; preds = %16, %94
  %95 = phi i32 [ %99, %94 ], [ %17, %16 ]
  %96 = phi i32* [ %100, %94 ], [ %18, %16 ]
  %97 = load i32, i32* %96, align 4
  %98 = shl i32 1, %97
  %99 = or i32 %98, %95
  %100 = getelementptr inbounds i32, i32* %96, i64 1
  %101 = icmp eq i32* %100, %6
  br i1 %101, label %86, label %94, !llvm.loop !7
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3net21CookieInclusionStatus19RemoveWarningReasonENS0_13WarningReasonE(%"class.net::CookieInclusionStatus"* nocapture, i32) local_unnamed_addr #2 align 2 {
  %3 = shl i32 1, %1
  %4 = xor i32 %3, -1
  %5 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, %4
  store i32 %7, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3net21CookieInclusionStatus28ShouldRecordDowngradeMetricsEv(%"class.net::CookieInclusionStatus"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, -225
  %5 = icmp eq i32 %4, 0
  ret i1 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net21CookieInclusionStatus10ShouldWarnEv(%"class.net::CookieInclusionStatus"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = icmp ne i32 %3, 0
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net21CookieInclusionStatus16HasWarningReasonENS0_13WarningReasonE(%"class.net::CookieInclusionStatus"* nocapture readonly, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = shl i32 1, %1
  %6 = and i32 %4, %5
  %7 = icmp ne i32 %6, 0
  ret i1 %7
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3net21CookieInclusionStatus19HasDowngradeWarningEPNS0_13WarningReasonE(%"class.net::CookieInclusionStatus"* nocapture readonly, i32*) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %16, label %6

6:                                                ; preds = %2
  %7 = and i32 %4, 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %6
  %10 = and i32 %4, 16
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %18, label %12

12:                                               ; preds = %24, %21, %18, %9, %6
  %13 = phi i32 [ 3, %6 ], [ 4, %9 ], [ 5, %18 ], [ 6, %21 ], [ 7, %24 ]
  %14 = icmp eq i32* %1, null
  br i1 %14, label %16, label %15

15:                                               ; preds = %12
  store i32 %13, i32* %1, align 4
  br label %16

16:                                               ; preds = %24, %2, %15, %12
  %17 = phi i1 [ true, %12 ], [ true, %15 ], [ false, %2 ], [ false, %24 ]
  ret i1 %17

18:                                               ; preds = %9
  %19 = and i32 %4, 32
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %12

21:                                               ; preds = %18
  %22 = and i32 %4, 64
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %12

24:                                               ; preds = %21
  %25 = trunc i32 %4 to i8
  %26 = icmp sgt i8 %25, -1
  br i1 %26, label %16, label %12
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3net21CookieInclusionStatus16AddWarningReasonENS0_13WarningReasonE(%"class.net::CookieInclusionStatus"* nocapture, i32) local_unnamed_addr #2 align 2 {
  %3 = shl i32 1, %1
  %4 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = or i32 %5, %3
  store i32 %6, i32* %4, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK3net21CookieInclusionStatus36GetBreakingDowngradeMetricsEnumValueERK4GURL(%"class.net::CookieInclusionStatus"* nocapture readonly, %class.GURL* dereferenceable(120)) local_unnamed_addr #3 align 2 {
  %3 = tail call zeroext i1 @_ZNK4GURL21SchemeIsCryptographicEv(%class.GURL* %1) #10
  %4 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %32, label %7

7:                                                ; preds = %2
  %8 = and i32 %5, 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %22

10:                                               ; preds = %7
  %11 = and i32 %5, 16
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %24

13:                                               ; preds = %10
  %14 = and i32 %5, 32
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %26

16:                                               ; preds = %13
  %17 = and i32 %5, 64
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %28

19:                                               ; preds = %16
  %20 = trunc i32 %5 to i8
  %21 = icmp sgt i8 %20, -1
  br i1 %21, label %32, label %30

22:                                               ; preds = %7
  %23 = select i1 %3, i32 7, i32 2
  br label %34

24:                                               ; preds = %10
  %25 = select i1 %3, i32 8, i32 3
  br label %34

26:                                               ; preds = %13
  %27 = select i1 %3, i32 9, i32 4
  br label %34

28:                                               ; preds = %16
  %29 = select i1 %3, i32 10, i32 5
  br label %34

30:                                               ; preds = %19
  %31 = select i1 %3, i32 11, i32 6
  br label %34

32:                                               ; preds = %2, %19
  %33 = zext i1 %3 to i32
  br label %34

34:                                               ; preds = %32, %30, %28, %26, %24, %22
  %35 = phi i32 [ %33, %32 ], [ %31, %30 ], [ %29, %28 ], [ %27, %26 ], [ %25, %24 ], [ %23, %22 ]
  ret i32 %35
}

declare zeroext i1 @_ZNK4GURL21SchemeIsCryptographicEv(%class.GURL*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3net21CookieInclusionStatus14GetDebugStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.net::CookieInclusionStatus"* readonly) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %5 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #10
  %6 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %2
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.2, i64 0, i64 0)) #10
  %10 = load i32, i32* %6, align 4
  br label %11

11:                                               ; preds = %9, %2
  %12 = phi i32 [ %10, %9 ], [ %7, %2 ]
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %11
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.4, i64 0, i64 0)) #10
  %16 = load i32, i32* %6, align 4
  br label %17

17:                                               ; preds = %11, %15
  %18 = phi i32 [ %12, %11 ], [ %16, %15 ]
  %19 = and i32 %18, 2
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %23, label %21

21:                                               ; preds = %17
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.6, i64 0, i64 0)) #10
  %22 = load i32, i32* %6, align 4
  br label %23

23:                                               ; preds = %17, %21
  %24 = phi i32 [ %18, %17 ], [ %22, %21 ]
  %25 = and i32 %24, 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %23
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.8, i64 0, i64 0)) #10
  %28 = load i32, i32* %6, align 4
  br label %29

29:                                               ; preds = %23, %27
  %30 = phi i32 [ %24, %23 ], [ %28, %27 ]
  %31 = and i32 %30, 8
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %35, label %33

33:                                               ; preds = %29
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.10, i64 0, i64 0)) #10
  %34 = load i32, i32* %6, align 4
  br label %35

35:                                               ; preds = %29, %33
  %36 = phi i32 [ %30, %29 ], [ %34, %33 ]
  %37 = and i32 %36, 16
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %41, label %39

39:                                               ; preds = %35
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.12, i64 0, i64 0)) #10
  %40 = load i32, i32* %6, align 4
  br label %41

41:                                               ; preds = %35, %39
  %42 = phi i32 [ %36, %35 ], [ %40, %39 ]
  %43 = and i32 %42, 32
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %47, label %45

45:                                               ; preds = %41
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.14, i64 0, i64 0)) #10
  %46 = load i32, i32* %6, align 4
  br label %47

47:                                               ; preds = %41, %45
  %48 = phi i32 [ %42, %41 ], [ %46, %45 ]
  %49 = and i32 %48, 64
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %47
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.16, i64 0, i64 0)) #10
  %52 = load i32, i32* %6, align 4
  br label %53

53:                                               ; preds = %47, %51
  %54 = phi i32 [ %48, %47 ], [ %52, %51 ]
  %55 = trunc i32 %54 to i8
  %56 = icmp slt i8 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %53
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.18, i64 0, i64 0)) #10
  %58 = load i32, i32* %6, align 4
  br label %59

59:                                               ; preds = %57, %53
  %60 = phi i32 [ %58, %57 ], [ %54, %53 ]
  %61 = and i32 %60, 256
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %65, label %63

63:                                               ; preds = %59
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.20, i64 0, i64 0)) #10
  %64 = load i32, i32* %6, align 4
  br label %65

65:                                               ; preds = %59, %63
  %66 = phi i32 [ %60, %59 ], [ %64, %63 ]
  %67 = and i32 %66, 512
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %71, label %69

69:                                               ; preds = %65
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.22, i64 0, i64 0)) #10
  %70 = load i32, i32* %6, align 4
  br label %71

71:                                               ; preds = %65, %69
  %72 = phi i32 [ %66, %65 ], [ %70, %69 ]
  %73 = and i32 %72, 1024
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %77, label %75

75:                                               ; preds = %71
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.24, i64 0, i64 0)) #10
  %76 = load i32, i32* %6, align 4
  br label %77

77:                                               ; preds = %71, %75
  %78 = phi i32 [ %72, %71 ], [ %76, %75 ]
  %79 = and i32 %78, 2048
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %83, label %81

81:                                               ; preds = %77
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.26, i64 0, i64 0)) #10
  %82 = load i32, i32* %6, align 4
  br label %83

83:                                               ; preds = %77, %81
  %84 = phi i32 [ %78, %77 ], [ %82, %81 ]
  %85 = and i32 %84, 4096
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %89, label %87

87:                                               ; preds = %83
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.28, i64 0, i64 0)) #10
  %88 = load i32, i32* %6, align 4
  br label %89

89:                                               ; preds = %83, %87
  %90 = phi i32 [ %84, %83 ], [ %88, %87 ]
  %91 = and i32 %90, 8192
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %95, label %93

93:                                               ; preds = %89
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.30, i64 0, i64 0)) #10
  %94 = load i32, i32* %6, align 4
  br label %95

95:                                               ; preds = %89, %93
  %96 = phi i32 [ %90, %89 ], [ %94, %93 ]
  %97 = and i32 %96, 16384
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %101, label %99

99:                                               ; preds = %95
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.32, i64 0, i64 0)) #10
  %100 = load i32, i32* %6, align 4
  br label %101

101:                                              ; preds = %95, %99
  %102 = phi i32 [ %96, %95 ], [ %100, %99 ]
  %103 = trunc i32 %102 to i16
  %104 = icmp slt i16 %103, 0
  br i1 %104, label %105, label %107

105:                                              ; preds = %101
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.34, i64 0, i64 0)) #10
  %106 = load i32, i32* %6, align 4
  br label %107

107:                                              ; preds = %105, %101
  %108 = phi i32 [ %106, %105 ], [ %102, %101 ]
  %109 = and i32 %108, 65536
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %113, label %111

111:                                              ; preds = %107
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.36, i64 0, i64 0)) #10
  %112 = load i32, i32* %6, align 4
  br label %113

113:                                              ; preds = %107, %111
  %114 = phi i32 [ %108, %107 ], [ %112, %111 ]
  %115 = and i32 %114, 131072
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %118, label %117

117:                                              ; preds = %113
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.38, i64 0, i64 0)) #10
  br label %118

118:                                              ; preds = %113, %117
  %119 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %1, i64 0, i32 1
  %120 = load i32, i32* %119, align 4
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %123

122:                                              ; preds = %118
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.40, i64 0, i64 0)) #10
  br label %215

123:                                              ; preds = %118
  %124 = and i32 %120, 1
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %128, label %126

126:                                              ; preds = %123
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.42, i64 0, i64 0)) #10
  %127 = load i32, i32* %119, align 4
  br label %128

128:                                              ; preds = %123, %126
  %129 = phi i32 [ %120, %123 ], [ %127, %126 ]
  %130 = and i32 %129, 2
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %134, label %132

132:                                              ; preds = %128
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.44, i64 0, i64 0)) #10
  %133 = load i32, i32* %119, align 4
  br label %134

134:                                              ; preds = %128, %132
  %135 = phi i32 [ %129, %128 ], [ %133, %132 ]
  %136 = and i32 %135, 4
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %140, label %138

138:                                              ; preds = %134
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.46, i64 0, i64 0)) #10
  %139 = load i32, i32* %119, align 4
  br label %140

140:                                              ; preds = %134, %138
  %141 = phi i32 [ %135, %134 ], [ %139, %138 ]
  %142 = and i32 %141, 8
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %146, label %144

144:                                              ; preds = %140
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.48, i64 0, i64 0)) #10
  %145 = load i32, i32* %119, align 4
  br label %146

146:                                              ; preds = %140, %144
  %147 = phi i32 [ %141, %140 ], [ %145, %144 ]
  %148 = and i32 %147, 16
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %152, label %150

150:                                              ; preds = %146
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.50, i64 0, i64 0)) #10
  %151 = load i32, i32* %119, align 4
  br label %152

152:                                              ; preds = %146, %150
  %153 = phi i32 [ %147, %146 ], [ %151, %150 ]
  %154 = and i32 %153, 32
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %158, label %156

156:                                              ; preds = %152
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.52, i64 0, i64 0)) #10
  %157 = load i32, i32* %119, align 4
  br label %158

158:                                              ; preds = %152, %156
  %159 = phi i32 [ %153, %152 ], [ %157, %156 ]
  %160 = and i32 %159, 64
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %164, label %162

162:                                              ; preds = %158
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.54, i64 0, i64 0)) #10
  %163 = load i32, i32* %119, align 4
  br label %164

164:                                              ; preds = %158, %162
  %165 = phi i32 [ %159, %158 ], [ %163, %162 ]
  %166 = trunc i32 %165 to i8
  %167 = icmp slt i8 %166, 0
  br i1 %167, label %168, label %170

168:                                              ; preds = %164
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.56, i64 0, i64 0)) #10
  %169 = load i32, i32* %119, align 4
  br label %170

170:                                              ; preds = %168, %164
  %171 = phi i32 [ %169, %168 ], [ %165, %164 ]
  %172 = and i32 %171, 256
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %176, label %174

174:                                              ; preds = %170
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.58, i64 0, i64 0)) #10
  %175 = load i32, i32* %119, align 4
  br label %176

176:                                              ; preds = %170, %174
  %177 = phi i32 [ %171, %170 ], [ %175, %174 ]
  %178 = and i32 %177, 1024
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %182, label %180

180:                                              ; preds = %176
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.60, i64 0, i64 0)) #10
  %181 = load i32, i32* %119, align 4
  br label %182

182:                                              ; preds = %176, %180
  %183 = phi i32 [ %177, %176 ], [ %181, %180 ]
  %184 = and i32 %183, 2048
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %188, label %186

186:                                              ; preds = %182
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.62, i64 0, i64 0)) #10
  %187 = load i32, i32* %119, align 4
  br label %188

188:                                              ; preds = %182, %186
  %189 = phi i32 [ %183, %182 ], [ %187, %186 ]
  %190 = and i32 %189, 4096
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %193, label %192

192:                                              ; preds = %188
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %0, i64 1, %"class.base::BasicStringPiece"* getelementptr inbounds ([1 x %"class.base::BasicStringPiece"], [1 x %"class.base::BasicStringPiece"]* @.ref.tmp.64, i64 0, i64 0)) #10
  br label %193

193:                                              ; preds = %188, %192
  %194 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %195 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %194, i64 0, i32 1, i32 0
  %196 = load i8, i8* %195, align 1
  %197 = icmp slt i8 %196, 0
  %198 = load i8*, i8** %3, align 8
  %199 = load i64, i64* %4, align 8
  %200 = getelementptr inbounds i8, i8* %198, i64 %199
  %201 = ptrtoint i8* %198 to i64
  %202 = zext i8 %196 to i64
  %203 = getelementptr inbounds i8, i8* %5, i64 %202
  %204 = ptrtoint %"class.std::__1::basic_string"* %0 to i64
  %205 = select i1 %197, i8* %200, i8* %203
  %206 = select i1 %197, i64 %201, i64 %204
  %207 = select i1 %197, i64 %199, i64 %202
  %208 = getelementptr inbounds i8, i8* %205, i64 -2
  %209 = ptrtoint i8* %208 to i64
  %210 = sub i64 %209, %206
  %211 = icmp ult i64 %207, %210
  br i1 %211, label %212, label %214

212:                                              ; preds = %193
  %213 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"* %213) #11
  unreachable

214:                                              ; preds = %193
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE26__erase_external_with_moveEmm(%"class.std::__1::basic_string"* %0, i64 %210, i64 2) #10
  br label %215

215:                                              ; preds = %214, %122
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net21CookieInclusionStatus7IsValidEv(%"class.net::CookieInclusionStatus"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = icmp ult i32 %3, 262144
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp ult i32 %7, 8192
  br label %9

9:                                                ; preds = %5, %1
  %10 = phi i1 [ false, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3net21CookieInclusionStatus36HasExactlyExclusionReasonsForTestingENSt3__16vectorINS0_15ExclusionReasonENS1_9allocatorIS3_EEEE(%"class.net::CookieInclusionStatus"* nocapture readonly, %"class.std::__1::vector"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %3 = alloca %"class.std::__1::vector", align 8
  %4 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 24, i1 false) #10
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %6 = bitcast i32** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %1 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = ashr exact i64 %10, 2
  %12 = icmp eq i64 %10, 0
  br i1 %12, label %131, label %13

13:                                               ; preds = %2
  %14 = icmp ugt i64 %11, 4611686018427387903
  br i1 %14, label %15, label %17

15:                                               ; preds = %13
  %16 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %16) #11
  unreachable

17:                                               ; preds = %13
  %18 = tail call i8* @_Znwm(i64 %10) #12
  %19 = ptrtoint i8* %18 to i64
  %20 = bitcast i8* %18 to i32*
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %22 = bitcast i32** %21 to i8**
  store i8* %18, i8** %22, align 8
  %23 = bitcast %"class.std::__1::vector"* %3 to i8**
  store i8* %18, i8** %23, align 8
  %24 = getelementptr inbounds i32, i32* %20, i64 %11
  %25 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  store i32* %24, i32** %25, align 8
  %26 = bitcast i32** %21 to i64*
  %27 = icmp sgt i64 %10, 0
  br i1 %27, label %28, label %33

28:                                               ; preds = %17
  %29 = lshr exact i64 %10, 2
  %30 = inttoptr i64 %9 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %18, i8* align 4 %30, i64 %10, i1 false) #10
  %31 = getelementptr inbounds i32, i32* %20, i64 %29
  %32 = ptrtoint i32* %31 to i64
  br label %33

33:                                               ; preds = %17, %28
  %34 = phi i64 [ %32, %28 ], [ %19, %17 ]
  store i64 %34, i64* %26, align 8
  %35 = inttoptr i64 %34 to i32*
  %36 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %37 = icmp eq i32* %20, %35
  br i1 %37, label %123, label %38

38:                                               ; preds = %33
  %39 = getelementptr i32, i32* %35, i64 -1
  %40 = ptrtoint i32* %39 to i64
  %41 = sub i64 %40, %19
  %42 = lshr i64 %41, 2
  %43 = add nuw nsw i64 %42, 1
  %44 = icmp ult i64 %43, 8
  br i1 %44, label %112, label %45

45:                                               ; preds = %38
  %46 = and i64 %43, 9223372036854775800
  %47 = getelementptr i32, i32* %20, i64 %46
  %48 = add nsw i64 %46, -8
  %49 = lshr exact i64 %48, 3
  %50 = add nuw nsw i64 %49, 1
  %51 = and i64 %50, 1
  %52 = icmp eq i64 %48, 0
  br i1 %52, label %84, label %53

53:                                               ; preds = %45
  %54 = sub nuw nsw i64 %50, %51
  br label %55

55:                                               ; preds = %55, %53
  %56 = phi i64 [ 0, %53 ], [ %81, %55 ]
  %57 = phi <4 x i32> [ zeroinitializer, %53 ], [ %79, %55 ]
  %58 = phi <4 x i32> [ zeroinitializer, %53 ], [ %80, %55 ]
  %59 = phi i64 [ %54, %53 ], [ %82, %55 ]
  %60 = getelementptr i32, i32* %20, i64 %56
  %61 = bitcast i32* %60 to <4 x i32>*
  %62 = load <4 x i32>, <4 x i32>* %61, align 4
  %63 = getelementptr i32, i32* %60, i64 4
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 4
  %66 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %62
  %67 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %65
  %68 = or <4 x i32> %66, %57
  %69 = or <4 x i32> %67, %58
  %70 = or i64 %56, 8
  %71 = getelementptr i32, i32* %20, i64 %70
  %72 = bitcast i32* %71 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 4
  %74 = getelementptr i32, i32* %71, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  %76 = load <4 x i32>, <4 x i32>* %75, align 4
  %77 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %73
  %78 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %76
  %79 = or <4 x i32> %77, %68
  %80 = or <4 x i32> %78, %69
  %81 = add i64 %56, 16
  %82 = add i64 %59, -2
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %84, label %55, !llvm.loop !8

84:                                               ; preds = %55, %45
  %85 = phi <4 x i32> [ undef, %45 ], [ %79, %55 ]
  %86 = phi <4 x i32> [ undef, %45 ], [ %80, %55 ]
  %87 = phi i64 [ 0, %45 ], [ %81, %55 ]
  %88 = phi <4 x i32> [ zeroinitializer, %45 ], [ %79, %55 ]
  %89 = phi <4 x i32> [ zeroinitializer, %45 ], [ %80, %55 ]
  %90 = icmp eq i64 %51, 0
  br i1 %90, label %102, label %91

91:                                               ; preds = %84
  %92 = getelementptr i32, i32* %20, i64 %87
  %93 = getelementptr i32, i32* %92, i64 4
  %94 = bitcast i32* %93 to <4 x i32>*
  %95 = load <4 x i32>, <4 x i32>* %94, align 4
  %96 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %95
  %97 = or <4 x i32> %96, %89
  %98 = bitcast i32* %92 to <4 x i32>*
  %99 = load <4 x i32>, <4 x i32>* %98, align 4
  %100 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %99
  %101 = or <4 x i32> %100, %88
  br label %102

102:                                              ; preds = %84, %91
  %103 = phi <4 x i32> [ %85, %84 ], [ %101, %91 ]
  %104 = phi <4 x i32> [ %86, %84 ], [ %97, %91 ]
  %105 = or <4 x i32> %104, %103
  %106 = shufflevector <4 x i32> %105, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %107 = or <4 x i32> %105, %106
  %108 = shufflevector <4 x i32> %107, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %109 = or <4 x i32> %107, %108
  %110 = extractelement <4 x i32> %109, i32 0
  %111 = icmp eq i64 %43, %46
  br i1 %111, label %125, label %112

112:                                              ; preds = %102, %38
  %113 = phi i32* [ %20, %38 ], [ %47, %102 ]
  %114 = phi i32 [ 0, %38 ], [ %110, %102 ]
  br label %115

115:                                              ; preds = %112, %115
  %116 = phi i32* [ %121, %115 ], [ %113, %112 ]
  %117 = phi i32 [ %120, %115 ], [ %114, %112 ]
  %118 = load i32, i32* %116, align 4
  %119 = shl i32 1, %118
  %120 = or i32 %119, %117
  %121 = getelementptr inbounds i32, i32* %116, i64 1
  %122 = icmp eq i32* %121, %35
  br i1 %122, label %125, label %115, !llvm.loop !9

123:                                              ; preds = %33
  %124 = icmp eq i64 %34, 0
  br i1 %124, label %131, label %125

125:                                              ; preds = %115, %102, %123
  %126 = phi i32 [ 0, %123 ], [ %110, %102 ], [ %120, %115 ]
  %127 = phi i32* [ %35, %123 ], [ %20, %102 ], [ %20, %115 ]
  %128 = ptrtoint i32* %127 to i64
  %129 = bitcast i32** %36 to i64*
  store i64 %128, i64* %129, align 8
  %130 = bitcast i32* %127 to i8*
  tail call void @_ZdlPv(i8* %130) #12
  br label %131

131:                                              ; preds = %2, %123, %125
  %132 = phi i32 [ 0, %123 ], [ %126, %125 ], [ 0, %2 ]
  %133 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 0
  %134 = load i32, i32* %133, align 4
  %135 = icmp eq i32 %134, %132
  ret i1 %135
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN3net21CookieInclusionStatus25MakeFromReasonsForTestingENSt3__16vectorINS0_15ExclusionReasonENS1_9allocatorIS3_EEEENS2_INS0_13WarningReasonENS4_IS7_EEEE(%"class.std::__1::vector"* nocapture readonly, %"class.std::__1::vector.12"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %4, %6
  br i1 %7, label %89, label %8

8:                                                ; preds = %2
  %9 = ptrtoint i32* %4 to i64
  %10 = getelementptr i32, i32* %6, i64 -1
  %11 = ptrtoint i32* %10 to i64
  %12 = sub i64 %11, %9
  %13 = lshr i64 %12, 2
  %14 = add nuw nsw i64 %13, 1
  %15 = icmp ult i64 %14, 8
  br i1 %15, label %16, label %19

16:                                               ; preds = %76, %8
  %17 = phi i32* [ %4, %8 ], [ %21, %76 ]
  %18 = phi i32 [ 0, %8 ], [ %84, %76 ]
  br label %174

19:                                               ; preds = %8
  %20 = and i64 %14, 9223372036854775800
  %21 = getelementptr i32, i32* %4, i64 %20
  %22 = add nsw i64 %20, -8
  %23 = lshr exact i64 %22, 3
  %24 = add nuw nsw i64 %23, 1
  %25 = and i64 %24, 1
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %58, label %27

27:                                               ; preds = %19
  %28 = sub nuw nsw i64 %24, %25
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %55, %29 ]
  %31 = phi <4 x i32> [ zeroinitializer, %27 ], [ %53, %29 ]
  %32 = phi <4 x i32> [ zeroinitializer, %27 ], [ %54, %29 ]
  %33 = phi i64 [ %28, %27 ], [ %56, %29 ]
  %34 = getelementptr i32, i32* %4, i64 %30
  %35 = bitcast i32* %34 to <4 x i32>*
  %36 = load <4 x i32>, <4 x i32>* %35, align 4
  %37 = getelementptr i32, i32* %34, i64 4
  %38 = bitcast i32* %37 to <4 x i32>*
  %39 = load <4 x i32>, <4 x i32>* %38, align 4
  %40 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %36
  %41 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %39
  %42 = or <4 x i32> %40, %31
  %43 = or <4 x i32> %41, %32
  %44 = or i64 %30, 8
  %45 = getelementptr i32, i32* %4, i64 %44
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 4
  %48 = getelementptr i32, i32* %45, i64 4
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4
  %51 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %47
  %52 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %50
  %53 = or <4 x i32> %51, %42
  %54 = or <4 x i32> %52, %43
  %55 = add i64 %30, 16
  %56 = add i64 %33, -2
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %29, !llvm.loop !10

58:                                               ; preds = %29, %19
  %59 = phi <4 x i32> [ undef, %19 ], [ %53, %29 ]
  %60 = phi <4 x i32> [ undef, %19 ], [ %54, %29 ]
  %61 = phi i64 [ 0, %19 ], [ %55, %29 ]
  %62 = phi <4 x i32> [ zeroinitializer, %19 ], [ %53, %29 ]
  %63 = phi <4 x i32> [ zeroinitializer, %19 ], [ %54, %29 ]
  %64 = icmp eq i64 %25, 0
  br i1 %64, label %76, label %65

65:                                               ; preds = %58
  %66 = getelementptr i32, i32* %4, i64 %61
  %67 = getelementptr i32, i32* %66, i64 4
  %68 = bitcast i32* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4
  %70 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %69
  %71 = or <4 x i32> %70, %63
  %72 = bitcast i32* %66 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 4
  %74 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %73
  %75 = or <4 x i32> %74, %62
  br label %76

76:                                               ; preds = %58, %65
  %77 = phi <4 x i32> [ %59, %58 ], [ %75, %65 ]
  %78 = phi <4 x i32> [ %60, %58 ], [ %71, %65 ]
  %79 = or <4 x i32> %78, %77
  %80 = shufflevector <4 x i32> %79, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %81 = or <4 x i32> %79, %80
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %83 = or <4 x i32> %81, %82
  %84 = extractelement <4 x i32> %83, i32 0
  %85 = icmp eq i64 %14, %20
  br i1 %85, label %86, label %16

86:                                               ; preds = %174, %76
  %87 = phi i32 [ %84, %76 ], [ %179, %174 ]
  %88 = zext i32 %87 to i64
  br label %89

89:                                               ; preds = %86, %2
  %90 = phi i64 [ 0, %2 ], [ %88, %86 ]
  %91 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %1, i64 0, i32 0, i32 0
  %92 = load i32*, i32** %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %1, i64 0, i32 0, i32 1
  %94 = load i32*, i32** %93, align 8
  %95 = icmp eq i32* %92, %94
  br i1 %95, label %186, label %96

96:                                               ; preds = %89
  %97 = ptrtoint i32* %92 to i64
  %98 = getelementptr i32, i32* %94, i64 -1
  %99 = ptrtoint i32* %98 to i64
  %100 = sub i64 %99, %97
  %101 = lshr i64 %100, 2
  %102 = add nuw nsw i64 %101, 1
  %103 = icmp ult i64 %102, 8
  br i1 %103, label %104, label %107

104:                                              ; preds = %164, %96
  %105 = phi i32* [ %92, %96 ], [ %109, %164 ]
  %106 = phi i32 [ 0, %96 ], [ %172, %164 ]
  br label %189

107:                                              ; preds = %96
  %108 = and i64 %102, 9223372036854775800
  %109 = getelementptr i32, i32* %92, i64 %108
  %110 = add nsw i64 %108, -8
  %111 = lshr exact i64 %110, 3
  %112 = add nuw nsw i64 %111, 1
  %113 = and i64 %112, 1
  %114 = icmp eq i64 %110, 0
  br i1 %114, label %146, label %115

115:                                              ; preds = %107
  %116 = sub nuw nsw i64 %112, %113
  br label %117

117:                                              ; preds = %117, %115
  %118 = phi i64 [ 0, %115 ], [ %143, %117 ]
  %119 = phi <4 x i32> [ zeroinitializer, %115 ], [ %141, %117 ]
  %120 = phi <4 x i32> [ zeroinitializer, %115 ], [ %142, %117 ]
  %121 = phi i64 [ %116, %115 ], [ %144, %117 ]
  %122 = getelementptr i32, i32* %92, i64 %118
  %123 = bitcast i32* %122 to <4 x i32>*
  %124 = load <4 x i32>, <4 x i32>* %123, align 4
  %125 = getelementptr i32, i32* %122, i64 4
  %126 = bitcast i32* %125 to <4 x i32>*
  %127 = load <4 x i32>, <4 x i32>* %126, align 4
  %128 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %124
  %129 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %127
  %130 = or <4 x i32> %128, %119
  %131 = or <4 x i32> %129, %120
  %132 = or i64 %118, 8
  %133 = getelementptr i32, i32* %92, i64 %132
  %134 = bitcast i32* %133 to <4 x i32>*
  %135 = load <4 x i32>, <4 x i32>* %134, align 4
  %136 = getelementptr i32, i32* %133, i64 4
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4
  %139 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %135
  %140 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %138
  %141 = or <4 x i32> %139, %130
  %142 = or <4 x i32> %140, %131
  %143 = add i64 %118, 16
  %144 = add i64 %121, -2
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %146, label %117, !llvm.loop !11

146:                                              ; preds = %117, %107
  %147 = phi <4 x i32> [ undef, %107 ], [ %141, %117 ]
  %148 = phi <4 x i32> [ undef, %107 ], [ %142, %117 ]
  %149 = phi i64 [ 0, %107 ], [ %143, %117 ]
  %150 = phi <4 x i32> [ zeroinitializer, %107 ], [ %141, %117 ]
  %151 = phi <4 x i32> [ zeroinitializer, %107 ], [ %142, %117 ]
  %152 = icmp eq i64 %113, 0
  br i1 %152, label %164, label %153

153:                                              ; preds = %146
  %154 = getelementptr i32, i32* %92, i64 %149
  %155 = getelementptr i32, i32* %154, i64 4
  %156 = bitcast i32* %155 to <4 x i32>*
  %157 = load <4 x i32>, <4 x i32>* %156, align 4
  %158 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %157
  %159 = or <4 x i32> %158, %151
  %160 = bitcast i32* %154 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4
  %162 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %161
  %163 = or <4 x i32> %162, %150
  br label %164

164:                                              ; preds = %146, %153
  %165 = phi <4 x i32> [ %147, %146 ], [ %163, %153 ]
  %166 = phi <4 x i32> [ %148, %146 ], [ %159, %153 ]
  %167 = or <4 x i32> %166, %165
  %168 = shufflevector <4 x i32> %167, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %169 = or <4 x i32> %167, %168
  %170 = shufflevector <4 x i32> %169, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %171 = or <4 x i32> %169, %170
  %172 = extractelement <4 x i32> %171, i32 0
  %173 = icmp eq i64 %102, %108
  br i1 %173, label %182, label %104

174:                                              ; preds = %16, %174
  %175 = phi i32* [ %180, %174 ], [ %17, %16 ]
  %176 = phi i32 [ %179, %174 ], [ %18, %16 ]
  %177 = load i32, i32* %175, align 4
  %178 = shl i32 1, %177
  %179 = or i32 %178, %176
  %180 = getelementptr inbounds i32, i32* %175, i64 1
  %181 = icmp eq i32* %180, %6
  br i1 %181, label %86, label %174, !llvm.loop !12

182:                                              ; preds = %189, %164
  %183 = phi i32 [ %172, %164 ], [ %194, %189 ]
  %184 = zext i32 %183 to i64
  %185 = shl nuw i64 %184, 32
  br label %186

186:                                              ; preds = %182, %89
  %187 = phi i64 [ 0, %89 ], [ %185, %182 ]
  %188 = or i64 %187, %90
  ret i64 %188

189:                                              ; preds = %104, %189
  %190 = phi i32* [ %195, %189 ], [ %105, %104 ]
  %191 = phi i32 [ %194, %189 ], [ %106, %104 ]
  %192 = load i32, i32* %190, align 4
  %193 = shl i32 1, %192
  %194 = or i32 %193, %191
  %195 = getelementptr inbounds i32, i32* %190, i64 1
  %196 = icmp eq i32* %195, %94
  br i1 %196, label %182, label %189, !llvm.loop !13
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3net21CookieInclusionStatus34HasExactlyWarningReasonsForTestingENSt3__16vectorINS0_13WarningReasonENS1_9allocatorIS3_EEEE(%"class.net::CookieInclusionStatus"* nocapture readonly, %"class.std::__1::vector.12"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %3 = alloca %"class.std::__1::vector.12", align 8
  %4 = bitcast %"class.std::__1::vector.12"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 24, i1 false) #10
  %5 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %1, i64 0, i32 0, i32 1
  %6 = bitcast i32** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.12"* %1 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = ashr exact i64 %10, 2
  %12 = icmp eq i64 %10, 0
  br i1 %12, label %127, label %13

13:                                               ; preds = %2
  %14 = icmp ugt i64 %11, 4611686018427387903
  br i1 %14, label %15, label %17

15:                                               ; preds = %13
  %16 = bitcast %"class.std::__1::vector.12"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %16) #11
  unreachable

17:                                               ; preds = %13
  %18 = tail call i8* @_Znwm(i64 %10) #12
  %19 = ptrtoint i8* %18 to i64
  %20 = bitcast i8* %18 to i32*
  %21 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %3, i64 0, i32 0, i32 1
  %22 = bitcast i32** %21 to i8**
  store i8* %18, i8** %22, align 8
  %23 = bitcast %"class.std::__1::vector.12"* %3 to i8**
  store i8* %18, i8** %23, align 8
  %24 = getelementptr inbounds i32, i32* %20, i64 %11
  %25 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  store i32* %24, i32** %25, align 8
  %26 = bitcast i32** %21 to i64*
  %27 = ptrtoint i8* %18 to i64
  %28 = icmp sgt i64 %10, 0
  br i1 %28, label %29, label %34

29:                                               ; preds = %17
  %30 = lshr exact i64 %10, 2
  %31 = inttoptr i64 %9 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %18, i8* align 4 %31, i64 %10, i1 false) #10
  %32 = getelementptr inbounds i32, i32* %20, i64 %30
  %33 = ptrtoint i32* %32 to i64
  br label %34

34:                                               ; preds = %17, %29
  %35 = phi i64 [ %33, %29 ], [ %27, %17 ]
  store i64 %35, i64* %26, align 8
  %36 = inttoptr i64 %35 to i32*
  %37 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %3, i64 0, i32 0, i32 1
  %38 = icmp eq i32* %20, %36
  br i1 %38, label %124, label %39

39:                                               ; preds = %34
  %40 = getelementptr i32, i32* %36, i64 -1
  %41 = ptrtoint i32* %40 to i64
  %42 = sub i64 %41, %19
  %43 = lshr i64 %42, 2
  %44 = add nuw nsw i64 %43, 1
  %45 = icmp ult i64 %44, 8
  br i1 %45, label %113, label %46

46:                                               ; preds = %39
  %47 = and i64 %44, 9223372036854775800
  %48 = getelementptr i32, i32* %20, i64 %47
  %49 = add nsw i64 %47, -8
  %50 = lshr exact i64 %49, 3
  %51 = add nuw nsw i64 %50, 1
  %52 = and i64 %51, 1
  %53 = icmp eq i64 %49, 0
  br i1 %53, label %85, label %54

54:                                               ; preds = %46
  %55 = sub nuw nsw i64 %51, %52
  br label %56

56:                                               ; preds = %56, %54
  %57 = phi i64 [ 0, %54 ], [ %82, %56 ]
  %58 = phi <4 x i32> [ zeroinitializer, %54 ], [ %80, %56 ]
  %59 = phi <4 x i32> [ zeroinitializer, %54 ], [ %81, %56 ]
  %60 = phi i64 [ %55, %54 ], [ %83, %56 ]
  %61 = getelementptr i32, i32* %20, i64 %57
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4
  %64 = getelementptr i32, i32* %61, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4
  %67 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %63
  %68 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %66
  %69 = or <4 x i32> %67, %58
  %70 = or <4 x i32> %68, %59
  %71 = or i64 %57, 8
  %72 = getelementptr i32, i32* %20, i64 %71
  %73 = bitcast i32* %72 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 4
  %75 = getelementptr i32, i32* %72, i64 4
  %76 = bitcast i32* %75 to <4 x i32>*
  %77 = load <4 x i32>, <4 x i32>* %76, align 4
  %78 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %74
  %79 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %77
  %80 = or <4 x i32> %78, %69
  %81 = or <4 x i32> %79, %70
  %82 = add i64 %57, 16
  %83 = add i64 %60, -2
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %56, !llvm.loop !14

85:                                               ; preds = %56, %46
  %86 = phi <4 x i32> [ undef, %46 ], [ %80, %56 ]
  %87 = phi <4 x i32> [ undef, %46 ], [ %81, %56 ]
  %88 = phi i64 [ 0, %46 ], [ %82, %56 ]
  %89 = phi <4 x i32> [ zeroinitializer, %46 ], [ %80, %56 ]
  %90 = phi <4 x i32> [ zeroinitializer, %46 ], [ %81, %56 ]
  %91 = icmp eq i64 %52, 0
  br i1 %91, label %103, label %92

92:                                               ; preds = %85
  %93 = getelementptr i32, i32* %20, i64 %88
  %94 = getelementptr i32, i32* %93, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 4
  %97 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %96
  %98 = or <4 x i32> %97, %90
  %99 = bitcast i32* %93 to <4 x i32>*
  %100 = load <4 x i32>, <4 x i32>* %99, align 4
  %101 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %100
  %102 = or <4 x i32> %101, %89
  br label %103

103:                                              ; preds = %85, %92
  %104 = phi <4 x i32> [ %86, %85 ], [ %102, %92 ]
  %105 = phi <4 x i32> [ %87, %85 ], [ %98, %92 ]
  %106 = or <4 x i32> %105, %104
  %107 = shufflevector <4 x i32> %106, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %108 = or <4 x i32> %106, %107
  %109 = shufflevector <4 x i32> %108, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %110 = or <4 x i32> %108, %109
  %111 = extractelement <4 x i32> %110, i32 0
  %112 = icmp eq i64 %44, %47
  br i1 %112, label %124, label %113

113:                                              ; preds = %103, %39
  %114 = phi i32* [ %20, %39 ], [ %48, %103 ]
  %115 = phi i32 [ 0, %39 ], [ %111, %103 ]
  br label %116

116:                                              ; preds = %113, %116
  %117 = phi i32* [ %122, %116 ], [ %114, %113 ]
  %118 = phi i32 [ %121, %116 ], [ %115, %113 ]
  %119 = load i32, i32* %117, align 4
  %120 = shl i32 1, %119
  %121 = or i32 %120, %118
  %122 = getelementptr inbounds i32, i32* %117, i64 1
  %123 = icmp eq i32* %122, %36
  br i1 %123, label %124, label %116, !llvm.loop !15

124:                                              ; preds = %116, %103, %34
  %125 = phi i32 [ 0, %34 ], [ %111, %103 ], [ %121, %116 ]
  %126 = bitcast i32** %37 to i64*
  store i64 %19, i64* %126, align 8
  tail call void @_ZdlPv(i8* nonnull %18) #12
  br label %127

127:                                              ; preds = %2, %124
  %128 = phi i32 [ %125, %124 ], [ 0, %2 ]
  %129 = getelementptr inbounds %"class.net::CookieInclusionStatus", %"class.net::CookieInclusionStatus"* %0, i64 0, i32 1
  %130 = load i32, i32* %129, align 4
  %131 = icmp eq i32 %130, %128
  ret i1 %131
}

declare void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"*, i64, %"class.base::BasicStringPiece"*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #8

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE26__erase_external_with_moveEmm(%"class.std::__1::basic_string"*, i64, i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !5, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !5, !3}
!13 = distinct !{!13, !5, !3}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !5, !3}
