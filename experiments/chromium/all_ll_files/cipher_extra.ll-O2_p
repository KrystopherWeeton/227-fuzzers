; ModuleID = '../../third_party/boringssl/src/crypto/cipher_extra/cipher_extra.c'
source_filename = "../../third_party/boringssl/src/crypto/cipher_extra/cipher_extra.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }

@.str = private unnamed_addr constant [4 x i8] c"rc4\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"des-cbc\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"des-ede3-cbc\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"3des\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"aes-128-cbc\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"aes-192-cbc\00", align 1
@.str.6 = private unnamed_addr constant [12 x i8] c"aes-256-cbc\00", align 1
@.str.7 = private unnamed_addr constant [12 x i8] c"aes-128-ctr\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"aes-192-ctr\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"aes-256-ctr\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"aes-128-ecb\00", align 1
@.str.11 = private unnamed_addr constant [12 x i8] c"aes-192-ecb\00", align 1
@.str.12 = private unnamed_addr constant [12 x i8] c"aes-256-ecb\00", align 1
@.str.13 = private unnamed_addr constant [12 x i8] c"aes-128-gcm\00", align 1
@.str.14 = private unnamed_addr constant [12 x i8] c"aes-192-gcm\00", align 1
@.str.15 = private unnamed_addr constant [12 x i8] c"aes-256-gcm\00", align 1
@.str.16 = private unnamed_addr constant [12 x i8] c"aes-128-ofb\00", align 1
@.str.17 = private unnamed_addr constant [12 x i8] c"aes-192-ofb\00", align 1
@.str.18 = private unnamed_addr constant [12 x i8] c"aes-256-ofb\00", align 1
@.str.19 = private unnamed_addr constant [8 x i8] c"des-ecb\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"des-ede\00", align 1
@.str.21 = private unnamed_addr constant [12 x i8] c"des-ede-cbc\00", align 1
@.str.22 = private unnamed_addr constant [8 x i8] c"rc2-cbc\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.evp_cipher_st* @EVP_get_cipherbynid(i32) local_unnamed_addr #0 {
  switch i32 %0, label %16 [
    i32 37, label %2
    i32 98, label %4
    i32 44, label %6
    i32 43, label %8
    i32 419, label %10
    i32 423, label %12
    i32 427, label %14
  ]

2:                                                ; preds = %1
  %3 = tail call %struct.evp_cipher_st* @EVP_rc2_cbc() #2
  br label %16

4:                                                ; preds = %1
  %5 = tail call %struct.evp_cipher_st* @EVP_rc2_40_cbc() #2
  br label %16

6:                                                ; preds = %1
  %7 = tail call %struct.evp_cipher_st* @EVP_des_ede3_cbc() #2
  br label %16

8:                                                ; preds = %1
  %9 = tail call %struct.evp_cipher_st* @EVP_des_cbc() #2
  br label %16

10:                                               ; preds = %1
  %11 = tail call %struct.evp_cipher_st* @EVP_aes_128_cbc() #2
  br label %16

12:                                               ; preds = %1
  %13 = tail call %struct.evp_cipher_st* @EVP_aes_192_cbc() #2
  br label %16

14:                                               ; preds = %1
  %15 = tail call %struct.evp_cipher_st* @EVP_aes_256_cbc() #2
  br label %16

16:                                               ; preds = %1, %14, %12, %10, %8, %6, %4, %2
  %17 = phi %struct.evp_cipher_st* [ %15, %14 ], [ %13, %12 ], [ %11, %10 ], [ %9, %8 ], [ %7, %6 ], [ %5, %4 ], [ %3, %2 ], [ null, %1 ]
  ret %struct.evp_cipher_st* %17
}

declare %struct.evp_cipher_st* @EVP_rc2_cbc() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_rc2_40_cbc() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_des_ede3_cbc() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_des_cbc() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_aes_128_cbc() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_aes_192_cbc() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_aes_256_cbc() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.evp_cipher_st* @EVP_get_cipherbyname(i8*) local_unnamed_addr #0 {
  %2 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0)) #2
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %6

4:                                                ; preds = %1
  %5 = tail call %struct.evp_cipher_st* @EVP_rc4() #2
  br label %114

6:                                                ; preds = %1
  %7 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0)) #2
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %6
  %10 = tail call %struct.evp_cipher_st* @EVP_des_cbc() #2
  br label %114

11:                                               ; preds = %6
  %12 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0)) #2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %11
  %15 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0)) #2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %14, %11
  %18 = tail call %struct.evp_cipher_st* @EVP_des_ede3_cbc() #2
  br label %114

19:                                               ; preds = %14
  %20 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0)) #2
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %19
  %23 = tail call %struct.evp_cipher_st* @EVP_aes_128_cbc() #2
  br label %114

24:                                               ; preds = %19
  %25 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0)) #2
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %24
  %28 = tail call %struct.evp_cipher_st* @EVP_aes_192_cbc() #2
  br label %114

29:                                               ; preds = %24
  %30 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0)) #2
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %29
  %33 = tail call %struct.evp_cipher_st* @EVP_aes_256_cbc() #2
  br label %114

34:                                               ; preds = %29
  %35 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i64 0, i64 0)) #2
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %34
  %38 = tail call %struct.evp_cipher_st* @EVP_aes_128_ctr() #2
  br label %114

39:                                               ; preds = %34
  %40 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0)) #2
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %39
  %43 = tail call %struct.evp_cipher_st* @EVP_aes_192_ctr() #2
  br label %114

44:                                               ; preds = %39
  %45 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i64 0, i64 0)) #2
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %44
  %48 = tail call %struct.evp_cipher_st* @EVP_aes_256_ctr() #2
  br label %114

49:                                               ; preds = %44
  %50 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0)) #2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %49
  %53 = tail call %struct.evp_cipher_st* @EVP_aes_128_ecb() #2
  br label %114

54:                                               ; preds = %49
  %55 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0)) #2
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %54
  %58 = tail call %struct.evp_cipher_st* @EVP_aes_192_ecb() #2
  br label %114

59:                                               ; preds = %54
  %60 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.12, i64 0, i64 0)) #2
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %59
  %63 = tail call %struct.evp_cipher_st* @EVP_aes_256_ecb() #2
  br label %114

64:                                               ; preds = %59
  %65 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13, i64 0, i64 0)) #2
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %69

67:                                               ; preds = %64
  %68 = tail call %struct.evp_cipher_st* @EVP_aes_128_gcm() #2
  br label %114

69:                                               ; preds = %64
  %70 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.14, i64 0, i64 0)) #2
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %74

72:                                               ; preds = %69
  %73 = tail call %struct.evp_cipher_st* @EVP_aes_192_gcm() #2
  br label %114

74:                                               ; preds = %69
  %75 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.15, i64 0, i64 0)) #2
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %79

77:                                               ; preds = %74
  %78 = tail call %struct.evp_cipher_st* @EVP_aes_256_gcm() #2
  br label %114

79:                                               ; preds = %74
  %80 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i64 0, i64 0)) #2
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %84

82:                                               ; preds = %79
  %83 = tail call %struct.evp_cipher_st* @EVP_aes_128_ofb() #2
  br label %114

84:                                               ; preds = %79
  %85 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i64 0, i64 0)) #2
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %89

87:                                               ; preds = %84
  %88 = tail call %struct.evp_cipher_st* @EVP_aes_192_ofb() #2
  br label %114

89:                                               ; preds = %84
  %90 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.18, i64 0, i64 0)) #2
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %94

92:                                               ; preds = %89
  %93 = tail call %struct.evp_cipher_st* @EVP_aes_256_ofb() #2
  br label %114

94:                                               ; preds = %89
  %95 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i64 0, i64 0)) #2
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %99

97:                                               ; preds = %94
  %98 = tail call %struct.evp_cipher_st* @EVP_des_ecb() #2
  br label %114

99:                                               ; preds = %94
  %100 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i64 0, i64 0)) #2
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %104

102:                                              ; preds = %99
  %103 = tail call %struct.evp_cipher_st* @EVP_des_ede() #2
  br label %114

104:                                              ; preds = %99
  %105 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i64 0, i64 0)) #2
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %109

107:                                              ; preds = %104
  %108 = tail call %struct.evp_cipher_st* @EVP_des_ede_cbc() #2
  br label %114

109:                                              ; preds = %104
  %110 = tail call i32 @OPENSSL_strcasecmp(i8* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i64 0, i64 0)) #2
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %114

112:                                              ; preds = %109
  %113 = tail call %struct.evp_cipher_st* @EVP_rc2_cbc() #2
  br label %114

114:                                              ; preds = %109, %112, %107, %102, %97, %92, %87, %82, %77, %72, %67, %62, %57, %52, %47, %42, %37, %32, %27, %22, %17, %9, %4
  %115 = phi %struct.evp_cipher_st* [ %5, %4 ], [ %10, %9 ], [ %18, %17 ], [ %23, %22 ], [ %28, %27 ], [ %33, %32 ], [ %38, %37 ], [ %43, %42 ], [ %48, %47 ], [ %53, %52 ], [ %58, %57 ], [ %63, %62 ], [ %68, %67 ], [ %73, %72 ], [ %78, %77 ], [ %83, %82 ], [ %88, %87 ], [ %93, %92 ], [ %98, %97 ], [ %103, %102 ], [ %108, %107 ], [ %113, %112 ], [ null, %109 ]
  ret %struct.evp_cipher_st* %115
}

declare i32 @OPENSSL_strcasecmp(i8*, i8*) local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_rc4() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_aes_128_ctr() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_aes_192_ctr() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_aes_256_ctr() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_aes_128_ecb() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_aes_192_ecb() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_aes_256_ecb() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_aes_128_gcm() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_aes_192_gcm() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_aes_256_gcm() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_aes_128_ofb() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_aes_192_ofb() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_aes_256_ofb() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_des_ecb() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_des_ede() local_unnamed_addr #1

declare %struct.evp_cipher_st* @EVP_des_ede_cbc() local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
