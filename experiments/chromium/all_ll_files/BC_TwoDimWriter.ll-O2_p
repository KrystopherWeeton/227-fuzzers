; ModuleID = '../../third_party/pdfium/fxbarcode/BC_TwoDimWriter.cpp'
source_filename = "../../third_party/pdfium/fxbarcode/BC_TwoDimWriter.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { float*, float*, %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { float* }
%class.CBC_TwoDimWriter = type <{ %class.CBC_Writer.base, [2 x i8], %"class.std::__1::unique_ptr", i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%class.CBC_Writer.base = type <{ i32 (...)**, i32, i32, i32, i32, i32, i16 }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CBC_CommonBitMatrix* }
%class.CBC_CommonBitMatrix = type { i32, i32, i32, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { i32* }
%class.CBC_Writer = type <{ i32 (...)**, i32, i32, i32, i32, i32, i16, [2 x i8] }>
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i8* }
%class.CFX_RenderDevice = type { i32 (...)**, %"class.fxcrt::RetainPtr", i32, i32, i32, i32, i8, %struct.FX_RECT, %"class.std::__1::unique_ptr.8" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr.4" }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %class.CFX_DIBitmap* }
%class.CFX_DIBitmap = type opaque
%struct.FX_RECT = type { i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %class.RenderDeviceDriverIface* }
%class.RenderDeviceDriverIface = type { i32 (...)** }
%class.CFX_Matrix = type { float, float, float, float, float, float }
%class.CFX_GraphStateData = type { i8, i8, float, float, float, %"class.std::__1::vector.14" }
%class.CFX_PathData = type { %"class.std::__1::vector.21" }
%"class.std::__1::vector.21" = type { %"class.std::__1::__vector_base.22" }
%"class.std::__1::__vector_base.22" = type { %class.FX_PATHPOINT*, %class.FX_PATHPOINT*, %"class.std::__1::__compressed_pair.23" }
%class.FX_PATHPOINT = type <{ %class.CFX_PTemplate, i8, i8, [2 x i8] }>
%class.CFX_PTemplate = type { float, float }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %class.FX_PATHPOINT* }
%struct.CFX_FillRenderOptions = type { i8, i8 }

@_ZTV16CBC_TwoDimWriter = hidden unnamed_addr constant { [14 x i8*] } { [14 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CBC_TwoDimWriter*)* @_ZN16CBC_TwoDimWriterD2Ev to i8*), i8* bitcast (void (%class.CBC_TwoDimWriter*)* @_ZN16CBC_TwoDimWriterD0Ev to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer15SetCharEncodingEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer15SetModuleHeightEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer14SetModuleWidthEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer9SetHeightEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer8SetWidthEi to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i8)* @_ZN10CBC_Writer15SetTextLocationE11BC_TEXT_LOC to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i8)* @_ZN10CBC_Writer18SetWideNarrowRatioEa to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i8)* @_ZN10CBC_Writer12SetStartCharEc to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i8)* @_ZN10CBC_Writer10SetEndCharEc to i8*), i8* bitcast (i1 (%class.CBC_Writer*, i32)* @_ZN10CBC_Writer23SetErrorCorrectionLevelEi to i8*)] }, align 8
@__const._ZN16CBC_TwoDimWriter18RenderDeviceResultEP16CFX_RenderDeviceRK10CFX_Matrix.data = private unnamed_addr constant { i8, i8, [2 x i8], float, float, float, %"class.std::__1::vector.14" } { i8 -86, i8 -86, [2 x i8] c"\AA\AA", float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, %"class.std::__1::vector.14" { %"class.std::__1::__vector_base.15" { float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*), %"class.std::__1::__compressed_pair.16" { %"struct.std::__1::__compressed_pair_elem.17" { float* inttoptr (i64 -6148914691236517206 to float*) } } } } }, align 8

@_ZN16CBC_TwoDimWriterC1Eb = hidden unnamed_addr alias void (%class.CBC_TwoDimWriter*, i1), void (%class.CBC_TwoDimWriter*, i1)* @_ZN16CBC_TwoDimWriterC2Eb
@_ZN16CBC_TwoDimWriterD1Ev = hidden unnamed_addr alias void (%class.CBC_TwoDimWriter*), void (%class.CBC_TwoDimWriter*)* @_ZN16CBC_TwoDimWriterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CBC_TwoDimWriterC2Eb(%class.CBC_TwoDimWriter*, i1 zeroext) unnamed_addr #0 align 2 {
  %3 = zext i1 %1 to i8
  %4 = bitcast %class.CBC_TwoDimWriter* %0 to %class.CBC_Writer*
  tail call void @_ZN10CBC_WriterC2Ev(%class.CBC_Writer* %4) #8
  %5 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*] }, { [14 x i8*] }* @_ZTV16CBC_TwoDimWriter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 2
  %7 = bitcast %"class.std::__1::unique_ptr"* %6 to i64*
  store i64 0, i64* %7, align 8
  %8 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 11
  store i32 1, i32* %8, align 8
  %9 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 12
  store i8 %3, i8* %9, align 4
  ret void
}

declare void @_ZN10CBC_WriterC2Ev(%class.CBC_Writer*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CBC_TwoDimWriterD2Ev(%class.CBC_TwoDimWriter*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*] }, { [14 x i8*] }* @_ZTV16CBC_TwoDimWriter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %class.CBC_CommonBitMatrix*, %class.CBC_CommonBitMatrix** %3, align 8
  store %class.CBC_CommonBitMatrix* null, %class.CBC_CommonBitMatrix** %3, align 8
  %5 = icmp eq %class.CBC_CommonBitMatrix* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  tail call void @_ZN19CBC_CommonBitMatrixD1Ev(%class.CBC_CommonBitMatrix* nonnull %4) #8
  %7 = bitcast %class.CBC_CommonBitMatrix* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = bitcast %class.CBC_TwoDimWriter* %0 to %class.CBC_Writer*
  tail call void @_ZN10CBC_WriterD2Ev(%class.CBC_Writer* %9) #8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN10CBC_WriterD2Ev(%class.CBC_Writer*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CBC_TwoDimWriterD0Ev(%class.CBC_TwoDimWriter*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*] }, { [14 x i8*] }* @_ZTV16CBC_TwoDimWriter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %class.CBC_CommonBitMatrix*, %class.CBC_CommonBitMatrix** %3, align 8
  store %class.CBC_CommonBitMatrix* null, %class.CBC_CommonBitMatrix** %3, align 8
  %5 = icmp eq %class.CBC_CommonBitMatrix* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  tail call void @_ZN19CBC_CommonBitMatrixD1Ev(%class.CBC_CommonBitMatrix* nonnull %4) #8
  %7 = bitcast %class.CBC_CommonBitMatrix* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = bitcast %class.CBC_TwoDimWriter* %0 to %class.CBC_Writer*
  tail call void @_ZN10CBC_WriterD2Ev(%class.CBC_Writer* %9) #8
  %10 = bitcast %class.CBC_TwoDimWriter* %0 to i8*
  tail call void @_ZdlPv(i8* %10) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN16CBC_TwoDimWriter12RenderResultEN6pdfium4spanIKhEEii(%class.CBC_TwoDimWriter* nocapture, %"class.pdfium::span"* nocapture readonly, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca i32, align 4
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %174, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 7
  store i32 %2, i32* %12, align 8
  %13 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 8
  store i32 %3, i32* %13, align 4
  %14 = add nsw i32 %2, 2
  %15 = add nsw i32 %3, 2
  %16 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16)
  %17 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 0, i32 3
  %18 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = load i32, i32* %17, align 4
  %21 = icmp slt i32 %19, %20
  %22 = select i1 %21, i32 %19, i32 %20
  %23 = sitofp i32 %22 to float
  %24 = bitcast i32* %5 to float*
  store float %23, float* %24, align 4
  %25 = bitcast float* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25)
  store float 8.000000e+00, float* %6, align 4
  %26 = icmp sgt i32 %22, 8
  %27 = select i1 %26, float* %6, float* %24
  %28 = bitcast float* %27 to i32*
  %29 = load i32, i32* %28, align 4
  store i32 %29, i32* %5, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25)
  %30 = bitcast float* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30)
  store float 1.000000e+00, float* %7, align 4
  %31 = bitcast i32 %29 to float
  %32 = fcmp olt float %31, 1.000000e+00
  %33 = select i1 %32, float* %7, float* %24
  %34 = bitcast float* %33 to i32*
  %35 = load i32, i32* %34, align 4
  store i32 %35, i32* %5, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30)
  %36 = bitcast i32 %35 to float
  %37 = sitofp i32 %14 to float
  %38 = fmul float %37, %36
  %39 = fptosi float %38 to i32
  %40 = fcmp ult float %38, 0xC1E0000000000000
  %41 = fcmp ugt float %38, 0x41DFFFFFE0000000
  %42 = sitofp i32 %15 to float
  %43 = fmul float %42, %36
  %44 = fptosi float %43 to i32
  %45 = or i1 %40, %41
  br i1 %45, label %46, label %47, !prof !2

46:                                               ; preds = %11
  tail call void @llvm.trap() #8
  unreachable

47:                                               ; preds = %11
  %48 = fcmp ugt float %43, 0x41DFFFFFE0000000
  %49 = fcmp ult float %43, 0xC1E0000000000000
  %50 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 9
  store i32 %39, i32* %50, align 8
  %51 = or i1 %49, %48
  br i1 %51, label %52, label %53, !prof !2

52:                                               ; preds = %47
  tail call void @llvm.trap() #8
  unreachable

53:                                               ; preds = %47
  %54 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 10
  store i32 %44, i32* %54, align 4
  %55 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 12
  %56 = load i8, i8* %55, align 4, !range !3
  %57 = icmp eq i8 %56, 0
  %58 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 0, i32 5
  %59 = load i32, i32* %58, align 8
  br i1 %57, label %66, label %60

60:                                               ; preds = %53
  %61 = icmp slt i32 %59, %39
  br i1 %61, label %172, label %62

62:                                               ; preds = %60
  %63 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 0, i32 4
  %64 = load i32, i32* %63, align 4
  %65 = icmp slt i32 %64, %44
  br i1 %65, label %172, label %89

66:                                               ; preds = %53
  %67 = icmp sgt i32 %59, %39
  %68 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 0, i32 4
  %69 = load i32, i32* %68, align 4
  %70 = icmp sgt i32 %69, %44
  %71 = or i1 %67, %70
  br i1 %71, label %72, label %89

72:                                               ; preds = %66
  %73 = sitofp i32 %59 to float
  %74 = sitofp i32 %39 to float
  %75 = fdiv float %73, %74
  %76 = tail call float @llvm.floor.f32(float %75) #8
  %77 = fptosi float %76 to i32
  %78 = sitofp i32 %69 to float
  %79 = sitofp i32 %44 to float
  %80 = fdiv float %78, %79
  %81 = tail call float @llvm.floor.f32(float %80) #8
  %82 = fptosi float %81 to i32
  %83 = icmp sgt i32 %77, 1
  %84 = select i1 %83, i32 %77, i32 1
  %85 = icmp sgt i32 %82, 1
  %86 = select i1 %85, i32 %82, i32 1
  %87 = mul nsw i32 %84, %39
  store i32 %87, i32* %50, align 8
  %88 = mul nsw i32 %86, %44
  store i32 %88, i32* %54, align 4
  br label %89

89:                                               ; preds = %66, %72, %62
  %90 = phi i32 [ %69, %72 ], [ %64, %62 ], [ %69, %66 ]
  %91 = phi i32 [ %88, %72 ], [ %44, %62 ], [ %44, %66 ]
  %92 = phi i32 [ %87, %72 ], [ %39, %62 ], [ %39, %66 ]
  %93 = sitofp i32 %92 to float
  %94 = fdiv float %93, %37
  %95 = tail call float @llvm.ceil.f32(float %94) #8
  %96 = fptosi float %95 to i32
  %97 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 3
  store i32 %96, i32* %97, align 8
  %98 = sitofp i32 %91 to float
  %99 = fdiv float %98, %42
  %100 = tail call float @llvm.ceil.f32(float %99) #8
  %101 = fptosi float %100 to i32
  %102 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 4
  store i32 %101, i32* %102, align 4
  br i1 %57, label %107, label %103

103:                                              ; preds = %89
  %104 = icmp slt i32 %101, %96
  %105 = select i1 %104, i32* %102, i32* %97
  %106 = load i32, i32* %105, align 4
  store i32 %106, i32* %97, align 8
  store i32 %106, i32* %102, align 4
  br label %107

107:                                              ; preds = %89, %103
  %108 = sub nsw i32 %59, %92
  %109 = sdiv i32 %108, 2
  %110 = icmp sgt i32 %109, 0
  %111 = select i1 %110, i32 %109, i32 0
  %112 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 5
  store i32 %111, i32* %112, align 8
  %113 = sub nsw i32 %90, %91
  %114 = sdiv i32 %113, 2
  %115 = icmp sgt i32 %114, 0
  %116 = select i1 %115, i32 %114, i32 0
  %117 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 6
  store i32 %116, i32* %117, align 4
  %118 = tail call i8* @_Znwm(i64 40) #9
  %119 = bitcast i8* %118 to %class.CBC_CommonBitMatrix*
  tail call void @_ZN19CBC_CommonBitMatrixC1Ev(%class.CBC_CommonBitMatrix* nonnull %119) #8
  %120 = ptrtoint i8* %118 to i64
  %121 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 2
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %121, i64 0, i32 0, i32 0, i32 0
  %123 = load %class.CBC_CommonBitMatrix*, %class.CBC_CommonBitMatrix** %122, align 8
  %124 = bitcast %"class.std::__1::unique_ptr"* %121 to i64*
  store i64 %120, i64* %124, align 8
  %125 = icmp eq %class.CBC_CommonBitMatrix* %123, null
  %126 = bitcast i8* %118 to %class.CBC_CommonBitMatrix*
  br i1 %125, label %130, label %127

127:                                              ; preds = %107
  tail call void @_ZN19CBC_CommonBitMatrixD1Ev(%class.CBC_CommonBitMatrix* nonnull %123) #8
  %128 = bitcast %class.CBC_CommonBitMatrix* %123 to i8*
  tail call void @_ZdlPv(i8* %128) #9
  %129 = load %class.CBC_CommonBitMatrix*, %class.CBC_CommonBitMatrix** %122, align 8
  br label %130

130:                                              ; preds = %127, %107
  %131 = phi %class.CBC_CommonBitMatrix* [ %129, %127 ], [ %126, %107 ]
  %132 = load i32, i32* %12, align 8
  %133 = load i32, i32* %13, align 4
  tail call void @_ZN19CBC_CommonBitMatrix4InitEii(%class.CBC_CommonBitMatrix* %131, i32 %132, i32 %133) #8
  %134 = load i32, i32* %13, align 4
  %135 = icmp sgt i32 %134, 0
  br i1 %135, label %136, label %172

136:                                              ; preds = %130
  %137 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 0, i32 0
  %138 = load i32, i32* %12, align 8
  br label %139

139:                                              ; preds = %136, %144
  %140 = phi i32 [ %138, %136 ], [ %145, %144 ]
  %141 = phi i32 [ %138, %136 ], [ %146, %144 ]
  %142 = phi i32 [ 0, %136 ], [ %147, %144 ]
  %143 = icmp sgt i32 %141, 0
  br i1 %143, label %150, label %144

144:                                              ; preds = %168, %139
  %145 = phi i32 [ %140, %139 ], [ %169, %168 ]
  %146 = phi i32 [ %141, %139 ], [ %169, %168 ]
  %147 = add nuw nsw i32 %142, 1
  %148 = load i32, i32* %13, align 4
  %149 = icmp slt i32 %147, %148
  br i1 %149, label %139, label %172

150:                                              ; preds = %139, %168
  %151 = phi i32 [ %169, %168 ], [ %140, %139 ]
  %152 = phi i32 [ %169, %168 ], [ %141, %139 ]
  %153 = phi i32 [ %170, %168 ], [ 0, %139 ]
  %154 = mul nsw i32 %152, %142
  %155 = add nsw i32 %154, %153
  %156 = sext i32 %155 to i64
  %157 = load i64, i64* %8, align 8
  %158 = icmp ugt i64 %157, %156
  br i1 %158, label %160, label %159, !prof !4

159:                                              ; preds = %150
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !5
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !6
  unreachable

160:                                              ; preds = %150
  %161 = load i8*, i8** %137, align 8
  %162 = getelementptr inbounds i8, i8* %161, i64 %156
  %163 = load i8, i8* %162, align 1
  %164 = icmp eq i8 %163, 1
  br i1 %164, label %165, label %168

165:                                              ; preds = %160
  %166 = load %class.CBC_CommonBitMatrix*, %class.CBC_CommonBitMatrix** %122, align 8
  tail call void @_ZN19CBC_CommonBitMatrix3SetEii(%class.CBC_CommonBitMatrix* %166, i32 %153, i32 %142) #8
  %167 = load i32, i32* %12, align 8
  br label %168

168:                                              ; preds = %160, %165
  %169 = phi i32 [ %151, %160 ], [ %167, %165 ]
  %170 = add nuw nsw i32 %153, 1
  %171 = icmp slt i32 %170, %169
  br i1 %171, label %150, label %144

172:                                              ; preds = %144, %130, %60, %62
  %173 = phi i1 [ false, %62 ], [ false, %60 ], [ true, %130 ], [ true, %144 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16)
  br label %174

174:                                              ; preds = %4, %172
  %175 = phi i1 [ %173, %172 ], [ false, %4 ]
  ret i1 %175
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare void @_ZN19CBC_CommonBitMatrix4InitEii(%class.CBC_CommonBitMatrix*, i32, i32) local_unnamed_addr #1

declare void @_ZN19CBC_CommonBitMatrix3SetEii(%class.CBC_CommonBitMatrix*, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CBC_TwoDimWriter18RenderDeviceResultEP16CFX_RenderDeviceRK10CFX_Matrix(%class.CBC_TwoDimWriter* nocapture readonly, %class.CFX_RenderDevice*, %class.CFX_Matrix* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.CFX_GraphStateData, align 8
  %5 = alloca %class.CFX_PathData, align 8
  %6 = alloca i16, align 2
  %7 = bitcast i16* %6 to %struct.CFX_FillRenderOptions*
  %8 = alloca %class.CFX_Matrix, align 16
  %9 = alloca %class.CFX_GraphStateData, align 8
  %10 = alloca %class.CFX_PathData, align 8
  %11 = alloca i16, align 2
  %12 = bitcast i16* %11 to %struct.CFX_FillRenderOptions*
  %13 = getelementptr inbounds %class.CFX_GraphStateData, %class.CFX_GraphStateData* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %13) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %13, i8* align 8 getelementptr inbounds ({ i8, i8, [2 x i8], float, float, float, %"class.std::__1::vector.14" }, { i8, i8, [2 x i8], float, float, float, %"class.std::__1::vector.14" }* @__const._ZN16CBC_TwoDimWriter18RenderDeviceResultEP16CFX_RenderDeviceRK10CFX_Matrix.data, i64 0, i32 0), i64 40, i1 false)
  call void @_ZN18CFX_GraphStateDataC1Ev(%class.CFX_GraphStateData* nonnull %4) #8
  %14 = bitcast %class.CFX_PathData* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #8
  %15 = bitcast %class.CFX_PathData* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false)
  call void @_ZN12CFX_PathDataC1Ev(%class.CFX_PathData* nonnull %5) #8
  %16 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 0, i32 5
  %17 = load i32, i32* %16, align 8
  %18 = sitofp i32 %17 to float
  %19 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 0, i32 4
  %20 = load i32, i32* %19, align 4
  %21 = sitofp i32 %20 to float
  call void @_ZN12CFX_PathData10AppendRectEffff(%class.CFX_PathData* nonnull %5, float 0.000000e+00, float 0.000000e+00, float %18, float %21) #8
  %22 = bitcast i16* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %22) #8
  store i16 1, i16* %6, align 2
  %23 = call zeroext i1 @_ZN16CFX_RenderDevice8DrawPathEPK12CFX_PathDataPK10CFX_MatrixPK18CFX_GraphStateDatajjRK21CFX_FillRenderOptions(%class.CFX_RenderDevice* %1, %class.CFX_PathData* nonnull %5, %class.CFX_Matrix* %2, %class.CFX_GraphStateData* nonnull %4, i32 -1, i32 -1, %struct.CFX_FillRenderOptions* nonnull dereferenceable(2) %7) #8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %22) #8
  %24 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 5
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 6
  %27 = load i32, i32* %26, align 4
  %28 = bitcast %class.CFX_Matrix* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28) #8
  %29 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %8, i64 0, i32 4
  %30 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %8, i64 0, i32 5
  %31 = bitcast %class.CFX_Matrix* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %28, i8* align 4 %31, i64 24, i1 false)
  %32 = load i32, i32* %16, align 8
  %33 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 9
  %34 = load i32, i32* %33, align 8
  %35 = icmp slt i32 %32, %34
  br i1 %35, label %36, label %85

36:                                               ; preds = %3
  %37 = load i32, i32* %19, align 4
  %38 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 10
  %39 = load i32, i32* %38, align 4
  %40 = icmp slt i32 %37, %39
  br i1 %40, label %41, label %85

41:                                               ; preds = %36
  %42 = sitofp i32 %32 to float
  %43 = sitofp i32 %34 to float
  %44 = fdiv float %42, %43
  %45 = sitofp i32 %37 to float
  %46 = sitofp i32 %39 to float
  %47 = fdiv float %45, %46
  %48 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %2, i64 0, i32 2
  %49 = bitcast %class.CFX_Matrix* %2 to <2 x float>*
  %50 = load <2 x float>, <2 x float>* %49, align 4, !noalias !7
  %51 = shufflevector <2 x float> %50, <2 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %52 = shufflevector <2 x float> %50, <2 x float> undef, <4 x i32> <i32 undef, i32 1, i32 undef, i32 undef>
  %53 = shufflevector <2 x float> %50, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %54 = bitcast float* %48 to <2 x float>*
  %55 = load <2 x float>, <2 x float>* %54, align 4, !noalias !7
  %56 = shufflevector <2 x float> %55, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = insertelement <4 x float> undef, float %44, i32 0
  %58 = shufflevector <4 x float> %57, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %59 = shufflevector <4 x float> %58, <4 x float> %53, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %60 = shufflevector <4 x float> %51, <4 x float> <float undef, float undef, float 0.000000e+00, float 0.000000e+00>, <4 x i32> <i32 0, i32 undef, i32 6, i32 7>
  %61 = shufflevector <4 x float> %60, <4 x float> %52, <4 x i32> <i32 0, i32 5, i32 2, i32 3>
  %62 = fmul <4 x float> %59, %61
  %63 = extractelement <2 x float> %55, i32 0
  %64 = insertelement <4 x float> undef, float %63, i32 0
  %65 = extractelement <2 x float> %55, i32 1
  %66 = insertelement <4 x float> %64, float %65, i32 1
  %67 = insertelement <4 x float> %66, float %47, i32 2
  %68 = insertelement <4 x float> %67, float %47, i32 3
  %69 = shufflevector <4 x float> <float 0.000000e+00, float 0.000000e+00, float undef, float undef>, <4 x float> %56, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %70 = fmul <4 x float> %68, %69
  %71 = fadd <4 x float> %62, %70
  %72 = extractelement <4 x float> %62, i32 2
  %73 = extractelement <4 x float> %70, i32 0
  %74 = fadd float %72, %73
  %75 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %2, i64 0, i32 4
  %76 = load float, float* %75, align 4, !noalias !7
  %77 = fadd float %74, %76
  %78 = extractelement <4 x float> %62, i32 3
  %79 = extractelement <4 x float> %70, i32 1
  %80 = fadd float %78, %79
  %81 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %2, i64 0, i32 5
  %82 = load float, float* %81, align 4, !noalias !7
  %83 = fadd float %80, %82
  %84 = bitcast %class.CFX_Matrix* %8 to <4 x float>*
  store <4 x float> %71, <4 x float>* %84, align 16
  store float %77, float* %29, align 16
  store float %83, float* %30, align 4
  br label %85

85:                                               ; preds = %41, %36, %3
  %86 = getelementptr inbounds %class.CFX_GraphStateData, %class.CFX_GraphStateData* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %86) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %86, i8* align 8 getelementptr inbounds ({ i8, i8, [2 x i8], float, float, float, %"class.std::__1::vector.14" }, { i8, i8, [2 x i8], float, float, float, %"class.std::__1::vector.14" }* @__const._ZN16CBC_TwoDimWriter18RenderDeviceResultEP16CFX_RenderDeviceRK10CFX_Matrix.data, i64 0, i32 0), i64 40, i1 false)
  call void @_ZN18CFX_GraphStateDataC1Ev(%class.CFX_GraphStateData* nonnull %9) #8
  %87 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 7
  %88 = load i32, i32* %87, align 8
  %89 = icmp sgt i32 %88, 0
  br i1 %89, label %90, label %107

90:                                               ; preds = %85
  %91 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 8
  %92 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %93 = bitcast %class.CFX_PathData* %10 to i8*
  %94 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 3
  %95 = getelementptr inbounds %class.CBC_TwoDimWriter, %class.CBC_TwoDimWriter* %0, i64 0, i32 4
  %96 = bitcast i16* %11 to i8*
  %97 = load i32, i32* %91, align 4
  %98 = bitcast %class.CFX_PathData* %10 to i8*
  br label %99

99:                                               ; preds = %90, %110
  %100 = phi i32 [ %88, %90 ], [ %111, %110 ]
  %101 = phi i32 [ %97, %90 ], [ %112, %110 ]
  %102 = phi i32 [ 0, %90 ], [ %104, %110 ]
  %103 = icmp sgt i32 %101, 0
  %104 = add nuw nsw i32 %102, 1
  br i1 %103, label %105, label %110

105:                                              ; preds = %99
  %106 = add nuw nsw i32 %102, 2
  br label %114

107:                                              ; preds = %110, %85
  call void @_ZN18CFX_GraphStateDataD1Ev(%class.CFX_GraphStateData* nonnull %9) #8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %86) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #8
  call void @_ZN12CFX_PathDataD1Ev(%class.CFX_PathData* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #8
  call void @_ZN18CFX_GraphStateDataD1Ev(%class.CFX_GraphStateData* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %13) #8
  ret void

108:                                              ; preds = %136
  %109 = load i32, i32* %87, align 8
  br label %110

110:                                              ; preds = %99, %108
  %111 = phi i32 [ %109, %108 ], [ %100, %99 ]
  %112 = phi i32 [ %137, %108 ], [ %101, %99 ]
  %113 = icmp slt i32 %104, %111
  br i1 %113, label %99, label %107

114:                                              ; preds = %105, %136
  %115 = phi i32 [ 0, %105 ], [ %118, %136 ]
  %116 = load %class.CBC_CommonBitMatrix*, %class.CBC_CommonBitMatrix** %92, align 8
  %117 = call zeroext i1 @_ZNK19CBC_CommonBitMatrix3GetEii(%class.CBC_CommonBitMatrix* %116, i32 %102, i32 %115) #8
  %118 = add nuw nsw i32 %115, 1
  br i1 %117, label %119, label %136

119:                                              ; preds = %114
  %120 = add nuw nsw i32 %115, 2
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %93) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %98, i8 -86, i64 24, i1 false)
  call void @_ZN12CFX_PathDataC1Ev(%class.CFX_PathData* nonnull %10) #8
  %121 = load i32, i32* %94, align 8
  %122 = mul nsw i32 %121, %104
  %123 = add nsw i32 %122, %25
  %124 = sitofp i32 %123 to float
  %125 = load i32, i32* %95, align 4
  %126 = mul nsw i32 %125, %118
  %127 = add nsw i32 %126, %27
  %128 = sitofp i32 %127 to float
  %129 = mul nsw i32 %121, %106
  %130 = add nsw i32 %129, %25
  %131 = sitofp i32 %130 to float
  %132 = mul nsw i32 %125, %120
  %133 = add nsw i32 %132, %27
  %134 = sitofp i32 %133 to float
  call void @_ZN12CFX_PathData10AppendRectEffff(%class.CFX_PathData* nonnull %10, float %124, float %128, float %131, float %134) #8
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %96) #8
  store i16 2, i16* %11, align 2
  %135 = call zeroext i1 @_ZN16CFX_RenderDevice8DrawPathEPK12CFX_PathDataPK10CFX_MatrixPK18CFX_GraphStateDatajjRK21CFX_FillRenderOptions(%class.CFX_RenderDevice* %1, %class.CFX_PathData* nonnull %10, %class.CFX_Matrix* nonnull %8, %class.CFX_GraphStateData* nonnull %9, i32 -16777216, i32 0, %struct.CFX_FillRenderOptions* nonnull dereferenceable(2) %12) #8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %96) #8
  call void @_ZN12CFX_PathDataD1Ev(%class.CFX_PathData* nonnull %10) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %93) #8
  br label %136

136:                                              ; preds = %114, %119
  %137 = load i32, i32* %91, align 4
  %138 = icmp slt i32 %118, %137
  br i1 %138, label %114, label %108
}

declare void @_ZN18CFX_GraphStateDataC1Ev(%class.CFX_GraphStateData*) unnamed_addr #1

declare void @_ZN12CFX_PathDataC1Ev(%class.CFX_PathData*) unnamed_addr #1

declare void @_ZN12CFX_PathData10AppendRectEffff(%class.CFX_PathData*, float, float, float, float) local_unnamed_addr #1

declare zeroext i1 @_ZN16CFX_RenderDevice8DrawPathEPK12CFX_PathDataPK10CFX_MatrixPK18CFX_GraphStateDatajjRK21CFX_FillRenderOptions(%class.CFX_RenderDevice*, %class.CFX_PathData*, %class.CFX_Matrix*, %class.CFX_GraphStateData*, i32, i32, %struct.CFX_FillRenderOptions* dereferenceable(2)) local_unnamed_addr #1

declare zeroext i1 @_ZNK19CBC_CommonBitMatrix3GetEii(%class.CBC_CommonBitMatrix*, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN12CFX_PathDataD1Ev(%class.CFX_PathData*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN18CFX_GraphStateDataD1Ev(%class.CFX_GraphStateData*) unnamed_addr #2

declare zeroext i1 @_ZN10CBC_Writer15SetCharEncodingEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer15SetModuleHeightEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer14SetModuleWidthEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer9SetHeightEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer8SetWidthEi(%class.CBC_Writer*, i32) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer15SetTextLocationE11BC_TEXT_LOC(%class.CBC_Writer*, i8 zeroext) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer18SetWideNarrowRatioEa(%class.CBC_Writer*, i8 signext) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer12SetStartCharEc(%class.CBC_Writer*, i8 signext) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer10SetEndCharEc(%class.CBC_Writer*, i8 signext) unnamed_addr #1

declare zeroext i1 @_ZN10CBC_Writer23SetErrorCorrectionLevelEi(%class.CBC_Writer*, i32) unnamed_addr #1

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #6

; Function Attrs: nounwind
declare void @_ZN19CBC_CommonBitMatrixD1Ev(%class.CBC_CommonBitMatrix*) unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

declare void @_ZN19CBC_CommonBitMatrixC1Ev(%class.CBC_CommonBitMatrix*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 2000, i32 1}
!5 = !{i32 -2143823291}
!6 = !{i32 -2143823270}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZNK10CFX_MatrixmlERKS_: argument 0"}
!9 = distinct !{!9, !"_ZNK10CFX_MatrixmlERKS_"}
