; ModuleID = '../../native_client/src/trusted/service_runtime/dyn_array.c'
source_filename = "../../native_client/src/trusted/service_runtime/dyn_array.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.DynArray = type { i64, i8**, i64, i32*, i64 }

@.str = private unnamed_addr constant [29 x i8] c"Set(%lu,%p) @ix %lu: 0x%08x\0A\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"After @ix %lu: 0x%08x, avail_ix %lu\0A\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"ix %lu: 0x%08x\0A\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"found first not-all-ones ix %lu\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @DynArrayCtor(%struct.DynArray* nocapture, i64) local_unnamed_addr #0 {
  %3 = icmp eq i64 %1, 0
  %4 = select i1 %3, i64 32, i64 %1
  %5 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 0
  store i64 0, i64* %5, align 8
  %6 = icmp ugt i64 %4, 2305843009213693951
  br i1 %6, label %23, label %7

7:                                                ; preds = %2
  %8 = tail call noalias i8* @calloc(i64 %4, i64 8) #7
  %9 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 1
  %10 = bitcast i8*** %9 to i8**
  store i8* %8, i8** %10, align 8
  %11 = icmp eq i8* %8, null
  br i1 %11, label %23, label %12

12:                                               ; preds = %7
  %13 = add nuw nsw i64 %4, 31
  %14 = lshr i64 %13, 5
  %15 = tail call noalias i8* @calloc(i64 %14, i64 4) #7
  %16 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 3
  %17 = bitcast i32** %16 to i8**
  store i8* %15, i8** %17, align 8
  %18 = icmp eq i8* %15, null
  br i1 %18, label %19, label %20

19:                                               ; preds = %12
  tail call void @free(i8* nonnull %8) #7
  store i8** null, i8*** %9, align 8
  br label %23

20:                                               ; preds = %12
  %21 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 4
  store i64 0, i64* %21, align 8
  %22 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 2
  store i64 %4, i64* %22, align 8
  br label %23

23:                                               ; preds = %7, %2, %20, %19
  %24 = phi i32 [ 0, %19 ], [ 1, %20 ], [ 0, %2 ], [ 0, %7 ]
  ret i32 %24
}

; Function Attrs: nofree nounwind
declare noalias i8* @calloc(i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @DynArrayDtor(%struct.DynArray* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 0
  store i64 0, i64* %2, align 8
  %3 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 1
  %4 = bitcast i8*** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @free(i8* %5) #7
  %6 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 3
  %7 = bitcast i32** %6 to i8**
  %8 = bitcast i8*** %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false)
  %9 = load i8*, i8** %7, align 8
  tail call void @free(i8* %9) #7
  store i32* null, i32** %6, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @DynArrayGet(%struct.DynArray* nocapture readonly, i64) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, %1
  br i1 %5, label %6, label %11

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 1
  %8 = load i8**, i8*** %7, align 8
  %9 = getelementptr inbounds i8*, i8** %8, i64 %1
  %10 = load i8*, i8** %9, align 8
  br label %11

11:                                               ; preds = %2, %6
  %12 = phi i8* [ %10, %6 ], [ null, %2 ]
  ret i8* %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @DynArraySet(%struct.DynArray* nocapture, i64, i8*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  br label %6

6:                                                ; preds = %9, %3
  %7 = phi i64 [ %5, %3 ], [ %10, %9 ]
  %8 = icmp ugt i64 %7, %1
  br i1 %8, label %12, label %9

9:                                                ; preds = %6
  %10 = shl i64 %7, 1
  %11 = icmp ult i64 %10, %7
  br i1 %11, label %84, label %6

12:                                               ; preds = %6
  %13 = icmp eq i64 %7, %5
  br i1 %13, label %44, label %14

14:                                               ; preds = %12
  %15 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 1
  %16 = bitcast i8*** %15 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = shl i64 %7, 3
  %19 = tail call i8* @realloc(i8* %17, i64 %18) #7
  %20 = icmp eq i8* %19, null
  br i1 %20, label %84, label %21

21:                                               ; preds = %14
  %22 = bitcast i8* %19 to i8**
  %23 = load i64, i64* %4, align 8
  %24 = getelementptr inbounds i8*, i8** %22, i64 %23
  %25 = bitcast i8** %24 to i8*
  %26 = sub i64 %7, %23
  %27 = shl i64 %26, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 0, i64 %27, i1 false)
  store i8* %19, i8** %16, align 8
  %28 = add i64 %23, 31
  %29 = lshr i64 %28, 5
  %30 = add i64 %7, 31
  %31 = lshr i64 %30, 5
  %32 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 3
  %33 = bitcast i32** %32 to i8**
  %34 = load i8*, i8** %33, align 8
  %35 = shl nuw nsw i64 %31, 2
  %36 = tail call i8* @realloc(i8* %34, i64 %35) #7
  %37 = icmp eq i8* %36, null
  br i1 %37, label %84, label %38

38:                                               ; preds = %21
  %39 = bitcast i8* %36 to i32*
  %40 = getelementptr inbounds i32, i32* %39, i64 %29
  %41 = bitcast i32* %40 to i8*
  %42 = sub nsw i64 %31, %29
  %43 = shl nsw i64 %42, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 0, i64 %43, i1 false)
  store i8* %36, i8** %33, align 8
  store i64 %7, i64* %4, align 8
  br label %44

44:                                               ; preds = %38, %12
  %45 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 1
  %46 = load i8**, i8*** %45, align 8
  %47 = getelementptr inbounds i8*, i8** %46, i64 %1
  store i8* %2, i8** %47, align 8
  %48 = lshr i64 %1, 5
  %49 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 3
  %50 = load i32*, i32** %49, align 8
  %51 = getelementptr inbounds i32, i32* %50, i64 %48
  %52 = load i32, i32* %51, align 4
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i64 %1, i8* %2, i64 %48, i32 %52) #7
  %53 = icmp eq i8* %2, null
  %54 = trunc i64 %1 to i32
  %55 = and i32 %54, 31
  %56 = shl i32 1, %55
  br i1 %53, label %64, label %57

57:                                               ; preds = %44
  %58 = load i32*, i32** %49, align 8
  %59 = getelementptr inbounds i32, i32* %58, i64 %48
  %60 = load i32, i32* %59, align 4
  %61 = or i32 %60, %56
  store i32 %61, i32* %59, align 4
  %62 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 4
  %63 = load i64, i64* %62, align 8
  br label %74

64:                                               ; preds = %44
  %65 = xor i32 %56, -1
  %66 = load i32*, i32** %49, align 8
  %67 = getelementptr inbounds i32, i32* %66, i64 %48
  %68 = load i32, i32* %67, align 4
  %69 = and i32 %68, %65
  store i32 %69, i32* %67, align 4
  %70 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 4
  %71 = load i64, i64* %70, align 8
  %72 = icmp ult i64 %48, %71
  br i1 %72, label %73, label %74

73:                                               ; preds = %64
  store i64 %48, i64* %70, align 8
  br label %74

74:                                               ; preds = %64, %73, %57
  %75 = phi i64 [ %71, %64 ], [ %48, %73 ], [ %63, %57 ]
  %76 = load i32*, i32** %49, align 8
  %77 = getelementptr inbounds i32, i32* %76, i64 %48
  %78 = load i32, i32* %77, align 4
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i64 %48, i32 %78, i64 %75) #7
  %79 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 0
  %80 = load i64, i64* %79, align 8
  %81 = icmp ugt i64 %80, %1
  br i1 %81, label %84, label %82

82:                                               ; preds = %74
  %83 = add nuw i64 %1, 1
  store i64 %83, i64* %79, align 8
  br label %84

84:                                               ; preds = %9, %82, %74, %14, %21
  %85 = phi i32 [ 0, %21 ], [ 0, %14 ], [ 1, %74 ], [ 1, %82 ], [ 0, %9 ]
  ret i32 %85
}

; Function Attrs: nounwind
declare noalias i8* @realloc(i8* nocapture, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i64 @DynArrayFirstAvail(%struct.DynArray* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 31
  %5 = lshr i64 %4, 5
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %16, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 3
  br label %9

9:                                                ; preds = %9, %7
  %10 = phi i64 [ 0, %7 ], [ %14, %9 ]
  %11 = load i32*, i32** %8, align 8
  %12 = getelementptr inbounds i32, i32* %11, i64 %10
  %13 = load i32, i32* %12, align 4
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 %10, i32 %13) #7
  %14 = add nuw nsw i64 %10, 1
  %15 = icmp eq i64 %14, %5
  br i1 %15, label %16, label %9

16:                                               ; preds = %9, %1
  %17 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 4
  %18 = load i64, i64* %17, align 8
  %19 = icmp ult i64 %18, %5
  br i1 %19, label %20, label %42

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.DynArray, %struct.DynArray* %0, i64 0, i32 3
  %22 = load i32*, i32** %21, align 8
  br label %23

23:                                               ; preds = %28, %20
  %24 = phi i64 [ %18, %20 ], [ %29, %28 ]
  %25 = getelementptr inbounds i32, i32* %22, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, -1
  br i1 %27, label %28, label %31

28:                                               ; preds = %23
  %29 = add nsw i64 %24, 1
  %30 = icmp eq i64 %29, %5
  br i1 %30, label %42, label %23

31:                                               ; preds = %23
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0), i64 %24) #7
  store i64 %24, i64* %17, align 8
  %32 = load i32*, i32** %21, align 8
  %33 = getelementptr inbounds i32, i32* %32, i64 %24
  %34 = load i32, i32* %33, align 4
  %35 = xor i32 %34, -1
  %36 = tail call i32 @llvm.cttz.i32(i32 %35, i1 true), !range !2
  %37 = icmp eq i32 %34, -1
  %38 = select i1 %37, i32 -1, i32 %36
  %39 = sext i32 %38 to i64
  %40 = shl i64 %24, 5
  %41 = add i64 %40, %39
  br label %44

42:                                               ; preds = %28, %16
  %43 = load i64, i64* %2, align 8
  br label %44

44:                                               ; preds = %42, %31
  %45 = phi i64 [ %41, %31 ], [ %43, %42 ]
  ret i64 %45
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
