; ModuleID = '../../ui/events/gesture_detection/gesture_touch_uma_histogram.cc'
source_filename = "../../ui/events/gesture_detection/gesture_touch_uma_histogram.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.ui::GestureEventData" = type { %"struct.ui::GestureEventDetails", i32, i32, %"class.base::TimeTicks", float, float, float, float, i32, i32 }
%"struct.ui::GestureEventDetails" = type { i32, %"union.ui::GestureEventDetails::Details", i32, i8, i32, i32, %"class.gfx::RectF" }
%"union.ui::GestureEventDetails::Details" = type { %struct.anon }
%struct.anon = type { float, float, i8 }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::HistogramBase" = type <{ i32 (...)**, i8*, %"struct.std::__1::atomic.5", [4 x i8] }>
%"struct.std::__1::atomic.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl.8" }
%"struct.std::__1::__cxx_atomic_impl.8" = type { %"struct.std::__1::__cxx_atomic_base_impl.9" }
%"struct.std::__1::__cxx_atomic_base_impl.9" = type { i32 }
%"class.ui::GestureTouchUMAHistogram" = type <{ i32, %"class.gfx::Point", float, i8, [3 x i8] }>
%"class.gfx::Point" = type { i32, i32 }
%"class.ui::MotionEvent" = type { i32 (...)** }
%"class.gfx::Vector2d" = type { i32, i32 }

@.str = private unnamed_addr constant [21 x i8] c"Event.GestureCreated\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"Event.MaxDragDistance.FINGER\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"Event.MaxDragDistance.STYLUS\00", align 1
@.str.3 = private unnamed_addr constant [29 x i8] c"Event.MaxDragDistance.ERASER\00", align 1
@_ZZN2ui24GestureTouchUMAHistogram18RecordGestureEventERKNS_16GestureEventDataEE24atomic_histogram_pointer.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui24GestureTouchUMAHistogram16RecordTouchEventERKNS_11MotionEventEE24atomic_histogram_pointer.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui24GestureTouchUMAHistogram16RecordTouchEventERKNS_11MotionEventEE24atomic_histogram_pointer_0.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui24GestureTouchUMAHistogram16RecordTouchEventERKNS_11MotionEventEE24atomic_histogram_pointer_1.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@switch.table._ZN2ui24GestureTouchUMAHistogram21UMAEventTypeFromEventERKNS_16GestureEventDataE = private unnamed_addr constant [3 x i32] [i32 8, i32 26, i32 27], align 4
@switch.table._ZN2ui24GestureTouchUMAHistogram21UMAEventTypeFromEventERKNS_16GestureEventDataE.4 = private unnamed_addr constant [3 x i32] [i32 9, i32 13, i32 14], align 4
@switch.table._ZN2ui24GestureTouchUMAHistogram21UMAEventTypeFromEventERKNS_16GestureEventDataE.5 = private unnamed_addr constant [3 x i32] [i32 35, i32 20, i32 24], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui24GestureTouchUMAHistogram18RecordGestureEventERKNS_16GestureEventDataE(%"struct.ui::GestureEventData"* nocapture readonly dereferenceable(88)) local_unnamed_addr #0 align 2 {
  %2 = load atomic i64, i64* @_ZZN2ui24GestureTouchUMAHistogram18RecordGestureEventERKNS_16GestureEventDataEE24atomic_histogram_pointer.0.0.0.0.0 acquire, align 8
  %3 = inttoptr i64 %2 to %"class.base::HistogramBase"*
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = tail call %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i32 1, i32 37, i32 38, i32 1) #6
  %7 = ptrtoint %"class.base::HistogramBase"* %6 to i64
  store atomic i64 %7, i64* @_ZZN2ui24GestureTouchUMAHistogram18RecordGestureEventERKNS_16GestureEventDataEE24atomic_histogram_pointer.0.0.0.0.0 release, align 8
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi %"class.base::HistogramBase"* [ %3, %1 ], [ %6, %5 ]
  %10 = tail call i32 @_ZN2ui24GestureTouchUMAHistogram21UMAEventTypeFromEventERKNS_16GestureEventDataE(%"struct.ui::GestureEventData"* dereferenceable(88) %0)
  %11 = bitcast %"class.base::HistogramBase"* %9 to void (%"class.base::HistogramBase"*, i32)***
  %12 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %12, i64 6
  %14 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %13, align 8
  tail call void %14(%"class.base::HistogramBase"* %9, i32 %10) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8*, i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN2ui24GestureTouchUMAHistogram21UMAEventTypeFromEventERKNS_16GestureEventDataE(%"struct.ui::GestureEventData"* nocapture readonly dereferenceable(88)) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"struct.ui::GestureEventData", %"struct.ui::GestureEventData"* %0, i64 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 4
  switch i32 %3, label %47 [
    i32 11, label %60
    i32 12, label %4
    i32 13, label %5
    i32 14, label %6
    i32 16, label %7
    i32 17, label %8
    i32 18, label %9
    i32 19, label %14
    i32 20, label %20
    i32 24, label %21
    i32 25, label %22
    i32 26, label %23
    i32 27, label %24
    i32 28, label %25
    i32 29, label %26
    i32 30, label %33
    i32 31, label %34
    i32 32, label %35
    i32 21, label %40
    i32 33, label %41
    i32 34, label %42
    i32 35, label %43
    i32 36, label %44
    i32 22, label %45
    i32 23, label %46
  ]

4:                                                ; preds = %1
  br label %60

5:                                                ; preds = %1
  br label %60

6:                                                ; preds = %1
  br label %60

7:                                                ; preds = %1
  br label %60

8:                                                ; preds = %1
  br label %60

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"struct.ui::GestureEventData", %"struct.ui::GestureEventData"* %0, i64 0, i32 0, i32 5
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, -1
  %13 = icmp ult i32 %12, 3
  br i1 %13, label %48, label %60

14:                                               ; preds = %1
  %15 = getelementptr inbounds %"struct.ui::GestureEventData", %"struct.ui::GestureEventData"* %0, i64 0, i32 0, i32 1
  %16 = bitcast %"union.ui::GestureEventDetails::Details"* %15 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = add i32 %17, -1
  %19 = icmp ult i32 %18, 3
  br i1 %19, label %52, label %60

20:                                               ; preds = %1
  br label %60

21:                                               ; preds = %1
  br label %60

22:                                               ; preds = %1
  br label %60

23:                                               ; preds = %1
  br label %60

24:                                               ; preds = %1
  br label %60

25:                                               ; preds = %1
  br label %60

26:                                               ; preds = %1
  %27 = getelementptr inbounds %"struct.ui::GestureEventData", %"struct.ui::GestureEventData"* %0, i64 0, i32 0, i32 5
  %28 = load i32, i32* %27, align 4
  %29 = icmp sgt i32 %28, 3
  %30 = icmp eq i32 %28, 3
  %31 = select i1 %30, i32 29, i32 18
  %32 = select i1 %29, i32 30, i32 %31
  br label %60

33:                                               ; preds = %1
  br label %60

34:                                               ; preds = %1
  br label %60

35:                                               ; preds = %1
  %36 = getelementptr inbounds %"struct.ui::GestureEventData", %"struct.ui::GestureEventData"* %0, i64 0, i32 0, i32 5
  %37 = load i32, i32* %36, align 4
  %38 = add i32 %37, -1
  %39 = icmp ult i32 %38, 3
  br i1 %39, label %56, label %60

40:                                               ; preds = %1
  br label %60

41:                                               ; preds = %1
  br label %60

42:                                               ; preds = %1
  br label %60

43:                                               ; preds = %1
  br label %60

44:                                               ; preds = %1
  br label %60

45:                                               ; preds = %1
  br label %60

46:                                               ; preds = %1
  br label %60

47:                                               ; preds = %1
  br label %60

48:                                               ; preds = %9
  %49 = sext i32 %12 to i64
  %50 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN2ui24GestureTouchUMAHistogram21UMAEventTypeFromEventERKNS_16GestureEventDataE, i64 0, i64 %49
  %51 = load i32, i32* %50, align 4
  ret i32 %51

52:                                               ; preds = %14
  %53 = sext i32 %18 to i64
  %54 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN2ui24GestureTouchUMAHistogram21UMAEventTypeFromEventERKNS_16GestureEventDataE.4, i64 0, i64 %53
  %55 = load i32, i32* %54, align 4
  ret i32 %55

56:                                               ; preds = %35
  %57 = sext i32 %38 to i64
  %58 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN2ui24GestureTouchUMAHistogram21UMAEventTypeFromEventERKNS_16GestureEventDataE.5, i64 0, i64 %57
  %59 = load i32, i32* %58, align 4
  ret i32 %59

60:                                               ; preds = %35, %14, %9, %26, %1, %47, %46, %45, %44, %43, %42, %41, %40, %34, %33, %25, %24, %23, %22, %21, %20, %8, %7, %6, %5, %4
  %61 = phi i32 [ 0, %47 ], [ 13, %46 ], [ 36, %45 ], [ 23, %44 ], [ 22, %43 ], [ 21, %42 ], [ 32, %41 ], [ 33, %40 ], [ 31, %34 ], [ 19, %33 ], [ 17, %25 ], [ 16, %24 ], [ 15, %23 ], [ 12, %22 ], [ 11, %21 ], [ 10, %20 ], [ 7, %8 ], [ 6, %7 ], [ 5, %6 ], [ 3, %5 ], [ 2, %4 ], [ 1, %1 ], [ %32, %26 ], [ 28, %9 ], [ 0, %14 ], [ 25, %35 ]
  ret i32 %61
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui24GestureTouchUMAHistogram16RecordTouchEventERKNS_11MotionEventE(%"class.ui::GestureTouchUMAHistogram"* nocapture, %"class.ui::MotionEvent"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to %"class.gfx::Vector2d"*
  %5 = bitcast %"class.ui::MotionEvent"* %1 to i32 (%"class.ui::MotionEvent"*)***
  %6 = load i32 (%"class.ui::MotionEvent"*)**, i32 (%"class.ui::MotionEvent"*)*** %5, align 8
  %7 = getelementptr inbounds i32 (%"class.ui::MotionEvent"*)*, i32 (%"class.ui::MotionEvent"*)** %6, i64 3
  %8 = load i32 (%"class.ui::MotionEvent"*)*, i32 (%"class.ui::MotionEvent"*)** %7, align 8
  %9 = tail call i32 %8(%"class.ui::MotionEvent"* %1) #6
  switch i32 %9, label %138 [
    i32 1, label %10
    i32 3, label %36
    i32 2, label %79
  ]

10:                                               ; preds = %2
  %11 = bitcast %"class.ui::MotionEvent"* %1 to i32 (%"class.ui::MotionEvent"*, i64)***
  %12 = load i32 (%"class.ui::MotionEvent"*, i64)**, i32 (%"class.ui::MotionEvent"*, i64)*** %11, align 8
  %13 = getelementptr inbounds i32 (%"class.ui::MotionEvent"*, i64)*, i32 (%"class.ui::MotionEvent"*, i64)** %12, i64 19
  %14 = load i32 (%"class.ui::MotionEvent"*, i64)*, i32 (%"class.ui::MotionEvent"*, i64)** %13, align 8
  %15 = tail call i32 %14(%"class.ui::MotionEvent"* %1, i64 0) #6
  %16 = getelementptr inbounds %"class.ui::GestureTouchUMAHistogram", %"class.ui::GestureTouchUMAHistogram"* %0, i64 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = bitcast %"class.ui::MotionEvent"* %1 to float (%"class.ui::MotionEvent"*, i64)***
  %18 = load float (%"class.ui::MotionEvent"*, i64)**, float (%"class.ui::MotionEvent"*, i64)*** %17, align 8
  %19 = getelementptr inbounds float (%"class.ui::MotionEvent"*, i64)*, float (%"class.ui::MotionEvent"*, i64)** %18, i64 7
  %20 = load float (%"class.ui::MotionEvent"*, i64)*, float (%"class.ui::MotionEvent"*, i64)** %19, align 8
  %21 = tail call float %20(%"class.ui::MotionEvent"* %1, i64 0) #6
  %22 = fptosi float %21 to i32
  %23 = load float (%"class.ui::MotionEvent"*, i64)**, float (%"class.ui::MotionEvent"*, i64)*** %17, align 8
  %24 = getelementptr inbounds float (%"class.ui::MotionEvent"*, i64)*, float (%"class.ui::MotionEvent"*, i64)** %23, i64 8
  %25 = load float (%"class.ui::MotionEvent"*, i64)*, float (%"class.ui::MotionEvent"*, i64)** %24, align 8
  %26 = tail call float %25(%"class.ui::MotionEvent"* %1, i64 0) #6
  %27 = fptosi float %26 to i32
  %28 = getelementptr inbounds %"class.ui::GestureTouchUMAHistogram", %"class.ui::GestureTouchUMAHistogram"* %0, i64 0, i32 1
  %29 = bitcast %"class.gfx::Point"* %28 to i64*
  %30 = zext i32 %27 to i64
  %31 = shl nuw i64 %30, 32
  %32 = zext i32 %22 to i64
  %33 = or i64 %31, %32
  store i64 %33, i64* %29, align 4
  %34 = getelementptr inbounds %"class.ui::GestureTouchUMAHistogram", %"class.ui::GestureTouchUMAHistogram"* %0, i64 0, i32 3
  store i8 1, i8* %34, align 4
  %35 = getelementptr inbounds %"class.ui::GestureTouchUMAHistogram", %"class.ui::GestureTouchUMAHistogram"* %0, i64 0, i32 2
  store float 0.000000e+00, float* %35, align 4
  br label %140

36:                                               ; preds = %2
  %37 = getelementptr inbounds %"class.ui::GestureTouchUMAHistogram", %"class.ui::GestureTouchUMAHistogram"* %0, i64 0, i32 3
  %38 = load i8, i8* %37, align 4, !range !2
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %140, label %40

40:                                               ; preds = %36
  %41 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #6
  %42 = bitcast %"class.ui::MotionEvent"* %1 to float (%"class.ui::MotionEvent"*, i64)***
  %43 = load float (%"class.ui::MotionEvent"*, i64)**, float (%"class.ui::MotionEvent"*, i64)*** %42, align 8
  %44 = getelementptr inbounds float (%"class.ui::MotionEvent"*, i64)*, float (%"class.ui::MotionEvent"*, i64)** %43, i64 7
  %45 = load float (%"class.ui::MotionEvent"*, i64)*, float (%"class.ui::MotionEvent"*, i64)** %44, align 8
  %46 = tail call float %45(%"class.ui::MotionEvent"* %1, i64 0) #6
  %47 = fptosi float %46 to i32
  %48 = load float (%"class.ui::MotionEvent"*, i64)**, float (%"class.ui::MotionEvent"*, i64)*** %42, align 8
  %49 = getelementptr inbounds float (%"class.ui::MotionEvent"*, i64)*, float (%"class.ui::MotionEvent"*, i64)** %48, i64 8
  %50 = load float (%"class.ui::MotionEvent"*, i64)*, float (%"class.ui::MotionEvent"*, i64)** %49, align 8
  %51 = tail call float %50(%"class.ui::MotionEvent"* %1, i64 0) #6
  %52 = fptosi float %51 to i32
  %53 = getelementptr inbounds %"class.ui::GestureTouchUMAHistogram", %"class.ui::GestureTouchUMAHistogram"* %0, i64 0, i32 1, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = icmp sgt i32 %47, -1
  %56 = select i1 %55, i32 -2147483648, i32 2147483647
  %57 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %54, i32 %47) #6
  %58 = extractvalue { i32, i1 } %57, 1
  %59 = extractvalue { i32, i1 } %57, 0
  %60 = select i1 %58, i32 %56, i32 %59, !prof !3
  %61 = getelementptr inbounds %"class.ui::GestureTouchUMAHistogram", %"class.ui::GestureTouchUMAHistogram"* %0, i64 0, i32 1, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = icmp sgt i32 %52, -1
  %64 = select i1 %63, i32 -2147483648, i32 2147483647
  %65 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %62, i32 %52) #6
  %66 = extractvalue { i32, i1 } %65, 1
  %67 = extractvalue { i32, i1 } %65, 0
  %68 = select i1 %66, i32 %64, i32 %67, !prof !3
  %69 = zext i32 %68 to i64
  %70 = shl nuw i64 %69, 32
  %71 = zext i32 %60 to i64
  %72 = or i64 %70, %71
  store i64 %72, i64* %3, align 8
  %73 = call i64 @_ZNK3gfx8Vector2d13LengthSquaredEv(%"class.gfx::Vector2d"* nonnull %4) #6
  %74 = sitofp i64 %73 to float
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #6
  %75 = getelementptr inbounds %"class.ui::GestureTouchUMAHistogram", %"class.ui::GestureTouchUMAHistogram"* %0, i64 0, i32 2
  %76 = load float, float* %75, align 4
  %77 = fcmp olt float %76, %74
  br i1 %77, label %78, label %140

78:                                               ; preds = %40
  store float %74, float* %75, align 4
  br label %140

79:                                               ; preds = %2
  %80 = getelementptr inbounds %"class.ui::GestureTouchUMAHistogram", %"class.ui::GestureTouchUMAHistogram"* %0, i64 0, i32 3
  %81 = load i8, i8* %80, align 4, !range !2
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %140, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds %"class.ui::GestureTouchUMAHistogram", %"class.ui::GestureTouchUMAHistogram"* %0, i64 0, i32 0
  %85 = load i32, i32* %84, align 4
  switch i32 %85, label %137 [
    i32 1, label %86
    i32 2, label %103
    i32 4, label %120
  ]

86:                                               ; preds = %83
  %87 = load atomic i64, i64* @_ZZN2ui24GestureTouchUMAHistogram16RecordTouchEventERKNS_11MotionEventEE24atomic_histogram_pointer.0.0.0.0.0 acquire, align 8
  %88 = inttoptr i64 %87 to %"class.base::HistogramBase"*
  %89 = icmp eq i64 %87, 0
  br i1 %89, label %90, label %93

90:                                               ; preds = %86
  %91 = tail call %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i32 1, i32 1500, i32 50, i32 1) #6
  %92 = ptrtoint %"class.base::HistogramBase"* %91 to i64
  store atomic i64 %92, i64* @_ZZN2ui24GestureTouchUMAHistogram16RecordTouchEventERKNS_11MotionEventEE24atomic_histogram_pointer.0.0.0.0.0 release, align 8
  br label %93

93:                                               ; preds = %86, %90
  %94 = phi %"class.base::HistogramBase"* [ %88, %86 ], [ %91, %90 ]
  %95 = getelementptr inbounds %"class.ui::GestureTouchUMAHistogram", %"class.ui::GestureTouchUMAHistogram"* %0, i64 0, i32 2
  %96 = load float, float* %95, align 4
  %97 = tail call float @sqrtf(float %96) #6
  %98 = fptosi float %97 to i32
  %99 = bitcast %"class.base::HistogramBase"* %94 to void (%"class.base::HistogramBase"*, i32)***
  %100 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %99, align 8
  %101 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %100, i64 6
  %102 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %101, align 8
  tail call void %102(%"class.base::HistogramBase"* %94, i32 %98) #6
  br label %137

103:                                              ; preds = %83
  %104 = load atomic i64, i64* @_ZZN2ui24GestureTouchUMAHistogram16RecordTouchEventERKNS_11MotionEventEE24atomic_histogram_pointer_0.0.0.0.0.0 acquire, align 8
  %105 = inttoptr i64 %104 to %"class.base::HistogramBase"*
  %106 = icmp eq i64 %104, 0
  br i1 %106, label %107, label %110

107:                                              ; preds = %103
  %108 = tail call %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0), i32 1, i32 1500, i32 50, i32 1) #6
  %109 = ptrtoint %"class.base::HistogramBase"* %108 to i64
  store atomic i64 %109, i64* @_ZZN2ui24GestureTouchUMAHistogram16RecordTouchEventERKNS_11MotionEventEE24atomic_histogram_pointer_0.0.0.0.0.0 release, align 8
  br label %110

110:                                              ; preds = %103, %107
  %111 = phi %"class.base::HistogramBase"* [ %105, %103 ], [ %108, %107 ]
  %112 = getelementptr inbounds %"class.ui::GestureTouchUMAHistogram", %"class.ui::GestureTouchUMAHistogram"* %0, i64 0, i32 2
  %113 = load float, float* %112, align 4
  %114 = tail call float @sqrtf(float %113) #6
  %115 = fptosi float %114 to i32
  %116 = bitcast %"class.base::HistogramBase"* %111 to void (%"class.base::HistogramBase"*, i32)***
  %117 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %116, align 8
  %118 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %117, i64 6
  %119 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %118, align 8
  tail call void %119(%"class.base::HistogramBase"* %111, i32 %115) #6
  br label %137

120:                                              ; preds = %83
  %121 = load atomic i64, i64* @_ZZN2ui24GestureTouchUMAHistogram16RecordTouchEventERKNS_11MotionEventEE24atomic_histogram_pointer_1.0.0.0.0.0 acquire, align 8
  %122 = inttoptr i64 %121 to %"class.base::HistogramBase"*
  %123 = icmp eq i64 %121, 0
  br i1 %123, label %124, label %127

124:                                              ; preds = %120
  %125 = tail call %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0), i32 1, i32 1500, i32 50, i32 1) #6
  %126 = ptrtoint %"class.base::HistogramBase"* %125 to i64
  store atomic i64 %126, i64* @_ZZN2ui24GestureTouchUMAHistogram16RecordTouchEventERKNS_11MotionEventEE24atomic_histogram_pointer_1.0.0.0.0.0 release, align 8
  br label %127

127:                                              ; preds = %120, %124
  %128 = phi %"class.base::HistogramBase"* [ %122, %120 ], [ %125, %124 ]
  %129 = getelementptr inbounds %"class.ui::GestureTouchUMAHistogram", %"class.ui::GestureTouchUMAHistogram"* %0, i64 0, i32 2
  %130 = load float, float* %129, align 4
  %131 = tail call float @sqrtf(float %130) #6
  %132 = fptosi float %131 to i32
  %133 = bitcast %"class.base::HistogramBase"* %128 to void (%"class.base::HistogramBase"*, i32)***
  %134 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %133, align 8
  %135 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %134, i64 6
  %136 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %135, align 8
  tail call void %136(%"class.base::HistogramBase"* %128, i32 %132) #6
  br label %137

137:                                              ; preds = %83, %110, %127, %93
  store i8 0, i8* %80, align 4
  br label %140

138:                                              ; preds = %2
  %139 = getelementptr inbounds %"class.ui::GestureTouchUMAHistogram", %"class.ui::GestureTouchUMAHistogram"* %0, i64 0, i32 3
  store i8 0, i8* %139, align 4
  br label %140

140:                                              ; preds = %40, %78, %36, %79, %137, %138, %10
  ret void
}

declare i64 @_ZNK3gfx8Vector2d13LengthSquaredEv(%"class.gfx::Vector2d"*) local_unnamed_addr #2

declare %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetEPKciiji(i8*, i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #4

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
