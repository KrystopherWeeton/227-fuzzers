; ModuleID = '../../third_party/skia/src/pdf/SkPDFMakeToUnicodeCmap.cpp'
source_filename = "../../third_party/skia/src/pdf/SkPDFMakeToUnicodeCmap.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkPDFGlyphUse = type <{ %class.SkBitSet, i16, i16, [4 x i8] }>
%class.SkBitSet = type { i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%class.SkDynamicMemoryWStream = type { %class.SkWStream, %"struct.SkDynamicMemoryWStream::Block"*, %"struct.SkDynamicMemoryWStream::Block"*, i64 }
%class.SkWStream = type { i32 (...)** }
%"struct.SkDynamicMemoryWStream::Block" = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.(anonymous namespace)::BFChar"*, %"struct.(anonymous namespace)::BFChar"*, %"class.std::__1::__compressed_pair.1" }
%"struct.(anonymous namespace)::BFChar" = type { i16, i32 }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.(anonymous namespace)::BFChar"* }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %"struct.(anonymous namespace)::BFRange"*, %"struct.(anonymous namespace)::BFRange"*, %"class.std::__1::__compressed_pair.6" }
%"struct.(anonymous namespace)::BFRange" = type { i16, i16, i32 }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.(anonymous namespace)::BFRange"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%class.SkStreamAsset = type { %class.SkStreamSeekable }
%class.SkStreamSeekable = type { %class.SkStreamRewindable }
%class.SkStreamRewindable = type { %class.SkStream }
%class.SkStream = type { i32 (...)** }

@.str = private unnamed_addr constant [14 x i8] c" beginbfchar\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"> <\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c">\0A\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"endbfchar\0A\00", align 1
@_ZN19SkHexadecimalDigits6gUpperE = external local_unnamed_addr constant [16 x i8], align 16
@.str.5 = private unnamed_addr constant [15 x i8] c" beginbfrange\0A\00", align 1
@.str.6 = private unnamed_addr constant [12 x i8] c"endbfrange\0A\00", align 1
@_ZTV22SkDynamicMemoryWStream = external unnamed_addr constant { [7 x i8*] }, align 8
@.str.7 = private unnamed_addr constant [62 x i8] c"/CIDInit /ProcSet findresource begin\0A12 dict begin\0Abegincmap\0A\00", align 1
@.str.8 = private unnamed_addr constant [75 x i8] c"/CIDSystemInfo\0A<<  /Registry (Adobe)\0A/Ordering (UCS)\0A/Supplement 0\0A>> def\0A\00", align 1
@.str.9 = private unnamed_addr constant [73 x i8] c"/CMapName /Adobe-Identity-UCS def\0A/CMapType 2 def\0A1 begincodespacerange\0A\00", align 1
@.str.10 = private unnamed_addr constant [15 x i8] c"<0000> <FFFF>\0A\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"<00> <FF>\0A\00", align 1
@.str.12 = private unnamed_addr constant [19 x i8] c"endcodespacerange\0A\00", align 1
@_ZZL18append_cmap_footerP22SkDynamicMemoryWStreamE7kFooter = internal constant [62 x i8] c"endcmap\0ACMapName currentdict /CMap defineresource pop\0Aend\0Aend\00", align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z23SkPDFAppendCmapSectionsPKiPK13SkPDFGlyphUseP22SkDynamicMemoryWStreambtt(i32* nocapture readonly, %class.SkPDFGlyphUse* readonly, %class.SkDynamicMemoryWStream*, i1 zeroext, i16 zeroext, i16 zeroext) local_unnamed_addr #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [2 x i8], align 1
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca %"class.std::__1::vector", align 8
  %18 = alloca %"class.std::__1::vector.4", align 8
  %19 = zext i16 %4 to i32
  %20 = add nsw i32 %19, -1
  %21 = select i1 %3, i32 0, i32 %20
  %22 = bitcast %"class.std::__1::vector"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #8
  %23 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %17, i64 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %17, i64 0, i32 0, i32 1
  %25 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %17, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 0, i64 24, i1 false) #8
  %26 = bitcast %"class.std::__1::vector.4"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #8
  %27 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %18, i64 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %18, i64 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %18, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 0, i64 24, i1 false) #8
  %30 = zext i16 %5 to i32
  %31 = add nuw nsw i32 %30, 1
  %32 = sub nsw i32 %31, %21
  %33 = sub nsw i32 %19, %21
  %34 = icmp sgt i32 %33, %32
  br i1 %34, label %35, label %38

35:                                               ; preds = %6
  %36 = bitcast %"struct.(anonymous namespace)::BFChar"** %24 to i64*
  %37 = bitcast %"class.std::__1::vector"* %17 to i64*
  br label %51

38:                                               ; preds = %6
  %39 = icmp eq %class.SkPDFGlyphUse* %1, null
  %40 = getelementptr inbounds %class.SkPDFGlyphUse, %class.SkPDFGlyphUse* %1, i64 0, i32 1
  %41 = getelementptr inbounds %class.SkPDFGlyphUse, %class.SkPDFGlyphUse* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %42 = bitcast %"struct.(anonymous namespace)::BFChar"** %24 to i64*
  %43 = bitcast %"class.std::__1::vector"* %17 to i64*
  %44 = bitcast %"struct.(anonymous namespace)::BFChar"** %25 to i64*
  %45 = bitcast %"struct.(anonymous namespace)::BFRange"** %28 to i64*
  %46 = bitcast %"class.std::__1::vector.4"* %18 to i64*
  %47 = bitcast %"struct.(anonymous namespace)::BFRange"** %29 to i64*
  br label %467

48:                                               ; preds = %663
  %49 = load i64, i64* %42, align 8
  %50 = load i64, i64* %43, align 8
  br label %51

51:                                               ; preds = %35, %48
  %52 = phi i64* [ %37, %35 ], [ %43, %48 ]
  %53 = phi i64* [ %36, %35 ], [ %42, %48 ]
  %54 = phi i64 [ 0, %35 ], [ %50, %48 ]
  %55 = phi i64 [ 0, %35 ], [ %49, %48 ]
  %56 = sub i64 %55, %54
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %227, label %58

58:                                               ; preds = %51
  %59 = ashr exact i64 %56, 3
  %60 = getelementptr inbounds %class.SkDynamicMemoryWStream, %class.SkDynamicMemoryWStream* %2, i64 0, i32 0
  %61 = bitcast %class.SkDynamicMemoryWStream* %2 to i1 (%class.SkWStream*, i8*, i64)***
  %62 = getelementptr inbounds [2 x i8], [2 x i8]* %12, i64 0, i64 0
  %63 = getelementptr inbounds [2 x i8], [2 x i8]* %12, i64 0, i64 1
  %64 = bitcast %class.SkDynamicMemoryWStream* %2 to i1 (%class.SkDynamicMemoryWStream*, i8*, i64)***
  %65 = bitcast i32* %13 to [4 x i8]*
  %66 = bitcast i32* %13 to i8*
  %67 = getelementptr inbounds [4 x i8], [4 x i8]* %65, i64 0, i64 1
  %68 = getelementptr inbounds [4 x i8], [4 x i8]* %65, i64 0, i64 2
  %69 = getelementptr inbounds [4 x i8], [4 x i8]* %65, i64 0, i64 3
  %70 = bitcast i32* %16 to i8*
  %71 = bitcast i32* %16 to i16*
  %72 = bitcast i32* %15 to [4 x i8]*
  %73 = bitcast i32* %15 to i8*
  %74 = getelementptr inbounds [4 x i8], [4 x i8]* %72, i64 0, i64 1
  %75 = getelementptr inbounds [4 x i8], [4 x i8]* %72, i64 0, i64 2
  %76 = getelementptr inbounds [4 x i8], [4 x i8]* %72, i64 0, i64 3
  %77 = bitcast i32* %16 to [2 x i16]*
  %78 = getelementptr inbounds [2 x i16], [2 x i16]* %77, i64 0, i64 1
  %79 = bitcast i32* %14 to [4 x i8]*
  %80 = bitcast i32* %14 to i8*
  %81 = getelementptr inbounds [4 x i8], [4 x i8]* %79, i64 0, i64 1
  %82 = getelementptr inbounds [4 x i8], [4 x i8]* %79, i64 0, i64 2
  %83 = getelementptr inbounds [4 x i8], [4 x i8]* %79, i64 0, i64 3
  br label %84

84:                                               ; preds = %102, %58
  %85 = phi i64 [ %59, %58 ], [ %109, %102 ]
  %86 = phi i64 [ 0, %58 ], [ %105, %102 ]
  %87 = sub i64 %85, %86
  %88 = trunc i64 %87 to i32
  %89 = icmp slt i32 %88, 100
  %90 = select i1 %89, i32 %88, i32 100
  %91 = call zeroext i1 @_ZN9SkWStream14writeDecAsTextEi(%class.SkWStream* %60, i32 %90) #8
  %92 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %61, align 8
  %93 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %92, i64 2
  %94 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %93, align 8
  %95 = call zeroext i1 %94(%class.SkWStream* %60, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i64 13) #8
  %96 = icmp sgt i32 %88, 0
  %97 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %61, align 8
  %98 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %97, i64 2
  %99 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %98, align 8
  br i1 %96, label %100, label %102

100:                                              ; preds = %84
  %101 = sext i32 %90 to i64
  br label %111

102:                                              ; preds = %217, %84
  %103 = phi i1 (%class.SkWStream*, i8*, i64)* [ %99, %84 ], [ %226, %217 ]
  %104 = call zeroext i1 %103(%class.SkWStream* %60, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 10) #8
  %105 = add i64 %86, 100
  %106 = load i64, i64* %53, align 8
  %107 = load i64, i64* %52, align 8
  %108 = sub i64 %106, %107
  %109 = ashr exact i64 %108, 3
  %110 = icmp ugt i64 %109, %105
  br i1 %110, label %84, label %227

111:                                              ; preds = %217, %100
  %112 = phi i64 [ 0, %100 ], [ %222, %217 ]
  %113 = phi i1 (%class.SkWStream*, i8*, i64)* [ %99, %100 ], [ %226, %217 ]
  %114 = call zeroext i1 %113(%class.SkWStream* %60, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i64 1) #8
  %115 = add i64 %112, %86
  %116 = load %"struct.(anonymous namespace)::BFChar"*, %"struct.(anonymous namespace)::BFChar"** %23, align 8
  %117 = getelementptr inbounds %"struct.(anonymous namespace)::BFChar", %"struct.(anonymous namespace)::BFChar"* %116, i64 %115, i32 0
  %118 = load i16, i16* %117, align 4
  br i1 %3, label %119, label %143

119:                                              ; preds = %111
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %66) #8
  %120 = zext i16 %118 to i32
  %121 = lshr i32 %120, 12
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %122
  %124 = load i8, i8* %123, align 1
  store i8 %124, i8* %66, align 4
  %125 = lshr i32 %120, 8
  %126 = and i32 %125, 15
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %127
  %129 = load i8, i8* %128, align 1
  store i8 %129, i8* %67, align 1
  %130 = lshr i32 %120, 4
  %131 = and i32 %130, 15
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %132
  %134 = load i8, i8* %133, align 1
  store i8 %134, i8* %68, align 2
  %135 = and i32 %120, 15
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %136
  %138 = load i8, i8* %137, align 1
  store i8 %138, i8* %69, align 1
  %139 = load i1 (%class.SkDynamicMemoryWStream*, i8*, i64)**, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*** %64, align 8
  %140 = getelementptr inbounds i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)** %139, i64 2
  %141 = load i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)** %140, align 8
  %142 = call zeroext i1 %141(%class.SkDynamicMemoryWStream* %2, i8* nonnull %66, i64 4) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %66) #8
  br label %158

143:                                              ; preds = %111
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %62) #8
  %144 = and i16 %118, 255
  %145 = zext i16 %144 to i32
  %146 = lshr i32 %145, 4
  %147 = zext i32 %146 to i64
  %148 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %147
  %149 = load i8, i8* %148, align 1
  store i8 %149, i8* %62, align 1
  %150 = and i32 %145, 15
  %151 = zext i32 %150 to i64
  %152 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %151
  %153 = load i8, i8* %152, align 1
  store i8 %153, i8* %63, align 1
  %154 = load i1 (%class.SkDynamicMemoryWStream*, i8*, i64)**, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*** %64, align 8
  %155 = getelementptr inbounds i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)** %154, i64 2
  %156 = load i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)** %155, align 8
  %157 = call zeroext i1 %156(%class.SkDynamicMemoryWStream* %2, i8* nonnull %62, i64 2) #8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %62) #8
  br label %158

158:                                              ; preds = %143, %119
  %159 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %61, align 8
  %160 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %159, i64 2
  %161 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %160, align 8
  %162 = call zeroext i1 %161(%class.SkWStream* %60, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i64 3) #8
  %163 = load %"struct.(anonymous namespace)::BFChar"*, %"struct.(anonymous namespace)::BFChar"** %23, align 8
  %164 = getelementptr inbounds %"struct.(anonymous namespace)::BFChar", %"struct.(anonymous namespace)::BFChar"* %163, i64 %115, i32 1
  %165 = load i32, i32* %164, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %70) #8
  store i32 0, i32* %16, align 4
  %166 = call i64 @_ZN5SkUTF7ToUTF16EiPt(i32 %165, i16* nonnull %71) #8
  %167 = load i16, i16* %71, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %73) #8
  %168 = zext i16 %167 to i32
  %169 = lshr i32 %168, 12
  %170 = zext i32 %169 to i64
  %171 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %170
  %172 = load i8, i8* %171, align 1
  store i8 %172, i8* %73, align 4
  %173 = lshr i32 %168, 8
  %174 = and i32 %173, 15
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %175
  %177 = load i8, i8* %176, align 1
  store i8 %177, i8* %74, align 1
  %178 = lshr i32 %168, 4
  %179 = and i32 %178, 15
  %180 = zext i32 %179 to i64
  %181 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %180
  %182 = load i8, i8* %181, align 1
  store i8 %182, i8* %75, align 2
  %183 = and i32 %168, 15
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %184
  %186 = load i8, i8* %185, align 1
  store i8 %186, i8* %76, align 1
  %187 = load i1 (%class.SkDynamicMemoryWStream*, i8*, i64)**, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*** %64, align 8
  %188 = getelementptr inbounds i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)** %187, i64 2
  %189 = load i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)** %188, align 8
  %190 = call zeroext i1 %189(%class.SkDynamicMemoryWStream* %2, i8* nonnull %73, i64 4) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %73) #8
  %191 = icmp eq i64 %166, 2
  br i1 %191, label %192, label %217

192:                                              ; preds = %158
  %193 = load i16, i16* %78, align 2
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %80) #8
  %194 = zext i16 %193 to i32
  %195 = lshr i32 %194, 12
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %196
  %198 = load i8, i8* %197, align 1
  store i8 %198, i8* %80, align 4
  %199 = lshr i32 %194, 8
  %200 = and i32 %199, 15
  %201 = zext i32 %200 to i64
  %202 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %201
  %203 = load i8, i8* %202, align 1
  store i8 %203, i8* %81, align 1
  %204 = lshr i32 %194, 4
  %205 = and i32 %204, 15
  %206 = zext i32 %205 to i64
  %207 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %206
  %208 = load i8, i8* %207, align 1
  store i8 %208, i8* %82, align 2
  %209 = and i32 %194, 15
  %210 = zext i32 %209 to i64
  %211 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %210
  %212 = load i8, i8* %211, align 1
  store i8 %212, i8* %83, align 1
  %213 = load i1 (%class.SkDynamicMemoryWStream*, i8*, i64)**, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*** %64, align 8
  %214 = getelementptr inbounds i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)** %213, i64 2
  %215 = load i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)** %214, align 8
  %216 = call zeroext i1 %215(%class.SkDynamicMemoryWStream* %2, i8* nonnull %80, i64 4) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %80) #8
  br label %217

217:                                              ; preds = %192, %158
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %70) #8
  %218 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %61, align 8
  %219 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %218, i64 2
  %220 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %219, align 8
  %221 = call zeroext i1 %220(%class.SkWStream* %60, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2) #8
  %222 = add nuw nsw i64 %112, 1
  %223 = icmp slt i64 %222, %101
  %224 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %61, align 8
  %225 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %224, i64 2
  %226 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %225, align 8
  br i1 %223, label %111, label %102

227:                                              ; preds = %102, %51
  %228 = bitcast %"struct.(anonymous namespace)::BFRange"** %28 to i64*
  %229 = load i64, i64* %228, align 8
  %230 = bitcast %"class.std::__1::vector.4"* %18 to i64*
  %231 = load i64, i64* %230, align 8
  %232 = sub i64 %229, %231
  %233 = icmp eq i64 %232, 0
  br i1 %233, label %455, label %234

234:                                              ; preds = %227
  %235 = ashr exact i64 %232, 3
  %236 = getelementptr inbounds %class.SkDynamicMemoryWStream, %class.SkDynamicMemoryWStream* %2, i64 0, i32 0
  %237 = bitcast %class.SkDynamicMemoryWStream* %2 to i1 (%class.SkWStream*, i8*, i64)***
  %238 = getelementptr inbounds [2 x i8], [2 x i8]* %12, i64 0, i64 0
  %239 = getelementptr inbounds [2 x i8], [2 x i8]* %12, i64 0, i64 1
  %240 = bitcast %class.SkDynamicMemoryWStream* %2 to i1 (%class.SkDynamicMemoryWStream*, i8*, i64)***
  %241 = bitcast i32* %8 to [4 x i8]*
  %242 = bitcast i32* %8 to i8*
  %243 = getelementptr inbounds [4 x i8], [4 x i8]* %241, i64 0, i64 1
  %244 = getelementptr inbounds [4 x i8], [4 x i8]* %241, i64 0, i64 2
  %245 = getelementptr inbounds [4 x i8], [4 x i8]* %241, i64 0, i64 3
  %246 = bitcast i32* %7 to [4 x i8]*
  %247 = bitcast i32* %7 to i8*
  %248 = getelementptr inbounds [4 x i8], [4 x i8]* %246, i64 0, i64 1
  %249 = getelementptr inbounds [4 x i8], [4 x i8]* %246, i64 0, i64 2
  %250 = getelementptr inbounds [4 x i8], [4 x i8]* %246, i64 0, i64 3
  %251 = bitcast i32* %11 to i8*
  %252 = bitcast i32* %11 to i16*
  %253 = bitcast i32* %10 to [4 x i8]*
  %254 = bitcast i32* %10 to i8*
  %255 = getelementptr inbounds [4 x i8], [4 x i8]* %253, i64 0, i64 1
  %256 = getelementptr inbounds [4 x i8], [4 x i8]* %253, i64 0, i64 2
  %257 = getelementptr inbounds [4 x i8], [4 x i8]* %253, i64 0, i64 3
  %258 = bitcast i32* %11 to [2 x i16]*
  %259 = getelementptr inbounds [2 x i16], [2 x i16]* %258, i64 0, i64 1
  %260 = bitcast i32* %9 to [4 x i8]*
  %261 = bitcast i32* %9 to i8*
  %262 = getelementptr inbounds [4 x i8], [4 x i8]* %260, i64 0, i64 1
  %263 = getelementptr inbounds [4 x i8], [4 x i8]* %260, i64 0, i64 2
  %264 = getelementptr inbounds [4 x i8], [4 x i8]* %260, i64 0, i64 3
  br label %265

265:                                              ; preds = %283, %234
  %266 = phi i64 [ %235, %234 ], [ %290, %283 ]
  %267 = phi i64 [ 0, %234 ], [ %286, %283 ]
  %268 = sub i64 %266, %267
  %269 = trunc i64 %268 to i32
  %270 = icmp slt i32 %269, 100
  %271 = select i1 %270, i32 %269, i32 100
  %272 = call zeroext i1 @_ZN9SkWStream14writeDecAsTextEi(%class.SkWStream* %236, i32 %271) #8
  %273 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %237, align 8
  %274 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %273, i64 2
  %275 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %274, align 8
  %276 = call zeroext i1 %275(%class.SkWStream* %236, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0), i64 14) #8
  %277 = icmp sgt i32 %269, 0
  %278 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %237, align 8
  %279 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %278, i64 2
  %280 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %279, align 8
  br i1 %277, label %281, label %283

281:                                              ; preds = %265
  %282 = sext i32 %271 to i64
  br label %292

283:                                              ; preds = %445, %265
  %284 = phi i1 (%class.SkWStream*, i8*, i64)* [ %280, %265 ], [ %454, %445 ]
  %285 = call zeroext i1 %284(%class.SkWStream* %236, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i64 11) #8
  %286 = add i64 %267, 100
  %287 = load i64, i64* %228, align 8
  %288 = load i64, i64* %230, align 8
  %289 = sub i64 %287, %288
  %290 = ashr exact i64 %289, 3
  %291 = icmp ugt i64 %290, %286
  br i1 %291, label %265, label %455

292:                                              ; preds = %445, %281
  %293 = phi i64 [ 0, %281 ], [ %450, %445 ]
  %294 = phi i1 (%class.SkWStream*, i8*, i64)* [ %280, %281 ], [ %454, %445 ]
  %295 = call zeroext i1 %294(%class.SkWStream* %236, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i64 1) #8
  %296 = add i64 %293, %267
  %297 = load %"struct.(anonymous namespace)::BFRange"*, %"struct.(anonymous namespace)::BFRange"** %27, align 8
  %298 = getelementptr inbounds %"struct.(anonymous namespace)::BFRange", %"struct.(anonymous namespace)::BFRange"* %297, i64 %296, i32 0
  %299 = load i16, i16* %298, align 4
  br i1 %3, label %300, label %324

300:                                              ; preds = %292
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %242) #8
  %301 = zext i16 %299 to i32
  %302 = lshr i32 %301, 12
  %303 = zext i32 %302 to i64
  %304 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %303
  %305 = load i8, i8* %304, align 1
  store i8 %305, i8* %242, align 4
  %306 = lshr i32 %301, 8
  %307 = and i32 %306, 15
  %308 = zext i32 %307 to i64
  %309 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %308
  %310 = load i8, i8* %309, align 1
  store i8 %310, i8* %243, align 1
  %311 = lshr i32 %301, 4
  %312 = and i32 %311, 15
  %313 = zext i32 %312 to i64
  %314 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %313
  %315 = load i8, i8* %314, align 1
  store i8 %315, i8* %244, align 2
  %316 = and i32 %301, 15
  %317 = zext i32 %316 to i64
  %318 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %317
  %319 = load i8, i8* %318, align 1
  store i8 %319, i8* %245, align 1
  %320 = load i1 (%class.SkDynamicMemoryWStream*, i8*, i64)**, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*** %240, align 8
  %321 = getelementptr inbounds i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)** %320, i64 2
  %322 = load i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)** %321, align 8
  %323 = call zeroext i1 %322(%class.SkDynamicMemoryWStream* %2, i8* nonnull %242, i64 4) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %242) #8
  br label %339

324:                                              ; preds = %292
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %238) #8
  %325 = and i16 %299, 255
  %326 = zext i16 %325 to i32
  %327 = lshr i32 %326, 4
  %328 = zext i32 %327 to i64
  %329 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %328
  %330 = load i8, i8* %329, align 1
  store i8 %330, i8* %238, align 1
  %331 = and i32 %326, 15
  %332 = zext i32 %331 to i64
  %333 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %332
  %334 = load i8, i8* %333, align 1
  store i8 %334, i8* %239, align 1
  %335 = load i1 (%class.SkDynamicMemoryWStream*, i8*, i64)**, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*** %240, align 8
  %336 = getelementptr inbounds i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)** %335, i64 2
  %337 = load i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)** %336, align 8
  %338 = call zeroext i1 %337(%class.SkDynamicMemoryWStream* %2, i8* nonnull %238, i64 2) #8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %238) #8
  br label %339

339:                                              ; preds = %324, %300
  %340 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %237, align 8
  %341 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %340, i64 2
  %342 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %341, align 8
  %343 = call zeroext i1 %342(%class.SkWStream* %236, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i64 3) #8
  %344 = load %"struct.(anonymous namespace)::BFRange"*, %"struct.(anonymous namespace)::BFRange"** %27, align 8
  %345 = getelementptr inbounds %"struct.(anonymous namespace)::BFRange", %"struct.(anonymous namespace)::BFRange"* %344, i64 %296, i32 1
  %346 = load i16, i16* %345, align 2
  br i1 %3, label %347, label %371

347:                                              ; preds = %339
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %247) #8
  %348 = zext i16 %346 to i32
  %349 = lshr i32 %348, 12
  %350 = zext i32 %349 to i64
  %351 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %350
  %352 = load i8, i8* %351, align 1
  store i8 %352, i8* %247, align 4
  %353 = lshr i32 %348, 8
  %354 = and i32 %353, 15
  %355 = zext i32 %354 to i64
  %356 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %355
  %357 = load i8, i8* %356, align 1
  store i8 %357, i8* %248, align 1
  %358 = lshr i32 %348, 4
  %359 = and i32 %358, 15
  %360 = zext i32 %359 to i64
  %361 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %360
  %362 = load i8, i8* %361, align 1
  store i8 %362, i8* %249, align 2
  %363 = and i32 %348, 15
  %364 = zext i32 %363 to i64
  %365 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %364
  %366 = load i8, i8* %365, align 1
  store i8 %366, i8* %250, align 1
  %367 = load i1 (%class.SkDynamicMemoryWStream*, i8*, i64)**, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*** %240, align 8
  %368 = getelementptr inbounds i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)** %367, i64 2
  %369 = load i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)** %368, align 8
  %370 = call zeroext i1 %369(%class.SkDynamicMemoryWStream* %2, i8* nonnull %247, i64 4) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %247) #8
  br label %386

371:                                              ; preds = %339
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %238) #8
  %372 = and i16 %346, 255
  %373 = zext i16 %372 to i32
  %374 = lshr i32 %373, 4
  %375 = zext i32 %374 to i64
  %376 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %375
  %377 = load i8, i8* %376, align 1
  store i8 %377, i8* %238, align 1
  %378 = and i32 %373, 15
  %379 = zext i32 %378 to i64
  %380 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %379
  %381 = load i8, i8* %380, align 1
  store i8 %381, i8* %239, align 1
  %382 = load i1 (%class.SkDynamicMemoryWStream*, i8*, i64)**, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*** %240, align 8
  %383 = getelementptr inbounds i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)** %382, i64 2
  %384 = load i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)** %383, align 8
  %385 = call zeroext i1 %384(%class.SkDynamicMemoryWStream* %2, i8* nonnull %238, i64 2) #8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %238) #8
  br label %386

386:                                              ; preds = %371, %347
  %387 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %237, align 8
  %388 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %387, i64 2
  %389 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %388, align 8
  %390 = call zeroext i1 %389(%class.SkWStream* %236, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i64 3) #8
  %391 = load %"struct.(anonymous namespace)::BFRange"*, %"struct.(anonymous namespace)::BFRange"** %27, align 8
  %392 = getelementptr inbounds %"struct.(anonymous namespace)::BFRange", %"struct.(anonymous namespace)::BFRange"* %391, i64 %296, i32 2
  %393 = load i32, i32* %392, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %251) #8
  store i32 0, i32* %11, align 4
  %394 = call i64 @_ZN5SkUTF7ToUTF16EiPt(i32 %393, i16* nonnull %252) #8
  %395 = load i16, i16* %252, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %254) #8
  %396 = zext i16 %395 to i32
  %397 = lshr i32 %396, 12
  %398 = zext i32 %397 to i64
  %399 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %398
  %400 = load i8, i8* %399, align 1
  store i8 %400, i8* %254, align 4
  %401 = lshr i32 %396, 8
  %402 = and i32 %401, 15
  %403 = zext i32 %402 to i64
  %404 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %403
  %405 = load i8, i8* %404, align 1
  store i8 %405, i8* %255, align 1
  %406 = lshr i32 %396, 4
  %407 = and i32 %406, 15
  %408 = zext i32 %407 to i64
  %409 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %408
  %410 = load i8, i8* %409, align 1
  store i8 %410, i8* %256, align 2
  %411 = and i32 %396, 15
  %412 = zext i32 %411 to i64
  %413 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %412
  %414 = load i8, i8* %413, align 1
  store i8 %414, i8* %257, align 1
  %415 = load i1 (%class.SkDynamicMemoryWStream*, i8*, i64)**, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*** %240, align 8
  %416 = getelementptr inbounds i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)** %415, i64 2
  %417 = load i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)** %416, align 8
  %418 = call zeroext i1 %417(%class.SkDynamicMemoryWStream* %2, i8* nonnull %254, i64 4) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %254) #8
  %419 = icmp eq i64 %394, 2
  br i1 %419, label %420, label %445

420:                                              ; preds = %386
  %421 = load i16, i16* %259, align 2
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %261) #8
  %422 = zext i16 %421 to i32
  %423 = lshr i32 %422, 12
  %424 = zext i32 %423 to i64
  %425 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %424
  %426 = load i8, i8* %425, align 1
  store i8 %426, i8* %261, align 4
  %427 = lshr i32 %422, 8
  %428 = and i32 %427, 15
  %429 = zext i32 %428 to i64
  %430 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %429
  %431 = load i8, i8* %430, align 1
  store i8 %431, i8* %262, align 1
  %432 = lshr i32 %422, 4
  %433 = and i32 %432, 15
  %434 = zext i32 %433 to i64
  %435 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %434
  %436 = load i8, i8* %435, align 1
  store i8 %436, i8* %263, align 2
  %437 = and i32 %422, 15
  %438 = zext i32 %437 to i64
  %439 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN19SkHexadecimalDigits6gUpperE, i64 0, i64 %438
  %440 = load i8, i8* %439, align 1
  store i8 %440, i8* %264, align 1
  %441 = load i1 (%class.SkDynamicMemoryWStream*, i8*, i64)**, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*** %240, align 8
  %442 = getelementptr inbounds i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)** %441, i64 2
  %443 = load i1 (%class.SkDynamicMemoryWStream*, i8*, i64)*, i1 (%class.SkDynamicMemoryWStream*, i8*, i64)** %442, align 8
  %444 = call zeroext i1 %443(%class.SkDynamicMemoryWStream* %2, i8* nonnull %261, i64 4) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %261) #8
  br label %445

445:                                              ; preds = %420, %386
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %251) #8
  %446 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %237, align 8
  %447 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %446, i64 2
  %448 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %447, align 8
  %449 = call zeroext i1 %448(%class.SkWStream* %236, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2) #8
  %450 = add nuw nsw i64 %293, 1
  %451 = icmp slt i64 %450, %282
  %452 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %237, align 8
  %453 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %452, i64 2
  %454 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %453, align 8
  br i1 %451, label %292, label %283

455:                                              ; preds = %283, %227
  %456 = phi i64 [ %231, %227 ], [ %288, %283 ]
  %457 = icmp eq i64 %456, 0
  br i1 %457, label %460, label %458

458:                                              ; preds = %455
  store i64 %456, i64* %228, align 8
  %459 = inttoptr i64 %456 to i8*
  call void @_ZdlPv(i8* %459) #9
  br label %460

460:                                              ; preds = %455, %458
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #8
  %461 = load %"struct.(anonymous namespace)::BFChar"*, %"struct.(anonymous namespace)::BFChar"** %23, align 8
  %462 = icmp eq %"struct.(anonymous namespace)::BFChar"* %461, null
  br i1 %462, label %466, label %463

463:                                              ; preds = %460
  %464 = ptrtoint %"struct.(anonymous namespace)::BFChar"* %461 to i64
  store i64 %464, i64* %53, align 8
  %465 = bitcast %"struct.(anonymous namespace)::BFChar"* %461 to i8*
  call void @_ZdlPv(i8* %465) #9
  br label %466

466:                                              ; preds = %460, %463
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #8
  ret void

467:                                              ; preds = %663, %38
  %468 = phi i32 [ %33, %38 ], [ %668, %663 ]
  %469 = phi i8 [ 1, %38 ], [ %667, %663 ]
  %470 = phi i32 [ 0, %38 ], [ %666, %663 ]
  %471 = phi i16 [ 0, %38 ], [ %665, %663 ]
  %472 = phi i16 [ 0, %38 ], [ %664, %663 ]
  %473 = add nsw i32 %468, %21
  %474 = trunc i32 %473 to i16
  %475 = icmp slt i32 %468, %32
  %476 = xor i1 %475, true
  %477 = or i1 %39, %476
  br i1 %477, label %498, label %478

478:                                              ; preds = %467
  %479 = icmp eq i16 %474, 0
  br i1 %479, label %486, label %480

480:                                              ; preds = %478
  %481 = load i16, i16* %40, align 8
  %482 = icmp eq i16 %481, 1
  br i1 %482, label %486, label %483

483:                                              ; preds = %480
  %484 = add i16 %474, 1
  %485 = sub i16 %484, %481
  br label %486

486:                                              ; preds = %478, %480, %483
  %487 = phi i16 [ %485, %483 ], [ %474, %480 ], [ 0, %478 ]
  %488 = load i32*, i32** %41, align 8
  %489 = lshr i16 %487, 5
  %490 = zext i16 %489 to i64
  %491 = getelementptr inbounds i32, i32* %488, i64 %490
  %492 = load i32, i32* %491, align 4
  %493 = and i16 %487, 31
  %494 = zext i16 %493 to i32
  %495 = shl i32 1, %494
  %496 = and i32 %495, %492
  %497 = icmp ne i32 %496, 0
  br label %498

498:                                              ; preds = %467, %486
  %499 = phi i1 [ %475, %467 ], [ %497, %486 ]
  %500 = and i8 %469, 1
  %501 = icmp eq i8 %500, 0
  br i1 %501, label %502, label %652

502:                                              ; preds = %498
  %503 = zext i16 %471 to i32
  %504 = add nuw nsw i32 %503, 1
  %505 = icmp eq i32 %468, %504
  br i1 %505, label %506, label %522

506:                                              ; preds = %502
  %507 = ashr i32 %468, 8
  %508 = zext i16 %472 to i32
  %509 = lshr i32 %508, 8
  %510 = icmp ne i32 %507, %509
  %511 = or i1 %510, %476
  br i1 %511, label %522, label %512

512:                                              ; preds = %506
  %513 = and i32 %473, 65535
  %514 = zext i32 %513 to i64
  %515 = getelementptr inbounds i32, i32* %0, i64 %514
  %516 = load i32, i32* %515, align 4
  %517 = sub i32 %470, %508
  %518 = add i32 %517, %468
  %519 = icmp ne i32 %516, %518
  %520 = xor i1 %499, true
  %521 = or i1 %519, %520
  br i1 %521, label %522, label %652

522:                                              ; preds = %502, %506, %512
  %523 = icmp ugt i16 %471, %472
  br i1 %523, label %524, label %591

524:                                              ; preds = %522
  %525 = load %"struct.(anonymous namespace)::BFRange"*, %"struct.(anonymous namespace)::BFRange"** %28, align 8
  %526 = load %"struct.(anonymous namespace)::BFRange"*, %"struct.(anonymous namespace)::BFRange"** %29, align 8
  %527 = icmp eq %"struct.(anonymous namespace)::BFRange"* %525, %526
  %528 = ptrtoint %"struct.(anonymous namespace)::BFRange"* %526 to i64
  br i1 %527, label %540, label %529

529:                                              ; preds = %524
  %530 = bitcast %"struct.(anonymous namespace)::BFRange"* %525 to i64*
  %531 = zext i32 %470 to i64
  %532 = shl nuw i64 %531, 32
  %533 = zext i16 %471 to i64
  %534 = shl nuw nsw i64 %533, 16
  %535 = zext i16 %472 to i64
  %536 = or i64 %534, %535
  %537 = or i64 %536, %532
  store i64 %537, i64* %530, align 4
  %538 = getelementptr inbounds %"struct.(anonymous namespace)::BFRange", %"struct.(anonymous namespace)::BFRange"* %525, i64 1
  %539 = ptrtoint %"struct.(anonymous namespace)::BFRange"* %538 to i64
  store i64 %539, i64* %45, align 8
  br label %652

540:                                              ; preds = %524
  %541 = ptrtoint %"struct.(anonymous namespace)::BFRange"* %525 to i64
  %542 = load i64, i64* %46, align 8
  %543 = sub i64 %541, %542
  %544 = ashr exact i64 %543, 3
  %545 = add nsw i64 %544, 1
  %546 = icmp ugt i64 %545, 2305843009213693951
  br i1 %546, label %547, label %549

547:                                              ; preds = %540
  %548 = bitcast %"class.std::__1::vector.4"* %18 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %548) #10
  unreachable

549:                                              ; preds = %540
  %550 = sub i64 %528, %542
  %551 = ashr exact i64 %550, 3
  %552 = icmp ult i64 %551, 1152921504606846975
  br i1 %552, label %553, label %561

553:                                              ; preds = %549
  %554 = ashr exact i64 %550, 2
  %555 = icmp ult i64 %554, %545
  %556 = select i1 %555, i64 %545, i64 %554
  %557 = icmp eq i64 %556, 0
  br i1 %557, label %566, label %558

558:                                              ; preds = %553
  %559 = icmp ugt i64 %556, 2305843009213693951
  br i1 %559, label %560, label %561

560:                                              ; preds = %558
  tail call void @abort() #10
  unreachable

561:                                              ; preds = %558, %549
  %562 = phi i64 [ %556, %558 ], [ 2305843009213693951, %549 ]
  %563 = shl i64 %562, 3
  %564 = tail call i8* @_Znwm(i64 %563) #9
  %565 = bitcast i8* %564 to %"struct.(anonymous namespace)::BFRange"*
  br label %566

566:                                              ; preds = %561, %553
  %567 = phi i64 [ %562, %561 ], [ 0, %553 ]
  %568 = phi i8* [ %564, %561 ], [ null, %553 ]
  %569 = phi %"struct.(anonymous namespace)::BFRange"* [ %565, %561 ], [ null, %553 ]
  %570 = getelementptr inbounds %"struct.(anonymous namespace)::BFRange", %"struct.(anonymous namespace)::BFRange"* %569, i64 %544
  %571 = getelementptr inbounds %"struct.(anonymous namespace)::BFRange", %"struct.(anonymous namespace)::BFRange"* %569, i64 %567
  %572 = ptrtoint %"struct.(anonymous namespace)::BFRange"* %571 to i64
  %573 = bitcast %"struct.(anonymous namespace)::BFRange"* %570 to i64*
  %574 = zext i32 %470 to i64
  %575 = shl nuw i64 %574, 32
  %576 = zext i16 %471 to i64
  %577 = shl nuw nsw i64 %576, 16
  %578 = zext i16 %472 to i64
  %579 = or i64 %577, %578
  %580 = or i64 %579, %575
  store i64 %580, i64* %573, align 4
  %581 = getelementptr inbounds %"struct.(anonymous namespace)::BFRange", %"struct.(anonymous namespace)::BFRange"* %570, i64 1
  %582 = ptrtoint %"struct.(anonymous namespace)::BFRange"* %581 to i64
  %583 = ptrtoint %"struct.(anonymous namespace)::BFRange"* %569 to i64
  %584 = icmp sgt i64 %543, 0
  br i1 %584, label %585, label %587

585:                                              ; preds = %566
  %586 = inttoptr i64 %542 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %568, i8* align 4 %586, i64 %543, i1 false) #8
  br label %587

587:                                              ; preds = %585, %566
  store i64 %583, i64* %46, align 8
  store i64 %582, i64* %45, align 8
  store i64 %572, i64* %47, align 8
  %588 = icmp eq i64 %542, 0
  br i1 %588, label %652, label %589

589:                                              ; preds = %587
  %590 = inttoptr i64 %542 to i8*
  tail call void @_ZdlPv(i8* %590) #9
  br label %652

591:                                              ; preds = %522
  %592 = load %"struct.(anonymous namespace)::BFChar"*, %"struct.(anonymous namespace)::BFChar"** %24, align 8
  %593 = load %"struct.(anonymous namespace)::BFChar"*, %"struct.(anonymous namespace)::BFChar"** %25, align 8
  %594 = icmp ult %"struct.(anonymous namespace)::BFChar"* %592, %593
  %595 = ptrtoint %"struct.(anonymous namespace)::BFChar"* %593 to i64
  br i1 %594, label %596, label %604

596:                                              ; preds = %591
  %597 = bitcast %"struct.(anonymous namespace)::BFChar"* %592 to i64*
  %598 = zext i32 %470 to i64
  %599 = shl nuw i64 %598, 32
  %600 = zext i16 %472 to i64
  %601 = or i64 %599, %600
  store i64 %601, i64* %597, align 4
  %602 = getelementptr inbounds %"struct.(anonymous namespace)::BFChar", %"struct.(anonymous namespace)::BFChar"* %592, i64 1
  %603 = ptrtoint %"struct.(anonymous namespace)::BFChar"* %602 to i64
  store i64 %603, i64* %42, align 8
  br label %652

604:                                              ; preds = %591
  %605 = ptrtoint %"struct.(anonymous namespace)::BFChar"* %592 to i64
  %606 = load i64, i64* %43, align 8
  %607 = sub i64 %605, %606
  %608 = ashr exact i64 %607, 3
  %609 = add nsw i64 %608, 1
  %610 = icmp ugt i64 %609, 2305843009213693951
  br i1 %610, label %611, label %613

611:                                              ; preds = %604
  %612 = bitcast %"class.std::__1::vector"* %17 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %612) #10
  unreachable

613:                                              ; preds = %604
  %614 = sub i64 %595, %606
  %615 = ashr exact i64 %614, 3
  %616 = icmp ult i64 %615, 1152921504606846975
  br i1 %616, label %617, label %625

617:                                              ; preds = %613
  %618 = ashr exact i64 %614, 2
  %619 = icmp ult i64 %618, %609
  %620 = select i1 %619, i64 %609, i64 %618
  %621 = icmp eq i64 %620, 0
  br i1 %621, label %630, label %622

622:                                              ; preds = %617
  %623 = icmp ugt i64 %620, 2305843009213693951
  br i1 %623, label %624, label %625

624:                                              ; preds = %622
  tail call void @abort() #10
  unreachable

625:                                              ; preds = %622, %613
  %626 = phi i64 [ %620, %622 ], [ 2305843009213693951, %613 ]
  %627 = shl i64 %626, 3
  %628 = tail call i8* @_Znwm(i64 %627) #9
  %629 = bitcast i8* %628 to %"struct.(anonymous namespace)::BFChar"*
  br label %630

630:                                              ; preds = %625, %617
  %631 = phi i64 [ %626, %625 ], [ 0, %617 ]
  %632 = phi i8* [ %628, %625 ], [ null, %617 ]
  %633 = phi %"struct.(anonymous namespace)::BFChar"* [ %629, %625 ], [ null, %617 ]
  %634 = getelementptr inbounds %"struct.(anonymous namespace)::BFChar", %"struct.(anonymous namespace)::BFChar"* %633, i64 %608
  %635 = getelementptr inbounds %"struct.(anonymous namespace)::BFChar", %"struct.(anonymous namespace)::BFChar"* %633, i64 %631
  %636 = ptrtoint %"struct.(anonymous namespace)::BFChar"* %635 to i64
  %637 = bitcast %"struct.(anonymous namespace)::BFChar"* %634 to i64*
  %638 = zext i32 %470 to i64
  %639 = shl nuw i64 %638, 32
  %640 = zext i16 %472 to i64
  %641 = or i64 %639, %640
  store i64 %641, i64* %637, align 4
  %642 = getelementptr inbounds %"struct.(anonymous namespace)::BFChar", %"struct.(anonymous namespace)::BFChar"* %634, i64 1
  %643 = ptrtoint %"struct.(anonymous namespace)::BFChar"* %642 to i64
  %644 = ptrtoint %"struct.(anonymous namespace)::BFChar"* %633 to i64
  %645 = icmp sgt i64 %607, 0
  br i1 %645, label %646, label %648

646:                                              ; preds = %630
  %647 = inttoptr i64 %606 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %632, i8* align 4 %647, i64 %607, i1 false) #8
  br label %648

648:                                              ; preds = %646, %630
  store i64 %644, i64* %43, align 8
  store i64 %643, i64* %42, align 8
  store i64 %636, i64* %44, align 8
  %649 = icmp eq i64 %606, 0
  br i1 %649, label %652, label %650

650:                                              ; preds = %648
  %651 = inttoptr i64 %606 to i8*
  tail call void @_ZdlPv(i8* %651) #9
  br label %652

652:                                              ; preds = %650, %648, %596, %589, %587, %529, %512, %498
  %653 = phi i8 [ %469, %498 ], [ %469, %512 ], [ 1, %529 ], [ 1, %587 ], [ 1, %589 ], [ 1, %596 ], [ 1, %648 ], [ 1, %650 ]
  br i1 %499, label %654, label %663

654:                                              ; preds = %652
  %655 = trunc i32 %468 to i16
  %656 = and i8 %653, 1
  %657 = icmp eq i8 %656, 0
  br i1 %657, label %663, label %658

658:                                              ; preds = %654
  %659 = and i32 %473, 65535
  %660 = zext i32 %659 to i64
  %661 = getelementptr inbounds i32, i32* %0, i64 %660
  %662 = load i32, i32* %661, align 4
  br label %663

663:                                              ; preds = %654, %658, %652
  %664 = phi i16 [ %472, %654 ], [ %655, %658 ], [ %472, %652 ]
  %665 = phi i16 [ %655, %654 ], [ %655, %658 ], [ %471, %652 ]
  %666 = phi i32 [ %470, %654 ], [ %662, %658 ], [ %470, %652 ]
  %667 = phi i8 [ %653, %654 ], [ 0, %658 ], [ %653, %652 ]
  %668 = add nsw i32 %468, 1
  br i1 %475, label %467, label %48
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkStreamAsset* @_Z22SkPDFMakeToUnicodeCmapPKiPK13SkPDFGlyphUsebtt(i32* nocapture readonly, %class.SkPDFGlyphUse* readonly, i1 zeroext, i16 zeroext, i16 zeroext) local_unnamed_addr #0 {
  %6 = alloca %class.SkDynamicMemoryWStream, align 8
  %7 = bitcast %class.SkDynamicMemoryWStream* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #8
  %8 = getelementptr inbounds %class.SkDynamicMemoryWStream, %class.SkDynamicMemoryWStream* %6, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %class.SkDynamicMemoryWStream, %class.SkDynamicMemoryWStream* %6, i64 0, i32 1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV22SkDynamicMemoryWStream, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %10 = bitcast %"struct.SkDynamicMemoryWStream::Block"** %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #8
  %11 = getelementptr inbounds %class.SkDynamicMemoryWStream, %class.SkDynamicMemoryWStream* %6, i64 0, i32 0
  %12 = bitcast %class.SkDynamicMemoryWStream* %6 to i1 (%class.SkWStream*, i8*, i64)***
  %13 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV22SkDynamicMemoryWStream, i64 0, inrange i32 0, i64 4) to i1 (%class.SkWStream*, i8*, i64)**), align 8
  %14 = call zeroext i1 %13(%class.SkWStream* nonnull %11, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.7, i64 0, i64 0), i64 61) #8
  %15 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %12, align 8
  %16 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %15, i64 2
  %17 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %16, align 8
  %18 = call zeroext i1 %17(%class.SkWStream* nonnull %11, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.8, i64 0, i64 0), i64 74) #8
  %19 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %12, align 8
  %20 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %19, i64 2
  %21 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %20, align 8
  %22 = call zeroext i1 %21(%class.SkWStream* nonnull %11, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.9, i64 0, i64 0), i64 72) #8
  %23 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %12, align 8
  %24 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %23, i64 2
  %25 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %24, align 8
  br i1 %2, label %26, label %28

26:                                               ; preds = %5
  %27 = call zeroext i1 %25(%class.SkWStream* nonnull %11, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i64 14) #8
  br label %30

28:                                               ; preds = %5
  %29 = call zeroext i1 %25(%class.SkWStream* nonnull %11, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), i64 10) #8
  br label %30

30:                                               ; preds = %26, %28
  %31 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %12, align 8
  %32 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %31, i64 2
  %33 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %32, align 8
  %34 = call zeroext i1 %33(%class.SkWStream* nonnull %11, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.12, i64 0, i64 0), i64 18) #8
  call void @_Z23SkPDFAppendCmapSectionsPKiPK13SkPDFGlyphUseP22SkDynamicMemoryWStreambtt(i32* %0, %class.SkPDFGlyphUse* %1, %class.SkDynamicMemoryWStream* nonnull %6, i1 zeroext %2, i16 zeroext %3, i16 zeroext %4)
  %35 = load i1 (%class.SkWStream*, i8*, i64)**, i1 (%class.SkWStream*, i8*, i64)*** %12, align 8
  %36 = getelementptr inbounds i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %35, i64 2
  %37 = load i1 (%class.SkWStream*, i8*, i64)*, i1 (%class.SkWStream*, i8*, i64)** %36, align 8
  %38 = call zeroext i1 %37(%class.SkWStream* nonnull %11, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @_ZZL18append_cmap_footerP22SkDynamicMemoryWStreamE7kFooter, i64 0, i64 0), i64 61) #8
  %39 = call %class.SkStreamAsset* @_ZN22SkDynamicMemoryWStream14detachAsStreamEv(%class.SkDynamicMemoryWStream* nonnull %6) #8
  call void @_ZN22SkDynamicMemoryWStreamD1Ev(%class.SkDynamicMemoryWStream* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #8
  ret %class.SkStreamAsset* %39
}

declare %class.SkStreamAsset* @_ZN22SkDynamicMemoryWStream14detachAsStreamEv(%class.SkDynamicMemoryWStream*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN22SkDynamicMemoryWStreamD1Ev(%class.SkDynamicMemoryWStream*) unnamed_addr #3

declare zeroext i1 @_ZN9SkWStream14writeDecAsTextEi(%class.SkWStream*, i32) local_unnamed_addr #2

declare i64 @_ZN5SkUTF7ToUTF16EiPt(i32, i16*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
