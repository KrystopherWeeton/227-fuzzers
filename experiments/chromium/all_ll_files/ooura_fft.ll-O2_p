; ModuleID = '../../third_party/webrtc/common_audio/third_party/ooura/fft_size_128/ooura_fft.cc'
source_filename = "../../third_party/webrtc/common_audio/third_party/ooura/fft_size_128/ooura_fft.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::OouraFft" = type { i8 }

@_ZZNK6webrtc8OouraFft10bitrv2_128EPfE2ip = internal unnamed_addr constant [4 x i32] [i32 0, i32 64, i32 32, i32 96], align 16
@_ZN6webrtcL6rdft_wE = internal unnamed_addr constant [64 x float] [float 1.000000e+00, float 0.000000e+00, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FED906BE0000000, float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000, float 0x3FED906BE0000000, float 0x3FEF6297C0000000, float 0x3FC8F8B840000000, float 0x3FE1C73B40000000, float 0x3FEA9B6620000000, float 0x3FEA9B6620000000, float 0x3FE1C73B40000000, float 0x3FC8F8B840000000, float 0x3FEF6297C0000000, float 0x3FEFD88DA0000000, float 0x3FB917A6C0000000, float 0x3FE44CF340000000, float 0x3FE8BC8060000000, float 0x3FEC38B300000000, float 0x3FDE2B5D40000000, float 0x3FD2940620000000, float 0x3FEE9F4160000000, float 0x3FEE9F4160000000, float 0x3FD2940620000000, float 0x3FDE2B5D40000000, float 0x3FEC38B300000000, float 0x3FE8BC8060000000, float 0x3FE44CF340000000, float 0x3FB917A6C0000000, float 0x3FEFD88DA0000000, float 0x3FE6A09E60000000, float 0x3FDFF621E0000000, float 0x3FDFD88DA0000000, float 0x3FDFA75580000000, float 0x3FDF6297C0000000, float 0x3FDF0A7F00000000, float 0x3FDE9F4160000000, float 0x3FDE212100000000, float 0x3FDD906BE0000000, float 0x3FDCED7AE0000000, float 0x3FDC38B300000000, float 0x3FDB728340000000, float 0x3FDA9B6620000000, float 0x3FD9B3E040000000, float 0x3FD8BC8060000000, float 0x3FD7B5DF40000000, float 0x3FD6A09E60000000, float 0x3FD57D6940000000, float 0x3FD44CF340000000, float 0x3FD30FF800000000, float 0x3FD1C73B40000000, float 0x3FD07387A0000000, float 0x3FCE2B5D40000000, float 0x3FCB5D1000000000, float 0x3FC87DE2C0000000, float 0x3FC58F9A80000000, float 0x3FC2940620000000, float 0x3FBF19F9A0000000, float 0x3FB8F8B840000000, float 0x3FB2C81060000000, float 0x3FA917A6C0000000, float 0x3F991F6600000000], align 16
@_ZN6webrtcL16rdft_wk3ri_firstE = internal unnamed_addr constant [16 x float] [float 1.000000e+00, float 0.000000e+00, float 0x3FD87DE2C0000000, float 0x3FED906BE0000000, float 0x3FEA9B6600000000, float 0x3FE1C73B40000000, float 0xBFC8F8B880000000, float 0x3FEF6297C0000000, float 0x3FEE9F4160000000, float 0x3FD2940640000000, float 0x3FB917A700000000, float 0x3FEFD88DA0000000, float 0x3FE44CF340000000, float 0x3FE8BC8080000000, float 0xBFDE2B5DC0000000, float 0x3FEC38B2C0000000], align 16
@_ZN6webrtcL17rdft_wk3ri_secondE = internal unnamed_addr constant [16 x float] [float 0xBFE6A09E60000000, float 0x3FE6A09E60000000, float 0xBFED906BE0000000, float 0xBFD87DE2C0000000, float 0xBFEF6297C0000000, float 0x3FC8F8B880000000, float 0xBFE1C73B40000000, float 0xBFEA9B6600000000, float 0xBFEC38B2C0000000, float 0x3FDE2B5DC0000000, float 0xBFE8BC8080000000, float 0xBFE44CF340000000, float 0xBFEFD88DA0000000, float 0xBFB917A700000000, float 0xBFD2940640000000, float 0xBFEE9F4160000000], align 16

@_ZN6webrtc8OouraFftC1Eb = hidden unnamed_addr alias void (%"class.webrtc::OouraFft"*, i1), void (%"class.webrtc::OouraFft"*, i1)* @_ZN6webrtc8OouraFftC2Eb
@_ZN6webrtc8OouraFftC1Ev = hidden unnamed_addr alias void (%"class.webrtc::OouraFft"*), void (%"class.webrtc::OouraFft"*)* @_ZN6webrtc8OouraFftC2Ev
@_ZN6webrtc8OouraFftD1Ev = hidden unnamed_addr alias void (%"class.webrtc::OouraFft"*), void (%"class.webrtc::OouraFft"*)* @_ZN6webrtc8OouraFftD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc8OouraFftC2Eb(%"class.webrtc::OouraFft"* nocapture, i1 zeroext) unnamed_addr #0 align 2 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %"class.webrtc::OouraFft", %"class.webrtc::OouraFft"* %0, i64 0, i32 0
  store i8 %3, i8* %4, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc8OouraFftC2Ev(%"class.webrtc::OouraFft"* nocapture) unnamed_addr #1 align 2 {
  %2 = tail call i32 @_ZN6webrtc10GetCPUInfoENS_10CPUFeatureE(i32 0) #5
  %3 = icmp ne i32 %2, 0
  %4 = getelementptr inbounds %"class.webrtc::OouraFft", %"class.webrtc::OouraFft"* %0, i64 0, i32 0
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 1
  ret void
}

declare i32 @_ZN6webrtc10GetCPUInfoENS_10CPUFeatureE(i32) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN6webrtc8OouraFftD2Ev(%"class.webrtc::OouraFft"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6webrtc8OouraFft3FftEPf(%"class.webrtc::OouraFft"* nocapture readonly, float*) local_unnamed_addr #1 align 2 {
  tail call void @_ZNK6webrtc8OouraFft10bitrv2_128EPf(%"class.webrtc::OouraFft"* undef, float* %1)
  tail call void @_ZNK6webrtc8OouraFft11cftfsub_128EPf(%"class.webrtc::OouraFft"* %0, float* %1)
  %3 = getelementptr inbounds %"class.webrtc::OouraFft", %"class.webrtc::OouraFft"* %0, i64 0, i32 0
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @_ZN6webrtc16rftfsub_128_SSE2EPf(float* %1) #5
  br label %44

7:                                                ; preds = %2, %7
  %8 = phi i64 [ %41, %7 ], [ 1, %2 ]
  %9 = phi i64 [ %42, %7 ], [ 2, %2 ]
  %10 = sub nuw nsw i64 128, %9
  %11 = sub nuw nsw i64 32, %8
  %12 = getelementptr inbounds float, float* getelementptr inbounds ([64 x float], [64 x float]* @_ZN6webrtcL6rdft_wE, i64 0, i64 32), i64 %11
  %13 = load float, float* %12, align 4
  %14 = fsub float 5.000000e-01, %13
  %15 = getelementptr inbounds float, float* getelementptr inbounds ([64 x float], [64 x float]* @_ZN6webrtcL6rdft_wE, i64 0, i64 32), i64 %8
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds float, float* %1, i64 %9
  %18 = load float, float* %17, align 4
  %19 = getelementptr inbounds float, float* %1, i64 %10
  %20 = load float, float* %19, align 4
  %21 = fsub float %18, %20
  %22 = or i64 %9, 1
  %23 = getelementptr inbounds float, float* %1, i64 %22
  %24 = load float, float* %23, align 4
  %25 = sub nuw nsw i64 129, %9
  %26 = getelementptr inbounds float, float* %1, i64 %25
  %27 = load float, float* %26, align 4
  %28 = fadd float %24, %27
  %29 = fmul float %14, %21
  %30 = fmul float %16, %28
  %31 = fsub float %29, %30
  %32 = fmul float %14, %28
  %33 = fmul float %16, %21
  %34 = fadd float %33, %32
  %35 = fsub float %18, %31
  store float %35, float* %17, align 4
  %36 = fsub float %24, %34
  store float %36, float* %23, align 4
  %37 = load float, float* %19, align 4
  %38 = fadd float %37, %31
  store float %38, float* %19, align 4
  %39 = load float, float* %26, align 4
  %40 = fsub float %39, %34
  store float %40, float* %26, align 4
  %41 = add nuw nsw i64 %8, 1
  %42 = add nuw nsw i64 %9, 2
  %43 = icmp eq i64 %41, 32
  br i1 %43, label %44, label %7

44:                                               ; preds = %7, %6
  %45 = load float, float* %1, align 4
  %46 = getelementptr inbounds float, float* %1, i64 1
  %47 = load float, float* %46, align 4
  %48 = fsub float %45, %47
  %49 = fadd float %45, %47
  store float %49, float* %1, align 4
  store float %48, float* %46, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK6webrtc8OouraFft10bitrv2_128EPf(%"class.webrtc::OouraFft"* nocapture readnone, float* nocapture) local_unnamed_addr #4 align 2 {
  br label %3

3:                                                ; preds = %89, %2
  %4 = phi i64 [ 0, %2 ], [ %115, %89 ]
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %89, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* @_ZZNK6webrtc8OouraFft10bitrv2_128EPfE2ip, i64 0, i64 %4
  %8 = load i32, i32* %7, align 4
  %9 = shl nuw i64 %4, 1
  %10 = zext i32 %8 to i64
  %11 = getelementptr inbounds float, float* %1, i64 %10
  %12 = bitcast float* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %8, 1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds float, float* %1, i64 %15
  %17 = bitcast float* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = and i64 %9, 4294967294
  %20 = getelementptr inbounds float, float* %1, i64 %19
  %21 = bitcast float* %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = and i64 %9, 4294967294
  %24 = or i64 %23, 1
  %25 = getelementptr inbounds float, float* %1, i64 %24
  %26 = bitcast float* %25 to i32*
  %27 = load i32, i32* %26, align 4
  store i32 %22, i32* %12, align 4
  store i32 %27, i32* %17, align 4
  store i32 %13, i32* %21, align 4
  store i32 %18, i32* %26, align 4
  %28 = add i32 %8, 8
  %29 = add i64 %9, 16
  %30 = zext i32 %28 to i64
  %31 = getelementptr inbounds float, float* %1, i64 %30
  %32 = bitcast float* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = add i32 %8, 9
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds float, float* %1, i64 %35
  %37 = bitcast float* %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = and i64 %29, 4294967294
  %40 = getelementptr inbounds float, float* %1, i64 %39
  %41 = bitcast float* %40 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = add i64 %9, 17
  %44 = and i64 %43, 4294967295
  %45 = getelementptr inbounds float, float* %1, i64 %44
  %46 = bitcast float* %45 to i32*
  %47 = load i32, i32* %46, align 4
  store i32 %42, i32* %32, align 4
  store i32 %47, i32* %37, align 4
  store i32 %33, i32* %41, align 4
  store i32 %38, i32* %46, align 4
  %48 = add i32 %8, 16
  %49 = add i64 %9, 8
  %50 = zext i32 %48 to i64
  %51 = getelementptr inbounds float, float* %1, i64 %50
  %52 = bitcast float* %51 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = add i32 %8, 17
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds float, float* %1, i64 %55
  %57 = bitcast float* %56 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = and i64 %49, 4294967294
  %60 = getelementptr inbounds float, float* %1, i64 %59
  %61 = bitcast float* %60 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = add i64 %9, 9
  %64 = and i64 %63, 4294967295
  %65 = getelementptr inbounds float, float* %1, i64 %64
  %66 = bitcast float* %65 to i32*
  %67 = load i32, i32* %66, align 4
  store i32 %62, i32* %52, align 4
  store i32 %67, i32* %57, align 4
  store i32 %53, i32* %61, align 4
  store i32 %58, i32* %66, align 4
  %68 = add i32 %8, 24
  %69 = add i64 %9, 24
  %70 = zext i32 %68 to i64
  %71 = getelementptr inbounds float, float* %1, i64 %70
  %72 = bitcast float* %71 to i32*
  %73 = load i32, i32* %72, align 4
  %74 = add i32 %8, 25
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds float, float* %1, i64 %75
  %77 = bitcast float* %76 to i32*
  %78 = load i32, i32* %77, align 4
  %79 = and i64 %69, 4294967294
  %80 = getelementptr inbounds float, float* %1, i64 %79
  %81 = bitcast float* %80 to i32*
  %82 = load i32, i32* %81, align 4
  %83 = add i64 %9, 25
  %84 = and i64 %83, 4294967295
  %85 = getelementptr inbounds float, float* %1, i64 %84
  %86 = bitcast float* %85 to i32*
  %87 = load i32, i32* %86, align 4
  store i32 %82, i32* %72, align 4
  store i32 %87, i32* %77, align 4
  store i32 %73, i32* %81, align 4
  store i32 %78, i32* %86, align 4
  %88 = icmp eq i64 %4, 1
  br i1 %88, label %89, label %118

89:                                               ; preds = %6, %118, %200, %3
  %90 = phi i64 [ 0, %3 ], [ %9, %200 ], [ %9, %118 ], [ %9, %6 ]
  %91 = getelementptr inbounds [4 x i32], [4 x i32]* @_ZZNK6webrtc8OouraFft10bitrv2_128EPfE2ip, i64 0, i64 %4
  %92 = load i32, i32* %91, align 4
  %93 = trunc i64 %90 to i32
  %94 = add i32 %93, 8
  %95 = add i32 %94, %92
  %96 = add i32 %95, 8
  %97 = zext i32 %95 to i64
  %98 = getelementptr inbounds float, float* %1, i64 %97
  %99 = bitcast float* %98 to i32*
  %100 = load i32, i32* %99, align 4
  %101 = add i32 %95, 1
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds float, float* %1, i64 %102
  %104 = bitcast float* %103 to i32*
  %105 = load i32, i32* %104, align 4
  %106 = zext i32 %96 to i64
  %107 = getelementptr inbounds float, float* %1, i64 %106
  %108 = bitcast float* %107 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = add i32 %95, 9
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %1, i64 %111
  %113 = bitcast float* %112 to i32*
  %114 = load i32, i32* %113, align 4
  store i32 %109, i32* %99, align 4
  store i32 %114, i32* %104, align 4
  store i32 %100, i32* %108, align 4
  store i32 %105, i32* %113, align 4
  %115 = add nuw nsw i64 %4, 1
  %116 = icmp eq i64 %115, 4
  br i1 %116, label %117, label %3

117:                                              ; preds = %89
  ret void

118:                                              ; preds = %6
  %119 = add i32 %8, 2
  %120 = add i64 %9, 64
  %121 = zext i32 %119 to i64
  %122 = getelementptr inbounds float, float* %1, i64 %121
  %123 = bitcast float* %122 to i32*
  %124 = load i32, i32* %123, align 4
  %125 = add i32 %8, 3
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds float, float* %1, i64 %126
  %128 = bitcast float* %127 to i32*
  %129 = load i32, i32* %128, align 4
  %130 = and i64 %120, 4294967294
  %131 = getelementptr inbounds float, float* %1, i64 %130
  %132 = bitcast float* %131 to i32*
  %133 = load i32, i32* %132, align 4
  %134 = add i64 %9, 65
  %135 = and i64 %134, 4294967295
  %136 = getelementptr inbounds float, float* %1, i64 %135
  %137 = bitcast float* %136 to i32*
  %138 = load i32, i32* %137, align 4
  store i32 %133, i32* %123, align 4
  store i32 %138, i32* %128, align 4
  store i32 %124, i32* %132, align 4
  store i32 %129, i32* %137, align 4
  %139 = add i32 %8, 10
  %140 = add i64 %9, 80
  %141 = zext i32 %139 to i64
  %142 = getelementptr inbounds float, float* %1, i64 %141
  %143 = bitcast float* %142 to i32*
  %144 = load i32, i32* %143, align 4
  %145 = add i32 %8, 11
  %146 = zext i32 %145 to i64
  %147 = getelementptr inbounds float, float* %1, i64 %146
  %148 = bitcast float* %147 to i32*
  %149 = load i32, i32* %148, align 4
  %150 = and i64 %140, 4294967294
  %151 = getelementptr inbounds float, float* %1, i64 %150
  %152 = bitcast float* %151 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = add i64 %9, 81
  %155 = and i64 %154, 4294967295
  %156 = getelementptr inbounds float, float* %1, i64 %155
  %157 = bitcast float* %156 to i32*
  %158 = load i32, i32* %157, align 4
  store i32 %153, i32* %143, align 4
  store i32 %158, i32* %148, align 4
  store i32 %144, i32* %152, align 4
  store i32 %149, i32* %157, align 4
  %159 = add i32 %8, 18
  %160 = add i64 %9, 72
  %161 = zext i32 %159 to i64
  %162 = getelementptr inbounds float, float* %1, i64 %161
  %163 = bitcast float* %162 to i32*
  %164 = load i32, i32* %163, align 4
  %165 = add i32 %8, 19
  %166 = zext i32 %165 to i64
  %167 = getelementptr inbounds float, float* %1, i64 %166
  %168 = bitcast float* %167 to i32*
  %169 = load i32, i32* %168, align 4
  %170 = and i64 %160, 4294967294
  %171 = getelementptr inbounds float, float* %1, i64 %170
  %172 = bitcast float* %171 to i32*
  %173 = load i32, i32* %172, align 4
  %174 = add i64 %9, 73
  %175 = and i64 %174, 4294967295
  %176 = getelementptr inbounds float, float* %1, i64 %175
  %177 = bitcast float* %176 to i32*
  %178 = load i32, i32* %177, align 4
  store i32 %173, i32* %163, align 4
  store i32 %178, i32* %168, align 4
  store i32 %164, i32* %172, align 4
  store i32 %169, i32* %177, align 4
  %179 = add i32 %8, 26
  %180 = add i64 %9, 88
  %181 = zext i32 %179 to i64
  %182 = getelementptr inbounds float, float* %1, i64 %181
  %183 = bitcast float* %182 to i32*
  %184 = load i32, i32* %183, align 4
  %185 = add i32 %8, 27
  %186 = zext i32 %185 to i64
  %187 = getelementptr inbounds float, float* %1, i64 %186
  %188 = bitcast float* %187 to i32*
  %189 = load i32, i32* %188, align 4
  %190 = and i64 %180, 4294967294
  %191 = getelementptr inbounds float, float* %1, i64 %190
  %192 = bitcast float* %191 to i32*
  %193 = load i32, i32* %192, align 4
  %194 = add i64 %9, 89
  %195 = and i64 %194, 4294967295
  %196 = getelementptr inbounds float, float* %1, i64 %195
  %197 = bitcast float* %196 to i32*
  %198 = load i32, i32* %197, align 4
  store i32 %193, i32* %183, align 4
  store i32 %198, i32* %188, align 4
  store i32 %184, i32* %192, align 4
  store i32 %189, i32* %197, align 4
  %199 = icmp eq i64 %4, 2
  br i1 %199, label %89, label %200

200:                                              ; preds = %118
  %201 = add i32 %8, 4
  %202 = add i64 %9, 32
  %203 = zext i32 %201 to i64
  %204 = getelementptr inbounds float, float* %1, i64 %203
  %205 = bitcast float* %204 to i32*
  %206 = load i32, i32* %205, align 4
  %207 = add i32 %8, 5
  %208 = zext i32 %207 to i64
  %209 = getelementptr inbounds float, float* %1, i64 %208
  %210 = bitcast float* %209 to i32*
  %211 = load i32, i32* %210, align 4
  %212 = and i64 %202, 4294967294
  %213 = getelementptr inbounds float, float* %1, i64 %212
  %214 = bitcast float* %213 to i32*
  %215 = load i32, i32* %214, align 4
  %216 = add i64 %9, 33
  %217 = and i64 %216, 4294967295
  %218 = getelementptr inbounds float, float* %1, i64 %217
  %219 = bitcast float* %218 to i32*
  %220 = load i32, i32* %219, align 4
  store i32 %215, i32* %205, align 4
  store i32 %220, i32* %210, align 4
  store i32 %206, i32* %214, align 4
  store i32 %211, i32* %219, align 4
  %221 = add i32 %8, 12
  %222 = add i64 %9, 48
  %223 = zext i32 %221 to i64
  %224 = getelementptr inbounds float, float* %1, i64 %223
  %225 = bitcast float* %224 to i32*
  %226 = load i32, i32* %225, align 4
  %227 = add i32 %8, 13
  %228 = zext i32 %227 to i64
  %229 = getelementptr inbounds float, float* %1, i64 %228
  %230 = bitcast float* %229 to i32*
  %231 = load i32, i32* %230, align 4
  %232 = and i64 %222, 4294967294
  %233 = getelementptr inbounds float, float* %1, i64 %232
  %234 = bitcast float* %233 to i32*
  %235 = load i32, i32* %234, align 4
  %236 = add i64 %9, 49
  %237 = and i64 %236, 4294967295
  %238 = getelementptr inbounds float, float* %1, i64 %237
  %239 = bitcast float* %238 to i32*
  %240 = load i32, i32* %239, align 4
  store i32 %235, i32* %225, align 4
  store i32 %240, i32* %230, align 4
  store i32 %226, i32* %234, align 4
  store i32 %231, i32* %239, align 4
  %241 = add i32 %8, 20
  %242 = add i64 %9, 40
  %243 = zext i32 %241 to i64
  %244 = getelementptr inbounds float, float* %1, i64 %243
  %245 = bitcast float* %244 to i32*
  %246 = load i32, i32* %245, align 4
  %247 = add i32 %8, 21
  %248 = zext i32 %247 to i64
  %249 = getelementptr inbounds float, float* %1, i64 %248
  %250 = bitcast float* %249 to i32*
  %251 = load i32, i32* %250, align 4
  %252 = and i64 %242, 4294967294
  %253 = getelementptr inbounds float, float* %1, i64 %252
  %254 = bitcast float* %253 to i32*
  %255 = load i32, i32* %254, align 4
  %256 = add i64 %9, 41
  %257 = and i64 %256, 4294967295
  %258 = getelementptr inbounds float, float* %1, i64 %257
  %259 = bitcast float* %258 to i32*
  %260 = load i32, i32* %259, align 4
  store i32 %255, i32* %245, align 4
  store i32 %260, i32* %250, align 4
  store i32 %246, i32* %254, align 4
  store i32 %251, i32* %259, align 4
  %261 = add i32 %8, 28
  %262 = add i64 %9, 56
  %263 = zext i32 %261 to i64
  %264 = getelementptr inbounds float, float* %1, i64 %263
  %265 = bitcast float* %264 to i32*
  %266 = load i32, i32* %265, align 4
  %267 = add i32 %8, 29
  %268 = zext i32 %267 to i64
  %269 = getelementptr inbounds float, float* %1, i64 %268
  %270 = bitcast float* %269 to i32*
  %271 = load i32, i32* %270, align 4
  %272 = and i64 %262, 4294967294
  %273 = getelementptr inbounds float, float* %1, i64 %272
  %274 = bitcast float* %273 to i32*
  %275 = load i32, i32* %274, align 4
  %276 = add i64 %9, 57
  %277 = and i64 %276, 4294967295
  %278 = getelementptr inbounds float, float* %1, i64 %277
  %279 = bitcast float* %278 to i32*
  %280 = load i32, i32* %279, align 4
  store i32 %275, i32* %265, align 4
  store i32 %280, i32* %270, align 4
  store i32 %266, i32* %274, align 4
  store i32 %271, i32* %279, align 4
  br label %89
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6webrtc8OouraFft11cftfsub_128EPf(%"class.webrtc::OouraFft"* nocapture readonly, float*) local_unnamed_addr #1 align 2 {
  tail call void @_ZNK6webrtc8OouraFft10cft1st_128EPf(%"class.webrtc::OouraFft"* %0, float* %1)
  tail call void @_ZNK6webrtc8OouraFft10cftmdl_128EPf(%"class.webrtc::OouraFft"* %0, float* %1)
  %3 = bitcast float* %1 to <8 x float>*
  %4 = load <8 x float>, <8 x float>* %3, align 4
  %5 = shufflevector <8 x float> %4, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %6 = shufflevector <8 x float> %4, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %7 = getelementptr inbounds float, float* %1, i64 32
  %8 = bitcast float* %7 to <8 x float>*
  %9 = load <8 x float>, <8 x float>* %8, align 4
  %10 = shufflevector <8 x float> %9, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %11 = shufflevector <8 x float> %9, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %12 = fadd <4 x float> %5, %10
  %13 = fadd <4 x float> %6, %11
  %14 = fsub <4 x float> %5, %10
  %15 = fsub <4 x float> %6, %11
  %16 = getelementptr inbounds float, float* %1, i64 64
  %17 = bitcast float* %16 to <8 x float>*
  %18 = load <8 x float>, <8 x float>* %17, align 4
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %20 = shufflevector <8 x float> %18, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %21 = getelementptr inbounds float, float* %1, i64 96
  %22 = bitcast float* %21 to <8 x float>*
  %23 = load <8 x float>, <8 x float>* %22, align 4
  %24 = shufflevector <8 x float> %23, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %25 = shufflevector <8 x float> %23, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %26 = fadd <4 x float> %19, %24
  %27 = fadd <4 x float> %20, %25
  %28 = fsub <4 x float> %19, %24
  %29 = fsub <4 x float> %20, %25
  %30 = fadd <4 x float> %12, %26
  %31 = fadd <4 x float> %13, %27
  %32 = bitcast float* %1 to <8 x float>*
  %33 = shufflevector <4 x float> %30, <4 x float> %31, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %33, <8 x float>* %32, align 4
  %34 = fsub <4 x float> %12, %26
  %35 = fsub <4 x float> %13, %27
  %36 = getelementptr inbounds float, float* %1, i64 64
  %37 = bitcast float* %36 to <8 x float>*
  %38 = shufflevector <4 x float> %34, <4 x float> %35, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %38, <8 x float>* %37, align 4
  %39 = fsub <4 x float> %14, %29
  %40 = fadd <4 x float> %15, %28
  %41 = getelementptr inbounds float, float* %1, i64 32
  %42 = bitcast float* %41 to <8 x float>*
  %43 = shufflevector <4 x float> %39, <4 x float> %40, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %43, <8 x float>* %42, align 4
  %44 = fadd <4 x float> %14, %29
  %45 = fsub <4 x float> %15, %28
  %46 = getelementptr inbounds float, float* %1, i64 96
  %47 = bitcast float* %46 to <8 x float>*
  %48 = shufflevector <4 x float> %44, <4 x float> %45, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %48, <8 x float>* %47, align 4
  %49 = getelementptr inbounds float, float* %1, i64 8
  %50 = bitcast float* %49 to <8 x float>*
  %51 = load <8 x float>, <8 x float>* %50, align 4
  %52 = shufflevector <8 x float> %51, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %53 = shufflevector <8 x float> %51, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %54 = getelementptr inbounds float, float* %1, i64 40
  %55 = bitcast float* %54 to <8 x float>*
  %56 = load <8 x float>, <8 x float>* %55, align 4
  %57 = shufflevector <8 x float> %56, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %58 = shufflevector <8 x float> %56, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %59 = fadd <4 x float> %52, %57
  %60 = fadd <4 x float> %53, %58
  %61 = fsub <4 x float> %52, %57
  %62 = fsub <4 x float> %53, %58
  %63 = getelementptr inbounds float, float* %1, i64 72
  %64 = bitcast float* %63 to <8 x float>*
  %65 = load <8 x float>, <8 x float>* %64, align 4
  %66 = shufflevector <8 x float> %65, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %67 = shufflevector <8 x float> %65, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %68 = getelementptr inbounds float, float* %1, i64 104
  %69 = bitcast float* %68 to <8 x float>*
  %70 = load <8 x float>, <8 x float>* %69, align 4
  %71 = shufflevector <8 x float> %70, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %72 = shufflevector <8 x float> %70, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %73 = fadd <4 x float> %66, %71
  %74 = fadd <4 x float> %67, %72
  %75 = fsub <4 x float> %66, %71
  %76 = fsub <4 x float> %67, %72
  %77 = fadd <4 x float> %59, %73
  %78 = fadd <4 x float> %60, %74
  %79 = getelementptr inbounds float, float* %1, i64 8
  %80 = bitcast float* %79 to <8 x float>*
  %81 = shufflevector <4 x float> %77, <4 x float> %78, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %81, <8 x float>* %80, align 4
  %82 = fsub <4 x float> %59, %73
  %83 = fsub <4 x float> %60, %74
  %84 = getelementptr inbounds float, float* %1, i64 72
  %85 = bitcast float* %84 to <8 x float>*
  %86 = shufflevector <4 x float> %82, <4 x float> %83, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %86, <8 x float>* %85, align 4
  %87 = fsub <4 x float> %61, %76
  %88 = fadd <4 x float> %62, %75
  %89 = getelementptr inbounds float, float* %1, i64 40
  %90 = bitcast float* %89 to <8 x float>*
  %91 = shufflevector <4 x float> %87, <4 x float> %88, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %91, <8 x float>* %90, align 4
  %92 = fadd <4 x float> %61, %76
  %93 = fsub <4 x float> %62, %75
  %94 = getelementptr inbounds float, float* %1, i64 104
  %95 = bitcast float* %94 to <8 x float>*
  %96 = shufflevector <4 x float> %92, <4 x float> %93, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %96, <8 x float>* %95, align 4
  %97 = getelementptr inbounds float, float* %1, i64 16
  %98 = bitcast float* %97 to <8 x float>*
  %99 = load <8 x float>, <8 x float>* %98, align 4
  %100 = shufflevector <8 x float> %99, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %101 = shufflevector <8 x float> %99, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %102 = getelementptr inbounds float, float* %1, i64 48
  %103 = bitcast float* %102 to <8 x float>*
  %104 = load <8 x float>, <8 x float>* %103, align 4
  %105 = shufflevector <8 x float> %104, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %106 = shufflevector <8 x float> %104, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %107 = fadd <4 x float> %100, %105
  %108 = fadd <4 x float> %101, %106
  %109 = fsub <4 x float> %100, %105
  %110 = fsub <4 x float> %101, %106
  %111 = getelementptr inbounds float, float* %1, i64 80
  %112 = bitcast float* %111 to <8 x float>*
  %113 = load <8 x float>, <8 x float>* %112, align 4
  %114 = shufflevector <8 x float> %113, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %115 = shufflevector <8 x float> %113, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %116 = getelementptr inbounds float, float* %1, i64 112
  %117 = bitcast float* %116 to <8 x float>*
  %118 = load <8 x float>, <8 x float>* %117, align 4
  %119 = shufflevector <8 x float> %118, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %120 = shufflevector <8 x float> %118, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %121 = fadd <4 x float> %114, %119
  %122 = fadd <4 x float> %115, %120
  %123 = fsub <4 x float> %114, %119
  %124 = fsub <4 x float> %115, %120
  %125 = fadd <4 x float> %107, %121
  %126 = fadd <4 x float> %108, %122
  %127 = getelementptr inbounds float, float* %1, i64 16
  %128 = bitcast float* %127 to <8 x float>*
  %129 = shufflevector <4 x float> %125, <4 x float> %126, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %129, <8 x float>* %128, align 4
  %130 = fsub <4 x float> %107, %121
  %131 = fsub <4 x float> %108, %122
  %132 = getelementptr inbounds float, float* %1, i64 80
  %133 = bitcast float* %132 to <8 x float>*
  %134 = shufflevector <4 x float> %130, <4 x float> %131, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %134, <8 x float>* %133, align 4
  %135 = fsub <4 x float> %109, %124
  %136 = fadd <4 x float> %110, %123
  %137 = getelementptr inbounds float, float* %1, i64 48
  %138 = bitcast float* %137 to <8 x float>*
  %139 = shufflevector <4 x float> %135, <4 x float> %136, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %139, <8 x float>* %138, align 4
  %140 = fadd <4 x float> %109, %124
  %141 = fsub <4 x float> %110, %123
  %142 = getelementptr inbounds float, float* %1, i64 112
  %143 = bitcast float* %142 to <8 x float>*
  %144 = shufflevector <4 x float> %140, <4 x float> %141, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %144, <8 x float>* %143, align 4
  %145 = getelementptr inbounds float, float* %1, i64 24
  %146 = bitcast float* %145 to <8 x float>*
  %147 = load <8 x float>, <8 x float>* %146, align 4
  %148 = shufflevector <8 x float> %147, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %149 = shufflevector <8 x float> %147, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %150 = getelementptr inbounds float, float* %1, i64 56
  %151 = bitcast float* %150 to <8 x float>*
  %152 = load <8 x float>, <8 x float>* %151, align 4
  %153 = shufflevector <8 x float> %152, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %154 = shufflevector <8 x float> %152, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %155 = fadd <4 x float> %148, %153
  %156 = fadd <4 x float> %149, %154
  %157 = fsub <4 x float> %148, %153
  %158 = fsub <4 x float> %149, %154
  %159 = getelementptr inbounds float, float* %1, i64 88
  %160 = bitcast float* %159 to <8 x float>*
  %161 = load <8 x float>, <8 x float>* %160, align 4
  %162 = shufflevector <8 x float> %161, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %163 = shufflevector <8 x float> %161, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %164 = getelementptr inbounds float, float* %1, i64 120
  %165 = bitcast float* %164 to <8 x float>*
  %166 = load <8 x float>, <8 x float>* %165, align 4
  %167 = shufflevector <8 x float> %166, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %168 = shufflevector <8 x float> %166, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %169 = fadd <4 x float> %162, %167
  %170 = fadd <4 x float> %163, %168
  %171 = fsub <4 x float> %162, %167
  %172 = fsub <4 x float> %163, %168
  %173 = fadd <4 x float> %155, %169
  %174 = fadd <4 x float> %156, %170
  %175 = getelementptr inbounds float, float* %1, i64 24
  %176 = bitcast float* %175 to <8 x float>*
  %177 = shufflevector <4 x float> %173, <4 x float> %174, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %177, <8 x float>* %176, align 4
  %178 = fsub <4 x float> %155, %169
  %179 = fsub <4 x float> %156, %170
  %180 = getelementptr inbounds float, float* %1, i64 88
  %181 = bitcast float* %180 to <8 x float>*
  %182 = shufflevector <4 x float> %178, <4 x float> %179, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %182, <8 x float>* %181, align 4
  %183 = fsub <4 x float> %157, %172
  %184 = fadd <4 x float> %158, %171
  %185 = getelementptr inbounds float, float* %1, i64 56
  %186 = bitcast float* %185 to <8 x float>*
  %187 = shufflevector <4 x float> %183, <4 x float> %184, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %187, <8 x float>* %186, align 4
  %188 = fadd <4 x float> %157, %172
  %189 = fsub <4 x float> %158, %171
  %190 = getelementptr inbounds float, float* %1, i64 120
  %191 = bitcast float* %190 to <8 x float>*
  %192 = shufflevector <4 x float> %188, <4 x float> %189, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %192, <8 x float>* %191, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6webrtc8OouraFft11rftfsub_128EPf(%"class.webrtc::OouraFft"* nocapture readonly, float*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::OouraFft", %"class.webrtc::OouraFft"* %0, i64 0, i32 0
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @_ZN6webrtc16rftfsub_128_SSE2EPf(float* %1) #5
  br label %44

7:                                                ; preds = %2, %7
  %8 = phi i64 [ %41, %7 ], [ 1, %2 ]
  %9 = phi i64 [ %42, %7 ], [ 2, %2 ]
  %10 = sub nuw nsw i64 128, %9
  %11 = sub nuw nsw i64 32, %8
  %12 = getelementptr inbounds float, float* getelementptr inbounds ([64 x float], [64 x float]* @_ZN6webrtcL6rdft_wE, i64 0, i64 32), i64 %11
  %13 = load float, float* %12, align 4
  %14 = fsub float 5.000000e-01, %13
  %15 = getelementptr inbounds float, float* getelementptr inbounds ([64 x float], [64 x float]* @_ZN6webrtcL6rdft_wE, i64 0, i64 32), i64 %8
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds float, float* %1, i64 %9
  %18 = load float, float* %17, align 4
  %19 = getelementptr inbounds float, float* %1, i64 %10
  %20 = load float, float* %19, align 4
  %21 = fsub float %18, %20
  %22 = or i64 %9, 1
  %23 = getelementptr inbounds float, float* %1, i64 %22
  %24 = load float, float* %23, align 4
  %25 = sub nuw nsw i64 129, %9
  %26 = getelementptr inbounds float, float* %1, i64 %25
  %27 = load float, float* %26, align 4
  %28 = fadd float %24, %27
  %29 = fmul float %14, %21
  %30 = fmul float %16, %28
  %31 = fsub float %29, %30
  %32 = fmul float %14, %28
  %33 = fmul float %16, %21
  %34 = fadd float %33, %32
  %35 = fsub float %18, %31
  store float %35, float* %17, align 4
  %36 = fsub float %24, %34
  store float %36, float* %23, align 4
  %37 = load float, float* %19, align 4
  %38 = fadd float %37, %31
  store float %38, float* %19, align 4
  %39 = load float, float* %26, align 4
  %40 = fsub float %39, %34
  store float %40, float* %26, align 4
  %41 = add nuw nsw i64 %8, 1
  %42 = add nuw nsw i64 %9, 2
  %43 = icmp eq i64 %41, 32
  br i1 %43, label %44, label %7

44:                                               ; preds = %7, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6webrtc8OouraFft10InverseFftEPf(%"class.webrtc::OouraFft"* nocapture readonly, float*) local_unnamed_addr #1 align 2 {
  %3 = load float, float* %1, align 4
  %4 = getelementptr inbounds float, float* %1, i64 1
  %5 = load float, float* %4, align 4
  %6 = fsub float %3, %5
  %7 = fmul float %6, 5.000000e-01
  store float %7, float* %4, align 4
  %8 = fsub float %3, %7
  store float %8, float* %1, align 4
  %9 = getelementptr inbounds %"class.webrtc::OouraFft", %"class.webrtc::OouraFft"* %0, i64 0, i32 0
  %10 = load i8, i8* %9, align 1, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  tail call void @_ZN6webrtc16rftbsub_128_SSE2EPf(float* %1) #5
  br label %56

13:                                               ; preds = %2
  %14 = fsub float -0.000000e+00, %7
  store float %14, float* %4, align 4
  br label %15

15:                                               ; preds = %15, %13
  %16 = phi i64 [ 1, %13 ], [ %49, %15 ]
  %17 = phi i64 [ 2, %13 ], [ %50, %15 ]
  %18 = sub nuw nsw i64 128, %17
  %19 = sub nuw nsw i64 32, %16
  %20 = getelementptr inbounds float, float* getelementptr inbounds ([64 x float], [64 x float]* @_ZN6webrtcL6rdft_wE, i64 0, i64 32), i64 %19
  %21 = load float, float* %20, align 4
  %22 = fsub float 5.000000e-01, %21
  %23 = getelementptr inbounds float, float* getelementptr inbounds ([64 x float], [64 x float]* @_ZN6webrtcL6rdft_wE, i64 0, i64 32), i64 %16
  %24 = load float, float* %23, align 4
  %25 = getelementptr inbounds float, float* %1, i64 %17
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds float, float* %1, i64 %18
  %28 = load float, float* %27, align 4
  %29 = fsub float %26, %28
  %30 = or i64 %17, 1
  %31 = getelementptr inbounds float, float* %1, i64 %30
  %32 = load float, float* %31, align 4
  %33 = sub nuw nsw i64 129, %17
  %34 = getelementptr inbounds float, float* %1, i64 %33
  %35 = load float, float* %34, align 4
  %36 = fadd float %32, %35
  %37 = fmul float %22, %29
  %38 = fmul float %24, %36
  %39 = fadd float %37, %38
  %40 = fmul float %22, %36
  %41 = fmul float %24, %29
  %42 = fsub float %40, %41
  %43 = fsub float %26, %39
  store float %43, float* %25, align 4
  %44 = fsub float %42, %32
  store float %44, float* %31, align 4
  %45 = load float, float* %27, align 4
  %46 = fadd float %39, %45
  store float %46, float* %27, align 4
  %47 = load float, float* %34, align 4
  %48 = fsub float %42, %47
  store float %48, float* %34, align 4
  %49 = add nuw nsw i64 %16, 1
  %50 = add nuw nsw i64 %17, 2
  %51 = icmp eq i64 %49, 32
  br i1 %51, label %52, label %15

52:                                               ; preds = %15
  %53 = getelementptr inbounds float, float* %1, i64 65
  %54 = load float, float* %53, align 4
  %55 = fsub float -0.000000e+00, %54
  store float %55, float* %53, align 4
  br label %56

56:                                               ; preds = %12, %52
  tail call void @_ZNK6webrtc8OouraFft10bitrv2_128EPf(%"class.webrtc::OouraFft"* undef, float* %1)
  tail call void @_ZNK6webrtc8OouraFft11cftbsub_128EPf(%"class.webrtc::OouraFft"* %0, float* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6webrtc8OouraFft11rftbsub_128EPf(%"class.webrtc::OouraFft"* nocapture readonly, float*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::OouraFft", %"class.webrtc::OouraFft"* %0, i64 0, i32 0
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @_ZN6webrtc16rftbsub_128_SSE2EPf(float* %1) #5
  br label %52

7:                                                ; preds = %2
  %8 = getelementptr inbounds float, float* %1, i64 1
  %9 = load float, float* %8, align 4
  %10 = fsub float -0.000000e+00, %9
  store float %10, float* %8, align 4
  br label %11

11:                                               ; preds = %11, %7
  %12 = phi i64 [ 1, %7 ], [ %45, %11 ]
  %13 = phi i64 [ 2, %7 ], [ %46, %11 ]
  %14 = sub nuw nsw i64 128, %13
  %15 = sub nuw nsw i64 32, %12
  %16 = getelementptr inbounds float, float* getelementptr inbounds ([64 x float], [64 x float]* @_ZN6webrtcL6rdft_wE, i64 0, i64 32), i64 %15
  %17 = load float, float* %16, align 4
  %18 = fsub float 5.000000e-01, %17
  %19 = getelementptr inbounds float, float* getelementptr inbounds ([64 x float], [64 x float]* @_ZN6webrtcL6rdft_wE, i64 0, i64 32), i64 %12
  %20 = load float, float* %19, align 4
  %21 = getelementptr inbounds float, float* %1, i64 %13
  %22 = load float, float* %21, align 4
  %23 = getelementptr inbounds float, float* %1, i64 %14
  %24 = load float, float* %23, align 4
  %25 = fsub float %22, %24
  %26 = or i64 %13, 1
  %27 = getelementptr inbounds float, float* %1, i64 %26
  %28 = load float, float* %27, align 4
  %29 = sub nuw nsw i64 129, %13
  %30 = getelementptr inbounds float, float* %1, i64 %29
  %31 = load float, float* %30, align 4
  %32 = fadd float %28, %31
  %33 = fmul float %18, %25
  %34 = fmul float %20, %32
  %35 = fadd float %33, %34
  %36 = fmul float %18, %32
  %37 = fmul float %20, %25
  %38 = fsub float %36, %37
  %39 = fsub float %22, %35
  store float %39, float* %21, align 4
  %40 = fsub float %38, %28
  store float %40, float* %27, align 4
  %41 = load float, float* %23, align 4
  %42 = fadd float %35, %41
  store float %42, float* %23, align 4
  %43 = load float, float* %30, align 4
  %44 = fsub float %38, %43
  store float %44, float* %30, align 4
  %45 = add nuw nsw i64 %12, 1
  %46 = add nuw nsw i64 %13, 2
  %47 = icmp eq i64 %45, 32
  br i1 %47, label %48, label %11

48:                                               ; preds = %11
  %49 = getelementptr inbounds float, float* %1, i64 65
  %50 = load float, float* %49, align 4
  %51 = fsub float -0.000000e+00, %50
  store float %51, float* %49, align 4
  br label %52

52:                                               ; preds = %48, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6webrtc8OouraFft11cftbsub_128EPf(%"class.webrtc::OouraFft"* nocapture readonly, float*) local_unnamed_addr #1 align 2 {
  tail call void @_ZNK6webrtc8OouraFft10cft1st_128EPf(%"class.webrtc::OouraFft"* %0, float* %1)
  tail call void @_ZNK6webrtc8OouraFft10cftmdl_128EPf(%"class.webrtc::OouraFft"* %0, float* %1)
  %3 = bitcast float* %1 to <8 x float>*
  %4 = load <8 x float>, <8 x float>* %3, align 4
  %5 = shufflevector <8 x float> %4, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %6 = shufflevector <8 x float> %4, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %7 = getelementptr inbounds float, float* %1, i64 32
  %8 = bitcast float* %7 to <8 x float>*
  %9 = load <8 x float>, <8 x float>* %8, align 4
  %10 = shufflevector <8 x float> %9, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %11 = shufflevector <8 x float> %9, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %12 = fadd <4 x float> %5, %10
  %13 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %6
  %14 = fsub <4 x float> %13, %11
  %15 = fsub <4 x float> %5, %10
  %16 = fsub <4 x float> %11, %6
  %17 = getelementptr inbounds float, float* %1, i64 64
  %18 = bitcast float* %17 to <8 x float>*
  %19 = load <8 x float>, <8 x float>* %18, align 4
  %20 = shufflevector <8 x float> %19, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %21 = shufflevector <8 x float> %19, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %22 = getelementptr inbounds float, float* %1, i64 96
  %23 = bitcast float* %22 to <8 x float>*
  %24 = load <8 x float>, <8 x float>* %23, align 4
  %25 = shufflevector <8 x float> %24, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %26 = shufflevector <8 x float> %24, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %27 = fadd <4 x float> %20, %25
  %28 = fadd <4 x float> %21, %26
  %29 = fsub <4 x float> %20, %25
  %30 = fsub <4 x float> %21, %26
  %31 = fadd <4 x float> %12, %27
  %32 = fsub <4 x float> %14, %28
  %33 = bitcast float* %1 to <8 x float>*
  %34 = shufflevector <4 x float> %31, <4 x float> %32, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %34, <8 x float>* %33, align 4
  %35 = fsub <4 x float> %12, %27
  %36 = fadd <4 x float> %14, %28
  %37 = getelementptr inbounds float, float* %1, i64 64
  %38 = bitcast float* %37 to <8 x float>*
  %39 = shufflevector <4 x float> %35, <4 x float> %36, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %39, <8 x float>* %38, align 4
  %40 = fsub <4 x float> %15, %30
  %41 = fsub <4 x float> %16, %29
  %42 = getelementptr inbounds float, float* %1, i64 32
  %43 = bitcast float* %42 to <8 x float>*
  %44 = shufflevector <4 x float> %40, <4 x float> %41, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %44, <8 x float>* %43, align 4
  %45 = fadd <4 x float> %15, %30
  %46 = fadd <4 x float> %16, %29
  %47 = getelementptr inbounds float, float* %1, i64 96
  %48 = bitcast float* %47 to <8 x float>*
  %49 = shufflevector <4 x float> %45, <4 x float> %46, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %49, <8 x float>* %48, align 4
  %50 = getelementptr inbounds float, float* %1, i64 8
  %51 = bitcast float* %50 to <8 x float>*
  %52 = load <8 x float>, <8 x float>* %51, align 4
  %53 = shufflevector <8 x float> %52, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %54 = shufflevector <8 x float> %52, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %55 = getelementptr inbounds float, float* %1, i64 40
  %56 = bitcast float* %55 to <8 x float>*
  %57 = load <8 x float>, <8 x float>* %56, align 4
  %58 = shufflevector <8 x float> %57, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %59 = shufflevector <8 x float> %57, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %60 = fadd <4 x float> %53, %58
  %61 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %62 = fsub <4 x float> %61, %59
  %63 = fsub <4 x float> %53, %58
  %64 = fsub <4 x float> %59, %54
  %65 = getelementptr inbounds float, float* %1, i64 72
  %66 = bitcast float* %65 to <8 x float>*
  %67 = load <8 x float>, <8 x float>* %66, align 4
  %68 = shufflevector <8 x float> %67, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %69 = shufflevector <8 x float> %67, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %70 = getelementptr inbounds float, float* %1, i64 104
  %71 = bitcast float* %70 to <8 x float>*
  %72 = load <8 x float>, <8 x float>* %71, align 4
  %73 = shufflevector <8 x float> %72, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %74 = shufflevector <8 x float> %72, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %75 = fadd <4 x float> %68, %73
  %76 = fadd <4 x float> %69, %74
  %77 = fsub <4 x float> %68, %73
  %78 = fsub <4 x float> %69, %74
  %79 = fadd <4 x float> %60, %75
  %80 = fsub <4 x float> %62, %76
  %81 = getelementptr inbounds float, float* %1, i64 8
  %82 = bitcast float* %81 to <8 x float>*
  %83 = shufflevector <4 x float> %79, <4 x float> %80, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %83, <8 x float>* %82, align 4
  %84 = fsub <4 x float> %60, %75
  %85 = fadd <4 x float> %62, %76
  %86 = getelementptr inbounds float, float* %1, i64 72
  %87 = bitcast float* %86 to <8 x float>*
  %88 = shufflevector <4 x float> %84, <4 x float> %85, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %88, <8 x float>* %87, align 4
  %89 = fsub <4 x float> %63, %78
  %90 = fsub <4 x float> %64, %77
  %91 = getelementptr inbounds float, float* %1, i64 40
  %92 = bitcast float* %91 to <8 x float>*
  %93 = shufflevector <4 x float> %89, <4 x float> %90, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %93, <8 x float>* %92, align 4
  %94 = fadd <4 x float> %63, %78
  %95 = fadd <4 x float> %64, %77
  %96 = getelementptr inbounds float, float* %1, i64 104
  %97 = bitcast float* %96 to <8 x float>*
  %98 = shufflevector <4 x float> %94, <4 x float> %95, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %98, <8 x float>* %97, align 4
  %99 = getelementptr inbounds float, float* %1, i64 16
  %100 = bitcast float* %99 to <8 x float>*
  %101 = load <8 x float>, <8 x float>* %100, align 4
  %102 = shufflevector <8 x float> %101, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %103 = shufflevector <8 x float> %101, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %104 = getelementptr inbounds float, float* %1, i64 48
  %105 = bitcast float* %104 to <8 x float>*
  %106 = load <8 x float>, <8 x float>* %105, align 4
  %107 = shufflevector <8 x float> %106, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %108 = shufflevector <8 x float> %106, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %109 = fadd <4 x float> %102, %107
  %110 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %103
  %111 = fsub <4 x float> %110, %108
  %112 = fsub <4 x float> %102, %107
  %113 = fsub <4 x float> %108, %103
  %114 = getelementptr inbounds float, float* %1, i64 80
  %115 = bitcast float* %114 to <8 x float>*
  %116 = load <8 x float>, <8 x float>* %115, align 4
  %117 = shufflevector <8 x float> %116, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %118 = shufflevector <8 x float> %116, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %119 = getelementptr inbounds float, float* %1, i64 112
  %120 = bitcast float* %119 to <8 x float>*
  %121 = load <8 x float>, <8 x float>* %120, align 4
  %122 = shufflevector <8 x float> %121, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %123 = shufflevector <8 x float> %121, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %124 = fadd <4 x float> %117, %122
  %125 = fadd <4 x float> %118, %123
  %126 = fsub <4 x float> %117, %122
  %127 = fsub <4 x float> %118, %123
  %128 = fadd <4 x float> %109, %124
  %129 = fsub <4 x float> %111, %125
  %130 = getelementptr inbounds float, float* %1, i64 16
  %131 = bitcast float* %130 to <8 x float>*
  %132 = shufflevector <4 x float> %128, <4 x float> %129, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %132, <8 x float>* %131, align 4
  %133 = fsub <4 x float> %109, %124
  %134 = fadd <4 x float> %111, %125
  %135 = getelementptr inbounds float, float* %1, i64 80
  %136 = bitcast float* %135 to <8 x float>*
  %137 = shufflevector <4 x float> %133, <4 x float> %134, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %137, <8 x float>* %136, align 4
  %138 = fsub <4 x float> %112, %127
  %139 = fsub <4 x float> %113, %126
  %140 = getelementptr inbounds float, float* %1, i64 48
  %141 = bitcast float* %140 to <8 x float>*
  %142 = shufflevector <4 x float> %138, <4 x float> %139, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %142, <8 x float>* %141, align 4
  %143 = fadd <4 x float> %112, %127
  %144 = fadd <4 x float> %113, %126
  %145 = getelementptr inbounds float, float* %1, i64 112
  %146 = bitcast float* %145 to <8 x float>*
  %147 = shufflevector <4 x float> %143, <4 x float> %144, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %147, <8 x float>* %146, align 4
  %148 = getelementptr inbounds float, float* %1, i64 24
  %149 = bitcast float* %148 to <8 x float>*
  %150 = load <8 x float>, <8 x float>* %149, align 4
  %151 = shufflevector <8 x float> %150, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %152 = shufflevector <8 x float> %150, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %153 = getelementptr inbounds float, float* %1, i64 56
  %154 = bitcast float* %153 to <8 x float>*
  %155 = load <8 x float>, <8 x float>* %154, align 4
  %156 = shufflevector <8 x float> %155, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %157 = shufflevector <8 x float> %155, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %158 = fadd <4 x float> %151, %156
  %159 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %152
  %160 = fsub <4 x float> %159, %157
  %161 = fsub <4 x float> %151, %156
  %162 = fsub <4 x float> %157, %152
  %163 = getelementptr inbounds float, float* %1, i64 88
  %164 = bitcast float* %163 to <8 x float>*
  %165 = load <8 x float>, <8 x float>* %164, align 4
  %166 = shufflevector <8 x float> %165, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %167 = shufflevector <8 x float> %165, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %168 = getelementptr inbounds float, float* %1, i64 120
  %169 = bitcast float* %168 to <8 x float>*
  %170 = load <8 x float>, <8 x float>* %169, align 4
  %171 = shufflevector <8 x float> %170, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %172 = shufflevector <8 x float> %170, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %173 = fadd <4 x float> %166, %171
  %174 = fadd <4 x float> %167, %172
  %175 = fsub <4 x float> %166, %171
  %176 = fsub <4 x float> %167, %172
  %177 = fadd <4 x float> %158, %173
  %178 = fsub <4 x float> %160, %174
  %179 = getelementptr inbounds float, float* %1, i64 24
  %180 = bitcast float* %179 to <8 x float>*
  %181 = shufflevector <4 x float> %177, <4 x float> %178, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %181, <8 x float>* %180, align 4
  %182 = fsub <4 x float> %158, %173
  %183 = fadd <4 x float> %160, %174
  %184 = getelementptr inbounds float, float* %1, i64 88
  %185 = bitcast float* %184 to <8 x float>*
  %186 = shufflevector <4 x float> %182, <4 x float> %183, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %186, <8 x float>* %185, align 4
  %187 = fsub <4 x float> %161, %176
  %188 = fsub <4 x float> %162, %175
  %189 = getelementptr inbounds float, float* %1, i64 56
  %190 = bitcast float* %189 to <8 x float>*
  %191 = shufflevector <4 x float> %187, <4 x float> %188, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %191, <8 x float>* %190, align 4
  %192 = fadd <4 x float> %161, %176
  %193 = fadd <4 x float> %162, %175
  %194 = getelementptr inbounds float, float* %1, i64 120
  %195 = bitcast float* %194 to <8 x float>*
  %196 = shufflevector <4 x float> %192, <4 x float> %193, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %196, <8 x float>* %195, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6webrtc8OouraFft10cft1st_128EPf(%"class.webrtc::OouraFft"* nocapture readonly, float*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::OouraFft", %"class.webrtc::OouraFft"* %0, i64 0, i32 0
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @_ZN6webrtc15cft1st_128_SSE2EPf(float* %1) #5
  br label %240

7:                                                ; preds = %2
  %8 = bitcast float* %1 to <4 x float>*
  %9 = load <4 x float>, <4 x float>* %8, align 4
  %10 = shufflevector <4 x float> %9, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %11 = fadd <4 x float> %10, %9
  %12 = fsub <4 x float> %10, %9
  %13 = shufflevector <4 x float> %11, <4 x float> %12, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %14 = getelementptr inbounds float, float* %1, i64 4
  %15 = getelementptr inbounds float, float* %1, i64 6
  %16 = bitcast float* %14 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 4
  %18 = shufflevector <2 x float> %17, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
  %19 = bitcast float* %15 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = shufflevector <2 x float> %20, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
  %22 = fadd <4 x float> %18, %21
  %23 = fsub <4 x float> %18, %21
  %24 = shufflevector <4 x float> %22, <4 x float> %23, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %25 = fadd <4 x float> %13, %24
  %26 = fsub <4 x float> %13, %24
  %27 = shufflevector <4 x float> %25, <4 x float> %26, <4 x i32> <i32 0, i32 1, i32 6, i32 3>
  %28 = bitcast float* %1 to <4 x float>*
  store <4 x float> %27, <4 x float>* %28, align 4
  %29 = fsub <4 x float> %13, %24
  %30 = fadd <4 x float> %13, %24
  %31 = shufflevector <4 x float> %29, <4 x float> %30, <4 x i32> <i32 0, i32 1, i32 6, i32 3>
  %32 = bitcast float* %14 to <4 x float>*
  store <4 x float> %31, <4 x float>* %32, align 4
  %33 = getelementptr inbounds float, float* %1, i64 8
  %34 = load float, float* %33, align 4
  %35 = getelementptr inbounds float, float* %1, i64 10
  %36 = load float, float* %35, align 4
  %37 = fadd float %34, %36
  %38 = getelementptr inbounds float, float* %1, i64 9
  %39 = load float, float* %38, align 4
  %40 = getelementptr inbounds float, float* %1, i64 11
  %41 = load float, float* %40, align 4
  %42 = fadd float %39, %41
  %43 = fsub float %34, %36
  %44 = fsub float %39, %41
  %45 = getelementptr inbounds float, float* %1, i64 12
  %46 = load float, float* %45, align 4
  %47 = getelementptr inbounds float, float* %1, i64 14
  %48 = load float, float* %47, align 4
  %49 = fadd float %46, %48
  %50 = getelementptr inbounds float, float* %1, i64 13
  %51 = load float, float* %50, align 4
  %52 = getelementptr inbounds float, float* %1, i64 15
  %53 = load float, float* %52, align 4
  %54 = fadd float %51, %53
  %55 = fsub float %46, %48
  %56 = fsub float %51, %53
  %57 = fadd float %37, %49
  store float %57, float* %33, align 4
  %58 = fadd float %42, %54
  store float %58, float* %38, align 4
  %59 = fsub float %54, %42
  store float %59, float* %45, align 4
  %60 = fsub float %37, %49
  store float %60, float* %50, align 4
  %61 = fsub float %43, %56
  %62 = fadd float %44, %55
  %63 = fsub float %61, %62
  %64 = fmul float %63, 0x3FE6A09E60000000
  store float %64, float* %35, align 4
  %65 = fadd float %62, %61
  %66 = fmul float %65, 0x3FE6A09E60000000
  store float %66, float* %40, align 4
  %67 = fadd float %43, %56
  %68 = fsub float %55, %44
  %69 = fsub float %68, %67
  %70 = fmul float %69, 0x3FE6A09E60000000
  store float %70, float* %47, align 4
  %71 = fadd float %68, %67
  %72 = fmul float %71, 0x3FE6A09E60000000
  store float %72, float* %52, align 4
  br label %73

73:                                               ; preds = %73, %7
  %74 = phi i64 [ 16, %7 ], [ %238, %73 ]
  %75 = phi i64 [ 0, %7 ], [ %76, %73 ]
  %76 = add nuw nsw i64 %75, 2
  %77 = shl nuw nsw i64 %76, 1
  %78 = getelementptr inbounds [64 x float], [64 x float]* @_ZN6webrtcL6rdft_wE, i64 0, i64 %76
  %79 = load float, float* %78, align 8
  %80 = add nuw nsw i64 %75, 3
  %81 = getelementptr inbounds [64 x float], [64 x float]* @_ZN6webrtcL6rdft_wE, i64 0, i64 %80
  %82 = load float, float* %81, align 4
  %83 = getelementptr inbounds [64 x float], [64 x float]* @_ZN6webrtcL6rdft_wE, i64 0, i64 %77
  %84 = load float, float* %83, align 16
  %85 = or i64 %77, 1
  %86 = getelementptr inbounds [64 x float], [64 x float]* @_ZN6webrtcL6rdft_wE, i64 0, i64 %85
  %87 = load float, float* %86, align 4
  %88 = getelementptr inbounds [16 x float], [16 x float]* @_ZN6webrtcL16rdft_wk3ri_firstE, i64 0, i64 %76
  %89 = load float, float* %88, align 8
  %90 = getelementptr inbounds [16 x float], [16 x float]* @_ZN6webrtcL16rdft_wk3ri_firstE, i64 0, i64 %80
  %91 = load float, float* %90, align 4
  %92 = getelementptr inbounds float, float* %1, i64 %74
  %93 = load float, float* %92, align 4
  %94 = or i64 %74, 2
  %95 = getelementptr inbounds float, float* %1, i64 %94
  %96 = load float, float* %95, align 4
  %97 = fadd float %93, %96
  %98 = or i64 %74, 1
  %99 = getelementptr inbounds float, float* %1, i64 %98
  %100 = load float, float* %99, align 4
  %101 = or i64 %74, 3
  %102 = getelementptr inbounds float, float* %1, i64 %101
  %103 = load float, float* %102, align 4
  %104 = fadd float %100, %103
  %105 = fsub float %93, %96
  %106 = fsub float %100, %103
  %107 = or i64 %74, 4
  %108 = getelementptr inbounds float, float* %1, i64 %107
  %109 = load float, float* %108, align 4
  %110 = or i64 %74, 6
  %111 = getelementptr inbounds float, float* %1, i64 %110
  %112 = load float, float* %111, align 4
  %113 = fadd float %109, %112
  %114 = or i64 %74, 5
  %115 = getelementptr inbounds float, float* %1, i64 %114
  %116 = load float, float* %115, align 4
  %117 = or i64 %74, 7
  %118 = getelementptr inbounds float, float* %1, i64 %117
  %119 = load float, float* %118, align 4
  %120 = fadd float %116, %119
  %121 = fsub float %109, %112
  %122 = fsub float %116, %119
  %123 = fadd float %97, %113
  store float %123, float* %92, align 4
  %124 = fadd float %104, %120
  store float %124, float* %99, align 4
  %125 = fsub float %97, %113
  %126 = fsub float %104, %120
  %127 = fsub float %105, %122
  %128 = fadd float %106, %121
  %129 = insertelement <4 x float> undef, float %84, i32 0
  %130 = insertelement <4 x float> %129, float %84, i32 1
  %131 = insertelement <4 x float> %130, float %79, i32 2
  %132 = insertelement <4 x float> %131, float %82, i32 3
  %133 = insertelement <4 x float> undef, float %127, i32 0
  %134 = insertelement <4 x float> %133, float %128, i32 1
  %135 = insertelement <4 x float> %134, float %125, i32 2
  %136 = insertelement <4 x float> %135, float %125, i32 3
  %137 = fmul <4 x float> %132, %136
  %138 = insertelement <4 x float> undef, float %87, i32 0
  %139 = insertelement <4 x float> %138, float %87, i32 1
  %140 = insertelement <4 x float> %139, float %82, i32 2
  %141 = insertelement <4 x float> %140, float %79, i32 3
  %142 = insertelement <4 x float> undef, float %128, i32 0
  %143 = insertelement <4 x float> %142, float %127, i32 1
  %144 = insertelement <4 x float> %143, float %126, i32 2
  %145 = insertelement <4 x float> %144, float %126, i32 3
  %146 = fmul <4 x float> %141, %145
  %147 = fsub <4 x float> %137, %146
  %148 = fadd <4 x float> %137, %146
  %149 = shufflevector <4 x float> %147, <4 x float> %148, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %150 = bitcast float* %95 to <4 x float>*
  store <4 x float> %149, <4 x float>* %150, align 4
  %151 = fadd float %105, %122
  %152 = fsub float %106, %121
  %153 = fmul float %89, %151
  %154 = fmul float %91, %152
  %155 = fsub float %153, %154
  store float %155, float* %111, align 4
  %156 = fmul float %89, %152
  %157 = fmul float %91, %151
  %158 = fadd float %156, %157
  store float %158, float* %118, align 4
  %159 = or i64 %77, 2
  %160 = getelementptr inbounds [64 x float], [64 x float]* @_ZN6webrtcL6rdft_wE, i64 0, i64 %159
  %161 = load float, float* %160, align 8
  %162 = or i64 %77, 3
  %163 = getelementptr inbounds [64 x float], [64 x float]* @_ZN6webrtcL6rdft_wE, i64 0, i64 %162
  %164 = load float, float* %163, align 4
  %165 = getelementptr inbounds [16 x float], [16 x float]* @_ZN6webrtcL17rdft_wk3ri_secondE, i64 0, i64 %76
  %166 = load float, float* %165, align 8
  %167 = getelementptr inbounds [16 x float], [16 x float]* @_ZN6webrtcL17rdft_wk3ri_secondE, i64 0, i64 %80
  %168 = load float, float* %167, align 4
  %169 = or i64 %74, 8
  %170 = getelementptr inbounds float, float* %1, i64 %169
  %171 = load float, float* %170, align 4
  %172 = or i64 %74, 10
  %173 = getelementptr inbounds float, float* %1, i64 %172
  %174 = load float, float* %173, align 4
  %175 = fadd float %171, %174
  %176 = or i64 %74, 9
  %177 = getelementptr inbounds float, float* %1, i64 %176
  %178 = load float, float* %177, align 4
  %179 = or i64 %74, 11
  %180 = getelementptr inbounds float, float* %1, i64 %179
  %181 = load float, float* %180, align 4
  %182 = fadd float %178, %181
  %183 = fsub float %171, %174
  %184 = fsub float %178, %181
  %185 = or i64 %74, 12
  %186 = getelementptr inbounds float, float* %1, i64 %185
  %187 = load float, float* %186, align 4
  %188 = or i64 %74, 14
  %189 = getelementptr inbounds float, float* %1, i64 %188
  %190 = load float, float* %189, align 4
  %191 = fadd float %187, %190
  %192 = or i64 %74, 13
  %193 = getelementptr inbounds float, float* %1, i64 %192
  %194 = load float, float* %193, align 4
  %195 = or i64 %74, 15
  %196 = getelementptr inbounds float, float* %1, i64 %195
  %197 = load float, float* %196, align 4
  %198 = fadd float %194, %197
  %199 = fsub float %187, %190
  %200 = fsub float %194, %197
  %201 = fadd float %175, %191
  store float %201, float* %170, align 4
  %202 = fadd float %182, %198
  store float %202, float* %177, align 4
  %203 = fsub float %175, %191
  %204 = fsub float %182, %198
  %205 = fsub float -0.000000e+00, %82
  %206 = fsub float %183, %200
  %207 = fadd float %184, %199
  %208 = insertelement <4 x float> undef, float %161, i32 0
  %209 = insertelement <4 x float> %208, float %161, i32 1
  %210 = insertelement <4 x float> %209, float %203, i32 2
  %211 = insertelement <4 x float> %210, float %79, i32 3
  %212 = insertelement <4 x float> undef, float %206, i32 0
  %213 = insertelement <4 x float> %212, float %207, i32 1
  %214 = insertelement <4 x float> %213, float %205, i32 2
  %215 = insertelement <4 x float> %214, float %203, i32 3
  %216 = fmul <4 x float> %211, %215
  %217 = insertelement <4 x float> undef, float %164, i32 0
  %218 = insertelement <4 x float> %217, float %164, i32 1
  %219 = insertelement <4 x float> %218, float %79, i32 2
  %220 = insertelement <4 x float> %219, float %204, i32 3
  %221 = insertelement <4 x float> undef, float %207, i32 0
  %222 = insertelement <4 x float> %221, float %206, i32 1
  %223 = insertelement <4 x float> %222, float %204, i32 2
  %224 = insertelement <4 x float> %223, float %205, i32 3
  %225 = fmul <4 x float> %220, %224
  %226 = fsub <4 x float> %216, %225
  %227 = fadd <4 x float> %216, %225
  %228 = shufflevector <4 x float> %226, <4 x float> %227, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %229 = bitcast float* %173 to <4 x float>*
  store <4 x float> %228, <4 x float>* %229, align 4
  %230 = fadd float %183, %200
  %231 = fsub float %184, %199
  %232 = fmul float %166, %230
  %233 = fmul float %168, %231
  %234 = fsub float %232, %233
  store float %234, float* %189, align 4
  %235 = fmul float %166, %231
  %236 = fmul float %168, %230
  %237 = fadd float %235, %236
  store float %237, float* %196, align 4
  %238 = add nuw nsw i64 %74, 16
  %239 = icmp ult i64 %238, 128
  br i1 %239, label %73, label %240

240:                                              ; preds = %73, %6
  ret void
}

declare void @_ZN6webrtc15cft1st_128_SSE2EPf(float*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6webrtc8OouraFft10cftmdl_128EPf(%"class.webrtc::OouraFft"* nocapture readonly, float*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::OouraFft", %"class.webrtc::OouraFft"* %0, i64 0, i32 0
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @_ZN6webrtc15cftmdl_128_SSE2EPf(float* %1) #5
  br label %250

7:                                                ; preds = %2
  %8 = getelementptr inbounds float, float* %1, i64 8
  %9 = bitcast float* %1 to <4 x float>*
  %10 = load <4 x float>, <4 x float>* %9, align 4
  %11 = bitcast float* %8 to <4 x float>*
  %12 = load <4 x float>, <4 x float>* %11, align 4
  %13 = getelementptr inbounds float, float* %1, i64 16
  %14 = getelementptr inbounds float, float* %1, i64 24
  %15 = bitcast float* %13 to <4 x float>*
  %16 = load <4 x float>, <4 x float>* %15, align 4
  %17 = bitcast float* %14 to <4 x float>*
  %18 = load <4 x float>, <4 x float>* %17, align 4
  %19 = fadd <4 x float> %10, %12
  %20 = fadd <4 x float> %16, %18
  %21 = fsub <4 x float> %10, %12
  %22 = fsub <4 x float> %16, %18
  %23 = shufflevector <4 x float> %22, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %24 = fadd <4 x float> %19, %20
  %25 = bitcast float* %1 to <4 x float>*
  store <4 x float> %24, <4 x float>* %25, align 4
  %26 = fsub <4 x float> %19, %20
  %27 = bitcast float* %13 to <4 x float>*
  store <4 x float> %26, <4 x float>* %27, align 4
  %28 = fsub <4 x float> %21, %23
  %29 = fadd <4 x float> %21, %23
  %30 = shufflevector <4 x float> %28, <4 x float> %29, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %31 = bitcast float* %8 to <4 x float>*
  store <4 x float> %30, <4 x float>* %31, align 4
  %32 = fadd <4 x float> %21, %23
  %33 = fsub <4 x float> %21, %23
  %34 = shufflevector <4 x float> %32, <4 x float> %33, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %35 = bitcast float* %14 to <4 x float>*
  store <4 x float> %34, <4 x float>* %35, align 4
  %36 = getelementptr inbounds float, float* %1, i64 4
  %37 = getelementptr inbounds float, float* %1, i64 12
  %38 = bitcast float* %36 to <4 x float>*
  %39 = load <4 x float>, <4 x float>* %38, align 4
  %40 = bitcast float* %37 to <4 x float>*
  %41 = load <4 x float>, <4 x float>* %40, align 4
  %42 = getelementptr inbounds float, float* %1, i64 20
  %43 = getelementptr inbounds float, float* %1, i64 28
  %44 = bitcast float* %42 to <4 x float>*
  %45 = load <4 x float>, <4 x float>* %44, align 4
  %46 = bitcast float* %43 to <4 x float>*
  %47 = load <4 x float>, <4 x float>* %46, align 4
  %48 = fadd <4 x float> %39, %41
  %49 = fadd <4 x float> %45, %47
  %50 = fsub <4 x float> %39, %41
  %51 = fsub <4 x float> %45, %47
  %52 = shufflevector <4 x float> %51, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %53 = fadd <4 x float> %48, %49
  %54 = bitcast float* %36 to <4 x float>*
  store <4 x float> %53, <4 x float>* %54, align 4
  %55 = fsub <4 x float> %48, %49
  %56 = bitcast float* %42 to <4 x float>*
  store <4 x float> %55, <4 x float>* %56, align 4
  %57 = fsub <4 x float> %50, %52
  %58 = fadd <4 x float> %50, %52
  %59 = shufflevector <4 x float> %57, <4 x float> %58, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %60 = bitcast float* %37 to <4 x float>*
  store <4 x float> %59, <4 x float>* %60, align 4
  %61 = fadd <4 x float> %50, %52
  %62 = fsub <4 x float> %50, %52
  %63 = shufflevector <4 x float> %61, <4 x float> %62, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %64 = bitcast float* %43 to <4 x float>*
  store <4 x float> %63, <4 x float>* %64, align 4
  %65 = getelementptr float, float* %1, i64 48
  %66 = bitcast float* %65 to <8 x float>*
  %67 = load <8 x float>, <8 x float>* %66, align 4
  %68 = getelementptr inbounds float, float* %1, i64 32
  %69 = bitcast float* %68 to <8 x float>*
  %70 = load <8 x float>, <8 x float>* %69, align 4
  %71 = shufflevector <8 x float> %70, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %72 = shufflevector <8 x float> %70, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %73 = getelementptr inbounds float, float* %1, i64 40
  %74 = bitcast float* %73 to <8 x float>*
  %75 = load <8 x float>, <8 x float>* %74, align 4
  %76 = shufflevector <8 x float> %75, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %77 = shufflevector <8 x float> %75, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %78 = fadd <4 x float> %71, %76
  %79 = fadd <4 x float> %72, %77
  %80 = fsub <4 x float> %71, %76
  %81 = fsub <4 x float> %72, %77
  %82 = shufflevector <8 x float> %67, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %83 = shufflevector <8 x float> %67, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %84 = getelementptr inbounds float, float* %1, i64 56
  %85 = bitcast float* %84 to <8 x float>*
  %86 = load <8 x float>, <8 x float>* %85, align 4
  %87 = shufflevector <8 x float> %86, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %88 = shufflevector <8 x float> %86, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %89 = fadd <4 x float> %82, %87
  %90 = fadd <4 x float> %83, %88
  %91 = fsub <4 x float> %82, %87
  %92 = fsub <4 x float> %83, %88
  %93 = fadd <4 x float> %78, %89
  %94 = fadd <4 x float> %79, %90
  %95 = getelementptr inbounds float, float* %1, i64 32
  %96 = bitcast float* %95 to <8 x float>*
  %97 = shufflevector <4 x float> %93, <4 x float> %94, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %97, <8 x float>* %96, align 4
  %98 = fsub <4 x float> %90, %79
  %99 = fsub <4 x float> %78, %89
  %100 = getelementptr inbounds float, float* %1, i64 48
  %101 = bitcast float* %100 to <8 x float>*
  %102 = shufflevector <4 x float> %98, <4 x float> %99, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %102, <8 x float>* %101, align 4
  %103 = fsub <4 x float> %80, %92
  %104 = fadd <4 x float> %81, %91
  %105 = fsub <4 x float> %103, %104
  %106 = fmul <4 x float> %105, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %107 = fadd <4 x float> %104, %103
  %108 = fmul <4 x float> %107, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %109 = getelementptr inbounds float, float* %1, i64 40
  %110 = bitcast float* %109 to <8 x float>*
  %111 = shufflevector <4 x float> %106, <4 x float> %108, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %111, <8 x float>* %110, align 4
  %112 = fadd <4 x float> %80, %92
  %113 = fsub <4 x float> %91, %81
  %114 = fsub <4 x float> %113, %112
  %115 = fmul <4 x float> %114, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %116 = fadd <4 x float> %113, %112
  %117 = fmul <4 x float> %116, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %118 = getelementptr inbounds float, float* %1, i64 56
  %119 = bitcast float* %118 to <8 x float>*
  %120 = shufflevector <4 x float> %115, <4 x float> %117, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %120, <8 x float>* %119, align 4
  %121 = getelementptr float, float* %1, i64 80
  %122 = bitcast float* %121 to <8 x float>*
  %123 = load <8 x float>, <8 x float>* %122, align 4
  %124 = getelementptr inbounds float, float* %1, i64 64
  %125 = bitcast float* %124 to <8 x float>*
  %126 = load <8 x float>, <8 x float>* %125, align 4
  %127 = shufflevector <8 x float> %126, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %128 = shufflevector <8 x float> %126, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %129 = getelementptr inbounds float, float* %1, i64 72
  %130 = bitcast float* %129 to <8 x float>*
  %131 = load <8 x float>, <8 x float>* %130, align 4
  %132 = shufflevector <8 x float> %131, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %133 = shufflevector <8 x float> %131, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %134 = fadd <4 x float> %127, %132
  %135 = fadd <4 x float> %128, %133
  %136 = fsub <4 x float> %127, %132
  %137 = fsub <4 x float> %128, %133
  %138 = shufflevector <8 x float> %123, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %139 = shufflevector <8 x float> %123, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %140 = getelementptr inbounds float, float* %1, i64 88
  %141 = bitcast float* %140 to <8 x float>*
  %142 = load <8 x float>, <8 x float>* %141, align 4
  %143 = shufflevector <8 x float> %142, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %144 = shufflevector <8 x float> %142, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %145 = fadd <4 x float> %138, %143
  %146 = fadd <4 x float> %139, %144
  %147 = fsub <4 x float> %138, %143
  %148 = fsub <4 x float> %139, %144
  %149 = fadd <4 x float> %134, %145
  %150 = fadd <4 x float> %135, %146
  %151 = getelementptr inbounds float, float* %1, i64 64
  %152 = bitcast float* %151 to <8 x float>*
  %153 = shufflevector <4 x float> %149, <4 x float> %150, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %153, <8 x float>* %152, align 4
  %154 = fsub <4 x float> %134, %145
  %155 = fsub <4 x float> %135, %146
  %156 = fmul <4 x float> %154, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %157 = fmul <4 x float> %155, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %158 = fsub <4 x float> %156, %157
  %159 = fadd <4 x float> %156, %157
  %160 = getelementptr inbounds float, float* %1, i64 80
  %161 = bitcast float* %160 to <8 x float>*
  %162 = shufflevector <4 x float> %158, <4 x float> %159, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %162, <8 x float>* %161, align 4
  %163 = fsub <4 x float> %136, %148
  %164 = fadd <4 x float> %137, %147
  %165 = fmul <4 x float> %163, <float 0x3FED906BE0000000, float 0x3FED906BE0000000, float 0x3FED906BE0000000, float 0x3FED906BE0000000>
  %166 = fmul <4 x float> %164, <float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000>
  %167 = fsub <4 x float> %165, %166
  %168 = fmul <4 x float> %164, <float 0x3FED906BE0000000, float 0x3FED906BE0000000, float 0x3FED906BE0000000, float 0x3FED906BE0000000>
  %169 = fmul <4 x float> %163, <float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000>
  %170 = fadd <4 x float> %168, %169
  %171 = getelementptr inbounds float, float* %1, i64 72
  %172 = bitcast float* %171 to <8 x float>*
  %173 = shufflevector <4 x float> %167, <4 x float> %170, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %173, <8 x float>* %172, align 4
  %174 = fadd <4 x float> %136, %148
  %175 = fsub <4 x float> %137, %147
  %176 = fmul <4 x float> %174, <float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000>
  %177 = fmul <4 x float> %175, <float 0x3FED906BE0000000, float 0x3FED906BE0000000, float 0x3FED906BE0000000, float 0x3FED906BE0000000>
  %178 = fsub <4 x float> %176, %177
  %179 = fmul <4 x float> %175, <float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000>
  %180 = fmul <4 x float> %174, <float 0x3FED906BE0000000, float 0x3FED906BE0000000, float 0x3FED906BE0000000, float 0x3FED906BE0000000>
  %181 = fadd <4 x float> %179, %180
  %182 = getelementptr inbounds float, float* %1, i64 88
  %183 = bitcast float* %182 to <8 x float>*
  %184 = shufflevector <4 x float> %178, <4 x float> %181, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %184, <8 x float>* %183, align 4
  %185 = getelementptr float, float* %1, i64 112
  %186 = bitcast float* %185 to <8 x float>*
  %187 = load <8 x float>, <8 x float>* %186, align 4
  %188 = getelementptr inbounds float, float* %1, i64 96
  %189 = bitcast float* %188 to <8 x float>*
  %190 = load <8 x float>, <8 x float>* %189, align 4
  %191 = shufflevector <8 x float> %190, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %192 = shufflevector <8 x float> %190, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %193 = getelementptr inbounds float, float* %1, i64 104
  %194 = bitcast float* %193 to <8 x float>*
  %195 = load <8 x float>, <8 x float>* %194, align 4
  %196 = shufflevector <8 x float> %195, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %197 = shufflevector <8 x float> %195, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %198 = fadd <4 x float> %191, %196
  %199 = fadd <4 x float> %192, %197
  %200 = fsub <4 x float> %191, %196
  %201 = fsub <4 x float> %192, %197
  %202 = shufflevector <8 x float> %187, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %203 = shufflevector <8 x float> %187, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %204 = getelementptr inbounds float, float* %1, i64 120
  %205 = bitcast float* %204 to <8 x float>*
  %206 = load <8 x float>, <8 x float>* %205, align 4
  %207 = shufflevector <8 x float> %206, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %208 = shufflevector <8 x float> %206, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %209 = fadd <4 x float> %202, %207
  %210 = fadd <4 x float> %203, %208
  %211 = fsub <4 x float> %202, %207
  %212 = fsub <4 x float> %203, %208
  %213 = fadd <4 x float> %198, %209
  %214 = fadd <4 x float> %199, %210
  %215 = getelementptr inbounds float, float* %1, i64 96
  %216 = bitcast float* %215 to <8 x float>*
  %217 = shufflevector <4 x float> %213, <4 x float> %214, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %217, <8 x float>* %216, align 4
  %218 = fsub <4 x float> %198, %209
  %219 = fsub <4 x float> %199, %210
  %220 = fmul <4 x float> %218, <float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000>
  %221 = fmul <4 x float> %219, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %222 = fsub <4 x float> %220, %221
  %223 = fmul <4 x float> %218, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %224 = fsub <4 x float> %223, %221
  %225 = getelementptr inbounds float, float* %1, i64 112
  %226 = bitcast float* %225 to <8 x float>*
  %227 = shufflevector <4 x float> %222, <4 x float> %224, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %227, <8 x float>* %226, align 4
  %228 = fsub <4 x float> %200, %212
  %229 = fadd <4 x float> %201, %211
  %230 = fmul <4 x float> %228, <float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000>
  %231 = fmul <4 x float> %229, <float 0x3FED906BE0000000, float 0x3FED906BE0000000, float 0x3FED906BE0000000, float 0x3FED906BE0000000>
  %232 = fsub <4 x float> %230, %231
  %233 = fmul <4 x float> %229, <float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000>
  %234 = fmul <4 x float> %228, <float 0x3FED906BE0000000, float 0x3FED906BE0000000, float 0x3FED906BE0000000, float 0x3FED906BE0000000>
  %235 = fadd <4 x float> %233, %234
  %236 = getelementptr inbounds float, float* %1, i64 104
  %237 = bitcast float* %236 to <8 x float>*
  %238 = shufflevector <4 x float> %232, <4 x float> %235, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %238, <8 x float>* %237, align 4
  %239 = fadd <4 x float> %200, %212
  %240 = fsub <4 x float> %201, %211
  %241 = fmul <4 x float> %239, <float 0x3FED906BE0000000, float 0x3FED906BE0000000, float 0x3FED906BE0000000, float 0x3FED906BE0000000>
  %242 = fmul <4 x float> %240, <float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000>
  %243 = fsub <4 x float> %242, %241
  %244 = fmul <4 x float> %240, <float 0x3FED906BE0000000, float 0x3FED906BE0000000, float 0x3FED906BE0000000, float 0x3FED906BE0000000>
  %245 = fmul <4 x float> %239, <float 0xBFD87DE2C0000000, float 0xBFD87DE2C0000000, float 0xBFD87DE2C0000000, float 0xBFD87DE2C0000000>
  %246 = fsub <4 x float> %245, %244
  %247 = getelementptr inbounds float, float* %1, i64 120
  %248 = bitcast float* %247 to <8 x float>*
  %249 = shufflevector <4 x float> %243, <4 x float> %246, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %249, <8 x float>* %248, align 4
  br label %250

250:                                              ; preds = %7, %6
  ret void
}

declare void @_ZN6webrtc15cftmdl_128_SSE2EPf(float*) local_unnamed_addr #2

declare void @_ZN6webrtc16rftfsub_128_SSE2EPf(float*) local_unnamed_addr #2

declare void @_ZN6webrtc16rftbsub_128_SSE2EPf(float*) local_unnamed_addr #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
