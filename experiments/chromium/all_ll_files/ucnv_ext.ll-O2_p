; ModuleID = '../../third_party/icu/source/common/ucnv_ext.cpp'
source_filename = "../../third_party/icu/source/common/ucnv_ext.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.UConverter = type { void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)*, void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)*, i8*, i8*, i8*, i8*, %struct.UConverterSharedData*, i32, i8, i8, i8, i8, i8, [7 x i8], i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i8], [32 x i8], [2 x i16], [2 x i16], [32 x i16], i32, [19 x i16], [31 x i8], i8, i8, i8, i32 }
%struct.UConverterFromUnicodeArgs = type { i16, i8, %struct.UConverter*, i16*, i16*, i8*, i8*, i32* }
%struct.UConverterToUnicodeArgs = type { i16, i8, %struct.UConverter*, i8*, i8*, i16*, i16*, i32* }
%struct.UConverterSharedData = type { i32, i32, i8*, %struct.UConverterStaticData*, i8, i8, %struct.UConverterImpl*, i32, %struct.UConverterMBCSTable }
%struct.UConverterStaticData = type { i32, [60 x i8], i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] }
%struct.UConverterImpl = type { i32, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)*, void (%struct.UConverterSharedData*)*, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)*, void (%struct.UConverter*)*, void (%struct.UConverter*, i32)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, i32*)*, i32 (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverter*, i8*, i32*)*, i8* (%struct.UConverter*)*, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)*, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)*, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* }
%struct.UConverterLoadArgs = type { i32, i32, i8, i8, i16, i32, i8*, i8*, i8* }
%struct.USetAdder = type { %struct.USet*, void (%struct.USet*, i32)*, void (%struct.USet*, i32, i32)*, void (%struct.USet*, i16*, i32)*, void (%struct.USet*, i32)*, void (%struct.USet*, i32, i32)* }
%struct.USet = type opaque
%struct.UConverterMBCSTable = type { i8, i8, i8, i32, [256 x i32]*, [256 x i32]*, i16*, %struct._MBCSToUFallback*, i16*, i16*, [64 x i16], i8*, i8*, i32, i8, i8, i8, i16, i32, i8*, i8*, %struct.UConverterSharedData*, i32* }
%struct._MBCSToUFallback = type { i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden signext i8 @ucnv_extInitialMatchToU_69(%struct.UConverter*, i32*, i32, i8** nocapture, i8*, i16**, i16*, i32**, i32, i8 signext, i32*) local_unnamed_addr #0 {
  %12 = bitcast %struct.UConverter* %0 to i8*
  %13 = alloca i32, align 4
  %14 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #4
  store i32 0, i32* %13, align 4
  %15 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 6
  %16 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %15, align 8
  %17 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %16, i64 0, i32 8, i32 14
  %18 = load i8, i8* %17, align 4
  %19 = icmp eq i8 %18, 12
  br i1 %19, label %20, label %24

20:                                               ; preds = %11
  %21 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 15
  %22 = load i32, i32* %21, align 4
  %23 = trunc i32 %22 to i8
  br label %27

24:                                               ; preds = %11
  %25 = icmp eq i8 %18, -37
  %26 = select i1 %25, i8 1, i8 -1
  br label %27

27:                                               ; preds = %24, %20
  %28 = phi i8 [ %23, %20 ], [ %26, %24 ]
  %29 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 13, i64 0
  %30 = load i8*, i8** %3, align 8
  %31 = ptrtoint i8* %4 to i64
  %32 = ptrtoint i8* %30 to i64
  %33 = sub i64 %31, %32
  %34 = trunc i64 %33 to i32
  %35 = call fastcc i32 @_ZL16ucnv_extMatchToUPKiaPKciS2_iPjaa(i32* %1, i8 signext %28, i8* %29, i32 %2, i8* %30, i32 %34, i32* nonnull %13, i8 signext %9)
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %37, label %58

37:                                               ; preds = %27
  %38 = sub nsw i32 %35, %2
  %39 = load i8*, i8** %3, align 8
  %40 = sext i32 %38 to i64
  %41 = getelementptr inbounds i8, i8* %39, i64 %40
  store i8* %41, i8** %3, align 8
  %42 = load i32, i32* %13, align 4
  %43 = icmp ult i32 %42, 3145728
  br i1 %43, label %44, label %46

44:                                               ; preds = %37
  %45 = add nsw i32 %42, -2031616
  tail call void @ucnv_toUWriteCodePoint_69(%struct.UConverter* %0, i32 %45, i16** %5, i16* %6, i32** %7, i32 %8, i32* %10) #4
  br label %310

46:                                               ; preds = %37
  %47 = bitcast i32* %1 to i8*
  %48 = getelementptr inbounds i32, i32* %1, i64 3
  %49 = load i32, i32* %48, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %47, i64 %50
  %52 = bitcast i8* %51 to i16*
  %53 = and i32 %42, 262143
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds i16, i16* %52, i64 %54
  %56 = lshr i32 %42, 18
  %57 = add nsw i32 %56, -12
  tail call void @ucnv_toUWriteUChars_69(%struct.UConverter* %0, i16* %55, i32 %57, i16** %5, i16* %6, i32** %7, i32 %8, i32* %10) #4
  br label %310

58:                                               ; preds = %27
  %59 = icmp slt i32 %35, 0
  br i1 %59, label %60, label %310

60:                                               ; preds = %58
  %61 = trunc i32 %2 to i8
  %62 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 36
  store i8 %61, i8* %62, align 1
  %63 = icmp sgt i32 %2, 0
  br i1 %63, label %64, label %157

64:                                               ; preds = %60
  %65 = zext i32 %2 to i64
  %66 = icmp ult i32 %2, 16
  br i1 %66, label %146, label %67

67:                                               ; preds = %64
  %68 = and i64 %65, 4294967280
  %69 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 13, i64 %68
  %70 = add nsw i64 %68, -16
  %71 = lshr exact i64 %70, 4
  %72 = add nuw nsw i64 %71, 1
  %73 = and i64 %72, 7
  %74 = icmp ult i64 %70, 112
  br i1 %74, label %130, label %75

75:                                               ; preds = %67
  %76 = sub nsw i64 %72, %73
  br label %77

77:                                               ; preds = %77, %75
  %78 = phi i64 [ 0, %75 ], [ %127, %77 ]
  %79 = phi i64 [ %76, %75 ], [ %128, %77 ]
  %80 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 13, i64 %78
  %81 = bitcast i8* %80 to <16 x i8>*
  %82 = load <16 x i8>, <16 x i8>* %81, align 1
  %83 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %78
  %84 = bitcast i8* %83 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %84, align 1
  %85 = or i64 %78, 16
  %86 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 13, i64 %85
  %87 = bitcast i8* %86 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1
  %89 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %85
  %90 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %88, <16 x i8>* %90, align 1
  %91 = or i64 %78, 32
  %92 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 13, i64 %91
  %93 = bitcast i8* %92 to <16 x i8>*
  %94 = load <16 x i8>, <16 x i8>* %93, align 1
  %95 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %91
  %96 = bitcast i8* %95 to <16 x i8>*
  store <16 x i8> %94, <16 x i8>* %96, align 1
  %97 = or i64 %78, 48
  %98 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 13, i64 %97
  %99 = bitcast i8* %98 to <16 x i8>*
  %100 = load <16 x i8>, <16 x i8>* %99, align 1
  %101 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %97
  %102 = bitcast i8* %101 to <16 x i8>*
  store <16 x i8> %100, <16 x i8>* %102, align 1
  %103 = or i64 %78, 64
  %104 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 13, i64 %103
  %105 = bitcast i8* %104 to <16 x i8>*
  %106 = load <16 x i8>, <16 x i8>* %105, align 1
  %107 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %103
  %108 = bitcast i8* %107 to <16 x i8>*
  store <16 x i8> %106, <16 x i8>* %108, align 1
  %109 = or i64 %78, 80
  %110 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 13, i64 %109
  %111 = bitcast i8* %110 to <16 x i8>*
  %112 = load <16 x i8>, <16 x i8>* %111, align 1
  %113 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %109
  %114 = bitcast i8* %113 to <16 x i8>*
  store <16 x i8> %112, <16 x i8>* %114, align 1
  %115 = or i64 %78, 96
  %116 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 13, i64 %115
  %117 = bitcast i8* %116 to <16 x i8>*
  %118 = load <16 x i8>, <16 x i8>* %117, align 1
  %119 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %115
  %120 = bitcast i8* %119 to <16 x i8>*
  store <16 x i8> %118, <16 x i8>* %120, align 1
  %121 = or i64 %78, 112
  %122 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 13, i64 %121
  %123 = bitcast i8* %122 to <16 x i8>*
  %124 = load <16 x i8>, <16 x i8>* %123, align 1
  %125 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %121
  %126 = bitcast i8* %125 to <16 x i8>*
  store <16 x i8> %124, <16 x i8>* %126, align 1
  %127 = add i64 %78, 128
  %128 = add i64 %79, -8
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %77, !llvm.loop !2

130:                                              ; preds = %77, %67
  %131 = phi i64 [ 0, %67 ], [ %127, %77 ]
  %132 = icmp eq i64 %73, 0
  br i1 %132, label %144, label %133

133:                                              ; preds = %130, %133
  %134 = phi i64 [ %141, %133 ], [ %131, %130 ]
  %135 = phi i64 [ %142, %133 ], [ %73, %130 ]
  %136 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 13, i64 %134
  %137 = bitcast i8* %136 to <16 x i8>*
  %138 = load <16 x i8>, <16 x i8>* %137, align 1
  %139 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %134
  %140 = bitcast i8* %139 to <16 x i8>*
  store <16 x i8> %138, <16 x i8>* %140, align 1
  %141 = add i64 %134, 16
  %142 = add i64 %135, -1
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %144, label %133, !llvm.loop !4

144:                                              ; preds = %133, %130
  %145 = icmp eq i64 %68, %65
  br i1 %145, label %157, label %146

146:                                              ; preds = %144, %64
  %147 = phi i64 [ 0, %64 ], [ %68, %144 ]
  %148 = phi i8* [ %29, %64 ], [ %69, %144 ]
  br label %149

149:                                              ; preds = %146, %149
  %150 = phi i64 [ %155, %149 ], [ %147, %146 ]
  %151 = phi i8* [ %152, %149 ], [ %148, %146 ]
  %152 = getelementptr inbounds i8, i8* %151, i64 1
  %153 = load i8, i8* %151, align 1
  %154 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %150
  store i8 %153, i8* %154, align 1
  %155 = add nuw nsw i64 %150, 1
  %156 = icmp eq i64 %155, %65
  br i1 %156, label %157, label %149, !llvm.loop !6

157:                                              ; preds = %149, %144, %60
  %158 = phi i32 [ 0, %60 ], [ %2, %144 ], [ %2, %149 ]
  %159 = load i8*, i8** %3, align 8
  %160 = sub i32 0, %35
  %161 = icmp slt i32 %158, %160
  br i1 %161, label %162, label %306

162:                                              ; preds = %157
  %163 = zext i32 %158 to i64
  %164 = zext i32 %160 to i64
  %165 = sub nsw i64 %164, %163
  %166 = icmp ult i64 %165, 32
  br i1 %166, label %263, label %167

167:                                              ; preds = %162
  %168 = add nuw nsw i64 %163, 250
  %169 = getelementptr i8, i8* %12, i64 %168
  %170 = add nuw nsw i64 %164, 250
  %171 = getelementptr i8, i8* %12, i64 %170
  %172 = sub nsw i64 %164, %163
  %173 = getelementptr i8, i8* %159, i64 %172
  %174 = icmp ult i8* %169, %173
  %175 = icmp ult i8* %159, %171
  %176 = and i1 %174, %175
  br i1 %176, label %263, label %177

177:                                              ; preds = %167
  %178 = and i64 %165, -32
  %179 = add nsw i64 %178, %163
  %180 = getelementptr i8, i8* %159, i64 %178
  %181 = add nsw i64 %178, -32
  %182 = lshr exact i64 %181, 5
  %183 = add nuw nsw i64 %182, 1
  %184 = and i64 %183, 3
  %185 = icmp ult i64 %181, 96
  br i1 %185, label %241, label %186

186:                                              ; preds = %177
  %187 = sub nsw i64 %183, %184
  br label %188

188:                                              ; preds = %188, %186
  %189 = phi i64 [ 0, %186 ], [ %238, %188 ]
  %190 = phi i64 [ %187, %186 ], [ %239, %188 ]
  %191 = add i64 %189, %163
  %192 = getelementptr i8, i8* %159, i64 %189
  %193 = bitcast i8* %192 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1, !alias.scope !8
  %195 = getelementptr i8, i8* %192, i64 16
  %196 = bitcast i8* %195 to <16 x i8>*
  %197 = load <16 x i8>, <16 x i8>* %196, align 1, !alias.scope !8
  %198 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %191
  %199 = bitcast i8* %198 to <16 x i8>*
  store <16 x i8> %194, <16 x i8>* %199, align 1, !alias.scope !11, !noalias !8
  %200 = getelementptr inbounds i8, i8* %198, i64 16
  %201 = bitcast i8* %200 to <16 x i8>*
  store <16 x i8> %197, <16 x i8>* %201, align 1, !alias.scope !11, !noalias !8
  %202 = or i64 %189, 32
  %203 = add i64 %202, %163
  %204 = getelementptr i8, i8* %159, i64 %202
  %205 = bitcast i8* %204 to <16 x i8>*
  %206 = load <16 x i8>, <16 x i8>* %205, align 1, !alias.scope !8
  %207 = getelementptr i8, i8* %204, i64 16
  %208 = bitcast i8* %207 to <16 x i8>*
  %209 = load <16 x i8>, <16 x i8>* %208, align 1, !alias.scope !8
  %210 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %203
  %211 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %206, <16 x i8>* %211, align 1, !alias.scope !11, !noalias !8
  %212 = getelementptr inbounds i8, i8* %210, i64 16
  %213 = bitcast i8* %212 to <16 x i8>*
  store <16 x i8> %209, <16 x i8>* %213, align 1, !alias.scope !11, !noalias !8
  %214 = or i64 %189, 64
  %215 = add i64 %214, %163
  %216 = getelementptr i8, i8* %159, i64 %214
  %217 = bitcast i8* %216 to <16 x i8>*
  %218 = load <16 x i8>, <16 x i8>* %217, align 1, !alias.scope !8
  %219 = getelementptr i8, i8* %216, i64 16
  %220 = bitcast i8* %219 to <16 x i8>*
  %221 = load <16 x i8>, <16 x i8>* %220, align 1, !alias.scope !8
  %222 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %215
  %223 = bitcast i8* %222 to <16 x i8>*
  store <16 x i8> %218, <16 x i8>* %223, align 1, !alias.scope !11, !noalias !8
  %224 = getelementptr inbounds i8, i8* %222, i64 16
  %225 = bitcast i8* %224 to <16 x i8>*
  store <16 x i8> %221, <16 x i8>* %225, align 1, !alias.scope !11, !noalias !8
  %226 = or i64 %189, 96
  %227 = add i64 %226, %163
  %228 = getelementptr i8, i8* %159, i64 %226
  %229 = bitcast i8* %228 to <16 x i8>*
  %230 = load <16 x i8>, <16 x i8>* %229, align 1, !alias.scope !8
  %231 = getelementptr i8, i8* %228, i64 16
  %232 = bitcast i8* %231 to <16 x i8>*
  %233 = load <16 x i8>, <16 x i8>* %232, align 1, !alias.scope !8
  %234 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %227
  %235 = bitcast i8* %234 to <16 x i8>*
  store <16 x i8> %230, <16 x i8>* %235, align 1, !alias.scope !11, !noalias !8
  %236 = getelementptr inbounds i8, i8* %234, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  store <16 x i8> %233, <16 x i8>* %237, align 1, !alias.scope !11, !noalias !8
  %238 = add i64 %189, 128
  %239 = add i64 %190, -4
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %241, label %188, !llvm.loop !13

241:                                              ; preds = %188, %177
  %242 = phi i64 [ 0, %177 ], [ %238, %188 ]
  %243 = icmp eq i64 %184, 0
  br i1 %243, label %261, label %244

244:                                              ; preds = %241, %244
  %245 = phi i64 [ %258, %244 ], [ %242, %241 ]
  %246 = phi i64 [ %259, %244 ], [ %184, %241 ]
  %247 = add i64 %245, %163
  %248 = getelementptr i8, i8* %159, i64 %245
  %249 = bitcast i8* %248 to <16 x i8>*
  %250 = load <16 x i8>, <16 x i8>* %249, align 1, !alias.scope !8
  %251 = getelementptr i8, i8* %248, i64 16
  %252 = bitcast i8* %251 to <16 x i8>*
  %253 = load <16 x i8>, <16 x i8>* %252, align 1, !alias.scope !8
  %254 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %247
  %255 = bitcast i8* %254 to <16 x i8>*
  store <16 x i8> %250, <16 x i8>* %255, align 1, !alias.scope !11, !noalias !8
  %256 = getelementptr inbounds i8, i8* %254, i64 16
  %257 = bitcast i8* %256 to <16 x i8>*
  store <16 x i8> %253, <16 x i8>* %257, align 1, !alias.scope !11, !noalias !8
  %258 = add i64 %245, 32
  %259 = add i64 %246, -1
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %261, label %244, !llvm.loop !14

261:                                              ; preds = %244, %241
  %262 = icmp eq i64 %165, %178
  br i1 %262, label %306, label %263

263:                                              ; preds = %261, %167, %162
  %264 = phi i64 [ %163, %167 ], [ %163, %162 ], [ %179, %261 ]
  %265 = phi i8* [ %159, %167 ], [ %159, %162 ], [ %180, %261 ]
  %266 = sub nsw i64 %164, %264
  %267 = xor i64 %264, -1
  %268 = add nsw i64 %267, %164
  %269 = and i64 %266, 3
  %270 = icmp eq i64 %269, 0
  br i1 %270, label %281, label %271

271:                                              ; preds = %263, %271
  %272 = phi i64 [ %278, %271 ], [ %264, %263 ]
  %273 = phi i8* [ %275, %271 ], [ %265, %263 ]
  %274 = phi i64 [ %279, %271 ], [ %269, %263 ]
  %275 = getelementptr inbounds i8, i8* %273, i64 1
  %276 = load i8, i8* %273, align 1
  %277 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %272
  store i8 %276, i8* %277, align 1
  %278 = add nuw nsw i64 %272, 1
  %279 = add i64 %274, -1
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %281, label %271, !llvm.loop !15

281:                                              ; preds = %271, %263
  %282 = phi i8* [ undef, %263 ], [ %275, %271 ]
  %283 = phi i64 [ %264, %263 ], [ %278, %271 ]
  %284 = phi i8* [ %265, %263 ], [ %275, %271 ]
  %285 = icmp ult i64 %268, 3
  br i1 %285, label %306, label %286

286:                                              ; preds = %281, %286
  %287 = phi i64 [ %304, %286 ], [ %283, %281 ]
  %288 = phi i8* [ %301, %286 ], [ %284, %281 ]
  %289 = getelementptr inbounds i8, i8* %288, i64 1
  %290 = load i8, i8* %288, align 1
  %291 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %287
  store i8 %290, i8* %291, align 1
  %292 = add nuw nsw i64 %287, 1
  %293 = getelementptr inbounds i8, i8* %288, i64 2
  %294 = load i8, i8* %289, align 1
  %295 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %292
  store i8 %294, i8* %295, align 1
  %296 = add nuw nsw i64 %287, 2
  %297 = getelementptr inbounds i8, i8* %288, i64 3
  %298 = load i8, i8* %293, align 1
  %299 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %296
  store i8 %298, i8* %299, align 1
  %300 = add nuw nsw i64 %287, 3
  %301 = getelementptr inbounds i8, i8* %288, i64 4
  %302 = load i8, i8* %297, align 1
  %303 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %300
  store i8 %302, i8* %303, align 1
  %304 = add nuw nsw i64 %287, 4
  %305 = icmp eq i64 %304, %164
  br i1 %305, label %306, label %286, !llvm.loop !16

306:                                              ; preds = %281, %286, %261, %157
  %307 = phi i8* [ %159, %157 ], [ %180, %261 ], [ %282, %281 ], [ %301, %286 ]
  store i8* %307, i8** %3, align 8
  %308 = trunc i32 %160 to i8
  %309 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 35
  store i8 %308, i8* %309, align 2
  br label %310

310:                                              ; preds = %46, %44, %58, %306
  %311 = phi i8 [ 1, %306 ], [ 0, %58 ], [ 1, %44 ], [ 1, %46 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #4
  ret i8 %311
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc i32 @_ZL16ucnv_extMatchToUPKiaPKciS2_iPjaa(i32* readonly, i8 signext, i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture, i8 signext) unnamed_addr #2 {
  %9 = icmp eq i32* %0, null
  br i1 %9, label %170, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds i32, i32* %0, i64 2
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 1
  br i1 %13, label %170, label %14

14:                                               ; preds = %10
  %15 = bitcast i32* %0 to i8*
  %16 = getelementptr inbounds i32, i32* %0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %15, i64 %18
  %20 = bitcast i8* %19 to i32*
  %21 = icmp eq i8 %1, 0
  br i1 %21, label %22, label %29

22:                                               ; preds = %14
  %23 = icmp sgt i32 %3, 1
  br i1 %23, label %170, label %24

24:                                               ; preds = %22
  %25 = icmp eq i32 %3, 1
  br i1 %25, label %29, label %26

26:                                               ; preds = %24
  %27 = icmp slt i32 %5, 1
  %28 = select i1 %27, i32 %5, i32 1
  br label %29

29:                                               ; preds = %26, %24, %14
  %30 = phi i32 [ %5, %14 ], [ 0, %24 ], [ %28, %26 ]
  %31 = phi i8 [ %7, %14 ], [ 1, %24 ], [ 1, %26 ]
  %32 = icmp slt i8 %1, 0
  br label %33

33:                                               ; preds = %155, %29
  %34 = phi i32 [ 0, %29 ], [ %54, %155 ]
  %35 = phi i32 [ 0, %29 ], [ %73, %155 ]
  %36 = phi i32 [ 0, %29 ], [ %74, %155 ]
  %37 = phi i32 [ 0, %29 ], [ %153, %155 ]
  %38 = phi i32 [ 0, %29 ], [ %55, %155 ]
  %39 = zext i32 %37 to i64
  %40 = getelementptr inbounds i32, i32* %20, i64 %39
  %41 = getelementptr inbounds i32, i32* %40, i64 1
  %42 = load i32, i32* %40, align 4
  %43 = lshr i32 %42, 24
  %44 = and i32 %42, 16777215
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %53, label %46

46:                                               ; preds = %33
  %47 = add nsw i32 %36, %35
  %48 = icmp ne i32 %47, 1
  %49 = xor i1 %21, %48
  %50 = or i1 %32, %49
  %51 = select i1 %50, i32 %44, i32 %34
  %52 = select i1 %50, i32 %47, i32 %38
  br label %53

53:                                               ; preds = %46, %33
  %54 = phi i32 [ %34, %33 ], [ %51, %46 ]
  %55 = phi i32 [ %38, %33 ], [ %52, %46 ]
  %56 = icmp slt i32 %35, %3
  br i1 %56, label %57, label %59

57:                                               ; preds = %53
  %58 = add nsw i32 %35, 1
  br label %70

59:                                               ; preds = %53
  %60 = icmp slt i32 %36, %30
  br i1 %60, label %61, label %63

61:                                               ; preds = %59
  %62 = add nsw i32 %36, 1
  br label %70

63:                                               ; preds = %59
  %64 = icmp eq i8 %31, 0
  br i1 %64, label %65, label %164

65:                                               ; preds = %63
  %66 = add nsw i32 %36, %35
  %67 = icmp sgt i32 %66, 31
  br i1 %67, label %164, label %68

68:                                               ; preds = %65
  %69 = sub nsw i32 0, %66
  br label %170

70:                                               ; preds = %61, %57
  %71 = phi i32 [ %36, %61 ], [ %35, %57 ]
  %72 = phi i8* [ %4, %61 ], [ %2, %57 ]
  %73 = phi i32 [ %35, %61 ], [ %58, %57 ]
  %74 = phi i32 [ %62, %61 ], [ %36, %57 ]
  %75 = sext i32 %71 to i64
  %76 = getelementptr inbounds i8, i8* %72, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = load i32, i32* %41, align 4
  %79 = lshr i32 %78, 24
  %80 = add nsw i32 %43, -1
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i32, i32* %41, i64 %81
  %83 = load i32, i32* %82, align 4
  %84 = lshr i32 %83, 24
  %85 = zext i8 %77 to i32
  %86 = icmp ugt i32 %79, %85
  %87 = icmp ult i32 %84, %85
  %88 = or i1 %86, %87
  br i1 %88, label %164, label %89

89:                                               ; preds = %70
  %90 = sub nsw i32 1, %79
  %91 = add nsw i32 %90, %84
  %92 = icmp eq i32 %91, %43
  br i1 %92, label %93, label %98

93:                                               ; preds = %89
  %94 = sub nsw i32 %85, %79
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds i32, i32* %41, i64 %95
  %97 = load i32, i32* %96, align 4
  br label %151

98:                                               ; preds = %89
  %99 = shl nuw i32 %85, 24
  %100 = or i32 %99, 16777215
  %101 = icmp ult i32 %42, 33554432
  br i1 %101, label %141, label %102

102:                                              ; preds = %98, %130
  %103 = phi i32 [ %139, %130 ], [ %43, %98 ]
  %104 = phi i32 [ %138, %130 ], [ %43, %98 ]
  %105 = phi i32 [ %137, %130 ], [ 0, %98 ]
  %106 = icmp slt i32 %103, 5
  br i1 %106, label %107, label %130

107:                                              ; preds = %102
  %108 = sext i32 %105 to i64
  %109 = getelementptr inbounds i32, i32* %41, i64 %108
  %110 = load i32, i32* %109, align 4
  %111 = icmp ugt i32 %99, %110
  br i1 %111, label %112, label %141

112:                                              ; preds = %107
  %113 = add nsw i32 %105, 1
  %114 = icmp slt i32 %113, %104
  br i1 %114, label %115, label %120

115:                                              ; preds = %112
  %116 = sext i32 %113 to i64
  %117 = getelementptr inbounds i32, i32* %41, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = icmp ugt i32 %99, %118
  br i1 %119, label %120, label %141

120:                                              ; preds = %115, %112
  %121 = add nsw i32 %105, 2
  %122 = icmp slt i32 %121, %104
  br i1 %122, label %123, label %128

123:                                              ; preds = %120
  %124 = sext i32 %121 to i64
  %125 = getelementptr inbounds i32, i32* %41, i64 %124
  %126 = load i32, i32* %125, align 4
  %127 = icmp ugt i32 %99, %126
  br i1 %127, label %128, label %141

128:                                              ; preds = %123, %120
  %129 = add nsw i32 %105, 3
  br label %141

130:                                              ; preds = %102
  %131 = add nsw i32 %105, %104
  %132 = sdiv i32 %131, 2
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds i32, i32* %41, i64 %133
  %135 = load i32, i32* %134, align 4
  %136 = icmp ult i32 %100, %135
  %137 = select i1 %136, i32 %105, i32 %132
  %138 = select i1 %136, i32 %132, i32 %104
  %139 = sub nsw i32 %138, %137
  %140 = icmp slt i32 %139, 2
  br i1 %140, label %141, label %102

141:                                              ; preds = %130, %128, %123, %115, %107, %98
  %142 = phi i32 [ %104, %107 ], [ %104, %115 ], [ %104, %123 ], [ %104, %128 ], [ %43, %98 ], [ %138, %130 ]
  %143 = phi i32 [ %105, %107 ], [ %113, %115 ], [ %121, %123 ], [ %129, %128 ], [ 0, %98 ], [ %137, %130 ]
  %144 = icmp slt i32 %143, %142
  br i1 %144, label %145, label %164

145:                                              ; preds = %141
  %146 = sext i32 %143 to i64
  %147 = getelementptr inbounds i32, i32* %41, i64 %146
  %148 = load i32, i32* %147, align 4
  %149 = lshr i32 %148, 24
  %150 = icmp eq i32 %149, %85
  br i1 %150, label %151, label %164

151:                                              ; preds = %145, %93
  %152 = phi i32 [ %97, %93 ], [ %148, %145 ]
  %153 = and i32 %152, 16777215
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %164, label %155

155:                                              ; preds = %151
  %156 = icmp ult i32 %153, 2031616
  br i1 %156, label %33, label %157

157:                                              ; preds = %155
  %158 = add nsw i32 %74, %73
  %159 = icmp ne i32 %158, 1
  %160 = xor i1 %21, %159
  %161 = or i1 %32, %160
  %162 = select i1 %161, i32 %153, i32 %54
  %163 = select i1 %161, i32 %158, i32 %55
  br label %164

164:                                              ; preds = %141, %70, %145, %151, %157, %63, %65
  %165 = phi i32 [ %54, %63 ], [ %54, %65 ], [ %162, %157 ], [ %54, %151 ], [ %54, %145 ], [ %54, %70 ], [ %54, %141 ]
  %166 = phi i32 [ %55, %63 ], [ %55, %65 ], [ %163, %157 ], [ %55, %151 ], [ %55, %145 ], [ %55, %70 ], [ %55, %141 ]
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %170, label %168

168:                                              ; preds = %164
  %169 = and i32 %165, -8388609
  store i32 %169, i32* %6, align 4
  br label %170

170:                                              ; preds = %164, %22, %8, %10, %168, %68
  %171 = phi i32 [ %166, %168 ], [ %69, %68 ], [ 0, %10 ], [ 0, %8 ], [ 0, %22 ], [ 0, %164 ]
  ret i32 %171
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ucnv_extSimpleMatchToU_69(i32* readonly, i8* nocapture readonly, i32, i8 signext) local_unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #4
  store i32 0, i32* %5, align 4
  %7 = icmp slt i32 %2, 1
  br i1 %7, label %16, label %8

8:                                                ; preds = %4
  %9 = call fastcc i32 @_ZL16ucnv_extMatchToUPKiaPKciS2_iPjaa(i32* %0, i8 signext -1, i8* %1, i32 %2, i8* null, i32 0, i32* nonnull %5, i8 signext 1)
  %10 = icmp eq i32 %9, %2
  %11 = load i32, i32* %5, align 4
  %12 = icmp ult i32 %11, 3145728
  %13 = and i1 %10, %12
  %14 = add i32 %11, -2031616
  %15 = select i1 %13, i32 %14, i32 65534
  br label %16

16:                                               ; preds = %8, %4
  %17 = phi i32 [ 65535, %4 ], [ %15, %8 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #4
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ucnv_extContinueMatchToU_69(%struct.UConverter*, %struct.UConverterToUnicodeArgs*, i32, i32*) local_unnamed_addr #0 {
  %5 = bitcast %struct.UConverter* %0 to i8*
  %6 = alloca i32, align 4
  %7 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #4
  store i32 0, i32* %6, align 4
  %8 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 6
  %9 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %8, align 8
  %10 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %9, i64 0, i32 8, i32 22
  %11 = load i32*, i32** %10, align 8
  %12 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %9, i64 0, i32 8, i32 14
  %13 = load i8, i8* %12, align 4
  %14 = icmp eq i8 %13, 12
  br i1 %14, label %15, label %19

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 15
  %17 = load i32, i32* %16, align 4
  %18 = trunc i32 %17 to i8
  br label %22

19:                                               ; preds = %4
  %20 = icmp eq i8 %13, -37
  %21 = select i1 %20, i8 1, i8 -1
  br label %22

22:                                               ; preds = %19, %15
  %23 = phi i8 [ %18, %15 ], [ %21, %19 ]
  %24 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 0
  %25 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 35
  %26 = load i8, i8* %25, align 2
  %27 = sext i8 %26 to i32
  %28 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 3
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 4
  %31 = bitcast i8** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = ptrtoint i8* %29 to i64
  %34 = sub i64 %32, %33
  %35 = trunc i64 %34 to i32
  %36 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 1
  %37 = load i8, i8* %36, align 2
  %38 = call fastcc i32 @_ZL16ucnv_extMatchToUPKiaPKciS2_iPjaa(i32* %11, i8 signext %23, i8* %24, i32 %27, i8* %29, i32 %35, i32* nonnull %6, i8 signext %37)
  %39 = icmp sgt i32 %38, 0
  br i1 %39, label %40, label %81

40:                                               ; preds = %22
  %41 = load i8, i8* %25, align 2
  %42 = sext i8 %41 to i32
  %43 = icmp slt i32 %38, %42
  br i1 %43, label %49, label %44

44:                                               ; preds = %40
  %45 = sub nsw i32 %38, %42
  %46 = load i8*, i8** %28, align 8
  %47 = sext i32 %45 to i64
  %48 = getelementptr inbounds i8, i8* %46, i64 %47
  store i8* %48, i8** %28, align 8
  br label %56

49:                                               ; preds = %40
  %50 = sub nsw i32 %42, %38
  %51 = sext i32 %38 to i64
  %52 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %51
  %53 = sext i32 %50 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %24, i8* align 1 %52, i64 %53, i1 false)
  %54 = trunc i32 %50 to i8
  %55 = sub i8 0, %54
  br label %56

56:                                               ; preds = %49, %44
  %57 = phi i8 [ %55, %49 ], [ 0, %44 ]
  store i8 %57, i8* %25, align 2
  %58 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %8, align 8
  %59 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %58, i64 0, i32 8, i32 22
  %60 = load i32*, i32** %59, align 8
  %61 = load i32, i32* %6, align 4
  %62 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 5
  %63 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 6
  %64 = load i16*, i16** %63, align 8
  %65 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 7
  %66 = icmp ult i32 %61, 3145728
  br i1 %66, label %67, label %69

67:                                               ; preds = %56
  %68 = add nsw i32 %61, -2031616
  tail call void @ucnv_toUWriteCodePoint_69(%struct.UConverter* %0, i32 %68, i16** %62, i16* %64, i32** %65, i32 %2, i32* %3) #4
  br label %255

69:                                               ; preds = %56
  %70 = bitcast i32* %60 to i8*
  %71 = getelementptr inbounds i32, i32* %60, i64 3
  %72 = load i32, i32* %71, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8, i8* %70, i64 %73
  %75 = bitcast i8* %74 to i16*
  %76 = and i32 %61, 262143
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds i16, i16* %75, i64 %77
  %79 = lshr i32 %61, 18
  %80 = add nsw i32 %79, -12
  tail call void @ucnv_toUWriteUChars_69(%struct.UConverter* %0, i16* %78, i32 %80, i16** %62, i16* %64, i32** %65, i32 %2, i32* %3) #4
  br label %255

81:                                               ; preds = %22
  %82 = icmp slt i32 %38, 0
  br i1 %82, label %83, label %236

83:                                               ; preds = %81
  %84 = load i8*, i8** %28, align 8
  %85 = sub i32 0, %38
  %86 = load i8, i8* %25, align 2
  %87 = sext i8 %86 to i32
  %88 = icmp slt i32 %87, %85
  br i1 %88, label %89, label %233

89:                                               ; preds = %83
  %90 = sext i8 %86 to i64
  %91 = sext i32 %85 to i64
  %92 = sub nsw i64 %91, %90
  %93 = icmp ult i64 %92, 32
  br i1 %93, label %190, label %94

94:                                               ; preds = %89
  %95 = add nsw i64 %90, 250
  %96 = getelementptr i8, i8* %5, i64 %95
  %97 = add nsw i64 %91, 250
  %98 = getelementptr i8, i8* %5, i64 %97
  %99 = sub nsw i64 %91, %90
  %100 = getelementptr i8, i8* %84, i64 %99
  %101 = icmp ult i8* %96, %100
  %102 = icmp ult i8* %84, %98
  %103 = and i1 %101, %102
  br i1 %103, label %190, label %104

104:                                              ; preds = %94
  %105 = and i64 %92, -32
  %106 = add nsw i64 %105, %90
  %107 = getelementptr i8, i8* %84, i64 %105
  %108 = add nsw i64 %105, -32
  %109 = lshr exact i64 %108, 5
  %110 = add nuw nsw i64 %109, 1
  %111 = and i64 %110, 3
  %112 = icmp ult i64 %108, 96
  br i1 %112, label %168, label %113

113:                                              ; preds = %104
  %114 = sub nsw i64 %110, %111
  br label %115

115:                                              ; preds = %115, %113
  %116 = phi i64 [ 0, %113 ], [ %165, %115 ]
  %117 = phi i64 [ %114, %113 ], [ %166, %115 ]
  %118 = add i64 %116, %90
  %119 = getelementptr i8, i8* %84, i64 %116
  %120 = bitcast i8* %119 to <16 x i8>*
  %121 = load <16 x i8>, <16 x i8>* %120, align 1, !alias.scope !17
  %122 = getelementptr i8, i8* %119, i64 16
  %123 = bitcast i8* %122 to <16 x i8>*
  %124 = load <16 x i8>, <16 x i8>* %123, align 1, !alias.scope !17
  %125 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %118
  %126 = bitcast i8* %125 to <16 x i8>*
  store <16 x i8> %121, <16 x i8>* %126, align 1, !alias.scope !20, !noalias !17
  %127 = getelementptr inbounds i8, i8* %125, i64 16
  %128 = bitcast i8* %127 to <16 x i8>*
  store <16 x i8> %124, <16 x i8>* %128, align 1, !alias.scope !20, !noalias !17
  %129 = or i64 %116, 32
  %130 = add i64 %129, %90
  %131 = getelementptr i8, i8* %84, i64 %129
  %132 = bitcast i8* %131 to <16 x i8>*
  %133 = load <16 x i8>, <16 x i8>* %132, align 1, !alias.scope !17
  %134 = getelementptr i8, i8* %131, i64 16
  %135 = bitcast i8* %134 to <16 x i8>*
  %136 = load <16 x i8>, <16 x i8>* %135, align 1, !alias.scope !17
  %137 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %130
  %138 = bitcast i8* %137 to <16 x i8>*
  store <16 x i8> %133, <16 x i8>* %138, align 1, !alias.scope !20, !noalias !17
  %139 = getelementptr inbounds i8, i8* %137, i64 16
  %140 = bitcast i8* %139 to <16 x i8>*
  store <16 x i8> %136, <16 x i8>* %140, align 1, !alias.scope !20, !noalias !17
  %141 = or i64 %116, 64
  %142 = add i64 %141, %90
  %143 = getelementptr i8, i8* %84, i64 %141
  %144 = bitcast i8* %143 to <16 x i8>*
  %145 = load <16 x i8>, <16 x i8>* %144, align 1, !alias.scope !17
  %146 = getelementptr i8, i8* %143, i64 16
  %147 = bitcast i8* %146 to <16 x i8>*
  %148 = load <16 x i8>, <16 x i8>* %147, align 1, !alias.scope !17
  %149 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %142
  %150 = bitcast i8* %149 to <16 x i8>*
  store <16 x i8> %145, <16 x i8>* %150, align 1, !alias.scope !20, !noalias !17
  %151 = getelementptr inbounds i8, i8* %149, i64 16
  %152 = bitcast i8* %151 to <16 x i8>*
  store <16 x i8> %148, <16 x i8>* %152, align 1, !alias.scope !20, !noalias !17
  %153 = or i64 %116, 96
  %154 = add i64 %153, %90
  %155 = getelementptr i8, i8* %84, i64 %153
  %156 = bitcast i8* %155 to <16 x i8>*
  %157 = load <16 x i8>, <16 x i8>* %156, align 1, !alias.scope !17
  %158 = getelementptr i8, i8* %155, i64 16
  %159 = bitcast i8* %158 to <16 x i8>*
  %160 = load <16 x i8>, <16 x i8>* %159, align 1, !alias.scope !17
  %161 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %154
  %162 = bitcast i8* %161 to <16 x i8>*
  store <16 x i8> %157, <16 x i8>* %162, align 1, !alias.scope !20, !noalias !17
  %163 = getelementptr inbounds i8, i8* %161, i64 16
  %164 = bitcast i8* %163 to <16 x i8>*
  store <16 x i8> %160, <16 x i8>* %164, align 1, !alias.scope !20, !noalias !17
  %165 = add i64 %116, 128
  %166 = add i64 %117, -4
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %168, label %115, !llvm.loop !22

168:                                              ; preds = %115, %104
  %169 = phi i64 [ 0, %104 ], [ %165, %115 ]
  %170 = icmp eq i64 %111, 0
  br i1 %170, label %188, label %171

171:                                              ; preds = %168, %171
  %172 = phi i64 [ %185, %171 ], [ %169, %168 ]
  %173 = phi i64 [ %186, %171 ], [ %111, %168 ]
  %174 = add i64 %172, %90
  %175 = getelementptr i8, i8* %84, i64 %172
  %176 = bitcast i8* %175 to <16 x i8>*
  %177 = load <16 x i8>, <16 x i8>* %176, align 1, !alias.scope !17
  %178 = getelementptr i8, i8* %175, i64 16
  %179 = bitcast i8* %178 to <16 x i8>*
  %180 = load <16 x i8>, <16 x i8>* %179, align 1, !alias.scope !17
  %181 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %174
  %182 = bitcast i8* %181 to <16 x i8>*
  store <16 x i8> %177, <16 x i8>* %182, align 1, !alias.scope !20, !noalias !17
  %183 = getelementptr inbounds i8, i8* %181, i64 16
  %184 = bitcast i8* %183 to <16 x i8>*
  store <16 x i8> %180, <16 x i8>* %184, align 1, !alias.scope !20, !noalias !17
  %185 = add i64 %172, 32
  %186 = add i64 %173, -1
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %188, label %171, !llvm.loop !23

188:                                              ; preds = %171, %168
  %189 = icmp eq i64 %92, %105
  br i1 %189, label %233, label %190

190:                                              ; preds = %188, %94, %89
  %191 = phi i64 [ %90, %94 ], [ %90, %89 ], [ %106, %188 ]
  %192 = phi i8* [ %84, %94 ], [ %84, %89 ], [ %107, %188 ]
  %193 = sub nsw i64 %91, %191
  %194 = xor i64 %191, -1
  %195 = add nsw i64 %194, %91
  %196 = and i64 %193, 3
  %197 = icmp eq i64 %196, 0
  br i1 %197, label %208, label %198

198:                                              ; preds = %190, %198
  %199 = phi i64 [ %205, %198 ], [ %191, %190 ]
  %200 = phi i8* [ %202, %198 ], [ %192, %190 ]
  %201 = phi i64 [ %206, %198 ], [ %196, %190 ]
  %202 = getelementptr inbounds i8, i8* %200, i64 1
  %203 = load i8, i8* %200, align 1
  %204 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %199
  store i8 %203, i8* %204, align 1
  %205 = add nsw i64 %199, 1
  %206 = add i64 %201, -1
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %208, label %198, !llvm.loop !24

208:                                              ; preds = %198, %190
  %209 = phi i8* [ undef, %190 ], [ %202, %198 ]
  %210 = phi i64 [ %191, %190 ], [ %205, %198 ]
  %211 = phi i8* [ %192, %190 ], [ %202, %198 ]
  %212 = icmp ult i64 %195, 3
  br i1 %212, label %233, label %213

213:                                              ; preds = %208, %213
  %214 = phi i64 [ %231, %213 ], [ %210, %208 ]
  %215 = phi i8* [ %228, %213 ], [ %211, %208 ]
  %216 = getelementptr inbounds i8, i8* %215, i64 1
  %217 = load i8, i8* %215, align 1
  %218 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %214
  store i8 %217, i8* %218, align 1
  %219 = add nsw i64 %214, 1
  %220 = getelementptr inbounds i8, i8* %215, i64 2
  %221 = load i8, i8* %216, align 1
  %222 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %219
  store i8 %221, i8* %222, align 1
  %223 = add nsw i64 %214, 2
  %224 = getelementptr inbounds i8, i8* %215, i64 3
  %225 = load i8, i8* %220, align 1
  %226 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %223
  store i8 %225, i8* %226, align 1
  %227 = add nsw i64 %214, 3
  %228 = getelementptr inbounds i8, i8* %215, i64 4
  %229 = load i8, i8* %224, align 1
  %230 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %227
  store i8 %229, i8* %230, align 1
  %231 = add nsw i64 %214, 4
  %232 = icmp eq i64 %231, %91
  br i1 %232, label %233, label %213, !llvm.loop !25

233:                                              ; preds = %208, %213, %188, %83
  %234 = phi i8* [ %84, %83 ], [ %107, %188 ], [ %209, %208 ], [ %228, %213 ]
  store i8* %234, i8** %28, align 8
  %235 = trunc i32 %85 to i8
  store i8 %235, i8* %25, align 2
  br label %255

236:                                              ; preds = %81
  %237 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 13, i64 0
  %238 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 36
  %239 = load i8, i8* %238, align 1
  %240 = sext i8 %239 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %237, i8* align 2 %24, i64 %240, i1 false)
  %241 = load i8, i8* %238, align 1
  %242 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 12
  store i8 %241, i8* %242, align 8
  %243 = load i8, i8* %25, align 2
  %244 = sext i8 %243 to i32
  %245 = sext i8 %241 to i32
  %246 = sub nsw i32 %244, %245
  %247 = icmp sgt i32 %246, 0
  br i1 %247, label %248, label %252

248:                                              ; preds = %236
  %249 = sext i8 %241 to i64
  %250 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 33, i64 %249
  %251 = sext i32 %246 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %24, i8* align 1 %250, i64 %251, i1 false)
  br label %252

252:                                              ; preds = %248, %236
  %253 = trunc i32 %246 to i8
  %254 = sub i8 0, %253
  store i8 %254, i8* %25, align 2
  store i32 10, i32* %3, align 4
  br label %255

255:                                              ; preds = %69, %67, %233, %252
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden signext i8 @ucnv_extInitialMatchFromU_69(%struct.UConverter*, i32*, i32, i16** nocapture, i16*, i8**, i8*, i32**, i32, i8 signext, i32*) local_unnamed_addr #0 {
  %12 = bitcast %struct.UConverter* %0 to i8*
  %13 = alloca [32 x i8], align 16
  %14 = alloca i32, align 4
  %15 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #4
  store i32 0, i32* %14, align 4
  %16 = load i16*, i16** %3, align 8
  %17 = ptrtoint i16* %4 to i64
  %18 = ptrtoint i16* %16 to i64
  %19 = sub i64 %17, %18
  %20 = lshr exact i64 %19, 1
  %21 = trunc i64 %20 to i32
  %22 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 11
  %23 = load i8, i8* %22, align 1
  %24 = call fastcc i32 @_ZL18ucnv_extMatchFromUPKiiPKDsiS2_iPjaa(i32* %1, i32 %2, i16* null, i32 0, i16* %16, i32 %21, i32* nonnull %14, i8 signext %23, i8 signext %9)
  %25 = icmp sgt i32 %24, 1
  br i1 %25, label %26, label %92

26:                                               ; preds = %11
  %27 = load i32, i32* %14, align 4
  %28 = and i32 %27, 520093696
  %29 = icmp eq i32 %28, 16777216
  br i1 %29, label %30, label %36

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 6
  %32 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %31, align 8
  %33 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %32, i64 0, i32 8, i32 14
  %34 = load i8, i8* %33, align 4
  %35 = icmp eq i8 %34, -37
  br i1 %35, label %215, label %36

36:                                               ; preds = %30, %26
  %37 = add nsw i32 %24, -2
  %38 = load i16*, i16** %3, align 8
  %39 = sext i32 %37 to i64
  %40 = getelementptr inbounds i16, i16* %38, i64 %39
  store i16* %40, i16** %3, align 8
  %41 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %41) #4
  %42 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i64 0, i64 1
  %43 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i64 0, i64 2
  %44 = lshr i32 %27, 24
  %45 = and i32 %44, 31
  %46 = icmp ult i32 %45, 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %41, i8 -86, i64 32, i1 false) #4
  br i1 %46, label %47, label %59

47:                                               ; preds = %36
  switch i32 %45, label %68 [
    i32 3, label %48
    i32 2, label %51
    i32 1, label %56
  ]

48:                                               ; preds = %47
  %49 = lshr i32 %27, 16
  %50 = trunc i32 %49 to i8
  store i8 %50, i8* %42, align 1
  br label %51

51:                                               ; preds = %48, %47
  %52 = phi i8* [ %42, %47 ], [ %43, %48 ]
  %53 = lshr i32 %27, 8
  %54 = trunc i32 %53 to i8
  %55 = getelementptr inbounds i8, i8* %52, i64 1
  store i8 %54, i8* %52, align 1
  br label %56

56:                                               ; preds = %51, %47
  %57 = phi i8* [ %42, %47 ], [ %55, %51 ]
  %58 = trunc i32 %27 to i8
  store i8 %58, i8* %57, align 1
  br label %68

59:                                               ; preds = %36
  %60 = and i32 %27, 16777215
  %61 = bitcast i32* %1 to i8*
  %62 = getelementptr inbounds i32, i32* %1, i64 8
  %63 = load i32, i32* %62, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %61, i64 %64
  %66 = zext i32 %60 to i64
  %67 = getelementptr inbounds i8, i8* %65, i64 %66
  br label %68

68:                                               ; preds = %59, %56, %47
  %69 = phi i8* [ %67, %59 ], [ %42, %56 ], [ %42, %47 ]
  %70 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 16
  %71 = load i32, i32* %70, align 8
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %89, label %73

73:                                               ; preds = %68
  %74 = icmp sgt i32 %71, 1
  %75 = icmp eq i32 %45, 1
  %76 = and i1 %75, %74
  br i1 %76, label %81, label %77

77:                                               ; preds = %73
  %78 = icmp eq i32 %71, 1
  %79 = icmp ugt i32 %45, 1
  %80 = and i1 %79, %78
  br i1 %80, label %81, label %89

81:                                               ; preds = %77, %73
  %82 = phi i32 [ 1, %73 ], [ 2, %77 ]
  %83 = phi i8 [ 15, %73 ], [ 14, %77 ]
  store i32 %82, i32* %70, align 8
  store i8 %83, i8* %41, align 16
  %84 = icmp eq i8* %69, %42
  br i1 %84, label %87, label %85

85:                                               ; preds = %81
  %86 = zext i32 %45 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %69, i64 %86, i1 false) #4
  br label %87

87:                                               ; preds = %85, %81
  %88 = add nuw nsw i32 %45, 1
  br label %89

89:                                               ; preds = %68, %77, %87
  %90 = phi i8* [ %69, %68 ], [ %41, %87 ], [ %69, %77 ]
  %91 = phi i32 [ %45, %68 ], [ %88, %87 ], [ %45, %77 ]
  call void @ucnv_fromUWriteBytes_69(%struct.UConverter* %0, i8* %90, i32 %91, i8** %5, i8* %6, i32** %7, i32 %8, i32* %10) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %41) #4
  br label %215

92:                                               ; preds = %11
  %93 = icmp slt i32 %24, 0
  br i1 %93, label %94, label %211

94:                                               ; preds = %92
  %95 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 31
  store i32 %2, i32* %95, align 8
  %96 = load i16*, i16** %3, align 8
  %97 = bitcast i16* %96 to i8*
  %98 = sub nsw i32 -2, %24
  %99 = icmp slt i32 %24, -2
  br i1 %99, label %100, label %207

100:                                              ; preds = %94
  %101 = sext i32 %98 to i64
  %102 = icmp sgt i64 %101, 1
  %103 = select i1 %102, i64 %101, i64 1
  %104 = icmp ult i64 %103, 16
  br i1 %104, label %196, label %105

105:                                              ; preds = %100
  %106 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 32, i64 0
  %107 = icmp sgt i64 %101, 1
  %108 = select i1 %107, i64 %101, i64 1
  %109 = shl nuw nsw i64 %108, 1
  %110 = add nuw nsw i64 %109, 212
  %111 = getelementptr i8, i8* %12, i64 %110
  %112 = getelementptr i16, i16* %96, i64 %108
  %113 = icmp ult i16* %106, %112
  %114 = icmp ugt i8* %111, %97
  %115 = and i1 %113, %114
  br i1 %115, label %196, label %116

116:                                              ; preds = %105
  %117 = and i64 %103, 9223372036854775792
  %118 = getelementptr i16, i16* %96, i64 %117
  %119 = add nsw i64 %117, -16
  %120 = lshr exact i64 %119, 4
  %121 = add nuw nsw i64 %120, 1
  %122 = and i64 %121, 3
  %123 = icmp ult i64 %119, 48
  br i1 %123, label %175, label %124

124:                                              ; preds = %116
  %125 = sub nsw i64 %121, %122
  br label %126

126:                                              ; preds = %126, %124
  %127 = phi i64 [ 0, %124 ], [ %172, %126 ]
  %128 = phi i64 [ %125, %124 ], [ %173, %126 ]
  %129 = getelementptr i16, i16* %96, i64 %127
  %130 = bitcast i16* %129 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 2, !alias.scope !26
  %132 = getelementptr i16, i16* %129, i64 8
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2, !alias.scope !26
  %135 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 32, i64 %127
  %136 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %131, <8 x i16>* %136, align 2, !alias.scope !29, !noalias !26
  %137 = getelementptr inbounds i16, i16* %135, i64 8
  %138 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %138, align 2, !alias.scope !29, !noalias !26
  %139 = or i64 %127, 16
  %140 = getelementptr i16, i16* %96, i64 %139
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 2, !alias.scope !26
  %143 = getelementptr i16, i16* %140, i64 8
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2, !alias.scope !26
  %146 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 32, i64 %139
  %147 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %147, align 2, !alias.scope !29, !noalias !26
  %148 = getelementptr inbounds i16, i16* %146, i64 8
  %149 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %145, <8 x i16>* %149, align 2, !alias.scope !29, !noalias !26
  %150 = or i64 %127, 32
  %151 = getelementptr i16, i16* %96, i64 %150
  %152 = bitcast i16* %151 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 2, !alias.scope !26
  %154 = getelementptr i16, i16* %151, i64 8
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 2, !alias.scope !26
  %157 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 32, i64 %150
  %158 = bitcast i16* %157 to <8 x i16>*
  store <8 x i16> %153, <8 x i16>* %158, align 2, !alias.scope !29, !noalias !26
  %159 = getelementptr inbounds i16, i16* %157, i64 8
  %160 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %160, align 2, !alias.scope !29, !noalias !26
  %161 = or i64 %127, 48
  %162 = getelementptr i16, i16* %96, i64 %161
  %163 = bitcast i16* %162 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 2, !alias.scope !26
  %165 = getelementptr i16, i16* %162, i64 8
  %166 = bitcast i16* %165 to <8 x i16>*
  %167 = load <8 x i16>, <8 x i16>* %166, align 2, !alias.scope !26
  %168 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 32, i64 %161
  %169 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %164, <8 x i16>* %169, align 2, !alias.scope !29, !noalias !26
  %170 = getelementptr inbounds i16, i16* %168, i64 8
  %171 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %171, align 2, !alias.scope !29, !noalias !26
  %172 = add i64 %127, 64
  %173 = add i64 %128, -4
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %175, label %126, !llvm.loop !31

175:                                              ; preds = %126, %116
  %176 = phi i64 [ 0, %116 ], [ %172, %126 ]
  %177 = icmp eq i64 %122, 0
  br i1 %177, label %194, label %178

178:                                              ; preds = %175, %178
  %179 = phi i64 [ %191, %178 ], [ %176, %175 ]
  %180 = phi i64 [ %192, %178 ], [ %122, %175 ]
  %181 = getelementptr i16, i16* %96, i64 %179
  %182 = bitcast i16* %181 to <8 x i16>*
  %183 = load <8 x i16>, <8 x i16>* %182, align 2, !alias.scope !26
  %184 = getelementptr i16, i16* %181, i64 8
  %185 = bitcast i16* %184 to <8 x i16>*
  %186 = load <8 x i16>, <8 x i16>* %185, align 2, !alias.scope !26
  %187 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 32, i64 %179
  %188 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %183, <8 x i16>* %188, align 2, !alias.scope !29, !noalias !26
  %189 = getelementptr inbounds i16, i16* %187, i64 8
  %190 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %186, <8 x i16>* %190, align 2, !alias.scope !29, !noalias !26
  %191 = add i64 %179, 16
  %192 = add i64 %180, -1
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %194, label %178, !llvm.loop !32

194:                                              ; preds = %178, %175
  %195 = icmp eq i64 %103, %117
  br i1 %195, label %207, label %196

196:                                              ; preds = %194, %105, %100
  %197 = phi i64 [ 0, %105 ], [ 0, %100 ], [ %117, %194 ]
  %198 = phi i16* [ %96, %105 ], [ %96, %100 ], [ %118, %194 ]
  br label %199

199:                                              ; preds = %196, %199
  %200 = phi i64 [ %205, %199 ], [ %197, %196 ]
  %201 = phi i16* [ %202, %199 ], [ %198, %196 ]
  %202 = getelementptr inbounds i16, i16* %201, i64 1
  %203 = load i16, i16* %201, align 2
  %204 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 32, i64 %200
  store i16 %203, i16* %204, align 2
  %205 = add nuw nsw i64 %200, 1
  %206 = icmp slt i64 %205, %101
  br i1 %206, label %199, label %207, !llvm.loop !33

207:                                              ; preds = %199, %194, %94
  %208 = phi i16* [ %96, %94 ], [ %118, %194 ], [ %202, %199 ]
  store i16* %208, i16** %3, align 8
  %209 = trunc i32 %98 to i8
  %210 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 34
  store i8 %209, i8* %210, align 1
  br label %215

211:                                              ; preds = %92
  %212 = icmp eq i32 %24, 1
  br i1 %212, label %213, label %215

213:                                              ; preds = %211
  %214 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 25
  store i8 1, i8* %214, align 1
  br label %215

215:                                              ; preds = %30, %211, %213, %207, %89
  %216 = phi i8 [ 1, %207 ], [ 0, %213 ], [ 1, %89 ], [ 0, %211 ], [ 0, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #4
  ret i8 %216
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc i32 @_ZL18ucnv_extMatchFromUPKiiPKDsiS2_iPjaa(i32* readonly, i32, i16* nocapture readonly, i32, i16* nocapture readonly, i32, i32* nocapture, i8 signext, i8 signext) unnamed_addr #2 {
  %10 = icmp eq i32* %0, null
  br i1 %10, label %211, label %11

11:                                               ; preds = %9
  %12 = ashr i32 %1, 10
  %13 = getelementptr inbounds i32, i32* %0, i64 11
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %12, %14
  br i1 %15, label %16, label %211

16:                                               ; preds = %11
  %17 = bitcast i32* %0 to i8*
  %18 = getelementptr inbounds i32, i32* %0, i64 10
  %19 = load i32, i32* %18, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %17, i64 %20
  %22 = bitcast i8* %21 to i16*
  %23 = getelementptr inbounds i32, i32* %0, i64 13
  %24 = load i32, i32* %23, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %17, i64 %25
  %27 = bitcast i8* %26 to i16*
  %28 = sext i32 %12 to i64
  %29 = getelementptr inbounds i16, i16* %22, i64 %28
  %30 = load i16, i16* %29, align 2
  %31 = zext i16 %30 to i32
  %32 = lshr i32 %1, 4
  %33 = and i32 %32, 63
  %34 = add nuw nsw i32 %33, %31
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i16, i16* %22, i64 %35
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = shl nuw nsw i32 %38, 2
  %40 = and i32 %1, 15
  %41 = add nuw nsw i32 %39, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i16, i16* %27, i64 %42
  %44 = load i16, i16* %43, align 2
  %45 = getelementptr inbounds i32, i32* %0, i64 15
  %46 = load i32, i32* %45, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %17, i64 %47
  %49 = bitcast i8* %48 to i32*
  %50 = zext i16 %44 to i64
  %51 = getelementptr inbounds i32, i32* %49, i64 %50
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %211, label %54

54:                                               ; preds = %16
  %55 = icmp ult i32 %52, 2031616
  br i1 %55, label %56, label %193

56:                                               ; preds = %54
  %57 = getelementptr inbounds i32, i32* %0, i64 5
  %58 = load i32, i32* %57, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %17, i64 %59
  %61 = bitcast i8* %60 to i16*
  %62 = getelementptr inbounds i32, i32* %0, i64 6
  %63 = load i32, i32* %62, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %17, i64 %64
  %66 = bitcast i8* %65 to i32*
  %67 = icmp ne i8 %7, 0
  %68 = add nsw i32 %1, -57344
  %69 = icmp ult i32 %68, 6400
  %70 = add nsw i32 %1, -983040
  %71 = icmp ult i32 %70, 131072
  br label %72

72:                                               ; preds = %174, %56
  %73 = phi i32 [ 0, %56 ], [ %99, %174 ]
  %74 = phi i32 [ 0, %56 ], [ %118, %174 ]
  %75 = phi i32 [ 0, %56 ], [ %119, %174 ]
  %76 = phi i32 [ %52, %56 ], [ %176, %174 ]
  %77 = phi i32 [ 0, %56 ], [ %100, %174 ]
  %78 = sext i32 %76 to i64
  %79 = getelementptr inbounds i16, i16* %61, i64 %78
  %80 = getelementptr inbounds i32, i32* %66, i64 %78
  %81 = getelementptr inbounds i16, i16* %79, i64 1
  %82 = load i16, i16* %79, align 2
  %83 = zext i16 %82 to i32
  %84 = getelementptr inbounds i32, i32* %80, i64 1
  %85 = load i32, i32* %80, align 4
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %98, label %87

87:                                               ; preds = %72
  %88 = icmp ugt i32 %85, 1073741823
  %89 = or i1 %67, %88
  %90 = or i1 %69, %89
  %91 = or i1 %71, %90
  %92 = and i32 %85, 536870912
  %93 = icmp eq i32 %92, 0
  %94 = and i1 %93, %91
  br i1 %94, label %95, label %98

95:                                               ; preds = %87
  %96 = add i32 %75, %74
  %97 = add i32 %96, 2
  br label %98

98:                                               ; preds = %87, %72, %95
  %99 = phi i32 [ %85, %95 ], [ %73, %72 ], [ %73, %87 ]
  %100 = phi i32 [ %97, %95 ], [ %77, %72 ], [ %77, %87 ]
  %101 = icmp slt i32 %74, %3
  br i1 %101, label %102, label %104

102:                                              ; preds = %98
  %103 = add nsw i32 %74, 1
  br label %115

104:                                              ; preds = %98
  %105 = icmp slt i32 %75, %5
  br i1 %105, label %106, label %108

106:                                              ; preds = %104
  %107 = add nsw i32 %75, 1
  br label %115

108:                                              ; preds = %104
  %109 = icmp eq i8 %8, 0
  br i1 %109, label %110, label %189

110:                                              ; preds = %108
  %111 = add nsw i32 %75, %74
  %112 = icmp sgt i32 %111, 19
  br i1 %112, label %189, label %113

113:                                              ; preds = %110
  %114 = sub nsw i32 -2, %111
  br label %211

115:                                              ; preds = %106, %102
  %116 = phi i32 [ %75, %106 ], [ %74, %102 ]
  %117 = phi i16* [ %4, %106 ], [ %2, %102 ]
  %118 = phi i32 [ %74, %106 ], [ %103, %102 ]
  %119 = phi i32 [ %107, %106 ], [ %75, %102 ]
  %120 = sext i32 %116 to i64
  %121 = getelementptr inbounds i16, i16* %117, i64 %120
  %122 = load i16, i16* %121, align 2
  %123 = icmp ult i16 %82, 2
  br i1 %123, label %163, label %124

124:                                              ; preds = %115, %152
  %125 = phi i32 [ %161, %152 ], [ %83, %115 ]
  %126 = phi i32 [ %160, %152 ], [ %83, %115 ]
  %127 = phi i32 [ %159, %152 ], [ 0, %115 ]
  %128 = icmp slt i32 %125, 5
  br i1 %128, label %129, label %152

129:                                              ; preds = %124
  %130 = sext i32 %127 to i64
  %131 = getelementptr inbounds i16, i16* %81, i64 %130
  %132 = load i16, i16* %131, align 2
  %133 = icmp ult i16 %132, %122
  br i1 %133, label %134, label %163

134:                                              ; preds = %129
  %135 = add nsw i32 %127, 1
  %136 = icmp slt i32 %135, %126
  br i1 %136, label %137, label %142

137:                                              ; preds = %134
  %138 = sext i32 %135 to i64
  %139 = getelementptr inbounds i16, i16* %81, i64 %138
  %140 = load i16, i16* %139, align 2
  %141 = icmp ult i16 %140, %122
  br i1 %141, label %142, label %163

142:                                              ; preds = %137, %134
  %143 = add nsw i32 %127, 2
  %144 = icmp slt i32 %143, %126
  br i1 %144, label %145, label %150

145:                                              ; preds = %142
  %146 = sext i32 %143 to i64
  %147 = getelementptr inbounds i16, i16* %81, i64 %146
  %148 = load i16, i16* %147, align 2
  %149 = icmp ult i16 %148, %122
  br i1 %149, label %150, label %163

150:                                              ; preds = %145, %142
  %151 = add nsw i32 %127, 3
  br label %163

152:                                              ; preds = %124
  %153 = add nsw i32 %127, %126
  %154 = sdiv i32 %153, 2
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds i16, i16* %81, i64 %155
  %157 = load i16, i16* %156, align 2
  %158 = icmp ugt i16 %157, %122
  %159 = select i1 %158, i32 %127, i32 %154
  %160 = select i1 %158, i32 %154, i32 %126
  %161 = sub nsw i32 %160, %159
  %162 = icmp slt i32 %161, 2
  br i1 %162, label %163, label %124

163:                                              ; preds = %152, %150, %145, %137, %129, %115
  %164 = phi i32 [ %126, %129 ], [ %126, %137 ], [ %126, %145 ], [ %126, %150 ], [ %83, %115 ], [ %160, %152 ]
  %165 = phi i32 [ %127, %129 ], [ %135, %137 ], [ %143, %145 ], [ %151, %150 ], [ 0, %115 ], [ %159, %152 ]
  %166 = icmp slt i32 %165, %164
  br i1 %166, label %167, label %189

167:                                              ; preds = %163
  %168 = sext i32 %165 to i64
  %169 = getelementptr inbounds i16, i16* %81, i64 %168
  %170 = load i16, i16* %169, align 2
  %171 = icmp ne i16 %170, %122
  %172 = icmp slt i32 %165, 0
  %173 = or i1 %172, %171
  br i1 %173, label %189, label %174

174:                                              ; preds = %167
  %175 = getelementptr inbounds i32, i32* %84, i64 %168
  %176 = load i32, i32* %175, align 4
  %177 = icmp ult i32 %176, 16777216
  br i1 %177, label %72, label %178

178:                                              ; preds = %174
  %179 = icmp ugt i32 %176, 1073741823
  %180 = or i1 %67, %179
  %181 = or i1 %69, %180
  %182 = or i1 %71, %181
  %183 = and i32 %176, 536870912
  %184 = icmp eq i32 %183, 0
  %185 = and i1 %184, %182
  br i1 %185, label %186, label %189

186:                                              ; preds = %178
  %187 = add nsw i32 %118, 2
  %188 = add nsw i32 %187, %119
  br label %189

189:                                              ; preds = %167, %163, %178, %108, %186, %110
  %190 = phi i32 [ %176, %186 ], [ %99, %108 ], [ %99, %110 ], [ %99, %178 ], [ %99, %163 ], [ %99, %167 ]
  %191 = phi i32 [ %188, %186 ], [ %100, %108 ], [ %100, %110 ], [ %100, %178 ], [ %100, %163 ], [ %100, %167 ]
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %211, label %206

193:                                              ; preds = %54
  %194 = icmp ugt i32 %52, 1073741823
  %195 = icmp ne i8 %7, 0
  %196 = or i1 %195, %194
  %197 = add nsw i32 %1, -57344
  %198 = icmp ult i32 %197, 6400
  %199 = or i1 %198, %196
  %200 = add nsw i32 %1, -983040
  %201 = icmp ult i32 %200, 131072
  %202 = or i1 %201, %199
  %203 = and i32 %52, 536870912
  %204 = icmp eq i32 %203, 0
  %205 = and i1 %204, %202
  br i1 %205, label %206, label %211

206:                                              ; preds = %193, %189
  %207 = phi i32 [ %190, %189 ], [ %52, %193 ]
  %208 = phi i32 [ %191, %189 ], [ 2, %193 ]
  %209 = icmp eq i32 %207, -2147483647
  br i1 %209, label %211, label %210

210:                                              ; preds = %206
  store i32 %207, i32* %6, align 4
  br label %211

211:                                              ; preds = %193, %206, %189, %16, %11, %9, %210, %113
  %212 = phi i32 [ %208, %210 ], [ %114, %113 ], [ 0, %9 ], [ 0, %11 ], [ 0, %16 ], [ 0, %189 ], [ 1, %206 ], [ 0, %193 ]
  ret i32 %212
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ucnv_extSimpleMatchFromU_69(i32* readonly, i32, i32* nocapture, i8 signext) local_unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #4
  store i32 -1431655766, i32* %5, align 4
  %7 = call fastcc i32 @_ZL18ucnv_extMatchFromUPKiiPKDsiS2_iPjaa(i32* %0, i32 %1, i16* null, i32 0, i16* null, i32 0, i32* nonnull %5, i8 signext %3, i8 signext 1)
  %8 = icmp sgt i32 %7, 1
  br i1 %8, label %9, label %19

9:                                                ; preds = %4
  %10 = load i32, i32* %5, align 4
  %11 = lshr i32 %10, 24
  %12 = and i32 %11, 31
  %13 = and i32 %10, 16777215
  store i32 %13, i32* %5, align 4
  %14 = icmp ult i32 %12, 4
  br i1 %14, label %15, label %19

15:                                               ; preds = %9
  %16 = icmp slt i32 %10, 0
  store i32 %13, i32* %2, align 4
  %17 = sub nsw i32 0, %12
  %18 = select i1 %16, i32 %12, i32 %17
  br label %19

19:                                               ; preds = %9, %4, %15
  %20 = phi i32 [ %18, %15 ], [ 0, %4 ], [ 0, %9 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #4
  ret i32 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ucnv_extContinueMatchFromU_69(%struct.UConverter*, %struct.UConverterFromUnicodeArgs*, i32, i32*) local_unnamed_addr #0 {
  %5 = bitcast %struct.UConverter* %0 to i8*
  %6 = alloca [32 x i8], align 16
  %7 = alloca i32, align 4
  %8 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #4
  store i32 0, i32* %7, align 4
  %9 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 6
  %10 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %9, align 8
  %11 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %10, i64 0, i32 8, i32 22
  %12 = load i32*, i32** %11, align 8
  %13 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 31
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 32, i64 0
  %16 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 34
  %17 = load i8, i8* %16, align 1
  %18 = sext i8 %17 to i32
  %19 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %1, i64 0, i32 3
  %20 = load i16*, i16** %19, align 8
  %21 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %1, i64 0, i32 4
  %22 = bitcast i16** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = ptrtoint i16* %20 to i64
  %25 = sub i64 %23, %24
  %26 = lshr exact i64 %25, 1
  %27 = trunc i64 %26 to i32
  %28 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 11
  %29 = load i8, i8* %28, align 1
  %30 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %1, i64 0, i32 1
  %31 = load i8, i8* %30, align 2
  %32 = call fastcc i32 @_ZL18ucnv_extMatchFromUPKiiPKDsiS2_iPjaa(i32* %12, i32 %14, i16* %15, i32 %18, i16* %20, i32 %27, i32* nonnull %7, i8 signext %29, i8 signext %31)
  %33 = icmp sgt i32 %32, 1
  br i1 %33, label %34, label %112

34:                                               ; preds = %4
  %35 = add nsw i32 %32, -2
  %36 = load i8, i8* %16, align 1
  %37 = sext i8 %36 to i32
  %38 = icmp slt i32 %35, %37
  br i1 %38, label %44, label %39

39:                                               ; preds = %34
  %40 = sub nsw i32 %35, %37
  %41 = load i16*, i16** %19, align 8
  %42 = sext i32 %40 to i64
  %43 = getelementptr inbounds i16, i16* %41, i64 %42
  store i16* %43, i16** %19, align 8
  br label %51

44:                                               ; preds = %34
  %45 = sub nsw i32 %37, %35
  %46 = sext i32 %35 to i64
  %47 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 32, i64 %46
  %48 = tail call i16* @u_memmove_69(i16* %15, i16* %47, i32 %45) #4
  %49 = trunc i32 %45 to i8
  %50 = sub i8 0, %49
  br label %51

51:                                               ; preds = %44, %39
  %52 = phi i8 [ %50, %44 ], [ 0, %39 ]
  store i8 %52, i8* %16, align 1
  store i32 -1, i32* %13, align 8
  %53 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %9, align 8
  %54 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %53, i64 0, i32 8, i32 22
  %55 = load i32*, i32** %54, align 8
  %56 = load i32, i32* %7, align 4
  %57 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %1, i64 0, i32 5
  %58 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %1, i64 0, i32 6
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %1, i64 0, i32 7
  %61 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %61) #4
  %62 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 1
  %63 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 2
  %64 = lshr i32 %56, 24
  %65 = and i32 %64, 31
  %66 = icmp ult i32 %65, 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %61, i8 -86, i64 32, i1 false) #4
  br i1 %66, label %67, label %79

67:                                               ; preds = %51
  switch i32 %65, label %88 [
    i32 3, label %68
    i32 2, label %71
    i32 1, label %76
  ]

68:                                               ; preds = %67
  %69 = lshr i32 %56, 16
  %70 = trunc i32 %69 to i8
  store i8 %70, i8* %62, align 1
  br label %71

71:                                               ; preds = %68, %67
  %72 = phi i8* [ %62, %67 ], [ %63, %68 ]
  %73 = lshr i32 %56, 8
  %74 = trunc i32 %73 to i8
  %75 = getelementptr inbounds i8, i8* %72, i64 1
  store i8 %74, i8* %72, align 1
  br label %76

76:                                               ; preds = %71, %67
  %77 = phi i8* [ %62, %67 ], [ %75, %71 ]
  %78 = trunc i32 %56 to i8
  store i8 %78, i8* %77, align 1
  br label %88

79:                                               ; preds = %51
  %80 = and i32 %56, 16777215
  %81 = bitcast i32* %55 to i8*
  %82 = getelementptr inbounds i32, i32* %55, i64 8
  %83 = load i32, i32* %82, align 4
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %81, i64 %84
  %86 = zext i32 %80 to i64
  %87 = getelementptr inbounds i8, i8* %85, i64 %86
  br label %88

88:                                               ; preds = %79, %76, %67
  %89 = phi i8* [ %87, %79 ], [ %62, %76 ], [ %62, %67 ]
  %90 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 16
  %91 = load i32, i32* %90, align 8
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %109, label %93

93:                                               ; preds = %88
  %94 = icmp sgt i32 %91, 1
  %95 = icmp eq i32 %65, 1
  %96 = and i1 %95, %94
  br i1 %96, label %101, label %97

97:                                               ; preds = %93
  %98 = icmp eq i32 %91, 1
  %99 = icmp ugt i32 %65, 1
  %100 = and i1 %99, %98
  br i1 %100, label %101, label %109

101:                                              ; preds = %97, %93
  %102 = phi i32 [ 1, %93 ], [ 2, %97 ]
  %103 = phi i8 [ 15, %93 ], [ 14, %97 ]
  store i32 %102, i32* %90, align 8
  store i8 %103, i8* %61, align 16
  %104 = icmp eq i8* %89, %62
  br i1 %104, label %107, label %105

105:                                              ; preds = %101
  %106 = zext i32 %65 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %62, i8* align 1 %89, i64 %106, i1 false) #4
  br label %107

107:                                              ; preds = %105, %101
  %108 = add nuw nsw i32 %65, 1
  br label %109

109:                                              ; preds = %88, %97, %107
  %110 = phi i8* [ %89, %88 ], [ %61, %107 ], [ %89, %97 ]
  %111 = phi i32 [ %65, %88 ], [ %108, %107 ], [ %65, %97 ]
  call void @ucnv_fromUWriteBytes_69(%struct.UConverter* %0, i8* %110, i32 %111, i8** %57, i8* %59, i32** %60, i32 %2, i32* %3) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %61) #4
  br label %286

112:                                              ; preds = %4
  %113 = icmp slt i32 %32, 0
  br i1 %113, label %114, label %277

114:                                              ; preds = %112
  %115 = load i16*, i16** %19, align 8
  %116 = bitcast i16* %115 to i8*
  %117 = sub nsw i32 -2, %32
  %118 = load i8, i8* %16, align 1
  %119 = sext i8 %118 to i32
  %120 = icmp sgt i32 %117, %119
  br i1 %120, label %121, label %274

121:                                              ; preds = %114
  %122 = sext i8 %118 to i64
  %123 = sext i32 %117 to i64
  %124 = sext i32 %32 to i64
  %125 = sub nsw i64 -2, %124
  %126 = sub nsw i64 %125, %122
  %127 = icmp ult i64 %126, 16
  br i1 %127, label %230, label %128

128:                                              ; preds = %121
  %129 = shl nsw i64 %122, 1
  %130 = add nsw i64 %129, 212
  %131 = getelementptr i8, i8* %5, i64 %130
  %132 = getelementptr %struct.UConverter, %struct.UConverter* %0, i64 0, i32 31
  %133 = bitcast i32* %132 to i8*
  %134 = sext i32 %32 to i64
  %135 = mul nsw i64 %134, -2
  %136 = getelementptr i8, i8* %133, i64 %135
  %137 = add nsw i64 %134, %122
  %138 = sub nsw i64 -2, %137
  %139 = getelementptr i16, i16* %115, i64 %138
  %140 = bitcast i16* %139 to i8*
  %141 = icmp ult i8* %131, %140
  %142 = icmp ugt i8* %136, %116
  %143 = and i1 %141, %142
  br i1 %143, label %230, label %144

144:                                              ; preds = %128
  %145 = and i64 %126, -16
  %146 = add nsw i64 %145, %122
  %147 = getelementptr i16, i16* %115, i64 %145
  %148 = add nsw i64 %145, -16
  %149 = lshr exact i64 %148, 4
  %150 = add nuw nsw i64 %149, 1
  %151 = and i64 %150, 3
  %152 = icmp ult i64 %148, 48
  br i1 %152, label %208, label %153

153:                                              ; preds = %144
  %154 = sub nsw i64 %150, %151
  br label %155

155:                                              ; preds = %155, %153
  %156 = phi i64 [ 0, %153 ], [ %205, %155 ]
  %157 = phi i64 [ %154, %153 ], [ %206, %155 ]
  %158 = add i64 %156, %122
  %159 = getelementptr i16, i16* %115, i64 %156
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 2, !alias.scope !34
  %162 = getelementptr i16, i16* %159, i64 8
  %163 = bitcast i16* %162 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 2, !alias.scope !34
  %165 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 32, i64 %158
  %166 = bitcast i16* %165 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %166, align 2, !alias.scope !37, !noalias !34
  %167 = getelementptr inbounds i16, i16* %165, i64 8
  %168 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %164, <8 x i16>* %168, align 2, !alias.scope !37, !noalias !34
  %169 = or i64 %156, 16
  %170 = add i64 %169, %122
  %171 = getelementptr i16, i16* %115, i64 %169
  %172 = bitcast i16* %171 to <8 x i16>*
  %173 = load <8 x i16>, <8 x i16>* %172, align 2, !alias.scope !34
  %174 = getelementptr i16, i16* %171, i64 8
  %175 = bitcast i16* %174 to <8 x i16>*
  %176 = load <8 x i16>, <8 x i16>* %175, align 2, !alias.scope !34
  %177 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 32, i64 %170
  %178 = bitcast i16* %177 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %178, align 2, !alias.scope !37, !noalias !34
  %179 = getelementptr inbounds i16, i16* %177, i64 8
  %180 = bitcast i16* %179 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %180, align 2, !alias.scope !37, !noalias !34
  %181 = or i64 %156, 32
  %182 = add i64 %181, %122
  %183 = getelementptr i16, i16* %115, i64 %181
  %184 = bitcast i16* %183 to <8 x i16>*
  %185 = load <8 x i16>, <8 x i16>* %184, align 2, !alias.scope !34
  %186 = getelementptr i16, i16* %183, i64 8
  %187 = bitcast i16* %186 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 2, !alias.scope !34
  %189 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 32, i64 %182
  %190 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %185, <8 x i16>* %190, align 2, !alias.scope !37, !noalias !34
  %191 = getelementptr inbounds i16, i16* %189, i64 8
  %192 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %188, <8 x i16>* %192, align 2, !alias.scope !37, !noalias !34
  %193 = or i64 %156, 48
  %194 = add i64 %193, %122
  %195 = getelementptr i16, i16* %115, i64 %193
  %196 = bitcast i16* %195 to <8 x i16>*
  %197 = load <8 x i16>, <8 x i16>* %196, align 2, !alias.scope !34
  %198 = getelementptr i16, i16* %195, i64 8
  %199 = bitcast i16* %198 to <8 x i16>*
  %200 = load <8 x i16>, <8 x i16>* %199, align 2, !alias.scope !34
  %201 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 32, i64 %194
  %202 = bitcast i16* %201 to <8 x i16>*
  store <8 x i16> %197, <8 x i16>* %202, align 2, !alias.scope !37, !noalias !34
  %203 = getelementptr inbounds i16, i16* %201, i64 8
  %204 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %200, <8 x i16>* %204, align 2, !alias.scope !37, !noalias !34
  %205 = add i64 %156, 64
  %206 = add i64 %157, -4
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %208, label %155, !llvm.loop !39

208:                                              ; preds = %155, %144
  %209 = phi i64 [ 0, %144 ], [ %205, %155 ]
  %210 = icmp eq i64 %151, 0
  br i1 %210, label %228, label %211

211:                                              ; preds = %208, %211
  %212 = phi i64 [ %225, %211 ], [ %209, %208 ]
  %213 = phi i64 [ %226, %211 ], [ %151, %208 ]
  %214 = add i64 %212, %122
  %215 = getelementptr i16, i16* %115, i64 %212
  %216 = bitcast i16* %215 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 2, !alias.scope !34
  %218 = getelementptr i16, i16* %215, i64 8
  %219 = bitcast i16* %218 to <8 x i16>*
  %220 = load <8 x i16>, <8 x i16>* %219, align 2, !alias.scope !34
  %221 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 32, i64 %214
  %222 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %222, align 2, !alias.scope !37, !noalias !34
  %223 = getelementptr inbounds i16, i16* %221, i64 8
  %224 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %224, align 2, !alias.scope !37, !noalias !34
  %225 = add i64 %212, 16
  %226 = add i64 %213, -1
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %228, label %211, !llvm.loop !40

228:                                              ; preds = %211, %208
  %229 = icmp eq i64 %126, %145
  br i1 %229, label %274, label %230

230:                                              ; preds = %228, %128, %121
  %231 = phi i64 [ %122, %128 ], [ %122, %121 ], [ %146, %228 ]
  %232 = phi i16* [ %115, %128 ], [ %115, %121 ], [ %147, %228 ]
  %233 = sub nsw i64 2, %231
  %234 = sub i64 %233, %124
  %235 = sub nsw i64 -3, %231
  %236 = sub i64 %235, %124
  %237 = and i64 %234, 3
  %238 = icmp eq i64 %237, 0
  br i1 %238, label %249, label %239

239:                                              ; preds = %230, %239
  %240 = phi i64 [ %246, %239 ], [ %231, %230 ]
  %241 = phi i16* [ %243, %239 ], [ %232, %230 ]
  %242 = phi i64 [ %247, %239 ], [ %237, %230 ]
  %243 = getelementptr inbounds i16, i16* %241, i64 1
  %244 = load i16, i16* %241, align 2
  %245 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 32, i64 %240
  store i16 %244, i16* %245, align 2
  %246 = add nsw i64 %240, 1
  %247 = add i64 %242, -1
  %248 = icmp eq i64 %247, 0
  br i1 %248, label %249, label %239, !llvm.loop !41

249:                                              ; preds = %239, %230
  %250 = phi i16* [ undef, %230 ], [ %243, %239 ]
  %251 = phi i64 [ %231, %230 ], [ %246, %239 ]
  %252 = phi i16* [ %232, %230 ], [ %243, %239 ]
  %253 = icmp ult i64 %236, 3
  br i1 %253, label %274, label %254

254:                                              ; preds = %249, %254
  %255 = phi i64 [ %272, %254 ], [ %251, %249 ]
  %256 = phi i16* [ %269, %254 ], [ %252, %249 ]
  %257 = getelementptr inbounds i16, i16* %256, i64 1
  %258 = load i16, i16* %256, align 2
  %259 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 32, i64 %255
  store i16 %258, i16* %259, align 2
  %260 = add nsw i64 %255, 1
  %261 = getelementptr inbounds i16, i16* %256, i64 2
  %262 = load i16, i16* %257, align 2
  %263 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 32, i64 %260
  store i16 %262, i16* %263, align 2
  %264 = add nsw i64 %255, 2
  %265 = getelementptr inbounds i16, i16* %256, i64 3
  %266 = load i16, i16* %261, align 2
  %267 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 32, i64 %264
  store i16 %266, i16* %267, align 2
  %268 = add nsw i64 %255, 3
  %269 = getelementptr inbounds i16, i16* %256, i64 4
  %270 = load i16, i16* %265, align 2
  %271 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 32, i64 %268
  store i16 %270, i16* %271, align 2
  %272 = add nsw i64 %255, 4
  %273 = icmp eq i64 %272, %123
  br i1 %273, label %274, label %254, !llvm.loop !42

274:                                              ; preds = %249, %254, %228, %114
  %275 = phi i16* [ %115, %114 ], [ %147, %228 ], [ %250, %249 ], [ %269, %254 ]
  store i16* %275, i16** %19, align 8
  %276 = trunc i32 %117 to i8
  store i8 %276, i8* %16, align 1
  br label %286

277:                                              ; preds = %112
  %278 = icmp eq i32 %32, 1
  br i1 %278, label %279, label %281

279:                                              ; preds = %277
  %280 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 25
  store i8 1, i8* %280, align 1
  br label %281

281:                                              ; preds = %279, %277
  %282 = load i32, i32* %13, align 8
  %283 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 17
  store i32 %282, i32* %283, align 4
  store i32 -1, i32* %13, align 8
  %284 = load i8, i8* %16, align 1
  %285 = sub i8 0, %284
  store i8 %285, i8* %16, align 1
  store i32 10, i32* %3, align 4
  br label %286

286:                                              ; preds = %274, %281, %109
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #4
  ret void
}

declare i16* @u_memmove_69(i16*, i16*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @ucnv_extGetUnicodeSet_69(%struct.UConverterSharedData* nocapture readonly, %struct.USetAdder* nocapture readonly, i32, i32, i32* nocapture readnone) local_unnamed_addr #0 {
  %6 = alloca [19 x i16], align 16
  %7 = bitcast [19 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 38, i8* nonnull %7) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 38, i1 false)
  %8 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 22
  %9 = load i32*, i32** %8, align 8
  %10 = icmp eq i32* %9, null
  br i1 %10, label %158, label %11

11:                                               ; preds = %5
  %12 = bitcast i32* %9 to i8*
  %13 = getelementptr inbounds i32, i32* %9, i64 10
  %14 = load i32, i32* %13, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i8, i8* %12, i64 %15
  %17 = bitcast i8* %16 to i16*
  %18 = getelementptr inbounds i32, i32* %9, i64 13
  %19 = load i32, i32* %18, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %12, i64 %20
  %22 = bitcast i8* %21 to i16*
  %23 = getelementptr inbounds i32, i32* %9, i64 15
  %24 = load i32, i32* %23, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %12, i64 %25
  %27 = bitcast i8* %26 to i32*
  %28 = getelementptr inbounds i32, i32* %9, i64 11
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %3, 2
  br i1 %30, label %38, label %31

31:                                               ; preds = %11
  %32 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 14
  %33 = load i8, i8* %32, align 4
  %34 = icmp eq i8 %33, -37
  %35 = icmp ne i32 %3, 0
  %36 = or i1 %35, %34
  %37 = select i1 %36, i32 2, i32 1
  br label %38

38:                                               ; preds = %31, %11
  %39 = phi i32 [ 3, %11 ], [ %37, %31 ]
  %40 = icmp sgt i32 %29, 0
  br i1 %40, label %41, label %158

41:                                               ; preds = %38
  %42 = icmp eq i32 %2, 0
  %43 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 1
  %44 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 0
  %45 = getelementptr inbounds [19 x i16], [19 x i16]* %6, i64 0, i64 0
  %46 = getelementptr inbounds [19 x i16], [19 x i16]* %6, i64 0, i64 1
  %47 = zext i32 %29 to i64
  br label %48

48:                                               ; preds = %154, %41
  %49 = phi i64 [ 0, %41 ], [ %156, %154 ]
  %50 = phi i32 [ 0, %41 ], [ %155, %154 ]
  %51 = getelementptr inbounds i16, i16* %17, i64 %49
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i32
  %54 = icmp slt i32 %29, %53
  br i1 %54, label %55, label %152

55:                                               ; preds = %48
  %56 = zext i16 %52 to i64
  %57 = getelementptr inbounds i16, i16* %17, i64 %56
  br label %58

58:                                               ; preds = %148, %55
  %59 = phi i64 [ 0, %55 ], [ %150, %148 ]
  %60 = phi i32 [ %50, %55 ], [ %149, %148 ]
  %61 = getelementptr inbounds i16, i16* %57, i64 %59
  %62 = load i16, i16* %61, align 2
  %63 = icmp eq i16 %62, 0
  br i1 %63, label %146, label %64

64:                                               ; preds = %58
  %65 = zext i16 %62 to i64
  %66 = shl nuw nsw i64 %65, 2
  %67 = getelementptr inbounds i16, i16* %22, i64 %66
  br label %68

68:                                               ; preds = %142, %64
  %69 = phi i16* [ %67, %64 ], [ %71, %142 ]
  %70 = phi i32 [ %60, %64 ], [ %143, %142 ]
  %71 = getelementptr inbounds i16, i16* %69, i64 1
  %72 = load i16, i16* %69, align 2
  %73 = zext i16 %72 to i64
  %74 = getelementptr inbounds i32, i32* %27, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %142, label %77

77:                                               ; preds = %68
  %78 = icmp ult i32 %75, 16777216
  br i1 %78, label %79, label %92

79:                                               ; preds = %77
  %80 = icmp ult i32 %70, 65536
  br i1 %80, label %81, label %83

81:                                               ; preds = %79
  %82 = trunc i32 %70 to i16
  store i16 %82, i16* %45, align 16
  br label %90

83:                                               ; preds = %79
  %84 = lshr i32 %70, 10
  %85 = trunc i32 %84 to i16
  %86 = add i16 %85, -10304
  store i16 %86, i16* %45, align 16
  %87 = trunc i32 %70 to i16
  %88 = and i16 %87, 1023
  %89 = or i16 %88, -9216
  store i16 %89, i16* %46, align 2
  br label %90

90:                                               ; preds = %83, %81
  %91 = phi i32 [ 1, %81 ], [ 2, %83 ]
  call fastcc void @_ZL27ucnv_extGetUnicodeSetStringPK20UConverterSharedDataPKiPK9USetAdder20UConverterUnicodeSetiiPDsiiP10UErrorCode(i32* nonnull %9, %struct.USetAdder* %1, i32 %2, i32 %39, i32 %70, i16* nonnull %45, i32 %91, i32 %75)
  br label %142

92:                                               ; preds = %77
  br i1 %42, label %93, label %96

93:                                               ; preds = %92
  %94 = and i32 %75, -1610612736
  %95 = icmp eq i32 %94, -2147483648
  br i1 %95, label %99, label %142

96:                                               ; preds = %92
  %97 = and i32 %75, 536870912
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %142

99:                                               ; preds = %93, %96
  %100 = lshr i32 %75, 24
  %101 = and i32 %100, 31
  %102 = icmp ult i32 %101, %39
  br i1 %102, label %142, label %103

103:                                              ; preds = %99
  switch i32 %3, label %139 [
    i32 2, label %104
    i32 3, label %110
    i32 4, label %117
    i32 5, label %128
  ]

104:                                              ; preds = %103
  %105 = and i32 %75, 520093696
  %106 = icmp eq i32 %105, 50331648
  %107 = and i32 %75, 16711680
  %108 = icmp ult i32 %107, 8585216
  %109 = and i1 %106, %108
  br i1 %109, label %139, label %142

110:                                              ; preds = %103
  %111 = and i32 %75, 520093696
  %112 = icmp eq i32 %111, 33554432
  br i1 %112, label %113, label %142

113:                                              ; preds = %110
  %114 = and i32 %75, 16777215
  %115 = add nsw i32 %114, -33088
  %116 = icmp ult i32 %115, 28349
  br i1 %116, label %139, label %142

117:                                              ; preds = %103
  %118 = and i32 %75, 520093696
  %119 = icmp eq i32 %118, 33554432
  br i1 %119, label %120, label %142

120:                                              ; preds = %117
  %121 = add i32 %75, 24159
  %122 = and i32 %121, 65534
  %123 = icmp ult i32 %122, 23902
  br i1 %123, label %124, label %142

124:                                              ; preds = %120
  %125 = add i32 %75, 95
  %126 = and i32 %125, 254
  %127 = icmp ult i32 %126, 94
  br i1 %127, label %139, label %142

128:                                              ; preds = %103
  %129 = and i32 %75, 520093696
  %130 = icmp eq i32 %129, 33554432
  br i1 %130, label %131, label %142

131:                                              ; preds = %128
  %132 = add i32 %75, 24159
  %133 = and i32 %132, 65534
  %134 = icmp ult i32 %133, 23646
  br i1 %134, label %135, label %142

135:                                              ; preds = %131
  %136 = add i32 %75, 95
  %137 = and i32 %136, 254
  %138 = icmp ult i32 %137, 94
  br i1 %138, label %139, label %142

139:                                              ; preds = %104, %103, %135, %124, %113
  %140 = load void (%struct.USet*, i32)*, void (%struct.USet*, i32)** %43, align 8
  %141 = load %struct.USet*, %struct.USet** %44, align 8
  call void %140(%struct.USet* %141, i32 %70) #4
  br label %142

142:                                              ; preds = %96, %93, %99, %68, %139, %90, %128, %131, %135, %117, %120, %124, %110, %113, %104
  %143 = add nsw i32 %70, 1
  %144 = and i32 %143, 15
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %148, label %68

146:                                              ; preds = %58
  %147 = add nsw i32 %60, 16
  br label %148

148:                                              ; preds = %142, %146
  %149 = phi i32 [ %147, %146 ], [ %143, %142 ]
  %150 = add nuw nsw i64 %59, 1
  %151 = icmp eq i64 %150, 64
  br i1 %151, label %154, label %58

152:                                              ; preds = %48
  %153 = add nsw i32 %50, 1024
  br label %154

154:                                              ; preds = %148, %152
  %155 = phi i32 [ %153, %152 ], [ %149, %148 ]
  %156 = add nuw nsw i64 %49, 1
  %157 = icmp eq i64 %156, %47
  br i1 %157, label %158, label %48

158:                                              ; preds = %154, %38, %5
  call void @llvm.lifetime.end.p0i8(i64 38, i8* nonnull %7) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL27ucnv_extGetUnicodeSetStringPK20UConverterSharedDataPKiPK9USetAdder20UConverterUnicodeSetiiPDsiiP10UErrorCode(i32* nocapture readonly, %struct.USetAdder* nocapture readonly, i32, i32, i32, i16*, i32, i32) unnamed_addr #0 {
  %9 = bitcast i32* %0 to i8*
  %10 = getelementptr inbounds i32, i32* %0, i64 5
  %11 = load i32, i32* %10, align 4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %9, i64 %12
  %14 = bitcast i8* %13 to i16*
  %15 = sext i32 %7 to i64
  %16 = getelementptr inbounds i16, i16* %14, i64 %15
  %17 = getelementptr inbounds i32, i32* %0, i64 6
  %18 = load i32, i32* %17, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i8, i8* %9, i64 %19
  %21 = bitcast i8* %20 to i32*
  %22 = getelementptr inbounds i32, i32* %21, i64 %15
  %23 = getelementptr inbounds i16, i16* %16, i64 1
  %24 = load i16, i16* %16, align 2
  %25 = getelementptr inbounds i32, i32* %22, i64 1
  %26 = load i32, i32* %22, align 4
  %27 = icmp eq i32 %2, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %8
  %29 = and i32 %26, -1610612736
  %30 = icmp eq i32 %29, -2147483648
  br i1 %30, label %34, label %52

31:                                               ; preds = %8
  %32 = and i32 %26, 536870912
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %52

34:                                               ; preds = %28, %31
  %35 = lshr i32 %26, 24
  %36 = and i32 %35, 31
  %37 = icmp slt i32 %36, %3
  br i1 %37, label %52, label %38

38:                                               ; preds = %34
  %39 = icmp ult i32 %4, 65536
  %40 = select i1 %39, i32 1, i32 2
  %41 = icmp eq i32 %40, %6
  br i1 %41, label %42, label %47

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 1
  %44 = load void (%struct.USet*, i32)*, void (%struct.USet*, i32)** %43, align 8
  %45 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 0
  %46 = load %struct.USet*, %struct.USet** %45, align 8
  tail call void %44(%struct.USet* %46, i32 %4) #4
  br label %52

47:                                               ; preds = %38
  %48 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 3
  %49 = load void (%struct.USet*, i16*, i32)*, void (%struct.USet*, i16*, i32)** %48, align 8
  %50 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 0
  %51 = load %struct.USet*, %struct.USet** %50, align 8
  tail call void %49(%struct.USet* %51, i16* %5, i32 %6) #4
  br label %52

52:                                               ; preds = %31, %28, %34, %42, %47
  %53 = icmp eq i16 %24, 0
  br i1 %53, label %88, label %54

54:                                               ; preds = %52
  %55 = sext i32 %6 to i64
  %56 = getelementptr inbounds i16, i16* %5, i64 %55
  %57 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 3
  %58 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 0
  %59 = add nsw i32 %6, 1
  %60 = zext i16 %24 to i64
  br label %61

61:                                               ; preds = %85, %54
  %62 = phi i64 [ 0, %54 ], [ %86, %85 ]
  %63 = getelementptr inbounds i16, i16* %23, i64 %62
  %64 = load i16, i16* %63, align 2
  store i16 %64, i16* %56, align 2
  %65 = getelementptr inbounds i32, i32* %25, i64 %62
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %85, label %68

68:                                               ; preds = %61
  %69 = icmp ult i32 %66, 16777216
  br i1 %69, label %70, label %71

70:                                               ; preds = %68
  tail call fastcc void @_ZL27ucnv_extGetUnicodeSetStringPK20UConverterSharedDataPKiPK9USetAdder20UConverterUnicodeSetiiPDsiiP10UErrorCode(i32* %0, %struct.USetAdder* %1, i32 %2, i32 %3, i32 %4, i16* %5, i32 %59, i32 %66)
  br label %85

71:                                               ; preds = %68
  br i1 %27, label %72, label %75

72:                                               ; preds = %71
  %73 = and i32 %66, -1610612736
  %74 = icmp eq i32 %73, -2147483648
  br i1 %74, label %78, label %85

75:                                               ; preds = %71
  %76 = and i32 %66, 536870912
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %85

78:                                               ; preds = %72, %75
  %79 = lshr i32 %66, 24
  %80 = and i32 %79, 31
  %81 = icmp slt i32 %80, %3
  br i1 %81, label %85, label %82

82:                                               ; preds = %78
  %83 = load void (%struct.USet*, i16*, i32)*, void (%struct.USet*, i16*, i32)** %57, align 8
  %84 = load %struct.USet*, %struct.USet** %58, align 8
  tail call void %83(%struct.USet* %84, i16* %5, i32 %59) #4
  br label %85

85:                                               ; preds = %75, %72, %78, %61, %82, %70
  %86 = add nuw nsw i64 %62, 1
  %87 = icmp eq i64 %86, %60
  br i1 %87, label %88, label %61

88:                                               ; preds = %85, %52
  ret void
}

declare void @ucnv_toUWriteCodePoint_69(%struct.UConverter*, i32, i16**, i16*, i32**, i32, i32*) local_unnamed_addr #3

declare void @ucnv_toUWriteUChars_69(%struct.UConverter*, i16*, i32, i16**, i16*, i32**, i32, i32*) local_unnamed_addr #3

declare void @ucnv_fromUWriteBytes_69(%struct.UConverter*, i8*, i32, i8**, i8*, i32**, i32, i32*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = !{!9}
!9 = distinct !{!9, !10}
!10 = distinct !{!10, !"LVerDomain"}
!11 = !{!12}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !5}
!15 = distinct !{!15, !5}
!16 = distinct !{!16, !3}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = !{!21}
!21 = distinct !{!21, !19}
!22 = distinct !{!22, !3}
!23 = distinct !{!23, !5}
!24 = distinct !{!24, !5}
!25 = distinct !{!25, !3}
!26 = !{!27}
!27 = distinct !{!27, !28}
!28 = distinct !{!28, !"LVerDomain"}
!29 = !{!30}
!30 = distinct !{!30, !28}
!31 = distinct !{!31, !3}
!32 = distinct !{!32, !5}
!33 = distinct !{!33, !3}
!34 = !{!35}
!35 = distinct !{!35, !36}
!36 = distinct !{!36, !"LVerDomain"}
!37 = !{!38}
!38 = distinct !{!38, !36}
!39 = distinct !{!39, !3}
!40 = distinct !{!40, !5}
!41 = distinct !{!41, !5}
!42 = distinct !{!42, !3}
