; ModuleID = '../../services/network/trust_tokens/ed25519_trust_token_request_signer.cc'
source_filename = "../../services/network/trust_tokens/ed25519_trust_token_request_signer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.network::Ed25519TrustTokenRequestSigner" = type { %"class.network::TrustTokenRequestSigningHelper::Signer" }
%"class.network::TrustTokenRequestSigningHelper::Signer" = type { i32 (...)** }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.base::span" = type { %"struct.base::internal::ExtentStorage", i8* }
%"struct.base::internal::ExtentStorage" = type { i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.3 }
%union.anon.3 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZTVN7network30Ed25519TrustTokenRequestSignerE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.network::Ed25519TrustTokenRequestSigner"*)* @_ZN7network30Ed25519TrustTokenRequestSignerD2Ev to i8*), i8* bitcast (void (%"class.network::Ed25519TrustTokenRequestSigner"*)* @_ZN7network30Ed25519TrustTokenRequestSignerD0Ev to i8*), i8* bitcast (void (%"class.absl::optional"*, %"class.network::Ed25519TrustTokenRequestSigner"*, i64, i8*, i64, i8*)* @_ZN7network30Ed25519TrustTokenRequestSigner4SignEN4base4spanIKhLm18446744073709551615EEES4_ to i8*), i8* bitcast (i1 (%"class.network::Ed25519TrustTokenRequestSigner"*, i64, i8*, i64, i8*, %"class.base::span"*)* @_ZN7network30Ed25519TrustTokenRequestSigner6VerifyEN4base4spanIKhLm18446744073709551615EEES4_S4_ to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.network::Ed25519TrustTokenRequestSigner"*)* @_ZN7network30Ed25519TrustTokenRequestSigner22GetAlgorithmIdentifierEv to i8*)] }, align 8
@.str = private unnamed_addr constant [8 x i8] c"ed25519\00", align 1

@_ZN7network30Ed25519TrustTokenRequestSignerC1Ev = hidden unnamed_addr alias void (%"class.network::Ed25519TrustTokenRequestSigner"*), void (%"class.network::Ed25519TrustTokenRequestSigner"*)* @_ZN7network30Ed25519TrustTokenRequestSignerC2Ev
@_ZN7network30Ed25519TrustTokenRequestSignerD1Ev = hidden unnamed_addr alias void (%"class.network::Ed25519TrustTokenRequestSigner"*), void (%"class.network::Ed25519TrustTokenRequestSigner"*)* @_ZN7network30Ed25519TrustTokenRequestSignerD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN7network30Ed25519TrustTokenRequestSignerC2Ev(%"class.network::Ed25519TrustTokenRequestSigner"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.network::Ed25519TrustTokenRequestSigner", %"class.network::Ed25519TrustTokenRequestSigner"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7network30Ed25519TrustTokenRequestSignerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN7network30Ed25519TrustTokenRequestSignerD2Ev(%"class.network::Ed25519TrustTokenRequestSigner"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network30Ed25519TrustTokenRequestSignerD0Ev(%"class.network::Ed25519TrustTokenRequestSigner"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.network::Ed25519TrustTokenRequestSigner"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network30Ed25519TrustTokenRequestSigner4SignEN4base4spanIKhLm18446744073709551615EEES4_(%"class.absl::optional"* noalias nocapture sret, %"class.network::Ed25519TrustTokenRequestSigner"* nocapture readnone, i64, i8*, i64, i8*) unnamed_addr #2 align 2 {
  %7 = icmp eq i64 %2, 64
  br i1 %7, label %12, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %9, align 8
  %10 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %11 = bitcast %union.anon* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 24, i1 false) #8
  br label %33

12:                                               ; preds = %6
  %13 = tail call i8* @_Znwm(i64 64) #7
  %14 = ptrtoint i8* %13 to i64
  %15 = getelementptr inbounds i8, i8* %13, i64 64
  %16 = ptrtoint i8* %15 to i64
  %17 = sub i64 64, %14
  %18 = getelementptr i8, i8* %13, i64 %17
  %19 = ptrtoint i8* %18 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %13, i8 0, i64 %19, i1 false) #8
  %20 = tail call i32 @ED25519_sign(i8* nonnull %13, i8* %5, i64 %4, i8* %3) #8
  %21 = icmp eq i32 %20, 0
  %22 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  br i1 %21, label %30, label %23

23:                                               ; preds = %12
  store i8 1, i8* %22, align 8
  %24 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %25 = bitcast %"class.std::__1::vector"* %24 to i64*
  store i64 %14, i64* %25, align 8
  %26 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %27 = bitcast i8** %26 to i64*
  store i64 %16, i64* %27, align 8
  %28 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %29 = bitcast i8** %28 to i64*
  store i64 %16, i64* %29, align 8
  br label %33

30:                                               ; preds = %12
  store i8 0, i8* %22, align 8
  %31 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %32 = bitcast %union.anon* %31 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #8
  tail call void @_ZdlPv(i8* nonnull %13) #7
  br label %33

33:                                               ; preds = %30, %23, %8
  ret void
}

declare i32 @ED25519_sign(i8*, i8*, i64, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7network30Ed25519TrustTokenRequestSigner6VerifyEN4base4spanIKhLm18446744073709551615EEES4_S4_(%"class.network::Ed25519TrustTokenRequestSigner"* nocapture readnone, i64, i8*, i64, i8*, %"class.base::span"* nocapture readonly byval(%"class.base::span") align 8) unnamed_addr #2 align 2 {
  %7 = icmp eq i64 %3, 64
  br i1 %7, label %8, label %17

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"class.base::span", %"class.base::span"* %5, i64 0, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, 32
  br i1 %11, label %12, label %17

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.base::span", %"class.base::span"* %5, i64 0, i32 1
  %14 = load i8*, i8** %13, align 8
  %15 = tail call i32 @ED25519_verify(i8* %2, i64 %1, i8* %4, i8* %14) #8
  %16 = icmp ne i32 %15, 0
  br label %17

17:                                               ; preds = %8, %6, %12
  %18 = phi i1 [ %16, %12 ], [ false, %6 ], [ false, %8 ]
  ret i1 %18
}

declare i32 @ED25519_verify(i8*, i64, i8*, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network30Ed25519TrustTokenRequestSigner22GetAlgorithmIdentifierEv(%"class.std::__1::basic_string"* noalias sret, %"class.network::Ed25519TrustTokenRequestSigner"* nocapture readnone) unnamed_addr #2 align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  store i8 7, i8* %4, align 1
  %5 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 7, i1 false) #8
  %6 = getelementptr inbounds i8, i8* %5, i64 7
  store i8 0, i8* %6, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
