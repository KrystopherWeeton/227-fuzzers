; ModuleID = '../../third_party/skia/modules/sksg/src/SkSGImage.cpp'
source_filename = "../../third_party/skia/modules/sksg/src/SkSGImage.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkPaint = type <{ %class.sk_sp.18, %class.sk_sp.17, %class.sk_sp.19, %class.sk_sp.16, %class.sk_sp.20, %struct.SkRGBA4f, float, float, %union.anon.21, [4 x i8] }>
%class.sk_sp.18 = type { %class.SkPathEffect* }
%class.SkPathEffect = type opaque
%class.sk_sp.17 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.19 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type opaque
%class.sk_sp.16 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.20 = type { %class.SkImageFilter* }
%class.SkImageFilter = type opaque
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon.21 = type { %struct.anon }
%struct.anon = type { i32 }
%"class.sksg::RenderNode::ScopedRenderContext" = type <{ %class.SkCanvas*, %"struct.sksg::RenderNode::RenderContext", %class.sk_sp.17, i32, [4 x i8] }>
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.7, [384 x i64], %class.sk_sp.8, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.10" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.7 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.8 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%"struct.sksg::RenderNode::RenderContext" = type { %class.sk_sp.16, %class.sk_sp.17, %class.sk_sp.17, %class.SkMatrix, %class.SkMatrix, float, i32 }
%class.SkMatrix = type { [9 x float], i32 }
%"class.sksg::Image" = type <{ %"class.sksg::RenderNode.base", [2 x i8], %struct.SkSamplingOptions, %class.sk_sp, i8, [7 x i8] }>
%"class.sksg::RenderNode.base" = type { %"class.sksg::Node.base" }
%"class.sksg::Node.base" = type <{ %class.SkRefCnt.base, [4 x i8], %union.anon, %struct.SkRect, i16 }>
%union.anon = type { %"class.sksg::Node"* }
%"class.sksg::Node" = type <{ %class.SkRefCnt.base, [4 x i8], %union.anon, %struct.SkRect, i16, [6 x i8] }>
%struct.SkSamplingOptions = type { i8, %struct.SkCubicResampler, i32, i32 }
%struct.SkCubicResampler = type { float, float }
%class.sk_sp = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.1, i32, i32 }
%class.sk_sp.1 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%struct.SkISize = type { i32, i32 }
%"class.sksg::RenderNode" = type { %"class.sksg::Node.base", [6 x i8] }
%struct.SkPoint = type { float, float }
%"class.sksg::InvalidationController" = type opaque
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>

$_ZN4sksg5ImageD2Ev = comdat any

$_ZN4sksg5ImageD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

@_ZTVN4sksg5ImageE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sksg::Image"*)* @_ZN4sksg5ImageD2Ev to i8*), i8* bitcast (void (%"class.sksg::Image"*)* @_ZN4sksg5ImageD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%"class.sksg::Image"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)* @_ZN4sksg5Image12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix to i8*), i8* bitcast (void (%"class.sksg::Image"*, %class.SkCanvas*, %"struct.sksg::RenderNode::RenderContext"*)* @_ZNK4sksg5Image8onRenderEP8SkCanvasPKNS_10RenderNode13RenderContextE to i8*), i8* bitcast (%"class.sksg::RenderNode"* (%"class.sksg::Image"*, %struct.SkPoint*)* @_ZNK4sksg5Image8onNodeAtERK7SkPoint to i8*)] }, align 8
@__const._ZNK4sksg5Image8onRenderEP8SkCanvasPKNS_10RenderNode13RenderContextE.paint = private unnamed_addr constant %class.SkPaint <{ %class.sk_sp.18 { %class.SkPathEffect* inttoptr (i64 -6148914691236517206 to %class.SkPathEffect*) }, %class.sk_sp.17 { %class.SkShader* inttoptr (i64 -6148914691236517206 to %class.SkShader*) }, %class.sk_sp.19 { %class.SkMaskFilter* inttoptr (i64 -6148914691236517206 to %class.SkMaskFilter*) }, %class.sk_sp.16 { %class.SkColorFilter* inttoptr (i64 -6148914691236517206 to %class.SkColorFilter*) }, %class.sk_sp.20 { %class.SkImageFilter* inttoptr (i64 -6148914691236517206 to %class.SkImageFilter*) }, %struct.SkRGBA4f { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, %union.anon.21 { %struct.anon { i32 -1431655766 } }, [4 x i8] c"\AA\AA\AA\AA" }>, align 8
@__const._ZNK4sksg5Image8onRenderEP8SkCanvasPKNS_10RenderNode13RenderContextE.local_ctx = private unnamed_addr constant %"class.sksg::RenderNode::ScopedRenderContext" <{ %class.SkCanvas* inttoptr (i64 -6148914691236517206 to %class.SkCanvas*), %"struct.sksg::RenderNode::RenderContext" { %class.sk_sp.16 { %class.SkColorFilter* inttoptr (i64 -6148914691236517206 to %class.SkColorFilter*) }, %class.sk_sp.17 { %class.SkShader* inttoptr (i64 -6148914691236517206 to %class.SkShader*) }, %class.sk_sp.17 { %class.SkShader* inttoptr (i64 -6148914691236517206 to %class.SkShader*) }, %class.SkMatrix { [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], i32 -1431655766 }, %class.SkMatrix { [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], i32 -1431655766 }, float 0xFFFFFFFFE0000000, i32 -1431655766 }, %class.sk_sp.17 { %class.SkShader* inttoptr (i64 -6148914691236517206 to %class.SkShader*) }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }>, align 8

@_ZN4sksg5ImageC1E5sk_spI7SkImageE = hidden unnamed_addr alias void (%"class.sksg::Image"*, %class.sk_sp*), void (%"class.sksg::Image"*, %class.sk_sp*)* @_ZN4sksg5ImageC2E5sk_spI7SkImageE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg5ImageC2E5sk_spI7SkImageE(%"class.sksg::Image"*, %class.sk_sp* nocapture) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.sksg::Image"* %0 to %"class.sksg::RenderNode"*
  tail call void @_ZN4sksg10RenderNodeC2Ej(%"class.sksg::RenderNode"* %3, i32 0) #8
  %4 = getelementptr inbounds %"class.sksg::Image", %"class.sksg::Image"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4sksg5ImageE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.sksg::Image", %"class.sksg::Image"* %0, i64 0, i32 2, i32 0
  store i8 0, i8* %5, align 4
  %6 = getelementptr inbounds %"class.sksg::Image", %"class.sksg::Image"* %0, i64 0, i32 2, i32 1, i32 0
  %7 = bitcast float* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 16, i1 false) #8
  %8 = getelementptr inbounds %"class.sksg::Image", %"class.sksg::Image"* %0, i64 0, i32 3
  %9 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %10 = bitcast %class.sk_sp* %1 to i64*
  %11 = load i64, i64* %10, align 8
  store %class.SkImage* null, %class.SkImage** %9, align 8
  %12 = bitcast %class.sk_sp* %8 to i64*
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"class.sksg::Image", %"class.sksg::Image"* %0, i64 0, i32 4
  store i8 1, i8* %13, align 8
  ret void
}

declare void @_ZN4sksg10RenderNodeC2Ej(%"class.sksg::RenderNode"*, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4sksg5Image8onRenderEP8SkCanvasPKNS_10RenderNode13RenderContextE(%"class.sksg::Image"*, %class.SkCanvas*, %"struct.sksg::RenderNode::RenderContext"*) unnamed_addr #0 align 2 {
  %4 = alloca %class.SkPaint, align 8
  %5 = alloca %"class.sksg::RenderNode::ScopedRenderContext", align 8
  %6 = alloca %class.SkMatrix, align 4
  %7 = alloca %class.SkMatrix, align 4
  %8 = getelementptr inbounds %"class.sksg::Image", %"class.sksg::Image"* %0, i64 0, i32 3, i32 0
  %9 = load %class.SkImage*, %class.SkImage** %8, align 8
  %10 = icmp eq %class.SkImage* %9, null
  br i1 %10, label %36, label %11

11:                                               ; preds = %3
  %12 = bitcast %class.SkPaint* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %12) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 8 bitcast (%class.SkPaint* @__const._ZNK4sksg5Image8onRenderEP8SkCanvasPKNS_10RenderNode13RenderContextE.paint to i8*), i64 72, i1 false)
  call void @_ZN7SkPaintC1Ev(%class.SkPaint* nonnull %4) #8
  %13 = getelementptr inbounds %"class.sksg::Image", %"class.sksg::Image"* %0, i64 0, i32 4
  %14 = load i8, i8* %13, align 8, !range !2
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %4, i64 0, i32 8, i32 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = and i32 %17, -2
  %19 = or i32 %18, %15
  store i32 %19, i32* %16, align 8
  %20 = bitcast %"class.sksg::RenderNode::ScopedRenderContext"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %20) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %20, i8* align 8 bitcast (%"class.sksg::RenderNode::ScopedRenderContext"* @__const._ZNK4sksg5Image8onRenderEP8SkCanvasPKNS_10RenderNode13RenderContextE.local_ctx to i8*), i64 136, i1 false)
  call void @_ZN4sksg10RenderNode19ScopedRenderContextC1EP8SkCanvasPKNS0_13RenderContextE(%"class.sksg::RenderNode::ScopedRenderContext"* nonnull %5, %class.SkCanvas* %1, %"struct.sksg::RenderNode::RenderContext"* %2) #8
  %21 = icmp eq %"struct.sksg::RenderNode::RenderContext"* %2, null
  br i1 %21, label %33, label %22

22:                                               ; preds = %11
  %23 = getelementptr inbounds %"struct.sksg::RenderNode::RenderContext", %"struct.sksg::RenderNode::RenderContext"* %2, i64 0, i32 2, i32 0
  %24 = load %class.SkShader*, %class.SkShader** %23, align 8
  %25 = icmp eq %class.SkShader* %24, null
  br i1 %25, label %30, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"class.sksg::Image", %"class.sksg::Image"* %0, i64 0, i32 0, i32 0, i32 3
  %28 = bitcast %class.SkMatrix* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %28) #8
  call void @_ZNK8SkCanvas14getTotalMatrixEv(%class.SkMatrix* nonnull sret %6, %class.SkCanvas* %1) #8
  %29 = call dereferenceable(136) %"class.sksg::RenderNode::ScopedRenderContext"* @_ZN4sksg10RenderNode19ScopedRenderContext12setIsolationERK6SkRectRK8SkMatrixb(%"class.sksg::RenderNode::ScopedRenderContext"* nonnull %5, %struct.SkRect* dereferenceable(16) %27, %class.SkMatrix* nonnull dereferenceable(40) %6, i1 zeroext true) #8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %28) #8
  br label %30

30:                                               ; preds = %22, %26
  %31 = getelementptr inbounds %"class.sksg::RenderNode::ScopedRenderContext", %"class.sksg::RenderNode::ScopedRenderContext"* %5, i64 0, i32 1
  %32 = bitcast %class.SkMatrix* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %32) #8
  call void @_ZNK8SkCanvas14getTotalMatrixEv(%class.SkMatrix* nonnull sret %7, %class.SkCanvas* %1) #8
  call void @_ZNK4sksg10RenderNode13RenderContext13modulatePaintERK8SkMatrixP7SkPaintb(%"struct.sksg::RenderNode::RenderContext"* %31, %class.SkMatrix* nonnull dereferenceable(40) %7, %class.SkPaint* nonnull %4, i1 zeroext false) #8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %32) #8
  br label %33

33:                                               ; preds = %11, %30
  %34 = getelementptr inbounds %"class.sksg::Image", %"class.sksg::Image"* %0, i64 0, i32 2
  %35 = load %class.SkImage*, %class.SkImage** %8, align 8
  call void @_ZN8SkCanvas9drawImageEPK7SkImageffRK17SkSamplingOptionsPK7SkPaint(%class.SkCanvas* %1, %class.SkImage* %35, float 0.000000e+00, float 0.000000e+00, %struct.SkSamplingOptions* dereferenceable(20) %34, %class.SkPaint* nonnull %4) #8
  call void @_ZN4sksg10RenderNode19ScopedRenderContextD1Ev(%"class.sksg::RenderNode::ScopedRenderContext"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %20) #8
  call void @_ZN7SkPaintD1Ev(%class.SkPaint* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %12) #8
  br label %36

36:                                               ; preds = %3, %33
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN7SkPaintC1Ev(%class.SkPaint*) unnamed_addr #1

declare void @_ZN4sksg10RenderNode19ScopedRenderContextC1EP8SkCanvasPKNS0_13RenderContextE(%"class.sksg::RenderNode::ScopedRenderContext"*, %class.SkCanvas*, %"struct.sksg::RenderNode::RenderContext"*) unnamed_addr #1

declare dereferenceable(136) %"class.sksg::RenderNode::ScopedRenderContext"* @_ZN4sksg10RenderNode19ScopedRenderContext12setIsolationERK6SkRectRK8SkMatrixb(%"class.sksg::RenderNode::ScopedRenderContext"*, %struct.SkRect* dereferenceable(16), %class.SkMatrix* dereferenceable(40), i1 zeroext) local_unnamed_addr #1

declare void @_ZNK8SkCanvas14getTotalMatrixEv(%class.SkMatrix* sret, %class.SkCanvas*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZNK4sksg10RenderNode13RenderContext13modulatePaintERK8SkMatrixP7SkPaintb(%"struct.sksg::RenderNode::RenderContext"*, %class.SkMatrix* dereferenceable(40), %class.SkPaint*, i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4sksg10RenderNode19ScopedRenderContextD1Ev(%"class.sksg::RenderNode::ScopedRenderContext"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7SkPaintD1Ev(%class.SkPaint*) unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"class.sksg::RenderNode"* @_ZNK4sksg5Image8onNodeAtERK7SkPoint(%"class.sksg::Image"* readnone, %struct.SkPoint* nocapture readnone dereferenceable(8)) unnamed_addr #4 align 2 {
  %3 = bitcast %"class.sksg::Image"* %0 to %"class.sksg::RenderNode"*
  ret %"class.sksg::RenderNode"* %3
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN4sksg5Image12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::Image"* nocapture readonly, %"class.sksg::InvalidationController"* nocapture readnone, %class.SkMatrix* nocapture readnone dereferenceable(40)) unnamed_addr #5 align 2 {
  %4 = getelementptr inbounds %"class.sksg::Image", %"class.sksg::Image"* %0, i64 0, i32 3, i32 0
  %5 = load %class.SkImage*, %class.SkImage** %4, align 8
  %6 = icmp eq %class.SkImage* %5, null
  br i1 %6, label %16, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.SkImage, %class.SkImage* %5, i64 0, i32 2, i32 1, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %class.SkImage, %class.SkImage* %5, i64 0, i32 2, i32 1, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = sitofp i32 %9 to float
  %13 = insertelement <2 x float> undef, float %12, i32 0
  %14 = sitofp i32 %11 to float
  %15 = insertelement <2 x float> %13, float %14, i32 1
  br label %16

16:                                               ; preds = %3, %7
  %17 = phi <2 x float> [ %15, %7 ], [ zeroinitializer, %3 ]
  %18 = insertvalue { <2 x float>, <2 x float> } { <2 x float> zeroinitializer, <2 x float> undef }, <2 x float> %17, 1
  ret { <2 x float>, <2 x float> } %18
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sksg5ImageD2Ev(%"class.sksg::Image"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.sksg::Image", %"class.sksg::Image"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4sksg5ImageE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sksg::Image", %"class.sksg::Image"* %0, i64 0, i32 3, i32 0
  %4 = load %class.SkImage*, %class.SkImage** %3, align 8
  %5 = icmp eq %class.SkImage* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkImage, %class.SkImage* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.SkImage* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.SkImage* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #8
  br label %16

16:                                               ; preds = %1, %6, %10
  %17 = bitcast %"class.sksg::Image"* %0 to %"class.sksg::Node"*
  tail call void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"* %17) #8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sksg5ImageD0Ev(%"class.sksg::Image"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.sksg::Image", %"class.sksg::Image"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4sksg5ImageE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sksg::Image", %"class.sksg::Image"* %0, i64 0, i32 3, i32 0
  %4 = load %class.SkImage*, %class.SkImage** %3, align 8
  %5 = icmp eq %class.SkImage* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkImage, %class.SkImage* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.SkImage* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.SkImage* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #8
  br label %16

16:                                               ; preds = %1, %6, %10
  %17 = bitcast %"class.sksg::Image"* %0 to %"class.sksg::Node"*
  tail call void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"* %17) #8
  %18 = bitcast %"class.sksg::Image"* %0 to i8*
  tail call void @_ZdlPv(i8* %18) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #8
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

declare void @_ZN8SkCanvas9drawImageEPK7SkImageffRK17SkSamplingOptionsPK7SkPaint(%class.SkCanvas*, %class.SkImage*, float, float, %struct.SkSamplingOptions* dereferenceable(20), %class.SkPaint*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
