; ModuleID = '../../third_party/opus/src/silk/float/process_gains_FLP.c'
source_filename = "../../third_party/opus/src/silk/float/process_gains_FLP.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.silk_encoder_state_FLP = type { %struct.silk_encoder_state, %struct.silk_shape_state_FLP, [720 x float], float }
%struct.silk_encoder_state = type { [2 x i32], i32, i32, %struct.silk_LP_state, %struct.silk_VAD_state, %struct.silk_nsq_state, [16 x i16], i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.silk_NLSF_CB_struct*, [4 x i32], i32, i32, [3 x i8], i8, [3 x i32], %struct.SideInfoIndices, [320 x i8], i32, [322 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16, %struct._silk_resampler_state_struct, i32, i32, i32, i32, i32, i32, [3 x %struct.SideInfoIndices], [3 x [320 x i8]] }
%struct.silk_LP_state = type { [2 x i32], i32, i32, i32 }
%struct.silk_VAD_state = type { [2 x i32], [2 x i32], [2 x i32], [4 x i32], [4 x i32], i16, [4 x i32], [4 x i32], [4 x i32], i32 }
%struct.silk_nsq_state = type { [640 x i16], [640 x i32], [96 x i32], [24 x i32], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.silk_NLSF_CB_struct = type { i16, i16, i16, i16, i8*, i16*, i8*, i8*, i8*, i8*, i8*, i16* }
%struct.SideInfoIndices = type { [4 x i8], [4 x i8], [17 x i8], i16, i8, i8, i8, i8, i8, i8, i8 }
%struct._silk_resampler_state_struct = type { [6 x i32], %union.anon, [48 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16* }
%union.anon = type { [36 x i32] }
%struct.silk_shape_state_FLP = type { i8, float, float }
%struct.silk_encoder_control_FLP = type { [4 x float], [2 x [16 x float]], [20 x float], float, [4 x i32], [96 x float], [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, float, [4 x float], [4 x i32], i8 }

@silk_Quantization_Offsets_Q10 = external local_unnamed_addr constant [2 x [2 x i16]], align 2

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_process_gains_FLP(%struct.silk_encoder_state_FLP*, %struct.silk_encoder_control_FLP* nocapture, i32) local_unnamed_addr #0 {
  %4 = alloca [4 x i32], align 16
  %5 = bitcast [4 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #4
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 0
  %7 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 55, i32 5
  %8 = bitcast [4 x i32]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 16, i1 false)
  %9 = load i8, i8* %7, align 1
  %10 = icmp eq i8 %9, 2
  br i1 %10, label %11, label %35

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 14
  %13 = load float, float* %12, align 4
  %14 = fadd float %13, -1.200000e+01
  %15 = fmul float %14, -2.500000e-01
  %16 = fpext float %15 to double
  %17 = tail call double @exp(double %16) #4
  %18 = fadd double %17, 1.000000e+00
  %19 = fdiv double 1.000000e+00, %18
  %20 = fptrunc double %19 to float
  %21 = fmul float %20, 5.000000e-01
  %22 = fsub float 1.000000e+00, %21
  %23 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 20
  %24 = load i32, i32* %23, align 4
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %26, label %35

26:                                               ; preds = %11, %26
  %27 = phi i64 [ %31, %26 ], [ 0, %11 ]
  %28 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 0, i64 %27
  %29 = load float, float* %28, align 4
  %30 = fmul float %22, %29
  store float %30, float* %28, align 4
  %31 = add nuw nsw i64 %27, 1
  %32 = load i32, i32* %23, align 4
  %33 = sext i32 %32 to i64
  %34 = icmp slt i64 %31, %33
  br i1 %34, label %26, label %35

35:                                               ; preds = %26, %11, %3
  %36 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 51
  %37 = load i32, i32* %36, align 4
  %38 = sitofp i32 %37 to float
  %39 = fmul float %38, 7.812500e-03
  %40 = fsub float 2.100000e+01, %39
  %41 = fmul float %40, 0x3FD51EB860000000
  %42 = fpext float %41 to double
  %43 = tail call double @exp2(double %42) #3
  %44 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 22
  %45 = load i32, i32* %44, align 4
  %46 = sitofp i32 %45 to double
  %47 = fdiv double %43, %46
  %48 = fptrunc double %47 to float
  %49 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 20
  %50 = load i32, i32* %49, align 4
  %51 = icmp sgt i32 %50, 0
  br i1 %51, label %123, label %148

52:                                               ; preds = %123
  %53 = icmp sgt i32 %136, 0
  br i1 %53, label %54, label %148

54:                                               ; preds = %52
  %55 = zext i32 %136 to i64
  %56 = icmp ult i32 %136, 8
  br i1 %56, label %57, label %59

57:                                               ; preds = %121, %54
  %58 = phi i64 [ 0, %54 ], [ %60, %121 ]
  br label %139

59:                                               ; preds = %54
  %60 = and i64 %55, 4294967288
  %61 = add nsw i64 %60, -8
  %62 = lshr exact i64 %61, 3
  %63 = add nuw nsw i64 %62, 1
  %64 = and i64 %63, 1
  %65 = icmp eq i64 %61, 0
  br i1 %65, label %103, label %66

66:                                               ; preds = %59
  %67 = sub nuw nsw i64 %63, %64
  br label %68

68:                                               ; preds = %68, %66
  %69 = phi i64 [ 0, %66 ], [ %100, %68 ]
  %70 = phi i64 [ %67, %66 ], [ %101, %68 ]
  %71 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 0, i64 %69
  %72 = bitcast float* %71 to <4 x float>*
  %73 = load <4 x float>, <4 x float>* %72, align 4
  %74 = getelementptr inbounds float, float* %71, i64 4
  %75 = bitcast float* %74 to <4 x float>*
  %76 = load <4 x float>, <4 x float>* %75, align 4
  %77 = fmul <4 x float> %73, <float 6.553600e+04, float 6.553600e+04, float 6.553600e+04, float 6.553600e+04>
  %78 = fmul <4 x float> %76, <float 6.553600e+04, float 6.553600e+04, float 6.553600e+04, float 6.553600e+04>
  %79 = fptosi <4 x float> %77 to <4 x i32>
  %80 = fptosi <4 x float> %78 to <4 x i32>
  %81 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %69
  %82 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %82, align 16
  %83 = getelementptr inbounds i32, i32* %81, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> %80, <4 x i32>* %84, align 16
  %85 = or i64 %69, 8
  %86 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 0, i64 %85
  %87 = bitcast float* %86 to <4 x float>*
  %88 = load <4 x float>, <4 x float>* %87, align 4
  %89 = getelementptr inbounds float, float* %86, i64 4
  %90 = bitcast float* %89 to <4 x float>*
  %91 = load <4 x float>, <4 x float>* %90, align 4
  %92 = fmul <4 x float> %88, <float 6.553600e+04, float 6.553600e+04, float 6.553600e+04, float 6.553600e+04>
  %93 = fmul <4 x float> %91, <float 6.553600e+04, float 6.553600e+04, float 6.553600e+04, float 6.553600e+04>
  %94 = fptosi <4 x float> %92 to <4 x i32>
  %95 = fptosi <4 x float> %93 to <4 x i32>
  %96 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %85
  %97 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %97, align 16
  %98 = getelementptr inbounds i32, i32* %96, i64 4
  %99 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %95, <4 x i32>* %99, align 16
  %100 = add i64 %69, 16
  %101 = add i64 %70, -2
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %68, !llvm.loop !2

103:                                              ; preds = %68, %59
  %104 = phi i64 [ 0, %59 ], [ %100, %68 ]
  %105 = icmp eq i64 %64, 0
  br i1 %105, label %121, label %106

106:                                              ; preds = %103
  %107 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 0, i64 %104
  %108 = bitcast float* %107 to <4 x float>*
  %109 = load <4 x float>, <4 x float>* %108, align 4
  %110 = getelementptr inbounds float, float* %107, i64 4
  %111 = bitcast float* %110 to <4 x float>*
  %112 = load <4 x float>, <4 x float>* %111, align 4
  %113 = fmul <4 x float> %109, <float 6.553600e+04, float 6.553600e+04, float 6.553600e+04, float 6.553600e+04>
  %114 = fmul <4 x float> %112, <float 6.553600e+04, float 6.553600e+04, float 6.553600e+04, float 6.553600e+04>
  %115 = fptosi <4 x float> %113 to <4 x i32>
  %116 = fptosi <4 x float> %114 to <4 x i32>
  %117 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %104
  %118 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %115, <4 x i32>* %118, align 16
  %119 = getelementptr inbounds i32, i32* %117, i64 4
  %120 = bitcast i32* %119 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %120, align 16
  br label %121

121:                                              ; preds = %103, %106
  %122 = icmp eq i64 %60, %55
  br i1 %122, label %148, label %57

123:                                              ; preds = %35, %123
  %124 = phi i64 [ %135, %123 ], [ 0, %35 ]
  %125 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 0, i64 %124
  %126 = load float, float* %125, align 4
  %127 = fmul float %126, %126
  %128 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 15, i64 %124
  %129 = load float, float* %128, align 4
  %130 = fmul float %129, %48
  %131 = fadd float %127, %130
  %132 = tail call float @sqrtf(float %131) #3
  %133 = fcmp olt float %132, 3.276700e+04
  %134 = select i1 %133, float %132, float 3.276700e+04
  store float %134, float* %125, align 4
  %135 = add nuw nsw i64 %124, 1
  %136 = load i32, i32* %49, align 4
  %137 = sext i32 %136 to i64
  %138 = icmp slt i64 %135, %137
  br i1 %138, label %123, label %52

139:                                              ; preds = %57, %139
  %140 = phi i64 [ %146, %139 ], [ %58, %57 ]
  %141 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 0, i64 %140
  %142 = load float, float* %141, align 4
  %143 = fmul float %142, 6.553600e+04
  %144 = fptosi float %143 to i32
  %145 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %140
  store i32 %144, i32* %145, align 4
  %146 = add nuw nsw i64 %140, 1
  %147 = icmp eq i64 %146, %55
  br i1 %147, label %148, label %139, !llvm.loop !4

148:                                              ; preds = %139, %121, %35, %52
  %149 = phi i32 [ %136, %52 ], [ %50, %35 ], [ %136, %121 ], [ %136, %139 ]
  %150 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 16, i64 0
  %151 = bitcast i32* %150 to i8*
  %152 = sext i32 %149 to i64
  %153 = shl nsw i64 %152, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %151, i8* nonnull align 16 %5, i64 %153, i1 false)
  %154 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 1, i32 0
  %155 = load i8, i8* %154, align 4
  %156 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 17
  store i8 %155, i8* %156, align 4
  %157 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 55, i32 0, i64 0
  %158 = icmp eq i32 %2, 2
  %159 = zext i1 %158 to i32
  %160 = load i32, i32* %49, align 4
  call void @silk_gains_quant(i8* %157, i32* nonnull %6, i8* %154, i32 %159, i32 %160) #4
  %161 = load i32, i32* %49, align 4
  %162 = icmp sgt i32 %161, 0
  br i1 %162, label %163, label %174

163:                                              ; preds = %148, %163
  %164 = phi i64 [ %170, %163 ], [ 0, %148 ]
  %165 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %164
  %166 = load i32, i32* %165, align 4
  %167 = sitofp i32 %166 to float
  %168 = fmul float %167, 0x3EF0000000000000
  %169 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 0, i64 %164
  store float %168, float* %169, align 4
  %170 = add nuw nsw i64 %164, 1
  %171 = load i32, i32* %49, align 4
  %172 = sext i32 %171 to i64
  %173 = icmp slt i64 %170, %172
  br i1 %173, label %163, label %174

174:                                              ; preds = %163, %148
  %175 = load i8, i8* %7, align 1
  %176 = icmp eq i8 %175, 2
  br i1 %176, label %181, label %177

177:                                              ; preds = %174
  %178 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 55, i32 6
  %179 = load i8, i8* %178, align 2
  %180 = sext i8 %179 to i64
  br label %193

181:                                              ; preds = %174
  %182 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 14
  %183 = load float, float* %182, align 4
  %184 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 50
  %185 = load i32, i32* %184, align 8
  %186 = sitofp i32 %185 to float
  %187 = fmul float %186, 0x3F00000000000000
  %188 = fadd float %183, %187
  %189 = fcmp ogt float %188, 1.000000e+00
  %190 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 55, i32 6
  br i1 %189, label %191, label %192

191:                                              ; preds = %181
  store i8 0, i8* %190, align 2
  br label %193

192:                                              ; preds = %181
  store i8 1, i8* %190, align 2
  br label %193

193:                                              ; preds = %177, %191, %192
  %194 = phi i64 [ %180, %177 ], [ 0, %191 ], [ 1, %192 ]
  %195 = ashr i8 %175, 1
  %196 = sext i8 %195 to i64
  %197 = getelementptr inbounds [2 x [2 x i16]], [2 x [2 x i16]]* @silk_Quantization_Offsets_Q10, i64 0, i64 %196, i64 %194
  %198 = load i16, i16* %197, align 2
  %199 = sitofp i16 %198 to float
  %200 = fmul float %199, 0x3F50000000000000
  %201 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 32
  %202 = load i32, i32* %201, align 4
  %203 = sitofp i32 %202 to float
  %204 = fmul float %203, 0x3FA99999A0000000
  %205 = fsub float 0x3FF3333340000000, %204
  %206 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 7
  %207 = load i32, i32* %206, align 4
  %208 = sitofp i32 %207 to float
  %209 = fmul float %208, 0xBFC99999A0000000
  %210 = fmul float %209, 3.906250e-03
  %211 = fadd float %205, %210
  %212 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 11
  %213 = load float, float* %212, align 4
  %214 = fmul float %213, 0x3FB99999A0000000
  %215 = fsub float %211, %214
  %216 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 12
  %217 = load float, float* %216, align 4
  %218 = fmul float %217, 0x3FC99999A0000000
  %219 = fsub float %215, %218
  %220 = fmul float %200, 0x3FE99999A0000000
  %221 = fadd float %220, %219
  %222 = getelementptr inbounds %struct.silk_encoder_control_FLP, %struct.silk_encoder_control_FLP* %1, i64 0, i32 10
  store float %221, float* %222, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @silk_gains_quant(i8*, i32*, i8*, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #3

declare double @exp2(double) local_unnamed_addr

declare float @sqrtf(float) local_unnamed_addr

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
