; ModuleID = '../../net/dns/host_resolver_mdns_listener_impl.cc'
source_filename = "../../net/dns/host_resolver_mdns_listener_impl.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::HostResolverMdnsListenerImpl" = type { %"class.net::HostResolver::MdnsListener", %"class.net::MDnsListener::Delegate", %"class.net::HostPortPair", i32, i32, %"class.std::__1::unique_ptr", %"class.net::HostResolver::MdnsListener::Delegate"* }
%"class.net::HostResolver::MdnsListener" = type { i32 (...)** }
%"class.net::MDnsListener::Delegate" = type { i32 (...)** }
%"class.net::HostPortPair" = type <{ %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.net::MDnsListener"* }
%"class.net::MDnsListener" = type { i32 (...)** }
%"class.net::HostResolver::MdnsListener::Delegate" = type { i32 (...)** }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.net::RecordParsed" = type { i32 (...)**, %"class.std::__1::basic_string", i16, i16, i32, %"class.std::__1::unique_ptr.4", %"class.base::Time" }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.net::RecordRdata"* }
%"class.net::RecordRdata" = type opaque
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.net::HostCache::Entry" = type <{ i32, [4 x i8], %"class.absl::optional", %"class.absl::optional.23", %"class.absl::optional.28", %"class.absl::optional.40", i32, i8, [3 x i8], %"class.base::TimeDelta", %"class.base::TimeTicks", i32, %"class.base::internal::ClampedNumeric", %"class.base::internal::ClampedNumeric", [4 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.10 }
%union.anon.10 = type { %"class.net::AddressList" }
%"class.net::AddressList" = type { %"class.std::__1::vector", %"class.std::__1::vector.16" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"*, %"class.std::__1::__compressed_pair.11" }
%"class.net::IPEndPoint" = type { %"class.net::IPAddress", i16 }
%"class.net::IPAddress" = type { %"class.net::IPAddressBytes" }
%"class.net::IPAddressBytes" = type { %"struct.std::__1::array", i8 }
%"struct.std::__1::array" = type { [16 x i8] }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.net::IPEndPoint"* }
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.std::__1::basic_string"* }
%"class.absl::optional.23" = type { %"class.absl::optional_internal::optional_data.24" }
%"class.absl::optional_internal::optional_data.24" = type { %"class.absl::optional_internal::optional_data_base.25" }
%"class.absl::optional_internal::optional_data_base.25" = type { %"class.absl::optional_internal::optional_data_dtor_base.26" }
%"class.absl::optional_internal::optional_data_dtor_base.26" = type { i8, %union.anon.27 }
%union.anon.27 = type { %"class.std::__1::vector.16" }
%"class.absl::optional.28" = type { %"class.absl::optional_internal::optional_data.29" }
%"class.absl::optional_internal::optional_data.29" = type { %"class.absl::optional_internal::optional_data_base.30" }
%"class.absl::optional_internal::optional_data_base.30" = type { %"class.absl::optional_internal::optional_data_dtor_base.31" }
%"class.absl::optional_internal::optional_data_dtor_base.31" = type { i8, %union.anon.32 }
%union.anon.32 = type { %"class.std::__1::vector.33" }
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { %"class.net::HostPortPair"*, %"class.net::HostPortPair"*, %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.net::HostPortPair"* }
%"class.absl::optional.40" = type { %"class.absl::optional_internal::optional_data.41" }
%"class.absl::optional_internal::optional_data.41" = type { %"class.absl::optional_internal::optional_data_base.42" }
%"class.absl::optional_internal::optional_data_base.42" = type { %"class.absl::optional_internal::optional_data_dtor_base.43" }
%"class.absl::optional_internal::optional_data_dtor_base.43" = type { i8, %union.anon.44 }
%union.anon.44 = type { %"class.std::__1::vector.45" }
%"class.std::__1::vector.45" = type { i64*, i64, %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { i64 }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase.51" }
%"class.base::time_internal::TimeBase.51" = type { i64 }
%"class.base::internal::ClampedNumeric" = type { i32 }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZTVN3net28HostResolverMdnsListenerImplE = hidden unnamed_addr constant { [8 x i8*], [7 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::HostResolverMdnsListenerImpl"*)* @_ZN3net28HostResolverMdnsListenerImplD2Ev to i8*), i8* bitcast (void (%"class.net::HostResolverMdnsListenerImpl"*)* @_ZN3net28HostResolverMdnsListenerImplD0Ev to i8*), i8* bitcast (i32 (%"class.net::HostResolverMdnsListenerImpl"*, %"class.net::HostResolver::MdnsListener::Delegate"*)* @_ZN3net28HostResolverMdnsListenerImpl5StartEPNS_12HostResolver12MdnsListener8DelegateE to i8*), i8* bitcast (void (%"class.net::HostResolverMdnsListenerImpl"*, i32, %"class.net::RecordParsed"*)* @_ZN3net28HostResolverMdnsListenerImpl14OnRecordUpdateENS_12MDnsListener10UpdateTypeEPKNS_12RecordParsedE to i8*), i8* bitcast (void (%"class.net::HostResolverMdnsListenerImpl"*, %"class.std::__1::basic_string"*, i32)* @_ZN3net28HostResolverMdnsListenerImpl12OnNsecRecordERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj to i8*), i8* bitcast (void (%"class.net::HostResolverMdnsListenerImpl"*)* @_ZN3net28HostResolverMdnsListenerImpl13OnCachePurgedEv to i8*)], [7 x i8*] [i8* inttoptr (i64 -8 to i8*), i8* null, i8* bitcast (void (%"class.net::HostResolverMdnsListenerImpl"*)* @_ZThn8_N3net28HostResolverMdnsListenerImplD1Ev to i8*), i8* bitcast (void (%"class.net::HostResolverMdnsListenerImpl"*)* @_ZThn8_N3net28HostResolverMdnsListenerImplD0Ev to i8*), i8* bitcast (void (%"class.net::HostResolverMdnsListenerImpl"*, i32, %"class.net::RecordParsed"*)* @_ZThn8_N3net28HostResolverMdnsListenerImpl14OnRecordUpdateENS_12MDnsListener10UpdateTypeEPKNS_12RecordParsedE to i8*), i8* bitcast (void (%"class.net::HostResolverMdnsListenerImpl"*, %"class.std::__1::basic_string"*, i32)* @_ZThn8_N3net28HostResolverMdnsListenerImpl12OnNsecRecordERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj to i8*), i8* bitcast (void (%"class.net::HostResolverMdnsListenerImpl"*)* @_ZThn8_N3net28HostResolverMdnsListenerImpl13OnCachePurgedEv to i8*)] }, align 8

@_ZN3net28HostResolverMdnsListenerImplC1ERKNS_12HostPortPairENS_12DnsQueryTypeE = hidden unnamed_addr alias void (%"class.net::HostResolverMdnsListenerImpl"*, %"class.net::HostPortPair"*, i32), void (%"class.net::HostResolverMdnsListenerImpl"*, %"class.net::HostPortPair"*, i32)* @_ZN3net28HostResolverMdnsListenerImplC2ERKNS_12HostPortPairENS_12DnsQueryTypeE
@_ZN3net28HostResolverMdnsListenerImplD1Ev = hidden unnamed_addr alias void (%"class.net::HostResolverMdnsListenerImpl"*), void (%"class.net::HostResolverMdnsListenerImpl"*)* @_ZN3net28HostResolverMdnsListenerImplD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net28HostResolverMdnsListenerImplC2ERKNS_12HostPortPairENS_12DnsQueryTypeE(%"class.net::HostResolverMdnsListenerImpl"*, %"class.net::HostPortPair"* nocapture readonly dereferenceable(32), i32) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.net::HostResolverMdnsListenerImpl"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [7 x i8*] }, { [8 x i8*], [7 x i8*] }* @_ZTVN3net28HostResolverMdnsListenerImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [7 x i8*] }, { [8 x i8*], [7 x i8*] }* @_ZTVN3net28HostResolverMdnsListenerImplE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %4, align 8
  %5 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 0, i32 2
  %6 = bitcast %"class.net::HostPortPair"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %6, i64 0, i32 1, i32 0
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %3
  %11 = bitcast %"class.net::HostPortPair"* %5 to i8*
  %12 = bitcast %"class.net::HostPortPair"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 24, i1 false) #8
  br label %19

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.net::HostPortPair", %"class.net::HostPortPair"* %5, i64 0, i32 0
  %15 = getelementptr inbounds %"class.net::HostPortPair", %"class.net::HostPortPair"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.net::HostPortPair", %"class.net::HostPortPair"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %14, i8* %16, i64 %18) #8
  br label %19

19:                                               ; preds = %10, %13
  %20 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 0, i32 2, i32 1
  %21 = getelementptr inbounds %"class.net::HostPortPair", %"class.net::HostPortPair"* %1, i64 0, i32 1
  %22 = load i16, i16* %21, align 8
  store i16 %22, i16* %20, align 8
  %23 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 0, i32 3
  store i32 %2, i32* %23, align 8
  %24 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 0, i32 4
  store i32 0, i32* %24, align 4
  %25 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 0, i32 5
  %26 = bitcast %"class.std::__1::unique_ptr"* %25 to i64*
  store i64 0, i64* %26, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net28HostResolverMdnsListenerImplD2Ev(%"class.net::HostResolverMdnsListenerImpl"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.net::HostResolverMdnsListenerImpl"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [7 x i8*] }, { [8 x i8*], [7 x i8*] }* @_ZTVN3net28HostResolverMdnsListenerImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [7 x i8*] }, { [8 x i8*], [7 x i8*] }* @_ZTVN3net28HostResolverMdnsListenerImplE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %2, align 8
  %3 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %4 = load %"class.net::MDnsListener"*, %"class.net::MDnsListener"** %3, align 8
  store %"class.net::MDnsListener"* null, %"class.net::MDnsListener"** %3, align 8
  %5 = icmp eq %"class.net::MDnsListener"* %4, null
  br i1 %5, label %6, label %7

6:                                                ; preds = %1
  store %"class.net::MDnsListener"* null, %"class.net::MDnsListener"** %3, align 8
  br label %19

7:                                                ; preds = %1
  %8 = bitcast %"class.net::MDnsListener"* %4 to void (%"class.net::MDnsListener"*)***
  %9 = load void (%"class.net::MDnsListener"*)**, void (%"class.net::MDnsListener"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.net::MDnsListener"*)*, void (%"class.net::MDnsListener"*)** %9, i64 1
  %11 = load void (%"class.net::MDnsListener"*)*, void (%"class.net::MDnsListener"*)** %10, align 8
  tail call void %11(%"class.net::MDnsListener"* nonnull %4) #8
  %12 = load %"class.net::MDnsListener"*, %"class.net::MDnsListener"** %3, align 8
  store %"class.net::MDnsListener"* null, %"class.net::MDnsListener"** %3, align 8
  %13 = icmp eq %"class.net::MDnsListener"* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %7
  %15 = bitcast %"class.net::MDnsListener"* %12 to void (%"class.net::MDnsListener"*)***
  %16 = load void (%"class.net::MDnsListener"*)**, void (%"class.net::MDnsListener"*)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.net::MDnsListener"*)*, void (%"class.net::MDnsListener"*)** %16, i64 1
  %18 = load void (%"class.net::MDnsListener"*)*, void (%"class.net::MDnsListener"*)** %17, align 8
  tail call void %18(%"class.net::MDnsListener"* nonnull %12) #8
  br label %19

19:                                               ; preds = %6, %7, %14
  %20 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 0, i32 2
  %21 = bitcast %"class.net::HostPortPair"* %20 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %22 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %21, i64 0, i32 1, i32 0
  %23 = load i8, i8* %22, align 1
  %24 = icmp slt i8 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %19
  %26 = getelementptr inbounds %"class.net::HostPortPair", %"class.net::HostPortPair"* %20, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  tail call void @_ZdlPv(i8* %27) #9
  br label %28

28:                                               ; preds = %19, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn8_N3net28HostResolverMdnsListenerImplD1Ev(%"class.net::HostResolverMdnsListenerImpl"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 -1, i32 6
  %3 = bitcast %"class.net::HostResolver::MdnsListener::Delegate"** %2 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [7 x i8*] }, { [8 x i8*], [7 x i8*] }* @_ZTVN3net28HostResolverMdnsListenerImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [7 x i8*] }, { [8 x i8*], [7 x i8*] }* @_ZTVN3net28HostResolverMdnsListenerImplE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %3, align 8
  %4 = getelementptr inbounds %"class.net::HostResolver::MdnsListener::Delegate"*, %"class.net::HostResolver::MdnsListener::Delegate"** %2, i64 7
  %5 = bitcast %"class.net::HostResolver::MdnsListener::Delegate"** %4 to %"class.net::MDnsListener"**
  %6 = load %"class.net::MDnsListener"*, %"class.net::MDnsListener"** %5, align 8
  store %"class.net::MDnsListener"* null, %"class.net::MDnsListener"** %5, align 8
  %7 = icmp eq %"class.net::MDnsListener"* %6, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %1
  store %"class.net::MDnsListener"* null, %"class.net::MDnsListener"** %5, align 8
  br label %21

9:                                                ; preds = %1
  %10 = bitcast %"class.net::MDnsListener"* %6 to void (%"class.net::MDnsListener"*)***
  %11 = load void (%"class.net::MDnsListener"*)**, void (%"class.net::MDnsListener"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.net::MDnsListener"*)*, void (%"class.net::MDnsListener"*)** %11, i64 1
  %13 = load void (%"class.net::MDnsListener"*)*, void (%"class.net::MDnsListener"*)** %12, align 8
  tail call void %13(%"class.net::MDnsListener"* nonnull %6) #8
  %14 = load %"class.net::MDnsListener"*, %"class.net::MDnsListener"** %5, align 8
  store %"class.net::MDnsListener"* null, %"class.net::MDnsListener"** %5, align 8
  %15 = icmp eq %"class.net::MDnsListener"* %14, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %9
  %17 = bitcast %"class.net::MDnsListener"* %14 to void (%"class.net::MDnsListener"*)***
  %18 = load void (%"class.net::MDnsListener"*)**, void (%"class.net::MDnsListener"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.net::MDnsListener"*)*, void (%"class.net::MDnsListener"*)** %18, i64 1
  %20 = load void (%"class.net::MDnsListener"*)*, void (%"class.net::MDnsListener"*)** %19, align 8
  tail call void %20(%"class.net::MDnsListener"* nonnull %14) #8
  br label %21

21:                                               ; preds = %16, %9, %8
  %22 = getelementptr inbounds %"class.net::HostResolver::MdnsListener::Delegate"*, %"class.net::HostResolver::MdnsListener::Delegate"** %2, i64 2
  %23 = bitcast %"class.net::HostResolver::MdnsListener::Delegate"** %22 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %23, i64 0, i32 1, i32 0
  %25 = load i8, i8* %24, align 1
  %26 = icmp slt i8 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %21
  %28 = bitcast %"class.net::HostResolver::MdnsListener::Delegate"** %22 to i8**
  %29 = load i8*, i8** %28, align 8
  tail call void @_ZdlPv(i8* %29) #9
  br label %30

30:                                               ; preds = %21, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net28HostResolverMdnsListenerImplD0Ev(%"class.net::HostResolverMdnsListenerImpl"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.net::HostResolverMdnsListenerImpl"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [7 x i8*] }, { [8 x i8*], [7 x i8*] }* @_ZTVN3net28HostResolverMdnsListenerImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [7 x i8*] }, { [8 x i8*], [7 x i8*] }* @_ZTVN3net28HostResolverMdnsListenerImplE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %2, align 8
  %3 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %4 = load %"class.net::MDnsListener"*, %"class.net::MDnsListener"** %3, align 8
  store %"class.net::MDnsListener"* null, %"class.net::MDnsListener"** %3, align 8
  %5 = icmp eq %"class.net::MDnsListener"* %4, null
  br i1 %5, label %6, label %7

6:                                                ; preds = %1
  store %"class.net::MDnsListener"* null, %"class.net::MDnsListener"** %3, align 8
  br label %19

7:                                                ; preds = %1
  %8 = bitcast %"class.net::MDnsListener"* %4 to void (%"class.net::MDnsListener"*)***
  %9 = load void (%"class.net::MDnsListener"*)**, void (%"class.net::MDnsListener"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.net::MDnsListener"*)*, void (%"class.net::MDnsListener"*)** %9, i64 1
  %11 = load void (%"class.net::MDnsListener"*)*, void (%"class.net::MDnsListener"*)** %10, align 8
  tail call void %11(%"class.net::MDnsListener"* nonnull %4) #8
  %12 = load %"class.net::MDnsListener"*, %"class.net::MDnsListener"** %3, align 8
  store %"class.net::MDnsListener"* null, %"class.net::MDnsListener"** %3, align 8
  %13 = icmp eq %"class.net::MDnsListener"* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %7
  %15 = bitcast %"class.net::MDnsListener"* %12 to void (%"class.net::MDnsListener"*)***
  %16 = load void (%"class.net::MDnsListener"*)**, void (%"class.net::MDnsListener"*)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.net::MDnsListener"*)*, void (%"class.net::MDnsListener"*)** %16, i64 1
  %18 = load void (%"class.net::MDnsListener"*)*, void (%"class.net::MDnsListener"*)** %17, align 8
  tail call void %18(%"class.net::MDnsListener"* nonnull %12) #8
  br label %19

19:                                               ; preds = %14, %7, %6
  %20 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 0, i32 2
  %21 = bitcast %"class.net::HostPortPair"* %20 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %22 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %21, i64 0, i32 1, i32 0
  %23 = load i8, i8* %22, align 1
  %24 = icmp slt i8 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %19
  %26 = getelementptr inbounds %"class.net::HostPortPair", %"class.net::HostPortPair"* %20, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  tail call void @_ZdlPv(i8* %27) #9
  br label %28

28:                                               ; preds = %19, %25
  %29 = bitcast %"class.net::HostResolverMdnsListenerImpl"* %0 to i8*
  tail call void @_ZdlPv(i8* %29) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn8_N3net28HostResolverMdnsListenerImplD0Ev(%"class.net::HostResolverMdnsListenerImpl"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 -1, i32 6
  %3 = bitcast %"class.net::HostResolver::MdnsListener::Delegate"** %2 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [7 x i8*] }, { [8 x i8*], [7 x i8*] }* @_ZTVN3net28HostResolverMdnsListenerImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [7 x i8*] }, { [8 x i8*], [7 x i8*] }* @_ZTVN3net28HostResolverMdnsListenerImplE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %3, align 8
  %4 = getelementptr inbounds %"class.net::HostResolver::MdnsListener::Delegate"*, %"class.net::HostResolver::MdnsListener::Delegate"** %2, i64 7
  %5 = bitcast %"class.net::HostResolver::MdnsListener::Delegate"** %4 to %"class.net::MDnsListener"**
  %6 = load %"class.net::MDnsListener"*, %"class.net::MDnsListener"** %5, align 8
  store %"class.net::MDnsListener"* null, %"class.net::MDnsListener"** %5, align 8
  %7 = icmp eq %"class.net::MDnsListener"* %6, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %1
  store %"class.net::MDnsListener"* null, %"class.net::MDnsListener"** %5, align 8
  br label %21

9:                                                ; preds = %1
  %10 = bitcast %"class.net::MDnsListener"* %6 to void (%"class.net::MDnsListener"*)***
  %11 = load void (%"class.net::MDnsListener"*)**, void (%"class.net::MDnsListener"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.net::MDnsListener"*)*, void (%"class.net::MDnsListener"*)** %11, i64 1
  %13 = load void (%"class.net::MDnsListener"*)*, void (%"class.net::MDnsListener"*)** %12, align 8
  tail call void %13(%"class.net::MDnsListener"* nonnull %6) #8
  %14 = load %"class.net::MDnsListener"*, %"class.net::MDnsListener"** %5, align 8
  store %"class.net::MDnsListener"* null, %"class.net::MDnsListener"** %5, align 8
  %15 = icmp eq %"class.net::MDnsListener"* %14, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %9
  %17 = bitcast %"class.net::MDnsListener"* %14 to void (%"class.net::MDnsListener"*)***
  %18 = load void (%"class.net::MDnsListener"*)**, void (%"class.net::MDnsListener"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.net::MDnsListener"*)*, void (%"class.net::MDnsListener"*)** %18, i64 1
  %20 = load void (%"class.net::MDnsListener"*)*, void (%"class.net::MDnsListener"*)** %19, align 8
  tail call void %20(%"class.net::MDnsListener"* nonnull %14) #8
  br label %21

21:                                               ; preds = %16, %9, %8
  %22 = getelementptr inbounds %"class.net::HostResolver::MdnsListener::Delegate"*, %"class.net::HostResolver::MdnsListener::Delegate"** %2, i64 2
  %23 = bitcast %"class.net::HostResolver::MdnsListener::Delegate"** %22 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %23, i64 0, i32 1, i32 0
  %25 = load i8, i8* %24, align 1
  %26 = icmp slt i8 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %21
  %28 = bitcast %"class.net::HostResolver::MdnsListener::Delegate"** %22 to i8**
  %29 = load i8*, i8** %28, align 8
  tail call void @_ZdlPv(i8* %29) #9
  br label %30

30:                                               ; preds = %21, %27
  %31 = bitcast %"class.net::HostResolver::MdnsListener::Delegate"** %2 to i8*
  tail call void @_ZdlPv(i8* %31) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3net28HostResolverMdnsListenerImpl5StartEPNS_12HostResolver12MdnsListener8DelegateE(%"class.net::HostResolverMdnsListenerImpl"* nocapture, %"class.net::HostResolver::MdnsListener::Delegate"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %16

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 0, i32 6
  store %"class.net::HostResolver::MdnsListener::Delegate"* %1, %"class.net::HostResolver::MdnsListener::Delegate"** %7, align 8
  %8 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %9 = load %"class.net::MDnsListener"*, %"class.net::MDnsListener"** %8, align 8
  %10 = bitcast %"class.net::MDnsListener"* %9 to i1 (%"class.net::MDnsListener"*)***
  %11 = load i1 (%"class.net::MDnsListener"*)**, i1 (%"class.net::MDnsListener"*)*** %10, align 8
  %12 = getelementptr inbounds i1 (%"class.net::MDnsListener"*)*, i1 (%"class.net::MDnsListener"*)** %11, i64 2
  %13 = load i1 (%"class.net::MDnsListener"*)*, i1 (%"class.net::MDnsListener"*)** %12, align 8
  %14 = tail call zeroext i1 %13(%"class.net::MDnsListener"* %9) #8
  %15 = select i1 %14, i32 0, i32 -2
  br label %16

16:                                               ; preds = %2, %6
  %17 = phi i32 [ %15, %6 ], [ %4, %2 ]
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net28HostResolverMdnsListenerImpl14OnRecordUpdateENS_12MDnsListener10UpdateTypeEPKNS_12RecordParsedE(%"class.net::HostResolverMdnsListenerImpl"*, i32, %"class.net::RecordParsed"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.net::HostCache::Entry", align 8
  %5 = alloca %"class.net::HostCache::Entry", align 8
  %6 = alloca %"class.net::IPEndPoint", align 2
  %7 = alloca %"class.std::__1::vector.16", align 8
  %8 = alloca %"class.net::HostPortPair", align 8
  %9 = bitcast %"class.net::HostCache::Entry"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %9) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 200, i1 false)
  %10 = bitcast %"class.net::HostCache::Entry"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %10) #8
  %11 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 0, i32 3
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 0, i32 2, i32 0
  call void @_ZN3net20HostResolverMdnsTask11ParseResultEiNS_12DnsQueryTypeEPKNS_12RecordParsedERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(%"class.net::HostCache::Entry"* nonnull sret %5, i32 0, i32 %12, %"class.net::RecordParsed"* %2, %"class.std::__1::basic_string"* dereferenceable(24) %13) #8
  %14 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 0, i32 2, i32 1
  %15 = load i16, i16* %14, align 8
  call void @_ZNK3net9HostCache5Entry19CopyWithDefaultPortEt(%"class.net::HostCache::Entry"* nonnull sret %4, %"class.net::HostCache::Entry"* nonnull %5, i16 zeroext %15) #8
  call void @_ZN3net9HostCache5EntryD1Ev(%"class.net::HostCache::Entry"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %10) #8
  %16 = getelementptr inbounds %"class.net::HostCache::Entry", %"class.net::HostCache::Entry"* %4, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %27, label %19

19:                                               ; preds = %3
  %20 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 0, i32 6
  %21 = load %"class.net::HostResolver::MdnsListener::Delegate"*, %"class.net::HostResolver::MdnsListener::Delegate"** %20, align 8
  %22 = load i32, i32* %11, align 8
  %23 = bitcast %"class.net::HostResolver::MdnsListener::Delegate"* %21 to void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32)***
  %24 = load void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32)**, void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32)*** %23, align 8
  %25 = getelementptr inbounds void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32)*, void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32)** %24, i64 5
  %26 = load void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32)*, void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32)** %25, align 8
  call void %26(%"class.net::HostResolver::MdnsListener::Delegate"* %21, i32 %1, i32 %22) #8
  br label %169

27:                                               ; preds = %3
  %28 = load i32, i32* %11, align 8
  switch i32 %28, label %169 [
    i32 5, label %131
    i32 4, label %131
    i32 3, label %43
    i32 1, label %29
    i32 2, label %29
  ]

29:                                               ; preds = %27, %27
  %30 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 0, i32 6
  %31 = load %"class.net::HostResolver::MdnsListener::Delegate"*, %"class.net::HostResolver::MdnsListener::Delegate"** %30, align 8
  %32 = getelementptr inbounds %"class.net::HostCache::Entry", %"class.net::HostCache::Entry"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %33 = load i8, i8* %32, align 8, !range !2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %29
  call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #10
  unreachable

36:                                               ; preds = %29
  %37 = getelementptr inbounds %"class.net::HostCache::Entry", %"class.net::HostCache::Entry"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %38 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %37, align 8
  call void @_ZN3net10IPEndPointC1ERKS0_(%"class.net::IPEndPoint"* nonnull %6, %"class.net::IPEndPoint"* dereferenceable(20) %38) #8
  %39 = bitcast %"class.net::HostResolver::MdnsListener::Delegate"* %31 to void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.net::IPEndPoint"*)***
  %40 = load void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.net::IPEndPoint"*)**, void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.net::IPEndPoint"*)*** %39, align 8
  %41 = getelementptr inbounds void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.net::IPEndPoint"*)*, void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.net::IPEndPoint"*)** %40, i64 2
  %42 = load void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.net::IPEndPoint"*)*, void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.net::IPEndPoint"*)** %41, align 8
  call void %42(%"class.net::HostResolver::MdnsListener::Delegate"* %31, i32 %1, i32 %28, %"class.net::IPEndPoint"* nonnull %6) #8
  call void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"* nonnull %6) #8
  br label %169

43:                                               ; preds = %27
  %44 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 0, i32 6
  %45 = load %"class.net::HostResolver::MdnsListener::Delegate"*, %"class.net::HostResolver::MdnsListener::Delegate"** %44, align 8
  %46 = getelementptr inbounds %"class.net::HostCache::Entry", %"class.net::HostCache::Entry"* %4, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %47 = load i8, i8* %46, align 8, !range !2
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %49, label %50

49:                                               ; preds = %43
  call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #10
  unreachable

50:                                               ; preds = %43
  %51 = getelementptr inbounds %"class.net::HostCache::Entry", %"class.net::HostCache::Entry"* %4, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1, i32 0
  %52 = bitcast %"class.std::__1::vector.16"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %52, i8 0, i64 24, i1 false) #8
  %53 = getelementptr inbounds %"class.net::HostCache::Entry", %"class.net::HostCache::Entry"* %4, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %54 = bitcast %"class.std::__1::basic_string"** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = bitcast %"class.std::__1::vector.16"* %51 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = sub i64 %55, %57
  %59 = sdiv exact i64 %58, 24
  %60 = icmp eq i64 %58, 0
  %61 = inttoptr i64 %57 to %"class.std::__1::basic_string"*
  %62 = inttoptr i64 %55 to %"class.std::__1::basic_string"*
  br i1 %60, label %101, label %63

63:                                               ; preds = %50
  %64 = icmp ugt i64 %59, 768614336404564650
  br i1 %64, label %65, label %67

65:                                               ; preds = %63
  %66 = bitcast %"class.std::__1::vector.16"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %66) #10
  unreachable

67:                                               ; preds = %63
  %68 = call i8* @_Znwm(i64 %58) #9
  %69 = bitcast i8* %68 to %"class.std::__1::basic_string"*
  %70 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %7, i64 0, i32 0, i32 1
  %71 = bitcast %"class.std::__1::basic_string"** %70 to i8**
  store i8* %68, i8** %71, align 8
  %72 = bitcast %"class.std::__1::vector.16"* %7 to i8**
  store i8* %68, i8** %72, align 8
  %73 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %69, i64 %59
  %74 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.std::__1::basic_string"* %73, %"class.std::__1::basic_string"** %74, align 8
  %75 = bitcast %"class.std::__1::basic_string"** %70 to i64*
  %76 = ptrtoint i8* %68 to i64
  %77 = icmp eq %"class.std::__1::basic_string"* %61, %62
  br i1 %77, label %99, label %78

78:                                               ; preds = %67, %93
  %79 = phi %"class.std::__1::basic_string"* [ %95, %93 ], [ %69, %67 ]
  %80 = phi %"class.std::__1::basic_string"* [ %94, %93 ], [ %61, %67 ]
  %81 = bitcast %"class.std::__1::basic_string"* %80 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %82 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %81, i64 0, i32 1, i32 0
  %83 = load i8, i8* %82, align 1
  %84 = icmp slt i8 %83, 0
  br i1 %84, label %88, label %85

85:                                               ; preds = %78
  %86 = bitcast %"class.std::__1::basic_string"* %79 to i8*
  %87 = bitcast %"class.std::__1::basic_string"* %80 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %86, i8* align 8 %87, i64 24, i1 false) #8
  br label %93

88:                                               ; preds = %78
  %89 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = load i8*, i8** %89, align 8
  %91 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %80, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %92 = load i64, i64* %91, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %79, i8* %90, i64 %92) #8
  br label %93

93:                                               ; preds = %88, %85
  %94 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %80, i64 1
  %95 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %79, i64 1
  %96 = icmp eq %"class.std::__1::basic_string"* %94, %62
  br i1 %96, label %97, label %78

97:                                               ; preds = %93
  %98 = ptrtoint %"class.std::__1::basic_string"* %95 to i64
  br label %99

99:                                               ; preds = %97, %67
  %100 = phi i64 [ %76, %67 ], [ %98, %97 ]
  store i64 %100, i64* %75, align 8
  br label %101

101:                                              ; preds = %50, %99
  %102 = bitcast %"class.net::HostResolver::MdnsListener::Delegate"* %45 to void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.std::__1::vector.16"*)***
  %103 = load void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.std::__1::vector.16"*)**, void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.std::__1::vector.16"*)*** %102, align 8
  %104 = getelementptr inbounds void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.std::__1::vector.16"*)*, void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.std::__1::vector.16"*)** %103, i64 3
  %105 = load void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.std::__1::vector.16"*)*, void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.std::__1::vector.16"*)** %104, align 8
  call void %105(%"class.net::HostResolver::MdnsListener::Delegate"* %45, i32 %1, i32 3, %"class.std::__1::vector.16"* nonnull %7) #8
  %106 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %7, i64 0, i32 0, i32 0
  %107 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %106, align 8
  %108 = icmp eq %"class.std::__1::basic_string"* %107, null
  br i1 %108, label %169, label %109

109:                                              ; preds = %101
  %110 = bitcast %"class.std::__1::basic_string"* %107 to i8*
  %111 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %7, i64 0, i32 0, i32 1
  %112 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %111, align 8
  %113 = icmp eq %"class.std::__1::basic_string"* %112, %107
  br i1 %113, label %129, label %114

114:                                              ; preds = %109, %124
  %115 = phi %"class.std::__1::basic_string"* [ %116, %124 ], [ %112, %109 ]
  %116 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %115, i64 -1
  %117 = bitcast %"class.std::__1::basic_string"* %116 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %118 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %117, i64 0, i32 1, i32 0
  %119 = load i8, i8* %118, align 1
  %120 = icmp slt i8 %119, 0
  br i1 %120, label %121, label %124

121:                                              ; preds = %114
  %122 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %116, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %123 = load i8*, i8** %122, align 8
  call void @_ZdlPv(i8* %123) #9
  br label %124

124:                                              ; preds = %121, %114
  %125 = icmp eq %"class.std::__1::basic_string"* %116, %107
  br i1 %125, label %126, label %114

126:                                              ; preds = %124
  %127 = bitcast %"class.std::__1::vector.16"* %7 to i8**
  %128 = load i8*, i8** %127, align 8
  br label %129

129:                                              ; preds = %126, %109
  %130 = phi i8* [ %128, %126 ], [ %110, %109 ]
  store %"class.std::__1::basic_string"* %107, %"class.std::__1::basic_string"** %111, align 8
  call void @_ZdlPv(i8* %130) #9
  br label %169

131:                                              ; preds = %27, %27
  %132 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 0, i32 6
  %133 = load %"class.net::HostResolver::MdnsListener::Delegate"*, %"class.net::HostResolver::MdnsListener::Delegate"** %132, align 8
  %134 = getelementptr inbounds %"class.net::HostCache::Entry", %"class.net::HostCache::Entry"* %4, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %135 = load i8, i8* %134, align 8, !range !2
  %136 = icmp eq i8 %135, 0
  br i1 %136, label %137, label %138

137:                                              ; preds = %131
  call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #10
  unreachable

138:                                              ; preds = %131
  %139 = getelementptr inbounds %"class.net::HostCache::Entry", %"class.net::HostCache::Entry"* %4, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %140 = load %"class.net::HostPortPair"*, %"class.net::HostPortPair"** %139, align 8
  %141 = bitcast %"class.net::HostPortPair"* %140 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %142 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %141, i64 0, i32 1, i32 0
  %143 = load i8, i8* %142, align 1
  %144 = icmp slt i8 %143, 0
  br i1 %144, label %148, label %145

145:                                              ; preds = %138
  %146 = bitcast %"class.net::HostPortPair"* %8 to i8*
  %147 = bitcast %"class.net::HostPortPair"* %140 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %146, i8* align 8 %147, i64 24, i1 false) #8
  br label %154

148:                                              ; preds = %138
  %149 = getelementptr inbounds %"class.net::HostPortPair", %"class.net::HostPortPair"* %8, i64 0, i32 0
  %150 = getelementptr inbounds %"class.net::HostPortPair", %"class.net::HostPortPair"* %140, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %151 = load i8*, i8** %150, align 8
  %152 = getelementptr inbounds %"class.net::HostPortPair", %"class.net::HostPortPair"* %140, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %153 = load i64, i64* %152, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* nonnull %149, i8* %151, i64 %153) #8
  br label %154

154:                                              ; preds = %145, %148
  %155 = getelementptr inbounds %"class.net::HostPortPair", %"class.net::HostPortPair"* %8, i64 0, i32 1
  %156 = getelementptr inbounds %"class.net::HostPortPair", %"class.net::HostPortPair"* %140, i64 0, i32 1
  %157 = load i16, i16* %156, align 8
  store i16 %157, i16* %155, align 8
  %158 = bitcast %"class.net::HostResolver::MdnsListener::Delegate"* %133 to void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.net::HostPortPair"*)***
  %159 = load void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.net::HostPortPair"*)**, void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.net::HostPortPair"*)*** %158, align 8
  %160 = getelementptr inbounds void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.net::HostPortPair"*)*, void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.net::HostPortPair"*)** %159, i64 4
  %161 = load void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.net::HostPortPair"*)*, void (%"class.net::HostResolver::MdnsListener::Delegate"*, i32, i32, %"class.net::HostPortPair"*)** %160, align 8
  call void %161(%"class.net::HostResolver::MdnsListener::Delegate"* %133, i32 %1, i32 %28, %"class.net::HostPortPair"* nonnull %8) #8
  %162 = bitcast %"class.net::HostPortPair"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %163 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %162, i64 0, i32 1, i32 0
  %164 = load i8, i8* %163, align 1
  %165 = icmp slt i8 %164, 0
  br i1 %165, label %166, label %169

166:                                              ; preds = %154
  %167 = getelementptr inbounds %"class.net::HostPortPair", %"class.net::HostPortPair"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %168 = load i8*, i8** %167, align 8
  call void @_ZdlPv(i8* %168) #9
  br label %169

169:                                              ; preds = %166, %154, %129, %101, %36, %27, %19
  call void @_ZN3net9HostCache5EntryD1Ev(%"class.net::HostCache::Entry"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %9) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN3net20HostResolverMdnsTask11ParseResultEiNS_12DnsQueryTypeEPKNS_12RecordParsedERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(%"class.net::HostCache::Entry"* sret, i32, i32, %"class.net::RecordParsed"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #3

declare void @_ZNK3net9HostCache5Entry19CopyWithDefaultPortEt(%"class.net::HostCache::Entry"* sret, %"class.net::HostCache::Entry"*, i16 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3net9HostCache5EntryD1Ev(%"class.net::HostCache::Entry"*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN3net10IPEndPointC1ERKS0_(%"class.net::IPEndPoint"*, %"class.net::IPEndPoint"* dereferenceable(20)) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn8_N3net28HostResolverMdnsListenerImpl14OnRecordUpdateENS_12MDnsListener10UpdateTypeEPKNS_12RecordParsedE(%"class.net::HostResolverMdnsListenerImpl"*, i32, %"class.net::RecordParsed"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.net::HostResolverMdnsListenerImpl", %"class.net::HostResolverMdnsListenerImpl"* %0, i64 -1, i32 6
  %5 = bitcast %"class.net::HostResolver::MdnsListener::Delegate"** %4 to %"class.net::HostResolverMdnsListenerImpl"*
  tail call void @_ZN3net28HostResolverMdnsListenerImpl14OnRecordUpdateENS_12MDnsListener10UpdateTypeEPKNS_12RecordParsedE(%"class.net::HostResolverMdnsListenerImpl"* %5, i32 %1, %"class.net::RecordParsed"* %2)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3net28HostResolverMdnsListenerImpl12OnNsecRecordERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj(%"class.net::HostResolverMdnsListenerImpl"* nocapture, %"class.std::__1::basic_string"* nocapture dereferenceable(24), i32) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZThn8_N3net28HostResolverMdnsListenerImpl12OnNsecRecordERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj(%"class.net::HostResolverMdnsListenerImpl"* nocapture, %"class.std::__1::basic_string"* nocapture dereferenceable(24), i32) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3net28HostResolverMdnsListenerImpl13OnCachePurgedEv(%"class.net::HostResolverMdnsListenerImpl"* nocapture) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZThn8_N3net28HostResolverMdnsListenerImpl13OnCachePurgedEv(%"class.net::HostResolverMdnsListenerImpl"* nocapture) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
