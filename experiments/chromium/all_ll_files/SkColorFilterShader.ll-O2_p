; ModuleID = '../../third_party/skia/src/shaders/SkColorFilterShader.cpp'
source_filename = "../../third_party/skia/src/shaders/SkColorFilterShader.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkColorFilterShader = type <{ %class.SkShaderBase.base, [4 x i8], %class.sk_sp, %class.sk_sp.1, float, [4 x i8] }>
%class.SkShaderBase.base = type { %class.SkShader.base, %class.SkMatrix }
%class.SkShader.base = type { %class.SkFlattenable.base }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkMatrix = type { [9 x float], i32 }
%class.sk_sp = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.1 = type { %class.SkColorFilterBase* }
%class.SkColorFilterBase = type { %class.SkColorFilter.base, [4 x i8] }
%class.SkColorFilter.base = type { %class.SkFlattenable.base }
%class.sk_sp.2 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkShaderBase = type { %class.SkShader.base, %class.SkMatrix, [4 x i8] }
%class.sk_sp.12 = type { %class.SkFlattenable* }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkReadBuffer = type <{ i8*, i8*, i8*, %class.SkTHashMap, i32, [4 x i8], %class.sk_sp.4*, i32, [4 x i8], {}**, i32, [4 x i8], %struct.SkDeserialProcs, i8, [7 x i8] }>
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, void (%class.sk_sp.12*, %class.SkReadBuffer*)* }
%class.sk_sp.4 = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.5" }
%"struct.std::__1::atomic.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl.8" }
%"struct.std::__1::__cxx_atomic_impl.8" = type { %"struct.std::__1::__cxx_atomic_base_impl.9" }
%"struct.std::__1::__cxx_atomic_base_impl.9" = type { i8 }
%struct.SkDeserialProcs = type { {}*, i8*, {}*, i8*, void (%class.sk_sp.4*, i8*, i64, i8*)*, i8* }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%struct.SkSerialProcs = type { void (%class.sk_sp.18*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp.18*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp.18*, %class.SkTypeface*, i8*)*, i8* }
%class.sk_sp.18 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.14", [7 x i8] }>
%"struct.std::__1::atomic.14" = type { %"struct.std::__1::__atomic_base.15" }
%"struct.std::__1::__atomic_base.15" = type { %"struct.std::__1::__cxx_atomic_impl.16" }
%"struct.std::__1::__cxx_atomic_impl.16" = type { %"struct.std::__1::__cxx_atomic_base_impl.17" }
%"struct.std::__1::__cxx_atomic_base_impl.17" = type { i8 }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.19, i32, i32 }
%class.sk_sp.19 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.20, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.20 = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.SkISize = type { i32, i32 }
%struct.SkStageRec = type { %class.SkRasterPipeline*, %class.SkArenaAlloc*, i32, %class.SkColorSpace*, %class.SkPaint*, %class.SkMatrix*, %class.SkMatrixProvider* }
%class.SkRasterPipeline = type { %class.SkArenaAlloc*, %"struct.SkRasterPipeline::StageList"*, i32, i32 }
%"struct.SkRasterPipeline::StageList" = type { %"struct.SkRasterPipeline::StageList"*, i32, i8* }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%class.SkPaint = type <{ %class.sk_sp.21, %class.sk_sp, %class.sk_sp.22, %class.sk_sp.2, %class.sk_sp.23, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.21 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.22 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.23 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%class.SkMatrixProvider = type opaque
%"class.skvm::Builder" = type <{ %class.SkTHashMap.24, %"class.std::__1::vector", %"class.std::__1::vector.36", %"struct.skvm::Features", [6 x i8] }>
%class.SkTHashMap.24 = type { %class.SkTHashTable.25 }
%class.SkTHashTable.25 = type { i32, i32, %class.SkAutoTArray.26 }
%class.SkAutoTArray.26 = type { %"class.std::__1::unique_ptr.27" }
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"struct.SkTHashTable<SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair, skvm::Instruction, SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair, skvm::Instruction, SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair>::Slot" = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.skvm::Instruction"*, %"struct.skvm::Instruction"*, %"class.std::__1::__compressed_pair.33" }
%"struct.skvm::Instruction" = type { i32, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.skvm::Instruction"* }
%"class.std::__1::vector.36" = type { %"class.std::__1::__vector_base.37" }
%"class.std::__1::__vector_base.37" = type { i32*, i32*, %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { i32* }
%"struct.skvm::Features" = type { i8, i8 }
%"struct.skvm::Coord" = type { %"struct.skvm::F32", %"struct.skvm::F32" }
%"struct.skvm::F32" = type <{ %"class.skvm::Builder"*, i32, [4 x i8] }>
%"struct.skvm::Color" = type { %"struct.skvm::F32", %"struct.skvm::F32", %"struct.skvm::F32", %"struct.skvm::F32" }
%"struct.skvm::Uniforms" = type { %"struct.skvm::Ptr", %"class.std::__1::vector.36" }
%"struct.skvm::Ptr" = type { i32 }
%"class.std::__1::__vector_base_common" = type { i8 }
%class.GrFragmentProcessor = type <{ %class.GrProcessor, %class.SkSTArray, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage", [4 x i8] }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [8 x i8] }
%class.SkTArray = type { %"class.std::__1::unique_ptr.43"*, i64 }
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %class.GrFragmentProcessor* }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%struct.GrFPArgs = type { %class.GrRecordingContext*, %class.SkMatrixProvider*, %class.SkMatrix*, i8, %class.GrColorInfo* }
%class.GrRecordingContext = type { %class.GrImageContext.base, %"class.GrRecordingContext::Stats", %"class.std::__1::unique_ptr.50", %"class.GrRecordingContext::OwnedArenas", %"class.std::__1::unique_ptr.93", %"class.std::__1::unique_ptr.99" }
%class.GrImageContext.base = type <{ %class.GrContext_Base, %class.GrSingleOwner }>
%class.GrContext_Base = type { %class.SkRefCnt.base, %class.sk_sp.49 }
%class.sk_sp.49 = type { %class.GrContextThreadSafeProxy* }
%class.GrContextThreadSafeProxy = type opaque
%class.GrSingleOwner = type { i8 }
%"class.GrRecordingContext::Stats" = type { i8 }
%"class.std::__1::unique_ptr.50" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %class.GrAuditTrail* }
%class.GrAuditTrail = type <{ %class.SkTArray.53, %class.SkTHashMap.55, %class.SkTHashMap.64, %class.SkTArray.73, %class.SkTArray.75, i32, i8, [3 x i8] }>
%class.SkTArray.53 = type { %"class.std::__1::unique_ptr.54"*, i64 }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.GrAuditTrail::Op"* }
%"struct.GrAuditTrail::Op" = type <{ %class.SkString, %class.SkTArray.75, %struct.SkRect, i32, i32, i32, [4 x i8] }>
%class.SkString = type { %class.sk_sp.76 }
%class.sk_sp.76 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%class.SkTHashMap.55 = type { %class.SkTHashTable.56 }
%class.SkTHashTable.56 = type { i32, i32, %class.SkAutoTArray.57 }
%class.SkAutoTArray.57 = type { %"class.std::__1::unique_ptr.58" }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair", i32 }
%"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.111" }
%"struct.std::__1::pair.111" = type { i32, i32 }
%class.SkTHashMap.64 = type { %class.SkTHashTable.65 }
%class.SkTHashTable.65 = type { i32, i32, %class.SkAutoTArray.66 }
%class.SkAutoTArray.66 = type { %"class.std::__1::unique_ptr.67" }
%"class.std::__1::unique_ptr.67" = type { %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.112" }
%"struct.std::__1::pair.112" = type { i32, %class.SkTArray.113* }
%class.SkTArray.113 = type { %"struct.GrAuditTrail::Op"**, i64 }
%class.SkTArray.73 = type { %"class.std::__1::unique_ptr.74"*, i64 }
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"struct.GrAuditTrail::OpNode"* }
%"struct.GrAuditTrail::OpNode" = type <{ %struct.SkRect, %class.SkTArray.113, %"class.GrSurfaceProxy::UniqueID", [4 x i8] }>
%"class.GrSurfaceProxy::UniqueID" = type { i32 }
%class.SkTArray.75 = type { %class.SkString*, i64 }
%"class.GrRecordingContext::OwnedArenas" = type { i8, %"class.std::__1::unique_ptr.80", %"class.std::__1::unique_ptr.86" }
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %class.SkArenaAlloc* }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %class.GrSubRunAllocator* }
%class.GrSubRunAllocator = type { %class.GrBagOfBytes }
%class.GrBagOfBytes = type { i8*, i32, %class.SkFibBlockSizes.89 }
%class.SkFibBlockSizes.89 = type { i32 }
%"class.std::__1::unique_ptr.93" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %class.GrDrawingManager* }
%class.GrDrawingManager = type opaque
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %class.GrProxyProvider* }
%class.GrProxyProvider = type opaque
%class.GrColorInfo = type opaque
%"struct.SkShader::GradientInfo" = type { i32, i32*, float*, [2 x %struct.SkPoint], [2 x float], i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkRuntimeEffect = type opaque
%"class.SkShaderBase::Context" = type <{ i32 (...)**, %class.SkShaderBase*, %class.SkMatrix, %class.SkMatrix, i8, [7 x i8] }>
%"struct.SkShaderBase::ContextRec" = type <{ %class.SkMatrix*, %class.SkMatrix*, i32, [4 x i8], %class.SkColorSpace*, i8, i8, [6 x i8] }>
%class.SkStageUpdater = type { i32 (...)** }

$_ZN4skvm8Uniforms5pushFEf = comdat any

$_ZN19SkColorFilterShaderD2Ev = comdat any

$_ZN19SkColorFilterShaderD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNK19SkColorFilterShader10getFactoryEv = comdat any

$_ZNK19SkColorFilterShader11getTypeNameEv = comdat any

$_ZNK12SkShaderBase18getFlattenableTypeEv = comdat any

$_ZNK12SkShaderBase10isConstantEv = comdat any

$_ZNK12SkShaderBase10onIsAImageEP8SkMatrixP10SkTileMode = comdat any

$_ZNK12SkShaderBase15asRuntimeEffectEv = comdat any

$_ZNK12SkShaderBase13onMakeContextERKNS_10ContextRecEP12SkArenaAlloc = comdat any

$_ZNK12SkShaderBase18onAsLuminanceColorEPj = comdat any

$_ZNK12SkShaderBase23onAppendUpdatableStagesERK10SkStageRec = comdat any

@_ZTV19SkColorFilterShader = hidden unnamed_addr constant { [21 x i8*] } { [21 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkColorFilterShader*)* @_ZN19SkColorFilterShaderD2Ev to i8*), i8* bitcast (void (%class.SkColorFilterShader*)* @_ZN19SkColorFilterShaderD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.sk_sp.12*, %class.SkReadBuffer*)* (%class.SkColorFilterShader*)* @_ZNK19SkColorFilterShader10getFactoryEv to i8*), i8* bitcast (i8* (%class.SkColorFilterShader*)* @_ZNK19SkColorFilterShader11getTypeNameEv to i8*), i8* bitcast (void (%class.SkColorFilterShader*, %class.SkWriteBuffer*)* @_ZNK19SkColorFilterShader7flattenER13SkWriteBuffer to i8*), i8* bitcast (i32 (%class.SkShaderBase*)* @_ZNK12SkShaderBase18getFlattenableTypeEv to i8*), i8* bitcast (i1 (%class.SkColorFilterShader*)* @_ZNK19SkColorFilterShader8isOpaqueEv to i8*), i8* bitcast (i32 (%class.SkShader*, %"struct.SkShader::GradientInfo"*)* @_ZNK8SkShader11asAGradientEPNS_12GradientInfoE to i8*), i8* bitcast (i1 (%class.SkShaderBase*)* @_ZNK12SkShaderBase10isConstantEv to i8*), i8* bitcast (%class.GrFragmentProcessor* (%class.SkColorFilterShader*, %struct.GrFPArgs*)* @_ZNK19SkColorFilterShader19asFragmentProcessorERK8GrFPArgs to i8*), i8* bitcast (%class.SkImage* (%class.SkShaderBase*, %class.SkMatrix*, i32*)* @_ZNK12SkShaderBase10onIsAImageEP8SkMatrixP10SkTileMode to i8*), i8* bitcast (%class.SkRuntimeEffect* (%class.SkShaderBase*)* @_ZNK12SkShaderBase15asRuntimeEffectEv to i8*), i8* bitcast (void (%class.sk_sp*, %class.SkShaderBase*, %class.SkMatrix*)* @_ZNK12SkShaderBase24makeAsALocalMatrixShaderEP8SkMatrix to i8*), i8* bitcast (%"class.SkShaderBase::Context"* (%class.SkShaderBase*, %"struct.SkShaderBase::ContextRec"*, %class.SkArenaAlloc*)* @_ZNK12SkShaderBase13onMakeContextERKNS_10ContextRecEP12SkArenaAlloc to i8*), i8* bitcast (i1 (%class.SkShaderBase*, i32*)* @_ZNK12SkShaderBase18onAsLuminanceColorEPj to i8*), i8* bitcast (i1 (%class.SkColorFilterShader*, %struct.SkStageRec*)* @_ZNK19SkColorFilterShader14onAppendStagesERK10SkStageRec to i8*), i8* bitcast (%class.SkStageUpdater* (%class.SkShaderBase*, %struct.SkStageRec*)* @_ZNK12SkShaderBase23onAppendUpdatableStagesERK10SkStageRec to i8*), i8* bitcast (void (%"struct.skvm::Color"*, %class.SkColorFilterShader*, %"class.skvm::Builder"*, %"struct.skvm::Coord"*, %"struct.skvm::Coord"*, %"struct.skvm::Color"*, %class.SkMatrixProvider*, %class.SkMatrix*, %class.SkColorInfo*, %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*)* @_ZNK19SkColorFilterShader9onProgramEPN4skvm7BuilderENS0_5CoordES3_NS0_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS0_8UniformsEP12SkArenaAlloc to i8*)] }, align 8
@.str.1 = private unnamed_addr constant [20 x i8] c"SkColorFilterShader\00", align 1

@_ZN19SkColorFilterShaderC1E5sk_spI8SkShaderEfS0_I13SkColorFilterE = hidden unnamed_addr alias void (%class.SkColorFilterShader*, %class.sk_sp*, float, %class.sk_sp.2*), void (%class.SkColorFilterShader*, %class.sk_sp*, float, %class.sk_sp.2*)* @_ZN19SkColorFilterShaderC2E5sk_spI8SkShaderEfS0_I13SkColorFilterE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19SkColorFilterShaderC2E5sk_spI8SkShaderEfS0_I13SkColorFilterE(%class.SkColorFilterShader*, %class.sk_sp* nocapture, float, %class.sk_sp.2* nocapture) unnamed_addr #0 align 2 {
  %5 = bitcast %class.SkColorFilterShader* %0 to %class.SkShaderBase*
  tail call void @_ZN12SkShaderBaseC2EPK8SkMatrix(%class.SkShaderBase* %5, %class.SkMatrix* null) #9
  %6 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [21 x i8*] }, { [21 x i8*] }* @_ZTV19SkColorFilterShader, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %0, i64 0, i32 2
  %8 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %9 = bitcast %class.sk_sp* %1 to i64*
  %10 = load i64, i64* %9, align 8
  store %class.SkShader* null, %class.SkShader** %8, align 8
  %11 = bitcast %class.sk_sp* %7 to i64*
  store i64 %10, i64* %11, align 8
  %12 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %0, i64 0, i32 3
  %13 = getelementptr inbounds %class.sk_sp.2, %class.sk_sp.2* %3, i64 0, i32 0
  %14 = bitcast %class.sk_sp.2* %3 to i64*
  %15 = load i64, i64* %14, align 8
  store %class.SkColorFilter* null, %class.SkColorFilter** %13, align 8
  %16 = bitcast %class.sk_sp.1* %12 to i64*
  store i64 %15, i64* %16, align 8, !alias.scope !2
  %17 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %0, i64 0, i32 4
  store float %2, float* %17, align 8
  ret void
}

declare void @_ZN12SkShaderBaseC2EPK8SkMatrix(%class.SkShaderBase*, %class.SkMatrix*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19SkColorFilterShader10CreateProcER12SkReadBuffer(%class.sk_sp.12* noalias nocapture sret, %class.SkReadBuffer* dereferenceable(136)) #0 align 2 {
  %3 = tail call %class.SkFlattenable* @_ZN12SkReadBuffer15readFlattenableEN13SkFlattenable4TypeE(%class.SkReadBuffer* %1, i32 8) #9, !noalias !5
  %4 = tail call %class.SkFlattenable* @_ZN12SkReadBuffer15readFlattenableEN13SkFlattenable4TypeE(%class.SkReadBuffer* %1, i32 0) #9, !noalias !10
  %5 = icmp eq %class.SkFlattenable* %3, null
  %6 = icmp eq %class.SkFlattenable* %4, null
  %7 = or i1 %5, %6
  br i1 %7, label %8, label %10

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.sk_sp.12, %class.sk_sp.12* %0, i64 0, i32 0
  store %class.SkFlattenable* null, %class.SkFlattenable** %9, align 8
  br label %28

10:                                               ; preds = %2
  %11 = ptrtoint %class.SkFlattenable* %4 to i64
  %12 = ptrtoint %class.SkFlattenable* %3 to i64
  %13 = tail call i8* @_Znwm(i64 80) #10, !noalias !15
  %14 = getelementptr inbounds %class.SkFlattenable, %class.SkFlattenable* %3, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = atomicrmw add i32* %14, i32 1 monotonic, !noalias !15
  %16 = getelementptr inbounds %class.SkFlattenable, %class.SkFlattenable* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw add i32* %16, i32 1 monotonic, !noalias !15
  %18 = bitcast i8* %13 to %class.SkShaderBase*
  tail call void @_ZN12SkShaderBaseC2EPK8SkMatrix(%class.SkShaderBase* nonnull %18, %class.SkMatrix* null) #9, !noalias !15
  %19 = bitcast i8* %13 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [21 x i8*] }, { [21 x i8*] }* @_ZTV19SkColorFilterShader, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %19, align 8, !noalias !15
  %20 = getelementptr inbounds i8, i8* %13, i64 56
  %21 = bitcast i8* %20 to i64*
  store i64 %12, i64* %21, align 8, !noalias !15
  %22 = getelementptr inbounds i8, i8* %13, i64 64
  %23 = bitcast i8* %22 to i64*
  store i64 %11, i64* %23, align 8, !alias.scope !18, !noalias !15
  %24 = getelementptr inbounds i8, i8* %13, i64 72
  %25 = bitcast i8* %24 to i32*
  store i32 1065353216, i32* %25, align 8, !noalias !15
  %26 = ptrtoint i8* %13 to i64
  %27 = bitcast %class.sk_sp.12* %0 to i64*
  store i64 %26, i64* %27, align 8
  br label %28

28:                                               ; preds = %10, %8
  br i1 %6, label %39, label %29

29:                                               ; preds = %28
  %30 = getelementptr inbounds %class.SkFlattenable, %class.SkFlattenable* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = atomicrmw add i32* %30, i32 -1 acq_rel
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %33, label %39

33:                                               ; preds = %29
  %34 = bitcast %class.SkFlattenable* %4 to %class.SkRefCntBase*
  %35 = bitcast %class.SkFlattenable* %4 to void (%class.SkRefCntBase*)***
  %36 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %35, align 8
  %37 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %36, i64 2
  %38 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %37, align 8
  tail call void %38(%class.SkRefCntBase* nonnull %34) #9
  br label %39

39:                                               ; preds = %28, %29, %33
  br i1 %5, label %50, label %40

40:                                               ; preds = %39
  %41 = getelementptr inbounds %class.SkFlattenable, %class.SkFlattenable* %3, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = atomicrmw add i32* %41, i32 -1 acq_rel
  %43 = icmp eq i32 %42, 1
  br i1 %43, label %44, label %50

44:                                               ; preds = %40
  %45 = bitcast %class.SkFlattenable* %3 to %class.SkRefCntBase*
  %46 = bitcast %class.SkFlattenable* %3 to void (%class.SkRefCntBase*)***
  %47 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %46, align 8
  %48 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %47, i64 2
  %49 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %48, align 8
  tail call void %49(%class.SkRefCntBase* nonnull %45) #9
  br label %50

50:                                               ; preds = %39, %40, %44
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK19SkColorFilterShader8isOpaqueEv(%class.SkColorFilterShader* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %0, i64 0, i32 2, i32 0
  %3 = load %class.SkShader*, %class.SkShader** %2, align 8
  %4 = bitcast %class.SkShader* %3 to i1 (%class.SkShader*)***
  %5 = load i1 (%class.SkShader*)**, i1 (%class.SkShader*)*** %4, align 8
  %6 = getelementptr inbounds i1 (%class.SkShader*)*, i1 (%class.SkShader*)** %5, i64 7
  %7 = load i1 (%class.SkShader*)*, i1 (%class.SkShader*)** %6, align 8
  %8 = tail call zeroext i1 %7(%class.SkShader* %3) #9
  br i1 %8, label %9, label %34

9:                                                ; preds = %1
  %10 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %0, i64 0, i32 4
  %11 = load float, float* %10, align 8
  %12 = fcmp oeq float %11, 1.000000e+00
  br i1 %12, label %13, label %34

13:                                               ; preds = %9
  %14 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %0, i64 0, i32 3, i32 0
  %15 = load %class.SkColorFilterBase*, %class.SkColorFilterBase** %14, align 8
  %16 = icmp eq %class.SkColorFilterBase* %15, null
  br i1 %16, label %17, label %20

17:                                               ; preds = %13
  %18 = bitcast %class.SkColorFilterBase* %15 to %class.SkColorFilter*
  %19 = tail call zeroext i1 @_ZNK13SkColorFilter16isAlphaUnchangedEv(%class.SkColorFilter* %18) #9
  br label %34

20:                                               ; preds = %13
  %21 = getelementptr inbounds %class.SkColorFilterBase, %class.SkColorFilterBase* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw add i32* %21, i32 1 monotonic
  %23 = bitcast %class.SkColorFilterBase* %15 to %class.SkColorFilter*
  %24 = tail call zeroext i1 @_ZNK13SkColorFilter16isAlphaUnchangedEv(%class.SkColorFilter* nonnull %23) #9
  %25 = getelementptr inbounds %class.SkColorFilterBase, %class.SkColorFilterBase* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = atomicrmw add i32* %25, i32 -1 acq_rel
  %27 = icmp eq i32 %26, 1
  br i1 %27, label %28, label %34

28:                                               ; preds = %20
  %29 = bitcast %class.SkColorFilterBase* %15 to %class.SkRefCntBase*
  %30 = bitcast %class.SkColorFilterBase* %15 to void (%class.SkRefCntBase*)***
  %31 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %30, align 8
  %32 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %31, i64 2
  %33 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %32, align 8
  tail call void %33(%class.SkRefCntBase* nonnull %29) #9
  br label %34

34:                                               ; preds = %17, %1, %9, %28, %20
  %35 = phi i1 [ %24, %20 ], [ %24, %28 ], [ false, %9 ], [ false, %1 ], [ %19, %17 ]
  ret i1 %35
}

declare zeroext i1 @_ZNK13SkColorFilter16isAlphaUnchangedEv(%class.SkColorFilter*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK19SkColorFilterShader7flattenER13SkWriteBuffer(%class.SkColorFilterShader* nocapture readonly, %class.SkWriteBuffer* dereferenceable(56)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %0, i64 0, i32 2, i32 0
  %4 = bitcast %class.SkShader** %3 to %class.SkFlattenable**
  %5 = load %class.SkFlattenable*, %class.SkFlattenable** %4, align 8
  %6 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, %class.SkFlattenable*)***
  %7 = load void (%class.SkWriteBuffer*, %class.SkFlattenable*)**, void (%class.SkWriteBuffer*, %class.SkFlattenable*)*** %6, align 8
  %8 = getelementptr inbounds void (%class.SkWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkWriteBuffer*, %class.SkFlattenable*)** %7, i64 11
  %9 = load void (%class.SkWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkWriteBuffer*, %class.SkFlattenable*)** %8, align 8
  tail call void %9(%class.SkWriteBuffer* %1, %class.SkFlattenable* %5) #9
  %10 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %0, i64 0, i32 3, i32 0
  %11 = bitcast %class.SkColorFilterBase** %10 to %class.SkFlattenable**
  %12 = load %class.SkFlattenable*, %class.SkFlattenable** %11, align 8
  %13 = load void (%class.SkWriteBuffer*, %class.SkFlattenable*)**, void (%class.SkWriteBuffer*, %class.SkFlattenable*)*** %6, align 8
  %14 = getelementptr inbounds void (%class.SkWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkWriteBuffer*, %class.SkFlattenable*)** %13, i64 11
  %15 = load void (%class.SkWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkWriteBuffer*, %class.SkFlattenable*)** %14, align 8
  tail call void %15(%class.SkWriteBuffer* %1, %class.SkFlattenable* %12) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK19SkColorFilterShader14onAppendStagesERK10SkStageRec(%class.SkColorFilterShader* nocapture readonly, %struct.SkStageRec* dereferenceable(56)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %0, i64 0, i32 2
  %4 = bitcast %class.sk_sp* %3 to %class.SkShaderBase**
  %5 = load %class.SkShaderBase*, %class.SkShaderBase** %4, align 8
  %6 = tail call zeroext i1 @_ZNK12SkShaderBase12appendStagesERK10SkStageRec(%class.SkShaderBase* %5, %struct.SkStageRec* dereferenceable(56) %1) #9
  br i1 %6, label %7, label %51

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %0, i64 0, i32 4
  %9 = load float, float* %8, align 8
  %10 = fcmp une float %9, 1.000000e+00
  br i1 %10, label %11, label %40

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %1, i64 0, i32 0
  %13 = load %class.SkRasterPipeline*, %class.SkRasterPipeline** %12, align 8
  %14 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %1, i64 0, i32 1
  %15 = load %class.SkArenaAlloc*, %class.SkArenaAlloc** %14, align 8
  %16 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %15, i64 0, i32 1
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 0, %18
  %20 = and i64 %19, 3
  %21 = or i64 %20, 4
  %22 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %15, i64 0, i32 2
  %23 = bitcast i8** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %24, %18
  %26 = icmp ugt i64 %21, %25
  br i1 %26, label %27, label %31

27:                                               ; preds = %11
  tail call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %15, i32 4, i32 4) #9
  %28 = load i64, i64* %17, align 8
  %29 = sub i64 0, %28
  %30 = and i64 %29, 3
  br label %31

31:                                               ; preds = %11, %27
  %32 = phi i64 [ %28, %27 ], [ %18, %11 ]
  %33 = phi i64 [ %30, %27 ], [ %20, %11 ]
  %34 = inttoptr i64 %32 to i8*
  %35 = getelementptr inbounds i8, i8* %34, i64 %33
  %36 = getelementptr inbounds i8, i8* %35, i64 4
  store i8* %36, i8** %16, align 8
  %37 = bitcast float* %8 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = bitcast i8* %35 to i32*
  store i32 %38, i32* %39, align 4
  tail call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %13, i32 91, i8* %35) #9
  br label %40

40:                                               ; preds = %31, %7
  %41 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %0, i64 0, i32 3, i32 0
  %42 = load %class.SkColorFilterBase*, %class.SkColorFilterBase** %41, align 8
  %43 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %3, i64 0, i32 0
  %44 = load %class.SkShader*, %class.SkShader** %43, align 8
  %45 = bitcast %class.SkShader* %44 to i1 (%class.SkShader*)***
  %46 = load i1 (%class.SkShader*)**, i1 (%class.SkShader*)*** %45, align 8
  %47 = getelementptr inbounds i1 (%class.SkShader*)*, i1 (%class.SkShader*)** %46, i64 7
  %48 = load i1 (%class.SkShader*)*, i1 (%class.SkShader*)** %47, align 8
  %49 = tail call zeroext i1 %48(%class.SkShader* %44) #9
  %50 = tail call zeroext i1 @_ZNK17SkColorFilterBase12appendStagesERK10SkStageRecb(%class.SkColorFilterBase* %42, %struct.SkStageRec* dereferenceable(56) %1, i1 zeroext %49) #9
  br label %51

51:                                               ; preds = %40, %2
  %52 = phi i1 [ false, %2 ], [ %50, %40 ]
  ret i1 %52
}

declare zeroext i1 @_ZNK12SkShaderBase12appendStagesERK10SkStageRec(%class.SkShaderBase*, %struct.SkStageRec* dereferenceable(56)) local_unnamed_addr #1

declare void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline*, i32, i8*) local_unnamed_addr #1

declare zeroext i1 @_ZNK17SkColorFilterBase12appendStagesERK10SkStageRecb(%class.SkColorFilterBase*, %struct.SkStageRec* dereferenceable(56), i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK19SkColorFilterShader9onProgramEPN4skvm7BuilderENS0_5CoordES3_NS0_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS0_8UniformsEP12SkArenaAlloc(%"struct.skvm::Color"* noalias sret, %class.SkColorFilterShader* nocapture readonly, %"class.skvm::Builder"*, %"struct.skvm::Coord"* nocapture readonly byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Coord"* nocapture readonly byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Color"* nocapture readonly byval(%"struct.skvm::Color") align 8, %class.SkMatrixProvider*, %class.SkMatrix*, %class.SkColorInfo* dereferenceable(16), %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*) unnamed_addr #0 align 2 {
  %12 = alloca %"struct.skvm::Color", align 8
  %13 = bitcast %"struct.skvm::Color"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %13) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 64, i1 false)
  %14 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %1, i64 0, i32 2
  %15 = bitcast %class.sk_sp* %14 to %class.SkShaderBase**
  %16 = load %class.SkShaderBase*, %class.SkShaderBase** %15, align 8
  call void @_ZNK12SkShaderBase7programEPN4skvm7BuilderENS0_5CoordES3_NS0_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS0_8UniformsEP12SkArenaAlloc(%"struct.skvm::Color"* nonnull sret %12, %class.SkShaderBase* %16, %"class.skvm::Builder"* %2, %"struct.skvm::Coord"* nonnull byval(%"struct.skvm::Coord") align 8 %3, %"struct.skvm::Coord"* nonnull byval(%"struct.skvm::Coord") align 8 %4, %"struct.skvm::Color"* nonnull byval(%"struct.skvm::Color") align 8 %5, %class.SkMatrixProvider* %6, %class.SkMatrix* %7, %class.SkColorInfo* dereferenceable(16) %8, %"struct.skvm::Uniforms"* %9, %class.SkArenaAlloc* %10) #9
  %17 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 0, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, -1
  br i1 %19, label %32, label %20

20:                                               ; preds = %11
  %21 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 1, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, -1
  br i1 %23, label %32, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 2, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = icmp eq i32 %26, -1
  br i1 %27, label %32, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 3, i32 1
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %41

32:                                               ; preds = %28, %11, %20, %24
  %33 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 0, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %33, align 8
  %34 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 0, i32 1
  store i32 -1, i32* %34, align 8
  %35 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %35, align 8
  %36 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 1
  store i32 -1, i32* %36, align 8
  %37 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %37, align 8
  %38 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 1
  store i32 -1, i32* %38, align 8
  %39 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %39, align 8
  %40 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 1
  store i32 -1, i32* %40, align 8
  br label %82

41:                                               ; preds = %28
  %42 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %1, i64 0, i32 4
  %43 = load float, float* %42, align 8
  %44 = fcmp une float %43, 1.000000e+00
  br i1 %44, label %45, label %77

45:                                               ; preds = %41
  %46 = call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %9, float %43)
  %47 = trunc i64 %46 to i32
  %48 = lshr i64 %46, 32
  %49 = trunc i64 %48 to i32
  %50 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %2, i32 %47, i32 %49) #9
  %51 = extractvalue { %"class.skvm::Builder"*, i32 } %50, 0
  %52 = extractvalue { %"class.skvm::Builder"*, i32 } %50, 1
  %53 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 0, i32 0
  %54 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %53, align 8
  %55 = load i32, i32* %17, align 8
  %56 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %54, %"class.skvm::Builder"* %54, i32 %55, %"class.skvm::Builder"* %51, i32 %52) #9
  %57 = extractvalue { %"class.skvm::Builder"*, i32 } %56, 0
  %58 = extractvalue { %"class.skvm::Builder"*, i32 } %56, 1
  store %"class.skvm::Builder"* %57, %"class.skvm::Builder"** %53, align 8
  store i32 %58, i32* %17, align 8
  %59 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 1, i32 0
  %60 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %59, align 8
  %61 = load i32, i32* %21, align 8
  %62 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %60, %"class.skvm::Builder"* %60, i32 %61, %"class.skvm::Builder"* %51, i32 %52) #9
  %63 = extractvalue { %"class.skvm::Builder"*, i32 } %62, 0
  %64 = extractvalue { %"class.skvm::Builder"*, i32 } %62, 1
  store %"class.skvm::Builder"* %63, %"class.skvm::Builder"** %59, align 8
  store i32 %64, i32* %21, align 8
  %65 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 2, i32 0
  %66 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %65, align 8
  %67 = load i32, i32* %25, align 8
  %68 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %66, %"class.skvm::Builder"* %66, i32 %67, %"class.skvm::Builder"* %51, i32 %52) #9
  %69 = extractvalue { %"class.skvm::Builder"*, i32 } %68, 0
  %70 = extractvalue { %"class.skvm::Builder"*, i32 } %68, 1
  store %"class.skvm::Builder"* %69, %"class.skvm::Builder"** %65, align 8
  store i32 %70, i32* %25, align 8
  %71 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 3, i32 0
  %72 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %71, align 8
  %73 = load i32, i32* %29, align 8
  %74 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %72, %"class.skvm::Builder"* %72, i32 %73, %"class.skvm::Builder"* %51, i32 %52) #9
  %75 = extractvalue { %"class.skvm::Builder"*, i32 } %74, 0
  %76 = extractvalue { %"class.skvm::Builder"*, i32 } %74, 1
  store %"class.skvm::Builder"* %75, %"class.skvm::Builder"** %71, align 8
  store i32 %76, i32* %29, align 8
  br label %77

77:                                               ; preds = %45, %41
  %78 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %1, i64 0, i32 3, i32 0
  %79 = load %class.SkColorFilterBase*, %class.SkColorFilterBase** %78, align 8
  %80 = getelementptr inbounds %class.SkColorInfo, %class.SkColorInfo* %8, i64 0, i32 0, i32 0
  %81 = load %class.SkColorSpace*, %class.SkColorSpace** %80, align 8
  call void @_ZNK17SkColorFilterBase7programEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAlloc(%"struct.skvm::Color"* sret %0, %class.SkColorFilterBase* %79, %"class.skvm::Builder"* %2, %"struct.skvm::Color"* nonnull byval(%"struct.skvm::Color") align 8 %12, %class.SkColorSpace* %81, %"struct.skvm::Uniforms"* %9, %class.SkArenaAlloc* %10) #9
  br label %82

82:                                               ; preds = %77, %32
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZNK12SkShaderBase7programEPN4skvm7BuilderENS0_5CoordES3_NS0_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS0_8UniformsEP12SkArenaAlloc(%"struct.skvm::Color"* sret, %class.SkShaderBase*, %"class.skvm::Builder"*, %"struct.skvm::Coord"* byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Coord"* byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Color"* byval(%"struct.skvm::Color") align 8, %class.SkMatrixProvider*, %class.SkMatrix*, %class.SkColorInfo* dereferenceable(16), %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"*, float) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %0, i64 0, i32 1, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8
  %6 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = icmp eq i32* %5, %7
  %9 = ptrtoint i32* %7 to i64
  br i1 %8, label %16, label %10

10:                                               ; preds = %2
  %11 = bitcast i32* %5 to float*
  store float %1, float* %11, align 4
  %12 = getelementptr inbounds i32, i32* %5, i64 1
  %13 = ptrtoint i32* %12 to i64
  %14 = bitcast i32** %4 to i64*
  store i64 %13, i64* %14, align 8
  %15 = bitcast %"class.std::__1::vector.36"* %3 to i64*
  br label %74

16:                                               ; preds = %2
  %17 = ptrtoint i32* %5 to i64
  %18 = bitcast i32** %4 to i64*
  %19 = bitcast %"class.std::__1::vector.36"* %3 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 2
  %23 = add nsw i64 %22, 1
  %24 = icmp ugt i64 %23, 4611686018427387903
  br i1 %24, label %25, label %27

25:                                               ; preds = %16
  %26 = bitcast %"class.std::__1::vector.36"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %26) #11
  unreachable

27:                                               ; preds = %16
  %28 = bitcast i32** %6 to i64*
  %29 = sub i64 %9, %20
  %30 = ashr exact i64 %29, 2
  %31 = icmp ult i64 %30, 2305843009213693951
  br i1 %31, label %32, label %40

32:                                               ; preds = %27
  %33 = ashr exact i64 %29, 1
  %34 = icmp ult i64 %33, %23
  %35 = select i1 %34, i64 %23, i64 %33
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %45, label %37

37:                                               ; preds = %32
  %38 = icmp ugt i64 %35, 4611686018427387903
  br i1 %38, label %39, label %40

39:                                               ; preds = %37
  tail call void @abort() #11
  unreachable

40:                                               ; preds = %37, %27
  %41 = phi i64 [ %35, %37 ], [ 4611686018427387903, %27 ]
  %42 = shl i64 %41, 2
  %43 = tail call i8* @_Znwm(i64 %42) #10
  %44 = bitcast i8* %43 to i32*
  br label %45

45:                                               ; preds = %40, %32
  %46 = phi i64 [ %41, %40 ], [ 0, %32 ]
  %47 = phi i32* [ %44, %40 ], [ null, %32 ]
  %48 = getelementptr inbounds i32, i32* %47, i64 %22
  %49 = getelementptr inbounds i32, i32* %47, i64 %46
  %50 = ptrtoint i32* %49 to i64
  %51 = bitcast i32* %48 to float*
  store float %1, float* %51, align 4
  %52 = getelementptr inbounds i32, i32* %48, i64 1
  %53 = ptrtoint i32* %52 to i64
  %54 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %3, i64 0, i32 0, i32 0
  %55 = load i32*, i32** %54, align 8
  %56 = load i64, i64* %18, align 8
  %57 = ptrtoint i32* %55 to i64
  %58 = sub i64 %56, %57
  %59 = ashr exact i64 %58, 2
  %60 = sub nsw i64 0, %59
  %61 = getelementptr inbounds i32, i32* %48, i64 %60
  %62 = ptrtoint i32* %61 to i64
  %63 = icmp sgt i64 %58, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %45
  %65 = bitcast i32* %61 to i8*
  %66 = bitcast i32* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %65, i8* align 4 %66, i64 %58, i1 false) #9
  %67 = load i32*, i32** %54, align 8
  br label %68

68:                                               ; preds = %64, %45
  %69 = phi i32* [ %55, %45 ], [ %67, %64 ]
  store i64 %62, i64* %19, align 8
  store i64 %53, i64* %18, align 8
  store i64 %50, i64* %28, align 8
  %70 = icmp eq i32* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %68
  %72 = bitcast i32* %69 to i8*
  tail call void @_ZdlPv(i8* %72) #10
  %73 = load i64, i64* %18, align 8
  br label %74

74:                                               ; preds = %10, %68, %71
  %75 = phi i64* [ %15, %10 ], [ %19, %68 ], [ %19, %71 ]
  %76 = phi i64 [ %13, %10 ], [ %53, %68 ], [ %73, %71 ]
  %77 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %0, i64 0, i32 0, i32 0
  %78 = load i32, i32* %77, align 8
  %79 = load i64, i64* %75, align 8
  %80 = sub i64 %76, %79
  %81 = shl i64 %80, 32
  %82 = add i64 %81, -17179869184
  %83 = zext i32 %78 to i64
  %84 = or i64 %82, %83
  ret i64 %84
}

declare void @_ZNK17SkColorFilterBase7programEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAlloc(%"struct.skvm::Color"* sret, %class.SkColorFilterBase*, %"class.skvm::Builder"*, %"struct.skvm::Color"* byval(%"struct.skvm::Color") align 8, %class.SkColorSpace*, %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %class.GrFragmentProcessor* @_ZNK19SkColorFilterShader19asFragmentProcessorERK8GrFPArgs(%class.SkColorFilterShader* nocapture readonly, %struct.GrFPArgs* dereferenceable(40)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %0, i64 0, i32 2
  %4 = bitcast %class.sk_sp* %3 to %class.SkShaderBase**
  %5 = load %class.SkShaderBase*, %class.SkShaderBase** %4, align 8
  %6 = bitcast %class.SkShaderBase* %5 to %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)***
  %7 = load %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)**, %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)*** %6, align 8
  %8 = getelementptr inbounds %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)*, %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)** %7, i64 10
  %9 = load %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)*, %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)** %8, align 8
  %10 = tail call %class.GrFragmentProcessor* %9(%class.SkShaderBase* %5, %struct.GrFPArgs* dereferenceable(40) %1) #9
  %11 = icmp eq %class.GrFragmentProcessor* %10, null
  br i1 %11, label %25, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %0, i64 0, i32 3, i32 0
  %14 = load %class.SkColorFilterBase*, %class.SkColorFilterBase** %13, align 8
  %15 = getelementptr inbounds %struct.GrFPArgs, %struct.GrFPArgs* %1, i64 0, i32 0
  %16 = load %class.GrRecordingContext*, %class.GrRecordingContext** %15, align 8
  %17 = getelementptr inbounds %struct.GrFPArgs, %struct.GrFPArgs* %1, i64 0, i32 4
  %18 = load %class.GrColorInfo*, %class.GrColorInfo** %17, align 8
  %19 = bitcast %class.SkColorFilterBase* %14 to { i8, %class.GrFragmentProcessor* } (%class.SkColorFilterBase*, %class.GrFragmentProcessor*, %class.GrRecordingContext*, %class.GrColorInfo*)***
  %20 = load { i8, %class.GrFragmentProcessor* } (%class.SkColorFilterBase*, %class.GrFragmentProcessor*, %class.GrRecordingContext*, %class.GrColorInfo*)**, { i8, %class.GrFragmentProcessor* } (%class.SkColorFilterBase*, %class.GrFragmentProcessor*, %class.GrRecordingContext*, %class.GrColorInfo*)*** %19, align 8
  %21 = getelementptr inbounds { i8, %class.GrFragmentProcessor* } (%class.SkColorFilterBase*, %class.GrFragmentProcessor*, %class.GrRecordingContext*, %class.GrColorInfo*)*, { i8, %class.GrFragmentProcessor* } (%class.SkColorFilterBase*, %class.GrFragmentProcessor*, %class.GrRecordingContext*, %class.GrColorInfo*)** %20, i64 8
  %22 = load { i8, %class.GrFragmentProcessor* } (%class.SkColorFilterBase*, %class.GrFragmentProcessor*, %class.GrRecordingContext*, %class.GrColorInfo*)*, { i8, %class.GrFragmentProcessor* } (%class.SkColorFilterBase*, %class.GrFragmentProcessor*, %class.GrRecordingContext*, %class.GrColorInfo*)** %21, align 8
  %23 = tail call { i8, %class.GrFragmentProcessor* } %22(%class.SkColorFilterBase* %14, %class.GrFragmentProcessor* nonnull %10, %class.GrRecordingContext* %16, %class.GrColorInfo* %18) #9
  %24 = extractvalue { i8, %class.GrFragmentProcessor* } %23, 1
  br label %25

25:                                               ; preds = %2, %12
  %26 = phi %class.GrFragmentProcessor* [ %24, %12 ], [ null, %2 ]
  ret %class.GrFragmentProcessor* %26
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8SkShader19makeWithColorFilterE5sk_spI13SkColorFilterE(%class.sk_sp* noalias nocapture sret, %class.SkShader*, %class.sk_sp.2* nocapture readonly) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.sk_sp.2, %class.sk_sp.2* %2, i64 0, i32 0
  %5 = load %class.SkColorFilter*, %class.SkColorFilter** %4, align 8
  %6 = icmp eq %class.SkColorFilter* %5, null
  %7 = icmp eq %class.SkShader* %1, null
  br i1 %6, label %8, label %14

8:                                                ; preds = %3
  br i1 %7, label %12, label %9

9:                                                ; preds = %8
  %10 = getelementptr inbounds %class.SkShader, %class.SkShader* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw add i32* %10, i32 1 monotonic, !noalias !21
  br label %12

12:                                               ; preds = %8, %9
  %13 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  store %class.SkShader* %1, %class.SkShader** %13, align 8, !alias.scope !21
  br label %38

14:                                               ; preds = %3
  br i1 %7, label %18, label %15

15:                                               ; preds = %14
  %16 = getelementptr inbounds %class.SkShader, %class.SkShader* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw add i32* %16, i32 1 monotonic, !noalias !24
  br label %18

18:                                               ; preds = %14, %15
  %19 = ptrtoint %class.SkShader* %1 to i64
  %20 = tail call i8* @_Znwm(i64 80) #10, !noalias !27
  %21 = load %class.SkColorFilter*, %class.SkColorFilter** %4, align 8, !noalias !27
  %22 = icmp eq %class.SkColorFilter* %21, null
  br i1 %22, label %26, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %21, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = atomicrmw add i32* %24, i32 1 monotonic, !noalias !27
  br label %26

26:                                               ; preds = %18, %23
  %27 = ptrtoint %class.SkColorFilter* %21 to i64
  %28 = bitcast i8* %20 to %class.SkShaderBase*
  tail call void @_ZN12SkShaderBaseC2EPK8SkMatrix(%class.SkShaderBase* nonnull %28, %class.SkMatrix* null) #9, !noalias !27
  %29 = bitcast i8* %20 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [21 x i8*] }, { [21 x i8*] }* @_ZTV19SkColorFilterShader, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %29, align 8, !noalias !27
  %30 = getelementptr inbounds i8, i8* %20, i64 56
  %31 = bitcast i8* %30 to i64*
  store i64 %19, i64* %31, align 8, !noalias !27
  %32 = getelementptr inbounds i8, i8* %20, i64 64
  %33 = bitcast i8* %32 to i64*
  store i64 %27, i64* %33, align 8, !alias.scope !30, !noalias !27
  %34 = getelementptr inbounds i8, i8* %20, i64 72
  %35 = bitcast i8* %34 to i32*
  store i32 1065353216, i32* %35, align 8, !noalias !27
  %36 = ptrtoint i8* %20 to i64
  %37 = bitcast %class.sk_sp* %0 to i64*
  store i64 %36, i64* %37, align 8
  br label %38

38:                                               ; preds = %26, %12
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN19SkColorFilterShaderD2Ev(%class.SkColorFilterShader*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [21 x i8*] }, { [21 x i8*] }* @_ZTV19SkColorFilterShader, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %0, i64 0, i32 3, i32 0
  %4 = load %class.SkColorFilterBase*, %class.SkColorFilterBase** %3, align 8
  %5 = icmp eq %class.SkColorFilterBase* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkColorFilterBase, %class.SkColorFilterBase* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.SkColorFilterBase* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.SkColorFilterBase* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #9
  br label %16

16:                                               ; preds = %1, %6, %10
  %17 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %0, i64 0, i32 2, i32 0
  %18 = load %class.SkShader*, %class.SkShader** %17, align 8
  %19 = icmp eq %class.SkShader* %18, null
  br i1 %19, label %30, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %class.SkShader, %class.SkShader* %18, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw add i32* %21, i32 -1 acq_rel
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %30

24:                                               ; preds = %20
  %25 = bitcast %class.SkShader* %18 to %class.SkRefCntBase*
  %26 = bitcast %class.SkShader* %18 to void (%class.SkRefCntBase*)***
  %27 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %26, align 8
  %28 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %27, i64 2
  %29 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %28, align 8
  tail call void %29(%class.SkRefCntBase* nonnull %25) #9
  br label %30

30:                                               ; preds = %16, %20, %24
  %31 = bitcast %class.SkColorFilterShader* %0 to %class.SkShaderBase*
  tail call void @_ZN12SkShaderBaseD2Ev(%class.SkShaderBase* %31) #9
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN19SkColorFilterShaderD0Ev(%class.SkColorFilterShader*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [21 x i8*] }, { [21 x i8*] }* @_ZTV19SkColorFilterShader, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %0, i64 0, i32 3, i32 0
  %4 = load %class.SkColorFilterBase*, %class.SkColorFilterBase** %3, align 8
  %5 = icmp eq %class.SkColorFilterBase* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkColorFilterBase, %class.SkColorFilterBase* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.SkColorFilterBase* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.SkColorFilterBase* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #9
  br label %16

16:                                               ; preds = %10, %6, %1
  %17 = getelementptr inbounds %class.SkColorFilterShader, %class.SkColorFilterShader* %0, i64 0, i32 2, i32 0
  %18 = load %class.SkShader*, %class.SkShader** %17, align 8
  %19 = icmp eq %class.SkShader* %18, null
  br i1 %19, label %30, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %class.SkShader, %class.SkShader* %18, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw add i32* %21, i32 -1 acq_rel
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %30

24:                                               ; preds = %20
  %25 = bitcast %class.SkShader* %18 to %class.SkRefCntBase*
  %26 = bitcast %class.SkShader* %18 to void (%class.SkRefCntBase*)***
  %27 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %26, align 8
  %28 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %27, i64 2
  %29 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %28, align 8
  tail call void %29(%class.SkRefCntBase* nonnull %25) #9
  br label %30

30:                                               ; preds = %16, %20, %24
  %31 = bitcast %class.SkColorFilterShader* %0 to %class.SkShaderBase*
  tail call void @_ZN12SkShaderBaseD2Ev(%class.SkShaderBase* %31) #9
  %32 = bitcast %class.SkColorFilterShader* %0 to i8*
  tail call void @_ZdlPv(i8* %32) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #9
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void (%class.sk_sp.12*, %class.SkReadBuffer*)* @_ZNK19SkColorFilterShader10getFactoryEv(%class.SkColorFilterShader*) unnamed_addr #0 comdat align 2 {
  ret void (%class.sk_sp.12*, %class.SkReadBuffer*)* @_ZN19SkColorFilterShader10CreateProcER12SkReadBuffer
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK19SkColorFilterShader11getTypeNameEv(%class.SkColorFilterShader*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK12SkShaderBase18getFlattenableTypeEv(%class.SkShaderBase*) unnamed_addr #0 comdat align 2 {
  ret i32 8
}

declare i32 @_ZNK8SkShader11asAGradientEPNS_12GradientInfoE(%class.SkShader*, %"struct.SkShader::GradientInfo"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK12SkShaderBase10isConstantEv(%class.SkShaderBase*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkImage* @_ZNK12SkShaderBase10onIsAImageEP8SkMatrixP10SkTileMode(%class.SkShaderBase*, %class.SkMatrix*, i32*) unnamed_addr #0 comdat align 2 {
  ret %class.SkImage* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkRuntimeEffect* @_ZNK12SkShaderBase15asRuntimeEffectEv(%class.SkShaderBase*) unnamed_addr #0 comdat align 2 {
  ret %class.SkRuntimeEffect* null
}

declare void @_ZNK12SkShaderBase24makeAsALocalMatrixShaderEP8SkMatrix(%class.sk_sp* sret, %class.SkShaderBase*, %class.SkMatrix*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkShaderBase::Context"* @_ZNK12SkShaderBase13onMakeContextERKNS_10ContextRecEP12SkArenaAlloc(%class.SkShaderBase*, %"struct.SkShaderBase::ContextRec"* dereferenceable(40), %class.SkArenaAlloc*) unnamed_addr #0 comdat align 2 {
  ret %"class.SkShaderBase::Context"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK12SkShaderBase18onAsLuminanceColorEPj(%class.SkShaderBase*, i32*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkStageUpdater* @_ZNK12SkShaderBase23onAppendUpdatableStagesERK10SkStageRec(%class.SkShaderBase*, %struct.SkStageRec* dereferenceable(56)) unnamed_addr #0 comdat align 2 {
  ret %class.SkStageUpdater* null
}

declare %class.SkFlattenable* @_ZN12SkReadBuffer15readFlattenableEN13SkFlattenable4TypeE(%class.SkReadBuffer*, i32) local_unnamed_addr #1

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"*, i32, i32) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN12SkShaderBaseD2Ev(%class.SkShaderBase*) unnamed_addr #8

declare void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZL9as_CFB_sp5sk_spI13SkColorFilterE: argument 0"}
!4 = distinct !{!4, !"_ZL9as_CFB_sp5sk_spI13SkColorFilterE"}
!5 = !{!6, !8}
!6 = distinct !{!6, !7, !"_ZN12SkReadBuffer15readFlattenableI12SkShaderBaseEE5sk_spIT_Ev: argument 0"}
!7 = distinct !{!7, !"_ZN12SkReadBuffer15readFlattenableI12SkShaderBaseEE5sk_spIT_Ev"}
!8 = distinct !{!8, !9, !"_ZN12SkReadBuffer10readShaderEv: argument 0"}
!9 = distinct !{!9, !"_ZN12SkReadBuffer10readShaderEv"}
!10 = !{!11, !13}
!11 = distinct !{!11, !12, !"_ZN12SkReadBuffer15readFlattenableI17SkColorFilterBaseEE5sk_spIT_Ev: argument 0"}
!12 = distinct !{!12, !"_ZN12SkReadBuffer15readFlattenableI17SkColorFilterBaseEE5sk_spIT_Ev"}
!13 = distinct !{!13, !14, !"_ZN12SkReadBuffer15readColorFilterEv: argument 0"}
!14 = distinct !{!14, !"_ZN12SkReadBuffer15readColorFilterEv"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_Z10sk_make_spI19SkColorFilterShaderJR5sk_spI8SkShaderEfRS1_I13SkColorFilterEEES1_IT_EDpOT0_: argument 0"}
!17 = distinct !{!17, !"_Z10sk_make_spI19SkColorFilterShaderJR5sk_spI8SkShaderEfRS1_I13SkColorFilterEEES1_IT_EDpOT0_"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZL9as_CFB_sp5sk_spI13SkColorFilterE: argument 0"}
!20 = distinct !{!20, !"_ZL9as_CFB_sp5sk_spI13SkColorFilterE"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_Z9sk_ref_spI8SkShaderE5sk_spIT_EPS2_: argument 0"}
!23 = distinct !{!23, !"_Z9sk_ref_spI8SkShaderE5sk_spIT_EPS2_"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_Z9sk_ref_spI8SkShaderE5sk_spIT_EPS2_: argument 0"}
!26 = distinct !{!26, !"_Z9sk_ref_spI8SkShaderE5sk_spIT_EPS2_"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_Z10sk_make_spI19SkColorFilterShaderJ5sk_spI8SkShaderEfRS1_I13SkColorFilterEEES1_IT_EDpOT0_: argument 0"}
!29 = distinct !{!29, !"_Z10sk_make_spI19SkColorFilterShaderJ5sk_spI8SkShaderEfRS1_I13SkColorFilterEEES1_IT_EDpOT0_"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZL9as_CFB_sp5sk_spI13SkColorFilterE: argument 0"}
!32 = distinct !{!32, !"_ZL9as_CFB_sp5sk_spI13SkColorFilterE"}
