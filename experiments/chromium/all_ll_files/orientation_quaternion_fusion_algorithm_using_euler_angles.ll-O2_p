; ModuleID = '../../services/device/generic_sensor/orientation_quaternion_fusion_algorithm_using_euler_angles.cc'
source_filename = "../../services/device/generic_sensor/orientation_quaternion_fusion_algorithm_using_euler_angles.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles" = type { %"class.device::PlatformSensorFusionAlgorithm" }
%"class.device::PlatformSensorFusionAlgorithm" = type { i32 (...)**, %"class.device::PlatformSensorFusion"*, double, i32, %"class.std::__1::vector.29" }
%"class.device::PlatformSensorFusion" = type <{ %"class.device::PlatformSensor", %"class.device::PlatformSensor::Client", %"union.device::SensorReading", %"class.std::__1::unique_ptr", %"class.base::flat_map", i32, [4 x i8] }>
%"class.device::PlatformSensor" = type { i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8], %"class.base::ObserverList", %class.scoped_refptr, %"struct.device::SensorReadingSharedBuffer"*, i32, %"class.std::__1::map", %"class.device::PlatformSensorProvider"*, i8, %"union.device::SensorReading", %"class.base::Lock", i8, %"class.base::WeakPtrFactory" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%class.scoped_refptr = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.2" }>
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.device::SensorReadingSharedBuffer" = type { %"class.device::SensorReadingField", %"union.device::SensorReading" }
%"class.device::SensorReadingField" = type { %"union.device::SensorReadingField<device::OneWriterSeqLock>::Storage" }
%"union.device::SensorReadingField<device::OneWriterSeqLock>::Storage" = type { i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.4", %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { i64 }
%"class.device::PlatformSensorProvider" = type opaque
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.12 }
%class.scoped_refptr.12 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.13", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.13" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.14" }
%"struct.std::__1::atomic.14" = type { %"struct.std::__1::__atomic_base.15" }
%"struct.std::__1::__atomic_base.15" = type { %"struct.std::__1::__atomic_base.16" }
%"struct.std::__1::__atomic_base.16" = type { %"struct.std::__1::__cxx_atomic_impl.17" }
%"struct.std::__1::__cxx_atomic_impl.17" = type { %"struct.std::__1::__cxx_atomic_base_impl.18" }
%"struct.std::__1::__cxx_atomic_base_impl.18" = type { i8 }
%"class.device::PlatformSensor::Client" = type { i32 (...)** }
%"union.device::SensorReading" = type { %"struct.device::SensorReadingRaw" }
%"struct.device::SensorReadingRaw" = type { %"struct.device::SensorReadingBase", [4 x %"class.device::SensorReadingField.3"] }
%"struct.device::SensorReadingBase" = type { %"class.device::SensorReadingField.3" }
%"class.device::SensorReadingField.3" = type { %"union.device::SensorReadingField<double>::Storage" }
%"union.device::SensorReadingField<double>::Storage" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.device::PlatformSensorFusionAlgorithm"* }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.22" }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.24" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::pair"* }
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { i32*, i32*, %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { i32* }

@_ZTVN6device52OrientationQuaternionFusionAlgorithmUsingEulerAnglesE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles"*)* @_ZN6device52OrientationQuaternionFusionAlgorithmUsingEulerAnglesD2Ev to i8*), i8* bitcast (void (%"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles"*)* @_ZN6device52OrientationQuaternionFusionAlgorithmUsingEulerAnglesD0Ev to i8*), i8* bitcast (void (%"class.device::PlatformSensorFusionAlgorithm"*, double)* @_ZN6device29PlatformSensorFusionAlgorithm12SetFrequencyEd to i8*), i8* bitcast (void (%"class.device::PlatformSensorFusionAlgorithm"*)* @_ZN6device29PlatformSensorFusionAlgorithm5ResetEv to i8*), i8* bitcast (i1 (%"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles"*, i32, %"union.device::SensorReading"*)* @_ZN6device52OrientationQuaternionFusionAlgorithmUsingEulerAngles20GetFusedDataInternalENS_5mojom10SensorTypeEPNS_13SensorReadingE to i8*)] }, align 8

@_ZN6device52OrientationQuaternionFusionAlgorithmUsingEulerAnglesC1Eb = hidden unnamed_addr alias void (%"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles"*, i1), void (%"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles"*, i1)* @_ZN6device52OrientationQuaternionFusionAlgorithmUsingEulerAnglesC2Eb
@_ZN6device52OrientationQuaternionFusionAlgorithmUsingEulerAnglesD1Ev = hidden unnamed_addr alias void (%"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles"*), void (%"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles"*)* @_ZN6device52OrientationQuaternionFusionAlgorithmUsingEulerAnglesD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device52OrientationQuaternionFusionAlgorithmUsingEulerAnglesC2Eb(%"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles"*, i1 zeroext) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::vector.29", align 8
  %4 = getelementptr inbounds %"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles", %"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles"* %0, i64 0, i32 0
  %5 = select i1 %1, i32 9, i32 11
  %6 = bitcast %"class.std::__1::vector.29"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #7
  %7 = select i1 %1, i32 8, i32 10
  %8 = tail call i8* @_Znwm(i64 4) #8
  %9 = bitcast i8* %8 to i32*
  %10 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %3, i64 0, i32 0, i32 1
  %11 = bitcast %"class.std::__1::vector.29"* %3 to i8**
  store i8* %8, i8** %11, align 8
  %12 = getelementptr inbounds i8, i8* %8, i64 4
  %13 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %14 = bitcast i32** %13 to i8**
  store i8* %12, i8** %14, align 8
  %15 = bitcast i32** %10 to i64*
  store i32 %7, i32* %9, align 4
  %16 = ptrtoint i8* %12 to i64
  store i64 %16, i64* %15, align 8
  call void @_ZN6device29PlatformSensorFusionAlgorithmC2ENS_5mojom10SensorTypeERKNSt3__16vectorIS2_NS3_9allocatorIS2_EEEE(%"class.device::PlatformSensorFusionAlgorithm"* %4, i32 %5, %"class.std::__1::vector.29"* nonnull dereferenceable(24) %3) #7
  %17 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %3, i64 0, i32 0, i32 0
  %18 = load i32*, i32** %17, align 8
  %19 = icmp eq i32* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %2
  %21 = ptrtoint i32* %18 to i64
  store i64 %21, i64* %15, align 8
  %22 = bitcast i32* %18 to i8*
  call void @_ZdlPv(i8* %22) #8
  br label %23

23:                                               ; preds = %2, %20
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #7
  %24 = getelementptr inbounds %"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles", %"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN6device52OrientationQuaternionFusionAlgorithmUsingEulerAnglesE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %24, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN6device29PlatformSensorFusionAlgorithmC2ENS_5mojom10SensorTypeERKNSt3__16vectorIS2_NS3_9allocatorIS2_EEEE(%"class.device::PlatformSensorFusionAlgorithm"*, i32, %"class.std::__1::vector.29"* dereferenceable(24)) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare void @_ZN6device29PlatformSensorFusionAlgorithmD2Ev(%"class.device::PlatformSensorFusionAlgorithm"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device52OrientationQuaternionFusionAlgorithmUsingEulerAnglesD2Ev(%"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles", %"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles"* %0, i64 0, i32 0
  tail call void @_ZN6device29PlatformSensorFusionAlgorithmD2Ev(%"class.device::PlatformSensorFusionAlgorithm"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device52OrientationQuaternionFusionAlgorithmUsingEulerAnglesD0Ev(%"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles", %"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles"* %0, i64 0, i32 0
  tail call void @_ZN6device29PlatformSensorFusionAlgorithmD2Ev(%"class.device::PlatformSensorFusionAlgorithm"* %2) #7
  %3 = bitcast %"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6device52OrientationQuaternionFusionAlgorithmUsingEulerAngles20GetFusedDataInternalENS_5mojom10SensorTypeEPNS_13SensorReadingE(%"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles"* nocapture readonly, i32, %"union.device::SensorReading"* nocapture) unnamed_addr #0 align 2 {
  %4 = alloca %"union.device::SensorReading", align 8
  %5 = bitcast %"union.device::SensorReading"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %5) #7
  %6 = bitcast %"union.device::SensorReading"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 40, i1 false)
  call void @_ZN6device13SensorReadingC1Ev(%"union.device::SensorReading"* nonnull %4) #7
  %7 = getelementptr inbounds %"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles", %"class.device::OrientationQuaternionFusionAlgorithmUsingEulerAngles"* %0, i64 0, i32 0, i32 1
  %8 = load %"class.device::PlatformSensorFusion"*, %"class.device::PlatformSensorFusion"** %7, align 8
  %9 = bitcast %"class.device::PlatformSensorFusion"* %8 to i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)***
  %10 = load i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)**, i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)*** %9, align 8
  %11 = getelementptr inbounds i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)*, i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)** %10, i64 14
  %12 = load i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)*, i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)** %11, align 8
  %13 = call zeroext i1 %12(%"class.device::PlatformSensorFusion"* %8, i32 %1, %"union.device::SensorReading"* nonnull %4) #7
  br i1 %13, label %14, label %70

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"union.device::SensorReading", %"union.device::SensorReading"* %4, i64 0, i32 0, i32 1, i64 2
  %16 = bitcast %"class.device::SensorReadingField.3"* %15 to double*
  %17 = load double, double* %16, align 8
  %18 = getelementptr inbounds %"union.device::SensorReading", %"union.device::SensorReading"* %4, i64 0, i32 0, i32 1, i64 0
  %19 = bitcast %"class.device::SensorReadingField.3"* %18 to double*
  %20 = load double, double* %19, align 8
  %21 = getelementptr inbounds %"union.device::SensorReading", %"union.device::SensorReading"* %4, i64 0, i32 0, i32 1, i64 1
  %22 = bitcast %"class.device::SensorReadingField.3"* %21 to double*
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds %"union.device::SensorReading", %"union.device::SensorReading"* %2, i64 0, i32 0, i32 1, i64 0
  %25 = getelementptr inbounds %"union.device::SensorReading", %"union.device::SensorReading"* %2, i64 0, i32 0, i32 1, i64 2
  %26 = bitcast %"class.device::SensorReadingField.3"* %25 to double*
  %27 = getelementptr inbounds %"union.device::SensorReading", %"union.device::SensorReading"* %2, i64 0, i32 0, i32 1, i64 3
  %28 = bitcast %"class.device::SensorReadingField.3"* %27 to double*
  %29 = fcmp ord double %17, 0.000000e+00
  %30 = select i1 %29, double %17, double 0.000000e+00
  %31 = fmul double %30, 0x400921FB54442D18
  %32 = fdiv double %31, 1.800000e+02
  %33 = fmul double %20, 0x400921FB54442D18
  %34 = fdiv double %33, 1.800000e+02
  %35 = fmul double %23, 0x400921FB54442D18
  %36 = fdiv double %35, 1.800000e+02
  %37 = fmul double %34, 5.000000e-01
  %38 = call double @cos(double %37) #7
  %39 = fmul double %36, 5.000000e-01
  %40 = call double @cos(double %39) #7
  %41 = fmul double %32, 5.000000e-01
  %42 = call double @cos(double %41) #7
  %43 = call double @sin(double %37) #7
  %44 = call double @sin(double %39) #7
  %45 = call double @sin(double %41) #7
  %46 = insertelement <2 x double> undef, double %40, i32 0
  %47 = insertelement <2 x double> %46, double %38, i32 1
  %48 = insertelement <2 x double> undef, double %43, i32 0
  %49 = insertelement <2 x double> %48, double %44, i32 1
  %50 = fmul <2 x double> %47, %49
  %51 = insertelement <2 x double> undef, double %42, i32 0
  %52 = shufflevector <2 x double> %51, <2 x double> undef, <2 x i32> zeroinitializer
  %53 = fmul <2 x double> %52, %50
  %54 = shufflevector <2 x double> %50, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %55 = insertelement <2 x double> undef, double %45, i32 0
  %56 = shufflevector <2 x double> %55, <2 x double> undef, <2 x i32> zeroinitializer
  %57 = fmul <2 x double> %54, %56
  %58 = fsub <2 x double> %53, %57
  %59 = fadd <2 x double> %53, %57
  %60 = shufflevector <2 x double> %58, <2 x double> %59, <2 x i32> <i32 0, i32 3>
  %61 = bitcast %"class.device::SensorReadingField.3"* %24 to <2 x double>*
  store <2 x double> %60, <2 x double>* %61, align 8
  %62 = fmul double %38, %40
  %63 = fmul double %62, %45
  %64 = fmul double %43, %44
  %65 = fmul double %42, %64
  %66 = fadd double %63, %65
  store double %66, double* %26, align 8
  %67 = fmul double %62, %42
  %68 = fmul double %64, %45
  %69 = fsub double %67, %68
  store double %69, double* %28, align 8
  br label %70

70:                                               ; preds = %3, %14
  %71 = phi i1 [ true, %14 ], [ false, %3 ]
  call void @_ZN6device13SensorReadingD1Ev(%"union.device::SensorReading"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %5) #7
  ret i1 %71
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN6device13SensorReadingC1Ev(%"union.device::SensorReading"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6device13SensorReadingD1Ev(%"union.device::SensorReading"*) unnamed_addr #3

declare void @_ZN6device29PlatformSensorFusionAlgorithm12SetFrequencyEd(%"class.device::PlatformSensorFusionAlgorithm"*, double) unnamed_addr #2

declare void @_ZN6device29PlatformSensorFusionAlgorithm5ResetEv(%"class.device::PlatformSensorFusionAlgorithm"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
