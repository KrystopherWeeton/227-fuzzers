; ModuleID = '../../third_party/skia/src/utils/SkCanvasStateUtils.cpp'
source_filename = "../../third_party/skia/src/utils/SkCanvasStateUtils.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkCanvasState = type { i32, i32, i32, i32 }
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp, [384 x i64], %class.sk_sp.0, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.9" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.0 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type { %class.SkRefCnt.base, %class.SkMatrixProvider, %class.SkMarkerStack*, %struct.SkImageInfo, %class.SkSurfaceProps, %class.SkM44, %class.SkM44 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkMatrixProvider = type { i32 (...)**, %class.SkM44, %class.SkMatrix }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.2, i32, i32 }
%class.sk_sp.2 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.SkM44 = type { [16 x float] }
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%class.SkSWriter32 = type { %class.SkWriter32, %union.anon.26 }
%class.SkWriter32 = type { i8*, i64, i64, i8*, %class.SkAutoTMalloc }
%class.SkAutoTMalloc = type { %"class.std::__1::unique_ptr.22" }
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { i8* }
%union.anon.26 = type { i8*, [88 x i8] }
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkCanvasLayerState = type { i32, i32, i32, i32, i32, %struct.SkMCState, %union.anon }
%struct.SkMCState = type { [9 x float], i32, %struct.ClipRect* }
%struct.ClipRect = type { i32, i32, i32, i32 }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i64, i8* }
%class.SkCanvasState_v1 = type { %class.SkCanvasState, %struct.SkMCState, i32, %struct.SkCanvasLayerState*, %class.SkCanvas* }
%class.SkSWriter32.40 = type { %class.SkWriter32, %union.anon.41 }
%union.anon.41 = type { i8*, [8 x i8] }
%class.SkBitmap = type { %class.sk_sp.42, %class.SkPixmap, %class.sk_sp.43 }
%class.sk_sp.42 = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.sk_sp.43 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%struct.SkIPoint = type { i32, i32 }
%class.SkCanvasStack = type { %class.SkNWayCanvas, %class.SkTArray }
%class.SkNWayCanvas = type { %class.SkCanvasVirtualEnforcer, %class.SkTDArray }
%class.SkCanvasVirtualEnforcer = type { %class.SkNoDrawCanvas }
%class.SkNoDrawCanvas = type { %class.SkCanvasVirtualEnforcer.36 }
%class.SkCanvasVirtualEnforcer.36 = type { %class.SkCanvas }
%class.SkTDArray = type { %class.SkCanvas**, i32, i32 }
%class.SkTArray = type { %"struct.SkCanvasStack::CanvasData"*, i64 }
%"struct.SkCanvasStack::CanvasData" = type { %struct.SkIPoint, %class.SkRegion, %"class.std::__1::unique_ptr.27" }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%"struct.SkRegion::RunHead" = type opaque
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %class.SkCanvas* }

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkCanvasState* @_ZN18SkCanvasStateUtils18CaptureCanvasStateEP8SkCanvas(%class.SkCanvas*) local_unnamed_addr #0 align 2 {
  %2 = alloca %class.SkMatrix, align 4
  %3 = alloca { i64, i64 }, align 8
  %4 = alloca %class.SkSWriter32, align 8
  %5 = alloca %class.SkPixmap, align 8
  %6 = alloca { i64, i64 }, align 8
  %7 = bitcast { i64, i64 }* %6 to %struct.SkIRect*
  %8 = tail call zeroext i1 @_ZNK8SkCanvas25androidFramework_isClipAAEv(%class.SkCanvas* %0) #6
  br i1 %8, label %187, label %9

9:                                                ; preds = %1
  %10 = bitcast { i64, i64 }* %3 to %struct.SkIRect*
  %11 = tail call i8* @_Znwm(i64 88) #7
  %12 = bitcast i8* %11 to i32*
  store i32 1, i32* %12, align 4
  %13 = bitcast %class.SkCanvas* %0 to i64 (%class.SkCanvas*)***
  %14 = load i64 (%class.SkCanvas*)**, i64 (%class.SkCanvas*)*** %13, align 8
  %15 = getelementptr inbounds i64 (%class.SkCanvas*)*, i64 (%class.SkCanvas*)** %14, i64 2
  %16 = load i64 (%class.SkCanvas*)*, i64 (%class.SkCanvas*)** %15, align 8
  %17 = tail call i64 %16(%class.SkCanvas* %0) #6
  %18 = trunc i64 %17 to i32
  %19 = getelementptr inbounds i8, i8* %11, i64 4
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 4
  %21 = load i64 (%class.SkCanvas*)**, i64 (%class.SkCanvas*)*** %13, align 8
  %22 = getelementptr inbounds i64 (%class.SkCanvas*)*, i64 (%class.SkCanvas*)** %21, i64 2
  %23 = load i64 (%class.SkCanvas*)*, i64 (%class.SkCanvas*)** %22, align 8
  %24 = tail call i64 %23(%class.SkCanvas* %0) #6
  %25 = lshr i64 %24, 32
  %26 = trunc i64 %25 to i32
  %27 = getelementptr inbounds i8, i8* %11, i64 8
  %28 = bitcast i8* %27 to i32*
  store i32 %26, i32* %28, align 4
  %29 = getelementptr inbounds i8, i8* %11, i64 72
  %30 = bitcast i8* %29 to %struct.SkCanvasLayerState**
  store %struct.SkCanvasLayerState* null, %struct.SkCanvasLayerState** %30, align 8
  %31 = getelementptr inbounds i8, i8* %11, i64 52
  %32 = getelementptr inbounds i8, i8* %11, i64 80
  %33 = bitcast i8* %32 to %class.SkCanvas**
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %31, i8 0, i64 16, i1 false) #6
  store %class.SkCanvas* %0, %class.SkCanvas** %33, align 8
  %34 = ptrtoint i8* %11 to i64
  %35 = getelementptr inbounds i8, i8* %11, i64 16
  %36 = bitcast i8* %35 to %struct.SkMCState*
  %37 = bitcast %class.SkMatrix* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %37) #6
  call void @_ZNK8SkCanvas14getTotalMatrixEv(%class.SkMatrix* nonnull sret %2, %class.SkCanvas* %0) #6
  %38 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #6
  %39 = call { i64, i64 } @_ZNK8SkCanvas19getDeviceClipBoundsEv(%class.SkCanvas* %0) #6
  %40 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %41 = extractvalue { i64, i64 } %39, 0
  store i64 %41, i64* %40, align 8
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %43 = extractvalue { i64, i64 } %39, 1
  store i64 %43, i64* %42, align 8
  call fastcc void @_ZL14setup_MC_stateP9SkMCStateRK8SkMatrixRK7SkIRect(%struct.SkMCState* %36, %class.SkMatrix* nonnull dereferenceable(40) %2, %struct.SkIRect* nonnull dereferenceable(16) %10)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %37) #6
  %44 = call %class.SkBaseDevice* @_ZNK8SkCanvas9topDeviceEv(%class.SkCanvas* %0) #6
  %45 = bitcast %class.SkSWriter32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %45) #6
  %46 = getelementptr inbounds %class.SkSWriter32, %class.SkSWriter32* %4, i64 0, i32 1
  %47 = bitcast %union.anon.26* %46 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %47, i8 -86, i64 96, i1 false)
  %48 = getelementptr inbounds %class.SkSWriter32, %class.SkSWriter32* %4, i64 0, i32 0, i32 1
  %49 = getelementptr inbounds %class.SkSWriter32, %class.SkSWriter32* %4, i64 0, i32 0, i32 2
  %50 = getelementptr inbounds %class.SkSWriter32, %class.SkSWriter32* %4, i64 0, i32 0, i32 3
  %51 = getelementptr inbounds %class.SkSWriter32, %class.SkSWriter32* %4, i64 0, i32 1
  %52 = bitcast %class.SkSWriter32* %4 to %union.anon.26**
  %53 = getelementptr inbounds %class.SkSWriter32, %class.SkSWriter32* %4, i64 0, i32 0, i32 4
  %54 = bitcast %class.SkAutoTMalloc* %53 to i64*
  store i64 0, i64* %54, align 8
  store %union.anon.26* %51, %union.anon.26** %52, align 8
  %55 = bitcast i64* %48 to <2 x i64>*
  store <2 x i64> <i64 96, i64 0>, <2 x i64>* %55, align 8
  %56 = bitcast i8** %50 to %union.anon.26**
  store %union.anon.26* %51, %union.anon.26** %56, align 8
  %57 = bitcast %class.SkPixmap* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %57) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 0, i64 40, i1 false) #6
  %58 = call zeroext i1 @_ZN12SkBaseDevice12accessPixelsEP8SkPixmap(%class.SkBaseDevice* %44, %class.SkPixmap* nonnull %5) #6
  br i1 %58, label %59, label %131

59:                                               ; preds = %9
  %60 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 2, i32 1, i32 0
  %61 = load i32, i32* %60, align 8
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %131, label %63

63:                                               ; preds = %59
  %64 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 2, i32 1, i32 1
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %131, label %67

67:                                               ; preds = %63
  %68 = call zeroext i1 @_ZNK12SkBaseDevice22isPixelAlignedToGlobalEv(%class.SkBaseDevice* %44) #6
  br i1 %68, label %69, label %131

69:                                               ; preds = %67
  %70 = call i64 @_ZNK12SkBaseDevice9getOriginEv(%class.SkBaseDevice* %44) #6
  %71 = trunc i64 %70 to i32
  %72 = lshr i64 %70, 32
  %73 = trunc i64 %72 to i32
  %74 = load i64, i64* %49, align 8
  %75 = add i64 %74, 96
  %76 = load i64, i64* %48, align 8
  %77 = icmp ugt i64 %75, %76
  br i1 %77, label %78, label %80

78:                                               ; preds = %69
  %79 = getelementptr inbounds %class.SkSWriter32, %class.SkSWriter32* %4, i64 0, i32 0
  call void @_ZN10SkWriter3213growToAtLeastEm(%class.SkWriter32* nonnull %79, i64 %75) #6
  br label %80

80:                                               ; preds = %69, %78
  store i64 %75, i64* %49, align 8
  %81 = getelementptr inbounds %class.SkSWriter32, %class.SkSWriter32* %4, i64 0, i32 0, i32 0
  %82 = load i8*, i8** %81, align 8
  %83 = getelementptr inbounds i8, i8* %82, i64 %74
  %84 = bitcast i8* %83 to i32*
  store i32 1, i32* %84, align 8
  %85 = getelementptr inbounds i8, i8* %83, i64 4
  %86 = bitcast i8* %85 to i32*
  store i32 %71, i32* %86, align 4
  %87 = getelementptr inbounds i8, i8* %83, i64 8
  %88 = bitcast i8* %87 to i32*
  store i32 %73, i32* %88, align 8
  %89 = load i32, i32* %60, align 8
  %90 = getelementptr inbounds i8, i8* %83, i64 12
  %91 = bitcast i8* %90 to i32*
  store i32 %89, i32* %91, align 4
  %92 = load i32, i32* %64, align 4
  %93 = getelementptr inbounds i8, i8* %83, i64 16
  %94 = bitcast i8* %93 to i32*
  store i32 %92, i32* %94, align 8
  %95 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 2, i32 0, i32 1
  %96 = load i32, i32* %95, align 8
  switch i32 %96, label %131 [
    i32 6, label %98
    i32 2, label %97
  ]

97:                                               ; preds = %80
  br label %98

98:                                               ; preds = %80, %97
  %99 = phi i32 [ 1, %97 ], [ 2, %80 ]
  %100 = getelementptr inbounds i8, i8* %83, i64 72
  %101 = bitcast i8* %100 to i32*
  store i32 %99, i32* %101, align 8
  %102 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 1
  %103 = load i64, i64* %102, align 8
  %104 = getelementptr inbounds i8, i8* %83, i64 80
  %105 = bitcast i8* %104 to i64*
  store i64 %103, i64* %105, align 8
  %106 = bitcast %class.SkPixmap* %5 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = getelementptr inbounds i8, i8* %83, i64 88
  %109 = bitcast i8* %108 to i64*
  store i64 %107, i64* %109, align 8
  %110 = getelementptr inbounds i8, i8* %83, i64 24
  %111 = bitcast i8* %110 to %struct.SkMCState*
  %112 = getelementptr inbounds %class.SkBaseDevice, %class.SkBaseDevice* %44, i64 0, i32 1, i32 2
  %113 = bitcast { i64, i64 }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %113) #6
  %114 = bitcast %class.SkBaseDevice* %44 to { i64, i64 } (%class.SkBaseDevice*)***
  %115 = load { i64, i64 } (%class.SkBaseDevice*)**, { i64, i64 } (%class.SkBaseDevice*)*** %114, align 8
  %116 = getelementptr inbounds { i64, i64 } (%class.SkBaseDevice*)*, { i64, i64 } (%class.SkBaseDevice*)** %115, i64 23
  %117 = load { i64, i64 } (%class.SkBaseDevice*)*, { i64, i64 } (%class.SkBaseDevice*)** %116, align 8
  %118 = call { i64, i64 } %117(%class.SkBaseDevice* %44) #6
  %119 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 0
  %120 = extractvalue { i64, i64 } %118, 0
  store i64 %120, i64* %119, align 8
  %121 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %122 = extractvalue { i64, i64 } %118, 1
  store i64 %122, i64* %121, align 8
  call fastcc void @_ZL14setup_MC_stateP9SkMCStateRK8SkMatrixRK7SkIRect(%struct.SkMCState* %111, %class.SkMatrix* dereferenceable(40) %112, %struct.SkIRect* nonnull dereferenceable(16) %7)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %113) #6
  %123 = getelementptr inbounds i8, i8* %11, i64 64
  %124 = bitcast i8* %123 to i32*
  store i32 1, i32* %124, align 8
  %125 = load i64, i64* %49, align 8
  %126 = call i8* @_Z15sk_malloc_flagsmj(i64 %125, i32 2) #6
  %127 = bitcast i8* %29 to i8**
  store i8* %126, i8** %127, align 8
  %128 = load i8*, i8** %81, align 8
  %129 = load i64, i64* %49, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %126, i8* align 1 %128, i64 %129, i1 false) #6
  %130 = bitcast i8* %11 to %class.SkCanvasState*
  br label %131

131:                                              ; preds = %98, %80, %67, %9, %59, %63
  %132 = phi i64 [ %34, %59 ], [ %34, %63 ], [ %34, %67 ], [ %34, %9 ], [ %34, %80 ], [ 0, %98 ]
  %133 = phi %class.SkCanvasState* [ null, %59 ], [ null, %63 ], [ null, %67 ], [ null, %9 ], [ null, %80 ], [ %130, %98 ]
  %134 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 2, i32 0, i32 0, i32 0
  %135 = load %class.SkColorSpace*, %class.SkColorSpace** %134, align 8
  %136 = icmp eq %class.SkColorSpace* %135, null
  br i1 %136, label %143, label %137

137:                                              ; preds = %131
  %138 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %135, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %139 = atomicrmw add i32* %138, i32 -1 acq_rel
  %140 = icmp eq i32 %139, 1
  br i1 %140, label %141, label %143

141:                                              ; preds = %137
  %142 = bitcast %class.SkColorSpace* %135 to i8*
  call void @_ZdlPv(i8* %142) #7
  br label %143

143:                                              ; preds = %131, %137, %141
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %57) #6
  %144 = getelementptr inbounds %class.SkSWriter32, %class.SkSWriter32* %4, i64 0, i32 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %145 = load i8*, i8** %144, align 8
  store i8* null, i8** %144, align 8
  %146 = icmp eq i8* %145, null
  br i1 %146, label %148, label %147

147:                                              ; preds = %143
  call void @_Z7sk_freePv(i8* nonnull %145) #6
  br label %148

148:                                              ; preds = %143, %147
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %45) #6
  %149 = inttoptr i64 %132 to %class.SkCanvasState_v1*
  %150 = icmp eq i64 %132, 0
  br i1 %150, label %187, label %151

151:                                              ; preds = %148
  %152 = getelementptr inbounds %class.SkCanvasState_v1, %class.SkCanvasState_v1* %149, i64 0, i32 2
  %153 = load i32, i32* %152, align 8
  %154 = icmp sgt i32 %153, 0
  br i1 %154, label %155, label %157

155:                                              ; preds = %151
  %156 = getelementptr inbounds %class.SkCanvasState_v1, %class.SkCanvasState_v1* %149, i64 0, i32 3
  br label %161

157:                                              ; preds = %173, %151
  %158 = getelementptr inbounds %class.SkCanvasState_v1, %class.SkCanvasState_v1* %149, i64 0, i32 1, i32 1
  %159 = load i32, i32* %158, align 4
  %160 = icmp sgt i32 %159, 0
  br i1 %160, label %178, label %182

161:                                              ; preds = %173, %155
  %162 = phi i32 [ %153, %155 ], [ %174, %173 ]
  %163 = phi i64 [ 0, %155 ], [ %175, %173 ]
  %164 = load %struct.SkCanvasLayerState*, %struct.SkCanvasLayerState** %156, align 8
  %165 = getelementptr inbounds %struct.SkCanvasLayerState, %struct.SkCanvasLayerState* %164, i64 %163, i32 5, i32 1
  %166 = load i32, i32* %165, align 4
  %167 = icmp sgt i32 %166, 0
  br i1 %167, label %168, label %173

168:                                              ; preds = %161
  %169 = getelementptr inbounds %struct.SkCanvasLayerState, %struct.SkCanvasLayerState* %164, i64 %163, i32 5, i32 2
  %170 = bitcast %struct.ClipRect** %169 to i8**
  %171 = load i8*, i8** %170, align 8
  call void @_Z7sk_freePv(i8* %171) #6
  %172 = load i32, i32* %152, align 8
  br label %173

173:                                              ; preds = %168, %161
  %174 = phi i32 [ %162, %161 ], [ %172, %168 ]
  %175 = add nuw nsw i64 %163, 1
  %176 = sext i32 %174 to i64
  %177 = icmp slt i64 %175, %176
  br i1 %177, label %161, label %157

178:                                              ; preds = %157
  %179 = getelementptr inbounds %class.SkCanvasState_v1, %class.SkCanvasState_v1* %149, i64 0, i32 1, i32 2
  %180 = bitcast %struct.ClipRect** %179 to i8**
  %181 = load i8*, i8** %180, align 8
  call void @_Z7sk_freePv(i8* %181) #6
  br label %182

182:                                              ; preds = %178, %157
  %183 = getelementptr inbounds %class.SkCanvasState_v1, %class.SkCanvasState_v1* %149, i64 0, i32 3
  %184 = bitcast %struct.SkCanvasLayerState** %183 to i8**
  %185 = load i8*, i8** %184, align 8
  call void @_Z7sk_freePv(i8* %185) #6
  %186 = inttoptr i64 %132 to i8*
  call void @_ZdlPv(i8* %186) #7
  br label %187

187:                                              ; preds = %182, %148, %1
  %188 = phi %class.SkCanvasState* [ null, %1 ], [ %133, %148 ], [ %133, %182 ]
  ret %class.SkCanvasState* %188
}

declare zeroext i1 @_ZNK8SkCanvas25androidFramework_isClipAAEv(%class.SkCanvas*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL14setup_MC_stateP9SkMCStateRK8SkMatrixRK7SkIRect(%struct.SkMCState* nocapture, %class.SkMatrix* nocapture readonly dereferenceable(40), %struct.SkIRect* nocapture readonly dereferenceable(16)) unnamed_addr #0 {
  %4 = alloca %class.SkSWriter32.40, align 8
  %5 = getelementptr inbounds %struct.SkMCState, %struct.SkMCState* %0, i64 0, i32 1
  store i32 0, i32* %5, align 4
  %6 = bitcast %class.SkMatrix* %1 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = bitcast %struct.SkMCState* %0 to i32*
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 1
  %10 = bitcast float* %9 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.SkMCState, %struct.SkMCState* %0, i64 0, i32 0, i64 1
  %13 = bitcast float* %12 to i32*
  store i32 %11, i32* %13, align 4
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 2
  %15 = bitcast float* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.SkMCState, %struct.SkMCState* %0, i64 0, i32 0, i64 2
  %18 = bitcast float* %17 to i32*
  store i32 %16, i32* %18, align 4
  %19 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 3
  %20 = bitcast float* %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %struct.SkMCState, %struct.SkMCState* %0, i64 0, i32 0, i64 3
  %23 = bitcast float* %22 to i32*
  store i32 %21, i32* %23, align 4
  %24 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 4
  %25 = bitcast float* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %struct.SkMCState, %struct.SkMCState* %0, i64 0, i32 0, i64 4
  %28 = bitcast float* %27 to i32*
  store i32 %26, i32* %28, align 4
  %29 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 5
  %30 = bitcast float* %29 to i32*
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %struct.SkMCState, %struct.SkMCState* %0, i64 0, i32 0, i64 5
  %33 = bitcast float* %32 to i32*
  store i32 %31, i32* %33, align 4
  %34 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 6
  %35 = bitcast float* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %struct.SkMCState, %struct.SkMCState* %0, i64 0, i32 0, i64 6
  %38 = bitcast float* %37 to i32*
  store i32 %36, i32* %38, align 4
  %39 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 7
  %40 = bitcast float* %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %struct.SkMCState, %struct.SkMCState* %0, i64 0, i32 0, i64 7
  %43 = bitcast float* %42 to i32*
  store i32 %41, i32* %43, align 4
  %44 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 8
  %45 = bitcast float* %44 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %struct.SkMCState, %struct.SkMCState* %0, i64 0, i32 0, i64 8
  %48 = bitcast float* %47 to i32*
  store i32 %46, i32* %48, align 4
  %49 = bitcast %class.SkSWriter32.40* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %49) #6
  %50 = getelementptr inbounds %class.SkSWriter32.40, %class.SkSWriter32.40* %4, i64 0, i32 1
  %51 = bitcast %union.anon.41* %50 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 -86, i64 16, i1 false)
  %52 = getelementptr inbounds %class.SkSWriter32.40, %class.SkSWriter32.40* %4, i64 0, i32 0, i32 1
  %53 = getelementptr inbounds %class.SkSWriter32.40, %class.SkSWriter32.40* %4, i64 0, i32 0, i32 3
  %54 = getelementptr inbounds %class.SkSWriter32.40, %class.SkSWriter32.40* %4, i64 0, i32 1
  %55 = bitcast %class.SkSWriter32.40* %4 to %union.anon.41**
  %56 = getelementptr inbounds %class.SkSWriter32.40, %class.SkSWriter32.40* %4, i64 0, i32 0, i32 4
  %57 = bitcast %class.SkAutoTMalloc* %56 to i64*
  store i64 0, i64* %57, align 8
  store %union.anon.41* %54, %union.anon.41** %55, align 8
  %58 = bitcast i64* %52 to <2 x i64>*
  store <2 x i64> <i64 16, i64 0>, <2 x i64>* %58, align 8
  %59 = bitcast i8** %53 to %union.anon.41**
  store %union.anon.41* %54, %union.anon.41** %59, align 8
  %60 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 2
  %61 = load i32, i32* %60, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = sext i32 %64 to i64
  %66 = sub nsw i64 %62, %65
  %67 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 3
  %68 = load i32, i32* %67, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 1
  %71 = load i32, i32* %70, align 4
  %72 = sext i32 %71 to i64
  %73 = sub nsw i64 %69, %72
  %74 = icmp slt i64 %66, 1
  %75 = icmp slt i64 %73, 1
  %76 = or i1 %74, %75
  br i1 %76, label %81, label %77

77:                                               ; preds = %3
  %78 = or i64 %73, %66
  %79 = add nsw i64 %78, 2147483648
  %80 = icmp ugt i64 %79, 4294967295
  br i1 %80, label %81, label %83

81:                                               ; preds = %3, %77
  %82 = getelementptr inbounds %class.SkSWriter32.40, %class.SkSWriter32.40* %4, i64 0, i32 0, i32 4, i32 0, i32 0, i32 0, i32 0
  store i8* null, i8** %82, align 8
  br label %103

83:                                               ; preds = %77
  store i32 1, i32* %5, align 4
  %84 = call i8* @_Z15sk_malloc_flagsmj(i64 16, i32 2) #6
  %85 = getelementptr inbounds %struct.SkMCState, %struct.SkMCState* %0, i64 0, i32 2
  %86 = bitcast %struct.ClipRect** %85 to i8**
  store i8* %84, i8** %86, align 8
  %87 = load i32, i32* %63, align 4
  %88 = bitcast i8* %84 to i32*
  store i32 %87, i32* %88, align 4
  %89 = load i32, i32* %70, align 4
  %90 = load %struct.ClipRect*, %struct.ClipRect** %85, align 8
  %91 = getelementptr inbounds %struct.ClipRect, %struct.ClipRect* %90, i64 0, i32 1
  store i32 %89, i32* %91, align 4
  %92 = load i32, i32* %60, align 4
  %93 = load %struct.ClipRect*, %struct.ClipRect** %85, align 8
  %94 = getelementptr inbounds %struct.ClipRect, %struct.ClipRect* %93, i64 0, i32 2
  store i32 %92, i32* %94, align 4
  %95 = load i32, i32* %67, align 4
  %96 = load %struct.ClipRect*, %struct.ClipRect** %85, align 8
  %97 = getelementptr inbounds %struct.ClipRect, %struct.ClipRect* %96, i64 0, i32 3
  store i32 %95, i32* %97, align 4
  %98 = getelementptr inbounds %class.SkSWriter32.40, %class.SkSWriter32.40* %4, i64 0, i32 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %99 = load i8*, i8** %98, align 8
  %100 = getelementptr inbounds %class.SkSWriter32.40, %class.SkSWriter32.40* %4, i64 0, i32 0, i32 4, i32 0, i32 0, i32 0, i32 0
  store i8* null, i8** %100, align 8
  %101 = icmp eq i8* %99, null
  br i1 %101, label %103, label %102

102:                                              ; preds = %83
  call void @_Z7sk_freePv(i8* nonnull %99) #6
  br label %103

103:                                              ; preds = %81, %83, %102
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %49) #6
  ret void
}

declare void @_ZNK8SkCanvas14getTotalMatrixEv(%class.SkMatrix* sret, %class.SkCanvas*) local_unnamed_addr #1

declare { i64, i64 } @_ZNK8SkCanvas19getDeviceClipBoundsEv(%class.SkCanvas*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare %class.SkBaseDevice* @_ZNK8SkCanvas9topDeviceEv(%class.SkCanvas*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare zeroext i1 @_ZN12SkBaseDevice12accessPixelsEP8SkPixmap(%class.SkBaseDevice*, %class.SkPixmap*) local_unnamed_addr #1

declare zeroext i1 @_ZNK12SkBaseDevice22isPixelAlignedToGlobalEv(%class.SkBaseDevice*) local_unnamed_addr #1

declare i64 @_ZNK12SkBaseDevice9getOriginEv(%class.SkBaseDevice*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkCanvas* @_ZN18SkCanvasStateUtils19MakeFromCanvasStateEPK13SkCanvasState(%class.SkCanvasState* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %class.SkBitmap, align 8
  %3 = alloca %struct.SkImageInfo, align 8
  %4 = alloca i64, align 8
  %5 = bitcast i64* %4 to %struct.SkIPoint*
  %6 = getelementptr inbounds %class.SkCanvasState, %class.SkCanvasState* %0, i64 4, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp slt i32 %7, 1
  br i1 %8, label %93, label %9

9:                                                ; preds = %1
  %10 = tail call i8* @_Znwm(i64 3264) #7
  %11 = bitcast i8* %10 to %class.SkCanvasStack*
  %12 = getelementptr inbounds %class.SkCanvasState, %class.SkCanvasState* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %class.SkCanvasState, %class.SkCanvasState* %0, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  tail call void @_ZN13SkCanvasStackC1Eii(%class.SkCanvasStack* nonnull %11, i32 %13, i32 %15) #6
  %16 = ptrtoint i8* %10 to i64
  %17 = getelementptr inbounds %class.SkCanvasState, %class.SkCanvasState* %0, i64 1
  %18 = bitcast %class.SkCanvasState* %17 to %struct.SkMCState*
  %19 = bitcast i8* %10 to %class.SkCanvas*
  tail call fastcc void @_ZL26setup_canvas_from_MC_stateRK9SkMCStateP8SkCanvas(%struct.SkMCState* dereferenceable(48) %18, %class.SkCanvas* nonnull %19)
  %20 = load i32, i32* %6, align 8
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %93

22:                                               ; preds = %9
  %23 = getelementptr inbounds %class.SkCanvasState, %class.SkCanvasState* %0, i64 4, i32 2
  %24 = bitcast i32* %23 to %struct.SkCanvasLayerState**
  %25 = bitcast %class.SkBitmap* %2 to i8*
  %26 = bitcast %struct.SkImageInfo* %3 to i8*
  %27 = bitcast %struct.SkImageInfo* %3 to i64*
  %28 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 0, i32 1
  %29 = bitcast i32* %28 to i64*
  %30 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1
  %31 = bitcast %struct.SkISize* %30 to i64*
  %32 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 0, i32 0, i32 0
  %33 = bitcast i64* %4 to i8*
  %34 = sext i32 %20 to i64
  br label %35

35:                                               ; preds = %22, %77
  %36 = phi i64 [ %34, %22 ], [ %37, %77 ]
  %37 = add nsw i64 %36, -1
  %38 = load %struct.SkCanvasLayerState*, %struct.SkCanvasLayerState** %24, align 8
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %25) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 56, i1 false) #6
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %2) #6
  %39 = getelementptr inbounds %struct.SkCanvasLayerState, %struct.SkCanvasLayerState* %38, i64 %37, i32 6, i32 0, i32 0
  %40 = load i32, i32* %39, align 8
  %41 = icmp eq i32 %40, 2
  %42 = icmp eq i32 %40, 1
  %43 = select i1 %42, i32 2, i32 0
  %44 = select i1 %41, i32 6, i32 %43
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %74, label %46

46:                                               ; preds = %35
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #6
  %47 = getelementptr inbounds %struct.SkCanvasLayerState, %struct.SkCanvasLayerState* %38, i64 %37, i32 3
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %struct.SkCanvasLayerState, %struct.SkCanvasLayerState* %38, i64 %37, i32 4
  %50 = load i32, i32* %49, align 8
  %51 = zext i32 %44 to i64
  %52 = or i64 %51, 8589934592
  %53 = zext i32 %50 to i64
  %54 = shl nuw i64 %53, 32
  %55 = zext i32 %48 to i64
  %56 = or i64 %54, %55
  store i64 0, i64* %27, align 8, !alias.scope !2
  store i64 %52, i64* %29, align 8, !alias.scope !2
  store i64 %56, i64* %31, align 8, !alias.scope !2
  %57 = getelementptr inbounds %struct.SkCanvasLayerState, %struct.SkCanvasLayerState* %38, i64 %37, i32 6, i32 0, i32 2
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds %struct.SkCanvasLayerState, %struct.SkCanvasLayerState* %38, i64 %37, i32 6, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = call zeroext i1 @_ZN8SkBitmap13installPixelsERK11SkImageInfoPvmPFvS3_S3_ES3_(%class.SkBitmap* nonnull %2, %struct.SkImageInfo* nonnull dereferenceable(24) %3, i8* %58, i64 %60, void (i8*, i8*)* null, i8* null) #6
  %62 = load %class.SkColorSpace*, %class.SkColorSpace** %32, align 8
  %63 = icmp eq %class.SkColorSpace* %62, null
  br i1 %63, label %70, label %64

64:                                               ; preds = %46
  %65 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %62, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = atomicrmw add i32* %65, i32 -1 acq_rel
  %67 = icmp eq i32 %66, 1
  br i1 %67, label %68, label %70

68:                                               ; preds = %64
  %69 = bitcast %class.SkColorSpace* %62 to i8*
  call void @_ZdlPv(i8* %69) #7
  br label %70

70:                                               ; preds = %68, %64, %46
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #6
  %71 = call i8* @_Znwm(i64 3232) #7
  %72 = bitcast i8* %71 to %class.SkCanvas*
  call void @_ZN8SkCanvasC1ERK8SkBitmap(%class.SkCanvas* nonnull %72, %class.SkBitmap* nonnull dereferenceable(56) %2) #6
  %73 = getelementptr inbounds %struct.SkCanvasLayerState, %struct.SkCanvasLayerState* %38, i64 %37, i32 5
  call fastcc void @_ZL26setup_canvas_from_MC_stateRK9SkMCStateP8SkCanvas(%struct.SkMCState* dereferenceable(48) %73, %class.SkCanvas* nonnull %72) #6
  br label %74

74:                                               ; preds = %35, %70
  %75 = phi %class.SkCanvas* [ %72, %70 ], [ null, %35 ]
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %2) #6
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %25) #6
  %76 = icmp eq %class.SkCanvas* %75, null
  br i1 %76, label %88, label %77

77:                                               ; preds = %74
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #6
  %78 = load %struct.SkCanvasLayerState*, %struct.SkCanvasLayerState** %24, align 8
  %79 = getelementptr inbounds %struct.SkCanvasLayerState, %struct.SkCanvasLayerState* %78, i64 %37, i32 1
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds %struct.SkCanvasLayerState, %struct.SkCanvasLayerState* %78, i64 %37, i32 2
  %82 = load i32, i32* %81, align 8
  %83 = zext i32 %82 to i64
  %84 = shl nuw i64 %83, 32
  %85 = zext i32 %80 to i64
  %86 = or i64 %84, %85
  store i64 %86, i64* %4, align 8
  call void @_ZN13SkCanvasStack10pushCanvasENSt3__110unique_ptrI8SkCanvasNS0_14default_deleteIS2_EEEERK8SkIPoint(%class.SkCanvasStack* nonnull %11, %class.SkCanvas* nonnull %75, %struct.SkIPoint* nonnull dereferenceable(8) %5) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #6
  %87 = icmp sgt i64 %37, 0
  br i1 %87, label %35, label %93

88:                                               ; preds = %74
  %89 = bitcast i8* %10 to void (%class.SkCanvasStack*)***
  %90 = load void (%class.SkCanvasStack*)**, void (%class.SkCanvasStack*)*** %89, align 8
  %91 = getelementptr inbounds void (%class.SkCanvasStack*)*, void (%class.SkCanvasStack*)** %90, i64 1
  %92 = load void (%class.SkCanvasStack*)*, void (%class.SkCanvasStack*)** %91, align 8
  call void %92(%class.SkCanvasStack* nonnull %11) #6
  br label %93

93:                                               ; preds = %77, %9, %88, %1
  %94 = phi i64 [ 0, %1 ], [ 0, %88 ], [ %16, %9 ], [ %16, %77 ]
  %95 = inttoptr i64 %94 to %class.SkCanvas*
  ret %class.SkCanvas* %95
}

declare void @_ZN13SkCanvasStackC1Eii(%class.SkCanvasStack*, i32, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL26setup_canvas_from_MC_stateRK9SkMCStateP8SkCanvas(%struct.SkMCState* nocapture readonly dereferenceable(48), %class.SkCanvas*) unnamed_addr #0 {
  %3 = bitcast %struct.SkMCState* %0 to i8*
  %4 = alloca %class.SkMatrix, align 4
  %5 = bitcast %class.SkMatrix* %4 to i8*
  %6 = alloca <4 x i32>, align 16
  %7 = bitcast <4 x i32>* %6 to %struct.SkIRect*
  %8 = alloca %struct.SkIRect, align 4
  %9 = alloca { <2 x float>, <2 x float> }, align 8
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %5) #6
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %5, i8* align 4 %3, i64 36, i1 false)
  store i32 128, i32* %10, align 4
  %11 = bitcast { <2 x float>, <2 x float> }* %9 to %struct.SkRect*
  %12 = bitcast <4 x i32>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 0, i64 16, i1 false)
  %13 = getelementptr inbounds %struct.SkMCState, %struct.SkMCState* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %58

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.SkMCState, %struct.SkMCState* %0, i64 0, i32 2
  %18 = load %struct.ClipRect*, %struct.ClipRect** %17, align 8
  %19 = bitcast %struct.ClipRect* %18 to <4 x i32>*
  %20 = load <4 x i32>, <4 x i32>* %19, align 4
  %21 = getelementptr inbounds <4 x i32>, <4 x i32>* %6, i64 0, i64 0
  %22 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %7, i64 0, i32 1
  %23 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %7, i64 0, i32 2
  %24 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %7, i64 0, i32 3
  store <4 x i32> %20, <4 x i32>* %6, align 16
  %25 = icmp eq i32 %14, 1
  %26 = extractelement <4 x i32> %20, i32 0
  %27 = extractelement <4 x i32> %20, i32 1
  %28 = extractelement <4 x i32> %20, i32 2
  %29 = extractelement <4 x i32> %20, i32 3
  br i1 %25, label %58, label %30

30:                                               ; preds = %16
  %31 = bitcast %struct.SkIRect* %8 to i8*
  %32 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 0
  %33 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 1
  %34 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 2
  %35 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 3
  br label %36

36:                                               ; preds = %51, %30
  %37 = phi %struct.ClipRect* [ %18, %30 ], [ %52, %51 ]
  %38 = phi i64 [ 1, %30 ], [ %47, %51 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #6
  %39 = getelementptr inbounds %struct.ClipRect, %struct.ClipRect* %37, i64 %38, i32 0
  %40 = load i32, i32* %39, align 4
  store i32 %40, i32* %32, align 4
  %41 = getelementptr inbounds %struct.ClipRect, %struct.ClipRect* %37, i64 %38, i32 1
  %42 = load i32, i32* %41, align 4
  store i32 %42, i32* %33, align 4
  %43 = getelementptr inbounds %struct.ClipRect, %struct.ClipRect* %37, i64 %38, i32 2
  %44 = load i32, i32* %43, align 4
  store i32 %44, i32* %34, align 4
  %45 = getelementptr inbounds %struct.ClipRect, %struct.ClipRect* %37, i64 %38, i32 3
  %46 = load i32, i32* %45, align 4
  store i32 %46, i32* %35, align 4
  call void @_ZN7SkIRect4joinERKS_(%struct.SkIRect* nonnull %7, %struct.SkIRect* nonnull dereferenceable(16) %8) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #6
  %47 = add nuw nsw i64 %38, 1
  %48 = load i32, i32* %13, align 4
  %49 = sext i32 %48 to i64
  %50 = icmp slt i64 %47, %49
  br i1 %50, label %51, label %53

51:                                               ; preds = %36
  %52 = load %struct.ClipRect*, %struct.ClipRect** %17, align 8
  br label %36

53:                                               ; preds = %36
  %54 = load i32, i32* %21, align 16
  %55 = load i32, i32* %22, align 4
  %56 = load i32, i32* %23, align 8
  %57 = load i32, i32* %24, align 4
  br label %58

58:                                               ; preds = %16, %53, %2
  %59 = phi i32 [ %57, %53 ], [ %29, %16 ], [ 0, %2 ]
  %60 = phi i32 [ %56, %53 ], [ %28, %16 ], [ 0, %2 ]
  %61 = phi i32 [ %55, %53 ], [ %27, %16 ], [ 0, %2 ]
  %62 = phi i32 [ %54, %53 ], [ %26, %16 ], [ 0, %2 ]
  %63 = bitcast { <2 x float>, <2 x float> }* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %63) #6
  %64 = sitofp i32 %62 to float
  %65 = insertelement <2 x float> undef, float %64, i32 0
  %66 = sitofp i32 %61 to float
  %67 = insertelement <2 x float> %65, float %66, i32 1
  %68 = sitofp i32 %60 to float
  %69 = insertelement <2 x float> undef, float %68, i32 0
  %70 = sitofp i32 %59 to float
  %71 = insertelement <2 x float> %69, float %70, i32 1
  %72 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %9, i64 0, i32 0
  store <2 x float> %67, <2 x float>* %72, align 8
  %73 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %9, i64 0, i32 1
  store <2 x float> %71, <2 x float>* %73, align 8
  call void @_ZN8SkCanvas8clipRectERK6SkRect8SkClipOpb(%class.SkCanvas* %1, %struct.SkRect* nonnull dereferenceable(16) %11, i32 1, i1 zeroext false) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %63) #6
  call void @_ZN8SkCanvas6concatERK8SkMatrix(%class.SkCanvas* %1, %class.SkMatrix* nonnull dereferenceable(40) %4) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %5) #6
  ret void
}

declare void @_ZN13SkCanvasStack10pushCanvasENSt3__110unique_ptrI8SkCanvasNS0_14default_deleteIS2_EEEERK8SkIPoint(%class.SkCanvasStack*, %class.SkCanvas*, %struct.SkIPoint* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18SkCanvasStateUtils18ReleaseCanvasStateEP13SkCanvasState(%class.SkCanvasState*) local_unnamed_addr #0 align 2 {
  %2 = icmp eq %class.SkCanvasState* %0, null
  br i1 %2, label %40, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %class.SkCanvasState, %class.SkCanvasState* %0, i64 4, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.SkCanvasState, %class.SkCanvasState* %0, i64 4, i32 2
  %9 = bitcast i32* %8 to %struct.SkCanvasLayerState**
  br label %14

10:                                               ; preds = %26, %3
  %11 = getelementptr inbounds %class.SkCanvasState, %class.SkCanvasState* %0, i64 3, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %31, label %35

14:                                               ; preds = %26, %7
  %15 = phi i32 [ %5, %7 ], [ %27, %26 ]
  %16 = phi i64 [ 0, %7 ], [ %28, %26 ]
  %17 = load %struct.SkCanvasLayerState*, %struct.SkCanvasLayerState** %9, align 8
  %18 = getelementptr inbounds %struct.SkCanvasLayerState, %struct.SkCanvasLayerState* %17, i64 %16, i32 5, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = getelementptr inbounds %struct.SkCanvasLayerState, %struct.SkCanvasLayerState* %17, i64 %16, i32 5, i32 2
  %23 = bitcast %struct.ClipRect** %22 to i8**
  %24 = load i8*, i8** %23, align 8
  tail call void @_Z7sk_freePv(i8* %24) #6
  %25 = load i32, i32* %4, align 8
  br label %26

26:                                               ; preds = %21, %14
  %27 = phi i32 [ %15, %14 ], [ %25, %21 ]
  %28 = add nuw nsw i64 %16, 1
  %29 = sext i32 %27 to i64
  %30 = icmp slt i64 %28, %29
  br i1 %30, label %14, label %10

31:                                               ; preds = %10
  %32 = getelementptr inbounds %class.SkCanvasState, %class.SkCanvasState* %0, i64 3, i32 2
  %33 = bitcast i32* %32 to i8**
  %34 = load i8*, i8** %33, align 8
  tail call void @_Z7sk_freePv(i8* %34) #6
  br label %35

35:                                               ; preds = %10, %31
  %36 = getelementptr inbounds %class.SkCanvasState, %class.SkCanvasState* %0, i64 4, i32 2
  %37 = bitcast i32* %36 to i8**
  %38 = load i8*, i8** %37, align 8
  tail call void @_Z7sk_freePv(i8* %38) #6
  %39 = bitcast %class.SkCanvasState* %0 to i8*
  tail call void @_ZdlPv(i8* %39) #7
  br label %40

40:                                               ; preds = %35, %1
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN10SkWriter3213growToAtLeastEm(%class.SkWriter32*, i64) local_unnamed_addr #1

declare i8* @_Z15sk_malloc_flagsmj(i64, i32) local_unnamed_addr #1

declare void @_ZN7SkIRect4joinERKS_(%struct.SkIRect*, %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZN8SkCanvas6concatERK8SkMatrix(%class.SkCanvas*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #1

declare void @_ZN8SkCanvas8clipRectERK6SkRect8SkClipOpb(%class.SkCanvas*, %struct.SkRect* dereferenceable(16), i32, i1 zeroext) local_unnamed_addr #1

declare void @_ZN8SkBitmapC1Ev(%class.SkBitmap*) unnamed_addr #1

declare void @_ZN8SkCanvasC1ERK8SkBitmap(%class.SkCanvas*, %class.SkBitmap* dereferenceable(56)) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #5

declare zeroext i1 @_ZN8SkBitmap13installPixelsERK11SkImageInfoPvmPFvS3_S3_ES3_(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24), i8*, i64, void (i8*, i8*)*, i8*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!4 = distinct !{!4, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
